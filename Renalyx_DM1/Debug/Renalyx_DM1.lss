
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a49c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000015a4  20070000  000aa49c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001250  200715a4  000aba40  000415a4  2**2
                  ALLOC
  3 .stack        00002004  200727f4  000acc90  000415a4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000415a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000415cd  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005a381  00000000  00000000  00041626  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a325  00000000  00000000  0009b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001137f  00000000  00000000  000a5ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002320  00000000  00000000  000b704b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001f50  00000000  00000000  000b936b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00035a32  00000000  00000000  000bb2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005f372  00000000  00000000  000f0ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000765ee  00000000  00000000  0015005f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008d84  00000000  00000000  001c6650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200747f8 	.word	0x200747f8
   80004:	0009c4a1 	.word	0x0009c4a1
   80008:	0009c499 	.word	0x0009c499
   8000c:	0009c499 	.word	0x0009c499
   80010:	0009c499 	.word	0x0009c499
   80014:	0009c499 	.word	0x0009c499
   80018:	0009c499 	.word	0x0009c499
	...
   8002c:	0009c499 	.word	0x0009c499
   80030:	0009c499 	.word	0x0009c499
   80034:	00000000 	.word	0x00000000
   80038:	0009c499 	.word	0x0009c499
   8003c:	00098401 	.word	0x00098401
   80040:	0009c499 	.word	0x0009c499
   80044:	0009c499 	.word	0x0009c499
   80048:	0009c499 	.word	0x0009c499
   8004c:	0009c499 	.word	0x0009c499
   80050:	0009c499 	.word	0x0009c499
   80054:	0009c499 	.word	0x0009c499
   80058:	0009c499 	.word	0x0009c499
   8005c:	0009c499 	.word	0x0009c499
   80060:	00098349 	.word	0x00098349
   80064:	0009c499 	.word	0x0009c499
   80068:	00000000 	.word	0x00000000
   8006c:	0009bcd9 	.word	0x0009bcd9
   80070:	0009bcf1 	.word	0x0009bcf1
   80074:	0009bd09 	.word	0x0009bd09
   80078:	0009bd21 	.word	0x0009bd21
	...
   80084:	0009c499 	.word	0x0009c499
   80088:	0009c499 	.word	0x0009c499
   8008c:	0009c499 	.word	0x0009c499
   80090:	0009c499 	.word	0x0009c499
   80094:	0009c499 	.word	0x0009c499
   80098:	0009c499 	.word	0x0009c499
   8009c:	0009c499 	.word	0x0009c499
   800a0:	0009c499 	.word	0x0009c499
   800a4:	00000000 	.word	0x00000000
   800a8:	0009c499 	.word	0x0009c499
   800ac:	00098385 	.word	0x00098385
   800b0:	0009d3b1 	.word	0x0009d3b1
   800b4:	0009c499 	.word	0x0009c499
   800b8:	000983dd 	.word	0x000983dd
   800bc:	0009c499 	.word	0x0009c499
   800c0:	0009c499 	.word	0x0009c499
   800c4:	000983b9 	.word	0x000983b9
   800c8:	0009c499 	.word	0x0009c499
   800cc:	0009c499 	.word	0x0009c499
   800d0:	0009c499 	.word	0x0009c499
   800d4:	0009c499 	.word	0x0009c499
   800d8:	0009c499 	.word	0x0009c499
   800dc:	0009c499 	.word	0x0009c499
   800e0:	0009c499 	.word	0x0009c499
   800e4:	0009c499 	.word	0x0009c499
   800e8:	0009c499 	.word	0x0009c499
   800ec:	00097545 	.word	0x00097545
   800f0:	0009c499 	.word	0x0009c499

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200715a4 	.word	0x200715a4
   80110:	00000000 	.word	0x00000000
   80114:	000aa49c 	.word	0x000aa49c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200715a8 	.word	0x200715a8
   80144:	000aa49c 	.word	0x000aa49c
   80148:	000aa49c 	.word	0x000aa49c
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d831      	bhi.n	801c2 <osc_enable+0x72>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b11      	ldr	r3, [pc, #68]	; (801cc <osc_enable+0x7c>)
   80188:	4798      	blx	r3
		break;
   8018a:	e01a      	b.n	801c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0f      	ldr	r3, [pc, #60]	; (801cc <osc_enable+0x7c>)
   80190:	4798      	blx	r3
		break;
   80192:	e016      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0e      	ldr	r3, [pc, #56]	; (801d0 <osc_enable+0x80>)
   80198:	4798      	blx	r3
		break;
   8019a:	e012      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0c      	ldr	r3, [pc, #48]	; (801d0 <osc_enable+0x80>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00e      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b0a      	ldr	r3, [pc, #40]	; (801d0 <osc_enable+0x80>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e00a      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	213e      	movs	r1, #62	; 0x3e
   801ae:	2000      	movs	r0, #0
   801b0:	4b08      	ldr	r3, [pc, #32]	; (801d4 <osc_enable+0x84>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e005      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	213e      	movs	r1, #62	; 0x3e
   801b8:	2001      	movs	r0, #1
   801ba:	4b06      	ldr	r3, [pc, #24]	; (801d4 <osc_enable+0x84>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	e000      	b.n	801c2 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   801c0:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   801c2:	bf00      	nop
   801c4:	3708      	adds	r7, #8
   801c6:	46bd      	mov	sp, r7
   801c8:	bd80      	pop	{r7, pc}
   801ca:	bf00      	nop
   801cc:	0009bdb9 	.word	0x0009bdb9
   801d0:	0009be25 	.word	0x0009be25
   801d4:	0009bec5 	.word	0x0009bec5

000801d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d8:	b580      	push	{r7, lr}
   801da:	b082      	sub	sp, #8
   801dc:	af00      	add	r7, sp, #0
   801de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	2b07      	cmp	r3, #7
   801e4:	d826      	bhi.n	80234 <osc_is_ready+0x5c>
   801e6:	a201      	add	r2, pc, #4	; (adr r2, 801ec <osc_is_ready+0x14>)
   801e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801ec:	0008020d 	.word	0x0008020d
   801f0:	00080211 	.word	0x00080211
   801f4:	00080211 	.word	0x00080211
   801f8:	00080223 	.word	0x00080223
   801fc:	00080223 	.word	0x00080223
   80200:	00080223 	.word	0x00080223
   80204:	00080223 	.word	0x00080223
   80208:	00080223 	.word	0x00080223
	case OSC_SLCK_32K_RC:
		return 1;
   8020c:	2301      	movs	r3, #1
   8020e:	e012      	b.n	80236 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80210:	4b0b      	ldr	r3, [pc, #44]	; (80240 <osc_is_ready+0x68>)
   80212:	4798      	blx	r3
   80214:	4603      	mov	r3, r0
   80216:	2b00      	cmp	r3, #0
   80218:	bf14      	ite	ne
   8021a:	2301      	movne	r3, #1
   8021c:	2300      	moveq	r3, #0
   8021e:	b2db      	uxtb	r3, r3
   80220:	e009      	b.n	80236 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80222:	4b08      	ldr	r3, [pc, #32]	; (80244 <osc_is_ready+0x6c>)
   80224:	4798      	blx	r3
   80226:	4603      	mov	r3, r0
   80228:	2b00      	cmp	r3, #0
   8022a:	bf14      	ite	ne
   8022c:	2301      	movne	r3, #1
   8022e:	2300      	moveq	r3, #0
   80230:	b2db      	uxtb	r3, r3
   80232:	e000      	b.n	80236 <osc_is_ready+0x5e>
	}

	return 0;
   80234:	2300      	movs	r3, #0
}
   80236:	4618      	mov	r0, r3
   80238:	3708      	adds	r7, #8
   8023a:	46bd      	mov	sp, r7
   8023c:	bd80      	pop	{r7, pc}
   8023e:	bf00      	nop
   80240:	0009bdf1 	.word	0x0009bdf1
   80244:	0009bf3d 	.word	0x0009bf3d

00080248 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80248:	b480      	push	{r7}
   8024a:	b083      	sub	sp, #12
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80250:	687b      	ldr	r3, [r7, #4]
   80252:	2b07      	cmp	r3, #7
   80254:	d825      	bhi.n	802a2 <osc_get_rate+0x5a>
   80256:	a201      	add	r2, pc, #4	; (adr r2, 8025c <osc_get_rate+0x14>)
   80258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8025c:	0008027d 	.word	0x0008027d
   80260:	00080283 	.word	0x00080283
   80264:	00080289 	.word	0x00080289
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
   80278:	0008029f 	.word	0x0008029f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8027c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80280:	e010      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80286:	e00d      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8028c:	e00a      	b.n	802a4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x68>)
   80290:	e008      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x6c>)
   80294:	e006      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80296:	4b08      	ldr	r3, [pc, #32]	; (802b8 <osc_get_rate+0x70>)
   80298:	e004      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <osc_get_rate+0x70>)
   8029c:	e002      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029e:	4b06      	ldr	r3, [pc, #24]	; (802b8 <osc_get_rate+0x70>)
   802a0:	e000      	b.n	802a4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   802a2:	2300      	movs	r3, #0
}
   802a4:	4618      	mov	r0, r3
   802a6:	370c      	adds	r7, #12
   802a8:	46bd      	mov	sp, r7
   802aa:	bc80      	pop	{r7}
   802ac:	4770      	bx	lr
   802ae:	bf00      	nop
   802b0:	003d0900 	.word	0x003d0900
   802b4:	007a1200 	.word	0x007a1200
   802b8:	00b71b00 	.word	0x00b71b00

000802bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802bc:	b580      	push	{r7, lr}
   802be:	b082      	sub	sp, #8
   802c0:	af00      	add	r7, sp, #0
   802c2:	4603      	mov	r3, r0
   802c4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c6:	bf00      	nop
   802c8:	79fb      	ldrb	r3, [r7, #7]
   802ca:	4618      	mov	r0, r3
   802cc:	4b05      	ldr	r3, [pc, #20]	; (802e4 <osc_wait_ready+0x28>)
   802ce:	4798      	blx	r3
   802d0:	4603      	mov	r3, r0
   802d2:	f083 0301 	eor.w	r3, r3, #1
   802d6:	b2db      	uxtb	r3, r3
   802d8:	2b00      	cmp	r3, #0
   802da:	d1f5      	bne.n	802c8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802dc:	bf00      	nop
   802de:	3708      	adds	r7, #8
   802e0:	46bd      	mov	sp, r7
   802e2:	bd80      	pop	{r7, pc}
   802e4:	000801d9 	.word	0x000801d9

000802e8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b086      	sub	sp, #24
   802ec:	af00      	add	r7, sp, #0
   802ee:	60f8      	str	r0, [r7, #12]
   802f0:	607a      	str	r2, [r7, #4]
   802f2:	603b      	str	r3, [r7, #0]
   802f4:	460b      	mov	r3, r1
   802f6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f8:	687b      	ldr	r3, [r7, #4]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d107      	bne.n	8030e <pll_config_init+0x26>
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	2b00      	cmp	r3, #0
   80302:	d104      	bne.n	8030e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80304:	68fb      	ldr	r3, [r7, #12]
   80306:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8030a:	601a      	str	r2, [r3, #0]
   8030c:	e019      	b.n	80342 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030e:	7afb      	ldrb	r3, [r7, #11]
   80310:	4618      	mov	r0, r3
   80312:	4b0e      	ldr	r3, [pc, #56]	; (8034c <pll_config_init+0x64>)
   80314:	4798      	blx	r3
   80316:	4602      	mov	r2, r0
   80318:	687b      	ldr	r3, [r7, #4]
   8031a:	fbb2 f3f3 	udiv	r3, r2, r3
   8031e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80320:	697b      	ldr	r3, [r7, #20]
   80322:	683a      	ldr	r2, [r7, #0]
   80324:	fb02 f303 	mul.w	r3, r2, r3
   80328:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	3b01      	subs	r3, #1
   8032e:	041a      	lsls	r2, r3, #16
   80330:	4b07      	ldr	r3, [pc, #28]	; (80350 <pll_config_init+0x68>)
   80332:	4013      	ands	r3, r2
   80334:	687a      	ldr	r2, [r7, #4]
   80336:	b2d2      	uxtb	r2, r2
   80338:	4313      	orrs	r3, r2
   8033a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033e:	68fb      	ldr	r3, [r7, #12]
   80340:	601a      	str	r2, [r3, #0]
	}
}
   80342:	bf00      	nop
   80344:	3718      	adds	r7, #24
   80346:	46bd      	mov	sp, r7
   80348:	bd80      	pop	{r7, pc}
   8034a:	bf00      	nop
   8034c:	00080249 	.word	0x00080249
   80350:	07ff0000 	.word	0x07ff0000

00080354 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80354:	b580      	push	{r7, lr}
   80356:	b082      	sub	sp, #8
   80358:	af00      	add	r7, sp, #0
   8035a:	6078      	str	r0, [r7, #4]
   8035c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8035e:	683b      	ldr	r3, [r7, #0]
   80360:	2b00      	cmp	r3, #0
   80362:	d108      	bne.n	80376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <pll_enable+0x38>)
   80366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80368:	4a09      	ldr	r2, [pc, #36]	; (80390 <pll_enable+0x3c>)
   8036a:	687b      	ldr	r3, [r7, #4]
   8036c:	681b      	ldr	r3, [r3, #0]
   8036e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80372:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80374:	e005      	b.n	80382 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80376:	4a06      	ldr	r2, [pc, #24]	; (80390 <pll_enable+0x3c>)
   80378:	687b      	ldr	r3, [r7, #4]
   8037a:	681b      	ldr	r3, [r3, #0]
   8037c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80380:	61d3      	str	r3, [r2, #28]
	}
}
   80382:	bf00      	nop
   80384:	3708      	adds	r7, #8
   80386:	46bd      	mov	sp, r7
   80388:	bd80      	pop	{r7, pc}
   8038a:	bf00      	nop
   8038c:	0009bf55 	.word	0x0009bf55
   80390:	400e0600 	.word	0x400e0600

00080394 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80394:	b580      	push	{r7, lr}
   80396:	b082      	sub	sp, #8
   80398:	af00      	add	r7, sp, #0
   8039a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b00      	cmp	r3, #0
   803a0:	d103      	bne.n	803aa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <pll_is_locked+0x24>)
   803a4:	4798      	blx	r3
   803a6:	4603      	mov	r3, r0
   803a8:	e002      	b.n	803b0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <pll_is_locked+0x28>)
   803ac:	4798      	blx	r3
   803ae:	4603      	mov	r3, r0
	}
}
   803b0:	4618      	mov	r0, r3
   803b2:	3708      	adds	r7, #8
   803b4:	46bd      	mov	sp, r7
   803b6:	bd80      	pop	{r7, pc}
   803b8:	0009bf6d 	.word	0x0009bf6d
   803bc:	0009bf85 	.word	0x0009bf85

000803c0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803c0:	b580      	push	{r7, lr}
   803c2:	b082      	sub	sp, #8
   803c4:	af00      	add	r7, sp, #0
   803c6:	4603      	mov	r3, r0
   803c8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ca:	79fb      	ldrb	r3, [r7, #7]
   803cc:	3b03      	subs	r3, #3
   803ce:	2b04      	cmp	r3, #4
   803d0:	d808      	bhi.n	803e4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803d2:	79fb      	ldrb	r3, [r7, #7]
   803d4:	4618      	mov	r0, r3
   803d6:	4b06      	ldr	r3, [pc, #24]	; (803f0 <pll_enable_source+0x30>)
   803d8:	4798      	blx	r3
		osc_wait_ready(e_src);
   803da:	79fb      	ldrb	r3, [r7, #7]
   803dc:	4618      	mov	r0, r3
   803de:	4b05      	ldr	r3, [pc, #20]	; (803f4 <pll_enable_source+0x34>)
   803e0:	4798      	blx	r3
		break;
   803e2:	e000      	b.n	803e6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803e4:	bf00      	nop
	}
}
   803e6:	bf00      	nop
   803e8:	3708      	adds	r7, #8
   803ea:	46bd      	mov	sp, r7
   803ec:	bd80      	pop	{r7, pc}
   803ee:	bf00      	nop
   803f0:	00080151 	.word	0x00080151
   803f4:	000802bd 	.word	0x000802bd

000803f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803f8:	b580      	push	{r7, lr}
   803fa:	b082      	sub	sp, #8
   803fc:	af00      	add	r7, sp, #0
   803fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80400:	bf00      	nop
   80402:	6878      	ldr	r0, [r7, #4]
   80404:	4b04      	ldr	r3, [pc, #16]	; (80418 <pll_wait_for_lock+0x20>)
   80406:	4798      	blx	r3
   80408:	4603      	mov	r3, r0
   8040a:	2b00      	cmp	r3, #0
   8040c:	d0f9      	beq.n	80402 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8040e:	2300      	movs	r3, #0
}
   80410:	4618      	mov	r0, r3
   80412:	3708      	adds	r7, #8
   80414:	46bd      	mov	sp, r7
   80416:	bd80      	pop	{r7, pc}
   80418:	00080395 	.word	0x00080395

0008041c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80420:	2006      	movs	r0, #6
   80422:	4b04      	ldr	r3, [pc, #16]	; (80434 <sysclk_get_main_hz+0x18>)
   80424:	4798      	blx	r3
   80426:	4602      	mov	r2, r0
   80428:	4613      	mov	r3, r2
   8042a:	00db      	lsls	r3, r3, #3
   8042c:	1a9b      	subs	r3, r3, r2
   8042e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80430:	4618      	mov	r0, r3
   80432:	bd80      	pop	{r7, pc}
   80434:	00080249 	.word	0x00080249

00080438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80438:	b580      	push	{r7, lr}
   8043a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8043c:	4b02      	ldr	r3, [pc, #8]	; (80448 <sysclk_get_cpu_hz+0x10>)
   8043e:	4798      	blx	r3
   80440:	4603      	mov	r3, r0
   80442:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80444:	4618      	mov	r0, r3
   80446:	bd80      	pop	{r7, pc}
   80448:	0008041d 	.word	0x0008041d

0008044c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8044c:	b590      	push	{r4, r7, lr}
   8044e:	b083      	sub	sp, #12
   80450:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <sysclk_init+0x48>)
   80454:	4798      	blx	r3
   80456:	4603      	mov	r3, r0
   80458:	4618      	mov	r0, r3
   8045a:	4b0f      	ldr	r3, [pc, #60]	; (80498 <sysclk_init+0x4c>)
   8045c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8045e:	2006      	movs	r0, #6
   80460:	4b0e      	ldr	r3, [pc, #56]	; (8049c <sysclk_init+0x50>)
   80462:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80464:	1d38      	adds	r0, r7, #4
   80466:	230e      	movs	r3, #14
   80468:	2201      	movs	r2, #1
   8046a:	2106      	movs	r1, #6
   8046c:	4c0c      	ldr	r4, [pc, #48]	; (804a0 <sysclk_init+0x54>)
   8046e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80470:	1d3b      	adds	r3, r7, #4
   80472:	2100      	movs	r1, #0
   80474:	4618      	mov	r0, r3
   80476:	4b0b      	ldr	r3, [pc, #44]	; (804a4 <sysclk_init+0x58>)
   80478:	4798      	blx	r3
		pll_wait_for_lock(0);
   8047a:	2000      	movs	r0, #0
   8047c:	4b0a      	ldr	r3, [pc, #40]	; (804a8 <sysclk_init+0x5c>)
   8047e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80480:	2010      	movs	r0, #16
   80482:	4b0a      	ldr	r3, [pc, #40]	; (804ac <sysclk_init+0x60>)
   80484:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80486:	4b0a      	ldr	r3, [pc, #40]	; (804b0 <sysclk_init+0x64>)
   80488:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bd90      	pop	{r4, r7, pc}
   80492:	bf00      	nop
   80494:	00080439 	.word	0x00080439
   80498:	0009c6cd 	.word	0x0009c6cd
   8049c:	000803c1 	.word	0x000803c1
   804a0:	000802e9 	.word	0x000802e9
   804a4:	00080355 	.word	0x00080355
   804a8:	000803f9 	.word	0x000803f9
   804ac:	0009bd39 	.word	0x0009bd39
   804b0:	0009c549 	.word	0x0009c549

000804b4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804b4:	b580      	push	{r7, lr}
   804b6:	b084      	sub	sp, #16
   804b8:	af00      	add	r7, sp, #0
   804ba:	60f8      	str	r0, [r7, #12]
   804bc:	60b9      	str	r1, [r7, #8]
   804be:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	021b      	lsls	r3, r3, #8
   804c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804c8:	68bb      	ldr	r3, [r7, #8]
   804ca:	4313      	orrs	r3, r2
   804cc:	4619      	mov	r1, r3
   804ce:	68f8      	ldr	r0, [r7, #12]
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <efc_init+0x2c>)
   804d2:	4798      	blx	r3
	return EFC_RC_OK;
   804d4:	2300      	movs	r3, #0
}
   804d6:	4618      	mov	r0, r3
   804d8:	3710      	adds	r7, #16
   804da:	46bd      	mov	sp, r7
   804dc:	bd80      	pop	{r7, pc}
   804de:	bf00      	nop
   804e0:	200700b5 	.word	0x200700b5

000804e4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804e4:	b580      	push	{r7, lr}
   804e6:	b084      	sub	sp, #16
   804e8:	af00      	add	r7, sp, #0
   804ea:	6078      	str	r0, [r7, #4]
   804ec:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804ee:	687b      	ldr	r3, [r7, #4]
   804f0:	681b      	ldr	r3, [r3, #0]
   804f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804f6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804f8:	683b      	ldr	r3, [r7, #0]
   804fa:	021b      	lsls	r3, r3, #8
   804fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	4313      	orrs	r3, r2
   80504:	4619      	mov	r1, r3
   80506:	6878      	ldr	r0, [r7, #4]
   80508:	4b02      	ldr	r3, [pc, #8]	; (80514 <efc_set_wait_state+0x30>)
   8050a:	4798      	blx	r3
}
   8050c:	bf00      	nop
   8050e:	3710      	adds	r7, #16
   80510:	46bd      	mov	sp, r7
   80512:	bd80      	pop	{r7, pc}
   80514:	200700b5 	.word	0x200700b5

00080518 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	681b      	ldr	r3, [r3, #0]
   80524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80528:	0a1b      	lsrs	r3, r3, #8
}
   8052a:	4618      	mov	r0, r3
   8052c:	370c      	adds	r7, #12
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80534:	b580      	push	{r7, lr}
   80536:	b086      	sub	sp, #24
   80538:	af00      	add	r7, sp, #0
   8053a:	60f8      	str	r0, [r7, #12]
   8053c:	60b9      	str	r1, [r7, #8]
   8053e:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80540:	68bb      	ldr	r3, [r7, #8]
   80542:	2b0e      	cmp	r3, #14
   80544:	d002      	beq.n	8054c <efc_perform_command+0x18>
   80546:	68bb      	ldr	r3, [r7, #8]
   80548:	2b0f      	cmp	r3, #15
   8054a:	d102      	bne.n	80552 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8054c:	f04f 33ff 	mov.w	r3, #4294967295
   80550:	e020      	b.n	80594 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	4a11      	ldr	r2, [pc, #68]	; (8059c <efc_perform_command+0x68>)
   80556:	4293      	cmp	r3, r2
   80558:	bf14      	ite	ne
   8055a:	2301      	movne	r3, #1
   8055c:	2300      	moveq	r3, #0
   8055e:	b2db      	uxtb	r3, r3
   80560:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80562:	4b0f      	ldr	r3, [pc, #60]	; (805a0 <efc_perform_command+0x6c>)
   80564:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   80566:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   80568:	4b0e      	ldr	r3, [pc, #56]	; (805a4 <efc_perform_command+0x70>)
   8056a:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <efc_perform_command+0x70>)
   8056e:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80570:	687b      	ldr	r3, [r7, #4]
   80572:	021b      	lsls	r3, r3, #8
   80574:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80578:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8057c:	68b9      	ldr	r1, [r7, #8]
   8057e:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80580:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80582:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   80586:	4619      	mov	r1, r3
   80588:	6978      	ldr	r0, [r7, #20]
   8058a:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	689b      	ldr	r3, [r3, #8]
   80590:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80594:	4618      	mov	r0, r3
   80596:	3718      	adds	r7, #24
   80598:	46bd      	mov	sp, r7
   8059a:	bd80      	pop	{r7, pc}
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	00100008 	.word	0x00100008
   805a4:	200715c0 	.word	0x200715c0

000805a8 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   805a8:	b480      	push	{r7}
   805aa:	b083      	sub	sp, #12
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	68db      	ldr	r3, [r3, #12]
}
   805b4:	4618      	mov	r0, r3
   805b6:	370c      	adds	r7, #12
   805b8:	46bd      	mov	sp, r7
   805ba:	bc80      	pop	{r7}
   805bc:	4770      	bx	lr
   805be:	bf00      	nop

000805c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805c0:	b580      	push	{r7, lr}
   805c2:	b082      	sub	sp, #8
   805c4:	af00      	add	r7, sp, #0
   805c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805c8:	6878      	ldr	r0, [r7, #4]
   805ca:	4b03      	ldr	r3, [pc, #12]	; (805d8 <sysclk_enable_peripheral_clock+0x18>)
   805cc:	4798      	blx	r3
}
   805ce:	bf00      	nop
   805d0:	3708      	adds	r7, #8
   805d2:	46bd      	mov	sp, r7
   805d4:	bd80      	pop	{r7, pc}
   805d6:	bf00      	nop
   805d8:	0009bf9d 	.word	0x0009bf9d

000805dc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b082      	sub	sp, #8
   805e0:	af00      	add	r7, sp, #0
   805e2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	4a05      	ldr	r2, [pc, #20]	; (805fc <spi_enable_clock+0x20>)
   805e8:	4293      	cmp	r3, r2
   805ea:	d102      	bne.n	805f2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805ec:	2018      	movs	r0, #24
   805ee:	4b04      	ldr	r3, [pc, #16]	; (80600 <spi_enable_clock+0x24>)
   805f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805f2:	bf00      	nop
   805f4:	3708      	adds	r7, #8
   805f6:	46bd      	mov	sp, r7
   805f8:	bd80      	pop	{r7, pc}
   805fa:	bf00      	nop
   805fc:	40008000 	.word	0x40008000
   80600:	000805c1 	.word	0x000805c1

00080604 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80604:	b480      	push	{r7}
   80606:	b083      	sub	sp, #12
   80608:	af00      	add	r7, sp, #0
   8060a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	2208      	movs	r2, #8
   80610:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2220      	movs	r2, #32
   80616:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80618:	687b      	ldr	r3, [r7, #4]
   8061a:	2204      	movs	r2, #4
   8061c:	601a      	str	r2, [r3, #0]
}
   8061e:	bf00      	nop
   80620:	370c      	adds	r7, #12
   80622:	46bd      	mov	sp, r7
   80624:	bc80      	pop	{r7}
   80626:	4770      	bx	lr

00080628 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80628:	b580      	push	{r7, lr}
   8062a:	b084      	sub	sp, #16
   8062c:	af00      	add	r7, sp, #0
   8062e:	6078      	str	r0, [r7, #4]
   80630:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80632:	2300      	movs	r3, #0
   80634:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	f04f 32ff 	mov.w	r2, #4294967295
   8063c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4b0e      	ldr	r3, [pc, #56]	; (80680 <twi_master_init+0x58>)
   80646:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80648:	6878      	ldr	r0, [r7, #4]
   8064a:	4b0e      	ldr	r3, [pc, #56]	; (80684 <twi_master_init+0x5c>)
   8064c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8064e:	683b      	ldr	r3, [r7, #0]
   80650:	6859      	ldr	r1, [r3, #4]
   80652:	683b      	ldr	r3, [r7, #0]
   80654:	681b      	ldr	r3, [r3, #0]
   80656:	461a      	mov	r2, r3
   80658:	6878      	ldr	r0, [r7, #4]
   8065a:	4b0b      	ldr	r3, [pc, #44]	; (80688 <twi_master_init+0x60>)
   8065c:	4798      	blx	r3
   8065e:	4603      	mov	r3, r0
   80660:	2b01      	cmp	r3, #1
   80662:	d101      	bne.n	80668 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80664:	2301      	movs	r3, #1
   80666:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	7a5b      	ldrb	r3, [r3, #9]
   8066c:	2b01      	cmp	r3, #1
   8066e:	d102      	bne.n	80676 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	2240      	movs	r2, #64	; 0x40
   80674:	601a      	str	r2, [r3, #0]
	}

	return status;
   80676:	68fb      	ldr	r3, [r7, #12]
}
   80678:	4618      	mov	r0, r3
   8067a:	3710      	adds	r7, #16
   8067c:	46bd      	mov	sp, r7
   8067e:	bd80      	pop	{r7, pc}
   80680:	00080705 	.word	0x00080705
   80684:	00080605 	.word	0x00080605
   80688:	0008068d 	.word	0x0008068d

0008068c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8068c:	b480      	push	{r7}
   8068e:	b087      	sub	sp, #28
   80690:	af00      	add	r7, sp, #0
   80692:	60f8      	str	r0, [r7, #12]
   80694:	60b9      	str	r1, [r7, #8]
   80696:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80698:	2300      	movs	r3, #0
   8069a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	4a17      	ldr	r2, [pc, #92]	; (806fc <twi_set_speed+0x70>)
   806a0:	4293      	cmp	r3, r2
   806a2:	d901      	bls.n	806a8 <twi_set_speed+0x1c>
		return FAIL;
   806a4:	2301      	movs	r3, #1
   806a6:	e024      	b.n	806f2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   806a8:	68bb      	ldr	r3, [r7, #8]
   806aa:	005b      	lsls	r3, r3, #1
   806ac:	687a      	ldr	r2, [r7, #4]
   806ae:	fbb2 f3f3 	udiv	r3, r2, r3
   806b2:	3b04      	subs	r3, #4
   806b4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b6:	e005      	b.n	806c4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806b8:	697b      	ldr	r3, [r7, #20]
   806ba:	3301      	adds	r3, #1
   806bc:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806be:	693b      	ldr	r3, [r7, #16]
   806c0:	085b      	lsrs	r3, r3, #1
   806c2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c4:	693b      	ldr	r3, [r7, #16]
   806c6:	2bff      	cmp	r3, #255	; 0xff
   806c8:	d902      	bls.n	806d0 <twi_set_speed+0x44>
   806ca:	697b      	ldr	r3, [r7, #20]
   806cc:	2b06      	cmp	r3, #6
   806ce:	d9f3      	bls.n	806b8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806d0:	4a0b      	ldr	r2, [pc, #44]	; (80700 <twi_set_speed+0x74>)
   806d2:	693b      	ldr	r3, [r7, #16]
   806d4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806d6:	693b      	ldr	r3, [r7, #16]
   806d8:	b2da      	uxtb	r2, r3
   806da:	693b      	ldr	r3, [r7, #16]
   806dc:	021b      	lsls	r3, r3, #8
   806de:	b29b      	uxth	r3, r3
   806e0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806e2:	697b      	ldr	r3, [r7, #20]
   806e4:	041b      	lsls	r3, r3, #16
   806e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806ea:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806f0:	2300      	movs	r3, #0
}
   806f2:	4618      	mov	r0, r3
   806f4:	371c      	adds	r7, #28
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr
   806fc:	00061a80 	.word	0x00061a80
   80700:	200715c4 	.word	0x200715c4

00080704 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80704:	b480      	push	{r7}
   80706:	b083      	sub	sp, #12
   80708:	af00      	add	r7, sp, #0
   8070a:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8070c:	687b      	ldr	r3, [r7, #4]
   8070e:	2280      	movs	r2, #128	; 0x80
   80710:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80712:	687b      	ldr	r3, [r7, #4]
   80714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80716:	bf00      	nop
   80718:	370c      	adds	r7, #12
   8071a:	46bd      	mov	sp, r7
   8071c:	bc80      	pop	{r7}
   8071e:	4770      	bx	lr

00080720 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80720:	b480      	push	{r7}
   80722:	b087      	sub	sp, #28
   80724:	af00      	add	r7, sp, #0
   80726:	60f8      	str	r0, [r7, #12]
   80728:	60b9      	str	r1, [r7, #8]
   8072a:	607a      	str	r2, [r7, #4]
   8072c:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   8072e:	68bb      	ldr	r3, [r7, #8]
   80730:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   80734:	d30b      	bcc.n	8074e <translate_address+0x2e>
		p_efc = EFC1;
   80736:	4b17      	ldr	r3, [pc, #92]	; (80794 <translate_address+0x74>)
   80738:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   8073a:	68bb      	ldr	r3, [r7, #8]
   8073c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80740:	0a1b      	lsrs	r3, r3, #8
   80742:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80744:	68bb      	ldr	r3, [r7, #8]
   80746:	b29b      	uxth	r3, r3
   80748:	b2db      	uxtb	r3, r3
   8074a:	823b      	strh	r3, [r7, #16]
   8074c:	e00a      	b.n	80764 <translate_address+0x44>
	} else {
		p_efc = EFC0;
   8074e:	4b12      	ldr	r3, [pc, #72]	; (80798 <translate_address+0x78>)
   80750:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   80752:	68bb      	ldr	r3, [r7, #8]
   80754:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80758:	0a1b      	lsrs	r3, r3, #8
   8075a:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   8075c:	68bb      	ldr	r3, [r7, #8]
   8075e:	b29b      	uxth	r3, r3
   80760:	b2db      	uxtb	r3, r3
   80762:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   80764:	68fb      	ldr	r3, [r7, #12]
   80766:	2b00      	cmp	r3, #0
   80768:	d002      	beq.n	80770 <translate_address+0x50>
		*pp_efc = p_efc;
   8076a:	68fb      	ldr	r3, [r7, #12]
   8076c:	697a      	ldr	r2, [r7, #20]
   8076e:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80770:	687b      	ldr	r3, [r7, #4]
   80772:	2b00      	cmp	r3, #0
   80774:	d002      	beq.n	8077c <translate_address+0x5c>
		*pus_page = us_page;
   80776:	687b      	ldr	r3, [r7, #4]
   80778:	8a7a      	ldrh	r2, [r7, #18]
   8077a:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   8077c:	683b      	ldr	r3, [r7, #0]
   8077e:	2b00      	cmp	r3, #0
   80780:	d002      	beq.n	80788 <translate_address+0x68>
		*pus_offset = us_offset;
   80782:	683b      	ldr	r3, [r7, #0]
   80784:	8a3a      	ldrh	r2, [r7, #16]
   80786:	801a      	strh	r2, [r3, #0]
	}
}
   80788:	bf00      	nop
   8078a:	371c      	adds	r7, #28
   8078c:	46bd      	mov	sp, r7
   8078e:	bc80      	pop	{r7}
   80790:	4770      	bx	lr
   80792:	bf00      	nop
   80794:	400e0c00 	.word	0x400e0c00
   80798:	400e0a00 	.word	0x400e0a00

0008079c <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   8079c:	b480      	push	{r7}
   8079e:	b087      	sub	sp, #28
   807a0:	af00      	add	r7, sp, #0
   807a2:	60f8      	str	r0, [r7, #12]
   807a4:	607b      	str	r3, [r7, #4]
   807a6:	460b      	mov	r3, r1
   807a8:	817b      	strh	r3, [r7, #10]
   807aa:	4613      	mov	r3, r2
   807ac:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807ae:	68fb      	ldr	r3, [r7, #12]
   807b0:	4a0d      	ldr	r2, [pc, #52]	; (807e8 <compute_address+0x4c>)
   807b2:	4293      	cmp	r3, r2
   807b4:	d106      	bne.n	807c4 <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   807b6:	897b      	ldrh	r3, [r7, #10]
   807b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   807bc:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807be:	893b      	ldrh	r3, [r7, #8]
   807c0:	4413      	add	r3, r2
   807c2:	e005      	b.n	807d0 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   807c4:	897b      	ldrh	r3, [r7, #10]
   807c6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   807ca:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807cc:	893b      	ldrh	r3, [r7, #8]
   807ce:	4413      	add	r3, r2
   807d0:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   807d2:	687b      	ldr	r3, [r7, #4]
   807d4:	2b00      	cmp	r3, #0
   807d6:	d002      	beq.n	807de <compute_address+0x42>
		*pul_addr = ul_addr;
   807d8:	687b      	ldr	r3, [r7, #4]
   807da:	697a      	ldr	r2, [r7, #20]
   807dc:	601a      	str	r2, [r3, #0]
	}
}
   807de:	bf00      	nop
   807e0:	371c      	adds	r7, #28
   807e2:	46bd      	mov	sp, r7
   807e4:	bc80      	pop	{r7}
   807e6:	4770      	bx	lr
   807e8:	400e0a00 	.word	0x400e0a00

000807ec <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   807ec:	b480      	push	{r7}
   807ee:	b087      	sub	sp, #28
   807f0:	af00      	add	r7, sp, #0
   807f2:	60f8      	str	r0, [r7, #12]
   807f4:	60b9      	str	r1, [r7, #8]
   807f6:	607a      	str	r2, [r7, #4]
   807f8:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   807fa:	68fb      	ldr	r3, [r7, #12]
   807fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80804:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   80806:	68bb      	ldr	r3, [r7, #8]
   80808:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   8080c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80810:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   80814:	333f      	adds	r3, #63	; 0x3f
   80816:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   80818:	687b      	ldr	r3, [r7, #4]
   8081a:	2b00      	cmp	r3, #0
   8081c:	d002      	beq.n	80824 <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   8081e:	687b      	ldr	r3, [r7, #4]
   80820:	697a      	ldr	r2, [r7, #20]
   80822:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   80824:	683b      	ldr	r3, [r7, #0]
   80826:	2b00      	cmp	r3, #0
   80828:	d002      	beq.n	80830 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   8082a:	683b      	ldr	r3, [r7, #0]
   8082c:	693a      	ldr	r2, [r7, #16]
   8082e:	601a      	str	r2, [r3, #0]
	}
}
   80830:	bf00      	nop
   80832:	371c      	adds	r7, #28
   80834:	46bd      	mov	sp, r7
   80836:	bc80      	pop	{r7}
   80838:	4770      	bx	lr
   8083a:	bf00      	nop

0008083c <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   8083c:	b580      	push	{r7, lr}
   8083e:	b082      	sub	sp, #8
   80840:	af00      	add	r7, sp, #0
   80842:	6078      	str	r0, [r7, #4]
   80844:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   80846:	683a      	ldr	r2, [r7, #0]
   80848:	6879      	ldr	r1, [r7, #4]
   8084a:	4806      	ldr	r0, [pc, #24]	; (80864 <flash_init+0x28>)
   8084c:	4b06      	ldr	r3, [pc, #24]	; (80868 <flash_init+0x2c>)
   8084e:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80850:	683a      	ldr	r2, [r7, #0]
   80852:	6879      	ldr	r1, [r7, #4]
   80854:	4805      	ldr	r0, [pc, #20]	; (8086c <flash_init+0x30>)
   80856:	4b04      	ldr	r3, [pc, #16]	; (80868 <flash_init+0x2c>)
   80858:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   8085a:	2300      	movs	r3, #0
}
   8085c:	4618      	mov	r0, r3
   8085e:	3708      	adds	r7, #8
   80860:	46bd      	mov	sp, r7
   80862:	bd80      	pop	{r7, pc}
   80864:	400e0a00 	.word	0x400e0a00
   80868:	000804b5 	.word	0x000804b5
   8086c:	400e0c00 	.word	0x400e0c00

00080870 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80870:	b590      	push	{r4, r7, lr}
   80872:	b08f      	sub	sp, #60	; 0x3c
   80874:	af00      	add	r7, sp, #0
   80876:	60f8      	str	r0, [r7, #12]
   80878:	60b9      	str	r1, [r7, #8]
   8087a:	607a      	str	r2, [r7, #4]
   8087c:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   8087e:	4b4a      	ldr	r3, [pc, #296]	; (809a8 <flash_write+0x138>)
   80880:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   80882:	f107 0314 	add.w	r3, r7, #20
   80886:	f107 0216 	add.w	r2, r7, #22
   8088a:	f107 0018 	add.w	r0, r7, #24
   8088e:	68f9      	ldr	r1, [r7, #12]
   80890:	4c46      	ldr	r4, [pc, #280]	; (809ac <flash_write+0x13c>)
   80892:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   80894:	69bb      	ldr	r3, [r7, #24]
   80896:	4618      	mov	r0, r3
   80898:	4b45      	ldr	r3, [pc, #276]	; (809b0 <flash_write+0x140>)
   8089a:	4798      	blx	r3
   8089c:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   8089e:	69bb      	ldr	r3, [r7, #24]
   808a0:	2106      	movs	r1, #6
   808a2:	4618      	mov	r0, r3
   808a4:	4b43      	ldr	r3, [pc, #268]	; (809b4 <flash_write+0x144>)
   808a6:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   808a8:	e071      	b.n	8098e <flash_write+0x11e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   808aa:	8abb      	ldrh	r3, [r7, #20]
   808ac:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   808b0:	687b      	ldr	r3, [r7, #4]
   808b2:	4293      	cmp	r3, r2
   808b4:	bf28      	it	cs
   808b6:	4613      	movcs	r3, r2
   808b8:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   808ba:	69b8      	ldr	r0, [r7, #24]
   808bc:	8af9      	ldrh	r1, [r7, #22]
   808be:	f107 0310 	add.w	r3, r7, #16
   808c2:	2200      	movs	r2, #0
   808c4:	4c3c      	ldr	r4, [pc, #240]	; (809b8 <flash_write+0x148>)
   808c6:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   808c8:	8abb      	ldrh	r3, [r7, #20]
   808ca:	425b      	negs	r3, r3
   808cc:	b29a      	uxth	r2, r3
   808ce:	6a3b      	ldr	r3, [r7, #32]
   808d0:	b29b      	uxth	r3, r3
   808d2:	1ad3      	subs	r3, r2, r3
   808d4:	b29b      	uxth	r3, r3
   808d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
   808da:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   808dc:	693b      	ldr	r3, [r7, #16]
   808de:	4619      	mov	r1, r3
   808e0:	8abb      	ldrh	r3, [r7, #20]
   808e2:	461a      	mov	r2, r3
   808e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   808e6:	4b35      	ldr	r3, [pc, #212]	; (809bc <flash_write+0x14c>)
   808e8:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   808ea:	8abb      	ldrh	r3, [r7, #20]
   808ec:	461a      	mov	r2, r3
   808ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808f0:	4413      	add	r3, r2
   808f2:	6a3a      	ldr	r2, [r7, #32]
   808f4:	68b9      	ldr	r1, [r7, #8]
   808f6:	4618      	mov	r0, r3
   808f8:	4b30      	ldr	r3, [pc, #192]	; (809bc <flash_write+0x14c>)
   808fa:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808fc:	8abb      	ldrh	r3, [r7, #20]
   808fe:	461a      	mov	r2, r3
   80900:	6a3b      	ldr	r3, [r7, #32]
   80902:	4413      	add	r3, r2
   80904:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80906:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80908:	8abb      	ldrh	r3, [r7, #20]
   8090a:	461a      	mov	r2, r3
   8090c:	693b      	ldr	r3, [r7, #16]
   8090e:	441a      	add	r2, r3
   80910:	6a3b      	ldr	r3, [r7, #32]
   80912:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80914:	4619      	mov	r1, r3
   80916:	8bfb      	ldrh	r3, [r7, #30]
   80918:	461a      	mov	r2, r3
   8091a:	4b28      	ldr	r3, [pc, #160]	; (809bc <flash_write+0x14c>)
   8091c:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   8091e:	693b      	ldr	r3, [r7, #16]
   80920:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80922:	2300      	movs	r3, #0
   80924:	633b      	str	r3, [r7, #48]	; 0x30
   80926:	e00a      	b.n	8093e <flash_write+0xce>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8092a:	1d1a      	adds	r2, r3, #4
   8092c:	62fa      	str	r2, [r7, #44]	; 0x2c
   8092e:	491e      	ldr	r1, [pc, #120]	; (809a8 <flash_write+0x138>)
   80930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80932:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80936:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8093a:	3301      	adds	r3, #1
   8093c:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80940:	2b3f      	cmp	r3, #63	; 0x3f
   80942:	d9f1      	bls.n	80928 <flash_write+0xb8>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80944:	683b      	ldr	r3, [r7, #0]
   80946:	2b00      	cmp	r3, #0
   80948:	d007      	beq.n	8095a <flash_write+0xea>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8094a:	69bb      	ldr	r3, [r7, #24]
   8094c:	8afa      	ldrh	r2, [r7, #22]
   8094e:	2103      	movs	r1, #3
   80950:	4618      	mov	r0, r3
   80952:	4b1b      	ldr	r3, [pc, #108]	; (809c0 <flash_write+0x150>)
   80954:	4798      	blx	r3
   80956:	6378      	str	r0, [r7, #52]	; 0x34
   80958:	e006      	b.n	80968 <flash_write+0xf8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8095a:	69bb      	ldr	r3, [r7, #24]
   8095c:	8afa      	ldrh	r2, [r7, #22]
   8095e:	2101      	movs	r1, #1
   80960:	4618      	mov	r0, r3
   80962:	4b17      	ldr	r3, [pc, #92]	; (809c0 <flash_write+0x150>)
   80964:	4798      	blx	r3
   80966:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8096a:	2b00      	cmp	r3, #0
   8096c:	d001      	beq.n	80972 <flash_write+0x102>
			return ul_error;
   8096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80970:	e016      	b.n	809a0 <flash_write+0x130>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80972:	68ba      	ldr	r2, [r7, #8]
   80974:	6a3b      	ldr	r3, [r7, #32]
   80976:	4413      	add	r3, r2
   80978:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   8097a:	687a      	ldr	r2, [r7, #4]
   8097c:	6a3b      	ldr	r3, [r7, #32]
   8097e:	1ad3      	subs	r3, r2, r3
   80980:	607b      	str	r3, [r7, #4]
		us_page++;
   80982:	8afb      	ldrh	r3, [r7, #22]
   80984:	3301      	adds	r3, #1
   80986:	b29b      	uxth	r3, r3
   80988:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   8098a:	2300      	movs	r3, #0
   8098c:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   8098e:	687b      	ldr	r3, [r7, #4]
   80990:	2b00      	cmp	r3, #0
   80992:	d18a      	bne.n	808aa <flash_write+0x3a>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80994:	69bb      	ldr	r3, [r7, #24]
   80996:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80998:	4618      	mov	r0, r3
   8099a:	4b06      	ldr	r3, [pc, #24]	; (809b4 <flash_write+0x144>)
   8099c:	4798      	blx	r3

	return FLASH_RC_OK;
   8099e:	2300      	movs	r3, #0
}
   809a0:	4618      	mov	r0, r3
   809a2:	373c      	adds	r7, #60	; 0x3c
   809a4:	46bd      	mov	sp, r7
   809a6:	bd90      	pop	{r4, r7, pc}
   809a8:	200715c8 	.word	0x200715c8
   809ac:	00080721 	.word	0x00080721
   809b0:	00080519 	.word	0x00080519
   809b4:	000804e5 	.word	0x000804e5
   809b8:	0008079d 	.word	0x0008079d
   809bc:	000a8411 	.word	0x000a8411
   809c0:	00080535 	.word	0x00080535

000809c4 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   809c4:	b590      	push	{r4, r7, lr}
   809c6:	b08b      	sub	sp, #44	; 0x2c
   809c8:	af00      	add	r7, sp, #0
   809ca:	60f8      	str	r0, [r7, #12]
   809cc:	60b9      	str	r1, [r7, #8]
   809ce:	607a      	str	r2, [r7, #4]
   809d0:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   809d2:	2340      	movs	r3, #64	; 0x40
   809d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   809d6:	f107 0314 	add.w	r3, r7, #20
   809da:	f107 0218 	add.w	r2, r7, #24
   809de:	68b9      	ldr	r1, [r7, #8]
   809e0:	68f8      	ldr	r0, [r7, #12]
   809e2:	4c1c      	ldr	r4, [pc, #112]	; (80a54 <flash_lock+0x90>)
   809e4:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   809e6:	687b      	ldr	r3, [r7, #4]
   809e8:	2b00      	cmp	r3, #0
   809ea:	d002      	beq.n	809f2 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   809ec:	69ba      	ldr	r2, [r7, #24]
   809ee:	687b      	ldr	r3, [r7, #4]
   809f0:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   809f2:	683b      	ldr	r3, [r7, #0]
   809f4:	2b00      	cmp	r3, #0
   809f6:	d002      	beq.n	809fe <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   809f8:	697a      	ldr	r2, [r7, #20]
   809fa:	683b      	ldr	r3, [r7, #0]
   809fc:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   809fe:	69b9      	ldr	r1, [r7, #24]
   80a00:	f107 0212 	add.w	r2, r7, #18
   80a04:	f107 001c 	add.w	r0, r7, #28
   80a08:	2300      	movs	r3, #0
   80a0a:	4c13      	ldr	r4, [pc, #76]	; (80a58 <flash_lock+0x94>)
   80a0c:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80a0e:	6979      	ldr	r1, [r7, #20]
   80a10:	f107 0210 	add.w	r2, r7, #16
   80a14:	2300      	movs	r3, #0
   80a16:	2000      	movs	r0, #0
   80a18:	4c0f      	ldr	r4, [pc, #60]	; (80a58 <flash_lock+0x94>)
   80a1a:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a1c:	e010      	b.n	80a40 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80a1e:	69fb      	ldr	r3, [r7, #28]
   80a20:	8a7a      	ldrh	r2, [r7, #18]
   80a22:	2108      	movs	r1, #8
   80a24:	4618      	mov	r0, r3
   80a26:	4b0d      	ldr	r3, [pc, #52]	; (80a5c <flash_lock+0x98>)
   80a28:	4798      	blx	r3
   80a2a:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80a2c:	6a3b      	ldr	r3, [r7, #32]
   80a2e:	2b00      	cmp	r3, #0
   80a30:	d001      	beq.n	80a36 <flash_lock+0x72>
			return ul_error;
   80a32:	6a3b      	ldr	r3, [r7, #32]
   80a34:	e009      	b.n	80a4a <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80a36:	8a7a      	ldrh	r2, [r7, #18]
   80a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80a3a:	4413      	add	r3, r2
   80a3c:	b29b      	uxth	r3, r3
   80a3e:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a40:	8a7a      	ldrh	r2, [r7, #18]
   80a42:	8a3b      	ldrh	r3, [r7, #16]
   80a44:	429a      	cmp	r2, r3
   80a46:	d3ea      	bcc.n	80a1e <flash_lock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80a48:	2300      	movs	r3, #0
}
   80a4a:	4618      	mov	r0, r3
   80a4c:	372c      	adds	r7, #44	; 0x2c
   80a4e:	46bd      	mov	sp, r7
   80a50:	bd90      	pop	{r4, r7, pc}
   80a52:	bf00      	nop
   80a54:	000807ed 	.word	0x000807ed
   80a58:	00080721 	.word	0x00080721
   80a5c:	00080535 	.word	0x00080535

00080a60 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80a60:	b590      	push	{r4, r7, lr}
   80a62:	b08b      	sub	sp, #44	; 0x2c
   80a64:	af00      	add	r7, sp, #0
   80a66:	60f8      	str	r0, [r7, #12]
   80a68:	60b9      	str	r1, [r7, #8]
   80a6a:	607a      	str	r2, [r7, #4]
   80a6c:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80a6e:	2340      	movs	r3, #64	; 0x40
   80a70:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80a72:	f107 0314 	add.w	r3, r7, #20
   80a76:	f107 0218 	add.w	r2, r7, #24
   80a7a:	68b9      	ldr	r1, [r7, #8]
   80a7c:	68f8      	ldr	r0, [r7, #12]
   80a7e:	4c1c      	ldr	r4, [pc, #112]	; (80af0 <flash_unlock+0x90>)
   80a80:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80a82:	687b      	ldr	r3, [r7, #4]
   80a84:	2b00      	cmp	r3, #0
   80a86:	d002      	beq.n	80a8e <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80a88:	69ba      	ldr	r2, [r7, #24]
   80a8a:	687b      	ldr	r3, [r7, #4]
   80a8c:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80a8e:	683b      	ldr	r3, [r7, #0]
   80a90:	2b00      	cmp	r3, #0
   80a92:	d002      	beq.n	80a9a <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80a94:	697a      	ldr	r2, [r7, #20]
   80a96:	683b      	ldr	r3, [r7, #0]
   80a98:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80a9a:	69b9      	ldr	r1, [r7, #24]
   80a9c:	f107 0212 	add.w	r2, r7, #18
   80aa0:	f107 001c 	add.w	r0, r7, #28
   80aa4:	2300      	movs	r3, #0
   80aa6:	4c13      	ldr	r4, [pc, #76]	; (80af4 <flash_unlock+0x94>)
   80aa8:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80aaa:	6979      	ldr	r1, [r7, #20]
   80aac:	f107 0210 	add.w	r2, r7, #16
   80ab0:	2300      	movs	r3, #0
   80ab2:	2000      	movs	r0, #0
   80ab4:	4c0f      	ldr	r4, [pc, #60]	; (80af4 <flash_unlock+0x94>)
   80ab6:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80ab8:	e010      	b.n	80adc <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80aba:	69fb      	ldr	r3, [r7, #28]
   80abc:	8a7a      	ldrh	r2, [r7, #18]
   80abe:	2109      	movs	r1, #9
   80ac0:	4618      	mov	r0, r3
   80ac2:	4b0d      	ldr	r3, [pc, #52]	; (80af8 <flash_unlock+0x98>)
   80ac4:	4798      	blx	r3
   80ac6:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80ac8:	6a3b      	ldr	r3, [r7, #32]
   80aca:	2b00      	cmp	r3, #0
   80acc:	d001      	beq.n	80ad2 <flash_unlock+0x72>
			return ul_error;
   80ace:	6a3b      	ldr	r3, [r7, #32]
   80ad0:	e009      	b.n	80ae6 <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80ad2:	8a7a      	ldrh	r2, [r7, #18]
   80ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80ad6:	4413      	add	r3, r2
   80ad8:	b29b      	uxth	r3, r3
   80ada:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80adc:	8a7a      	ldrh	r2, [r7, #18]
   80ade:	8a3b      	ldrh	r3, [r7, #16]
   80ae0:	429a      	cmp	r2, r3
   80ae2:	d3ea      	bcc.n	80aba <flash_unlock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80ae4:	2300      	movs	r3, #0
}
   80ae6:	4618      	mov	r0, r3
   80ae8:	372c      	adds	r7, #44	; 0x2c
   80aea:	46bd      	mov	sp, r7
   80aec:	bd90      	pop	{r4, r7, pc}
   80aee:	bf00      	nop
   80af0:	000807ed 	.word	0x000807ed
   80af4:	00080721 	.word	0x00080721
   80af8:	00080535 	.word	0x00080535

00080afc <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80afc:	b580      	push	{r7, lr}
   80afe:	b082      	sub	sp, #8
   80b00:	af00      	add	r7, sp, #0
   80b02:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b04:	687b      	ldr	r3, [r7, #4]
   80b06:	2b02      	cmp	r3, #2
   80b08:	d901      	bls.n	80b0e <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80b0a:	2311      	movs	r3, #17
   80b0c:	e012      	b.n	80b34 <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80b0e:	6878      	ldr	r0, [r7, #4]
   80b10:	4b0a      	ldr	r3, [pc, #40]	; (80b3c <flash_set_gpnvm+0x40>)
   80b12:	4798      	blx	r3
   80b14:	4603      	mov	r3, r0
   80b16:	2b01      	cmp	r3, #1
   80b18:	d101      	bne.n	80b1e <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80b1a:	2300      	movs	r3, #0
   80b1c:	e00a      	b.n	80b34 <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80b1e:	687a      	ldr	r2, [r7, #4]
   80b20:	210b      	movs	r1, #11
   80b22:	4807      	ldr	r0, [pc, #28]	; (80b40 <flash_set_gpnvm+0x44>)
   80b24:	4b07      	ldr	r3, [pc, #28]	; (80b44 <flash_set_gpnvm+0x48>)
   80b26:	4798      	blx	r3
   80b28:	4603      	mov	r3, r0
   80b2a:	2b00      	cmp	r3, #0
   80b2c:	d101      	bne.n	80b32 <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80b2e:	2300      	movs	r3, #0
   80b30:	e000      	b.n	80b34 <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80b32:	2310      	movs	r3, #16
}
   80b34:	4618      	mov	r0, r3
   80b36:	3708      	adds	r7, #8
   80b38:	46bd      	mov	sp, r7
   80b3a:	bd80      	pop	{r7, pc}
   80b3c:	00080b49 	.word	0x00080b49
   80b40:	400e0a00 	.word	0x400e0a00
   80b44:	00080535 	.word	0x00080535

00080b48 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80b48:	b580      	push	{r7, lr}
   80b4a:	b084      	sub	sp, #16
   80b4c:	af00      	add	r7, sp, #0
   80b4e:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b50:	687b      	ldr	r3, [r7, #4]
   80b52:	2b02      	cmp	r3, #2
   80b54:	d901      	bls.n	80b5a <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80b56:	2311      	movs	r3, #17
   80b58:	e019      	b.n	80b8e <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80b5a:	2200      	movs	r2, #0
   80b5c:	210d      	movs	r1, #13
   80b5e:	480e      	ldr	r0, [pc, #56]	; (80b98 <flash_is_gpnvm_set+0x50>)
   80b60:	4b0e      	ldr	r3, [pc, #56]	; (80b9c <flash_is_gpnvm_set+0x54>)
   80b62:	4798      	blx	r3
   80b64:	4603      	mov	r3, r0
   80b66:	2b00      	cmp	r3, #0
   80b68:	d001      	beq.n	80b6e <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80b6a:	2310      	movs	r3, #16
   80b6c:	e00f      	b.n	80b8e <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80b6e:	480a      	ldr	r0, [pc, #40]	; (80b98 <flash_is_gpnvm_set+0x50>)
   80b70:	4b0b      	ldr	r3, [pc, #44]	; (80ba0 <flash_is_gpnvm_set+0x58>)
   80b72:	4798      	blx	r3
   80b74:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80b76:	2201      	movs	r2, #1
   80b78:	687b      	ldr	r3, [r7, #4]
   80b7a:	fa02 f303 	lsl.w	r3, r2, r3
   80b7e:	461a      	mov	r2, r3
   80b80:	68fb      	ldr	r3, [r7, #12]
   80b82:	4013      	ands	r3, r2
   80b84:	2b00      	cmp	r3, #0
   80b86:	d001      	beq.n	80b8c <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80b88:	2301      	movs	r3, #1
   80b8a:	e000      	b.n	80b8e <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80b8c:	2300      	movs	r3, #0
}
   80b8e:	4618      	mov	r0, r3
   80b90:	3710      	adds	r7, #16
   80b92:	46bd      	mov	sp, r7
   80b94:	bd80      	pop	{r7, pc}
   80b96:	bf00      	nop
   80b98:	400e0a00 	.word	0x400e0a00
   80b9c:	00080535 	.word	0x00080535
   80ba0:	000805a9 	.word	0x000805a9

00080ba4 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80ba4:	b580      	push	{r7, lr}
   80ba6:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80ba8:	2000      	movs	r0, #0
   80baa:	4b02      	ldr	r3, [pc, #8]	; (80bb4 <flash_enable_security_bit+0x10>)
   80bac:	4798      	blx	r3
   80bae:	4603      	mov	r3, r0
}
   80bb0:	4618      	mov	r0, r3
   80bb2:	bd80      	pop	{r7, pc}
   80bb4:	00080afd 	.word	0x00080afd

00080bb8 <Cl_Init_Alarms>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_Init_Alarms(void)
{
   80bb8:	b580      	push	{r7, lr}
   80bba:	b082      	sub	sp, #8
   80bbc:	af00      	add	r7, sp, #0
	powerfailurecount = 0;
   80bbe:	4b12      	ldr	r3, [pc, #72]	; (80c08 <Cl_Init_Alarms+0x50>)
   80bc0:	2200      	movs	r2, #0
   80bc2:	601a      	str	r2, [r3, #0]
	Cl_ReturnCodeType cl_Alarm_retVal = CL_ERROR;
   80bc4:	2304      	movs	r3, #4
   80bc6:	71fb      	strb	r3, [r7, #7]
	cl_Alarm_retVal = Cl_LoadAlarmThresholdTable();
   80bc8:	4b10      	ldr	r3, [pc, #64]	; (80c0c <Cl_Init_Alarms+0x54>)
   80bca:	4798      	blx	r3
   80bcc:	4603      	mov	r3, r0
   80bce:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bd0:	79fb      	ldrb	r3, [r7, #7]
   80bd2:	2b00      	cmp	r3, #0
   80bd4:	d001      	beq.n	80bda <Cl_Init_Alarms+0x22>
   80bd6:	4b0e      	ldr	r3, [pc, #56]	; (80c10 <Cl_Init_Alarms+0x58>)
   80bd8:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Temperature_Controller_Init();
   80bda:	4b0e      	ldr	r3, [pc, #56]	; (80c14 <Cl_Init_Alarms+0x5c>)
   80bdc:	4798      	blx	r3
   80bde:	4603      	mov	r3, r0
   80be0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80be2:	79fb      	ldrb	r3, [r7, #7]
   80be4:	2b00      	cmp	r3, #0
   80be6:	d001      	beq.n	80bec <Cl_Init_Alarms+0x34>
   80be8:	4b09      	ldr	r3, [pc, #36]	; (80c10 <Cl_Init_Alarms+0x58>)
   80bea:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Pressure_Controller_Init();
   80bec:	4b0a      	ldr	r3, [pc, #40]	; (80c18 <Cl_Init_Alarms+0x60>)
   80bee:	4798      	blx	r3
   80bf0:	4603      	mov	r3, r0
   80bf2:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bf4:	79fb      	ldrb	r3, [r7, #7]
   80bf6:	2b00      	cmp	r3, #0
   80bf8:	d001      	beq.n	80bfe <Cl_Init_Alarms+0x46>
   80bfa:	4b05      	ldr	r3, [pc, #20]	; (80c10 <Cl_Init_Alarms+0x58>)
   80bfc:	4798      	blx	r3
	return CL_OK;
   80bfe:	2300      	movs	r3, #0
	
}
   80c00:	4618      	mov	r0, r3
   80c02:	3708      	adds	r7, #8
   80c04:	46bd      	mov	sp, r7
   80c06:	bd80      	pop	{r7, pc}
   80c08:	20071700 	.word	0x20071700
   80c0c:	00080c1d 	.word	0x00080c1d
   80c10:	00088aa9 	.word	0x00088aa9
   80c14:	00090f3d 	.word	0x00090f3d
   80c18:	00090a7d 	.word	0x00090a7d

00080c1c <Cl_LoadAlarmThresholdTable>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_LoadAlarmThresholdTable(void)
{
   80c1c:	b480      	push	{r7}
   80c1e:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 20;   // manav03
   80c20:	4b3d      	ldr	r3, [pc, #244]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c22:	2214      	movs	r2, #20
   80c24:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 145;  // manav03
   80c26:	4b3c      	ldr	r3, [pc, #240]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c28:	2291      	movs	r2, #145	; 0x91
   80c2a:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80c2c:	4b3a      	ldr	r3, [pc, #232]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c2e:	2200      	movs	r2, #0
   80c30:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80c32:	4b39      	ldr	r3, [pc, #228]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c34:	f242 7210 	movw	r2, #10000	; 0x2710
   80c38:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 1500; // manav03
   80c3a:	4b37      	ldr	r3, [pc, #220]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c3c:	4a37      	ldr	r2, [pc, #220]	; (80d1c <Cl_LoadAlarmThresholdTable+0x100>)
   80c3e:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = 700; // manav03
   80c40:	4b35      	ldr	r3, [pc, #212]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c42:	4a37      	ldr	r2, [pc, #220]	; (80d20 <Cl_LoadAlarmThresholdTable+0x104>)
   80c44:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 1500;
   80c46:	4b34      	ldr	r3, [pc, #208]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c48:	4a34      	ldr	r2, [pc, #208]	; (80d1c <Cl_LoadAlarmThresholdTable+0x100>)
   80c4a:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = 700;  // manav03
   80c4c:	4b32      	ldr	r3, [pc, #200]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c4e:	4a34      	ldr	r2, [pc, #208]	; (80d20 <Cl_LoadAlarmThresholdTable+0x104>)
   80c50:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 400;
   80c52:	4b31      	ldr	r3, [pc, #196]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c54:	4a33      	ldr	r2, [pc, #204]	; (80d24 <Cl_LoadAlarmThresholdTable+0x108>)
   80c56:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -200;
   80c58:	4b2f      	ldr	r3, [pc, #188]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c5a:	4a33      	ldr	r2, [pc, #204]	; (80d28 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c5c:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 400;
   80c5e:	4b2e      	ldr	r3, [pc, #184]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c60:	4a30      	ldr	r2, [pc, #192]	; (80d24 <Cl_LoadAlarmThresholdTable+0x108>)
   80c62:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80c64:	4b2c      	ldr	r3, [pc, #176]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c66:	4a31      	ldr	r2, [pc, #196]	; (80d2c <Cl_LoadAlarmThresholdTable+0x110>)
   80c68:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1000;
   80c6a:	4b2b      	ldr	r3, [pc, #172]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c6c:	4a30      	ldr	r2, [pc, #192]	; (80d30 <Cl_LoadAlarmThresholdTable+0x114>)
   80c6e:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80c70:	4b29      	ldr	r3, [pc, #164]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c72:	4a2e      	ldr	r2, [pc, #184]	; (80d2c <Cl_LoadAlarmThresholdTable+0x110>)
   80c74:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 37;
   80c76:	4b28      	ldr	r3, [pc, #160]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c78:	4a2e      	ldr	r2, [pc, #184]	; (80d34 <Cl_LoadAlarmThresholdTable+0x118>)
   80c7a:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 25;
   80c7c:	4b26      	ldr	r3, [pc, #152]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c7e:	4a2e      	ldr	r2, [pc, #184]	; (80d38 <Cl_LoadAlarmThresholdTable+0x11c>)
   80c80:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 80;
   80c82:	4b25      	ldr	r3, [pc, #148]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c84:	4a2d      	ldr	r2, [pc, #180]	; (80d3c <Cl_LoadAlarmThresholdTable+0x120>)
   80c86:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 25;
   80c88:	4b23      	ldr	r3, [pc, #140]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c8a:	4a2b      	ldr	r2, [pc, #172]	; (80d38 <Cl_LoadAlarmThresholdTable+0x11c>)
   80c8c:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 375;  // manav03
   80c8e:	4b22      	ldr	r3, [pc, #136]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c90:	4a2b      	ldr	r2, [pc, #172]	; (80d40 <Cl_LoadAlarmThresholdTable+0x124>)
   80c92:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 250;   // manav03
   80c94:	4b20      	ldr	r3, [pc, #128]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c96:	4a2b      	ldr	r2, [pc, #172]	; (80d44 <Cl_LoadAlarmThresholdTable+0x128>)
   80c98:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80c9a:	4b1f      	ldr	r3, [pc, #124]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c9c:	4a2a      	ldr	r2, [pc, #168]	; (80d48 <Cl_LoadAlarmThresholdTable+0x12c>)
   80c9e:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80ca0:	4b1d      	ldr	r3, [pc, #116]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80ca2:	f242 7210 	movw	r2, #10000	; 0x2710
   80ca6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80caa:	4b1b      	ldr	r3, [pc, #108]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cac:	2200      	movs	r2, #0
   80cae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80cb2:	4b19      	ldr	r3, [pc, #100]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cb4:	f242 7210 	movw	r2, #10000	; 0x2710
   80cb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80cbc:	4b16      	ldr	r3, [pc, #88]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cbe:	2200      	movs	r2, #0
   80cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80cc4:	4b14      	ldr	r3, [pc, #80]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cc6:	f242 7210 	movw	r2, #10000	; 0x2710
   80cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80cce:	4b12      	ldr	r3, [pc, #72]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cd0:	2200      	movs	r2, #0
   80cd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80cd6:	4b10      	ldr	r3, [pc, #64]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cd8:	2205      	movs	r2, #5
   80cda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80cde:	4b0e      	ldr	r3, [pc, #56]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80ce0:	2214      	movs	r2, #20
   80ce2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80ce6:	4b0c      	ldr	r3, [pc, #48]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80ce8:	221e      	movs	r2, #30
   80cea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80cee:	4b0a      	ldr	r3, [pc, #40]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cf0:	2205      	movs	r2, #5
   80cf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80cf6:	4b08      	ldr	r3, [pc, #32]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80cf8:	221e      	movs	r2, #30
   80cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80cfe:	4b06      	ldr	r3, [pc, #24]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d00:	2205      	movs	r2, #5
   80d02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		Cl_alarmThresholdTable.tmp_low_threshold  = 600;
   80d06:	4b04      	ldr	r3, [pc, #16]	; (80d18 <Cl_LoadAlarmThresholdTable+0xfc>)
   80d08:	4a10      	ldr	r2, [pc, #64]	; (80d4c <Cl_LoadAlarmThresholdTable+0x130>)
   80d0a:	635a      	str	r2, [r3, #52]	; 0x34
		//Cl_alarmThresholdTable.tmp_low_threshold  = 1500;
		return CL_OK ;
   80d0c:	2300      	movs	r3, #0
}
   80d0e:	4618      	mov	r0, r3
   80d10:	46bd      	mov	sp, r7
   80d12:	bc80      	pop	{r7}
   80d14:	4770      	bx	lr
   80d16:	bf00      	nop
   80d18:	20072044 	.word	0x20072044
   80d1c:	44bb8000 	.word	0x44bb8000
   80d20:	442f0000 	.word	0x442f0000
   80d24:	43c80000 	.word	0x43c80000
   80d28:	c3480000 	.word	0xc3480000
   80d2c:	c3960000 	.word	0xc3960000
   80d30:	447a0000 	.word	0x447a0000
   80d34:	42140000 	.word	0x42140000
   80d38:	41c80000 	.word	0x41c80000
   80d3c:	42a00000 	.word	0x42a00000
   80d40:	43bb8000 	.word	0x43bb8000
   80d44:	437a0000 	.word	0x437a0000
   80d48:	42340000 	.word	0x42340000
   80d4c:	44160000 	.word	0x44160000

00080d50 <Cl_Alarm_translate_sensor_values>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : test_sensor_status,cl_sys_statbuffer
 */
// manav02 function added
Cl_ReturnCodeType Cl_Alarm_translate_sensor_values(void){
   80d50:	b590      	push	{r4, r7, lr}
   80d52:	b085      	sub	sp, #20
   80d54:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType cl_alarm_retval = CL_ERROR;
   80d56:	2304      	movs	r3, #4
   80d58:	73fb      	strb	r3, [r7, #15]
	float temp;
	Cl_Uint16Type sensordata = 0 , ps1data  = 0 , ps2data  = 0 , ps3data  = 0 ;
   80d5a:	2300      	movs	r3, #0
   80d5c:	81bb      	strh	r3, [r7, #12]
   80d5e:	2300      	movs	r3, #0
   80d60:	817b      	strh	r3, [r7, #10]
   80d62:	2300      	movs	r3, #0
   80d64:	813b      	strh	r3, [r7, #8]
   80d66:	2300      	movs	r3, #0
   80d68:	80fb      	strh	r3, [r7, #6]
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   80d6a:	f107 030c 	add.w	r3, r7, #12
   80d6e:	4619      	mov	r1, r3
   80d70:	2012      	movs	r0, #18
   80d72:	4b63      	ldr	r3, [pc, #396]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80d74:	4798      	blx	r3
		{
			temp1 = (float)sensordata/10;
   80d76:	89ba      	ldrh	r2, [r7, #12]
   80d78:	4b62      	ldr	r3, [pc, #392]	; (80f04 <Cl_Alarm_translate_sensor_values+0x1b4>)
   80d7a:	4610      	mov	r0, r2
   80d7c:	4798      	blx	r3
   80d7e:	4602      	mov	r2, r0
   80d80:	4b61      	ldr	r3, [pc, #388]	; (80f08 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80d82:	4962      	ldr	r1, [pc, #392]	; (80f0c <Cl_Alarm_translate_sensor_values+0x1bc>)
   80d84:	4610      	mov	r0, r2
   80d86:	4798      	blx	r3
   80d88:	4603      	mov	r3, r0
   80d8a:	461a      	mov	r2, r3
   80d8c:	4b60      	ldr	r3, [pc, #384]	; (80f10 <Cl_Alarm_translate_sensor_values+0x1c0>)
   80d8e:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   80d90:	f107 030c 	add.w	r3, r7, #12
   80d94:	4619      	mov	r1, r3
   80d96:	2013      	movs	r0, #19
   80d98:	4b59      	ldr	r3, [pc, #356]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80d9a:	4798      	blx	r3
		{
			temp2 = (float)sensordata/10;
   80d9c:	89ba      	ldrh	r2, [r7, #12]
   80d9e:	4b59      	ldr	r3, [pc, #356]	; (80f04 <Cl_Alarm_translate_sensor_values+0x1b4>)
   80da0:	4610      	mov	r0, r2
   80da2:	4798      	blx	r3
   80da4:	4602      	mov	r2, r0
   80da6:	4b58      	ldr	r3, [pc, #352]	; (80f08 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80da8:	4958      	ldr	r1, [pc, #352]	; (80f0c <Cl_Alarm_translate_sensor_values+0x1bc>)
   80daa:	4610      	mov	r0, r2
   80dac:	4798      	blx	r3
   80dae:	4603      	mov	r3, r0
   80db0:	461a      	mov	r2, r3
   80db2:	4b58      	ldr	r3, [pc, #352]	; (80f14 <Cl_Alarm_translate_sensor_values+0x1c4>)
   80db4:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   80db6:	f107 030c 	add.w	r3, r7, #12
   80dba:	4619      	mov	r1, r3
   80dbc:	2014      	movs	r0, #20
   80dbe:	4b50      	ldr	r3, [pc, #320]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80dc0:	4798      	blx	r3
		{
			temp3 = (float)sensordata/10;
   80dc2:	89ba      	ldrh	r2, [r7, #12]
   80dc4:	4b4f      	ldr	r3, [pc, #316]	; (80f04 <Cl_Alarm_translate_sensor_values+0x1b4>)
   80dc6:	4610      	mov	r0, r2
   80dc8:	4798      	blx	r3
   80dca:	4602      	mov	r2, r0
   80dcc:	4b4e      	ldr	r3, [pc, #312]	; (80f08 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80dce:	494f      	ldr	r1, [pc, #316]	; (80f0c <Cl_Alarm_translate_sensor_values+0x1bc>)
   80dd0:	4610      	mov	r0, r2
   80dd2:	4798      	blx	r3
   80dd4:	4603      	mov	r3, r0
   80dd6:	461a      	mov	r2, r3
   80dd8:	4b4f      	ldr	r3, [pc, #316]	; (80f18 <Cl_Alarm_translate_sensor_values+0x1c8>)
   80dda:	601a      	str	r2, [r3, #0]
		}
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   80ddc:	f107 030c 	add.w	r3, r7, #12
   80de0:	4619      	mov	r1, r3
   80de2:	2007      	movs	r0, #7
   80de4:	4b46      	ldr	r3, [pc, #280]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80de6:	4798      	blx	r3
		{
			cond_final = (float)sensordata/100;
   80de8:	89ba      	ldrh	r2, [r7, #12]
   80dea:	4b46      	ldr	r3, [pc, #280]	; (80f04 <Cl_Alarm_translate_sensor_values+0x1b4>)
   80dec:	4610      	mov	r0, r2
   80dee:	4798      	blx	r3
   80df0:	4602      	mov	r2, r0
   80df2:	4b45      	ldr	r3, [pc, #276]	; (80f08 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80df4:	4949      	ldr	r1, [pc, #292]	; (80f1c <Cl_Alarm_translate_sensor_values+0x1cc>)
   80df6:	4610      	mov	r0, r2
   80df8:	4798      	blx	r3
   80dfa:	4603      	mov	r3, r0
   80dfc:	461a      	mov	r2, r3
   80dfe:	4b48      	ldr	r3, [pc, #288]	; (80f20 <Cl_Alarm_translate_sensor_values+0x1d0>)
   80e00:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&sensordata);
   80e02:	f107 030c 	add.w	r3, r7, #12
   80e06:	4619      	mov	r1, r3
   80e08:	200b      	movs	r0, #11
   80e0a:	4b3d      	ldr	r3, [pc, #244]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e0c:	4798      	blx	r3
		{
			apt = (float)sensordata - 1000;
   80e0e:	89ba      	ldrh	r2, [r7, #12]
   80e10:	4b3c      	ldr	r3, [pc, #240]	; (80f04 <Cl_Alarm_translate_sensor_values+0x1b4>)
   80e12:	4610      	mov	r0, r2
   80e14:	4798      	blx	r3
   80e16:	4602      	mov	r2, r0
   80e18:	4b42      	ldr	r3, [pc, #264]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1d4>)
   80e1a:	4943      	ldr	r1, [pc, #268]	; (80f28 <Cl_Alarm_translate_sensor_values+0x1d8>)
   80e1c:	4610      	mov	r0, r2
   80e1e:	4798      	blx	r3
   80e20:	4603      	mov	r3, r0
   80e22:	461a      	mov	r2, r3
   80e24:	4b41      	ldr	r3, [pc, #260]	; (80f2c <Cl_Alarm_translate_sensor_values+0x1dc>)
   80e26:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&sensordata);
   80e28:	f107 030c 	add.w	r3, r7, #12
   80e2c:	4619      	mov	r1, r3
   80e2e:	200c      	movs	r0, #12
   80e30:	4b33      	ldr	r3, [pc, #204]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e32:	4798      	blx	r3
		{
			vpt = (float)sensordata - 1000;
   80e34:	89ba      	ldrh	r2, [r7, #12]
   80e36:	4b33      	ldr	r3, [pc, #204]	; (80f04 <Cl_Alarm_translate_sensor_values+0x1b4>)
   80e38:	4610      	mov	r0, r2
   80e3a:	4798      	blx	r3
   80e3c:	4602      	mov	r2, r0
   80e3e:	4b39      	ldr	r3, [pc, #228]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1d4>)
   80e40:	4939      	ldr	r1, [pc, #228]	; (80f28 <Cl_Alarm_translate_sensor_values+0x1d8>)
   80e42:	4610      	mov	r0, r2
   80e44:	4798      	blx	r3
   80e46:	4603      	mov	r3, r0
   80e48:	461a      	mov	r2, r3
   80e4a:	4b39      	ldr	r3, [pc, #228]	; (80f30 <Cl_Alarm_translate_sensor_values+0x1e0>)
   80e4c:	601a      	str	r2, [r3, #0]
		}

		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&ps1data);
   80e4e:	f107 030a 	add.w	r3, r7, #10
   80e52:	4619      	mov	r1, r3
   80e54:	200e      	movs	r0, #14
   80e56:	4b2a      	ldr	r3, [pc, #168]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e58:	4798      	blx	r3
		{
			ps1 = 	ps1data - 1000;
   80e5a:	897b      	ldrh	r3, [r7, #10]
   80e5c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   80e60:	4b34      	ldr	r3, [pc, #208]	; (80f34 <Cl_Alarm_translate_sensor_values+0x1e4>)
   80e62:	4610      	mov	r0, r2
   80e64:	4798      	blx	r3
   80e66:	4602      	mov	r2, r0
   80e68:	4b33      	ldr	r3, [pc, #204]	; (80f38 <Cl_Alarm_translate_sensor_values+0x1e8>)
   80e6a:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&ps2data);
   80e6c:	f107 0308 	add.w	r3, r7, #8
   80e70:	4619      	mov	r1, r3
   80e72:	200f      	movs	r0, #15
   80e74:	4b22      	ldr	r3, [pc, #136]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e76:	4798      	blx	r3
		{
			ps2 = 	ps2data - 1000;
   80e78:	893b      	ldrh	r3, [r7, #8]
   80e7a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   80e7e:	4b2d      	ldr	r3, [pc, #180]	; (80f34 <Cl_Alarm_translate_sensor_values+0x1e4>)
   80e80:	4610      	mov	r0, r2
   80e82:	4798      	blx	r3
   80e84:	4602      	mov	r2, r0
   80e86:	4b2d      	ldr	r3, [pc, #180]	; (80f3c <Cl_Alarm_translate_sensor_values+0x1ec>)
   80e88:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&ps3data);
   80e8a:	1dbb      	adds	r3, r7, #6
   80e8c:	4619      	mov	r1, r3
   80e8e:	2010      	movs	r0, #16
   80e90:	4b1b      	ldr	r3, [pc, #108]	; (80f00 <Cl_Alarm_translate_sensor_values+0x1b0>)
   80e92:	4798      	blx	r3
		{
			ps3 = 	ps3data - 1000;
   80e94:	88fb      	ldrh	r3, [r7, #6]
   80e96:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
   80e9a:	4b26      	ldr	r3, [pc, #152]	; (80f34 <Cl_Alarm_translate_sensor_values+0x1e4>)
   80e9c:	4610      	mov	r0, r2
   80e9e:	4798      	blx	r3
   80ea0:	4602      	mov	r2, r0
   80ea2:	4b27      	ldr	r3, [pc, #156]	; (80f40 <Cl_Alarm_translate_sensor_values+0x1f0>)
   80ea4:	601a      	str	r2, [r3, #0]
		}

		tmpVal = 	(((apt + vpt) - (ps1+ps2))/2)-25;
   80ea6:	4b21      	ldr	r3, [pc, #132]	; (80f2c <Cl_Alarm_translate_sensor_values+0x1dc>)
   80ea8:	681a      	ldr	r2, [r3, #0]
   80eaa:	4b21      	ldr	r3, [pc, #132]	; (80f30 <Cl_Alarm_translate_sensor_values+0x1e0>)
   80eac:	6819      	ldr	r1, [r3, #0]
   80eae:	4b25      	ldr	r3, [pc, #148]	; (80f44 <Cl_Alarm_translate_sensor_values+0x1f4>)
   80eb0:	4610      	mov	r0, r2
   80eb2:	4798      	blx	r3
   80eb4:	4603      	mov	r3, r0
   80eb6:	461c      	mov	r4, r3
   80eb8:	4b1f      	ldr	r3, [pc, #124]	; (80f38 <Cl_Alarm_translate_sensor_values+0x1e8>)
   80eba:	681a      	ldr	r2, [r3, #0]
   80ebc:	4b1f      	ldr	r3, [pc, #124]	; (80f3c <Cl_Alarm_translate_sensor_values+0x1ec>)
   80ebe:	6819      	ldr	r1, [r3, #0]
   80ec0:	4b20      	ldr	r3, [pc, #128]	; (80f44 <Cl_Alarm_translate_sensor_values+0x1f4>)
   80ec2:	4610      	mov	r0, r2
   80ec4:	4798      	blx	r3
   80ec6:	4603      	mov	r3, r0
   80ec8:	461a      	mov	r2, r3
   80eca:	4b16      	ldr	r3, [pc, #88]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1d4>)
   80ecc:	4611      	mov	r1, r2
   80ece:	4620      	mov	r0, r4
   80ed0:	4798      	blx	r3
   80ed2:	4603      	mov	r3, r0
   80ed4:	461a      	mov	r2, r3
   80ed6:	4b0c      	ldr	r3, [pc, #48]	; (80f08 <Cl_Alarm_translate_sensor_values+0x1b8>)
   80ed8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   80edc:	4610      	mov	r0, r2
   80ede:	4798      	blx	r3
   80ee0:	4603      	mov	r3, r0
   80ee2:	461a      	mov	r2, r3
   80ee4:	4b0f      	ldr	r3, [pc, #60]	; (80f24 <Cl_Alarm_translate_sensor_values+0x1d4>)
   80ee6:	4918      	ldr	r1, [pc, #96]	; (80f48 <Cl_Alarm_translate_sensor_values+0x1f8>)
   80ee8:	4610      	mov	r0, r2
   80eea:	4798      	blx	r3
   80eec:	4603      	mov	r3, r0
   80eee:	461a      	mov	r2, r3
   80ef0:	4b16      	ldr	r3, [pc, #88]	; (80f4c <Cl_Alarm_translate_sensor_values+0x1fc>)
   80ef2:	601a      	str	r2, [r3, #0]
		
		

}
   80ef4:	bf00      	nop
   80ef6:	4618      	mov	r0, r3
   80ef8:	3714      	adds	r7, #20
   80efa:	46bd      	mov	sp, r7
   80efc:	bd90      	pop	{r4, r7, pc}
   80efe:	bf00      	nop
   80f00:	0008fa01 	.word	0x0008fa01
   80f04:	000a7ef9 	.word	0x000a7ef9
   80f08:	000a8111 	.word	0x000a8111
   80f0c:	41200000 	.word	0x41200000
   80f10:	200716f0 	.word	0x200716f0
   80f14:	200716f4 	.word	0x200716f4
   80f18:	200716f8 	.word	0x200716f8
   80f1c:	42c80000 	.word	0x42c80000
   80f20:	200716fc 	.word	0x200716fc
   80f24:	000a7d95 	.word	0x000a7d95
   80f28:	447a0000 	.word	0x447a0000
   80f2c:	2007203c 	.word	0x2007203c
   80f30:	200716e0 	.word	0x200716e0
   80f34:	000a7f01 	.word	0x000a7f01
   80f38:	200716e4 	.word	0x200716e4
   80f3c:	200716e8 	.word	0x200716e8
   80f40:	200716ec 	.word	0x200716ec
   80f44:	000a7d99 	.word	0x000a7d99
   80f48:	41c80000 	.word	0x41c80000
   80f4c:	200716dc 	.word	0x200716dc

00080f50 <Cl_alarms_scanforAlarms>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms[]
 */
  
Cl_ReturnCodeType Cl_alarms_scanforAlarms(void)
{
   80f50:	b580      	push	{r7, lr}
   80f52:	b082      	sub	sp, #8
   80f54:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_alarms_retcode;
	
	 Cl_alarms_retcode = Cl_Alarm_translate_sensor_values();
   80f56:	4b9b      	ldr	r3, [pc, #620]	; (811c4 <Cl_alarms_scanforAlarms+0x274>)
   80f58:	4798      	blx	r3
   80f5a:	4603      	mov	r3, r0
   80f5c:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_alarms_retcode);
   80f5e:	79fb      	ldrb	r3, [r7, #7]
   80f60:	2b00      	cmp	r3, #0
   80f62:	d001      	beq.n	80f68 <Cl_alarms_scanforAlarms+0x18>
   80f64:	4b98      	ldr	r3, [pc, #608]	; (811c8 <Cl_alarms_scanforAlarms+0x278>)
   80f66:	4798      	blx	r3
	
	if(Cl_alarms_alarms[POWER_FAILURE].cl_is_enabled){
   80f68:	4b98      	ldr	r3, [pc, #608]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80f6a:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
   80f6e:	2b00      	cmp	r3, #0
   80f70:	d03b      	beq.n	80fea <Cl_alarms_scanforAlarms+0x9a>
		
		if(cl_sys_statbuffer.PowerFailure)
   80f72:	4b97      	ldr	r3, [pc, #604]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   80f74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
   80f78:	2b00      	cmp	r3, #0
   80f7a:	d032      	beq.n	80fe2 <Cl_alarms_scanforAlarms+0x92>
		{
			powerfailurecount++;
   80f7c:	4b95      	ldr	r3, [pc, #596]	; (811d4 <Cl_alarms_scanforAlarms+0x284>)
   80f7e:	681b      	ldr	r3, [r3, #0]
   80f80:	3301      	adds	r3, #1
   80f82:	4a94      	ldr	r2, [pc, #592]	; (811d4 <Cl_alarms_scanforAlarms+0x284>)
   80f84:	6013      	str	r3, [r2, #0]

//if(powerfailurecount > 5){
			powerfailurecount = 0 ;
   80f86:	4b93      	ldr	r3, [pc, #588]	; (811d4 <Cl_alarms_scanforAlarms+0x284>)
   80f88:	2200      	movs	r2, #0
   80f8a:	601a      	str	r2, [r3, #0]
			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_DETECTED;
   80f8c:	4b8f      	ldr	r3, [pc, #572]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80f8e:	2201      	movs	r2, #1
   80f90:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=POWER_FAILURE; 
   80f94:	4b90      	ldr	r3, [pc, #576]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   80f96:	781b      	ldrb	r3, [r3, #0]
   80f98:	4a8f      	ldr	r2, [pc, #572]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   80f9a:	3301      	adds	r3, #1
   80f9c:	00db      	lsls	r3, r3, #3
   80f9e:	4413      	add	r3, r2
   80fa0:	221d      	movs	r2, #29
   80fa2:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[POWER_FAILURE].cl_detected_count++;
   80fa4:	4b89      	ldr	r3, [pc, #548]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80fa6:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
   80faa:	3301      	adds	r3, #1
   80fac:	b2da      	uxtb	r2, r3
   80fae:	4b87      	ldr	r3, [pc, #540]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80fb0:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
			cl_alarm_triggered = true;
   80fb4:	4b89      	ldr	r3, [pc, #548]	; (811dc <Cl_alarms_scanforAlarms+0x28c>)
   80fb6:	2201      	movs	r2, #1
   80fb8:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = POWER_FAILURE;
   80fba:	4b89      	ldr	r3, [pc, #548]	; (811e0 <Cl_alarms_scanforAlarms+0x290>)
   80fbc:	221d      	movs	r2, #29
   80fbe:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   80fc0:	4b85      	ldr	r3, [pc, #532]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   80fc2:	781b      	ldrb	r3, [r3, #0]
   80fc4:	461a      	mov	r2, r3
   80fc6:	4b84      	ldr	r3, [pc, #528]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   80fc8:	4413      	add	r3, r2
   80fca:	222e      	movs	r2, #46	; 0x2e
   80fcc:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   80fce:	4b85      	ldr	r3, [pc, #532]	; (811e4 <Cl_alarms_scanforAlarms+0x294>)
   80fd0:	4798      	blx	r3
   80fd2:	4603      	mov	r3, r0
   80fd4:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   80fd6:	79fb      	ldrb	r3, [r7, #7]
   80fd8:	2b00      	cmp	r3, #0
   80fda:	d006      	beq.n	80fea <Cl_alarms_scanforAlarms+0x9a>
   80fdc:	4b7a      	ldr	r3, [pc, #488]	; (811c8 <Cl_alarms_scanforAlarms+0x278>)
   80fde:	4798      	blx	r3
   80fe0:	e003      	b.n	80fea <Cl_alarms_scanforAlarms+0x9a>
//}
		}
		else
		{
			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_INACTIVE;
   80fe2:	4b7a      	ldr	r3, [pc, #488]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80fe4:	2204      	movs	r2, #4
   80fe6:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
		
	}
	
	
	
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
   80fea:	4b78      	ldr	r3, [pc, #480]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80fec:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   80ff0:	2b00      	cmp	r3, #0
   80ff2:	d049      	beq.n	81088 <Cl_alarms_scanforAlarms+0x138>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   80ff4:	4b75      	ldr	r3, [pc, #468]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   80ff6:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   80ffa:	2b01      	cmp	r3, #1
   80ffc:	d104      	bne.n	81008 <Cl_alarms_scanforAlarms+0xb8>
   80ffe:	4b74      	ldr	r3, [pc, #464]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   81000:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   81004:	2b00      	cmp	r3, #0
   81006:	d109      	bne.n	8101c <Cl_alarms_scanforAlarms+0xcc>
   81008:	4b70      	ldr	r3, [pc, #448]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8100a:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   8100e:	2b00      	cmp	r3, #0
   81010:	d134      	bne.n	8107c <Cl_alarms_scanforAlarms+0x12c>
   81012:	4b6f      	ldr	r3, [pc, #444]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   81014:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   81018:	2b00      	cmp	r3, #0
   8101a:	d12f      	bne.n	8107c <Cl_alarms_scanforAlarms+0x12c>
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8101c:	4b6b      	ldr	r3, [pc, #428]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8101e:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   81022:	2b01      	cmp	r3, #1
   81024:	d02f      	beq.n	81086 <Cl_alarms_scanforAlarms+0x136>
			{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81026:	4b69      	ldr	r3, [pc, #420]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81028:	2201      	movs	r2, #1
   8102a:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   8102e:	4b6a      	ldr	r3, [pc, #424]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   81030:	781b      	ldrb	r3, [r3, #0]
   81032:	4a69      	ldr	r2, [pc, #420]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   81034:	3301      	adds	r3, #1
   81036:	00db      	lsls	r3, r3, #3
   81038:	4413      	add	r3, r2
   8103a:	2229      	movs	r2, #41	; 0x29
   8103c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN_OPEN].cl_detected_count++;
   8103e:	4b63      	ldr	r3, [pc, #396]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81040:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   81044:	3301      	adds	r3, #1
   81046:	b2da      	uxtb	r2, r3
   81048:	4b60      	ldr	r3, [pc, #384]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8104a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
			cl_alarm_triggered = true;
   8104e:	4b63      	ldr	r3, [pc, #396]	; (811dc <Cl_alarms_scanforAlarms+0x28c>)
   81050:	2201      	movs	r2, #1
   81052:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN_OPEN;
   81054:	4b62      	ldr	r3, [pc, #392]	; (811e0 <Cl_alarms_scanforAlarms+0x290>)
   81056:	2229      	movs	r2, #41	; 0x29
   81058:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8105a:	4b5f      	ldr	r3, [pc, #380]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   8105c:	781b      	ldrb	r3, [r3, #0]
   8105e:	461a      	mov	r2, r3
   81060:	4b5d      	ldr	r3, [pc, #372]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   81062:	4413      	add	r3, r2
   81064:	222e      	movs	r2, #46	; 0x2e
   81066:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81068:	4b5e      	ldr	r3, [pc, #376]	; (811e4 <Cl_alarms_scanforAlarms+0x294>)
   8106a:	4798      	blx	r3
   8106c:	4603      	mov	r3, r0
   8106e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81070:	79fb      	ldrb	r3, [r7, #7]
   81072:	2b00      	cmp	r3, #0
   81074:	d007      	beq.n	81086 <Cl_alarms_scanforAlarms+0x136>
   81076:	4b54      	ldr	r3, [pc, #336]	; (811c8 <Cl_alarms_scanforAlarms+0x278>)
   81078:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8107a:	e004      	b.n	81086 <Cl_alarms_scanforAlarms+0x136>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   8107c:	4b53      	ldr	r3, [pc, #332]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8107e:	2204      	movs	r2, #4
   81080:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   81084:	e000      	b.n	81088 <Cl_alarms_scanforAlarms+0x138>
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81086:	bf00      	nop
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}	
	}
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
   81088:	4b50      	ldr	r3, [pc, #320]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8108a:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   8108e:	2b00      	cmp	r3, #0
   81090:	d049      	beq.n	81126 <Cl_alarms_scanforAlarms+0x1d6>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   81092:	4b4e      	ldr	r3, [pc, #312]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81094:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   81098:	2b01      	cmp	r3, #1
   8109a:	d104      	bne.n	810a6 <Cl_alarms_scanforAlarms+0x156>
   8109c:	4b4c      	ldr	r3, [pc, #304]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   8109e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   810a2:	2b00      	cmp	r3, #0
   810a4:	d109      	bne.n	810ba <Cl_alarms_scanforAlarms+0x16a>
   810a6:	4b49      	ldr	r3, [pc, #292]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   810a8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   810ac:	2b00      	cmp	r3, #0
   810ae:	d134      	bne.n	8111a <Cl_alarms_scanforAlarms+0x1ca>
   810b0:	4b47      	ldr	r3, [pc, #284]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   810b2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   810b6:	2b00      	cmp	r3, #0
   810b8:	d12f      	bne.n	8111a <Cl_alarms_scanforAlarms+0x1ca>
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   810ba:	4b44      	ldr	r3, [pc, #272]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   810bc:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   810c0:	2b01      	cmp	r3, #1
   810c2:	d02f      	beq.n	81124 <Cl_alarms_scanforAlarms+0x1d4>
			{
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   810c4:	4b41      	ldr	r3, [pc, #260]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   810c6:	2201      	movs	r2, #1
   810c8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   810cc:	4b42      	ldr	r3, [pc, #264]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   810ce:	781b      	ldrb	r3, [r3, #0]
   810d0:	4a41      	ldr	r2, [pc, #260]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   810d2:	3301      	adds	r3, #1
   810d4:	00db      	lsls	r3, r3, #3
   810d6:	4413      	add	r3, r2
   810d8:	2229      	movs	r2, #41	; 0x29
   810da:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_detected_count++;
   810dc:	4b3b      	ldr	r3, [pc, #236]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   810de:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   810e2:	3301      	adds	r3, #1
   810e4:	b2da      	uxtb	r2, r3
   810e6:	4b39      	ldr	r3, [pc, #228]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   810e8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
				cl_alarm_triggered = true;
   810ec:	4b3b      	ldr	r3, [pc, #236]	; (811dc <Cl_alarms_scanforAlarms+0x28c>)
   810ee:	2201      	movs	r2, #1
   810f0:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = ACID_IN_CLOSED;
   810f2:	4b3b      	ldr	r3, [pc, #236]	; (811e0 <Cl_alarms_scanforAlarms+0x290>)
   810f4:	222a      	movs	r2, #42	; 0x2a
   810f6:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   810f8:	4b37      	ldr	r3, [pc, #220]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   810fa:	781b      	ldrb	r3, [r3, #0]
   810fc:	461a      	mov	r2, r3
   810fe:	4b36      	ldr	r3, [pc, #216]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   81100:	4413      	add	r3, r2
   81102:	222e      	movs	r2, #46	; 0x2e
   81104:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81106:	4b37      	ldr	r3, [pc, #220]	; (811e4 <Cl_alarms_scanforAlarms+0x294>)
   81108:	4798      	blx	r3
   8110a:	4603      	mov	r3, r0
   8110c:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   8110e:	79fb      	ldrb	r3, [r7, #7]
   81110:	2b00      	cmp	r3, #0
   81112:	d007      	beq.n	81124 <Cl_alarms_scanforAlarms+0x1d4>
   81114:	4b2c      	ldr	r3, [pc, #176]	; (811c8 <Cl_alarms_scanforAlarms+0x278>)
   81116:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81118:	e004      	b.n	81124 <Cl_alarms_scanforAlarms+0x1d4>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   8111a:	4b2c      	ldr	r3, [pc, #176]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8111c:	2204      	movs	r2, #4
   8111e:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   81122:	e000      	b.n	81126 <Cl_alarms_scanforAlarms+0x1d6>
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81124:	bf00      	nop
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
   81126:	4b29      	ldr	r3, [pc, #164]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81128:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   8112c:	2b00      	cmp	r3, #0
   8112e:	d05c      	beq.n	811ea <Cl_alarms_scanforAlarms+0x29a>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   81130:	4b26      	ldr	r3, [pc, #152]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81132:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   81136:	2b01      	cmp	r3, #1
   81138:	d104      	bne.n	81144 <Cl_alarms_scanforAlarms+0x1f4>
   8113a:	4b25      	ldr	r3, [pc, #148]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   8113c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81140:	2b00      	cmp	r3, #0
   81142:	d109      	bne.n	81158 <Cl_alarms_scanforAlarms+0x208>
   81144:	4b21      	ldr	r3, [pc, #132]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81146:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   8114a:	2b00      	cmp	r3, #0
   8114c:	d134      	bne.n	811b8 <Cl_alarms_scanforAlarms+0x268>
   8114e:	4b20      	ldr	r3, [pc, #128]	; (811d0 <Cl_alarms_scanforAlarms+0x280>)
   81150:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81154:	2b00      	cmp	r3, #0
   81156:	d12f      	bne.n	811b8 <Cl_alarms_scanforAlarms+0x268>
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81158:	4b1c      	ldr	r3, [pc, #112]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8115a:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   8115e:	2b01      	cmp	r3, #1
   81160:	d042      	beq.n	811e8 <Cl_alarms_scanforAlarms+0x298>
			{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81162:	4b1a      	ldr	r3, [pc, #104]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81164:	2201      	movs	r2, #1
   81166:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_OPEN;
   8116a:	4b1b      	ldr	r3, [pc, #108]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   8116c:	781b      	ldrb	r3, [r3, #0]
   8116e:	4a1a      	ldr	r2, [pc, #104]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   81170:	3301      	adds	r3, #1
   81172:	00db      	lsls	r3, r3, #3
   81174:	4413      	add	r3, r2
   81176:	222b      	movs	r2, #43	; 0x2b
   81178:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_detected_count++;
   8117a:	4b14      	ldr	r3, [pc, #80]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   8117c:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   81180:	3301      	adds	r3, #1
   81182:	b2da      	uxtb	r2, r3
   81184:	4b11      	ldr	r3, [pc, #68]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   81186:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
			cl_alarm_triggered = true;
   8118a:	4b14      	ldr	r3, [pc, #80]	; (811dc <Cl_alarms_scanforAlarms+0x28c>)
   8118c:	2201      	movs	r2, #1
   8118e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN_OPEN;
   81190:	4b13      	ldr	r3, [pc, #76]	; (811e0 <Cl_alarms_scanforAlarms+0x290>)
   81192:	222b      	movs	r2, #43	; 0x2b
   81194:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81196:	4b10      	ldr	r3, [pc, #64]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   81198:	781b      	ldrb	r3, [r3, #0]
   8119a:	461a      	mov	r2, r3
   8119c:	4b0e      	ldr	r3, [pc, #56]	; (811d8 <Cl_alarms_scanforAlarms+0x288>)
   8119e:	4413      	add	r3, r2
   811a0:	222e      	movs	r2, #46	; 0x2e
   811a2:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   811a4:	4b0f      	ldr	r3, [pc, #60]	; (811e4 <Cl_alarms_scanforAlarms+0x294>)
   811a6:	4798      	blx	r3
   811a8:	4603      	mov	r3, r0
   811aa:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   811ac:	79fb      	ldrb	r3, [r7, #7]
   811ae:	2b00      	cmp	r3, #0
   811b0:	d01a      	beq.n	811e8 <Cl_alarms_scanforAlarms+0x298>
   811b2:	4b05      	ldr	r3, [pc, #20]	; (811c8 <Cl_alarms_scanforAlarms+0x278>)
   811b4:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   811b6:	e017      	b.n	811e8 <Cl_alarms_scanforAlarms+0x298>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   811b8:	4b04      	ldr	r3, [pc, #16]	; (811cc <Cl_alarms_scanforAlarms+0x27c>)
   811ba:	2204      	movs	r2, #4
   811bc:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
   811c0:	e013      	b.n	811ea <Cl_alarms_scanforAlarms+0x29a>
   811c2:	bf00      	nop
   811c4:	00080d51 	.word	0x00080d51
   811c8:	00088aa9 	.word	0x00088aa9
   811cc:	20071c0c 	.word	0x20071c0c
   811d0:	2007216c 	.word	0x2007216c
   811d4:	20071700 	.word	0x20071700
   811d8:	20072214 	.word	0x20072214
   811dc:	200716d9 	.word	0x200716d9
   811e0:	20072040 	.word	0x20072040
   811e4:	00082919 	.word	0x00082919
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   811e8:	bf00      	nop
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
   811ea:	4b9e      	ldr	r3, [pc, #632]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   811ec:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   811f0:	2b00      	cmp	r3, #0
   811f2:	d049      	beq.n	81288 <Cl_alarms_scanforAlarms+0x338>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   811f4:	4b9b      	ldr	r3, [pc, #620]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   811f6:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   811fa:	2b01      	cmp	r3, #1
   811fc:	d104      	bne.n	81208 <Cl_alarms_scanforAlarms+0x2b8>
   811fe:	4b9a      	ldr	r3, [pc, #616]	; (81468 <Cl_alarms_scanforAlarms+0x518>)
   81200:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81204:	2b00      	cmp	r3, #0
   81206:	d109      	bne.n	8121c <Cl_alarms_scanforAlarms+0x2cc>
   81208:	4b96      	ldr	r3, [pc, #600]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8120a:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   8120e:	2b00      	cmp	r3, #0
   81210:	d134      	bne.n	8127c <Cl_alarms_scanforAlarms+0x32c>
   81212:	4b95      	ldr	r3, [pc, #596]	; (81468 <Cl_alarms_scanforAlarms+0x518>)
   81214:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   81218:	2b00      	cmp	r3, #0
   8121a:	d12f      	bne.n	8127c <Cl_alarms_scanforAlarms+0x32c>
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8121c:	4b91      	ldr	r3, [pc, #580]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8121e:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   81222:	2b01      	cmp	r3, #1
   81224:	d02f      	beq.n	81286 <Cl_alarms_scanforAlarms+0x336>
			{
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81226:	4b8f      	ldr	r3, [pc, #572]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81228:	2201      	movs	r2, #1
   8122a:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_CLOSED;
   8122e:	4b8f      	ldr	r3, [pc, #572]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81230:	781b      	ldrb	r3, [r3, #0]
   81232:	4a8e      	ldr	r2, [pc, #568]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81234:	3301      	adds	r3, #1
   81236:	00db      	lsls	r3, r3, #3
   81238:	4413      	add	r3, r2
   8123a:	222c      	movs	r2, #44	; 0x2c
   8123c:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_detected_count++;
   8123e:	4b89      	ldr	r3, [pc, #548]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81240:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   81244:	3301      	adds	r3, #1
   81246:	b2da      	uxtb	r2, r3
   81248:	4b86      	ldr	r3, [pc, #536]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8124a:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
				cl_alarm_triggered = true;
   8124e:	4b88      	ldr	r3, [pc, #544]	; (81470 <Cl_alarms_scanforAlarms+0x520>)
   81250:	2201      	movs	r2, #1
   81252:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = BICARB_IN_CLOSED;
   81254:	4b87      	ldr	r3, [pc, #540]	; (81474 <Cl_alarms_scanforAlarms+0x524>)
   81256:	222c      	movs	r2, #44	; 0x2c
   81258:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8125a:	4b84      	ldr	r3, [pc, #528]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   8125c:	781b      	ldrb	r3, [r3, #0]
   8125e:	461a      	mov	r2, r3
   81260:	4b82      	ldr	r3, [pc, #520]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81262:	4413      	add	r3, r2
   81264:	222e      	movs	r2, #46	; 0x2e
   81266:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81268:	4b83      	ldr	r3, [pc, #524]	; (81478 <Cl_alarms_scanforAlarms+0x528>)
   8126a:	4798      	blx	r3
   8126c:	4603      	mov	r3, r0
   8126e:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81270:	79fb      	ldrb	r3, [r7, #7]
   81272:	2b00      	cmp	r3, #0
   81274:	d007      	beq.n	81286 <Cl_alarms_scanforAlarms+0x336>
   81276:	4b81      	ldr	r3, [pc, #516]	; (8147c <Cl_alarms_scanforAlarms+0x52c>)
   81278:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8127a:	e004      	b.n	81286 <Cl_alarms_scanforAlarms+0x336>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   8127c:	4b79      	ldr	r3, [pc, #484]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8127e:	2204      	movs	r2, #4
   81280:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
   81284:	e000      	b.n	81288 <Cl_alarms_scanforAlarms+0x338>
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81286:	bf00      	nop
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   81288:	4b76      	ldr	r3, [pc, #472]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8128a:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   8128e:	2b00      	cmp	r3, #0
   81290:	d032      	beq.n	812f8 <Cl_alarms_scanforAlarms+0x3a8>
	{
		
		if(cl_sys_statbuffer.abdstatus)
   81292:	4b75      	ldr	r3, [pc, #468]	; (81468 <Cl_alarms_scanforAlarms+0x518>)
   81294:	8b1b      	ldrh	r3, [r3, #24]
   81296:	2b00      	cmp	r3, #0
   81298:	d02a      	beq.n	812f0 <Cl_alarms_scanforAlarms+0x3a0>
		{

			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8129a:	4b72      	ldr	r3, [pc, #456]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8129c:	2201      	movs	r2, #1
   8129e:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ABD_EVENT; 
   812a2:	4b72      	ldr	r3, [pc, #456]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   812a4:	781b      	ldrb	r3, [r3, #0]
   812a6:	4a71      	ldr	r2, [pc, #452]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   812a8:	3301      	adds	r3, #1
   812aa:	00db      	lsls	r3, r3, #3
   812ac:	4413      	add	r3, r2
   812ae:	2220      	movs	r2, #32
   812b0:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   812b2:	4b6c      	ldr	r3, [pc, #432]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   812b4:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   812b8:	3301      	adds	r3, #1
   812ba:	b2da      	uxtb	r2, r3
   812bc:	4b69      	ldr	r3, [pc, #420]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   812be:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   812c2:	4b6b      	ldr	r3, [pc, #428]	; (81470 <Cl_alarms_scanforAlarms+0x520>)
   812c4:	2201      	movs	r2, #1
   812c6:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   812c8:	4b6a      	ldr	r3, [pc, #424]	; (81474 <Cl_alarms_scanforAlarms+0x524>)
   812ca:	2220      	movs	r2, #32
   812cc:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   812ce:	4b67      	ldr	r3, [pc, #412]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   812d0:	781b      	ldrb	r3, [r3, #0]
   812d2:	461a      	mov	r2, r3
   812d4:	4b65      	ldr	r3, [pc, #404]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   812d6:	4413      	add	r3, r2
   812d8:	222e      	movs	r2, #46	; 0x2e
   812da:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   812dc:	4b66      	ldr	r3, [pc, #408]	; (81478 <Cl_alarms_scanforAlarms+0x528>)
   812de:	4798      	blx	r3
   812e0:	4603      	mov	r3, r0
   812e2:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   812e4:	79fb      	ldrb	r3, [r7, #7]
   812e6:	2b00      	cmp	r3, #0
   812e8:	d006      	beq.n	812f8 <Cl_alarms_scanforAlarms+0x3a8>
   812ea:	4b64      	ldr	r3, [pc, #400]	; (8147c <Cl_alarms_scanforAlarms+0x52c>)
   812ec:	4798      	blx	r3
   812ee:	e003      	b.n	812f8 <Cl_alarms_scanforAlarms+0x3a8>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   812f0:	4b5c      	ldr	r3, [pc, #368]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   812f2:	2204      	movs	r2, #4
   812f4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   812f8:	4b5a      	ldr	r3, [pc, #360]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   812fa:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   812fe:	2b00      	cmp	r3, #0
   81300:	d032      	beq.n	81368 <Cl_alarms_scanforAlarms+0x418>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   81302:	4b59      	ldr	r3, [pc, #356]	; (81468 <Cl_alarms_scanforAlarms+0x518>)
   81304:	8b5b      	ldrh	r3, [r3, #26]
   81306:	2b00      	cmp	r3, #0
   81308:	d02a      	beq.n	81360 <Cl_alarms_scanforAlarms+0x410>
		{

			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8130a:	4b56      	ldr	r3, [pc, #344]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8130c:	2201      	movs	r2, #1
   8130e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BD_EVENT; 
   81312:	4b56      	ldr	r3, [pc, #344]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81314:	781b      	ldrb	r3, [r3, #0]
   81316:	4a55      	ldr	r2, [pc, #340]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81318:	3301      	adds	r3, #1
   8131a:	00db      	lsls	r3, r3, #3
   8131c:	4413      	add	r3, r2
   8131e:	2221      	movs	r2, #33	; 0x21
   81320:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   81322:	4b50      	ldr	r3, [pc, #320]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81324:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   81328:	3301      	adds	r3, #1
   8132a:	b2da      	uxtb	r2, r3
   8132c:	4b4d      	ldr	r3, [pc, #308]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8132e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			cl_alarm_triggered = true;
   81332:	4b4f      	ldr	r3, [pc, #316]	; (81470 <Cl_alarms_scanforAlarms+0x520>)
   81334:	2201      	movs	r2, #1
   81336:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   81338:	4b4e      	ldr	r3, [pc, #312]	; (81474 <Cl_alarms_scanforAlarms+0x524>)
   8133a:	2221      	movs	r2, #33	; 0x21
   8133c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8133e:	4b4b      	ldr	r3, [pc, #300]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81340:	781b      	ldrb	r3, [r3, #0]
   81342:	461a      	mov	r2, r3
   81344:	4b49      	ldr	r3, [pc, #292]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81346:	4413      	add	r3, r2
   81348:	222e      	movs	r2, #46	; 0x2e
   8134a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8134c:	4b4a      	ldr	r3, [pc, #296]	; (81478 <Cl_alarms_scanforAlarms+0x528>)
   8134e:	4798      	blx	r3
   81350:	4603      	mov	r3, r0
   81352:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81354:	79fb      	ldrb	r3, [r7, #7]
   81356:	2b00      	cmp	r3, #0
   81358:	d006      	beq.n	81368 <Cl_alarms_scanforAlarms+0x418>
   8135a:	4b48      	ldr	r3, [pc, #288]	; (8147c <Cl_alarms_scanforAlarms+0x52c>)
   8135c:	4798      	blx	r3
   8135e:	e003      	b.n	81368 <Cl_alarms_scanforAlarms+0x418>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81360:	4b40      	ldr	r3, [pc, #256]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81362:	2204      	movs	r2, #4
   81364:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   81368:	4b3e      	ldr	r3, [pc, #248]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8136a:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   8136e:	2b00      	cmp	r3, #0
   81370:	d033      	beq.n	813da <Cl_alarms_scanforAlarms+0x48a>
	{
				if(cl_sys_statbuffer.bldstatus)
   81372:	4b3d      	ldr	r3, [pc, #244]	; (81468 <Cl_alarms_scanforAlarms+0x518>)
   81374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   81378:	2b00      	cmp	r3, #0
   8137a:	d02a      	beq.n	813d2 <Cl_alarms_scanforAlarms+0x482>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8137c:	4b39      	ldr	r3, [pc, #228]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   8137e:	2201      	movs	r2, #1
   81380:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLD_EVENT; 
   81384:	4b39      	ldr	r3, [pc, #228]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81386:	781b      	ldrb	r3, [r3, #0]
   81388:	4a38      	ldr	r2, [pc, #224]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   8138a:	3301      	adds	r3, #1
   8138c:	00db      	lsls	r3, r3, #3
   8138e:	4413      	add	r3, r2
   81390:	2222      	movs	r2, #34	; 0x22
   81392:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   81394:	4b33      	ldr	r3, [pc, #204]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81396:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   8139a:	3301      	adds	r3, #1
   8139c:	b2da      	uxtb	r2, r3
   8139e:	4b31      	ldr	r3, [pc, #196]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   813a0:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
					cl_alarm_triggered = true;
   813a4:	4b32      	ldr	r3, [pc, #200]	; (81470 <Cl_alarms_scanforAlarms+0x520>)
   813a6:	2201      	movs	r2, #1
   813a8:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   813aa:	4b32      	ldr	r3, [pc, #200]	; (81474 <Cl_alarms_scanforAlarms+0x524>)
   813ac:	2222      	movs	r2, #34	; 0x22
   813ae:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   813b0:	4b2e      	ldr	r3, [pc, #184]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   813b2:	781b      	ldrb	r3, [r3, #0]
   813b4:	461a      	mov	r2, r3
   813b6:	4b2d      	ldr	r3, [pc, #180]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   813b8:	4413      	add	r3, r2
   813ba:	222e      	movs	r2, #46	; 0x2e
   813bc:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   813be:	4b2e      	ldr	r3, [pc, #184]	; (81478 <Cl_alarms_scanforAlarms+0x528>)
   813c0:	4798      	blx	r3
   813c2:	4603      	mov	r3, r0
   813c4:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   813c6:	79fb      	ldrb	r3, [r7, #7]
   813c8:	2b00      	cmp	r3, #0
   813ca:	d006      	beq.n	813da <Cl_alarms_scanforAlarms+0x48a>
   813cc:	4b2b      	ldr	r3, [pc, #172]	; (8147c <Cl_alarms_scanforAlarms+0x52c>)
   813ce:	4798      	blx	r3
   813d0:	e003      	b.n	813da <Cl_alarms_scanforAlarms+0x48a>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   813d2:	4b24      	ldr	r3, [pc, #144]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   813d4:	2204      	movs	r2, #4
   813d6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					
				}
	}
		if(Cl_alarms_alarms[TMP_HIGH].cl_is_enabled)
   813da:	4b22      	ldr	r3, [pc, #136]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   813dc:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
   813e0:	2b00      	cmp	r3, #0
   813e2:	d060      	beq.n	814a6 <Cl_alarms_scanforAlarms+0x556>
		{
			
			if (Cl_alarms_alarms[TMP_HIGH].cl_alarmstate != CL_ALARM_DETECTED)
   813e4:	4b1f      	ldr	r3, [pc, #124]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   813e6:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
   813ea:	2b01      	cmp	r3, #1
   813ec:	d052      	beq.n	81494 <Cl_alarms_scanforAlarms+0x544>
			{
				if(tmpVal > Cl_alarmThresholdTable.tmp_high_threshold -1000) //Cl_alarms_alarms[TMP_HIGH].cl_upper - 1000)
   813ee:	4b24      	ldr	r3, [pc, #144]	; (81480 <Cl_alarms_scanforAlarms+0x530>)
   813f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   813f2:	4b24      	ldr	r3, [pc, #144]	; (81484 <Cl_alarms_scanforAlarms+0x534>)
   813f4:	4924      	ldr	r1, [pc, #144]	; (81488 <Cl_alarms_scanforAlarms+0x538>)
   813f6:	4610      	mov	r0, r2
   813f8:	4798      	blx	r3
   813fa:	4603      	mov	r3, r0
   813fc:	4618      	mov	r0, r3
   813fe:	4b23      	ldr	r3, [pc, #140]	; (8148c <Cl_alarms_scanforAlarms+0x53c>)
   81400:	681a      	ldr	r2, [r3, #0]
   81402:	4b23      	ldr	r3, [pc, #140]	; (81490 <Cl_alarms_scanforAlarms+0x540>)
   81404:	4611      	mov	r1, r2
   81406:	4798      	blx	r3
   81408:	4603      	mov	r3, r0
   8140a:	2b00      	cmp	r3, #0
   8140c:	d04b      	beq.n	814a6 <Cl_alarms_scanforAlarms+0x556>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[TMP_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   8140e:	4b15      	ldr	r3, [pc, #84]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81410:	2201      	movs	r2, #1
   81412:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TMP_HIGH;
   81416:	4b15      	ldr	r3, [pc, #84]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81418:	781b      	ldrb	r3, [r3, #0]
   8141a:	4a14      	ldr	r2, [pc, #80]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   8141c:	3301      	adds	r3, #1
   8141e:	00db      	lsls	r3, r3, #3
   81420:	4413      	add	r3, r2
   81422:	2241      	movs	r2, #65	; 0x41
   81424:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TMP_HIGH].cl_detected_count++;
   81426:	4b0f      	ldr	r3, [pc, #60]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81428:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
   8142c:	3301      	adds	r3, #1
   8142e:	b2da      	uxtb	r2, r3
   81430:	4b0c      	ldr	r3, [pc, #48]	; (81464 <Cl_alarms_scanforAlarms+0x514>)
   81432:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
					cl_alarm_triggered = true;
   81436:	4b0e      	ldr	r3, [pc, #56]	; (81470 <Cl_alarms_scanforAlarms+0x520>)
   81438:	2201      	movs	r2, #1
   8143a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = TMP_HIGH;
   8143c:	4b0d      	ldr	r3, [pc, #52]	; (81474 <Cl_alarms_scanforAlarms+0x524>)
   8143e:	2241      	movs	r2, #65	; 0x41
   81440:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81442:	4b0a      	ldr	r3, [pc, #40]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   81444:	781b      	ldrb	r3, [r3, #0]
   81446:	461a      	mov	r2, r3
   81448:	4b08      	ldr	r3, [pc, #32]	; (8146c <Cl_alarms_scanforAlarms+0x51c>)
   8144a:	4413      	add	r3, r2
   8144c:	222e      	movs	r2, #46	; 0x2e
   8144e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81450:	4b09      	ldr	r3, [pc, #36]	; (81478 <Cl_alarms_scanforAlarms+0x528>)
   81452:	4798      	blx	r3
   81454:	4603      	mov	r3, r0
   81456:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81458:	79fb      	ldrb	r3, [r7, #7]
   8145a:	2b00      	cmp	r3, #0
   8145c:	d023      	beq.n	814a6 <Cl_alarms_scanforAlarms+0x556>
   8145e:	4b07      	ldr	r3, [pc, #28]	; (8147c <Cl_alarms_scanforAlarms+0x52c>)
   81460:	4798      	blx	r3
   81462:	e020      	b.n	814a6 <Cl_alarms_scanforAlarms+0x556>
   81464:	20071c0c 	.word	0x20071c0c
   81468:	2007216c 	.word	0x2007216c
   8146c:	20072214 	.word	0x20072214
   81470:	200716d9 	.word	0x200716d9
   81474:	20072040 	.word	0x20072040
   81478:	00082919 	.word	0x00082919
   8147c:	00088aa9 	.word	0x00088aa9
   81480:	20072044 	.word	0x20072044
   81484:	000a7d95 	.word	0x000a7d95
   81488:	447a0000 	.word	0x447a0000
   8148c:	200716dc 	.word	0x200716dc
   81490:	000a82e5 	.word	0x000a82e5
				}
				
			}
			else if (Cl_alarms_alarms[TMP_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81494:	4b99      	ldr	r3, [pc, #612]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81496:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
   8149a:	2b01      	cmp	r3, #1
   8149c:	d103      	bne.n	814a6 <Cl_alarms_scanforAlarms+0x556>
			{
				Cl_alarms_alarms[TMP_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   8149e:	4b97      	ldr	r3, [pc, #604]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   814a0:	2204      	movs	r2, #4
   814a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
			}
		}
	
		if(Cl_alarms_alarms[TMP_LOW].cl_is_enabled)
   814a6:	4b95      	ldr	r3, [pc, #596]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   814a8:	f893 342e 	ldrb.w	r3, [r3, #1070]	; 0x42e
   814ac:	2b00      	cmp	r3, #0
   814ae:	d048      	beq.n	81542 <Cl_alarms_scanforAlarms+0x5f2>
		{
			
			if (Cl_alarms_alarms[TMP_LOW].cl_alarmstate != CL_ALARM_DETECTED)
   814b0:	4b92      	ldr	r3, [pc, #584]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   814b2:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
   814b6:	2b01      	cmp	r3, #1
   814b8:	d03a      	beq.n	81530 <Cl_alarms_scanforAlarms+0x5e0>
			{
				if(tmpVal < Cl_alarmThresholdTable.tmp_low_threshold -1000)// Cl_alarms_alarms[TMP_LOW].cl_upper - 1000)
   814ba:	4b91      	ldr	r3, [pc, #580]	; (81700 <Cl_alarms_scanforAlarms+0x7b0>)
   814bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   814be:	4b91      	ldr	r3, [pc, #580]	; (81704 <Cl_alarms_scanforAlarms+0x7b4>)
   814c0:	4991      	ldr	r1, [pc, #580]	; (81708 <Cl_alarms_scanforAlarms+0x7b8>)
   814c2:	4610      	mov	r0, r2
   814c4:	4798      	blx	r3
   814c6:	4603      	mov	r3, r0
   814c8:	4618      	mov	r0, r3
   814ca:	4b90      	ldr	r3, [pc, #576]	; (8170c <Cl_alarms_scanforAlarms+0x7bc>)
   814cc:	681a      	ldr	r2, [r3, #0]
   814ce:	4b90      	ldr	r3, [pc, #576]	; (81710 <Cl_alarms_scanforAlarms+0x7c0>)
   814d0:	4611      	mov	r1, r2
   814d2:	4798      	blx	r3
   814d4:	4603      	mov	r3, r0
   814d6:	2b00      	cmp	r3, #0
   814d8:	d033      	beq.n	81542 <Cl_alarms_scanforAlarms+0x5f2>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[TMP_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   814da:	4b88      	ldr	r3, [pc, #544]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   814dc:	2201      	movs	r2, #1
   814de:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TMP_LOW;
   814e2:	4b8c      	ldr	r3, [pc, #560]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   814e4:	781b      	ldrb	r3, [r3, #0]
   814e6:	4a8b      	ldr	r2, [pc, #556]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   814e8:	3301      	adds	r3, #1
   814ea:	00db      	lsls	r3, r3, #3
   814ec:	4413      	add	r3, r2
   814ee:	2242      	movs	r2, #66	; 0x42
   814f0:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TMP_LOW].cl_detected_count++;
   814f2:	4b82      	ldr	r3, [pc, #520]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   814f4:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
   814f8:	3301      	adds	r3, #1
   814fa:	b2da      	uxtb	r2, r3
   814fc:	4b7f      	ldr	r3, [pc, #508]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   814fe:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
					cl_alarm_triggered = true;
   81502:	4b85      	ldr	r3, [pc, #532]	; (81718 <Cl_alarms_scanforAlarms+0x7c8>)
   81504:	2201      	movs	r2, #1
   81506:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = TMP_LOW;
   81508:	4b84      	ldr	r3, [pc, #528]	; (8171c <Cl_alarms_scanforAlarms+0x7cc>)
   8150a:	2242      	movs	r2, #66	; 0x42
   8150c:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8150e:	4b81      	ldr	r3, [pc, #516]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   81510:	781b      	ldrb	r3, [r3, #0]
   81512:	461a      	mov	r2, r3
   81514:	4b7f      	ldr	r3, [pc, #508]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   81516:	4413      	add	r3, r2
   81518:	222e      	movs	r2, #46	; 0x2e
   8151a:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8151c:	4b80      	ldr	r3, [pc, #512]	; (81720 <Cl_alarms_scanforAlarms+0x7d0>)
   8151e:	4798      	blx	r3
   81520:	4603      	mov	r3, r0
   81522:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81524:	79fb      	ldrb	r3, [r7, #7]
   81526:	2b00      	cmp	r3, #0
   81528:	d00b      	beq.n	81542 <Cl_alarms_scanforAlarms+0x5f2>
   8152a:	4b7e      	ldr	r3, [pc, #504]	; (81724 <Cl_alarms_scanforAlarms+0x7d4>)
   8152c:	4798      	blx	r3
   8152e:	e008      	b.n	81542 <Cl_alarms_scanforAlarms+0x5f2>
				}
				
			}
			else if (Cl_alarms_alarms[TMP_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81530:	4b72      	ldr	r3, [pc, #456]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81532:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
   81536:	2b01      	cmp	r3, #1
   81538:	d103      	bne.n	81542 <Cl_alarms_scanforAlarms+0x5f2>
			{
				Cl_alarms_alarms[TMP_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   8153a:	4b70      	ldr	r3, [pc, #448]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   8153c:	2204      	movs	r2, #4
   8153e:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
			}
		}
		
	
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   81542:	4b6e      	ldr	r3, [pc, #440]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81544:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   81548:	2b00      	cmp	r3, #0
   8154a:	d043      	beq.n	815d4 <Cl_alarms_scanforAlarms+0x684>
	{
		
				if(apt > (Cl_alarmThresholdTable.apt_high_threshold - 1000))  // manav03 added -1000
   8154c:	4b6c      	ldr	r3, [pc, #432]	; (81700 <Cl_alarms_scanforAlarms+0x7b0>)
   8154e:	689a      	ldr	r2, [r3, #8]
   81550:	4b6c      	ldr	r3, [pc, #432]	; (81704 <Cl_alarms_scanforAlarms+0x7b4>)
   81552:	496d      	ldr	r1, [pc, #436]	; (81708 <Cl_alarms_scanforAlarms+0x7b8>)
   81554:	4610      	mov	r0, r2
   81556:	4798      	blx	r3
   81558:	4603      	mov	r3, r0
   8155a:	4618      	mov	r0, r3
   8155c:	4b72      	ldr	r3, [pc, #456]	; (81728 <Cl_alarms_scanforAlarms+0x7d8>)
   8155e:	681a      	ldr	r2, [r3, #0]
   81560:	4b72      	ldr	r3, [pc, #456]	; (8172c <Cl_alarms_scanforAlarms+0x7dc>)
   81562:	4611      	mov	r1, r2
   81564:	4798      	blx	r3
   81566:	4603      	mov	r3, r0
   81568:	2b00      	cmp	r3, #0
   8156a:	d02a      	beq.n	815c2 <Cl_alarms_scanforAlarms+0x672>
				{

					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   8156c:	4b63      	ldr	r3, [pc, #396]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   8156e:	2201      	movs	r2, #1
   81570:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   81574:	4b67      	ldr	r3, [pc, #412]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   81576:	781b      	ldrb	r3, [r3, #0]
   81578:	4a66      	ldr	r2, [pc, #408]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   8157a:	3301      	adds	r3, #1
   8157c:	00db      	lsls	r3, r3, #3
   8157e:	4413      	add	r3, r2
   81580:	2224      	movs	r2, #36	; 0x24
   81582:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   81584:	4b5d      	ldr	r3, [pc, #372]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81586:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   8158a:	3301      	adds	r3, #1
   8158c:	b2da      	uxtb	r2, r3
   8158e:	4b5b      	ldr	r3, [pc, #364]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81590:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
					cl_alarm_triggered = true;
   81594:	4b60      	ldr	r3, [pc, #384]	; (81718 <Cl_alarms_scanforAlarms+0x7c8>)
   81596:	2201      	movs	r2, #1
   81598:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   8159a:	4b60      	ldr	r3, [pc, #384]	; (8171c <Cl_alarms_scanforAlarms+0x7cc>)
   8159c:	2224      	movs	r2, #36	; 0x24
   8159e:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   815a0:	4b5c      	ldr	r3, [pc, #368]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   815a2:	781b      	ldrb	r3, [r3, #0]
   815a4:	461a      	mov	r2, r3
   815a6:	4b5b      	ldr	r3, [pc, #364]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   815a8:	4413      	add	r3, r2
   815aa:	222e      	movs	r2, #46	; 0x2e
   815ac:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   815ae:	4b5c      	ldr	r3, [pc, #368]	; (81720 <Cl_alarms_scanforAlarms+0x7d0>)
   815b0:	4798      	blx	r3
   815b2:	4603      	mov	r3, r0
   815b4:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   815b6:	79fb      	ldrb	r3, [r7, #7]
   815b8:	2b00      	cmp	r3, #0
   815ba:	d00b      	beq.n	815d4 <Cl_alarms_scanforAlarms+0x684>
   815bc:	4b59      	ldr	r3, [pc, #356]	; (81724 <Cl_alarms_scanforAlarms+0x7d4>)
   815be:	4798      	blx	r3
   815c0:	e008      	b.n	815d4 <Cl_alarms_scanforAlarms+0x684>
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   815c2:	4b4e      	ldr	r3, [pc, #312]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   815c4:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   815c8:	2b01      	cmp	r3, #1
   815ca:	d103      	bne.n	815d4 <Cl_alarms_scanforAlarms+0x684>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   815cc:	4b4b      	ldr	r3, [pc, #300]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   815ce:	2204      	movs	r2, #4
   815d0:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   815d4:	4b49      	ldr	r3, [pc, #292]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   815d6:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   815da:	2b00      	cmp	r3, #0
   815dc:	d043      	beq.n	81666 <Cl_alarms_scanforAlarms+0x716>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
		if(apt < (Cl_alarmThresholdTable.apt_low_threshold -1000)) // manav03 added -1000
   815de:	4b48      	ldr	r3, [pc, #288]	; (81700 <Cl_alarms_scanforAlarms+0x7b0>)
   815e0:	68da      	ldr	r2, [r3, #12]
   815e2:	4b48      	ldr	r3, [pc, #288]	; (81704 <Cl_alarms_scanforAlarms+0x7b4>)
   815e4:	4948      	ldr	r1, [pc, #288]	; (81708 <Cl_alarms_scanforAlarms+0x7b8>)
   815e6:	4610      	mov	r0, r2
   815e8:	4798      	blx	r3
   815ea:	4603      	mov	r3, r0
   815ec:	4618      	mov	r0, r3
   815ee:	4b4e      	ldr	r3, [pc, #312]	; (81728 <Cl_alarms_scanforAlarms+0x7d8>)
   815f0:	681a      	ldr	r2, [r3, #0]
   815f2:	4b47      	ldr	r3, [pc, #284]	; (81710 <Cl_alarms_scanforAlarms+0x7c0>)
   815f4:	4611      	mov	r1, r2
   815f6:	4798      	blx	r3
   815f8:	4603      	mov	r3, r0
   815fa:	2b00      	cmp	r3, #0
   815fc:	d02a      	beq.n	81654 <Cl_alarms_scanforAlarms+0x704>
		{

			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   815fe:	4b3f      	ldr	r3, [pc, #252]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81600:	2201      	movs	r2, #1
   81602:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   81606:	4b43      	ldr	r3, [pc, #268]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   81608:	781b      	ldrb	r3, [r3, #0]
   8160a:	4a42      	ldr	r2, [pc, #264]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   8160c:	3301      	adds	r3, #1
   8160e:	00db      	lsls	r3, r3, #3
   81610:	4413      	add	r3, r2
   81612:	2223      	movs	r2, #35	; 0x23
   81614:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   81616:	4b39      	ldr	r3, [pc, #228]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81618:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   8161c:	3301      	adds	r3, #1
   8161e:	b2da      	uxtb	r2, r3
   81620:	4b36      	ldr	r3, [pc, #216]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81622:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
			cl_alarm_triggered = true;
   81626:	4b3c      	ldr	r3, [pc, #240]	; (81718 <Cl_alarms_scanforAlarms+0x7c8>)
   81628:	2201      	movs	r2, #1
   8162a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   8162c:	4b3b      	ldr	r3, [pc, #236]	; (8171c <Cl_alarms_scanforAlarms+0x7cc>)
   8162e:	2223      	movs	r2, #35	; 0x23
   81630:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81632:	4b38      	ldr	r3, [pc, #224]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   81634:	781b      	ldrb	r3, [r3, #0]
   81636:	461a      	mov	r2, r3
   81638:	4b36      	ldr	r3, [pc, #216]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   8163a:	4413      	add	r3, r2
   8163c:	222e      	movs	r2, #46	; 0x2e
   8163e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81640:	4b37      	ldr	r3, [pc, #220]	; (81720 <Cl_alarms_scanforAlarms+0x7d0>)
   81642:	4798      	blx	r3
   81644:	4603      	mov	r3, r0
   81646:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81648:	79fb      	ldrb	r3, [r7, #7]
   8164a:	2b00      	cmp	r3, #0
   8164c:	d00b      	beq.n	81666 <Cl_alarms_scanforAlarms+0x716>
   8164e:	4b35      	ldr	r3, [pc, #212]	; (81724 <Cl_alarms_scanforAlarms+0x7d4>)
   81650:	4798      	blx	r3
   81652:	e008      	b.n	81666 <Cl_alarms_scanforAlarms+0x716>
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81654:	4b29      	ldr	r3, [pc, #164]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81656:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   8165a:	2b01      	cmp	r3, #1
   8165c:	d103      	bne.n	81666 <Cl_alarms_scanforAlarms+0x716>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   8165e:	4b27      	ldr	r3, [pc, #156]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81660:	2204      	movs	r2, #4
   81662:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   81666:	4b25      	ldr	r3, [pc, #148]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   81668:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   8166c:	2b00      	cmp	r3, #0
   8166e:	d06e      	beq.n	8174e <Cl_alarms_scanforAlarms+0x7fe>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   81670:	2207      	movs	r2, #7
   81672:	492f      	ldr	r1, [pc, #188]	; (81730 <Cl_alarms_scanforAlarms+0x7e0>)
   81674:	2018      	movs	r0, #24
   81676:	4b2f      	ldr	r3, [pc, #188]	; (81734 <Cl_alarms_scanforAlarms+0x7e4>)
   81678:	4798      	blx	r3
		ASSERT_ERROR(Cl_alarms_retcode);
   8167a:	79fb      	ldrb	r3, [r7, #7]
   8167c:	2b00      	cmp	r3, #0
   8167e:	d001      	beq.n	81684 <Cl_alarms_scanforAlarms+0x734>
   81680:	4b28      	ldr	r3, [pc, #160]	; (81724 <Cl_alarms_scanforAlarms+0x7d4>)
   81682:	4798      	blx	r3
				if(vpt > (Cl_alarmThresholdTable.vpt_high_threshold - 1000 ))   // manav03 added -1000
   81684:	4b1e      	ldr	r3, [pc, #120]	; (81700 <Cl_alarms_scanforAlarms+0x7b0>)
   81686:	691a      	ldr	r2, [r3, #16]
   81688:	4b1e      	ldr	r3, [pc, #120]	; (81704 <Cl_alarms_scanforAlarms+0x7b4>)
   8168a:	491f      	ldr	r1, [pc, #124]	; (81708 <Cl_alarms_scanforAlarms+0x7b8>)
   8168c:	4610      	mov	r0, r2
   8168e:	4798      	blx	r3
   81690:	4603      	mov	r3, r0
   81692:	4618      	mov	r0, r3
   81694:	4b28      	ldr	r3, [pc, #160]	; (81738 <Cl_alarms_scanforAlarms+0x7e8>)
   81696:	681a      	ldr	r2, [r3, #0]
   81698:	4b24      	ldr	r3, [pc, #144]	; (8172c <Cl_alarms_scanforAlarms+0x7dc>)
   8169a:	4611      	mov	r1, r2
   8169c:	4798      	blx	r3
   8169e:	4603      	mov	r3, r0
   816a0:	2b00      	cmp	r3, #0
   816a2:	d04b      	beq.n	8173c <Cl_alarms_scanforAlarms+0x7ec>
				{

						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   816a4:	4b15      	ldr	r3, [pc, #84]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   816a6:	2201      	movs	r2, #1
   816a8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   816ac:	4b19      	ldr	r3, [pc, #100]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   816ae:	781b      	ldrb	r3, [r3, #0]
   816b0:	4a18      	ldr	r2, [pc, #96]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   816b2:	3301      	adds	r3, #1
   816b4:	00db      	lsls	r3, r3, #3
   816b6:	4413      	add	r3, r2
   816b8:	2226      	movs	r2, #38	; 0x26
   816ba:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   816bc:	4b0f      	ldr	r3, [pc, #60]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   816be:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   816c2:	3301      	adds	r3, #1
   816c4:	b2da      	uxtb	r2, r3
   816c6:	4b0d      	ldr	r3, [pc, #52]	; (816fc <Cl_alarms_scanforAlarms+0x7ac>)
   816c8:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
						cl_alarm_triggered = true;
   816cc:	4b12      	ldr	r3, [pc, #72]	; (81718 <Cl_alarms_scanforAlarms+0x7c8>)
   816ce:	2201      	movs	r2, #1
   816d0:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   816d2:	4b12      	ldr	r3, [pc, #72]	; (8171c <Cl_alarms_scanforAlarms+0x7cc>)
   816d4:	2226      	movs	r2, #38	; 0x26
   816d6:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   816d8:	4b0e      	ldr	r3, [pc, #56]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   816da:	781b      	ldrb	r3, [r3, #0]
   816dc:	461a      	mov	r2, r3
   816de:	4b0d      	ldr	r3, [pc, #52]	; (81714 <Cl_alarms_scanforAlarms+0x7c4>)
   816e0:	4413      	add	r3, r2
   816e2:	222e      	movs	r2, #46	; 0x2e
   816e4:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   816e6:	4b0e      	ldr	r3, [pc, #56]	; (81720 <Cl_alarms_scanforAlarms+0x7d0>)
   816e8:	4798      	blx	r3
   816ea:	4603      	mov	r3, r0
   816ec:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   816ee:	79fb      	ldrb	r3, [r7, #7]
   816f0:	2b00      	cmp	r3, #0
   816f2:	d02c      	beq.n	8174e <Cl_alarms_scanforAlarms+0x7fe>
   816f4:	4b0b      	ldr	r3, [pc, #44]	; (81724 <Cl_alarms_scanforAlarms+0x7d4>)
   816f6:	4798      	blx	r3
   816f8:	e029      	b.n	8174e <Cl_alarms_scanforAlarms+0x7fe>
   816fa:	bf00      	nop
   816fc:	20071c0c 	.word	0x20071c0c
   81700:	20072044 	.word	0x20072044
   81704:	000a7d95 	.word	0x000a7d95
   81708:	447a0000 	.word	0x447a0000
   8170c:	200716dc 	.word	0x200716dc
   81710:	000a8321 	.word	0x000a8321
   81714:	20072214 	.word	0x20072214
   81718:	200716d9 	.word	0x200716d9
   8171c:	20072040 	.word	0x20072040
   81720:	00082919 	.word	0x00082919
   81724:	00088aa9 	.word	0x00088aa9
   81728:	2007203c 	.word	0x2007203c
   8172c:	000a82e5 	.word	0x000a82e5
   81730:	000a9f6c 	.word	0x000a9f6c
   81734:	0009cbd5 	.word	0x0009cbd5
   81738:	200716e0 	.word	0x200716e0
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   8173c:	4b95      	ldr	r3, [pc, #596]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   8173e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   81742:	2b01      	cmp	r3, #1
   81744:	d103      	bne.n	8174e <Cl_alarms_scanforAlarms+0x7fe>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81746:	4b93      	ldr	r3, [pc, #588]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81748:	2204      	movs	r2, #4
   8174a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   8174e:	4b91      	ldr	r3, [pc, #580]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81750:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81754:	2b00      	cmp	r3, #0
   81756:	d043      	beq.n	817e0 <Cl_alarms_scanforAlarms+0x890>
	{
		
		if(vpt < (Cl_alarmThresholdTable.vpt_low_threshold - 1000)) // manav03 added -1000
   81758:	4b8f      	ldr	r3, [pc, #572]	; (81998 <Cl_alarms_scanforAlarms+0xa48>)
   8175a:	695a      	ldr	r2, [r3, #20]
   8175c:	4b8f      	ldr	r3, [pc, #572]	; (8199c <Cl_alarms_scanforAlarms+0xa4c>)
   8175e:	4990      	ldr	r1, [pc, #576]	; (819a0 <Cl_alarms_scanforAlarms+0xa50>)
   81760:	4610      	mov	r0, r2
   81762:	4798      	blx	r3
   81764:	4603      	mov	r3, r0
   81766:	4618      	mov	r0, r3
   81768:	4b8e      	ldr	r3, [pc, #568]	; (819a4 <Cl_alarms_scanforAlarms+0xa54>)
   8176a:	681a      	ldr	r2, [r3, #0]
   8176c:	4b8e      	ldr	r3, [pc, #568]	; (819a8 <Cl_alarms_scanforAlarms+0xa58>)
   8176e:	4611      	mov	r1, r2
   81770:	4798      	blx	r3
   81772:	4603      	mov	r3, r0
   81774:	2b00      	cmp	r3, #0
   81776:	d02a      	beq.n	817ce <Cl_alarms_scanforAlarms+0x87e>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81778:	4b86      	ldr	r3, [pc, #536]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   8177a:	2201      	movs	r2, #1
   8177c:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   81780:	4b8a      	ldr	r3, [pc, #552]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   81782:	781b      	ldrb	r3, [r3, #0]
   81784:	4a89      	ldr	r2, [pc, #548]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   81786:	3301      	adds	r3, #1
   81788:	00db      	lsls	r3, r3, #3
   8178a:	4413      	add	r3, r2
   8178c:	2225      	movs	r2, #37	; 0x25
   8178e:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   81790:	4b80      	ldr	r3, [pc, #512]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81792:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   81796:	3301      	adds	r3, #1
   81798:	b2da      	uxtb	r2, r3
   8179a:	4b7e      	ldr	r3, [pc, #504]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   8179c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
			cl_alarm_triggered = true;
   817a0:	4b83      	ldr	r3, [pc, #524]	; (819b0 <Cl_alarms_scanforAlarms+0xa60>)
   817a2:	2201      	movs	r2, #1
   817a4:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   817a6:	4b83      	ldr	r3, [pc, #524]	; (819b4 <Cl_alarms_scanforAlarms+0xa64>)
   817a8:	2226      	movs	r2, #38	; 0x26
   817aa:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   817ac:	4b7f      	ldr	r3, [pc, #508]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   817ae:	781b      	ldrb	r3, [r3, #0]
   817b0:	461a      	mov	r2, r3
   817b2:	4b7e      	ldr	r3, [pc, #504]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   817b4:	4413      	add	r3, r2
   817b6:	222e      	movs	r2, #46	; 0x2e
   817b8:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   817ba:	4b7f      	ldr	r3, [pc, #508]	; (819b8 <Cl_alarms_scanforAlarms+0xa68>)
   817bc:	4798      	blx	r3
   817be:	4603      	mov	r3, r0
   817c0:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   817c2:	79fb      	ldrb	r3, [r7, #7]
   817c4:	2b00      	cmp	r3, #0
   817c6:	d00b      	beq.n	817e0 <Cl_alarms_scanforAlarms+0x890>
   817c8:	4b7c      	ldr	r3, [pc, #496]	; (819bc <Cl_alarms_scanforAlarms+0xa6c>)
   817ca:	4798      	blx	r3
   817cc:	e008      	b.n	817e0 <Cl_alarms_scanforAlarms+0x890>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   817ce:	4b71      	ldr	r3, [pc, #452]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   817d0:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   817d4:	2b01      	cmp	r3, #1
   817d6:	d103      	bne.n	817e0 <Cl_alarms_scanforAlarms+0x890>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   817d8:	4b6e      	ldr	r3, [pc, #440]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   817da:	2204      	movs	r2, #4
   817dc:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   817e0:	4b6c      	ldr	r3, [pc, #432]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   817e2:	7f9b      	ldrb	r3, [r3, #30]
   817e4:	2b00      	cmp	r3, #0
   817e6:	d043      	beq.n	81870 <Cl_alarms_scanforAlarms+0x920>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   817e8:	4b6a      	ldr	r3, [pc, #424]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   817ea:	7c5b      	ldrb	r3, [r3, #17]
   817ec:	2b01      	cmp	r3, #1
   817ee:	d103      	bne.n	817f8 <Cl_alarms_scanforAlarms+0x8a8>
   817f0:	4b73      	ldr	r3, [pc, #460]	; (819c0 <Cl_alarms_scanforAlarms+0xa70>)
   817f2:	781b      	ldrb	r3, [r3, #0]
   817f4:	2b00      	cmp	r3, #0
   817f6:	d10a      	bne.n	8180e <Cl_alarms_scanforAlarms+0x8be>
   817f8:	4b66      	ldr	r3, [pc, #408]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   817fa:	7c5b      	ldrb	r3, [r3, #17]
   817fc:	2b00      	cmp	r3, #0
   817fe:	d132      	bne.n	81866 <Cl_alarms_scanforAlarms+0x916>
   81800:	4b6f      	ldr	r3, [pc, #444]	; (819c0 <Cl_alarms_scanforAlarms+0xa70>)
   81802:	781b      	ldrb	r3, [r3, #0]
   81804:	f083 0301 	eor.w	r3, r3, #1
   81808:	b2db      	uxtb	r3, r3
   8180a:	2b00      	cmp	r3, #0
   8180c:	d02b      	beq.n	81866 <Cl_alarms_scanforAlarms+0x916>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8180e:	4b61      	ldr	r3, [pc, #388]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81810:	7c9b      	ldrb	r3, [r3, #18]
   81812:	2b01      	cmp	r3, #1
   81814:	d02b      	beq.n	8186e <Cl_alarms_scanforAlarms+0x91e>
					{
						
						
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81816:	4b5f      	ldr	r3, [pc, #380]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81818:	2201      	movs	r2, #1
   8181a:	749a      	strb	r2, [r3, #18]
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   8181c:	4b63      	ldr	r3, [pc, #396]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   8181e:	781b      	ldrb	r3, [r3, #0]
   81820:	4a62      	ldr	r2, [pc, #392]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   81822:	3301      	adds	r3, #1
   81824:	00db      	lsls	r3, r3, #3
   81826:	4413      	add	r3, r2
   81828:	2201      	movs	r2, #1
   8182a:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   8182c:	4b59      	ldr	r3, [pc, #356]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   8182e:	7f5b      	ldrb	r3, [r3, #29]
   81830:	3301      	adds	r3, #1
   81832:	b2da      	uxtb	r2, r3
   81834:	4b57      	ldr	r3, [pc, #348]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81836:	775a      	strb	r2, [r3, #29]
					cl_alarm_triggered = true;
   81838:	4b5d      	ldr	r3, [pc, #372]	; (819b0 <Cl_alarms_scanforAlarms+0xa60>)
   8183a:	2201      	movs	r2, #1
   8183c:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   8183e:	4b5d      	ldr	r3, [pc, #372]	; (819b4 <Cl_alarms_scanforAlarms+0xa64>)
   81840:	2201      	movs	r2, #1
   81842:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81844:	4b59      	ldr	r3, [pc, #356]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   81846:	781b      	ldrb	r3, [r3, #0]
   81848:	461a      	mov	r2, r3
   8184a:	4b58      	ldr	r3, [pc, #352]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   8184c:	4413      	add	r3, r2
   8184e:	222e      	movs	r2, #46	; 0x2e
   81850:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81852:	4b59      	ldr	r3, [pc, #356]	; (819b8 <Cl_alarms_scanforAlarms+0xa68>)
   81854:	4798      	blx	r3
   81856:	4603      	mov	r3, r0
   81858:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8185a:	79fb      	ldrb	r3, [r7, #7]
   8185c:	2b00      	cmp	r3, #0
   8185e:	d006      	beq.n	8186e <Cl_alarms_scanforAlarms+0x91e>
   81860:	4b56      	ldr	r3, [pc, #344]	; (819bc <Cl_alarms_scanforAlarms+0xa6c>)
   81862:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81864:	e003      	b.n	8186e <Cl_alarms_scanforAlarms+0x91e>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81866:	4b4b      	ldr	r3, [pc, #300]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81868:	2204      	movs	r2, #4
   8186a:	749a      	strb	r2, [r3, #18]
   8186c:	e000      	b.n	81870 <Cl_alarms_scanforAlarms+0x920>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8186e:	bf00      	nop
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   81870:	4b48      	ldr	r3, [pc, #288]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81876:	2b00      	cmp	r3, #0
   81878:	d045      	beq.n	81906 <Cl_alarms_scanforAlarms+0x9b6>
	{
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   8187a:	4b46      	ldr	r3, [pc, #280]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   8187c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81880:	2b01      	cmp	r3, #1
   81882:	d104      	bne.n	8188e <Cl_alarms_scanforAlarms+0x93e>
   81884:	4b4e      	ldr	r3, [pc, #312]	; (819c0 <Cl_alarms_scanforAlarms+0xa70>)
   81886:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8188a:	2b00      	cmp	r3, #0
   8188c:	d10c      	bne.n	818a8 <Cl_alarms_scanforAlarms+0x958>
   8188e:	4b41      	ldr	r3, [pc, #260]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81890:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81894:	2b00      	cmp	r3, #0
   81896:	d132      	bne.n	818fe <Cl_alarms_scanforAlarms+0x9ae>
   81898:	4b49      	ldr	r3, [pc, #292]	; (819c0 <Cl_alarms_scanforAlarms+0xa70>)
   8189a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8189e:	f083 0301 	eor.w	r3, r3, #1
   818a2:	b2db      	uxtb	r3, r3
   818a4:	2b00      	cmp	r3, #0
   818a6:	d02a      	beq.n	818fe <Cl_alarms_scanforAlarms+0x9ae>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   818a8:	4b3a      	ldr	r3, [pc, #232]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   818aa:	2201      	movs	r2, #1
   818ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   818b0:	4b3e      	ldr	r3, [pc, #248]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   818b2:	781b      	ldrb	r3, [r3, #0]
   818b4:	4a3d      	ldr	r2, [pc, #244]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   818b6:	3301      	adds	r3, #1
   818b8:	00db      	lsls	r3, r3, #3
   818ba:	4413      	add	r3, r2
   818bc:	2203      	movs	r2, #3
   818be:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   818c0:	4b34      	ldr	r3, [pc, #208]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   818c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   818c6:	3301      	adds	r3, #1
   818c8:	b2da      	uxtb	r2, r3
   818ca:	4b32      	ldr	r3, [pc, #200]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   818cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					cl_alarm_triggered = true;
   818d0:	4b37      	ldr	r3, [pc, #220]	; (819b0 <Cl_alarms_scanforAlarms+0xa60>)
   818d2:	2201      	movs	r2, #1
   818d4:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   818d6:	4b37      	ldr	r3, [pc, #220]	; (819b4 <Cl_alarms_scanforAlarms+0xa64>)
   818d8:	2203      	movs	r2, #3
   818da:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   818dc:	4b33      	ldr	r3, [pc, #204]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   818de:	781b      	ldrb	r3, [r3, #0]
   818e0:	461a      	mov	r2, r3
   818e2:	4b32      	ldr	r3, [pc, #200]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   818e4:	4413      	add	r3, r2
   818e6:	222e      	movs	r2, #46	; 0x2e
   818e8:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   818ea:	4b33      	ldr	r3, [pc, #204]	; (819b8 <Cl_alarms_scanforAlarms+0xa68>)
   818ec:	4798      	blx	r3
   818ee:	4603      	mov	r3, r0
   818f0:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   818f2:	79fb      	ldrb	r3, [r7, #7]
   818f4:	2b00      	cmp	r3, #0
   818f6:	d006      	beq.n	81906 <Cl_alarms_scanforAlarms+0x9b6>
   818f8:	4b30      	ldr	r3, [pc, #192]	; (819bc <Cl_alarms_scanforAlarms+0xa6c>)
   818fa:	4798      	blx	r3
   818fc:	e003      	b.n	81906 <Cl_alarms_scanforAlarms+0x9b6>
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   818fe:	4b25      	ldr	r3, [pc, #148]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81900:	2204      	movs	r2, #4
   81902:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81906:	4b23      	ldr	r3, [pc, #140]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81908:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   8190c:	2b00      	cmp	r3, #0
   8190e:	d05d      	beq.n	819cc <Cl_alarms_scanforAlarms+0xa7c>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81910:	4b20      	ldr	r3, [pc, #128]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81916:	2b01      	cmp	r3, #1
   81918:	d104      	bne.n	81924 <Cl_alarms_scanforAlarms+0x9d4>
   8191a:	4b29      	ldr	r3, [pc, #164]	; (819c0 <Cl_alarms_scanforAlarms+0xa70>)
   8191c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81920:	2b00      	cmp	r3, #0
   81922:	d10c      	bne.n	8193e <Cl_alarms_scanforAlarms+0x9ee>
   81924:	4b1b      	ldr	r3, [pc, #108]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   8192a:	2b00      	cmp	r3, #0
   8192c:	d14a      	bne.n	819c4 <Cl_alarms_scanforAlarms+0xa74>
   8192e:	4b24      	ldr	r3, [pc, #144]	; (819c0 <Cl_alarms_scanforAlarms+0xa70>)
   81930:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81934:	f083 0301 	eor.w	r3, r3, #1
   81938:	b2db      	uxtb	r3, r3
   8193a:	2b00      	cmp	r3, #0
   8193c:	d042      	beq.n	819c4 <Cl_alarms_scanforAlarms+0xa74>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   8193e:	4b15      	ldr	r3, [pc, #84]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81940:	2201      	movs	r2, #1
   81942:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81946:	4b19      	ldr	r3, [pc, #100]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   81948:	781b      	ldrb	r3, [r3, #0]
   8194a:	4a18      	ldr	r2, [pc, #96]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   8194c:	3301      	adds	r3, #1
   8194e:	00db      	lsls	r3, r3, #3
   81950:	4413      	add	r3, r2
   81952:	2203      	movs	r2, #3
   81954:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81956:	4b0f      	ldr	r3, [pc, #60]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   8195c:	3301      	adds	r3, #1
   8195e:	b2da      	uxtb	r2, r3
   81960:	4b0c      	ldr	r3, [pc, #48]	; (81994 <Cl_alarms_scanforAlarms+0xa44>)
   81962:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   81966:	4b12      	ldr	r3, [pc, #72]	; (819b0 <Cl_alarms_scanforAlarms+0xa60>)
   81968:	2201      	movs	r2, #1
   8196a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   8196c:	4b11      	ldr	r3, [pc, #68]	; (819b4 <Cl_alarms_scanforAlarms+0xa64>)
   8196e:	2205      	movs	r2, #5
   81970:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81972:	4b0e      	ldr	r3, [pc, #56]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   81974:	781b      	ldrb	r3, [r3, #0]
   81976:	461a      	mov	r2, r3
   81978:	4b0c      	ldr	r3, [pc, #48]	; (819ac <Cl_alarms_scanforAlarms+0xa5c>)
   8197a:	4413      	add	r3, r2
   8197c:	222e      	movs	r2, #46	; 0x2e
   8197e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81980:	4b0d      	ldr	r3, [pc, #52]	; (819b8 <Cl_alarms_scanforAlarms+0xa68>)
   81982:	4798      	blx	r3
   81984:	4603      	mov	r3, r0
   81986:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81988:	79fb      	ldrb	r3, [r7, #7]
   8198a:	2b00      	cmp	r3, #0
   8198c:	d01e      	beq.n	819cc <Cl_alarms_scanforAlarms+0xa7c>
   8198e:	4b0b      	ldr	r3, [pc, #44]	; (819bc <Cl_alarms_scanforAlarms+0xa6c>)
   81990:	4798      	blx	r3
   81992:	e01b      	b.n	819cc <Cl_alarms_scanforAlarms+0xa7c>
   81994:	20071c0c 	.word	0x20071c0c
   81998:	20072044 	.word	0x20072044
   8199c:	000a7d95 	.word	0x000a7d95
   819a0:	447a0000 	.word	0x447a0000
   819a4:	200716e0 	.word	0x200716e0
   819a8:	000a8321 	.word	0x000a8321
   819ac:	20072214 	.word	0x20072214
   819b0:	200716d9 	.word	0x200716d9
   819b4:	20072040 	.word	0x20072040
   819b8:	00082919 	.word	0x00082919
   819bc:	00088aa9 	.word	0x00088aa9
   819c0:	2007216c 	.word	0x2007216c
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   819c4:	4b92      	ldr	r3, [pc, #584]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   819c6:	2204      	movs	r2, #4
   819c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   819cc:	4b90      	ldr	r3, [pc, #576]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   819ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   819d2:	2b00      	cmp	r3, #0
   819d4:	d045      	beq.n	81a62 <Cl_alarms_scanforAlarms+0xb12>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   819d6:	4b8e      	ldr	r3, [pc, #568]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   819d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   819dc:	2b01      	cmp	r3, #1
   819de:	d104      	bne.n	819ea <Cl_alarms_scanforAlarms+0xa9a>
   819e0:	4b8c      	ldr	r3, [pc, #560]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   819e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   819e6:	2b00      	cmp	r3, #0
   819e8:	d10c      	bne.n	81a04 <Cl_alarms_scanforAlarms+0xab4>
   819ea:	4b89      	ldr	r3, [pc, #548]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   819ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   819f0:	2b00      	cmp	r3, #0
   819f2:	d132      	bne.n	81a5a <Cl_alarms_scanforAlarms+0xb0a>
   819f4:	4b87      	ldr	r3, [pc, #540]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   819f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   819fa:	f083 0301 	eor.w	r3, r3, #1
   819fe:	b2db      	uxtb	r3, r3
   81a00:	2b00      	cmp	r3, #0
   81a02:	d02a      	beq.n	81a5a <Cl_alarms_scanforAlarms+0xb0a>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81a04:	4b82      	ldr	r3, [pc, #520]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a06:	2201      	movs	r2, #1
   81a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81a0c:	4b82      	ldr	r3, [pc, #520]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81a0e:	781b      	ldrb	r3, [r3, #0]
   81a10:	4a81      	ldr	r2, [pc, #516]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81a12:	3301      	adds	r3, #1
   81a14:	00db      	lsls	r3, r3, #3
   81a16:	4413      	add	r3, r2
   81a18:	2204      	movs	r2, #4
   81a1a:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81a1c:	4b7c      	ldr	r3, [pc, #496]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81a22:	3301      	adds	r3, #1
   81a24:	b2da      	uxtb	r2, r3
   81a26:	4b7a      	ldr	r3, [pc, #488]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				cl_alarm_triggered = true;
   81a2c:	4b7b      	ldr	r3, [pc, #492]	; (81c1c <Cl_alarms_scanforAlarms+0xccc>)
   81a2e:	2201      	movs	r2, #1
   81a30:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81a32:	4b7b      	ldr	r3, [pc, #492]	; (81c20 <Cl_alarms_scanforAlarms+0xcd0>)
   81a34:	2204      	movs	r2, #4
   81a36:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a38:	4b77      	ldr	r3, [pc, #476]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81a3a:	781b      	ldrb	r3, [r3, #0]
   81a3c:	461a      	mov	r2, r3
   81a3e:	4b76      	ldr	r3, [pc, #472]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81a40:	4413      	add	r3, r2
   81a42:	222e      	movs	r2, #46	; 0x2e
   81a44:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a46:	4b77      	ldr	r3, [pc, #476]	; (81c24 <Cl_alarms_scanforAlarms+0xcd4>)
   81a48:	4798      	blx	r3
   81a4a:	4603      	mov	r3, r0
   81a4c:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81a4e:	79fb      	ldrb	r3, [r7, #7]
   81a50:	2b00      	cmp	r3, #0
   81a52:	d006      	beq.n	81a62 <Cl_alarms_scanforAlarms+0xb12>
   81a54:	4b74      	ldr	r3, [pc, #464]	; (81c28 <Cl_alarms_scanforAlarms+0xcd8>)
   81a56:	4798      	blx	r3
   81a58:	e003      	b.n	81a62 <Cl_alarms_scanforAlarms+0xb12>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81a5a:	4b6d      	ldr	r3, [pc, #436]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a5c:	2204      	movs	r2, #4
   81a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81a62:	4b6b      	ldr	r3, [pc, #428]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a64:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81a68:	2b00      	cmp	r3, #0
   81a6a:	d045      	beq.n	81af8 <Cl_alarms_scanforAlarms+0xba8>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81a6c:	4b68      	ldr	r3, [pc, #416]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a6e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81a72:	2b01      	cmp	r3, #1
   81a74:	d104      	bne.n	81a80 <Cl_alarms_scanforAlarms+0xb30>
   81a76:	4b67      	ldr	r3, [pc, #412]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   81a78:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   81a7c:	2b00      	cmp	r3, #0
   81a7e:	d10c      	bne.n	81a9a <Cl_alarms_scanforAlarms+0xb4a>
   81a80:	4b63      	ldr	r3, [pc, #396]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a82:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81a86:	2b00      	cmp	r3, #0
   81a88:	d132      	bne.n	81af0 <Cl_alarms_scanforAlarms+0xba0>
   81a8a:	4b62      	ldr	r3, [pc, #392]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   81a8c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   81a90:	f083 0301 	eor.w	r3, r3, #1
   81a94:	b2db      	uxtb	r3, r3
   81a96:	2b00      	cmp	r3, #0
   81a98:	d02a      	beq.n	81af0 <Cl_alarms_scanforAlarms+0xba0>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81a9a:	4b5d      	ldr	r3, [pc, #372]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81a9c:	2201      	movs	r2, #1
   81a9e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81aa2:	4b5d      	ldr	r3, [pc, #372]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81aa4:	781b      	ldrb	r3, [r3, #0]
   81aa6:	4a5c      	ldr	r2, [pc, #368]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81aa8:	3301      	adds	r3, #1
   81aaa:	00db      	lsls	r3, r3, #3
   81aac:	4413      	add	r3, r2
   81aae:	2206      	movs	r2, #6
   81ab0:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81ab2:	4b57      	ldr	r3, [pc, #348]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81ab4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81ab8:	3301      	adds	r3, #1
   81aba:	b2da      	uxtb	r2, r3
   81abc:	4b54      	ldr	r3, [pc, #336]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81abe:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			cl_alarm_triggered = true;
   81ac2:	4b56      	ldr	r3, [pc, #344]	; (81c1c <Cl_alarms_scanforAlarms+0xccc>)
   81ac4:	2201      	movs	r2, #1
   81ac6:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81ac8:	4b55      	ldr	r3, [pc, #340]	; (81c20 <Cl_alarms_scanforAlarms+0xcd0>)
   81aca:	2206      	movs	r2, #6
   81acc:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ace:	4b52      	ldr	r3, [pc, #328]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81ad0:	781b      	ldrb	r3, [r3, #0]
   81ad2:	461a      	mov	r2, r3
   81ad4:	4b50      	ldr	r3, [pc, #320]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81ad6:	4413      	add	r3, r2
   81ad8:	222e      	movs	r2, #46	; 0x2e
   81ada:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81adc:	4b51      	ldr	r3, [pc, #324]	; (81c24 <Cl_alarms_scanforAlarms+0xcd4>)
   81ade:	4798      	blx	r3
   81ae0:	4603      	mov	r3, r0
   81ae2:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81ae4:	79fb      	ldrb	r3, [r7, #7]
   81ae6:	2b00      	cmp	r3, #0
   81ae8:	d006      	beq.n	81af8 <Cl_alarms_scanforAlarms+0xba8>
   81aea:	4b4f      	ldr	r3, [pc, #316]	; (81c28 <Cl_alarms_scanforAlarms+0xcd8>)
   81aec:	4798      	blx	r3
   81aee:	e003      	b.n	81af8 <Cl_alarms_scanforAlarms+0xba8>
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81af0:	4b47      	ldr	r3, [pc, #284]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81af2:	2204      	movs	r2, #4
   81af4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
// 		}
// 	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   81af8:	4b45      	ldr	r3, [pc, #276]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81afa:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   81afe:	2b00      	cmp	r3, #0
   81b00:	d046      	beq.n	81b90 <Cl_alarms_scanforAlarms+0xc40>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   81b02:	4b44      	ldr	r3, [pc, #272]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   81b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81b08:	2b00      	cmp	r3, #0
   81b0a:	d004      	beq.n	81b16 <Cl_alarms_scanforAlarms+0xbc6>
   81b0c:	4b40      	ldr	r3, [pc, #256]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b0e:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81b12:	2b01      	cmp	r3, #1
   81b14:	d00c      	beq.n	81b30 <Cl_alarms_scanforAlarms+0xbe0>
   81b16:	4b3f      	ldr	r3, [pc, #252]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   81b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81b1c:	f083 0301 	eor.w	r3, r3, #1
   81b20:	b2db      	uxtb	r3, r3
   81b22:	2b00      	cmp	r3, #0
   81b24:	d034      	beq.n	81b90 <Cl_alarms_scanforAlarms+0xc40>
   81b26:	4b3a      	ldr	r3, [pc, #232]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b28:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81b2c:	2b00      	cmp	r3, #0
   81b2e:	d12f      	bne.n	81b90 <Cl_alarms_scanforAlarms+0xc40>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   81b30:	4b37      	ldr	r3, [pc, #220]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b32:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   81b36:	2b01      	cmp	r3, #1
   81b38:	d020      	beq.n	81b7c <Cl_alarms_scanforAlarms+0xc2c>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   81b3a:	4b35      	ldr	r3, [pc, #212]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b3c:	2202      	movs	r2, #2
   81b3e:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   81b42:	4b33      	ldr	r3, [pc, #204]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b44:	2201      	movs	r2, #1
   81b46:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   81b4a:	4b33      	ldr	r3, [pc, #204]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81b4c:	781b      	ldrb	r3, [r3, #0]
   81b4e:	4a32      	ldr	r2, [pc, #200]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81b50:	3301      	adds	r3, #1
   81b52:	00db      	lsls	r3, r3, #3
   81b54:	4413      	add	r3, r2
   81b56:	223d      	movs	r2, #61	; 0x3d
   81b58:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   81b5a:	4b30      	ldr	r3, [pc, #192]	; (81c1c <Cl_alarms_scanforAlarms+0xccc>)
   81b5c:	2201      	movs	r2, #1
   81b5e:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   81b60:	4b2f      	ldr	r3, [pc, #188]	; (81c20 <Cl_alarms_scanforAlarms+0xcd0>)
   81b62:	223d      	movs	r2, #61	; 0x3d
   81b64:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b66:	4b2c      	ldr	r3, [pc, #176]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81b68:	781b      	ldrb	r3, [r3, #0]
   81b6a:	461a      	mov	r2, r3
   81b6c:	4b2a      	ldr	r3, [pc, #168]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81b6e:	4413      	add	r3, r2
   81b70:	222e      	movs	r2, #46	; 0x2e
   81b72:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   81b74:	4b2d      	ldr	r3, [pc, #180]	; (81c2c <Cl_alarms_scanforAlarms+0xcdc>)
   81b76:	2201      	movs	r2, #1
   81b78:	701a      	strb	r2, [r3, #0]
   81b7a:	e006      	b.n	81b8a <Cl_alarms_scanforAlarms+0xc3a>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   81b7c:	4b24      	ldr	r3, [pc, #144]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b7e:	2200      	movs	r2, #0
   81b80:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
								cl_alarm_triggered = false;
   81b84:	4b25      	ldr	r3, [pc, #148]	; (81c1c <Cl_alarms_scanforAlarms+0xccc>)
   81b86:	2200      	movs	r2, #0
   81b88:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   81b8a:	4b29      	ldr	r3, [pc, #164]	; (81c30 <Cl_alarms_scanforAlarms+0xce0>)
   81b8c:	2200      	movs	r2, #0
   81b8e:	701a      	strb	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81b90:	4b1f      	ldr	r3, [pc, #124]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81b92:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   81b96:	2b00      	cmp	r3, #0
   81b98:	d056      	beq.n	81c48 <Cl_alarms_scanforAlarms+0xcf8>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   81b9a:	4b1e      	ldr	r3, [pc, #120]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   81b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81ba0:	2b00      	cmp	r3, #0
   81ba2:	d004      	beq.n	81bae <Cl_alarms_scanforAlarms+0xc5e>
   81ba4:	4b1a      	ldr	r3, [pc, #104]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81ba6:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   81baa:	2b01      	cmp	r3, #1
   81bac:	d00c      	beq.n	81bc8 <Cl_alarms_scanforAlarms+0xc78>
   81bae:	4b19      	ldr	r3, [pc, #100]	; (81c14 <Cl_alarms_scanforAlarms+0xcc4>)
   81bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81bb4:	f083 0301 	eor.w	r3, r3, #1
   81bb8:	b2db      	uxtb	r3, r3
   81bba:	2b00      	cmp	r3, #0
   81bbc:	d044      	beq.n	81c48 <Cl_alarms_scanforAlarms+0xcf8>
   81bbe:	4b14      	ldr	r3, [pc, #80]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81bc0:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   81bc4:	2b00      	cmp	r3, #0
   81bc6:	d13f      	bne.n	81c48 <Cl_alarms_scanforAlarms+0xcf8>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   81bc8:	4b11      	ldr	r3, [pc, #68]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81bca:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   81bce:	2b01      	cmp	r3, #1
   81bd0:	d030      	beq.n	81c34 <Cl_alarms_scanforAlarms+0xce4>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81bd2:	4b0f      	ldr	r3, [pc, #60]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81bd4:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   81bd8:	2b00      	cmp	r3, #0
   81bda:	d032      	beq.n	81c42 <Cl_alarms_scanforAlarms+0xcf2>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   81bdc:	4b0c      	ldr	r3, [pc, #48]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81bde:	2202      	movs	r2, #2
   81be0:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   81be4:	4b0a      	ldr	r3, [pc, #40]	; (81c10 <Cl_alarms_scanforAlarms+0xcc0>)
   81be6:	2201      	movs	r2, #1
   81be8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
							//	Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   81bec:	4b0b      	ldr	r3, [pc, #44]	; (81c1c <Cl_alarms_scanforAlarms+0xccc>)
   81bee:	2201      	movs	r2, #1
   81bf0:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   81bf2:	4b0b      	ldr	r3, [pc, #44]	; (81c20 <Cl_alarms_scanforAlarms+0xcd0>)
   81bf4:	223e      	movs	r2, #62	; 0x3e
   81bf6:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81bf8:	4b07      	ldr	r3, [pc, #28]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81bfa:	781b      	ldrb	r3, [r3, #0]
   81bfc:	461a      	mov	r2, r3
   81bfe:	4b06      	ldr	r3, [pc, #24]	; (81c18 <Cl_alarms_scanforAlarms+0xcc8>)
   81c00:	4413      	add	r3, r2
   81c02:	222e      	movs	r2, #46	; 0x2e
   81c04:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   81c06:	4b09      	ldr	r3, [pc, #36]	; (81c2c <Cl_alarms_scanforAlarms+0xcdc>)
   81c08:	2202      	movs	r2, #2
   81c0a:	701a      	strb	r2, [r3, #0]
   81c0c:	e019      	b.n	81c42 <Cl_alarms_scanforAlarms+0xcf2>
   81c0e:	bf00      	nop
   81c10:	20071c0c 	.word	0x20071c0c
   81c14:	2007216c 	.word	0x2007216c
   81c18:	20072214 	.word	0x20072214
   81c1c:	200716d9 	.word	0x200716d9
   81c20:	20072040 	.word	0x20072040
   81c24:	00082919 	.word	0x00082919
   81c28:	00088aa9 	.word	0x00088aa9
   81c2c:	200719d4 	.word	0x200719d4
   81c30:	20070100 	.word	0x20070100
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   81c34:	4b9e      	ldr	r3, [pc, #632]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81c36:	2200      	movs	r2, #0
   81c38:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						cl_alarm_triggered = false;
   81c3c:	4b9d      	ldr	r3, [pc, #628]	; (81eb4 <Cl_alarms_scanforAlarms+0xf64>)
   81c3e:	2200      	movs	r2, #0
   81c40:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   81c42:	4b9d      	ldr	r3, [pc, #628]	; (81eb8 <Cl_alarms_scanforAlarms+0xf68>)
   81c44:	2201      	movs	r2, #1
   81c46:	701a      	strb	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   81c48:	4b99      	ldr	r3, [pc, #612]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81c4a:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   81c4e:	2b00      	cmp	r3, #0
   81c50:	d049      	beq.n	81ce6 <Cl_alarms_scanforAlarms+0xd96>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81c52:	4b97      	ldr	r3, [pc, #604]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81c54:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   81c58:	2b01      	cmp	r3, #1
   81c5a:	d03b      	beq.n	81cd4 <Cl_alarms_scanforAlarms+0xd84>
		{
				if(ps1 > Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_upper - 1000) 
   81c5c:	4b94      	ldr	r3, [pc, #592]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81c5e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   81c62:	4b96      	ldr	r3, [pc, #600]	; (81ebc <Cl_alarms_scanforAlarms+0xf6c>)
   81c64:	4996      	ldr	r1, [pc, #600]	; (81ec0 <Cl_alarms_scanforAlarms+0xf70>)
   81c66:	4610      	mov	r0, r2
   81c68:	4798      	blx	r3
   81c6a:	4603      	mov	r3, r0
   81c6c:	4618      	mov	r0, r3
   81c6e:	4b95      	ldr	r3, [pc, #596]	; (81ec4 <Cl_alarms_scanforAlarms+0xf74>)
   81c70:	681a      	ldr	r2, [r3, #0]
   81c72:	4b95      	ldr	r3, [pc, #596]	; (81ec8 <Cl_alarms_scanforAlarms+0xf78>)
   81c74:	4611      	mov	r1, r2
   81c76:	4798      	blx	r3
   81c78:	4603      	mov	r3, r0
   81c7a:	2b00      	cmp	r3, #0
   81c7c:	d033      	beq.n	81ce6 <Cl_alarms_scanforAlarms+0xd96>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   81c7e:	4b8c      	ldr	r3, [pc, #560]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81c80:	2201      	movs	r2, #1
   81c82:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   81c86:	4b91      	ldr	r3, [pc, #580]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81c88:	781b      	ldrb	r3, [r3, #0]
   81c8a:	4a90      	ldr	r2, [pc, #576]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81c8c:	3301      	adds	r3, #1
   81c8e:	00db      	lsls	r3, r3, #3
   81c90:	4413      	add	r3, r2
   81c92:	2215      	movs	r2, #21
   81c94:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   81c96:	4b86      	ldr	r3, [pc, #536]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81c98:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   81c9c:	3301      	adds	r3, #1
   81c9e:	b2da      	uxtb	r2, r3
   81ca0:	4b83      	ldr	r3, [pc, #524]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81ca2:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
					cl_alarm_triggered = true;
   81ca6:	4b83      	ldr	r3, [pc, #524]	; (81eb4 <Cl_alarms_scanforAlarms+0xf64>)
   81ca8:	2201      	movs	r2, #1
   81caa:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   81cac:	4b88      	ldr	r3, [pc, #544]	; (81ed0 <Cl_alarms_scanforAlarms+0xf80>)
   81cae:	2215      	movs	r2, #21
   81cb0:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81cb2:	4b86      	ldr	r3, [pc, #536]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81cb4:	781b      	ldrb	r3, [r3, #0]
   81cb6:	461a      	mov	r2, r3
   81cb8:	4b84      	ldr	r3, [pc, #528]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81cba:	4413      	add	r3, r2
   81cbc:	222e      	movs	r2, #46	; 0x2e
   81cbe:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81cc0:	4b84      	ldr	r3, [pc, #528]	; (81ed4 <Cl_alarms_scanforAlarms+0xf84>)
   81cc2:	4798      	blx	r3
   81cc4:	4603      	mov	r3, r0
   81cc6:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81cc8:	79fb      	ldrb	r3, [r7, #7]
   81cca:	2b00      	cmp	r3, #0
   81ccc:	d00b      	beq.n	81ce6 <Cl_alarms_scanforAlarms+0xd96>
   81cce:	4b82      	ldr	r3, [pc, #520]	; (81ed8 <Cl_alarms_scanforAlarms+0xf88>)
   81cd0:	4798      	blx	r3
   81cd2:	e008      	b.n	81ce6 <Cl_alarms_scanforAlarms+0xd96>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   81cd4:	4b76      	ldr	r3, [pc, #472]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81cd6:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   81cda:	2b01      	cmp	r3, #1
   81cdc:	d103      	bne.n	81ce6 <Cl_alarms_scanforAlarms+0xd96>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81cde:	4b74      	ldr	r3, [pc, #464]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81ce0:	2204      	movs	r2, #4
   81ce2:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   81ce6:	4b72      	ldr	r3, [pc, #456]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81ce8:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   81cec:	2b00      	cmp	r3, #0
   81cee:	d049      	beq.n	81d84 <Cl_alarms_scanforAlarms+0xe34>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81cf0:	4b6f      	ldr	r3, [pc, #444]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81cf2:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   81cf6:	2b01      	cmp	r3, #1
   81cf8:	d03b      	beq.n	81d72 <Cl_alarms_scanforAlarms+0xe22>
	{
		if(ps1 < Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_lower - 1000) 
   81cfa:	4b6d      	ldr	r3, [pc, #436]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81cfc:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   81d00:	4b6e      	ldr	r3, [pc, #440]	; (81ebc <Cl_alarms_scanforAlarms+0xf6c>)
   81d02:	496f      	ldr	r1, [pc, #444]	; (81ec0 <Cl_alarms_scanforAlarms+0xf70>)
   81d04:	4610      	mov	r0, r2
   81d06:	4798      	blx	r3
   81d08:	4603      	mov	r3, r0
   81d0a:	4618      	mov	r0, r3
   81d0c:	4b6d      	ldr	r3, [pc, #436]	; (81ec4 <Cl_alarms_scanforAlarms+0xf74>)
   81d0e:	681a      	ldr	r2, [r3, #0]
   81d10:	4b72      	ldr	r3, [pc, #456]	; (81edc <Cl_alarms_scanforAlarms+0xf8c>)
   81d12:	4611      	mov	r1, r2
   81d14:	4798      	blx	r3
   81d16:	4603      	mov	r3, r0
   81d18:	2b00      	cmp	r3, #0
   81d1a:	d033      	beq.n	81d84 <Cl_alarms_scanforAlarms+0xe34>
			//Cl_Uint16Type temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81d1c:	4b64      	ldr	r3, [pc, #400]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d1e:	2201      	movs	r2, #1
   81d20:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   81d24:	4b69      	ldr	r3, [pc, #420]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81d26:	781b      	ldrb	r3, [r3, #0]
   81d28:	4a68      	ldr	r2, [pc, #416]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81d2a:	3301      	adds	r3, #1
   81d2c:	00db      	lsls	r3, r3, #3
   81d2e:	4413      	add	r3, r2
   81d30:	2216      	movs	r2, #22
   81d32:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   81d34:	4b5e      	ldr	r3, [pc, #376]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d36:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   81d3a:	3301      	adds	r3, #1
   81d3c:	b2da      	uxtb	r2, r3
   81d3e:	4b5c      	ldr	r3, [pc, #368]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d40:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
			cl_alarm_triggered = true;
   81d44:	4b5b      	ldr	r3, [pc, #364]	; (81eb4 <Cl_alarms_scanforAlarms+0xf64>)
   81d46:	2201      	movs	r2, #1
   81d48:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   81d4a:	4b61      	ldr	r3, [pc, #388]	; (81ed0 <Cl_alarms_scanforAlarms+0xf80>)
   81d4c:	2216      	movs	r2, #22
   81d4e:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d50:	4b5e      	ldr	r3, [pc, #376]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81d52:	781b      	ldrb	r3, [r3, #0]
   81d54:	461a      	mov	r2, r3
   81d56:	4b5d      	ldr	r3, [pc, #372]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81d58:	4413      	add	r3, r2
   81d5a:	222e      	movs	r2, #46	; 0x2e
   81d5c:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d5e:	4b5d      	ldr	r3, [pc, #372]	; (81ed4 <Cl_alarms_scanforAlarms+0xf84>)
   81d60:	4798      	blx	r3
   81d62:	4603      	mov	r3, r0
   81d64:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81d66:	79fb      	ldrb	r3, [r7, #7]
   81d68:	2b00      	cmp	r3, #0
   81d6a:	d00b      	beq.n	81d84 <Cl_alarms_scanforAlarms+0xe34>
   81d6c:	4b5a      	ldr	r3, [pc, #360]	; (81ed8 <Cl_alarms_scanforAlarms+0xf88>)
   81d6e:	4798      	blx	r3
   81d70:	e008      	b.n	81d84 <Cl_alarms_scanforAlarms+0xe34>
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81d72:	4b4f      	ldr	r3, [pc, #316]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d74:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   81d78:	2b01      	cmp	r3, #1
   81d7a:	d103      	bne.n	81d84 <Cl_alarms_scanforAlarms+0xe34>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81d7c:	4b4c      	ldr	r3, [pc, #304]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d7e:	2204      	movs	r2, #4
   81d80:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   81d84:	4b4a      	ldr	r3, [pc, #296]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d86:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   81d8a:	2b00      	cmp	r3, #0
   81d8c:	d049      	beq.n	81e22 <Cl_alarms_scanforAlarms+0xed2>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81d8e:	4b48      	ldr	r3, [pc, #288]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d90:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   81d94:	2b01      	cmp	r3, #1
   81d96:	d03b      	beq.n	81e10 <Cl_alarms_scanforAlarms+0xec0>
				{
				if(ps2 > Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_upper - 1000) 
   81d98:	4b45      	ldr	r3, [pc, #276]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81d9a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
   81d9e:	4b47      	ldr	r3, [pc, #284]	; (81ebc <Cl_alarms_scanforAlarms+0xf6c>)
   81da0:	4947      	ldr	r1, [pc, #284]	; (81ec0 <Cl_alarms_scanforAlarms+0xf70>)
   81da2:	4610      	mov	r0, r2
   81da4:	4798      	blx	r3
   81da6:	4603      	mov	r3, r0
   81da8:	4618      	mov	r0, r3
   81daa:	4b4d      	ldr	r3, [pc, #308]	; (81ee0 <Cl_alarms_scanforAlarms+0xf90>)
   81dac:	681a      	ldr	r2, [r3, #0]
   81dae:	4b46      	ldr	r3, [pc, #280]	; (81ec8 <Cl_alarms_scanforAlarms+0xf78>)
   81db0:	4611      	mov	r1, r2
   81db2:	4798      	blx	r3
   81db4:	4603      	mov	r3, r0
   81db6:	2b00      	cmp	r3, #0
   81db8:	d033      	beq.n	81e22 <Cl_alarms_scanforAlarms+0xed2>
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   81dba:	4b3d      	ldr	r3, [pc, #244]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81dbc:	2201      	movs	r2, #1
   81dbe:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   81dc2:	4b42      	ldr	r3, [pc, #264]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81dc4:	781b      	ldrb	r3, [r3, #0]
   81dc6:	4a41      	ldr	r2, [pc, #260]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81dc8:	3301      	adds	r3, #1
   81dca:	00db      	lsls	r3, r3, #3
   81dcc:	4413      	add	r3, r2
   81dce:	2217      	movs	r2, #23
   81dd0:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   81dd2:	4b37      	ldr	r3, [pc, #220]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81dd4:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   81dd8:	3301      	adds	r3, #1
   81dda:	b2da      	uxtb	r2, r3
   81ddc:	4b34      	ldr	r3, [pc, #208]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81dde:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
					cl_alarm_triggered = true;
   81de2:	4b34      	ldr	r3, [pc, #208]	; (81eb4 <Cl_alarms_scanforAlarms+0xf64>)
   81de4:	2201      	movs	r2, #1
   81de6:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   81de8:	4b39      	ldr	r3, [pc, #228]	; (81ed0 <Cl_alarms_scanforAlarms+0xf80>)
   81dea:	2217      	movs	r2, #23
   81dec:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81dee:	4b37      	ldr	r3, [pc, #220]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81df0:	781b      	ldrb	r3, [r3, #0]
   81df2:	461a      	mov	r2, r3
   81df4:	4b35      	ldr	r3, [pc, #212]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81df6:	4413      	add	r3, r2
   81df8:	222e      	movs	r2, #46	; 0x2e
   81dfa:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81dfc:	4b35      	ldr	r3, [pc, #212]	; (81ed4 <Cl_alarms_scanforAlarms+0xf84>)
   81dfe:	4798      	blx	r3
   81e00:	4603      	mov	r3, r0
   81e02:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81e04:	79fb      	ldrb	r3, [r7, #7]
   81e06:	2b00      	cmp	r3, #0
   81e08:	d00b      	beq.n	81e22 <Cl_alarms_scanforAlarms+0xed2>
   81e0a:	4b33      	ldr	r3, [pc, #204]	; (81ed8 <Cl_alarms_scanforAlarms+0xf88>)
   81e0c:	4798      	blx	r3
   81e0e:	e008      	b.n	81e22 <Cl_alarms_scanforAlarms+0xed2>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81e10:	4b27      	ldr	r3, [pc, #156]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e12:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   81e16:	2b01      	cmp	r3, #1
   81e18:	d103      	bne.n	81e22 <Cl_alarms_scanforAlarms+0xed2>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81e1a:	4b25      	ldr	r3, [pc, #148]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e1c:	2204      	movs	r2, #4
   81e1e:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   81e22:	4b23      	ldr	r3, [pc, #140]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e24:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   81e28:	2b00      	cmp	r3, #0
   81e2a:	d064      	beq.n	81ef6 <Cl_alarms_scanforAlarms+0xfa6>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   81e2c:	4b20      	ldr	r3, [pc, #128]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e2e:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   81e32:	2b01      	cmp	r3, #1
   81e34:	d056      	beq.n	81ee4 <Cl_alarms_scanforAlarms+0xf94>
			{
				if(ps2 < Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_lower - 1000)  
   81e36:	4b1e      	ldr	r3, [pc, #120]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e38:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
   81e3c:	4b1f      	ldr	r3, [pc, #124]	; (81ebc <Cl_alarms_scanforAlarms+0xf6c>)
   81e3e:	4920      	ldr	r1, [pc, #128]	; (81ec0 <Cl_alarms_scanforAlarms+0xf70>)
   81e40:	4610      	mov	r0, r2
   81e42:	4798      	blx	r3
   81e44:	4603      	mov	r3, r0
   81e46:	4618      	mov	r0, r3
   81e48:	4b25      	ldr	r3, [pc, #148]	; (81ee0 <Cl_alarms_scanforAlarms+0xf90>)
   81e4a:	681a      	ldr	r2, [r3, #0]
   81e4c:	4b23      	ldr	r3, [pc, #140]	; (81edc <Cl_alarms_scanforAlarms+0xf8c>)
   81e4e:	4611      	mov	r1, r2
   81e50:	4798      	blx	r3
   81e52:	4603      	mov	r3, r0
   81e54:	2b00      	cmp	r3, #0
   81e56:	d04e      	beq.n	81ef6 <Cl_alarms_scanforAlarms+0xfa6>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81e58:	4b15      	ldr	r3, [pc, #84]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e5a:	2201      	movs	r2, #1
   81e5c:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   81e60:	4b1a      	ldr	r3, [pc, #104]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81e62:	781b      	ldrb	r3, [r3, #0]
   81e64:	4a19      	ldr	r2, [pc, #100]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81e66:	3301      	adds	r3, #1
   81e68:	00db      	lsls	r3, r3, #3
   81e6a:	4413      	add	r3, r2
   81e6c:	2218      	movs	r2, #24
   81e6e:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   81e70:	4b0f      	ldr	r3, [pc, #60]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e72:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   81e76:	3301      	adds	r3, #1
   81e78:	b2da      	uxtb	r2, r3
   81e7a:	4b0d      	ldr	r3, [pc, #52]	; (81eb0 <Cl_alarms_scanforAlarms+0xf60>)
   81e7c:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					cl_alarm_triggered = true;
   81e80:	4b0c      	ldr	r3, [pc, #48]	; (81eb4 <Cl_alarms_scanforAlarms+0xf64>)
   81e82:	2201      	movs	r2, #1
   81e84:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   81e86:	4b12      	ldr	r3, [pc, #72]	; (81ed0 <Cl_alarms_scanforAlarms+0xf80>)
   81e88:	2218      	movs	r2, #24
   81e8a:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e8c:	4b0f      	ldr	r3, [pc, #60]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81e8e:	781b      	ldrb	r3, [r3, #0]
   81e90:	461a      	mov	r2, r3
   81e92:	4b0e      	ldr	r3, [pc, #56]	; (81ecc <Cl_alarms_scanforAlarms+0xf7c>)
   81e94:	4413      	add	r3, r2
   81e96:	222e      	movs	r2, #46	; 0x2e
   81e98:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81e9a:	4b0e      	ldr	r3, [pc, #56]	; (81ed4 <Cl_alarms_scanforAlarms+0xf84>)
   81e9c:	4798      	blx	r3
   81e9e:	4603      	mov	r3, r0
   81ea0:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81ea2:	79fb      	ldrb	r3, [r7, #7]
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d026      	beq.n	81ef6 <Cl_alarms_scanforAlarms+0xfa6>
   81ea8:	4b0b      	ldr	r3, [pc, #44]	; (81ed8 <Cl_alarms_scanforAlarms+0xf88>)
   81eaa:	4798      	blx	r3
   81eac:	e023      	b.n	81ef6 <Cl_alarms_scanforAlarms+0xfa6>
   81eae:	bf00      	nop
   81eb0:	20071c0c 	.word	0x20071c0c
   81eb4:	200716d9 	.word	0x200716d9
   81eb8:	20070100 	.word	0x20070100
   81ebc:	000a7d95 	.word	0x000a7d95
   81ec0:	447a0000 	.word	0x447a0000
   81ec4:	200716e4 	.word	0x200716e4
   81ec8:	000a82e5 	.word	0x000a82e5
   81ecc:	20072214 	.word	0x20072214
   81ed0:	20072040 	.word	0x20072040
   81ed4:	00082919 	.word	0x00082919
   81ed8:	00088aa9 	.word	0x00088aa9
   81edc:	000a8321 	.word	0x000a8321
   81ee0:	200716e8 	.word	0x200716e8
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81ee4:	4b98      	ldr	r3, [pc, #608]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81ee6:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   81eea:	2b01      	cmp	r3, #1
   81eec:	d103      	bne.n	81ef6 <Cl_alarms_scanforAlarms+0xfa6>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81eee:	4b96      	ldr	r3, [pc, #600]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81ef0:	2204      	movs	r2, #4
   81ef2:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   81ef6:	4b94      	ldr	r3, [pc, #592]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81ef8:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   81efc:	2b00      	cmp	r3, #0
   81efe:	d049      	beq.n	81f94 <Cl_alarms_scanforAlarms+0x1044>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_upper - 1000 ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar 
   81f00:	4b91      	ldr	r3, [pc, #580]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f02:	f8d3 2274 	ldr.w	r2, [r3, #628]	; 0x274
   81f06:	4b91      	ldr	r3, [pc, #580]	; (8214c <Cl_alarms_scanforAlarms+0x11fc>)
   81f08:	4991      	ldr	r1, [pc, #580]	; (82150 <Cl_alarms_scanforAlarms+0x1200>)
   81f0a:	4610      	mov	r0, r2
   81f0c:	4798      	blx	r3
   81f0e:	4603      	mov	r3, r0
   81f10:	4618      	mov	r0, r3
   81f12:	4b90      	ldr	r3, [pc, #576]	; (82154 <Cl_alarms_scanforAlarms+0x1204>)
   81f14:	681a      	ldr	r2, [r3, #0]
   81f16:	4b90      	ldr	r3, [pc, #576]	; (82158 <Cl_alarms_scanforAlarms+0x1208>)
   81f18:	4611      	mov	r1, r2
   81f1a:	4798      	blx	r3
   81f1c:	4603      	mov	r3, r0
   81f1e:	2b00      	cmp	r3, #0
   81f20:	d02f      	beq.n	81f82 <Cl_alarms_scanforAlarms+0x1032>
   81f22:	4b89      	ldr	r3, [pc, #548]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f24:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   81f28:	2b01      	cmp	r3, #1
   81f2a:	d02a      	beq.n	81f82 <Cl_alarms_scanforAlarms+0x1032>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81f2c:	4b86      	ldr	r3, [pc, #536]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f2e:	2201      	movs	r2, #1
   81f30:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   81f34:	4b89      	ldr	r3, [pc, #548]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81f36:	781b      	ldrb	r3, [r3, #0]
   81f38:	4a88      	ldr	r2, [pc, #544]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81f3a:	3301      	adds	r3, #1
   81f3c:	00db      	lsls	r3, r3, #3
   81f3e:	4413      	add	r3, r2
   81f40:	2227      	movs	r2, #39	; 0x27
   81f42:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   81f44:	4b80      	ldr	r3, [pc, #512]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f46:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   81f4a:	3301      	adds	r3, #1
   81f4c:	b2da      	uxtb	r2, r3
   81f4e:	4b7e      	ldr	r3, [pc, #504]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f50:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
				cl_alarm_triggered = true;
   81f54:	4b82      	ldr	r3, [pc, #520]	; (82160 <Cl_alarms_scanforAlarms+0x1210>)
   81f56:	2201      	movs	r2, #1
   81f58:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   81f5a:	4b82      	ldr	r3, [pc, #520]	; (82164 <Cl_alarms_scanforAlarms+0x1214>)
   81f5c:	2227      	movs	r2, #39	; 0x27
   81f5e:	701a      	strb	r2, [r3, #0]
				//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f60:	4b7e      	ldr	r3, [pc, #504]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81f62:	781b      	ldrb	r3, [r3, #0]
   81f64:	461a      	mov	r2, r3
   81f66:	4b7d      	ldr	r3, [pc, #500]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81f68:	4413      	add	r3, r2
   81f6a:	222e      	movs	r2, #46	; 0x2e
   81f6c:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81f6e:	4b7e      	ldr	r3, [pc, #504]	; (82168 <Cl_alarms_scanforAlarms+0x1218>)
   81f70:	4798      	blx	r3
   81f72:	4603      	mov	r3, r0
   81f74:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   81f76:	79fb      	ldrb	r3, [r7, #7]
   81f78:	2b00      	cmp	r3, #0
   81f7a:	d00b      	beq.n	81f94 <Cl_alarms_scanforAlarms+0x1044>
   81f7c:	4b7b      	ldr	r3, [pc, #492]	; (8216c <Cl_alarms_scanforAlarms+0x121c>)
   81f7e:	4798      	blx	r3
   81f80:	e008      	b.n	81f94 <Cl_alarms_scanforAlarms+0x1044>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   81f82:	4b71      	ldr	r3, [pc, #452]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f84:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   81f88:	2b01      	cmp	r3, #1
   81f8a:	d103      	bne.n	81f94 <Cl_alarms_scanforAlarms+0x1044>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   81f8c:	4b6e      	ldr	r3, [pc, #440]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f8e:	2204      	movs	r2, #4
   81f90:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   81f94:	4b6c      	ldr	r3, [pc, #432]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81f96:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   81f9a:	2b00      	cmp	r3, #0
   81f9c:	d048      	beq.n	82030 <Cl_alarms_scanforAlarms+0x10e0>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold - 1000) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   81f9e:	4b74      	ldr	r3, [pc, #464]	; (82170 <Cl_alarms_scanforAlarms+0x1220>)
   81fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81fa2:	4b6a      	ldr	r3, [pc, #424]	; (8214c <Cl_alarms_scanforAlarms+0x11fc>)
   81fa4:	496a      	ldr	r1, [pc, #424]	; (82150 <Cl_alarms_scanforAlarms+0x1200>)
   81fa6:	4610      	mov	r0, r2
   81fa8:	4798      	blx	r3
   81faa:	4603      	mov	r3, r0
   81fac:	4618      	mov	r0, r3
   81fae:	4b69      	ldr	r3, [pc, #420]	; (82154 <Cl_alarms_scanforAlarms+0x1204>)
   81fb0:	681a      	ldr	r2, [r3, #0]
   81fb2:	4b70      	ldr	r3, [pc, #448]	; (82174 <Cl_alarms_scanforAlarms+0x1224>)
   81fb4:	4611      	mov	r1, r2
   81fb6:	4798      	blx	r3
   81fb8:	4603      	mov	r3, r0
   81fba:	2b00      	cmp	r3, #0
   81fbc:	d02f      	beq.n	8201e <Cl_alarms_scanforAlarms+0x10ce>
   81fbe:	4b62      	ldr	r3, [pc, #392]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81fc0:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   81fc4:	2b01      	cmp	r3, #1
   81fc6:	d02a      	beq.n	8201e <Cl_alarms_scanforAlarms+0x10ce>
// 				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
// 				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
// 				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
// 			}
// 			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   81fc8:	4b5f      	ldr	r3, [pc, #380]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81fca:	2201      	movs	r2, #1
   81fcc:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   81fd0:	4b62      	ldr	r3, [pc, #392]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81fd2:	781b      	ldrb	r3, [r3, #0]
   81fd4:	4a61      	ldr	r2, [pc, #388]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81fd6:	3301      	adds	r3, #1
   81fd8:	00db      	lsls	r3, r3, #3
   81fda:	4413      	add	r3, r2
   81fdc:	2228      	movs	r2, #40	; 0x28
   81fde:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   81fe0:	4b59      	ldr	r3, [pc, #356]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81fe2:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   81fe6:	3301      	adds	r3, #1
   81fe8:	b2da      	uxtb	r2, r3
   81fea:	4b57      	ldr	r3, [pc, #348]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   81fec:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			cl_alarm_triggered = true;
   81ff0:	4b5b      	ldr	r3, [pc, #364]	; (82160 <Cl_alarms_scanforAlarms+0x1210>)
   81ff2:	2201      	movs	r2, #1
   81ff4:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   81ff6:	4b5b      	ldr	r3, [pc, #364]	; (82164 <Cl_alarms_scanforAlarms+0x1214>)
   81ff8:	2228      	movs	r2, #40	; 0x28
   81ffa:	701a      	strb	r2, [r3, #0]
			//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ffc:	4b57      	ldr	r3, [pc, #348]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   81ffe:	781b      	ldrb	r3, [r3, #0]
   82000:	461a      	mov	r2, r3
   82002:	4b56      	ldr	r3, [pc, #344]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   82004:	4413      	add	r3, r2
   82006:	222e      	movs	r2, #46	; 0x2e
   82008:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8200a:	4b57      	ldr	r3, [pc, #348]	; (82168 <Cl_alarms_scanforAlarms+0x1218>)
   8200c:	4798      	blx	r3
   8200e:	4603      	mov	r3, r0
   82010:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82012:	79fb      	ldrb	r3, [r7, #7]
   82014:	2b00      	cmp	r3, #0
   82016:	d00b      	beq.n	82030 <Cl_alarms_scanforAlarms+0x10e0>
   82018:	4b54      	ldr	r3, [pc, #336]	; (8216c <Cl_alarms_scanforAlarms+0x121c>)
   8201a:	4798      	blx	r3
   8201c:	e008      	b.n	82030 <Cl_alarms_scanforAlarms+0x10e0>
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8201e:	4b4a      	ldr	r3, [pc, #296]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   82020:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   82024:	2b01      	cmp	r3, #1
   82026:	d103      	bne.n	82030 <Cl_alarms_scanforAlarms+0x10e0>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82028:	4b47      	ldr	r3, [pc, #284]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   8202a:	2204      	movs	r2, #4
   8202c:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   82030:	4b45      	ldr	r3, [pc, #276]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   82032:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   82036:	2b00      	cmp	r3, #0
   82038:	d045      	beq.n	820c6 <Cl_alarms_scanforAlarms+0x1176>
	{

		//	if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)

			if(temp1 >  Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_upper)
   8203a:	4b43      	ldr	r3, [pc, #268]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   8203c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
   82040:	4b4d      	ldr	r3, [pc, #308]	; (82178 <Cl_alarms_scanforAlarms+0x1228>)
   82042:	6819      	ldr	r1, [r3, #0]
   82044:	4b44      	ldr	r3, [pc, #272]	; (82158 <Cl_alarms_scanforAlarms+0x1208>)
   82046:	4610      	mov	r0, r2
   82048:	4798      	blx	r3
   8204a:	4603      	mov	r3, r0
   8204c:	2b00      	cmp	r3, #0
   8204e:	d02a      	beq.n	820a6 <Cl_alarms_scanforAlarms+0x1156>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82050:	4b3d      	ldr	r3, [pc, #244]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   82052:	2201      	movs	r2, #1
   82054:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   82058:	4b40      	ldr	r3, [pc, #256]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   8205a:	781b      	ldrb	r3, [r3, #0]
   8205c:	4a3f      	ldr	r2, [pc, #252]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   8205e:	3301      	adds	r3, #1
   82060:	00db      	lsls	r3, r3, #3
   82062:	4413      	add	r3, r2
   82064:	220f      	movs	r2, #15
   82066:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   82068:	4b37      	ldr	r3, [pc, #220]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   8206a:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   8206e:	3301      	adds	r3, #1
   82070:	b2da      	uxtb	r2, r3
   82072:	4b35      	ldr	r3, [pc, #212]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   82074:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
				cl_alarm_triggered = true;
   82078:	4b39      	ldr	r3, [pc, #228]	; (82160 <Cl_alarms_scanforAlarms+0x1210>)
   8207a:	2201      	movs	r2, #1
   8207c:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   8207e:	4b39      	ldr	r3, [pc, #228]	; (82164 <Cl_alarms_scanforAlarms+0x1214>)
   82080:	220f      	movs	r2, #15
   82082:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82084:	4b35      	ldr	r3, [pc, #212]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   82086:	781b      	ldrb	r3, [r3, #0]
   82088:	461a      	mov	r2, r3
   8208a:	4b34      	ldr	r3, [pc, #208]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   8208c:	4413      	add	r3, r2
   8208e:	222e      	movs	r2, #46	; 0x2e
   82090:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82092:	4b35      	ldr	r3, [pc, #212]	; (82168 <Cl_alarms_scanforAlarms+0x1218>)
   82094:	4798      	blx	r3
   82096:	4603      	mov	r3, r0
   82098:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);	
   8209a:	79fb      	ldrb	r3, [r7, #7]
   8209c:	2b00      	cmp	r3, #0
   8209e:	d012      	beq.n	820c6 <Cl_alarms_scanforAlarms+0x1176>
   820a0:	4b32      	ldr	r3, [pc, #200]	; (8216c <Cl_alarms_scanforAlarms+0x121c>)
   820a2:	4798      	blx	r3
   820a4:	e00f      	b.n	820c6 <Cl_alarms_scanforAlarms+0x1176>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   820a6:	4b28      	ldr	r3, [pc, #160]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820a8:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   820ac:	2b01      	cmp	r3, #1
   820ae:	d10a      	bne.n	820c6 <Cl_alarms_scanforAlarms+0x1176>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   820b0:	4b25      	ldr	r3, [pc, #148]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820b2:	2204      	movs	r2, #4
   820b4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   820b8:	4b23      	ldr	r3, [pc, #140]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820ba:	2200      	movs	r2, #0
   820bc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
					cl_alarm_triggered = false;
   820c0:	4b27      	ldr	r3, [pc, #156]	; (82160 <Cl_alarms_scanforAlarms+0x1210>)
   820c2:	2200      	movs	r2, #0
   820c4:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   820c6:	4b20      	ldr	r3, [pc, #128]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820c8:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   820cc:	2b00      	cmp	r3, #0
   820ce:	d065      	beq.n	8219c <Cl_alarms_scanforAlarms+0x124c>
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
		//	if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
			if(temp1 < Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_lower)
   820d0:	4b1d      	ldr	r3, [pc, #116]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   820d6:	4b28      	ldr	r3, [pc, #160]	; (82178 <Cl_alarms_scanforAlarms+0x1228>)
   820d8:	6819      	ldr	r1, [r3, #0]
   820da:	4b26      	ldr	r3, [pc, #152]	; (82174 <Cl_alarms_scanforAlarms+0x1224>)
   820dc:	4610      	mov	r0, r2
   820de:	4798      	blx	r3
   820e0:	4603      	mov	r3, r0
   820e2:	2b00      	cmp	r3, #0
   820e4:	d04a      	beq.n	8217c <Cl_alarms_scanforAlarms+0x122c>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   820e6:	4b18      	ldr	r3, [pc, #96]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820e8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   820ec:	2b01      	cmp	r3, #1
   820ee:	d055      	beq.n	8219c <Cl_alarms_scanforAlarms+0x124c>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   820f0:	4b15      	ldr	r3, [pc, #84]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   820f2:	2201      	movs	r2, #1
   820f4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   820f8:	4b18      	ldr	r3, [pc, #96]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   820fa:	781b      	ldrb	r3, [r3, #0]
   820fc:	4a17      	ldr	r2, [pc, #92]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   820fe:	3301      	adds	r3, #1
   82100:	00db      	lsls	r3, r3, #3
   82102:	4413      	add	r3, r2
   82104:	2210      	movs	r2, #16
   82106:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   82108:	4b0f      	ldr	r3, [pc, #60]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   8210a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   8210e:	3301      	adds	r3, #1
   82110:	b2da      	uxtb	r2, r3
   82112:	4b0d      	ldr	r3, [pc, #52]	; (82148 <Cl_alarms_scanforAlarms+0x11f8>)
   82114:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				cl_alarm_triggered = true;
   82118:	4b11      	ldr	r3, [pc, #68]	; (82160 <Cl_alarms_scanforAlarms+0x1210>)
   8211a:	2201      	movs	r2, #1
   8211c:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   8211e:	4b11      	ldr	r3, [pc, #68]	; (82164 <Cl_alarms_scanforAlarms+0x1214>)
   82120:	2210      	movs	r2, #16
   82122:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82124:	4b0d      	ldr	r3, [pc, #52]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   82126:	781b      	ldrb	r3, [r3, #0]
   82128:	461a      	mov	r2, r3
   8212a:	4b0c      	ldr	r3, [pc, #48]	; (8215c <Cl_alarms_scanforAlarms+0x120c>)
   8212c:	4413      	add	r3, r2
   8212e:	222e      	movs	r2, #46	; 0x2e
   82130:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82132:	4b0d      	ldr	r3, [pc, #52]	; (82168 <Cl_alarms_scanforAlarms+0x1218>)
   82134:	4798      	blx	r3
   82136:	4603      	mov	r3, r0
   82138:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   8213a:	79fb      	ldrb	r3, [r7, #7]
   8213c:	2b00      	cmp	r3, #0
   8213e:	d02d      	beq.n	8219c <Cl_alarms_scanforAlarms+0x124c>
   82140:	4b0a      	ldr	r3, [pc, #40]	; (8216c <Cl_alarms_scanforAlarms+0x121c>)
   82142:	4798      	blx	r3
   82144:	e02a      	b.n	8219c <Cl_alarms_scanforAlarms+0x124c>
   82146:	bf00      	nop
   82148:	20071c0c 	.word	0x20071c0c
   8214c:	000a7d95 	.word	0x000a7d95
   82150:	447a0000 	.word	0x447a0000
   82154:	200716ec 	.word	0x200716ec
   82158:	000a82e5 	.word	0x000a82e5
   8215c:	20072214 	.word	0x20072214
   82160:	200716d9 	.word	0x200716d9
   82164:	20072040 	.word	0x20072040
   82168:	00082919 	.word	0x00082919
   8216c:	00088aa9 	.word	0x00088aa9
   82170:	20072044 	.word	0x20072044
   82174:	000a8321 	.word	0x000a8321
   82178:	200716f0 	.word	0x200716f0
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8217c:	4b9e      	ldr	r3, [pc, #632]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8217e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   82182:	2b01      	cmp	r3, #1
   82184:	d10a      	bne.n	8219c <Cl_alarms_scanforAlarms+0x124c>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82186:	4b9c      	ldr	r3, [pc, #624]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82188:	2204      	movs	r2, #4
   8218a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   8218e:	4b9a      	ldr	r3, [pc, #616]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82190:	2200      	movs	r2, #0
   82192:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					cl_alarm_triggered = false;	
   82196:	4b99      	ldr	r3, [pc, #612]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   82198:	2200      	movs	r2, #0
   8219a:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   8219c:	4b96      	ldr	r3, [pc, #600]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8219e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   821a2:	2b00      	cmp	r3, #0
   821a4:	d049      	beq.n	8223a <Cl_alarms_scanforAlarms+0x12ea>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	Cl_Int16Type temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   821a6:	4b96      	ldr	r3, [pc, #600]	; (82400 <Cl_alarms_scanforAlarms+0x14b0>)
   821a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   821aa:	4b96      	ldr	r3, [pc, #600]	; (82404 <Cl_alarms_scanforAlarms+0x14b4>)
   821ac:	6819      	ldr	r1, [r3, #0]
   821ae:	4b96      	ldr	r3, [pc, #600]	; (82408 <Cl_alarms_scanforAlarms+0x14b8>)
   821b0:	4610      	mov	r0, r2
   821b2:	4798      	blx	r3
   821b4:	4603      	mov	r3, r0
   821b6:	2b00      	cmp	r3, #0
   821b8:	d02f      	beq.n	8221a <Cl_alarms_scanforAlarms+0x12ca>
			//	Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   821ba:	4b8f      	ldr	r3, [pc, #572]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   821bc:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   821c0:	2b01      	cmp	r3, #1
   821c2:	d03a      	beq.n	8223a <Cl_alarms_scanforAlarms+0x12ea>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   821c4:	4b8c      	ldr	r3, [pc, #560]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   821c6:	2201      	movs	r2, #1
   821c8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   821cc:	4b8f      	ldr	r3, [pc, #572]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   821ce:	781b      	ldrb	r3, [r3, #0]
   821d0:	4a8e      	ldr	r2, [pc, #568]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   821d2:	3301      	adds	r3, #1
   821d4:	00db      	lsls	r3, r3, #3
   821d6:	4413      	add	r3, r2
   821d8:	2213      	movs	r2, #19
   821da:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   821dc:	4b86      	ldr	r3, [pc, #536]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   821de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   821e2:	3301      	adds	r3, #1
   821e4:	b2da      	uxtb	r2, r3
   821e6:	4b84      	ldr	r3, [pc, #528]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   821e8:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					cl_alarm_triggered = true;
   821ec:	4b83      	ldr	r3, [pc, #524]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   821ee:	2201      	movs	r2, #1
   821f0:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   821f2:	4b87      	ldr	r3, [pc, #540]	; (82410 <Cl_alarms_scanforAlarms+0x14c0>)
   821f4:	2213      	movs	r2, #19
   821f6:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   821f8:	4b84      	ldr	r3, [pc, #528]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   821fa:	781b      	ldrb	r3, [r3, #0]
   821fc:	461a      	mov	r2, r3
   821fe:	4b83      	ldr	r3, [pc, #524]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   82200:	4413      	add	r3, r2
   82202:	222e      	movs	r2, #46	; 0x2e
   82204:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82206:	4b83      	ldr	r3, [pc, #524]	; (82414 <Cl_alarms_scanforAlarms+0x14c4>)
   82208:	4798      	blx	r3
   8220a:	4603      	mov	r3, r0
   8220c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8220e:	79fb      	ldrb	r3, [r7, #7]
   82210:	2b00      	cmp	r3, #0
   82212:	d012      	beq.n	8223a <Cl_alarms_scanforAlarms+0x12ea>
   82214:	4b80      	ldr	r3, [pc, #512]	; (82418 <Cl_alarms_scanforAlarms+0x14c8>)
   82216:	4798      	blx	r3
   82218:	e00f      	b.n	8223a <Cl_alarms_scanforAlarms+0x12ea>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8221a:	4b77      	ldr	r3, [pc, #476]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8221c:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82220:	2b01      	cmp	r3, #1
   82222:	d10a      	bne.n	8223a <Cl_alarms_scanforAlarms+0x12ea>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82224:	4b74      	ldr	r3, [pc, #464]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82226:	2204      	movs	r2, #4
   82228:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   8222c:	4b72      	ldr	r3, [pc, #456]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8222e:	2200      	movs	r2, #0
   82230:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
						cl_alarm_triggered = false;	
   82234:	4b71      	ldr	r3, [pc, #452]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   82236:	2200      	movs	r2, #0
   82238:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   8223a:	4b6f      	ldr	r3, [pc, #444]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8223c:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   82240:	2b00      	cmp	r3, #0
   82242:	d049      	beq.n	822d8 <Cl_alarms_scanforAlarms+0x1388>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   82244:	4b6e      	ldr	r3, [pc, #440]	; (82400 <Cl_alarms_scanforAlarms+0x14b0>)
   82246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   82248:	4b6e      	ldr	r3, [pc, #440]	; (82404 <Cl_alarms_scanforAlarms+0x14b4>)
   8224a:	6819      	ldr	r1, [r3, #0]
   8224c:	4b73      	ldr	r3, [pc, #460]	; (8241c <Cl_alarms_scanforAlarms+0x14cc>)
   8224e:	4610      	mov	r0, r2
   82250:	4798      	blx	r3
   82252:	4603      	mov	r3, r0
   82254:	2b00      	cmp	r3, #0
   82256:	d02f      	beq.n	822b8 <Cl_alarms_scanforAlarms+0x1368>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82258:	4b67      	ldr	r3, [pc, #412]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8225a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   8225e:	2b01      	cmp	r3, #1
   82260:	d03a      	beq.n	822d8 <Cl_alarms_scanforAlarms+0x1388>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82262:	4b65      	ldr	r3, [pc, #404]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82264:	2201      	movs	r2, #1
   82266:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   8226a:	4b68      	ldr	r3, [pc, #416]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   8226c:	781b      	ldrb	r3, [r3, #0]
   8226e:	4a67      	ldr	r2, [pc, #412]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   82270:	3301      	adds	r3, #1
   82272:	00db      	lsls	r3, r3, #3
   82274:	4413      	add	r3, r2
   82276:	2214      	movs	r2, #20
   82278:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   8227a:	4b5f      	ldr	r3, [pc, #380]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8227c:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   82280:	3301      	adds	r3, #1
   82282:	b2da      	uxtb	r2, r3
   82284:	4b5c      	ldr	r3, [pc, #368]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82286:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = true;
   8228a:	4b5c      	ldr	r3, [pc, #368]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   8228c:	2201      	movs	r2, #1
   8228e:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   82290:	4b5f      	ldr	r3, [pc, #380]	; (82410 <Cl_alarms_scanforAlarms+0x14c0>)
   82292:	2214      	movs	r2, #20
   82294:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82296:	4b5d      	ldr	r3, [pc, #372]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   82298:	781b      	ldrb	r3, [r3, #0]
   8229a:	461a      	mov	r2, r3
   8229c:	4b5b      	ldr	r3, [pc, #364]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   8229e:	4413      	add	r3, r2
   822a0:	222e      	movs	r2, #46	; 0x2e
   822a2:	709a      	strb	r2, [r3, #2]
								Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   822a4:	4b5b      	ldr	r3, [pc, #364]	; (82414 <Cl_alarms_scanforAlarms+0x14c4>)
   822a6:	4798      	blx	r3
   822a8:	4603      	mov	r3, r0
   822aa:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_alarms_retcode);
   822ac:	79fb      	ldrb	r3, [r7, #7]
   822ae:	2b00      	cmp	r3, #0
   822b0:	d012      	beq.n	822d8 <Cl_alarms_scanforAlarms+0x1388>
   822b2:	4b59      	ldr	r3, [pc, #356]	; (82418 <Cl_alarms_scanforAlarms+0x14c8>)
   822b4:	4798      	blx	r3
   822b6:	e00f      	b.n	822d8 <Cl_alarms_scanforAlarms+0x1388>
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   822b8:	4b4f      	ldr	r3, [pc, #316]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   822ba:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   822be:	2b01      	cmp	r3, #1
   822c0:	d10a      	bne.n	822d8 <Cl_alarms_scanforAlarms+0x1388>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   822c2:	4b4d      	ldr	r3, [pc, #308]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   822c4:	2204      	movs	r2, #4
   822c6:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   822ca:	4b4b      	ldr	r3, [pc, #300]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   822cc:	2200      	movs	r2, #0
   822ce:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = false;
   822d2:	4b4a      	ldr	r3, [pc, #296]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   822d4:	2200      	movs	r2, #0
   822d6:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   822d8:	4b47      	ldr	r3, [pc, #284]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   822da:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   822de:	2b00      	cmp	r3, #0
   822e0:	d04a      	beq.n	82378 <Cl_alarms_scanforAlarms+0x1428>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		Cl_Int16Type temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_upper)
   822e2:	4b45      	ldr	r3, [pc, #276]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   822e4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   822e8:	4b4d      	ldr	r3, [pc, #308]	; (82420 <Cl_alarms_scanforAlarms+0x14d0>)
   822ea:	6819      	ldr	r1, [r3, #0]
   822ec:	4b46      	ldr	r3, [pc, #280]	; (82408 <Cl_alarms_scanforAlarms+0x14b8>)
   822ee:	4610      	mov	r0, r2
   822f0:	4798      	blx	r3
   822f2:	4603      	mov	r3, r0
   822f4:	2b00      	cmp	r3, #0
   822f6:	d02f      	beq.n	82358 <Cl_alarms_scanforAlarms+0x1408>
	//Cl_Uint16Type temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   822f8:	4b3f      	ldr	r3, [pc, #252]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   822fa:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   822fe:	2b01      	cmp	r3, #1
   82300:	d03a      	beq.n	82378 <Cl_alarms_scanforAlarms+0x1428>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82302:	4b3d      	ldr	r3, [pc, #244]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82304:	2201      	movs	r2, #1
   82306:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   8230a:	4b40      	ldr	r3, [pc, #256]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   8230c:	781b      	ldrb	r3, [r3, #0]
   8230e:	4a3f      	ldr	r2, [pc, #252]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   82310:	3301      	adds	r3, #1
   82312:	00db      	lsls	r3, r3, #3
   82314:	4413      	add	r3, r2
   82316:	2211      	movs	r2, #17
   82318:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   8231a:	4b37      	ldr	r3, [pc, #220]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8231c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   82320:	3301      	adds	r3, #1
   82322:	b2da      	uxtb	r2, r3
   82324:	4b34      	ldr	r3, [pc, #208]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82326:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
			cl_alarm_triggered = true;
   8232a:	4b34      	ldr	r3, [pc, #208]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   8232c:	2201      	movs	r2, #1
   8232e:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   82330:	4b37      	ldr	r3, [pc, #220]	; (82410 <Cl_alarms_scanforAlarms+0x14c0>)
   82332:	2211      	movs	r2, #17
   82334:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82336:	4b35      	ldr	r3, [pc, #212]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   82338:	781b      	ldrb	r3, [r3, #0]
   8233a:	461a      	mov	r2, r3
   8233c:	4b33      	ldr	r3, [pc, #204]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   8233e:	4413      	add	r3, r2
   82340:	222e      	movs	r2, #46	; 0x2e
   82342:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82344:	4b33      	ldr	r3, [pc, #204]	; (82414 <Cl_alarms_scanforAlarms+0x14c4>)
   82346:	4798      	blx	r3
   82348:	4603      	mov	r3, r0
   8234a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8234c:	79fb      	ldrb	r3, [r7, #7]
   8234e:	2b00      	cmp	r3, #0
   82350:	d012      	beq.n	82378 <Cl_alarms_scanforAlarms+0x1428>
   82352:	4b31      	ldr	r3, [pc, #196]	; (82418 <Cl_alarms_scanforAlarms+0x14c8>)
   82354:	4798      	blx	r3
   82356:	e00f      	b.n	82378 <Cl_alarms_scanforAlarms+0x1428>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82358:	4b27      	ldr	r3, [pc, #156]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8235a:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   8235e:	2b01      	cmp	r3, #1
   82360:	d10a      	bne.n	82378 <Cl_alarms_scanforAlarms+0x1428>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82362:	4b25      	ldr	r3, [pc, #148]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82364:	2204      	movs	r2, #4
   82366:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   8236a:	4b23      	ldr	r3, [pc, #140]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8236c:	2200      	movs	r2, #0
   8236e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
				cl_alarm_triggered = false;
   82372:	4b22      	ldr	r3, [pc, #136]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   82374:	2200      	movs	r2, #0
   82376:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   82378:	4b1f      	ldr	r3, [pc, #124]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8237a:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   8237e:	2b00      	cmp	r3, #0
   82380:	d060      	beq.n	82444 <Cl_alarms_scanforAlarms+0x14f4>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_lower)//)Cl_alarmThresholdTable.temp2_low_threshold)
   82382:	4b1d      	ldr	r3, [pc, #116]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   82384:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
   82388:	4b25      	ldr	r3, [pc, #148]	; (82420 <Cl_alarms_scanforAlarms+0x14d0>)
   8238a:	6819      	ldr	r1, [r3, #0]
   8238c:	4b23      	ldr	r3, [pc, #140]	; (8241c <Cl_alarms_scanforAlarms+0x14cc>)
   8238e:	4610      	mov	r0, r2
   82390:	4798      	blx	r3
   82392:	4603      	mov	r3, r0
   82394:	2b00      	cmp	r3, #0
   82396:	d045      	beq.n	82424 <Cl_alarms_scanforAlarms+0x14d4>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82398:	4b17      	ldr	r3, [pc, #92]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   8239a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8239e:	2b01      	cmp	r3, #1
   823a0:	d050      	beq.n	82444 <Cl_alarms_scanforAlarms+0x14f4>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   823a2:	4b15      	ldr	r3, [pc, #84]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   823a4:	2201      	movs	r2, #1
   823a6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   823aa:	4b18      	ldr	r3, [pc, #96]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   823ac:	781b      	ldrb	r3, [r3, #0]
   823ae:	4a17      	ldr	r2, [pc, #92]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   823b0:	3301      	adds	r3, #1
   823b2:	00db      	lsls	r3, r3, #3
   823b4:	4413      	add	r3, r2
   823b6:	2212      	movs	r2, #18
   823b8:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   823ba:	4b0f      	ldr	r3, [pc, #60]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   823bc:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   823c0:	3301      	adds	r3, #1
   823c2:	b2da      	uxtb	r2, r3
   823c4:	4b0c      	ldr	r3, [pc, #48]	; (823f8 <Cl_alarms_scanforAlarms+0x14a8>)
   823c6:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = true;
   823ca:	4b0c      	ldr	r3, [pc, #48]	; (823fc <Cl_alarms_scanforAlarms+0x14ac>)
   823cc:	2201      	movs	r2, #1
   823ce:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   823d0:	4b0f      	ldr	r3, [pc, #60]	; (82410 <Cl_alarms_scanforAlarms+0x14c0>)
   823d2:	2212      	movs	r2, #18
   823d4:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   823d6:	4b0d      	ldr	r3, [pc, #52]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   823d8:	781b      	ldrb	r3, [r3, #0]
   823da:	461a      	mov	r2, r3
   823dc:	4b0b      	ldr	r3, [pc, #44]	; (8240c <Cl_alarms_scanforAlarms+0x14bc>)
   823de:	4413      	add	r3, r2
   823e0:	222e      	movs	r2, #46	; 0x2e
   823e2:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   823e4:	4b0b      	ldr	r3, [pc, #44]	; (82414 <Cl_alarms_scanforAlarms+0x14c4>)
   823e6:	4798      	blx	r3
   823e8:	4603      	mov	r3, r0
   823ea:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   823ec:	79fb      	ldrb	r3, [r7, #7]
   823ee:	2b00      	cmp	r3, #0
   823f0:	d028      	beq.n	82444 <Cl_alarms_scanforAlarms+0x14f4>
   823f2:	4b09      	ldr	r3, [pc, #36]	; (82418 <Cl_alarms_scanforAlarms+0x14c8>)
   823f4:	4798      	blx	r3
   823f6:	e025      	b.n	82444 <Cl_alarms_scanforAlarms+0x14f4>
   823f8:	20071c0c 	.word	0x20071c0c
   823fc:	200716d9 	.word	0x200716d9
   82400:	20072044 	.word	0x20072044
   82404:	200716f8 	.word	0x200716f8
   82408:	000a82e5 	.word	0x000a82e5
   8240c:	20072214 	.word	0x20072214
   82410:	20072040 	.word	0x20072040
   82414:	00082919 	.word	0x00082919
   82418:	00088aa9 	.word	0x00088aa9
   8241c:	000a8321 	.word	0x000a8321
   82420:	200716f4 	.word	0x200716f4
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82424:	4bac      	ldr	r3, [pc, #688]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82426:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   8242a:	2b01      	cmp	r3, #1
   8242c:	d10a      	bne.n	82444 <Cl_alarms_scanforAlarms+0x14f4>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8242e:	4baa      	ldr	r3, [pc, #680]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82430:	2204      	movs	r2, #4
   82432:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   82436:	4ba8      	ldr	r3, [pc, #672]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82438:	2200      	movs	r2, #0
   8243a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = false;
   8243e:	4ba7      	ldr	r3, [pc, #668]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   82440:	2200      	movs	r2, #0
   82442:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   82444:	4ba4      	ldr	r3, [pc, #656]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82446:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   8244a:	2b00      	cmp	r3, #0
   8244c:	d048      	beq.n	824e0 <Cl_alarms_scanforAlarms+0x1590>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarmThresholdTable.cond_high_threshold) //Cl_alarms_alarms[COND_STATUS_HIGH].cl_upper)
   8244e:	4ba4      	ldr	r3, [pc, #656]	; (826e0 <Cl_alarms_scanforAlarms+0x1790>)
   82450:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   82454:	4ba3      	ldr	r3, [pc, #652]	; (826e4 <Cl_alarms_scanforAlarms+0x1794>)
   82456:	4610      	mov	r0, r2
   82458:	4798      	blx	r3
   8245a:	4ba3      	ldr	r3, [pc, #652]	; (826e8 <Cl_alarms_scanforAlarms+0x1798>)
   8245c:	681a      	ldr	r2, [r3, #0]
   8245e:	4ba3      	ldr	r3, [pc, #652]	; (826ec <Cl_alarms_scanforAlarms+0x179c>)
   82460:	4611      	mov	r1, r2
   82462:	4798      	blx	r3
   82464:	4603      	mov	r3, r0
   82466:	2b00      	cmp	r3, #0
   82468:	d02a      	beq.n	824c0 <Cl_alarms_scanforAlarms+0x1570>
			///Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   8246a:	4b9b      	ldr	r3, [pc, #620]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8246c:	2201      	movs	r2, #1
   8246e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   82472:	4b9f      	ldr	r3, [pc, #636]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82474:	781b      	ldrb	r3, [r3, #0]
   82476:	4a9e      	ldr	r2, [pc, #632]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82478:	3301      	adds	r3, #1
   8247a:	00db      	lsls	r3, r3, #3
   8247c:	4413      	add	r3, r2
   8247e:	2208      	movs	r2, #8
   82480:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   82482:	4b95      	ldr	r3, [pc, #596]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82484:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   82488:	3301      	adds	r3, #1
   8248a:	b2da      	uxtb	r2, r3
   8248c:	4b92      	ldr	r3, [pc, #584]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8248e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			cl_alarm_triggered = true;
   82492:	4b92      	ldr	r3, [pc, #584]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   82494:	2201      	movs	r2, #1
   82496:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   82498:	4b96      	ldr	r3, [pc, #600]	; (826f4 <Cl_alarms_scanforAlarms+0x17a4>)
   8249a:	2208      	movs	r2, #8
   8249c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8249e:	4b94      	ldr	r3, [pc, #592]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   824a0:	781b      	ldrb	r3, [r3, #0]
   824a2:	461a      	mov	r2, r3
   824a4:	4b92      	ldr	r3, [pc, #584]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   824a6:	4413      	add	r3, r2
   824a8:	222e      	movs	r2, #46	; 0x2e
   824aa:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   824ac:	4b92      	ldr	r3, [pc, #584]	; (826f8 <Cl_alarms_scanforAlarms+0x17a8>)
   824ae:	4798      	blx	r3
   824b0:	4603      	mov	r3, r0
   824b2:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   824b4:	79fb      	ldrb	r3, [r7, #7]
   824b6:	2b00      	cmp	r3, #0
   824b8:	d012      	beq.n	824e0 <Cl_alarms_scanforAlarms+0x1590>
   824ba:	4b90      	ldr	r3, [pc, #576]	; (826fc <Cl_alarms_scanforAlarms+0x17ac>)
   824bc:	4798      	blx	r3
   824be:	e00f      	b.n	824e0 <Cl_alarms_scanforAlarms+0x1590>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   824c0:	4b85      	ldr	r3, [pc, #532]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   824c2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   824c6:	2b01      	cmp	r3, #1
   824c8:	d10a      	bne.n	824e0 <Cl_alarms_scanforAlarms+0x1590>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   824ca:	4b83      	ldr	r3, [pc, #524]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   824cc:	2204      	movs	r2, #4
   824ce:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   824d2:	4b81      	ldr	r3, [pc, #516]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   824d4:	2200      	movs	r2, #0
   824d6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				cl_alarm_triggered = false;
   824da:	4b80      	ldr	r3, [pc, #512]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   824dc:	2200      	movs	r2, #0
   824de:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   824e0:	4b7d      	ldr	r3, [pc, #500]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   824e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   824e6:	2b00      	cmp	r3, #0
   824e8:	d048      	beq.n	8257c <Cl_alarms_scanforAlarms+0x162c>
		//Cl_Uint16Type cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarmThresholdTable.cond_low_threshold)
   824ea:	4b7d      	ldr	r3, [pc, #500]	; (826e0 <Cl_alarms_scanforAlarms+0x1790>)
   824ec:	f9b3 2000 	ldrsh.w	r2, [r3]
   824f0:	4b7c      	ldr	r3, [pc, #496]	; (826e4 <Cl_alarms_scanforAlarms+0x1794>)
   824f2:	4610      	mov	r0, r2
   824f4:	4798      	blx	r3
   824f6:	4b7c      	ldr	r3, [pc, #496]	; (826e8 <Cl_alarms_scanforAlarms+0x1798>)
   824f8:	681a      	ldr	r2, [r3, #0]
   824fa:	4b81      	ldr	r3, [pc, #516]	; (82700 <Cl_alarms_scanforAlarms+0x17b0>)
   824fc:	4611      	mov	r1, r2
   824fe:	4798      	blx	r3
   82500:	4603      	mov	r3, r0
   82502:	2b00      	cmp	r3, #0
   82504:	d02a      	beq.n	8255c <Cl_alarms_scanforAlarms+0x160c>
			//Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   82506:	4b74      	ldr	r3, [pc, #464]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82508:	2201      	movs	r2, #1
   8250a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   8250e:	4b78      	ldr	r3, [pc, #480]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82510:	781b      	ldrb	r3, [r3, #0]
   82512:	4a77      	ldr	r2, [pc, #476]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82514:	3301      	adds	r3, #1
   82516:	00db      	lsls	r3, r3, #3
   82518:	4413      	add	r3, r2
   8251a:	2207      	movs	r2, #7
   8251c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   8251e:	4b6e      	ldr	r3, [pc, #440]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82520:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   82524:	3301      	adds	r3, #1
   82526:	b2da      	uxtb	r2, r3
   82528:	4b6b      	ldr	r3, [pc, #428]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8252a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cl_alarm_triggered = true;
   8252e:	4b6b      	ldr	r3, [pc, #428]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   82530:	2201      	movs	r2, #1
   82532:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   82534:	4b6f      	ldr	r3, [pc, #444]	; (826f4 <Cl_alarms_scanforAlarms+0x17a4>)
   82536:	2207      	movs	r2, #7
   82538:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8253a:	4b6d      	ldr	r3, [pc, #436]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   8253c:	781b      	ldrb	r3, [r3, #0]
   8253e:	461a      	mov	r2, r3
   82540:	4b6b      	ldr	r3, [pc, #428]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82542:	4413      	add	r3, r2
   82544:	222e      	movs	r2, #46	; 0x2e
   82546:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82548:	4b6b      	ldr	r3, [pc, #428]	; (826f8 <Cl_alarms_scanforAlarms+0x17a8>)
   8254a:	4798      	blx	r3
   8254c:	4603      	mov	r3, r0
   8254e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82550:	79fb      	ldrb	r3, [r7, #7]
   82552:	2b00      	cmp	r3, #0
   82554:	d012      	beq.n	8257c <Cl_alarms_scanforAlarms+0x162c>
   82556:	4b69      	ldr	r3, [pc, #420]	; (826fc <Cl_alarms_scanforAlarms+0x17ac>)
   82558:	4798      	blx	r3
   8255a:	e00f      	b.n	8257c <Cl_alarms_scanforAlarms+0x162c>
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   8255c:	4b5e      	ldr	r3, [pc, #376]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8255e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   82562:	2b01      	cmp	r3, #1
   82564:	d10a      	bne.n	8257c <Cl_alarms_scanforAlarms+0x162c>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82566:	4b5c      	ldr	r3, [pc, #368]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82568:	2204      	movs	r2, #4
   8256a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   8256e:	4b5a      	ldr	r3, [pc, #360]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82570:	2200      	movs	r2, #0
   82572:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				cl_alarm_triggered = false;
   82576:	4b59      	ldr	r3, [pc, #356]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   82578:	2200      	movs	r2, #0
   8257a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   8257c:	4b56      	ldr	r3, [pc, #344]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8257e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   82582:	2b00      	cmp	r3, #0
   82584:	d10a      	bne.n	8259c <Cl_alarms_scanforAlarms+0x164c>
   82586:	4b54      	ldr	r3, [pc, #336]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82588:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   8258c:	2b00      	cmp	r3, #0
   8258e:	d105      	bne.n	8259c <Cl_alarms_scanforAlarms+0x164c>
   82590:	4b51      	ldr	r3, [pc, #324]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82592:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   82596:	2b00      	cmp	r3, #0
   82598:	f000 8100 	beq.w	8279c <Cl_alarms_scanforAlarms+0x184c>
	{
			dac_cond_alarm = _NO_ALARM;
   8259c:	4b59      	ldr	r3, [pc, #356]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   8259e:	2200      	movs	r2, #0
   825a0:	701a      	strb	r2, [r3, #0]
			Cl_alarms_retcode =  cl_get_dac_conductivity_info(&dac_cond_alarm);
   825a2:	4858      	ldr	r0, [pc, #352]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   825a4:	4b58      	ldr	r3, [pc, #352]	; (82708 <Cl_alarms_scanforAlarms+0x17b8>)
   825a6:	4798      	blx	r3
   825a8:	4603      	mov	r3, r0
   825aa:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   825ac:	79fb      	ldrb	r3, [r7, #7]
   825ae:	2b00      	cmp	r3, #0
   825b0:	d001      	beq.n	825b6 <Cl_alarms_scanforAlarms+0x1666>
   825b2:	4b52      	ldr	r3, [pc, #328]	; (826fc <Cl_alarms_scanforAlarms+0x17ac>)
   825b4:	4798      	blx	r3
				switch(dac_cond_alarm)
   825b6:	4b53      	ldr	r3, [pc, #332]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   825b8:	781b      	ldrb	r3, [r3, #0]
   825ba:	2b0a      	cmp	r3, #10
   825bc:	d049      	beq.n	82652 <Cl_alarms_scanforAlarms+0x1702>
   825be:	2b0b      	cmp	r3, #11
   825c0:	f000 80a4 	beq.w	8270c <Cl_alarms_scanforAlarms+0x17bc>
   825c4:	2b09      	cmp	r3, #9
   825c6:	f040 80e9 	bne.w	8279c <Cl_alarms_scanforAlarms+0x184c>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   825ca:	4b4e      	ldr	r3, [pc, #312]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   825cc:	781b      	ldrb	r3, [r3, #0]
   825ce:	4a42      	ldr	r2, [pc, #264]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   825d0:	011b      	lsls	r3, r3, #4
   825d2:	4413      	add	r3, r2
   825d4:	3302      	adds	r3, #2
   825d6:	2201      	movs	r2, #1
   825d8:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   825da:	4b3f      	ldr	r3, [pc, #252]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   825dc:	2204      	movs	r2, #4
   825de:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   825e2:	4b3d      	ldr	r3, [pc, #244]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   825e4:	2204      	movs	r2, #4
   825e6:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   825ea:	4b41      	ldr	r3, [pc, #260]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   825ec:	781b      	ldrb	r3, [r3, #0]
   825ee:	4618      	mov	r0, r3
   825f0:	4b44      	ldr	r3, [pc, #272]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   825f2:	781b      	ldrb	r3, [r3, #0]
   825f4:	b299      	uxth	r1, r3
   825f6:	4a3e      	ldr	r2, [pc, #248]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   825f8:	1c43      	adds	r3, r0, #1
   825fa:	00db      	lsls	r3, r3, #3
   825fc:	4413      	add	r3, r2
   825fe:	460a      	mov	r2, r1
   82600:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82602:	4b40      	ldr	r3, [pc, #256]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   82604:	781b      	ldrb	r3, [r3, #0]
   82606:	4934      	ldr	r1, [pc, #208]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82608:	011a      	lsls	r2, r3, #4
   8260a:	440a      	add	r2, r1
   8260c:	320d      	adds	r2, #13
   8260e:	7812      	ldrb	r2, [r2, #0]
   82610:	3201      	adds	r2, #1
   82612:	b2d1      	uxtb	r1, r2
   82614:	4a30      	ldr	r2, [pc, #192]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82616:	011b      	lsls	r3, r3, #4
   82618:	4413      	add	r3, r2
   8261a:	330d      	adds	r3, #13
   8261c:	460a      	mov	r2, r1
   8261e:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82620:	4b2e      	ldr	r3, [pc, #184]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   82622:	2201      	movs	r2, #1
   82624:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82626:	4b37      	ldr	r3, [pc, #220]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   82628:	781a      	ldrb	r2, [r3, #0]
   8262a:	4b32      	ldr	r3, [pc, #200]	; (826f4 <Cl_alarms_scanforAlarms+0x17a4>)
   8262c:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8262e:	4b30      	ldr	r3, [pc, #192]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82630:	781b      	ldrb	r3, [r3, #0]
   82632:	461a      	mov	r2, r3
   82634:	4b2e      	ldr	r3, [pc, #184]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82636:	4413      	add	r3, r2
   82638:	222e      	movs	r2, #46	; 0x2e
   8263a:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8263c:	4b2e      	ldr	r3, [pc, #184]	; (826f8 <Cl_alarms_scanforAlarms+0x17a8>)
   8263e:	4798      	blx	r3
   82640:	4603      	mov	r3, r0
   82642:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82644:	79fb      	ldrb	r3, [r7, #7]
   82646:	2b00      	cmp	r3, #0
   82648:	f000 80a3 	beq.w	82792 <Cl_alarms_scanforAlarms+0x1842>
   8264c:	4b2b      	ldr	r3, [pc, #172]	; (826fc <Cl_alarms_scanforAlarms+0x17ac>)
   8264e:	4798      	blx	r3
					break;
   82650:	e09f      	b.n	82792 <Cl_alarms_scanforAlarms+0x1842>
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82652:	4b2c      	ldr	r3, [pc, #176]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   82654:	781b      	ldrb	r3, [r3, #0]
   82656:	4a20      	ldr	r2, [pc, #128]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82658:	011b      	lsls	r3, r3, #4
   8265a:	4413      	add	r3, r2
   8265c:	3302      	adds	r3, #2
   8265e:	2201      	movs	r2, #1
   82660:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82662:	4b1d      	ldr	r3, [pc, #116]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82664:	2204      	movs	r2, #4
   82666:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   8266a:	4b1b      	ldr	r3, [pc, #108]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8266c:	2204      	movs	r2, #4
   8266e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82672:	4b1f      	ldr	r3, [pc, #124]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82674:	781b      	ldrb	r3, [r3, #0]
   82676:	4618      	mov	r0, r3
   82678:	4b22      	ldr	r3, [pc, #136]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   8267a:	781b      	ldrb	r3, [r3, #0]
   8267c:	b299      	uxth	r1, r3
   8267e:	4a1c      	ldr	r2, [pc, #112]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   82680:	1c43      	adds	r3, r0, #1
   82682:	00db      	lsls	r3, r3, #3
   82684:	4413      	add	r3, r2
   82686:	460a      	mov	r2, r1
   82688:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   8268a:	4b1e      	ldr	r3, [pc, #120]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   8268c:	781b      	ldrb	r3, [r3, #0]
   8268e:	4912      	ldr	r1, [pc, #72]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   82690:	011a      	lsls	r2, r3, #4
   82692:	440a      	add	r2, r1
   82694:	320d      	adds	r2, #13
   82696:	7812      	ldrb	r2, [r2, #0]
   82698:	3201      	adds	r2, #1
   8269a:	b2d1      	uxtb	r1, r2
   8269c:	4a0e      	ldr	r2, [pc, #56]	; (826d8 <Cl_alarms_scanforAlarms+0x1788>)
   8269e:	011b      	lsls	r3, r3, #4
   826a0:	4413      	add	r3, r2
   826a2:	330d      	adds	r3, #13
   826a4:	460a      	mov	r2, r1
   826a6:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   826a8:	4b0c      	ldr	r3, [pc, #48]	; (826dc <Cl_alarms_scanforAlarms+0x178c>)
   826aa:	2201      	movs	r2, #1
   826ac:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   826ae:	4b15      	ldr	r3, [pc, #84]	; (82704 <Cl_alarms_scanforAlarms+0x17b4>)
   826b0:	781a      	ldrb	r2, [r3, #0]
   826b2:	4b10      	ldr	r3, [pc, #64]	; (826f4 <Cl_alarms_scanforAlarms+0x17a4>)
   826b4:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   826b6:	4b0e      	ldr	r3, [pc, #56]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   826b8:	781b      	ldrb	r3, [r3, #0]
   826ba:	461a      	mov	r2, r3
   826bc:	4b0c      	ldr	r3, [pc, #48]	; (826f0 <Cl_alarms_scanforAlarms+0x17a0>)
   826be:	4413      	add	r3, r2
   826c0:	222e      	movs	r2, #46	; 0x2e
   826c2:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   826c4:	4b0c      	ldr	r3, [pc, #48]	; (826f8 <Cl_alarms_scanforAlarms+0x17a8>)
   826c6:	4798      	blx	r3
   826c8:	4603      	mov	r3, r0
   826ca:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   826cc:	79fb      	ldrb	r3, [r7, #7]
   826ce:	2b00      	cmp	r3, #0
   826d0:	d061      	beq.n	82796 <Cl_alarms_scanforAlarms+0x1846>
   826d2:	4b0a      	ldr	r3, [pc, #40]	; (826fc <Cl_alarms_scanforAlarms+0x17ac>)
   826d4:	4798      	blx	r3
					break;
   826d6:	e05e      	b.n	82796 <Cl_alarms_scanforAlarms+0x1846>
   826d8:	20071c0c 	.word	0x20071c0c
   826dc:	200716d9 	.word	0x200716d9
   826e0:	20072044 	.word	0x20072044
   826e4:	000a7f01 	.word	0x000a7f01
   826e8:	200716fc 	.word	0x200716fc
   826ec:	000a82e5 	.word	0x000a82e5
   826f0:	20072214 	.word	0x20072214
   826f4:	20072040 	.word	0x20072040
   826f8:	00082919 	.word	0x00082919
   826fc:	00088aa9 	.word	0x00088aa9
   82700:	000a8321 	.word	0x000a8321
   82704:	200716d8 	.word	0x200716d8
   82708:	00082d9d 	.word	0x00082d9d
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   8270c:	4b75      	ldr	r3, [pc, #468]	; (828e4 <Cl_alarms_scanforAlarms+0x1994>)
   8270e:	781b      	ldrb	r3, [r3, #0]
   82710:	4a75      	ldr	r2, [pc, #468]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82712:	011b      	lsls	r3, r3, #4
   82714:	4413      	add	r3, r2
   82716:	3302      	adds	r3, #2
   82718:	2201      	movs	r2, #1
   8271a:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   8271c:	4b72      	ldr	r3, [pc, #456]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   8271e:	2204      	movs	r2, #4
   82720:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82724:	4b70      	ldr	r3, [pc, #448]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82726:	2204      	movs	r2, #4
   82728:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   8272c:	4b6f      	ldr	r3, [pc, #444]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   8272e:	781b      	ldrb	r3, [r3, #0]
   82730:	4618      	mov	r0, r3
   82732:	4b6c      	ldr	r3, [pc, #432]	; (828e4 <Cl_alarms_scanforAlarms+0x1994>)
   82734:	781b      	ldrb	r3, [r3, #0]
   82736:	b299      	uxth	r1, r3
   82738:	4a6c      	ldr	r2, [pc, #432]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   8273a:	1c43      	adds	r3, r0, #1
   8273c:	00db      	lsls	r3, r3, #3
   8273e:	4413      	add	r3, r2
   82740:	460a      	mov	r2, r1
   82742:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82744:	4b67      	ldr	r3, [pc, #412]	; (828e4 <Cl_alarms_scanforAlarms+0x1994>)
   82746:	781b      	ldrb	r3, [r3, #0]
   82748:	4967      	ldr	r1, [pc, #412]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   8274a:	011a      	lsls	r2, r3, #4
   8274c:	440a      	add	r2, r1
   8274e:	320d      	adds	r2, #13
   82750:	7812      	ldrb	r2, [r2, #0]
   82752:	3201      	adds	r2, #1
   82754:	b2d1      	uxtb	r1, r2
   82756:	4a64      	ldr	r2, [pc, #400]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82758:	011b      	lsls	r3, r3, #4
   8275a:	4413      	add	r3, r2
   8275c:	330d      	adds	r3, #13
   8275e:	460a      	mov	r2, r1
   82760:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82762:	4b63      	ldr	r3, [pc, #396]	; (828f0 <Cl_alarms_scanforAlarms+0x19a0>)
   82764:	2201      	movs	r2, #1
   82766:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82768:	4b5e      	ldr	r3, [pc, #376]	; (828e4 <Cl_alarms_scanforAlarms+0x1994>)
   8276a:	781a      	ldrb	r2, [r3, #0]
   8276c:	4b61      	ldr	r3, [pc, #388]	; (828f4 <Cl_alarms_scanforAlarms+0x19a4>)
   8276e:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82770:	4b5e      	ldr	r3, [pc, #376]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   82772:	781b      	ldrb	r3, [r3, #0]
   82774:	461a      	mov	r2, r3
   82776:	4b5d      	ldr	r3, [pc, #372]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   82778:	4413      	add	r3, r2
   8277a:	222e      	movs	r2, #46	; 0x2e
   8277c:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8277e:	4b5e      	ldr	r3, [pc, #376]	; (828f8 <Cl_alarms_scanforAlarms+0x19a8>)
   82780:	4798      	blx	r3
   82782:	4603      	mov	r3, r0
   82784:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82786:	79fb      	ldrb	r3, [r7, #7]
   82788:	2b00      	cmp	r3, #0
   8278a:	d006      	beq.n	8279a <Cl_alarms_scanforAlarms+0x184a>
   8278c:	4b5b      	ldr	r3, [pc, #364]	; (828fc <Cl_alarms_scanforAlarms+0x19ac>)
   8278e:	4798      	blx	r3

					break;
   82790:	e003      	b.n	8279a <Cl_alarms_scanforAlarms+0x184a>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82792:	bf00      	nop
   82794:	e002      	b.n	8279c <Cl_alarms_scanforAlarms+0x184c>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82796:	bf00      	nop
   82798:	e000      	b.n	8279c <Cl_alarms_scanforAlarms+0x184c>
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);

					break;
   8279a:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   8279c:	4b58      	ldr	r3, [pc, #352]	; (82900 <Cl_alarms_scanforAlarms+0x19b0>)
   8279e:	781b      	ldrb	r3, [r3, #0]
   827a0:	2b00      	cmp	r3, #0
   827a2:	f000 8099 	beq.w	828d8 <Cl_alarms_scanforAlarms+0x1988>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   827a6:	4b50      	ldr	r3, [pc, #320]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   827a8:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   827ac:	2b00      	cmp	r3, #0
   827ae:	d10a      	bne.n	827c6 <Cl_alarms_scanforAlarms+0x1876>
   827b0:	4b4d      	ldr	r3, [pc, #308]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   827b2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   827b6:	2b00      	cmp	r3, #0
   827b8:	d105      	bne.n	827c6 <Cl_alarms_scanforAlarms+0x1876>
   827ba:	4b4b      	ldr	r3, [pc, #300]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   827bc:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   827c0:	2b00      	cmp	r3, #0
   827c2:	f000 8089 	beq.w	828d8 <Cl_alarms_scanforAlarms+0x1988>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   827c6:	4b4f      	ldr	r3, [pc, #316]	; (82904 <Cl_alarms_scanforAlarms+0x19b4>)
   827c8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   827cc:	461a      	mov	r2, r3
   827ce:	4b4e      	ldr	r3, [pc, #312]	; (82908 <Cl_alarms_scanforAlarms+0x19b8>)
   827d0:	681b      	ldr	r3, [r3, #0]
   827d2:	429a      	cmp	r2, r3
   827d4:	d00c      	beq.n	827f0 <Cl_alarms_scanforAlarms+0x18a0>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   827d6:	4b4d      	ldr	r3, [pc, #308]	; (8290c <Cl_alarms_scanforAlarms+0x19bc>)
   827d8:	2200      	movs	r2, #0
   827da:	601a      	str	r2, [r3, #0]
			 flow_count++;
   827dc:	4b4c      	ldr	r3, [pc, #304]	; (82910 <Cl_alarms_scanforAlarms+0x19c0>)
   827de:	681b      	ldr	r3, [r3, #0]
   827e0:	3301      	adds	r3, #1
   827e2:	4a4b      	ldr	r2, [pc, #300]	; (82910 <Cl_alarms_scanforAlarms+0x19c0>)
   827e4:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   827e6:	4b4b      	ldr	r3, [pc, #300]	; (82914 <Cl_alarms_scanforAlarms+0x19c4>)
   827e8:	681b      	ldr	r3, [r3, #0]
   827ea:	3301      	adds	r3, #1
   827ec:	4a49      	ldr	r2, [pc, #292]	; (82914 <Cl_alarms_scanforAlarms+0x19c4>)
   827ee:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static Cl_Uint32Type flowstatus_off_alarm_count = 0;static Cl_Uint32Type flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   827f0:	4b46      	ldr	r3, [pc, #280]	; (8290c <Cl_alarms_scanforAlarms+0x19bc>)
   827f2:	681b      	ldr	r3, [r3, #0]
   827f4:	2b28      	cmp	r3, #40	; 0x28
   827f6:	d932      	bls.n	8285e <Cl_alarms_scanforAlarms+0x190e>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   827f8:	4b3b      	ldr	r3, [pc, #236]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   827fa:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   827fe:	2b01      	cmp	r3, #1
   82800:	d02d      	beq.n	8285e <Cl_alarms_scanforAlarms+0x190e>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   82802:	4b39      	ldr	r3, [pc, #228]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82804:	2201      	movs	r2, #1
   82806:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   8280a:	4b38      	ldr	r3, [pc, #224]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   8280c:	781b      	ldrb	r3, [r3, #0]
   8280e:	4a37      	ldr	r2, [pc, #220]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   82810:	3301      	adds	r3, #1
   82812:	00db      	lsls	r3, r3, #3
   82814:	4413      	add	r3, r2
   82816:	220c      	movs	r2, #12
   82818:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   8281a:	4b33      	ldr	r3, [pc, #204]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   8281c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   82820:	3301      	adds	r3, #1
   82822:	b2da      	uxtb	r2, r3
   82824:	4b30      	ldr	r3, [pc, #192]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82826:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   8282a:	4b2f      	ldr	r3, [pc, #188]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   8282c:	2204      	movs	r2, #4
   8282e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				
					cl_alarm_triggered = true;
   82832:	4b2f      	ldr	r3, [pc, #188]	; (828f0 <Cl_alarms_scanforAlarms+0x19a0>)
   82834:	2201      	movs	r2, #1
   82836:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   82838:	4b2e      	ldr	r3, [pc, #184]	; (828f4 <Cl_alarms_scanforAlarms+0x19a4>)
   8283a:	220c      	movs	r2, #12
   8283c:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   8283e:	4b2b      	ldr	r3, [pc, #172]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   82840:	781b      	ldrb	r3, [r3, #0]
   82842:	461a      	mov	r2, r3
   82844:	4b29      	ldr	r3, [pc, #164]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   82846:	4413      	add	r3, r2
   82848:	222d      	movs	r2, #45	; 0x2d
   8284a:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8284c:	4b2a      	ldr	r3, [pc, #168]	; (828f8 <Cl_alarms_scanforAlarms+0x19a8>)
   8284e:	4798      	blx	r3
   82850:	4603      	mov	r3, r0
   82852:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82854:	79fb      	ldrb	r3, [r7, #7]
   82856:	2b00      	cmp	r3, #0
   82858:	d001      	beq.n	8285e <Cl_alarms_scanforAlarms+0x190e>
   8285a:	4b28      	ldr	r3, [pc, #160]	; (828fc <Cl_alarms_scanforAlarms+0x19ac>)
   8285c:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   8285e:	4b2c      	ldr	r3, [pc, #176]	; (82910 <Cl_alarms_scanforAlarms+0x19c0>)
   82860:	681b      	ldr	r3, [r3, #0]
   82862:	2b02      	cmp	r3, #2
   82864:	d932      	bls.n	828cc <Cl_alarms_scanforAlarms+0x197c>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   82866:	4b20      	ldr	r3, [pc, #128]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82868:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   8286c:	2b01      	cmp	r3, #1
   8286e:	d02d      	beq.n	828cc <Cl_alarms_scanforAlarms+0x197c>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   82870:	4b1d      	ldr	r3, [pc, #116]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82872:	2201      	movs	r2, #1
   82874:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   82878:	4b1c      	ldr	r3, [pc, #112]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   8287a:	781b      	ldrb	r3, [r3, #0]
   8287c:	4a1b      	ldr	r2, [pc, #108]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   8287e:	3301      	adds	r3, #1
   82880:	00db      	lsls	r3, r3, #3
   82882:	4413      	add	r3, r2
   82884:	220e      	movs	r2, #14
   82886:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   82888:	4b17      	ldr	r3, [pc, #92]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   8288a:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   8288e:	3301      	adds	r3, #1
   82890:	b2da      	uxtb	r2, r3
   82892:	4b15      	ldr	r3, [pc, #84]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   82894:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   82898:	4b13      	ldr	r3, [pc, #76]	; (828e8 <Cl_alarms_scanforAlarms+0x1998>)
   8289a:	2204      	movs	r2, #4
   8289c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					
					cl_alarm_triggered = true;
   828a0:	4b13      	ldr	r3, [pc, #76]	; (828f0 <Cl_alarms_scanforAlarms+0x19a0>)
   828a2:	2201      	movs	r2, #1
   828a4:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   828a6:	4b13      	ldr	r3, [pc, #76]	; (828f4 <Cl_alarms_scanforAlarms+0x19a4>)
   828a8:	220e      	movs	r2, #14
   828aa:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   828ac:	4b0f      	ldr	r3, [pc, #60]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   828ae:	781b      	ldrb	r3, [r3, #0]
   828b0:	461a      	mov	r2, r3
   828b2:	4b0e      	ldr	r3, [pc, #56]	; (828ec <Cl_alarms_scanforAlarms+0x199c>)
   828b4:	4413      	add	r3, r2
   828b6:	222d      	movs	r2, #45	; 0x2d
   828b8:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   828ba:	4b0f      	ldr	r3, [pc, #60]	; (828f8 <Cl_alarms_scanforAlarms+0x19a8>)
   828bc:	4798      	blx	r3
   828be:	4603      	mov	r3, r0
   828c0:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   828c2:	79fb      	ldrb	r3, [r7, #7]
   828c4:	2b00      	cmp	r3, #0
   828c6:	d001      	beq.n	828cc <Cl_alarms_scanforAlarms+0x197c>
   828c8:	4b0c      	ldr	r3, [pc, #48]	; (828fc <Cl_alarms_scanforAlarms+0x19ac>)
   828ca:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   828cc:	4b0d      	ldr	r3, [pc, #52]	; (82904 <Cl_alarms_scanforAlarms+0x19b4>)
   828ce:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   828d2:	461a      	mov	r2, r3
   828d4:	4b0c      	ldr	r3, [pc, #48]	; (82908 <Cl_alarms_scanforAlarms+0x19b8>)
   828d6:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   828d8:	2300      	movs	r3, #0
}
   828da:	4618      	mov	r0, r3
   828dc:	3708      	adds	r7, #8
   828de:	46bd      	mov	sp, r7
   828e0:	bd80      	pop	{r7, pc}
   828e2:	bf00      	nop
   828e4:	200716d8 	.word	0x200716d8
   828e8:	20071c0c 	.word	0x20071c0c
   828ec:	20072214 	.word	0x20072214
   828f0:	200716d9 	.word	0x200716d9
   828f4:	20072040 	.word	0x20072040
   828f8:	00082919 	.word	0x00082919
   828fc:	00088aa9 	.word	0x00088aa9
   82900:	20071941 	.word	0x20071941
   82904:	2007216c 	.word	0x2007216c
   82908:	200716c8 	.word	0x200716c8
   8290c:	200716cc 	.word	0x200716cc
   82910:	200716d0 	.word	0x200716d0
   82914:	200716d4 	.word	0x200716d4

00082918 <Cl_UpdateMacAlarmEventTable>:
 * \return CL_OK on success. 
 * \Globals used : Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_UpdateMacAlarmEventTable(void)
{
   82918:	b480      	push	{r7}
   8291a:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueue4.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   8291c:	4b0a      	ldr	r3, [pc, #40]	; (82948 <Cl_UpdateMacAlarmEventTable+0x30>)
   8291e:	781b      	ldrb	r3, [r3, #0]
   82920:	2b00      	cmp	r3, #0
   82922:	d00c      	beq.n	8293e <Cl_UpdateMacAlarmEventTable+0x26>
   82924:	4b09      	ldr	r3, [pc, #36]	; (8294c <Cl_UpdateMacAlarmEventTable+0x34>)
   82926:	781b      	ldrb	r3, [r3, #0]
   82928:	2b09      	cmp	r3, #9
   8292a:	d808      	bhi.n	8293e <Cl_UpdateMacAlarmEventTable+0x26>


	{
		Cl_MacEventQueue4.Cl_MacNewEvent = true;
   8292c:	4b07      	ldr	r3, [pc, #28]	; (8294c <Cl_UpdateMacAlarmEventTable+0x34>)
   8292e:	2201      	movs	r2, #1
   82930:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount++;
   82932:	4b06      	ldr	r3, [pc, #24]	; (8294c <Cl_UpdateMacAlarmEventTable+0x34>)
   82934:	781b      	ldrb	r3, [r3, #0]
   82936:	3301      	adds	r3, #1
   82938:	b2da      	uxtb	r2, r3
   8293a:	4b04      	ldr	r3, [pc, #16]	; (8294c <Cl_UpdateMacAlarmEventTable+0x34>)
   8293c:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   8293e:	2300      	movs	r3, #0
}
   82940:	4618      	mov	r0, r3
   82942:	46bd      	mov	sp, r7
   82944:	bc80      	pop	{r7}
   82946:	4770      	bx	lr
   82948:	200716d9 	.word	0x200716d9
   8294c:	20072214 	.word	0x20072214

00082950 <Cl_UpdateMacBCEventTable>:


Cl_ReturnCodeType Cl_UpdateMacBCEventTable(void)
{
   82950:	b480      	push	{r7}
   82952:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueueBc.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   82954:	4b0a      	ldr	r3, [pc, #40]	; (82980 <Cl_UpdateMacBCEventTable+0x30>)
   82956:	781b      	ldrb	r3, [r3, #0]
   82958:	2b00      	cmp	r3, #0
   8295a:	d00c      	beq.n	82976 <Cl_UpdateMacBCEventTable+0x26>
   8295c:	4b09      	ldr	r3, [pc, #36]	; (82984 <Cl_UpdateMacBCEventTable+0x34>)
   8295e:	781b      	ldrb	r3, [r3, #0]
   82960:	2b09      	cmp	r3, #9
   82962:	d808      	bhi.n	82976 <Cl_UpdateMacBCEventTable+0x26>


	{
		Cl_MacEventQueueBc.Cl_MacNewEvent = true;
   82964:	4b07      	ldr	r3, [pc, #28]	; (82984 <Cl_UpdateMacBCEventTable+0x34>)
   82966:	2201      	movs	r2, #1
   82968:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount++;
   8296a:	4b06      	ldr	r3, [pc, #24]	; (82984 <Cl_UpdateMacBCEventTable+0x34>)
   8296c:	781b      	ldrb	r3, [r3, #0]
   8296e:	3301      	adds	r3, #1
   82970:	b2da      	uxtb	r2, r3
   82972:	4b04      	ldr	r3, [pc, #16]	; (82984 <Cl_UpdateMacBCEventTable+0x34>)
   82974:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   82976:	2300      	movs	r3, #0
}
   82978:	4618      	mov	r0, r3
   8297a:	46bd      	mov	sp, r7
   8297c:	bc80      	pop	{r7}
   8297e:	4770      	bx	lr
   82980:	200716d9 	.word	0x200716d9
   82984:	2007244c 	.word	0x2007244c

00082988 <Cl_AlarmConfigureAlarmType>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,float cl_upper,float  cl_lower,Cl_Uint8Type  count_threshold )
{
   82988:	b480      	push	{r7}
   8298a:	b085      	sub	sp, #20
   8298c:	af00      	add	r7, sp, #0
   8298e:	60ba      	str	r2, [r7, #8]
   82990:	607b      	str	r3, [r7, #4]
   82992:	4603      	mov	r3, r0
   82994:	73fb      	strb	r3, [r7, #15]
   82996:	460b      	mov	r3, r1
   82998:	73bb      	strb	r3, [r7, #14]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   8299a:	7bfb      	ldrb	r3, [r7, #15]
   8299c:	4a10      	ldr	r2, [pc, #64]	; (829e0 <Cl_AlarmConfigureAlarmType+0x58>)
   8299e:	011b      	lsls	r3, r3, #4
   829a0:	4413      	add	r3, r2
   829a2:	3301      	adds	r3, #1
   829a4:	7bba      	ldrb	r2, [r7, #14]
   829a6:	701a      	strb	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   829a8:	7bfb      	ldrb	r3, [r7, #15]
   829aa:	4a0d      	ldr	r2, [pc, #52]	; (829e0 <Cl_AlarmConfigureAlarmType+0x58>)
   829ac:	011b      	lsls	r3, r3, #4
   829ae:	4413      	add	r3, r2
   829b0:	3308      	adds	r3, #8
   829b2:	687a      	ldr	r2, [r7, #4]
   829b4:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   829b6:	7bfb      	ldrb	r3, [r7, #15]
   829b8:	4a09      	ldr	r2, [pc, #36]	; (829e0 <Cl_AlarmConfigureAlarmType+0x58>)
   829ba:	011b      	lsls	r3, r3, #4
   829bc:	4413      	add	r3, r2
   829be:	3304      	adds	r3, #4
   829c0:	68ba      	ldr	r2, [r7, #8]
   829c2:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;
   829c4:	7bfb      	ldrb	r3, [r7, #15]
   829c6:	4a06      	ldr	r2, [pc, #24]	; (829e0 <Cl_AlarmConfigureAlarmType+0x58>)
   829c8:	011b      	lsls	r3, r3, #4
   829ca:	4413      	add	r3, r2
   829cc:	330c      	adds	r3, #12
   829ce:	7e3a      	ldrb	r2, [r7, #24]
   829d0:	701a      	strb	r2, [r3, #0]

return CL_OK;
   829d2:	2300      	movs	r3, #0
		
}
   829d4:	4618      	mov	r0, r3
   829d6:	3714      	adds	r7, #20
   829d8:	46bd      	mov	sp, r7
   829da:	bc80      	pop	{r7}
   829dc:	4770      	bx	lr
   829de:	bf00      	nop
   829e0:	20071c0c 	.word	0x20071c0c

000829e4 <Cl_AlarmActivateAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType status )
{
   829e4:	b580      	push	{r7, lr}
   829e6:	b084      	sub	sp, #16
   829e8:	af00      	add	r7, sp, #0
   829ea:	4603      	mov	r3, r0
   829ec:	460a      	mov	r2, r1
   829ee:	71fb      	strb	r3, [r7, #7]
   829f0:	4613      	mov	r3, r2
   829f2:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   829f4:	2300      	movs	r3, #0
   829f6:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   829f8:	79fb      	ldrb	r3, [r7, #7]
   829fa:	2b00      	cmp	r3, #0
   829fc:	d059      	beq.n	82ab2 <Cl_AlarmActivateAlarms+0xce>
   829fe:	79fb      	ldrb	r3, [r7, #7]
   82a00:	2b42      	cmp	r3, #66	; 0x42
   82a02:	d856      	bhi.n	82ab2 <Cl_AlarmActivateAlarms+0xce>
	{

	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) || (cl_alarm_id == FPCURRENTSTATUS))
   82a04:	79fb      	ldrb	r3, [r7, #7]
   82a06:	2b3d      	cmp	r3, #61	; 0x3d
   82a08:	d005      	beq.n	82a16 <Cl_AlarmActivateAlarms+0x32>
   82a0a:	79fb      	ldrb	r3, [r7, #7]
   82a0c:	2b3e      	cmp	r3, #62	; 0x3e
   82a0e:	d002      	beq.n	82a16 <Cl_AlarmActivateAlarms+0x32>
   82a10:	79fb      	ldrb	r3, [r7, #7]
   82a12:	2b3c      	cmp	r3, #60	; 0x3c
   82a14:	d114      	bne.n	82a40 <Cl_AlarmActivateAlarms+0x5c>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82a16:	79fb      	ldrb	r3, [r7, #7]
   82a18:	4a2c      	ldr	r2, [pc, #176]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a1a:	011b      	lsls	r3, r3, #4
   82a1c:	4413      	add	r3, r2
   82a1e:	330e      	adds	r3, #14
   82a20:	2201      	movs	r2, #1
   82a22:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82a24:	79fb      	ldrb	r3, [r7, #7]
   82a26:	4a29      	ldr	r2, [pc, #164]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a28:	011b      	lsls	r3, r3, #4
   82a2a:	4413      	add	r3, r2
   82a2c:	3302      	adds	r3, #2
   82a2e:	2202      	movs	r2, #2
   82a30:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82a32:	79fb      	ldrb	r3, [r7, #7]
   82a34:	4a25      	ldr	r2, [pc, #148]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a36:	011b      	lsls	r3, r3, #4
   82a38:	4413      	add	r3, r2
   82a3a:	330d      	adds	r3, #13
   82a3c:	2200      	movs	r2, #0
   82a3e:	701a      	strb	r2, [r3, #0]
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82a40:	4b23      	ldr	r3, [pc, #140]	; (82ad0 <Cl_AlarmActivateAlarms+0xec>)
   82a42:	781b      	ldrb	r3, [r3, #0]
   82a44:	2b00      	cmp	r3, #0
   82a46:	d036      	beq.n	82ab6 <Cl_AlarmActivateAlarms+0xd2>
		{
			Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   82a48:	79fb      	ldrb	r3, [r7, #7]
   82a4a:	4a20      	ldr	r2, [pc, #128]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a4c:	011b      	lsls	r3, r3, #4
   82a4e:	4413      	add	r3, r2
   82a50:	79fa      	ldrb	r2, [r7, #7]
   82a52:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82a54:	79bb      	ldrb	r3, [r7, #6]
   82a56:	2b00      	cmp	r3, #0
   82a58:	d015      	beq.n	82a86 <Cl_AlarmActivateAlarms+0xa2>
			{
				
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82a5a:	79fb      	ldrb	r3, [r7, #7]
   82a5c:	4a1b      	ldr	r2, [pc, #108]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a5e:	011b      	lsls	r3, r3, #4
   82a60:	4413      	add	r3, r2
   82a62:	330e      	adds	r3, #14
   82a64:	2201      	movs	r2, #1
   82a66:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82a68:	79fb      	ldrb	r3, [r7, #7]
   82a6a:	4a18      	ldr	r2, [pc, #96]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a6c:	011b      	lsls	r3, r3, #4
   82a6e:	4413      	add	r3, r2
   82a70:	3302      	adds	r3, #2
   82a72:	2202      	movs	r2, #2
   82a74:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82a76:	79fb      	ldrb	r3, [r7, #7]
   82a78:	4a14      	ldr	r2, [pc, #80]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a7a:	011b      	lsls	r3, r3, #4
   82a7c:	4413      	add	r3, r2
   82a7e:	330d      	adds	r3, #13
   82a80:	2200      	movs	r2, #0
   82a82:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82a84:	e017      	b.n	82ab6 <Cl_AlarmActivateAlarms+0xd2>
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82a86:	79fb      	ldrb	r3, [r7, #7]
   82a88:	4a10      	ldr	r2, [pc, #64]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a8a:	011b      	lsls	r3, r3, #4
   82a8c:	4413      	add	r3, r2
   82a8e:	330e      	adds	r3, #14
   82a90:	2200      	movs	r2, #0
   82a92:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82a94:	79fb      	ldrb	r3, [r7, #7]
   82a96:	4a0d      	ldr	r2, [pc, #52]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82a98:	011b      	lsls	r3, r3, #4
   82a9a:	4413      	add	r3, r2
   82a9c:	3302      	adds	r3, #2
   82a9e:	2204      	movs	r2, #4
   82aa0:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82aa2:	79fb      	ldrb	r3, [r7, #7]
   82aa4:	4a09      	ldr	r2, [pc, #36]	; (82acc <Cl_AlarmActivateAlarms+0xe8>)
   82aa6:	011b      	lsls	r3, r3, #4
   82aa8:	4413      	add	r3, r2
   82aaa:	330d      	adds	r3, #13
   82aac:	2200      	movs	r2, #0
   82aae:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82ab0:	e001      	b.n	82ab6 <Cl_AlarmActivateAlarms+0xd2>
		}
		
	}
	else
	{
		cl_AlarmRetCode = CL_ERROR;
   82ab2:	2304      	movs	r3, #4
   82ab4:	73fb      	strb	r3, [r7, #15]
	}
	
	

	ASSERT_ERROR(cl_AlarmRetCode);
   82ab6:	7bfb      	ldrb	r3, [r7, #15]
   82ab8:	2b00      	cmp	r3, #0
   82aba:	d001      	beq.n	82ac0 <Cl_AlarmActivateAlarms+0xdc>
   82abc:	4b05      	ldr	r3, [pc, #20]	; (82ad4 <Cl_AlarmActivateAlarms+0xf0>)
   82abe:	4798      	blx	r3
	
	return(cl_AlarmRetCode);
   82ac0:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82ac2:	4618      	mov	r0, r3
   82ac4:	3710      	adds	r7, #16
   82ac6:	46bd      	mov	sp, r7
   82ac8:	bd80      	pop	{r7, pc}
   82aca:	bf00      	nop
   82acc:	20071c0c 	.word	0x20071c0c
   82ad0:	200709b8 	.word	0x200709b8
   82ad4:	00088aa9 	.word	0x00088aa9

00082ad8 <Cl_AlarmResetAlarm>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82ad8:	b480      	push	{r7}
   82ada:	b085      	sub	sp, #20
   82adc:	af00      	add	r7, sp, #0
   82ade:	4603      	mov	r3, r0
   82ae0:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82ae2:	2300      	movs	r3, #0
   82ae4:	73fb      	strb	r3, [r7, #15]
		if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82ae6:	79fb      	ldrb	r3, [r7, #7]
   82ae8:	2b00      	cmp	r3, #0
   82aea:	d00c      	beq.n	82b06 <Cl_AlarmResetAlarm+0x2e>
   82aec:	79fb      	ldrb	r3, [r7, #7]
   82aee:	2b42      	cmp	r3, #66	; 0x42
   82af0:	d809      	bhi.n	82b06 <Cl_AlarmResetAlarm+0x2e>
		{
					
					{
						
						Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82af2:	79fb      	ldrb	r3, [r7, #7]
   82af4:	4a08      	ldr	r2, [pc, #32]	; (82b18 <Cl_AlarmResetAlarm+0x40>)
   82af6:	011b      	lsls	r3, r3, #4
   82af8:	4413      	add	r3, r2
   82afa:	3302      	adds	r3, #2
   82afc:	2202      	movs	r2, #2
   82afe:	701a      	strb	r2, [r3, #0]
						cl_AlarmRetCode = CL_OK;
   82b00:	2300      	movs	r3, #0
   82b02:	73fb      	strb	r3, [r7, #15]
   82b04:	e001      	b.n	82b0a <Cl_AlarmResetAlarm+0x32>
					}
			
		}else
		{
			 cl_AlarmRetCode = CL_ERROR;
   82b06:	2304      	movs	r3, #4
   82b08:	73fb      	strb	r3, [r7, #15]
		}
	
		
	
	return(cl_AlarmRetCode);
   82b0a:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82b0c:	4618      	mov	r0, r3
   82b0e:	3714      	adds	r7, #20
   82b10:	46bd      	mov	sp, r7
   82b12:	bc80      	pop	{r7}
   82b14:	4770      	bx	lr
   82b16:	bf00      	nop
   82b18:	20071c0c 	.word	0x20071c0c

00082b1c <Cl_CheckBcEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
  
 Cl_ReturnCodeType Cl_CheckBcEvent(){
   82b1c:	b580      	push	{r7, lr}
   82b1e:	af00      	add	r7, sp, #0

	 
	 if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   82b20:	4b20      	ldr	r3, [pc, #128]	; (82ba4 <Cl_CheckBcEvent+0x88>)
   82b22:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   82b26:	2b00      	cmp	r3, #0
   82b28:	d039      	beq.n	82b9e <Cl_CheckBcEvent+0x82>
	 {			//FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		 if(cl_sys_statbuffer.FPcurrentstatus == 1 && FPcurrentstatus_prev == 0 )
   82b2a:	4b1f      	ldr	r3, [pc, #124]	; (82ba8 <Cl_CheckBcEvent+0x8c>)
   82b2c:	8b9b      	ldrh	r3, [r3, #28]
   82b2e:	2b01      	cmp	r3, #1
   82b30:	d128      	bne.n	82b84 <Cl_CheckBcEvent+0x68>
   82b32:	4b1e      	ldr	r3, [pc, #120]	; (82bac <Cl_CheckBcEvent+0x90>)
   82b34:	f9b3 3000 	ldrsh.w	r3, [r3]
   82b38:	2b00      	cmp	r3, #0
   82b3a:	d123      	bne.n	82b84 <Cl_CheckBcEvent+0x68>
		 {
			 
			 
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   82b3c:	4b19      	ldr	r3, [pc, #100]	; (82ba4 <Cl_CheckBcEvent+0x88>)
   82b3e:	2201      	movs	r2, #1
   82b40:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_MacEventQueueBc.Cl_MacEventData[Cl_MacEventQueueBc.Cl_MacNewEventcount][0]=FPCURRENTSTATUS;
   82b44:	4b1a      	ldr	r3, [pc, #104]	; (82bb0 <Cl_CheckBcEvent+0x94>)
   82b46:	781b      	ldrb	r3, [r3, #0]
   82b48:	4a19      	ldr	r2, [pc, #100]	; (82bb0 <Cl_CheckBcEvent+0x94>)
   82b4a:	3301      	adds	r3, #1
   82b4c:	00db      	lsls	r3, r3, #3
   82b4e:	4413      	add	r3, r2
   82b50:	223c      	movs	r2, #60	; 0x3c
   82b52:	809a      	strh	r2, [r3, #4]
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   82b54:	4b13      	ldr	r3, [pc, #76]	; (82ba4 <Cl_CheckBcEvent+0x88>)
   82b56:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   82b5a:	3301      	adds	r3, #1
   82b5c:	b2da      	uxtb	r2, r3
   82b5e:	4b11      	ldr	r3, [pc, #68]	; (82ba4 <Cl_CheckBcEvent+0x88>)
   82b60:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			 cl_alarm_triggered = true;
   82b64:	4b13      	ldr	r3, [pc, #76]	; (82bb4 <Cl_CheckBcEvent+0x98>)
   82b66:	2201      	movs	r2, #1
   82b68:	701a      	strb	r2, [r3, #0]
			 cl_lastalarmid = FPCURRENTSTATUS;
   82b6a:	4b13      	ldr	r3, [pc, #76]	; (82bb8 <Cl_CheckBcEvent+0x9c>)
   82b6c:	223c      	movs	r2, #60	; 0x3c
   82b6e:	701a      	strb	r2, [r3, #0]
			// Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			 //Cl_UpdateMacBCEventTable();
			// ASSERT_ERROR(Cl_alarms_retcode);
			 Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   82b70:	4b0f      	ldr	r3, [pc, #60]	; (82bb0 <Cl_CheckBcEvent+0x94>)
   82b72:	781b      	ldrb	r3, [r3, #0]
   82b74:	461a      	mov	r2, r3
   82b76:	4b0e      	ldr	r3, [pc, #56]	; (82bb0 <Cl_CheckBcEvent+0x94>)
   82b78:	4413      	add	r3, r2
   82b7a:	222f      	movs	r2, #47	; 0x2f
   82b7c:	709a      	strb	r2, [r3, #2]
			 Cl_UpdateMacBCEventTable();//Cl_UpdateMacAlarmEventTable();
   82b7e:	4b0f      	ldr	r3, [pc, #60]	; (82bbc <Cl_CheckBcEvent+0xa0>)
   82b80:	4798      	blx	r3
   82b82:	e007      	b.n	82b94 <Cl_CheckBcEvent+0x78>
			 
		 }
		 else
		 {

			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   82b84:	4b07      	ldr	r3, [pc, #28]	; (82ba4 <Cl_CheckBcEvent+0x88>)
   82b86:	2204      	movs	r2, #4
   82b88:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   82b8c:	4b05      	ldr	r3, [pc, #20]	; (82ba4 <Cl_CheckBcEvent+0x88>)
   82b8e:	2200      	movs	r2, #0
   82b90:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

			 
		 }
		 FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
   82b94:	4b04      	ldr	r3, [pc, #16]	; (82ba8 <Cl_CheckBcEvent+0x8c>)
   82b96:	8b9b      	ldrh	r3, [r3, #28]
   82b98:	b21a      	sxth	r2, r3
   82b9a:	4b04      	ldr	r3, [pc, #16]	; (82bac <Cl_CheckBcEvent+0x90>)
   82b9c:	801a      	strh	r2, [r3, #0]
		 
	 }
	 
 }
   82b9e:	bf00      	nop
   82ba0:	4618      	mov	r0, r3
   82ba2:	bd80      	pop	{r7, pc}
   82ba4:	20071c0c 	.word	0x20071c0c
   82ba8:	2007216c 	.word	0x2007216c
   82bac:	200716da 	.word	0x200716da
   82bb0:	2007244c 	.word	0x2007244c
   82bb4:	200716d9 	.word	0x200716d9
   82bb8:	20072040 	.word	0x20072040
   82bbc:	00082951 	.word	0x00082951

00082bc0 <Cl_Alarm_GetAlarmStatus>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
Cl_ReturnCodeType Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType* cl_status)
{
   82bc0:	b580      	push	{r7, lr}
   82bc2:	b084      	sub	sp, #16
   82bc4:	af00      	add	r7, sp, #0
   82bc6:	4603      	mov	r3, r0
   82bc8:	6039      	str	r1, [r7, #0]
   82bca:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   82bcc:	2300      	movs	r3, #0
   82bce:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82bd0:	79fb      	ldrb	r3, [r7, #7]
   82bd2:	2b00      	cmp	r3, #0
   82bd4:	d01c      	beq.n	82c10 <Cl_Alarm_GetAlarmStatus+0x50>
   82bd6:	79fb      	ldrb	r3, [r7, #7]
   82bd8:	2b42      	cmp	r3, #66	; 0x42
   82bda:	d819      	bhi.n	82c10 <Cl_Alarm_GetAlarmStatus+0x50>
	{
	
		 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   82bdc:	79fb      	ldrb	r3, [r7, #7]
   82bde:	4a12      	ldr	r2, [pc, #72]	; (82c28 <Cl_Alarm_GetAlarmStatus+0x68>)
   82be0:	011b      	lsls	r3, r3, #4
   82be2:	4413      	add	r3, r2
   82be4:	3302      	adds	r3, #2
   82be6:	781b      	ldrb	r3, [r3, #0]
   82be8:	2b01      	cmp	r3, #1
   82bea:	d007      	beq.n	82bfc <Cl_Alarm_GetAlarmStatus+0x3c>
   82bec:	79fb      	ldrb	r3, [r7, #7]
   82bee:	4a0e      	ldr	r2, [pc, #56]	; (82c28 <Cl_Alarm_GetAlarmStatus+0x68>)
   82bf0:	011b      	lsls	r3, r3, #4
   82bf2:	4413      	add	r3, r2
   82bf4:	3302      	adds	r3, #2
   82bf6:	781b      	ldrb	r3, [r3, #0]
   82bf8:	2b03      	cmp	r3, #3
   82bfa:	d103      	bne.n	82c04 <Cl_Alarm_GetAlarmStatus+0x44>
		 {
			 *cl_status = true;
   82bfc:	683b      	ldr	r3, [r7, #0]
   82bfe:	2201      	movs	r2, #1
   82c00:	701a      	strb	r2, [r3, #0]
   82c02:	e002      	b.n	82c0a <Cl_Alarm_GetAlarmStatus+0x4a>
		 }
		 else
		 {
			 *cl_status = false;
   82c04:	683b      	ldr	r3, [r7, #0]
   82c06:	2200      	movs	r2, #0
   82c08:	701a      	strb	r2, [r3, #0]
		 }
		 
		 cl_alarmRetCode = CL_OK;
   82c0a:	2300      	movs	r3, #0
   82c0c:	73fb      	strb	r3, [r7, #15]
   82c0e:	e001      	b.n	82c14 <Cl_Alarm_GetAlarmStatus+0x54>
	}else
	{
		cl_alarmRetCode = CL_ERROR;
   82c10:	2304      	movs	r3, #4
   82c12:	73fb      	strb	r3, [r7, #15]
	}
	 
		
	ASSERT_ERROR(cl_alarmRetCode);
   82c14:	7bfb      	ldrb	r3, [r7, #15]
   82c16:	2b00      	cmp	r3, #0
   82c18:	d001      	beq.n	82c1e <Cl_Alarm_GetAlarmStatus+0x5e>
   82c1a:	4b04      	ldr	r3, [pc, #16]	; (82c2c <Cl_Alarm_GetAlarmStatus+0x6c>)
   82c1c:	4798      	blx	r3
	return cl_alarmRetCode;
   82c1e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   82c20:	4618      	mov	r0, r3
   82c22:	3710      	adds	r7, #16
   82c24:	46bd      	mov	sp, r7
   82c26:	bd80      	pop	{r7, pc}
   82c28:	20071c0c 	.word	0x20071c0c
   82c2c:	00088aa9 	.word	0x00088aa9

00082c30 <Cl_Alarm_TriggerAlarm>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType cl_status)
{
   82c30:	b580      	push	{r7, lr}
   82c32:	b084      	sub	sp, #16
   82c34:	af00      	add	r7, sp, #0
   82c36:	4603      	mov	r3, r0
   82c38:	460a      	mov	r2, r1
   82c3a:	71fb      	strb	r3, [r7, #7]
   82c3c:	4613      	mov	r3, r2
   82c3e:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   82c40:	2300      	movs	r3, #0
   82c42:	73fb      	strb	r3, [r7, #15]
	
if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82c44:	79fb      	ldrb	r3, [r7, #7]
   82c46:	2b00      	cmp	r3, #0
   82c48:	d063      	beq.n	82d12 <Cl_Alarm_TriggerAlarm+0xe2>
   82c4a:	79fb      	ldrb	r3, [r7, #7]
   82c4c:	2b42      	cmp	r3, #66	; 0x42
   82c4e:	d860      	bhi.n	82d12 <Cl_Alarm_TriggerAlarm+0xe2>
{
			
			
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   82c50:	79fb      	ldrb	r3, [r7, #7]
   82c52:	4a36      	ldr	r2, [pc, #216]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82c54:	011b      	lsls	r3, r3, #4
   82c56:	4413      	add	r3, r2
   82c58:	330e      	adds	r3, #14
   82c5a:	781b      	ldrb	r3, [r3, #0]
   82c5c:	2b00      	cmp	r3, #0
   82c5e:	d055      	beq.n	82d0c <Cl_Alarm_TriggerAlarm+0xdc>
	{
			if(cl_status)
   82c60:	79bb      	ldrb	r3, [r7, #6]
   82c62:	2b00      	cmp	r3, #0
   82c64:	d039      	beq.n	82cda <Cl_Alarm_TriggerAlarm+0xaa>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   82c66:	79fb      	ldrb	r3, [r7, #7]
   82c68:	4a30      	ldr	r2, [pc, #192]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82c6a:	011b      	lsls	r3, r3, #4
   82c6c:	4413      	add	r3, r2
   82c6e:	3302      	adds	r3, #2
   82c70:	2201      	movs	r2, #1
   82c72:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=cl_alarm_id;
   82c74:	4b2e      	ldr	r3, [pc, #184]	; (82d30 <Cl_Alarm_TriggerAlarm+0x100>)
   82c76:	781b      	ldrb	r3, [r3, #0]
   82c78:	79fa      	ldrb	r2, [r7, #7]
   82c7a:	b291      	uxth	r1, r2
   82c7c:	4a2c      	ldr	r2, [pc, #176]	; (82d30 <Cl_Alarm_TriggerAlarm+0x100>)
   82c7e:	3301      	adds	r3, #1
   82c80:	00db      	lsls	r3, r3, #3
   82c82:	4413      	add	r3, r2
   82c84:	460a      	mov	r2, r1
   82c86:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   82c88:	79fb      	ldrb	r3, [r7, #7]
   82c8a:	4928      	ldr	r1, [pc, #160]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82c8c:	011a      	lsls	r2, r3, #4
   82c8e:	440a      	add	r2, r1
   82c90:	320d      	adds	r2, #13
   82c92:	7812      	ldrb	r2, [r2, #0]
   82c94:	3201      	adds	r2, #1
   82c96:	b2d1      	uxtb	r1, r2
   82c98:	4a24      	ldr	r2, [pc, #144]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82c9a:	011b      	lsls	r3, r3, #4
   82c9c:	4413      	add	r3, r2
   82c9e:	330d      	adds	r3, #13
   82ca0:	460a      	mov	r2, r1
   82ca2:	701a      	strb	r2, [r3, #0]
				cl_alarm_triggered = true;
   82ca4:	4b23      	ldr	r3, [pc, #140]	; (82d34 <Cl_Alarm_TriggerAlarm+0x104>)
   82ca6:	2201      	movs	r2, #1
   82ca8:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   82caa:	4a23      	ldr	r2, [pc, #140]	; (82d38 <Cl_Alarm_TriggerAlarm+0x108>)
   82cac:	79fb      	ldrb	r3, [r7, #7]
   82cae:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   82cb0:	79fb      	ldrb	r3, [r7, #7]
   82cb2:	2b3c      	cmp	r3, #60	; 0x3c
   82cb4:	d107      	bne.n	82cc6 <Cl_Alarm_TriggerAlarm+0x96>
				{
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82cb6:	4b1e      	ldr	r3, [pc, #120]	; (82d30 <Cl_Alarm_TriggerAlarm+0x100>)
   82cb8:	781b      	ldrb	r3, [r3, #0]
   82cba:	461a      	mov	r2, r3
   82cbc:	4b1c      	ldr	r3, [pc, #112]	; (82d30 <Cl_Alarm_TriggerAlarm+0x100>)
   82cbe:	4413      	add	r3, r2
   82cc0:	222d      	movs	r2, #45	; 0x2d
   82cc2:	709a      	strb	r2, [r3, #2]
   82cc4:	e006      	b.n	82cd4 <Cl_Alarm_TriggerAlarm+0xa4>
				}
				else
				{
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82cc6:	4b1a      	ldr	r3, [pc, #104]	; (82d30 <Cl_Alarm_TriggerAlarm+0x100>)
   82cc8:	781b      	ldrb	r3, [r3, #0]
   82cca:	461a      	mov	r2, r3
   82ccc:	4b18      	ldr	r3, [pc, #96]	; (82d30 <Cl_Alarm_TriggerAlarm+0x100>)
   82cce:	4413      	add	r3, r2
   82cd0:	222e      	movs	r2, #46	; 0x2e
   82cd2:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   82cd4:	4b19      	ldr	r3, [pc, #100]	; (82d3c <Cl_Alarm_TriggerAlarm+0x10c>)
   82cd6:	4798      	blx	r3
   82cd8:	e018      	b.n	82d0c <Cl_Alarm_TriggerAlarm+0xdc>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   82cda:	79fb      	ldrb	r3, [r7, #7]
   82cdc:	4a13      	ldr	r2, [pc, #76]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82cde:	011b      	lsls	r3, r3, #4
   82ce0:	4413      	add	r3, r2
   82ce2:	3302      	adds	r3, #2
   82ce4:	781b      	ldrb	r3, [r3, #0]
   82ce6:	2b01      	cmp	r3, #1
   82ce8:	d110      	bne.n	82d0c <Cl_Alarm_TriggerAlarm+0xdc>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82cea:	79fb      	ldrb	r3, [r7, #7]
   82cec:	4a0f      	ldr	r2, [pc, #60]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82cee:	011b      	lsls	r3, r3, #4
   82cf0:	4413      	add	r3, r2
   82cf2:	3302      	adds	r3, #2
   82cf4:	2204      	movs	r2, #4
   82cf6:	701a      	strb	r2, [r3, #0]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82cf8:	79fb      	ldrb	r3, [r7, #7]
   82cfa:	4a0c      	ldr	r2, [pc, #48]	; (82d2c <Cl_Alarm_TriggerAlarm+0xfc>)
   82cfc:	011b      	lsls	r3, r3, #4
   82cfe:	4413      	add	r3, r2
   82d00:	330d      	adds	r3, #13
   82d02:	2200      	movs	r2, #0
   82d04:	701a      	strb	r2, [r3, #0]
					cl_alarm_triggered = false;
   82d06:	4b0b      	ldr	r3, [pc, #44]	; (82d34 <Cl_Alarm_TriggerAlarm+0x104>)
   82d08:	2200      	movs	r2, #0
   82d0a:	701a      	strb	r2, [r3, #0]
				
				
			}
		
	}
	cl_alarmRetCode = CL_OK;
   82d0c:	2300      	movs	r3, #0
   82d0e:	73fb      	strb	r3, [r7, #15]
   82d10:	e001      	b.n	82d16 <Cl_Alarm_TriggerAlarm+0xe6>
}else
{
	cl_alarmRetCode = CL_ERROR;
   82d12:	2304      	movs	r3, #4
   82d14:	73fb      	strb	r3, [r7, #15]
}
ASSERT_ERROR(cl_alarmRetCode);
   82d16:	7bfb      	ldrb	r3, [r7, #15]
   82d18:	2b00      	cmp	r3, #0
   82d1a:	d001      	beq.n	82d20 <Cl_Alarm_TriggerAlarm+0xf0>
   82d1c:	4b08      	ldr	r3, [pc, #32]	; (82d40 <Cl_Alarm_TriggerAlarm+0x110>)
   82d1e:	4798      	blx	r3
return CL_OK;
   82d20:	2300      	movs	r3, #0

}
   82d22:	4618      	mov	r0, r3
   82d24:	3710      	adds	r7, #16
   82d26:	46bd      	mov	sp, r7
   82d28:	bd80      	pop	{r7, pc}
   82d2a:	bf00      	nop
   82d2c:	20071c0c 	.word	0x20071c0c
   82d30:	20072214 	.word	0x20072214
   82d34:	200716d9 	.word	0x200716d9
   82d38:	20072040 	.word	0x20072040
   82d3c:	00082919 	.word	0x00082919
   82d40:	00088aa9 	.word	0x00088aa9

00082d44 <Cl_Alarm_timmer_50millisec>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType Cl_Alarm_timmer_50millisec(void) // testing
{
   82d44:	b480      	push	{r7}
   82d46:	b083      	sub	sp, #12
   82d48:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_alarm_retcode = CL_OK;
   82d4a:	2300      	movs	r3, #0
   82d4c:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint16Type fiftymscount = 0;
	fiftymscount++;
   82d4e:	4b0f      	ldr	r3, [pc, #60]	; (82d8c <Cl_Alarm_timmer_50millisec+0x48>)
   82d50:	881b      	ldrh	r3, [r3, #0]
   82d52:	3301      	adds	r3, #1
   82d54:	b29a      	uxth	r2, r3
   82d56:	4b0d      	ldr	r3, [pc, #52]	; (82d8c <Cl_Alarm_timmer_50millisec+0x48>)
   82d58:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   82d5a:	4b0d      	ldr	r3, [pc, #52]	; (82d90 <Cl_Alarm_timmer_50millisec+0x4c>)
   82d5c:	2200      	movs	r2, #0
   82d5e:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   82d60:	4b0c      	ldr	r3, [pc, #48]	; (82d94 <Cl_Alarm_timmer_50millisec+0x50>)
   82d62:	681b      	ldr	r3, [r3, #0]
   82d64:	3301      	adds	r3, #1
   82d66:	4a0b      	ldr	r2, [pc, #44]	; (82d94 <Cl_Alarm_timmer_50millisec+0x50>)
   82d68:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   82d6a:	4b08      	ldr	r3, [pc, #32]	; (82d8c <Cl_Alarm_timmer_50millisec+0x48>)
   82d6c:	881b      	ldrh	r3, [r3, #0]
   82d6e:	2b14      	cmp	r3, #20
   82d70:	d905      	bls.n	82d7e <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   82d72:	4b09      	ldr	r3, [pc, #36]	; (82d98 <Cl_Alarm_timmer_50millisec+0x54>)
   82d74:	2200      	movs	r2, #0
   82d76:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   82d78:	4b04      	ldr	r3, [pc, #16]	; (82d8c <Cl_Alarm_timmer_50millisec+0x48>)
   82d7a:	2200      	movs	r2, #0
   82d7c:	801a      	strh	r2, [r3, #0]
	}
	
	return CL_OK;
   82d7e:	2300      	movs	r3, #0
	
}
   82d80:	4618      	mov	r0, r3
   82d82:	370c      	adds	r7, #12
   82d84:	46bd      	mov	sp, r7
   82d86:	bc80      	pop	{r7}
   82d88:	4770      	bx	lr
   82d8a:	bf00      	nop
   82d8c:	20071704 	.word	0x20071704
   82d90:	200716d0 	.word	0x200716d0
   82d94:	200716cc 	.word	0x200716cc
   82d98:	200716d4 	.word	0x200716d4

00082d9c <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   82d9c:	b480      	push	{r7}
   82d9e:	b083      	sub	sp, #12
   82da0:	af00      	add	r7, sp, #0
   82da2:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   82da4:	4b3b      	ldr	r3, [pc, #236]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82da6:	881b      	ldrh	r3, [r3, #0]
   82da8:	461a      	mov	r2, r3
   82daa:	4613      	mov	r3, r2
   82dac:	00db      	lsls	r3, r3, #3
   82dae:	4413      	add	r3, r2
   82db0:	4a39      	ldr	r2, [pc, #228]	; (82e98 <cl_get_dac_conductivity_info+0xfc>)
   82db2:	8f12      	ldrh	r2, [r2, #56]	; 0x38
   82db4:	4413      	add	r3, r2
   82db6:	4a39      	ldr	r2, [pc, #228]	; (82e9c <cl_get_dac_conductivity_info+0x100>)
   82db8:	fb82 1203 	smull	r1, r2, r2, r3
   82dbc:	1092      	asrs	r2, r2, #2
   82dbe:	17db      	asrs	r3, r3, #31
   82dc0:	1ad3      	subs	r3, r2, r3
   82dc2:	b29a      	uxth	r2, r3
   82dc4:	4b33      	ldr	r3, [pc, #204]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82dc6:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   82dc8:	4b35      	ldr	r3, [pc, #212]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82dca:	781b      	ldrb	r3, [r3, #0]
   82dcc:	2b03      	cmp	r3, #3
   82dce:	d85b      	bhi.n	82e88 <cl_get_dac_conductivity_info+0xec>
   82dd0:	a201      	add	r2, pc, #4	; (adr r2, 82dd8 <cl_get_dac_conductivity_info+0x3c>)
   82dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82dd6:	bf00      	nop
   82dd8:	00082de9 	.word	0x00082de9
   82ddc:	00082e1f 	.word	0x00082e1f
   82de0:	00082de9 	.word	0x00082de9
   82de4:	00082e4b 	.word	0x00082e4b
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82de8:	4b2a      	ldr	r3, [pc, #168]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82dea:	881b      	ldrh	r3, [r3, #0]
   82dec:	2b32      	cmp	r3, #50	; 0x32
   82dee:	d90a      	bls.n	82e06 <cl_get_dac_conductivity_info+0x6a>
   82df0:	4b28      	ldr	r3, [pc, #160]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82df2:	881b      	ldrh	r3, [r3, #0]
   82df4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82df8:	d205      	bcs.n	82e06 <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   82dfa:	687b      	ldr	r3, [r7, #4]
   82dfc:	220a      	movs	r2, #10
   82dfe:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   82e00:	4b27      	ldr	r3, [pc, #156]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82e02:	2201      	movs	r2, #1
   82e04:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   82e06:	4b23      	ldr	r3, [pc, #140]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82e08:	881b      	ldrh	r3, [r3, #0]
   82e0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e0e:	d936      	bls.n	82e7e <cl_get_dac_conductivity_info+0xe2>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   82e10:	687b      	ldr	r3, [r7, #4]
   82e12:	220b      	movs	r2, #11
   82e14:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82e16:	4b22      	ldr	r3, [pc, #136]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82e18:	2203      	movs	r2, #3
   82e1a:	701a      	strb	r2, [r3, #0]
		}
		break;
   82e1c:	e02f      	b.n	82e7e <cl_get_dac_conductivity_info+0xe2>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   82e1e:	4b1d      	ldr	r3, [pc, #116]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82e20:	881b      	ldrh	r3, [r3, #0]
   82e22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e26:	d905      	bls.n	82e34 <cl_get_dac_conductivity_info+0x98>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   82e28:	687b      	ldr	r3, [r7, #4]
   82e2a:	220b      	movs	r2, #11
   82e2c:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   82e2e:	4b1c      	ldr	r3, [pc, #112]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82e30:	2203      	movs	r2, #3
   82e32:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   82e34:	4b17      	ldr	r3, [pc, #92]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82e36:	881b      	ldrh	r3, [r3, #0]
   82e38:	2b31      	cmp	r3, #49	; 0x31
   82e3a:	d822      	bhi.n	82e82 <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82e3c:	687b      	ldr	r3, [r7, #4]
   82e3e:	2209      	movs	r2, #9
   82e40:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   82e42:	4b17      	ldr	r3, [pc, #92]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82e44:	2202      	movs	r2, #2
   82e46:	701a      	strb	r2, [r3, #0]
				}
		break;
   82e48:	e01b      	b.n	82e82 <cl_get_dac_conductivity_info+0xe6>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   82e4a:	4b12      	ldr	r3, [pc, #72]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82e4c:	881b      	ldrh	r3, [r3, #0]
   82e4e:	2b32      	cmp	r3, #50	; 0x32
   82e50:	d90a      	bls.n	82e68 <cl_get_dac_conductivity_info+0xcc>
   82e52:	4b10      	ldr	r3, [pc, #64]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82e54:	881b      	ldrh	r3, [r3, #0]
   82e56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   82e5a:	d205      	bcs.n	82e68 <cl_get_dac_conductivity_info+0xcc>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   82e5c:	687b      	ldr	r3, [r7, #4]
   82e5e:	220a      	movs	r2, #10
   82e60:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   82e62:	4b0f      	ldr	r3, [pc, #60]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82e64:	2201      	movs	r2, #1
   82e66:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   82e68:	4b0a      	ldr	r3, [pc, #40]	; (82e94 <cl_get_dac_conductivity_info+0xf8>)
   82e6a:	881b      	ldrh	r3, [r3, #0]
   82e6c:	2b31      	cmp	r3, #49	; 0x31
   82e6e:	d80a      	bhi.n	82e86 <cl_get_dac_conductivity_info+0xea>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   82e70:	687b      	ldr	r3, [r7, #4]
   82e72:	2209      	movs	r2, #9
   82e74:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   82e76:	4b0a      	ldr	r3, [pc, #40]	; (82ea0 <cl_get_dac_conductivity_info+0x104>)
   82e78:	2202      	movs	r2, #2
   82e7a:	701a      	strb	r2, [r3, #0]
				}
		break;
   82e7c:	e003      	b.n	82e86 <cl_get_dac_conductivity_info+0xea>
		if(cl_ten_pt_dac_cond_avg > 2000)
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
		}
		break;
   82e7e:	bf00      	nop
   82e80:	e002      	b.n	82e88 <cl_get_dac_conductivity_info+0xec>
				if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
				}
		break;
   82e82:	bf00      	nop
   82e84:	e000      	b.n	82e88 <cl_get_dac_conductivity_info+0xec>
		if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
				}
		break;
   82e86:	bf00      	nop
	}
return CL_OK;
   82e88:	2300      	movs	r3, #0
}
   82e8a:	4618      	mov	r0, r3
   82e8c:	370c      	adds	r7, #12
   82e8e:	46bd      	mov	sp, r7
   82e90:	bc80      	pop	{r7}
   82e92:	4770      	bx	lr
   82e94:	20071706 	.word	0x20071706
   82e98:	2007216c 	.word	0x2007216c
   82e9c:	66666667 	.word	0x66666667
   82ea0:	20071708 	.word	0x20071708

00082ea4 <Cl_bc_controller>:
 */
 
 

Cl_ReturnCodeType  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   82ea4:	b580      	push	{r7, lr}
   82ea6:	b084      	sub	sp, #16
   82ea8:	af00      	add	r7, sp, #0
   82eaa:	4603      	mov	r3, r0
   82eac:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bc_returncode = CL_OK;
   82eae:	2300      	movs	r3, #0
   82eb0:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	static cl_Datastreamtype cl_tdata,cl_tdata_temp;
	
	switch(cl_bc_event)
   82eb2:	79fb      	ldrb	r3, [r7, #7]
   82eb4:	3b04      	subs	r3, #4
   82eb6:	2b0c      	cmp	r3, #12
   82eb8:	f200 80a8 	bhi.w	8300c <Cl_bc_controller+0x168>
   82ebc:	a201      	add	r2, pc, #4	; (adr r2, 82ec4 <Cl_bc_controller+0x20>)
   82ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82ec2:	bf00      	nop
   82ec4:	00082ef9 	.word	0x00082ef9
   82ec8:	00082f93 	.word	0x00082f93
   82ecc:	0008300d 	.word	0x0008300d
   82ed0:	0008300d 	.word	0x0008300d
   82ed4:	0008300d 	.word	0x0008300d
   82ed8:	0008300d 	.word	0x0008300d
   82edc:	0008300d 	.word	0x0008300d
   82ee0:	00082f63 	.word	0x00082f63
   82ee4:	0008300d 	.word	0x0008300d
   82ee8:	00082faf 	.word	0x00082faf
   82eec:	0008300d 	.word	0x0008300d
   82ef0:	00082ff3 	.word	0x00082ff3
   82ef4:	00082fbd 	.word	0x00082fbd
	{
		case	BC_EVENT_START:
		
		
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82ef8:	2007      	movs	r0, #7
   82efa:	4b99      	ldr	r3, [pc, #612]	; (83160 <Cl_bc_controller+0x2bc>)
   82efc:	4798      	blx	r3
   82efe:	4603      	mov	r3, r0
   82f00:	73fb      	strb	r3, [r7, #15]
				sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   82f02:	f240 414c 	movw	r1, #1100	; 0x44c
   82f06:	2002      	movs	r0, #2
   82f08:	4b96      	ldr	r3, [pc, #600]	; (83164 <Cl_bc_controller+0x2c0>)
   82f0a:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,900);
   82f0c:	f44f 7161 	mov.w	r1, #900	; 0x384
   82f10:	2001      	movs	r0, #1
   82f12:	4b94      	ldr	r3, [pc, #592]	; (83164 <Cl_bc_controller+0x2c0>)
   82f14:	4798      	blx	r3
				Cl_AlarmActivateAlarms(BC_ALARM,true);  // manav02 activated
   82f16:	2101      	movs	r1, #1
   82f18:	201a      	movs	r0, #26
   82f1a:	4b93      	ldr	r3, [pc, #588]	; (83168 <Cl_bc_controller+0x2c4>)
   82f1c:	4798      	blx	r3
			
				
				if(openfill_flag == 1){
   82f1e:	4b93      	ldr	r3, [pc, #588]	; (8316c <Cl_bc_controller+0x2c8>)
   82f20:	781b      	ldrb	r3, [r3, #0]
   82f22:	2b01      	cmp	r3, #1
   82f24:	d115      	bne.n	82f52 <Cl_bc_controller+0xae>
					
					cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN_DIS);
   82f26:	2015      	movs	r0, #21
   82f28:	4b8d      	ldr	r3, [pc, #564]	; (83160 <Cl_bc_controller+0x2bc>)
   82f2a:	4798      	blx	r3
   82f2c:	4603      	mov	r3, r0
   82f2e:	73fb      	strb	r3, [r7, #15]
					
					if(flag_hotcitric == 1){
   82f30:	4b8f      	ldr	r3, [pc, #572]	; (83170 <Cl_bc_controller+0x2cc>)
   82f32:	781b      	ldrb	r3, [r3, #0]
   82f34:	2b01      	cmp	r3, #1
   82f36:	d10c      	bne.n	82f52 <Cl_bc_controller+0xae>
					
					sv_cntrl_poweronheater();
   82f38:	4b8e      	ldr	r3, [pc, #568]	; (83174 <Cl_bc_controller+0x2d0>)
   82f3a:	4798      	blx	r3
					sv_cntrl_incheater(3500);
   82f3c:	f640 50ac 	movw	r0, #3500	; 0xdac
   82f40:	4b8d      	ldr	r3, [pc, #564]	; (83178 <Cl_bc_controller+0x2d4>)
   82f42:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_ON);
   82f44:	2001      	movs	r0, #1
   82f46:	4b8d      	ldr	r3, [pc, #564]	; (8317c <Cl_bc_controller+0x2d8>)
   82f48:	4798      	blx	r3
					Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 75);	
   82f4a:	498d      	ldr	r1, [pc, #564]	; (83180 <Cl_bc_controller+0x2dc>)
   82f4c:	2005      	movs	r0, #5
   82f4e:	4b8d      	ldr	r3, [pc, #564]	; (83184 <Cl_bc_controller+0x2e0>)
   82f50:	4798      	blx	r3
					}
					
				}
					bc_laststate = bc_state;
   82f52:	4b8d      	ldr	r3, [pc, #564]	; (83188 <Cl_bc_controller+0x2e4>)
   82f54:	781a      	ldrb	r2, [r3, #0]
   82f56:	4b8d      	ldr	r3, [pc, #564]	; (8318c <Cl_bc_controller+0x2e8>)
   82f58:	701a      	strb	r2, [r3, #0]
					bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   82f5a:	4b8b      	ldr	r3, [pc, #556]	; (83188 <Cl_bc_controller+0x2e4>)
   82f5c:	2202      	movs	r2, #2
   82f5e:	701a      	strb	r2, [r3, #0]
				
		
		break;
   82f60:	e054      	b.n	8300c <Cl_bc_controller+0x168>
		case BC_EVENT_RESUME:
		if(bc_state == CL_BC_STATE_IDLE)
   82f62:	4b89      	ldr	r3, [pc, #548]	; (83188 <Cl_bc_controller+0x2e4>)
   82f64:	781b      	ldrb	r3, [r3, #0]
   82f66:	2b00      	cmp	r3, #0
   82f68:	d14f      	bne.n	8300a <Cl_bc_controller+0x166>
				{
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   82f6a:	2007      	movs	r0, #7
   82f6c:	4b7c      	ldr	r3, [pc, #496]	; (83160 <Cl_bc_controller+0x2bc>)
   82f6e:	4798      	blx	r3
   82f70:	4603      	mov	r3, r0
   82f72:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   82f74:	4b85      	ldr	r3, [pc, #532]	; (8318c <Cl_bc_controller+0x2e8>)
   82f76:	781b      	ldrb	r3, [r3, #0]
   82f78:	461a      	mov	r2, r3
   82f7a:	4b85      	ldr	r3, [pc, #532]	; (83190 <Cl_bc_controller+0x2ec>)
   82f7c:	5c9b      	ldrb	r3, [r3, r2]
   82f7e:	4618      	mov	r0, r3
   82f80:	4b77      	ldr	r3, [pc, #476]	; (83160 <Cl_bc_controller+0x2bc>)
   82f82:	4798      	blx	r3
   82f84:	4603      	mov	r3, r0
   82f86:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
   82f88:	4b80      	ldr	r3, [pc, #512]	; (8318c <Cl_bc_controller+0x2e8>)
   82f8a:	781a      	ldrb	r2, [r3, #0]
   82f8c:	4b7e      	ldr	r3, [pc, #504]	; (83188 <Cl_bc_controller+0x2e4>)
   82f8e:	701a      	strb	r2, [r3, #0]
				}
		break;
   82f90:	e03b      	b.n	8300a <Cl_bc_controller+0x166>
		case	BC_EVENT_STOP:
		CSeventcount = 0;
   82f92:	4b80      	ldr	r3, [pc, #512]	; (83194 <Cl_bc_controller+0x2f0>)
   82f94:	2200      	movs	r2, #0
   82f96:	601a      	str	r2, [r3, #0]
				Cl_AlarmActivateAlarms(BC_ALARM,false);
   82f98:	2100      	movs	r1, #0
   82f9a:	201a      	movs	r0, #26
   82f9c:	4b72      	ldr	r3, [pc, #456]	; (83168 <Cl_bc_controller+0x2c4>)
   82f9e:	4798      	blx	r3
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   82fa0:	2011      	movs	r0, #17
   82fa2:	4b6f      	ldr	r3, [pc, #444]	; (83160 <Cl_bc_controller+0x2bc>)
   82fa4:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   82fa6:	4b78      	ldr	r3, [pc, #480]	; (83188 <Cl_bc_controller+0x2e4>)
   82fa8:	2200      	movs	r2, #0
   82faa:	701a      	strb	r2, [r3, #0]
			
		break;
   82fac:	e02e      	b.n	8300c <Cl_bc_controller+0x168>
		case BC_EVENT_STOP_RINSE:
				openfillcounter = 0;
   82fae:	4b7a      	ldr	r3, [pc, #488]	; (83198 <Cl_bc_controller+0x2f4>)
   82fb0:	2200      	movs	r2, #0
   82fb2:	801a      	strh	r2, [r3, #0]
				bc_state = CL_BC_STATE_IDLE;
   82fb4:	4b74      	ldr	r3, [pc, #464]	; (83188 <Cl_bc_controller+0x2e4>)
   82fb6:	2200      	movs	r2, #0
   82fb8:	701a      	strb	r2, [r3, #0]
		break;
   82fba:	e027      	b.n	8300c <Cl_bc_controller+0x168>
		break;
		case	BC_EVENT_RESET:
		break;
		case BC_EVENT_TEST_SWITCH:
		
		cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   82fbc:	2005      	movs	r0, #5
   82fbe:	4b68      	ldr	r3, [pc, #416]	; (83160 <Cl_bc_controller+0x2bc>)
   82fc0:	4798      	blx	r3
   82fc2:	4603      	mov	r3, r0
   82fc4:	73fb      	strb	r3, [r7, #15]
		sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   82fc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   82fca:	2002      	movs	r0, #2
   82fcc:	4b65      	ldr	r3, [pc, #404]	; (83164 <Cl_bc_controller+0x2c0>)
   82fce:	4798      	blx	r3
		sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   82fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   82fd4:	2001      	movs	r0, #1
   82fd6:	4b63      	ldr	r3, [pc, #396]	; (83164 <Cl_bc_controller+0x2c0>)
   82fd8:	4798      	blx	r3
		
		potvalue = (950 * 1024)/10000;                                 // 600
   82fda:	4b70      	ldr	r3, [pc, #448]	; (8319c <Cl_bc_controller+0x2f8>)
   82fdc:	2261      	movs	r2, #97	; 0x61
   82fde:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   82fe0:	4b6e      	ldr	r3, [pc, #440]	; (8319c <Cl_bc_controller+0x2f8>)
   82fe2:	881b      	ldrh	r3, [r3, #0]
   82fe4:	4618      	mov	r0, r3
   82fe6:	4b6e      	ldr	r3, [pc, #440]	; (831a0 <Cl_bc_controller+0x2fc>)
   82fe8:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   82fea:	4b67      	ldr	r3, [pc, #412]	; (83188 <Cl_bc_controller+0x2e4>)
   82fec:	220c      	movs	r2, #12
   82fee:	701a      	strb	r2, [r3, #0]
		break;
   82ff0:	e00c      	b.n	8300c <Cl_bc_controller+0x168>
		
		case BC_EVENT_DISINF_INTAKE:
		
			
			potvalue = (650 * 1024)/10000;                                 // 600
   82ff2:	4b6a      	ldr	r3, [pc, #424]	; (8319c <Cl_bc_controller+0x2f8>)
   82ff4:	2242      	movs	r2, #66	; 0x42
   82ff6:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   82ff8:	4b68      	ldr	r3, [pc, #416]	; (8319c <Cl_bc_controller+0x2f8>)
   82ffa:	881b      	ldrh	r3, [r3, #0]
   82ffc:	4618      	mov	r0, r3
   82ffe:	4b68      	ldr	r3, [pc, #416]	; (831a0 <Cl_bc_controller+0x2fc>)
   83000:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83002:	4b61      	ldr	r3, [pc, #388]	; (83188 <Cl_bc_controller+0x2e4>)
   83004:	220c      	movs	r2, #12
   83006:	701a      	strb	r2, [r3, #0]
		break;
   83008:	e000      	b.n	8300c <Cl_bc_controller+0x168>
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
				}
		break;
   8300a:	bf00      	nop
			sv_cs_setpotvalue(potvalue);
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
		break;
	}
	switch (bc_state)
   8300c:	4b5e      	ldr	r3, [pc, #376]	; (83188 <Cl_bc_controller+0x2e4>)
   8300e:	781b      	ldrb	r3, [r3, #0]
   83010:	2b15      	cmp	r3, #21
   83012:	f200 85a2 	bhi.w	83b5a <Cl_bc_controller+0xcb6>
   83016:	a201      	add	r2, pc, #4	; (adr r2, 8301c <Cl_bc_controller+0x178>)
   83018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8301c:	00083b5b 	.word	0x00083b5b
   83020:	00083b5b 	.word	0x00083b5b
   83024:	00083075 	.word	0x00083075
   83028:	0008312f 	.word	0x0008312f
   8302c:	0008349d 	.word	0x0008349d
   83030:	000834d1 	.word	0x000834d1
   83034:	000834ed 	.word	0x000834ed
   83038:	00083521 	.word	0x00083521
   8303c:	0008353d 	.word	0x0008353d
   83040:	00083563 	.word	0x00083563
   83044:	0008357f 	.word	0x0008357f
   83048:	000835b3 	.word	0x000835b3
   8304c:	000835cf 	.word	0x000835cf
   83050:	0008360f 	.word	0x0008360f
   83054:	00083841 	.word	0x00083841
   83058:	00083875 	.word	0x00083875
   8305c:	00083ad3 	.word	0x00083ad3
   83060:	00083b5b 	.word	0x00083b5b
   83064:	00083b17 	.word	0x00083b17
   83068:	00083b5b 	.word	0x00083b5b
   8306c:	00083b5b 	.word	0x00083b5b
   83070:	00083b5b 	.word	0x00083b5b
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   83074:	79fb      	ldrb	r3, [r7, #7]
   83076:	3b01      	subs	r3, #1
   83078:	2b07      	cmp	r3, #7
   8307a:	d84c      	bhi.n	83116 <Cl_bc_controller+0x272>
   8307c:	a201      	add	r2, pc, #4	; (adr r2, 83084 <Cl_bc_controller+0x1e0>)
   8307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83082:	bf00      	nop
   83084:	000830a5 	.word	0x000830a5
   83088:	000830ad 	.word	0x000830ad
   8308c:	00083117 	.word	0x00083117
   83090:	00083117 	.word	0x00083117
   83094:	00083117 	.word	0x00083117
   83098:	000830cb 	.word	0x000830cb
   8309c:	00083117 	.word	0x00083117
   830a0:	000830f1 	.word	0x000830f1
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   830a4:	4b3f      	ldr	r3, [pc, #252]	; (831a4 <Cl_bc_controller+0x300>)
   830a6:	2201      	movs	r2, #1
   830a8:	701a      	strb	r2, [r3, #0]
								break;
   830aa:	e03e      	b.n	8312a <Cl_bc_controller+0x286>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   830ac:	4b3d      	ldr	r3, [pc, #244]	; (831a4 <Cl_bc_controller+0x300>)
   830ae:	781b      	ldrb	r3, [r3, #0]
   830b0:	2b00      	cmp	r3, #0
   830b2:	d033      	beq.n	8311c <Cl_bc_controller+0x278>
								{
									bc_laststate = bc_state;
   830b4:	4b34      	ldr	r3, [pc, #208]	; (83188 <Cl_bc_controller+0x2e4>)
   830b6:	781a      	ldrb	r2, [r3, #0]
   830b8:	4b34      	ldr	r3, [pc, #208]	; (8318c <Cl_bc_controller+0x2e8>)
   830ba:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   830bc:	4b32      	ldr	r3, [pc, #200]	; (83188 <Cl_bc_controller+0x2e4>)
   830be:	2203      	movs	r2, #3
   830c0:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   830c2:	4b38      	ldr	r3, [pc, #224]	; (831a4 <Cl_bc_controller+0x300>)
   830c4:	2200      	movs	r2, #0
   830c6:	701a      	strb	r2, [r3, #0]
								}
								break;
   830c8:	e028      	b.n	8311c <Cl_bc_controller+0x278>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   830ca:	4b33      	ldr	r3, [pc, #204]	; (83198 <Cl_bc_controller+0x2f4>)
   830cc:	2200      	movs	r2, #0
   830ce:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = 
   830d0:	2005      	movs	r0, #5
   830d2:	4b23      	ldr	r3, [pc, #140]	; (83160 <Cl_bc_controller+0x2bc>)
   830d4:	4798      	blx	r3
   830d6:	4603      	mov	r3, r0
   830d8:	73fb      	strb	r3, [r7, #15]
								(Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
								if(cl_bc_returncode == CL_OK)
   830da:	7bfb      	ldrb	r3, [r7, #15]
   830dc:	2b00      	cmp	r3, #0
   830de:	d120      	bne.n	83122 <Cl_bc_controller+0x27e>
								{
									bc_laststate = bc_state;
   830e0:	4b29      	ldr	r3, [pc, #164]	; (83188 <Cl_bc_controller+0x2e4>)
   830e2:	781a      	ldrb	r2, [r3, #0]
   830e4:	4b29      	ldr	r3, [pc, #164]	; (8318c <Cl_bc_controller+0x2e8>)
   830e6:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   830e8:	4b27      	ldr	r3, [pc, #156]	; (83188 <Cl_bc_controller+0x2e4>)
   830ea:	2210      	movs	r2, #16
   830ec:	701a      	strb	r2, [r3, #0]
								}
								break;
   830ee:	e018      	b.n	83122 <Cl_bc_controller+0x27e>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   830f0:	4b29      	ldr	r3, [pc, #164]	; (83198 <Cl_bc_controller+0x2f4>)
   830f2:	2200      	movs	r2, #0
   830f4:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   830f6:	2006      	movs	r0, #6
   830f8:	4b19      	ldr	r3, [pc, #100]	; (83160 <Cl_bc_controller+0x2bc>)
   830fa:	4798      	blx	r3
   830fc:	4603      	mov	r3, r0
   830fe:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   83100:	7bfb      	ldrb	r3, [r7, #15]
   83102:	2b00      	cmp	r3, #0
   83104:	d110      	bne.n	83128 <Cl_bc_controller+0x284>
								{
									bc_laststate = bc_state;
   83106:	4b20      	ldr	r3, [pc, #128]	; (83188 <Cl_bc_controller+0x2e4>)
   83108:	781a      	ldrb	r2, [r3, #0]
   8310a:	4b20      	ldr	r3, [pc, #128]	; (8318c <Cl_bc_controller+0x2e8>)
   8310c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   8310e:	4b1e      	ldr	r3, [pc, #120]	; (83188 <Cl_bc_controller+0x2e4>)
   83110:	2212      	movs	r2, #18
   83112:	701a      	strb	r2, [r3, #0]
								}
								break;
   83114:	e008      	b.n	83128 <Cl_bc_controller+0x284>
								default:break;
   83116:	bf00      	nop
   83118:	f000 bd20 	b.w	83b5c <Cl_bc_controller+0xcb8>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_OPENFILL;
									bc_wait = false;
								}
								break;
   8311c:	bf00      	nop
   8311e:	f000 bd1d 	b.w	83b5c <Cl_bc_controller+0xcb8>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   83122:	bf00      	nop
   83124:	f000 bd1a 	b.w	83b5c <Cl_bc_controller+0xcb8>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83128:	bf00      	nop
								default:break;
							}
			break;
   8312a:	f000 bd17 	b.w	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   8312e:	79fb      	ldrb	r3, [r7, #7]
   83130:	3b01      	subs	r3, #1
   83132:	2b07      	cmp	r3, #7
   83134:	f200 8176 	bhi.w	83424 <Cl_bc_controller+0x580>
   83138:	a201      	add	r2, pc, #4	; (adr r2, 83140 <Cl_bc_controller+0x29c>)
   8313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8313e:	bf00      	nop
   83140:	00083425 	.word	0x00083425
   83144:	000831a9 	.word	0x000831a9
   83148:	00083425 	.word	0x00083425
   8314c:	00083425 	.word	0x00083425
   83150:	00083425 	.word	0x00083425
   83154:	000833d9 	.word	0x000833d9
   83158:	00083425 	.word	0x00083425
   8315c:	000833ff 	.word	0x000833ff
   83160:	0009afc5 	.word	0x0009afc5
   83164:	0009ae59 	.word	0x0009ae59
   83168:	000829e5 	.word	0x000829e5
   8316c:	20071b0a 	.word	0x20071b0a
   83170:	20071937 	.word	0x20071937
   83174:	0009adb9 	.word	0x0009adb9
   83178:	0009aec1 	.word	0x0009aec1
   8317c:	00089035 	.word	0x00089035
   83180:	42960000 	.word	0x42960000
   83184:	00088fa9 	.word	0x00088fa9
   83188:	20071709 	.word	0x20071709
   8318c:	2007170a 	.word	0x2007170a
   83190:	20070104 	.word	0x20070104
   83194:	2007171c 	.word	0x2007171c
   83198:	2007170e 	.word	0x2007170e
   8319c:	20071712 	.word	0x20071712
   831a0:	0009b2c1 	.word	0x0009b2c1
   831a4:	2007170b 	.word	0x2007170b
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								
								if(openfill_flag == 1){
   831a8:	4ba1      	ldr	r3, [pc, #644]	; (83430 <Cl_bc_controller+0x58c>)
   831aa:	781b      	ldrb	r3, [r3, #0]
   831ac:	2b01      	cmp	r3, #1
   831ae:	d14b      	bne.n	83248 <Cl_bc_controller+0x3a4>
									
									Cl_Uint16Type potvalue = 0;
   831b0:	2300      	movs	r3, #0
   831b2:	81bb      	strh	r3, [r7, #12]
									potvalue = (650 * 1024)/10000;                                 // 600
   831b4:	2342      	movs	r3, #66	; 0x42
   831b6:	81bb      	strh	r3, [r7, #12]
									sv_cs_setpotvalue(potvalue);
   831b8:	89bb      	ldrh	r3, [r7, #12]
   831ba:	4618      	mov	r0, r3
   831bc:	4b9d      	ldr	r3, [pc, #628]	; (83434 <Cl_bc_controller+0x590>)
   831be:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   831c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   831c4:	2002      	movs	r0, #2
   831c6:	4b9c      	ldr	r3, [pc, #624]	; (83438 <Cl_bc_controller+0x594>)
   831c8:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   831ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   831ce:	2001      	movs	r0, #1
   831d0:	4b99      	ldr	r3, [pc, #612]	; (83438 <Cl_bc_controller+0x594>)
   831d2:	4798      	blx	r3
										
										if(disinfopenfillcounter++ > 1200){ // 20 mins
   831d4:	4b99      	ldr	r3, [pc, #612]	; (8343c <Cl_bc_controller+0x598>)
   831d6:	f9b3 3000 	ldrsh.w	r3, [r3]
   831da:	b29a      	uxth	r2, r3
   831dc:	3201      	adds	r2, #1
   831de:	b292      	uxth	r2, r2
   831e0:	b211      	sxth	r1, r2
   831e2:	4a96      	ldr	r2, [pc, #600]	; (8343c <Cl_bc_controller+0x598>)
   831e4:	8011      	strh	r1, [r2, #0]
   831e6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   831ea:	dd28      	ble.n	8323e <Cl_bc_controller+0x39a>
											
											openfillcounter = 0;
   831ec:	4b94      	ldr	r3, [pc, #592]	; (83440 <Cl_bc_controller+0x59c>)
   831ee:	2200      	movs	r2, #0
   831f0:	801a      	strh	r2, [r3, #0]
											disinfopenfillcounter = 0;
   831f2:	4b92      	ldr	r3, [pc, #584]	; (8343c <Cl_bc_controller+0x598>)
   831f4:	2200      	movs	r2, #0
   831f6:	801a      	strh	r2, [r3, #0]
											sv_prop_stopopenfill(); // manav02 added
   831f8:	4b92      	ldr	r3, [pc, #584]	; (83444 <Cl_bc_controller+0x5a0>)
   831fa:	4798      	blx	r3
								//			sv_prop_startmixing();
											cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   831fc:	2005      	movs	r0, #5
   831fe:	4b92      	ldr	r3, [pc, #584]	; (83448 <Cl_bc_controller+0x5a4>)
   83200:	4798      	blx	r3
   83202:	4603      	mov	r3, r0
   83204:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   83206:	2013      	movs	r0, #19
   83208:	4b90      	ldr	r3, [pc, #576]	; (8344c <Cl_bc_controller+0x5a8>)
   8320a:	4798      	blx	r3
   8320c:	4603      	mov	r3, r0
   8320e:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   83210:	2051      	movs	r0, #81	; 0x51
   83212:	4b8f      	ldr	r3, [pc, #572]	; (83450 <Cl_bc_controller+0x5ac>)
   83214:	4798      	blx	r3
   83216:	4603      	mov	r3, r0
   83218:	73fb      	strb	r3, [r7, #15]
											if(cl_bc_returncode == CL_OK)
   8321a:	7bfb      	ldrb	r3, [r7, #15]
   8321c:	2b00      	cmp	r3, #0
   8321e:	d10e      	bne.n	8323e <Cl_bc_controller+0x39a>
											{
												Cl_AlarmActivateAlarms(BC_ALARM,false);           // manav02 deactivated
   83220:	2100      	movs	r1, #0
   83222:	201a      	movs	r0, #26
   83224:	4b8b      	ldr	r3, [pc, #556]	; (83454 <Cl_bc_controller+0x5b0>)
   83226:	4798      	blx	r3
												bc_laststate = bc_state;
   83228:	4b8b      	ldr	r3, [pc, #556]	; (83458 <Cl_bc_controller+0x5b4>)
   8322a:	781a      	ldrb	r2, [r3, #0]
   8322c:	4b8b      	ldr	r3, [pc, #556]	; (8345c <Cl_bc_controller+0x5b8>)
   8322e:	701a      	strb	r2, [r3, #0]
												bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83230:	4b89      	ldr	r3, [pc, #548]	; (83458 <Cl_bc_controller+0x5b4>)
   83232:	220c      	movs	r2, #12
   83234:	701a      	strb	r2, [r3, #0]
												bc_laststate = bc_state;
   83236:	4b88      	ldr	r3, [pc, #544]	; (83458 <Cl_bc_controller+0x5b4>)
   83238:	781a      	ldrb	r2, [r3, #0]
   8323a:	4b88      	ldr	r3, [pc, #544]	; (8345c <Cl_bc_controller+0x5b8>)
   8323c:	701a      	strb	r2, [r3, #0]
											}
		
											
											
										}
									Cl_AlarmActivateAlarms(BC_ALARM,false);
   8323e:	2100      	movs	r1, #0
   83240:	201a      	movs	r0, #26
   83242:	4b84      	ldr	r3, [pc, #528]	; (83454 <Cl_bc_controller+0x5b0>)
   83244:	4798      	blx	r3
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
										bc_laststate = bc_state;
									}
								}
								}
								break;
   83246:	e0ef      	b.n	83428 <Cl_bc_controller+0x584>
								}
								
								else{
								
								
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   83248:	4b7d      	ldr	r3, [pc, #500]	; (83440 <Cl_bc_controller+0x59c>)
   8324a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8324e:	b29a      	uxth	r2, r3
   83250:	3201      	adds	r2, #1
   83252:	b292      	uxth	r2, r2
   83254:	b211      	sxth	r1, r2
   83256:	4a7a      	ldr	r2, [pc, #488]	; (83440 <Cl_bc_controller+0x59c>)
   83258:	8011      	strh	r1, [r2, #0]
   8325a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8325e:	f340 80e3 	ble.w	83428 <Cl_bc_controller+0x584>
								{
									
									
									if (openfill_flag == 1)
   83262:	4b73      	ldr	r3, [pc, #460]	; (83430 <Cl_bc_controller+0x58c>)
   83264:	781b      	ldrb	r3, [r3, #0]
   83266:	2b01      	cmp	r3, #1
   83268:	d10d      	bne.n	83286 <Cl_bc_controller+0x3e2>
									{
										//sv_prop_stopopenfill();
										openfillcounter = 0;
   8326a:	4b75      	ldr	r3, [pc, #468]	; (83440 <Cl_bc_controller+0x59c>)
   8326c:	2200      	movs	r2, #0
   8326e:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   83270:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   83274:	2002      	movs	r0, #2
   83276:	4b70      	ldr	r3, [pc, #448]	; (83438 <Cl_bc_controller+0x594>)
   83278:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   8327a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8327e:	2001      	movs	r0, #1
   83280:	4b6d      	ldr	r3, [pc, #436]	; (83438 <Cl_bc_controller+0x594>)
   83282:	4798      	blx	r3
   83284:	e071      	b.n	8336a <Cl_bc_controller+0x4c6>
										
									}
									else
									{
									sv_prop_stopopenfill();
   83286:	4b6f      	ldr	r3, [pc, #444]	; (83444 <Cl_bc_controller+0x5a0>)
   83288:	4798      	blx	r3
									sv_prop_startpropeo_aligning();
   8328a:	4b75      	ldr	r3, [pc, #468]	; (83460 <Cl_bc_controller+0x5bc>)
   8328c:	4798      	blx	r3
							
									openfillcounter = 0;
   8328e:	4b6c      	ldr	r3, [pc, #432]	; (83440 <Cl_bc_controller+0x59c>)
   83290:	2200      	movs	r2, #0
   83292:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   83294:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83298:	2002      	movs	r0, #2
   8329a:	4b67      	ldr	r3, [pc, #412]	; (83438 <Cl_bc_controller+0x594>)
   8329c:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   8329e:	f240 414c 	movw	r1, #1100	; 0x44c
   832a2:	2001      	movs	r0, #1
   832a4:	4b64      	ldr	r3, [pc, #400]	; (83438 <Cl_bc_controller+0x594>)
   832a6:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;                                 // added on 30.06.2017
   832a8:	4b6e      	ldr	r3, [pc, #440]	; (83464 <Cl_bc_controller+0x5c0>)
   832aa:	2244      	movs	r2, #68	; 0x44
   832ac:	801a      	strh	r2, [r3, #0]
										sv_cs_setpotvalue(potvalue);
   832ae:	4b6d      	ldr	r3, [pc, #436]	; (83464 <Cl_bc_controller+0x5c0>)
   832b0:	881b      	ldrh	r3, [r3, #0]
   832b2:	4618      	mov	r0, r3
   832b4:	4b5f      	ldr	r3, [pc, #380]	; (83434 <Cl_bc_controller+0x590>)
   832b6:	4798      	blx	r3
										if (hotrinse_flag == 1)
   832b8:	4b6b      	ldr	r3, [pc, #428]	; (83468 <Cl_bc_controller+0x5c4>)
   832ba:	781b      	ldrb	r3, [r3, #0]
   832bc:	2b01      	cmp	r3, #1
   832be:	d154      	bne.n	8336a <Cl_bc_controller+0x4c6>
										{
											 
											 sv_cntrl_setpumpspeed(DCMOTOR2,600);
   832c0:	f44f 7116 	mov.w	r1, #600	; 0x258
   832c4:	2002      	movs	r0, #2
   832c6:	4b5c      	ldr	r3, [pc, #368]	; (83438 <Cl_bc_controller+0x594>)
   832c8:	4798      	blx	r3
											 sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   832ca:	f240 414c 	movw	r1, #1100	; 0x44c
   832ce:	2001      	movs	r0, #1
   832d0:	4b59      	ldr	r3, [pc, #356]	; (83438 <Cl_bc_controller+0x594>)
   832d2:	4798      	blx	r3
												sv_cntrl_enable_loopback();
   832d4:	4b65      	ldr	r3, [pc, #404]	; (8346c <Cl_bc_controller+0x5c8>)
   832d6:	4798      	blx	r3
										//		sv_cntrl_enable_bypass();									// commented on 30.06.2017
										    
											Cl_AlarmActivateAlarms(BC_ALARM,false);           // manav02 deactivated added
   832d8:	2100      	movs	r1, #0
   832da:	201a      	movs	r0, #26
   832dc:	4b5d      	ldr	r3, [pc, #372]	; (83454 <Cl_bc_controller+0x5b0>)
   832de:	4798      	blx	r3
											potvalue = (690 * 1024)/10000;                    //manav02 changed from 800             // added on 30.06.2017
   832e0:	4b60      	ldr	r3, [pc, #384]	; (83464 <Cl_bc_controller+0x5c0>)
   832e2:	2246      	movs	r2, #70	; 0x46
   832e4:	801a      	strh	r2, [r3, #0]
											sv_cs_setpotvalue(potvalue);
   832e6:	4b5f      	ldr	r3, [pc, #380]	; (83464 <Cl_bc_controller+0x5c0>)
   832e8:	881b      	ldrh	r3, [r3, #0]
   832ea:	4618      	mov	r0, r3
   832ec:	4b51      	ldr	r3, [pc, #324]	; (83434 <Cl_bc_controller+0x590>)
   832ee:	4798      	blx	r3
											
												sv_cntrl_poweronheater();
   832f0:	4b5f      	ldr	r3, [pc, #380]	; (83470 <Cl_bc_controller+0x5cc>)
   832f2:	4798      	blx	r3
												sv_cntrl_incheater(4000);
   832f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   832f8:	4b5e      	ldr	r3, [pc, #376]	; (83474 <Cl_bc_controller+0x5d0>)
   832fa:	4798      	blx	r3
												SetHeaterState(CL_HEATER_STATE_ON);
   832fc:	2001      	movs	r0, #1
   832fe:	4b5e      	ldr	r3, [pc, #376]	; (83478 <Cl_bc_controller+0x5d4>)
   83300:	4798      	blx	r3
												Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 80);
   83302:	495e      	ldr	r1, [pc, #376]	; (8347c <Cl_bc_controller+0x5d8>)
   83304:	2005      	movs	r0, #5
   83306:	4b5e      	ldr	r3, [pc, #376]	; (83480 <Cl_bc_controller+0x5dc>)
   83308:	4798      	blx	r3
											
											sv_cntrl_activate_valve(VALVE_ID2);
   8330a:	2002      	movs	r0, #2
   8330c:	4b5d      	ldr	r3, [pc, #372]	; (83484 <Cl_bc_controller+0x5e0>)
   8330e:	4798      	blx	r3
											sv_cntrl_activate_valve(VALVE_ID3);
   83310:	2003      	movs	r0, #3
   83312:	4b5c      	ldr	r3, [pc, #368]	; (83484 <Cl_bc_controller+0x5e0>)
   83314:	4798      	blx	r3
											sv_prop_startmixing();
   83316:	4b5c      	ldr	r3, [pc, #368]	; (83488 <Cl_bc_controller+0x5e4>)
   83318:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_START,0);
   8331a:	2100      	movs	r1, #0
   8331c:	2002      	movs	r0, #2
   8331e:	4b5b      	ldr	r3, [pc, #364]	; (8348c <Cl_bc_controller+0x5e8>)
   83320:	4798      	blx	r3
											cl_ufpumpFeedback_start();
   83322:	4b5b      	ldr	r3, [pc, #364]	; (83490 <Cl_bc_controller+0x5ec>)
   83324:	4798      	blx	r3
											cl_wait(100);
   83326:	2064      	movs	r0, #100	; 0x64
   83328:	4b5a      	ldr	r3, [pc, #360]	; (83494 <Cl_bc_controller+0x5f0>)
   8332a:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   8332c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   83330:	2001      	movs	r0, #1
   83332:	4b56      	ldr	r3, [pc, #344]	; (8348c <Cl_bc_controller+0x5e8>)
   83334:	4798      	blx	r3
											cl_wait(200);
   83336:	20c8      	movs	r0, #200	; 0xc8
   83338:	4b56      	ldr	r3, [pc, #344]	; (83494 <Cl_bc_controller+0x5f0>)
   8333a:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   8333c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   83340:	2001      	movs	r0, #1
   83342:	4b52      	ldr	r3, [pc, #328]	; (8348c <Cl_bc_controller+0x5e8>)
   83344:	4798      	blx	r3
											cl_wait(600);
   83346:	f44f 7016 	mov.w	r0, #600	; 0x258
   8334a:	4b52      	ldr	r3, [pc, #328]	; (83494 <Cl_bc_controller+0x5f0>)
   8334c:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   8334e:	f241 3188 	movw	r1, #5000	; 0x1388
   83352:	2001      	movs	r0, #1
   83354:	4b4d      	ldr	r3, [pc, #308]	; (8348c <Cl_bc_controller+0x5e8>)
   83356:	4798      	blx	r3
											cl_wait(800);
   83358:	f44f 7048 	mov.w	r0, #800	; 0x320
   8335c:	4b4d      	ldr	r3, [pc, #308]	; (83494 <Cl_bc_controller+0x5f0>)
   8335e:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   83360:	f640 11c4 	movw	r1, #2500	; 0x9c4
   83364:	2001      	movs	r0, #1
   83366:	4b49      	ldr	r3, [pc, #292]	; (8348c <Cl_bc_controller+0x5e8>)
   83368:	4798      	blx	r3
										
									}
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
//check	
									potvalue = (650 * 1024)/10000;                                 // added on 30.06.2017
   8336a:	4b3e      	ldr	r3, [pc, #248]	; (83464 <Cl_bc_controller+0x5c0>)
   8336c:	2242      	movs	r2, #66	; 0x42
   8336e:	801a      	strh	r2, [r3, #0]
									sv_cs_setpotvalue(potvalue);
   83370:	4b3c      	ldr	r3, [pc, #240]	; (83464 <Cl_bc_controller+0x5c0>)
   83372:	881b      	ldrh	r3, [r3, #0]
   83374:	4618      	mov	r0, r3
   83376:	4b2f      	ldr	r3, [pc, #188]	; (83434 <Cl_bc_controller+0x590>)
   83378:	4798      	blx	r3

									sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   8337a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8337e:	2002      	movs	r0, #2
   83380:	4b2d      	ldr	r3, [pc, #180]	; (83438 <Cl_bc_controller+0x594>)
   83382:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,1000);  //960
   83384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83388:	2001      	movs	r0, #1
   8338a:	4b2b      	ldr	r3, [pc, #172]	; (83438 <Cl_bc_controller+0x594>)
   8338c:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   8338e:	2005      	movs	r0, #5
   83390:	4b2d      	ldr	r3, [pc, #180]	; (83448 <Cl_bc_controller+0x5a4>)
   83392:	4798      	blx	r3
   83394:	4603      	mov	r3, r0
   83396:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   83398:	2013      	movs	r0, #19
   8339a:	4b2c      	ldr	r3, [pc, #176]	; (8344c <Cl_bc_controller+0x5a8>)
   8339c:	4798      	blx	r3
   8339e:	4603      	mov	r3, r0
   833a0:	73fb      	strb	r3, [r7, #15]
									sv_cntrl_deactivate_valve(VALVE_ID4);
   833a2:	2004      	movs	r0, #4
   833a4:	4b29      	ldr	r3, [pc, #164]	; (8344c <Cl_bc_controller+0x5a8>)
   833a6:	4798      	blx	r3
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   833a8:	2051      	movs	r0, #81	; 0x51
   833aa:	4b29      	ldr	r3, [pc, #164]	; (83450 <Cl_bc_controller+0x5ac>)
   833ac:	4798      	blx	r3
   833ae:	4603      	mov	r3, r0
   833b0:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   833b2:	7bfb      	ldrb	r3, [r7, #15]
   833b4:	2b00      	cmp	r3, #0
   833b6:	d137      	bne.n	83428 <Cl_bc_controller+0x584>
									{
										Cl_AlarmActivateAlarms(BC_ALARM,true); // manav02 activated
   833b8:	2101      	movs	r1, #1
   833ba:	201a      	movs	r0, #26
   833bc:	4b25      	ldr	r3, [pc, #148]	; (83454 <Cl_bc_controller+0x5b0>)
   833be:	4798      	blx	r3
										bc_laststate = bc_state;
   833c0:	4b25      	ldr	r3, [pc, #148]	; (83458 <Cl_bc_controller+0x5b4>)
   833c2:	781a      	ldrb	r2, [r3, #0]
   833c4:	4b25      	ldr	r3, [pc, #148]	; (8345c <Cl_bc_controller+0x5b8>)
   833c6:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   833c8:	4b23      	ldr	r3, [pc, #140]	; (83458 <Cl_bc_controller+0x5b4>)
   833ca:	220c      	movs	r2, #12
   833cc:	701a      	strb	r2, [r3, #0]
										bc_laststate = bc_state;
   833ce:	4b22      	ldr	r3, [pc, #136]	; (83458 <Cl_bc_controller+0x5b4>)
   833d0:	781a      	ldrb	r2, [r3, #0]
   833d2:	4b22      	ldr	r3, [pc, #136]	; (8345c <Cl_bc_controller+0x5b8>)
   833d4:	701a      	strb	r2, [r3, #0]
									}
								}
								}
								break;
   833d6:	e027      	b.n	83428 <Cl_bc_controller+0x584>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   833d8:	4b19      	ldr	r3, [pc, #100]	; (83440 <Cl_bc_controller+0x59c>)
   833da:	2200      	movs	r2, #0
   833dc:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   833de:	2005      	movs	r0, #5
   833e0:	4b19      	ldr	r3, [pc, #100]	; (83448 <Cl_bc_controller+0x5a4>)
   833e2:	4798      	blx	r3
   833e4:	4603      	mov	r3, r0
   833e6:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   833e8:	7bfb      	ldrb	r3, [r7, #15]
   833ea:	2b00      	cmp	r3, #0
   833ec:	d11e      	bne.n	8342c <Cl_bc_controller+0x588>
								{
									bc_laststate = bc_state;
   833ee:	4b1a      	ldr	r3, [pc, #104]	; (83458 <Cl_bc_controller+0x5b4>)
   833f0:	781a      	ldrb	r2, [r3, #0]
   833f2:	4b1a      	ldr	r3, [pc, #104]	; (8345c <Cl_bc_controller+0x5b8>)
   833f4:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   833f6:	4b18      	ldr	r3, [pc, #96]	; (83458 <Cl_bc_controller+0x5b4>)
   833f8:	2210      	movs	r2, #16
   833fa:	701a      	strb	r2, [r3, #0]
								}
								break;
   833fc:	e016      	b.n	8342c <Cl_bc_controller+0x588>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   833fe:	4b10      	ldr	r3, [pc, #64]	; (83440 <Cl_bc_controller+0x59c>)
   83400:	2200      	movs	r2, #0
   83402:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83404:	2006      	movs	r0, #6
   83406:	4b10      	ldr	r3, [pc, #64]	; (83448 <Cl_bc_controller+0x5a4>)
   83408:	4798      	blx	r3
   8340a:	4603      	mov	r3, r0
   8340c:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   8340e:	7bfb      	ldrb	r3, [r7, #15]
   83410:	2b00      	cmp	r3, #0
   83412:	d141      	bne.n	83498 <Cl_bc_controller+0x5f4>
								{
									bc_laststate = bc_state;
   83414:	4b10      	ldr	r3, [pc, #64]	; (83458 <Cl_bc_controller+0x5b4>)
   83416:	781a      	ldrb	r2, [r3, #0]
   83418:	4b10      	ldr	r3, [pc, #64]	; (8345c <Cl_bc_controller+0x5b8>)
   8341a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   8341c:	4b0e      	ldr	r3, [pc, #56]	; (83458 <Cl_bc_controller+0x5b4>)
   8341e:	2212      	movs	r2, #18
   83420:	701a      	strb	r2, [r3, #0]
								}
								break;
   83422:	e039      	b.n	83498 <Cl_bc_controller+0x5f4>
								default:break;
   83424:	bf00      	nop
   83426:	e399      	b.n	83b5c <Cl_bc_controller+0xcb8>
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
										bc_laststate = bc_state;
									}
								}
								}
								break;
   83428:	bf00      	nop
   8342a:	e397      	b.n	83b5c <Cl_bc_controller+0xcb8>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   8342c:	bf00      	nop
   8342e:	e395      	b.n	83b5c <Cl_bc_controller+0xcb8>
   83430:	20071b0a 	.word	0x20071b0a
   83434:	0009b2c1 	.word	0x0009b2c1
   83438:	0009ae59 	.word	0x0009ae59
   8343c:	20071710 	.word	0x20071710
   83440:	2007170e 	.word	0x2007170e
   83444:	0009b299 	.word	0x0009b299
   83448:	0009afc5 	.word	0x0009afc5
   8344c:	0009ae01 	.word	0x0009ae01
   83450:	0008b715 	.word	0x0008b715
   83454:	000829e5 	.word	0x000829e5
   83458:	20071709 	.word	0x20071709
   8345c:	2007170a 	.word	0x2007170a
   83460:	0009b151 	.word	0x0009b151
   83464:	20071712 	.word	0x20071712
   83468:	20071bb5 	.word	0x20071bb5
   8346c:	0009af55 	.word	0x0009af55
   83470:	0009adb9 	.word	0x0009adb9
   83474:	0009aec1 	.word	0x0009aec1
   83478:	00089035 	.word	0x00089035
   8347c:	42a00000 	.word	0x42a00000
   83480:	00088fa9 	.word	0x00088fa9
   83484:	0009ade1 	.word	0x0009ade1
   83488:	0009b17d 	.word	0x0009b17d
   8348c:	00096ea9 	.word	0x00096ea9
   83490:	00096c8d 	.word	0x00096c8d
   83494:	00093ea9 	.word	0x00093ea9
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83498:	bf00      	nop
								default:break;
							}
			break;
   8349a:	e35f      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   8349c:	79fb      	ldrb	r3, [r7, #7]
   8349e:	2b01      	cmp	r3, #1
   834a0:	d002      	beq.n	834a8 <Cl_bc_controller+0x604>
   834a2:	2b02      	cmp	r3, #2
   834a4:	d004      	beq.n	834b0 <Cl_bc_controller+0x60c>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   834a6:	e012      	b.n	834ce <Cl_bc_controller+0x62a>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   834a8:	4b9c      	ldr	r3, [pc, #624]	; (8371c <Cl_bc_controller+0x878>)
   834aa:	2201      	movs	r2, #1
   834ac:	701a      	strb	r2, [r3, #0]
								
								break;
   834ae:	e00e      	b.n	834ce <Cl_bc_controller+0x62a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   834b0:	4b9a      	ldr	r3, [pc, #616]	; (8371c <Cl_bc_controller+0x878>)
   834b2:	781b      	ldrb	r3, [r3, #0]
   834b4:	2b00      	cmp	r3, #0
   834b6:	d009      	beq.n	834cc <Cl_bc_controller+0x628>
								{
									bc_laststate = bc_state;
   834b8:	4b99      	ldr	r3, [pc, #612]	; (83720 <Cl_bc_controller+0x87c>)
   834ba:	781a      	ldrb	r2, [r3, #0]
   834bc:	4b99      	ldr	r3, [pc, #612]	; (83724 <Cl_bc_controller+0x880>)
   834be:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   834c0:	4b97      	ldr	r3, [pc, #604]	; (83720 <Cl_bc_controller+0x87c>)
   834c2:	2205      	movs	r2, #5
   834c4:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   834c6:	4b95      	ldr	r3, [pc, #596]	; (8371c <Cl_bc_controller+0x878>)
   834c8:	2200      	movs	r2, #0
   834ca:	701a      	strb	r2, [r3, #0]
								}
								break;
   834cc:	bf00      	nop
								default:break;
							}
			break;
   834ce:	e345      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   834d0:	79fb      	ldrb	r3, [r7, #7]
   834d2:	2b02      	cmp	r3, #2
   834d4:	d004      	beq.n	834e0 <Cl_bc_controller+0x63c>
   834d6:	2b03      	cmp	r3, #3
   834d8:	d004      	beq.n	834e4 <Cl_bc_controller+0x640>
   834da:	2b01      	cmp	r3, #1
   834dc:	d004      	beq.n	834e8 <Cl_bc_controller+0x644>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   834de:	e004      	b.n	834ea <Cl_bc_controller+0x646>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   834e0:	bf00      	nop
   834e2:	e33b      	b.n	83b5c <Cl_bc_controller+0xcb8>
								case	BC_EVENT_CS:
								break;
   834e4:	bf00      	nop
   834e6:	e339      	b.n	83b5c <Cl_bc_controller+0xcb8>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   834e8:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   834ea:	e337      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   834ec:	79fb      	ldrb	r3, [r7, #7]
   834ee:	2b01      	cmp	r3, #1
   834f0:	d002      	beq.n	834f8 <Cl_bc_controller+0x654>
   834f2:	2b02      	cmp	r3, #2
   834f4:	d004      	beq.n	83500 <Cl_bc_controller+0x65c>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   834f6:	e012      	b.n	8351e <Cl_bc_controller+0x67a>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   834f8:	4b88      	ldr	r3, [pc, #544]	; (8371c <Cl_bc_controller+0x878>)
   834fa:	2201      	movs	r2, #1
   834fc:	701a      	strb	r2, [r3, #0]
								
								break;
   834fe:	e00e      	b.n	8351e <Cl_bc_controller+0x67a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83500:	4b86      	ldr	r3, [pc, #536]	; (8371c <Cl_bc_controller+0x878>)
   83502:	781b      	ldrb	r3, [r3, #0]
   83504:	2b00      	cmp	r3, #0
   83506:	d009      	beq.n	8351c <Cl_bc_controller+0x678>
								{
									bc_laststate = bc_state;
   83508:	4b85      	ldr	r3, [pc, #532]	; (83720 <Cl_bc_controller+0x87c>)
   8350a:	781a      	ldrb	r2, [r3, #0]
   8350c:	4b85      	ldr	r3, [pc, #532]	; (83724 <Cl_bc_controller+0x880>)
   8350e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   83510:	4b83      	ldr	r3, [pc, #524]	; (83720 <Cl_bc_controller+0x87c>)
   83512:	2207      	movs	r2, #7
   83514:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83516:	4b81      	ldr	r3, [pc, #516]	; (8371c <Cl_bc_controller+0x878>)
   83518:	2200      	movs	r2, #0
   8351a:	701a      	strb	r2, [r3, #0]
								}
								break;
   8351c:	bf00      	nop
								default:break;
							}
			break;
   8351e:	e31d      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   83520:	79fb      	ldrb	r3, [r7, #7]
   83522:	2b02      	cmp	r3, #2
   83524:	d004      	beq.n	83530 <Cl_bc_controller+0x68c>
   83526:	2b03      	cmp	r3, #3
   83528:	d004      	beq.n	83534 <Cl_bc_controller+0x690>
   8352a:	2b01      	cmp	r3, #1
   8352c:	d004      	beq.n	83538 <Cl_bc_controller+0x694>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8352e:	e004      	b.n	8353a <Cl_bc_controller+0x696>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83530:	bf00      	nop
   83532:	e313      	b.n	83b5c <Cl_bc_controller+0xcb8>
								case	BC_EVENT_CS:
								break;
   83534:	bf00      	nop
   83536:	e311      	b.n	83b5c <Cl_bc_controller+0xcb8>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83538:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8353a:	e30f      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   8353c:	79fb      	ldrb	r3, [r7, #7]
   8353e:	2b01      	cmp	r3, #1
   83540:	d002      	beq.n	83548 <Cl_bc_controller+0x6a4>
   83542:	2b02      	cmp	r3, #2
   83544:	d00b      	beq.n	8355e <Cl_bc_controller+0x6ba>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   83546:	e00b      	b.n	83560 <Cl_bc_controller+0x6bc>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   83548:	4b75      	ldr	r3, [pc, #468]	; (83720 <Cl_bc_controller+0x87c>)
   8354a:	781a      	ldrb	r2, [r3, #0]
   8354c:	4b75      	ldr	r3, [pc, #468]	; (83724 <Cl_bc_controller+0x880>)
   8354e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   83550:	4b73      	ldr	r3, [pc, #460]	; (83720 <Cl_bc_controller+0x87c>)
   83552:	2209      	movs	r2, #9
   83554:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83556:	4b71      	ldr	r3, [pc, #452]	; (8371c <Cl_bc_controller+0x878>)
   83558:	2200      	movs	r2, #0
   8355a:	701a      	strb	r2, [r3, #0]
								break;
   8355c:	e000      	b.n	83560 <Cl_bc_controller+0x6bc>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   8355e:	bf00      	nop
								default:break;
							}
			break;
   83560:	e2fc      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   83562:	79fb      	ldrb	r3, [r7, #7]
   83564:	2b02      	cmp	r3, #2
   83566:	d004      	beq.n	83572 <Cl_bc_controller+0x6ce>
   83568:	2b03      	cmp	r3, #3
   8356a:	d004      	beq.n	83576 <Cl_bc_controller+0x6d2>
   8356c:	2b01      	cmp	r3, #1
   8356e:	d004      	beq.n	8357a <Cl_bc_controller+0x6d6>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83570:	e004      	b.n	8357c <Cl_bc_controller+0x6d8>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83572:	bf00      	nop
   83574:	e2f2      	b.n	83b5c <Cl_bc_controller+0xcb8>
								case	BC_EVENT_CS:
								break;
   83576:	bf00      	nop
   83578:	e2f0      	b.n	83b5c <Cl_bc_controller+0xcb8>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8357a:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   8357c:	e2ee      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   8357e:	79fb      	ldrb	r3, [r7, #7]
   83580:	2b01      	cmp	r3, #1
   83582:	d002      	beq.n	8358a <Cl_bc_controller+0x6e6>
   83584:	2b02      	cmp	r3, #2
   83586:	d004      	beq.n	83592 <Cl_bc_controller+0x6ee>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   83588:	e012      	b.n	835b0 <Cl_bc_controller+0x70c>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   8358a:	4b64      	ldr	r3, [pc, #400]	; (8371c <Cl_bc_controller+0x878>)
   8358c:	2201      	movs	r2, #1
   8358e:	701a      	strb	r2, [r3, #0]
								
								break;
   83590:	e00e      	b.n	835b0 <Cl_bc_controller+0x70c>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83592:	4b62      	ldr	r3, [pc, #392]	; (8371c <Cl_bc_controller+0x878>)
   83594:	781b      	ldrb	r3, [r3, #0]
   83596:	2b00      	cmp	r3, #0
   83598:	d009      	beq.n	835ae <Cl_bc_controller+0x70a>
								{
									bc_laststate = bc_state;
   8359a:	4b61      	ldr	r3, [pc, #388]	; (83720 <Cl_bc_controller+0x87c>)
   8359c:	781a      	ldrb	r2, [r3, #0]
   8359e:	4b61      	ldr	r3, [pc, #388]	; (83724 <Cl_bc_controller+0x880>)
   835a0:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   835a2:	4b5f      	ldr	r3, [pc, #380]	; (83720 <Cl_bc_controller+0x87c>)
   835a4:	220b      	movs	r2, #11
   835a6:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   835a8:	4b5c      	ldr	r3, [pc, #368]	; (8371c <Cl_bc_controller+0x878>)
   835aa:	2200      	movs	r2, #0
   835ac:	701a      	strb	r2, [r3, #0]
								}
								break;
   835ae:	bf00      	nop
								default:break;
							}
			break;
   835b0:	e2d4      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   835b2:	79fb      	ldrb	r3, [r7, #7]
   835b4:	2b02      	cmp	r3, #2
   835b6:	d004      	beq.n	835c2 <Cl_bc_controller+0x71e>
   835b8:	2b03      	cmp	r3, #3
   835ba:	d004      	beq.n	835c6 <Cl_bc_controller+0x722>
   835bc:	2b01      	cmp	r3, #1
   835be:	d004      	beq.n	835ca <Cl_bc_controller+0x726>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   835c0:	e004      	b.n	835cc <Cl_bc_controller+0x728>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   835c2:	bf00      	nop
   835c4:	e2ca      	b.n	83b5c <Cl_bc_controller+0xcb8>
								case	BC_EVENT_CS:
								break;
   835c6:	bf00      	nop
   835c8:	e2c8      	b.n	83b5c <Cl_bc_controller+0xcb8>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   835ca:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   835cc:	e2c6      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   835ce:	79fb      	ldrb	r3, [r7, #7]
   835d0:	2b00      	cmp	r3, #0
   835d2:	d001      	beq.n	835d8 <Cl_bc_controller+0x734>
   835d4:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   835d6:	e019      	b.n	8360c <Cl_bc_controller+0x768>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   835d8:	4b53      	ldr	r3, [pc, #332]	; (83728 <Cl_bc_controller+0x884>)
   835da:	f9b3 3000 	ldrsh.w	r3, [r3]
   835de:	b29b      	uxth	r3, r3
   835e0:	3301      	adds	r3, #1
   835e2:	b29b      	uxth	r3, r3
   835e4:	b21a      	sxth	r2, r3
   835e6:	4b50      	ldr	r3, [pc, #320]	; (83728 <Cl_bc_controller+0x884>)
   835e8:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   835ea:	4b50      	ldr	r3, [pc, #320]	; (8372c <Cl_bc_controller+0x888>)
   835ec:	881b      	ldrh	r3, [r3, #0]
   835ee:	3301      	adds	r3, #1
   835f0:	b29a      	uxth	r2, r3
   835f2:	4b4e      	ldr	r3, [pc, #312]	; (8372c <Cl_bc_controller+0x888>)
   835f4:	801a      	strh	r2, [r3, #0]
// 									wait_counter ++;	// 1 sec wait
// 									
// 								}
// 								else
								{
									wait_counter = 0;
   835f6:	4b4e      	ldr	r3, [pc, #312]	; (83730 <Cl_bc_controller+0x88c>)
   835f8:	2200      	movs	r2, #0
   835fa:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   835fc:	4b48      	ldr	r3, [pc, #288]	; (83720 <Cl_bc_controller+0x87c>)
   835fe:	781a      	ldrb	r2, [r3, #0]
   83600:	4b48      	ldr	r3, [pc, #288]	; (83724 <Cl_bc_controller+0x880>)
   83602:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   83604:	4b46      	ldr	r3, [pc, #280]	; (83720 <Cl_bc_controller+0x87c>)
   83606:	220d      	movs	r2, #13
   83608:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   8360a:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   8360c:	e2a6      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   8360e:	79fb      	ldrb	r3, [r7, #7]
   83610:	2b03      	cmp	r3, #3
   83612:	f200 810d 	bhi.w	83830 <Cl_bc_controller+0x98c>
   83616:	a201      	add	r2, pc, #4	; (adr r2, 8361c <Cl_bc_controller+0x778>)
   83618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8361c:	0008362d 	.word	0x0008362d
   83620:	00083831 	.word	0x00083831
   83624:	0008366d 	.word	0x0008366d
   83628:	00083683 	.word	0x00083683
							{
								case BC_EVENT_50MS:
								fill_time++;
   8362c:	4b3e      	ldr	r3, [pc, #248]	; (83728 <Cl_bc_controller+0x884>)
   8362e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83632:	b29b      	uxth	r3, r3
   83634:	3301      	adds	r3, #1
   83636:	b29b      	uxth	r3, r3
   83638:	b21a      	sxth	r2, r3
   8363a:	4b3b      	ldr	r3, [pc, #236]	; (83728 <Cl_bc_controller+0x884>)
   8363c:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   8363e:	4b3b      	ldr	r3, [pc, #236]	; (8372c <Cl_bc_controller+0x888>)
   83640:	881b      	ldrh	r3, [r3, #0]
   83642:	3301      	adds	r3, #1
   83644:	b29a      	uxth	r2, r3
   83646:	4b39      	ldr	r3, [pc, #228]	; (8372c <Cl_bc_controller+0x888>)
   83648:	801a      	strh	r2, [r3, #0]
									if (wait_4_propo_off == 42)
   8364a:	4b38      	ldr	r3, [pc, #224]	; (8372c <Cl_bc_controller+0x888>)
   8364c:	881b      	ldrh	r3, [r3, #0]
   8364e:	2b2a      	cmp	r3, #42	; 0x2a
   83650:	d103      	bne.n	8365a <Cl_bc_controller+0x7b6>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
   83652:	2013      	movs	r0, #19
   83654:	4b37      	ldr	r3, [pc, #220]	; (83734 <Cl_bc_controller+0x890>)
   83656:	4798      	blx	r3
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83658:	e0ec      	b.n	83834 <Cl_bc_controller+0x990>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
									//	sv_cntrl_activate_valve(VALVE_ID20);
									//	sv_cntrl_activate_valve(VALVE_ID4);
									}
									else if (wait_4_propo_off == 46)
   8365a:	4b34      	ldr	r3, [pc, #208]	; (8372c <Cl_bc_controller+0x888>)
   8365c:	881b      	ldrh	r3, [r3, #0]
   8365e:	2b2e      	cmp	r3, #46	; 0x2e
   83660:	f040 80e8 	bne.w	83834 <Cl_bc_controller+0x990>
									{
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83664:	2013      	movs	r0, #19
   83666:	4b34      	ldr	r3, [pc, #208]	; (83738 <Cl_bc_controller+0x894>)
   83668:	4798      	blx	r3
										
									}
								break;
   8366a:	e0e3      	b.n	83834 <Cl_bc_controller+0x990>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(fill_time > 150){
   8366c:	4b2e      	ldr	r3, [pc, #184]	; (83728 <Cl_bc_controller+0x884>)
   8366e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83672:	2b96      	cmp	r3, #150	; 0x96
   83674:	f340 80e0 	ble.w	83838 <Cl_bc_controller+0x994>
								//sv_cntrl_setyellowalarm();
// 								sv_cntrl_activate_valve( VALVE_ID4);
// 								cl_wait(50);
// 								sv_cntrl_deactivate_valve(VALVE_ID4);
// 								cl_wait(50);
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83678:	2101      	movs	r1, #1
   8367a:	201a      	movs	r0, #26
   8367c:	4b2f      	ldr	r3, [pc, #188]	; (8373c <Cl_bc_controller+0x898>)
   8367e:	4798      	blx	r3
													
								}
								
								break;
   83680:	e0da      	b.n	83838 <Cl_bc_controller+0x994>
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   83682:	4b2f      	ldr	r3, [pc, #188]	; (83740 <Cl_bc_controller+0x89c>)
   83684:	2201      	movs	r2, #1
   83686:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83688:	4b2e      	ldr	r3, [pc, #184]	; (83744 <Cl_bc_controller+0x8a0>)
   8368a:	2200      	movs	r2, #0
   8368c:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   8368e:	4b26      	ldr	r3, [pc, #152]	; (83728 <Cl_bc_controller+0x884>)
   83690:	f9b3 3000 	ldrsh.w	r3, [r3]
   83694:	b29a      	uxth	r2, r3
   83696:	4b2b      	ldr	r3, [pc, #172]	; (83744 <Cl_bc_controller+0x8a0>)
   83698:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 22;
   8369a:	4b2a      	ldr	r3, [pc, #168]	; (83744 <Cl_bc_controller+0x8a0>)
   8369c:	2216      	movs	r2, #22
   8369e:	709a      	strb	r2, [r3, #2]
									cl_tdata_temp.Twobyte = fill_time;
   836a0:	4b21      	ldr	r3, [pc, #132]	; (83728 <Cl_bc_controller+0x884>)
   836a2:	f9b3 3000 	ldrsh.w	r3, [r3]
   836a6:	b29a      	uxth	r2, r3
   836a8:	4b27      	ldr	r3, [pc, #156]	; (83748 <Cl_bc_controller+0x8a4>)
   836aa:	801a      	strh	r2, [r3, #0]
									if (bc_flag == 1)
   836ac:	4b27      	ldr	r3, [pc, #156]	; (8374c <Cl_bc_controller+0x8a8>)
   836ae:	781b      	ldrb	r3, [r3, #0]
   836b0:	2b01      	cmp	r3, #1
   836b2:	f040 8098 	bne.w	837e6 <Cl_bc_controller+0x942>
									{
										switch (flow_rate)
   836b6:	4b26      	ldr	r3, [pc, #152]	; (83750 <Cl_bc_controller+0x8ac>)
   836b8:	681b      	ldr	r3, [r3, #0]
   836ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   836be:	f000 808f 	beq.w	837e0 <Cl_bc_controller+0x93c>
   836c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   836c6:	d805      	bhi.n	836d4 <Cl_bc_controller+0x830>
   836c8:	2bc8      	cmp	r3, #200	; 0xc8
   836ca:	d07f      	beq.n	837cc <Cl_bc_controller+0x928>
   836cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   836d0:	d05f      	beq.n	83792 <Cl_bc_controller+0x8ee>
   836d2:	e088      	b.n	837e6 <Cl_bc_controller+0x942>
   836d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   836d8:	d03e      	beq.n	83758 <Cl_bc_controller+0x8b4>
   836da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   836de:	f040 8082 	bne.w	837e6 <Cl_bc_controller+0x942>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   836e2:	4b11      	ldr	r3, [pc, #68]	; (83728 <Cl_bc_controller+0x884>)
   836e4:	f9b3 3000 	ldrsh.w	r3, [r3]
   836e8:	2b37      	cmp	r3, #55	; 0x37
   836ea:	dc04      	bgt.n	836f6 <Cl_bc_controller+0x852>
   836ec:	4b0e      	ldr	r3, [pc, #56]	; (83728 <Cl_bc_controller+0x884>)
   836ee:	f9b3 3000 	ldrsh.w	r3, [r3]
   836f2:	2b2c      	cmp	r3, #44	; 0x2c
   836f4:	dc0d      	bgt.n	83712 <Cl_bc_controller+0x86e>
												{	
													
													switchb01alrcnt++ ;
   836f6:	4b17      	ldr	r3, [pc, #92]	; (83754 <Cl_bc_controller+0x8b0>)
   836f8:	681b      	ldr	r3, [r3, #0]
   836fa:	3301      	adds	r3, #1
   836fc:	4a15      	ldr	r2, [pc, #84]	; (83754 <Cl_bc_controller+0x8b0>)
   836fe:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83700:	4b14      	ldr	r3, [pc, #80]	; (83754 <Cl_bc_controller+0x8b0>)
   83702:	681b      	ldr	r3, [r3, #0]
   83704:	2b03      	cmp	r3, #3
   83706:	dd08      	ble.n	8371a <Cl_bc_controller+0x876>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83708:	2101      	movs	r1, #1
   8370a:	201a      	movs	r0, #26
   8370c:	4b0b      	ldr	r3, [pc, #44]	; (8373c <Cl_bc_controller+0x898>)
   8370e:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{	
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83710:	e003      	b.n	8371a <Cl_bc_controller+0x876>
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83712:	4b10      	ldr	r3, [pc, #64]	; (83754 <Cl_bc_controller+0x8b0>)
   83714:	2200      	movs	r2, #0
   83716:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83718:	e065      	b.n	837e6 <Cl_bc_controller+0x942>
   8371a:	e064      	b.n	837e6 <Cl_bc_controller+0x942>
   8371c:	2007170b 	.word	0x2007170b
   83720:	20071709 	.word	0x20071709
   83724:	2007170a 	.word	0x2007170a
   83728:	20071722 	.word	0x20071722
   8372c:	20071720 	.word	0x20071720
   83730:	2007170c 	.word	0x2007170c
   83734:	0009ade1 	.word	0x0009ade1
   83738:	0009ae01 	.word	0x0009ae01
   8373c:	00082c31 	.word	0x00082c31
   83740:	20071934 	.word	0x20071934
   83744:	20071724 	.word	0x20071724
   83748:	20071728 	.word	0x20071728
   8374c:	20071833 	.word	0x20071833
   83750:	20071834 	.word	0x20071834
   83754:	20071714 	.word	0x20071714
											
											case 500:
												if ((fill_time > 75) || (fill_time < 63))
   83758:	4b99      	ldr	r3, [pc, #612]	; (839c0 <Cl_bc_controller+0xb1c>)
   8375a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8375e:	2b4b      	cmp	r3, #75	; 0x4b
   83760:	dc04      	bgt.n	8376c <Cl_bc_controller+0x8c8>
   83762:	4b97      	ldr	r3, [pc, #604]	; (839c0 <Cl_bc_controller+0xb1c>)
   83764:	f9b3 3000 	ldrsh.w	r3, [r3]
   83768:	2b3e      	cmp	r3, #62	; 0x3e
   8376a:	dc0d      	bgt.n	83788 <Cl_bc_controller+0x8e4>
												{
													switchb01alrcnt++ ;
   8376c:	4b95      	ldr	r3, [pc, #596]	; (839c4 <Cl_bc_controller+0xb20>)
   8376e:	681b      	ldr	r3, [r3, #0]
   83770:	3301      	adds	r3, #1
   83772:	4a94      	ldr	r2, [pc, #592]	; (839c4 <Cl_bc_controller+0xb20>)
   83774:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83776:	4b93      	ldr	r3, [pc, #588]	; (839c4 <Cl_bc_controller+0xb20>)
   83778:	681b      	ldr	r3, [r3, #0]
   8377a:	2b03      	cmp	r3, #3
   8377c:	dd08      	ble.n	83790 <Cl_bc_controller+0x8ec>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   8377e:	2101      	movs	r1, #1
   83780:	201a      	movs	r0, #26
   83782:	4b91      	ldr	r3, [pc, #580]	; (839c8 <Cl_bc_controller+0xb24>)
   83784:	4798      	blx	r3
											case 500:
												if ((fill_time > 75) || (fill_time < 63))
												{
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83786:	e003      	b.n	83790 <Cl_bc_controller+0x8ec>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83788:	4b8e      	ldr	r3, [pc, #568]	; (839c4 <Cl_bc_controller+0xb20>)
   8378a:	2200      	movs	r2, #0
   8378c:	601a      	str	r2, [r3, #0]
									//				sv_cntrl_resetyellowalarm();
												}
											break;
   8378e:	e02a      	b.n	837e6 <Cl_bc_controller+0x942>
   83790:	e029      	b.n	837e6 <Cl_bc_controller+0x942>
											
											case 400:
											break;
											
											case 300:
												if ((fill_time > 122) || (fill_time < 110))
   83792:	4b8b      	ldr	r3, [pc, #556]	; (839c0 <Cl_bc_controller+0xb1c>)
   83794:	f9b3 3000 	ldrsh.w	r3, [r3]
   83798:	2b7a      	cmp	r3, #122	; 0x7a
   8379a:	dc04      	bgt.n	837a6 <Cl_bc_controller+0x902>
   8379c:	4b88      	ldr	r3, [pc, #544]	; (839c0 <Cl_bc_controller+0xb1c>)
   8379e:	f9b3 3000 	ldrsh.w	r3, [r3]
   837a2:	2b6d      	cmp	r3, #109	; 0x6d
   837a4:	dc0d      	bgt.n	837c2 <Cl_bc_controller+0x91e>
												{
													
													switchb01alrcnt++ ;
   837a6:	4b87      	ldr	r3, [pc, #540]	; (839c4 <Cl_bc_controller+0xb20>)
   837a8:	681b      	ldr	r3, [r3, #0]
   837aa:	3301      	adds	r3, #1
   837ac:	4a85      	ldr	r2, [pc, #532]	; (839c4 <Cl_bc_controller+0xb20>)
   837ae:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   837b0:	4b84      	ldr	r3, [pc, #528]	; (839c4 <Cl_bc_controller+0xb20>)
   837b2:	681b      	ldr	r3, [r3, #0]
   837b4:	2b03      	cmp	r3, #3
   837b6:	dd08      	ble.n	837ca <Cl_bc_controller+0x926>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   837b8:	2101      	movs	r1, #1
   837ba:	201a      	movs	r0, #26
   837bc:	4b82      	ldr	r3, [pc, #520]	; (839c8 <Cl_bc_controller+0xb24>)
   837be:	4798      	blx	r3
												if ((fill_time > 122) || (fill_time < 110))
												{
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   837c0:	e003      	b.n	837ca <Cl_bc_controller+0x926>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   837c2:	4b80      	ldr	r3, [pc, #512]	; (839c4 <Cl_bc_controller+0xb20>)
   837c4:	2200      	movs	r2, #0
   837c6:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   837c8:	e00d      	b.n	837e6 <Cl_bc_controller+0x942>
   837ca:	e00c      	b.n	837e6 <Cl_bc_controller+0x942>
											
											case 200:
												if (fill_time > 190)
   837cc:	4b7c      	ldr	r3, [pc, #496]	; (839c0 <Cl_bc_controller+0xb1c>)
   837ce:	f9b3 3000 	ldrsh.w	r3, [r3]
   837d2:	2bbe      	cmp	r3, #190	; 0xbe
   837d4:	dd06      	ble.n	837e4 <Cl_bc_controller+0x940>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   837d6:	2101      	movs	r1, #1
   837d8:	201a      	movs	r0, #26
   837da:	4b7b      	ldr	r3, [pc, #492]	; (839c8 <Cl_bc_controller+0xb24>)
   837dc:	4798      	blx	r3
												}
												else
												{
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   837de:	e001      	b.n	837e4 <Cl_bc_controller+0x940>
									//				sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   837e0:	bf00      	nop
   837e2:	e000      	b.n	837e6 <Cl_bc_controller+0x942>
												}
												else
												{
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   837e4:	bf00      	nop
										}
									}

								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   837e6:	2006      	movs	r0, #6
   837e8:	4b78      	ldr	r3, [pc, #480]	; (839cc <Cl_bc_controller+0xb28>)
   837ea:	4798      	blx	r3
   837ec:	4603      	mov	r3, r0
   837ee:	73fb      	strb	r3, [r7, #15]
								
								wait_4_propo_off = 0;
   837f0:	4b77      	ldr	r3, [pc, #476]	; (839d0 <Cl_bc_controller+0xb2c>)
   837f2:	2200      	movs	r2, #0
   837f4:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_activate_valve(VALVE_ID20);
							//	sv_cntrl_activate_valve(VALVE_ID19);
							//	sv_cntrl_activate_valve(VALVE_ID4);
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   837f6:	2204      	movs	r2, #4
   837f8:	4976      	ldr	r1, [pc, #472]	; (839d4 <Cl_bc_controller+0xb30>)
   837fa:	2037      	movs	r0, #55	; 0x37
   837fc:	4b76      	ldr	r3, [pc, #472]	; (839d8 <Cl_bc_controller+0xb34>)
   837fe:	4798      	blx	r3
// 								}
// 								
// 								BC_count =0;
// 								}
//************************************************************************** 22082017*********************								
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83800:	2202      	movs	r2, #2
   83802:	4976      	ldr	r1, [pc, #472]	; (839dc <Cl_bc_controller+0xb38>)
   83804:	2049      	movs	r0, #73	; 0x49
   83806:	4b74      	ldr	r3, [pc, #464]	; (839d8 <Cl_bc_controller+0xb34>)
   83808:	4798      	blx	r3
								CSeventcount++;
   8380a:	4b75      	ldr	r3, [pc, #468]	; (839e0 <Cl_bc_controller+0xb3c>)
   8380c:	681b      	ldr	r3, [r3, #0]
   8380e:	3301      	adds	r3, #1
   83810:	4a73      	ldr	r2, [pc, #460]	; (839e0 <Cl_bc_controller+0xb3c>)
   83812:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83814:	7bfb      	ldrb	r3, [r7, #15]
   83816:	2b00      	cmp	r3, #0
   83818:	d110      	bne.n	8383c <Cl_bc_controller+0x998>
								{
									bc_laststate = bc_state;
   8381a:	4b72      	ldr	r3, [pc, #456]	; (839e4 <Cl_bc_controller+0xb40>)
   8381c:	781a      	ldrb	r2, [r3, #0]
   8381e:	4b72      	ldr	r3, [pc, #456]	; (839e8 <Cl_bc_controller+0xb44>)
   83820:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   83822:	4b70      	ldr	r3, [pc, #448]	; (839e4 <Cl_bc_controller+0xb40>)
   83824:	220e      	movs	r2, #14
   83826:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   83828:	4b65      	ldr	r3, [pc, #404]	; (839c0 <Cl_bc_controller+0xb1c>)
   8382a:	2200      	movs	r2, #0
   8382c:	801a      	strh	r2, [r3, #0]
								}
								break;
   8382e:	e005      	b.n	8383c <Cl_bc_controller+0x998>
								default:break;								
   83830:	bf00      	nop
   83832:	e193      	b.n	83b5c <Cl_bc_controller+0xcb8>
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83834:	bf00      	nop
   83836:	e191      	b.n	83b5c <Cl_bc_controller+0xcb8>
// 								cl_wait(50);
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													
								}
								
								break;
   83838:	bf00      	nop
   8383a:	e18f      	b.n	83b5c <Cl_bc_controller+0xcb8>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
									fill_time = 0;															
								}
								break;
   8383c:	bf00      	nop
								default:break;								
							}
			break;
   8383e:	e18d      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   83840:	79fb      	ldrb	r3, [r7, #7]
   83842:	2b00      	cmp	r3, #0
   83844:	d001      	beq.n	8384a <Cl_bc_controller+0x9a6>
   83846:	2b02      	cmp	r3, #2
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;
								case BC_EVENT_SECOND:
								
								break;
   83848:	e013      	b.n	83872 <Cl_bc_controller+0x9ce>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   8384a:	4b5d      	ldr	r3, [pc, #372]	; (839c0 <Cl_bc_controller+0xb1c>)
   8384c:	f9b3 3000 	ldrsh.w	r3, [r3]
   83850:	b29b      	uxth	r3, r3
   83852:	3301      	adds	r3, #1
   83854:	b29b      	uxth	r3, r3
   83856:	b21a      	sxth	r2, r3
   83858:	4b59      	ldr	r3, [pc, #356]	; (839c0 <Cl_bc_controller+0xb1c>)
   8385a:	801a      	strh	r2, [r3, #0]
// 									wait_counter ++;	// 1 sec wait
// 									
// 								}
// 								else
								{
									wait_counter = 0;
   8385c:	4b63      	ldr	r3, [pc, #396]	; (839ec <Cl_bc_controller+0xb48>)
   8385e:	2200      	movs	r2, #0
   83860:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83862:	4b60      	ldr	r3, [pc, #384]	; (839e4 <Cl_bc_controller+0xb40>)
   83864:	781a      	ldrb	r2, [r3, #0]
   83866:	4b60      	ldr	r3, [pc, #384]	; (839e8 <Cl_bc_controller+0xb44>)
   83868:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   8386a:	4b5e      	ldr	r3, [pc, #376]	; (839e4 <Cl_bc_controller+0xb40>)
   8386c:	220f      	movs	r2, #15
   8386e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83870:	bf00      	nop
								case BC_EVENT_SECOND:
								
								break;
								
							}
			break;
   83872:	e173      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   83874:	79fb      	ldrb	r3, [r7, #7]
   83876:	2b03      	cmp	r3, #3
   83878:	f200 8123 	bhi.w	83ac2 <Cl_bc_controller+0xc1e>
   8387c:	a201      	add	r2, pc, #4	; (adr r2, 83884 <Cl_bc_controller+0x9e0>)
   8387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83882:	bf00      	nop
   83884:	00083895 	.word	0x00083895
   83888:	00083ac3 	.word	0x00083ac3
   8388c:	000838d5 	.word	0x000838d5
   83890:	000838eb 	.word	0x000838eb
							{
								case BC_EVENT_50MS:
								fill_time++;
   83894:	4b4a      	ldr	r3, [pc, #296]	; (839c0 <Cl_bc_controller+0xb1c>)
   83896:	f9b3 3000 	ldrsh.w	r3, [r3]
   8389a:	b29b      	uxth	r3, r3
   8389c:	3301      	adds	r3, #1
   8389e:	b29b      	uxth	r3, r3
   838a0:	b21a      	sxth	r2, r3
   838a2:	4b47      	ldr	r3, [pc, #284]	; (839c0 <Cl_bc_controller+0xb1c>)
   838a4:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   838a6:	4b4a      	ldr	r3, [pc, #296]	; (839d0 <Cl_bc_controller+0xb2c>)
   838a8:	881b      	ldrh	r3, [r3, #0]
   838aa:	3301      	adds	r3, #1
   838ac:	b29a      	uxth	r2, r3
   838ae:	4b48      	ldr	r3, [pc, #288]	; (839d0 <Cl_bc_controller+0xb2c>)
   838b0:	801a      	strh	r2, [r3, #0]
									if (wait_4_propo_off == 42)
   838b2:	4b47      	ldr	r3, [pc, #284]	; (839d0 <Cl_bc_controller+0xb2c>)
   838b4:	881b      	ldrh	r3, [r3, #0]
   838b6:	2b2a      	cmp	r3, #42	; 0x2a
   838b8:	d103      	bne.n	838c2 <Cl_bc_controller+0xa1e>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
   838ba:	2013      	movs	r0, #19
   838bc:	4b4c      	ldr	r3, [pc, #304]	; (839f0 <Cl_bc_controller+0xb4c>)
   838be:	4798      	blx	r3
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   838c0:	e101      	b.n	83ac6 <Cl_bc_controller+0xc22>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
									//	sv_cntrl_activate_valve(VALVE_ID20);
									//	sv_cntrl_activate_valve(VALVE_ID4);
									}
									else if (wait_4_propo_off == 46)
   838c2:	4b43      	ldr	r3, [pc, #268]	; (839d0 <Cl_bc_controller+0xb2c>)
   838c4:	881b      	ldrh	r3, [r3, #0]
   838c6:	2b2e      	cmp	r3, #46	; 0x2e
   838c8:	f040 80fd 	bne.w	83ac6 <Cl_bc_controller+0xc22>
									{
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
   838cc:	2013      	movs	r0, #19
   838ce:	4b49      	ldr	r3, [pc, #292]	; (839f4 <Cl_bc_controller+0xb50>)
   838d0:	4798      	blx	r3
										
									}
								break;
   838d2:	e0f8      	b.n	83ac6 <Cl_bc_controller+0xc22>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
									if(fill_time > 150){
   838d4:	4b3a      	ldr	r3, [pc, #232]	; (839c0 <Cl_bc_controller+0xb1c>)
   838d6:	f9b3 3000 	ldrsh.w	r3, [r3]
   838da:	2b96      	cmp	r3, #150	; 0x96
   838dc:	f340 80f5 	ble.w	83aca <Cl_bc_controller+0xc26>
					//					sv_cntrl_setyellowalarm();
// 										sv_cntrl_activate_valve( VALVE_ID4);
// 										cl_wait(50);
// 										sv_cntrl_deactivate_valve(VALVE_ID4);
// 										cl_wait(50);
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   838e0:	2101      	movs	r1, #1
   838e2:	201a      	movs	r0, #26
   838e4:	4b38      	ldr	r3, [pc, #224]	; (839c8 <Cl_bc_controller+0xb24>)
   838e6:	4798      	blx	r3
										
									}
								
								break;
   838e8:	e0ef      	b.n	83aca <Cl_bc_controller+0xc26>
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								
								 current_sense = true;
   838ea:	4b43      	ldr	r3, [pc, #268]	; (839f8 <Cl_bc_controller+0xb54>)
   838ec:	2201      	movs	r2, #1
   838ee:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   838f0:	4b38      	ldr	r3, [pc, #224]	; (839d4 <Cl_bc_controller+0xb30>)
   838f2:	2200      	movs	r2, #0
   838f4:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   838f6:	4b32      	ldr	r3, [pc, #200]	; (839c0 <Cl_bc_controller+0xb1c>)
   838f8:	f9b3 3000 	ldrsh.w	r3, [r3]
   838fc:	b29a      	uxth	r2, r3
   838fe:	4b35      	ldr	r3, [pc, #212]	; (839d4 <Cl_bc_controller+0xb30>)
   83900:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 21;
   83902:	4b34      	ldr	r3, [pc, #208]	; (839d4 <Cl_bc_controller+0xb30>)
   83904:	2215      	movs	r2, #21
   83906:	709a      	strb	r2, [r3, #2]
									
								cl_tdata_temp.Twobyte = fill_time ;
   83908:	4b2d      	ldr	r3, [pc, #180]	; (839c0 <Cl_bc_controller+0xb1c>)
   8390a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8390e:	b29a      	uxth	r2, r3
   83910:	4b32      	ldr	r3, [pc, #200]	; (839dc <Cl_bc_controller+0xb38>)
   83912:	801a      	strh	r2, [r3, #0]
							//	cl_tdata_temp.word = cl_tdata_temp.word << 16;
									if (bc_flag == 1)
   83914:	4b39      	ldr	r3, [pc, #228]	; (839fc <Cl_bc_controller+0xb58>)
   83916:	781b      	ldrb	r3, [r3, #0]
   83918:	2b01      	cmp	r3, #1
   8391a:	f040 80ad 	bne.w	83a78 <Cl_bc_controller+0xbd4>
									{
										switch (flow_rate)
   8391e:	4b38      	ldr	r3, [pc, #224]	; (83a00 <Cl_bc_controller+0xb5c>)
   83920:	681b      	ldr	r3, [r3, #0]
   83922:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83926:	f000 80a4 	beq.w	83a72 <Cl_bc_controller+0xbce>
   8392a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   8392e:	d806      	bhi.n	8393e <Cl_bc_controller+0xa9a>
   83930:	2bc8      	cmp	r3, #200	; 0xc8
   83932:	f000 8086 	beq.w	83a42 <Cl_bc_controller+0xb9e>
   83936:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8393a:	d065      	beq.n	83a08 <Cl_bc_controller+0xb64>
   8393c:	e09c      	b.n	83a78 <Cl_bc_controller+0xbd4>
   8393e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83942:	d020      	beq.n	83986 <Cl_bc_controller+0xae2>
   83944:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83948:	f040 8096 	bne.w	83a78 <Cl_bc_controller+0xbd4>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   8394c:	4b1c      	ldr	r3, [pc, #112]	; (839c0 <Cl_bc_controller+0xb1c>)
   8394e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83952:	2b37      	cmp	r3, #55	; 0x37
   83954:	dc04      	bgt.n	83960 <Cl_bc_controller+0xabc>
   83956:	4b1a      	ldr	r3, [pc, #104]	; (839c0 <Cl_bc_controller+0xb1c>)
   83958:	f9b3 3000 	ldrsh.w	r3, [r3]
   8395c:	2b2c      	cmp	r3, #44	; 0x2c
   8395e:	dc0d      	bgt.n	8397c <Cl_bc_controller+0xad8>
												{
													
													switchb02alrcnt++ ;
   83960:	4b28      	ldr	r3, [pc, #160]	; (83a04 <Cl_bc_controller+0xb60>)
   83962:	681b      	ldr	r3, [r3, #0]
   83964:	3301      	adds	r3, #1
   83966:	4a27      	ldr	r2, [pc, #156]	; (83a04 <Cl_bc_controller+0xb60>)
   83968:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   8396a:	4b26      	ldr	r3, [pc, #152]	; (83a04 <Cl_bc_controller+0xb60>)
   8396c:	681b      	ldr	r3, [r3, #0]
   8396e:	2b03      	cmp	r3, #3
   83970:	dd08      	ble.n	83984 <Cl_bc_controller+0xae0>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83972:	2101      	movs	r1, #1
   83974:	201a      	movs	r0, #26
   83976:	4b14      	ldr	r3, [pc, #80]	; (839c8 <Cl_bc_controller+0xb24>)
   83978:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   8397a:	e003      	b.n	83984 <Cl_bc_controller+0xae0>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   8397c:	4b21      	ldr	r3, [pc, #132]	; (83a04 <Cl_bc_controller+0xb60>)
   8397e:	2200      	movs	r2, #0
   83980:	601a      	str	r2, [r3, #0]
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83982:	e079      	b.n	83a78 <Cl_bc_controller+0xbd4>
   83984:	e078      	b.n	83a78 <Cl_bc_controller+0xbd4>
											
											case 500:
												if ((fill_time > 75) || (fill_time < 63))
   83986:	4b0e      	ldr	r3, [pc, #56]	; (839c0 <Cl_bc_controller+0xb1c>)
   83988:	f9b3 3000 	ldrsh.w	r3, [r3]
   8398c:	2b4b      	cmp	r3, #75	; 0x4b
   8398e:	dc04      	bgt.n	8399a <Cl_bc_controller+0xaf6>
   83990:	4b0b      	ldr	r3, [pc, #44]	; (839c0 <Cl_bc_controller+0xb1c>)
   83992:	f9b3 3000 	ldrsh.w	r3, [r3]
   83996:	2b3e      	cmp	r3, #62	; 0x3e
   83998:	dc0d      	bgt.n	839b6 <Cl_bc_controller+0xb12>
												{
													
													switchb02alrcnt++ ;
   8399a:	4b1a      	ldr	r3, [pc, #104]	; (83a04 <Cl_bc_controller+0xb60>)
   8399c:	681b      	ldr	r3, [r3, #0]
   8399e:	3301      	adds	r3, #1
   839a0:	4a18      	ldr	r2, [pc, #96]	; (83a04 <Cl_bc_controller+0xb60>)
   839a2:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   839a4:	4b17      	ldr	r3, [pc, #92]	; (83a04 <Cl_bc_controller+0xb60>)
   839a6:	681b      	ldr	r3, [r3, #0]
   839a8:	2b03      	cmp	r3, #3
   839aa:	dd08      	ble.n	839be <Cl_bc_controller+0xb1a>
									//				sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   839ac:	2101      	movs	r1, #1
   839ae:	201a      	movs	r0, #26
   839b0:	4b05      	ldr	r3, [pc, #20]	; (839c8 <Cl_bc_controller+0xb24>)
   839b2:	4798      	blx	r3
												if ((fill_time > 75) || (fill_time < 63))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   839b4:	e003      	b.n	839be <Cl_bc_controller+0xb1a>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   839b6:	4b13      	ldr	r3, [pc, #76]	; (83a04 <Cl_bc_controller+0xb60>)
   839b8:	2200      	movs	r2, #0
   839ba:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   839bc:	e05c      	b.n	83a78 <Cl_bc_controller+0xbd4>
   839be:	e05b      	b.n	83a78 <Cl_bc_controller+0xbd4>
   839c0:	20071722 	.word	0x20071722
   839c4:	20071714 	.word	0x20071714
   839c8:	00082c31 	.word	0x00082c31
   839cc:	0009afc5 	.word	0x0009afc5
   839d0:	20071720 	.word	0x20071720
   839d4:	20071724 	.word	0x20071724
   839d8:	0009cbd5 	.word	0x0009cbd5
   839dc:	20071728 	.word	0x20071728
   839e0:	2007171c 	.word	0x2007171c
   839e4:	20071709 	.word	0x20071709
   839e8:	2007170a 	.word	0x2007170a
   839ec:	2007170c 	.word	0x2007170c
   839f0:	0009ade1 	.word	0x0009ade1
   839f4:	0009ae01 	.word	0x0009ae01
   839f8:	20071934 	.word	0x20071934
   839fc:	20071833 	.word	0x20071833
   83a00:	20071834 	.word	0x20071834
   83a04:	20071718 	.word	0x20071718
											
											case 400:
											break;
											
											case 300:
											if ((fill_time > 122) || (fill_time < 110))
   83a08:	4b57      	ldr	r3, [pc, #348]	; (83b68 <Cl_bc_controller+0xcc4>)
   83a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a0e:	2b7a      	cmp	r3, #122	; 0x7a
   83a10:	dc04      	bgt.n	83a1c <Cl_bc_controller+0xb78>
   83a12:	4b55      	ldr	r3, [pc, #340]	; (83b68 <Cl_bc_controller+0xcc4>)
   83a14:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a18:	2b6d      	cmp	r3, #109	; 0x6d
   83a1a:	dc0d      	bgt.n	83a38 <Cl_bc_controller+0xb94>
											{
												
												switchb02alrcnt++ ;
   83a1c:	4b53      	ldr	r3, [pc, #332]	; (83b6c <Cl_bc_controller+0xcc8>)
   83a1e:	681b      	ldr	r3, [r3, #0]
   83a20:	3301      	adds	r3, #1
   83a22:	4a52      	ldr	r2, [pc, #328]	; (83b6c <Cl_bc_controller+0xcc8>)
   83a24:	6013      	str	r3, [r2, #0]

												if(switchb02alrcnt >3){
   83a26:	4b51      	ldr	r3, [pc, #324]	; (83b6c <Cl_bc_controller+0xcc8>)
   83a28:	681b      	ldr	r3, [r3, #0]
   83a2a:	2b03      	cmp	r3, #3
   83a2c:	dd08      	ble.n	83a40 <Cl_bc_controller+0xb9c>
							//					sv_cntrl_setyellowalarm();
// 												sv_cntrl_activate_valve( VALVE_ID4);
// 												cl_wait(50);
// 												sv_cntrl_deactivate_valve(VALVE_ID4);
// 												cl_wait(50);
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83a2e:	2101      	movs	r1, #1
   83a30:	201a      	movs	r0, #26
   83a32:	4b4f      	ldr	r3, [pc, #316]	; (83b70 <Cl_bc_controller+0xccc>)
   83a34:	4798      	blx	r3
											if ((fill_time > 122) || (fill_time < 110))
											{
												
												switchb02alrcnt++ ;

												if(switchb02alrcnt >3){
   83a36:	e003      	b.n	83a40 <Cl_bc_controller+0xb9c>
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
											}
											else
											{
												switchb02alrcnt = 0;
   83a38:	4b4c      	ldr	r3, [pc, #304]	; (83b6c <Cl_bc_controller+0xcc8>)
   83a3a:	2200      	movs	r2, #0
   83a3c:	601a      	str	r2, [r3, #0]
									//			sv_cntrl_resetyellowalarm();
											}
											break;
   83a3e:	e01b      	b.n	83a78 <Cl_bc_controller+0xbd4>
   83a40:	e01a      	b.n	83a78 <Cl_bc_controller+0xbd4>
											
											case 200:
												if (fill_time > 190)
   83a42:	4b49      	ldr	r3, [pc, #292]	; (83b68 <Cl_bc_controller+0xcc4>)
   83a44:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a48:	2bbe      	cmp	r3, #190	; 0xbe
   83a4a:	dd14      	ble.n	83a76 <Cl_bc_controller+0xbd2>
												{
													sv_cntrl_setyellowalarm();
   83a4c:	4b49      	ldr	r3, [pc, #292]	; (83b74 <Cl_bc_controller+0xcd0>)
   83a4e:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83a50:	2004      	movs	r0, #4
   83a52:	4b49      	ldr	r3, [pc, #292]	; (83b78 <Cl_bc_controller+0xcd4>)
   83a54:	4798      	blx	r3
													cl_wait(50);
   83a56:	2032      	movs	r0, #50	; 0x32
   83a58:	4b48      	ldr	r3, [pc, #288]	; (83b7c <Cl_bc_controller+0xcd8>)
   83a5a:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83a5c:	2004      	movs	r0, #4
   83a5e:	4b48      	ldr	r3, [pc, #288]	; (83b80 <Cl_bc_controller+0xcdc>)
   83a60:	4798      	blx	r3
													cl_wait(50);
   83a62:	2032      	movs	r0, #50	; 0x32
   83a64:	4b45      	ldr	r3, [pc, #276]	; (83b7c <Cl_bc_controller+0xcd8>)
   83a66:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83a68:	2101      	movs	r1, #1
   83a6a:	201a      	movs	r0, #26
   83a6c:	4b40      	ldr	r3, [pc, #256]	; (83b70 <Cl_bc_controller+0xccc>)
   83a6e:	4798      	blx	r3
												}
												else
												{
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83a70:	e001      	b.n	83a76 <Cl_bc_controller+0xbd2>
										//			sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83a72:	bf00      	nop
   83a74:	e000      	b.n	83a78 <Cl_bc_controller+0xbd4>
												}
												else
												{
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83a76:	bf00      	nop
										}
									}
			//				
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83a78:	2005      	movs	r0, #5
   83a7a:	4b42      	ldr	r3, [pc, #264]	; (83b84 <Cl_bc_controller+0xce0>)
   83a7c:	4798      	blx	r3
   83a7e:	4603      	mov	r3, r0
   83a80:	73fb      	strb	r3, [r7, #15]
								wait_4_propo_off =0;
   83a82:	4b41      	ldr	r3, [pc, #260]	; (83b88 <Cl_bc_controller+0xce4>)
   83a84:	2200      	movs	r2, #0
   83a86:	801a      	strh	r2, [r3, #0]
						//		sv_cntrl_activate_valve(VALVE_ID19);
						//		sv_cntrl_activate_valve(VALVE_ID20);
						//		sv_cntrl_activate_valve(VALVE_ID4);
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83a88:	2204      	movs	r2, #4
   83a8a:	4940      	ldr	r1, [pc, #256]	; (83b8c <Cl_bc_controller+0xce8>)
   83a8c:	2037      	movs	r0, #55	; 0x37
   83a8e:	4b40      	ldr	r3, [pc, #256]	; (83b90 <Cl_bc_controller+0xcec>)
   83a90:	4798      	blx	r3
// 									
// 									BC_count =0;
// 								}
								
//************************************************************************** 22082017*********************							
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83a92:	2202      	movs	r2, #2
   83a94:	493f      	ldr	r1, [pc, #252]	; (83b94 <Cl_bc_controller+0xcf0>)
   83a96:	2049      	movs	r0, #73	; 0x49
   83a98:	4b3d      	ldr	r3, [pc, #244]	; (83b90 <Cl_bc_controller+0xcec>)
   83a9a:	4798      	blx	r3
								CSeventcount++;
   83a9c:	4b3e      	ldr	r3, [pc, #248]	; (83b98 <Cl_bc_controller+0xcf4>)
   83a9e:	681b      	ldr	r3, [r3, #0]
   83aa0:	3301      	adds	r3, #1
   83aa2:	4a3d      	ldr	r2, [pc, #244]	; (83b98 <Cl_bc_controller+0xcf4>)
   83aa4:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83aa6:	7bfb      	ldrb	r3, [r7, #15]
   83aa8:	2b00      	cmp	r3, #0
   83aaa:	d110      	bne.n	83ace <Cl_bc_controller+0xc2a>
								{
									bc_laststate = bc_state;
   83aac:	4b3b      	ldr	r3, [pc, #236]	; (83b9c <Cl_bc_controller+0xcf8>)
   83aae:	781a      	ldrb	r2, [r3, #0]
   83ab0:	4b3b      	ldr	r3, [pc, #236]	; (83ba0 <Cl_bc_controller+0xcfc>)
   83ab2:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83ab4:	4b2c      	ldr	r3, [pc, #176]	; (83b68 <Cl_bc_controller+0xcc4>)
   83ab6:	2200      	movs	r2, #0
   83ab8:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83aba:	4b38      	ldr	r3, [pc, #224]	; (83b9c <Cl_bc_controller+0xcf8>)
   83abc:	220c      	movs	r2, #12
   83abe:	701a      	strb	r2, [r3, #0]
								}
								break;
   83ac0:	e005      	b.n	83ace <Cl_bc_controller+0xc2a>
								default:break;
   83ac2:	bf00      	nop
   83ac4:	e04a      	b.n	83b5c <Cl_bc_controller+0xcb8>
									//	sv_cntrl_deactivate_valve(VALVE_ID4);
									//	sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83ac6:	bf00      	nop
   83ac8:	e048      	b.n	83b5c <Cl_bc_controller+0xcb8>
// 										cl_wait(50);
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
										
									}
								
								break;
   83aca:	bf00      	nop
   83acc:	e046      	b.n	83b5c <Cl_bc_controller+0xcb8>
								{
									bc_laststate = bc_state;
									fill_time = 0;
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
								}
								break;
   83ace:	bf00      	nop
								default:break;
							}
			break;
   83ad0:	e044      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   83ad2:	79fb      	ldrb	r3, [r7, #7]
   83ad4:	2b04      	cmp	r3, #4
   83ad6:	d00b      	beq.n	83af0 <Cl_bc_controller+0xc4c>
   83ad8:	2b07      	cmp	r3, #7
   83ada:	d000      	beq.n	83ade <Cl_bc_controller+0xc3a>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83adc:	e01a      	b.n	83b14 <Cl_bc_controller+0xc70>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83ade:	2005      	movs	r0, #5
   83ae0:	4b28      	ldr	r3, [pc, #160]	; (83b84 <Cl_bc_controller+0xce0>)
   83ae2:	4798      	blx	r3
   83ae4:	4603      	mov	r3, r0
   83ae6:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   83ae8:	4b2c      	ldr	r3, [pc, #176]	; (83b9c <Cl_bc_controller+0xcf8>)
   83aea:	2211      	movs	r2, #17
   83aec:	701a      	strb	r2, [r3, #0]
								break;
   83aee:	e011      	b.n	83b14 <Cl_bc_controller+0xc70>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83af0:	2007      	movs	r0, #7
   83af2:	4b24      	ldr	r3, [pc, #144]	; (83b84 <Cl_bc_controller+0xce0>)
   83af4:	4798      	blx	r3
   83af6:	4603      	mov	r3, r0
   83af8:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83afa:	4b28      	ldr	r3, [pc, #160]	; (83b9c <Cl_bc_controller+0xcf8>)
   83afc:	781a      	ldrb	r2, [r3, #0]
   83afe:	4b28      	ldr	r3, [pc, #160]	; (83ba0 <Cl_bc_controller+0xcfc>)
   83b00:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83b02:	4b26      	ldr	r3, [pc, #152]	; (83b9c <Cl_bc_controller+0xcf8>)
   83b04:	2202      	movs	r2, #2
   83b06:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83b08:	2013      	movs	r0, #19
   83b0a:	4b1b      	ldr	r3, [pc, #108]	; (83b78 <Cl_bc_controller+0xcd4>)
   83b0c:	4798      	blx	r3
   83b0e:	4603      	mov	r3, r0
   83b10:	73fb      	strb	r3, [r7, #15]
								break;
   83b12:	bf00      	nop
								default:break;
						
							}
						
			break;
   83b14:	e022      	b.n	83b5c <Cl_bc_controller+0xcb8>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   83b16:	79fb      	ldrb	r3, [r7, #7]
   83b18:	2b04      	cmp	r3, #4
   83b1a:	d00b      	beq.n	83b34 <Cl_bc_controller+0xc90>
   83b1c:	2b09      	cmp	r3, #9
   83b1e:	d000      	beq.n	83b22 <Cl_bc_controller+0xc7e>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   83b20:	e01a      	b.n	83b58 <Cl_bc_controller+0xcb4>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83b22:	2006      	movs	r0, #6
   83b24:	4b17      	ldr	r3, [pc, #92]	; (83b84 <Cl_bc_controller+0xce0>)
   83b26:	4798      	blx	r3
   83b28:	4603      	mov	r3, r0
   83b2a:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   83b2c:	4b1b      	ldr	r3, [pc, #108]	; (83b9c <Cl_bc_controller+0xcf8>)
   83b2e:	2213      	movs	r2, #19
   83b30:	701a      	strb	r2, [r3, #0]
								break;
   83b32:	e011      	b.n	83b58 <Cl_bc_controller+0xcb4>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83b34:	2007      	movs	r0, #7
   83b36:	4b13      	ldr	r3, [pc, #76]	; (83b84 <Cl_bc_controller+0xce0>)
   83b38:	4798      	blx	r3
   83b3a:	4603      	mov	r3, r0
   83b3c:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83b3e:	4b17      	ldr	r3, [pc, #92]	; (83b9c <Cl_bc_controller+0xcf8>)
   83b40:	781a      	ldrb	r2, [r3, #0]
   83b42:	4b17      	ldr	r3, [pc, #92]	; (83ba0 <Cl_bc_controller+0xcfc>)
   83b44:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83b46:	2013      	movs	r0, #19
   83b48:	4b0b      	ldr	r3, [pc, #44]	; (83b78 <Cl_bc_controller+0xcd4>)
   83b4a:	4798      	blx	r3
   83b4c:	4603      	mov	r3, r0
   83b4e:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83b50:	4b12      	ldr	r3, [pc, #72]	; (83b9c <Cl_bc_controller+0xcf8>)
   83b52:	2202      	movs	r2, #2
   83b54:	701a      	strb	r2, [r3, #0]
								break;
   83b56:	bf00      	nop
								default:break;
								
							}
			break;
   83b58:	e000      	b.n	83b5c <Cl_bc_controller+0xcb8>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83b5a:	bf00      	nop
	}

	
	return 0;
   83b5c:	2300      	movs	r3, #0
}
   83b5e:	4618      	mov	r0, r3
   83b60:	3710      	adds	r7, #16
   83b62:	46bd      	mov	sp, r7
   83b64:	bd80      	pop	{r7, pc}
   83b66:	bf00      	nop
   83b68:	20071722 	.word	0x20071722
   83b6c:	20071718 	.word	0x20071718
   83b70:	00082c31 	.word	0x00082c31
   83b74:	0009b041 	.word	0x0009b041
   83b78:	0009ade1 	.word	0x0009ade1
   83b7c:	00093ea9 	.word	0x00093ea9
   83b80:	0009ae01 	.word	0x0009ae01
   83b84:	0009afc5 	.word	0x0009afc5
   83b88:	20071720 	.word	0x20071720
   83b8c:	20071724 	.word	0x20071724
   83b90:	0009cbd5 	.word	0x0009cbd5
   83b94:	20071728 	.word	0x20071728
   83b98:	2007171c 	.word	0x2007171c
   83b9c:	20071709 	.word	0x20071709
   83ba0:	2007170a 	.word	0x2007170a

00083ba4 <hep_calibration>:

//*************************************************** till this************


Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
   83ba4:	b480      	push	{r7}
   83ba6:	b085      	sub	sp, #20
   83ba8:	af00      	add	r7, sp, #0
   83baa:	6078      	str	r0, [r7, #4]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   83bac:	2300      	movs	r3, #0
   83bae:	60fb      	str	r3, [r7, #12]
   83bb0:	e061      	b.n	83c76 <hep_calibration+0xd2>
	{
		if (inpt_ml == hp[i].ml)
   83bb2:	4a35      	ldr	r2, [pc, #212]	; (83c88 <hep_calibration+0xe4>)
   83bb4:	68fb      	ldr	r3, [r7, #12]
   83bb6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83bba:	b29b      	uxth	r3, r3
   83bbc:	461a      	mov	r2, r3
   83bbe:	687b      	ldr	r3, [r7, #4]
   83bc0:	429a      	cmp	r2, r3
   83bc2:	d10b      	bne.n	83bdc <hep_calibration+0x38>
		{
			hep_speed=hp[i].speed;
   83bc4:	4a30      	ldr	r2, [pc, #192]	; (83c88 <hep_calibration+0xe4>)
   83bc6:	68fb      	ldr	r3, [r7, #12]
   83bc8:	009b      	lsls	r3, r3, #2
   83bca:	4413      	add	r3, r2
   83bcc:	885b      	ldrh	r3, [r3, #2]
   83bce:	b29b      	uxth	r3, r3
   83bd0:	461a      	mov	r2, r3
   83bd2:	4b2e      	ldr	r3, [pc, #184]	; (83c8c <hep_calibration+0xe8>)
   83bd4:	601a      	str	r2, [r3, #0]
			return hep_speed;
   83bd6:	4b2d      	ldr	r3, [pc, #180]	; (83c8c <hep_calibration+0xe8>)
   83bd8:	681b      	ldr	r3, [r3, #0]
   83bda:	e04f      	b.n	83c7c <hep_calibration+0xd8>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
		else if ((inpt_ml > hp[i].ml) && (inpt_ml < hp[i+1].ml))
   83bdc:	4a2a      	ldr	r2, [pc, #168]	; (83c88 <hep_calibration+0xe4>)
   83bde:	68fb      	ldr	r3, [r7, #12]
   83be0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83be4:	b29b      	uxth	r3, r3
   83be6:	461a      	mov	r2, r3
   83be8:	687b      	ldr	r3, [r7, #4]
   83bea:	429a      	cmp	r2, r3
   83bec:	d240      	bcs.n	83c70 <hep_calibration+0xcc>
   83bee:	68fb      	ldr	r3, [r7, #12]
   83bf0:	3301      	adds	r3, #1
   83bf2:	4a25      	ldr	r2, [pc, #148]	; (83c88 <hep_calibration+0xe4>)
   83bf4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83bf8:	b29b      	uxth	r3, r3
   83bfa:	461a      	mov	r2, r3
   83bfc:	687b      	ldr	r3, [r7, #4]
   83bfe:	429a      	cmp	r2, r3
   83c00:	d936      	bls.n	83c70 <hep_calibration+0xcc>
		{
			slope = ((hp[i+1].ml-hp[i].ml)/(hp[i+1].speed-hp[i].speed));
   83c02:	68fb      	ldr	r3, [r7, #12]
   83c04:	3301      	adds	r3, #1
   83c06:	4a20      	ldr	r2, [pc, #128]	; (83c88 <hep_calibration+0xe4>)
   83c08:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83c0c:	b29b      	uxth	r3, r3
   83c0e:	4619      	mov	r1, r3
   83c10:	4a1d      	ldr	r2, [pc, #116]	; (83c88 <hep_calibration+0xe4>)
   83c12:	68fb      	ldr	r3, [r7, #12]
   83c14:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83c18:	b29b      	uxth	r3, r3
   83c1a:	1aca      	subs	r2, r1, r3
   83c1c:	68fb      	ldr	r3, [r7, #12]
   83c1e:	3301      	adds	r3, #1
   83c20:	4919      	ldr	r1, [pc, #100]	; (83c88 <hep_calibration+0xe4>)
   83c22:	009b      	lsls	r3, r3, #2
   83c24:	440b      	add	r3, r1
   83c26:	885b      	ldrh	r3, [r3, #2]
   83c28:	b29b      	uxth	r3, r3
   83c2a:	4618      	mov	r0, r3
   83c2c:	4916      	ldr	r1, [pc, #88]	; (83c88 <hep_calibration+0xe4>)
   83c2e:	68fb      	ldr	r3, [r7, #12]
   83c30:	009b      	lsls	r3, r3, #2
   83c32:	440b      	add	r3, r1
   83c34:	885b      	ldrh	r3, [r3, #2]
   83c36:	b29b      	uxth	r3, r3
   83c38:	1ac3      	subs	r3, r0, r3
   83c3a:	fb92 f3f3 	sdiv	r3, r2, r3
   83c3e:	817b      	strh	r3, [r7, #10]
			hep_speed = slope * (inpt_ml-hp[i].ml) + hp[i].speed;
   83c40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   83c44:	4910      	ldr	r1, [pc, #64]	; (83c88 <hep_calibration+0xe4>)
   83c46:	68fa      	ldr	r2, [r7, #12]
   83c48:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   83c4c:	b292      	uxth	r2, r2
   83c4e:	4611      	mov	r1, r2
   83c50:	687a      	ldr	r2, [r7, #4]
   83c52:	1a52      	subs	r2, r2, r1
   83c54:	fb02 f203 	mul.w	r2, r2, r3
   83c58:	490b      	ldr	r1, [pc, #44]	; (83c88 <hep_calibration+0xe4>)
   83c5a:	68fb      	ldr	r3, [r7, #12]
   83c5c:	009b      	lsls	r3, r3, #2
   83c5e:	440b      	add	r3, r1
   83c60:	885b      	ldrh	r3, [r3, #2]
   83c62:	b29b      	uxth	r3, r3
   83c64:	4413      	add	r3, r2
   83c66:	4a09      	ldr	r2, [pc, #36]	; (83c8c <hep_calibration+0xe8>)
   83c68:	6013      	str	r3, [r2, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			return hep_speed;
   83c6a:	4b08      	ldr	r3, [pc, #32]	; (83c8c <hep_calibration+0xe8>)
   83c6c:	681b      	ldr	r3, [r3, #0]
   83c6e:	e005      	b.n	83c7c <hep_calibration+0xd8>
Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   83c70:	68fb      	ldr	r3, [r7, #12]
   83c72:	3301      	adds	r3, #1
   83c74:	60fb      	str	r3, [r7, #12]
   83c76:	68fb      	ldr	r3, [r7, #12]
   83c78:	2b31      	cmp	r3, #49	; 0x31
   83c7a:	dd9a      	ble.n	83bb2 <hep_calibration+0xe>
			return hep_speed;
			break;
		}
	}
	
}
   83c7c:	4618      	mov	r0, r3
   83c7e:	3714      	adds	r7, #20
   83c80:	46bd      	mov	sp, r7
   83c82:	bc80      	pop	{r7}
   83c84:	4770      	bx	lr
   83c86:	bf00      	nop
   83c88:	2007011c 	.word	0x2007011c
   83c8c:	200720b4 	.word	0x200720b4

00083c90 <calibration_apt>:
void calibration_apt(int16_t sensordata)
{
   83c90:	b590      	push	{r4, r7, lr}
   83c92:	b085      	sub	sp, #20
   83c94:	af00      	add	r7, sp, #0
   83c96:	4603      	mov	r3, r0
   83c98:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83c9a:	2300      	movs	r3, #0
   83c9c:	60fb      	str	r3, [r7, #12]
   83c9e:	e0a1      	b.n	83de4 <calibration_apt+0x154>
	{
		if (sensordata == apt2[i].millivolt)
   83ca0:	4a54      	ldr	r2, [pc, #336]	; (83df4 <calibration_apt+0x164>)
   83ca2:	68fb      	ldr	r3, [r7, #12]
   83ca4:	009b      	lsls	r3, r3, #2
   83ca6:	4413      	add	r3, r2
   83ca8:	885b      	ldrh	r3, [r3, #2]
   83caa:	b21b      	sxth	r3, r3
   83cac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83cb0:	429a      	cmp	r2, r3
   83cb2:	d10b      	bne.n	83ccc <calibration_apt+0x3c>
		{
			pressure_final_apt=apt2[i].pressure;
   83cb4:	4a4f      	ldr	r2, [pc, #316]	; (83df4 <calibration_apt+0x164>)
   83cb6:	68fb      	ldr	r3, [r7, #12]
   83cb8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83cbc:	b21a      	sxth	r2, r3
   83cbe:	4b4e      	ldr	r3, [pc, #312]	; (83df8 <calibration_apt+0x168>)
   83cc0:	4610      	mov	r0, r2
   83cc2:	4798      	blx	r3
   83cc4:	4602      	mov	r2, r0
   83cc6:	4b4d      	ldr	r3, [pc, #308]	; (83dfc <calibration_apt+0x16c>)
   83cc8:	601a      	str	r2, [r3, #0]
   83cca:	e088      	b.n	83dde <calibration_apt+0x14e>
		}
		else if ((sensordata > apt2[i].millivolt) && (sensordata < apt2[i+1].millivolt))
   83ccc:	4a49      	ldr	r2, [pc, #292]	; (83df4 <calibration_apt+0x164>)
   83cce:	68fb      	ldr	r3, [r7, #12]
   83cd0:	009b      	lsls	r3, r3, #2
   83cd2:	4413      	add	r3, r2
   83cd4:	885b      	ldrh	r3, [r3, #2]
   83cd6:	b21b      	sxth	r3, r3
   83cd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83cdc:	429a      	cmp	r2, r3
   83cde:	dd5b      	ble.n	83d98 <calibration_apt+0x108>
   83ce0:	68fb      	ldr	r3, [r7, #12]
   83ce2:	3301      	adds	r3, #1
   83ce4:	4a43      	ldr	r2, [pc, #268]	; (83df4 <calibration_apt+0x164>)
   83ce6:	009b      	lsls	r3, r3, #2
   83ce8:	4413      	add	r3, r2
   83cea:	885b      	ldrh	r3, [r3, #2]
   83cec:	b21b      	sxth	r3, r3
   83cee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83cf2:	429a      	cmp	r2, r3
   83cf4:	da50      	bge.n	83d98 <calibration_apt+0x108>
		{
			slope = ((apt2[i+1].pressure-apt2[i].pressure)*100/(apt2[i+1].millivolt-apt2[i].millivolt));
   83cf6:	68fb      	ldr	r3, [r7, #12]
   83cf8:	3301      	adds	r3, #1
   83cfa:	4a3e      	ldr	r2, [pc, #248]	; (83df4 <calibration_apt+0x164>)
   83cfc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83d00:	b21b      	sxth	r3, r3
   83d02:	4619      	mov	r1, r3
   83d04:	4a3b      	ldr	r2, [pc, #236]	; (83df4 <calibration_apt+0x164>)
   83d06:	68fb      	ldr	r3, [r7, #12]
   83d08:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83d0c:	b21b      	sxth	r3, r3
   83d0e:	1acb      	subs	r3, r1, r3
   83d10:	2264      	movs	r2, #100	; 0x64
   83d12:	fb02 f203 	mul.w	r2, r2, r3
   83d16:	68fb      	ldr	r3, [r7, #12]
   83d18:	3301      	adds	r3, #1
   83d1a:	4936      	ldr	r1, [pc, #216]	; (83df4 <calibration_apt+0x164>)
   83d1c:	009b      	lsls	r3, r3, #2
   83d1e:	440b      	add	r3, r1
   83d20:	885b      	ldrh	r3, [r3, #2]
   83d22:	b21b      	sxth	r3, r3
   83d24:	4618      	mov	r0, r3
   83d26:	4933      	ldr	r1, [pc, #204]	; (83df4 <calibration_apt+0x164>)
   83d28:	68fb      	ldr	r3, [r7, #12]
   83d2a:	009b      	lsls	r3, r3, #2
   83d2c:	440b      	add	r3, r1
   83d2e:	885b      	ldrh	r3, [r3, #2]
   83d30:	b21b      	sxth	r3, r3
   83d32:	1ac3      	subs	r3, r0, r3
   83d34:	fb92 f2f3 	sdiv	r2, r2, r3
   83d38:	4b2f      	ldr	r3, [pc, #188]	; (83df8 <calibration_apt+0x168>)
   83d3a:	4610      	mov	r0, r2
   83d3c:	4798      	blx	r3
   83d3e:	4603      	mov	r3, r0
   83d40:	60bb      	str	r3, [r7, #8]
			pressure_final_apt = (slope * (sensordata-apt2[i].millivolt))/100 + apt2[i].pressure;
   83d42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83d46:	492b      	ldr	r1, [pc, #172]	; (83df4 <calibration_apt+0x164>)
   83d48:	68fb      	ldr	r3, [r7, #12]
   83d4a:	009b      	lsls	r3, r3, #2
   83d4c:	440b      	add	r3, r1
   83d4e:	885b      	ldrh	r3, [r3, #2]
   83d50:	b21b      	sxth	r3, r3
   83d52:	1ad2      	subs	r2, r2, r3
   83d54:	4b28      	ldr	r3, [pc, #160]	; (83df8 <calibration_apt+0x168>)
   83d56:	4610      	mov	r0, r2
   83d58:	4798      	blx	r3
   83d5a:	4602      	mov	r2, r0
   83d5c:	4b28      	ldr	r3, [pc, #160]	; (83e00 <calibration_apt+0x170>)
   83d5e:	68b9      	ldr	r1, [r7, #8]
   83d60:	4610      	mov	r0, r2
   83d62:	4798      	blx	r3
   83d64:	4603      	mov	r3, r0
   83d66:	461a      	mov	r2, r3
   83d68:	4b26      	ldr	r3, [pc, #152]	; (83e04 <calibration_apt+0x174>)
   83d6a:	4927      	ldr	r1, [pc, #156]	; (83e08 <calibration_apt+0x178>)
   83d6c:	4610      	mov	r0, r2
   83d6e:	4798      	blx	r3
   83d70:	4603      	mov	r3, r0
   83d72:	461c      	mov	r4, r3
   83d74:	4a1f      	ldr	r2, [pc, #124]	; (83df4 <calibration_apt+0x164>)
   83d76:	68fb      	ldr	r3, [r7, #12]
   83d78:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83d7c:	b21a      	sxth	r2, r3
   83d7e:	4b1e      	ldr	r3, [pc, #120]	; (83df8 <calibration_apt+0x168>)
   83d80:	4610      	mov	r0, r2
   83d82:	4798      	blx	r3
   83d84:	4602      	mov	r2, r0
   83d86:	4b21      	ldr	r3, [pc, #132]	; (83e0c <calibration_apt+0x17c>)
   83d88:	4611      	mov	r1, r2
   83d8a:	4620      	mov	r0, r4
   83d8c:	4798      	blx	r3
   83d8e:	4603      	mov	r3, r0
   83d90:	461a      	mov	r2, r3
   83d92:	4b1a      	ldr	r3, [pc, #104]	; (83dfc <calibration_apt+0x16c>)
   83d94:	601a      	str	r2, [r3, #0]
   83d96:	e022      	b.n	83dde <calibration_apt+0x14e>
		}
		else if(sensordata < apt2[0].millivolt)
   83d98:	4b16      	ldr	r3, [pc, #88]	; (83df4 <calibration_apt+0x164>)
   83d9a:	885b      	ldrh	r3, [r3, #2]
   83d9c:	b21b      	sxth	r3, r3
   83d9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83da2:	429a      	cmp	r2, r3
   83da4:	da09      	bge.n	83dba <calibration_apt+0x12a>
		{
			pressure_final_apt = apt2[0].pressure;
   83da6:	4b13      	ldr	r3, [pc, #76]	; (83df4 <calibration_apt+0x164>)
   83da8:	881b      	ldrh	r3, [r3, #0]
   83daa:	b21a      	sxth	r2, r3
   83dac:	4b12      	ldr	r3, [pc, #72]	; (83df8 <calibration_apt+0x168>)
   83dae:	4610      	mov	r0, r2
   83db0:	4798      	blx	r3
   83db2:	4602      	mov	r2, r0
   83db4:	4b11      	ldr	r3, [pc, #68]	; (83dfc <calibration_apt+0x16c>)
   83db6:	601a      	str	r2, [r3, #0]
   83db8:	e011      	b.n	83dde <calibration_apt+0x14e>
		}
		else  if(sensordata > apt2[25].millivolt)
   83dba:	4b0e      	ldr	r3, [pc, #56]	; (83df4 <calibration_apt+0x164>)
   83dbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   83dc0:	b21b      	sxth	r3, r3
   83dc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83dc6:	429a      	cmp	r2, r3
   83dc8:	dd09      	ble.n	83dde <calibration_apt+0x14e>
		{
			pressure_final_apt = apt2[25].pressure;
   83dca:	4b0a      	ldr	r3, [pc, #40]	; (83df4 <calibration_apt+0x164>)
   83dcc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   83dd0:	b21a      	sxth	r2, r3
   83dd2:	4b09      	ldr	r3, [pc, #36]	; (83df8 <calibration_apt+0x168>)
   83dd4:	4610      	mov	r0, r2
   83dd6:	4798      	blx	r3
   83dd8:	4602      	mov	r2, r0
   83dda:	4b08      	ldr	r3, [pc, #32]	; (83dfc <calibration_apt+0x16c>)
   83ddc:	601a      	str	r2, [r3, #0]
void calibration_apt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83dde:	68fb      	ldr	r3, [r7, #12]
   83de0:	3301      	adds	r3, #1
   83de2:	60fb      	str	r3, [r7, #12]
   83de4:	68fb      	ldr	r3, [r7, #12]
   83de6:	2b19      	cmp	r3, #25
   83de8:	f77f af5a 	ble.w	83ca0 <calibration_apt+0x10>
		{
			pressure_final_apt = apt2[25].pressure;
		}
		
	}
}
   83dec:	bf00      	nop
   83dee:	3714      	adds	r7, #20
   83df0:	46bd      	mov	sp, r7
   83df2:	bd90      	pop	{r4, r7, pc}
   83df4:	200701e4 	.word	0x200701e4
   83df8:	000a7f01 	.word	0x000a7f01
   83dfc:	200720b0 	.word	0x200720b0
   83e00:	000a7fa9 	.word	0x000a7fa9
   83e04:	000a8111 	.word	0x000a8111
   83e08:	42c80000 	.word	0x42c80000
   83e0c:	000a7d99 	.word	0x000a7d99

00083e10 <calibration_vpt>:
void calibration_vpt(int16_t sensordata)
{
   83e10:	b590      	push	{r4, r7, lr}
   83e12:	b085      	sub	sp, #20
   83e14:	af00      	add	r7, sp, #0
   83e16:	4603      	mov	r3, r0
   83e18:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83e1a:	2300      	movs	r3, #0
   83e1c:	60fb      	str	r3, [r7, #12]
   83e1e:	e0a1      	b.n	83f64 <calibration_vpt+0x154>
	{
		if (sensordata == vpt2[i].millivolt)
   83e20:	4a54      	ldr	r2, [pc, #336]	; (83f74 <calibration_vpt+0x164>)
   83e22:	68fb      	ldr	r3, [r7, #12]
   83e24:	009b      	lsls	r3, r3, #2
   83e26:	4413      	add	r3, r2
   83e28:	885b      	ldrh	r3, [r3, #2]
   83e2a:	b21b      	sxth	r3, r3
   83e2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83e30:	429a      	cmp	r2, r3
   83e32:	d10b      	bne.n	83e4c <calibration_vpt+0x3c>
		{
			pressure_final_vpt=vpt2[i].pressure;
   83e34:	4a4f      	ldr	r2, [pc, #316]	; (83f74 <calibration_vpt+0x164>)
   83e36:	68fb      	ldr	r3, [r7, #12]
   83e38:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83e3c:	b21a      	sxth	r2, r3
   83e3e:	4b4e      	ldr	r3, [pc, #312]	; (83f78 <calibration_vpt+0x168>)
   83e40:	4610      	mov	r0, r2
   83e42:	4798      	blx	r3
   83e44:	4602      	mov	r2, r0
   83e46:	4b4d      	ldr	r3, [pc, #308]	; (83f7c <calibration_vpt+0x16c>)
   83e48:	601a      	str	r2, [r3, #0]
			break;
   83e4a:	e08f      	b.n	83f6c <calibration_vpt+0x15c>
		}
		else if ((sensordata > vpt2[i].millivolt) && (sensordata < vpt2[i+1].millivolt))
   83e4c:	4a49      	ldr	r2, [pc, #292]	; (83f74 <calibration_vpt+0x164>)
   83e4e:	68fb      	ldr	r3, [r7, #12]
   83e50:	009b      	lsls	r3, r3, #2
   83e52:	4413      	add	r3, r2
   83e54:	885b      	ldrh	r3, [r3, #2]
   83e56:	b21b      	sxth	r3, r3
   83e58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83e5c:	429a      	cmp	r2, r3
   83e5e:	dd5b      	ble.n	83f18 <calibration_vpt+0x108>
   83e60:	68fb      	ldr	r3, [r7, #12]
   83e62:	3301      	adds	r3, #1
   83e64:	4a43      	ldr	r2, [pc, #268]	; (83f74 <calibration_vpt+0x164>)
   83e66:	009b      	lsls	r3, r3, #2
   83e68:	4413      	add	r3, r2
   83e6a:	885b      	ldrh	r3, [r3, #2]
   83e6c:	b21b      	sxth	r3, r3
   83e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83e72:	429a      	cmp	r2, r3
   83e74:	da50      	bge.n	83f18 <calibration_vpt+0x108>
		{
			slope = ((vpt2[i+1].pressure-vpt2[i].pressure) * 100/(vpt2[i+1].millivolt-vpt2[i].millivolt));
   83e76:	68fb      	ldr	r3, [r7, #12]
   83e78:	3301      	adds	r3, #1
   83e7a:	4a3e      	ldr	r2, [pc, #248]	; (83f74 <calibration_vpt+0x164>)
   83e7c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83e80:	b21b      	sxth	r3, r3
   83e82:	4619      	mov	r1, r3
   83e84:	4a3b      	ldr	r2, [pc, #236]	; (83f74 <calibration_vpt+0x164>)
   83e86:	68fb      	ldr	r3, [r7, #12]
   83e88:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83e8c:	b21b      	sxth	r3, r3
   83e8e:	1acb      	subs	r3, r1, r3
   83e90:	2264      	movs	r2, #100	; 0x64
   83e92:	fb02 f203 	mul.w	r2, r2, r3
   83e96:	68fb      	ldr	r3, [r7, #12]
   83e98:	3301      	adds	r3, #1
   83e9a:	4936      	ldr	r1, [pc, #216]	; (83f74 <calibration_vpt+0x164>)
   83e9c:	009b      	lsls	r3, r3, #2
   83e9e:	440b      	add	r3, r1
   83ea0:	885b      	ldrh	r3, [r3, #2]
   83ea2:	b21b      	sxth	r3, r3
   83ea4:	4618      	mov	r0, r3
   83ea6:	4933      	ldr	r1, [pc, #204]	; (83f74 <calibration_vpt+0x164>)
   83ea8:	68fb      	ldr	r3, [r7, #12]
   83eaa:	009b      	lsls	r3, r3, #2
   83eac:	440b      	add	r3, r1
   83eae:	885b      	ldrh	r3, [r3, #2]
   83eb0:	b21b      	sxth	r3, r3
   83eb2:	1ac3      	subs	r3, r0, r3
   83eb4:	fb92 f2f3 	sdiv	r2, r2, r3
   83eb8:	4b2f      	ldr	r3, [pc, #188]	; (83f78 <calibration_vpt+0x168>)
   83eba:	4610      	mov	r0, r2
   83ebc:	4798      	blx	r3
   83ebe:	4603      	mov	r3, r0
   83ec0:	60bb      	str	r3, [r7, #8]
			pressure_final_vpt = (slope *(sensordata-vpt2[i].millivolt))/100 + vpt2[i].pressure;
   83ec2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83ec6:	492b      	ldr	r1, [pc, #172]	; (83f74 <calibration_vpt+0x164>)
   83ec8:	68fb      	ldr	r3, [r7, #12]
   83eca:	009b      	lsls	r3, r3, #2
   83ecc:	440b      	add	r3, r1
   83ece:	885b      	ldrh	r3, [r3, #2]
   83ed0:	b21b      	sxth	r3, r3
   83ed2:	1ad2      	subs	r2, r2, r3
   83ed4:	4b28      	ldr	r3, [pc, #160]	; (83f78 <calibration_vpt+0x168>)
   83ed6:	4610      	mov	r0, r2
   83ed8:	4798      	blx	r3
   83eda:	4602      	mov	r2, r0
   83edc:	4b28      	ldr	r3, [pc, #160]	; (83f80 <calibration_vpt+0x170>)
   83ede:	68b9      	ldr	r1, [r7, #8]
   83ee0:	4610      	mov	r0, r2
   83ee2:	4798      	blx	r3
   83ee4:	4603      	mov	r3, r0
   83ee6:	461a      	mov	r2, r3
   83ee8:	4b26      	ldr	r3, [pc, #152]	; (83f84 <calibration_vpt+0x174>)
   83eea:	4927      	ldr	r1, [pc, #156]	; (83f88 <calibration_vpt+0x178>)
   83eec:	4610      	mov	r0, r2
   83eee:	4798      	blx	r3
   83ef0:	4603      	mov	r3, r0
   83ef2:	461c      	mov	r4, r3
   83ef4:	4a1f      	ldr	r2, [pc, #124]	; (83f74 <calibration_vpt+0x164>)
   83ef6:	68fb      	ldr	r3, [r7, #12]
   83ef8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83efc:	b21a      	sxth	r2, r3
   83efe:	4b1e      	ldr	r3, [pc, #120]	; (83f78 <calibration_vpt+0x168>)
   83f00:	4610      	mov	r0, r2
   83f02:	4798      	blx	r3
   83f04:	4602      	mov	r2, r0
   83f06:	4b21      	ldr	r3, [pc, #132]	; (83f8c <calibration_vpt+0x17c>)
   83f08:	4611      	mov	r1, r2
   83f0a:	4620      	mov	r0, r4
   83f0c:	4798      	blx	r3
   83f0e:	4603      	mov	r3, r0
   83f10:	461a      	mov	r2, r3
   83f12:	4b1a      	ldr	r3, [pc, #104]	; (83f7c <calibration_vpt+0x16c>)
   83f14:	601a      	str	r2, [r3, #0]
			break;
   83f16:	e029      	b.n	83f6c <calibration_vpt+0x15c>
		}
		else if(sensordata < vpt2[0].millivolt)
   83f18:	4b16      	ldr	r3, [pc, #88]	; (83f74 <calibration_vpt+0x164>)
   83f1a:	885b      	ldrh	r3, [r3, #2]
   83f1c:	b21b      	sxth	r3, r3
   83f1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83f22:	429a      	cmp	r2, r3
   83f24:	da09      	bge.n	83f3a <calibration_vpt+0x12a>
		{
			pressure_final_vpt = vpt2[0].pressure;
   83f26:	4b13      	ldr	r3, [pc, #76]	; (83f74 <calibration_vpt+0x164>)
   83f28:	881b      	ldrh	r3, [r3, #0]
   83f2a:	b21a      	sxth	r2, r3
   83f2c:	4b12      	ldr	r3, [pc, #72]	; (83f78 <calibration_vpt+0x168>)
   83f2e:	4610      	mov	r0, r2
   83f30:	4798      	blx	r3
   83f32:	4602      	mov	r2, r0
   83f34:	4b11      	ldr	r3, [pc, #68]	; (83f7c <calibration_vpt+0x16c>)
   83f36:	601a      	str	r2, [r3, #0]
   83f38:	e011      	b.n	83f5e <calibration_vpt+0x14e>
		}
		else  if(sensordata > vpt2[25].millivolt)
   83f3a:	4b0e      	ldr	r3, [pc, #56]	; (83f74 <calibration_vpt+0x164>)
   83f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   83f40:	b21b      	sxth	r3, r3
   83f42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83f46:	429a      	cmp	r2, r3
   83f48:	dd09      	ble.n	83f5e <calibration_vpt+0x14e>
		{
			pressure_final_vpt = vpt2[25].pressure;
   83f4a:	4b0a      	ldr	r3, [pc, #40]	; (83f74 <calibration_vpt+0x164>)
   83f4c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   83f50:	b21a      	sxth	r2, r3
   83f52:	4b09      	ldr	r3, [pc, #36]	; (83f78 <calibration_vpt+0x168>)
   83f54:	4610      	mov	r0, r2
   83f56:	4798      	blx	r3
   83f58:	4602      	mov	r2, r0
   83f5a:	4b08      	ldr	r3, [pc, #32]	; (83f7c <calibration_vpt+0x16c>)
   83f5c:	601a      	str	r2, [r3, #0]
void calibration_vpt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   83f5e:	68fb      	ldr	r3, [r7, #12]
   83f60:	3301      	adds	r3, #1
   83f62:	60fb      	str	r3, [r7, #12]
   83f64:	68fb      	ldr	r3, [r7, #12]
   83f66:	2b19      	cmp	r3, #25
   83f68:	f77f af5a 	ble.w	83e20 <calibration_vpt+0x10>
		{
			pressure_final_vpt = vpt2[25].pressure;
		}
	}
	
}
   83f6c:	bf00      	nop
   83f6e:	3714      	adds	r7, #20
   83f70:	46bd      	mov	sp, r7
   83f72:	bd90      	pop	{r4, r7, pc}
   83f74:	2007024c 	.word	0x2007024c
   83f78:	000a7f01 	.word	0x000a7f01
   83f7c:	2007172c 	.word	0x2007172c
   83f80:	000a7fa9 	.word	0x000a7fa9
   83f84:	000a8111 	.word	0x000a8111
   83f88:	42c80000 	.word	0x42c80000
   83f8c:	000a7d99 	.word	0x000a7d99

00083f90 <calibration_ps1>:
void calibration_ps1(int16_t sensordata)
{
   83f90:	b580      	push	{r7, lr}
   83f92:	b084      	sub	sp, #16
   83f94:	af00      	add	r7, sp, #0
   83f96:	4603      	mov	r3, r0
   83f98:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   83f9a:	2300      	movs	r3, #0
   83f9c:	60fb      	str	r3, [r7, #12]
   83f9e:	e06f      	b.n	84080 <calibration_ps1+0xf0>
	{
		if (sensordata == ps_1_2[i].millivolt)
   83fa0:	4a3b      	ldr	r2, [pc, #236]	; (84090 <calibration_ps1+0x100>)
   83fa2:	68fb      	ldr	r3, [r7, #12]
   83fa4:	009b      	lsls	r3, r3, #2
   83fa6:	4413      	add	r3, r2
   83fa8:	885b      	ldrh	r3, [r3, #2]
   83faa:	b21b      	sxth	r3, r3
   83fac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83fb0:	429a      	cmp	r2, r3
   83fb2:	d10b      	bne.n	83fcc <calibration_ps1+0x3c>
		{
			pressure_final_ps1=ps_1_2[i].pressure;
   83fb4:	4a36      	ldr	r2, [pc, #216]	; (84090 <calibration_ps1+0x100>)
   83fb6:	68fb      	ldr	r3, [r7, #12]
   83fb8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83fbc:	b21a      	sxth	r2, r3
   83fbe:	4b35      	ldr	r3, [pc, #212]	; (84094 <calibration_ps1+0x104>)
   83fc0:	4610      	mov	r0, r2
   83fc2:	4798      	blx	r3
   83fc4:	4602      	mov	r2, r0
   83fc6:	4b34      	ldr	r3, [pc, #208]	; (84098 <calibration_ps1+0x108>)
   83fc8:	601a      	str	r2, [r3, #0]
			break;
   83fca:	e05c      	b.n	84086 <calibration_ps1+0xf6>
		}
		else if ((sensordata > ps_1_2[i].millivolt) && (sensordata < ps_1_2[i+1].millivolt))
   83fcc:	4a30      	ldr	r2, [pc, #192]	; (84090 <calibration_ps1+0x100>)
   83fce:	68fb      	ldr	r3, [r7, #12]
   83fd0:	009b      	lsls	r3, r3, #2
   83fd2:	4413      	add	r3, r2
   83fd4:	885b      	ldrh	r3, [r3, #2]
   83fd6:	b21b      	sxth	r3, r3
   83fd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83fdc:	429a      	cmp	r2, r3
   83fde:	dd4c      	ble.n	8407a <calibration_ps1+0xea>
   83fe0:	68fb      	ldr	r3, [r7, #12]
   83fe2:	3301      	adds	r3, #1
   83fe4:	4a2a      	ldr	r2, [pc, #168]	; (84090 <calibration_ps1+0x100>)
   83fe6:	009b      	lsls	r3, r3, #2
   83fe8:	4413      	add	r3, r2
   83fea:	885b      	ldrh	r3, [r3, #2]
   83fec:	b21b      	sxth	r3, r3
   83fee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   83ff2:	429a      	cmp	r2, r3
   83ff4:	da41      	bge.n	8407a <calibration_ps1+0xea>
		{
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
   83ff6:	68fb      	ldr	r3, [r7, #12]
   83ff8:	3301      	adds	r3, #1
   83ffa:	4a25      	ldr	r2, [pc, #148]	; (84090 <calibration_ps1+0x100>)
   83ffc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84000:	b21b      	sxth	r3, r3
   84002:	4619      	mov	r1, r3
   84004:	4a22      	ldr	r2, [pc, #136]	; (84090 <calibration_ps1+0x100>)
   84006:	68fb      	ldr	r3, [r7, #12]
   84008:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8400c:	b21b      	sxth	r3, r3
   8400e:	1acb      	subs	r3, r1, r3
   84010:	2264      	movs	r2, #100	; 0x64
   84012:	fb02 f203 	mul.w	r2, r2, r3
   84016:	68fb      	ldr	r3, [r7, #12]
   84018:	3301      	adds	r3, #1
   8401a:	491d      	ldr	r1, [pc, #116]	; (84090 <calibration_ps1+0x100>)
   8401c:	009b      	lsls	r3, r3, #2
   8401e:	440b      	add	r3, r1
   84020:	885b      	ldrh	r3, [r3, #2]
   84022:	b21b      	sxth	r3, r3
   84024:	4618      	mov	r0, r3
   84026:	491a      	ldr	r1, [pc, #104]	; (84090 <calibration_ps1+0x100>)
   84028:	68fb      	ldr	r3, [r7, #12]
   8402a:	009b      	lsls	r3, r3, #2
   8402c:	440b      	add	r3, r1
   8402e:	885b      	ldrh	r3, [r3, #2]
   84030:	b21b      	sxth	r3, r3
   84032:	1ac3      	subs	r3, r0, r3
   84034:	fb92 f3f3 	sdiv	r3, r2, r3
   84038:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
   8403a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   8403e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84042:	4813      	ldr	r0, [pc, #76]	; (84090 <calibration_ps1+0x100>)
   84044:	68fb      	ldr	r3, [r7, #12]
   84046:	009b      	lsls	r3, r3, #2
   84048:	4403      	add	r3, r0
   8404a:	885b      	ldrh	r3, [r3, #2]
   8404c:	b21b      	sxth	r3, r3
   8404e:	1acb      	subs	r3, r1, r3
   84050:	fb03 f302 	mul.w	r3, r3, r2
   84054:	4a11      	ldr	r2, [pc, #68]	; (8409c <calibration_ps1+0x10c>)
   84056:	fb82 1203 	smull	r1, r2, r2, r3
   8405a:	1152      	asrs	r2, r2, #5
   8405c:	17db      	asrs	r3, r3, #31
   8405e:	1ad3      	subs	r3, r2, r3
   84060:	490b      	ldr	r1, [pc, #44]	; (84090 <calibration_ps1+0x100>)
   84062:	68fa      	ldr	r2, [r7, #12]
   84064:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84068:	b212      	sxth	r2, r2
   8406a:	441a      	add	r2, r3
   8406c:	4b09      	ldr	r3, [pc, #36]	; (84094 <calibration_ps1+0x104>)
   8406e:	4610      	mov	r0, r2
   84070:	4798      	blx	r3
   84072:	4602      	mov	r2, r0
   84074:	4b08      	ldr	r3, [pc, #32]	; (84098 <calibration_ps1+0x108>)
   84076:	601a      	str	r2, [r3, #0]
			break;
   84078:	e005      	b.n	84086 <calibration_ps1+0xf6>
void calibration_ps1(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   8407a:	68fb      	ldr	r3, [r7, #12]
   8407c:	3301      	adds	r3, #1
   8407e:	60fb      	str	r3, [r7, #12]
   84080:	68fb      	ldr	r3, [r7, #12]
   84082:	2b1a      	cmp	r3, #26
   84084:	dd8c      	ble.n	83fa0 <calibration_ps1+0x10>
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
			break;
		}
	}
}
   84086:	bf00      	nop
   84088:	3710      	adds	r7, #16
   8408a:	46bd      	mov	sp, r7
   8408c:	bd80      	pop	{r7, pc}
   8408e:	bf00      	nop
   84090:	200702ec 	.word	0x200702ec
   84094:	000a7f01 	.word	0x000a7f01
   84098:	20071730 	.word	0x20071730
   8409c:	51eb851f 	.word	0x51eb851f

000840a0 <calibration_ps2>:
void calibration_ps2(int16_t sensordata)
{
   840a0:	b580      	push	{r7, lr}
   840a2:	b084      	sub	sp, #16
   840a4:	af00      	add	r7, sp, #0
   840a6:	4603      	mov	r3, r0
   840a8:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   840aa:	2300      	movs	r3, #0
   840ac:	60fb      	str	r3, [r7, #12]
   840ae:	e06f      	b.n	84190 <calibration_ps2+0xf0>
	{
		if (sensordata == ps_2_2[i].millivolt)
   840b0:	4a3b      	ldr	r2, [pc, #236]	; (841a0 <calibration_ps2+0x100>)
   840b2:	68fb      	ldr	r3, [r7, #12]
   840b4:	009b      	lsls	r3, r3, #2
   840b6:	4413      	add	r3, r2
   840b8:	885b      	ldrh	r3, [r3, #2]
   840ba:	b21b      	sxth	r3, r3
   840bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840c0:	429a      	cmp	r2, r3
   840c2:	d10b      	bne.n	840dc <calibration_ps2+0x3c>
		{
			pressure_final_ps2=ps_2_2[i].pressure;
   840c4:	4a36      	ldr	r2, [pc, #216]	; (841a0 <calibration_ps2+0x100>)
   840c6:	68fb      	ldr	r3, [r7, #12]
   840c8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840cc:	b21a      	sxth	r2, r3
   840ce:	4b35      	ldr	r3, [pc, #212]	; (841a4 <calibration_ps2+0x104>)
   840d0:	4610      	mov	r0, r2
   840d2:	4798      	blx	r3
   840d4:	4602      	mov	r2, r0
   840d6:	4b34      	ldr	r3, [pc, #208]	; (841a8 <calibration_ps2+0x108>)
   840d8:	601a      	str	r2, [r3, #0]
			break;
   840da:	e05c      	b.n	84196 <calibration_ps2+0xf6>
		}
		else if ((sensordata > ps_2_2[i].millivolt) && (sensordata < ps_2_2[i+1].millivolt))
   840dc:	4a30      	ldr	r2, [pc, #192]	; (841a0 <calibration_ps2+0x100>)
   840de:	68fb      	ldr	r3, [r7, #12]
   840e0:	009b      	lsls	r3, r3, #2
   840e2:	4413      	add	r3, r2
   840e4:	885b      	ldrh	r3, [r3, #2]
   840e6:	b21b      	sxth	r3, r3
   840e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840ec:	429a      	cmp	r2, r3
   840ee:	dd4c      	ble.n	8418a <calibration_ps2+0xea>
   840f0:	68fb      	ldr	r3, [r7, #12]
   840f2:	3301      	adds	r3, #1
   840f4:	4a2a      	ldr	r2, [pc, #168]	; (841a0 <calibration_ps2+0x100>)
   840f6:	009b      	lsls	r3, r3, #2
   840f8:	4413      	add	r3, r2
   840fa:	885b      	ldrh	r3, [r3, #2]
   840fc:	b21b      	sxth	r3, r3
   840fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84102:	429a      	cmp	r2, r3
   84104:	da41      	bge.n	8418a <calibration_ps2+0xea>
		{
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
   84106:	68fb      	ldr	r3, [r7, #12]
   84108:	3301      	adds	r3, #1
   8410a:	4a25      	ldr	r2, [pc, #148]	; (841a0 <calibration_ps2+0x100>)
   8410c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84110:	b21b      	sxth	r3, r3
   84112:	4619      	mov	r1, r3
   84114:	4a22      	ldr	r2, [pc, #136]	; (841a0 <calibration_ps2+0x100>)
   84116:	68fb      	ldr	r3, [r7, #12]
   84118:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8411c:	b21b      	sxth	r3, r3
   8411e:	1acb      	subs	r3, r1, r3
   84120:	2264      	movs	r2, #100	; 0x64
   84122:	fb02 f203 	mul.w	r2, r2, r3
   84126:	68fb      	ldr	r3, [r7, #12]
   84128:	3301      	adds	r3, #1
   8412a:	491d      	ldr	r1, [pc, #116]	; (841a0 <calibration_ps2+0x100>)
   8412c:	009b      	lsls	r3, r3, #2
   8412e:	440b      	add	r3, r1
   84130:	885b      	ldrh	r3, [r3, #2]
   84132:	b21b      	sxth	r3, r3
   84134:	4618      	mov	r0, r3
   84136:	491a      	ldr	r1, [pc, #104]	; (841a0 <calibration_ps2+0x100>)
   84138:	68fb      	ldr	r3, [r7, #12]
   8413a:	009b      	lsls	r3, r3, #2
   8413c:	440b      	add	r3, r1
   8413e:	885b      	ldrh	r3, [r3, #2]
   84140:	b21b      	sxth	r3, r3
   84142:	1ac3      	subs	r3, r0, r3
   84144:	fb92 f3f3 	sdiv	r3, r2, r3
   84148:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
   8414a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   8414e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84152:	4813      	ldr	r0, [pc, #76]	; (841a0 <calibration_ps2+0x100>)
   84154:	68fb      	ldr	r3, [r7, #12]
   84156:	009b      	lsls	r3, r3, #2
   84158:	4403      	add	r3, r0
   8415a:	885b      	ldrh	r3, [r3, #2]
   8415c:	b21b      	sxth	r3, r3
   8415e:	1acb      	subs	r3, r1, r3
   84160:	fb03 f302 	mul.w	r3, r3, r2
   84164:	4a11      	ldr	r2, [pc, #68]	; (841ac <calibration_ps2+0x10c>)
   84166:	fb82 1203 	smull	r1, r2, r2, r3
   8416a:	1152      	asrs	r2, r2, #5
   8416c:	17db      	asrs	r3, r3, #31
   8416e:	1ad3      	subs	r3, r2, r3
   84170:	490b      	ldr	r1, [pc, #44]	; (841a0 <calibration_ps2+0x100>)
   84172:	68fa      	ldr	r2, [r7, #12]
   84174:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84178:	b212      	sxth	r2, r2
   8417a:	441a      	add	r2, r3
   8417c:	4b09      	ldr	r3, [pc, #36]	; (841a4 <calibration_ps2+0x104>)
   8417e:	4610      	mov	r0, r2
   84180:	4798      	blx	r3
   84182:	4602      	mov	r2, r0
   84184:	4b08      	ldr	r3, [pc, #32]	; (841a8 <calibration_ps2+0x108>)
   84186:	601a      	str	r2, [r3, #0]
			break;
   84188:	e005      	b.n	84196 <calibration_ps2+0xf6>
void calibration_ps2(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   8418a:	68fb      	ldr	r3, [r7, #12]
   8418c:	3301      	adds	r3, #1
   8418e:	60fb      	str	r3, [r7, #12]
   84190:	68fb      	ldr	r3, [r7, #12]
   84192:	2b1a      	cmp	r3, #26
   84194:	dd8c      	ble.n	840b0 <calibration_ps2+0x10>
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
			break;
		}
	}
}
   84196:	bf00      	nop
   84198:	3710      	adds	r7, #16
   8419a:	46bd      	mov	sp, r7
   8419c:	bd80      	pop	{r7, pc}
   8419e:	bf00      	nop
   841a0:	20070358 	.word	0x20070358
   841a4:	000a7f01 	.word	0x000a7f01
   841a8:	20071734 	.word	0x20071734
   841ac:	51eb851f 	.word	0x51eb851f

000841b0 <calibration_cond>:
		}
	}
}

void calibration_cond(float sensordata)
{
   841b0:	b590      	push	{r4, r7, lr}
   841b2:	b087      	sub	sp, #28
   841b4:	af00      	add	r7, sp, #0
   841b6:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = 0;
   841b8:	f04f 0300 	mov.w	r3, #0
   841bc:	613b      	str	r3, [r7, #16]
	dummy_var = sensordata;
   841be:	687b      	ldr	r3, [r7, #4]
   841c0:	613b      	str	r3, [r7, #16]
	float slope=0;
   841c2:	f04f 0300 	mov.w	r3, #0
   841c6:	60fb      	str	r3, [r7, #12]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   841c8:	2300      	movs	r3, #0
   841ca:	617b      	str	r3, [r7, #20]
   841cc:	e08f      	b.n	842ee <calibration_cond+0x13e>
	{
		if (dummy_var == cond[i].volts)
   841ce:	4a4c      	ldr	r2, [pc, #304]	; (84300 <calibration_cond+0x150>)
   841d0:	697b      	ldr	r3, [r7, #20]
   841d2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841d6:	b29b      	uxth	r3, r3
   841d8:	461a      	mov	r2, r3
   841da:	4b4a      	ldr	r3, [pc, #296]	; (84304 <calibration_cond+0x154>)
   841dc:	4610      	mov	r0, r2
   841de:	4798      	blx	r3
   841e0:	4602      	mov	r2, r0
   841e2:	4b49      	ldr	r3, [pc, #292]	; (84308 <calibration_cond+0x158>)
   841e4:	6939      	ldr	r1, [r7, #16]
   841e6:	4610      	mov	r0, r2
   841e8:	4798      	blx	r3
   841ea:	4603      	mov	r3, r0
   841ec:	2b00      	cmp	r3, #0
   841ee:	d00c      	beq.n	8420a <calibration_cond+0x5a>
		{
			cond_final_cs3=cond[i].conductivity;
   841f0:	4a43      	ldr	r2, [pc, #268]	; (84300 <calibration_cond+0x150>)
   841f2:	697b      	ldr	r3, [r7, #20]
   841f4:	009b      	lsls	r3, r3, #2
   841f6:	4413      	add	r3, r2
   841f8:	885b      	ldrh	r3, [r3, #2]
   841fa:	b29a      	uxth	r2, r3
   841fc:	4b43      	ldr	r3, [pc, #268]	; (8430c <calibration_cond+0x15c>)
   841fe:	4610      	mov	r0, r2
   84200:	4798      	blx	r3
   84202:	4602      	mov	r2, r0
   84204:	4b42      	ldr	r3, [pc, #264]	; (84310 <calibration_cond+0x160>)
   84206:	601a      	str	r2, [r3, #0]
   84208:	e06e      	b.n	842e8 <calibration_cond+0x138>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   8420a:	4a3d      	ldr	r2, [pc, #244]	; (84300 <calibration_cond+0x150>)
   8420c:	697b      	ldr	r3, [r7, #20]
   8420e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84212:	b29b      	uxth	r3, r3
   84214:	461a      	mov	r2, r3
   84216:	4b3b      	ldr	r3, [pc, #236]	; (84304 <calibration_cond+0x154>)
   84218:	4610      	mov	r0, r2
   8421a:	4798      	blx	r3
   8421c:	4602      	mov	r2, r0
   8421e:	4b3d      	ldr	r3, [pc, #244]	; (84314 <calibration_cond+0x164>)
   84220:	6939      	ldr	r1, [r7, #16]
   84222:	4610      	mov	r0, r2
   84224:	4798      	blx	r3
   84226:	4603      	mov	r3, r0
   84228:	2b00      	cmp	r3, #0
   8422a:	d05d      	beq.n	842e8 <calibration_cond+0x138>
   8422c:	697b      	ldr	r3, [r7, #20]
   8422e:	3301      	adds	r3, #1
   84230:	4a33      	ldr	r2, [pc, #204]	; (84300 <calibration_cond+0x150>)
   84232:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84236:	b29b      	uxth	r3, r3
   84238:	461a      	mov	r2, r3
   8423a:	4b32      	ldr	r3, [pc, #200]	; (84304 <calibration_cond+0x154>)
   8423c:	4610      	mov	r0, r2
   8423e:	4798      	blx	r3
   84240:	4602      	mov	r2, r0
   84242:	4b35      	ldr	r3, [pc, #212]	; (84318 <calibration_cond+0x168>)
   84244:	6939      	ldr	r1, [r7, #16]
   84246:	4610      	mov	r0, r2
   84248:	4798      	blx	r3
   8424a:	4603      	mov	r3, r0
   8424c:	2b00      	cmp	r3, #0
   8424e:	d04b      	beq.n	842e8 <calibration_cond+0x138>
		{
			slope = ((cond[i+1].conductivity-cond[i].conductivity)/(cond[i+1].volts-cond[i].volts));
   84250:	697b      	ldr	r3, [r7, #20]
   84252:	3301      	adds	r3, #1
   84254:	4a2a      	ldr	r2, [pc, #168]	; (84300 <calibration_cond+0x150>)
   84256:	009b      	lsls	r3, r3, #2
   84258:	4413      	add	r3, r2
   8425a:	885b      	ldrh	r3, [r3, #2]
   8425c:	b29b      	uxth	r3, r3
   8425e:	4619      	mov	r1, r3
   84260:	4a27      	ldr	r2, [pc, #156]	; (84300 <calibration_cond+0x150>)
   84262:	697b      	ldr	r3, [r7, #20]
   84264:	009b      	lsls	r3, r3, #2
   84266:	4413      	add	r3, r2
   84268:	885b      	ldrh	r3, [r3, #2]
   8426a:	b29b      	uxth	r3, r3
   8426c:	1aca      	subs	r2, r1, r3
   8426e:	697b      	ldr	r3, [r7, #20]
   84270:	3301      	adds	r3, #1
   84272:	4923      	ldr	r1, [pc, #140]	; (84300 <calibration_cond+0x150>)
   84274:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84278:	b29b      	uxth	r3, r3
   8427a:	4618      	mov	r0, r3
   8427c:	4920      	ldr	r1, [pc, #128]	; (84300 <calibration_cond+0x150>)
   8427e:	697b      	ldr	r3, [r7, #20]
   84280:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84284:	b29b      	uxth	r3, r3
   84286:	1ac3      	subs	r3, r0, r3
   84288:	fb92 f2f3 	sdiv	r2, r2, r3
   8428c:	4b1d      	ldr	r3, [pc, #116]	; (84304 <calibration_cond+0x154>)
   8428e:	4610      	mov	r0, r2
   84290:	4798      	blx	r3
   84292:	4603      	mov	r3, r0
   84294:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   84296:	4a1a      	ldr	r2, [pc, #104]	; (84300 <calibration_cond+0x150>)
   84298:	697b      	ldr	r3, [r7, #20]
   8429a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8429e:	b29b      	uxth	r3, r3
   842a0:	461a      	mov	r2, r3
   842a2:	4b18      	ldr	r3, [pc, #96]	; (84304 <calibration_cond+0x154>)
   842a4:	4610      	mov	r0, r2
   842a6:	4798      	blx	r3
   842a8:	4602      	mov	r2, r0
   842aa:	4b1c      	ldr	r3, [pc, #112]	; (8431c <calibration_cond+0x16c>)
   842ac:	4611      	mov	r1, r2
   842ae:	6938      	ldr	r0, [r7, #16]
   842b0:	4798      	blx	r3
   842b2:	4603      	mov	r3, r0
   842b4:	461a      	mov	r2, r3
   842b6:	4b1a      	ldr	r3, [pc, #104]	; (84320 <calibration_cond+0x170>)
   842b8:	68f9      	ldr	r1, [r7, #12]
   842ba:	4610      	mov	r0, r2
   842bc:	4798      	blx	r3
   842be:	4603      	mov	r3, r0
   842c0:	461c      	mov	r4, r3
   842c2:	4a0f      	ldr	r2, [pc, #60]	; (84300 <calibration_cond+0x150>)
   842c4:	697b      	ldr	r3, [r7, #20]
   842c6:	009b      	lsls	r3, r3, #2
   842c8:	4413      	add	r3, r2
   842ca:	885b      	ldrh	r3, [r3, #2]
   842cc:	b29b      	uxth	r3, r3
   842ce:	461a      	mov	r2, r3
   842d0:	4b0c      	ldr	r3, [pc, #48]	; (84304 <calibration_cond+0x154>)
   842d2:	4610      	mov	r0, r2
   842d4:	4798      	blx	r3
   842d6:	4602      	mov	r2, r0
   842d8:	4b12      	ldr	r3, [pc, #72]	; (84324 <calibration_cond+0x174>)
   842da:	4611      	mov	r1, r2
   842dc:	4620      	mov	r0, r4
   842de:	4798      	blx	r3
   842e0:	4603      	mov	r3, r0
   842e2:	461a      	mov	r2, r3
   842e4:	4b0a      	ldr	r3, [pc, #40]	; (84310 <calibration_cond+0x160>)
   842e6:	601a      	str	r2, [r3, #0]
	int i;
	float dummy_var = 0;
	dummy_var = sensordata;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   842e8:	697b      	ldr	r3, [r7, #20]
   842ea:	3301      	adds	r3, #1
   842ec:	617b      	str	r3, [r7, #20]
   842ee:	697b      	ldr	r3, [r7, #20]
   842f0:	2b31      	cmp	r3, #49	; 0x31
   842f2:	f77f af6c 	ble.w	841ce <calibration_cond+0x1e>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   842f6:	bf00      	nop
   842f8:	371c      	adds	r7, #28
   842fa:	46bd      	mov	sp, r7
   842fc:	bd90      	pop	{r4, r7, pc}
   842fe:	bf00      	nop
   84300:	2007174c 	.word	0x2007174c
   84304:	000a7f01 	.word	0x000a7f01
   84308:	000a82d1 	.word	0x000a82d1
   8430c:	000a7ef9 	.word	0x000a7ef9
   84310:	20071744 	.word	0x20071744
   84314:	000a82e5 	.word	0x000a82e5
   84318:	000a8321 	.word	0x000a8321
   8431c:	000a7d95 	.word	0x000a7d95
   84320:	000a7fa9 	.word	0x000a7fa9
   84324:	000a7d99 	.word	0x000a7d99

00084328 <calibrate_uf>:


void calibrate_uf(int16_t ufrate){
   84328:	b590      	push	{r4, r7, lr}
   8432a:	b087      	sub	sp, #28
   8432c:	af00      	add	r7, sp, #0
   8432e:	4603      	mov	r3, r0
   84330:	80fb      	strh	r3, [r7, #6]
	
	Cl_Uint16Type i;
	float dummy_var = ufrate;
   84332:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84336:	4b5c      	ldr	r3, [pc, #368]	; (844a8 <calibrate_uf+0x180>)
   84338:	4610      	mov	r0, r2
   8433a:	4798      	blx	r3
   8433c:	4603      	mov	r3, r0
   8433e:	613b      	str	r3, [r7, #16]
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   84340:	2300      	movs	r3, #0
   84342:	82fb      	strh	r3, [r7, #22]
   84344:	e0a7      	b.n	84496 <calibrate_uf+0x16e>
		{
			if (dummy_var == ufp[i].rate)
   84346:	8afb      	ldrh	r3, [r7, #22]
   84348:	4a58      	ldr	r2, [pc, #352]	; (844ac <calibrate_uf+0x184>)
   8434a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8434e:	b29b      	uxth	r3, r3
   84350:	461a      	mov	r2, r3
   84352:	4b55      	ldr	r3, [pc, #340]	; (844a8 <calibrate_uf+0x180>)
   84354:	4610      	mov	r0, r2
   84356:	4798      	blx	r3
   84358:	4602      	mov	r2, r0
   8435a:	4b55      	ldr	r3, [pc, #340]	; (844b0 <calibrate_uf+0x188>)
   8435c:	6939      	ldr	r1, [r7, #16]
   8435e:	4610      	mov	r0, r2
   84360:	4798      	blx	r3
   84362:	4603      	mov	r3, r0
   84364:	2b00      	cmp	r3, #0
   84366:	d00a      	beq.n	8437e <calibrate_uf+0x56>
			{
				dummy_var1=ufp[i].speed;
   84368:	8afb      	ldrh	r3, [r7, #22]
   8436a:	4a50      	ldr	r2, [pc, #320]	; (844ac <calibrate_uf+0x184>)
   8436c:	009b      	lsls	r3, r3, #2
   8436e:	4413      	add	r3, r2
   84370:	885b      	ldrh	r3, [r3, #2]
   84372:	b29b      	uxth	r3, r3
   84374:	60bb      	str	r3, [r7, #8]
				uf_final=dummy_var1;
   84376:	4a4f      	ldr	r2, [pc, #316]	; (844b4 <calibrate_uf+0x18c>)
   84378:	68bb      	ldr	r3, [r7, #8]
   8437a:	6013      	str	r3, [r2, #0]
				break;
   8437c:	e08f      	b.n	8449e <calibrate_uf+0x176>
			}
			else if ((dummy_var > ufp[i].rate) && (dummy_var < ufp[i+1].rate))
   8437e:	8afb      	ldrh	r3, [r7, #22]
   84380:	4a4a      	ldr	r2, [pc, #296]	; (844ac <calibrate_uf+0x184>)
   84382:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84386:	b29b      	uxth	r3, r3
   84388:	461a      	mov	r2, r3
   8438a:	4b47      	ldr	r3, [pc, #284]	; (844a8 <calibrate_uf+0x180>)
   8438c:	4610      	mov	r0, r2
   8438e:	4798      	blx	r3
   84390:	4602      	mov	r2, r0
   84392:	4b49      	ldr	r3, [pc, #292]	; (844b8 <calibrate_uf+0x190>)
   84394:	6939      	ldr	r1, [r7, #16]
   84396:	4610      	mov	r0, r2
   84398:	4798      	blx	r3
   8439a:	4603      	mov	r3, r0
   8439c:	2b00      	cmp	r3, #0
   8439e:	d062      	beq.n	84466 <calibrate_uf+0x13e>
   843a0:	8afb      	ldrh	r3, [r7, #22]
   843a2:	3301      	adds	r3, #1
   843a4:	4a41      	ldr	r2, [pc, #260]	; (844ac <calibrate_uf+0x184>)
   843a6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843aa:	b29b      	uxth	r3, r3
   843ac:	461a      	mov	r2, r3
   843ae:	4b3e      	ldr	r3, [pc, #248]	; (844a8 <calibrate_uf+0x180>)
   843b0:	4610      	mov	r0, r2
   843b2:	4798      	blx	r3
   843b4:	4602      	mov	r2, r0
   843b6:	4b41      	ldr	r3, [pc, #260]	; (844bc <calibrate_uf+0x194>)
   843b8:	6939      	ldr	r1, [r7, #16]
   843ba:	4610      	mov	r0, r2
   843bc:	4798      	blx	r3
   843be:	4603      	mov	r3, r0
   843c0:	2b00      	cmp	r3, #0
   843c2:	d050      	beq.n	84466 <calibrate_uf+0x13e>
			{
				//temprature_final_value =dummy_var;
				slope = (((ufp[i+1].speed - ufp[i].speed))/(ufp[i+1].rate - ufp[i].rate));
   843c4:	8afb      	ldrh	r3, [r7, #22]
   843c6:	3301      	adds	r3, #1
   843c8:	4a38      	ldr	r2, [pc, #224]	; (844ac <calibrate_uf+0x184>)
   843ca:	009b      	lsls	r3, r3, #2
   843cc:	4413      	add	r3, r2
   843ce:	885b      	ldrh	r3, [r3, #2]
   843d0:	b29b      	uxth	r3, r3
   843d2:	4619      	mov	r1, r3
   843d4:	8afb      	ldrh	r3, [r7, #22]
   843d6:	4a35      	ldr	r2, [pc, #212]	; (844ac <calibrate_uf+0x184>)
   843d8:	009b      	lsls	r3, r3, #2
   843da:	4413      	add	r3, r2
   843dc:	885b      	ldrh	r3, [r3, #2]
   843de:	b29b      	uxth	r3, r3
   843e0:	1aca      	subs	r2, r1, r3
   843e2:	8afb      	ldrh	r3, [r7, #22]
   843e4:	3301      	adds	r3, #1
   843e6:	4931      	ldr	r1, [pc, #196]	; (844ac <calibrate_uf+0x184>)
   843e8:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   843ec:	b29b      	uxth	r3, r3
   843ee:	4618      	mov	r0, r3
   843f0:	8afb      	ldrh	r3, [r7, #22]
   843f2:	492e      	ldr	r1, [pc, #184]	; (844ac <calibrate_uf+0x184>)
   843f4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   843f8:	b29b      	uxth	r3, r3
   843fa:	1ac3      	subs	r3, r0, r3
   843fc:	fb92 f2f3 	sdiv	r2, r2, r3
   84400:	4b29      	ldr	r3, [pc, #164]	; (844a8 <calibrate_uf+0x180>)
   84402:	4610      	mov	r0, r2
   84404:	4798      	blx	r3
   84406:	4603      	mov	r3, r0
   84408:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				uf_final = ((slope*(dummy_var - ufp[i].rate)) + ufp[i].speed);
   8440a:	8afb      	ldrh	r3, [r7, #22]
   8440c:	4a27      	ldr	r2, [pc, #156]	; (844ac <calibrate_uf+0x184>)
   8440e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84412:	b29b      	uxth	r3, r3
   84414:	461a      	mov	r2, r3
   84416:	4b24      	ldr	r3, [pc, #144]	; (844a8 <calibrate_uf+0x180>)
   84418:	4610      	mov	r0, r2
   8441a:	4798      	blx	r3
   8441c:	4602      	mov	r2, r0
   8441e:	4b28      	ldr	r3, [pc, #160]	; (844c0 <calibrate_uf+0x198>)
   84420:	4611      	mov	r1, r2
   84422:	6938      	ldr	r0, [r7, #16]
   84424:	4798      	blx	r3
   84426:	4603      	mov	r3, r0
   84428:	461a      	mov	r2, r3
   8442a:	4b26      	ldr	r3, [pc, #152]	; (844c4 <calibrate_uf+0x19c>)
   8442c:	68f9      	ldr	r1, [r7, #12]
   8442e:	4610      	mov	r0, r2
   84430:	4798      	blx	r3
   84432:	4603      	mov	r3, r0
   84434:	461c      	mov	r4, r3
   84436:	8afb      	ldrh	r3, [r7, #22]
   84438:	4a1c      	ldr	r2, [pc, #112]	; (844ac <calibrate_uf+0x184>)
   8443a:	009b      	lsls	r3, r3, #2
   8443c:	4413      	add	r3, r2
   8443e:	885b      	ldrh	r3, [r3, #2]
   84440:	b29b      	uxth	r3, r3
   84442:	461a      	mov	r2, r3
   84444:	4b18      	ldr	r3, [pc, #96]	; (844a8 <calibrate_uf+0x180>)
   84446:	4610      	mov	r0, r2
   84448:	4798      	blx	r3
   8444a:	4602      	mov	r2, r0
   8444c:	4b1e      	ldr	r3, [pc, #120]	; (844c8 <calibrate_uf+0x1a0>)
   8444e:	4611      	mov	r1, r2
   84450:	4620      	mov	r0, r4
   84452:	4798      	blx	r3
   84454:	4603      	mov	r3, r0
   84456:	461a      	mov	r2, r3
   84458:	4b1c      	ldr	r3, [pc, #112]	; (844cc <calibrate_uf+0x1a4>)
   8445a:	4610      	mov	r0, r2
   8445c:	4798      	blx	r3
   8445e:	4602      	mov	r2, r0
   84460:	4b14      	ldr	r3, [pc, #80]	; (844b4 <calibrate_uf+0x18c>)
   84462:	601a      	str	r2, [r3, #0]
				//temprature_final_value_1 =temprature_final_value_1/100;
				//temprature_final_value =1500;
				break;
   84464:	e01b      	b.n	8449e <calibrate_uf+0x176>
			}
			else if (dummy_var < ufp[i].rate)
   84466:	8afb      	ldrh	r3, [r7, #22]
   84468:	4a10      	ldr	r2, [pc, #64]	; (844ac <calibrate_uf+0x184>)
   8446a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8446e:	b29b      	uxth	r3, r3
   84470:	461a      	mov	r2, r3
   84472:	4b0d      	ldr	r3, [pc, #52]	; (844a8 <calibrate_uf+0x180>)
   84474:	4610      	mov	r0, r2
   84476:	4798      	blx	r3
   84478:	4602      	mov	r2, r0
   8447a:	4b10      	ldr	r3, [pc, #64]	; (844bc <calibrate_uf+0x194>)
   8447c:	6939      	ldr	r1, [r7, #16]
   8447e:	4610      	mov	r0, r2
   84480:	4798      	blx	r3
   84482:	4603      	mov	r3, r0
   84484:	2b00      	cmp	r3, #0
   84486:	d003      	beq.n	84490 <calibrate_uf+0x168>
			{
				uf_final = 10;
   84488:	4b0a      	ldr	r3, [pc, #40]	; (844b4 <calibrate_uf+0x18c>)
   8448a:	220a      	movs	r2, #10
   8448c:	601a      	str	r2, [r3, #0]
				break;
   8448e:	e006      	b.n	8449e <calibrate_uf+0x176>
	float dummy_var = ufrate;
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   84490:	8afb      	ldrh	r3, [r7, #22]
   84492:	3301      	adds	r3, #1
   84494:	82fb      	strh	r3, [r7, #22]
   84496:	8afb      	ldrh	r3, [r7, #22]
   84498:	2b0d      	cmp	r3, #13
   8449a:	f67f af54 	bls.w	84346 <calibrate_uf+0x1e>
			}
			
		}
	
	
}
   8449e:	bf00      	nop
   844a0:	371c      	adds	r7, #28
   844a2:	46bd      	mov	sp, r7
   844a4:	bd90      	pop	{r4, r7, pc}
   844a6:	bf00      	nop
   844a8:	000a7f01 	.word	0x000a7f01
   844ac:	200702b4 	.word	0x200702b4
   844b0:	000a82d1 	.word	0x000a82d1
   844b4:	20071748 	.word	0x20071748
   844b8:	000a82e5 	.word	0x000a82e5
   844bc:	000a8321 	.word	0x000a8321
   844c0:	000a7d95 	.word	0x000a7d95
   844c4:	000a7fa9 	.word	0x000a7fa9
   844c8:	000a7d99 	.word	0x000a7d99
   844cc:	000a8381 	.word	0x000a8381

000844d0 <cl_datamanager_init>:
extern Cl_Mac_EventQueueType  Cl_MacEventQueue2;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
extern Cl_Uint16Type cl_hep_bolus_count_rate ;

Cl_ReturnCodeType cl_datamanager_init()
{
   844d0:	b480      	push	{r7}
   844d2:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   844d4:	4b20      	ldr	r3, [pc, #128]	; (84558 <cl_datamanager_init+0x88>)
   844d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   844da:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   844dc:	4b1e      	ldr	r3, [pc, #120]	; (84558 <cl_datamanager_init+0x88>)
   844de:	f44f 72b9 	mov.w	r2, #370	; 0x172
   844e2:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 135;
   844e4:	4b1c      	ldr	r3, [pc, #112]	; (84558 <cl_datamanager_init+0x88>)
   844e6:	2287      	movs	r2, #135	; 0x87
   844e8:	62da      	str	r2, [r3, #44]	; 0x2c
	Treatdata[ID_bloodrate] = 400;
   844ea:	4b1b      	ldr	r3, [pc, #108]	; (84558 <cl_datamanager_init+0x88>)
   844ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   844f0:	63da      	str	r2, [r3, #60]	; 0x3c
	Treatdata[ID_tempulimit] = 375;
   844f2:	4b19      	ldr	r3, [pc, #100]	; (84558 <cl_datamanager_init+0x88>)
   844f4:	f240 1277 	movw	r2, #375	; 0x177
   844f8:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   844fa:	4b17      	ldr	r3, [pc, #92]	; (84558 <cl_datamanager_init+0x88>)
   844fc:	f240 126d 	movw	r2, #365	; 0x16d
   84500:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 150;
   84502:	4b15      	ldr	r3, [pc, #84]	; (84558 <cl_datamanager_init+0x88>)
   84504:	2296      	movs	r2, #150	; 0x96
   84506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condllimit] = 0;
   8450a:	4b13      	ldr	r3, [pc, #76]	; (84558 <cl_datamanager_init+0x88>)
   8450c:	2200      	movs	r2, #0
   8450e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Treatdata[ID_aptulimit] =  1400;  // manav03 added 1000
   84512:	4b11      	ldr	r3, [pc, #68]	; (84558 <cl_datamanager_init+0x88>)
   84514:	f44f 62af 	mov.w	r2, #1400	; 0x578
   84518:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 900;    // manav03 so now the limit will be -100
   8451c:	4b0e      	ldr	r3, [pc, #56]	; (84558 <cl_datamanager_init+0x88>)
   8451e:	f44f 7261 	mov.w	r2, #900	; 0x384
   84522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 1400;   // manav03 added 1000
   84526:	4b0c      	ldr	r3, [pc, #48]	; (84558 <cl_datamanager_init+0x88>)
   84528:	f44f 62af 	mov.w	r2, #1400	; 0x578
   8452c:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 900;   // manav03 so now the limit will be -100 
   8452e:	4b0a      	ldr	r3, [pc, #40]	; (84558 <cl_datamanager_init+0x88>)
   84530:	f44f 7261 	mov.w	r2, #900	; 0x384
   84534:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   84536:	4b08      	ldr	r3, [pc, #32]	; (84558 <cl_datamanager_init+0x88>)
   84538:	2232      	movs	r2, #50	; 0x32
   8453a:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   8453c:	4b06      	ldr	r3, [pc, #24]	; (84558 <cl_datamanager_init+0x88>)
   8453e:	2200      	movs	r2, #0
   84540:	665a      	str	r2, [r3, #100]	; 0x64
	Treatdata[ID_ufgoal] = 0; // added default to check uf func
   84542:	4b05      	ldr	r3, [pc, #20]	; (84558 <cl_datamanager_init+0x88>)
   84544:	2200      	movs	r2, #0
   84546:	635a      	str	r2, [r3, #52]	; 0x34
	Treatdata[ID_treattime] = 240;
   84548:	4b03      	ldr	r3, [pc, #12]	; (84558 <cl_datamanager_init+0x88>)
   8454a:	22f0      	movs	r2, #240	; 0xf0
   8454c:	655a      	str	r2, [r3, #84]	; 0x54
	return CL_OK;
   8454e:	2300      	movs	r3, #0
	
}
   84550:	4618      	mov	r0, r3
   84552:	46bd      	mov	sp, r7
   84554:	bc80      	pop	{r7}
   84556:	4770      	bx	lr
   84558:	20072614 	.word	0x20072614

0008455c <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   8455c:	b580      	push	{r7, lr}
   8455e:	b092      	sub	sp, #72	; 0x48
   84560:	af00      	add	r7, sp, #0
   84562:	4603      	mov	r3, r0
   84564:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84566:	2304      	movs	r3, #4
   84568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8456c:	2359      	movs	r3, #89	; 0x59
   8456e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84572:	f107 030c 	add.w	r3, r7, #12
   84576:	2232      	movs	r2, #50	; 0x32
   84578:	2100      	movs	r1, #0
   8457a:	4618      	mov	r0, r3
   8457c:	4bcd      	ldr	r3, [pc, #820]	; (848b4 <cl_datamamanager+0x358>)
   8457e:	4798      	blx	r3
	
	switch(cl_data_event)
   84580:	79fb      	ldrb	r3, [r7, #7]
   84582:	2b0e      	cmp	r3, #14
   84584:	d007      	beq.n	84596 <cl_datamamanager+0x3a>
   84586:	2b3b      	cmp	r3, #59	; 0x3b
   84588:	f000 8470 	beq.w	84e6c <cl_datamamanager+0x910>
   8458c:	2b0d      	cmp	r3, #13
   8458e:	f000 837e 	beq.w	84c8e <cl_datamamanager+0x732>
							
		}
		break;
		
		default:
		break;
   84592:	f000 bc70 	b.w	84e76 <cl_datamamanager+0x91a>
		
		
		break;
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84596:	4bc8      	ldr	r3, [pc, #800]	; (848b8 <cl_datamamanager+0x35c>)
   84598:	7e1b      	ldrb	r3, [r3, #24]
   8459a:	2b00      	cmp	r3, #0
   8459c:	f000 8468 	beq.w	84e70 <cl_datamamanager+0x914>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   845a0:	4bc5      	ldr	r3, [pc, #788]	; (848b8 <cl_datamamanager+0x35c>)
   845a2:	791b      	ldrb	r3, [r3, #4]
   845a4:	3b01      	subs	r3, #1
   845a6:	2b21      	cmp	r3, #33	; 0x21
   845a8:	f200 836d 	bhi.w	84c86 <cl_datamamanager+0x72a>
   845ac:	a201      	add	r2, pc, #4	; (adr r2, 845b4 <cl_datamamanager+0x58>)
   845ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   845b2:	bf00      	nop
   845b4:	0008463d 	.word	0x0008463d
   845b8:	00084673 	.word	0x00084673
   845bc:	00084717 	.word	0x00084717
   845c0:	0008473d 	.word	0x0008473d
   845c4:	00084c87 	.word	0x00084c87
   845c8:	00084c87 	.word	0x00084c87
   845cc:	00084c87 	.word	0x00084c87
   845d0:	00084c87 	.word	0x00084c87
   845d4:	00084c87 	.word	0x00084c87
   845d8:	00084c87 	.word	0x00084c87
   845dc:	00084c87 	.word	0x00084c87
   845e0:	00084c87 	.word	0x00084c87
   845e4:	00084c87 	.word	0x00084c87
   845e8:	00084c87 	.word	0x00084c87
   845ec:	00084c87 	.word	0x00084c87
   845f0:	00084c87 	.word	0x00084c87
   845f4:	00084c87 	.word	0x00084c87
   845f8:	000847a9 	.word	0x000847a9
   845fc:	00084c87 	.word	0x00084c87
   84600:	00084c87 	.word	0x00084c87
   84604:	00084c87 	.word	0x00084c87
   84608:	00084c87 	.word	0x00084c87
   8460c:	00084c87 	.word	0x00084c87
   84610:	00084c87 	.word	0x00084c87
   84614:	00084c87 	.word	0x00084c87
   84618:	00084c87 	.word	0x00084c87
   8461c:	00084c87 	.word	0x00084c87
   84620:	00084c87 	.word	0x00084c87
   84624:	00084c87 	.word	0x00084c87
   84628:	000846a9 	.word	0x000846a9
   8462c:	00084c87 	.word	0x00084c87
   84630:	000846cf 	.word	0x000846cf
   84634:	000846f5 	.word	0x000846f5
   84638:	00084773 	.word	0x00084773
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   8463c:	2316      	movs	r3, #22
   8463e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84642:	2301      	movs	r3, #1
   84644:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   84646:	f107 030c 	add.w	r3, r7, #12
   8464a:	3301      	adds	r3, #1
   8464c:	4619      	mov	r1, r3
   8464e:	2001      	movs	r0, #1
   84650:	4b9a      	ldr	r3, [pc, #616]	; (848bc <cl_datamamanager+0x360>)
   84652:	4798      	blx	r3
   84654:	4603      	mov	r3, r0
   84656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8465a:	f107 010c 	add.w	r1, r7, #12
   8465e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84662:	2202      	movs	r2, #2
   84664:	4618      	mov	r0, r3
   84666:	4b96      	ldr	r3, [pc, #600]	; (848c0 <cl_datamamanager+0x364>)
   84668:	4798      	blx	r3
   8466a:	4603      	mov	r3, r0
   8466c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84670:	e30c      	b.n	84c8c <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84672:	2316      	movs	r3, #22
   84674:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84678:	2302      	movs	r3, #2
   8467a:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   8467c:	f107 030c 	add.w	r3, r7, #12
   84680:	3301      	adds	r3, #1
   84682:	4619      	mov	r1, r3
   84684:	2002      	movs	r0, #2
   84686:	4b8d      	ldr	r3, [pc, #564]	; (848bc <cl_datamamanager+0x360>)
   84688:	4798      	blx	r3
   8468a:	4603      	mov	r3, r0
   8468c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84690:	f107 010c 	add.w	r1, r7, #12
   84694:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84698:	2202      	movs	r2, #2
   8469a:	4618      	mov	r0, r3
   8469c:	4b88      	ldr	r3, [pc, #544]	; (848c0 <cl_datamamanager+0x364>)
   8469e:	4798      	blx	r3
   846a0:	4603      	mov	r3, r0
   846a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   846a6:	e2f1      	b.n	84c8c <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   846a8:	2316      	movs	r3, #22
   846aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   846ae:	2320      	movs	r3, #32
   846b0:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   846b2:	2300      	movs	r3, #0
   846b4:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   846b6:	f107 010c 	add.w	r1, r7, #12
   846ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   846be:	2202      	movs	r2, #2
   846c0:	4618      	mov	r0, r3
   846c2:	4b7f      	ldr	r3, [pc, #508]	; (848c0 <cl_datamamanager+0x364>)
   846c4:	4798      	blx	r3
   846c6:	4603      	mov	r3, r0
   846c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   846cc:	e2de      	b.n	84c8c <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   846ce:	2316      	movs	r3, #22
   846d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   846d4:	2321      	movs	r3, #33	; 0x21
   846d6:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   846d8:	2300      	movs	r3, #0
   846da:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   846dc:	f107 010c 	add.w	r1, r7, #12
   846e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   846e4:	2202      	movs	r2, #2
   846e6:	4618      	mov	r0, r3
   846e8:	4b75      	ldr	r3, [pc, #468]	; (848c0 <cl_datamamanager+0x364>)
   846ea:	4798      	blx	r3
   846ec:	4603      	mov	r3, r0
   846ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   846f2:	e2cb      	b.n	84c8c <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   846f4:	2316      	movs	r3, #22
   846f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   846fa:	2323      	movs	r3, #35	; 0x23
   846fc:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   846fe:	f107 010c 	add.w	r1, r7, #12
   84702:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84706:	2202      	movs	r2, #2
   84708:	4618      	mov	r0, r3
   8470a:	4b6d      	ldr	r3, [pc, #436]	; (848c0 <cl_datamamanager+0x364>)
   8470c:	4798      	blx	r3
   8470e:	4603      	mov	r3, r0
   84710:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84714:	e2ba      	b.n	84c8c <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84716:	2316      	movs	r3, #22
   84718:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   8471c:	2303      	movs	r3, #3
   8471e:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84720:	2300      	movs	r3, #0
   84722:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84724:	f107 010c 	add.w	r1, r7, #12
   84728:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   8472c:	2202      	movs	r2, #2
   8472e:	4618      	mov	r0, r3
   84730:	4b63      	ldr	r3, [pc, #396]	; (848c0 <cl_datamamanager+0x364>)
   84732:	4798      	blx	r3
   84734:	4603      	mov	r3, r0
   84736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   8473a:	e2a7      	b.n	84c8c <cl_datamamanager+0x730>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   8473c:	2316      	movs	r3, #22
   8473e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84742:	2304      	movs	r3, #4
   84744:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84746:	f107 030c 	add.w	r3, r7, #12
   8474a:	3301      	adds	r3, #1
   8474c:	4619      	mov	r1, r3
   8474e:	2004      	movs	r0, #4
   84750:	4b5a      	ldr	r3, [pc, #360]	; (848bc <cl_datamamanager+0x360>)
   84752:	4798      	blx	r3
   84754:	4603      	mov	r3, r0
   84756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   8475a:	f107 010c 	add.w	r1, r7, #12
   8475e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84762:	2202      	movs	r2, #2
   84764:	4618      	mov	r0, r3
   84766:	4b56      	ldr	r3, [pc, #344]	; (848c0 <cl_datamamanager+0x364>)
   84768:	4798      	blx	r3
   8476a:	4603      	mov	r3, r0
   8476c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84770:	e28c      	b.n	84c8c <cl_datamamanager+0x730>

				case	CON_RX_PARAM_DATA_ISOUF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84772:	2316      	movs	r3, #22
   84774:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_RX_PARAM_DATA_ISOUF_STATUS;
   84778:	2322      	movs	r3, #34	; 0x22
   8477a:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   8477c:	f107 030c 	add.w	r3, r7, #12
   84780:	3301      	adds	r3, #1
   84782:	4619      	mov	r1, r3
   84784:	2004      	movs	r0, #4
   84786:	4b4d      	ldr	r3, [pc, #308]	; (848bc <cl_datamamanager+0x360>)
   84788:	4798      	blx	r3
   8478a:	4603      	mov	r3, r0
   8478c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84790:	f107 010c 	add.w	r1, r7, #12
   84794:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84798:	2202      	movs	r2, #2
   8479a:	4618      	mov	r0, r3
   8479c:	4b48      	ldr	r3, [pc, #288]	; (848c0 <cl_datamamanager+0x364>)
   8479e:	4798      	blx	r3
   847a0:	4603      	mov	r3, r0
   847a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   847a6:	e271      	b.n	84c8c <cl_datamamanager+0x730>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   847a8:	2316      	movs	r3, #22
   847aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   847ae:	2312      	movs	r3, #18
   847b0:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   847b2:	4b41      	ldr	r3, [pc, #260]	; (848b8 <cl_datamamanager+0x35c>)
   847b4:	795b      	ldrb	r3, [r3, #5]
   847b6:	2b25      	cmp	r3, #37	; 0x25
   847b8:	d820      	bhi.n	847fc <cl_datamamanager+0x2a0>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   847ba:	4b3f      	ldr	r3, [pc, #252]	; (848b8 <cl_datamamanager+0x35c>)
   847bc:	795b      	ldrb	r3, [r3, #5]
   847be:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   847c0:	7b7b      	ldrb	r3, [r7, #13]
   847c2:	461a      	mov	r2, r3
   847c4:	4b3f      	ldr	r3, [pc, #252]	; (848c4 <cl_datamamanager+0x368>)
   847c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   847ca:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   847cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   847d0:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   847d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   847d6:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   847d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   847dc:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   847de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   847e2:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   847e4:	f107 010c 	add.w	r1, r7, #12
   847e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   847ec:	2206      	movs	r2, #6
   847ee:	4618      	mov	r0, r3
   847f0:	4b33      	ldr	r3, [pc, #204]	; (848c0 <cl_datamamanager+0x364>)
   847f2:	4798      	blx	r3
   847f4:	4603      	mov	r3, r0
   847f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
					
				}
		

				break;
   847fa:	e246      	b.n	84c8a <cl_datamamanager+0x72e>
					dataarray[4] = datastream.bytearray[2];
					dataarray[5] = datastream.bytearray[3];

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   847fc:	4b2e      	ldr	r3, [pc, #184]	; (848b8 <cl_datamamanager+0x35c>)
   847fe:	795b      	ldrb	r3, [r3, #5]
   84800:	2b2d      	cmp	r3, #45	; 0x2d
   84802:	f200 8242 	bhi.w	84c8a <cl_datamamanager+0x72e>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84806:	4b2c      	ldr	r3, [pc, #176]	; (848b8 <cl_datamamanager+0x35c>)
   84808:	795b      	ldrb	r3, [r3, #5]
   8480a:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   8480c:	4b2a      	ldr	r3, [pc, #168]	; (848b8 <cl_datamamanager+0x35c>)
   8480e:	795b      	ldrb	r3, [r3, #5]
   84810:	3b26      	subs	r3, #38	; 0x26
   84812:	2b07      	cmp	r3, #7
   84814:	f200 8235 	bhi.w	84c82 <cl_datamamanager+0x726>
   84818:	a201      	add	r2, pc, #4	; (adr r2, 84820 <cl_datamamanager+0x2c4>)
   8481a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8481e:	bf00      	nop
   84820:	00084841 	.word	0x00084841
   84824:	00084941 	.word	0x00084941
   84828:	00084c83 	.word	0x00084c83
   8482c:	000848c9 	.word	0x000848c9
   84830:	000849b3 	.word	0x000849b3
   84834:	00084c0d 	.word	0x00084c0d
   84838:	00084b93 	.word	0x00084b93
   8483c:	00084a23 	.word	0x00084a23
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84840:	4b20      	ldr	r3, [pc, #128]	; (848c4 <cl_datamamanager+0x368>)
   84842:	695b      	ldr	r3, [r3, #20]
   84844:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84846:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8484a:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8484c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84850:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84852:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84856:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84858:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8485c:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   8485e:	4b19      	ldr	r3, [pc, #100]	; (848c4 <cl_datamamanager+0x368>)
   84860:	699b      	ldr	r3, [r3, #24]
   84862:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84864:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84868:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8486a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8486e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84870:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84874:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84876:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8487a:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   8487c:	4b11      	ldr	r3, [pc, #68]	; (848c4 <cl_datamamanager+0x368>)
   8487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84880:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84882:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84886:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84888:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8488c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8488e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84892:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84894:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84898:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   8489a:	f107 010c 	add.w	r1, r7, #12
   8489e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   848a2:	220e      	movs	r2, #14
   848a4:	4618      	mov	r0, r3
   848a6:	4b06      	ldr	r3, [pc, #24]	; (848c0 <cl_datamamanager+0x364>)
   848a8:	4798      	blx	r3
   848aa:	4603      	mov	r3, r0
   848ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   848b0:	e1e8      	b.n	84c84 <cl_datamamanager+0x728>
   848b2:	bf00      	nop
   848b4:	000a84fd 	.word	0x000a84fd
   848b8:	20072350 	.word	0x20072350
   848bc:	0009b701 	.word	0x0009b701
   848c0:	0009cbd5 	.word	0x0009cbd5
   848c4:	20072614 	.word	0x20072614
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   848c8:	4bce      	ldr	r3, [pc, #824]	; (84c04 <cl_datamamanager+0x6a8>)
   848ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   848ce:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   848d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   848d4:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   848d6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   848da:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   848dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   848e0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   848e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   848e6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   848e8:	4bc6      	ldr	r3, [pc, #792]	; (84c04 <cl_datamamanager+0x6a8>)
   848ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   848ee:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   848f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   848f4:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   848f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   848fa:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   848fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84900:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84902:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84906:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84908:	4bbe      	ldr	r3, [pc, #760]	; (84c04 <cl_datamamanager+0x6a8>)
   8490a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   8490e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84910:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84914:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84916:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8491a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8491c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84920:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84926:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84928:	f107 010c 	add.w	r1, r7, #12
   8492c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84930:	220e      	movs	r2, #14
   84932:	4618      	mov	r0, r3
   84934:	4bb4      	ldr	r3, [pc, #720]	; (84c08 <cl_datamamanager+0x6ac>)
   84936:	4798      	blx	r3
   84938:	4603      	mov	r3, r0
   8493a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8493e:	e1a1      	b.n	84c84 <cl_datamamanager+0x728>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   84940:	4bb0      	ldr	r3, [pc, #704]	; (84c04 <cl_datamamanager+0x6a8>)
   84942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84944:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84946:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8494a:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8494c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84950:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84952:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84956:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84958:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8495c:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   8495e:	4ba9      	ldr	r3, [pc, #676]	; (84c04 <cl_datamamanager+0x6a8>)
   84960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84962:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84964:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84968:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8496a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8496e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84970:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84974:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84976:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8497a:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   8497c:	4ba1      	ldr	r3, [pc, #644]	; (84c04 <cl_datamamanager+0x6a8>)
   8497e:	699b      	ldr	r3, [r3, #24]
   84980:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84982:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84986:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84988:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8498c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8498e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84992:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84994:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84998:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   8499a:	f107 010c 	add.w	r1, r7, #12
   8499e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   849a2:	220e      	movs	r2, #14
   849a4:	4618      	mov	r0, r3
   849a6:	4b98      	ldr	r3, [pc, #608]	; (84c08 <cl_datamamanager+0x6ac>)
   849a8:	4798      	blx	r3
   849aa:	4603      	mov	r3, r0
   849ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   849b0:	e168      	b.n	84c84 <cl_datamamanager+0x728>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   849b2:	4b94      	ldr	r3, [pc, #592]	; (84c04 <cl_datamamanager+0x6a8>)
   849b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   849b6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   849b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   849bc:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   849be:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   849c2:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   849c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   849c8:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   849ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   849ce:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   849d0:	4b8c      	ldr	r3, [pc, #560]	; (84c04 <cl_datamamanager+0x6a8>)
   849d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   849d4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   849d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   849da:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   849dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   849e0:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   849e2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   849e6:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   849e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   849ec:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   849ee:	23c8      	movs	r3, #200	; 0xc8
   849f0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   849f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   849f6:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   849f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   849fc:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   849fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a02:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84a04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a08:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84a0a:	f107 010c 	add.w	r1, r7, #12
   84a0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84a12:	220e      	movs	r2, #14
   84a14:	4618      	mov	r0, r3
   84a16:	4b7c      	ldr	r3, [pc, #496]	; (84c08 <cl_datamamanager+0x6ac>)
   84a18:	4798      	blx	r3
   84a1a:	4603      	mov	r3, r0
   84a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84a20:	e130      	b.n	84c84 <cl_datamamanager+0x728>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84a22:	4b78      	ldr	r3, [pc, #480]	; (84c04 <cl_datamamanager+0x6a8>)
   84a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a26:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84a28:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a2c:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84a2e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a32:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84a34:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a38:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84a3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a3e:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84a40:	4b70      	ldr	r3, [pc, #448]	; (84c04 <cl_datamamanager+0x6a8>)
   84a42:	699b      	ldr	r3, [r3, #24]
   84a44:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84a46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a4a:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84a4c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a50:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84a52:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a56:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84a58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a5c:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84a5e:	4b69      	ldr	r3, [pc, #420]	; (84c04 <cl_datamamanager+0x6a8>)
   84a60:	695b      	ldr	r3, [r3, #20]
   84a62:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84a64:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a68:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84a6a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a6e:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84a70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a74:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84a76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a7a:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84a7c:	4b61      	ldr	r3, [pc, #388]	; (84c04 <cl_datamamanager+0x6a8>)
   84a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84a80:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84a82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84a86:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84a88:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84a8c:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84a8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84a92:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84a94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84a98:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84a9a:	4b5a      	ldr	r3, [pc, #360]	; (84c04 <cl_datamamanager+0x6a8>)
   84a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84a9e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   84aa0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84aa4:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84aa6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84aaa:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84aac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ab0:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84ab4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ab8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84abc:	4b51      	ldr	r3, [pc, #324]	; (84c04 <cl_datamamanager+0x6a8>)
   84abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   84ac0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   84ac2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ac6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   84aca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   84ad2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ad6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   84ada:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ade:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   84ae2:	4b48      	ldr	r3, [pc, #288]	; (84c04 <cl_datamamanager+0x6a8>)
   84ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   84ae6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   84ae8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84aec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   84af0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   84af8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84afc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   84b00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b04:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   84b08:	4b3e      	ldr	r3, [pc, #248]	; (84c04 <cl_datamamanager+0x6a8>)
   84b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   84b0c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   84b0e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   84b16:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   84b1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   84b26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   84b2e:	4b35      	ldr	r3, [pc, #212]	; (84c04 <cl_datamamanager+0x6a8>)
   84b30:	69db      	ldr	r3, [r3, #28]
   84b32:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   84b34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b38:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   84b3c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   84b44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   84b4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   84b54:	4b2b      	ldr	r3, [pc, #172]	; (84c04 <cl_datamamanager+0x6a8>)
   84b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84b58:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   84b5a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   84b62:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   84b6a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84b6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   84b72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84b76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   84b7a:	f107 010c 	add.w	r1, r7, #12
   84b7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b82:	222a      	movs	r2, #42	; 0x2a
   84b84:	4618      	mov	r0, r3
   84b86:	4b20      	ldr	r3, [pc, #128]	; (84c08 <cl_datamamanager+0x6ac>)
   84b88:	4798      	blx	r3
   84b8a:	4603      	mov	r3, r0
   84b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84b90:	e078      	b.n	84c84 <cl_datamamanager+0x728>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   84b92:	4b1c      	ldr	r3, [pc, #112]	; (84c04 <cl_datamamanager+0x6a8>)
   84b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84b96:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84b98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84b9c:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84b9e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ba2:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84ba4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ba8:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84baa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84bae:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   84bb0:	4b14      	ldr	r3, [pc, #80]	; (84c04 <cl_datamamanager+0x6a8>)
   84bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   84bb4:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84bb6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84bba:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84bbc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84bc0:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84bc2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84bc6:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84bc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84bcc:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   84bce:	f44f 73c8 	mov.w	r3, #400	; 0x190
   84bd2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84bd4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84bd8:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84bda:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84bde:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84be0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84be4:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84be6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84bea:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84bec:	f107 010c 	add.w	r1, r7, #12
   84bf0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bf4:	220e      	movs	r2, #14
   84bf6:	4618      	mov	r0, r3
   84bf8:	4b03      	ldr	r3, [pc, #12]	; (84c08 <cl_datamamanager+0x6ac>)
   84bfa:	4798      	blx	r3
   84bfc:	4603      	mov	r3, r0
   84bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84c02:	e03f      	b.n	84c84 <cl_datamamanager+0x728>
   84c04:	20072614 	.word	0x20072614
   84c08:	0009cbd5 	.word	0x0009cbd5
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   84c0c:	4b9c      	ldr	r3, [pc, #624]	; (84e80 <cl_datamamanager+0x924>)
   84c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   84c12:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84c14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c18:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84c1a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c1e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84c20:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c24:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84c26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c2a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   84c2c:	4b94      	ldr	r3, [pc, #592]	; (84e80 <cl_datamamanager+0x924>)
   84c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   84c32:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84c34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c38:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84c3a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c3e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84c40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c44:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84c46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c4a:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   84c4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   84c50:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84c52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84c56:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84c58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84c5c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84c5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84c62:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84c64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84c68:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84c6a:	f107 010c 	add.w	r1, r7, #12
   84c6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c72:	220e      	movs	r2, #14
   84c74:	4618      	mov	r0, r3
   84c76:	4b83      	ldr	r3, [pc, #524]	; (84e84 <cl_datamamanager+0x928>)
   84c78:	4798      	blx	r3
   84c7a:	4603      	mov	r3, r0
   84c7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84c80:	e000      	b.n	84c84 <cl_datamamanager+0x728>
						
						default:break;
   84c82:	bf00      	nop
					}
					
				}
		

				break;
   84c84:	e001      	b.n	84c8a <cl_datamamanager+0x72e>
				
				default:
				break;
   84c86:	bf00      	nop
   84c88:	e0f2      	b.n	84e70 <cl_datamamanager+0x914>
					}
					
				}
		

				break;
   84c8a:	bf00      	nop
				
				default:
				break;
			}
		}
		break;
   84c8c:	e0f0      	b.n	84e70 <cl_datamamanager+0x914>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84c8e:	4b7e      	ldr	r3, [pc, #504]	; (84e88 <cl_datamamanager+0x92c>)
   84c90:	7e1b      	ldrb	r3, [r3, #24]
   84c92:	2b00      	cmp	r3, #0
   84c94:	f000 80ee 	beq.w	84e74 <cl_datamamanager+0x918>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   84c98:	4b7b      	ldr	r3, [pc, #492]	; (84e88 <cl_datamamanager+0x92c>)
   84c9a:	791b      	ldrb	r3, [r3, #4]
   84c9c:	2b12      	cmp	r3, #18
   84c9e:	d000      	beq.n	84ca2 <cl_datamamanager+0x746>
						break;

						default:break;
					}
				break;
				default:break;
   84ca0:	e0e3      	b.n	84e6a <cl_datamamanager+0x90e>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84ca2:	4b79      	ldr	r3, [pc, #484]	; (84e88 <cl_datamamanager+0x92c>)
   84ca4:	795b      	ldrb	r3, [r3, #5]
   84ca6:	2b25      	cmp	r3, #37	; 0x25
   84ca8:	d818      	bhi.n	84cdc <cl_datamamanager+0x780>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84caa:	4b77      	ldr	r3, [pc, #476]	; (84e88 <cl_datamamanager+0x92c>)
   84cac:	795b      	ldrb	r3, [r3, #5]
   84cae:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   84cb0:	4b75      	ldr	r3, [pc, #468]	; (84e88 <cl_datamamanager+0x92c>)
   84cb2:	799b      	ldrb	r3, [r3, #6]
   84cb4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   84cb8:	4b73      	ldr	r3, [pc, #460]	; (84e88 <cl_datamamanager+0x92c>)
   84cba:	79db      	ldrb	r3, [r3, #7]
   84cbc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   84cc0:	4b71      	ldr	r3, [pc, #452]	; (84e88 <cl_datamamanager+0x92c>)
   84cc2:	7a1b      	ldrb	r3, [r3, #8]
   84cc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   84cc8:	4b6f      	ldr	r3, [pc, #444]	; (84e88 <cl_datamamanager+0x92c>)
   84cca:	7a5b      	ldrb	r3, [r3, #9]
   84ccc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   84cd0:	7b7b      	ldrb	r3, [r7, #13]
   84cd2:	4619      	mov	r1, r3
   84cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84cd6:	4a6a      	ldr	r2, [pc, #424]	; (84e80 <cl_datamamanager+0x924>)
   84cd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   84cdc:	4b6a      	ldr	r3, [pc, #424]	; (84e88 <cl_datamamanager+0x92c>)
   84cde:	795b      	ldrb	r3, [r3, #5]
   84ce0:	3b05      	subs	r3, #5
   84ce2:	2b20      	cmp	r3, #32
   84ce4:	f200 80bd 	bhi.w	84e62 <cl_datamamanager+0x906>
   84ce8:	a201      	add	r2, pc, #4	; (adr r2, 84cf0 <cl_datamamanager+0x794>)
   84cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84cee:	bf00      	nop
   84cf0:	00084d75 	.word	0x00084d75
   84cf4:	00084d7d 	.word	0x00084d7d
   84cf8:	00084e63 	.word	0x00084e63
   84cfc:	00084e63 	.word	0x00084e63
   84d00:	00084e63 	.word	0x00084e63
   84d04:	00084e63 	.word	0x00084e63
   84d08:	00084d85 	.word	0x00084d85
   84d0c:	00084d8d 	.word	0x00084d8d
   84d10:	00084d9d 	.word	0x00084d9d
   84d14:	00084da5 	.word	0x00084da5
   84d18:	00084e63 	.word	0x00084e63
   84d1c:	00084e63 	.word	0x00084e63
   84d20:	00084e63 	.word	0x00084e63
   84d24:	00084e63 	.word	0x00084e63
   84d28:	00084e63 	.word	0x00084e63
   84d2c:	00084e63 	.word	0x00084e63
   84d30:	00084dc7 	.word	0x00084dc7
   84d34:	00084e63 	.word	0x00084e63
   84d38:	00084e63 	.word	0x00084e63
   84d3c:	00084dcf 	.word	0x00084dcf
   84d40:	00084ddf 	.word	0x00084ddf
   84d44:	00084def 	.word	0x00084def
   84d48:	00084dff 	.word	0x00084dff
   84d4c:	00084e0f 	.word	0x00084e0f
   84d50:	00084e1f 	.word	0x00084e1f
   84d54:	00084e63 	.word	0x00084e63
   84d58:	00084e63 	.word	0x00084e63
   84d5c:	00084e63 	.word	0x00084e63
   84d60:	00084e63 	.word	0x00084e63
   84d64:	00084e2f 	.word	0x00084e2f
   84d68:	00084e39 	.word	0x00084e39
   84d6c:	00084e43 	.word	0x00084e43
   84d70:	00084e53 	.word	0x00084e53
					{
						case ID_dflow:
						Treatdata[ID_dflow] = (datastream.word);
   84d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84d76:	4a42      	ldr	r2, [pc, #264]	; (84e80 <cl_datamamanager+0x924>)
   84d78:	6153      	str	r3, [r2, #20]
						break;
   84d7a:	e075      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_settemp:
							Treatdata[ID_settemp] = (datastream.word);
   84d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84d7e:	4a40      	ldr	r2, [pc, #256]	; (84e80 <cl_datamamanager+0x924>)
   84d80:	6193      	str	r3, [r2, #24]
						break;
   84d82:	e071      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_heprate:
						break;
						case ID_setcond:
							Treatdata[ID_setcond] = (datastream.word);
   84d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84d86:	4a3e      	ldr	r2, [pc, #248]	; (84e80 <cl_datamamanager+0x924>)
   84d88:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
   84d8a:	e06d      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_ufrate:
						Treatdata[ID_ufrate] = (datastream.word)/10; // added to get uf rate from ui
   84d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84d8e:	4a3f      	ldr	r2, [pc, #252]	; (84e8c <cl_datamamanager+0x930>)
   84d90:	fba2 2303 	umull	r2, r3, r2, r3
   84d94:	08db      	lsrs	r3, r3, #3
   84d96:	4a3a      	ldr	r2, [pc, #232]	; (84e80 <cl_datamamanager+0x924>)
   84d98:	6313      	str	r3, [r2, #48]	; 0x30
						break;
   84d9a:	e065      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_ufgoal:
						Treatdata[ID_ufgoal] = datastream.word; // added to get uf goal data from ui
   84d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84d9e:	4a38      	ldr	r2, [pc, #224]	; (84e80 <cl_datamamanager+0x924>)
   84da0:	6353      	str	r3, [r2, #52]	; 0x34
						break;
   84da2:	e061      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_bolusvol:
						 cl_hep_bolus_count_rate = (datastream.word*2 );
   84da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84da6:	b29b      	uxth	r3, r3
   84da8:	005b      	lsls	r3, r3, #1
   84daa:	b29a      	uxth	r2, r3
   84dac:	4b38      	ldr	r3, [pc, #224]	; (84e90 <cl_datamamanager+0x934>)
   84dae:	801a      	strh	r2, [r3, #0]
						 if(cl_hep_bolus_count_rate >=60)                              /*|| (cl_hep_bolus_count_rate<=80))*/
   84db0:	4b37      	ldr	r3, [pc, #220]	; (84e90 <cl_datamamanager+0x934>)
   84db2:	881b      	ldrh	r3, [r3, #0]
   84db4:	2b3b      	cmp	r3, #59	; 0x3b
   84db6:	d956      	bls.n	84e66 <cl_datamamanager+0x90a>
						 {
					      cl_hep_bolus_count_rate = cl_hep_bolus_count_rate + 10;
   84db8:	4b35      	ldr	r3, [pc, #212]	; (84e90 <cl_datamamanager+0x934>)
   84dba:	881b      	ldrh	r3, [r3, #0]
   84dbc:	330a      	adds	r3, #10
   84dbe:	b29a      	uxth	r2, r3
   84dc0:	4b33      	ldr	r3, [pc, #204]	; (84e90 <cl_datamamanager+0x934>)
   84dc2:	801a      	strh	r2, [r3, #0]
						 break;
   84dc4:	e050      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_heparincheck:
						break;
						case ID_minufrate:
						break;
						case ID_treattime:
						Treatdata[ID_treattime] = datastream.word;
   84dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84dc8:	4a2d      	ldr	r2, [pc, #180]	; (84e80 <cl_datamamanager+0x924>)
   84dca:	6553      	str	r3, [r2, #84]	; 0x54
						break;
   84dcc:	e04c      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word);
   84dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84dd0:	4b30      	ldr	r3, [pc, #192]	; (84e94 <cl_datamamanager+0x938>)
   84dd2:	4610      	mov	r0, r2
   84dd4:	4798      	blx	r3
   84dd6:	4602      	mov	r2, r0
   84dd8:	4b2f      	ldr	r3, [pc, #188]	; (84e98 <cl_datamamanager+0x93c>)
   84dda:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   84ddc:	e044      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word);
   84dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84de0:	4b2c      	ldr	r3, [pc, #176]	; (84e94 <cl_datamamanager+0x938>)
   84de2:	4610      	mov	r0, r2
   84de4:	4798      	blx	r3
   84de6:	4602      	mov	r2, r0
   84de8:	4b2b      	ldr	r3, [pc, #172]	; (84e98 <cl_datamamanager+0x93c>)
   84dea:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   84dec:	e03c      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   84dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84df0:	4b28      	ldr	r3, [pc, #160]	; (84e94 <cl_datamamanager+0x938>)
   84df2:	4610      	mov	r0, r2
   84df4:	4798      	blx	r3
   84df6:	4602      	mov	r2, r0
   84df8:	4b27      	ldr	r3, [pc, #156]	; (84e98 <cl_datamamanager+0x93c>)
   84dfa:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   84dfc:	e034      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   84dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e00:	4b24      	ldr	r3, [pc, #144]	; (84e94 <cl_datamamanager+0x938>)
   84e02:	4610      	mov	r0, r2
   84e04:	4798      	blx	r3
   84e06:	4602      	mov	r2, r0
   84e08:	4b23      	ldr	r3, [pc, #140]	; (84e98 <cl_datamamanager+0x93c>)
   84e0a:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   84e0c:	e02c      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  datastream.word;  // manav02 removed division by 10
   84e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e10:	4b20      	ldr	r3, [pc, #128]	; (84e94 <cl_datamamanager+0x938>)
   84e12:	4610      	mov	r0, r2
   84e14:	4798      	blx	r3
   84e16:	4602      	mov	r2, r0
   84e18:	4b1f      	ldr	r3, [pc, #124]	; (84e98 <cl_datamamanager+0x93c>)
   84e1a:	615a      	str	r2, [r3, #20]
						break;
   84e1c:	e024      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  datastream.word;
   84e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e20:	4b1c      	ldr	r3, [pc, #112]	; (84e94 <cl_datamamanager+0x938>)
   84e22:	4610      	mov	r0, r2
   84e24:	4798      	blx	r3
   84e26:	4602      	mov	r2, r0
   84e28:	4b1b      	ldr	r3, [pc, #108]	; (84e98 <cl_datamamanager+0x93c>)
   84e2a:	611a      	str	r2, [r3, #16]
						break;
   84e2c:	e01c      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word; // manav02 removed division by 10
   84e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84e30:	b21a      	sxth	r2, r3
   84e32:	4b19      	ldr	r3, [pc, #100]	; (84e98 <cl_datamamanager+0x93c>)
   84e34:	801a      	strh	r2, [r3, #0]
						break;
   84e36:	e017      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word;  // manav02 removed division by 10
   84e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84e3a:	b21a      	sxth	r2, r3
   84e3c:	4b16      	ldr	r3, [pc, #88]	; (84e98 <cl_datamamanager+0x93c>)
   84e3e:	805a      	strh	r2, [r3, #2]
						break;
   84e40:	e012      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   84e42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e44:	4b13      	ldr	r3, [pc, #76]	; (84e94 <cl_datamamanager+0x938>)
   84e46:	4610      	mov	r0, r2
   84e48:	4798      	blx	r3
   84e4a:	4602      	mov	r2, r0
   84e4c:	4b12      	ldr	r3, [pc, #72]	; (84e98 <cl_datamamanager+0x93c>)
   84e4e:	60da      	str	r2, [r3, #12]
						break;
   84e50:	e00a      	b.n	84e68 <cl_datamamanager+0x90c>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word); // manav02 removed division by 100
   84e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   84e54:	4b0f      	ldr	r3, [pc, #60]	; (84e94 <cl_datamamanager+0x938>)
   84e56:	4610      	mov	r0, r2
   84e58:	4798      	blx	r3
   84e5a:	4602      	mov	r2, r0
   84e5c:	4b0e      	ldr	r3, [pc, #56]	; (84e98 <cl_datamamanager+0x93c>)
   84e5e:	609a      	str	r2, [r3, #8]
						break;
   84e60:	e002      	b.n	84e68 <cl_datamamanager+0x90c>

						default:break;
   84e62:	bf00      	nop
   84e64:	e000      	b.n	84e68 <cl_datamamanager+0x90c>
// 						  if((cl_hep_bolus_count_rate>=80)|| (cl_hep_bolus_count_rate<=100))
// 						 {
// 					      cl_hep_bolus_count_rate = cl_hep_bolus_count_rate + 20;
// 						 break;
// 						 }
						break;
   84e66:	bf00      	nop
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word); // manav02 removed division by 100
						break;

						default:break;
					}
				break;
   84e68:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   84e6a:	e003      	b.n	84e74 <cl_datamamanager+0x918>
		
		case EVT_TICK_SEC :
		
		
		
		break;
   84e6c:	bf00      	nop
   84e6e:	e002      	b.n	84e76 <cl_datamamanager+0x91a>
				
				default:
				break;
			}
		}
		break;
   84e70:	bf00      	nop
   84e72:	e000      	b.n	84e76 <cl_datamamanager+0x91a>
				default:break;
			}
							
							
		}
		break;
   84e74:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   84e76:	2300      	movs	r3, #0
}
   84e78:	4618      	mov	r0, r3
   84e7a:	3748      	adds	r7, #72	; 0x48
   84e7c:	46bd      	mov	sp, r7
   84e7e:	bd80      	pop	{r7, pc}
   84e80:	20072614 	.word	0x20072614
   84e84:	0009cbd5 	.word	0x0009cbd5
   84e88:	20072350 	.word	0x20072350
   84e8c:	cccccccd 	.word	0xcccccccd
   84e90:	200709cc 	.word	0x200709cc
   84e94:	000a7ef9 	.word	0x000a7ef9
   84e98:	20072044 	.word	0x20072044

00084e9c <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   84e9c:	b480      	push	{r7}
   84e9e:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   84ea0:	4b2c      	ldr	r3, [pc, #176]	; (84f54 <Cl_dlsis_init+0xb8>)
   84ea2:	2200      	movs	r2, #0
   84ea4:	601a      	str	r2, [r3, #0]
   84ea6:	4b2c      	ldr	r3, [pc, #176]	; (84f58 <Cl_dlsis_init+0xbc>)
   84ea8:	2200      	movs	r2, #0
   84eaa:	601a      	str	r2, [r3, #0]
   84eac:	4b2b      	ldr	r3, [pc, #172]	; (84f5c <Cl_dlsis_init+0xc0>)
   84eae:	2200      	movs	r2, #0
   84eb0:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   84eb2:	4b2b      	ldr	r3, [pc, #172]	; (84f60 <Cl_dlsis_init+0xc4>)
   84eb4:	2200      	movs	r2, #0
   84eb6:	601a      	str	r2, [r3, #0]
   84eb8:	4b2a      	ldr	r3, [pc, #168]	; (84f64 <Cl_dlsis_init+0xc8>)
   84eba:	2200      	movs	r2, #0
   84ebc:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   84ebe:	4b2a      	ldr	r3, [pc, #168]	; (84f68 <Cl_dlsis_init+0xcc>)
   84ec0:	2200      	movs	r2, #0
   84ec2:	701a      	strb	r2, [r3, #0]
   84ec4:	4b29      	ldr	r3, [pc, #164]	; (84f6c <Cl_dlsis_init+0xd0>)
   84ec6:	2200      	movs	r2, #0
   84ec8:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   84eca:	4b29      	ldr	r3, [pc, #164]	; (84f70 <Cl_dlsis_init+0xd4>)
   84ecc:	2200      	movs	r2, #0
   84ece:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   84ed0:	4b28      	ldr	r3, [pc, #160]	; (84f74 <Cl_dlsis_init+0xd8>)
   84ed2:	2200      	movs	r2, #0
   84ed4:	801a      	strh	r2, [r3, #0]
   84ed6:	4b28      	ldr	r3, [pc, #160]	; (84f78 <Cl_dlsis_init+0xdc>)
   84ed8:	2200      	movs	r2, #0
   84eda:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   84edc:	4b27      	ldr	r3, [pc, #156]	; (84f7c <Cl_dlsis_init+0xe0>)
   84ede:	2200      	movs	r2, #0
   84ee0:	801a      	strh	r2, [r3, #0]
   84ee2:	4b27      	ldr	r3, [pc, #156]	; (84f80 <Cl_dlsis_init+0xe4>)
   84ee4:	2200      	movs	r2, #0
   84ee6:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   84ee8:	4b26      	ldr	r3, [pc, #152]	; (84f84 <Cl_dlsis_init+0xe8>)
   84eea:	2200      	movs	r2, #0
   84eec:	701a      	strb	r2, [r3, #0]
   bc_flag=1;
   84eee:	4b26      	ldr	r3, [pc, #152]	; (84f88 <Cl_dlsis_init+0xec>)
   84ef0:	2201      	movs	r2, #1
   84ef2:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   84ef4:	4b25      	ldr	r3, [pc, #148]	; (84f8c <Cl_dlsis_init+0xf0>)
   84ef6:	2200      	movs	r2, #0
   84ef8:	601a      	str	r2, [r3, #0]
  cl_dlsis_powerfailure = 0;
   84efa:	4b25      	ldr	r3, [pc, #148]	; (84f90 <Cl_dlsis_init+0xf4>)
   84efc:	2200      	movs	r2, #0
   84efe:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   84f00:	4b24      	ldr	r3, [pc, #144]	; (84f94 <Cl_dlsis_init+0xf8>)
   84f02:	f04f 0200 	mov.w	r2, #0
   84f06:	601a      	str	r2, [r3, #0]
   84f08:	4b23      	ldr	r3, [pc, #140]	; (84f98 <Cl_dlsis_init+0xfc>)
   84f0a:	f04f 0200 	mov.w	r2, #0
   84f0e:	601a      	str	r2, [r3, #0]
   84f10:	4b22      	ldr	r3, [pc, #136]	; (84f9c <Cl_dlsis_init+0x100>)
   84f12:	f04f 0200 	mov.w	r2, #0
   84f16:	601a      	str	r2, [r3, #0]
   84f18:	4b21      	ldr	r3, [pc, #132]	; (84fa0 <Cl_dlsis_init+0x104>)
   84f1a:	f04f 0200 	mov.w	r2, #0
   84f1e:	601a      	str	r2, [r3, #0]
   84f20:	4b20      	ldr	r3, [pc, #128]	; (84fa4 <Cl_dlsis_init+0x108>)
   84f22:	f04f 0200 	mov.w	r2, #0
   84f26:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   84f28:	4b1f      	ldr	r3, [pc, #124]	; (84fa8 <Cl_dlsis_init+0x10c>)
   84f2a:	f04f 0200 	mov.w	r2, #0
   84f2e:	601a      	str	r2, [r3, #0]
   84f30:	4b1e      	ldr	r3, [pc, #120]	; (84fac <Cl_dlsis_init+0x110>)
   84f32:	f04f 0200 	mov.w	r2, #0
   84f36:	601a      	str	r2, [r3, #0]
   84f38:	4b1d      	ldr	r3, [pc, #116]	; (84fb0 <Cl_dlsis_init+0x114>)
   84f3a:	f04f 0200 	mov.w	r2, #0
   84f3e:	601a      	str	r2, [r3, #0]
   84f40:	4b1c      	ldr	r3, [pc, #112]	; (84fb4 <Cl_dlsis_init+0x118>)
   84f42:	f04f 0200 	mov.w	r2, #0
   84f46:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   84f48:	2300      	movs	r3, #0
 }
   84f4a:	4618      	mov	r0, r3
   84f4c:	46bd      	mov	sp, r7
   84f4e:	bc80      	pop	{r7}
   84f50:	4770      	bx	lr
   84f52:	bf00      	nop
   84f54:	20071818 	.word	0x20071818
   84f58:	2007181c 	.word	0x2007181c
   84f5c:	20071820 	.word	0x20071820
   84f60:	20071824 	.word	0x20071824
   84f64:	20071828 	.word	0x20071828
   84f68:	2007182c 	.word	0x2007182c
   84f6c:	2007182d 	.word	0x2007182d
   84f70:	200720bc 	.word	0x200720bc
   84f74:	2007182e 	.word	0x2007182e
   84f78:	20071830 	.word	0x20071830
   84f7c:	200720b8 	.word	0x200720b8
   84f80:	200720be 	.word	0x200720be
   84f84:	20071832 	.word	0x20071832
   84f88:	20071833 	.word	0x20071833
   84f8c:	20071834 	.word	0x20071834
   84f90:	20071860 	.word	0x20071860
   84f94:	20071838 	.word	0x20071838
   84f98:	2007183c 	.word	0x2007183c
   84f9c:	20071840 	.word	0x20071840
   84fa0:	20071844 	.word	0x20071844
   84fa4:	20071848 	.word	0x20071848
   84fa8:	2007184c 	.word	0x2007184c
   84fac:	20071850 	.word	0x20071850
   84fb0:	20071854 	.word	0x20071854
   84fb4:	20071858 	.word	0x20071858

00084fb8 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   84fb8:	b580      	push	{r7, lr}
   84fba:	b09a      	sub	sp, #104	; 0x68
   84fbc:	af00      	add	r7, sp, #0
   84fbe:	4603      	mov	r3, r0
   84fc0:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   84fc2:	2300      	movs	r3, #0
   84fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   84fc8:	2300      	movs	r3, #0
   84fca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   84fce:	2300      	movs	r3, #0
   84fd0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
   84fd4:	2300      	movs	r3, #0
   84fd6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
   84fda:	2300      	movs	r3, #0
   84fdc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   84fe0:	2300      	movs	r3, #0
   84fe2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   84fe6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   84fea:	2200      	movs	r2, #0
   84fec:	601a      	str	r2, [r3, #0]
   84fee:	605a      	str	r2, [r3, #4]
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84ff0:	2359      	movs	r3, #89	; 0x59
   84ff2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
Cl_Uint8Type data = 0;
   84ff6:	2300      	movs	r3, #0
   84ff8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
Cl_Uint16Type tempcount=0;
   84ffc:	2300      	movs	r3, #0
   84ffe:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
float temp;
//static float apt=0, vpt=0;
StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   85002:	f107 0338 	add.w	r3, r7, #56	; 0x38
   85006:	2200      	movs	r2, #0
   85008:	601a      	str	r2, [r3, #0]
   8500a:	711a      	strb	r2, [r3, #4]


Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   8500c:	f107 0257 	add.w	r2, r7, #87	; 0x57
   85010:	79fb      	ldrb	r3, [r7, #7]
   85012:	4611      	mov	r1, r2
   85014:	4618      	mov	r0, r3
   85016:	4bbd      	ldr	r3, [pc, #756]	; (8530c <Cl_Dlsis_controller+0x354>)
   85018:	4798      	blx	r3
   8501a:	4603      	mov	r3, r0
   8501c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	
	switch(cl_dlsis_event)
   85020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   85024:	3b11      	subs	r3, #17
   85026:	2b4b      	cmp	r3, #75	; 0x4b
   85028:	f200 81b3 	bhi.w	85392 <Cl_Dlsis_controller+0x3da>
   8502c:	a201      	add	r2, pc, #4	; (adr r2, 85034 <Cl_Dlsis_controller+0x7c>)
   8502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85032:	bf00      	nop
   85034:	00085393 	.word	0x00085393
   85038:	00085393 	.word	0x00085393
   8503c:	00085165 	.word	0x00085165
   85040:	00085393 	.word	0x00085393
   85044:	00085393 	.word	0x00085393
   85048:	00085393 	.word	0x00085393
   8504c:	00085393 	.word	0x00085393
   85050:	00085393 	.word	0x00085393
   85054:	00085393 	.word	0x00085393
   85058:	00085393 	.word	0x00085393
   8505c:	00085393 	.word	0x00085393
   85060:	00085393 	.word	0x00085393
   85064:	00085273 	.word	0x00085273
   85068:	00085233 	.word	0x00085233
   8506c:	0008524b 	.word	0x0008524b
   85070:	00085183 	.word	0x00085183
   85074:	000851c3 	.word	0x000851c3
   85078:	00085229 	.word	0x00085229
   8507c:	00085173 	.word	0x00085173
   85080:	00085393 	.word	0x00085393
   85084:	0008517d 	.word	0x0008517d
   85088:	00085393 	.word	0x00085393
   8508c:	00085393 	.word	0x00085393
   85090:	00085393 	.word	0x00085393
   85094:	00085393 	.word	0x00085393
   85098:	00085393 	.word	0x00085393
   8509c:	00085393 	.word	0x00085393
   850a0:	00085393 	.word	0x00085393
   850a4:	00085393 	.word	0x00085393
   850a8:	00085393 	.word	0x00085393
   850ac:	00085393 	.word	0x00085393
   850b0:	00085393 	.word	0x00085393
   850b4:	00085393 	.word	0x00085393
   850b8:	00085393 	.word	0x00085393
   850bc:	00085393 	.word	0x00085393
   850c0:	00085393 	.word	0x00085393
   850c4:	00085393 	.word	0x00085393
   850c8:	00085393 	.word	0x00085393
   850cc:	00085393 	.word	0x00085393
   850d0:	00085393 	.word	0x00085393
   850d4:	00085393 	.word	0x00085393
   850d8:	00085393 	.word	0x00085393
   850dc:	00085393 	.word	0x00085393
   850e0:	00085393 	.word	0x00085393
   850e4:	00085393 	.word	0x00085393
   850e8:	00085393 	.word	0x00085393
   850ec:	00085393 	.word	0x00085393
   850f0:	00085393 	.word	0x00085393
   850f4:	00085393 	.word	0x00085393
   850f8:	00085393 	.word	0x00085393
   850fc:	00085393 	.word	0x00085393
   85100:	00085393 	.word	0x00085393
   85104:	00085393 	.word	0x00085393
   85108:	00085393 	.word	0x00085393
   8510c:	00085393 	.word	0x00085393
   85110:	00085393 	.word	0x00085393
   85114:	00085393 	.word	0x00085393
   85118:	00085393 	.word	0x00085393
   8511c:	00085393 	.word	0x00085393
   85120:	00085393 	.word	0x00085393
   85124:	00085393 	.word	0x00085393
   85128:	00085393 	.word	0x00085393
   8512c:	00085393 	.word	0x00085393
   85130:	00085393 	.word	0x00085393
   85134:	00085393 	.word	0x00085393
   85138:	00085393 	.word	0x00085393
   8513c:	00085393 	.word	0x00085393
   85140:	00085393 	.word	0x00085393
   85144:	00085393 	.word	0x00085393
   85148:	00085393 	.word	0x00085393
   8514c:	00085393 	.word	0x00085393
   85150:	00085393 	.word	0x00085393
   85154:	00085393 	.word	0x00085393
   85158:	00085393 	.word	0x00085393
   8515c:	000852b1 	.word	0x000852b1
   85160:	00085339 	.word	0x00085339
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   85164:	2002      	movs	r0, #2
   85166:	4b6a      	ldr	r3, [pc, #424]	; (85310 <Cl_Dlsis_controller+0x358>)
   85168:	4798      	blx	r3
   8516a:	4603      	mov	r3, r0
   8516c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
   85170:	e11a      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		
		
		case EVENT_DLSIS_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   85172:	2100      	movs	r1, #0
   85174:	2007      	movs	r0, #7
   85176:	4b67      	ldr	r3, [pc, #412]	; (85314 <Cl_Dlsis_controller+0x35c>)
   85178:	4798      	blx	r3
		break;
   8517a:	e115      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
		
		case EVENT_DLSIS_MUTE:
		sv_cntrl_nobuzzer();
   8517c:	4b66      	ldr	r3, [pc, #408]	; (85318 <Cl_Dlsis_controller+0x360>)
   8517e:	4798      	blx	r3
		break;
   85180:	e112      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
		
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   85182:	4b66      	ldr	r3, [pc, #408]	; (8531c <Cl_Dlsis_controller+0x364>)
   85184:	7e1b      	ldrb	r3, [r3, #24]
   85186:	2b00      	cmp	r3, #0
   85188:	f000 8105 	beq.w	85396 <Cl_Dlsis_controller+0x3de>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8518c:	4b63      	ldr	r3, [pc, #396]	; (8531c <Cl_Dlsis_controller+0x364>)
   8518e:	791b      	ldrb	r3, [r3, #4]
   85190:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85194:	4b61      	ldr	r3, [pc, #388]	; (8531c <Cl_Dlsis_controller+0x364>)
   85196:	795b      	ldrb	r3, [r3, #5]
   85198:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8519c:	4b5f      	ldr	r3, [pc, #380]	; (8531c <Cl_Dlsis_controller+0x364>)
   8519e:	799b      	ldrb	r3, [r3, #6]
   851a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   851a4:	4b5d      	ldr	r3, [pc, #372]	; (8531c <Cl_Dlsis_controller+0x364>)
   851a6:	79db      	ldrb	r3, [r3, #7]
   851a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   851ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   851ae:	461a      	mov	r2, r3
   851b0:	4b5b      	ldr	r3, [pc, #364]	; (85320 <Cl_Dlsis_controller+0x368>)
   851b2:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   851b4:	4b5a      	ldr	r3, [pc, #360]	; (85320 <Cl_Dlsis_controller+0x368>)
   851b6:	69db      	ldr	r3, [r3, #28]
   851b8:	4619      	mov	r1, r3
   851ba:	2006      	movs	r0, #6
   851bc:	4b55      	ldr	r3, [pc, #340]	; (85314 <Cl_Dlsis_controller+0x35c>)
   851be:	4798      	blx	r3
			}
		break;
   851c0:	e0e9      	b.n	85396 <Cl_Dlsis_controller+0x3de>
		case EVENT_DLSIS_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   851c2:	4b56      	ldr	r3, [pc, #344]	; (8531c <Cl_Dlsis_controller+0x364>)
   851c4:	7e1b      	ldrb	r3, [r3, #24]
   851c6:	2b00      	cmp	r3, #0
   851c8:	f000 80e7 	beq.w	8539a <Cl_Dlsis_controller+0x3e2>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   851cc:	4b53      	ldr	r3, [pc, #332]	; (8531c <Cl_Dlsis_controller+0x364>)
   851ce:	795b      	ldrb	r3, [r3, #5]
   851d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   851d4:	4b51      	ldr	r3, [pc, #324]	; (8531c <Cl_Dlsis_controller+0x364>)
   851d6:	799b      	ldrb	r3, [r3, #6]
   851d8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   851dc:	4b4f      	ldr	r3, [pc, #316]	; (8531c <Cl_Dlsis_controller+0x364>)
   851de:	79db      	ldrb	r3, [r3, #7]
   851e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   851e4:	4b4d      	ldr	r3, [pc, #308]	; (8531c <Cl_Dlsis_controller+0x364>)
   851e6:	7a1b      	ldrb	r3, [r3, #8]
   851e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   851ec:	4b4b      	ldr	r3, [pc, #300]	; (8531c <Cl_Dlsis_controller+0x364>)
   851ee:	791b      	ldrb	r3, [r3, #4]
   851f0:	2b01      	cmp	r3, #1
   851f2:	d104      	bne.n	851fe <Cl_Dlsis_controller+0x246>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   851f4:	2100      	movs	r1, #0
   851f6:	2001      	movs	r0, #1
   851f8:	4b46      	ldr	r3, [pc, #280]	; (85314 <Cl_Dlsis_controller+0x35c>)
   851fa:	4798      	blx	r3
			}
			
		}
		
		
		break;
   851fc:	e0cd      	b.n	8539a <Cl_Dlsis_controller+0x3e2>
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   851fe:	4b47      	ldr	r3, [pc, #284]	; (8531c <Cl_Dlsis_controller+0x364>)
   85200:	791b      	ldrb	r3, [r3, #4]
   85202:	2b02      	cmp	r3, #2
   85204:	d104      	bne.n	85210 <Cl_Dlsis_controller+0x258>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   85206:	2100      	movs	r1, #0
   85208:	2004      	movs	r0, #4
   8520a:	4b42      	ldr	r3, [pc, #264]	; (85314 <Cl_Dlsis_controller+0x35c>)
   8520c:	4798      	blx	r3
			}
			
		}
		
		
		break;
   8520e:	e0c4      	b.n	8539a <Cl_Dlsis_controller+0x3e2>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   85210:	4b42      	ldr	r3, [pc, #264]	; (8531c <Cl_Dlsis_controller+0x364>)
   85212:	791b      	ldrb	r3, [r3, #4]
   85214:	2b00      	cmp	r3, #0
   85216:	f040 80c0 	bne.w	8539a <Cl_Dlsis_controller+0x3e2>
			{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   8521a:	4b41      	ldr	r3, [pc, #260]	; (85320 <Cl_Dlsis_controller+0x368>)
   8521c:	69db      	ldr	r3, [r3, #28]
   8521e:	4619      	mov	r1, r3
   85220:	200b      	movs	r0, #11
   85222:	4b3c      	ldr	r3, [pc, #240]	; (85314 <Cl_Dlsis_controller+0x35c>)
   85224:	4798      	blx	r3
			}
			
		}
		
		
		break;
   85226:	e0b8      	b.n	8539a <Cl_Dlsis_controller+0x3e2>
		case EVENT_DLSIS_HEP_OFF:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   85228:	2100      	movs	r1, #0
   8522a:	2009      	movs	r0, #9
   8522c:	4b39      	ldr	r3, [pc, #228]	; (85314 <Cl_Dlsis_controller+0x35c>)
   8522e:	4798      	blx	r3
		break;
   85230:	e0ba      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   85232:	2100      	movs	r1, #0
   85234:	2002      	movs	r0, #2
   85236:	4b3b      	ldr	r3, [pc, #236]	; (85324 <Cl_Dlsis_controller+0x36c>)
   85238:	4798      	blx	r3
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   8523a:	2101      	movs	r1, #1
   8523c:	2001      	movs	r0, #1
   8523e:	4b3a      	ldr	r3, [pc, #232]	; (85328 <Cl_Dlsis_controller+0x370>)
   85240:	4798      	blx	r3
   85242:	4603      	mov	r3, r0
   85244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
   85248:	e0ae      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   8524a:	2100      	movs	r1, #0
   8524c:	2004      	movs	r0, #4
   8524e:	4b35      	ldr	r3, [pc, #212]	; (85324 <Cl_Dlsis_controller+0x36c>)
   85250:	4798      	blx	r3
		
		if(cl_dlsis_state == CL_DLSIS_STATE_DIALYSIS){
   85252:	4b36      	ldr	r3, [pc, #216]	; (8532c <Cl_Dlsis_controller+0x374>)
   85254:	781b      	ldrb	r3, [r3, #0]
   85256:	2b04      	cmp	r3, #4
   85258:	d103      	bne.n	85262 <Cl_Dlsis_controller+0x2aa>
			Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
   8525a:	2101      	movs	r1, #1
   8525c:	203f      	movs	r0, #63	; 0x3f
   8525e:	4b34      	ldr	r3, [pc, #208]	; (85330 <Cl_Dlsis_controller+0x378>)
   85260:	4798      	blx	r3
		}
		
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   85262:	2100      	movs	r1, #0
   85264:	2001      	movs	r0, #1
   85266:	4b30      	ldr	r3, [pc, #192]	; (85328 <Cl_Dlsis_controller+0x370>)
   85268:	4798      	blx	r3
   8526a:	4603      	mov	r3, r0
   8526c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
   85270:	e09a      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   85272:	4b2a      	ldr	r3, [pc, #168]	; (8531c <Cl_Dlsis_controller+0x364>)
   85274:	7e1b      	ldrb	r3, [r3, #24]
   85276:	2b00      	cmp	r3, #0
   85278:	f000 8091 	beq.w	8539e <Cl_Dlsis_controller+0x3e6>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8527c:	4b27      	ldr	r3, [pc, #156]	; (8531c <Cl_Dlsis_controller+0x364>)
   8527e:	791b      	ldrb	r3, [r3, #4]
   85280:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85284:	4b25      	ldr	r3, [pc, #148]	; (8531c <Cl_Dlsis_controller+0x364>)
   85286:	795b      	ldrb	r3, [r3, #5]
   85288:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8528c:	4b23      	ldr	r3, [pc, #140]	; (8531c <Cl_Dlsis_controller+0x364>)
   8528e:	799b      	ldrb	r3, [r3, #6]
   85290:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85294:	4b21      	ldr	r3, [pc, #132]	; (8531c <Cl_Dlsis_controller+0x364>)
   85296:	79db      	ldrb	r3, [r3, #7]
   85298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   8529c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8529e:	4619      	mov	r1, r3
   852a0:	2001      	movs	r0, #1
   852a2:	4b20      	ldr	r3, [pc, #128]	; (85324 <Cl_Dlsis_controller+0x36c>)
   852a4:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   852a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   852a8:	461a      	mov	r2, r3
   852aa:	4b1d      	ldr	r3, [pc, #116]	; (85320 <Cl_Dlsis_controller+0x368>)
   852ac:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   852ae:	e076      	b.n	8539e <Cl_Dlsis_controller+0x3e6>
		
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
			
			if(Treatdata[ID_bloodrate] <= 450){
   852b0:	4b1b      	ldr	r3, [pc, #108]	; (85320 <Cl_Dlsis_controller+0x368>)
   852b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   852b4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   852b8:	d873      	bhi.n	853a2 <Cl_Dlsis_controller+0x3ea>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   852ba:	4b19      	ldr	r3, [pc, #100]	; (85320 <Cl_Dlsis_controller+0x368>)
   852bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   852be:	330a      	adds	r3, #10
   852c0:	4a17      	ldr	r2, [pc, #92]	; (85320 <Cl_Dlsis_controller+0x368>)
   852c2:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   852c4:	4b16      	ldr	r3, [pc, #88]	; (85320 <Cl_Dlsis_controller+0x368>)
   852c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   852c8:	4619      	mov	r1, r3
   852ca:	2001      	movs	r0, #1
   852cc:	4b15      	ldr	r3, [pc, #84]	; (85324 <Cl_Dlsis_controller+0x36c>)
   852ce:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   852d0:	230f      	movs	r3, #15
   852d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   852d6:	4b12      	ldr	r3, [pc, #72]	; (85320 <Cl_Dlsis_controller+0x368>)
   852d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   852da:	643b      	str	r3, [r7, #64]	; 0x40
				abfdataarray[1] = abfdata.bytedata[0];
   852dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   852e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				abfdataarray[2] = abfdata.bytedata[1];
   852e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   852e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				abfdataarray[3] = abfdata.bytedata[2];
   852ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   852f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				abfdataarray[4] = abfdata.bytedata[3];
   852f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   852f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   852fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
   85300:	2205      	movs	r2, #5
   85302:	4619      	mov	r1, r3
   85304:	202a      	movs	r0, #42	; 0x2a
   85306:	4b0b      	ldr	r3, [pc, #44]	; (85334 <Cl_Dlsis_controller+0x37c>)
   85308:	4798      	blx	r3
				
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   8530a:	e04a      	b.n	853a2 <Cl_Dlsis_controller+0x3ea>
   8530c:	0008659d 	.word	0x0008659d
   85310:	00082ea5 	.word	0x00082ea5
   85314:	00094729 	.word	0x00094729
   85318:	0009b0b9 	.word	0x0009b0b9
   8531c:	20072350 	.word	0x20072350
   85320:	20072614 	.word	0x20072614
   85324:	00093f5d 	.word	0x00093f5d
   85328:	000829e5 	.word	0x000829e5
   8532c:	20071814 	.word	0x20071814
   85330:	00082c31 	.word	0x00082c31
   85334:	0009cbd5 	.word	0x0009cbd5
			
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
			
			if(Treatdata[ID_bloodrate] >= 100){
   85338:	4bba      	ldr	r3, [pc, #744]	; (85624 <Cl_Dlsis_controller+0x66c>)
   8533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8533c:	2b63      	cmp	r3, #99	; 0x63
   8533e:	d932      	bls.n	853a6 <Cl_Dlsis_controller+0x3ee>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   85340:	4bb8      	ldr	r3, [pc, #736]	; (85624 <Cl_Dlsis_controller+0x66c>)
   85342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85344:	3b0a      	subs	r3, #10
   85346:	4ab7      	ldr	r2, [pc, #732]	; (85624 <Cl_Dlsis_controller+0x66c>)
   85348:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   8534a:	4bb6      	ldr	r3, [pc, #728]	; (85624 <Cl_Dlsis_controller+0x66c>)
   8534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8534e:	4619      	mov	r1, r3
   85350:	2001      	movs	r0, #1
   85352:	4bb5      	ldr	r3, [pc, #724]	; (85628 <Cl_Dlsis_controller+0x670>)
   85354:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   85356:	230f      	movs	r3, #15
   85358:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   8535c:	4bb1      	ldr	r3, [pc, #708]	; (85624 <Cl_Dlsis_controller+0x66c>)
   8535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85360:	643b      	str	r3, [r7, #64]	; 0x40
				abfdataarray[1] = abfdata.bytedata[0];
   85362:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85366:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				abfdataarray[2] = abfdata.bytedata[1];
   8536a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8536e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				abfdataarray[3] = abfdata.bytedata[2];
   85372:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85376:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				abfdataarray[4] = abfdata.bytedata[3];
   8537a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8537e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   85382:	f107 0338 	add.w	r3, r7, #56	; 0x38
   85386:	2205      	movs	r2, #5
   85388:	4619      	mov	r1, r3
   8538a:	202a      	movs	r0, #42	; 0x2a
   8538c:	4ba7      	ldr	r3, [pc, #668]	; (8562c <Cl_Dlsis_controller+0x674>)
   8538e:	4798      	blx	r3
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   85390:	e009      	b.n	853a6 <Cl_Dlsis_controller+0x3ee>
			
		
		
		default:break;
   85392:	bf00      	nop
   85394:	e008      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
				Treatdata[ID_heprate] = cl_temp.Twobyte;
			//	hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
			}
		break;
   85396:	bf00      	nop
   85398:	e006      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
			}
			
		}
		
		
		break;
   8539a:	bf00      	nop
   8539c:	e004      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   8539e:	bf00      	nop
   853a0:	e002      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
				
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   853a2:	bf00      	nop
   853a4:	e000      	b.n	853a8 <Cl_Dlsis_controller+0x3f0>
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   853a6:	bf00      	nop
		
		
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   853a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   853ac:	2b13      	cmp	r3, #19
   853ae:	d115      	bne.n	853dc <Cl_Dlsis_controller+0x424>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   853b0:	200c      	movs	r0, #12
   853b2:	4b9f      	ldr	r3, [pc, #636]	; (85630 <Cl_Dlsis_controller+0x678>)
   853b4:	4798      	blx	r3
   853b6:	4603      	mov	r3, r0
   853b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   853bc:	200e      	movs	r0, #14
   853be:	4b9c      	ldr	r3, [pc, #624]	; (85630 <Cl_Dlsis_controller+0x678>)
   853c0:	4798      	blx	r3
   853c2:	4603      	mov	r3, r0
   853c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   853c8:	200d      	movs	r0, #13
   853ca:	4b99      	ldr	r3, [pc, #612]	; (85630 <Cl_Dlsis_controller+0x678>)
   853cc:	4798      	blx	r3
   853ce:	4603      	mov	r3, r0
   853d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   853d4:	4b97      	ldr	r3, [pc, #604]	; (85634 <Cl_Dlsis_controller+0x67c>)
   853d6:	781a      	ldrb	r2, [r3, #0]
   853d8:	4b97      	ldr	r3, [pc, #604]	; (85638 <Cl_Dlsis_controller+0x680>)
   853da:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   853dc:	4b95      	ldr	r3, [pc, #596]	; (85634 <Cl_Dlsis_controller+0x67c>)
   853de:	781b      	ldrb	r3, [r3, #0]
   853e0:	2b0a      	cmp	r3, #10
   853e2:	f201 80c5 	bhi.w	86570 <Cl_Dlsis_controller+0x15b8>
   853e6:	a201      	add	r2, pc, #4	; (adr r2, 853ec <Cl_Dlsis_controller+0x434>)
   853e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   853ec:	00085419 	.word	0x00085419
   853f0:	00086571 	.word	0x00086571
   853f4:	00085689 	.word	0x00085689
   853f8:	0008571d 	.word	0x0008571d
   853fc:	0008598d 	.word	0x0008598d
   85400:	00085915 	.word	0x00085915
   85404:	0008625d 	.word	0x0008625d
   85408:	00085f93 	.word	0x00085f93
   8540c:	00085f0d 	.word	0x00085f0d
   85410:	0008609d 	.word	0x0008609d
   85414:	000860c7 	.word	0x000860c7
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   85418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   8541c:	3b02      	subs	r3, #2
   8541e:	2b14      	cmp	r3, #20
   85420:	f200 8129 	bhi.w	85676 <Cl_Dlsis_controller+0x6be>
   85424:	a201      	add	r2, pc, #4	; (adr r2, 8542c <Cl_Dlsis_controller+0x474>)
   85426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8542a:	bf00      	nop
   8542c:	00085481 	.word	0x00085481
   85430:	000854cf 	.word	0x000854cf
   85434:	00085677 	.word	0x00085677
   85438:	00085665 	.word	0x00085665
   8543c:	00085677 	.word	0x00085677
   85440:	00085677 	.word	0x00085677
   85444:	00085677 	.word	0x00085677
   85448:	00085677 	.word	0x00085677
   8544c:	00085677 	.word	0x00085677
   85450:	00085677 	.word	0x00085677
   85454:	00085677 	.word	0x00085677
   85458:	00085677 	.word	0x00085677
   8545c:	00085677 	.word	0x00085677
   85460:	00085677 	.word	0x00085677
   85464:	00085677 	.word	0x00085677
   85468:	00085677 	.word	0x00085677
   8546c:	00085677 	.word	0x00085677
   85470:	00085677 	.word	0x00085677
   85474:	00085677 	.word	0x00085677
   85478:	00085677 	.word	0x00085677
   8547c:	0008566b 	.word	0x0008566b
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85480:	4b6e      	ldr	r3, [pc, #440]	; (8563c <Cl_Dlsis_controller+0x684>)
   85482:	7e1b      	ldrb	r3, [r3, #24]
   85484:	2b00      	cmp	r3, #0
   85486:	f000 80f9 	beq.w	8567c <Cl_Dlsis_controller+0x6c4>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   8548a:	4b6c      	ldr	r3, [pc, #432]	; (8563c <Cl_Dlsis_controller+0x684>)
   8548c:	791b      	ldrb	r3, [r3, #4]
   8548e:	2b04      	cmp	r3, #4
   85490:	d000      	beq.n	85494 <Cl_Dlsis_controller+0x4dc>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   85492:	e01b      	b.n	854cc <Cl_Dlsis_controller+0x514>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85494:	2316      	movs	r3, #22
   85496:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   8549a:	2304      	movs	r3, #4
   8549c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   854a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   854a4:	3301      	adds	r3, #1
   854a6:	4619      	mov	r1, r3
   854a8:	2004      	movs	r0, #4
   854aa:	4b65      	ldr	r3, [pc, #404]	; (85640 <Cl_Dlsis_controller+0x688>)
   854ac:	4798      	blx	r3
   854ae:	4603      	mov	r3, r0
   854b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   854b4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   854b8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   854bc:	2202      	movs	r2, #2
   854be:	4618      	mov	r0, r3
   854c0:	4b5a      	ldr	r3, [pc, #360]	; (8562c <Cl_Dlsis_controller+0x674>)
   854c2:	4798      	blx	r3
   854c4:	4603      	mov	r3, r0
   854c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						break;
   854ca:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   854cc:	e0d6      	b.n	8567c <Cl_Dlsis_controller+0x6c4>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   854ce:	4b5b      	ldr	r3, [pc, #364]	; (8563c <Cl_Dlsis_controller+0x684>)
   854d0:	7e1b      	ldrb	r3, [r3, #24]
   854d2:	2b00      	cmp	r3, #0
   854d4:	f000 80d5 	beq.w	85682 <Cl_Dlsis_controller+0x6ca>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   854d8:	4b58      	ldr	r3, [pc, #352]	; (8563c <Cl_Dlsis_controller+0x684>)
   854da:	795b      	ldrb	r3, [r3, #5]
   854dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   854e0:	4b56      	ldr	r3, [pc, #344]	; (8563c <Cl_Dlsis_controller+0x684>)
   854e2:	799b      	ldrb	r3, [r3, #6]
   854e4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   854e8:	4b54      	ldr	r3, [pc, #336]	; (8563c <Cl_Dlsis_controller+0x684>)
   854ea:	79db      	ldrb	r3, [r3, #7]
   854ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   854f0:	4b52      	ldr	r3, [pc, #328]	; (8563c <Cl_Dlsis_controller+0x684>)
   854f2:	7a1b      	ldrb	r3, [r3, #8]
   854f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   854f8:	4b50      	ldr	r3, [pc, #320]	; (8563c <Cl_Dlsis_controller+0x684>)
   854fa:	791b      	ldrb	r3, [r3, #4]
   854fc:	3b05      	subs	r3, #5
   854fe:	2b20      	cmp	r3, #32
   85500:	f200 80ae 	bhi.w	85660 <Cl_Dlsis_controller+0x6a8>
   85504:	a201      	add	r2, pc, #4	; (adr r2, 8550c <Cl_Dlsis_controller+0x554>)
   85506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8550a:	bf00      	nop
   8550c:	00085661 	.word	0x00085661
   85510:	00085661 	.word	0x00085661
   85514:	00085661 	.word	0x00085661
   85518:	00085661 	.word	0x00085661
   8551c:	00085661 	.word	0x00085661
   85520:	00085661 	.word	0x00085661
   85524:	00085661 	.word	0x00085661
   85528:	00085661 	.word	0x00085661
   8552c:	00085661 	.word	0x00085661
   85530:	00085661 	.word	0x00085661
   85534:	00085661 	.word	0x00085661
   85538:	00085661 	.word	0x00085661
   8553c:	00085661 	.word	0x00085661
   85540:	00085661 	.word	0x00085661
   85544:	00085661 	.word	0x00085661
   85548:	00085661 	.word	0x00085661
   8554c:	00085661 	.word	0x00085661
   85550:	00085661 	.word	0x00085661
   85554:	00085661 	.word	0x00085661
   85558:	00085591 	.word	0x00085591
   8555c:	000855a9 	.word	0x000855a9
   85560:	000855c1 	.word	0x000855c1
   85564:	000855d1 	.word	0x000855d1
   85568:	000855e1 	.word	0x000855e1
   8556c:	000855f1 	.word	0x000855f1
   85570:	00085661 	.word	0x00085661
   85574:	00085661 	.word	0x00085661
   85578:	00085661 	.word	0x00085661
   8557c:	00085661 	.word	0x00085661
   85580:	00085601 	.word	0x00085601
   85584:	0008560b 	.word	0x0008560b
   85588:	00085615 	.word	0x00085615
   8558c:	00085651 	.word	0x00085651
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85590:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85592:	4a2c      	ldr	r2, [pc, #176]	; (85644 <Cl_Dlsis_controller+0x68c>)
   85594:	fba2 2303 	umull	r2, r3, r2, r3
   85598:	08da      	lsrs	r2, r3, #3
   8559a:	4b2b      	ldr	r3, [pc, #172]	; (85648 <Cl_Dlsis_controller+0x690>)
   8559c:	4610      	mov	r0, r2
   8559e:	4798      	blx	r3
   855a0:	4602      	mov	r2, r0
   855a2:	4b2a      	ldr	r3, [pc, #168]	; (8564c <Cl_Dlsis_controller+0x694>)
   855a4:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   855a6:	e05c      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   855a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   855aa:	4a26      	ldr	r2, [pc, #152]	; (85644 <Cl_Dlsis_controller+0x68c>)
   855ac:	fba2 2303 	umull	r2, r3, r2, r3
   855b0:	08da      	lsrs	r2, r3, #3
   855b2:	4b25      	ldr	r3, [pc, #148]	; (85648 <Cl_Dlsis_controller+0x690>)
   855b4:	4610      	mov	r0, r2
   855b6:	4798      	blx	r3
   855b8:	4602      	mov	r2, r0
   855ba:	4b24      	ldr	r3, [pc, #144]	; (8564c <Cl_Dlsis_controller+0x694>)
   855bc:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   855be:	e050      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   855c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   855c2:	4b21      	ldr	r3, [pc, #132]	; (85648 <Cl_Dlsis_controller+0x690>)
   855c4:	4610      	mov	r0, r2
   855c6:	4798      	blx	r3
   855c8:	4602      	mov	r2, r0
   855ca:	4b20      	ldr	r3, [pc, #128]	; (8564c <Cl_Dlsis_controller+0x694>)
   855cc:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   855ce:	e048      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   855d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   855d2:	4b1d      	ldr	r3, [pc, #116]	; (85648 <Cl_Dlsis_controller+0x690>)
   855d4:	4610      	mov	r0, r2
   855d6:	4798      	blx	r3
   855d8:	4602      	mov	r2, r0
   855da:	4b1c      	ldr	r3, [pc, #112]	; (8564c <Cl_Dlsis_controller+0x694>)
   855dc:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   855de:	e040      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   855e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   855e2:	4b19      	ldr	r3, [pc, #100]	; (85648 <Cl_Dlsis_controller+0x690>)
   855e4:	4610      	mov	r0, r2
   855e6:	4798      	blx	r3
   855e8:	4602      	mov	r2, r0
   855ea:	4b18      	ldr	r3, [pc, #96]	; (8564c <Cl_Dlsis_controller+0x694>)
   855ec:	615a      	str	r2, [r3, #20]
					break;
   855ee:	e038      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   855f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   855f2:	4b15      	ldr	r3, [pc, #84]	; (85648 <Cl_Dlsis_controller+0x690>)
   855f4:	4610      	mov	r0, r2
   855f6:	4798      	blx	r3
   855f8:	4602      	mov	r2, r0
   855fa:	4b14      	ldr	r3, [pc, #80]	; (8564c <Cl_Dlsis_controller+0x694>)
   855fc:	611a      	str	r2, [r3, #16]
					break;
   855fe:	e030      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85600:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85602:	b21a      	sxth	r2, r3
   85604:	4b11      	ldr	r3, [pc, #68]	; (8564c <Cl_Dlsis_controller+0x694>)
   85606:	801a      	strh	r2, [r3, #0]
					break;
   85608:	e02b      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8560c:	b21a      	sxth	r2, r3
   8560e:	4b0f      	ldr	r3, [pc, #60]	; (8564c <Cl_Dlsis_controller+0x694>)
   85610:	805a      	strh	r2, [r3, #2]
					break;
   85612:	e026      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85614:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85616:	4b0c      	ldr	r3, [pc, #48]	; (85648 <Cl_Dlsis_controller+0x690>)
   85618:	4610      	mov	r0, r2
   8561a:	4798      	blx	r3
   8561c:	4602      	mov	r2, r0
   8561e:	4b0b      	ldr	r3, [pc, #44]	; (8564c <Cl_Dlsis_controller+0x694>)
   85620:	60da      	str	r2, [r3, #12]
					break;
   85622:	e01e      	b.n	85662 <Cl_Dlsis_controller+0x6aa>
   85624:	20072614 	.word	0x20072614
   85628:	00093f5d 	.word	0x00093f5d
   8562c:	0009cbd5 	.word	0x0009cbd5
   85630:	00082ad9 	.word	0x00082ad9
   85634:	20071814 	.word	0x20071814
   85638:	2007260e 	.word	0x2007260e
   8563c:	20072350 	.word	0x20072350
   85640:	0009b701 	.word	0x0009b701
   85644:	cccccccd 	.word	0xcccccccd
   85648:	000a7ef9 	.word	0x000a7ef9
   8564c:	20072044 	.word	0x20072044
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85650:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85652:	4bb9      	ldr	r3, [pc, #740]	; (85938 <Cl_Dlsis_controller+0x980>)
   85654:	4610      	mov	r0, r2
   85656:	4798      	blx	r3
   85658:	4602      	mov	r2, r0
   8565a:	4bb8      	ldr	r3, [pc, #736]	; (8593c <Cl_Dlsis_controller+0x984>)
   8565c:	609a      	str	r2, [r3, #8]
					break;
   8565e:	e000      	b.n	85662 <Cl_Dlsis_controller+0x6aa>

					default:break;
   85660:	bf00      	nop
				}
			}
			
			
			break;
   85662:	e00e      	b.n	85682 <Cl_Dlsis_controller+0x6ca>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   85664:	4bb6      	ldr	r3, [pc, #728]	; (85940 <Cl_Dlsis_controller+0x988>)
   85666:	4798      	blx	r3
			break;
   85668:	e00c      	b.n	85684 <Cl_Dlsis_controller+0x6cc>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   8566a:	4bb6      	ldr	r3, [pc, #728]	; (85944 <Cl_Dlsis_controller+0x98c>)
   8566c:	4798      	blx	r3
   8566e:	4603      	mov	r3, r0
   85670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			break;
   85674:	e006      	b.n	85684 <Cl_Dlsis_controller+0x6cc>
			default:
			break;
   85676:	bf00      	nop
   85678:	f000 bf7d 	b.w	86576 <Cl_Dlsis_controller+0x15be>
							
						default:
						break;
					}
				}
			break;
   8567c:	bf00      	nop
   8567e:	f000 bf7a 	b.w	86576 <Cl_Dlsis_controller+0x15be>
					default:break;
				}
			}
			
			
			break;
   85682:	bf00      	nop
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
			default:
			break;
		}
		break;
   85684:	f000 bf77 	b.w	86576 <Cl_Dlsis_controller+0x15be>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   85688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   8568c:	2b06      	cmp	r3, #6
   8568e:	d002      	beq.n	85696 <Cl_Dlsis_controller+0x6de>
   85690:	2b12      	cmp	r3, #18
   85692:	d008      	beq.n	856a6 <Cl_Dlsis_controller+0x6ee>
						
					}
				break;
				
				
				default:break;
   85694:	e040      	b.n	85718 <Cl_Dlsis_controller+0x760>
		
			switch(cl_dlsis_event)
			{
				
				case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
				sv_cntrl_enable_bypass();
   85696:	4bac      	ldr	r3, [pc, #688]	; (85948 <Cl_Dlsis_controller+0x990>)
   85698:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   8569a:	4bac      	ldr	r3, [pc, #688]	; (8594c <Cl_Dlsis_controller+0x994>)
   8569c:	4798      	blx	r3
				cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   8569e:	4bac      	ldr	r3, [pc, #688]	; (85950 <Cl_Dlsis_controller+0x998>)
   856a0:	2209      	movs	r2, #9
   856a2:	701a      	strb	r2, [r3, #0]
				break;
   856a4:	e038      	b.n	85718 <Cl_Dlsis_controller+0x760>
				
				case EVENT_DLSIS_TICK_500MS:
				
					
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   856a6:	48ab      	ldr	r0, [pc, #684]	; (85954 <Cl_Dlsis_controller+0x99c>)
   856a8:	4bab      	ldr	r3, [pc, #684]	; (85958 <Cl_Dlsis_controller+0x9a0>)
   856aa:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   856ac:	2300      	movs	r3, #0
   856ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
					//Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					if( (temp == 0))
   856b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   856b6:	2b00      	cmp	r3, #0
   856b8:	d106      	bne.n	856c8 <Cl_Dlsis_controller+0x710>
					{
						
					//	sv_cntrl_disable_bypass();
				bypass_flag = 0;
   856ba:	4ba8      	ldr	r3, [pc, #672]	; (8595c <Cl_Dlsis_controller+0x9a4>)
   856bc:	2200      	movs	r2, #0
   856be:	701a      	strb	r2, [r3, #0]
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   856c0:	4ba3      	ldr	r3, [pc, #652]	; (85950 <Cl_Dlsis_controller+0x998>)
   856c2:	2203      	movs	r2, #3
   856c4:	701a      	strb	r2, [r3, #0]
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
						sv_cntrl_enable_bypass();
						cl_uf_controller(CL_UF_EVENT_STOP,0);
						
					}
				break;
   856c6:	e026      	b.n	85716 <Cl_Dlsis_controller+0x75e>
				bypass_flag = 0;
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
				
					}
					else{
						Cl_Uint8Type data[3] ={0, 0};
   856c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   856cc:	2100      	movs	r1, #0
   856ce:	460a      	mov	r2, r1
   856d0:	801a      	strh	r2, [r3, #0]
   856d2:	460a      	mov	r2, r1
   856d4:	709a      	strb	r2, [r3, #2]
						data[0] = (Cl_Uint8Type)1;
   856d6:	2301      	movs	r3, #1
   856d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   856dc:	2301      	movs	r3, #1
   856de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						data[2] = (Cl_Uint8Type)CRITICAL;
   856e2:	2302      	movs	r3, #2
   856e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						command = CON_TX_COMMAND_ALERT;
   856e8:	234f      	movs	r3, #79	; 0x4f
   856ea:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
						 cl_wait(10);
   856ee:	200a      	movs	r0, #10
   856f0:	4b9b      	ldr	r3, [pc, #620]	; (85960 <Cl_Dlsis_controller+0x9a8>)
   856f2:	4798      	blx	r3
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   856f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
   856f8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   856fc:	2203      	movs	r2, #3
   856fe:	4618      	mov	r0, r3
   85700:	4b98      	ldr	r3, [pc, #608]	; (85964 <Cl_Dlsis_controller+0x9ac>)
   85702:	4798      	blx	r3
   85704:	4603      	mov	r3, r0
   85706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						sv_cntrl_enable_bypass();
   8570a:	4b8f      	ldr	r3, [pc, #572]	; (85948 <Cl_Dlsis_controller+0x990>)
   8570c:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   8570e:	2100      	movs	r1, #0
   85710:	2004      	movs	r0, #4
   85712:	4b95      	ldr	r3, [pc, #596]	; (85968 <Cl_Dlsis_controller+0x9b0>)
   85714:	4798      	blx	r3
						
					}
				break;
   85716:	bf00      	nop
				
				
				default:break;
			}

		break;
   85718:	f000 bf2d 	b.w	86576 <Cl_Dlsis_controller+0x15be>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   8571c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   85720:	2b06      	cmp	r3, #6
   85722:	d002      	beq.n	8572a <Cl_Dlsis_controller+0x772>
   85724:	2b12      	cmp	r3, #18
   85726:	d008      	beq.n	8573a <Cl_Dlsis_controller+0x782>
						Cl_Alarm_TriggerAlarm(BD_EVENT, 1);               // manav02 added
					}
					
					}
			break;
			default:break;
   85728:	e0f2      	b.n	85910 <Cl_Dlsis_controller+0x958>
		
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
			sv_cntrl_enable_bypass();
   8572a:	4b87      	ldr	r3, [pc, #540]	; (85948 <Cl_Dlsis_controller+0x990>)
   8572c:	4798      	blx	r3
			Cl_Dlsis_StopDialysis();
   8572e:	4b87      	ldr	r3, [pc, #540]	; (8594c <Cl_Dlsis_controller+0x994>)
   85730:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   85732:	4b87      	ldr	r3, [pc, #540]	; (85950 <Cl_Dlsis_controller+0x998>)
   85734:	2209      	movs	r2, #9
   85736:	701a      	strb	r2, [r3, #0]
			break;
   85738:	e0ea      	b.n	85910 <Cl_Dlsis_controller+0x958>
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   8573a:	2300      	movs	r3, #0
   8573c:	847b      	strh	r3, [r7, #34]	; 0x22
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   8573e:	f107 0322 	add.w	r3, r7, #34	; 0x22
   85742:	4619      	mov	r1, r3
   85744:	200a      	movs	r0, #10
   85746:	4b89      	ldr	r3, [pc, #548]	; (8596c <Cl_Dlsis_controller+0x9b4>)
   85748:	4798      	blx	r3
					if( temp == 0)  // need to change as per the blood detector status // manav02 changed to 1
   8574a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   8574c:	2b00      	cmp	r3, #0
   8574e:	f040 80d4 	bne.w	858fa <Cl_Dlsis_controller+0x942>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   85752:	2208      	movs	r2, #8
   85754:	4986      	ldr	r1, [pc, #536]	; (85970 <Cl_Dlsis_controller+0x9b8>)
   85756:	2018      	movs	r0, #24
   85758:	4b82      	ldr	r3, [pc, #520]	; (85964 <Cl_Dlsis_controller+0x9ac>)
   8575a:	4798      	blx	r3

         					Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   8575c:	4b85      	ldr	r3, [pc, #532]	; (85974 <Cl_Dlsis_controller+0x9bc>)
   8575e:	69db      	ldr	r3, [r3, #28]
   85760:	65bb      	str	r3, [r7, #88]	; 0x58
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,temp1);
   85762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   85764:	4619      	mov	r1, r3
   85766:	200b      	movs	r0, #11
   85768:	4b83      	ldr	r3, [pc, #524]	; (85978 <Cl_Dlsis_controller+0x9c0>)
   8576a:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   8576c:	4b83      	ldr	r3, [pc, #524]	; (8597c <Cl_Dlsis_controller+0x9c4>)
   8576e:	4798      	blx	r3
					//	Cl_Uint32Type temp = Treatdata[ID_ufgoal];
					//	Cl_Uint32Type temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   85770:	2100      	movs	r1, #0
   85772:	2002      	movs	r0, #2
   85774:	4b7c      	ldr	r3, [pc, #496]	; (85968 <Cl_Dlsis_controller+0x9b0>)
   85776:	4798      	blx	r3
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   85778:	2101      	movs	r1, #1
   8577a:	2001      	movs	r0, #1
   8577c:	4b80      	ldr	r3, [pc, #512]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8577e:	4798      	blx	r3
   85780:	4603      	mov	r3, r0
   85782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   85786:	2101      	movs	r1, #1
   85788:	2024      	movs	r0, #36	; 0x24
   8578a:	4b7d      	ldr	r3, [pc, #500]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8578c:	4798      	blx	r3
   8578e:	4603      	mov	r3, r0
   85790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   85794:	2101      	movs	r1, #1
   85796:	2023      	movs	r0, #35	; 0x23
   85798:	4b79      	ldr	r3, [pc, #484]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8579a:	4798      	blx	r3
   8579c:	4603      	mov	r3, r0
   8579e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
   857a2:	2101      	movs	r1, #1
   857a4:	2026      	movs	r0, #38	; 0x26
   857a6:	4b76      	ldr	r3, [pc, #472]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857a8:	4798      	blx	r3
   857aa:	4603      	mov	r3, r0
   857ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true );
   857b0:	2101      	movs	r1, #1
   857b2:	2025      	movs	r0, #37	; 0x25
   857b4:	4b72      	ldr	r3, [pc, #456]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857b6:	4798      	blx	r3
   857b8:	4603      	mov	r3, r0
   857ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   857be:	2101      	movs	r1, #1
   857c0:	2015      	movs	r0, #21
   857c2:	4b6f      	ldr	r3, [pc, #444]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857c4:	4798      	blx	r3
   857c6:	4603      	mov	r3, r0
   857c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   857cc:	2101      	movs	r1, #1
   857ce:	2016      	movs	r0, #22
   857d0:	4b6b      	ldr	r3, [pc, #428]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857d2:	4798      	blx	r3
   857d4:	4603      	mov	r3, r0
   857d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   857da:	2101      	movs	r1, #1
   857dc:	2017      	movs	r0, #23
   857de:	4b68      	ldr	r3, [pc, #416]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857e0:	4798      	blx	r3
   857e2:	4603      	mov	r3, r0
   857e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   857e8:	2101      	movs	r1, #1
   857ea:	2018      	movs	r0, #24
   857ec:	4b64      	ldr	r3, [pc, #400]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857ee:	4798      	blx	r3
   857f0:	4603      	mov	r3, r0
   857f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   857f6:	2101      	movs	r1, #1
   857f8:	2027      	movs	r0, #39	; 0x27
   857fa:	4b61      	ldr	r3, [pc, #388]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   857fc:	4798      	blx	r3
   857fe:	4603      	mov	r3, r0
   85800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   85804:	2101      	movs	r1, #1
   85806:	2028      	movs	r0, #40	; 0x28
   85808:	4b5d      	ldr	r3, [pc, #372]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8580a:	4798      	blx	r3
   8580c:	4603      	mov	r3, r0
   8580e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   85812:	2101      	movs	r1, #1
   85814:	200c      	movs	r0, #12
   85816:	4b5a      	ldr	r3, [pc, #360]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85818:	4798      	blx	r3
   8581a:	4603      	mov	r3, r0
   8581c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   85820:	2101      	movs	r1, #1
   85822:	200d      	movs	r0, #13
   85824:	4b56      	ldr	r3, [pc, #344]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85826:	4798      	blx	r3
   85828:	4603      	mov	r3, r0
   8582a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true ); 
   8582e:	2101      	movs	r1, #1
   85830:	200e      	movs	r0, #14
   85832:	4b53      	ldr	r3, [pc, #332]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85834:	4798      	blx	r3
   85836:	4603      	mov	r3, r0
   85838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   8583c:	2101      	movs	r1, #1
   8583e:	2005      	movs	r0, #5
   85840:	4b4f      	ldr	r3, [pc, #316]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85842:	4798      	blx	r3
   85844:	4603      	mov	r3, r0
   85846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   8584a:	2101      	movs	r1, #1
   8584c:	2006      	movs	r0, #6
   8584e:	4b4c      	ldr	r3, [pc, #304]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85850:	4798      	blx	r3
   85852:	4603      	mov	r3, r0
   85854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   85858:	2100      	movs	r1, #0
   8585a:	2003      	movs	r0, #3
   8585c:	4b48      	ldr	r3, [pc, #288]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8585e:	4798      	blx	r3
   85860:	4603      	mov	r3, r0
   85862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   85866:	2100      	movs	r1, #0
   85868:	2004      	movs	r0, #4
   8586a:	4b45      	ldr	r3, [pc, #276]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8586c:	4798      	blx	r3
   8586e:	4603      	mov	r3, r0
   85870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   85874:	2100      	movs	r1, #0
   85876:	2007      	movs	r0, #7
   85878:	4b41      	ldr	r3, [pc, #260]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   8587a:	4798      	blx	r3
   8587c:	4603      	mov	r3, r0
   8587e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   85882:	2100      	movs	r1, #0
   85884:	2008      	movs	r0, #8
   85886:	4b3e      	ldr	r3, [pc, #248]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85888:	4798      	blx	r3
   8588a:	4603      	mov	r3, r0
   8588c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   85890:	2100      	movs	r1, #0
   85892:	2029      	movs	r0, #41	; 0x29
   85894:	4b3a      	ldr	r3, [pc, #232]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   85896:	4798      	blx	r3
   85898:	4603      	mov	r3, r0
   8589a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   8589e:	2100      	movs	r1, #0
   858a0:	202b      	movs	r0, #43	; 0x2b
   858a2:	4b37      	ldr	r3, [pc, #220]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   858a4:	4798      	blx	r3
   858a6:	4603      	mov	r3, r0
   858a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true);
   858ac:	2101      	movs	r1, #1
   858ae:	202a      	movs	r0, #42	; 0x2a
   858b0:	4b33      	ldr	r3, [pc, #204]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   858b2:	4798      	blx	r3
   858b4:	4603      	mov	r3, r0
   858b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   858ba:	2101      	movs	r1, #1
   858bc:	202c      	movs	r0, #44	; 0x2c
   858be:	4b30      	ldr	r3, [pc, #192]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   858c0:	4798      	blx	r3
   858c2:	4603      	mov	r3, r0
   858c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   858c8:	2100      	movs	r1, #0
   858ca:	2021      	movs	r0, #33	; 0x21
   858cc:	4b2c      	ldr	r3, [pc, #176]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   858ce:	4798      	blx	r3
   858d0:	4603      	mov	r3, r0
   858d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   858d6:	2101      	movs	r1, #1
   858d8:	2013      	movs	r0, #19
   858da:	4b29      	ldr	r3, [pc, #164]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   858dc:	4798      	blx	r3
   858de:	4603      	mov	r3, r0
   858e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   858e4:	2101      	movs	r1, #1
   858e6:	2014      	movs	r0, #20
   858e8:	4b25      	ldr	r3, [pc, #148]	; (85980 <Cl_Dlsis_controller+0x9c8>)
   858ea:	4798      	blx	r3
   858ec:	4603      	mov	r3, r0
   858ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			
			
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
   858f2:	4b17      	ldr	r3, [pc, #92]	; (85950 <Cl_Dlsis_controller+0x998>)
   858f4:	2204      	movs	r2, #4
   858f6:	701a      	strb	r2, [r3, #0]
						// trigger blood not detected alarm
						Cl_Alarm_TriggerAlarm(BD_EVENT, 1);               // manav02 added
					}
					
					}
			break;
   858f8:	e009      	b.n	8590e <Cl_Dlsis_controller+0x956>
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					else{
						
						sv_cntrl_enable_bypass();
   858fa:	4b13      	ldr	r3, [pc, #76]	; (85948 <Cl_Dlsis_controller+0x990>)
   858fc:	4798      	blx	r3
						
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   858fe:	2100      	movs	r1, #0
   85900:	2004      	movs	r0, #4
   85902:	4b19      	ldr	r3, [pc, #100]	; (85968 <Cl_Dlsis_controller+0x9b0>)
   85904:	4798      	blx	r3
						
						// trigger blood not detected alarm
						Cl_Alarm_TriggerAlarm(BD_EVENT, 1);               // manav02 added
   85906:	2101      	movs	r1, #1
   85908:	2021      	movs	r0, #33	; 0x21
   8590a:	4b1e      	ldr	r3, [pc, #120]	; (85984 <Cl_Dlsis_controller+0x9cc>)
   8590c:	4798      	blx	r3
					}
					
					}
			break;
   8590e:	bf00      	nop
			default:break;
		}
		break;
   85910:	f000 be31 	b.w	86576 <Cl_Dlsis_controller+0x15be>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   85914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   85918:	2b13      	cmp	r3, #19
   8591a:	d000      	beq.n	8591e <Cl_Dlsis_controller+0x966>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   8591c:	e00a      	b.n	85934 <Cl_Dlsis_controller+0x97c>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   8591e:	4b1a      	ldr	r3, [pc, #104]	; (85988 <Cl_Dlsis_controller+0x9d0>)
   85920:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   85922:	f640 11c4 	movw	r1, #2500	; 0x9c4
   85926:	2001      	movs	r0, #1
   85928:	4b0f      	ldr	r3, [pc, #60]	; (85968 <Cl_Dlsis_controller+0x9b0>)
   8592a:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   8592c:	4b08      	ldr	r3, [pc, #32]	; (85950 <Cl_Dlsis_controller+0x998>)
   8592e:	2204      	movs	r2, #4
   85930:	701a      	strb	r2, [r3, #0]
			break;
   85932:	bf00      	nop
			default:break;
		}
		
		break;
   85934:	f000 be1f 	b.w	86576 <Cl_Dlsis_controller+0x15be>
   85938:	000a7ef9 	.word	0x000a7ef9
   8593c:	20072044 	.word	0x20072044
   85940:	00087ae5 	.word	0x00087ae5
   85944:	00087369 	.word	0x00087369
   85948:	0009af8d 	.word	0x0009af8d
   8594c:	00086e55 	.word	0x00086e55
   85950:	20071814 	.word	0x20071814
   85954:	2007182d 	.word	0x2007182d
   85958:	00088ee9 	.word	0x00088ee9
   8595c:	20071832 	.word	0x20071832
   85960:	00093ea9 	.word	0x00093ea9
   85964:	0009cbd5 	.word	0x0009cbd5
   85968:	00096ea9 	.word	0x00096ea9
   8596c:	0008fa01 	.word	0x0008fa01
   85970:	000a9f74 	.word	0x000a9f74
   85974:	20072614 	.word	0x20072614
   85978:	00094729 	.word	0x00094729
   8597c:	0009afa9 	.word	0x0009afa9
   85980:	000829e5 	.word	0x000829e5
   85984:	00082c31 	.word	0x00082c31
   85988:	000873b1 	.word	0x000873b1
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   8598c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   85990:	3b02      	subs	r3, #2
   85992:	2b25      	cmp	r3, #37	; 0x25
   85994:	f200 85ee 	bhi.w	86574 <Cl_Dlsis_controller+0x15bc>
   85998:	a201      	add	r2, pc, #4	; (adr r2, 859a0 <Cl_Dlsis_controller+0x9e8>)
   8599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8599e:	bf00      	nop
   859a0:	00085b67 	.word	0x00085b67
   859a4:	00085bb5 	.word	0x00085bb5
   859a8:	00086575 	.word	0x00086575
   859ac:	00086575 	.word	0x00086575
   859b0:	00085ea9 	.word	0x00085ea9
   859b4:	00085ebf 	.word	0x00085ebf
   859b8:	00085ecb 	.word	0x00085ecb
   859bc:	00085ed1 	.word	0x00085ed1
   859c0:	00086575 	.word	0x00086575
   859c4:	00086575 	.word	0x00086575
   859c8:	00086575 	.word	0x00086575
   859cc:	00086575 	.word	0x00086575
   859d0:	00086575 	.word	0x00086575
   859d4:	00086575 	.word	0x00086575
   859d8:	00086575 	.word	0x00086575
   859dc:	00085efd 	.word	0x00085efd
   859e0:	00085d85 	.word	0x00085d85
   859e4:	00085db9 	.word	0x00085db9
   859e8:	00085daf 	.word	0x00085daf
   859ec:	00086575 	.word	0x00086575
   859f0:	00085ed7 	.word	0x00085ed7
   859f4:	00085ee3 	.word	0x00085ee3
   859f8:	00086575 	.word	0x00086575
   859fc:	00086575 	.word	0x00086575
   85a00:	00086575 	.word	0x00086575
   85a04:	00085efd 	.word	0x00085efd
   85a08:	00085efd 	.word	0x00085efd
   85a0c:	00086575 	.word	0x00086575
   85a10:	00086575 	.word	0x00086575
   85a14:	00085b5b 	.word	0x00085b5b
   85a18:	00086575 	.word	0x00086575
   85a1c:	00086575 	.word	0x00086575
   85a20:	00086575 	.word	0x00086575
   85a24:	00086575 	.word	0x00086575
   85a28:	00086575 	.word	0x00086575
   85a2c:	00086575 	.word	0x00086575
   85a30:	00085a39 	.word	0x00085a39
   85a34:	00085abd 	.word	0x00085abd
		{

			case EVENT_DLSIS_DIALYSIS_ISOUF_ON:
			
			sv_cntrl_deactivate_valve(VALVE_ID13);
   85a38:	200d      	movs	r0, #13
   85a3a:	4bb4      	ldr	r3, [pc, #720]	; (85d0c <Cl_Dlsis_controller+0xd54>)
   85a3c:	4798      	blx	r3
			sv_cntrl_activate_valve(VALVE_ID14);
   85a3e:	200e      	movs	r0, #14
   85a40:	4bb3      	ldr	r3, [pc, #716]	; (85d10 <Cl_Dlsis_controller+0xd58>)
   85a42:	4798      	blx	r3
			sv_cntrl_deactivate_valve(VALVE_ID15);
   85a44:	200f      	movs	r0, #15
   85a46:	4bb1      	ldr	r3, [pc, #708]	; (85d0c <Cl_Dlsis_controller+0xd54>)
   85a48:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_START,0);
   85a4a:	2100      	movs	r1, #0
   85a4c:	2002      	movs	r0, #2
   85a4e:	4bb1      	ldr	r3, [pc, #708]	; (85d14 <Cl_Dlsis_controller+0xd5c>)
   85a50:	4798      	blx	r3
						
			isouf = true;
   85a52:	4bb1      	ldr	r3, [pc, #708]	; (85d18 <Cl_Dlsis_controller+0xd60>)
   85a54:	2201      	movs	r2, #1
   85a56:	701a      	strb	r2, [r3, #0]
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
// 				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   85a58:	2100      	movs	r1, #0
   85a5a:	2018      	movs	r0, #24
   85a5c:	4baf      	ldr	r3, [pc, #700]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85a5e:	4798      	blx	r3
   85a60:	4603      	mov	r3, r0
   85a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   85a66:	2100      	movs	r1, #0
   85a68:	2015      	movs	r0, #21
   85a6a:	4bac      	ldr	r3, [pc, #688]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85a6c:	4798      	blx	r3
   85a6e:	4603      	mov	r3, r0
   85a70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   85a74:	2100      	movs	r1, #0
   85a76:	2016      	movs	r0, #22
   85a78:	4ba8      	ldr	r3, [pc, #672]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85a7a:	4798      	blx	r3
   85a7c:	4603      	mov	r3, r0
   85a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   85a82:	2100      	movs	r1, #0
   85a84:	2027      	movs	r0, #39	; 0x27
   85a86:	4ba5      	ldr	r3, [pc, #660]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85a88:	4798      	blx	r3
   85a8a:	4603      	mov	r3, r0
   85a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   85a90:	2100      	movs	r1, #0
   85a92:	2028      	movs	r0, #40	; 0x28
   85a94:	4ba1      	ldr	r3, [pc, #644]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85a96:	4798      	blx	r3
   85a98:	4603      	mov	r3, r0
   85a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,false );
   85a9e:	2100      	movs	r1, #0
   85aa0:	2041      	movs	r0, #65	; 0x41
   85aa2:	4b9e      	ldr	r3, [pc, #632]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85aa4:	4798      	blx	r3
   85aa6:	4603      	mov	r3, r0
   85aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,false );
   85aac:	2100      	movs	r1, #0
   85aae:	2042      	movs	r0, #66	; 0x42
   85ab0:	4b9a      	ldr	r3, [pc, #616]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85ab2:	4798      	blx	r3
   85ab4:	4603      	mov	r3, r0
   85ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			
			break;
   85aba:	e226      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			case EVENT_DLSIS_DIALYSIS_ISOUF_OFF:

			sv_cntrl_activate_valve(VALVE_ID13);
   85abc:	200d      	movs	r0, #13
   85abe:	4b94      	ldr	r3, [pc, #592]	; (85d10 <Cl_Dlsis_controller+0xd58>)
   85ac0:	4798      	blx	r3
			sv_cntrl_activate_valve(VALVE_ID14);
   85ac2:	200e      	movs	r0, #14
   85ac4:	4b92      	ldr	r3, [pc, #584]	; (85d10 <Cl_Dlsis_controller+0xd58>)
   85ac6:	4798      	blx	r3
			sv_cntrl_deactivate_valve(VALVE_ID15);
   85ac8:	200f      	movs	r0, #15
   85aca:	4b90      	ldr	r3, [pc, #576]	; (85d0c <Cl_Dlsis_controller+0xd54>)
   85acc:	4798      	blx	r3
			
			if(ufRemoved >= Treatdata[ID_ufgoal]){
   85ace:	4b94      	ldr	r3, [pc, #592]	; (85d20 <Cl_Dlsis_controller+0xd68>)
   85ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   85ad2:	4b94      	ldr	r3, [pc, #592]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85ad4:	4610      	mov	r0, r2
   85ad6:	4798      	blx	r3
   85ad8:	4b93      	ldr	r3, [pc, #588]	; (85d28 <Cl_Dlsis_controller+0xd70>)
   85ada:	681a      	ldr	r2, [r3, #0]
   85adc:	4b93      	ldr	r3, [pc, #588]	; (85d2c <Cl_Dlsis_controller+0xd74>)
   85ade:	4611      	mov	r1, r2
   85ae0:	4798      	blx	r3
   85ae2:	4603      	mov	r3, r0
   85ae4:	2b00      	cmp	r3, #0
   85ae6:	d003      	beq.n	85af0 <Cl_Dlsis_controller+0xb38>
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   85ae8:	2100      	movs	r1, #0
   85aea:	2004      	movs	r0, #4
   85aec:	4b89      	ldr	r3, [pc, #548]	; (85d14 <Cl_Dlsis_controller+0xd5c>)
   85aee:	4798      	blx	r3
				}
			
			isouf = false;
   85af0:	4b89      	ldr	r3, [pc, #548]	; (85d18 <Cl_Dlsis_controller+0xd60>)
   85af2:	2200      	movs	r2, #0
   85af4:	701a      	strb	r2, [r3, #0]

				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   85af6:	2101      	movs	r1, #1
   85af8:	2018      	movs	r0, #24
   85afa:	4b88      	ldr	r3, [pc, #544]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85afc:	4798      	blx	r3
   85afe:	4603      	mov	r3, r0
   85b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   85b04:	2101      	movs	r1, #1
   85b06:	2015      	movs	r0, #21
   85b08:	4b84      	ldr	r3, [pc, #528]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85b0a:	4798      	blx	r3
   85b0c:	4603      	mov	r3, r0
   85b0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   85b12:	2101      	movs	r1, #1
   85b14:	2016      	movs	r0, #22
   85b16:	4b81      	ldr	r3, [pc, #516]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85b18:	4798      	blx	r3
   85b1a:	4603      	mov	r3, r0
   85b1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   85b20:	2101      	movs	r1, #1
   85b22:	2027      	movs	r0, #39	; 0x27
   85b24:	4b7d      	ldr	r3, [pc, #500]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85b26:	4798      	blx	r3
   85b28:	4603      	mov	r3, r0
   85b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   85b2e:	2101      	movs	r1, #1
   85b30:	2028      	movs	r0, #40	; 0x28
   85b32:	4b7a      	ldr	r3, [pc, #488]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85b34:	4798      	blx	r3
   85b36:	4603      	mov	r3, r0
   85b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,true );
   85b3c:	2101      	movs	r1, #1
   85b3e:	2041      	movs	r0, #65	; 0x41
   85b40:	4b76      	ldr	r3, [pc, #472]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85b42:	4798      	blx	r3
   85b44:	4603      	mov	r3, r0
   85b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,true );
   85b4a:	2101      	movs	r1, #1
   85b4c:	2042      	movs	r0, #66	; 0x42
   85b4e:	4b73      	ldr	r3, [pc, #460]	; (85d1c <Cl_Dlsis_controller+0xd64>)
   85b50:	4798      	blx	r3
   85b52:	4603      	mov	r3, r0
   85b54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			break;			
   85b58:	e1d7      	b.n	85f0a <Cl_Dlsis_controller+0xf52>

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85b5a:	4b75      	ldr	r3, [pc, #468]	; (85d30 <Cl_Dlsis_controller+0xd78>)
   85b5c:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85b5e:	4b75      	ldr	r3, [pc, #468]	; (85d34 <Cl_Dlsis_controller+0xd7c>)
   85b60:	2207      	movs	r2, #7
   85b62:	701a      	strb	r2, [r3, #0]
			break;
   85b64:	e1d1      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85b66:	4b74      	ldr	r3, [pc, #464]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85b68:	7e1b      	ldrb	r3, [r3, #24]
   85b6a:	2b00      	cmp	r3, #0
   85b6c:	f000 81c8 	beq.w	85f00 <Cl_Dlsis_controller+0xf48>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85b70:	4b71      	ldr	r3, [pc, #452]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85b72:	791b      	ldrb	r3, [r3, #4]
   85b74:	2b04      	cmp	r3, #4
   85b76:	d000      	beq.n	85b7a <Cl_Dlsis_controller+0xbc2>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   85b78:	e01b      	b.n	85bb2 <Cl_Dlsis_controller+0xbfa>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85b7a:	2316      	movs	r3, #22
   85b7c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85b80:	2304      	movs	r3, #4
   85b82:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   85b8a:	3301      	adds	r3, #1
   85b8c:	4619      	mov	r1, r3
   85b8e:	2004      	movs	r0, #4
   85b90:	4b6a      	ldr	r3, [pc, #424]	; (85d3c <Cl_Dlsis_controller+0xd84>)
   85b92:	4798      	blx	r3
   85b94:	4603      	mov	r3, r0
   85b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85b9a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   85b9e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   85ba2:	2202      	movs	r2, #2
   85ba4:	4618      	mov	r0, r3
   85ba6:	4b66      	ldr	r3, [pc, #408]	; (85d40 <Cl_Dlsis_controller+0xd88>)
   85ba8:	4798      	blx	r3
   85baa:	4603      	mov	r3, r0
   85bac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						break;
   85bb0:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85bb2:	e1a5      	b.n	85f00 <Cl_Dlsis_controller+0xf48>
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   85bb4:	4b60      	ldr	r3, [pc, #384]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85bb6:	7e1b      	ldrb	r3, [r3, #24]
   85bb8:	2b00      	cmp	r3, #0
   85bba:	f000 81a3 	beq.w	85f04 <Cl_Dlsis_controller+0xf4c>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85bbe:	4b5e      	ldr	r3, [pc, #376]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85bc0:	795b      	ldrb	r3, [r3, #5]
   85bc2:	773b      	strb	r3, [r7, #28]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85bc4:	4b5c      	ldr	r3, [pc, #368]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85bc6:	799b      	ldrb	r3, [r3, #6]
   85bc8:	777b      	strb	r3, [r7, #29]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85bca:	4b5b      	ldr	r3, [pc, #364]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85bcc:	79db      	ldrb	r3, [r3, #7]
   85bce:	77bb      	strb	r3, [r7, #30]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85bd0:	4b59      	ldr	r3, [pc, #356]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85bd2:	7a1b      	ldrb	r3, [r3, #8]
   85bd4:	77fb      	strb	r3, [r7, #31]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   85bd6:	4b58      	ldr	r3, [pc, #352]	; (85d38 <Cl_Dlsis_controller+0xd80>)
   85bd8:	791b      	ldrb	r3, [r3, #4]
   85bda:	3b05      	subs	r3, #5
   85bdc:	2b20      	cmp	r3, #32
   85bde:	f200 80cf 	bhi.w	85d80 <Cl_Dlsis_controller+0xdc8>
   85be2:	a201      	add	r2, pc, #4	; (adr r2, 85be8 <Cl_Dlsis_controller+0xc30>)
   85be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85be8:	00085d81 	.word	0x00085d81
   85bec:	00085d81 	.word	0x00085d81
   85bf0:	00085d81 	.word	0x00085d81
   85bf4:	00085d81 	.word	0x00085d81
   85bf8:	00085d81 	.word	0x00085d81
   85bfc:	00085d81 	.word	0x00085d81
   85c00:	00085d81 	.word	0x00085d81
   85c04:	00085d81 	.word	0x00085d81
   85c08:	00085c6d 	.word	0x00085c6d
   85c0c:	00085d81 	.word	0x00085d81
   85c10:	00085d81 	.word	0x00085d81
   85c14:	00085d81 	.word	0x00085d81
   85c18:	00085d81 	.word	0x00085d81
   85c1c:	00085d81 	.word	0x00085d81
   85c20:	00085d81 	.word	0x00085d81
   85c24:	00085d81 	.word	0x00085d81
   85c28:	00085c8b 	.word	0x00085c8b
   85c2c:	00085d81 	.word	0x00085d81
   85c30:	00085d81 	.word	0x00085d81
   85c34:	00085c9b 	.word	0x00085c9b
   85c38:	00085cb3 	.word	0x00085cb3
   85c3c:	00085ccb 	.word	0x00085ccb
   85c40:	00085cdb 	.word	0x00085cdb
   85c44:	00085ceb 	.word	0x00085ceb
   85c48:	00085cfb 	.word	0x00085cfb
   85c4c:	00085d81 	.word	0x00085d81
   85c50:	00085d81 	.word	0x00085d81
   85c54:	00085d81 	.word	0x00085d81
   85c58:	00085d81 	.word	0x00085d81
   85c5c:	00085d4d 	.word	0x00085d4d
   85c60:	00085d57 	.word	0x00085d57
   85c64:	00085d61 	.word	0x00085d61
   85c68:	00085d71 	.word	0x00085d71
													case ID_setcond:
													break;
													case ID_ufrate:
													break;
													case ID_ufgoal:
													if(cl_temp.word == 0){
   85c6c:	69fb      	ldr	r3, [r7, #28]
   85c6e:	2b00      	cmp	r3, #0
   85c70:	d103      	bne.n	85c7a <Cl_Dlsis_controller+0xcc2>
														cl_uf_controller(CL_UF_EVENT_STOP,0);
   85c72:	2100      	movs	r1, #0
   85c74:	2004      	movs	r0, #4
   85c76:	4b27      	ldr	r3, [pc, #156]	; (85d14 <Cl_Dlsis_controller+0xd5c>)
   85c78:	4798      	blx	r3
													}
													Treatdata[ID_ufgoal] = cl_temp.word;
   85c7a:	69fb      	ldr	r3, [r7, #28]
   85c7c:	4a28      	ldr	r2, [pc, #160]	; (85d20 <Cl_Dlsis_controller+0xd68>)
   85c7e:	6353      	str	r3, [r2, #52]	; 0x34
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85c80:	2100      	movs	r1, #0
   85c82:	2008      	movs	r0, #8
   85c84:	4b23      	ldr	r3, [pc, #140]	; (85d14 <Cl_Dlsis_controller+0xd5c>)
   85c86:	4798      	blx	r3
													
													break;
   85c88:	e07b      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_heparincheck:
													break;
													case ID_minufrate:
													break;
													case ID_treattime:
													Treatdata[ID_treattime] = cl_temp.word;
   85c8a:	69fb      	ldr	r3, [r7, #28]
   85c8c:	4a24      	ldr	r2, [pc, #144]	; (85d20 <Cl_Dlsis_controller+0xd68>)
   85c8e:	6553      	str	r3, [r2, #84]	; 0x54
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85c90:	2100      	movs	r1, #0
   85c92:	2008      	movs	r0, #8
   85c94:	4b1f      	ldr	r3, [pc, #124]	; (85d14 <Cl_Dlsis_controller+0xd5c>)
   85c96:	4798      	blx	r3
													
													break;
   85c98:	e073      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85c9a:	69fb      	ldr	r3, [r7, #28]
   85c9c:	4a29      	ldr	r2, [pc, #164]	; (85d44 <Cl_Dlsis_controller+0xd8c>)
   85c9e:	fba2 2303 	umull	r2, r3, r2, r3
   85ca2:	08da      	lsrs	r2, r3, #3
   85ca4:	4b1f      	ldr	r3, [pc, #124]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85ca6:	4610      	mov	r0, r2
   85ca8:	4798      	blx	r3
   85caa:	4602      	mov	r2, r0
   85cac:	4b26      	ldr	r3, [pc, #152]	; (85d48 <Cl_Dlsis_controller+0xd90>)
   85cae:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   85cb0:	e067      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85cb2:	69fb      	ldr	r3, [r7, #28]
   85cb4:	4a23      	ldr	r2, [pc, #140]	; (85d44 <Cl_Dlsis_controller+0xd8c>)
   85cb6:	fba2 2303 	umull	r2, r3, r2, r3
   85cba:	08da      	lsrs	r2, r3, #3
   85cbc:	4b19      	ldr	r3, [pc, #100]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85cbe:	4610      	mov	r0, r2
   85cc0:	4798      	blx	r3
   85cc2:	4602      	mov	r2, r0
   85cc4:	4b20      	ldr	r3, [pc, #128]	; (85d48 <Cl_Dlsis_controller+0xd90>)
   85cc6:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   85cc8:	e05b      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85cca:	69fa      	ldr	r2, [r7, #28]
   85ccc:	4b15      	ldr	r3, [pc, #84]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85cce:	4610      	mov	r0, r2
   85cd0:	4798      	blx	r3
   85cd2:	4602      	mov	r2, r0
   85cd4:	4b1c      	ldr	r3, [pc, #112]	; (85d48 <Cl_Dlsis_controller+0xd90>)
   85cd6:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   85cd8:	e053      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85cda:	69fa      	ldr	r2, [r7, #28]
   85cdc:	4b11      	ldr	r3, [pc, #68]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85cde:	4610      	mov	r0, r2
   85ce0:	4798      	blx	r3
   85ce2:	4602      	mov	r2, r0
   85ce4:	4b18      	ldr	r3, [pc, #96]	; (85d48 <Cl_Dlsis_controller+0xd90>)
   85ce6:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   85ce8:	e04b      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85cea:	69fa      	ldr	r2, [r7, #28]
   85cec:	4b0d      	ldr	r3, [pc, #52]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85cee:	4610      	mov	r0, r2
   85cf0:	4798      	blx	r3
   85cf2:	4602      	mov	r2, r0
   85cf4:	4b14      	ldr	r3, [pc, #80]	; (85d48 <Cl_Dlsis_controller+0xd90>)
   85cf6:	615a      	str	r2, [r3, #20]
													break;
   85cf8:	e043      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85cfa:	69fa      	ldr	r2, [r7, #28]
   85cfc:	4b09      	ldr	r3, [pc, #36]	; (85d24 <Cl_Dlsis_controller+0xd6c>)
   85cfe:	4610      	mov	r0, r2
   85d00:	4798      	blx	r3
   85d02:	4602      	mov	r2, r0
   85d04:	4b10      	ldr	r3, [pc, #64]	; (85d48 <Cl_Dlsis_controller+0xd90>)
   85d06:	611a      	str	r2, [r3, #16]
													break;
   85d08:	e03b      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
   85d0a:	bf00      	nop
   85d0c:	0009ae01 	.word	0x0009ae01
   85d10:	0009ade1 	.word	0x0009ade1
   85d14:	00096ea9 	.word	0x00096ea9
   85d18:	200719e4 	.word	0x200719e4
   85d1c:	000829e5 	.word	0x000829e5
   85d20:	20072614 	.word	0x20072614
   85d24:	000a7ef9 	.word	0x000a7ef9
   85d28:	20071a1c 	.word	0x20071a1c
   85d2c:	000a82f9 	.word	0x000a82f9
   85d30:	00087315 	.word	0x00087315
   85d34:	20071814 	.word	0x20071814
   85d38:	20072350 	.word	0x20072350
   85d3c:	0009b701 	.word	0x0009b701
   85d40:	0009cbd5 	.word	0x0009cbd5
   85d44:	cccccccd 	.word	0xcccccccd
   85d48:	20072044 	.word	0x20072044
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85d4c:	69fb      	ldr	r3, [r7, #28]
   85d4e:	b21a      	sxth	r2, r3
   85d50:	4ba8      	ldr	r3, [pc, #672]	; (85ff4 <Cl_Dlsis_controller+0x103c>)
   85d52:	801a      	strh	r2, [r3, #0]
													break;
   85d54:	e015      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85d56:	69fb      	ldr	r3, [r7, #28]
   85d58:	b21a      	sxth	r2, r3
   85d5a:	4ba6      	ldr	r3, [pc, #664]	; (85ff4 <Cl_Dlsis_controller+0x103c>)
   85d5c:	805a      	strh	r2, [r3, #2]
													break;
   85d5e:	e010      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85d60:	69fa      	ldr	r2, [r7, #28]
   85d62:	4ba5      	ldr	r3, [pc, #660]	; (85ff8 <Cl_Dlsis_controller+0x1040>)
   85d64:	4610      	mov	r0, r2
   85d66:	4798      	blx	r3
   85d68:	4602      	mov	r2, r0
   85d6a:	4ba2      	ldr	r3, [pc, #648]	; (85ff4 <Cl_Dlsis_controller+0x103c>)
   85d6c:	60da      	str	r2, [r3, #12]
													break;
   85d6e:	e008      	b.n	85d82 <Cl_Dlsis_controller+0xdca>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85d70:	69fa      	ldr	r2, [r7, #28]
   85d72:	4ba1      	ldr	r3, [pc, #644]	; (85ff8 <Cl_Dlsis_controller+0x1040>)
   85d74:	4610      	mov	r0, r2
   85d76:	4798      	blx	r3
   85d78:	4602      	mov	r2, r0
   85d7a:	4b9e      	ldr	r3, [pc, #632]	; (85ff4 <Cl_Dlsis_controller+0x103c>)
   85d7c:	609a      	str	r2, [r3, #8]
													break;
   85d7e:	e000      	b.n	85d82 <Cl_Dlsis_controller+0xdca>

												default:break;
   85d80:	bf00      	nop
											}
										}
						
			break;
   85d82:	e0bf      	b.n	85f04 <Cl_Dlsis_controller+0xf4c>
			break;
			
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
				// check for blood
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   85d84:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85d88:	4619      	mov	r1, r3
   85d8a:	200a      	movs	r0, #10
   85d8c:	4b9b      	ldr	r3, [pc, #620]	; (85ffc <Cl_Dlsis_controller+0x1044>)
   85d8e:	4798      	blx	r3
				
				if(temp == 0){
   85d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   85d92:	4b9b      	ldr	r3, [pc, #620]	; (86000 <Cl_Dlsis_controller+0x1048>)
   85d94:	f04f 0100 	mov.w	r1, #0
   85d98:	4610      	mov	r0, r2
   85d9a:	4798      	blx	r3
   85d9c:	4603      	mov	r3, r0
   85d9e:	2b00      	cmp	r3, #0
   85da0:	d100      	bne.n	85da4 <Cl_Dlsis_controller+0xdec>
				Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED,1);	
					
				}
					
				
			break;
   85da2:	e0b2      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
				// check for blood
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
				
				if(temp == 0){
				// raise alarm blood not detected
				Cl_Alarm_TriggerAlarm(BLOOD_NOT_DETECTED,1);	
   85da4:	2101      	movs	r1, #1
   85da6:	2040      	movs	r0, #64	; 0x40
   85da8:	4b96      	ldr	r3, [pc, #600]	; (86004 <Cl_Dlsis_controller+0x104c>)
   85daa:	4798      	blx	r3
					
				}
					
				
			break;
   85dac:	e0ad      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			
			case EVENT_DLSIS_TICK_MINUTE:
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   85dae:	2100      	movs	r1, #0
   85db0:	200a      	movs	r0, #10
   85db2:	4b95      	ldr	r3, [pc, #596]	; (86008 <Cl_Dlsis_controller+0x1050>)
   85db4:	4798      	blx	r3
			break;
   85db6:	e0a8      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			
			case EVENT_DLSIS_TICK_SECOND:
		//	Cl_Dlsis_ResetAlertsforReassertion();
			//	UpdateHeaterControls();
			
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   85db8:	2100      	movs	r1, #0
   85dba:	200f      	movs	r0, #15
   85dbc:	4b93      	ldr	r3, [pc, #588]	; (8600c <Cl_Dlsis_controller+0x1054>)
   85dbe:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   85dc0:	4b93      	ldr	r3, [pc, #588]	; (86010 <Cl_Dlsis_controller+0x1058>)
   85dc2:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   85dc4:	4b93      	ldr	r3, [pc, #588]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85dc6:	781b      	ldrb	r3, [r3, #0]
   85dc8:	3301      	adds	r3, #1
   85dca:	b2da      	uxtb	r2, r3
   85dcc:	4b91      	ldr	r3, [pc, #580]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85dce:	701a      	strb	r2, [r3, #0]
				if ((DlsisTime.Cl_dlsissecondscounter == 30))
   85dd0:	4b90      	ldr	r3, [pc, #576]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85dd2:	781b      	ldrb	r3, [r3, #0]
   85dd4:	2b1e      	cmp	r3, #30
   85dd6:	d101      	bne.n	85ddc <Cl_Dlsis_controller+0xe24>
				{
					//sv_cs_setpotvalue(1900);
					//flag_bc =0 ;
					Cl_Dlsis_ResetAlertsforReassertion();
   85dd8:	4b8f      	ldr	r3, [pc, #572]	; (86018 <Cl_Dlsis_controller+0x1060>)
   85dda:	4798      	blx	r3
				}
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   85ddc:	4b8d      	ldr	r3, [pc, #564]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85dde:	781b      	ldrb	r3, [r3, #0]
   85de0:	2b3c      	cmp	r3, #60	; 0x3c
   85de2:	d13f      	bne.n	85e64 <Cl_Dlsis_controller+0xeac>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   85de4:	4b8d      	ldr	r3, [pc, #564]	; (8601c <Cl_Dlsis_controller+0x1064>)
   85de6:	4798      	blx	r3
   85de8:	4603      	mov	r3, r0
   85dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					DlsisTime.Cl_dlsissecondscounter = 0;
   85dee:	4b89      	ldr	r3, [pc, #548]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85df0:	2200      	movs	r2, #0
   85df2:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   85df4:	4b87      	ldr	r3, [pc, #540]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85df6:	785b      	ldrb	r3, [r3, #1]
   85df8:	3301      	adds	r3, #1
   85dfa:	b2da      	uxtb	r2, r3
   85dfc:	4b85      	ldr	r3, [pc, #532]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85dfe:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   85e00:	4b84      	ldr	r3, [pc, #528]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85e02:	785b      	ldrb	r3, [r3, #1]
   85e04:	2b01      	cmp	r3, #1
   85e06:	d127      	bne.n	85e58 <Cl_Dlsis_controller+0xea0>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   85e08:	2300      	movs	r3, #0
   85e0a:	837b      	strh	r3, [r7, #26]
   85e0c:	2300      	movs	r3, #0
   85e0e:	833b      	strh	r3, [r7, #24]
   85e10:	2300      	movs	r3, #0
   85e12:	82fb      	strh	r3, [r7, #22]
									temp_ps=apt;
   85e14:	4b82      	ldr	r3, [pc, #520]	; (86020 <Cl_Dlsis_controller+0x1068>)
   85e16:	681a      	ldr	r2, [r3, #0]
   85e18:	4b82      	ldr	r3, [pc, #520]	; (86024 <Cl_Dlsis_controller+0x106c>)
   85e1a:	4610      	mov	r0, r2
   85e1c:	4798      	blx	r3
   85e1e:	4603      	mov	r3, r0
   85e20:	b29b      	uxth	r3, r3
   85e22:	837b      	strh	r3, [r7, #26]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   85e24:	2204      	movs	r2, #4
   85e26:	4980      	ldr	r1, [pc, #512]	; (86028 <Cl_Dlsis_controller+0x1070>)
   85e28:	2018      	movs	r0, #24
   85e2a:	4b80      	ldr	r3, [pc, #512]	; (8602c <Cl_Dlsis_controller+0x1074>)
   85e2c:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   85e2e:	f107 031a 	add.w	r3, r7, #26
   85e32:	2202      	movs	r2, #2
   85e34:	4619      	mov	r1, r3
   85e36:	2019      	movs	r0, #25
   85e38:	4b7c      	ldr	r3, [pc, #496]	; (8602c <Cl_Dlsis_controller+0x1074>)
   85e3a:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   85e3c:	f107 0318 	add.w	r3, r7, #24
   85e40:	2202      	movs	r2, #2
   85e42:	4619      	mov	r1, r3
   85e44:	2019      	movs	r0, #25
   85e46:	4b79      	ldr	r3, [pc, #484]	; (8602c <Cl_Dlsis_controller+0x1074>)
   85e48:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   85e4a:	f107 0316 	add.w	r3, r7, #22
   85e4e:	2202      	movs	r2, #2
   85e50:	4619      	mov	r1, r3
   85e52:	2019      	movs	r0, #25
   85e54:	4b75      	ldr	r3, [pc, #468]	; (8602c <Cl_Dlsis_controller+0x1074>)
   85e56:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   85e58:	4b6e      	ldr	r3, [pc, #440]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85e5a:	78db      	ldrb	r3, [r3, #3]
   85e5c:	3301      	adds	r3, #1
   85e5e:	b2da      	uxtb	r2, r3
   85e60:	4b6c      	ldr	r3, [pc, #432]	; (86014 <Cl_Dlsis_controller+0x105c>)
   85e62:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == CL_DLSIS_TIMEOUT_MIN);//Treatdata[ID_treattime])
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   85e64:	4b72      	ldr	r3, [pc, #456]	; (86030 <Cl_Dlsis_controller+0x1078>)
   85e66:	4798      	blx	r3
   85e68:	4603      	mov	r3, r0
   85e6a:	2b00      	cmp	r3, #0
   85e6c:	d14c      	bne.n	85f08 <Cl_Dlsis_controller+0xf50>
				{
					sv_cntrl_setgreenalarm();
   85e6e:	4b71      	ldr	r3, [pc, #452]	; (86034 <Cl_Dlsis_controller+0x107c>)
   85e70:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   85e72:	4b71      	ldr	r3, [pc, #452]	; (86038 <Cl_Dlsis_controller+0x1080>)
   85e74:	4798      	blx	r3
   85e76:	4603      	mov	r3, r0
   85e78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					sv_cntrl_poweroffheater();
   85e7c:	4b6f      	ldr	r3, [pc, #444]	; (8603c <Cl_Dlsis_controller+0x1084>)
   85e7e:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   85e80:	2004      	movs	r0, #4
   85e82:	4b6f      	ldr	r3, [pc, #444]	; (86040 <Cl_Dlsis_controller+0x1088>)
   85e84:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   85e86:	2011      	movs	r0, #17
   85e88:	4b6e      	ldr	r3, [pc, #440]	; (86044 <Cl_Dlsis_controller+0x108c>)
   85e8a:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   85e8c:	4b6e      	ldr	r3, [pc, #440]	; (86048 <Cl_Dlsis_controller+0x1090>)
   85e8e:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   85e90:	2100      	movs	r1, #0
   85e92:	2004      	movs	r0, #4
   85e94:	4b5c      	ldr	r3, [pc, #368]	; (86008 <Cl_Dlsis_controller+0x1050>)
   85e96:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   85e98:	2100      	movs	r1, #0
   85e9a:	200d      	movs	r0, #13
   85e9c:	4b5b      	ldr	r3, [pc, #364]	; (8600c <Cl_Dlsis_controller+0x1054>)
   85e9e:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   85ea0:	4b6a      	ldr	r3, [pc, #424]	; (8604c <Cl_Dlsis_controller+0x1094>)
   85ea2:	2206      	movs	r2, #6
   85ea4:	701a      	strb	r2, [r3, #0]
				}
			break;
   85ea6:	e02f      	b.n	85f08 <Cl_Dlsis_controller+0xf50>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   85ea8:	4b69      	ldr	r3, [pc, #420]	; (86050 <Cl_Dlsis_controller+0x1098>)
   85eaa:	4798      	blx	r3
   85eac:	4603      	mov	r3, r0
   85eae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Cl_Dlsis_StopDialysis();
   85eb2:	4b68      	ldr	r3, [pc, #416]	; (86054 <Cl_Dlsis_controller+0x109c>)
   85eb4:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   85eb6:	4b65      	ldr	r3, [pc, #404]	; (8604c <Cl_Dlsis_controller+0x1094>)
   85eb8:	2209      	movs	r2, #9
   85eba:	701a      	strb	r2, [r3, #0]
			break;
   85ebc:	e025      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   85ebe:	4b66      	ldr	r3, [pc, #408]	; (86058 <Cl_Dlsis_controller+0x10a0>)
   85ec0:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85ec2:	4b62      	ldr	r3, [pc, #392]	; (8604c <Cl_Dlsis_controller+0x1094>)
   85ec4:	2207      	movs	r2, #7
   85ec6:	701a      	strb	r2, [r3, #0]
			break;
   85ec8:	e01f      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   85eca:	4b64      	ldr	r3, [pc, #400]	; (8605c <Cl_Dlsis_controller+0x10a4>)
   85ecc:	4798      	blx	r3
			break;
   85ece:	e01c      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   85ed0:	4b63      	ldr	r3, [pc, #396]	; (86060 <Cl_Dlsis_controller+0x10a8>)
   85ed2:	4798      	blx	r3
			break;
   85ed4:	e019      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85ed6:	4b63      	ldr	r3, [pc, #396]	; (86064 <Cl_Dlsis_controller+0x10ac>)
   85ed8:	4798      	blx	r3
   85eda:	4603      	mov	r3, r0
   85edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			break;
   85ee0:	e013      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   85ee2:	f107 0356 	add.w	r3, r7, #86	; 0x56
   85ee6:	4619      	mov	r1, r3
   85ee8:	2011      	movs	r0, #17
   85eea:	4b5f      	ldr	r3, [pc, #380]	; (86068 <Cl_Dlsis_controller+0x10b0>)
   85eec:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   85eee:	f107 0355 	add.w	r3, r7, #85	; 0x55
   85ef2:	4619      	mov	r1, r3
   85ef4:	200e      	movs	r0, #14
   85ef6:	4b5c      	ldr	r3, [pc, #368]	; (86068 <Cl_Dlsis_controller+0x10b0>)
   85ef8:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   85efa:	e006      	b.n	85f0a <Cl_Dlsis_controller+0xf52>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   85efc:	bf00      	nop
   85efe:	e339      	b.n	86574 <Cl_Dlsis_controller+0x15bc>

						default:
						break;
					}
				}
			break;
   85f00:	bf00      	nop
   85f02:	e337      	b.n	86574 <Cl_Dlsis_controller+0x15bc>

												default:break;
											}
										}
						
			break;
   85f04:	bf00      	nop
   85f06:	e335      	b.n	86574 <Cl_Dlsis_controller+0x15bc>
					Cl_DlsisFillingFlowOff();
					cl_uf_controller(CL_UF_EVENT_STOP,0);
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
				}
			break;
   85f08:	bf00      	nop
					//	}
			break;


		}
		break;
   85f0a:	e333      	b.n	86574 <Cl_Dlsis_controller+0x15bc>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   85f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   85f10:	3b06      	subs	r3, #6
   85f12:	2b10      	cmp	r3, #16
   85f14:	d83b      	bhi.n	85f8e <Cl_Dlsis_controller+0xfd6>
   85f16:	a201      	add	r2, pc, #4	; (adr r2, 85f1c <Cl_Dlsis_controller+0xf64>)
   85f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85f1c:	00085f7f 	.word	0x00085f7f
   85f20:	00085f73 	.word	0x00085f73
   85f24:	00085f8f 	.word	0x00085f8f
   85f28:	00085f6d 	.word	0x00085f6d
   85f2c:	00085f8f 	.word	0x00085f8f
   85f30:	00085f8f 	.word	0x00085f8f
   85f34:	00085f8f 	.word	0x00085f8f
   85f38:	00085f8f 	.word	0x00085f8f
   85f3c:	00085f8f 	.word	0x00085f8f
   85f40:	00085f8f 	.word	0x00085f8f
   85f44:	00085f8f 	.word	0x00085f8f
   85f48:	00085f8f 	.word	0x00085f8f
   85f4c:	00085f8f 	.word	0x00085f8f
   85f50:	00085f8f 	.word	0x00085f8f
   85f54:	00085f8f 	.word	0x00085f8f
   85f58:	00085f8f 	.word	0x00085f8f
   85f5c:	00085f61 	.word	0x00085f61
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85f60:	4b40      	ldr	r3, [pc, #256]	; (86064 <Cl_Dlsis_controller+0x10ac>)
   85f62:	4798      	blx	r3
   85f64:	4603      	mov	r3, r0
   85f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
										break;
   85f6a:	e011      	b.n	85f90 <Cl_Dlsis_controller+0xfd8>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   85f6c:	4b3c      	ldr	r3, [pc, #240]	; (86060 <Cl_Dlsis_controller+0x10a8>)
   85f6e:	4798      	blx	r3
										break;
   85f70:	e00e      	b.n	85f90 <Cl_Dlsis_controller+0xfd8>
										case EVENT_DLSIS_PAUSE_DIALYSIS:
										Cl_Dlsis_PauseDialysis();
   85f72:	4b39      	ldr	r3, [pc, #228]	; (86058 <Cl_Dlsis_controller+0x10a0>)
   85f74:	4798      	blx	r3
										cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85f76:	4b35      	ldr	r3, [pc, #212]	; (8604c <Cl_Dlsis_controller+0x1094>)
   85f78:	2207      	movs	r2, #7
   85f7a:	701a      	strb	r2, [r3, #0]
										break;
   85f7c:	e008      	b.n	85f90 <Cl_Dlsis_controller+0xfd8>
										case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
										sv_cntrl_enable_bypass();
   85f7e:	4b34      	ldr	r3, [pc, #208]	; (86050 <Cl_Dlsis_controller+0x1098>)
   85f80:	4798      	blx	r3
										Cl_Dlsis_StopDialysis();
   85f82:	4b34      	ldr	r3, [pc, #208]	; (86054 <Cl_Dlsis_controller+0x109c>)
   85f84:	4798      	blx	r3
										cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   85f86:	4b31      	ldr	r3, [pc, #196]	; (8604c <Cl_Dlsis_controller+0x1094>)
   85f88:	2209      	movs	r2, #9
   85f8a:	701a      	strb	r2, [r3, #0]
										break;
   85f8c:	e000      	b.n	85f90 <Cl_Dlsis_controller+0xfd8>
										default:break;
   85f8e:	bf00      	nop
									}

					
		break;
   85f90:	e2f1      	b.n	86576 <Cl_Dlsis_controller+0x15be>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   85f92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   85f96:	3b05      	subs	r3, #5
   85f98:	2b11      	cmp	r3, #17
   85f9a:	d87d      	bhi.n	86098 <Cl_Dlsis_controller+0x10e0>
   85f9c:	a201      	add	r2, pc, #4	; (adr r2, 85fa4 <Cl_Dlsis_controller+0xfec>)
   85f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85fa2:	bf00      	nop
   85fa4:	00085fed 	.word	0x00085fed
   85fa8:	00086071 	.word	0x00086071
   85fac:	00086099 	.word	0x00086099
   85fb0:	00086087 	.word	0x00086087
   85fb4:	00086081 	.word	0x00086081
   85fb8:	00086099 	.word	0x00086099
   85fbc:	00086099 	.word	0x00086099
   85fc0:	00086099 	.word	0x00086099
   85fc4:	00086099 	.word	0x00086099
   85fc8:	00086099 	.word	0x00086099
   85fcc:	00086099 	.word	0x00086099
   85fd0:	00086099 	.word	0x00086099
   85fd4:	00086099 	.word	0x00086099
   85fd8:	00086099 	.word	0x00086099
   85fdc:	00086099 	.word	0x00086099
   85fe0:	00086099 	.word	0x00086099
   85fe4:	00086099 	.word	0x00086099
   85fe8:	0008608d 	.word	0x0008608d
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   85fec:	4b1f      	ldr	r3, [pc, #124]	; (8606c <Cl_Dlsis_controller+0x10b4>)
   85fee:	4798      	blx	r3
								break;
   85ff0:	e053      	b.n	8609a <Cl_Dlsis_controller+0x10e2>
   85ff2:	bf00      	nop
   85ff4:	20072044 	.word	0x20072044
   85ff8:	000a7ef9 	.word	0x000a7ef9
   85ffc:	0008fa01 	.word	0x0008fa01
   86000:	000a82d1 	.word	0x000a82d1
   86004:	00082c31 	.word	0x00082c31
   86008:	00096ea9 	.word	0x00096ea9
   8600c:	00094729 	.word	0x00094729
   86010:	000875b1 	.word	0x000875b1
   86014:	200720c0 	.word	0x200720c0
   86018:	000873b1 	.word	0x000873b1
   8601c:	00086845 	.word	0x00086845
   86020:	2007203c 	.word	0x2007203c
   86024:	000a8381 	.word	0x000a8381
   86028:	000a9f80 	.word	0x000a9f80
   8602c:	0009cbd5 	.word	0x0009cbd5
   86030:	000868bd 	.word	0x000868bd
   86034:	0009b055 	.word	0x0009b055
   86038:	000868ed 	.word	0x000868ed
   8603c:	0009adcd 	.word	0x0009adcd
   86040:	00089035 	.word	0x00089035
   86044:	0009afc5 	.word	0x0009afc5
   86048:	00087391 	.word	0x00087391
   8604c:	20071814 	.word	0x20071814
   86050:	0009af8d 	.word	0x0009af8d
   86054:	00086e55 	.word	0x00086e55
   86058:	00087315 	.word	0x00087315
   8605c:	00086f3d 	.word	0x00086f3d
   86060:	00087119 	.word	0x00087119
   86064:	00087369 	.word	0x00087369
   86068:	00082bc1 	.word	0x00082bc1
   8606c:	00087b75 	.word	0x00087b75
								case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
								sv_cntrl_enable_bypass();
   86070:	4bb4      	ldr	r3, [pc, #720]	; (86344 <Cl_Dlsis_controller+0x138c>)
   86072:	4798      	blx	r3
								Cl_Dlsis_StopDialysis();
   86074:	4bb4      	ldr	r3, [pc, #720]	; (86348 <Cl_Dlsis_controller+0x1390>)
   86076:	4798      	blx	r3
								cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   86078:	4bb4      	ldr	r3, [pc, #720]	; (8634c <Cl_Dlsis_controller+0x1394>)
   8607a:	2209      	movs	r2, #9
   8607c:	701a      	strb	r2, [r3, #0]
								break;
   8607e:	e00c      	b.n	8609a <Cl_Dlsis_controller+0x10e2>
								case EVENT_DLSIS_BYPASS_OFF:
								Cl_Dlsis_BypassOff();
   86080:	4bb3      	ldr	r3, [pc, #716]	; (86350 <Cl_Dlsis_controller+0x1398>)
   86082:	4798      	blx	r3
								break;
   86084:	e009      	b.n	8609a <Cl_Dlsis_controller+0x10e2>
								case EVENT_DLSIS_BYPASS_ON:
								Cl_Dlsis_BypassDialysis();
   86086:	4bb3      	ldr	r3, [pc, #716]	; (86354 <Cl_Dlsis_controller+0x139c>)
   86088:	4798      	blx	r3
								break;
   8608a:	e006      	b.n	8609a <Cl_Dlsis_controller+0x10e2>
								case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   8608c:	4bb2      	ldr	r3, [pc, #712]	; (86358 <Cl_Dlsis_controller+0x13a0>)
   8608e:	4798      	blx	r3
   86090:	4603      	mov	r3, r0
   86092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
										break;
   86096:	e000      	b.n	8609a <Cl_Dlsis_controller+0x10e2>
								default:break;
   86098:	bf00      	nop
							}
		
		break;
   8609a:	e26c      	b.n	86576 <Cl_Dlsis_controller+0x15be>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   8609c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   860a0:	2b05      	cmp	r3, #5
   860a2:	d004      	beq.n	860ae <Cl_Dlsis_controller+0x10f6>
   860a4:	2b24      	cmp	r3, #36	; 0x24
   860a6:	d009      	beq.n	860bc <Cl_Dlsis_controller+0x1104>
   860a8:	2b04      	cmp	r3, #4
   860aa:	d003      	beq.n	860b4 <Cl_Dlsis_controller+0x10fc>
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
								
								default:break;
   860ac:	e00a      	b.n	860c4 <Cl_Dlsis_controller+0x110c>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   860ae:	4bab      	ldr	r3, [pc, #684]	; (8635c <Cl_Dlsis_controller+0x13a4>)
   860b0:	4798      	blx	r3
								break;
   860b2:	e007      	b.n	860c4 <Cl_Dlsis_controller+0x110c>
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   860b4:	2056      	movs	r0, #86	; 0x56
   860b6:	4baa      	ldr	r3, [pc, #680]	; (86360 <Cl_Dlsis_controller+0x13a8>)
   860b8:	4798      	blx	r3
								break;
   860ba:	e003      	b.n	860c4 <Cl_Dlsis_controller+0x110c>
								case EVENT_DLSIS_ISOUF_START:
								
								//Cl_MacState = MAC_ISOUF;
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_ISOUF_REQ);
   860bc:	205e      	movs	r0, #94	; 0x5e
   860be:	4ba8      	ldr	r3, [pc, #672]	; (86360 <Cl_Dlsis_controller+0x13a8>)
   860c0:	4798      	blx	r3
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
   860c2:	bf00      	nop
								
								default:break;
							}
							
		break;
   860c4:	e257      	b.n	86576 <Cl_Dlsis_controller+0x15be>

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   860c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   860ca:	3b01      	subs	r3, #1
   860cc:	2b19      	cmp	r3, #25
   860ce:	f200 80bf 	bhi.w	86250 <Cl_Dlsis_controller+0x1298>
   860d2:	a201      	add	r2, pc, #4	; (adr r2, 860d8 <Cl_Dlsis_controller+0x1120>)
   860d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   860d8:	0008619b 	.word	0x0008619b
   860dc:	00086147 	.word	0x00086147
   860e0:	00086251 	.word	0x00086251
   860e4:	00086251 	.word	0x00086251
   860e8:	00086141 	.word	0x00086141
   860ec:	00086241 	.word	0x00086241
   860f0:	00086251 	.word	0x00086251
   860f4:	00086235 	.word	0x00086235
   860f8:	0008623b 	.word	0x0008623b
   860fc:	00086251 	.word	0x00086251
   86100:	00086251 	.word	0x00086251
   86104:	00086251 	.word	0x00086251
   86108:	00086251 	.word	0x00086251
   8610c:	00086251 	.word	0x00086251
   86110:	00086251 	.word	0x00086251
   86114:	00086251 	.word	0x00086251
   86118:	00086251 	.word	0x00086251
   8611c:	00086251 	.word	0x00086251
   86120:	00086195 	.word	0x00086195
   86124:	00086251 	.word	0x00086251
   86128:	00086251 	.word	0x00086251
   8612c:	00086229 	.word	0x00086229
   86130:	00086251 	.word	0x00086251
   86134:	00086251 	.word	0x00086251
   86138:	00086251 	.word	0x00086251
   8613c:	00086251 	.word	0x00086251
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   86140:	4b88      	ldr	r3, [pc, #544]	; (86364 <Cl_Dlsis_controller+0x13ac>)
   86142:	4798      	blx	r3
						break;
   86144:	e089      	b.n	8625a <Cl_Dlsis_controller+0x12a2>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   86146:	4b88      	ldr	r3, [pc, #544]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   86148:	7e1b      	ldrb	r3, [r3, #24]
   8614a:	2b00      	cmp	r3, #0
   8614c:	f000 8082 	beq.w	86254 <Cl_Dlsis_controller+0x129c>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   86150:	4b85      	ldr	r3, [pc, #532]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   86152:	791b      	ldrb	r3, [r3, #4]
   86154:	2b04      	cmp	r3, #4
   86156:	d000      	beq.n	8615a <Cl_Dlsis_controller+0x11a2>
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   86158:	e01b      	b.n	86192 <Cl_Dlsis_controller+0x11da>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   8615a:	2316      	movs	r3, #22
   8615c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   86160:	2304      	movs	r3, #4
   86162:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   86166:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   8616a:	3301      	adds	r3, #1
   8616c:	4619      	mov	r1, r3
   8616e:	2004      	movs	r0, #4
   86170:	4b7e      	ldr	r3, [pc, #504]	; (8636c <Cl_Dlsis_controller+0x13b4>)
   86172:	4798      	blx	r3
   86174:	4603      	mov	r3, r0
   86176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   8617a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   8617e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   86182:	2202      	movs	r2, #2
   86184:	4618      	mov	r0, r3
   86186:	4b7a      	ldr	r3, [pc, #488]	; (86370 <Cl_Dlsis_controller+0x13b8>)
   86188:	4798      	blx	r3
   8618a:	4603      	mov	r3, r0
   8618c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
									break;
   86190:	bf00      	nop

									default:
									break;
								}
							}
						break;
   86192:	e05f      	b.n	86254 <Cl_Dlsis_controller+0x129c>
						case EVENT_DLSIS_TICK_SECOND:
						
						Cl_Dlsis_SenddlsisData();
   86194:	4b77      	ldr	r3, [pc, #476]	; (86374 <Cl_Dlsis_controller+0x13bc>)
   86196:	4798      	blx	r3
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   86198:	e05f      	b.n	8625a <Cl_Dlsis_controller+0x12a2>
						case EVENT_DLSIS_CLR_ALARM:
						
											if(cl_dlsis_powerfailure == 1){
   8619a:	4b77      	ldr	r3, [pc, #476]	; (86378 <Cl_Dlsis_controller+0x13c0>)
   8619c:	681b      	ldr	r3, [r3, #0]
   8619e:	2b01      	cmp	r3, #1
   861a0:	d126      	bne.n	861f0 <Cl_Dlsis_controller+0x1238>
												
											Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dlsis_powerFailSensorData);
   861a2:	4976      	ldr	r1, [pc, #472]	; (8637c <Cl_Dlsis_controller+0x13c4>)
   861a4:	2024      	movs	r0, #36	; 0x24
   861a6:	4b76      	ldr	r3, [pc, #472]	; (86380 <Cl_Dlsis_controller+0x13c8>)
   861a8:	4798      	blx	r3
					
								if(dlsis_powerFailSensorData == 0){
   861aa:	4b74      	ldr	r3, [pc, #464]	; (8637c <Cl_Dlsis_controller+0x13c4>)
   861ac:	881b      	ldrh	r3, [r3, #0]
   861ae:	2b00      	cmp	r3, #0
   861b0:	d152      	bne.n	86258 <Cl_Dlsis_controller+0x12a0>
													
													cl_dlsis_powerfailure = 0;
   861b2:	4b71      	ldr	r3, [pc, #452]	; (86378 <Cl_Dlsis_controller+0x13c0>)
   861b4:	2200      	movs	r2, #0
   861b6:	601a      	str	r2, [r3, #0]
													command = CON_TX_COMMAND_ALARM_CLEARED;
   861b8:	2351      	movs	r3, #81	; 0x51
   861ba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
													Cl_SendDatatoconsole(command,&data,0);
   861be:	f107 014b 	add.w	r1, r7, #75	; 0x4b
   861c2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   861c6:	2200      	movs	r2, #0
   861c8:	4618      	mov	r0, r3
   861ca:	4b69      	ldr	r3, [pc, #420]	; (86370 <Cl_Dlsis_controller+0x13b8>)
   861cc:	4798      	blx	r3
													
													Cl_Dlsis_ResetAlertsforReassertion();
   861ce:	4b6d      	ldr	r3, [pc, #436]	; (86384 <Cl_Dlsis_controller+0x13cc>)
   861d0:	4798      	blx	r3
													sv_cntrl_resetredalarm();
   861d2:	4b6d      	ldr	r3, [pc, #436]	; (86388 <Cl_Dlsis_controller+0x13d0>)
   861d4:	4798      	blx	r3
													sv_cntrl_resetyellowalarm();
   861d6:	4b6d      	ldr	r3, [pc, #436]	; (8638c <Cl_Dlsis_controller+0x13d4>)
   861d8:	4798      	blx	r3
													sv_cntrl_nobuzzer();
   861da:	4b6d      	ldr	r3, [pc, #436]	; (86390 <Cl_Dlsis_controller+0x13d8>)
   861dc:	4798      	blx	r3
													cl_bp_controller(CL_BP_EVENT_START,0);
   861de:	2100      	movs	r1, #0
   861e0:	2002      	movs	r0, #2
   861e2:	4b6c      	ldr	r3, [pc, #432]	; (86394 <Cl_Dlsis_controller+0x13dc>)
   861e4:	4798      	blx	r3
													sv_cntrl_activatevenousclamp();
   861e6:	4b6c      	ldr	r3, [pc, #432]	; (86398 <Cl_Dlsis_controller+0x13e0>)
   861e8:	4798      	blx	r3
													Cl_Dlsis_BypassOff();
   861ea:	4b59      	ldr	r3, [pc, #356]	; (86350 <Cl_Dlsis_controller+0x1398>)
   861ec:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
										sv_cntrl_activatevenousclamp();
										Cl_Dlsis_BypassOff();
										//cl_temp_recoveredstate();
											}
						break;
   861ee:	e033      	b.n	86258 <Cl_Dlsis_controller+0x12a0>
													Cl_Dlsis_BypassOff();
												}
											}
											else{
						
						command = CON_TX_COMMAND_ALARM_CLEARED;
   861f0:	2351      	movs	r3, #81	; 0x51
   861f2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
						Cl_SendDatatoconsole(command,&data,0);
   861f6:	f107 014b 	add.w	r1, r7, #75	; 0x4b
   861fa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   861fe:	2200      	movs	r2, #0
   86200:	4618      	mov	r0, r3
   86202:	4b5b      	ldr	r3, [pc, #364]	; (86370 <Cl_Dlsis_controller+0x13b8>)
   86204:	4798      	blx	r3
						
						Cl_Dlsis_ResetAlertsforReassertion();
   86206:	4b5f      	ldr	r3, [pc, #380]	; (86384 <Cl_Dlsis_controller+0x13cc>)
   86208:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   8620a:	4b5f      	ldr	r3, [pc, #380]	; (86388 <Cl_Dlsis_controller+0x13d0>)
   8620c:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   8620e:	4b5f      	ldr	r3, [pc, #380]	; (8638c <Cl_Dlsis_controller+0x13d4>)
   86210:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   86212:	4b5f      	ldr	r3, [pc, #380]	; (86390 <Cl_Dlsis_controller+0x13d8>)
   86214:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   86216:	2100      	movs	r1, #0
   86218:	2002      	movs	r0, #2
   8621a:	4b5e      	ldr	r3, [pc, #376]	; (86394 <Cl_Dlsis_controller+0x13dc>)
   8621c:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   8621e:	4b5e      	ldr	r3, [pc, #376]	; (86398 <Cl_Dlsis_controller+0x13e0>)
   86220:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   86222:	4b4b      	ldr	r3, [pc, #300]	; (86350 <Cl_Dlsis_controller+0x1398>)
   86224:	4798      	blx	r3
										//cl_temp_recoveredstate();
											}
						break;
   86226:	e017      	b.n	86258 <Cl_Dlsis_controller+0x12a0>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86228:	4b4b      	ldr	r3, [pc, #300]	; (86358 <Cl_Dlsis_controller+0x13a0>)
   8622a:	4798      	blx	r3
   8622c:	4603      	mov	r3, r0
   8622e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						break;
   86232:	e012      	b.n	8625a <Cl_Dlsis_controller+0x12a2>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   86234:	4b47      	ldr	r3, [pc, #284]	; (86354 <Cl_Dlsis_controller+0x139c>)
   86236:	4798      	blx	r3
						break;
   86238:	e00f      	b.n	8625a <Cl_Dlsis_controller+0x12a2>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   8623a:	4b45      	ldr	r3, [pc, #276]	; (86350 <Cl_Dlsis_controller+0x1398>)
   8623c:	4798      	blx	r3
						break;
   8623e:	e00c      	b.n	8625a <Cl_Dlsis_controller+0x12a2>
						case EVENT_DLSIS_STOP_DIALYSIS:                   // manav02 dialysis stopped changed
						sv_cntrl_enable_bypass();
   86240:	4b40      	ldr	r3, [pc, #256]	; (86344 <Cl_Dlsis_controller+0x138c>)
   86242:	4798      	blx	r3
						Cl_Dlsis_StopDialysis();
   86244:	4b40      	ldr	r3, [pc, #256]	; (86348 <Cl_Dlsis_controller+0x1390>)
   86246:	4798      	blx	r3
						cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   86248:	4b40      	ldr	r3, [pc, #256]	; (8634c <Cl_Dlsis_controller+0x1394>)
   8624a:	2209      	movs	r2, #9
   8624c:	701a      	strb	r2, [r3, #0]
						break;
   8624e:	e004      	b.n	8625a <Cl_Dlsis_controller+0x12a2>
						
						default:break;
   86250:	bf00      	nop
   86252:	e190      	b.n	86576 <Cl_Dlsis_controller+0x15be>

									default:
									break;
								}
							}
						break;
   86254:	bf00      	nop
   86256:	e18e      	b.n	86576 <Cl_Dlsis_controller+0x15be>
										cl_bp_controller(CL_BP_EVENT_START,0);
										sv_cntrl_activatevenousclamp();
										Cl_Dlsis_BypassOff();
										//cl_temp_recoveredstate();
											}
						break;
   86258:	bf00      	nop
						cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
						break;
						
						default:break;
					}
		break;
   8625a:	e18c      	b.n	86576 <Cl_Dlsis_controller+0x15be>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   8625c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   86260:	3b02      	subs	r3, #2
   86262:	2b20      	cmp	r3, #32
   86264:	f200 817c 	bhi.w	86560 <Cl_Dlsis_controller+0x15a8>
   86268:	a201      	add	r2, pc, #4	; (adr r2, 86270 <Cl_Dlsis_controller+0x12b8>)
   8626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8626e:	bf00      	nop
   86270:	000862f5 	.word	0x000862f5
   86274:	00086401 	.word	0x00086401
   86278:	00086561 	.word	0x00086561
   8627c:	00086561 	.word	0x00086561
   86280:	00086561 	.word	0x00086561
   86284:	00086561 	.word	0x00086561
   86288:	00086561 	.word	0x00086561
   8628c:	00086561 	.word	0x00086561
   86290:	00086561 	.word	0x00086561
   86294:	00086561 	.word	0x00086561
   86298:	00086561 	.word	0x00086561
   8629c:	00086561 	.word	0x00086561
   862a0:	00086561 	.word	0x00086561
   862a4:	00086561 	.word	0x00086561
   862a8:	00086561 	.word	0x00086561
   862ac:	00086561 	.word	0x00086561
   862b0:	00086561 	.word	0x00086561
   862b4:	00086561 	.word	0x00086561
   862b8:	00086561 	.word	0x00086561
   862bc:	00086561 	.word	0x00086561
   862c0:	00086561 	.word	0x00086561
   862c4:	00086561 	.word	0x00086561
   862c8:	00086561 	.word	0x00086561
   862cc:	00086561 	.word	0x00086561
   862d0:	00086561 	.word	0x00086561
   862d4:	00086561 	.word	0x00086561
   862d8:	00086561 	.word	0x00086561
   862dc:	000863cb 	.word	0x000863cb
   862e0:	000863b7 	.word	0x000863b7
   862e4:	000863c1 	.word	0x000863c1
   862e8:	000862f5 	.word	0x000862f5
   862ec:	00086337 	.word	0x00086337
   862f0:	000863ad 	.word	0x000863ad
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   862f4:	4b1c      	ldr	r3, [pc, #112]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   862f6:	7e1b      	ldrb	r3, [r3, #24]
   862f8:	2b00      	cmp	r3, #0
   862fa:	f000 8133 	beq.w	86564 <Cl_Dlsis_controller+0x15ac>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   862fe:	4b1a      	ldr	r3, [pc, #104]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   86300:	791b      	ldrb	r3, [r3, #4]
   86302:	743b      	strb	r3, [r7, #16]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   86304:	4b18      	ldr	r3, [pc, #96]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   86306:	795b      	ldrb	r3, [r3, #5]
   86308:	747b      	strb	r3, [r7, #17]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8630a:	4b17      	ldr	r3, [pc, #92]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   8630c:	799b      	ldrb	r3, [r3, #6]
   8630e:	74bb      	strb	r3, [r7, #18]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   86310:	4b15      	ldr	r3, [pc, #84]	; (86368 <Cl_Dlsis_controller+0x13b0>)
   86312:	79db      	ldrb	r3, [r3, #7]
   86314:	74fb      	strb	r3, [r7, #19]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   86316:	8a3b      	ldrh	r3, [r7, #16]
   86318:	461a      	mov	r2, r3
   8631a:	4b20      	ldr	r3, [pc, #128]	; (8639c <Cl_Dlsis_controller+0x13e4>)
   8631c:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   8631e:	4b1f      	ldr	r3, [pc, #124]	; (8639c <Cl_Dlsis_controller+0x13e4>)
   86320:	69db      	ldr	r3, [r3, #28]
   86322:	4618      	mov	r0, r3
   86324:	4b1e      	ldr	r3, [pc, #120]	; (863a0 <Cl_Dlsis_controller+0x13e8>)
   86326:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   86328:	4b1e      	ldr	r3, [pc, #120]	; (863a4 <Cl_Dlsis_controller+0x13ec>)
   8632a:	681b      	ldr	r3, [r3, #0]
   8632c:	4619      	mov	r1, r3
   8632e:	2006      	movs	r0, #6
   86330:	4b1d      	ldr	r3, [pc, #116]	; (863a8 <Cl_Dlsis_controller+0x13f0>)
   86332:	4798      	blx	r3
							}
						break;
   86334:	e116      	b.n	86564 <Cl_Dlsis_controller+0x15ac>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   86336:	4b1b      	ldr	r3, [pc, #108]	; (863a4 <Cl_Dlsis_controller+0x13ec>)
   86338:	681b      	ldr	r3, [r3, #0]
   8633a:	4619      	mov	r1, r3
   8633c:	200b      	movs	r0, #11
   8633e:	4b1a      	ldr	r3, [pc, #104]	; (863a8 <Cl_Dlsis_controller+0x13f0>)
   86340:	4798      	blx	r3
						break;
   86342:	e114      	b.n	8656e <Cl_Dlsis_controller+0x15b6>
   86344:	0009af8d 	.word	0x0009af8d
   86348:	00086e55 	.word	0x00086e55
   8634c:	20071814 	.word	0x20071814
   86350:	00087119 	.word	0x00087119
   86354:	00086f3d 	.word	0x00086f3d
   86358:	00087369 	.word	0x00087369
   8635c:	00087ae5 	.word	0x00087ae5
   86360:	0008b715 	.word	0x0008b715
   86364:	00087b75 	.word	0x00087b75
   86368:	20072350 	.word	0x20072350
   8636c:	0009b701 	.word	0x0009b701
   86370:	0009cbd5 	.word	0x0009cbd5
   86374:	000875b1 	.word	0x000875b1
   86378:	20071860 	.word	0x20071860
   8637c:	20071864 	.word	0x20071864
   86380:	0008fa01 	.word	0x0008fa01
   86384:	000873b1 	.word	0x000873b1
   86388:	0009b07d 	.word	0x0009b07d
   8638c:	0009b091 	.word	0x0009b091
   86390:	0009b0b9 	.word	0x0009b0b9
   86394:	00093f5d 	.word	0x00093f5d
   86398:	0009af2d 	.word	0x0009af2d
   8639c:	20072614 	.word	0x20072614
   863a0:	00083ba5 	.word	0x00083ba5
   863a4:	200720b4 	.word	0x200720b4
   863a8:	00094729 	.word	0x00094729
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   863ac:	2100      	movs	r1, #0
   863ae:	2009      	movs	r0, #9
   863b0:	4b73      	ldr	r3, [pc, #460]	; (86580 <Cl_Dlsis_controller+0x15c8>)
   863b2:	4798      	blx	r3
						break;
   863b4:	e0db      	b.n	8656e <Cl_Dlsis_controller+0x15b6>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   863b6:	2100      	movs	r1, #0
   863b8:	2002      	movs	r0, #2
   863ba:	4b72      	ldr	r3, [pc, #456]	; (86584 <Cl_Dlsis_controller+0x15cc>)
   863bc:	4798      	blx	r3
						break;
   863be:	e0d6      	b.n	8656e <Cl_Dlsis_controller+0x15b6>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   863c0:	2100      	movs	r1, #0
   863c2:	2004      	movs	r0, #4
   863c4:	4b6f      	ldr	r3, [pc, #444]	; (86584 <Cl_Dlsis_controller+0x15cc>)
   863c6:	4798      	blx	r3
						break;
   863c8:	e0d1      	b.n	8656e <Cl_Dlsis_controller+0x15b6>
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   863ca:	4b6f      	ldr	r3, [pc, #444]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   863cc:	7e1b      	ldrb	r3, [r3, #24]
   863ce:	2b00      	cmp	r3, #0
   863d0:	f000 80ca 	beq.w	86568 <Cl_Dlsis_controller+0x15b0>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   863d4:	4b6c      	ldr	r3, [pc, #432]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   863d6:	791b      	ldrb	r3, [r3, #4]
   863d8:	733b      	strb	r3, [r7, #12]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   863da:	4b6b      	ldr	r3, [pc, #428]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   863dc:	795b      	ldrb	r3, [r3, #5]
   863de:	737b      	strb	r3, [r7, #13]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   863e0:	4b69      	ldr	r3, [pc, #420]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   863e2:	799b      	ldrb	r3, [r3, #6]
   863e4:	73bb      	strb	r3, [r7, #14]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   863e6:	4b68      	ldr	r3, [pc, #416]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   863e8:	79db      	ldrb	r3, [r3, #7]
   863ea:	73fb      	strb	r3, [r7, #15]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   863ec:	89bb      	ldrh	r3, [r7, #12]
   863ee:	4619      	mov	r1, r3
   863f0:	2001      	movs	r0, #1
   863f2:	4b64      	ldr	r3, [pc, #400]	; (86584 <Cl_Dlsis_controller+0x15cc>)
   863f4:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   863f6:	89bb      	ldrh	r3, [r7, #12]
   863f8:	461a      	mov	r2, r3
   863fa:	4b64      	ldr	r3, [pc, #400]	; (8658c <Cl_Dlsis_controller+0x15d4>)
   863fc:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   863fe:	e0b3      	b.n	86568 <Cl_Dlsis_controller+0x15b0>
							case EVENT_DLSIS_SET_DATA:
									if(Cl_ConsoleRxMsg.msgready == true)
   86400:	4b61      	ldr	r3, [pc, #388]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   86402:	7e1b      	ldrb	r3, [r3, #24]
   86404:	2b00      	cmp	r3, #0
   86406:	f000 80b1 	beq.w	8656c <Cl_Dlsis_controller+0x15b4>
									{
										cl_Datastreamtype cl_temp  ;
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   8640a:	4b5f      	ldr	r3, [pc, #380]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   8640c:	795b      	ldrb	r3, [r3, #5]
   8640e:	723b      	strb	r3, [r7, #8]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   86410:	4b5d      	ldr	r3, [pc, #372]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   86412:	799b      	ldrb	r3, [r3, #6]
   86414:	727b      	strb	r3, [r7, #9]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   86416:	4b5c      	ldr	r3, [pc, #368]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   86418:	79db      	ldrb	r3, [r3, #7]
   8641a:	72bb      	strb	r3, [r7, #10]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   8641c:	4b5a      	ldr	r3, [pc, #360]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   8641e:	7a1b      	ldrb	r3, [r3, #8]
   86420:	72fb      	strb	r3, [r7, #11]
				
										switch(Cl_ConsoleRxMsg.data.byte[0])
   86422:	4b59      	ldr	r3, [pc, #356]	; (86588 <Cl_Dlsis_controller+0x15d0>)
   86424:	791b      	ldrb	r3, [r3, #4]
   86426:	3b05      	subs	r3, #5
   86428:	2b20      	cmp	r3, #32
   8642a:	f200 8097 	bhi.w	8655c <Cl_Dlsis_controller+0x15a4>
   8642e:	a201      	add	r2, pc, #4	; (adr r2, 86434 <Cl_Dlsis_controller+0x147c>)
   86430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86434:	0008655d 	.word	0x0008655d
   86438:	0008655d 	.word	0x0008655d
   8643c:	0008655d 	.word	0x0008655d
   86440:	0008655d 	.word	0x0008655d
   86444:	0008655d 	.word	0x0008655d
   86448:	0008655d 	.word	0x0008655d
   8644c:	0008655d 	.word	0x0008655d
   86450:	0008655d 	.word	0x0008655d
   86454:	0008655d 	.word	0x0008655d
   86458:	0008655d 	.word	0x0008655d
   8645c:	0008655d 	.word	0x0008655d
   86460:	0008655d 	.word	0x0008655d
   86464:	0008655d 	.word	0x0008655d
   86468:	0008655d 	.word	0x0008655d
   8646c:	0008655d 	.word	0x0008655d
   86470:	0008655d 	.word	0x0008655d
   86474:	0008655d 	.word	0x0008655d
   86478:	0008655d 	.word	0x0008655d
   8647c:	0008655d 	.word	0x0008655d
   86480:	000864b9 	.word	0x000864b9
   86484:	000864d1 	.word	0x000864d1
   86488:	000864e9 	.word	0x000864e9
   8648c:	000864f9 	.word	0x000864f9
   86490:	00086509 	.word	0x00086509
   86494:	00086519 	.word	0x00086519
   86498:	0008655d 	.word	0x0008655d
   8649c:	0008655d 	.word	0x0008655d
   864a0:	0008655d 	.word	0x0008655d
   864a4:	0008655d 	.word	0x0008655d
   864a8:	00086529 	.word	0x00086529
   864ac:	00086533 	.word	0x00086533
   864b0:	0008653d 	.word	0x0008653d
   864b4:	0008654d 	.word	0x0008654d
											case ID_bloodratereturn:
											break;
											case ID_bloodratetreat:
											break;
											case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   864b8:	68bb      	ldr	r3, [r7, #8]
   864ba:	4a35      	ldr	r2, [pc, #212]	; (86590 <Cl_Dlsis_controller+0x15d8>)
   864bc:	fba2 2303 	umull	r2, r3, r2, r3
   864c0:	08da      	lsrs	r2, r3, #3
   864c2:	4b34      	ldr	r3, [pc, #208]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   864c4:	4610      	mov	r0, r2
   864c6:	4798      	blx	r3
   864c8:	4602      	mov	r2, r0
   864ca:	4b33      	ldr	r3, [pc, #204]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   864cc:	649a      	str	r2, [r3, #72]	; 0x48
											break;
   864ce:	e046      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   864d0:	68bb      	ldr	r3, [r7, #8]
   864d2:	4a2f      	ldr	r2, [pc, #188]	; (86590 <Cl_Dlsis_controller+0x15d8>)
   864d4:	fba2 2303 	umull	r2, r3, r2, r3
   864d8:	08da      	lsrs	r2, r3, #3
   864da:	4b2e      	ldr	r3, [pc, #184]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   864dc:	4610      	mov	r0, r2
   864de:	4798      	blx	r3
   864e0:	4602      	mov	r2, r0
   864e2:	4b2d      	ldr	r3, [pc, #180]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   864e4:	64da      	str	r2, [r3, #76]	; 0x4c
											break;
   864e6:	e03a      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_tmpllimit:
											Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   864e8:	68ba      	ldr	r2, [r7, #8]
   864ea:	4b2a      	ldr	r3, [pc, #168]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   864ec:	4610      	mov	r0, r2
   864ee:	4798      	blx	r3
   864f0:	4602      	mov	r2, r0
   864f2:	4b29      	ldr	r3, [pc, #164]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   864f4:	635a      	str	r2, [r3, #52]	; 0x34
											break;
   864f6:	e032      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_tmpulimit:
											Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   864f8:	68ba      	ldr	r2, [r7, #8]
   864fa:	4b26      	ldr	r3, [pc, #152]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   864fc:	4610      	mov	r0, r2
   864fe:	4798      	blx	r3
   86500:	4602      	mov	r2, r0
   86502:	4b25      	ldr	r3, [pc, #148]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   86504:	631a      	str	r2, [r3, #48]	; 0x30
											break;
   86506:	e02a      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   86508:	68ba      	ldr	r2, [r7, #8]
   8650a:	4b22      	ldr	r3, [pc, #136]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   8650c:	4610      	mov	r0, r2
   8650e:	4798      	blx	r3
   86510:	4602      	mov	r2, r0
   86512:	4b21      	ldr	r3, [pc, #132]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   86514:	615a      	str	r2, [r3, #20]
											break;
   86516:	e022      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   86518:	68ba      	ldr	r2, [r7, #8]
   8651a:	4b1e      	ldr	r3, [pc, #120]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   8651c:	4610      	mov	r0, r2
   8651e:	4798      	blx	r3
   86520:	4602      	mov	r2, r0
   86522:	4b1d      	ldr	r3, [pc, #116]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   86524:	611a      	str	r2, [r3, #16]
											break;
   86526:	e01a      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_dflowllimit:
											break;
											case ID_dflowulimit:
											break;
											case ID_condllimit:
											Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   86528:	68bb      	ldr	r3, [r7, #8]
   8652a:	b21a      	sxth	r2, r3
   8652c:	4b1a      	ldr	r3, [pc, #104]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   8652e:	801a      	strh	r2, [r3, #0]
											break;
   86530:	e015      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_condulimit:
											Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   86532:	68bb      	ldr	r3, [r7, #8]
   86534:	b21a      	sxth	r2, r3
   86536:	4b18      	ldr	r3, [pc, #96]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   86538:	805a      	strh	r2, [r3, #2]
											break;
   8653a:	e010      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   8653c:	68ba      	ldr	r2, [r7, #8]
   8653e:	4b15      	ldr	r3, [pc, #84]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   86540:	4610      	mov	r0, r2
   86542:	4798      	blx	r3
   86544:	4602      	mov	r2, r0
   86546:	4b14      	ldr	r3, [pc, #80]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   86548:	60da      	str	r2, [r3, #12]
											break;
   8654a:	e008      	b.n	8655e <Cl_Dlsis_controller+0x15a6>
											case ID_aptulimit:
											Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   8654c:	68ba      	ldr	r2, [r7, #8]
   8654e:	4b11      	ldr	r3, [pc, #68]	; (86594 <Cl_Dlsis_controller+0x15dc>)
   86550:	4610      	mov	r0, r2
   86552:	4798      	blx	r3
   86554:	4602      	mov	r2, r0
   86556:	4b10      	ldr	r3, [pc, #64]	; (86598 <Cl_Dlsis_controller+0x15e0>)
   86558:	609a      	str	r2, [r3, #8]
											
											break;
   8655a:	e000      	b.n	8655e <Cl_Dlsis_controller+0x15a6>

											default:break;
   8655c:	bf00      	nop
											}
										
										}
			
						break;
   8655e:	e005      	b.n	8656c <Cl_Dlsis_controller+0x15b4>
						default:
						break;
   86560:	bf00      	nop
   86562:	e008      	b.n	86576 <Cl_Dlsis_controller+0x15be>
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
								Treatdata[ID_heprate] = cl_temp.Twobyte;
								hep_calibration(Treatdata[ID_heprate]);
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
							}
						break;
   86564:	bf00      	nop
   86566:	e006      	b.n	86576 <Cl_Dlsis_controller+0x15be>
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
						}
						break;
   86568:	bf00      	nop
   8656a:	e004      	b.n	86576 <Cl_Dlsis_controller+0x15be>
											default:break;
											}
										
										}
			
						break;
   8656c:	bf00      	nop
						default:
						break;
					}
		break;
   8656e:	e002      	b.n	86576 <Cl_Dlsis_controller+0x15be>
		default:break;
   86570:	bf00      	nop
   86572:	e000      	b.n	86576 <Cl_Dlsis_controller+0x15be>
					//	}
			break;


		}
		break;
   86574:	bf00      	nop
		default:break;
	}



return CL_OK;
   86576:	2300      	movs	r3, #0
}
   86578:	4618      	mov	r0, r3
   8657a:	3768      	adds	r7, #104	; 0x68
   8657c:	46bd      	mov	sp, r7
   8657e:	bd80      	pop	{r7, pc}
   86580:	00094729 	.word	0x00094729
   86584:	00093f5d 	.word	0x00093f5d
   86588:	20072350 	.word	0x20072350
   8658c:	20072614 	.word	0x20072614
   86590:	cccccccd 	.word	0xcccccccd
   86594:	000a7ef9 	.word	0x000a7ef9
   86598:	20072044 	.word	0x20072044

0008659c <cl_dlsis_translatemacevent>:
	}
return CL_OK;
}

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   8659c:	b480      	push	{r7}
   8659e:	b083      	sub	sp, #12
   865a0:	af00      	add	r7, sp, #0
   865a2:	4603      	mov	r3, r0
   865a4:	6039      	str	r1, [r7, #0]
   865a6:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   865a8:	79fb      	ldrb	r3, [r7, #7]
   865aa:	3b07      	subs	r3, #7
   865ac:	2b5a      	cmp	r3, #90	; 0x5a
   865ae:	f200 8141 	bhi.w	86834 <cl_dlsis_translatemacevent+0x298>
   865b2:	a201      	add	r2, pc, #4	; (adr r2, 865b8 <cl_dlsis_translatemacevent+0x1c>)
   865b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   865b8:	00086755 	.word	0x00086755
   865bc:	00086835 	.word	0x00086835
   865c0:	00086835 	.word	0x00086835
   865c4:	00086735 	.word	0x00086735
   865c8:	0008673d 	.word	0x0008673d
   865cc:	0008672d 	.word	0x0008672d
   865d0:	0008674d 	.word	0x0008674d
   865d4:	00086745 	.word	0x00086745
   865d8:	00086835 	.word	0x00086835
   865dc:	00086835 	.word	0x00086835
   865e0:	00086835 	.word	0x00086835
   865e4:	00086835 	.word	0x00086835
   865e8:	00086835 	.word	0x00086835
   865ec:	00086835 	.word	0x00086835
   865f0:	000867e5 	.word	0x000867e5
   865f4:	00086835 	.word	0x00086835
   865f8:	0008675d 	.word	0x0008675d
   865fc:	00086765 	.word	0x00086765
   86600:	0008676d 	.word	0x0008676d
   86604:	00086775 	.word	0x00086775
   86608:	0008677d 	.word	0x0008677d
   8660c:	00086835 	.word	0x00086835
   86610:	00086835 	.word	0x00086835
   86614:	00086835 	.word	0x00086835
   86618:	00086835 	.word	0x00086835
   8661c:	00086835 	.word	0x00086835
   86620:	000867bd 	.word	0x000867bd
   86624:	000867c5 	.word	0x000867c5
   86628:	000867cd 	.word	0x000867cd
   8662c:	000867d5 	.word	0x000867d5
   86630:	000867dd 	.word	0x000867dd
   86634:	0008680d 	.word	0x0008680d
   86638:	000867ed 	.word	0x000867ed
   8663c:	000867f5 	.word	0x000867f5
   86640:	00086725 	.word	0x00086725
   86644:	00086835 	.word	0x00086835
   86648:	00086835 	.word	0x00086835
   8664c:	00086835 	.word	0x00086835
   86650:	000867b5 	.word	0x000867b5
   86654:	000867ad 	.word	0x000867ad
   86658:	00086835 	.word	0x00086835
   8665c:	00086835 	.word	0x00086835
   86660:	00086835 	.word	0x00086835
   86664:	00086835 	.word	0x00086835
   86668:	00086835 	.word	0x00086835
   8666c:	00086835 	.word	0x00086835
   86670:	00086835 	.word	0x00086835
   86674:	00086835 	.word	0x00086835
   86678:	00086835 	.word	0x00086835
   8667c:	00086785 	.word	0x00086785
   86680:	00086835 	.word	0x00086835
   86684:	0008678d 	.word	0x0008678d
   86688:	00086795 	.word	0x00086795
   8668c:	0008679d 	.word	0x0008679d
   86690:	000867a5 	.word	0x000867a5
   86694:	00086835 	.word	0x00086835
   86698:	00086835 	.word	0x00086835
   8669c:	00086835 	.word	0x00086835
   866a0:	00086835 	.word	0x00086835
   866a4:	00086835 	.word	0x00086835
   866a8:	00086835 	.word	0x00086835
   866ac:	00086835 	.word	0x00086835
   866b0:	00086835 	.word	0x00086835
   866b4:	00086835 	.word	0x00086835
   866b8:	00086835 	.word	0x00086835
   866bc:	00086835 	.word	0x00086835
   866c0:	00086835 	.word	0x00086835
   866c4:	00086835 	.word	0x00086835
   866c8:	00086835 	.word	0x00086835
   866cc:	00086835 	.word	0x00086835
   866d0:	00086835 	.word	0x00086835
   866d4:	00086835 	.word	0x00086835
   866d8:	00086835 	.word	0x00086835
   866dc:	00086835 	.word	0x00086835
   866e0:	00086835 	.word	0x00086835
   866e4:	00086835 	.word	0x00086835
   866e8:	00086835 	.word	0x00086835
   866ec:	00086835 	.word	0x00086835
   866f0:	00086835 	.word	0x00086835
   866f4:	00086835 	.word	0x00086835
   866f8:	00086835 	.word	0x00086835
   866fc:	00086815 	.word	0x00086815
   86700:	00086835 	.word	0x00086835
   86704:	00086835 	.word	0x00086835
   86708:	000867fd 	.word	0x000867fd
   8670c:	00086805 	.word	0x00086805
   86710:	00086835 	.word	0x00086835
   86714:	00086835 	.word	0x00086835
   86718:	0008681d 	.word	0x0008681d
   8671c:	00086825 	.word	0x00086825
   86720:	0008682d 	.word	0x0008682d
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   86724:	683b      	ldr	r3, [r7, #0]
   86726:	2201      	movs	r2, #1
   86728:	701a      	strb	r2, [r3, #0]
		break;
   8672a:	e084      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   8672c:	683b      	ldr	r3, [r7, #0]
   8672e:	221d      	movs	r2, #29
   86730:	701a      	strb	r2, [r3, #0]
		break;
   86732:	e080      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   86734:	683b      	ldr	r3, [r7, #0]
   86736:	221e      	movs	r2, #30
   86738:	701a      	strb	r2, [r3, #0]
		break;
   8673a:	e07c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   8673c:	683b      	ldr	r3, [r7, #0]
   8673e:	221f      	movs	r2, #31
   86740:	701a      	strb	r2, [r3, #0]
		break;
   86742:	e078      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   86744:	683b      	ldr	r3, [r7, #0]
   86746:	2202      	movs	r2, #2
   86748:	701a      	strb	r2, [r3, #0]
		break;
   8674a:	e074      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   8674c:	683b      	ldr	r3, [r7, #0]
   8674e:	2203      	movs	r2, #3
   86750:	701a      	strb	r2, [r3, #0]
		break;
   86752:	e070      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   86754:	683b      	ldr	r3, [r7, #0]
   86756:	2204      	movs	r2, #4
   86758:	701a      	strb	r2, [r3, #0]
		break;
   8675a:	e06c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   8675c:	683b      	ldr	r3, [r7, #0]
   8675e:	2205      	movs	r2, #5
   86760:	701a      	strb	r2, [r3, #0]
		break;
   86762:	e068      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   86764:	683b      	ldr	r3, [r7, #0]
   86766:	2206      	movs	r2, #6
   86768:	701a      	strb	r2, [r3, #0]
		break;
   8676a:	e064      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   8676c:	683b      	ldr	r3, [r7, #0]
   8676e:	2207      	movs	r2, #7
   86770:	701a      	strb	r2, [r3, #0]
		break;
   86772:	e060      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   86774:	683b      	ldr	r3, [r7, #0]
   86776:	2208      	movs	r2, #8
   86778:	701a      	strb	r2, [r3, #0]
		break;
   8677a:	e05c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   8677c:	683b      	ldr	r3, [r7, #0]
   8677e:	2209      	movs	r2, #9
   86780:	701a      	strb	r2, [r3, #0]
		break;
   86782:	e058      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86784:	683b      	ldr	r3, [r7, #0]
   86786:	2211      	movs	r2, #17
   86788:	701a      	strb	r2, [r3, #0]
		break;
   8678a:	e054      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   8678c:	683b      	ldr	r3, [r7, #0]
   8678e:	2212      	movs	r2, #18
   86790:	701a      	strb	r2, [r3, #0]
		break;
   86792:	e050      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   86794:	683b      	ldr	r3, [r7, #0]
   86796:	2213      	movs	r2, #19
   86798:	701a      	strb	r2, [r3, #0]
		break;
   8679a:	e04c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   8679c:	683b      	ldr	r3, [r7, #0]
   8679e:	2214      	movs	r2, #20
   867a0:	701a      	strb	r2, [r3, #0]
		break;
   867a2:	e048      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   867a4:	683b      	ldr	r3, [r7, #0]
   867a6:	2215      	movs	r2, #21
   867a8:	701a      	strb	r2, [r3, #0]
		break;
   867aa:	e044      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   867ac:	683b      	ldr	r3, [r7, #0]
   867ae:	2216      	movs	r2, #22
   867b0:	701a      	strb	r2, [r3, #0]
		break;
   867b2:	e040      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   867b4:	683b      	ldr	r3, [r7, #0]
   867b6:	2217      	movs	r2, #23
   867b8:	701a      	strb	r2, [r3, #0]
		break;
   867ba:	e03c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   867bc:	683b      	ldr	r3, [r7, #0]
   867be:	2219      	movs	r2, #25
   867c0:	701a      	strb	r2, [r3, #0]

		break;
   867c2:	e038      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   867c4:	683b      	ldr	r3, [r7, #0]
   867c6:	221a      	movs	r2, #26
   867c8:	701a      	strb	r2, [r3, #0]
		break;
   867ca:	e034      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   867cc:	683b      	ldr	r3, [r7, #0]
   867ce:	221a      	movs	r2, #26
   867d0:	701a      	strb	r2, [r3, #0]
		break;
   867d2:	e030      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   867d4:	683b      	ldr	r3, [r7, #0]
   867d6:	221b      	movs	r2, #27
   867d8:	701a      	strb	r2, [r3, #0]
		break;
   867da:	e02c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   867dc:	683b      	ldr	r3, [r7, #0]
   867de:	221c      	movs	r2, #28
   867e0:	701a      	strb	r2, [r3, #0]
		break;
   867e2:	e028      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   867e4:	683b      	ldr	r3, [r7, #0]
   867e6:	2220      	movs	r2, #32
   867e8:	701a      	strb	r2, [r3, #0]
		break;
   867ea:	e024      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   867ec:	683b      	ldr	r3, [r7, #0]
   867ee:	2221      	movs	r2, #33	; 0x21
   867f0:	701a      	strb	r2, [r3, #0]
		break;
   867f2:	e020      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   867f4:	683b      	ldr	r3, [r7, #0]
   867f6:	2222      	movs	r2, #34	; 0x22
   867f8:	701a      	strb	r2, [r3, #0]
		break;
   867fa:	e01c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   867fc:	683b      	ldr	r3, [r7, #0]
   867fe:	225b      	movs	r2, #91	; 0x5b
   86800:	701a      	strb	r2, [r3, #0]
		break;
   86802:	e018      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   86804:	683b      	ldr	r3, [r7, #0]
   86806:	225c      	movs	r2, #92	; 0x5c
   86808:	701a      	strb	r2, [r3, #0]
		break;
   8680a:	e014      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dlsis_event = EVENT_DLSIS_HEAPARIN_BOLUS;
   8680c:	683b      	ldr	r3, [r7, #0]
   8680e:	2223      	movs	r2, #35	; 0x23
   86810:	701a      	strb	r2, [r3, #0]
		break;
   86812:	e010      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_ISOUF_START:
		*cl_dlsis_event = EVENT_DLSIS_ISOUF_START;
   86814:	683b      	ldr	r3, [r7, #0]
   86816:	2224      	movs	r2, #36	; 0x24
   86818:	701a      	strb	r2, [r3, #0]
		break;
   8681a:	e00c      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MUTE_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_MUTE;
   8681c:	683b      	ldr	r3, [r7, #0]
   8681e:	2225      	movs	r2, #37	; 0x25
   86820:	701a      	strb	r2, [r3, #0]
		break;
   86822:	e008      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_ON :
		*cl_dlsis_event = EVENT_DLSIS_DIALYSIS_ISOUF_ON;
   86824:	683b      	ldr	r3, [r7, #0]
   86826:	2226      	movs	r2, #38	; 0x26
   86828:	701a      	strb	r2, [r3, #0]
		break;	
   8682a:	e004      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_OFF :
		*cl_dlsis_event = EVENT_DLSIS_DIALYSIS_ISOUF_OFF;
   8682c:	683b      	ldr	r3, [r7, #0]
   8682e:	2227      	movs	r2, #39	; 0x27
   86830:	701a      	strb	r2, [r3, #0]
		break;	
   86832:	e000      	b.n	86836 <cl_dlsis_translatemacevent+0x29a>
		default:
		
		break;
   86834:	bf00      	nop
	}
	return CL_OK;
   86836:	2300      	movs	r3, #0
}
   86838:	4618      	mov	r0, r3
   8683a:	370c      	adds	r7, #12
   8683c:	46bd      	mov	sp, r7
   8683e:	bc80      	pop	{r7}
   86840:	4770      	bx	lr
   86842:	bf00      	nop

00086844 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   86844:	b580      	push	{r7, lr}
   86846:	b084      	sub	sp, #16
   86848:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   8684a:	2304      	movs	r3, #4
   8684c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8684e:	2359      	movs	r3, #89	; 0x59
   86850:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   86852:	1d3b      	adds	r3, r7, #4
   86854:	2200      	movs	r2, #0
   86856:	601a      	str	r2, [r3, #0]
   86858:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   8685c:	230a      	movs	r3, #10
   8685e:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   86860:	2305      	movs	r3, #5
   86862:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   86864:	4b13      	ldr	r3, [pc, #76]	; (868b4 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86866:	78db      	ldrb	r3, [r3, #3]
   86868:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   8686a:	4b12      	ldr	r3, [pc, #72]	; (868b4 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   8686c:	791b      	ldrb	r3, [r3, #4]
   8686e:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   86870:	4b10      	ldr	r3, [pc, #64]	; (868b4 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86872:	781b      	ldrb	r3, [r3, #0]
   86874:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   86876:	4b0f      	ldr	r3, [pc, #60]	; (868b4 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86878:	78da      	ldrb	r2, [r3, #3]
   8687a:	f06f 030f 	mvn.w	r3, #15
   8687e:	1a9b      	subs	r3, r3, r2
   86880:	b2db      	uxtb	r3, r3
   86882:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   86884:	4b0b      	ldr	r3, [pc, #44]	; (868b4 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86886:	791b      	ldrb	r3, [r3, #4]
   86888:	425b      	negs	r3, r3
   8688a:	b2db      	uxtb	r3, r3
   8688c:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   8688e:	4b09      	ldr	r3, [pc, #36]	; (868b4 <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86890:	781b      	ldrb	r3, [r3, #0]
   86892:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   86896:	b2db      	uxtb	r3, r3
   86898:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   8689a:	1d39      	adds	r1, r7, #4
   8689c:	7bbb      	ldrb	r3, [r7, #14]
   8689e:	2207      	movs	r2, #7
   868a0:	4618      	mov	r0, r3
   868a2:	4b05      	ldr	r3, [pc, #20]	; (868b8 <Cl_Dlsis_UpdateTimeInfo+0x74>)
   868a4:	4798      	blx	r3
   868a6:	4603      	mov	r3, r0
   868a8:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   868aa:	2300      	movs	r3, #0
	}
   868ac:	4618      	mov	r0, r3
   868ae:	3710      	adds	r7, #16
   868b0:	46bd      	mov	sp, r7
   868b2:	bd80      	pop	{r7, pc}
   868b4:	200720c0 	.word	0x200720c0
   868b8:	0009cbd5 	.word	0x0009cbd5

000868bc <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   868bc:	b480      	push	{r7}
   868be:	b083      	sub	sp, #12
   868c0:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   868c2:	2304      	movs	r3, #4
   868c4:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > Treatdata[ID_treattime] )
   868c6:	4b07      	ldr	r3, [pc, #28]	; (868e4 <cl_Dlsis_CheckforDialysisCompletion+0x28>)
   868c8:	78db      	ldrb	r3, [r3, #3]
   868ca:	461a      	mov	r2, r3
   868cc:	4b06      	ldr	r3, [pc, #24]	; (868e8 <cl_Dlsis_CheckforDialysisCompletion+0x2c>)
   868ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   868d0:	429a      	cmp	r2, r3
   868d2:	d901      	bls.n	868d8 <cl_Dlsis_CheckforDialysisCompletion+0x1c>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   868d4:	2300      	movs	r3, #0
   868d6:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   868d8:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   868da:	4618      	mov	r0, r3
   868dc:	370c      	adds	r7, #12
   868de:	46bd      	mov	sp, r7
   868e0:	bc80      	pop	{r7}
   868e2:	4770      	bx	lr
   868e4:	200720c0 	.word	0x200720c0
   868e8:	20072614 	.word	0x20072614

000868ec <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   868ec:	b580      	push	{r7, lr}
   868ee:	b082      	sub	sp, #8
   868f0:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   868f2:	2300      	movs	r3, #0
   868f4:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   868f6:	2300      	movs	r3, #0
   868f8:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   868fa:	4b10      	ldr	r3, [pc, #64]	; (8693c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   868fc:	2200      	movs	r2, #0
   868fe:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   86900:	4b0e      	ldr	r3, [pc, #56]	; (8693c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86902:	2200      	movs	r2, #0
   86904:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   86906:	4b0d      	ldr	r3, [pc, #52]	; (8693c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86908:	2200      	movs	r2, #0
   8690a:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   8690c:	4b0b      	ldr	r3, [pc, #44]	; (8693c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   8690e:	2200      	movs	r2, #0
   86910:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   86912:	4b0a      	ldr	r3, [pc, #40]	; (8693c <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86914:	2200      	movs	r2, #0
   86916:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   86918:	1dbb      	adds	r3, r7, #6
   8691a:	2200      	movs	r2, #0
   8691c:	4619      	mov	r1, r3
   8691e:	2015      	movs	r0, #21
   86920:	4b07      	ldr	r3, [pc, #28]	; (86940 <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   86922:	4798      	blx	r3
   86924:	4603      	mov	r3, r0
   86926:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   86928:	2050      	movs	r0, #80	; 0x50
   8692a:	4b06      	ldr	r3, [pc, #24]	; (86944 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   8692c:	4798      	blx	r3
   8692e:	4603      	mov	r3, r0
   86930:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   86932:	79fb      	ldrb	r3, [r7, #7]
	}
   86934:	4618      	mov	r0, r3
   86936:	3708      	adds	r7, #8
   86938:	46bd      	mov	sp, r7
   8693a:	bd80      	pop	{r7, pc}
   8693c:	200720c0 	.word	0x200720c0
   86940:	0009cbd5 	.word	0x0009cbd5
   86944:	0008b715 	.word	0x0008b715

00086948 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   86948:	b580      	push	{r7, lr}
   8694a:	b084      	sub	sp, #16
   8694c:	af00      	add	r7, sp, #0
   8694e:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86950:	2300      	movs	r3, #0
   86952:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   86954:	2300      	movs	r3, #0
   86956:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86958:	2359      	movs	r3, #89	; 0x59
   8695a:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   8695c:	2300      	movs	r3, #0
   8695e:	73bb      	strb	r3, [r7, #14]
   86960:	e068      	b.n	86a34 <Cl_Dlsis_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   86962:	7bba      	ldrb	r2, [r7, #14]
   86964:	4937      	ldr	r1, [pc, #220]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86966:	4613      	mov	r3, r2
   86968:	00db      	lsls	r3, r3, #3
   8696a:	1a9b      	subs	r3, r3, r2
   8696c:	440b      	add	r3, r1
   8696e:	7818      	ldrb	r0, [r3, #0]
   86970:	7bba      	ldrb	r2, [r7, #14]
   86972:	4613      	mov	r3, r2
   86974:	00db      	lsls	r3, r3, #3
   86976:	1a9b      	subs	r3, r3, r2
   86978:	4a32      	ldr	r2, [pc, #200]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   8697a:	4413      	add	r3, r2
   8697c:	3302      	adds	r3, #2
   8697e:	4619      	mov	r1, r3
   86980:	4b31      	ldr	r3, [pc, #196]	; (86a48 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   86982:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   86984:	7bba      	ldrb	r2, [r7, #14]
   86986:	492f      	ldr	r1, [pc, #188]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86988:	4613      	mov	r3, r2
   8698a:	00db      	lsls	r3, r3, #3
   8698c:	1a9b      	subs	r3, r3, r2
   8698e:	440b      	add	r3, r1
   86990:	3302      	adds	r3, #2
   86992:	781b      	ldrb	r3, [r3, #0]
   86994:	2b00      	cmp	r3, #0
   86996:	d022      	beq.n	869de <Cl_Dlsis_UpdateAlarmTable+0x96>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   86998:	7bba      	ldrb	r2, [r7, #14]
   8699a:	492a      	ldr	r1, [pc, #168]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   8699c:	4613      	mov	r3, r2
   8699e:	00db      	lsls	r3, r3, #3
   869a0:	1a9b      	subs	r3, r3, r2
   869a2:	440b      	add	r3, r1
   869a4:	3303      	adds	r3, #3
   869a6:	781b      	ldrb	r3, [r3, #0]
   869a8:	f083 0301 	eor.w	r3, r3, #1
   869ac:	b2db      	uxtb	r3, r3
   869ae:	2b00      	cmp	r3, #0
   869b0:	d03d      	beq.n	86a2e <Cl_Dlsis_UpdateAlarmTable+0xe6>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   869b2:	7bba      	ldrb	r2, [r7, #14]
   869b4:	4923      	ldr	r1, [pc, #140]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   869b6:	4613      	mov	r3, r2
   869b8:	00db      	lsls	r3, r3, #3
   869ba:	1a9b      	subs	r3, r3, r2
   869bc:	440b      	add	r3, r1
   869be:	3303      	adds	r3, #3
   869c0:	2201      	movs	r2, #1
   869c2:	701a      	strb	r2, [r3, #0]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   869c4:	7bba      	ldrb	r2, [r7, #14]
   869c6:	491f      	ldr	r1, [pc, #124]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   869c8:	4613      	mov	r3, r2
   869ca:	00db      	lsls	r3, r3, #3
   869cc:	1a9b      	subs	r3, r3, r2
   869ce:	440b      	add	r3, r1
   869d0:	781b      	ldrb	r3, [r3, #0]
   869d2:	4618      	mov	r0, r3
   869d4:	4b1d      	ldr	r3, [pc, #116]	; (86a4c <Cl_Dlsis_UpdateAlarmTable+0x104>)
   869d6:	4798      	blx	r3
   869d8:	4603      	mov	r3, r0
   869da:	73fb      	strb	r3, [r7, #15]
   869dc:	e027      	b.n	86a2e <Cl_Dlsis_UpdateAlarmTable+0xe6>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   869de:	7bba      	ldrb	r2, [r7, #14]
   869e0:	4918      	ldr	r1, [pc, #96]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   869e2:	4613      	mov	r3, r2
   869e4:	00db      	lsls	r3, r3, #3
   869e6:	1a9b      	subs	r3, r3, r2
   869e8:	440b      	add	r3, r1
   869ea:	3303      	adds	r3, #3
   869ec:	781b      	ldrb	r3, [r3, #0]
   869ee:	2b00      	cmp	r3, #0
   869f0:	d01d      	beq.n	86a2e <Cl_Dlsis_UpdateAlarmTable+0xe6>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   869f2:	7bba      	ldrb	r2, [r7, #14]
   869f4:	4913      	ldr	r1, [pc, #76]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   869f6:	4613      	mov	r3, r2
   869f8:	00db      	lsls	r3, r3, #3
   869fa:	1a9b      	subs	r3, r3, r2
   869fc:	440b      	add	r3, r1
   869fe:	3303      	adds	r3, #3
   86a00:	2200      	movs	r2, #0
   86a02:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   86a04:	2307      	movs	r3, #7
   86a06:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86a08:	7bba      	ldrb	r2, [r7, #14]
   86a0a:	490e      	ldr	r1, [pc, #56]	; (86a44 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86a0c:	4613      	mov	r3, r2
   86a0e:	00db      	lsls	r3, r3, #3
   86a10:	1a9b      	subs	r3, r3, r2
   86a12:	440b      	add	r3, r1
   86a14:	781b      	ldrb	r3, [r3, #0]
   86a16:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   86a18:	2300      	movs	r3, #0
   86a1a:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86a1c:	f107 0108 	add.w	r1, r7, #8
   86a20:	7b7b      	ldrb	r3, [r7, #13]
   86a22:	2202      	movs	r2, #2
   86a24:	4618      	mov	r0, r3
   86a26:	4b0a      	ldr	r3, [pc, #40]	; (86a50 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   86a28:	4798      	blx	r3
   86a2a:	4603      	mov	r3, r0
   86a2c:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   86a2e:	7bbb      	ldrb	r3, [r7, #14]
   86a30:	3301      	adds	r3, #1
   86a32:	73bb      	strb	r3, [r7, #14]
   86a34:	7bbb      	ldrb	r3, [r7, #14]
   86a36:	2b24      	cmp	r3, #36	; 0x24
   86a38:	d993      	bls.n	86962 <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   86a3a:	7bfb      	ldrb	r3, [r7, #15]
}
   86a3c:	4618      	mov	r0, r3
   86a3e:	3710      	adds	r7, #16
   86a40:	46bd      	mov	sp, r7
   86a42:	bd80      	pop	{r7, pc}
   86a44:	200703c4 	.word	0x200703c4
   86a48:	00082bc1 	.word	0x00082bc1
   86a4c:	00086a55 	.word	0x00086a55
   86a50:	0009cbd5 	.word	0x0009cbd5

00086a54 <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   86a54:	b580      	push	{r7, lr}
   86a56:	b086      	sub	sp, #24
   86a58:	af00      	add	r7, sp, #0
   86a5a:	4603      	mov	r3, r0
   86a5c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86a5e:	2300      	movs	r3, #0
   86a60:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   86a62:	f107 0308 	add.w	r3, r7, #8
   86a66:	2100      	movs	r1, #0
   86a68:	460a      	mov	r2, r1
   86a6a:	801a      	strh	r2, [r3, #0]
   86a6c:	460a      	mov	r2, r1
   86a6e:	709a      	strb	r2, [r3, #2]
   86a70:	2300      	movs	r3, #0
   86a72:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86a74:	2359      	movs	r3, #89	; 0x59
   86a76:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   86a78:	2300      	movs	r3, #0
   86a7a:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   86a7c:	2300      	movs	r3, #0
   86a7e:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   86a80:	79fb      	ldrb	r3, [r7, #7]
   86a82:	3b01      	subs	r3, #1
   86a84:	2b41      	cmp	r3, #65	; 0x41
   86a86:	f200 80b3 	bhi.w	86bf0 <CL_DlsisAlarmActon+0x19c>
   86a8a:	a201      	add	r2, pc, #4	; (adr r2, 86a90 <CL_DlsisAlarmActon+0x3c>)
   86a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86a90:	00086bb3 	.word	0x00086bb3
   86a94:	00086bf1 	.word	0x00086bf1
   86a98:	00086bf1 	.word	0x00086bf1
   86a9c:	00086bf1 	.word	0x00086bf1
   86aa0:	00086bc1 	.word	0x00086bc1
   86aa4:	00086bc1 	.word	0x00086bc1
   86aa8:	00086be3 	.word	0x00086be3
   86aac:	00086be3 	.word	0x00086be3
   86ab0:	00086bcf 	.word	0x00086bcf
   86ab4:	00086bf1 	.word	0x00086bf1
   86ab8:	00086bcf 	.word	0x00086bcf
   86abc:	00086bcf 	.word	0x00086bcf
   86ac0:	00086bcf 	.word	0x00086bcf
   86ac4:	00086bcf 	.word	0x00086bcf
   86ac8:	00086bcf 	.word	0x00086bcf
   86acc:	00086bcf 	.word	0x00086bcf
   86ad0:	00086bc1 	.word	0x00086bc1
   86ad4:	00086bc1 	.word	0x00086bc1
   86ad8:	00086bc1 	.word	0x00086bc1
   86adc:	00086bc1 	.word	0x00086bc1
   86ae0:	00086bc1 	.word	0x00086bc1
   86ae4:	00086bc1 	.word	0x00086bc1
   86ae8:	00086bc1 	.word	0x00086bc1
   86aec:	00086bc1 	.word	0x00086bc1
   86af0:	00086bf1 	.word	0x00086bf1
   86af4:	00086bcf 	.word	0x00086bcf
   86af8:	00086bf1 	.word	0x00086bf1
   86afc:	00086bf1 	.word	0x00086bf1
   86b00:	00086b99 	.word	0x00086b99
   86b04:	00086bf1 	.word	0x00086bf1
   86b08:	00086bf1 	.word	0x00086bf1
   86b0c:	00086bb3 	.word	0x00086bb3
   86b10:	00086bcf 	.word	0x00086bcf
   86b14:	00086bb3 	.word	0x00086bb3
   86b18:	00086bb3 	.word	0x00086bb3
   86b1c:	00086bb3 	.word	0x00086bb3
   86b20:	00086bb3 	.word	0x00086bb3
   86b24:	00086bb3 	.word	0x00086bb3
   86b28:	00086bc1 	.word	0x00086bc1
   86b2c:	00086bc1 	.word	0x00086bc1
   86b30:	00086bf1 	.word	0x00086bf1
   86b34:	00086bc1 	.word	0x00086bc1
   86b38:	00086bf1 	.word	0x00086bf1
   86b3c:	00086bc1 	.word	0x00086bc1
   86b40:	00086bf1 	.word	0x00086bf1
   86b44:	00086bf1 	.word	0x00086bf1
   86b48:	00086bf1 	.word	0x00086bf1
   86b4c:	00086bf1 	.word	0x00086bf1
   86b50:	00086bf1 	.word	0x00086bf1
   86b54:	00086bcf 	.word	0x00086bcf
   86b58:	00086bcf 	.word	0x00086bcf
   86b5c:	00086bf1 	.word	0x00086bf1
   86b60:	00086bf1 	.word	0x00086bf1
   86b64:	00086bf1 	.word	0x00086bf1
   86b68:	00086bf1 	.word	0x00086bf1
   86b6c:	00086bf1 	.word	0x00086bf1
   86b70:	00086bcf 	.word	0x00086bcf
   86b74:	00086bcf 	.word	0x00086bcf
   86b78:	00086bcf 	.word	0x00086bcf
   86b7c:	00086bf1 	.word	0x00086bf1
   86b80:	00086bf1 	.word	0x00086bf1
   86b84:	00086bf1 	.word	0x00086bf1
   86b88:	00086bb3 	.word	0x00086bb3
   86b8c:	00086bb3 	.word	0x00086bb3
   86b90:	00086bb3 	.word	0x00086bb3
   86b94:	00086bb3 	.word	0x00086bb3
		{
			//case BP_STOPPED:
			
			case POWER_FAILURE: 
			
			cl_dlsis_powerfailure = 1;
   86b98:	4b2f      	ldr	r3, [pc, #188]	; (86c58 <CL_DlsisAlarmActon+0x204>)
   86b9a:	2201      	movs	r2, #1
   86b9c:	601a      	str	r2, [r3, #0]
			
			sv_cntrl_setredalarm();
   86b9e:	4b2f      	ldr	r3, [pc, #188]	; (86c5c <CL_DlsisAlarmActon+0x208>)
   86ba0:	4798      	blx	r3
			sv_cntrl_buzzer();
   86ba2:	4b2f      	ldr	r3, [pc, #188]	; (86c60 <CL_DlsisAlarmActon+0x20c>)
   86ba4:	4798      	blx	r3
			Cl_Dlsis_StopDialysis();
   86ba6:	4b2f      	ldr	r3, [pc, #188]	; (86c64 <CL_DlsisAlarmActon+0x210>)
   86ba8:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86baa:	4b2f      	ldr	r3, [pc, #188]	; (86c68 <CL_DlsisAlarmActon+0x214>)
   86bac:	220a      	movs	r2, #10
   86bae:	701a      	strb	r2, [r3, #0]
			
			break;
   86bb0:	e01f      	b.n	86bf2 <CL_DlsisAlarmActon+0x19e>
			case TMP_HIGH:
			case TMP_LOW:
			case BLOOD_NOT_DETECTED:
			//case BD_EVENT:                  // manav02 added
							
				sv_cntrl_setredalarm();
   86bb2:	4b2a      	ldr	r3, [pc, #168]	; (86c5c <CL_DlsisAlarmActon+0x208>)
   86bb4:	4798      	blx	r3
				sv_cntrl_buzzer();
   86bb6:	4b2a      	ldr	r3, [pc, #168]	; (86c60 <CL_DlsisAlarmActon+0x20c>)
   86bb8:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   86bba:	4b2c      	ldr	r3, [pc, #176]	; (86c6c <CL_DlsisAlarmActon+0x218>)
   86bbc:	4798      	blx	r3
			break;
   86bbe:	e018      	b.n	86bf2 <CL_DlsisAlarmActon+0x19e>
			case    PS1_LOW_THRESHOLD:
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   86bc0:	4b26      	ldr	r3, [pc, #152]	; (86c5c <CL_DlsisAlarmActon+0x208>)
   86bc2:	4798      	blx	r3
				sv_cntrl_buzzer();
   86bc4:	4b26      	ldr	r3, [pc, #152]	; (86c60 <CL_DlsisAlarmActon+0x20c>)
   86bc6:	4798      	blx	r3
				cl_temp_safestate();
   86bc8:	4b29      	ldr	r3, [pc, #164]	; (86c70 <CL_DlsisAlarmActon+0x21c>)
   86bca:	4798      	blx	r3
			break;
   86bcc:	e011      	b.n	86bf2 <CL_DlsisAlarmActon+0x19e>
			case	BC_FAILED:
			case BD_EVENT:
			case BC_ALARM:
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   86bce:	4b23      	ldr	r3, [pc, #140]	; (86c5c <CL_DlsisAlarmActon+0x208>)
   86bd0:	4798      	blx	r3
				sv_cntrl_buzzer();
   86bd2:	4b23      	ldr	r3, [pc, #140]	; (86c60 <CL_DlsisAlarmActon+0x20c>)
   86bd4:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   86bd6:	4b23      	ldr	r3, [pc, #140]	; (86c64 <CL_DlsisAlarmActon+0x210>)
   86bd8:	4798      	blx	r3
		    	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86bda:	4b23      	ldr	r3, [pc, #140]	; (86c68 <CL_DlsisAlarmActon+0x214>)
   86bdc:	220a      	movs	r2, #10
   86bde:	701a      	strb	r2, [r3, #0]
			break;
   86be0:	e007      	b.n	86bf2 <CL_DlsisAlarmActon+0x19e>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setredalarm();           //manav02 changed from yellow to red
   86be2:	4b1e      	ldr	r3, [pc, #120]	; (86c5c <CL_DlsisAlarmActon+0x208>)
   86be4:	4798      	blx	r3
				sv_cntrl_buzzer();
   86be6:	4b1e      	ldr	r3, [pc, #120]	; (86c60 <CL_DlsisAlarmActon+0x20c>)
   86be8:	4798      	blx	r3
				cl_temp_safestate();
   86bea:	4b21      	ldr	r3, [pc, #132]	; (86c70 <CL_DlsisAlarmActon+0x21c>)
   86bec:	4798      	blx	r3
				//cl_cond_safestate();
			break;
   86bee:	e000      	b.n	86bf2 <CL_DlsisAlarmActon+0x19e>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86bf0:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86bf2:	79fb      	ldrb	r3, [r7, #7]
   86bf4:	2b00      	cmp	r3, #0
   86bf6:	d029      	beq.n	86c4c <CL_DlsisAlarmActon+0x1f8>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   86bf8:	4a1e      	ldr	r2, [pc, #120]	; (86c74 <CL_DlsisAlarmActon+0x220>)
   86bfa:	79fb      	ldrb	r3, [r7, #7]
   86bfc:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   86bfe:	4b1d      	ldr	r3, [pc, #116]	; (86c74 <CL_DlsisAlarmActon+0x220>)
   86c00:	781a      	ldrb	r2, [r3, #0]
   86c02:	4b1d      	ldr	r3, [pc, #116]	; (86c78 <CL_DlsisAlarmActon+0x224>)
   86c04:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   86c06:	79fb      	ldrb	r3, [r7, #7]
   86c08:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   86c0a:	2301      	movs	r3, #1
   86c0c:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   86c0e:	2302      	movs	r3, #2
   86c10:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86c12:	2307      	movs	r3, #7
   86c14:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   86c16:	200a      	movs	r0, #10
   86c18:	4b18      	ldr	r3, [pc, #96]	; (86c7c <CL_DlsisAlarmActon+0x228>)
   86c1a:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   86c1c:	f107 0108 	add.w	r1, r7, #8
   86c20:	7bfb      	ldrb	r3, [r7, #15]
   86c22:	2203      	movs	r2, #3
   86c24:	4618      	mov	r0, r3
   86c26:	4b16      	ldr	r3, [pc, #88]	; (86c80 <CL_DlsisAlarmActon+0x22c>)
   86c28:	4798      	blx	r3
   86c2a:	4603      	mov	r3, r0
   86c2c:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   86c2e:	232b      	movs	r3, #43	; 0x2b
   86c30:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   86c32:	2301      	movs	r3, #1
   86c34:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   86c36:	2302      	movs	r3, #2
   86c38:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86c3a:	f107 0108 	add.w	r1, r7, #8
   86c3e:	7bfb      	ldrb	r3, [r7, #15]
   86c40:	2202      	movs	r2, #2
   86c42:	4618      	mov	r0, r3
   86c44:	4b0e      	ldr	r3, [pc, #56]	; (86c80 <CL_DlsisAlarmActon+0x22c>)
   86c46:	4798      	blx	r3
   86c48:	4603      	mov	r3, r0
   86c4a:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   86c4c:	2300      	movs	r3, #0
}
   86c4e:	4618      	mov	r0, r3
   86c50:	3718      	adds	r7, #24
   86c52:	46bd      	mov	sp, r7
   86c54:	bd80      	pop	{r7, pc}
   86c56:	bf00      	nop
   86c58:	20071860 	.word	0x20071860
   86c5c:	0009b02d 	.word	0x0009b02d
   86c60:	0009b069 	.word	0x0009b069
   86c64:	00086e55 	.word	0x00086e55
   86c68:	20071814 	.word	0x20071814
   86c6c:	00087f45 	.word	0x00087f45
   86c70:	00087f89 	.word	0x00087f89
   86c74:	200720c5 	.word	0x200720c5
   86c78:	200720ba 	.word	0x200720ba
   86c7c:	00093ea9 	.word	0x00093ea9
   86c80:	0009cbd5 	.word	0x0009cbd5

00086c84 <Cl_Dlsis_deactivateallalarms>:

Cl_ReturnCodeType Cl_Dlsis_deactivateallalarms(){
   86c84:	b580      	push	{r7, lr}
   86c86:	b082      	sub	sp, #8
   86c88:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86c8a:	2300      	movs	r3, #0
   86c8c:	71fb      	strb	r3, [r7, #7]
	
	Cl_Dlsis_ResetAlertsforReassertion();
   86c8e:	4b6f      	ldr	r3, [pc, #444]	; (86e4c <Cl_Dlsis_deactivateallalarms+0x1c8>)
   86c90:	4798      	blx	r3
	
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   86c92:	2101      	movs	r1, #1
   86c94:	203d      	movs	r0, #61	; 0x3d
   86c96:	4b6e      	ldr	r3, [pc, #440]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86c98:	4798      	blx	r3
   86c9a:	4603      	mov	r3, r0
   86c9c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
   86c9e:	2100      	movs	r1, #0
   86ca0:	203e      	movs	r0, #62	; 0x3e
   86ca2:	4b6b      	ldr	r3, [pc, #428]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86ca4:	4798      	blx	r3
   86ca6:	4603      	mov	r3, r0
   86ca8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   86caa:	2100      	movs	r1, #0
   86cac:	2005      	movs	r0, #5
   86cae:	4b68      	ldr	r3, [pc, #416]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cb0:	4798      	blx	r3
   86cb2:	4603      	mov	r3, r0
   86cb4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   86cb6:	2100      	movs	r1, #0
   86cb8:	2006      	movs	r0, #6
   86cba:	4b65      	ldr	r3, [pc, #404]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cbc:	4798      	blx	r3
   86cbe:	4603      	mov	r3, r0
   86cc0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86cc2:	2100      	movs	r1, #0
   86cc4:	2003      	movs	r0, #3
   86cc6:	4b62      	ldr	r3, [pc, #392]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cc8:	4798      	blx	r3
   86cca:	4603      	mov	r3, r0
   86ccc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86cce:	2100      	movs	r1, #0
   86cd0:	2004      	movs	r0, #4
   86cd2:	4b5f      	ldr	r3, [pc, #380]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cd4:	4798      	blx	r3
   86cd6:	4603      	mov	r3, r0
   86cd8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86cda:	2100      	movs	r1, #0
   86cdc:	2007      	movs	r0, #7
   86cde:	4b5c      	ldr	r3, [pc, #368]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86ce0:	4798      	blx	r3
   86ce2:	4603      	mov	r3, r0
   86ce4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86ce6:	2100      	movs	r1, #0
   86ce8:	2008      	movs	r0, #8
   86cea:	4b59      	ldr	r3, [pc, #356]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cec:	4798      	blx	r3
   86cee:	4603      	mov	r3, r0
   86cf0:	71fb      	strb	r3, [r7, #7]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,false );
   86cf2:	2100      	movs	r1, #0
   86cf4:	2020      	movs	r0, #32
   86cf6:	4b56      	ldr	r3, [pc, #344]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86cf8:	4798      	blx	r3
   86cfa:	4603      	mov	r3, r0
   86cfc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86cfe:	2100      	movs	r1, #0
   86d00:	2021      	movs	r0, #33	; 0x21
   86d02:	4b53      	ldr	r3, [pc, #332]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d04:	4798      	blx	r3
   86d06:	4603      	mov	r3, r0
   86d08:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   86d0a:	2100      	movs	r1, #0
   86d0c:	2024      	movs	r0, #36	; 0x24
   86d0e:	4b50      	ldr	r3, [pc, #320]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d10:	4798      	blx	r3
   86d12:	4603      	mov	r3, r0
   86d14:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   86d16:	2100      	movs	r1, #0
   86d18:	2026      	movs	r0, #38	; 0x26
   86d1a:	4b4d      	ldr	r3, [pc, #308]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d1c:	4798      	blx	r3
   86d1e:	4603      	mov	r3, r0
   86d20:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   86d22:	2100      	movs	r1, #0
   86d24:	2023      	movs	r0, #35	; 0x23
   86d26:	4b4a      	ldr	r3, [pc, #296]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d28:	4798      	blx	r3
   86d2a:	4603      	mov	r3, r0
   86d2c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   86d2e:	2100      	movs	r1, #0
   86d30:	2025      	movs	r0, #37	; 0x25
   86d32:	4b47      	ldr	r3, [pc, #284]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d34:	4798      	blx	r3
   86d36:	4603      	mov	r3, r0
   86d38:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   86d3a:	2101      	movs	r1, #1
   86d3c:	2022      	movs	r0, #34	; 0x22
   86d3e:	4b44      	ldr	r3, [pc, #272]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d40:	4798      	blx	r3
   86d42:	4603      	mov	r3, r0
   86d44:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   86d46:	2100      	movs	r1, #0
   86d48:	2017      	movs	r0, #23
   86d4a:	4b41      	ldr	r3, [pc, #260]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d4c:	4798      	blx	r3
   86d4e:	4603      	mov	r3, r0
   86d50:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   86d52:	2100      	movs	r1, #0
   86d54:	2018      	movs	r0, #24
   86d56:	4b3e      	ldr	r3, [pc, #248]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d58:	4798      	blx	r3
   86d5a:	4603      	mov	r3, r0
   86d5c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   86d5e:	2100      	movs	r1, #0
   86d60:	2015      	movs	r0, #21
   86d62:	4b3b      	ldr	r3, [pc, #236]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d64:	4798      	blx	r3
   86d66:	4603      	mov	r3, r0
   86d68:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   86d6a:	2100      	movs	r1, #0
   86d6c:	2016      	movs	r0, #22
   86d6e:	4b38      	ldr	r3, [pc, #224]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d70:	4798      	blx	r3
   86d72:	4603      	mov	r3, r0
   86d74:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   86d76:	2100      	movs	r1, #0
   86d78:	2027      	movs	r0, #39	; 0x27
   86d7a:	4b35      	ldr	r3, [pc, #212]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d7c:	4798      	blx	r3
   86d7e:	4603      	mov	r3, r0
   86d80:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   86d82:	2100      	movs	r1, #0
   86d84:	2028      	movs	r0, #40	; 0x28
   86d86:	4b32      	ldr	r3, [pc, #200]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d88:	4798      	blx	r3
   86d8a:	4603      	mov	r3, r0
   86d8c:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   86d8e:	2100      	movs	r1, #0
   86d90:	2014      	movs	r0, #20
   86d92:	4b2f      	ldr	r3, [pc, #188]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86d94:	4798      	blx	r3
   86d96:	4603      	mov	r3, r0
   86d98:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   86d9a:	2100      	movs	r1, #0
   86d9c:	2013      	movs	r0, #19
   86d9e:	4b2c      	ldr	r3, [pc, #176]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86da0:	4798      	blx	r3
   86da2:	4603      	mov	r3, r0
   86da4:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   86da6:	2100      	movs	r1, #0
   86da8:	200c      	movs	r0, #12
   86daa:	4b29      	ldr	r3, [pc, #164]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dac:	4798      	blx	r3
   86dae:	4603      	mov	r3, r0
   86db0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   86db2:	2100      	movs	r1, #0
   86db4:	200d      	movs	r0, #13
   86db6:	4b26      	ldr	r3, [pc, #152]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86db8:	4798      	blx	r3
   86dba:	4603      	mov	r3, r0
   86dbc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   86dbe:	2100      	movs	r1, #0
   86dc0:	200e      	movs	r0, #14
   86dc2:	4b23      	ldr	r3, [pc, #140]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dc4:	4798      	blx	r3
   86dc6:	4603      	mov	r3, r0
   86dc8:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   86dca:	2100      	movs	r1, #0
   86dcc:	200f      	movs	r0, #15
   86dce:	4b20      	ldr	r3, [pc, #128]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86dd0:	4798      	blx	r3
   86dd2:	4603      	mov	r3, r0
   86dd4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   86dd6:	2100      	movs	r1, #0
   86dd8:	2010      	movs	r0, #16
   86dda:	4b1d      	ldr	r3, [pc, #116]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86ddc:	4798      	blx	r3
   86dde:	4603      	mov	r3, r0
   86de0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   86de2:	2100      	movs	r1, #0
   86de4:	2011      	movs	r0, #17
   86de6:	4b1a      	ldr	r3, [pc, #104]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86de8:	4798      	blx	r3
   86dea:	4603      	mov	r3, r0
   86dec:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   86dee:	2100      	movs	r1, #0
   86df0:	2012      	movs	r0, #18
   86df2:	4b17      	ldr	r3, [pc, #92]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86df4:	4798      	blx	r3
   86df6:	4603      	mov	r3, r0
   86df8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86dfa:	2100      	movs	r1, #0
   86dfc:	2013      	movs	r0, #19
   86dfe:	4b14      	ldr	r3, [pc, #80]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e00:	4798      	blx	r3
   86e02:	4603      	mov	r3, r0
   86e04:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86e06:	2100      	movs	r1, #0
   86e08:	2014      	movs	r0, #20
   86e0a:	4b11      	ldr	r3, [pc, #68]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e0c:	4798      	blx	r3
   86e0e:	4603      	mov	r3, r0
   86e10:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false );
   86e12:	2100      	movs	r1, #0
   86e14:	203f      	movs	r0, #63	; 0x3f
   86e16:	4b0e      	ldr	r3, [pc, #56]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e18:	4798      	blx	r3
   86e1a:	4603      	mov	r3, r0
   86e1c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,false );
   86e1e:	2100      	movs	r1, #0
   86e20:	2041      	movs	r0, #65	; 0x41
   86e22:	4b0b      	ldr	r3, [pc, #44]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e24:	4798      	blx	r3
   86e26:	4603      	mov	r3, r0
   86e28:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,false );
   86e2a:	2100      	movs	r1, #0
   86e2c:	2042      	movs	r0, #66	; 0x42
   86e2e:	4b08      	ldr	r3, [pc, #32]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e30:	4798      	blx	r3
   86e32:	4603      	mov	r3, r0
   86e34:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false );
   86e36:	2100      	movs	r1, #0
   86e38:	201a      	movs	r0, #26
   86e3a:	4b05      	ldr	r3, [pc, #20]	; (86e50 <Cl_Dlsis_deactivateallalarms+0x1cc>)
   86e3c:	4798      	blx	r3
   86e3e:	4603      	mov	r3, r0
   86e40:	71fb      	strb	r3, [r7, #7]
									
	
	
	return CL_OK;
   86e42:	2300      	movs	r3, #0
}
   86e44:	4618      	mov	r0, r3
   86e46:	3708      	adds	r7, #8
   86e48:	46bd      	mov	sp, r7
   86e4a:	bd80      	pop	{r7, pc}
   86e4c:	000873b1 	.word	0x000873b1
   86e50:	000829e5 	.word	0x000829e5

00086e54 <Cl_Dlsis_StopDialysis>:

Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   86e54:	b580      	push	{r7, lr}
   86e56:	b082      	sub	sp, #8
   86e58:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86e5a:	2300      	movs	r3, #0
   86e5c:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_deactivateallalarms();
   86e5e:	4b2b      	ldr	r3, [pc, #172]	; (86f0c <Cl_Dlsis_StopDialysis+0xb8>)
   86e60:	4798      	blx	r3
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   86e62:	4b2b      	ldr	r3, [pc, #172]	; (86f10 <Cl_Dlsis_StopDialysis+0xbc>)
   86e64:	781b      	ldrb	r3, [r3, #0]
   86e66:	2b00      	cmp	r3, #0
   86e68:	d04b      	beq.n	86f02 <Cl_Dlsis_StopDialysis+0xae>
   86e6a:	4b29      	ldr	r3, [pc, #164]	; (86f10 <Cl_Dlsis_StopDialysis+0xbc>)
   86e6c:	781b      	ldrb	r3, [r3, #0]
   86e6e:	2b09      	cmp	r3, #9
   86e70:	d047      	beq.n	86f02 <Cl_Dlsis_StopDialysis+0xae>
   86e72:	4b27      	ldr	r3, [pc, #156]	; (86f10 <Cl_Dlsis_StopDialysis+0xbc>)
   86e74:	781b      	ldrb	r3, [r3, #0]
   86e76:	2b07      	cmp	r3, #7
   86e78:	d043      	beq.n	86f02 <Cl_Dlsis_StopDialysis+0xae>
   86e7a:	4b25      	ldr	r3, [pc, #148]	; (86f10 <Cl_Dlsis_StopDialysis+0xbc>)
   86e7c:	781b      	ldrb	r3, [r3, #0]
   86e7e:	2b0a      	cmp	r3, #10
   86e80:	d03f      	beq.n	86f02 <Cl_Dlsis_StopDialysis+0xae>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   86e82:	4b24      	ldr	r3, [pc, #144]	; (86f14 <Cl_Dlsis_StopDialysis+0xc0>)
   86e84:	2200      	movs	r2, #0
   86e86:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   86e88:	4b22      	ldr	r3, [pc, #136]	; (86f14 <Cl_Dlsis_StopDialysis+0xc0>)
   86e8a:	2200      	movs	r2, #0
   86e8c:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   86e8e:	4b21      	ldr	r3, [pc, #132]	; (86f14 <Cl_Dlsis_StopDialysis+0xc0>)
   86e90:	2200      	movs	r2, #0
   86e92:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   86e94:	4b1f      	ldr	r3, [pc, #124]	; (86f14 <Cl_Dlsis_StopDialysis+0xc0>)
   86e96:	2200      	movs	r2, #0
   86e98:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   86e9a:	4b1e      	ldr	r3, [pc, #120]	; (86f14 <Cl_Dlsis_StopDialysis+0xc0>)
   86e9c:	2200      	movs	r2, #0
   86e9e:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   86ea0:	4b1d      	ldr	r3, [pc, #116]	; (86f18 <Cl_Dlsis_StopDialysis+0xc4>)
   86ea2:	4798      	blx	r3
   86ea4:	4603      	mov	r3, r0
   86ea6:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   86ea8:	2004      	movs	r0, #4
   86eaa:	4b1c      	ldr	r3, [pc, #112]	; (86f1c <Cl_Dlsis_StopDialysis+0xc8>)
   86eac:	4798      	blx	r3
   86eae:	4603      	mov	r3, r0
   86eb0:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86eb2:	2011      	movs	r0, #17
   86eb4:	4b1a      	ldr	r3, [pc, #104]	; (86f20 <Cl_Dlsis_StopDialysis+0xcc>)
   86eb6:	4798      	blx	r3
   86eb8:	4603      	mov	r3, r0
   86eba:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   86ebc:	4b19      	ldr	r3, [pc, #100]	; (86f24 <Cl_Dlsis_StopDialysis+0xd0>)
   86ebe:	4798      	blx	r3
   86ec0:	4603      	mov	r3, r0
   86ec2:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   86ec4:	2004      	movs	r0, #4
   86ec6:	4b18      	ldr	r3, [pc, #96]	; (86f28 <Cl_Dlsis_StopDialysis+0xd4>)
   86ec8:	4798      	blx	r3
   86eca:	4603      	mov	r3, r0
   86ecc:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   86ece:	2100      	movs	r1, #0
   86ed0:	2004      	movs	r0, #4
   86ed2:	4b16      	ldr	r3, [pc, #88]	; (86f2c <Cl_Dlsis_StopDialysis+0xd8>)
   86ed4:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   86ed6:	2011      	movs	r0, #17
   86ed8:	4b11      	ldr	r3, [pc, #68]	; (86f20 <Cl_Dlsis_StopDialysis+0xcc>)
   86eda:	4798      	blx	r3
   86edc:	4603      	mov	r3, r0
   86ede:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   86ee0:	4b0b      	ldr	r3, [pc, #44]	; (86f10 <Cl_Dlsis_StopDialysis+0xbc>)
   86ee2:	2200      	movs	r2, #0
   86ee4:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   86ee6:	1dbb      	adds	r3, r7, #6
   86ee8:	2200      	movs	r2, #0
   86eea:	4619      	mov	r1, r3
   86eec:	2014      	movs	r0, #20
   86eee:	4b10      	ldr	r3, [pc, #64]	; (86f30 <Cl_Dlsis_StopDialysis+0xdc>)
   86ef0:	4798      	blx	r3
   86ef2:	4603      	mov	r3, r0
   86ef4:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   86ef6:	2005      	movs	r0, #5
   86ef8:	4b0e      	ldr	r3, [pc, #56]	; (86f34 <Cl_Dlsis_StopDialysis+0xe0>)
   86efa:	4798      	blx	r3
				bc_flag = 0;
   86efc:	4b0e      	ldr	r3, [pc, #56]	; (86f38 <Cl_Dlsis_StopDialysis+0xe4>)
   86efe:	2200      	movs	r2, #0
   86f00:	701a      	strb	r2, [r3, #0]
					
				}
				
				// deactivate all alarms
				
				return CL_OK;
   86f02:	2300      	movs	r3, #0
}
   86f04:	4618      	mov	r0, r3
   86f06:	3708      	adds	r7, #8
   86f08:	46bd      	mov	sp, r7
   86f0a:	bd80      	pop	{r7, pc}
   86f0c:	00086c85 	.word	0x00086c85
   86f10:	20071814 	.word	0x20071814
   86f14:	200720c0 	.word	0x200720c0
   86f18:	0009af41 	.word	0x0009af41
   86f1c:	0009ad7d 	.word	0x0009ad7d
   86f20:	0009afc5 	.word	0x0009afc5
   86f24:	0009adcd 	.word	0x0009adcd
   86f28:	00089035 	.word	0x00089035
   86f2c:	00093f5d 	.word	0x00093f5d
   86f30:	0009cbd5 	.word	0x0009cbd5
   86f34:	00082ea5 	.word	0x00082ea5
   86f38:	20071833 	.word	0x20071833

00086f3c <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   86f3c:	b580      	push	{r7, lr}
   86f3e:	b082      	sub	sp, #8
   86f40:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86f42:	2300      	movs	r3, #0
   86f44:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86f46:	4b67      	ldr	r3, [pc, #412]	; (870e4 <Cl_Dlsis_BypassDialysis+0x1a8>)
   86f48:	4798      	blx	r3
   86f4a:	4603      	mov	r3, r0
   86f4c:	71fb      	strb	r3, [r7, #7]
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   86f4e:	2100      	movs	r1, #0
   86f50:	2004      	movs	r0, #4
   86f52:	4b65      	ldr	r3, [pc, #404]	; (870e8 <Cl_Dlsis_BypassDialysis+0x1ac>)
   86f54:	4798      	blx	r3
				isouf = false;
   86f56:	4b65      	ldr	r3, [pc, #404]	; (870ec <Cl_Dlsis_BypassDialysis+0x1b0>)
   86f58:	2200      	movs	r2, #0
   86f5a:	701a      	strb	r2, [r3, #0]
			//Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   86f5c:	4b64      	ldr	r3, [pc, #400]	; (870f0 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f5e:	781b      	ldrb	r3, [r3, #0]
   86f60:	461a      	mov	r2, r3
   86f62:	4b64      	ldr	r3, [pc, #400]	; (870f4 <Cl_Dlsis_BypassDialysis+0x1b8>)
   86f64:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   86f66:	4b62      	ldr	r3, [pc, #392]	; (870f0 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f68:	789b      	ldrb	r3, [r3, #2]
   86f6a:	461a      	mov	r2, r3
   86f6c:	4b62      	ldr	r3, [pc, #392]	; (870f8 <Cl_Dlsis_BypassDialysis+0x1bc>)
   86f6e:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   86f70:	4b5f      	ldr	r3, [pc, #380]	; (870f0 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f72:	785b      	ldrb	r3, [r3, #1]
   86f74:	461a      	mov	r2, r3
   86f76:	4b61      	ldr	r3, [pc, #388]	; (870fc <Cl_Dlsis_BypassDialysis+0x1c0>)
   86f78:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   86f7a:	4b5d      	ldr	r3, [pc, #372]	; (870f0 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f7c:	78db      	ldrb	r3, [r3, #3]
   86f7e:	461a      	mov	r2, r3
   86f80:	4b5f      	ldr	r3, [pc, #380]	; (87100 <Cl_Dlsis_BypassDialysis+0x1c4>)
   86f82:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   86f84:	4b5a      	ldr	r3, [pc, #360]	; (870f0 <Cl_Dlsis_BypassDialysis+0x1b4>)
   86f86:	791b      	ldrb	r3, [r3, #4]
   86f88:	461a      	mov	r2, r3
   86f8a:	4b5e      	ldr	r3, [pc, #376]	; (87104 <Cl_Dlsis_BypassDialysis+0x1c8>)
   86f8c:	601a      	str	r2, [r3, #0]
// 			DlsisTime.Cl_dlsishourscounter = 0;
// 			DlsisTime.Cl_dlsisMinutescounter = 0;
// 			DlsisTime.Cl_dlsisTotalhourscounter = 0;
// 			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   86f8e:	2100      	movs	r1, #0
   86f90:	2024      	movs	r0, #36	; 0x24
   86f92:	4b5d      	ldr	r3, [pc, #372]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86f94:	4798      	blx	r3
   86f96:	4603      	mov	r3, r0
   86f98:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   86f9a:	2100      	movs	r1, #0
   86f9c:	2023      	movs	r0, #35	; 0x23
   86f9e:	4b5a      	ldr	r3, [pc, #360]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fa0:	4798      	blx	r3
   86fa2:	4603      	mov	r3, r0
   86fa4:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,false );
   86fa6:	2100      	movs	r1, #0
   86fa8:	2026      	movs	r0, #38	; 0x26
   86faa:	4b57      	ldr	r3, [pc, #348]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fac:	4798      	blx	r3
   86fae:	4603      	mov	r3, r0
   86fb0:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false );
   86fb2:	2100      	movs	r1, #0
   86fb4:	2025      	movs	r0, #37	; 0x25
   86fb6:	4b54      	ldr	r3, [pc, #336]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fb8:	4798      	blx	r3
   86fba:	4603      	mov	r3, r0
   86fbc:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   86fbe:	2100      	movs	r1, #0
   86fc0:	2015      	movs	r0, #21
   86fc2:	4b51      	ldr	r3, [pc, #324]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fc4:	4798      	blx	r3
   86fc6:	4603      	mov	r3, r0
   86fc8:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   86fca:	2100      	movs	r1, #0
   86fcc:	2016      	movs	r0, #22
   86fce:	4b4e      	ldr	r3, [pc, #312]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fd0:	4798      	blx	r3
   86fd2:	4603      	mov	r3, r0
   86fd4:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   86fd6:	2100      	movs	r1, #0
   86fd8:	2017      	movs	r0, #23
   86fda:	4b4b      	ldr	r3, [pc, #300]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fdc:	4798      	blx	r3
   86fde:	4603      	mov	r3, r0
   86fe0:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   86fe2:	2100      	movs	r1, #0
   86fe4:	2018      	movs	r0, #24
   86fe6:	4b48      	ldr	r3, [pc, #288]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86fe8:	4798      	blx	r3
   86fea:	4603      	mov	r3, r0
   86fec:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   86fee:	2100      	movs	r1, #0
   86ff0:	2027      	movs	r0, #39	; 0x27
   86ff2:	4b45      	ldr	r3, [pc, #276]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   86ff4:	4798      	blx	r3
   86ff6:	4603      	mov	r3, r0
   86ff8:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   86ffa:	2100      	movs	r1, #0
   86ffc:	2028      	movs	r0, #40	; 0x28
   86ffe:	4b42      	ldr	r3, [pc, #264]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87000:	4798      	blx	r3
   87002:	4603      	mov	r3, r0
   87004:	71fb      	strb	r3, [r7, #7]
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   87006:	2100      	movs	r1, #0
   87008:	2005      	movs	r0, #5
   8700a:	4b3f      	ldr	r3, [pc, #252]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8700c:	4798      	blx	r3
   8700e:	4603      	mov	r3, r0
   87010:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   87012:	2100      	movs	r1, #0
   87014:	2006      	movs	r0, #6
   87016:	4b3c      	ldr	r3, [pc, #240]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87018:	4798      	blx	r3
   8701a:	4603      	mov	r3, r0
   8701c:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   8701e:	2100      	movs	r1, #0
   87020:	2003      	movs	r0, #3
   87022:	4b39      	ldr	r3, [pc, #228]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87024:	4798      	blx	r3
   87026:	4603      	mov	r3, r0
   87028:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   8702a:	2100      	movs	r1, #0
   8702c:	2004      	movs	r0, #4
   8702e:	4b36      	ldr	r3, [pc, #216]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87030:	4798      	blx	r3
   87032:	4603      	mov	r3, r0
   87034:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   87036:	2100      	movs	r1, #0
   87038:	2007      	movs	r0, #7
   8703a:	4b33      	ldr	r3, [pc, #204]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8703c:	4798      	blx	r3
   8703e:	4603      	mov	r3, r0
   87040:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   87042:	2100      	movs	r1, #0
   87044:	2008      	movs	r0, #8
   87046:	4b30      	ldr	r3, [pc, #192]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87048:	4798      	blx	r3
   8704a:	4603      	mov	r3, r0
   8704c:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   8704e:	2100      	movs	r1, #0
   87050:	2029      	movs	r0, #41	; 0x29
   87052:	4b2d      	ldr	r3, [pc, #180]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87054:	4798      	blx	r3
   87056:	4603      	mov	r3, r0
   87058:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   8705a:	2100      	movs	r1, #0
   8705c:	202b      	movs	r0, #43	; 0x2b
   8705e:	4b2a      	ldr	r3, [pc, #168]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87060:	4798      	blx	r3
   87062:	4603      	mov	r3, r0
   87064:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87066:	2100      	movs	r1, #0
   87068:	2021      	movs	r0, #33	; 0x21
   8706a:	4b27      	ldr	r3, [pc, #156]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8706c:	4798      	blx	r3
   8706e:	4603      	mov	r3, r0
   87070:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   87072:	2100      	movs	r1, #0
   87074:	2013      	movs	r0, #19
   87076:	4b24      	ldr	r3, [pc, #144]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87078:	4798      	blx	r3
   8707a:	4603      	mov	r3, r0
   8707c:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   8707e:	2100      	movs	r1, #0
   87080:	2014      	movs	r0, #20
   87082:	4b21      	ldr	r3, [pc, #132]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87084:	4798      	blx	r3
   87086:	4603      	mov	r3, r0
   87088:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false); 
   8708a:	2100      	movs	r1, #0
   8708c:	203f      	movs	r0, #63	; 0x3f
   8708e:	4b1e      	ldr	r3, [pc, #120]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   87090:	4798      	blx	r3
   87092:	4603      	mov	r3, r0
   87094:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,false );
   87096:	2100      	movs	r1, #0
   87098:	2041      	movs	r0, #65	; 0x41
   8709a:	4b1b      	ldr	r3, [pc, #108]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   8709c:	4798      	blx	r3
   8709e:	4603      	mov	r3, r0
   870a0:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,false );
   870a2:	2100      	movs	r1, #0
   870a4:	2042      	movs	r0, #66	; 0x42
   870a6:	4b18      	ldr	r3, [pc, #96]	; (87108 <Cl_Dlsis_BypassDialysis+0x1cc>)
   870a8:	4798      	blx	r3
   870aa:	4603      	mov	r3, r0
   870ac:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   870ae:	4b17      	ldr	r3, [pc, #92]	; (8710c <Cl_Dlsis_BypassDialysis+0x1d0>)
   870b0:	2208      	movs	r2, #8
   870b2:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   870b4:	1dbb      	adds	r3, r7, #6
   870b6:	2200      	movs	r2, #0
   870b8:	4619      	mov	r1, r3
   870ba:	2041      	movs	r0, #65	; 0x41
   870bc:	4b14      	ldr	r3, [pc, #80]	; (87110 <Cl_Dlsis_BypassDialysis+0x1d4>)
   870be:	4798      	blx	r3
   870c0:	4603      	mov	r3, r0
   870c2:	71fb      	strb	r3, [r7, #7]
	cl_wait(20);   // manav03 added
   870c4:	2014      	movs	r0, #20
   870c6:	4b13      	ldr	r3, [pc, #76]	; (87114 <Cl_Dlsis_BypassDialysis+0x1d8>)
   870c8:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   870ca:	1dbb      	adds	r3, r7, #6
   870cc:	2200      	movs	r2, #0
   870ce:	4619      	mov	r1, r3
   870d0:	2040      	movs	r0, #64	; 0x40
   870d2:	4b0f      	ldr	r3, [pc, #60]	; (87110 <Cl_Dlsis_BypassDialysis+0x1d4>)
   870d4:	4798      	blx	r3
   870d6:	4603      	mov	r3, r0
   870d8:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   870da:	2300      	movs	r3, #0
}
   870dc:	4618      	mov	r0, r3
   870de:	3708      	adds	r7, #8
   870e0:	46bd      	mov	sp, r7
   870e2:	bd80      	pop	{r7, pc}
   870e4:	0009af8d 	.word	0x0009af8d
   870e8:	00096ea9 	.word	0x00096ea9
   870ec:	200719e4 	.word	0x200719e4
   870f0:	200720c0 	.word	0x200720c0
   870f4:	20071818 	.word	0x20071818
   870f8:	20071820 	.word	0x20071820
   870fc:	2007181c 	.word	0x2007181c
   87100:	20071824 	.word	0x20071824
   87104:	20071828 	.word	0x20071828
   87108:	000829e5 	.word	0x000829e5
   8710c:	20071814 	.word	0x20071814
   87110:	0009cbd5 	.word	0x0009cbd5
   87114:	00093ea9 	.word	0x00093ea9

00087118 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   87118:	b580      	push	{r7, lr}
   8711a:	b082      	sub	sp, #8
   8711c:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8711e:	2300      	movs	r3, #0
   87120:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87122:	4b6e      	ldr	r3, [pc, #440]	; (872dc <Cl_Dlsis_BypassOff+0x1c4>)
   87124:	4798      	blx	r3
   87126:	4603      	mov	r3, r0
   87128:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   8712a:	4b6d      	ldr	r3, [pc, #436]	; (872e0 <Cl_Dlsis_BypassOff+0x1c8>)
   8712c:	681b      	ldr	r3, [r3, #0]
   8712e:	b2da      	uxtb	r2, r3
   87130:	4b6c      	ldr	r3, [pc, #432]	; (872e4 <Cl_Dlsis_BypassOff+0x1cc>)
   87132:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   87134:	4b6c      	ldr	r3, [pc, #432]	; (872e8 <Cl_Dlsis_BypassOff+0x1d0>)
   87136:	681b      	ldr	r3, [r3, #0]
   87138:	b2da      	uxtb	r2, r3
   8713a:	4b6a      	ldr	r3, [pc, #424]	; (872e4 <Cl_Dlsis_BypassOff+0x1cc>)
   8713c:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   8713e:	4b6b      	ldr	r3, [pc, #428]	; (872ec <Cl_Dlsis_BypassOff+0x1d4>)
   87140:	681b      	ldr	r3, [r3, #0]
   87142:	b2da      	uxtb	r2, r3
   87144:	4b67      	ldr	r3, [pc, #412]	; (872e4 <Cl_Dlsis_BypassOff+0x1cc>)
   87146:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   87148:	4b69      	ldr	r3, [pc, #420]	; (872f0 <Cl_Dlsis_BypassOff+0x1d8>)
   8714a:	681b      	ldr	r3, [r3, #0]
   8714c:	b2da      	uxtb	r2, r3
   8714e:	4b65      	ldr	r3, [pc, #404]	; (872e4 <Cl_Dlsis_BypassOff+0x1cc>)
   87150:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   87152:	4b68      	ldr	r3, [pc, #416]	; (872f4 <Cl_Dlsis_BypassOff+0x1dc>)
   87154:	681b      	ldr	r3, [r3, #0]
   87156:	b2da      	uxtb	r2, r3
   87158:	4b62      	ldr	r3, [pc, #392]	; (872e4 <Cl_Dlsis_BypassOff+0x1cc>)
   8715a:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   8715c:	2101      	movs	r1, #1
   8715e:	2001      	movs	r0, #1
   87160:	4b65      	ldr	r3, [pc, #404]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87162:	4798      	blx	r3
   87164:	4603      	mov	r3, r0
   87166:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   87168:	2101      	movs	r1, #1
   8716a:	203d      	movs	r0, #61	; 0x3d
   8716c:	4b62      	ldr	r3, [pc, #392]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8716e:	4798      	blx	r3
   87170:	4603      	mov	r3, r0
   87172:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87174:	2101      	movs	r1, #1
   87176:	203e      	movs	r0, #62	; 0x3e
   87178:	4b5f      	ldr	r3, [pc, #380]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8717a:	4798      	blx	r3
   8717c:	4603      	mov	r3, r0
   8717e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   87180:	2101      	movs	r1, #1
   87182:	2005      	movs	r0, #5
   87184:	4b5c      	ldr	r3, [pc, #368]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87186:	4798      	blx	r3
   87188:	4603      	mov	r3, r0
   8718a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   8718c:	2101      	movs	r1, #1
   8718e:	2006      	movs	r0, #6
   87190:	4b59      	ldr	r3, [pc, #356]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87192:	4798      	blx	r3
   87194:	4603      	mov	r3, r0
   87196:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87198:	2100      	movs	r1, #0
   8719a:	2003      	movs	r0, #3
   8719c:	4b56      	ldr	r3, [pc, #344]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8719e:	4798      	blx	r3
   871a0:	4603      	mov	r3, r0
   871a2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   871a4:	2100      	movs	r1, #0
   871a6:	2004      	movs	r0, #4
   871a8:	4b53      	ldr	r3, [pc, #332]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871aa:	4798      	blx	r3
   871ac:	4603      	mov	r3, r0
   871ae:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   871b0:	2101      	movs	r1, #1
   871b2:	2007      	movs	r0, #7
   871b4:	4b50      	ldr	r3, [pc, #320]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871b6:	4798      	blx	r3
   871b8:	4603      	mov	r3, r0
   871ba:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   871bc:	2101      	movs	r1, #1
   871be:	2008      	movs	r0, #8
   871c0:	4b4d      	ldr	r3, [pc, #308]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871c2:	4798      	blx	r3
   871c4:	4603      	mov	r3, r0
   871c6:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   871c8:	2101      	movs	r1, #1
   871ca:	202a      	movs	r0, #42	; 0x2a
   871cc:	4b4a      	ldr	r3, [pc, #296]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871ce:	4798      	blx	r3
   871d0:	4603      	mov	r3, r0
   871d2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   871d4:	2101      	movs	r1, #1
   871d6:	202c      	movs	r0, #44	; 0x2c
   871d8:	4b47      	ldr	r3, [pc, #284]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871da:	4798      	blx	r3
   871dc:	4603      	mov	r3, r0
   871de:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   871e0:	2100      	movs	r1, #0
   871e2:	2029      	movs	r0, #41	; 0x29
   871e4:	4b44      	ldr	r3, [pc, #272]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871e6:	4798      	blx	r3
   871e8:	4603      	mov	r3, r0
   871ea:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   871ec:	2100      	movs	r1, #0
   871ee:	202b      	movs	r0, #43	; 0x2b
   871f0:	4b41      	ldr	r3, [pc, #260]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871f2:	4798      	blx	r3
   871f4:	4603      	mov	r3, r0
   871f6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   871f8:	2100      	movs	r1, #0
   871fa:	2021      	movs	r0, #33	; 0x21
   871fc:	4b3e      	ldr	r3, [pc, #248]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   871fe:	4798      	blx	r3
   87200:	4603      	mov	r3, r0
   87202:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   87204:	2101      	movs	r1, #1
   87206:	2013      	movs	r0, #19
   87208:	4b3b      	ldr	r3, [pc, #236]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8720a:	4798      	blx	r3
   8720c:	4603      	mov	r3, r0
   8720e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   87210:	2101      	movs	r1, #1
   87212:	2014      	movs	r0, #20
   87214:	4b38      	ldr	r3, [pc, #224]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87216:	4798      	blx	r3
   87218:	4603      	mov	r3, r0
   8721a:	71fb      	strb	r3, [r7, #7]
	  
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   8721c:	2101      	movs	r1, #1
   8721e:	2015      	movs	r0, #21
   87220:	4b35      	ldr	r3, [pc, #212]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87222:	4798      	blx	r3
   87224:	4603      	mov	r3, r0
   87226:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   87228:	2101      	movs	r1, #1
   8722a:	2016      	movs	r0, #22
   8722c:	4b32      	ldr	r3, [pc, #200]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8722e:	4798      	blx	r3
   87230:	4603      	mov	r3, r0
   87232:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   87234:	2101      	movs	r1, #1
   87236:	2017      	movs	r0, #23
   87238:	4b2f      	ldr	r3, [pc, #188]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8723a:	4798      	blx	r3
   8723c:	4603      	mov	r3, r0
   8723e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   87240:	2101      	movs	r1, #1
   87242:	2018      	movs	r0, #24
   87244:	4b2c      	ldr	r3, [pc, #176]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87246:	4798      	blx	r3
   87248:	4603      	mov	r3, r0
   8724a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   8724c:	2101      	movs	r1, #1
   8724e:	2027      	movs	r0, #39	; 0x27
   87250:	4b29      	ldr	r3, [pc, #164]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87252:	4798      	blx	r3
   87254:	4603      	mov	r3, r0
   87256:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   87258:	2101      	movs	r1, #1
   8725a:	2028      	movs	r0, #40	; 0x28
   8725c:	4b26      	ldr	r3, [pc, #152]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8725e:	4798      	blx	r3
   87260:	4603      	mov	r3, r0
   87262:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   87264:	2101      	movs	r1, #1
   87266:	203f      	movs	r0, #63	; 0x3f
   87268:	4b23      	ldr	r3, [pc, #140]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8726a:	4798      	blx	r3
   8726c:	4603      	mov	r3, r0
   8726e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,true );
   87270:	2101      	movs	r1, #1
   87272:	2041      	movs	r0, #65	; 0x41
   87274:	4b20      	ldr	r3, [pc, #128]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87276:	4798      	blx	r3
   87278:	4603      	mov	r3, r0
   8727a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,true );
   8727c:	2101      	movs	r1, #1
   8727e:	2042      	movs	r0, #66	; 0x42
   87280:	4b1d      	ldr	r3, [pc, #116]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   87282:	4798      	blx	r3
   87284:	4603      	mov	r3, r0
   87286:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BC_ALARM,true );
   87288:	2101      	movs	r1, #1
   8728a:	201a      	movs	r0, #26
   8728c:	4b1a      	ldr	r3, [pc, #104]	; (872f8 <Cl_Dlsis_BypassOff+0x1e0>)
   8728e:	4798      	blx	r3
   87290:	4603      	mov	r3, r0
   87292:	71fb      	strb	r3, [r7, #7]
	  
	  
	//Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
	cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;//CL_DLSIS_STATE_DIALYSIS;
   87294:	4b19      	ldr	r3, [pc, #100]	; (872fc <Cl_Dlsis_BypassOff+0x1e4>)
   87296:	2202      	movs	r2, #2
   87298:	701a      	strb	r2, [r3, #0]
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   8729a:	1dbb      	adds	r3, r7, #6
   8729c:	2200      	movs	r2, #0
   8729e:	4619      	mov	r1, r3
   872a0:	2042      	movs	r0, #66	; 0x42
   872a2:	4b17      	ldr	r3, [pc, #92]	; (87300 <Cl_Dlsis_BypassOff+0x1e8>)
   872a4:	4798      	blx	r3
   872a6:	4603      	mov	r3, r0
   872a8:	71fb      	strb	r3, [r7, #7]
	 cl_wait(20);
   872aa:	2014      	movs	r0, #20
   872ac:	4b15      	ldr	r3, [pc, #84]	; (87304 <Cl_Dlsis_BypassOff+0x1ec>)
   872ae:	4798      	blx	r3
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   872b0:	1dbb      	adds	r3, r7, #6
   872b2:	2200      	movs	r2, #0
   872b4:	4619      	mov	r1, r3
   872b6:	2043      	movs	r0, #67	; 0x43
   872b8:	4b11      	ldr	r3, [pc, #68]	; (87300 <Cl_Dlsis_BypassOff+0x1e8>)
   872ba:	4798      	blx	r3
   872bc:	4603      	mov	r3, r0
   872be:	71fb      	strb	r3, [r7, #7]
 		Cl_Dlsis_UpdateTimeInfo();
   872c0:	4b11      	ldr	r3, [pc, #68]	; (87308 <Cl_Dlsis_BypassOff+0x1f0>)
   872c2:	4798      	blx	r3
 	bypass_flag = 1;
   872c4:	4b11      	ldr	r3, [pc, #68]	; (8730c <Cl_Dlsis_BypassOff+0x1f4>)
   872c6:	2201      	movs	r2, #1
   872c8:	701a      	strb	r2, [r3, #0]
// 	
 	cl_uf_controller(CL_UF_EVENT_START,0);
   872ca:	2100      	movs	r1, #0
   872cc:	2002      	movs	r0, #2
   872ce:	4b10      	ldr	r3, [pc, #64]	; (87310 <Cl_Dlsis_BypassOff+0x1f8>)
   872d0:	4798      	blx	r3
// 	cl_ufpumpFeedback_start();
// 	
return CL_OK;
   872d2:	2300      	movs	r3, #0
}
   872d4:	4618      	mov	r0, r3
   872d6:	3708      	adds	r7, #8
   872d8:	46bd      	mov	sp, r7
   872da:	bd80      	pop	{r7, pc}
   872dc:	0009afa9 	.word	0x0009afa9
   872e0:	20071818 	.word	0x20071818
   872e4:	200720c0 	.word	0x200720c0
   872e8:	20071820 	.word	0x20071820
   872ec:	2007181c 	.word	0x2007181c
   872f0:	20071824 	.word	0x20071824
   872f4:	20071828 	.word	0x20071828
   872f8:	000829e5 	.word	0x000829e5
   872fc:	20071814 	.word	0x20071814
   87300:	0009cbd5 	.word	0x0009cbd5
   87304:	00093ea9 	.word	0x00093ea9
   87308:	00086845 	.word	0x00086845
   8730c:	20071832 	.word	0x20071832
   87310:	00096ea9 	.word	0x00096ea9

00087314 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   87314:	b580      	push	{r7, lr}
   87316:	b082      	sub	sp, #8
   87318:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8731a:	2300      	movs	r3, #0
   8731c:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   8731e:	4b0f      	ldr	r3, [pc, #60]	; (8735c <Cl_Dlsis_PauseDialysis+0x48>)
   87320:	781b      	ldrb	r3, [r3, #0]
   87322:	2b00      	cmp	r3, #0
   87324:	d015      	beq.n	87352 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   87326:	4b0d      	ldr	r3, [pc, #52]	; (8735c <Cl_Dlsis_PauseDialysis+0x48>)
   87328:	781b      	ldrb	r3, [r3, #0]
   8732a:	3b02      	subs	r3, #2
   8732c:	2b03      	cmp	r3, #3
   8732e:	d80f      	bhi.n	87350 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   87330:	4b0b      	ldr	r3, [pc, #44]	; (87360 <Cl_Dlsis_PauseDialysis+0x4c>)
   87332:	4798      	blx	r3
   87334:	4603      	mov	r3, r0
   87336:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   87338:	4b08      	ldr	r3, [pc, #32]	; (8735c <Cl_Dlsis_PauseDialysis+0x48>)
   8733a:	2207      	movs	r2, #7
   8733c:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   8733e:	1dbb      	adds	r3, r7, #6
   87340:	2200      	movs	r2, #0
   87342:	4619      	mov	r1, r3
   87344:	2040      	movs	r0, #64	; 0x40
   87346:	4b07      	ldr	r3, [pc, #28]	; (87364 <Cl_Dlsis_PauseDialysis+0x50>)
   87348:	4798      	blx	r3
   8734a:	4603      	mov	r3, r0
   8734c:	71fb      	strb	r3, [r7, #7]
			
			break;
   8734e:	e000      	b.n	87352 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   87350:	bf00      	nop
		}
return CL_OK;
   87352:	2300      	movs	r3, #0
	
}
   87354:	4618      	mov	r0, r3
   87356:	3708      	adds	r7, #8
   87358:	46bd      	mov	sp, r7
   8735a:	bd80      	pop	{r7, pc}
   8735c:	20071814 	.word	0x20071814
   87360:	0009af8d 	.word	0x0009af8d
   87364:	0009cbd5 	.word	0x0009cbd5

00087368 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   87368:	b580      	push	{r7, lr}
   8736a:	b082      	sub	sp, #8
   8736c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8736e:	2300      	movs	r3, #0
   87370:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87372:	2359      	movs	r3, #89	; 0x59
   87374:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   87376:	1d7b      	adds	r3, r7, #5
   87378:	4618      	mov	r0, r3
   8737a:	4b04      	ldr	r3, [pc, #16]	; (8738c <Cl_Dlsis_ProcessAlarms+0x24>)
   8737c:	4798      	blx	r3
   8737e:	4603      	mov	r3, r0
   87380:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   87382:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   87384:	4618      	mov	r0, r3
   87386:	3708      	adds	r7, #8
   87388:	46bd      	mov	sp, r7
   8738a:	bd80      	pop	{r7, pc}
   8738c:	00086949 	.word	0x00086949

00087390 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   87390:	b580      	push	{r7, lr}
   87392:	b082      	sub	sp, #8
   87394:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   87396:	2300      	movs	r3, #0
   87398:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   8739a:	2001      	movs	r0, #1
   8739c:	4b03      	ldr	r3, [pc, #12]	; (873ac <Cl_DlsisFillingFlowOff+0x1c>)
   8739e:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   873a0:	79fb      	ldrb	r3, [r7, #7]
	
}
   873a2:	4618      	mov	r0, r3
   873a4:	3708      	adds	r7, #8
   873a6:	46bd      	mov	sp, r7
   873a8:	bd80      	pop	{r7, pc}
   873aa:	bf00      	nop
   873ac:	0009ae01 	.word	0x0009ae01

000873b0 <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   873b0:	b580      	push	{r7, lr}
   873b2:	b082      	sub	sp, #8
   873b4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   873b6:	2300      	movs	r3, #0
   873b8:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   873ba:	2359      	movs	r3, #89	; 0x59
   873bc:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   873be:	4b7a      	ldr	r3, [pc, #488]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   873c0:	2200      	movs	r2, #0
   873c2:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   873c4:	4b78      	ldr	r3, [pc, #480]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   873c6:	2200      	movs	r2, #0
   873c8:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   873ca:	2005      	movs	r0, #5
   873cc:	4b77      	ldr	r3, [pc, #476]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   873ce:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   873d0:	2006      	movs	r0, #6
   873d2:	4b76      	ldr	r3, [pc, #472]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   873d4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   873d6:	4b74      	ldr	r3, [pc, #464]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   873d8:	2200      	movs	r2, #0
   873da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   873de:	2001      	movs	r0, #1
   873e0:	4b72      	ldr	r3, [pc, #456]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   873e2:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   873e4:	4b70      	ldr	r3, [pc, #448]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   873e6:	2200      	movs	r2, #0
   873e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   873ec:	4b6e      	ldr	r3, [pc, #440]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   873ee:	2200      	movs	r2, #0
   873f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   873f4:	2015      	movs	r0, #21
   873f6:	4b6d      	ldr	r3, [pc, #436]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   873f8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   873fa:	2016      	movs	r0, #22
   873fc:	4b6b      	ldr	r3, [pc, #428]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   873fe:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   87400:	4b69      	ldr	r3, [pc, #420]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87402:	2200      	movs	r2, #0
   87404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   87408:	4b67      	ldr	r3, [pc, #412]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8740a:	2200      	movs	r2, #0
   8740c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   87410:	2017      	movs	r0, #23
   87412:	4b66      	ldr	r3, [pc, #408]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87414:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   87416:	2018      	movs	r0, #24
   87418:	4b64      	ldr	r3, [pc, #400]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   8741a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   8741c:	4b62      	ldr	r3, [pc, #392]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8741e:	2200      	movs	r2, #0
   87420:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   87424:	4b60      	ldr	r3, [pc, #384]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87426:	2200      	movs	r2, #0
   87428:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   8742c:	2027      	movs	r0, #39	; 0x27
   8742e:	4b5f      	ldr	r3, [pc, #380]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87430:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   87432:	2028      	movs	r0, #40	; 0x28
   87434:	4b5d      	ldr	r3, [pc, #372]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87436:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   87438:	4b5b      	ldr	r3, [pc, #364]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8743a:	2200      	movs	r2, #0
   8743c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   87440:	2021      	movs	r0, #33	; 0x21
   87442:	4b5a      	ldr	r3, [pc, #360]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87444:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   87446:	4b58      	ldr	r3, [pc, #352]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87448:	2200      	movs	r2, #0
   8744a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   8744e:	2020      	movs	r0, #32
   87450:	4b56      	ldr	r3, [pc, #344]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87452:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   87454:	4b54      	ldr	r3, [pc, #336]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87456:	2200      	movs	r2, #0
   87458:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   8745c:	2022      	movs	r0, #34	; 0x22
   8745e:	4b53      	ldr	r3, [pc, #332]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87460:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   87462:	4b51      	ldr	r3, [pc, #324]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87464:	2200      	movs	r2, #0
   87466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   8746a:	4b4f      	ldr	r3, [pc, #316]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8746c:	2200      	movs	r2, #0
   8746e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   87472:	2024      	movs	r0, #36	; 0x24
   87474:	4b4d      	ldr	r3, [pc, #308]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87476:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   87478:	2023      	movs	r0, #35	; 0x23
   8747a:	4b4c      	ldr	r3, [pc, #304]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   8747c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   8747e:	4b4a      	ldr	r3, [pc, #296]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87480:	2200      	movs	r2, #0
   87482:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   87486:	4b48      	ldr	r3, [pc, #288]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87488:	2200      	movs	r2, #0
   8748a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   8748e:	2026      	movs	r0, #38	; 0x26
   87490:	4b46      	ldr	r3, [pc, #280]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87492:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   87494:	2025      	movs	r0, #37	; 0x25
   87496:	4b45      	ldr	r3, [pc, #276]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87498:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   8749a:	4b43      	ldr	r3, [pc, #268]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8749c:	2200      	movs	r2, #0
   8749e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   874a2:	4b41      	ldr	r3, [pc, #260]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874a4:	2200      	movs	r2, #0
   874a6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   874aa:	2007      	movs	r0, #7
   874ac:	4b3f      	ldr	r3, [pc, #252]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   874ae:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   874b0:	2008      	movs	r0, #8
   874b2:	4b3e      	ldr	r3, [pc, #248]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   874b4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   874b6:	4b3c      	ldr	r3, [pc, #240]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874b8:	2200      	movs	r2, #0
   874ba:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   874be:	4b3a      	ldr	r3, [pc, #232]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874c0:	2200      	movs	r2, #0
   874c2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   874c6:	2013      	movs	r0, #19
   874c8:	4b38      	ldr	r3, [pc, #224]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   874ca:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   874cc:	2014      	movs	r0, #20
   874ce:	4b37      	ldr	r3, [pc, #220]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   874d0:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   874d2:	4b35      	ldr	r3, [pc, #212]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874d4:	2200      	movs	r2, #0
   874d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   874da:	4b33      	ldr	r3, [pc, #204]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874dc:	2200      	movs	r2, #0
   874de:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   874e2:	2011      	movs	r0, #17
   874e4:	4b31      	ldr	r3, [pc, #196]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   874e6:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   874e8:	2012      	movs	r0, #18
   874ea:	4b30      	ldr	r3, [pc, #192]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   874ec:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   874ee:	4b2e      	ldr	r3, [pc, #184]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874f0:	2200      	movs	r2, #0
   874f2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   874f6:	4b2c      	ldr	r3, [pc, #176]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   874f8:	2200      	movs	r2, #0
   874fa:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   874fe:	200f      	movs	r0, #15
   87500:	4b2a      	ldr	r3, [pc, #168]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87502:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   87504:	2010      	movs	r0, #16
   87506:	4b29      	ldr	r3, [pc, #164]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87508:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BP_STOPPED].IsRaised = false;
   8750a:	4b27      	ldr	r3, [pc, #156]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8750c:	2200      	movs	r2, #0
   8750e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(BP_STOPPED);
   87512:	203f      	movs	r0, #63	; 0x3f
   87514:	4b25      	ldr	r3, [pc, #148]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87516:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_POWER_FAILURE].IsRaised = false;
   87518:	4b23      	ldr	r3, [pc, #140]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8751a:	2200      	movs	r2, #0
   8751c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	Cl_AlarmResetAlarm(POWER_FAILURE);
   87520:	201d      	movs	r0, #29
   87522:	4b22      	ldr	r3, [pc, #136]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87524:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_ACID_IN].IsRaised = false;
   87526:	4b20      	ldr	r3, [pc, #128]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87528:	2200      	movs	r2, #0
   8752a:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   8752c:	202a      	movs	r0, #42	; 0x2a
   8752e:	4b1f      	ldr	r3, [pc, #124]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87530:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BICAR_IN].IsRaised = false;
   87532:	4b1d      	ldr	r3, [pc, #116]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87534:	2200      	movs	r2, #0
   87536:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   87538:	202c      	movs	r0, #44	; 0x2c
   8753a:	4b1c      	ldr	r3, [pc, #112]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   8753c:	4798      	blx	r3
	
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TMP_HIGH].IsRaised = false;
   8753e:	4b1a      	ldr	r3, [pc, #104]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87540:	2200      	movs	r2, #0
   87542:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	Cl_AlarmResetAlarm(TMP_HIGH);
   87546:	2041      	movs	r0, #65	; 0x41
   87548:	4b18      	ldr	r3, [pc, #96]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   8754a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TMP_LOW].IsRaised = false;
   8754c:	4b16      	ldr	r3, [pc, #88]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8754e:	2200      	movs	r2, #0
   87550:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	Cl_AlarmResetAlarm(TMP_LOW);
   87554:	2042      	movs	r0, #66	; 0x42
   87556:	4b15      	ldr	r3, [pc, #84]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87558:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BCALARM].IsRaised = false;
   8755a:	4b13      	ldr	r3, [pc, #76]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8755c:	2200      	movs	r2, #0
   8755e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	Cl_AlarmResetAlarm(BC_ALARM);
   87562:	201a      	movs	r0, #26
   87564:	4b11      	ldr	r3, [pc, #68]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87566:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_BLOODNOTDETECTED].IsRaised = false;
   87568:	4b0f      	ldr	r3, [pc, #60]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8756a:	2200      	movs	r2, #0
   8756c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
	Cl_AlarmResetAlarm(BLOOD_NOT_DETECTED);
   87570:	2040      	movs	r0, #64	; 0x40
   87572:	4b0e      	ldr	r3, [pc, #56]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87574:	4798      	blx	r3
// 	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
// //	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
// 	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
// 	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
//	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_FLOW_NO_FLOW].IsRaised = false;
   87576:	4b0c      	ldr	r3, [pc, #48]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87578:	2200      	movs	r2, #0
   8757a:	77da      	strb	r2, [r3, #31]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   8757c:	4b0a      	ldr	r3, [pc, #40]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   8757e:	2200      	movs	r2, #0
   87580:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   87584:	4b08      	ldr	r3, [pc, #32]	; (875a8 <Cl_Dlsis_ResetAlertsforReassertion+0x1f8>)
   87586:	2200      	movs	r2, #0
   87588:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   8758c:	200c      	movs	r0, #12
   8758e:	4b07      	ldr	r3, [pc, #28]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87590:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_HIGH_FLOWRATE);
   87592:	200e      	movs	r0, #14
   87594:	4b05      	ldr	r3, [pc, #20]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   87596:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   87598:	200d      	movs	r0, #13
   8759a:	4b04      	ldr	r3, [pc, #16]	; (875ac <Cl_Dlsis_ResetAlertsforReassertion+0x1fc>)
   8759c:	4798      	blx	r3
	
	
	
	return (Cl_dlsisretcode);
   8759e:	79fb      	ldrb	r3, [r7, #7]
}
   875a0:	4618      	mov	r0, r3
   875a2:	3708      	adds	r7, #8
   875a4:	46bd      	mov	sp, r7
   875a6:	bd80      	pop	{r7, pc}
   875a8:	200703c4 	.word	0x200703c4
   875ac:	00082ad9 	.word	0x00082ad9

000875b0 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   875b0:	b580      	push	{r7, lr}
   875b2:	b094      	sub	sp, #80	; 0x50
   875b4:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   875b6:	f107 031c 	add.w	r3, r7, #28
   875ba:	222c      	movs	r2, #44	; 0x2c
   875bc:	2100      	movs	r1, #0
   875be:	4618      	mov	r0, r3
   875c0:	4bcf      	ldr	r3, [pc, #828]	; (87900 <Cl_Dlsis_SenddlsisData+0x350>)
   875c2:	4798      	blx	r3
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0 ,apt=0,vpt=0, temp2ui = 0 , ps1ui = 0 , ps2ui = 0 , ps1tmp = 0 , ps2tmp = 0;
   875c4:	2300      	movs	r3, #0
   875c6:	827b      	strh	r3, [r7, #18]
   875c8:	2300      	movs	r3, #0
   875ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   875ce:	2300      	movs	r3, #0
   875d0:	823b      	strh	r3, [r7, #16]
   875d2:	2300      	movs	r3, #0
   875d4:	81fb      	strh	r3, [r7, #14]
   875d6:	2300      	movs	r3, #0
   875d8:	81bb      	strh	r3, [r7, #12]
   875da:	2300      	movs	r3, #0
   875dc:	817b      	strh	r3, [r7, #10]
   875de:	2300      	movs	r3, #0
   875e0:	813b      	strh	r3, [r7, #8]
   875e2:	2300      	movs	r3, #0
   875e4:	80fb      	strh	r3, [r7, #6]
   875e6:	2300      	movs	r3, #0
   875e8:	80bb      	strh	r3, [r7, #4]
	static float avgtmp3=0,ps1=0,ps2=0 , ts2 = 0  ;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   875ea:	2300      	movs	r3, #0
   875ec:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	Cl_Uint8Type count = 0;
   875f0:	2300      	movs	r3, #0
   875f2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   875f6:	2359      	movs	r3, #89	; 0x59
   875f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   875fc:	232a      	movs	r3, #42	; 0x2a
   875fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	systemdataarray[0] = DIALYSIS_DATA;
   87602:	2305      	movs	r3, #5
   87604:	773b      	strb	r3, [r7, #28]
	count++;
   87606:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8760a:	3301      	adds	r3, #1
   8760c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	averaging_count++;
   87610:	4bbc      	ldr	r3, [pc, #752]	; (87904 <Cl_Dlsis_SenddlsisData+0x354>)
   87612:	781b      	ldrb	r3, [r3, #0]
   87614:	3301      	adds	r3, #1
   87616:	b2da      	uxtb	r2, r3
   87618:	4bba      	ldr	r3, [pc, #744]	; (87904 <Cl_Dlsis_SenddlsisData+0x354>)
   8761a:	701a      	strb	r2, [r3, #0]
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   8761c:	f107 0312 	add.w	r3, r7, #18
   87620:	4619      	mov	r1, r3
   87622:	2014      	movs	r0, #20
   87624:	4bb8      	ldr	r3, [pc, #736]	; (87908 <Cl_Dlsis_SenddlsisData+0x358>)
   87626:	4798      	blx	r3
// 							res_temp_lookuptable(cal_data);
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// 							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 3.1+1.4;                                  // removed offset on 02.07.17
// 							temp1 = temp1 - 0.4;                                  // removed offset on 02.07.17
							temp1 = (float)temp/10;
   87628:	8a7a      	ldrh	r2, [r7, #18]
   8762a:	4bb8      	ldr	r3, [pc, #736]	; (8790c <Cl_Dlsis_SenddlsisData+0x35c>)
   8762c:	4610      	mov	r0, r2
   8762e:	4798      	blx	r3
   87630:	4602      	mov	r2, r0
   87632:	4bb7      	ldr	r3, [pc, #732]	; (87910 <Cl_Dlsis_SenddlsisData+0x360>)
   87634:	49b7      	ldr	r1, [pc, #732]	; (87914 <Cl_Dlsis_SenddlsisData+0x364>)
   87636:	4610      	mov	r0, r2
   87638:	4798      	blx	r3
   8763a:	4603      	mov	r3, r0
   8763c:	461a      	mov	r2, r3
   8763e:	4bb6      	ldr	r3, [pc, #728]	; (87918 <Cl_Dlsis_SenddlsisData+0x368>)
   87640:	4610      	mov	r0, r2
   87642:	4798      	blx	r3
   87644:	4603      	mov	r3, r0
   87646:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
						//	avgtmp3 =(avgtmp3*5 + temp1)/6;           // manav03 commented
							
		}
		
		uint16_t sensordata = 0;
   8764a:	2300      	movs	r3, #0
   8764c:	807b      	strh	r3, [r7, #2]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   8764e:	1cbb      	adds	r3, r7, #2
   87650:	4619      	mov	r1, r3
   87652:	2007      	movs	r0, #7
   87654:	4bac      	ldr	r3, [pc, #688]	; (87908 <Cl_Dlsis_SenddlsisData+0x358>)
   87656:	4798      	blx	r3
		{
			
			
					tempdata.word = sensordata/100;
   87658:	887b      	ldrh	r3, [r7, #2]
   8765a:	4ab0      	ldr	r2, [pc, #704]	; (8791c <Cl_Dlsis_SenddlsisData+0x36c>)
   8765c:	fba2 2303 	umull	r2, r3, r2, r3
   87660:	095b      	lsrs	r3, r3, #5
   87662:	b29b      	uxth	r3, r3
   87664:	617b      	str	r3, [r7, #20]
					systemdataarray[count++] = tempdata.bytearray[0];
   87666:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8766a:	1c5a      	adds	r2, r3, #1
   8766c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87670:	7d3a      	ldrb	r2, [r7, #20]
   87672:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87676:	440b      	add	r3, r1
   87678:	f803 2c34 	strb.w	r2, [r3, #-52]
					systemdataarray[count++] = tempdata.bytearray[1];
   8767c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87680:	1c5a      	adds	r2, r3, #1
   87682:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87686:	7d7a      	ldrb	r2, [r7, #21]
   87688:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8768c:	440b      	add	r3, r1
   8768e:	f803 2c34 	strb.w	r2, [r3, #-52]
					systemdataarray[count++] = tempdata.bytearray[2];
   87692:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87696:	1c5a      	adds	r2, r3, #1
   87698:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8769c:	7dba      	ldrb	r2, [r7, #22]
   8769e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876a2:	440b      	add	r3, r1
   876a4:	f803 2c34 	strb.w	r2, [r3, #-52]
					systemdataarray[count++] = tempdata.bytearray[3];
   876a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   876ac:	1c5a      	adds	r2, r3, #1
   876ae:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   876b2:	7dfa      	ldrb	r2, [r7, #23]
   876b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876b8:	440b      	add	r3, r1
   876ba:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		{

			tempdata.word = (temp1);  // manav03 changed avgtemp3
   876be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   876c2:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0];
   876c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   876c8:	1c5a      	adds	r2, r3, #1
   876ca:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   876ce:	7d3a      	ldrb	r2, [r7, #20]
   876d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876d4:	440b      	add	r3, r1
   876d6:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1];
   876da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   876de:	1c5a      	adds	r2, r3, #1
   876e0:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   876e4:	7d7a      	ldrb	r2, [r7, #21]
   876e6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   876ea:	440b      	add	r3, r1
   876ec:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2];
   876f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   876f4:	1c5a      	adds	r2, r3, #1
   876f6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   876fa:	7dba      	ldrb	r2, [r7, #22]
   876fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87700:	440b      	add	r3, r1
   87702:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3];
   87706:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8770a:	1c5a      	adds	r2, r3, #1
   8770c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87710:	7dfa      	ldrb	r2, [r7, #23]
   87712:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87716:	440b      	add	r3, r1
   87718:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&apt); // manav03 changed from  tempdata.Twobyte to apt
   8771c:	f107 0310 	add.w	r3, r7, #16
   87720:	4619      	mov	r1, r3
   87722:	200b      	movs	r0, #11
   87724:	4b78      	ldr	r3, [pc, #480]	; (87908 <Cl_Dlsis_SenddlsisData+0x358>)
   87726:	4798      	blx	r3
		{
			
			
			tempdata.word	= apt;
   87728:	8a3b      	ldrh	r3, [r7, #16]
   8772a:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   8772c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87730:	1c5a      	adds	r2, r3, #1
   87732:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87736:	7d3a      	ldrb	r2, [r7, #20]
   87738:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8773c:	440b      	add	r3, r1
   8773e:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87742:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87746:	1c5a      	adds	r2, r3, #1
   87748:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8774c:	7d7a      	ldrb	r2, [r7, #21]
   8774e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87752:	440b      	add	r3, r1
   87754:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87758:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8775c:	1c5a      	adds	r2, r3, #1
   8775e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87762:	7dba      	ldrb	r2, [r7, #22]
   87764:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87768:	440b      	add	r3, r1
   8776a:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   8776e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87772:	1c5a      	adds	r2, r3, #1
   87774:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87778:	7dfa      	ldrb	r2, [r7, #23]
   8777a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8777e:	440b      	add	r3, r1
   87780:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&vpt);   // manav03 changed from  tempdata.Twobyte to vpt
   87784:	f107 030e 	add.w	r3, r7, #14
   87788:	4619      	mov	r1, r3
   8778a:	200c      	movs	r0, #12
   8778c:	4b5e      	ldr	r3, [pc, #376]	; (87908 <Cl_Dlsis_SenddlsisData+0x358>)
   8778e:	4798      	blx	r3
		{
			
			tempdata.word	 = vpt;
   87790:	89fb      	ldrh	r3, [r7, #14]
   87792:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87794:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87798:	1c5a      	adds	r2, r3, #1
   8779a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8779e:	7d3a      	ldrb	r2, [r7, #20]
   877a0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877a4:	440b      	add	r3, r1
   877a6:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   877aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877ae:	1c5a      	adds	r2, r3, #1
   877b0:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877b4:	7d7a      	ldrb	r2, [r7, #21]
   877b6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877ba:	440b      	add	r3, r1
   877bc:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   877c0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877c4:	1c5a      	adds	r2, r3, #1
   877c6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877ca:	7dba      	ldrb	r2, [r7, #22]
   877cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877d0:	440b      	add	r3, r1
   877d2:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   877d6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   877da:	1c5a      	adds	r2, r3, #1
   877dc:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   877e0:	7dfa      	ldrb	r2, [r7, #23]
   877e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   877e6:	440b      	add	r3, r1
   877e8:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&ps1tmp);
   877ec:	1dbb      	adds	r3, r7, #6
   877ee:	4619      	mov	r1, r3
   877f0:	200e      	movs	r0, #14
   877f2:	4b45      	ldr	r3, [pc, #276]	; (87908 <Cl_Dlsis_SenddlsisData+0x358>)
   877f4:	4798      	blx	r3
// 			ps1 = (float)tempdata.Twobyte;
// 			
// 			ps1 = (0.091009 * ps1) + 491.794;
// 			ps1=(ps1*5 + pressure_final_ps1)/6;
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&ps2tmp);
   877f6:	1d3b      	adds	r3, r7, #4
   877f8:	4619      	mov	r1, r3
   877fa:	200f      	movs	r0, #15
   877fc:	4b42      	ldr	r3, [pc, #264]	; (87908 <Cl_Dlsis_SenddlsisData+0x358>)
   877fe:	4798      	blx	r3
// 			ps2 = (float)tempdata.Twobyte;
// 			
// 			ps2 = (0.091009 * ps2) + 491.794;
// 			ps2=(ps2*5 + pressure_final_ps2)/6;
			
			tempdata.word	 = (((apt + vpt) - (ps1tmp+ps2tmp))/2)-25;
   87800:	8a3b      	ldrh	r3, [r7, #16]
   87802:	461a      	mov	r2, r3
   87804:	89fb      	ldrh	r3, [r7, #14]
   87806:	441a      	add	r2, r3
   87808:	88fb      	ldrh	r3, [r7, #6]
   8780a:	4619      	mov	r1, r3
   8780c:	88bb      	ldrh	r3, [r7, #4]
   8780e:	440b      	add	r3, r1
   87810:	1ad3      	subs	r3, r2, r3
   87812:	0fda      	lsrs	r2, r3, #31
   87814:	4413      	add	r3, r2
   87816:	105b      	asrs	r3, r3, #1
   87818:	3b19      	subs	r3, #25
   8781a:	617b      	str	r3, [r7, #20]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   8781c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87820:	1c5a      	adds	r2, r3, #1
   87822:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87826:	7d3a      	ldrb	r2, [r7, #20]
   87828:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8782c:	440b      	add	r3, r1
   8782e:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87832:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87836:	1c5a      	adds	r2, r3, #1
   87838:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8783c:	7d7a      	ldrb	r2, [r7, #21]
   8783e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87842:	440b      	add	r3, r1
   87844:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87848:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8784c:	1c5a      	adds	r2, r3, #1
   8784e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87852:	7dba      	ldrb	r2, [r7, #22]
   87854:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87858:	440b      	add	r3, r1
   8785a:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   8785e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87862:	1c5a      	adds	r2, r3, #1
   87864:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87868:	7dfa      	ldrb	r2, [r7, #23]
   8786a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8786e:	440b      	add	r3, r1
   87870:	f803 2c34 	strb.w	r2, [r3, #-52]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
 			tempdata.word = ufRemoved ;
   87874:	4b2a      	ldr	r3, [pc, #168]	; (87920 <Cl_Dlsis_SenddlsisData+0x370>)
   87876:	681a      	ldr	r2, [r3, #0]
   87878:	4b27      	ldr	r3, [pc, #156]	; (87918 <Cl_Dlsis_SenddlsisData+0x368>)
   8787a:	4610      	mov	r0, r2
   8787c:	4798      	blx	r3
   8787e:	4603      	mov	r3, r0
   87880:	617b      	str	r3, [r7, #20]
 			
 			systemdataarray[count++] = tempdata.bytearray[0] ;
   87882:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87886:	1c5a      	adds	r2, r3, #1
   87888:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8788c:	7d3a      	ldrb	r2, [r7, #20]
   8788e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87892:	440b      	add	r3, r1
   87894:	f803 2c34 	strb.w	r2, [r3, #-52]
 			systemdataarray[count++] = tempdata.bytearray[1] ;
   87898:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8789c:	1c5a      	adds	r2, r3, #1
   8789e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878a2:	7d7a      	ldrb	r2, [r7, #21]
   878a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878a8:	440b      	add	r3, r1
   878aa:	f803 2c34 	strb.w	r2, [r3, #-52]
 			systemdataarray[count++] = tempdata.bytearray[2] ;
   878ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878b2:	1c5a      	adds	r2, r3, #1
   878b4:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878b8:	7dba      	ldrb	r2, [r7, #22]
   878ba:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878be:	440b      	add	r3, r1
   878c0:	f803 2c34 	strb.w	r2, [r3, #-52]
 			systemdataarray[count++] = tempdata.bytearray[3] ;
   878c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878c8:	1c5a      	adds	r2, r3, #1
   878ca:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878ce:	7dfa      	ldrb	r2, [r7, #23]
   878d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   878d4:	440b      	add	r3, r1
   878d6:	f803 2c34 	strb.w	r2, [r3, #-52]
 			
			tempdata.word = (float)Treatdata[ID_ufrate] ;
   878da:	4b12      	ldr	r3, [pc, #72]	; (87924 <Cl_Dlsis_SenddlsisData+0x374>)
   878dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   878de:	4b0b      	ldr	r3, [pc, #44]	; (8790c <Cl_Dlsis_SenddlsisData+0x35c>)
   878e0:	4610      	mov	r0, r2
   878e2:	4798      	blx	r3
   878e4:	4602      	mov	r2, r0
   878e6:	4b0c      	ldr	r3, [pc, #48]	; (87918 <Cl_Dlsis_SenddlsisData+0x368>)
   878e8:	4610      	mov	r0, r2
   878ea:	4798      	blx	r3
   878ec:	4603      	mov	r3, r0
   878ee:	617b      	str	r3, [r7, #20]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   878f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   878f4:	1c5a      	adds	r2, r3, #1
   878f6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   878fa:	7d3a      	ldrb	r2, [r7, #20]
   878fc:	e014      	b.n	87928 <Cl_Dlsis_SenddlsisData+0x378>
   878fe:	bf00      	nop
   87900:	000a84fd 	.word	0x000a84fd
   87904:	2007185c 	.word	0x2007185c
   87908:	0008fa01 	.word	0x0008fa01
   8790c:	000a7ef9 	.word	0x000a7ef9
   87910:	000a8111 	.word	0x000a8111
   87914:	41200000 	.word	0x41200000
   87918:	000a8381 	.word	0x000a8381
   8791c:	51eb851f 	.word	0x51eb851f
   87920:	20071a1c 	.word	0x20071a1c
   87924:	20072614 	.word	0x20072614
   87928:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8792c:	440b      	add	r3, r1
   8792e:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87932:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87936:	1c5a      	adds	r2, r3, #1
   87938:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8793c:	7d7a      	ldrb	r2, [r7, #21]
   8793e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87942:	440b      	add	r3, r1
   87944:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87948:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8794c:	1c5a      	adds	r2, r3, #1
   8794e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87952:	7dba      	ldrb	r2, [r7, #22]
   87954:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87958:	440b      	add	r3, r1
   8795a:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   8795e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87962:	1c5a      	adds	r2, r3, #1
   87964:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87968:	7dfa      	ldrb	r2, [r7, #23]
   8796a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   8796e:	440b      	add	r3, r1
   87970:	f803 2c34 	strb.w	r2, [r3, #-52]
			
			// manav02 added pressure and ts2 values for ui
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&ps1ui); // manav03 changed the variable
   87974:	f107 030a 	add.w	r3, r7, #10
   87978:	4619      	mov	r1, r3
   8797a:	200e      	movs	r0, #14
   8797c:	4b56      	ldr	r3, [pc, #344]	; (87ad8 <Cl_Dlsis_SenddlsisData+0x528>)
   8797e:	4798      	blx	r3
			{
				
				tempdata.word = ps1ui ;
   87980:	897b      	ldrh	r3, [r7, #10]
   87982:	617b      	str	r3, [r7, #20]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   87984:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87988:	1c5a      	adds	r2, r3, #1
   8798a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   8798e:	7d3a      	ldrb	r2, [r7, #20]
   87990:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87994:	440b      	add	r3, r1
   87996:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   8799a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   8799e:	1c5a      	adds	r2, r3, #1
   879a0:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   879a4:	7d7a      	ldrb	r2, [r7, #21]
   879a6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   879aa:	440b      	add	r3, r1
   879ac:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   879b0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   879b4:	1c5a      	adds	r2, r3, #1
   879b6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   879ba:	7dba      	ldrb	r2, [r7, #22]
   879bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
   879c0:	440b      	add	r3, r1
   879c2:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   879c6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   879ca:	1c5a      	adds	r2, r3, #1
   879cc:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   879d0:	7dfa      	ldrb	r2, [r7, #23]
   879d2:	f107 0150 	add.w	r1, r7, #80	; 0x50
   879d6:	440b      	add	r3, r1
   879d8:	f803 2c34 	strb.w	r2, [r3, #-52]
			}
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&ps2ui);     // manav03 changed from ps1 to ps2
   879dc:	f107 0308 	add.w	r3, r7, #8
   879e0:	4619      	mov	r1, r3
   879e2:	200f      	movs	r0, #15
   879e4:	4b3c      	ldr	r3, [pc, #240]	; (87ad8 <Cl_Dlsis_SenddlsisData+0x528>)
   879e6:	4798      	blx	r3
			{
				
				tempdata.word = ps2ui ;
   879e8:	893b      	ldrh	r3, [r7, #8]
   879ea:	617b      	str	r3, [r7, #20]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   879ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   879f0:	1c5a      	adds	r2, r3, #1
   879f2:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   879f6:	7d3a      	ldrb	r2, [r7, #20]
   879f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   879fc:	440b      	add	r3, r1
   879fe:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   87a02:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a06:	1c5a      	adds	r2, r3, #1
   87a08:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a0c:	7d7a      	ldrb	r2, [r7, #21]
   87a0e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a12:	440b      	add	r3, r1
   87a14:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87a18:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a1c:	1c5a      	adds	r2, r3, #1
   87a1e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a22:	7dba      	ldrb	r2, [r7, #22]
   87a24:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a28:	440b      	add	r3, r1
   87a2a:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   87a2e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a32:	1c5a      	adds	r2, r3, #1
   87a34:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a38:	7dfa      	ldrb	r2, [r7, #23]
   87a3a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a3e:	440b      	add	r3, r1
   87a40:	f803 2c34 	strb.w	r2, [r3, #-52]
			}
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2ui);    // manav02 ts2 changed to temp2ui
   87a44:	f107 030c 	add.w	r3, r7, #12
   87a48:	4619      	mov	r1, r3
   87a4a:	2013      	movs	r0, #19
   87a4c:	4b22      	ldr	r3, [pc, #136]	; (87ad8 <Cl_Dlsis_SenddlsisData+0x528>)
   87a4e:	4798      	blx	r3
			{
				
				tempdata.word = temp2ui/10 ; 
   87a50:	89bb      	ldrh	r3, [r7, #12]
   87a52:	4a22      	ldr	r2, [pc, #136]	; (87adc <Cl_Dlsis_SenddlsisData+0x52c>)
   87a54:	fba2 2303 	umull	r2, r3, r2, r3
   87a58:	08db      	lsrs	r3, r3, #3
   87a5a:	b29b      	uxth	r3, r3
   87a5c:	617b      	str	r3, [r7, #20]
				systemdataarray[count++] = tempdata.bytearray[0] ;
   87a5e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a62:	1c5a      	adds	r2, r3, #1
   87a64:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a68:	7d3a      	ldrb	r2, [r7, #20]
   87a6a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a6e:	440b      	add	r3, r1
   87a70:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[1] ;
   87a74:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a78:	1c5a      	adds	r2, r3, #1
   87a7a:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a7e:	7d7a      	ldrb	r2, [r7, #21]
   87a80:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a84:	440b      	add	r3, r1
   87a86:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[2] ;
   87a8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87a8e:	1c5a      	adds	r2, r3, #1
   87a90:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87a94:	7dba      	ldrb	r2, [r7, #22]
   87a96:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87a9a:	440b      	add	r3, r1
   87a9c:	f803 2c34 	strb.w	r2, [r3, #-52]
				systemdataarray[count++] = tempdata.bytearray[3] ;
   87aa0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
   87aa4:	1c5a      	adds	r2, r3, #1
   87aa6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
   87aaa:	7dfa      	ldrb	r2, [r7, #23]
   87aac:	f107 0150 	add.w	r1, r7, #80	; 0x50
   87ab0:	440b      	add	r3, r1
   87ab2:	f803 2c34 	strb.w	r2, [r3, #-52]
			}
			
			
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   87ab6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   87aba:	f107 031c 	add.w	r3, r7, #28
   87abe:	4619      	mov	r1, r3
   87ac0:	202a      	movs	r0, #42	; 0x2a
   87ac2:	4b07      	ldr	r3, [pc, #28]	; (87ae0 <Cl_Dlsis_SenddlsisData+0x530>)
   87ac4:	4798      	blx	r3
   87ac6:	4603      	mov	r3, r0
   87ac8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   87acc:	2300      	movs	r3, #0
}
   87ace:	4618      	mov	r0, r3
   87ad0:	3750      	adds	r7, #80	; 0x50
   87ad2:	46bd      	mov	sp, r7
   87ad4:	bd80      	pop	{r7, pc}
   87ad6:	bf00      	nop
   87ad8:	0008fa01 	.word	0x0008fa01
   87adc:	cccccccd 	.word	0xcccccccd
   87ae0:	0009cbd5 	.word	0x0009cbd5

00087ae4 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   87ae4:	b580      	push	{r7, lr}
   87ae6:	b082      	sub	sp, #8
   87ae8:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   87aea:	4b1b      	ldr	r3, [pc, #108]	; (87b58 <Cl_Dlsis_StartDialysis+0x74>)
   87aec:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87aee:	2300      	movs	r3, #0
   87af0:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87af2:	2359      	movs	r3, #89	; 0x59
   87af4:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   87af6:	2300      	movs	r3, #0
   87af8:	717b      	strb	r3, [r7, #5]
	
	ufRemoved = 0;
   87afa:	4b18      	ldr	r3, [pc, #96]	; (87b5c <Cl_Dlsis_StartDialysis+0x78>)
   87afc:	f04f 0200 	mov.w	r2, #0
   87b00:	601a      	str	r2, [r3, #0]
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   87b02:	4b17      	ldr	r3, [pc, #92]	; (87b60 <Cl_Dlsis_StartDialysis+0x7c>)
   87b04:	2200      	movs	r2, #0
   87b06:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   87b08:	4b15      	ldr	r3, [pc, #84]	; (87b60 <Cl_Dlsis_StartDialysis+0x7c>)
   87b0a:	2200      	movs	r2, #0
   87b0c:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   87b0e:	4b15      	ldr	r3, [pc, #84]	; (87b64 <Cl_Dlsis_StartDialysis+0x80>)
   87b10:	2200      	movs	r2, #0
   87b12:	701a      	strb	r2, [r3, #0]
	
		command = CON_TX_COMMAND_DLSIS_CNFRM;
   87b14:	2312      	movs	r3, #18
   87b16:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87b18:	2301      	movs	r3, #1
   87b1a:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87b1c:	1d79      	adds	r1, r7, #5
   87b1e:	79bb      	ldrb	r3, [r7, #6]
   87b20:	2201      	movs	r2, #1
   87b22:	4618      	mov	r0, r3
   87b24:	4b10      	ldr	r3, [pc, #64]	; (87b68 <Cl_Dlsis_StartDialysis+0x84>)
   87b26:	4798      	blx	r3
   87b28:	4603      	mov	r3, r0
   87b2a:	71fb      	strb	r3, [r7, #7]
		
		cl_wait(20); // manav03 added
   87b2c:	2014      	movs	r0, #20
   87b2e:	4b0f      	ldr	r3, [pc, #60]	; (87b6c <Cl_Dlsis_StartDialysis+0x88>)
   87b30:	4798      	blx	r3
		command = CON_TX_COMMAND_DLSIS_STARTED;
   87b32:	2313      	movs	r3, #19
   87b34:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87b36:	2301      	movs	r3, #1
   87b38:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87b3a:	1d79      	adds	r1, r7, #5
   87b3c:	79bb      	ldrb	r3, [r7, #6]
   87b3e:	2201      	movs	r2, #1
   87b40:	4618      	mov	r0, r3
   87b42:	4b09      	ldr	r3, [pc, #36]	; (87b68 <Cl_Dlsis_StartDialysis+0x84>)
   87b44:	4798      	blx	r3
   87b46:	4603      	mov	r3, r0
   87b48:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   87b4a:	4b09      	ldr	r3, [pc, #36]	; (87b70 <Cl_Dlsis_StartDialysis+0x8c>)
   87b4c:	4798      	blx	r3
	
	return 0;
   87b4e:	2300      	movs	r3, #0

}
   87b50:	4618      	mov	r0, r3
   87b52:	3708      	adds	r7, #8
   87b54:	46bd      	mov	sp, r7
   87b56:	bd80      	pop	{r7, pc}
   87b58:	0009b0a5 	.word	0x0009b0a5
   87b5c:	20071a1c 	.word	0x20071a1c
   87b60:	200720c0 	.word	0x200720c0
   87b64:	2007182c 	.word	0x2007182c
   87b68:	0009cbd5 	.word	0x0009cbd5
   87b6c:	00093ea9 	.word	0x00093ea9
   87b70:	00087b75 	.word	0x00087b75

00087b74 <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   87b74:	b590      	push	{r4, r7, lr}
   87b76:	b087      	sub	sp, #28
   87b78:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87b7a:	2300      	movs	r3, #0
   87b7c:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87b7e:	2359      	movs	r3, #89	; 0x59
   87b80:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   87b82:	2300      	movs	r3, #0
   87b84:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   87b86:	2300      	movs	r3, #0
   87b88:	9300      	str	r3, [sp, #0]
   87b8a:	f04f 0300 	mov.w	r3, #0
   87b8e:	f04f 0200 	mov.w	r2, #0
   87b92:	2101      	movs	r1, #1
   87b94:	2001      	movs	r0, #1
   87b96:	4cae      	ldr	r4, [pc, #696]	; (87e50 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87b98:	47a0      	blx	r4
   87b9a:	4603      	mov	r3, r0
   87b9c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   87b9e:	2300      	movs	r3, #0
   87ba0:	9300      	str	r3, [sp, #0]
   87ba2:	f04f 0300 	mov.w	r3, #0
   87ba6:	f04f 0200 	mov.w	r2, #0
   87baa:	2100      	movs	r1, #0
   87bac:	2029      	movs	r0, #41	; 0x29
   87bae:	4ca8      	ldr	r4, [pc, #672]	; (87e50 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87bb0:	47a0      	blx	r4
   87bb2:	4603      	mov	r3, r0
   87bb4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   87bb6:	2300      	movs	r3, #0
   87bb8:	9300      	str	r3, [sp, #0]
   87bba:	f04f 0300 	mov.w	r3, #0
   87bbe:	f04f 0200 	mov.w	r2, #0
   87bc2:	2100      	movs	r1, #0
   87bc4:	202b      	movs	r0, #43	; 0x2b
   87bc6:	4ca2      	ldr	r4, [pc, #648]	; (87e50 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87bc8:	47a0      	blx	r4
   87bca:	4603      	mov	r3, r0
   87bcc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(TMP_HIGH,0,1500,0,0);
   87bce:	2300      	movs	r3, #0
   87bd0:	9300      	str	r3, [sp, #0]
   87bd2:	f04f 0300 	mov.w	r3, #0
   87bd6:	4a9f      	ldr	r2, [pc, #636]	; (87e54 <Cl_Dlsis_ResumeDialysis+0x2e0>)
   87bd8:	2100      	movs	r1, #0
   87bda:	2041      	movs	r0, #65	; 0x41
   87bdc:	4c9c      	ldr	r4, [pc, #624]	; (87e50 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87bde:	47a0      	blx	r4
   87be0:	4603      	mov	r3, r0
   87be2:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(TMP_LOW,0,600,0,0);
   87be4:	2300      	movs	r3, #0
   87be6:	9300      	str	r3, [sp, #0]
   87be8:	f04f 0300 	mov.w	r3, #0
   87bec:	4a9a      	ldr	r2, [pc, #616]	; (87e58 <Cl_Dlsis_ResumeDialysis+0x2e4>)
   87bee:	2100      	movs	r1, #0
   87bf0:	2042      	movs	r0, #66	; 0x42
   87bf2:	4c97      	ldr	r4, [pc, #604]	; (87e50 <Cl_Dlsis_ResumeDialysis+0x2dc>)
   87bf4:	47a0      	blx	r4
   87bf6:	4603      	mov	r3, r0
   87bf8:	73fb      	strb	r3, [r7, #15]
									
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   87bfa:	2101      	movs	r1, #1
   87bfc:	2001      	movs	r0, #1
   87bfe:	4b97      	ldr	r3, [pc, #604]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c00:	4798      	blx	r3
   87c02:	4603      	mov	r3, r0
   87c04:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   87c06:	2101      	movs	r1, #1
   87c08:	203d      	movs	r0, #61	; 0x3d
   87c0a:	4b94      	ldr	r3, [pc, #592]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c0c:	4798      	blx	r3
   87c0e:	4603      	mov	r3, r0
   87c10:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87c12:	2101      	movs	r1, #1
   87c14:	203e      	movs	r0, #62	; 0x3e
   87c16:	4b91      	ldr	r3, [pc, #580]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c18:	4798      	blx	r3
   87c1a:	4603      	mov	r3, r0
   87c1c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   87c1e:	2101      	movs	r1, #1
   87c20:	2005      	movs	r0, #5
   87c22:	4b8e      	ldr	r3, [pc, #568]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c24:	4798      	blx	r3
   87c26:	4603      	mov	r3, r0
   87c28:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   87c2a:	2101      	movs	r1, #1
   87c2c:	2006      	movs	r0, #6
   87c2e:	4b8b      	ldr	r3, [pc, #556]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c30:	4798      	blx	r3
   87c32:	4603      	mov	r3, r0
   87c34:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87c36:	2100      	movs	r1, #0
   87c38:	2003      	movs	r0, #3
   87c3a:	4b88      	ldr	r3, [pc, #544]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c3c:	4798      	blx	r3
   87c3e:	4603      	mov	r3, r0
   87c40:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   87c42:	2100      	movs	r1, #0
   87c44:	2004      	movs	r0, #4
   87c46:	4b85      	ldr	r3, [pc, #532]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c48:	4798      	blx	r3
   87c4a:	4603      	mov	r3, r0
   87c4c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
   87c4e:	2101      	movs	r1, #1
   87c50:	2007      	movs	r0, #7
   87c52:	4b82      	ldr	r3, [pc, #520]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c54:	4798      	blx	r3
   87c56:	4603      	mov	r3, r0
   87c58:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
   87c5a:	2101      	movs	r1, #1
   87c5c:	2008      	movs	r0, #8
   87c5e:	4b7f      	ldr	r3, [pc, #508]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c60:	4798      	blx	r3
   87c62:	4603      	mov	r3, r0
   87c64:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   87c66:	2101      	movs	r1, #1
   87c68:	2020      	movs	r0, #32
   87c6a:	4b7c      	ldr	r3, [pc, #496]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c6c:	4798      	blx	r3
   87c6e:	4603      	mov	r3, r0
   87c70:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87c72:	2100      	movs	r1, #0
   87c74:	2021      	movs	r0, #33	; 0x21
   87c76:	4b79      	ldr	r3, [pc, #484]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c78:	4798      	blx	r3
   87c7a:	4603      	mov	r3, r0
   87c7c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   87c7e:	2101      	movs	r1, #1
   87c80:	2024      	movs	r0, #36	; 0x24
   87c82:	4b76      	ldr	r3, [pc, #472]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c84:	4798      	blx	r3
   87c86:	4603      	mov	r3, r0
   87c88:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   87c8a:	2101      	movs	r1, #1
   87c8c:	2026      	movs	r0, #38	; 0x26
   87c8e:	4b73      	ldr	r3, [pc, #460]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c90:	4798      	blx	r3
   87c92:	4603      	mov	r3, r0
   87c94:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   87c96:	2101      	movs	r1, #1
   87c98:	2023      	movs	r0, #35	; 0x23
   87c9a:	4b70      	ldr	r3, [pc, #448]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87c9c:	4798      	blx	r3
   87c9e:	4603      	mov	r3, r0
   87ca0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   87ca2:	2101      	movs	r1, #1
   87ca4:	2025      	movs	r0, #37	; 0x25
   87ca6:	4b6d      	ldr	r3, [pc, #436]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87ca8:	4798      	blx	r3
   87caa:	4603      	mov	r3, r0
   87cac:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   87cae:	2101      	movs	r1, #1
   87cb0:	2022      	movs	r0, #34	; 0x22
   87cb2:	4b6a      	ldr	r3, [pc, #424]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87cb4:	4798      	blx	r3
   87cb6:	4603      	mov	r3, r0
   87cb8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   87cba:	2101      	movs	r1, #1
   87cbc:	2017      	movs	r0, #23
   87cbe:	4b67      	ldr	r3, [pc, #412]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87cc0:	4798      	blx	r3
   87cc2:	4603      	mov	r3, r0
   87cc4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   87cc6:	2101      	movs	r1, #1
   87cc8:	2018      	movs	r0, #24
   87cca:	4b64      	ldr	r3, [pc, #400]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87ccc:	4798      	blx	r3
   87cce:	4603      	mov	r3, r0
   87cd0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   87cd2:	2101      	movs	r1, #1
   87cd4:	2015      	movs	r0, #21
   87cd6:	4b61      	ldr	r3, [pc, #388]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87cd8:	4798      	blx	r3
   87cda:	4603      	mov	r3, r0
   87cdc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   87cde:	2101      	movs	r1, #1
   87ce0:	2016      	movs	r0, #22
   87ce2:	4b5e      	ldr	r3, [pc, #376]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87ce4:	4798      	blx	r3
   87ce6:	4603      	mov	r3, r0
   87ce8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   87cea:	2101      	movs	r1, #1
   87cec:	2027      	movs	r0, #39	; 0x27
   87cee:	4b5b      	ldr	r3, [pc, #364]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87cf0:	4798      	blx	r3
   87cf2:	4603      	mov	r3, r0
   87cf4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   87cf6:	2101      	movs	r1, #1
   87cf8:	2028      	movs	r0, #40	; 0x28
   87cfa:	4b58      	ldr	r3, [pc, #352]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87cfc:	4798      	blx	r3
   87cfe:	4603      	mov	r3, r0
   87d00:	73fb      	strb	r3, [r7, #15]
									
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );

//
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   87d02:	2101      	movs	r1, #1
   87d04:	200c      	movs	r0, #12
   87d06:	4b55      	ldr	r3, [pc, #340]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d08:	4798      	blx	r3
   87d0a:	4603      	mov	r3, r0
   87d0c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   87d0e:	2101      	movs	r1, #1
   87d10:	200d      	movs	r0, #13
   87d12:	4b52      	ldr	r3, [pc, #328]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d14:	4798      	blx	r3
   87d16:	4603      	mov	r3, r0
   87d18:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true ); 									
   87d1a:	2101      	movs	r1, #1
   87d1c:	200e      	movs	r0, #14
   87d1e:	4b4f      	ldr	r3, [pc, #316]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d20:	4798      	blx	r3
   87d22:	4603      	mov	r3, r0
   87d24:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   87d26:	2101      	movs	r1, #1
   87d28:	200f      	movs	r0, #15
   87d2a:	4b4c      	ldr	r3, [pc, #304]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d2c:	4798      	blx	r3
   87d2e:	4603      	mov	r3, r0
   87d30:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   87d32:	2101      	movs	r1, #1
   87d34:	2010      	movs	r0, #16
   87d36:	4b49      	ldr	r3, [pc, #292]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d38:	4798      	blx	r3
   87d3a:	4603      	mov	r3, r0
   87d3c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   87d3e:	2101      	movs	r1, #1
   87d40:	2011      	movs	r0, #17
   87d42:	4b46      	ldr	r3, [pc, #280]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d44:	4798      	blx	r3
   87d46:	4603      	mov	r3, r0
   87d48:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   87d4a:	2101      	movs	r1, #1
   87d4c:	2012      	movs	r0, #18
   87d4e:	4b43      	ldr	r3, [pc, #268]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d50:	4798      	blx	r3
   87d52:	4603      	mov	r3, r0
   87d54:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   87d56:	2101      	movs	r1, #1
   87d58:	2013      	movs	r0, #19
   87d5a:	4b40      	ldr	r3, [pc, #256]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d5c:	4798      	blx	r3
   87d5e:	4603      	mov	r3, r0
   87d60:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   87d62:	2101      	movs	r1, #1
   87d64:	2014      	movs	r0, #20
   87d66:	4b3d      	ldr	r3, [pc, #244]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d68:	4798      	blx	r3
   87d6a:	4603      	mov	r3, r0
   87d6c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   87d6e:	2101      	movs	r1, #1
   87d70:	203f      	movs	r0, #63	; 0x3f
   87d72:	4b3a      	ldr	r3, [pc, #232]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d74:	4798      	blx	r3
   87d76:	4603      	mov	r3, r0
   87d78:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_HIGH,true );
   87d7a:	2101      	movs	r1, #1
   87d7c:	2041      	movs	r0, #65	; 0x41
   87d7e:	4b37      	ldr	r3, [pc, #220]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d80:	4798      	blx	r3
   87d82:	4603      	mov	r3, r0
   87d84:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TMP_LOW,true );
   87d86:	2101      	movs	r1, #1
   87d88:	2042      	movs	r0, #66	; 0x42
   87d8a:	4b34      	ldr	r3, [pc, #208]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d8c:	4798      	blx	r3
   87d8e:	4603      	mov	r3, r0
   87d90:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOOD_NOT_DETECTED,false );  // manav04 disabled 
   87d92:	2100      	movs	r1, #0
   87d94:	2040      	movs	r0, #64	; 0x40
   87d96:	4b31      	ldr	r3, [pc, #196]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87d98:	4798      	blx	r3
   87d9a:	4603      	mov	r3, r0
   87d9c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BC_ALARM,true);
   87d9e:	2101      	movs	r1, #1
   87da0:	201a      	movs	r0, #26
   87da2:	4b2e      	ldr	r3, [pc, #184]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87da4:	4798      	blx	r3
   87da6:	4603      	mov	r3, r0
   87da8:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   87daa:	4b2d      	ldr	r3, [pc, #180]	; (87e60 <Cl_Dlsis_ResumeDialysis+0x2ec>)
   87dac:	781b      	ldrb	r3, [r3, #0]
   87dae:	2b00      	cmp	r3, #0
   87db0:	d005      	beq.n	87dbe <Cl_Dlsis_ResumeDialysis+0x24a>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   87db2:	2101      	movs	r1, #1
   87db4:	203c      	movs	r0, #60	; 0x3c
   87db6:	4b29      	ldr	r3, [pc, #164]	; (87e5c <Cl_Dlsis_ResumeDialysis+0x2e8>)
   87db8:	4798      	blx	r3
   87dba:	4603      	mov	r3, r0
   87dbc:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   87dbe:	4b29      	ldr	r3, [pc, #164]	; (87e64 <Cl_Dlsis_ResumeDialysis+0x2f0>)
   87dc0:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   87dc2:	4b29      	ldr	r3, [pc, #164]	; (87e68 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   87dc4:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   87dc6:	2001      	movs	r0, #1
   87dc8:	4b28      	ldr	r3, [pc, #160]	; (87e6c <Cl_Dlsis_ResumeDialysis+0x2f8>)
   87dca:	4798      	blx	r3
   87dcc:	4603      	mov	r3, r0
   87dce:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   87dd0:	2002      	movs	r0, #2
   87dd2:	4b26      	ldr	r3, [pc, #152]	; (87e6c <Cl_Dlsis_ResumeDialysis+0x2f8>)
   87dd4:	4798      	blx	r3
   87dd6:	4603      	mov	r3, r0
   87dd8:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);               // manav03 removed
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   87dda:	2003      	movs	r0, #3
   87ddc:	4b24      	ldr	r3, [pc, #144]	; (87e70 <Cl_Dlsis_ResumeDialysis+0x2fc>)
   87dde:	4798      	blx	r3
   87de0:	4603      	mov	r3, r0
   87de2:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   87de4:	2100      	movs	r1, #0
   87de6:	2002      	movs	r0, #2
   87de8:	4b22      	ldr	r3, [pc, #136]	; (87e74 <Cl_Dlsis_ResumeDialysis+0x300>)
   87dea:	4798      	blx	r3
									cl_wait(100);
   87dec:	2064      	movs	r0, #100	; 0x64
   87dee:	4b22      	ldr	r3, [pc, #136]	; (87e78 <Cl_Dlsis_ResumeDialysis+0x304>)
   87df0:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   87df2:	4b22      	ldr	r3, [pc, #136]	; (87e7c <Cl_Dlsis_ResumeDialysis+0x308>)
   87df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   87df6:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   87df8:	68b9      	ldr	r1, [r7, #8]
   87dfa:	2001      	movs	r0, #1
   87dfc:	4b1d      	ldr	r3, [pc, #116]	; (87e74 <Cl_Dlsis_ResumeDialysis+0x300>)
   87dfe:	4798      	blx	r3
									cl_wait(100);
   87e00:	2064      	movs	r0, #100	; 0x64
   87e02:	4b1d      	ldr	r3, [pc, #116]	; (87e78 <Cl_Dlsis_ResumeDialysis+0x304>)
   87e04:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   87e06:	4b1d      	ldr	r3, [pc, #116]	; (87e7c <Cl_Dlsis_ResumeDialysis+0x308>)
   87e08:	695b      	ldr	r3, [r3, #20]
   87e0a:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   87e0c:	4a1c      	ldr	r2, [pc, #112]	; (87e80 <Cl_Dlsis_ResumeDialysis+0x30c>)
   87e0e:	687b      	ldr	r3, [r7, #4]
   87e10:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   87e12:	2300      	movs	r3, #0
   87e14:	807b      	strh	r3, [r7, #2]
									switch (temp)
   87e16:	687b      	ldr	r3, [r7, #4]
   87e18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   87e1c:	d036      	beq.n	87e8c <Cl_Dlsis_ResumeDialysis+0x318>
   87e1e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   87e22:	d003      	beq.n	87e2c <Cl_Dlsis_ResumeDialysis+0x2b8>
   87e24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   87e28:	d046      	beq.n	87eb8 <Cl_Dlsis_ResumeDialysis+0x344>
   87e2a:	e056      	b.n	87eda <Cl_Dlsis_ResumeDialysis+0x366>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87e2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87e30:	2002      	movs	r0, #2
   87e32:	4b14      	ldr	r3, [pc, #80]	; (87e84 <Cl_Dlsis_ResumeDialysis+0x310>)
   87e34:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   87e36:	f240 5173 	movw	r1, #1395	; 0x573
   87e3a:	2001      	movs	r0, #1
   87e3c:	4b11      	ldr	r3, [pc, #68]	; (87e84 <Cl_Dlsis_ResumeDialysis+0x310>)
   87e3e:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   87e40:	233e      	movs	r3, #62	; 0x3e
   87e42:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87e44:	887b      	ldrh	r3, [r7, #2]
   87e46:	4618      	mov	r0, r3
   87e48:	4b0f      	ldr	r3, [pc, #60]	; (87e88 <Cl_Dlsis_ResumeDialysis+0x314>)
   87e4a:	4798      	blx	r3
										break;
   87e4c:	e056      	b.n	87efc <Cl_Dlsis_ResumeDialysis+0x388>
   87e4e:	bf00      	nop
   87e50:	00082989 	.word	0x00082989
   87e54:	44bb8000 	.word	0x44bb8000
   87e58:	44160000 	.word	0x44160000
   87e5c:	000829e5 	.word	0x000829e5
   87e60:	200709ba 	.word	0x200709ba
   87e64:	0009af71 	.word	0x0009af71
   87e68:	0009af2d 	.word	0x0009af2d
   87e6c:	0009ad41 	.word	0x0009ad41
   87e70:	00089035 	.word	0x00089035
   87e74:	00093f5d 	.word	0x00093f5d
   87e78:	00093ea9 	.word	0x00093ea9
   87e7c:	20072614 	.word	0x20072614
   87e80:	20071834 	.word	0x20071834
   87e84:	0009ae59 	.word	0x0009ae59
   87e88:	0009b2c1 	.word	0x0009b2c1
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   87e8c:	2203      	movs	r2, #3
   87e8e:	4925      	ldr	r1, [pc, #148]	; (87f24 <Cl_Dlsis_ResumeDialysis+0x3b0>)
   87e90:	2018      	movs	r0, #24
   87e92:	4b25      	ldr	r3, [pc, #148]	; (87f28 <Cl_Dlsis_ResumeDialysis+0x3b4>)
   87e94:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87e96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87e9a:	2002      	movs	r0, #2
   87e9c:	4b23      	ldr	r3, [pc, #140]	; (87f2c <Cl_Dlsis_ResumeDialysis+0x3b8>)
   87e9e:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   87ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ea4:	2001      	movs	r0, #1
   87ea6:	4b21      	ldr	r3, [pc, #132]	; (87f2c <Cl_Dlsis_ResumeDialysis+0x3b8>)
   87ea8:	4798      	blx	r3
										potvalue = (690 * 1024)/10000;
   87eaa:	2346      	movs	r3, #70	; 0x46
   87eac:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87eae:	887b      	ldrh	r3, [r7, #2]
   87eb0:	4618      	mov	r0, r3
   87eb2:	4b1f      	ldr	r3, [pc, #124]	; (87f30 <Cl_Dlsis_ResumeDialysis+0x3bc>)
   87eb4:	4798      	blx	r3
										break;
   87eb6:	e021      	b.n	87efc <Cl_Dlsis_ResumeDialysis+0x388>
										
									
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ebc:	2002      	movs	r0, #2
   87ebe:	4b1b      	ldr	r3, [pc, #108]	; (87f2c <Cl_Dlsis_ResumeDialysis+0x3b8>)
   87ec0:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,600);
   87ec2:	f44f 7116 	mov.w	r1, #600	; 0x258
   87ec6:	2001      	movs	r0, #1
   87ec8:	4b18      	ldr	r3, [pc, #96]	; (87f2c <Cl_Dlsis_ResumeDialysis+0x3b8>)
   87eca:	4798      	blx	r3
										potvalue = (650 * 1024)/10000;
   87ecc:	2342      	movs	r3, #66	; 0x42
   87ece:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87ed0:	887b      	ldrh	r3, [r7, #2]
   87ed2:	4618      	mov	r0, r3
   87ed4:	4b16      	ldr	r3, [pc, #88]	; (87f30 <Cl_Dlsis_ResumeDialysis+0x3bc>)
   87ed6:	4798      	blx	r3
										break;
   87ed8:	e010      	b.n	87efc <Cl_Dlsis_ResumeDialysis+0x388>
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   87eda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   87ede:	2002      	movs	r0, #2
   87ee0:	4b12      	ldr	r3, [pc, #72]	; (87f2c <Cl_Dlsis_ResumeDialysis+0x3b8>)
   87ee2:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   87ee4:	f240 414c 	movw	r1, #1100	; 0x44c
   87ee8:	2001      	movs	r0, #1
   87eea:	4b10      	ldr	r3, [pc, #64]	; (87f2c <Cl_Dlsis_ResumeDialysis+0x3b8>)
   87eec:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   87eee:	2344      	movs	r3, #68	; 0x44
   87ef0:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   87ef2:	887b      	ldrh	r3, [r7, #2]
   87ef4:	4618      	mov	r0, r3
   87ef6:	4b0e      	ldr	r3, [pc, #56]	; (87f30 <Cl_Dlsis_ResumeDialysis+0x3bc>)
   87ef8:	4798      	blx	r3
										break;
   87efa:	bf00      	nop
									}
									bc_flag = 1;
   87efc:	4b0d      	ldr	r3, [pc, #52]	; (87f34 <Cl_Dlsis_ResumeDialysis+0x3c0>)
   87efe:	2201      	movs	r2, #1
   87f00:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassDialysis();
									Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87f02:	4b0d      	ldr	r3, [pc, #52]	; (87f38 <Cl_Dlsis_ResumeDialysis+0x3c4>)
   87f04:	4798      	blx	r3
   87f06:	4603      	mov	r3, r0
   87f08:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   87f0a:	4b0c      	ldr	r3, [pc, #48]	; (87f3c <Cl_Dlsis_ResumeDialysis+0x3c8>)
   87f0c:	4798      	blx	r3
   87f0e:	4603      	mov	r3, r0
   87f10:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   87f12:	4b0b      	ldr	r3, [pc, #44]	; (87f40 <Cl_Dlsis_ResumeDialysis+0x3cc>)
   87f14:	2202      	movs	r2, #2
   87f16:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassOff();
									return 0;	
   87f18:	2300      	movs	r3, #0
}
   87f1a:	4618      	mov	r0, r3
   87f1c:	3714      	adds	r7, #20
   87f1e:	46bd      	mov	sp, r7
   87f20:	bd90      	pop	{r4, r7, pc}
   87f22:	bf00      	nop
   87f24:	000a9f9c 	.word	0x000a9f9c
   87f28:	0009cbd5 	.word	0x0009cbd5
   87f2c:	0009ae59 	.word	0x0009ae59
   87f30:	0009b2c1 	.word	0x0009b2c1
   87f34:	20071833 	.word	0x20071833
   87f38:	0009afa9 	.word	0x0009afa9
   87f3c:	00086845 	.word	0x00086845
   87f40:	20071814 	.word	0x20071814

00087f44 <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   87f44:	b580      	push	{r7, lr}
   87f46:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   87f48:	4b09      	ldr	r3, [pc, #36]	; (87f70 <Cl_Dlsis_safesate+0x2c>)
   87f4a:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87f4c:	2100      	movs	r1, #0
   87f4e:	2004      	movs	r0, #4
   87f50:	4b08      	ldr	r3, [pc, #32]	; (87f74 <Cl_Dlsis_safesate+0x30>)
   87f52:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   87f54:	2100      	movs	r1, #0
   87f56:	2004      	movs	r0, #4
   87f58:	4b07      	ldr	r3, [pc, #28]	; (87f78 <Cl_Dlsis_safesate+0x34>)
   87f5a:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   87f5c:	4b07      	ldr	r3, [pc, #28]	; (87f7c <Cl_Dlsis_safesate+0x38>)
   87f5e:	4798      	blx	r3

	Cl_Dlsis_BypassDialysis();
   87f60:	4b07      	ldr	r3, [pc, #28]	; (87f80 <Cl_Dlsis_safesate+0x3c>)
   87f62:	4798      	blx	r3
	//isouf = false;
	// send dialysis isouf off
// 	command = CON_TX_COMMAND_DIALYSIS_ISOUF_OFF;
// 	dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
// 	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,0);
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87f64:	4b07      	ldr	r3, [pc, #28]	; (87f84 <Cl_Dlsis_safesate+0x40>)
   87f66:	220a      	movs	r2, #10
   87f68:	701a      	strb	r2, [r3, #0]
	
	return 0;
   87f6a:	2300      	movs	r3, #0
}
   87f6c:	4618      	mov	r0, r3
   87f6e:	bd80      	pop	{r7, pc}
   87f70:	0009af8d 	.word	0x0009af8d
   87f74:	00096ea9 	.word	0x00096ea9
   87f78:	00093f5d 	.word	0x00093f5d
   87f7c:	0009af41 	.word	0x0009af41
   87f80:	00086f3d 	.word	0x00086f3d
   87f84:	20071814 	.word	0x20071814

00087f88 <cl_temp_safestate>:
	//sv_cntrl_nobuzzer();
	
	return 0;
}
Cl_ReturnCodeType cl_temp_safestate(void)
{
   87f88:	b580      	push	{r7, lr}
   87f8a:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   87f8c:	2206      	movs	r2, #6
   87f8e:	4909      	ldr	r1, [pc, #36]	; (87fb4 <cl_temp_safestate+0x2c>)
   87f90:	2018      	movs	r0, #24
   87f92:	4b09      	ldr	r3, [pc, #36]	; (87fb8 <cl_temp_safestate+0x30>)
   87f94:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   87f96:	4b09      	ldr	r3, [pc, #36]	; (87fbc <cl_temp_safestate+0x34>)
   87f98:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   87f9a:	2100      	movs	r1, #0
   87f9c:	2004      	movs	r0, #4
   87f9e:	4b08      	ldr	r3, [pc, #32]	; (87fc0 <cl_temp_safestate+0x38>)
   87fa0:	4798      	blx	r3
	//sv_cntrl_deactivatevenousclamp();
	Cl_Dlsis_BypassDialysis();
   87fa2:	4b08      	ldr	r3, [pc, #32]	; (87fc4 <cl_temp_safestate+0x3c>)
   87fa4:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   87fa6:	4b08      	ldr	r3, [pc, #32]	; (87fc8 <cl_temp_safestate+0x40>)
   87fa8:	220a      	movs	r2, #10
   87faa:	701a      	strb	r2, [r3, #0]
	return 0;
   87fac:	2300      	movs	r3, #0
}
   87fae:	4618      	mov	r0, r3
   87fb0:	bd80      	pop	{r7, pc}
   87fb2:	bf00      	nop
   87fb4:	000a9fa0 	.word	0x000a9fa0
   87fb8:	0009cbd5 	.word	0x0009cbd5
   87fbc:	0009af8d 	.word	0x0009af8d
   87fc0:	00096ea9 	.word	0x00096ea9
   87fc4:	00086f3d 	.word	0x00086f3d
   87fc8:	20071814 	.word	0x20071814

00087fcc <cl_dprep_primeInit>:
static int8_t cl_dialyser_prime_min = 0;

extern Cl_Dprep_PrimeStates cl_dprep_prime_stateDummy;

Cl_ReturnCodeType cl_dprep_primeInit(void)
{
   87fcc:	b480      	push	{r7}
   87fce:	af00      	add	r7, sp, #0
	 cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
   87fd0:	4b0b      	ldr	r3, [pc, #44]	; (88000 <cl_dprep_primeInit+0x34>)
   87fd2:	2200      	movs	r2, #0
   87fd4:	701a      	strb	r2, [r3, #0]
	 cl_dprep_prime_event = CL_DPREP_PRIME_PRIME_NULL;
   87fd6:	4b0b      	ldr	r3, [pc, #44]	; (88004 <cl_dprep_primeInit+0x38>)
   87fd8:	2200      	movs	r2, #0
   87fda:	701a      	strb	r2, [r3, #0]
	  cl_prime_sec = 0;
   87fdc:	4b0a      	ldr	r3, [pc, #40]	; (88008 <cl_dprep_primeInit+0x3c>)
   87fde:	2200      	movs	r2, #0
   87fe0:	701a      	strb	r2, [r3, #0]
	  cl_prime_min = 0;
   87fe2:	4b0a      	ldr	r3, [pc, #40]	; (8800c <cl_dprep_primeInit+0x40>)
   87fe4:	2200      	movs	r2, #0
   87fe6:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_sec = 0;
   87fe8:	4b09      	ldr	r3, [pc, #36]	; (88010 <cl_dprep_primeInit+0x44>)
   87fea:	2200      	movs	r2, #0
   87fec:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_min = 0;
   87fee:	4b09      	ldr	r3, [pc, #36]	; (88014 <cl_dprep_primeInit+0x48>)
   87ff0:	2200      	movs	r2, #0
   87ff2:	701a      	strb	r2, [r3, #0]
	
}
   87ff4:	bf00      	nop
   87ff6:	4618      	mov	r0, r3
   87ff8:	46bd      	mov	sp, r7
   87ffa:	bc80      	pop	{r7}
   87ffc:	4770      	bx	lr
   87ffe:	bf00      	nop
   88000:	20071866 	.word	0x20071866
   88004:	20071867 	.word	0x20071867
   88008:	20071868 	.word	0x20071868
   8800c:	20071869 	.word	0x20071869
   88010:	2007186a 	.word	0x2007186a
   88014:	2007186b 	.word	0x2007186b

00088018 <cl_dprep_primecontroller>:


Cl_ReturnCodeType cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   88018:	b580      	push	{r7, lr}
   8801a:	b084      	sub	sp, #16
   8801c:	af00      	add	r7, sp, #0
   8801e:	4603      	mov	r3, r0
   88020:	460a      	mov	r2, r1
   88022:	71fb      	strb	r3, [r7, #7]
   88024:	4613      	mov	r3, r2
   88026:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodeType 	 Cl_dprep_primeretcode = CL_ERROR;
   88028:	2304      	movs	r3, #4
   8802a:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   8802c:	79fb      	ldrb	r3, [r7, #7]
   8802e:	2b0b      	cmp	r3, #11
   88030:	d103      	bne.n	8803a <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   88032:	4bb6      	ldr	r3, [pc, #728]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   88034:	781a      	ldrb	r2, [r3, #0]
   88036:	4bb6      	ldr	r3, [pc, #728]	; (88310 <cl_dprep_primecontroller+0x2f8>)
   88038:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   8803a:	4bb4      	ldr	r3, [pc, #720]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   8803c:	781b      	ldrb	r3, [r3, #0]
   8803e:	2b0c      	cmp	r3, #12
   88040:	f200 84a7 	bhi.w	88992 <cl_dprep_primecontroller+0x97a>
   88044:	a201      	add	r2, pc, #4	; (adr r2, 8804c <cl_dprep_primecontroller+0x34>)
   88046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8804a:	bf00      	nop
   8804c:	00088081 	.word	0x00088081
   88050:	000880ff 	.word	0x000880ff
   88054:	000883b9 	.word	0x000883b9
   88058:	0008820d 	.word	0x0008820d
   8805c:	000882c5 	.word	0x000882c5
   88060:	000884cb 	.word	0x000884cb
   88064:	000885cf 	.word	0x000885cf
   88068:	00088993 	.word	0x00088993
   8806c:	0008863d 	.word	0x0008863d
   88070:	0008875f 	.word	0x0008875f
   88074:	00088993 	.word	0x00088993
   88078:	0008884d 	.word	0x0008884d
   8807c:	000888c9 	.word	0x000888c9
		{
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
   88080:	79fb      	ldrb	r3, [r7, #7]
   88082:	2b01      	cmp	r3, #1
   88084:	d009      	beq.n	8809a <cl_dprep_primecontroller+0x82>
   88086:	2b0e      	cmp	r3, #14
   88088:	d000      	beq.n	8808c <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   8808a:	e036      	b.n	880fa <cl_dprep_primecontroller+0xe2>
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8808c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88090:	4619      	mov	r1, r3
   88092:	2001      	movs	r0, #1
   88094:	4b9f      	ldr	r3, [pc, #636]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   88096:	4798      	blx	r3
					break;
   88098:	e02f      	b.n	880fa <cl_dprep_primecontroller+0xe2>
					case CL_DPREP_PRIME_PRIME_START:
					DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   8809a:	2100      	movs	r1, #0
   8809c:	2029      	movs	r0, #41	; 0x29
   8809e:	4b9e      	ldr	r3, [pc, #632]	; (88318 <cl_dprep_primecontroller+0x300>)
   880a0:	4798      	blx	r3
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   880a2:	2206      	movs	r2, #6
   880a4:	499d      	ldr	r1, [pc, #628]	; (8831c <cl_dprep_primecontroller+0x304>)
   880a6:	2018      	movs	r0, #24
   880a8:	4b9d      	ldr	r3, [pc, #628]	; (88320 <cl_dprep_primecontroller+0x308>)
   880aa:	4798      	blx	r3
					sv_cntrl_disable_bypass();
   880ac:	4b9d      	ldr	r3, [pc, #628]	; (88324 <cl_dprep_primecontroller+0x30c>)
   880ae:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,400);          // manav01 added
   880b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   880b4:	2001      	movs	r0, #1
   880b6:	4b97      	ldr	r3, [pc, #604]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   880b8:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_START,0);
   880ba:	2100      	movs	r1, #0
   880bc:	2002      	movs	r0, #2
   880be:	4b95      	ldr	r3, [pc, #596]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   880c0:	4798      	blx	r3
						Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true); // manav03 added
   880c2:	2101      	movs	r1, #1
   880c4:	2001      	movs	r0, #1
   880c6:	4b98      	ldr	r3, [pc, #608]	; (88328 <cl_dprep_primecontroller+0x310>)
   880c8:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   880ca:	1d3b      	adds	r3, r7, #4
   880cc:	2200      	movs	r2, #0
   880ce:	4619      	mov	r1, r3
   880d0:	200d      	movs	r0, #13
   880d2:	4b93      	ldr	r3, [pc, #588]	; (88320 <cl_dprep_primecontroller+0x308>)
   880d4:	4798      	blx	r3
   880d6:	4603      	mov	r3, r0
   880d8:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   880da:	1d3b      	adds	r3, r7, #4
   880dc:	2200      	movs	r2, #0
   880de:	4619      	mov	r1, r3
   880e0:	2024      	movs	r0, #36	; 0x24
   880e2:	4b8f      	ldr	r3, [pc, #572]	; (88320 <cl_dprep_primecontroller+0x308>)
   880e4:	4798      	blx	r3
   880e6:	4603      	mov	r3, r0
   880e8:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   880ea:	4b90      	ldr	r3, [pc, #576]	; (8832c <cl_dprep_primecontroller+0x314>)
   880ec:	4798      	blx	r3
   880ee:	4603      	mov	r3, r0
   880f0:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   880f2:	4b86      	ldr	r3, [pc, #536]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   880f4:	2201      	movs	r2, #1
   880f6:	701a      	strb	r2, [r3, #0]
					break;
   880f8:	bf00      	nop
					default:break;
				}
			break;
   880fa:	f000 bc4a 	b.w	88992 <cl_dprep_primecontroller+0x97a>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   880fe:	79fb      	ldrb	r3, [r7, #7]
   88100:	3b02      	subs	r3, #2
   88102:	2b0c      	cmp	r3, #12
   88104:	d87e      	bhi.n	88204 <cl_dprep_primecontroller+0x1ec>
   88106:	a201      	add	r2, pc, #4	; (adr r2, 8810c <cl_dprep_primecontroller+0xf4>)
   88108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8810c:	000881b3 	.word	0x000881b3
   88110:	00088141 	.word	0x00088141
   88114:	000881d3 	.word	0x000881d3
   88118:	00088205 	.word	0x00088205
   8811c:	00088205 	.word	0x00088205
   88120:	00088205 	.word	0x00088205
   88124:	00088205 	.word	0x00088205
   88128:	00088205 	.word	0x00088205
   8812c:	00088205 	.word	0x00088205
   88130:	00088149 	.word	0x00088149
   88134:	000881e3 	.word	0x000881e3
   88138:	000881ed 	.word	0x000881ed
   8813c:	000881f7 	.word	0x000881f7
				{
					case CL_DPREP_PRIME_PRIME_ALARM:
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88140:	4b72      	ldr	r3, [pc, #456]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   88142:	2203      	movs	r2, #3
   88144:	701a      	strb	r2, [r3, #0]
					break;
   88146:	e060      	b.n	8820a <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   88148:	2002      	movs	r0, #2
   8814a:	4b79      	ldr	r3, [pc, #484]	; (88330 <cl_dprep_primecontroller+0x318>)
   8814c:	4798      	blx	r3
   8814e:	4603      	mov	r3, r0
   88150:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   88152:	4b78      	ldr	r3, [pc, #480]	; (88334 <cl_dprep_primecontroller+0x31c>)
   88154:	f993 3000 	ldrsb.w	r3, [r3]
   88158:	b2da      	uxtb	r2, r3
   8815a:	3201      	adds	r2, #1
   8815c:	b2d2      	uxtb	r2, r2
   8815e:	b251      	sxtb	r1, r2
   88160:	4a74      	ldr	r2, [pc, #464]	; (88334 <cl_dprep_primecontroller+0x31c>)
   88162:	7011      	strb	r1, [r2, #0]
   88164:	2b3b      	cmp	r3, #59	; 0x3b
   88166:	dd0f      	ble.n	88188 <cl_dprep_primecontroller+0x170>
					{
						cl_prime_sec = 0;
   88168:	4b72      	ldr	r3, [pc, #456]	; (88334 <cl_dprep_primecontroller+0x31c>)
   8816a:	2200      	movs	r2, #0
   8816c:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   8816e:	4b72      	ldr	r3, [pc, #456]	; (88338 <cl_dprep_primecontroller+0x320>)
   88170:	f993 3000 	ldrsb.w	r3, [r3]
   88174:	b2db      	uxtb	r3, r3
   88176:	3301      	adds	r3, #1
   88178:	b2db      	uxtb	r3, r3
   8817a:	b25a      	sxtb	r2, r3
   8817c:	4b6e      	ldr	r3, [pc, #440]	; (88338 <cl_dprep_primecontroller+0x320>)
   8817e:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88180:	4b6a      	ldr	r3, [pc, #424]	; (8832c <cl_dprep_primecontroller+0x314>)
   88182:	4798      	blx	r3
   88184:	4603      	mov	r3, r0
   88186:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88188:	4b6b      	ldr	r3, [pc, #428]	; (88338 <cl_dprep_primecontroller+0x320>)
   8818a:	f993 3000 	ldrsb.w	r3, [r3]
   8818e:	2b00      	cmp	r3, #0
   88190:	dd3a      	ble.n	88208 <cl_dprep_primecontroller+0x1f0>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88192:	2100      	movs	r1, #0
   88194:	2004      	movs	r0, #4
   88196:	4b5f      	ldr	r3, [pc, #380]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   88198:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   8819a:	1d3b      	adds	r3, r7, #4
   8819c:	2200      	movs	r2, #0
   8819e:	4619      	mov	r1, r3
   881a0:	200f      	movs	r0, #15
   881a2:	4b5f      	ldr	r3, [pc, #380]	; (88320 <cl_dprep_primecontroller+0x308>)
   881a4:	4798      	blx	r3
   881a6:	4603      	mov	r3, r0
   881a8:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   881aa:	4b58      	ldr	r3, [pc, #352]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   881ac:	2202      	movs	r2, #2
   881ae:	701a      	strb	r2, [r3, #0]
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   881b0:	e02a      	b.n	88208 <cl_dprep_primecontroller+0x1f0>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   881b2:	2100      	movs	r1, #0
   881b4:	2004      	movs	r0, #4
   881b6:	4b57      	ldr	r3, [pc, #348]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   881b8:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   881ba:	1d3b      	adds	r3, r7, #4
   881bc:	2200      	movs	r2, #0
   881be:	4619      	mov	r1, r3
   881c0:	2023      	movs	r0, #35	; 0x23
   881c2:	4b57      	ldr	r3, [pc, #348]	; (88320 <cl_dprep_primecontroller+0x308>)
   881c4:	4798      	blx	r3
   881c6:	4603      	mov	r3, r0
   881c8:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   881ca:	4b50      	ldr	r3, [pc, #320]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   881cc:	2203      	movs	r2, #3
   881ce:	701a      	strb	r2, [r3, #0]
					break;
   881d0:	e01b      	b.n	8820a <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   881d2:	2100      	movs	r1, #0
   881d4:	2004      	movs	r0, #4
   881d6:	4b4f      	ldr	r3, [pc, #316]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   881d8:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   881da:	4b4c      	ldr	r3, [pc, #304]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   881dc:	2204      	movs	r2, #4
   881de:	701a      	strb	r2, [r3, #0]
					break;
   881e0:	e013      	b.n	8820a <cl_dprep_primecontroller+0x1f2>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   881e2:	2100      	movs	r1, #0
   881e4:	2002      	movs	r0, #2
   881e6:	4b4b      	ldr	r3, [pc, #300]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   881e8:	4798      	blx	r3
					break;
   881ea:	e00e      	b.n	8820a <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   881ec:	2100      	movs	r1, #0
   881ee:	2004      	movs	r0, #4
   881f0:	4b48      	ldr	r3, [pc, #288]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   881f2:	4798      	blx	r3
					break;
   881f4:	e009      	b.n	8820a <cl_dprep_primecontroller+0x1f2>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   881f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   881fa:	4619      	mov	r1, r3
   881fc:	2001      	movs	r0, #1
   881fe:	4b45      	ldr	r3, [pc, #276]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   88200:	4798      	blx	r3
					break;
   88202:	e002      	b.n	8820a <cl_dprep_primecontroller+0x1f2>
					default:break;
   88204:	bf00      	nop
   88206:	e3c4      	b.n	88992 <cl_dprep_primecontroller+0x97a>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   88208:	bf00      	nop
					break;
					default:break;
				}

			
			break;
   8820a:	e3c2      	b.n	88992 <cl_dprep_primecontroller+0x97a>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   8820c:	79fb      	ldrb	r3, [r7, #7]
   8820e:	3b01      	subs	r3, #1
   88210:	2b0d      	cmp	r3, #13
   88212:	f200 8399 	bhi.w	88948 <cl_dprep_primecontroller+0x930>
   88216:	a201      	add	r2, pc, #4	; (adr r2, 8821c <cl_dprep_primecontroller+0x204>)
   88218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8821c:	00088255 	.word	0x00088255
   88220:	00088949 	.word	0x00088949
   88224:	00088949 	.word	0x00088949
   88228:	00088949 	.word	0x00088949
   8822c:	00088949 	.word	0x00088949
   88230:	00088949 	.word	0x00088949
   88234:	00088949 	.word	0x00088949
   88238:	00088949 	.word	0x00088949
   8823c:	00088949 	.word	0x00088949
   88240:	00088949 	.word	0x00088949
   88244:	00088949 	.word	0x00088949
   88248:	000882a1 	.word	0x000882a1
   8824c:	000882ab 	.word	0x000882ab
   88250:	000882b5 	.word	0x000882b5
						{
							case CL_DPREP_PRIME_PRIME_START:
							DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   88254:	2100      	movs	r1, #0
   88256:	2029      	movs	r0, #41	; 0x29
   88258:	4b2f      	ldr	r3, [pc, #188]	; (88318 <cl_dprep_primecontroller+0x300>)
   8825a:	4798      	blx	r3
								cl_bp_controller(CL_BP_EVENT_START,0);
   8825c:	2100      	movs	r1, #0
   8825e:	2002      	movs	r0, #2
   88260:	4b2c      	ldr	r3, [pc, #176]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   88262:	4798      	blx	r3
								cl_prime_min = 0;
   88264:	4b34      	ldr	r3, [pc, #208]	; (88338 <cl_dprep_primecontroller+0x320>)
   88266:	2200      	movs	r2, #0
   88268:	701a      	strb	r2, [r3, #0]
								cl_prime_sec = 0;
   8826a:	4b32      	ldr	r3, [pc, #200]	; (88334 <cl_dprep_primecontroller+0x31c>)
   8826c:	2200      	movs	r2, #0
   8826e:	701a      	strb	r2, [r3, #0]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88270:	1d3b      	adds	r3, r7, #4
   88272:	2200      	movs	r2, #0
   88274:	4619      	mov	r1, r3
   88276:	200d      	movs	r0, #13
   88278:	4b29      	ldr	r3, [pc, #164]	; (88320 <cl_dprep_primecontroller+0x308>)
   8827a:	4798      	blx	r3
   8827c:	4603      	mov	r3, r0
   8827e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88280:	1d3b      	adds	r3, r7, #4
   88282:	2200      	movs	r2, #0
   88284:	4619      	mov	r1, r3
   88286:	2024      	movs	r0, #36	; 0x24
   88288:	4b25      	ldr	r3, [pc, #148]	; (88320 <cl_dprep_primecontroller+0x308>)
   8828a:	4798      	blx	r3
   8828c:	4603      	mov	r3, r0
   8828e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88290:	4b26      	ldr	r3, [pc, #152]	; (8832c <cl_dprep_primecontroller+0x314>)
   88292:	4798      	blx	r3
   88294:	4603      	mov	r3, r0
   88296:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88298:	4b1c      	ldr	r3, [pc, #112]	; (8830c <cl_dprep_primecontroller+0x2f4>)
   8829a:	2201      	movs	r2, #1
   8829c:	701a      	strb	r2, [r3, #0]
							break;
   8829e:	e010      	b.n	882c2 <cl_dprep_primecontroller+0x2aa>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   882a0:	2100      	movs	r1, #0
   882a2:	2002      	movs	r0, #2
   882a4:	4b1b      	ldr	r3, [pc, #108]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   882a6:	4798      	blx	r3
							break;
   882a8:	e00b      	b.n	882c2 <cl_dprep_primecontroller+0x2aa>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   882aa:	2100      	movs	r1, #0
   882ac:	2004      	movs	r0, #4
   882ae:	4b19      	ldr	r3, [pc, #100]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   882b0:	4798      	blx	r3
							break;
   882b2:	e006      	b.n	882c2 <cl_dprep_primecontroller+0x2aa>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   882b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   882b8:	4619      	mov	r1, r3
   882ba:	2001      	movs	r0, #1
   882bc:	4b15      	ldr	r3, [pc, #84]	; (88314 <cl_dprep_primecontroller+0x2fc>)
   882be:	4798      	blx	r3
							break;
   882c0:	bf00      	nop
						}
			break;
   882c2:	e341      	b.n	88948 <cl_dprep_primecontroller+0x930>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   882c4:	79fb      	ldrb	r3, [r7, #7]
   882c6:	3b01      	subs	r3, #1
   882c8:	2b0d      	cmp	r3, #13
   882ca:	f200 833f 	bhi.w	8894c <cl_dprep_primecontroller+0x934>
   882ce:	a201      	add	r2, pc, #4	; (adr r2, 882d4 <cl_dprep_primecontroller+0x2bc>)
   882d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   882d4:	0008833d 	.word	0x0008833d
   882d8:	00088375 	.word	0x00088375
   882dc:	0008894d 	.word	0x0008894d
   882e0:	0008894d 	.word	0x0008894d
   882e4:	0008894d 	.word	0x0008894d
   882e8:	0008894d 	.word	0x0008894d
   882ec:	0008894d 	.word	0x0008894d
   882f0:	0008894d 	.word	0x0008894d
   882f4:	0008894d 	.word	0x0008894d
   882f8:	0008894d 	.word	0x0008894d
   882fc:	0008894d 	.word	0x0008894d
   88300:	00088395 	.word	0x00088395
   88304:	0008839f 	.word	0x0008839f
   88308:	000883a9 	.word	0x000883a9
   8830c:	20071866 	.word	0x20071866
   88310:	2007260c 	.word	0x2007260c
   88314:	00093f5d 	.word	0x00093f5d
   88318:	00097b4d 	.word	0x00097b4d
   8831c:	000a9fa8 	.word	0x000a9fa8
   88320:	0009cbd5 	.word	0x0009cbd5
   88324:	0009afa9 	.word	0x0009afa9
   88328:	000829e5 	.word	0x000829e5
   8832c:	0008899d 	.word	0x0008899d
   88330:	000a1ead 	.word	0x000a1ead
   88334:	20071868 	.word	0x20071868
   88338:	20071869 	.word	0x20071869
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   8833c:	2100      	movs	r1, #0
   8833e:	2002      	movs	r0, #2
   88340:	4bb5      	ldr	r3, [pc, #724]	; (88618 <cl_dprep_primecontroller+0x600>)
   88342:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88344:	1d3b      	adds	r3, r7, #4
   88346:	2200      	movs	r2, #0
   88348:	4619      	mov	r1, r3
   8834a:	200d      	movs	r0, #13
   8834c:	4bb3      	ldr	r3, [pc, #716]	; (8861c <cl_dprep_primecontroller+0x604>)
   8834e:	4798      	blx	r3
   88350:	4603      	mov	r3, r0
   88352:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88354:	1d3b      	adds	r3, r7, #4
   88356:	2200      	movs	r2, #0
   88358:	4619      	mov	r1, r3
   8835a:	2024      	movs	r0, #36	; 0x24
   8835c:	4baf      	ldr	r3, [pc, #700]	; (8861c <cl_dprep_primecontroller+0x604>)
   8835e:	4798      	blx	r3
   88360:	4603      	mov	r3, r0
   88362:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88364:	4bae      	ldr	r3, [pc, #696]	; (88620 <cl_dprep_primecontroller+0x608>)
   88366:	4798      	blx	r3
   88368:	4603      	mov	r3, r0
   8836a:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   8836c:	4bad      	ldr	r3, [pc, #692]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8836e:	2201      	movs	r2, #1
   88370:	701a      	strb	r2, [r3, #0]
							break;
   88372:	e020      	b.n	883b6 <cl_dprep_primecontroller+0x39e>
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88374:	2100      	movs	r1, #0
   88376:	2004      	movs	r0, #4
   88378:	4ba7      	ldr	r3, [pc, #668]	; (88618 <cl_dprep_primecontroller+0x600>)
   8837a:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   8837c:	1d3b      	adds	r3, r7, #4
   8837e:	2200      	movs	r2, #0
   88380:	4619      	mov	r1, r3
   88382:	2023      	movs	r0, #35	; 0x23
   88384:	4ba5      	ldr	r3, [pc, #660]	; (8861c <cl_dprep_primecontroller+0x604>)
   88386:	4798      	blx	r3
   88388:	4603      	mov	r3, r0
   8838a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   8838c:	4ba5      	ldr	r3, [pc, #660]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8838e:	2203      	movs	r2, #3
   88390:	701a      	strb	r2, [r3, #0]
							break;
   88392:	e010      	b.n	883b6 <cl_dprep_primecontroller+0x39e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88394:	2100      	movs	r1, #0
   88396:	2002      	movs	r0, #2
   88398:	4b9f      	ldr	r3, [pc, #636]	; (88618 <cl_dprep_primecontroller+0x600>)
   8839a:	4798      	blx	r3
							break;
   8839c:	e00b      	b.n	883b6 <cl_dprep_primecontroller+0x39e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8839e:	2100      	movs	r1, #0
   883a0:	2004      	movs	r0, #4
   883a2:	4b9d      	ldr	r3, [pc, #628]	; (88618 <cl_dprep_primecontroller+0x600>)
   883a4:	4798      	blx	r3
							break;
   883a6:	e006      	b.n	883b6 <cl_dprep_primecontroller+0x39e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   883a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   883ac:	4619      	mov	r1, r3
   883ae:	2001      	movs	r0, #1
   883b0:	4b99      	ldr	r3, [pc, #612]	; (88618 <cl_dprep_primecontroller+0x600>)
   883b2:	4798      	blx	r3
							break;
   883b4:	bf00      	nop
						}
			break;
   883b6:	e2c9      	b.n	8894c <cl_dprep_primecontroller+0x934>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   883b8:	79fb      	ldrb	r3, [r7, #7]
   883ba:	3b01      	subs	r3, #1
   883bc:	2b0d      	cmp	r3, #13
   883be:	f200 82c7 	bhi.w	88950 <cl_dprep_primecontroller+0x938>
   883c2:	a201      	add	r2, pc, #4	; (adr r2, 883c8 <cl_dprep_primecontroller+0x3b0>)
   883c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   883c8:	0008843f 	.word	0x0008843f
   883cc:	00088951 	.word	0x00088951
   883d0:	00088951 	.word	0x00088951
   883d4:	00088951 	.word	0x00088951
   883d8:	00088401 	.word	0x00088401
   883dc:	000884c7 	.word	0x000884c7
   883e0:	00088951 	.word	0x00088951
   883e4:	0008848d 	.word	0x0008848d
   883e8:	00088951 	.word	0x00088951
   883ec:	00088951 	.word	0x00088951
   883f0:	00088951 	.word	0x00088951
   883f4:	000884a5 	.word	0x000884a5
   883f8:	000884af 	.word	0x000884af
   883fc:	000884b9 	.word	0x000884b9
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88400:	2206      	movs	r2, #6
   88402:	4989      	ldr	r1, [pc, #548]	; (88628 <cl_dprep_primecontroller+0x610>)
   88404:	2018      	movs	r0, #24
   88406:	4b85      	ldr	r3, [pc, #532]	; (8861c <cl_dprep_primecontroller+0x604>)
   88408:	4798      	blx	r3
							cl_prime_min =  0;
   8840a:	4b88      	ldr	r3, [pc, #544]	; (8862c <cl_dprep_primecontroller+0x614>)
   8840c:	2200      	movs	r2, #0
   8840e:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88410:	4b87      	ldr	r3, [pc, #540]	; (88630 <cl_dprep_primecontroller+0x618>)
   88412:	2200      	movs	r2, #0
   88414:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88416:	2100      	movs	r1, #0
   88418:	2002      	movs	r0, #2
   8841a:	4b7f      	ldr	r3, [pc, #508]	; (88618 <cl_dprep_primecontroller+0x600>)
   8841c:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   8841e:	1d3b      	adds	r3, r7, #4
   88420:	2200      	movs	r2, #0
   88422:	4619      	mov	r1, r3
   88424:	202f      	movs	r0, #47	; 0x2f
   88426:	4b7d      	ldr	r3, [pc, #500]	; (8861c <cl_dprep_primecontroller+0x604>)
   88428:	4798      	blx	r3
   8842a:	4603      	mov	r3, r0
   8842c:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8842e:	4b7c      	ldr	r3, [pc, #496]	; (88620 <cl_dprep_primecontroller+0x608>)
   88430:	4798      	blx	r3
   88432:	4603      	mov	r3, r0
   88434:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88436:	4b7b      	ldr	r3, [pc, #492]	; (88624 <cl_dprep_primecontroller+0x60c>)
   88438:	2205      	movs	r2, #5
   8843a:	701a      	strb	r2, [r3, #0]
							break;
   8843c:	e044      	b.n	884c8 <cl_dprep_primecontroller+0x4b0>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8843e:	2206      	movs	r2, #6
   88440:	497c      	ldr	r1, [pc, #496]	; (88634 <cl_dprep_primecontroller+0x61c>)
   88442:	2018      	movs	r0, #24
   88444:	4b75      	ldr	r3, [pc, #468]	; (8861c <cl_dprep_primecontroller+0x604>)
   88446:	4798      	blx	r3
							cl_prime_min =  0;
   88448:	4b78      	ldr	r3, [pc, #480]	; (8862c <cl_dprep_primecontroller+0x614>)
   8844a:	2200      	movs	r2, #0
   8844c:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   8844e:	4b78      	ldr	r3, [pc, #480]	; (88630 <cl_dprep_primecontroller+0x618>)
   88450:	2200      	movs	r2, #0
   88452:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88454:	2100      	movs	r1, #0
   88456:	2002      	movs	r0, #2
   88458:	4b6f      	ldr	r3, [pc, #444]	; (88618 <cl_dprep_primecontroller+0x600>)
   8845a:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8845c:	1d3b      	adds	r3, r7, #4
   8845e:	2200      	movs	r2, #0
   88460:	4619      	mov	r1, r3
   88462:	200d      	movs	r0, #13
   88464:	4b6d      	ldr	r3, [pc, #436]	; (8861c <cl_dprep_primecontroller+0x604>)
   88466:	4798      	blx	r3
   88468:	4603      	mov	r3, r0
   8846a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8846c:	1d3b      	adds	r3, r7, #4
   8846e:	2200      	movs	r2, #0
   88470:	4619      	mov	r1, r3
   88472:	2024      	movs	r0, #36	; 0x24
   88474:	4b69      	ldr	r3, [pc, #420]	; (8861c <cl_dprep_primecontroller+0x604>)
   88476:	4798      	blx	r3
   88478:	4603      	mov	r3, r0
   8847a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8847c:	4b68      	ldr	r3, [pc, #416]	; (88620 <cl_dprep_primecontroller+0x608>)
   8847e:	4798      	blx	r3
   88480:	4603      	mov	r3, r0
   88482:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88484:	4b67      	ldr	r3, [pc, #412]	; (88624 <cl_dprep_primecontroller+0x60c>)
   88486:	2201      	movs	r2, #1
   88488:	701a      	strb	r2, [r3, #0]
							break;
   8848a:	e01d      	b.n	884c8 <cl_dprep_primecontroller+0x4b0>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8848c:	2100      	movs	r1, #0
   8848e:	2002      	movs	r0, #2
   88490:	4b61      	ldr	r3, [pc, #388]	; (88618 <cl_dprep_primecontroller+0x600>)
   88492:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88494:	4b68      	ldr	r3, [pc, #416]	; (88638 <cl_dprep_primecontroller+0x620>)
   88496:	4798      	blx	r3
   88498:	4603      	mov	r3, r0
   8849a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8849c:	4b61      	ldr	r3, [pc, #388]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8849e:	2209      	movs	r2, #9
   884a0:	701a      	strb	r2, [r3, #0]
							break;
   884a2:	e011      	b.n	884c8 <cl_dprep_primecontroller+0x4b0>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   884a4:	2100      	movs	r1, #0
   884a6:	2002      	movs	r0, #2
   884a8:	4b5b      	ldr	r3, [pc, #364]	; (88618 <cl_dprep_primecontroller+0x600>)
   884aa:	4798      	blx	r3
							break;
   884ac:	e00c      	b.n	884c8 <cl_dprep_primecontroller+0x4b0>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   884ae:	2100      	movs	r1, #0
   884b0:	2004      	movs	r0, #4
   884b2:	4b59      	ldr	r3, [pc, #356]	; (88618 <cl_dprep_primecontroller+0x600>)
   884b4:	4798      	blx	r3
							break;
   884b6:	e007      	b.n	884c8 <cl_dprep_primecontroller+0x4b0>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   884b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   884bc:	4619      	mov	r1, r3
   884be:	2001      	movs	r0, #1
   884c0:	4b55      	ldr	r3, [pc, #340]	; (88618 <cl_dprep_primecontroller+0x600>)
   884c2:	4798      	blx	r3
							break;
   884c4:	e000      	b.n	884c8 <cl_dprep_primecontroller+0x4b0>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   884c6:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   884c8:	e242      	b.n	88950 <cl_dprep_primecontroller+0x938>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   884ca:	79fb      	ldrb	r3, [r7, #7]
   884cc:	3b02      	subs	r3, #2
   884ce:	2b0c      	cmp	r3, #12
   884d0:	d879      	bhi.n	885c6 <cl_dprep_primecontroller+0x5ae>
   884d2:	a201      	add	r2, pc, #4	; (adr r2, 884d8 <cl_dprep_primecontroller+0x4c0>)
   884d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   884d8:	00088575 	.word	0x00088575
   884dc:	0008850d 	.word	0x0008850d
   884e0:	00088595 	.word	0x00088595
   884e4:	000885c7 	.word	0x000885c7
   884e8:	000885c7 	.word	0x000885c7
   884ec:	000885c7 	.word	0x000885c7
   884f0:	000885c7 	.word	0x000885c7
   884f4:	000885c7 	.word	0x000885c7
   884f8:	000885c7 	.word	0x000885c7
   884fc:	00088515 	.word	0x00088515
   88500:	000885a5 	.word	0x000885a5
   88504:	000885af 	.word	0x000885af
   88508:	000885b9 	.word	0x000885b9
					{
						case CL_DPREP_PRIME_PRIME_ALARM:
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED;
   8850c:	4b45      	ldr	r3, [pc, #276]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8850e:	2206      	movs	r2, #6
   88510:	701a      	strb	r2, [r3, #0]
						break;
   88512:	e05b      	b.n	885cc <cl_dprep_primecontroller+0x5b4>
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   88514:	4b46      	ldr	r3, [pc, #280]	; (88630 <cl_dprep_primecontroller+0x618>)
   88516:	f993 3000 	ldrsb.w	r3, [r3]
   8851a:	b2da      	uxtb	r2, r3
   8851c:	3201      	adds	r2, #1
   8851e:	b2d2      	uxtb	r2, r2
   88520:	b251      	sxtb	r1, r2
   88522:	4a43      	ldr	r2, [pc, #268]	; (88630 <cl_dprep_primecontroller+0x618>)
   88524:	7011      	strb	r1, [r2, #0]
   88526:	2b3b      	cmp	r3, #59	; 0x3b
   88528:	dd0f      	ble.n	8854a <cl_dprep_primecontroller+0x532>
						{
							cl_prime_sec = 0;
   8852a:	4b41      	ldr	r3, [pc, #260]	; (88630 <cl_dprep_primecontroller+0x618>)
   8852c:	2200      	movs	r2, #0
   8852e:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   88530:	4b3e      	ldr	r3, [pc, #248]	; (8862c <cl_dprep_primecontroller+0x614>)
   88532:	f993 3000 	ldrsb.w	r3, [r3]
   88536:	b2db      	uxtb	r3, r3
   88538:	3301      	adds	r3, #1
   8853a:	b2db      	uxtb	r3, r3
   8853c:	b25a      	sxtb	r2, r3
   8853e:	4b3b      	ldr	r3, [pc, #236]	; (8862c <cl_dprep_primecontroller+0x614>)
   88540:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88542:	4b37      	ldr	r3, [pc, #220]	; (88620 <cl_dprep_primecontroller+0x608>)
   88544:	4798      	blx	r3
   88546:	4603      	mov	r3, r0
   88548:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   8854a:	4b38      	ldr	r3, [pc, #224]	; (8862c <cl_dprep_primecontroller+0x614>)
   8854c:	f993 3000 	ldrsb.w	r3, [r3]
   88550:	2b00      	cmp	r3, #0
   88552:	dd3a      	ble.n	885ca <cl_dprep_primecontroller+0x5b2>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88554:	2100      	movs	r1, #0
   88556:	2004      	movs	r0, #4
   88558:	4b2f      	ldr	r3, [pc, #188]	; (88618 <cl_dprep_primecontroller+0x600>)
   8855a:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   8855c:	1d3b      	adds	r3, r7, #4
   8855e:	2200      	movs	r2, #0
   88560:	4619      	mov	r1, r3
   88562:	2031      	movs	r0, #49	; 0x31
   88564:	4b2d      	ldr	r3, [pc, #180]	; (8861c <cl_dprep_primecontroller+0x604>)
   88566:	4798      	blx	r3
   88568:	4603      	mov	r3, r0
   8856a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   8856c:	4b2d      	ldr	r3, [pc, #180]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8856e:	2208      	movs	r2, #8
   88570:	701a      	strb	r2, [r3, #0]
						
						}

						break;
   88572:	e02a      	b.n	885ca <cl_dprep_primecontroller+0x5b2>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88574:	2100      	movs	r1, #0
   88576:	2004      	movs	r0, #4
   88578:	4b27      	ldr	r3, [pc, #156]	; (88618 <cl_dprep_primecontroller+0x600>)
   8857a:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   8857c:	1d3b      	adds	r3, r7, #4
   8857e:	2200      	movs	r2, #0
   88580:	4619      	mov	r1, r3
   88582:	2023      	movs	r0, #35	; 0x23
   88584:	4b25      	ldr	r3, [pc, #148]	; (8861c <cl_dprep_primecontroller+0x604>)
   88586:	4798      	blx	r3
   88588:	4603      	mov	r3, r0
   8858a:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   8858c:	4b25      	ldr	r3, [pc, #148]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8858e:	2203      	movs	r2, #3
   88590:	701a      	strb	r2, [r3, #0]
						break;
   88592:	e01b      	b.n	885cc <cl_dprep_primecontroller+0x5b4>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88594:	2100      	movs	r1, #0
   88596:	2004      	movs	r0, #4
   88598:	4b1f      	ldr	r3, [pc, #124]	; (88618 <cl_dprep_primecontroller+0x600>)
   8859a:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   8859c:	4b21      	ldr	r3, [pc, #132]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8859e:	2204      	movs	r2, #4
   885a0:	701a      	strb	r2, [r3, #0]
						break;
   885a2:	e013      	b.n	885cc <cl_dprep_primecontroller+0x5b4>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   885a4:	2100      	movs	r1, #0
   885a6:	2002      	movs	r0, #2
   885a8:	4b1b      	ldr	r3, [pc, #108]	; (88618 <cl_dprep_primecontroller+0x600>)
   885aa:	4798      	blx	r3
						break;
   885ac:	e00e      	b.n	885cc <cl_dprep_primecontroller+0x5b4>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   885ae:	2100      	movs	r1, #0
   885b0:	2004      	movs	r0, #4
   885b2:	4b19      	ldr	r3, [pc, #100]	; (88618 <cl_dprep_primecontroller+0x600>)
   885b4:	4798      	blx	r3
						break;
   885b6:	e009      	b.n	885cc <cl_dprep_primecontroller+0x5b4>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   885b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   885bc:	4619      	mov	r1, r3
   885be:	2001      	movs	r0, #1
   885c0:	4b15      	ldr	r3, [pc, #84]	; (88618 <cl_dprep_primecontroller+0x600>)
   885c2:	4798      	blx	r3
						break;
   885c4:	e002      	b.n	885cc <cl_dprep_primecontroller+0x5b4>
						default:break;
   885c6:	bf00      	nop
   885c8:	e1e3      	b.n	88992 <cl_dprep_primecontroller+0x97a>
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
						
						}

						break;
   885ca:	bf00      	nop
						break;
						default:break;
					}

			
			break;
   885cc:	e1e1      	b.n	88992 <cl_dprep_primecontroller+0x97a>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
   885ce:	79fb      	ldrb	r3, [r7, #7]
   885d0:	2b05      	cmp	r3, #5
   885d2:	d000      	beq.n	885d6 <cl_dprep_primecontroller+0x5be>
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
								break;
								default:break;
   885d4:	e01e      	b.n	88614 <cl_dprep_primecontroller+0x5fc>
			break;
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
									{
							case CL_DPREP_PRIME_RCIRC_START:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   885d6:	2206      	movs	r2, #6
   885d8:	4913      	ldr	r1, [pc, #76]	; (88628 <cl_dprep_primecontroller+0x610>)
   885da:	2018      	movs	r0, #24
   885dc:	4b0f      	ldr	r3, [pc, #60]	; (8861c <cl_dprep_primecontroller+0x604>)
   885de:	4798      	blx	r3
									cl_prime_min =  0;
   885e0:	4b12      	ldr	r3, [pc, #72]	; (8862c <cl_dprep_primecontroller+0x614>)
   885e2:	2200      	movs	r2, #0
   885e4:	701a      	strb	r2, [r3, #0]
									cl_prime_sec = 0;
   885e6:	4b12      	ldr	r3, [pc, #72]	; (88630 <cl_dprep_primecontroller+0x618>)
   885e8:	2200      	movs	r2, #0
   885ea:	701a      	strb	r2, [r3, #0]
					
									cl_bp_controller(CL_BP_EVENT_START,0);
   885ec:	2100      	movs	r1, #0
   885ee:	2002      	movs	r0, #2
   885f0:	4b09      	ldr	r3, [pc, #36]	; (88618 <cl_dprep_primecontroller+0x600>)
   885f2:	4798      	blx	r3
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   885f4:	1d3b      	adds	r3, r7, #4
   885f6:	2200      	movs	r2, #0
   885f8:	4619      	mov	r1, r3
   885fa:	202f      	movs	r0, #47	; 0x2f
   885fc:	4b07      	ldr	r3, [pc, #28]	; (8861c <cl_dprep_primecontroller+0x604>)
   885fe:	4798      	blx	r3
   88600:	4603      	mov	r3, r0
   88602:	73fb      	strb	r3, [r7, #15]
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88604:	4b06      	ldr	r3, [pc, #24]	; (88620 <cl_dprep_primecontroller+0x608>)
   88606:	4798      	blx	r3
   88608:	4603      	mov	r3, r0
   8860a:	73fb      	strb	r3, [r7, #15]
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   8860c:	4b05      	ldr	r3, [pc, #20]	; (88624 <cl_dprep_primecontroller+0x60c>)
   8860e:	2205      	movs	r2, #5
   88610:	701a      	strb	r2, [r3, #0]
								break;
   88612:	bf00      	nop
								default:break;
									}
			break;
   88614:	e1bd      	b.n	88992 <cl_dprep_primecontroller+0x97a>
   88616:	bf00      	nop
   88618:	00093f5d 	.word	0x00093f5d
   8861c:	0009cbd5 	.word	0x0009cbd5
   88620:	0008899d 	.word	0x0008899d
   88624:	20071866 	.word	0x20071866
   88628:	000a9fb0 	.word	0x000a9fb0
   8862c:	20071869 	.word	0x20071869
   88630:	20071868 	.word	0x20071868
   88634:	000a9fa8 	.word	0x000a9fa8
   88638:	00088a15 	.word	0x00088a15
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   8863c:	79fb      	ldrb	r3, [r7, #7]
   8863e:	3b01      	subs	r3, #1
   88640:	2b0d      	cmp	r3, #13
   88642:	f200 8187 	bhi.w	88954 <cl_dprep_primecontroller+0x93c>
   88646:	a201      	add	r2, pc, #4	; (adr r2, 8864c <cl_dprep_primecontroller+0x634>)
   88648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8864c:	000886c3 	.word	0x000886c3
   88650:	00088955 	.word	0x00088955
   88654:	00088955 	.word	0x00088955
   88658:	00088955 	.word	0x00088955
   8865c:	00088685 	.word	0x00088685
   88660:	0008875b 	.word	0x0008875b
   88664:	00088955 	.word	0x00088955
   88668:	00088711 	.word	0x00088711
   8866c:	00088955 	.word	0x00088955
   88670:	00088955 	.word	0x00088955
   88674:	00088955 	.word	0x00088955
   88678:	00088739 	.word	0x00088739
   8867c:	00088743 	.word	0x00088743
   88680:	0008874d 	.word	0x0008874d
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88684:	2206      	movs	r2, #6
   88686:	49b5      	ldr	r1, [pc, #724]	; (8895c <cl_dprep_primecontroller+0x944>)
   88688:	2018      	movs	r0, #24
   8868a:	4bb5      	ldr	r3, [pc, #724]	; (88960 <cl_dprep_primecontroller+0x948>)
   8868c:	4798      	blx	r3
							cl_prime_min =  0;
   8868e:	4bb5      	ldr	r3, [pc, #724]	; (88964 <cl_dprep_primecontroller+0x94c>)
   88690:	2200      	movs	r2, #0
   88692:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88694:	4bb4      	ldr	r3, [pc, #720]	; (88968 <cl_dprep_primecontroller+0x950>)
   88696:	2200      	movs	r2, #0
   88698:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   8869a:	2100      	movs	r1, #0
   8869c:	2002      	movs	r0, #2
   8869e:	4bb3      	ldr	r3, [pc, #716]	; (8896c <cl_dprep_primecontroller+0x954>)
   886a0:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   886a2:	1d3b      	adds	r3, r7, #4
   886a4:	2200      	movs	r2, #0
   886a6:	4619      	mov	r1, r3
   886a8:	202f      	movs	r0, #47	; 0x2f
   886aa:	4bad      	ldr	r3, [pc, #692]	; (88960 <cl_dprep_primecontroller+0x948>)
   886ac:	4798      	blx	r3
   886ae:	4603      	mov	r3, r0
   886b0:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   886b2:	4baf      	ldr	r3, [pc, #700]	; (88970 <cl_dprep_primecontroller+0x958>)
   886b4:	4798      	blx	r3
   886b6:	4603      	mov	r3, r0
   886b8:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   886ba:	4bae      	ldr	r3, [pc, #696]	; (88974 <cl_dprep_primecontroller+0x95c>)
   886bc:	2205      	movs	r2, #5
   886be:	701a      	strb	r2, [r3, #0]
							break;
   886c0:	e04c      	b.n	8875c <cl_dprep_primecontroller+0x744>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   886c2:	2206      	movs	r2, #6
   886c4:	49ac      	ldr	r1, [pc, #688]	; (88978 <cl_dprep_primecontroller+0x960>)
   886c6:	2018      	movs	r0, #24
   886c8:	4ba5      	ldr	r3, [pc, #660]	; (88960 <cl_dprep_primecontroller+0x948>)
   886ca:	4798      	blx	r3
							cl_prime_min =  0;
   886cc:	4ba5      	ldr	r3, [pc, #660]	; (88964 <cl_dprep_primecontroller+0x94c>)
   886ce:	2200      	movs	r2, #0
   886d0:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   886d2:	4ba5      	ldr	r3, [pc, #660]	; (88968 <cl_dprep_primecontroller+0x950>)
   886d4:	2200      	movs	r2, #0
   886d6:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   886d8:	2100      	movs	r1, #0
   886da:	2002      	movs	r0, #2
   886dc:	4ba3      	ldr	r3, [pc, #652]	; (8896c <cl_dprep_primecontroller+0x954>)
   886de:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   886e0:	1d3b      	adds	r3, r7, #4
   886e2:	2200      	movs	r2, #0
   886e4:	4619      	mov	r1, r3
   886e6:	200d      	movs	r0, #13
   886e8:	4b9d      	ldr	r3, [pc, #628]	; (88960 <cl_dprep_primecontroller+0x948>)
   886ea:	4798      	blx	r3
   886ec:	4603      	mov	r3, r0
   886ee:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   886f0:	1d3b      	adds	r3, r7, #4
   886f2:	2200      	movs	r2, #0
   886f4:	4619      	mov	r1, r3
   886f6:	2024      	movs	r0, #36	; 0x24
   886f8:	4b99      	ldr	r3, [pc, #612]	; (88960 <cl_dprep_primecontroller+0x948>)
   886fa:	4798      	blx	r3
   886fc:	4603      	mov	r3, r0
   886fe:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88700:	4b9b      	ldr	r3, [pc, #620]	; (88970 <cl_dprep_primecontroller+0x958>)
   88702:	4798      	blx	r3
   88704:	4603      	mov	r3, r0
   88706:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88708:	4b9a      	ldr	r3, [pc, #616]	; (88974 <cl_dprep_primecontroller+0x95c>)
   8870a:	2201      	movs	r2, #1
   8870c:	701a      	strb	r2, [r3, #0]
							break;
   8870e:	e025      	b.n	8875c <cl_dprep_primecontroller+0x744>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88710:	2100      	movs	r1, #0
   88712:	2002      	movs	r0, #2
   88714:	4b95      	ldr	r3, [pc, #596]	; (8896c <cl_dprep_primecontroller+0x954>)
   88716:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88718:	1d3b      	adds	r3, r7, #4
   8871a:	2200      	movs	r2, #0
   8871c:	4619      	mov	r1, r3
   8871e:	2028      	movs	r0, #40	; 0x28
   88720:	4b8f      	ldr	r3, [pc, #572]	; (88960 <cl_dprep_primecontroller+0x948>)
   88722:	4798      	blx	r3
   88724:	4603      	mov	r3, r0
   88726:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88728:	4b94      	ldr	r3, [pc, #592]	; (8897c <cl_dprep_primecontroller+0x964>)
   8872a:	4798      	blx	r3
   8872c:	4603      	mov	r3, r0
   8872e:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88730:	4b90      	ldr	r3, [pc, #576]	; (88974 <cl_dprep_primecontroller+0x95c>)
   88732:	2209      	movs	r2, #9
   88734:	701a      	strb	r2, [r3, #0]
							break;
   88736:	e011      	b.n	8875c <cl_dprep_primecontroller+0x744>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88738:	2100      	movs	r1, #0
   8873a:	2002      	movs	r0, #2
   8873c:	4b8b      	ldr	r3, [pc, #556]	; (8896c <cl_dprep_primecontroller+0x954>)
   8873e:	4798      	blx	r3
							break;
   88740:	e00c      	b.n	8875c <cl_dprep_primecontroller+0x744>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88742:	2100      	movs	r1, #0
   88744:	2004      	movs	r0, #4
   88746:	4b89      	ldr	r3, [pc, #548]	; (8896c <cl_dprep_primecontroller+0x954>)
   88748:	4798      	blx	r3
							break;
   8874a:	e007      	b.n	8875c <cl_dprep_primecontroller+0x744>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   8874c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88750:	4619      	mov	r1, r3
   88752:	2001      	movs	r0, #1
   88754:	4b85      	ldr	r3, [pc, #532]	; (8896c <cl_dprep_primecontroller+0x954>)
   88756:	4798      	blx	r3
							break;
   88758:	e000      	b.n	8875c <cl_dprep_primecontroller+0x744>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   8875a:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   8875c:	e0fa      	b.n	88954 <cl_dprep_primecontroller+0x93c>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   8875e:	79fb      	ldrb	r3, [r7, #7]
   88760:	3b02      	subs	r3, #2
   88762:	2b0c      	cmp	r3, #12
   88764:	d86e      	bhi.n	88844 <cl_dprep_primecontroller+0x82c>
   88766:	a201      	add	r2, pc, #4	; (adr r2, 8876c <cl_dprep_primecontroller+0x754>)
   88768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8876c:	000887d9 	.word	0x000887d9
   88770:	000887a1 	.word	0x000887a1
   88774:	00088845 	.word	0x00088845
   88778:	00088845 	.word	0x00088845
   8877c:	00088845 	.word	0x00088845
   88780:	00088845 	.word	0x00088845
   88784:	00088845 	.word	0x00088845
   88788:	000887d9 	.word	0x000887d9
   8878c:	0008881b 	.word	0x0008881b
   88790:	000887a9 	.word	0x000887a9
   88794:	00088823 	.word	0x00088823
   88798:	0008882d 	.word	0x0008882d
   8879c:	00088837 	.word	0x00088837
						{
							case CL_DPREP_PRIME_PRIME_ALARM:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   887a0:	4b74      	ldr	r3, [pc, #464]	; (88974 <cl_dprep_primecontroller+0x95c>)
   887a2:	220b      	movs	r2, #11
   887a4:	701a      	strb	r2, [r3, #0]
							break;
   887a6:	e050      	b.n	8884a <cl_dprep_primecontroller+0x832>
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   887a8:	4b75      	ldr	r3, [pc, #468]	; (88980 <cl_dprep_primecontroller+0x968>)
   887aa:	f993 3000 	ldrsb.w	r3, [r3]
   887ae:	b2da      	uxtb	r2, r3
   887b0:	3201      	adds	r2, #1
   887b2:	b2d2      	uxtb	r2, r2
   887b4:	b251      	sxtb	r1, r2
   887b6:	4a72      	ldr	r2, [pc, #456]	; (88980 <cl_dprep_primecontroller+0x968>)
   887b8:	7011      	strb	r1, [r2, #0]
   887ba:	2b3b      	cmp	r3, #59	; 0x3b
   887bc:	dd44      	ble.n	88848 <cl_dprep_primecontroller+0x830>
							{
								cl_dialyser_prime_sec = 0;
   887be:	4b70      	ldr	r3, [pc, #448]	; (88980 <cl_dprep_primecontroller+0x968>)
   887c0:	2200      	movs	r2, #0
   887c2:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   887c4:	4b6f      	ldr	r3, [pc, #444]	; (88984 <cl_dprep_primecontroller+0x96c>)
   887c6:	f993 3000 	ldrsb.w	r3, [r3]
   887ca:	b2db      	uxtb	r3, r3
   887cc:	3301      	adds	r3, #1
   887ce:	b2db      	uxtb	r3, r3
   887d0:	b25a      	sxtb	r2, r3
   887d2:	4b6c      	ldr	r3, [pc, #432]	; (88984 <cl_dprep_primecontroller+0x96c>)
   887d4:	701a      	strb	r2, [r3, #0]
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   887d6:	e037      	b.n	88848 <cl_dprep_primecontroller+0x830>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   887d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   887dc:	2b01      	cmp	r3, #1
   887de:	d107      	bne.n	887f0 <cl_dprep_primecontroller+0x7d8>
								{
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   887e0:	2100      	movs	r1, #0
   887e2:	2004      	movs	r0, #4
   887e4:	4b61      	ldr	r3, [pc, #388]	; (8896c <cl_dprep_primecontroller+0x954>)
   887e6:	4798      	blx	r3
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   887e8:	4b62      	ldr	r3, [pc, #392]	; (88974 <cl_dprep_primecontroller+0x95c>)
   887ea:	220a      	movs	r2, #10
   887ec:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   887ee:	e02c      	b.n	8884a <cl_dprep_primecontroller+0x832>
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									sv_cntrl_enable_bypass();
   887f0:	4b65      	ldr	r3, [pc, #404]	; (88988 <cl_dprep_primecontroller+0x970>)
   887f2:	4798      	blx	r3
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   887f4:	2100      	movs	r1, #0
   887f6:	2004      	movs	r0, #4
   887f8:	4b5c      	ldr	r3, [pc, #368]	; (8896c <cl_dprep_primecontroller+0x954>)
   887fa:	4798      	blx	r3
									cl_dialyser_prime_sec = 0;
   887fc:	4b60      	ldr	r3, [pc, #384]	; (88980 <cl_dprep_primecontroller+0x968>)
   887fe:	2200      	movs	r2, #0
   88800:	701a      	strb	r2, [r3, #0]
									cl_dialyser_prime_min = 0;
   88802:	4b60      	ldr	r3, [pc, #384]	; (88984 <cl_dprep_primecontroller+0x96c>)
   88804:	2200      	movs	r2, #0
   88806:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88808:	4b5a      	ldr	r3, [pc, #360]	; (88974 <cl_dprep_primecontroller+0x95c>)
   8880a:	220b      	movs	r2, #11
   8880c:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
   8880e:	2200      	movs	r2, #0
   88810:	2100      	movs	r1, #0
   88812:	2029      	movs	r0, #41	; 0x29
   88814:	4b52      	ldr	r3, [pc, #328]	; (88960 <cl_dprep_primecontroller+0x948>)
   88816:	4798      	blx	r3
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   88818:	e017      	b.n	8884a <cl_dprep_primecontroller+0x832>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   8881a:	4b56      	ldr	r3, [pc, #344]	; (88974 <cl_dprep_primecontroller+0x95c>)
   8881c:	220c      	movs	r2, #12
   8881e:	701a      	strb	r2, [r3, #0]
							break;
   88820:	e013      	b.n	8884a <cl_dprep_primecontroller+0x832>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88822:	2100      	movs	r1, #0
   88824:	2002      	movs	r0, #2
   88826:	4b51      	ldr	r3, [pc, #324]	; (8896c <cl_dprep_primecontroller+0x954>)
   88828:	4798      	blx	r3
							break;
   8882a:	e00e      	b.n	8884a <cl_dprep_primecontroller+0x832>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8882c:	2100      	movs	r1, #0
   8882e:	2004      	movs	r0, #4
   88830:	4b4e      	ldr	r3, [pc, #312]	; (8896c <cl_dprep_primecontroller+0x954>)
   88832:	4798      	blx	r3
							break;
   88834:	e009      	b.n	8884a <cl_dprep_primecontroller+0x832>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88836:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8883a:	4619      	mov	r1, r3
   8883c:	2001      	movs	r0, #1
   8883e:	4b4b      	ldr	r3, [pc, #300]	; (8896c <cl_dprep_primecontroller+0x954>)
   88840:	4798      	blx	r3
							break;
   88842:	e002      	b.n	8884a <cl_dprep_primecontroller+0x832>
							default:break;
   88844:	bf00      	nop
   88846:	e0a4      	b.n	88992 <cl_dprep_primecontroller+0x97a>
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   88848:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							default:break;
						}
			break;
   8884a:	e0a2      	b.n	88992 <cl_dprep_primecontroller+0x97a>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   8884c:	79fb      	ldrb	r3, [r7, #7]
   8884e:	3b08      	subs	r3, #8
   88850:	2b06      	cmp	r3, #6
   88852:	f200 8081 	bhi.w	88958 <cl_dprep_primecontroller+0x940>
   88856:	a201      	add	r2, pc, #4	; (adr r2, 8885c <cl_dprep_primecontroller+0x844>)
   88858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8885c:	00088879 	.word	0x00088879
   88860:	00088959 	.word	0x00088959
   88864:	00088959 	.word	0x00088959
   88868:	00088959 	.word	0x00088959
   8886c:	000888a5 	.word	0x000888a5
   88870:	000888af 	.word	0x000888af
   88874:	000888b9 	.word	0x000888b9
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							sv_cntrl_disable_bypass();
   88878:	4b44      	ldr	r3, [pc, #272]	; (8898c <cl_dprep_primecontroller+0x974>)
   8887a:	4798      	blx	r3
							cl_bp_controller(CL_BP_EVENT_START,0);
   8887c:	2100      	movs	r1, #0
   8887e:	2002      	movs	r0, #2
   88880:	4b3a      	ldr	r3, [pc, #232]	; (8896c <cl_dprep_primecontroller+0x954>)
   88882:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88884:	1d3b      	adds	r3, r7, #4
   88886:	2200      	movs	r2, #0
   88888:	4619      	mov	r1, r3
   8888a:	2028      	movs	r0, #40	; 0x28
   8888c:	4b34      	ldr	r3, [pc, #208]	; (88960 <cl_dprep_primecontroller+0x948>)
   8888e:	4798      	blx	r3
   88890:	4603      	mov	r3, r0
   88892:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88894:	4b39      	ldr	r3, [pc, #228]	; (8897c <cl_dprep_primecontroller+0x964>)
   88896:	4798      	blx	r3
   88898:	4603      	mov	r3, r0
   8889a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8889c:	4b35      	ldr	r3, [pc, #212]	; (88974 <cl_dprep_primecontroller+0x95c>)
   8889e:	2209      	movs	r2, #9
   888a0:	701a      	strb	r2, [r3, #0]
							break;
   888a2:	e010      	b.n	888c6 <cl_dprep_primecontroller+0x8ae>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   888a4:	2100      	movs	r1, #0
   888a6:	2002      	movs	r0, #2
   888a8:	4b30      	ldr	r3, [pc, #192]	; (8896c <cl_dprep_primecontroller+0x954>)
   888aa:	4798      	blx	r3
							break;
   888ac:	e00b      	b.n	888c6 <cl_dprep_primecontroller+0x8ae>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   888ae:	2100      	movs	r1, #0
   888b0:	2004      	movs	r0, #4
   888b2:	4b2e      	ldr	r3, [pc, #184]	; (8896c <cl_dprep_primecontroller+0x954>)
   888b4:	4798      	blx	r3
							break;
   888b6:	e006      	b.n	888c6 <cl_dprep_primecontroller+0x8ae>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   888b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   888bc:	4619      	mov	r1, r3
   888be:	2001      	movs	r0, #1
   888c0:	4b2a      	ldr	r3, [pc, #168]	; (8896c <cl_dprep_primecontroller+0x954>)
   888c2:	4798      	blx	r3
							break;
   888c4:	bf00      	nop
						}
			break;
   888c6:	e047      	b.n	88958 <cl_dprep_primecontroller+0x940>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   888c8:	79fb      	ldrb	r3, [r7, #7]
   888ca:	3b08      	subs	r3, #8
   888cc:	2b06      	cmp	r3, #6
   888ce:	d85f      	bhi.n	88990 <cl_dprep_primecontroller+0x978>
   888d0:	a201      	add	r2, pc, #4	; (adr r2, 888d8 <cl_dprep_primecontroller+0x8c0>)
   888d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   888d6:	bf00      	nop
   888d8:	000888f5 	.word	0x000888f5
   888dc:	0008891d 	.word	0x0008891d
   888e0:	00088991 	.word	0x00088991
   888e4:	00088991 	.word	0x00088991
   888e8:	00088925 	.word	0x00088925
   888ec:	0008892f 	.word	0x0008892f
   888f0:	00088939 	.word	0x00088939
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   888f4:	2100      	movs	r1, #0
   888f6:	2002      	movs	r0, #2
   888f8:	4b1c      	ldr	r3, [pc, #112]	; (8896c <cl_dprep_primecontroller+0x954>)
   888fa:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   888fc:	1d3b      	adds	r3, r7, #4
   888fe:	2200      	movs	r2, #0
   88900:	4619      	mov	r1, r3
   88902:	2028      	movs	r0, #40	; 0x28
   88904:	4b16      	ldr	r3, [pc, #88]	; (88960 <cl_dprep_primecontroller+0x948>)
   88906:	4798      	blx	r3
   88908:	4603      	mov	r3, r0
   8890a:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   8890c:	4b1b      	ldr	r3, [pc, #108]	; (8897c <cl_dprep_primecontroller+0x964>)
   8890e:	4798      	blx	r3
   88910:	4603      	mov	r3, r0
   88912:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88914:	4b17      	ldr	r3, [pc, #92]	; (88974 <cl_dprep_primecontroller+0x95c>)
   88916:	2209      	movs	r2, #9
   88918:	701a      	strb	r2, [r3, #0]
							break;
   8891a:	e014      	b.n	88946 <cl_dprep_primecontroller+0x92e>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   8891c:	4b15      	ldr	r3, [pc, #84]	; (88974 <cl_dprep_primecontroller+0x95c>)
   8891e:	220b      	movs	r2, #11
   88920:	701a      	strb	r2, [r3, #0]
							break;
   88922:	e010      	b.n	88946 <cl_dprep_primecontroller+0x92e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88924:	2100      	movs	r1, #0
   88926:	2002      	movs	r0, #2
   88928:	4b10      	ldr	r3, [pc, #64]	; (8896c <cl_dprep_primecontroller+0x954>)
   8892a:	4798      	blx	r3
							break;
   8892c:	e00b      	b.n	88946 <cl_dprep_primecontroller+0x92e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8892e:	2100      	movs	r1, #0
   88930:	2004      	movs	r0, #4
   88932:	4b0e      	ldr	r3, [pc, #56]	; (8896c <cl_dprep_primecontroller+0x954>)
   88934:	4798      	blx	r3
							break;
   88936:	e006      	b.n	88946 <cl_dprep_primecontroller+0x92e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88938:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   8893c:	4619      	mov	r1, r3
   8893e:	2001      	movs	r0, #1
   88940:	4b0a      	ldr	r3, [pc, #40]	; (8896c <cl_dprep_primecontroller+0x954>)
   88942:	4798      	blx	r3
							break;
   88944:	bf00      	nop

						}
			break;
   88946:	e023      	b.n	88990 <cl_dprep_primecontroller+0x978>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88948:	bf00      	nop
   8894a:	e022      	b.n	88992 <cl_dprep_primecontroller+0x97a>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   8894c:	bf00      	nop
   8894e:	e020      	b.n	88992 <cl_dprep_primecontroller+0x97a>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88950:	bf00      	nop
   88952:	e01e      	b.n	88992 <cl_dprep_primecontroller+0x97a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   88954:	bf00      	nop
   88956:	e01c      	b.n	88992 <cl_dprep_primecontroller+0x97a>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88958:	bf00      	nop
   8895a:	e01a      	b.n	88992 <cl_dprep_primecontroller+0x97a>
   8895c:	000a9fb0 	.word	0x000a9fb0
   88960:	0009cbd5 	.word	0x0009cbd5
   88964:	20071869 	.word	0x20071869
   88968:	20071868 	.word	0x20071868
   8896c:	00093f5d 	.word	0x00093f5d
   88970:	0008899d 	.word	0x0008899d
   88974:	20071866 	.word	0x20071866
   88978:	000a9fa8 	.word	0x000a9fa8
   8897c:	00088a15 	.word	0x00088a15
   88980:	2007186a 	.word	0x2007186a
   88984:	2007186b 	.word	0x2007186b
   88988:	0009af8d 	.word	0x0009af8d
   8898c:	0009afa9 	.word	0x0009afa9
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   88990:	bf00      	nop

		}
	

	
	return 0;
   88992:	2300      	movs	r3, #0
}
   88994:	4618      	mov	r0, r3
   88996:	3710      	adds	r7, #16
   88998:	46bd      	mov	sp, r7
   8899a:	bd80      	pop	{r7, pc}

0008899c <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodeType Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   8899c:	b580      	push	{r7, lr}
   8899e:	b084      	sub	sp, #16
   889a0:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   889a2:	2304      	movs	r3, #4
   889a4:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   889a6:	2359      	movs	r3, #89	; 0x59
   889a8:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   889aa:	1d3b      	adds	r3, r7, #4
   889ac:	2200      	movs	r2, #0
   889ae:	601a      	str	r2, [r3, #0]
   889b0:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   889b4:	230a      	movs	r3, #10
   889b6:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) PRIMING_DATA;
   889b8:	2302      	movs	r3, #2
   889ba:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_prime_min;
   889bc:	4b12      	ldr	r3, [pc, #72]	; (88a08 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   889be:	f993 3000 	ldrsb.w	r3, [r3]
   889c2:	b2db      	uxtb	r3, r3
   889c4:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   889c6:	2300      	movs	r3, #0
   889c8:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_prime_sec;
   889ca:	4b10      	ldr	r3, [pc, #64]	; (88a0c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x70>)
   889cc:	f993 3000 	ldrsb.w	r3, [r3]
   889d0:	b2db      	uxtb	r3, r3
   889d2:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   889d4:	4b0c      	ldr	r3, [pc, #48]	; (88a08 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   889d6:	f993 3000 	ldrsb.w	r3, [r3]
   889da:	b2db      	uxtb	r3, r3
   889dc:	f1c3 0301 	rsb	r3, r3, #1
   889e0:	b2db      	uxtb	r3, r3
   889e2:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   889e4:	2300      	movs	r3, #0
   889e6:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   889e8:	2300      	movs	r3, #0
   889ea:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   889ec:	1d39      	adds	r1, r7, #4
   889ee:	7bbb      	ldrb	r3, [r7, #14]
   889f0:	2207      	movs	r2, #7
   889f2:	4618      	mov	r0, r3
   889f4:	4b06      	ldr	r3, [pc, #24]	; (88a10 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x74>)
   889f6:	4798      	blx	r3
   889f8:	4603      	mov	r3, r0
   889fa:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   889fc:	2300      	movs	r3, #0
}
   889fe:	4618      	mov	r0, r3
   88a00:	3710      	adds	r7, #16
   88a02:	46bd      	mov	sp, r7
   88a04:	bd80      	pop	{r7, pc}
   88a06:	bf00      	nop
   88a08:	20071869 	.word	0x20071869
   88a0c:	20071868 	.word	0x20071868
   88a10:	0009cbd5 	.word	0x0009cbd5

00088a14 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodeType Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   88a14:	b580      	push	{r7, lr}
   88a16:	b084      	sub	sp, #16
   88a18:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88a1a:	2304      	movs	r3, #4
   88a1c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88a1e:	2359      	movs	r3, #89	; 0x59
   88a20:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88a22:	1d3b      	adds	r3, r7, #4
   88a24:	2200      	movs	r2, #0
   88a26:	601a      	str	r2, [r3, #0]
   88a28:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   88a2c:	230a      	movs	r3, #10
   88a2e:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) DIALYSER_PRIME_DATA;
   88a30:	2303      	movs	r3, #3
   88a32:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_dialyser_prime_min;
   88a34:	4b12      	ldr	r3, [pc, #72]	; (88a80 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x6c>)
   88a36:	f993 3000 	ldrsb.w	r3, [r3]
   88a3a:	b2db      	uxtb	r3, r3
   88a3c:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88a3e:	2300      	movs	r3, #0
   88a40:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_dialyser_prime_sec;
   88a42:	4b10      	ldr	r3, [pc, #64]	; (88a84 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x70>)
   88a44:	f993 3000 	ldrsb.w	r3, [r3]
   88a48:	b2db      	uxtb	r3, r3
   88a4a:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   88a4c:	4b0e      	ldr	r3, [pc, #56]	; (88a88 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x74>)
   88a4e:	f993 3000 	ldrsb.w	r3, [r3]
   88a52:	b2db      	uxtb	r3, r3
   88a54:	f1c3 0305 	rsb	r3, r3, #5
   88a58:	b2db      	uxtb	r3, r3
   88a5a:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88a5c:	2300      	movs	r3, #0
   88a5e:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88a60:	2300      	movs	r3, #0
   88a62:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88a64:	1d39      	adds	r1, r7, #4
   88a66:	7bbb      	ldrb	r3, [r7, #14]
   88a68:	2207      	movs	r2, #7
   88a6a:	4618      	mov	r0, r3
   88a6c:	4b07      	ldr	r3, [pc, #28]	; (88a8c <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   88a6e:	4798      	blx	r3
   88a70:	4603      	mov	r3, r0
   88a72:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88a74:	2300      	movs	r3, #0

}
   88a76:	4618      	mov	r0, r3
   88a78:	3710      	adds	r7, #16
   88a7a:	46bd      	mov	sp, r7
   88a7c:	bd80      	pop	{r7, pc}
   88a7e:	bf00      	nop
   88a80:	2007186b 	.word	0x2007186b
   88a84:	2007186a 	.word	0x2007186a
   88a88:	20071869 	.word	0x20071869
   88a8c:	0009cbd5 	.word	0x0009cbd5

00088a90 <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodeType cl_dprep_activate_prime_related_alarms(void)
{
   88a90:	b480      	push	{r7}
   88a92:	b083      	sub	sp, #12
   88a94:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88a96:	2304      	movs	r3, #4
   88a98:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
	//		Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
	//		Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			
	return CL_OK;
   88a9a:	2300      	movs	r3, #0
}
   88a9c:	4618      	mov	r0, r3
   88a9e:	370c      	adds	r7, #12
   88aa0:	46bd      	mov	sp, r7
   88aa2:	bc80      	pop	{r7}
   88aa4:	4770      	bx	lr
   88aa6:	bf00      	nop

00088aa8 <Cl_Error_Handle_Error>:


#include "cl_errorhandler.h"

Cl_ReturnCodeType Cl_Error_Handle_Error()
{
   88aa8:	b480      	push	{r7}
   88aaa:	af00      	add	r7, sp, #0
	//	Cl_ReturnCodeType a=0,b=0;
	
	return(CL_OK);
   88aac:	2300      	movs	r3, #0
   88aae:	4618      	mov	r0, r3
   88ab0:	46bd      	mov	sp, r7
   88ab2:	bc80      	pop	{r7}
   88ab4:	4770      	bx	lr
   88ab6:	bf00      	nop

00088ab8 <cl_event_handler>:
Cl_Int16Type testFPcurrentstatus_prev=0;
static Cl_Uint32Type test_counter =0;
extern Cl_Sys_statusType cl_sys_statbuffer;
uint16_t cond_4_Propo;
Cl_ReturnCodeType cl_event_handler(Cl_Mac_EventsType cl_event)
{
   88ab8:	b580      	push	{r7, lr}
   88aba:	b084      	sub	sp, #16
   88abc:	af00      	add	r7, sp, #0
   88abe:	4603      	mov	r3, r0
   88ac0:	71fb      	strb	r3, [r7, #7]
	
	static volatile Cl_BoolType toggle = false;
	static Cl_BoolType toggle_500 = false;
	
	switch(cl_event)
   88ac2:	79fb      	ldrb	r3, [r7, #7]
   88ac4:	3b0d      	subs	r3, #13
   88ac6:	2b50      	cmp	r3, #80	; 0x50
   88ac8:	f200 81c5 	bhi.w	88e56 <cl_event_handler+0x39e>
   88acc:	a201      	add	r2, pc, #4	; (adr r2, 88ad4 <cl_event_handler+0x1c>)
   88ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88ad2:	bf00      	nop
   88ad4:	00088e4d 	.word	0x00088e4d
   88ad8:	00088e4d 	.word	0x00088e4d
   88adc:	00088e57 	.word	0x00088e57
   88ae0:	00088e57 	.word	0x00088e57
   88ae4:	00088e57 	.word	0x00088e57
   88ae8:	00088e57 	.word	0x00088e57
   88aec:	00088e57 	.word	0x00088e57
   88af0:	00088e57 	.word	0x00088e57
   88af4:	00088e57 	.word	0x00088e57
   88af8:	00088e57 	.word	0x00088e57
   88afc:	00088e57 	.word	0x00088e57
   88b00:	00088e57 	.word	0x00088e57
   88b04:	00088e57 	.word	0x00088e57
   88b08:	00088e57 	.word	0x00088e57
   88b0c:	00088e57 	.word	0x00088e57
   88b10:	00088e57 	.word	0x00088e57
   88b14:	00088e57 	.word	0x00088e57
   88b18:	00088e57 	.word	0x00088e57
   88b1c:	00088e57 	.word	0x00088e57
   88b20:	00088e57 	.word	0x00088e57
   88b24:	00088e57 	.word	0x00088e57
   88b28:	00088e57 	.word	0x00088e57
   88b2c:	00088e57 	.word	0x00088e57
   88b30:	00088e57 	.word	0x00088e57
   88b34:	00088e57 	.word	0x00088e57
   88b38:	00088e57 	.word	0x00088e57
   88b3c:	00088e57 	.word	0x00088e57
   88b40:	00088e57 	.word	0x00088e57
   88b44:	00088e57 	.word	0x00088e57
   88b48:	00088e57 	.word	0x00088e57
   88b4c:	00088e57 	.word	0x00088e57
   88b50:	00088e57 	.word	0x00088e57
   88b54:	00088e57 	.word	0x00088e57
   88b58:	00088e57 	.word	0x00088e57
   88b5c:	00088e45 	.word	0x00088e45
   88b60:	00088e57 	.word	0x00088e57
   88b64:	00088e57 	.word	0x00088e57
   88b68:	00088c19 	.word	0x00088c19
   88b6c:	00088e57 	.word	0x00088e57
   88b70:	00088e57 	.word	0x00088e57
   88b74:	00088e57 	.word	0x00088e57
   88b78:	00088e57 	.word	0x00088e57
   88b7c:	00088c27 	.word	0x00088c27
   88b80:	00088c35 	.word	0x00088c35
   88b84:	00088c3d 	.word	0x00088c3d
   88b88:	00088d83 	.word	0x00088d83
   88b8c:	00088dbd 	.word	0x00088dbd
   88b90:	00088e3d 	.word	0x00088e3d
   88b94:	00088e57 	.word	0x00088e57
   88b98:	00088e57 	.word	0x00088e57
   88b9c:	00088e57 	.word	0x00088e57
   88ba0:	00088e57 	.word	0x00088e57
   88ba4:	00088e57 	.word	0x00088e57
   88ba8:	00088e57 	.word	0x00088e57
   88bac:	00088e57 	.word	0x00088e57
   88bb0:	00088e57 	.word	0x00088e57
   88bb4:	00088e57 	.word	0x00088e57
   88bb8:	00088e57 	.word	0x00088e57
   88bbc:	00088e57 	.word	0x00088e57
   88bc0:	00088e57 	.word	0x00088e57
   88bc4:	00088e57 	.word	0x00088e57
   88bc8:	00088e57 	.word	0x00088e57
   88bcc:	00088e57 	.word	0x00088e57
   88bd0:	00088e57 	.word	0x00088e57
   88bd4:	00088e57 	.word	0x00088e57
   88bd8:	00088e57 	.word	0x00088e57
   88bdc:	00088e57 	.word	0x00088e57
   88be0:	00088e57 	.word	0x00088e57
   88be4:	00088e57 	.word	0x00088e57
   88be8:	00088e57 	.word	0x00088e57
   88bec:	00088e57 	.word	0x00088e57
   88bf0:	00088e57 	.word	0x00088e57
   88bf4:	00088e57 	.word	0x00088e57
   88bf8:	00088e57 	.word	0x00088e57
   88bfc:	00088e57 	.word	0x00088e57
   88c00:	00088e57 	.word	0x00088e57
   88c04:	00088e57 	.word	0x00088e57
   88c08:	00088e57 	.word	0x00088e57
   88c0c:	00088e57 	.word	0x00088e57
   88c10:	00088e57 	.word	0x00088e57
   88c14:	00088e57 	.word	0x00088e57
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   88c18:	2004      	movs	r0, #4
   88c1a:	4b92      	ldr	r3, [pc, #584]	; (88e64 <cl_event_handler+0x3ac>)
   88c1c:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   88c1e:	2006      	movs	r0, #6
   88c20:	4b91      	ldr	r3, [pc, #580]	; (88e68 <cl_event_handler+0x3b0>)
   88c22:	4798      	blx	r3
		//	sv_cs_setpotvalue(250);
		
		
		
		
		break;
   88c24:	e118      	b.n	88e58 <cl_event_handler+0x3a0>
		}
		
		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		*/
				//cl_ufpumpFeedback_timer(); // commented for testing
				cl_hep_pumpFeedback_timer();
   88c26:	4b91      	ldr	r3, [pc, #580]	; (88e6c <cl_event_handler+0x3b4>)
   88c28:	4798      	blx	r3
		  cl_ufpumpFeedback_timer();
   88c2a:	4b91      	ldr	r3, [pc, #580]	; (88e70 <cl_event_handler+0x3b8>)
   88c2c:	4798      	blx	r3
		  cl_bp_pumpFeedback_timer();
   88c2e:	4b91      	ldr	r3, [pc, #580]	; (88e74 <cl_event_handler+0x3bc>)
   88c30:	4798      	blx	r3
		  break;
   88c32:	e111      	b.n	88e58 <cl_event_handler+0x3a0>
				}
					
					spent_ticks = 	g_ul_ms_ticks - init_ticks;
			#endif
					
		 Cl_bc_controller(BC_EVENT_50MS);	
   88c34:	2000      	movs	r0, #0
   88c36:	4b90      	ldr	r3, [pc, #576]	; (88e78 <cl_event_handler+0x3c0>)
   88c38:	4798      	blx	r3
// 		}
// 		
// 		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 		 
// 		}
		break;
   88c3a:	e10d      	b.n	88e58 <cl_event_handler+0x3a0>
	
		
	break;	
		case EVT_TICK_100M:
	//	Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_DEC_M , &dtemp);
   88c3c:	498f      	ldr	r1, [pc, #572]	; (88e7c <cl_event_handler+0x3c4>)
   88c3e:	201e      	movs	r0, #30
   88c40:	4b8f      	ldr	r3, [pc, #572]	; (88e80 <cl_event_handler+0x3c8>)
   88c42:	4798      	blx	r3
	if(dtemp == 1){
   88c44:	4b8d      	ldr	r3, [pc, #564]	; (88e7c <cl_event_handler+0x3c4>)
   88c46:	881b      	ldrh	r3, [r3, #0]
   88c48:	2b01      	cmp	r3, #1
   88c4a:	d11e      	bne.n	88c8a <cl_event_handler+0x1d2>

		if(prevdtemp == 0){             // manav02 added transition logic
   88c4c:	4b8d      	ldr	r3, [pc, #564]	; (88e84 <cl_event_handler+0x3cc>)
   88c4e:	881b      	ldrh	r3, [r3, #0]
   88c50:	2b00      	cmp	r3, #0
   88c52:	d11d      	bne.n	88c90 <cl_event_handler+0x1d8>
			
		prevdtemp = 1;
   88c54:	4b8b      	ldr	r3, [pc, #556]	; (88e84 <cl_event_handler+0x3cc>)
   88c56:	2201      	movs	r2, #1
   88c58:	801a      	strh	r2, [r3, #0]
		
		dtemp = 0;
   88c5a:	4b88      	ldr	r3, [pc, #544]	; (88e7c <cl_event_handler+0x3c4>)
   88c5c:	2200      	movs	r2, #0
   88c5e:	801a      	strh	r2, [r3, #0]
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88c60:	4b89      	ldr	r3, [pc, #548]	; (88e88 <cl_event_handler+0x3d0>)
   88c62:	781b      	ldrb	r3, [r3, #0]
   88c64:	2b0a      	cmp	r3, #10
   88c66:	d813      	bhi.n	88c90 <cl_event_handler+0x1d8>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL ;
   88c68:	4b87      	ldr	r3, [pc, #540]	; (88e88 <cl_event_handler+0x3d0>)
   88c6a:	781b      	ldrb	r3, [r3, #0]
   88c6c:	461a      	mov	r2, r3
   88c6e:	4b86      	ldr	r3, [pc, #536]	; (88e88 <cl_event_handler+0x3d0>)
   88c70:	4413      	add	r3, r2
   88c72:	225c      	movs	r2, #92	; 0x5c
   88c74:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88c76:	4b84      	ldr	r3, [pc, #528]	; (88e88 <cl_event_handler+0x3d0>)
   88c78:	2201      	movs	r2, #1
   88c7a:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88c7c:	4b82      	ldr	r3, [pc, #520]	; (88e88 <cl_event_handler+0x3d0>)
   88c7e:	781b      	ldrb	r3, [r3, #0]
   88c80:	3301      	adds	r3, #1
   88c82:	b2da      	uxtb	r2, r3
   88c84:	4b80      	ldr	r3, [pc, #512]	; (88e88 <cl_event_handler+0x3d0>)
   88c86:	701a      	strb	r2, [r3, #0]
   88c88:	e002      	b.n	88c90 <cl_event_handler+0x1d8>
		}
		}
		//Treatdata[ID_bloodrate] - 10 ;
	}
	else{
		prevdtemp = 0 ;
   88c8a:	4b7e      	ldr	r3, [pc, #504]	; (88e84 <cl_event_handler+0x3cc>)
   88c8c:	2200      	movs	r2, #0
   88c8e:	801a      	strh	r2, [r3, #0]
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_INC_M , &itemp);
   88c90:	497e      	ldr	r1, [pc, #504]	; (88e8c <cl_event_handler+0x3d4>)
   88c92:	201d      	movs	r0, #29
   88c94:	4b7a      	ldr	r3, [pc, #488]	; (88e80 <cl_event_handler+0x3c8>)
   88c96:	4798      	blx	r3
	if(itemp == 1){
   88c98:	4b7c      	ldr	r3, [pc, #496]	; (88e8c <cl_event_handler+0x3d4>)
   88c9a:	881b      	ldrh	r3, [r3, #0]
   88c9c:	2b01      	cmp	r3, #1
   88c9e:	d11e      	bne.n	88cde <cl_event_handler+0x226>

		if(previtemp == 0){               // manav02 added transition logic
   88ca0:	4b7b      	ldr	r3, [pc, #492]	; (88e90 <cl_event_handler+0x3d8>)
   88ca2:	881b      	ldrh	r3, [r3, #0]
   88ca4:	2b00      	cmp	r3, #0
   88ca6:	d11d      	bne.n	88ce4 <cl_event_handler+0x22c>
			
		previtemp = 1 ; 
   88ca8:	4b79      	ldr	r3, [pc, #484]	; (88e90 <cl_event_handler+0x3d8>)
   88caa:	2201      	movs	r2, #1
   88cac:	801a      	strh	r2, [r3, #0]

		itemp = 0;
   88cae:	4b77      	ldr	r3, [pc, #476]	; (88e8c <cl_event_handler+0x3d4>)
   88cb0:	2200      	movs	r2, #0
   88cb2:	801a      	strh	r2, [r3, #0]
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88cb4:	4b74      	ldr	r3, [pc, #464]	; (88e88 <cl_event_handler+0x3d0>)
   88cb6:	781b      	ldrb	r3, [r3, #0]
   88cb8:	2b0a      	cmp	r3, #10
   88cba:	d813      	bhi.n	88ce4 <cl_event_handler+0x22c>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL ;
   88cbc:	4b72      	ldr	r3, [pc, #456]	; (88e88 <cl_event_handler+0x3d0>)
   88cbe:	781b      	ldrb	r3, [r3, #0]
   88cc0:	461a      	mov	r2, r3
   88cc2:	4b71      	ldr	r3, [pc, #452]	; (88e88 <cl_event_handler+0x3d0>)
   88cc4:	4413      	add	r3, r2
   88cc6:	225b      	movs	r2, #91	; 0x5b
   88cc8:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88cca:	4b6f      	ldr	r3, [pc, #444]	; (88e88 <cl_event_handler+0x3d0>)
   88ccc:	2201      	movs	r2, #1
   88cce:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88cd0:	4b6d      	ldr	r3, [pc, #436]	; (88e88 <cl_event_handler+0x3d0>)
   88cd2:	781b      	ldrb	r3, [r3, #0]
   88cd4:	3301      	adds	r3, #1
   88cd6:	b2da      	uxtb	r2, r3
   88cd8:	4b6b      	ldr	r3, [pc, #428]	; (88e88 <cl_event_handler+0x3d0>)
   88cda:	701a      	strb	r2, [r3, #0]
   88cdc:	e002      	b.n	88ce4 <cl_event_handler+0x22c>
		}
		//Treatdata[ID_bloodrate] + 10 ;
		
	}
	else{
		previtemp = 0 ;
   88cde:	4b6c      	ldr	r3, [pc, #432]	; (88e90 <cl_event_handler+0x3d8>)
   88ce0:	2200      	movs	r2, #0
   88ce2:	801a      	strh	r2, [r3, #0]
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_ON_OFF_M , &bptemp);
   88ce4:	496b      	ldr	r1, [pc, #428]	; (88e94 <cl_event_handler+0x3dc>)
   88ce6:	201f      	movs	r0, #31
   88ce8:	4b65      	ldr	r3, [pc, #404]	; (88e80 <cl_event_handler+0x3c8>)
   88cea:	4798      	blx	r3
	
	
	if(bptemp == 0){
   88cec:	4b69      	ldr	r3, [pc, #420]	; (88e94 <cl_event_handler+0x3dc>)
   88cee:	881b      	ldrh	r3, [r3, #0]
   88cf0:	2b00      	cmp	r3, #0
   88cf2:	d103      	bne.n	88cfc <cl_event_handler+0x244>
		
		prevtran = 0;
   88cf4:	4b68      	ldr	r3, [pc, #416]	; (88e98 <cl_event_handler+0x3e0>)
   88cf6:	2200      	movs	r2, #0
   88cf8:	801a      	strh	r2, [r3, #0]
   88cfa:	e039      	b.n	88d70 <cl_event_handler+0x2b8>
	}
	else{
		
		if(prevtran == 0){
   88cfc:	4b66      	ldr	r3, [pc, #408]	; (88e98 <cl_event_handler+0x3e0>)
   88cfe:	881b      	ldrh	r3, [r3, #0]
   88d00:	2b00      	cmp	r3, #0
   88d02:	d135      	bne.n	88d70 <cl_event_handler+0x2b8>
			
		prevtran = 1;
   88d04:	4b64      	ldr	r3, [pc, #400]	; (88e98 <cl_event_handler+0x3e0>)
   88d06:	2201      	movs	r2, #1
   88d08:	801a      	strh	r2, [r3, #0]

		if(bpstatus == 0){
   88d0a:	4b64      	ldr	r3, [pc, #400]	; (88e9c <cl_event_handler+0x3e4>)
   88d0c:	881b      	ldrh	r3, [r3, #0]
   88d0e:	2b00      	cmp	r3, #0
   88d10:	d117      	bne.n	88d42 <cl_event_handler+0x28a>
	
			//bp on
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88d12:	4b5d      	ldr	r3, [pc, #372]	; (88e88 <cl_event_handler+0x3d0>)
   88d14:	781b      	ldrb	r3, [r3, #0]
   88d16:	2b0a      	cmp	r3, #10
   88d18:	d80f      	bhi.n	88d3a <cl_event_handler+0x282>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON ;
   88d1a:	4b5b      	ldr	r3, [pc, #364]	; (88e88 <cl_event_handler+0x3d0>)
   88d1c:	781b      	ldrb	r3, [r3, #0]
   88d1e:	461a      	mov	r2, r3
   88d20:	4b59      	ldr	r3, [pc, #356]	; (88e88 <cl_event_handler+0x3d0>)
   88d22:	4413      	add	r3, r2
   88d24:	220a      	movs	r2, #10
   88d26:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88d28:	4b57      	ldr	r3, [pc, #348]	; (88e88 <cl_event_handler+0x3d0>)
   88d2a:	2201      	movs	r2, #1
   88d2c:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88d2e:	4b56      	ldr	r3, [pc, #344]	; (88e88 <cl_event_handler+0x3d0>)
   88d30:	781b      	ldrb	r3, [r3, #0]
   88d32:	3301      	adds	r3, #1
   88d34:	b2da      	uxtb	r2, r3
   88d36:	4b54      	ldr	r3, [pc, #336]	; (88e88 <cl_event_handler+0x3d0>)
   88d38:	701a      	strb	r2, [r3, #0]
				
			}
	
			bpstatus = 1;
   88d3a:	4b58      	ldr	r3, [pc, #352]	; (88e9c <cl_event_handler+0x3e4>)
   88d3c:	2201      	movs	r2, #1
   88d3e:	801a      	strh	r2, [r3, #0]
   88d40:	e016      	b.n	88d70 <cl_event_handler+0x2b8>
		}
		else{
			// bp off	
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   88d42:	4b51      	ldr	r3, [pc, #324]	; (88e88 <cl_event_handler+0x3d0>)
   88d44:	781b      	ldrb	r3, [r3, #0]
   88d46:	2b0a      	cmp	r3, #10
   88d48:	d80f      	bhi.n	88d6a <cl_event_handler+0x2b2>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF ;
   88d4a:	4b4f      	ldr	r3, [pc, #316]	; (88e88 <cl_event_handler+0x3d0>)
   88d4c:	781b      	ldrb	r3, [r3, #0]
   88d4e:	461a      	mov	r2, r3
   88d50:	4b4d      	ldr	r3, [pc, #308]	; (88e88 <cl_event_handler+0x3d0>)
   88d52:	4413      	add	r3, r2
   88d54:	220b      	movs	r2, #11
   88d56:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   88d58:	4b4b      	ldr	r3, [pc, #300]	; (88e88 <cl_event_handler+0x3d0>)
   88d5a:	2201      	movs	r2, #1
   88d5c:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   88d5e:	4b4a      	ldr	r3, [pc, #296]	; (88e88 <cl_event_handler+0x3d0>)
   88d60:	781b      	ldrb	r3, [r3, #0]
   88d62:	3301      	adds	r3, #1
   88d64:	b2da      	uxtb	r2, r3
   88d66:	4b48      	ldr	r3, [pc, #288]	; (88e88 <cl_event_handler+0x3d0>)
   88d68:	701a      	strb	r2, [r3, #0]
				
			}
			bpstatus = 0;
   88d6a:	4b4c      	ldr	r3, [pc, #304]	; (88e9c <cl_event_handler+0x3e4>)
   88d6c:	2200      	movs	r2, #0
   88d6e:	801a      	strh	r2, [r3, #0]
	
	*/
	
	
	
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);    // commented on 17082017, we dont need this controller handler any more
   88d70:	2001      	movs	r0, #1
   88d72:	4b4b      	ldr	r3, [pc, #300]	; (88ea0 <cl_event_handler+0x3e8>)
   88d74:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   88d76:	2001      	movs	r0, #1
   88d78:	4b4a      	ldr	r3, [pc, #296]	; (88ea4 <cl_event_handler+0x3ec>)
   88d7a:	4798      	blx	r3
//		cl_bp_pumpFeedback_timer();
		cl_hep_pump_enddetction_timer();
   88d7c:	4b4a      	ldr	r3, [pc, #296]	; (88ea8 <cl_event_handler+0x3f0>)
   88d7e:	4798      	blx	r3
		}
		
		#endif
		
		
		break;
   88d80:	e06a      	b.n	88e58 <cl_event_handler+0x3a0>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS,0);
   88d82:	f04f 0100 	mov.w	r1, #0
   88d86:	2001      	movs	r0, #1
   88d88:	4b48      	ldr	r3, [pc, #288]	; (88eac <cl_event_handler+0x3f4>)
   88d8a:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   88d8c:	2001      	movs	r0, #1
   88d8e:	4b3a      	ldr	r3, [pc, #232]	; (88e78 <cl_event_handler+0x3c0>)
   88d90:	4798      	blx	r3
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cond_4_Propo);
   88d92:	4947      	ldr	r1, [pc, #284]	; (88eb0 <cl_event_handler+0x3f8>)
   88d94:	2007      	movs	r0, #7
   88d96:	4b3a      	ldr	r3, [pc, #232]	; (88e80 <cl_event_handler+0x3c8>)
   88d98:	4798      	blx	r3
//		sv_prop_propo_CONDUCTIVITY(cl_sys_statbuffer.cond_status);  // Gopal: added on 13092017 sending conductivity to proportioning for RC correction
		sv_prop_propo_CONDUCTIVITY(cond_4_Propo);  // Gopal: added on 13092017 sending conductivity to proportioning for RC correction
   88d9a:	4b45      	ldr	r3, [pc, #276]	; (88eb0 <cl_event_handler+0x3f8>)
   88d9c:	881b      	ldrh	r3, [r3, #0]
   88d9e:	4618      	mov	r0, r3
   88da0:	4b44      	ldr	r3, [pc, #272]	; (88eb4 <cl_event_handler+0x3fc>)
   88da2:	4798      	blx	r3
		if(  toggle_500)
   88da4:	4b44      	ldr	r3, [pc, #272]	; (88eb8 <cl_event_handler+0x400>)
   88da6:	781b      	ldrb	r3, [r3, #0]
   88da8:	2b00      	cmp	r3, #0
   88daa:	d003      	beq.n	88db4 <cl_event_handler+0x2fc>
		{
			toggle_500 = false;
   88dac:	4b42      	ldr	r3, [pc, #264]	; (88eb8 <cl_event_handler+0x400>)
   88dae:	2200      	movs	r2, #0
   88db0:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   88db2:	e051      	b.n	88e58 <cl_event_handler+0x3a0>
		//	sv_cntrl_activatevenousclamp();
		}

		else
		{
			toggle_500 = true;
   88db4:	4b40      	ldr	r3, [pc, #256]	; (88eb8 <cl_event_handler+0x400>)
   88db6:	2201      	movs	r2, #1
   88db8:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   88dba:	e04d      	b.n	88e58 <cl_event_handler+0x3a0>
		case EVT_TICK_SEC:
		{

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   88dbc:	2001      	movs	r0, #1
   88dbe:	4b29      	ldr	r3, [pc, #164]	; (88e64 <cl_event_handler+0x3ac>)
   88dc0:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   88dc2:	2003      	movs	r0, #3
   88dc4:	4b28      	ldr	r3, [pc, #160]	; (88e68 <cl_event_handler+0x3b0>)
   88dc6:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   88dc8:	2100      	movs	r1, #0
   88dca:	200b      	movs	r0, #11
   88dcc:	4b3b      	ldr	r3, [pc, #236]	; (88ebc <cl_event_handler+0x404>)
   88dce:	4798      	blx	r3
		cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   88dd0:	2100      	movs	r1, #0
   88dd2:	200f      	movs	r0, #15
   88dd4:	4b3a      	ldr	r3, [pc, #232]	; (88ec0 <cl_event_handler+0x408>)
   88dd6:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   88dd8:	2002      	movs	r0, #2
   88dda:	4b27      	ldr	r3, [pc, #156]	; (88e78 <cl_event_handler+0x3c0>)
   88ddc:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC,0);
   88dde:	f04f 0100 	mov.w	r1, #0
   88de2:	2002      	movs	r0, #2
   88de4:	4b31      	ldr	r3, [pc, #196]	; (88eac <cl_event_handler+0x3f4>)
   88de6:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   88de8:	2002      	movs	r0, #2
   88dea:	4b36      	ldr	r3, [pc, #216]	; (88ec4 <cl_event_handler+0x40c>)
   88dec:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   88dee:	4b36      	ldr	r3, [pc, #216]	; (88ec8 <cl_event_handler+0x410>)
   88df0:	4798      	blx	r3
//	#if 0
		//DD_RETRY_IIC();
		static bool toggle = false;
				static Cl_Uint8Type temp_count=0;
				temp_count++;
   88df2:	4b36      	ldr	r3, [pc, #216]	; (88ecc <cl_event_handler+0x414>)
   88df4:	781b      	ldrb	r3, [r3, #0]
   88df6:	3301      	adds	r3, #1
   88df8:	b2da      	uxtb	r2, r3
   88dfa:	4b34      	ldr	r3, [pc, #208]	; (88ecc <cl_event_handler+0x414>)
   88dfc:	701a      	strb	r2, [r3, #0]

				
		if(!toggle)
   88dfe:	4b34      	ldr	r3, [pc, #208]	; (88ed0 <cl_event_handler+0x418>)
   88e00:	781b      	ldrb	r3, [r3, #0]
   88e02:	f083 0301 	eor.w	r3, r3, #1
   88e06:	b2db      	uxtb	r3, r3
   88e08:	2b00      	cmp	r3, #0
   88e0a:	d005      	beq.n	88e18 <cl_event_handler+0x360>
		{
		SV_CAN_READ_HEMO(); // disabled for testing
   88e0c:	4b31      	ldr	r3, [pc, #196]	; (88ed4 <cl_event_handler+0x41c>)
   88e0e:	4798      	blx	r3
		
			toggle = true;
   88e10:	4b2f      	ldr	r3, [pc, #188]	; (88ed0 <cl_event_handler+0x418>)
   88e12:	2201      	movs	r2, #1
   88e14:	701a      	strb	r2, [r3, #0]
   88e16:	e00b      	b.n	88e30 <cl_event_handler+0x378>
				}

		}
		else
		{
		SV_CAN_REQUEST_SENSORDATA();
   88e18:	4b2f      	ldr	r3, [pc, #188]	; (88ed8 <cl_event_handler+0x420>)
   88e1a:	4798      	blx	r3
			toggle = false;
   88e1c:	4b2c      	ldr	r3, [pc, #176]	; (88ed0 <cl_event_handler+0x418>)
   88e1e:	2200      	movs	r2, #0
   88e20:	701a      	strb	r2, [r3, #0]
				if (temp_count == 10)
   88e22:	4b2a      	ldr	r3, [pc, #168]	; (88ecc <cl_event_handler+0x414>)
   88e24:	781b      	ldrb	r3, [r3, #0]
   88e26:	2b0a      	cmp	r3, #10
   88e28:	d102      	bne.n	88e30 <cl_event_handler+0x378>
				{
			//		sv_cntrl_deactivatepump(BLOODPUMP);
					temp_count = 0;
   88e2a:	4b28      	ldr	r3, [pc, #160]	; (88ecc <cl_event_handler+0x414>)
   88e2c:	2200      	movs	r2, #0
   88e2e:	701a      	strb	r2, [r3, #0]
				}
		}
		
//		#endif

		test_counter++;
   88e30:	4b2a      	ldr	r3, [pc, #168]	; (88edc <cl_event_handler+0x424>)
   88e32:	681b      	ldr	r3, [r3, #0]
   88e34:	3301      	adds	r3, #1
   88e36:	4a29      	ldr	r2, [pc, #164]	; (88edc <cl_event_handler+0x424>)
   88e38:	6013      	str	r3, [r2, #0]
		}
		
		break;
   88e3a:	e00d      	b.n	88e58 <cl_event_handler+0x3a0>
		case EVT_TICK_MIN:
		{
			//Cl_SysStat_mean_status_update();
		Cl_Temperature_Controller_Handler(TS_EVENT_MIN);
   88e3c:	2002      	movs	r0, #2
   88e3e:	4b18      	ldr	r3, [pc, #96]	; (88ea0 <cl_event_handler+0x3e8>)
   88e40:	4798      	blx	r3
// 		cl_tdata.bytearray[2] = 28;
// 		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
// 		
	
		}
		break;
   88e42:	e009      	b.n	88e58 <cl_event_handler+0x3a0>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   88e44:	2003      	movs	r0, #3
   88e46:	4b0c      	ldr	r3, [pc, #48]	; (88e78 <cl_event_handler+0x3c0>)
   88e48:	4798      	blx	r3
		break;
   88e4a:	e005      	b.n	88e58 <cl_event_handler+0x3a0>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   88e4c:	79fb      	ldrb	r3, [r7, #7]
   88e4e:	4618      	mov	r0, r3
   88e50:	4b23      	ldr	r3, [pc, #140]	; (88ee0 <cl_event_handler+0x428>)
   88e52:	4798      	blx	r3
		break;
   88e54:	e000      	b.n	88e58 <cl_event_handler+0x3a0>
		default:
		break;
   88e56:	bf00      	nop
	}
	
	return 0;
   88e58:	2300      	movs	r3, #0
}
   88e5a:	4618      	mov	r0, r3
   88e5c:	3710      	adds	r7, #16
   88e5e:	46bd      	mov	sp, r7
   88e60:	bd80      	pop	{r7, pc}
   88e62:	bf00      	nop
   88e64:	00095135 	.word	0x00095135
   88e68:	0009449d 	.word	0x0009449d
   88e6c:	00094e89 	.word	0x00094e89
   88e70:	00096cd9 	.word	0x00096cd9
   88e74:	000941f1 	.word	0x000941f1
   88e78:	00082ea5 	.word	0x00082ea5
   88e7c:	2007186c 	.word	0x2007186c
   88e80:	0008fa01 	.word	0x0008fa01
   88e84:	20071874 	.word	0x20071874
   88e88:	200720e0 	.word	0x200720e0
   88e8c:	2007186e 	.word	0x2007186e
   88e90:	20071876 	.word	0x20071876
   88e94:	20071870 	.word	0x20071870
   88e98:	20071878 	.word	0x20071878
   88e9c:	2007187a 	.word	0x2007187a
   88ea0:	00090c09 	.word	0x00090c09
   88ea4:	00090801 	.word	0x00090801
   88ea8:	00095095 	.word	0x00095095
   88eac:	00088fa9 	.word	0x00088fa9
   88eb0:	200720c6 	.word	0x200720c6
   88eb4:	0009b1e9 	.word	0x0009b1e9
   88eb8:	20071880 	.word	0x20071880
   88ebc:	00088019 	.word	0x00088019
   88ec0:	00094729 	.word	0x00094729
   88ec4:	000905f1 	.word	0x000905f1
   88ec8:	0008fe21 	.word	0x0008fe21
   88ecc:	20071881 	.word	0x20071881
   88ed0:	20071882 	.word	0x20071882
   88ed4:	0009ac5d 	.word	0x0009ac5d
   88ed8:	0009ac95 	.word	0x0009ac95
   88edc:	2007187c 	.word	0x2007187c
   88ee0:	0008455d 	.word	0x0008455d
   88ee4:	00000000 	.word	0x00000000

00088ee8 <Cl_Heater_GetHeaterStableStatus>:
#define TEMP2_FINE_MIN_300
#define TEMP2_FINE_MAX_300


Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   88ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
   88eea:	b083      	sub	sp, #12
   88eec:	af00      	add	r7, sp, #0
   88eee:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   88ef0:	4b25      	ldr	r3, [pc, #148]	; (88f88 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   88ef2:	681a      	ldr	r2, [r3, #0]
   88ef4:	4b25      	ldr	r3, [pc, #148]	; (88f8c <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88ef6:	4610      	mov	r0, r2
   88ef8:	4798      	blx	r3
   88efa:	4605      	mov	r5, r0
   88efc:	460e      	mov	r6, r1
   88efe:	4b24      	ldr	r3, [pc, #144]	; (88f90 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   88f00:	681a      	ldr	r2, [r3, #0]
   88f02:	4b22      	ldr	r3, [pc, #136]	; (88f8c <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88f04:	4610      	mov	r0, r2
   88f06:	4798      	blx	r3
   88f08:	4c22      	ldr	r4, [pc, #136]	; (88f94 <Cl_Heater_GetHeaterStableStatus+0xac>)
   88f0a:	a31d      	add	r3, pc, #116	; (adr r3, 88f80 <Cl_Heater_GetHeaterStableStatus+0x98>)
   88f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   88f10:	47a0      	blx	r4
   88f12:	4603      	mov	r3, r0
   88f14:	460c      	mov	r4, r1
   88f16:	461a      	mov	r2, r3
   88f18:	4623      	mov	r3, r4
   88f1a:	4c1f      	ldr	r4, [pc, #124]	; (88f98 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   88f1c:	4628      	mov	r0, r5
   88f1e:	4631      	mov	r1, r6
   88f20:	47a0      	blx	r4
   88f22:	4603      	mov	r3, r0
   88f24:	2b00      	cmp	r3, #0
   88f26:	d020      	beq.n	88f6a <Cl_Heater_GetHeaterStableStatus+0x82>
   88f28:	4b17      	ldr	r3, [pc, #92]	; (88f88 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   88f2a:	681a      	ldr	r2, [r3, #0]
   88f2c:	4b17      	ldr	r3, [pc, #92]	; (88f8c <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88f2e:	4610      	mov	r0, r2
   88f30:	4798      	blx	r3
   88f32:	4605      	mov	r5, r0
   88f34:	460e      	mov	r6, r1
   88f36:	4b16      	ldr	r3, [pc, #88]	; (88f90 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   88f38:	681a      	ldr	r2, [r3, #0]
   88f3a:	4b14      	ldr	r3, [pc, #80]	; (88f8c <Cl_Heater_GetHeaterStableStatus+0xa4>)
   88f3c:	4610      	mov	r0, r2
   88f3e:	4798      	blx	r3
   88f40:	4c16      	ldr	r4, [pc, #88]	; (88f9c <Cl_Heater_GetHeaterStableStatus+0xb4>)
   88f42:	a30f      	add	r3, pc, #60	; (adr r3, 88f80 <Cl_Heater_GetHeaterStableStatus+0x98>)
   88f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   88f48:	47a0      	blx	r4
   88f4a:	4603      	mov	r3, r0
   88f4c:	460c      	mov	r4, r1
   88f4e:	461a      	mov	r2, r3
   88f50:	4623      	mov	r3, r4
   88f52:	4c13      	ldr	r4, [pc, #76]	; (88fa0 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   88f54:	4628      	mov	r0, r5
   88f56:	4631      	mov	r1, r6
   88f58:	47a0      	blx	r4
   88f5a:	4603      	mov	r3, r0
   88f5c:	2b00      	cmp	r3, #0
   88f5e:	d004      	beq.n	88f6a <Cl_Heater_GetHeaterStableStatus+0x82>
	{
		*Stable =  cl_temp3_stable;
   88f60:	4b10      	ldr	r3, [pc, #64]	; (88fa4 <Cl_Heater_GetHeaterStableStatus+0xbc>)
   88f62:	781a      	ldrb	r2, [r3, #0]
   88f64:	687b      	ldr	r3, [r7, #4]
   88f66:	701a      	strb	r2, [r3, #0]
   88f68:	e002      	b.n	88f70 <Cl_Heater_GetHeaterStableStatus+0x88>
	}
	else
	{
		*Stable =  false;
   88f6a:	687b      	ldr	r3, [r7, #4]
   88f6c:	2200      	movs	r2, #0
   88f6e:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   88f70:	2300      	movs	r3, #0
}
   88f72:	4618      	mov	r0, r3
   88f74:	370c      	adds	r7, #12
   88f76:	46bd      	mov	sp, r7
   88f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   88f7a:	bf00      	nop
   88f7c:	f3af 8000 	nop.w
   88f80:	9999999a 	.word	0x9999999a
   88f84:	3fc99999 	.word	0x3fc99999
   88f88:	20071890 	.word	0x20071890
   88f8c:	000a7681 	.word	0x000a7681
   88f90:	200704cc 	.word	0x200704cc
   88f94:	000a73c1 	.word	0x000a73c1
   88f98:	000a7c49 	.word	0x000a7c49
   88f9c:	000a73c5 	.word	0x000a73c5
   88fa0:	000a7c0d 	.word	0x000a7c0d
   88fa4:	20071b69 	.word	0x20071b69

00088fa8 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   88fa8:	b580      	push	{r7, lr}
   88faa:	b084      	sub	sp, #16
   88fac:	af00      	add	r7, sp, #0
   88fae:	4603      	mov	r3, r0
   88fb0:	6039      	str	r1, [r7, #0]
   88fb2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   88fb4:	2300      	movs	r3, #0
   88fb6:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   88fb8:	f04f 0300 	mov.w	r3, #0
   88fbc:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   88fbe:	79fb      	ldrb	r3, [r7, #7]
   88fc0:	2b03      	cmp	r3, #3
   88fc2:	d01e      	beq.n	89002 <Cl_Heater_Event_Handler+0x5a>
   88fc4:	2b05      	cmp	r3, #5
   88fc6:	d010      	beq.n	88fea <Cl_Heater_Event_Handler+0x42>
   88fc8:	2b01      	cmp	r3, #1
   88fca:	d000      	beq.n	88fce <Cl_Heater_Event_Handler+0x26>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
	break;
	
	default:break;
   88fcc:	e020      	b.n	89010 <Cl_Heater_Event_Handler+0x68>

switch(HeaterEvent)
{
	
	case CL_HEATER_EVENT_500MS:
		if (hotrinse_flag != 1)
   88fce:	4b13      	ldr	r3, [pc, #76]	; (8901c <Cl_Heater_Event_Handler+0x74>)
   88fd0:	781b      	ldrb	r3, [r3, #0]
   88fd2:	2b01      	cmp	r3, #1
   88fd4:	d002      	beq.n	88fdc <Cl_Heater_Event_Handler+0x34>
		{
			Heat_Correction();
   88fd6:	4b12      	ldr	r3, [pc, #72]	; (89020 <Cl_Heater_Event_Handler+0x78>)
   88fd8:	4798      	blx	r3
		{
			
			Hot_Rinse();
			
		}
	break;
   88fda:	e016      	b.n	8900a <Cl_Heater_Event_Handler+0x62>
		if (hotrinse_flag != 1)
		{
			Heat_Correction();
		}
		
		else if (hotrinse_flag ==1)
   88fdc:	4b0f      	ldr	r3, [pc, #60]	; (8901c <Cl_Heater_Event_Handler+0x74>)
   88fde:	781b      	ldrb	r3, [r3, #0]
   88fe0:	2b01      	cmp	r3, #1
   88fe2:	d112      	bne.n	8900a <Cl_Heater_Event_Handler+0x62>
		{
			
			Hot_Rinse();
   88fe4:	4b0f      	ldr	r3, [pc, #60]	; (89024 <Cl_Heater_Event_Handler+0x7c>)
   88fe6:	4798      	blx	r3
			
		}
	break;
   88fe8:	e00f      	b.n	8900a <Cl_Heater_Event_Handler+0x62>
	
	case CL_HEATER_EVENT_TARGET_TEMP:
		prescribed_temp = data;
   88fea:	4a0f      	ldr	r2, [pc, #60]	; (89028 <Cl_Heater_Event_Handler+0x80>)
   88fec:	683b      	ldr	r3, [r7, #0]
   88fee:	6013      	str	r3, [r2, #0]
		if (hotrinse_flag == 1)
   88ff0:	4b0a      	ldr	r3, [pc, #40]	; (8901c <Cl_Heater_Event_Handler+0x74>)
   88ff2:	781b      	ldrb	r3, [r3, #0]
   88ff4:	2b01      	cmp	r3, #1
   88ff6:	d10a      	bne.n	8900e <Cl_Heater_Event_Handler+0x66>
		{
			avg_duty = 4000;
   88ff8:	4b0c      	ldr	r3, [pc, #48]	; (8902c <Cl_Heater_Event_Handler+0x84>)
   88ffa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   88ffe:	801a      	strh	r2, [r3, #0]
		}
 	break;
   89000:	e005      	b.n	8900e <Cl_Heater_Event_Handler+0x66>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
   89002:	4b0b      	ldr	r3, [pc, #44]	; (89030 <Cl_Heater_Event_Handler+0x88>)
   89004:	2200      	movs	r2, #0
   89006:	701a      	strb	r2, [r3, #0]
	break;
   89008:	e002      	b.n	89010 <Cl_Heater_Event_Handler+0x68>
		{
			
			Hot_Rinse();
			
		}
	break;
   8900a:	bf00      	nop
   8900c:	e000      	b.n	89010 <Cl_Heater_Event_Handler+0x68>
		prescribed_temp = data;
		if (hotrinse_flag == 1)
		{
			avg_duty = 4000;
		}
 	break;
   8900e:	bf00      	nop
	break;
	
	default:break;
}
	
	return (Cl_heeater_retcode);
   89010:	7bfb      	ldrb	r3, [r7, #15]
}
   89012:	4618      	mov	r0, r3
   89014:	3710      	adds	r7, #16
   89016:	46bd      	mov	sp, r7
   89018:	bd80      	pop	{r7, pc}
   8901a:	bf00      	nop
   8901c:	20071bb5 	.word	0x20071bb5
   89020:	000893d9 	.word	0x000893d9
   89024:	0008b17d 	.word	0x0008b17d
   89028:	200704cc 	.word	0x200704cc
   8902c:	20071886 	.word	0x20071886
   89030:	20071b69 	.word	0x20071b69

00089034 <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   89034:	b590      	push	{r4, r7, lr}
   89036:	b085      	sub	sp, #20
   89038:	af00      	add	r7, sp, #0
   8903a:	4603      	mov	r3, r0
   8903c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   8903e:	2300      	movs	r3, #0
   89040:	73fb      	strb	r3, [r7, #15]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   89042:	4b4f      	ldr	r3, [pc, #316]	; (89180 <SetHeaterState+0x14c>)
   89044:	781a      	ldrb	r2, [r3, #0]
   89046:	4b4f      	ldr	r3, [pc, #316]	; (89184 <SetHeaterState+0x150>)
   89048:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   8904a:	4a4d      	ldr	r2, [pc, #308]	; (89180 <SetHeaterState+0x14c>)
   8904c:	79fb      	ldrb	r3, [r7, #7]
   8904e:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   89050:	79fb      	ldrb	r3, [r7, #7]
   89052:	2b04      	cmp	r3, #4
   89054:	d104      	bne.n	89060 <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   89056:	4b4c      	ldr	r3, [pc, #304]	; (89188 <SetHeaterState+0x154>)
   89058:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   8905a:	4b4c      	ldr	r3, [pc, #304]	; (8918c <SetHeaterState+0x158>)
   8905c:	2200      	movs	r2, #0
   8905e:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   89060:	79fb      	ldrb	r3, [r7, #7]
   89062:	2b01      	cmp	r3, #1
   89064:	d105      	bne.n	89072 <SetHeaterState+0x3e>
	{
    	cl_temp3_stable = false;
   89066:	4b4a      	ldr	r3, [pc, #296]	; (89190 <SetHeaterState+0x15c>)
   89068:	2200      	movs	r2, #0
   8906a:	701a      	strb	r2, [r3, #0]
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   8906c:	4b47      	ldr	r3, [pc, #284]	; (8918c <SetHeaterState+0x158>)
   8906e:	2200      	movs	r2, #0
   89070:	701a      	strb	r2, [r3, #0]
	}	

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89072:	f107 030c 	add.w	r3, r7, #12
   89076:	4619      	mov	r1, r3
   89078:	2012      	movs	r0, #18
   8907a:	4b46      	ldr	r3, [pc, #280]	; (89194 <SetHeaterState+0x160>)
   8907c:	4798      	blx	r3

	if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   8907e:	79fb      	ldrb	r3, [r7, #7]
   89080:	2b02      	cmp	r3, #2
   89082:	f000 80e1 	beq.w	89248 <SetHeaterState+0x214>
   89086:	79fb      	ldrb	r3, [r7, #7]
   89088:	2b03      	cmp	r3, #3
   8908a:	f000 80dd 	beq.w	89248 <SetHeaterState+0x214>
	{
					
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/10)/10;
   8908e:	4b42      	ldr	r3, [pc, #264]	; (89198 <SetHeaterState+0x164>)
   89090:	681a      	ldr	r2, [r3, #0]
   89092:	4b42      	ldr	r3, [pc, #264]	; (8919c <SetHeaterState+0x168>)
   89094:	4942      	ldr	r1, [pc, #264]	; (891a0 <SetHeaterState+0x16c>)
   89096:	4610      	mov	r0, r2
   89098:	4798      	blx	r3
   8909a:	4603      	mov	r3, r0
   8909c:	461c      	mov	r4, r3
   8909e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   890a2:	4b40      	ldr	r3, [pc, #256]	; (891a4 <SetHeaterState+0x170>)
   890a4:	4610      	mov	r0, r2
   890a6:	4798      	blx	r3
   890a8:	4602      	mov	r2, r0
   890aa:	4b3f      	ldr	r3, [pc, #252]	; (891a8 <SetHeaterState+0x174>)
   890ac:	493f      	ldr	r1, [pc, #252]	; (891ac <SetHeaterState+0x178>)
   890ae:	4610      	mov	r0, r2
   890b0:	4798      	blx	r3
   890b2:	4603      	mov	r3, r0
   890b4:	461a      	mov	r2, r3
   890b6:	4b3e      	ldr	r3, [pc, #248]	; (891b0 <SetHeaterState+0x17c>)
   890b8:	4611      	mov	r1, r2
   890ba:	4620      	mov	r0, r4
   890bc:	4798      	blx	r3
   890be:	4603      	mov	r3, r0
   890c0:	461a      	mov	r2, r3
   890c2:	4b39      	ldr	r3, [pc, #228]	; (891a8 <SetHeaterState+0x174>)
   890c4:	4939      	ldr	r1, [pc, #228]	; (891ac <SetHeaterState+0x178>)
   890c6:	4610      	mov	r0, r2
   890c8:	4798      	blx	r3
   890ca:	4603      	mov	r3, r0
   890cc:	461a      	mov	r2, r3
   890ce:	4b32      	ldr	r3, [pc, #200]	; (89198 <SetHeaterState+0x164>)
   890d0:	601a      	str	r2, [r3, #0]
	 
        SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   890d2:	4b38      	ldr	r3, [pc, #224]	; (891b4 <SetHeaterState+0x180>)
   890d4:	695b      	ldr	r3, [r3, #20]
   890d6:	4a38      	ldr	r2, [pc, #224]	; (891b8 <SetHeaterState+0x184>)
   890d8:	6013      	str	r3, [r2, #0]
        Prescribed_T3 = Treatdata[ID_settemp]/10;				// Gopal:  will get the user set temperature to prescribed T3
   890da:	4b36      	ldr	r3, [pc, #216]	; (891b4 <SetHeaterState+0x180>)
   890dc:	699b      	ldr	r3, [r3, #24]
   890de:	4a37      	ldr	r2, [pc, #220]	; (891bc <SetHeaterState+0x188>)
   890e0:	fba2 2303 	umull	r2, r3, r2, r3
   890e4:	08da      	lsrs	r2, r3, #3
   890e6:	4b36      	ldr	r3, [pc, #216]	; (891c0 <SetHeaterState+0x18c>)
   890e8:	4610      	mov	r0, r2
   890ea:	4798      	blx	r3
   890ec:	4602      	mov	r2, r0
   890ee:	4b35      	ldr	r3, [pc, #212]	; (891c4 <SetHeaterState+0x190>)
   890f0:	601a      	str	r2, [r3, #0]
 
	    if (hotrinse_flag == 1)
   890f2:	4b35      	ldr	r3, [pc, #212]	; (891c8 <SetHeaterState+0x194>)
   890f4:	781b      	ldrb	r3, [r3, #0]
   890f6:	2b01      	cmp	r3, #1
   890f8:	d103      	bne.n	89102 <SetHeaterState+0xce>
		{
		  avg_duty = 4000;
   890fa:	4b34      	ldr	r3, [pc, #208]	; (891cc <SetHeaterState+0x198>)
   890fc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   89100:	801a      	strh	r2, [r3, #0]
		}
		  
		if (SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   89102:	4b2d      	ldr	r3, [pc, #180]	; (891b8 <SetHeaterState+0x184>)
   89104:	681b      	ldr	r3, [r3, #0]
   89106:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8910a:	d113      	bne.n	89134 <SetHeaterState+0x100>
		{
		  avg_duty = 2100;
   8910c:	4b2f      	ldr	r3, [pc, #188]	; (891cc <SetHeaterState+0x198>)
   8910e:	f640 0234 	movw	r2, #2100	; 0x834
   89112:	801a      	strh	r2, [r3, #0]
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_300;
   89114:	4b2e      	ldr	r3, [pc, #184]	; (891d0 <SetHeaterState+0x19c>)
   89116:	22f0      	movs	r2, #240	; 0xf0
   89118:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_TS3STABILITY_300;
   8911a:	4b2e      	ldr	r3, [pc, #184]	; (891d4 <SetHeaterState+0x1a0>)
   8911c:	2278      	movs	r2, #120	; 0x78
   8911e:	801a      	strh	r2, [r3, #0]
		  post_stability_count = TS2_STABILITY_COUNT_300;
   89120:	4b2d      	ldr	r3, [pc, #180]	; (891d8 <SetHeaterState+0x1a4>)
   89122:	221e      	movs	r2, #30
   89124:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_300;
   89126:	4b2d      	ldr	r3, [pc, #180]	; (891dc <SetHeaterState+0x1a8>)
   89128:	221e      	movs	r2, #30
   8912a:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_300;
   8912c:	4b2c      	ldr	r3, [pc, #176]	; (891e0 <SetHeaterState+0x1ac>)
   8912e:	4a2d      	ldr	r2, [pc, #180]	; (891e4 <SetHeaterState+0x1b0>)
   89130:	601a      	str	r2, [r3, #0]
   89132:	e084      	b.n	8923e <SetHeaterState+0x20a>
		}
		else if (SYSTEM_FLOW == 500)
   89134:	4b20      	ldr	r3, [pc, #128]	; (891b8 <SetHeaterState+0x184>)
   89136:	681b      	ldr	r3, [r3, #0]
   89138:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8913c:	d15a      	bne.n	891f4 <SetHeaterState+0x1c0>
		{
		  avg_duty = 2300;
   8913e:	4b23      	ldr	r3, [pc, #140]	; (891cc <SetHeaterState+0x198>)
   89140:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89144:	801a      	strh	r2, [r3, #0]
		  if (Tmp1Val <= 26)
   89146:	4b14      	ldr	r3, [pc, #80]	; (89198 <SetHeaterState+0x164>)
   89148:	681a      	ldr	r2, [r3, #0]
   8914a:	4b27      	ldr	r3, [pc, #156]	; (891e8 <SetHeaterState+0x1b4>)
   8914c:	4927      	ldr	r1, [pc, #156]	; (891ec <SetHeaterState+0x1b8>)
   8914e:	4610      	mov	r0, r2
   89150:	4798      	blx	r3
   89152:	4603      	mov	r3, r0
   89154:	2b00      	cmp	r3, #0
   89156:	d003      	beq.n	89160 <SetHeaterState+0x12c>
		  {
		   avg_duty = 2400;
   89158:	4b1c      	ldr	r3, [pc, #112]	; (891cc <SetHeaterState+0x198>)
   8915a:	f44f 6216 	mov.w	r2, #2400	; 0x960
   8915e:	801a      	strh	r2, [r3, #0]
		  }
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_500;
   89160:	4b1b      	ldr	r3, [pc, #108]	; (891d0 <SetHeaterState+0x19c>)
   89162:	22b4      	movs	r2, #180	; 0xb4
   89164:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_STABILITY_500;
   89166:	4b1b      	ldr	r3, [pc, #108]	; (891d4 <SetHeaterState+0x1a0>)
   89168:	22b4      	movs	r2, #180	; 0xb4
   8916a:	801a      	strh	r2, [r3, #0]
		  post_stability_count =  TS2_STABILITY_COUNT_500;
   8916c:	4b1a      	ldr	r3, [pc, #104]	; (891d8 <SetHeaterState+0x1a4>)
   8916e:	221e      	movs	r2, #30
   89170:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_500;
   89172:	4b1a      	ldr	r3, [pc, #104]	; (891dc <SetHeaterState+0x1a8>)
   89174:	223c      	movs	r2, #60	; 0x3c
   89176:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_500;
   89178:	4b19      	ldr	r3, [pc, #100]	; (891e0 <SetHeaterState+0x1ac>)
   8917a:	4a1d      	ldr	r2, [pc, #116]	; (891f0 <SetHeaterState+0x1bc>)
   8917c:	601a      	str	r2, [r3, #0]
   8917e:	e05e      	b.n	8923e <SetHeaterState+0x20a>
   89180:	20071883 	.word	0x20071883
   89184:	20071884 	.word	0x20071884
   89188:	0009adcd 	.word	0x0009adcd
   8918c:	20071888 	.word	0x20071888
   89190:	20071b69 	.word	0x20071b69
   89194:	0008fa01 	.word	0x0008fa01
   89198:	20071894 	.word	0x20071894
   8919c:	000a7fa9 	.word	0x000a7fa9
   891a0:	41100000 	.word	0x41100000
   891a4:	000a7f01 	.word	0x000a7f01
   891a8:	000a8111 	.word	0x000a8111
   891ac:	41200000 	.word	0x41200000
   891b0:	000a7d99 	.word	0x000a7d99
   891b4:	20072614 	.word	0x20072614
   891b8:	200704d8 	.word	0x200704d8
   891bc:	cccccccd 	.word	0xcccccccd
   891c0:	000a7ef9 	.word	0x000a7ef9
   891c4:	200720c8 	.word	0x200720c8
   891c8:	20071bb5 	.word	0x20071bb5
   891cc:	20071886 	.word	0x20071886
   891d0:	200704d0 	.word	0x200704d0
   891d4:	200704d2 	.word	0x200704d2
   891d8:	200718a8 	.word	0x200718a8
   891dc:	200718aa 	.word	0x200718aa
   891e0:	200720dc 	.word	0x200720dc
   891e4:	42200000 	.word	0x42200000
   891e8:	000a82f9 	.word	0x000a82f9
   891ec:	41d00000 	.word	0x41d00000
   891f0:	421c0000 	.word	0x421c0000
		}
		else if (SYSTEM_FLOW == 800)
   891f4:	4b5f      	ldr	r3, [pc, #380]	; (89374 <SetHeaterState+0x340>)
   891f6:	681b      	ldr	r3, [r3, #0]
   891f8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   891fc:	d11f      	bne.n	8923e <SetHeaterState+0x20a>
		{
			avg_duty = 2300;
   891fe:	4b5e      	ldr	r3, [pc, #376]	; (89378 <SetHeaterState+0x344>)
   89200:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89204:	801a      	strh	r2, [r3, #0]
			if (Tmp1Val <= 26)
   89206:	4b5d      	ldr	r3, [pc, #372]	; (8937c <SetHeaterState+0x348>)
   89208:	681a      	ldr	r2, [r3, #0]
   8920a:	4b5d      	ldr	r3, [pc, #372]	; (89380 <SetHeaterState+0x34c>)
   8920c:	495d      	ldr	r1, [pc, #372]	; (89384 <SetHeaterState+0x350>)
   8920e:	4610      	mov	r0, r2
   89210:	4798      	blx	r3
   89212:	4603      	mov	r3, r0
   89214:	2b00      	cmp	r3, #0
   89216:	d003      	beq.n	89220 <SetHeaterState+0x1ec>
			{
				avg_duty = 2400;
   89218:	4b57      	ldr	r3, [pc, #348]	; (89378 <SetHeaterState+0x344>)
   8921a:	f44f 6216 	mov.w	r2, #2400	; 0x960
   8921e:	801a      	strh	r2, [r3, #0]
			}
			wait_4_TS2Stability = WAIT_4_TS2STABILITY_800;
   89220:	4b59      	ldr	r3, [pc, #356]	; (89388 <SetHeaterState+0x354>)
   89222:	22b4      	movs	r2, #180	; 0xb4
   89224:	801a      	strh	r2, [r3, #0]
			wait_4_stability = WAIT_4_STABILITY_800;
   89226:	4b59      	ldr	r3, [pc, #356]	; (8938c <SetHeaterState+0x358>)
   89228:	22b4      	movs	r2, #180	; 0xb4
   8922a:	801a      	strh	r2, [r3, #0]
			post_stability_count =  TS2_STABILITY_COUNT_800;
   8922c:	4b58      	ldr	r3, [pc, #352]	; (89390 <SetHeaterState+0x35c>)
   8922e:	221e      	movs	r2, #30
   89230:	801a      	strh	r2, [r3, #0]
			TS3_post_stability_count = TS3_STABILITY_COUNT_800;
   89232:	4b58      	ldr	r3, [pc, #352]	; (89394 <SetHeaterState+0x360>)
   89234:	223c      	movs	r2, #60	; 0x3c
   89236:	801a      	strh	r2, [r3, #0]
			Prescribed_T2 = PRESCRIBED_TS2_800;
   89238:	4b57      	ldr	r3, [pc, #348]	; (89398 <SetHeaterState+0x364>)
   8923a:	4a58      	ldr	r2, [pc, #352]	; (8939c <SetHeaterState+0x368>)
   8923c:	601a      	str	r2, [r3, #0]
		}
			
		avg_duty = avg_duty ;
   8923e:	4b4e      	ldr	r3, [pc, #312]	; (89378 <SetHeaterState+0x344>)
   89240:	f9b3 2000 	ldrsh.w	r2, [r3]
   89244:	4b4c      	ldr	r3, [pc, #304]	; (89378 <SetHeaterState+0x344>)
   89246:	801a      	strh	r2, [r3, #0]
 	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89248:	f107 030c 	add.w	r3, r7, #12
   8924c:	4619      	mov	r1, r3
   8924e:	2012      	movs	r0, #18
   89250:	4b53      	ldr	r3, [pc, #332]	; (893a0 <SetHeaterState+0x36c>)
   89252:	4798      	blx	r3
    {
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   89254:	4b49      	ldr	r3, [pc, #292]	; (8937c <SetHeaterState+0x348>)
   89256:	681a      	ldr	r2, [r3, #0]
   89258:	4b52      	ldr	r3, [pc, #328]	; (893a4 <SetHeaterState+0x370>)
   8925a:	4953      	ldr	r1, [pc, #332]	; (893a8 <SetHeaterState+0x374>)
   8925c:	4610      	mov	r0, r2
   8925e:	4798      	blx	r3
   89260:	4603      	mov	r3, r0
   89262:	461c      	mov	r4, r3
   89264:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   89268:	4b50      	ldr	r3, [pc, #320]	; (893ac <SetHeaterState+0x378>)
   8926a:	4610      	mov	r0, r2
   8926c:	4798      	blx	r3
   8926e:	4602      	mov	r2, r0
   89270:	4b4f      	ldr	r3, [pc, #316]	; (893b0 <SetHeaterState+0x37c>)
   89272:	4950      	ldr	r1, [pc, #320]	; (893b4 <SetHeaterState+0x380>)
   89274:	4610      	mov	r0, r2
   89276:	4798      	blx	r3
   89278:	4603      	mov	r3, r0
   8927a:	461a      	mov	r2, r3
   8927c:	4b4e      	ldr	r3, [pc, #312]	; (893b8 <SetHeaterState+0x384>)
   8927e:	4611      	mov	r1, r2
   89280:	4620      	mov	r0, r4
   89282:	4798      	blx	r3
   89284:	4603      	mov	r3, r0
   89286:	461a      	mov	r2, r3
   89288:	4b49      	ldr	r3, [pc, #292]	; (893b0 <SetHeaterState+0x37c>)
   8928a:	494c      	ldr	r1, [pc, #304]	; (893bc <SetHeaterState+0x388>)
   8928c:	4610      	mov	r0, r2
   8928e:	4798      	blx	r3
   89290:	4603      	mov	r3, r0
   89292:	461a      	mov	r2, r3
   89294:	4b39      	ldr	r3, [pc, #228]	; (8937c <SetHeaterState+0x348>)
   89296:	601a      	str	r2, [r3, #0]
	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   89298:	f107 030c 	add.w	r3, r7, #12
   8929c:	4619      	mov	r1, r3
   8929e:	2013      	movs	r0, #19
   892a0:	4b3f      	ldr	r3, [pc, #252]	; (893a0 <SetHeaterState+0x36c>)
   892a2:	4798      	blx	r3
	{
	   Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   892a4:	4b46      	ldr	r3, [pc, #280]	; (893c0 <SetHeaterState+0x38c>)
   892a6:	681a      	ldr	r2, [r3, #0]
   892a8:	4b3e      	ldr	r3, [pc, #248]	; (893a4 <SetHeaterState+0x370>)
   892aa:	493f      	ldr	r1, [pc, #252]	; (893a8 <SetHeaterState+0x374>)
   892ac:	4610      	mov	r0, r2
   892ae:	4798      	blx	r3
   892b0:	4603      	mov	r3, r0
   892b2:	461c      	mov	r4, r3
   892b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   892b8:	4b3c      	ldr	r3, [pc, #240]	; (893ac <SetHeaterState+0x378>)
   892ba:	4610      	mov	r0, r2
   892bc:	4798      	blx	r3
   892be:	4602      	mov	r2, r0
   892c0:	4b3b      	ldr	r3, [pc, #236]	; (893b0 <SetHeaterState+0x37c>)
   892c2:	493c      	ldr	r1, [pc, #240]	; (893b4 <SetHeaterState+0x380>)
   892c4:	4610      	mov	r0, r2
   892c6:	4798      	blx	r3
   892c8:	4603      	mov	r3, r0
   892ca:	461a      	mov	r2, r3
   892cc:	4b3a      	ldr	r3, [pc, #232]	; (893b8 <SetHeaterState+0x384>)
   892ce:	4611      	mov	r1, r2
   892d0:	4620      	mov	r0, r4
   892d2:	4798      	blx	r3
   892d4:	4603      	mov	r3, r0
   892d6:	461a      	mov	r2, r3
   892d8:	4b35      	ldr	r3, [pc, #212]	; (893b0 <SetHeaterState+0x37c>)
   892da:	4938      	ldr	r1, [pc, #224]	; (893bc <SetHeaterState+0x388>)
   892dc:	4610      	mov	r0, r2
   892de:	4798      	blx	r3
   892e0:	4603      	mov	r3, r0
   892e2:	461a      	mov	r2, r3
   892e4:	4b36      	ldr	r3, [pc, #216]	; (893c0 <SetHeaterState+0x38c>)
   892e6:	601a      	str	r2, [r3, #0]
  	   prev_temp2val = Tmp2Val;
   892e8:	4b35      	ldr	r3, [pc, #212]	; (893c0 <SetHeaterState+0x38c>)
   892ea:	681a      	ldr	r2, [r3, #0]
   892ec:	4b35      	ldr	r3, [pc, #212]	; (893c4 <SetHeaterState+0x390>)
   892ee:	4610      	mov	r0, r2
   892f0:	4798      	blx	r3
   892f2:	4603      	mov	r3, r0
   892f4:	b21a      	sxth	r2, r3
   892f6:	4b34      	ldr	r3, [pc, #208]	; (893c8 <SetHeaterState+0x394>)
   892f8:	801a      	strh	r2, [r3, #0]
	}
		 	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   892fa:	f107 030c 	add.w	r3, r7, #12
   892fe:	4619      	mov	r1, r3
   89300:	2014      	movs	r0, #20
   89302:	4b27      	ldr	r3, [pc, #156]	; (893a0 <SetHeaterState+0x36c>)
   89304:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   89306:	4b31      	ldr	r3, [pc, #196]	; (893cc <SetHeaterState+0x398>)
   89308:	681a      	ldr	r2, [r3, #0]
   8930a:	4b26      	ldr	r3, [pc, #152]	; (893a4 <SetHeaterState+0x370>)
   8930c:	4926      	ldr	r1, [pc, #152]	; (893a8 <SetHeaterState+0x374>)
   8930e:	4610      	mov	r0, r2
   89310:	4798      	blx	r3
   89312:	4603      	mov	r3, r0
   89314:	461c      	mov	r4, r3
   89316:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   8931a:	4b24      	ldr	r3, [pc, #144]	; (893ac <SetHeaterState+0x378>)
   8931c:	4610      	mov	r0, r2
   8931e:	4798      	blx	r3
   89320:	4602      	mov	r2, r0
   89322:	4b23      	ldr	r3, [pc, #140]	; (893b0 <SetHeaterState+0x37c>)
   89324:	4923      	ldr	r1, [pc, #140]	; (893b4 <SetHeaterState+0x380>)
   89326:	4610      	mov	r0, r2
   89328:	4798      	blx	r3
   8932a:	4603      	mov	r3, r0
   8932c:	461a      	mov	r2, r3
   8932e:	4b22      	ldr	r3, [pc, #136]	; (893b8 <SetHeaterState+0x384>)
   89330:	4611      	mov	r1, r2
   89332:	4620      	mov	r0, r4
   89334:	4798      	blx	r3
   89336:	4603      	mov	r3, r0
   89338:	461a      	mov	r2, r3
   8933a:	4b1d      	ldr	r3, [pc, #116]	; (893b0 <SetHeaterState+0x37c>)
   8933c:	491f      	ldr	r1, [pc, #124]	; (893bc <SetHeaterState+0x388>)
   8933e:	4610      	mov	r0, r2
   89340:	4798      	blx	r3
   89342:	4603      	mov	r3, r0
   89344:	461a      	mov	r2, r3
   89346:	4b21      	ldr	r3, [pc, #132]	; (893cc <SetHeaterState+0x398>)
   89348:	601a      	str	r2, [r3, #0]
    	prev_temp3val = Tmp3Val;
   8934a:	4b20      	ldr	r3, [pc, #128]	; (893cc <SetHeaterState+0x398>)
   8934c:	681a      	ldr	r2, [r3, #0]
   8934e:	4b1d      	ldr	r3, [pc, #116]	; (893c4 <SetHeaterState+0x390>)
   89350:	4610      	mov	r0, r2
   89352:	4798      	blx	r3
   89354:	4603      	mov	r3, r0
   89356:	b21a      	sxth	r2, r3
   89358:	4b1d      	ldr	r3, [pc, #116]	; (893d0 <SetHeaterState+0x39c>)
   8935a:	801a      	strh	r2, [r3, #0]
	}
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   8935c:	4b1d      	ldr	r3, [pc, #116]	; (893d4 <SetHeaterState+0x3a0>)
   8935e:	781b      	ldrb	r3, [r3, #0]
   89360:	2b06      	cmp	r3, #6
   89362:	d102      	bne.n	8936a <SetHeaterState+0x336>
	{
		avg_duty = 100;
   89364:	4b04      	ldr	r3, [pc, #16]	; (89378 <SetHeaterState+0x344>)
   89366:	2264      	movs	r2, #100	; 0x64
   89368:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   8936a:	7bfb      	ldrb	r3, [r7, #15]
}
   8936c:	4618      	mov	r0, r3
   8936e:	3714      	adds	r7, #20
   89370:	46bd      	mov	sp, r7
   89372:	bd90      	pop	{r4, r7, pc}
   89374:	200704d8 	.word	0x200704d8
   89378:	20071886 	.word	0x20071886
   8937c:	20071894 	.word	0x20071894
   89380:	000a82f9 	.word	0x000a82f9
   89384:	41d00000 	.word	0x41d00000
   89388:	200704d0 	.word	0x200704d0
   8938c:	200704d2 	.word	0x200704d2
   89390:	200718a8 	.word	0x200718a8
   89394:	200718aa 	.word	0x200718aa
   89398:	200720dc 	.word	0x200720dc
   8939c:	421c0000 	.word	0x421c0000
   893a0:	0008fa01 	.word	0x0008fa01
   893a4:	000a7fa9 	.word	0x000a7fa9
   893a8:	41100000 	.word	0x41100000
   893ac:	000a7f01 	.word	0x000a7f01
   893b0:	000a8111 	.word	0x000a8111
   893b4:	42c80000 	.word	0x42c80000
   893b8:	000a7d99 	.word	0x000a7d99
   893bc:	41200000 	.word	0x41200000
   893c0:	20071898 	.word	0x20071898
   893c4:	000a8335 	.word	0x000a8335
   893c8:	2007188a 	.word	0x2007188a
   893cc:	2007189c 	.word	0x2007189c
   893d0:	2007188c 	.word	0x2007188c
   893d4:	20071883 	.word	0x20071883

000893d8 <Heat_Correction>:

int16_t Heat_Correction()
{
   893d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   893da:	b083      	sub	sp, #12
   893dc:	af00      	add	r7, sp, #0
	count_500ms ++;
   893de:	4b17      	ldr	r3, [pc, #92]	; (8943c <Heat_Correction+0x64>)
   893e0:	881b      	ldrh	r3, [r3, #0]
   893e2:	3301      	adds	r3, #1
   893e4:	b29a      	uxth	r2, r3
   893e6:	4b15      	ldr	r3, [pc, #84]	; (8943c <Heat_Correction+0x64>)
   893e8:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   893ea:	4b15      	ldr	r3, [pc, #84]	; (89440 <Heat_Correction+0x68>)
   893ec:	881b      	ldrh	r3, [r3, #0]
   893ee:	3301      	adds	r3, #1
   893f0:	b29a      	uxth	r2, r3
   893f2:	4b13      	ldr	r3, [pc, #76]	; (89440 <Heat_Correction+0x68>)
   893f4:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   893f6:	4b13      	ldr	r3, [pc, #76]	; (89444 <Heat_Correction+0x6c>)
   893f8:	881b      	ldrh	r3, [r3, #0]
   893fa:	3301      	adds	r3, #1
   893fc:	b29a      	uxth	r2, r3
   893fe:	4b11      	ldr	r3, [pc, #68]	; (89444 <Heat_Correction+0x6c>)
   89400:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   89402:	4b0e      	ldr	r3, [pc, #56]	; (8943c <Heat_Correction+0x64>)
   89404:	881b      	ldrh	r3, [r3, #0]
   89406:	4a10      	ldr	r2, [pc, #64]	; (89448 <Heat_Correction+0x70>)
   89408:	fba2 1203 	umull	r1, r2, r2, r3
   8940c:	0992      	lsrs	r2, r2, #6
   8940e:	f44f 7116 	mov.w	r1, #600	; 0x258
   89412:	fb01 f202 	mul.w	r2, r1, r2
   89416:	1a9b      	subs	r3, r3, r2
   89418:	b29b      	uxth	r3, r3
   8941a:	2b00      	cmp	r3, #0
   8941c:	d107      	bne.n	8942e <Heat_Correction+0x56>
	{
		Past_TS2 = Tmp2Val;
   8941e:	4b0b      	ldr	r3, [pc, #44]	; (8944c <Heat_Correction+0x74>)
   89420:	681b      	ldr	r3, [r3, #0]
   89422:	4a0b      	ldr	r2, [pc, #44]	; (89450 <Heat_Correction+0x78>)
   89424:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   89426:	4b05      	ldr	r3, [pc, #20]	; (8943c <Heat_Correction+0x64>)
   89428:	881a      	ldrh	r2, [r3, #0]
   8942a:	4b0a      	ldr	r3, [pc, #40]	; (89454 <Heat_Correction+0x7c>)
   8942c:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   8942e:	4b0a      	ldr	r3, [pc, #40]	; (89458 <Heat_Correction+0x80>)
   89430:	781b      	ldrb	r3, [r3, #0]
   89432:	2b04      	cmp	r3, #4
   89434:	d114      	bne.n	89460 <Heat_Correction+0x88>
	{
		sv_cntrl_poweroffheater();
   89436:	4b09      	ldr	r3, [pc, #36]	; (8945c <Heat_Correction+0x84>)
   89438:	4798      	blx	r3
		return;
   8943a:	e31d      	b.n	89a78 <Heat_Correction+0x6a0>
   8943c:	200718a0 	.word	0x200718a0
   89440:	200718a2 	.word	0x200718a2
   89444:	200718a4 	.word	0x200718a4
   89448:	1b4e81b5 	.word	0x1b4e81b5
   8944c:	20071898 	.word	0x20071898
   89450:	200718b4 	.word	0x200718b4
   89454:	200718a6 	.word	0x200718a6
   89458:	20071883 	.word	0x20071883
   8945c:	0009adcd 	.word	0x0009adcd
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   89460:	4b97      	ldr	r3, [pc, #604]	; (896c0 <Heat_Correction+0x2e8>)
   89462:	781b      	ldrb	r3, [r3, #0]
   89464:	2b00      	cmp	r3, #0
   89466:	f000 8306 	beq.w	89a76 <Heat_Correction+0x69e>
   8946a:	4b95      	ldr	r3, [pc, #596]	; (896c0 <Heat_Correction+0x2e8>)
   8946c:	781b      	ldrb	r3, [r3, #0]
   8946e:	2b00      	cmp	r3, #0
   89470:	f000 8301 	beq.w	89a76 <Heat_Correction+0x69e>
	{
		return;
	}
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if((HeaterState == CL_HEATER_STATE_ON) || (HeaterState == CL_HEATER_STATE_DIALYSER_PRIME_ON) || (HeaterState == CL_HEATER_STATE_DIALYSIS_ON))
   89474:	4b92      	ldr	r3, [pc, #584]	; (896c0 <Heat_Correction+0x2e8>)
   89476:	781b      	ldrb	r3, [r3, #0]
   89478:	2b01      	cmp	r3, #1
   8947a:	d007      	beq.n	8948c <Heat_Correction+0xb4>
   8947c:	4b90      	ldr	r3, [pc, #576]	; (896c0 <Heat_Correction+0x2e8>)
   8947e:	781b      	ldrb	r3, [r3, #0]
   89480:	2b02      	cmp	r3, #2
   89482:	d003      	beq.n	8948c <Heat_Correction+0xb4>
   89484:	4b8e      	ldr	r3, [pc, #568]	; (896c0 <Heat_Correction+0x2e8>)
   89486:	781b      	ldrb	r3, [r3, #0]
   89488:	2b03      	cmp	r3, #3
   8948a:	d107      	bne.n	8949c <Heat_Correction+0xc4>
	{
	 		sv_cntrl_poweronheater();
   8948c:	4b8d      	ldr	r3, [pc, #564]	; (896c4 <Heat_Correction+0x2ec>)
   8948e:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   89490:	4b8d      	ldr	r3, [pc, #564]	; (896c8 <Heat_Correction+0x2f0>)
   89492:	f9b3 3000 	ldrsh.w	r3, [r3]
   89496:	4618      	mov	r0, r3
   89498:	4b8c      	ldr	r3, [pc, #560]	; (896cc <Heat_Correction+0x2f4>)
   8949a:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   8949c:	1dbb      	adds	r3, r7, #6
   8949e:	4619      	mov	r1, r3
   894a0:	2012      	movs	r0, #18
   894a2:	4b8b      	ldr	r3, [pc, #556]	; (896d0 <Heat_Correction+0x2f8>)
   894a4:	4798      	blx	r3
	{
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   894a6:	4b8b      	ldr	r3, [pc, #556]	; (896d4 <Heat_Correction+0x2fc>)
   894a8:	681a      	ldr	r2, [r3, #0]
   894aa:	4b8b      	ldr	r3, [pc, #556]	; (896d8 <Heat_Correction+0x300>)
   894ac:	498b      	ldr	r1, [pc, #556]	; (896dc <Heat_Correction+0x304>)
   894ae:	4610      	mov	r0, r2
   894b0:	4798      	blx	r3
   894b2:	4603      	mov	r3, r0
   894b4:	461c      	mov	r4, r3
   894b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   894ba:	4b89      	ldr	r3, [pc, #548]	; (896e0 <Heat_Correction+0x308>)
   894bc:	4610      	mov	r0, r2
   894be:	4798      	blx	r3
   894c0:	4602      	mov	r2, r0
   894c2:	4b88      	ldr	r3, [pc, #544]	; (896e4 <Heat_Correction+0x30c>)
   894c4:	4988      	ldr	r1, [pc, #544]	; (896e8 <Heat_Correction+0x310>)
   894c6:	4610      	mov	r0, r2
   894c8:	4798      	blx	r3
   894ca:	4603      	mov	r3, r0
   894cc:	461a      	mov	r2, r3
   894ce:	4b87      	ldr	r3, [pc, #540]	; (896ec <Heat_Correction+0x314>)
   894d0:	4611      	mov	r1, r2
   894d2:	4620      	mov	r0, r4
   894d4:	4798      	blx	r3
   894d6:	4603      	mov	r3, r0
   894d8:	461a      	mov	r2, r3
   894da:	4b82      	ldr	r3, [pc, #520]	; (896e4 <Heat_Correction+0x30c>)
   894dc:	4984      	ldr	r1, [pc, #528]	; (896f0 <Heat_Correction+0x318>)
   894de:	4610      	mov	r0, r2
   894e0:	4798      	blx	r3
   894e2:	4603      	mov	r3, r0
   894e4:	461a      	mov	r2, r3
   894e6:	4b7b      	ldr	r3, [pc, #492]	; (896d4 <Heat_Correction+0x2fc>)
   894e8:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))    // 40 28072017
   894ea:	4b82      	ldr	r3, [pc, #520]	; (896f4 <Heat_Correction+0x31c>)
   894ec:	881a      	ldrh	r2, [r3, #0]
   894ee:	4b82      	ldr	r3, [pc, #520]	; (896f8 <Heat_Correction+0x320>)
   894f0:	fba3 1302 	umull	r1, r3, r3, r2
   894f4:	0959      	lsrs	r1, r3, #5
   894f6:	460b      	mov	r3, r1
   894f8:	009b      	lsls	r3, r3, #2
   894fa:	440b      	add	r3, r1
   894fc:	00db      	lsls	r3, r3, #3
   894fe:	1ad3      	subs	r3, r2, r3
   89500:	b29b      	uxth	r3, r3
   89502:	2b00      	cmp	r3, #0
   89504:	d103      	bne.n	8950e <Heat_Correction+0x136>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   89506:	4b7d      	ldr	r3, [pc, #500]	; (896fc <Heat_Correction+0x324>)
   89508:	681b      	ldr	r3, [r3, #0]
   8950a:	4a7d      	ldr	r2, [pc, #500]	; (89700 <Heat_Correction+0x328>)
   8950c:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8950e:	1dbb      	adds	r3, r7, #6
   89510:	4619      	mov	r1, r3
   89512:	2013      	movs	r0, #19
   89514:	4b6e      	ldr	r3, [pc, #440]	; (896d0 <Heat_Correction+0x2f8>)
   89516:	4798      	blx	r3
	{
		Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   89518:	4b78      	ldr	r3, [pc, #480]	; (896fc <Heat_Correction+0x324>)
   8951a:	681a      	ldr	r2, [r3, #0]
   8951c:	4b6e      	ldr	r3, [pc, #440]	; (896d8 <Heat_Correction+0x300>)
   8951e:	496f      	ldr	r1, [pc, #444]	; (896dc <Heat_Correction+0x304>)
   89520:	4610      	mov	r0, r2
   89522:	4798      	blx	r3
   89524:	4603      	mov	r3, r0
   89526:	461c      	mov	r4, r3
   89528:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8952c:	4b6c      	ldr	r3, [pc, #432]	; (896e0 <Heat_Correction+0x308>)
   8952e:	4610      	mov	r0, r2
   89530:	4798      	blx	r3
   89532:	4602      	mov	r2, r0
   89534:	4b6b      	ldr	r3, [pc, #428]	; (896e4 <Heat_Correction+0x30c>)
   89536:	496c      	ldr	r1, [pc, #432]	; (896e8 <Heat_Correction+0x310>)
   89538:	4610      	mov	r0, r2
   8953a:	4798      	blx	r3
   8953c:	4603      	mov	r3, r0
   8953e:	461a      	mov	r2, r3
   89540:	4b6a      	ldr	r3, [pc, #424]	; (896ec <Heat_Correction+0x314>)
   89542:	4611      	mov	r1, r2
   89544:	4620      	mov	r0, r4
   89546:	4798      	blx	r3
   89548:	4603      	mov	r3, r0
   8954a:	461a      	mov	r2, r3
   8954c:	4b65      	ldr	r3, [pc, #404]	; (896e4 <Heat_Correction+0x30c>)
   8954e:	4968      	ldr	r1, [pc, #416]	; (896f0 <Heat_Correction+0x318>)
   89550:	4610      	mov	r0, r2
   89552:	4798      	blx	r3
   89554:	4603      	mov	r3, r0
   89556:	461a      	mov	r2, r3
   89558:	4b68      	ldr	r3, [pc, #416]	; (896fc <Heat_Correction+0x324>)
   8955a:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   8955c:	4b65      	ldr	r3, [pc, #404]	; (896f4 <Heat_Correction+0x31c>)
   8955e:	881a      	ldrh	r2, [r3, #0]
   89560:	4b65      	ldr	r3, [pc, #404]	; (896f8 <Heat_Correction+0x320>)
   89562:	fba3 1302 	umull	r1, r3, r3, r2
   89566:	0919      	lsrs	r1, r3, #4
   89568:	460b      	mov	r3, r1
   8956a:	009b      	lsls	r3, r3, #2
   8956c:	440b      	add	r3, r1
   8956e:	009b      	lsls	r3, r3, #2
   89570:	1ad3      	subs	r3, r2, r3
   89572:	b29b      	uxth	r3, r3
   89574:	2b00      	cmp	r3, #0
   89576:	d103      	bne.n	89580 <Heat_Correction+0x1a8>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   89578:	4b62      	ldr	r3, [pc, #392]	; (89704 <Heat_Correction+0x32c>)
   8957a:	681b      	ldr	r3, [r3, #0]
   8957c:	4a62      	ldr	r2, [pc, #392]	; (89708 <Heat_Correction+0x330>)
   8957e:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   89580:	1dbb      	adds	r3, r7, #6
   89582:	4619      	mov	r1, r3
   89584:	2014      	movs	r0, #20
   89586:	4b52      	ldr	r3, [pc, #328]	; (896d0 <Heat_Correction+0x2f8>)
   89588:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   8958a:	4b5e      	ldr	r3, [pc, #376]	; (89704 <Heat_Correction+0x32c>)
   8958c:	681a      	ldr	r2, [r3, #0]
   8958e:	4b52      	ldr	r3, [pc, #328]	; (896d8 <Heat_Correction+0x300>)
   89590:	4952      	ldr	r1, [pc, #328]	; (896dc <Heat_Correction+0x304>)
   89592:	4610      	mov	r0, r2
   89594:	4798      	blx	r3
   89596:	4603      	mov	r3, r0
   89598:	461c      	mov	r4, r3
   8959a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8959e:	4b50      	ldr	r3, [pc, #320]	; (896e0 <Heat_Correction+0x308>)
   895a0:	4610      	mov	r0, r2
   895a2:	4798      	blx	r3
   895a4:	4602      	mov	r2, r0
   895a6:	4b4f      	ldr	r3, [pc, #316]	; (896e4 <Heat_Correction+0x30c>)
   895a8:	494f      	ldr	r1, [pc, #316]	; (896e8 <Heat_Correction+0x310>)
   895aa:	4610      	mov	r0, r2
   895ac:	4798      	blx	r3
   895ae:	4603      	mov	r3, r0
   895b0:	461a      	mov	r2, r3
   895b2:	4b4e      	ldr	r3, [pc, #312]	; (896ec <Heat_Correction+0x314>)
   895b4:	4611      	mov	r1, r2
   895b6:	4620      	mov	r0, r4
   895b8:	4798      	blx	r3
   895ba:	4603      	mov	r3, r0
   895bc:	461a      	mov	r2, r3
   895be:	4b49      	ldr	r3, [pc, #292]	; (896e4 <Heat_Correction+0x30c>)
   895c0:	494b      	ldr	r1, [pc, #300]	; (896f0 <Heat_Correction+0x318>)
   895c2:	4610      	mov	r0, r2
   895c4:	4798      	blx	r3
   895c6:	4603      	mov	r3, r0
   895c8:	461a      	mov	r2, r3
   895ca:	4b4e      	ldr	r3, [pc, #312]	; (89704 <Heat_Correction+0x32c>)
   895cc:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   895ce:	4b4f      	ldr	r3, [pc, #316]	; (8970c <Heat_Correction+0x334>)
   895d0:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   895d2:	4b4f      	ldr	r3, [pc, #316]	; (89710 <Heat_Correction+0x338>)
   895d4:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   895d6:	4b4f      	ldr	r3, [pc, #316]	; (89714 <Heat_Correction+0x33c>)
   895d8:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   895da:	4b4f      	ldr	r3, [pc, #316]	; (89718 <Heat_Correction+0x340>)
   895dc:	4798      	blx	r3
   895de:	4603      	mov	r3, r0
   895e0:	461a      	mov	r2, r3
   895e2:	4b4e      	ldr	r3, [pc, #312]	; (8971c <Heat_Correction+0x344>)
   895e4:	701a      	strb	r2, [r3, #0]
	
	if (SYSTEM_FLOW == 300)
   895e6:	4b4e      	ldr	r3, [pc, #312]	; (89720 <Heat_Correction+0x348>)
   895e8:	681b      	ldr	r3, [r3, #0]
   895ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   895ee:	d135      	bne.n	8965c <Heat_Correction+0x284>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   895f0:	4b42      	ldr	r3, [pc, #264]	; (896fc <Heat_Correction+0x324>)
   895f2:	681a      	ldr	r2, [r3, #0]
   895f4:	4b4b      	ldr	r3, [pc, #300]	; (89724 <Heat_Correction+0x34c>)
   895f6:	4610      	mov	r0, r2
   895f8:	4798      	blx	r3
   895fa:	4605      	mov	r5, r0
   895fc:	460e      	mov	r6, r1
   895fe:	4b4a      	ldr	r3, [pc, #296]	; (89728 <Heat_Correction+0x350>)
   89600:	681a      	ldr	r2, [r3, #0]
   89602:	4b48      	ldr	r3, [pc, #288]	; (89724 <Heat_Correction+0x34c>)
   89604:	4610      	mov	r0, r2
   89606:	4798      	blx	r3
   89608:	4c48      	ldr	r4, [pc, #288]	; (8972c <Heat_Correction+0x354>)
   8960a:	f04f 0200 	mov.w	r2, #0
   8960e:	4b48      	ldr	r3, [pc, #288]	; (89730 <Heat_Correction+0x358>)
   89610:	47a0      	blx	r4
   89612:	4603      	mov	r3, r0
   89614:	460c      	mov	r4, r1
   89616:	461a      	mov	r2, r3
   89618:	4623      	mov	r3, r4
   8961a:	4c46      	ldr	r4, [pc, #280]	; (89734 <Heat_Correction+0x35c>)
   8961c:	4628      	mov	r0, r5
   8961e:	4631      	mov	r1, r6
   89620:	47a0      	blx	r4
   89622:	4603      	mov	r3, r0
   89624:	2b00      	cmp	r3, #0
   89626:	d019      	beq.n	8965c <Heat_Correction+0x284>
   89628:	4b36      	ldr	r3, [pc, #216]	; (89704 <Heat_Correction+0x32c>)
   8962a:	681a      	ldr	r2, [r3, #0]
   8962c:	4b42      	ldr	r3, [pc, #264]	; (89738 <Heat_Correction+0x360>)
   8962e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89632:	4610      	mov	r0, r2
   89634:	4798      	blx	r3
   89636:	4603      	mov	r3, r0
   89638:	2b00      	cmp	r3, #0
   8963a:	d00f      	beq.n	8965c <Heat_Correction+0x284>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   8963c:	4b2d      	ldr	r3, [pc, #180]	; (896f4 <Heat_Correction+0x31c>)
   8963e:	881a      	ldrh	r2, [r3, #0]
   89640:	4b2d      	ldr	r3, [pc, #180]	; (896f8 <Heat_Correction+0x320>)
   89642:	fba3 1302 	umull	r1, r3, r3, r2
   89646:	0919      	lsrs	r1, r3, #4
   89648:	460b      	mov	r3, r1
   8964a:	009b      	lsls	r3, r3, #2
   8964c:	440b      	add	r3, r1
   8964e:	009b      	lsls	r3, r3, #2
   89650:	1ad3      	subs	r3, r2, r3
   89652:	b29b      	uxth	r3, r3
   89654:	2b00      	cmp	r3, #0
   89656:	d101      	bne.n	8965c <Heat_Correction+0x284>
			{
				Coarse_DutyCorrection();
   89658:	4b38      	ldr	r3, [pc, #224]	; (8973c <Heat_Correction+0x364>)
   8965a:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 500)
   8965c:	4b30      	ldr	r3, [pc, #192]	; (89720 <Heat_Correction+0x348>)
   8965e:	681b      	ldr	r3, [r3, #0]
   89660:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89664:	d177      	bne.n	89756 <Heat_Correction+0x37e>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89666:	4b25      	ldr	r3, [pc, #148]	; (896fc <Heat_Correction+0x324>)
   89668:	681a      	ldr	r2, [r3, #0]
   8966a:	4b2e      	ldr	r3, [pc, #184]	; (89724 <Heat_Correction+0x34c>)
   8966c:	4610      	mov	r0, r2
   8966e:	4798      	blx	r3
   89670:	4605      	mov	r5, r0
   89672:	460e      	mov	r6, r1
   89674:	4b2c      	ldr	r3, [pc, #176]	; (89728 <Heat_Correction+0x350>)
   89676:	681a      	ldr	r2, [r3, #0]
   89678:	4b2a      	ldr	r3, [pc, #168]	; (89724 <Heat_Correction+0x34c>)
   8967a:	4610      	mov	r0, r2
   8967c:	4798      	blx	r3
   8967e:	4c2b      	ldr	r4, [pc, #172]	; (8972c <Heat_Correction+0x354>)
   89680:	f04f 0200 	mov.w	r2, #0
   89684:	4b2a      	ldr	r3, [pc, #168]	; (89730 <Heat_Correction+0x358>)
   89686:	47a0      	blx	r4
   89688:	4603      	mov	r3, r0
   8968a:	460c      	mov	r4, r1
   8968c:	461a      	mov	r2, r3
   8968e:	4623      	mov	r3, r4
   89690:	4c28      	ldr	r4, [pc, #160]	; (89734 <Heat_Correction+0x35c>)
   89692:	4628      	mov	r0, r5
   89694:	4631      	mov	r1, r6
   89696:	47a0      	blx	r4
   89698:	4603      	mov	r3, r0
   8969a:	2b00      	cmp	r3, #0
   8969c:	d05b      	beq.n	89756 <Heat_Correction+0x37e>
   8969e:	4b19      	ldr	r3, [pc, #100]	; (89704 <Heat_Correction+0x32c>)
   896a0:	681a      	ldr	r2, [r3, #0]
   896a2:	4b25      	ldr	r3, [pc, #148]	; (89738 <Heat_Correction+0x360>)
   896a4:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   896a8:	4610      	mov	r0, r2
   896aa:	4798      	blx	r3
   896ac:	4603      	mov	r3, r0
   896ae:	2b00      	cmp	r3, #0
   896b0:	d051      	beq.n	89756 <Heat_Correction+0x37e>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   896b2:	4b10      	ldr	r3, [pc, #64]	; (896f4 <Heat_Correction+0x31c>)
   896b4:	881a      	ldrh	r2, [r3, #0]
   896b6:	4b10      	ldr	r3, [pc, #64]	; (896f8 <Heat_Correction+0x320>)
   896b8:	fba3 1302 	umull	r1, r3, r3, r2
   896bc:	e040      	b.n	89740 <Heat_Correction+0x368>
   896be:	bf00      	nop
   896c0:	20071883 	.word	0x20071883
   896c4:	0009adb9 	.word	0x0009adb9
   896c8:	20071886 	.word	0x20071886
   896cc:	0009aec1 	.word	0x0009aec1
   896d0:	0008fa01 	.word	0x0008fa01
   896d4:	20071894 	.word	0x20071894
   896d8:	000a7fa9 	.word	0x000a7fa9
   896dc:	41100000 	.word	0x41100000
   896e0:	000a7f01 	.word	0x000a7f01
   896e4:	000a8111 	.word	0x000a8111
   896e8:	42c80000 	.word	0x42c80000
   896ec:	000a7d99 	.word	0x000a7d99
   896f0:	41200000 	.word	0x41200000
   896f4:	200718a0 	.word	0x200718a0
   896f8:	cccccccd 	.word	0xcccccccd
   896fc:	20071898 	.word	0x20071898
   89700:	200718b0 	.word	0x200718b0
   89704:	2007189c 	.word	0x2007189c
   89708:	200720cc 	.word	0x200720cc
   8970c:	0008b0cd 	.word	0x0008b0cd
   89710:	00089ced 	.word	0x00089ced
   89714:	00089d55 	.word	0x00089d55
   89718:	00089ac1 	.word	0x00089ac1
   8971c:	200720d0 	.word	0x200720d0
   89720:	200704d8 	.word	0x200704d8
   89724:	000a7681 	.word	0x000a7681
   89728:	200720dc 	.word	0x200720dc
   8972c:	000a73c5 	.word	0x000a73c5
   89730:	3fe00000 	.word	0x3fe00000
   89734:	000a7c35 	.word	0x000a7c35
   89738:	000a82f9 	.word	0x000a82f9
   8973c:	00089df9 	.word	0x00089df9
   89740:	0919      	lsrs	r1, r3, #4
   89742:	460b      	mov	r3, r1
   89744:	009b      	lsls	r3, r3, #2
   89746:	440b      	add	r3, r1
   89748:	009b      	lsls	r3, r3, #2
   8974a:	1ad3      	subs	r3, r2, r3
   8974c:	b29b      	uxth	r3, r3
   8974e:	2b00      	cmp	r3, #0
   89750:	d101      	bne.n	89756 <Heat_Correction+0x37e>
			{
				Coarse_DutyCorrection();
   89752:	4b69      	ldr	r3, [pc, #420]	; (898f8 <Heat_Correction+0x520>)
   89754:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 800)
   89756:	4b69      	ldr	r3, [pc, #420]	; (898fc <Heat_Correction+0x524>)
   89758:	681b      	ldr	r3, [r3, #0]
   8975a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8975e:	d135      	bne.n	897cc <Heat_Correction+0x3f4>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89760:	4b67      	ldr	r3, [pc, #412]	; (89900 <Heat_Correction+0x528>)
   89762:	681a      	ldr	r2, [r3, #0]
   89764:	4b67      	ldr	r3, [pc, #412]	; (89904 <Heat_Correction+0x52c>)
   89766:	4610      	mov	r0, r2
   89768:	4798      	blx	r3
   8976a:	4605      	mov	r5, r0
   8976c:	460e      	mov	r6, r1
   8976e:	4b66      	ldr	r3, [pc, #408]	; (89908 <Heat_Correction+0x530>)
   89770:	681a      	ldr	r2, [r3, #0]
   89772:	4b64      	ldr	r3, [pc, #400]	; (89904 <Heat_Correction+0x52c>)
   89774:	4610      	mov	r0, r2
   89776:	4798      	blx	r3
   89778:	4c64      	ldr	r4, [pc, #400]	; (8990c <Heat_Correction+0x534>)
   8977a:	f04f 0200 	mov.w	r2, #0
   8977e:	4b64      	ldr	r3, [pc, #400]	; (89910 <Heat_Correction+0x538>)
   89780:	47a0      	blx	r4
   89782:	4603      	mov	r3, r0
   89784:	460c      	mov	r4, r1
   89786:	461a      	mov	r2, r3
   89788:	4623      	mov	r3, r4
   8978a:	4c62      	ldr	r4, [pc, #392]	; (89914 <Heat_Correction+0x53c>)
   8978c:	4628      	mov	r0, r5
   8978e:	4631      	mov	r1, r6
   89790:	47a0      	blx	r4
   89792:	4603      	mov	r3, r0
   89794:	2b00      	cmp	r3, #0
   89796:	d019      	beq.n	897cc <Heat_Correction+0x3f4>
   89798:	4b5f      	ldr	r3, [pc, #380]	; (89918 <Heat_Correction+0x540>)
   8979a:	681a      	ldr	r2, [r3, #0]
   8979c:	4b5f      	ldr	r3, [pc, #380]	; (8991c <Heat_Correction+0x544>)
   8979e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   897a2:	4610      	mov	r0, r2
   897a4:	4798      	blx	r3
   897a6:	4603      	mov	r3, r0
   897a8:	2b00      	cmp	r3, #0
   897aa:	d00f      	beq.n	897cc <Heat_Correction+0x3f4>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   897ac:	4b5c      	ldr	r3, [pc, #368]	; (89920 <Heat_Correction+0x548>)
   897ae:	881a      	ldrh	r2, [r3, #0]
   897b0:	4b5c      	ldr	r3, [pc, #368]	; (89924 <Heat_Correction+0x54c>)
   897b2:	fba3 1302 	umull	r1, r3, r3, r2
   897b6:	0919      	lsrs	r1, r3, #4
   897b8:	460b      	mov	r3, r1
   897ba:	009b      	lsls	r3, r3, #2
   897bc:	440b      	add	r3, r1
   897be:	009b      	lsls	r3, r3, #2
   897c0:	1ad3      	subs	r3, r2, r3
   897c2:	b29b      	uxth	r3, r3
   897c4:	2b00      	cmp	r3, #0
   897c6:	d101      	bne.n	897cc <Heat_Correction+0x3f4>
			{
				Coarse_DutyCorrection();
   897c8:	4b4b      	ldr	r3, [pc, #300]	; (898f8 <Heat_Correction+0x520>)
   897ca:	4798      	blx	r3
			
		}
	}
	
	
	if (SYSTEM_FLOW == 300)
   897cc:	4b4b      	ldr	r3, [pc, #300]	; (898fc <Heat_Correction+0x524>)
   897ce:	681b      	ldr	r3, [r3, #0]
   897d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   897d4:	d15c      	bne.n	89890 <Heat_Correction+0x4b8>
	{
	  if(TS2_Stable)
   897d6:	4b54      	ldr	r3, [pc, #336]	; (89928 <Heat_Correction+0x550>)
   897d8:	781b      	ldrb	r3, [r3, #0]
   897da:	2b00      	cmp	r3, #0
   897dc:	d058      	beq.n	89890 <Heat_Correction+0x4b8>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 0.5) || ((Prescribed_T2 - Tmp2Val) > 2) )
   897de:	4b48      	ldr	r3, [pc, #288]	; (89900 <Heat_Correction+0x528>)
   897e0:	681a      	ldr	r2, [r3, #0]
   897e2:	4b49      	ldr	r3, [pc, #292]	; (89908 <Heat_Correction+0x530>)
   897e4:	6819      	ldr	r1, [r3, #0]
   897e6:	4b51      	ldr	r3, [pc, #324]	; (8992c <Heat_Correction+0x554>)
   897e8:	4610      	mov	r0, r2
   897ea:	4798      	blx	r3
   897ec:	4603      	mov	r3, r0
   897ee:	461a      	mov	r2, r3
   897f0:	4b4f      	ldr	r3, [pc, #316]	; (89930 <Heat_Correction+0x558>)
   897f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   897f6:	4610      	mov	r0, r2
   897f8:	4798      	blx	r3
   897fa:	4603      	mov	r3, r0
   897fc:	2b00      	cmp	r3, #0
   897fe:	d110      	bne.n	89822 <Heat_Correction+0x44a>
   89800:	4b41      	ldr	r3, [pc, #260]	; (89908 <Heat_Correction+0x530>)
   89802:	681a      	ldr	r2, [r3, #0]
   89804:	4b3e      	ldr	r3, [pc, #248]	; (89900 <Heat_Correction+0x528>)
   89806:	6819      	ldr	r1, [r3, #0]
   89808:	4b48      	ldr	r3, [pc, #288]	; (8992c <Heat_Correction+0x554>)
   8980a:	4610      	mov	r0, r2
   8980c:	4798      	blx	r3
   8980e:	4603      	mov	r3, r0
   89810:	461a      	mov	r2, r3
   89812:	4b47      	ldr	r3, [pc, #284]	; (89930 <Heat_Correction+0x558>)
   89814:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89818:	4610      	mov	r0, r2
   8981a:	4798      	blx	r3
   8981c:	4603      	mov	r3, r0
   8981e:	2b00      	cmp	r3, #0
   89820:	d002      	beq.n	89828 <Heat_Correction+0x450>
		{
			Coarse_DutyCorrection(); 
   89822:	4b35      	ldr	r3, [pc, #212]	; (898f8 <Heat_Correction+0x520>)
   89824:	4798      	blx	r3
   89826:	e033      	b.n	89890 <Heat_Correction+0x4b8>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89828:	4b42      	ldr	r3, [pc, #264]	; (89934 <Heat_Correction+0x55c>)
   8982a:	4798      	blx	r3
   8982c:	4603      	mov	r3, r0
   8982e:	461a      	mov	r2, r3
   89830:	4b41      	ldr	r3, [pc, #260]	; (89938 <Heat_Correction+0x560>)
   89832:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89834:	4b40      	ldr	r3, [pc, #256]	; (89938 <Heat_Correction+0x560>)
   89836:	781b      	ldrb	r3, [r3, #0]
   89838:	2b00      	cmp	r3, #0
   8983a:	d029      	beq.n	89890 <Heat_Correction+0x4b8>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   8983c:	4b36      	ldr	r3, [pc, #216]	; (89918 <Heat_Correction+0x540>)
   8983e:	681a      	ldr	r2, [r3, #0]
   89840:	4b3e      	ldr	r3, [pc, #248]	; (8993c <Heat_Correction+0x564>)
   89842:	6819      	ldr	r1, [r3, #0]
   89844:	4b39      	ldr	r3, [pc, #228]	; (8992c <Heat_Correction+0x554>)
   89846:	4610      	mov	r0, r2
   89848:	4798      	blx	r3
   8984a:	4603      	mov	r3, r0
   8984c:	461a      	mov	r2, r3
   8984e:	4b2d      	ldr	r3, [pc, #180]	; (89904 <Heat_Correction+0x52c>)
   89850:	4610      	mov	r0, r2
   89852:	4798      	blx	r3
   89854:	4c3a      	ldr	r4, [pc, #232]	; (89940 <Heat_Correction+0x568>)
   89856:	a326      	add	r3, pc, #152	; (adr r3, 898f0 <Heat_Correction+0x518>)
   89858:	e9d3 2300 	ldrd	r2, r3, [r3]
   8985c:	47a0      	blx	r4
   8985e:	4603      	mov	r3, r0
   89860:	2b00      	cmp	r3, #0
   89862:	d113      	bne.n	8988c <Heat_Correction+0x4b4>
   89864:	4b35      	ldr	r3, [pc, #212]	; (8993c <Heat_Correction+0x564>)
   89866:	681a      	ldr	r2, [r3, #0]
   89868:	4b2b      	ldr	r3, [pc, #172]	; (89918 <Heat_Correction+0x540>)
   8986a:	6819      	ldr	r1, [r3, #0]
   8986c:	4b2f      	ldr	r3, [pc, #188]	; (8992c <Heat_Correction+0x554>)
   8986e:	4610      	mov	r0, r2
   89870:	4798      	blx	r3
   89872:	4603      	mov	r3, r0
   89874:	461a      	mov	r2, r3
   89876:	4b23      	ldr	r3, [pc, #140]	; (89904 <Heat_Correction+0x52c>)
   89878:	4610      	mov	r0, r2
   8987a:	4798      	blx	r3
   8987c:	4c30      	ldr	r4, [pc, #192]	; (89940 <Heat_Correction+0x568>)
   8987e:	a31c      	add	r3, pc, #112	; (adr r3, 898f0 <Heat_Correction+0x518>)
   89880:	e9d3 2300 	ldrd	r2, r3, [r3]
   89884:	47a0      	blx	r4
   89886:	4603      	mov	r3, r0
   89888:	2b00      	cmp	r3, #0
   8988a:	d001      	beq.n	89890 <Heat_Correction+0x4b8>
			      Fine_DutyCorrection();
   8988c:	4b2d      	ldr	r3, [pc, #180]	; (89944 <Heat_Correction+0x56c>)
   8988e:	4798      	blx	r3
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	
	if (SYSTEM_FLOW == 500)
   89890:	4b1a      	ldr	r3, [pc, #104]	; (898fc <Heat_Correction+0x524>)
   89892:	681b      	ldr	r3, [r3, #0]
   89894:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89898:	f040 808a 	bne.w	899b0 <Heat_Correction+0x5d8>
	{
	  if(TS2_Stable)
   8989c:	4b22      	ldr	r3, [pc, #136]	; (89928 <Heat_Correction+0x550>)
   8989e:	781b      	ldrb	r3, [r3, #0]
   898a0:	2b00      	cmp	r3, #0
   898a2:	f000 8085 	beq.w	899b0 <Heat_Correction+0x5d8>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   898a6:	4b16      	ldr	r3, [pc, #88]	; (89900 <Heat_Correction+0x528>)
   898a8:	681a      	ldr	r2, [r3, #0]
   898aa:	4b17      	ldr	r3, [pc, #92]	; (89908 <Heat_Correction+0x530>)
   898ac:	6819      	ldr	r1, [r3, #0]
   898ae:	4b1f      	ldr	r3, [pc, #124]	; (8992c <Heat_Correction+0x554>)
   898b0:	4610      	mov	r0, r2
   898b2:	4798      	blx	r3
   898b4:	4603      	mov	r3, r0
   898b6:	461a      	mov	r2, r3
   898b8:	4b1d      	ldr	r3, [pc, #116]	; (89930 <Heat_Correction+0x558>)
   898ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   898be:	4610      	mov	r0, r2
   898c0:	4798      	blx	r3
   898c2:	4603      	mov	r3, r0
   898c4:	2b00      	cmp	r3, #0
   898c6:	d110      	bne.n	898ea <Heat_Correction+0x512>
   898c8:	4b0f      	ldr	r3, [pc, #60]	; (89908 <Heat_Correction+0x530>)
   898ca:	681a      	ldr	r2, [r3, #0]
   898cc:	4b0c      	ldr	r3, [pc, #48]	; (89900 <Heat_Correction+0x528>)
   898ce:	6819      	ldr	r1, [r3, #0]
   898d0:	4b16      	ldr	r3, [pc, #88]	; (8992c <Heat_Correction+0x554>)
   898d2:	4610      	mov	r0, r2
   898d4:	4798      	blx	r3
   898d6:	4603      	mov	r3, r0
   898d8:	461a      	mov	r2, r3
   898da:	4b15      	ldr	r3, [pc, #84]	; (89930 <Heat_Correction+0x558>)
   898dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   898e0:	4610      	mov	r0, r2
   898e2:	4798      	blx	r3
   898e4:	4603      	mov	r3, r0
   898e6:	2b00      	cmp	r3, #0
   898e8:	d02e      	beq.n	89948 <Heat_Correction+0x570>
		{
			Coarse_DutyCorrection(); 
   898ea:	4b03      	ldr	r3, [pc, #12]	; (898f8 <Heat_Correction+0x520>)
   898ec:	4798      	blx	r3
   898ee:	e05f      	b.n	899b0 <Heat_Correction+0x5d8>
   898f0:	9999999a 	.word	0x9999999a
   898f4:	3fb99999 	.word	0x3fb99999
   898f8:	00089df9 	.word	0x00089df9
   898fc:	200704d8 	.word	0x200704d8
   89900:	20071898 	.word	0x20071898
   89904:	000a7681 	.word	0x000a7681
   89908:	200720dc 	.word	0x200720dc
   8990c:	000a73c5 	.word	0x000a73c5
   89910:	3fe00000 	.word	0x3fe00000
   89914:	000a7c35 	.word	0x000a7c35
   89918:	2007189c 	.word	0x2007189c
   8991c:	000a82f9 	.word	0x000a82f9
   89920:	200718a0 	.word	0x200718a0
   89924:	cccccccd 	.word	0xcccccccd
   89928:	200720d0 	.word	0x200720d0
   8992c:	000a7d95 	.word	0x000a7d95
   89930:	000a8321 	.word	0x000a8321
   89934:	00089b71 	.word	0x00089b71
   89938:	200720d9 	.word	0x200720d9
   8993c:	200720c8 	.word	0x200720c8
   89940:	000a7c49 	.word	0x000a7c49
   89944:	0008a729 	.word	0x0008a729
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89948:	4b4f      	ldr	r3, [pc, #316]	; (89a88 <Heat_Correction+0x6b0>)
   8994a:	4798      	blx	r3
   8994c:	4603      	mov	r3, r0
   8994e:	461a      	mov	r2, r3
   89950:	4b4e      	ldr	r3, [pc, #312]	; (89a8c <Heat_Correction+0x6b4>)
   89952:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89954:	4b4d      	ldr	r3, [pc, #308]	; (89a8c <Heat_Correction+0x6b4>)
   89956:	781b      	ldrb	r3, [r3, #0]
   89958:	2b00      	cmp	r3, #0
   8995a:	d029      	beq.n	899b0 <Heat_Correction+0x5d8>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   8995c:	4b4c      	ldr	r3, [pc, #304]	; (89a90 <Heat_Correction+0x6b8>)
   8995e:	681a      	ldr	r2, [r3, #0]
   89960:	4b4c      	ldr	r3, [pc, #304]	; (89a94 <Heat_Correction+0x6bc>)
   89962:	6819      	ldr	r1, [r3, #0]
   89964:	4b4c      	ldr	r3, [pc, #304]	; (89a98 <Heat_Correction+0x6c0>)
   89966:	4610      	mov	r0, r2
   89968:	4798      	blx	r3
   8996a:	4603      	mov	r3, r0
   8996c:	461a      	mov	r2, r3
   8996e:	4b4b      	ldr	r3, [pc, #300]	; (89a9c <Heat_Correction+0x6c4>)
   89970:	4610      	mov	r0, r2
   89972:	4798      	blx	r3
   89974:	4c4a      	ldr	r4, [pc, #296]	; (89aa0 <Heat_Correction+0x6c8>)
   89976:	a342      	add	r3, pc, #264	; (adr r3, 89a80 <Heat_Correction+0x6a8>)
   89978:	e9d3 2300 	ldrd	r2, r3, [r3]
   8997c:	47a0      	blx	r4
   8997e:	4603      	mov	r3, r0
   89980:	2b00      	cmp	r3, #0
   89982:	d113      	bne.n	899ac <Heat_Correction+0x5d4>
   89984:	4b43      	ldr	r3, [pc, #268]	; (89a94 <Heat_Correction+0x6bc>)
   89986:	681a      	ldr	r2, [r3, #0]
   89988:	4b41      	ldr	r3, [pc, #260]	; (89a90 <Heat_Correction+0x6b8>)
   8998a:	6819      	ldr	r1, [r3, #0]
   8998c:	4b42      	ldr	r3, [pc, #264]	; (89a98 <Heat_Correction+0x6c0>)
   8998e:	4610      	mov	r0, r2
   89990:	4798      	blx	r3
   89992:	4603      	mov	r3, r0
   89994:	461a      	mov	r2, r3
   89996:	4b41      	ldr	r3, [pc, #260]	; (89a9c <Heat_Correction+0x6c4>)
   89998:	4610      	mov	r0, r2
   8999a:	4798      	blx	r3
   8999c:	4c40      	ldr	r4, [pc, #256]	; (89aa0 <Heat_Correction+0x6c8>)
   8999e:	a338      	add	r3, pc, #224	; (adr r3, 89a80 <Heat_Correction+0x6a8>)
   899a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   899a4:	47a0      	blx	r4
   899a6:	4603      	mov	r3, r0
   899a8:	2b00      	cmp	r3, #0
   899aa:	d001      	beq.n	899b0 <Heat_Correction+0x5d8>
			      Fine_DutyCorrection();
   899ac:	4b3d      	ldr	r3, [pc, #244]	; (89aa4 <Heat_Correction+0x6cc>)
   899ae:	4798      	blx	r3
	 {
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	if (SYSTEM_FLOW == 800)
   899b0:	4b3d      	ldr	r3, [pc, #244]	; (89aa8 <Heat_Correction+0x6d0>)
   899b2:	681b      	ldr	r3, [r3, #0]
   899b4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   899b8:	d15e      	bne.n	89a78 <Heat_Correction+0x6a0>
	{
		
		if(TS2_Stable)
   899ba:	4b3c      	ldr	r3, [pc, #240]	; (89aac <Heat_Correction+0x6d4>)
   899bc:	781b      	ldrb	r3, [r3, #0]
   899be:	2b00      	cmp	r3, #0
   899c0:	d05a      	beq.n	89a78 <Heat_Correction+0x6a0>
		{
			//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg.
			//Start tuning T2 to be at 37 +/- 2 deg.
			if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   899c2:	4b3b      	ldr	r3, [pc, #236]	; (89ab0 <Heat_Correction+0x6d8>)
   899c4:	681a      	ldr	r2, [r3, #0]
   899c6:	4b3b      	ldr	r3, [pc, #236]	; (89ab4 <Heat_Correction+0x6dc>)
   899c8:	6819      	ldr	r1, [r3, #0]
   899ca:	4b33      	ldr	r3, [pc, #204]	; (89a98 <Heat_Correction+0x6c0>)
   899cc:	4610      	mov	r0, r2
   899ce:	4798      	blx	r3
   899d0:	4603      	mov	r3, r0
   899d2:	461a      	mov	r2, r3
   899d4:	4b38      	ldr	r3, [pc, #224]	; (89ab8 <Heat_Correction+0x6e0>)
   899d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   899da:	4610      	mov	r0, r2
   899dc:	4798      	blx	r3
   899de:	4603      	mov	r3, r0
   899e0:	2b00      	cmp	r3, #0
   899e2:	d110      	bne.n	89a06 <Heat_Correction+0x62e>
   899e4:	4b33      	ldr	r3, [pc, #204]	; (89ab4 <Heat_Correction+0x6dc>)
   899e6:	681a      	ldr	r2, [r3, #0]
   899e8:	4b31      	ldr	r3, [pc, #196]	; (89ab0 <Heat_Correction+0x6d8>)
   899ea:	6819      	ldr	r1, [r3, #0]
   899ec:	4b2a      	ldr	r3, [pc, #168]	; (89a98 <Heat_Correction+0x6c0>)
   899ee:	4610      	mov	r0, r2
   899f0:	4798      	blx	r3
   899f2:	4603      	mov	r3, r0
   899f4:	461a      	mov	r2, r3
   899f6:	4b30      	ldr	r3, [pc, #192]	; (89ab8 <Heat_Correction+0x6e0>)
   899f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   899fc:	4610      	mov	r0, r2
   899fe:	4798      	blx	r3
   89a00:	4603      	mov	r3, r0
   89a02:	2b00      	cmp	r3, #0
   89a04:	d002      	beq.n	89a0c <Heat_Correction+0x634>
			{
				Coarse_DutyCorrection();
   89a06:	4b2d      	ldr	r3, [pc, #180]	; (89abc <Heat_Correction+0x6e4>)
   89a08:	4798      	blx	r3
   89a0a:	e035      	b.n	89a78 <Heat_Correction+0x6a0>
			}
			else
			{
				//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
				TS3_Stable = Check_4_TS3_Stable();
   89a0c:	4b1e      	ldr	r3, [pc, #120]	; (89a88 <Heat_Correction+0x6b0>)
   89a0e:	4798      	blx	r3
   89a10:	4603      	mov	r3, r0
   89a12:	461a      	mov	r2, r3
   89a14:	4b1d      	ldr	r3, [pc, #116]	; (89a8c <Heat_Correction+0x6b4>)
   89a16:	701a      	strb	r2, [r3, #0]
				if(TS3_Stable)
   89a18:	4b1c      	ldr	r3, [pc, #112]	; (89a8c <Heat_Correction+0x6b4>)
   89a1a:	781b      	ldrb	r3, [r3, #0]
   89a1c:	2b00      	cmp	r3, #0
   89a1e:	d02b      	beq.n	89a78 <Heat_Correction+0x6a0>
				{
					if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89a20:	4b1b      	ldr	r3, [pc, #108]	; (89a90 <Heat_Correction+0x6b8>)
   89a22:	681a      	ldr	r2, [r3, #0]
   89a24:	4b1b      	ldr	r3, [pc, #108]	; (89a94 <Heat_Correction+0x6bc>)
   89a26:	6819      	ldr	r1, [r3, #0]
   89a28:	4b1b      	ldr	r3, [pc, #108]	; (89a98 <Heat_Correction+0x6c0>)
   89a2a:	4610      	mov	r0, r2
   89a2c:	4798      	blx	r3
   89a2e:	4603      	mov	r3, r0
   89a30:	461a      	mov	r2, r3
   89a32:	4b1a      	ldr	r3, [pc, #104]	; (89a9c <Heat_Correction+0x6c4>)
   89a34:	4610      	mov	r0, r2
   89a36:	4798      	blx	r3
   89a38:	4c19      	ldr	r4, [pc, #100]	; (89aa0 <Heat_Correction+0x6c8>)
   89a3a:	a311      	add	r3, pc, #68	; (adr r3, 89a80 <Heat_Correction+0x6a8>)
   89a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89a40:	47a0      	blx	r4
   89a42:	4603      	mov	r3, r0
   89a44:	2b00      	cmp	r3, #0
   89a46:	d113      	bne.n	89a70 <Heat_Correction+0x698>
   89a48:	4b12      	ldr	r3, [pc, #72]	; (89a94 <Heat_Correction+0x6bc>)
   89a4a:	681a      	ldr	r2, [r3, #0]
   89a4c:	4b10      	ldr	r3, [pc, #64]	; (89a90 <Heat_Correction+0x6b8>)
   89a4e:	6819      	ldr	r1, [r3, #0]
   89a50:	4b11      	ldr	r3, [pc, #68]	; (89a98 <Heat_Correction+0x6c0>)
   89a52:	4610      	mov	r0, r2
   89a54:	4798      	blx	r3
   89a56:	4603      	mov	r3, r0
   89a58:	461a      	mov	r2, r3
   89a5a:	4b10      	ldr	r3, [pc, #64]	; (89a9c <Heat_Correction+0x6c4>)
   89a5c:	4610      	mov	r0, r2
   89a5e:	4798      	blx	r3
   89a60:	4c0f      	ldr	r4, [pc, #60]	; (89aa0 <Heat_Correction+0x6c8>)
   89a62:	a307      	add	r3, pc, #28	; (adr r3, 89a80 <Heat_Correction+0x6a8>)
   89a64:	e9d3 2300 	ldrd	r2, r3, [r3]
   89a68:	47a0      	blx	r4
   89a6a:	4603      	mov	r3, r0
   89a6c:	2b00      	cmp	r3, #0
   89a6e:	d003      	beq.n	89a78 <Heat_Correction+0x6a0>
					Fine_DutyCorrection();
   89a70:	4b0c      	ldr	r3, [pc, #48]	; (89aa4 <Heat_Correction+0x6cc>)
   89a72:	4798      	blx	r3
   89a74:	e000      	b.n	89a78 <Heat_Correction+0x6a0>
		sv_cntrl_poweroffheater();
		return;
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
	{
		return;
   89a76:	bf00      	nop
			// TS2 not stable, wait for some more time
			// Same avg_duty is being applied, no change till stability not achieved
		}
	}

}
   89a78:	4618      	mov	r0, r3
   89a7a:	370c      	adds	r7, #12
   89a7c:	46bd      	mov	sp, r7
   89a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89a80:	9999999a 	.word	0x9999999a
   89a84:	3fb99999 	.word	0x3fb99999
   89a88:	00089b71 	.word	0x00089b71
   89a8c:	200720d9 	.word	0x200720d9
   89a90:	2007189c 	.word	0x2007189c
   89a94:	200720c8 	.word	0x200720c8
   89a98:	000a7d95 	.word	0x000a7d95
   89a9c:	000a7681 	.word	0x000a7681
   89aa0:	000a7c49 	.word	0x000a7c49
   89aa4:	0008a729 	.word	0x0008a729
   89aa8:	200704d8 	.word	0x200704d8
   89aac:	200720d0 	.word	0x200720d0
   89ab0:	20071898 	.word	0x20071898
   89ab4:	200720dc 	.word	0x200720dc
   89ab8:	000a8321 	.word	0x000a8321
   89abc:	00089df9 	.word	0x00089df9

00089ac0 <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   89ac0:	b580      	push	{r7, lr}
   89ac2:	b082      	sub	sp, #8
   89ac4:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89ac6:	2300      	movs	r3, #0
   89ac8:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   89aca:	4b21      	ldr	r3, [pc, #132]	; (89b50 <Check_4_TS2_Stable+0x90>)
   89acc:	881a      	ldrh	r2, [r3, #0]
   89ace:	4b21      	ldr	r3, [pc, #132]	; (89b54 <Check_4_TS2_Stable+0x94>)
   89ad0:	881b      	ldrh	r3, [r3, #0]
   89ad2:	429a      	cmp	r2, r3
   89ad4:	d337      	bcc.n	89b46 <Check_4_TS2_Stable+0x86>
	// TS2 is not increasing sharply; 180 secs
	{
		if (Tmp2Val_prev == Tmp2Val)
   89ad6:	4b20      	ldr	r3, [pc, #128]	; (89b58 <Check_4_TS2_Stable+0x98>)
   89ad8:	681a      	ldr	r2, [r3, #0]
   89ada:	4b20      	ldr	r3, [pc, #128]	; (89b5c <Check_4_TS2_Stable+0x9c>)
   89adc:	6819      	ldr	r1, [r3, #0]
   89ade:	4b20      	ldr	r3, [pc, #128]	; (89b60 <Check_4_TS2_Stable+0xa0>)
   89ae0:	4610      	mov	r0, r2
   89ae2:	4798      	blx	r3
   89ae4:	4603      	mov	r3, r0
   89ae6:	2b00      	cmp	r3, #0
   89ae8:	d002      	beq.n	89af0 <Check_4_TS2_Stable+0x30>
		{
			ts2_stable = true;
   89aea:	2301      	movs	r3, #1
   89aec:	71fb      	strb	r3, [r7, #7]
   89aee:	e023      	b.n	89b38 <Check_4_TS2_Stable+0x78>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   89af0:	4b1a      	ldr	r3, [pc, #104]	; (89b5c <Check_4_TS2_Stable+0x9c>)
   89af2:	681a      	ldr	r2, [r3, #0]
   89af4:	4b18      	ldr	r3, [pc, #96]	; (89b58 <Check_4_TS2_Stable+0x98>)
   89af6:	6819      	ldr	r1, [r3, #0]
   89af8:	4b1a      	ldr	r3, [pc, #104]	; (89b64 <Check_4_TS2_Stable+0xa4>)
   89afa:	4610      	mov	r0, r2
   89afc:	4798      	blx	r3
   89afe:	4603      	mov	r3, r0
   89b00:	461a      	mov	r2, r3
   89b02:	4b19      	ldr	r3, [pc, #100]	; (89b68 <Check_4_TS2_Stable+0xa8>)
   89b04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89b08:	4610      	mov	r0, r2
   89b0a:	4798      	blx	r3
   89b0c:	4603      	mov	r3, r0
   89b0e:	2b00      	cmp	r3, #0
   89b10:	d110      	bne.n	89b34 <Check_4_TS2_Stable+0x74>
   89b12:	4b11      	ldr	r3, [pc, #68]	; (89b58 <Check_4_TS2_Stable+0x98>)
   89b14:	681a      	ldr	r2, [r3, #0]
   89b16:	4b11      	ldr	r3, [pc, #68]	; (89b5c <Check_4_TS2_Stable+0x9c>)
   89b18:	6819      	ldr	r1, [r3, #0]
   89b1a:	4b12      	ldr	r3, [pc, #72]	; (89b64 <Check_4_TS2_Stable+0xa4>)
   89b1c:	4610      	mov	r0, r2
   89b1e:	4798      	blx	r3
   89b20:	4603      	mov	r3, r0
   89b22:	461a      	mov	r2, r3
   89b24:	4b10      	ldr	r3, [pc, #64]	; (89b68 <Check_4_TS2_Stable+0xa8>)
   89b26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89b2a:	4610      	mov	r0, r2
   89b2c:	4798      	blx	r3
   89b2e:	4603      	mov	r3, r0
   89b30:	2b00      	cmp	r3, #0
   89b32:	d001      	beq.n	89b38 <Check_4_TS2_Stable+0x78>
		{
			ts2_stable = true;
   89b34:	2301      	movs	r3, #1
   89b36:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = post_stability_count;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89b38:	4b0c      	ldr	r3, [pc, #48]	; (89b6c <Check_4_TS2_Stable+0xac>)
   89b3a:	881a      	ldrh	r2, [r3, #0]
   89b3c:	4b05      	ldr	r3, [pc, #20]	; (89b54 <Check_4_TS2_Stable+0x94>)
   89b3e:	801a      	strh	r2, [r3, #0]
													// Count 240 = 2 mins, Count 120 = 1 min
													 // Gopal: 30
		TS2_stability_count = 0;
   89b40:	4b03      	ldr	r3, [pc, #12]	; (89b50 <Check_4_TS2_Stable+0x90>)
   89b42:	2200      	movs	r2, #0
   89b44:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   89b46:	79fb      	ldrb	r3, [r7, #7]
}
   89b48:	4618      	mov	r0, r3
   89b4a:	3708      	adds	r7, #8
   89b4c:	46bd      	mov	sp, r7
   89b4e:	bd80      	pop	{r7, pc}
   89b50:	200718a4 	.word	0x200718a4
   89b54:	200704d0 	.word	0x200704d0
   89b58:	200718b0 	.word	0x200718b0
   89b5c:	20071898 	.word	0x20071898
   89b60:	000a82d1 	.word	0x000a82d1
   89b64:	000a7d95 	.word	0x000a7d95
   89b68:	000a82f9 	.word	0x000a82f9
   89b6c:	200718a8 	.word	0x200718a8

00089b70 <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   89b70:	b580      	push	{r7, lr}
   89b72:	b082      	sub	sp, #8
   89b74:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   89b76:	2300      	movs	r3, #0
   89b78:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   89b7a:	4b21      	ldr	r3, [pc, #132]	; (89c00 <Check_4_TS3_Stable+0x90>)
   89b7c:	881a      	ldrh	r2, [r3, #0]
   89b7e:	4b21      	ldr	r3, [pc, #132]	; (89c04 <Check_4_TS3_Stable+0x94>)
   89b80:	881b      	ldrh	r3, [r3, #0]
   89b82:	429a      	cmp	r2, r3
   89b84:	d337      	bcc.n	89bf6 <Check_4_TS3_Stable+0x86>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   89b86:	4b20      	ldr	r3, [pc, #128]	; (89c08 <Check_4_TS3_Stable+0x98>)
   89b88:	681a      	ldr	r2, [r3, #0]
   89b8a:	4b20      	ldr	r3, [pc, #128]	; (89c0c <Check_4_TS3_Stable+0x9c>)
   89b8c:	6819      	ldr	r1, [r3, #0]
   89b8e:	4b20      	ldr	r3, [pc, #128]	; (89c10 <Check_4_TS3_Stable+0xa0>)
   89b90:	4610      	mov	r0, r2
   89b92:	4798      	blx	r3
   89b94:	4603      	mov	r3, r0
   89b96:	2b00      	cmp	r3, #0
   89b98:	d002      	beq.n	89ba0 <Check_4_TS3_Stable+0x30>
		{
			ts3_stable = true;
   89b9a:	2301      	movs	r3, #1
   89b9c:	71fb      	strb	r3, [r7, #7]
   89b9e:	e023      	b.n	89be8 <Check_4_TS3_Stable+0x78>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   89ba0:	4b1a      	ldr	r3, [pc, #104]	; (89c0c <Check_4_TS3_Stable+0x9c>)
   89ba2:	681a      	ldr	r2, [r3, #0]
   89ba4:	4b18      	ldr	r3, [pc, #96]	; (89c08 <Check_4_TS3_Stable+0x98>)
   89ba6:	6819      	ldr	r1, [r3, #0]
   89ba8:	4b1a      	ldr	r3, [pc, #104]	; (89c14 <Check_4_TS3_Stable+0xa4>)
   89baa:	4610      	mov	r0, r2
   89bac:	4798      	blx	r3
   89bae:	4603      	mov	r3, r0
   89bb0:	461a      	mov	r2, r3
   89bb2:	4b19      	ldr	r3, [pc, #100]	; (89c18 <Check_4_TS3_Stable+0xa8>)
   89bb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89bb8:	4610      	mov	r0, r2
   89bba:	4798      	blx	r3
   89bbc:	4603      	mov	r3, r0
   89bbe:	2b00      	cmp	r3, #0
   89bc0:	d110      	bne.n	89be4 <Check_4_TS3_Stable+0x74>
   89bc2:	4b11      	ldr	r3, [pc, #68]	; (89c08 <Check_4_TS3_Stable+0x98>)
   89bc4:	681a      	ldr	r2, [r3, #0]
   89bc6:	4b11      	ldr	r3, [pc, #68]	; (89c0c <Check_4_TS3_Stable+0x9c>)
   89bc8:	6819      	ldr	r1, [r3, #0]
   89bca:	4b12      	ldr	r3, [pc, #72]	; (89c14 <Check_4_TS3_Stable+0xa4>)
   89bcc:	4610      	mov	r0, r2
   89bce:	4798      	blx	r3
   89bd0:	4603      	mov	r3, r0
   89bd2:	461a      	mov	r2, r3
   89bd4:	4b10      	ldr	r3, [pc, #64]	; (89c18 <Check_4_TS3_Stable+0xa8>)
   89bd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89bda:	4610      	mov	r0, r2
   89bdc:	4798      	blx	r3
   89bde:	4603      	mov	r3, r0
   89be0:	2b00      	cmp	r3, #0
   89be2:	d001      	beq.n	89be8 <Check_4_TS3_Stable+0x78>
		{
			ts3_stable = true;
   89be4:	2301      	movs	r3, #1
   89be6:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = TS3_post_stability_count;   // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89be8:	4b0c      	ldr	r3, [pc, #48]	; (89c1c <Check_4_TS3_Stable+0xac>)
   89bea:	881a      	ldrh	r2, [r3, #0]
   89bec:	4b05      	ldr	r3, [pc, #20]	; (89c04 <Check_4_TS3_Stable+0x94>)
   89bee:	801a      	strh	r2, [r3, #0]
		                                             // Gopal: 60
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   89bf0:	4b03      	ldr	r3, [pc, #12]	; (89c00 <Check_4_TS3_Stable+0x90>)
   89bf2:	2200      	movs	r2, #0
   89bf4:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   89bf6:	79fb      	ldrb	r3, [r7, #7]
}
   89bf8:	4618      	mov	r0, r3
   89bfa:	3708      	adds	r7, #8
   89bfc:	46bd      	mov	sp, r7
   89bfe:	bd80      	pop	{r7, pc}
   89c00:	200718a2 	.word	0x200718a2
   89c04:	200704d2 	.word	0x200704d2
   89c08:	200720cc 	.word	0x200720cc
   89c0c:	2007189c 	.word	0x2007189c
   89c10:	000a82d1 	.word	0x000a82d1
   89c14:	000a7d95 	.word	0x000a7d95
   89c18:	000a82f9 	.word	0x000a82f9
   89c1c:	200718aa 	.word	0x200718aa

00089c20 <Check_4_Neutralstability>:

bool Check_4_Neutralstability()
{
   89c20:	b590      	push	{r4, r7, lr}
   89c22:	b083      	sub	sp, #12
   89c24:	af00      	add	r7, sp, #0
		bool neuts3_stable = false;
   89c26:	2300      	movs	r3, #0
   89c28:	71fb      	strb	r3, [r7, #7]
	//wait_4_TS3NeuStability=240, Neupost_stability_count = 120,TS3_neustability_count
	
	if (TS3_neustability_count >= wait_4_TS3NeuStability) 
   89c2a:	4b27      	ldr	r3, [pc, #156]	; (89cc8 <Check_4_Neutralstability+0xa8>)
   89c2c:	881a      	ldrh	r2, [r3, #0]
   89c2e:	4b27      	ldr	r3, [pc, #156]	; (89ccc <Check_4_Neutralstability+0xac>)
   89c30:	881b      	ldrh	r3, [r3, #0]
   89c32:	429a      	cmp	r2, r3
   89c34:	d33d      	bcc.n	89cb2 <Check_4_Neutralstability+0x92>
	{
		if (Tmp3Val_prev == Tmp3Val)
   89c36:	4b26      	ldr	r3, [pc, #152]	; (89cd0 <Check_4_Neutralstability+0xb0>)
   89c38:	681a      	ldr	r2, [r3, #0]
   89c3a:	4b26      	ldr	r3, [pc, #152]	; (89cd4 <Check_4_Neutralstability+0xb4>)
   89c3c:	6819      	ldr	r1, [r3, #0]
   89c3e:	4b26      	ldr	r3, [pc, #152]	; (89cd8 <Check_4_Neutralstability+0xb8>)
   89c40:	4610      	mov	r0, r2
   89c42:	4798      	blx	r3
   89c44:	4603      	mov	r3, r0
   89c46:	2b00      	cmp	r3, #0
   89c48:	d002      	beq.n	89c50 <Check_4_Neutralstability+0x30>
		{
			neuts3_stable = true;
   89c4a:	2301      	movs	r3, #1
   89c4c:	71fb      	strb	r3, [r7, #7]
   89c4e:	e029      	b.n	89ca4 <Check_4_Neutralstability+0x84>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 0.1) || ((Tmp3Val_prev - Tmp3Val) <= 0.1))
   89c50:	4b20      	ldr	r3, [pc, #128]	; (89cd4 <Check_4_Neutralstability+0xb4>)
   89c52:	681a      	ldr	r2, [r3, #0]
   89c54:	4b1e      	ldr	r3, [pc, #120]	; (89cd0 <Check_4_Neutralstability+0xb0>)
   89c56:	6819      	ldr	r1, [r3, #0]
   89c58:	4b20      	ldr	r3, [pc, #128]	; (89cdc <Check_4_Neutralstability+0xbc>)
   89c5a:	4610      	mov	r0, r2
   89c5c:	4798      	blx	r3
   89c5e:	4603      	mov	r3, r0
   89c60:	461a      	mov	r2, r3
   89c62:	4b1f      	ldr	r3, [pc, #124]	; (89ce0 <Check_4_Neutralstability+0xc0>)
   89c64:	4610      	mov	r0, r2
   89c66:	4798      	blx	r3
   89c68:	4c1e      	ldr	r4, [pc, #120]	; (89ce4 <Check_4_Neutralstability+0xc4>)
   89c6a:	a315      	add	r3, pc, #84	; (adr r3, 89cc0 <Check_4_Neutralstability+0xa0>)
   89c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c70:	47a0      	blx	r4
   89c72:	4603      	mov	r3, r0
   89c74:	2b00      	cmp	r3, #0
   89c76:	d113      	bne.n	89ca0 <Check_4_Neutralstability+0x80>
   89c78:	4b15      	ldr	r3, [pc, #84]	; (89cd0 <Check_4_Neutralstability+0xb0>)
   89c7a:	681a      	ldr	r2, [r3, #0]
   89c7c:	4b15      	ldr	r3, [pc, #84]	; (89cd4 <Check_4_Neutralstability+0xb4>)
   89c7e:	6819      	ldr	r1, [r3, #0]
   89c80:	4b16      	ldr	r3, [pc, #88]	; (89cdc <Check_4_Neutralstability+0xbc>)
   89c82:	4610      	mov	r0, r2
   89c84:	4798      	blx	r3
   89c86:	4603      	mov	r3, r0
   89c88:	461a      	mov	r2, r3
   89c8a:	4b15      	ldr	r3, [pc, #84]	; (89ce0 <Check_4_Neutralstability+0xc0>)
   89c8c:	4610      	mov	r0, r2
   89c8e:	4798      	blx	r3
   89c90:	4c14      	ldr	r4, [pc, #80]	; (89ce4 <Check_4_Neutralstability+0xc4>)
   89c92:	a30b      	add	r3, pc, #44	; (adr r3, 89cc0 <Check_4_Neutralstability+0xa0>)
   89c94:	e9d3 2300 	ldrd	r2, r3, [r3]
   89c98:	47a0      	blx	r4
   89c9a:	4603      	mov	r3, r0
   89c9c:	2b00      	cmp	r3, #0
   89c9e:	d001      	beq.n	89ca4 <Check_4_Neutralstability+0x84>
		{
			neuts3_stable = true;
   89ca0:	2301      	movs	r3, #1
   89ca2:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS3NeuStability = Neupost_stability_count;  
   89ca4:	4b10      	ldr	r3, [pc, #64]	; (89ce8 <Check_4_Neutralstability+0xc8>)
   89ca6:	881a      	ldrh	r2, [r3, #0]
   89ca8:	4b08      	ldr	r3, [pc, #32]	; (89ccc <Check_4_Neutralstability+0xac>)
   89caa:	801a      	strh	r2, [r3, #0]
		TS3_neustability_count = 0;
   89cac:	4b06      	ldr	r3, [pc, #24]	; (89cc8 <Check_4_Neutralstability+0xa8>)
   89cae:	2200      	movs	r2, #0
   89cb0:	801a      	strh	r2, [r3, #0]
	}
	return neuts3_stable;
   89cb2:	79fb      	ldrb	r3, [r7, #7]
}
   89cb4:	4618      	mov	r0, r3
   89cb6:	370c      	adds	r7, #12
   89cb8:	46bd      	mov	sp, r7
   89cba:	bd90      	pop	{r4, r7, pc}
   89cbc:	f3af 8000 	nop.w
   89cc0:	9999999a 	.word	0x9999999a
   89cc4:	3fb99999 	.word	0x3fb99999
   89cc8:	200718ac 	.word	0x200718ac
   89ccc:	200704d4 	.word	0x200704d4
   89cd0:	200720cc 	.word	0x200720cc
   89cd4:	2007189c 	.word	0x2007189c
   89cd8:	000a82d1 	.word	0x000a82d1
   89cdc:	000a7d95 	.word	0x000a7d95
   89ce0:	000a7681 	.word	0x000a7681
   89ce4:	000a7c21 	.word	0x000a7c21
   89ce8:	200704d6 	.word	0x200704d6

00089cec <Calculate_slope>:

void Calculate_slope ()
{
   89cec:	b598      	push	{r3, r4, r7, lr}
   89cee:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   89cf0:	4b10      	ldr	r3, [pc, #64]	; (89d34 <Calculate_slope+0x48>)
   89cf2:	f04f 0200 	mov.w	r2, #0
   89cf6:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   89cf8:	4b0f      	ldr	r3, [pc, #60]	; (89d38 <Calculate_slope+0x4c>)
   89cfa:	681a      	ldr	r2, [r3, #0]
   89cfc:	4b0f      	ldr	r3, [pc, #60]	; (89d3c <Calculate_slope+0x50>)
   89cfe:	6819      	ldr	r1, [r3, #0]
   89d00:	4b0f      	ldr	r3, [pc, #60]	; (89d40 <Calculate_slope+0x54>)
   89d02:	4610      	mov	r0, r2
   89d04:	4798      	blx	r3
   89d06:	4603      	mov	r3, r0
   89d08:	461c      	mov	r4, r3
   89d0a:	4b0e      	ldr	r3, [pc, #56]	; (89d44 <Calculate_slope+0x58>)
   89d0c:	881b      	ldrh	r3, [r3, #0]
   89d0e:	461a      	mov	r2, r3
   89d10:	4b0d      	ldr	r3, [pc, #52]	; (89d48 <Calculate_slope+0x5c>)
   89d12:	881b      	ldrh	r3, [r3, #0]
   89d14:	1ad2      	subs	r2, r2, r3
   89d16:	4b0d      	ldr	r3, [pc, #52]	; (89d4c <Calculate_slope+0x60>)
   89d18:	4610      	mov	r0, r2
   89d1a:	4798      	blx	r3
   89d1c:	4602      	mov	r2, r0
   89d1e:	4b0c      	ldr	r3, [pc, #48]	; (89d50 <Calculate_slope+0x64>)
   89d20:	4611      	mov	r1, r2
   89d22:	4620      	mov	r0, r4
   89d24:	4798      	blx	r3
   89d26:	4603      	mov	r3, r0
   89d28:	461a      	mov	r2, r3
   89d2a:	4b02      	ldr	r3, [pc, #8]	; (89d34 <Calculate_slope+0x48>)
   89d2c:	601a      	str	r2, [r3, #0]
}
   89d2e:	bf00      	nop
   89d30:	bd98      	pop	{r3, r4, r7, pc}
   89d32:	bf00      	nop
   89d34:	200718b8 	.word	0x200718b8
   89d38:	20071898 	.word	0x20071898
   89d3c:	200718b4 	.word	0x200718b4
   89d40:	000a7d95 	.word	0x000a7d95
   89d44:	200718a0 	.word	0x200718a0
   89d48:	200718a6 	.word	0x200718a6
   89d4c:	000a7f01 	.word	0x000a7f01
   89d50:	000a8111 	.word	0x000a8111

00089d54 <Calculate_direction>:

Calculate_direction()
{
   89d54:	b580      	push	{r7, lr}
   89d56:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   89d58:	4b20      	ldr	r3, [pc, #128]	; (89ddc <Calculate_direction+0x88>)
   89d5a:	681a      	ldr	r2, [r3, #0]
   89d5c:	4b20      	ldr	r3, [pc, #128]	; (89de0 <Calculate_direction+0x8c>)
   89d5e:	6819      	ldr	r1, [r3, #0]
   89d60:	4b20      	ldr	r3, [pc, #128]	; (89de4 <Calculate_direction+0x90>)
   89d62:	4610      	mov	r0, r2
   89d64:	4798      	blx	r3
   89d66:	4603      	mov	r3, r0
   89d68:	461a      	mov	r2, r3
   89d6a:	4b1f      	ldr	r3, [pc, #124]	; (89de8 <Calculate_direction+0x94>)
   89d6c:	f04f 0100 	mov.w	r1, #0
   89d70:	4610      	mov	r0, r2
   89d72:	4798      	blx	r3
   89d74:	4603      	mov	r3, r0
   89d76:	2b00      	cmp	r3, #0
   89d78:	d003      	beq.n	89d82 <Calculate_direction+0x2e>
	    TS2_Direction = UP;
   89d7a:	4b1c      	ldr	r3, [pc, #112]	; (89dec <Calculate_direction+0x98>)
   89d7c:	2200      	movs	r2, #0
   89d7e:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   89d80:	e029      	b.n	89dd6 <Calculate_direction+0x82>

Calculate_direction()
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   89d82:	4b17      	ldr	r3, [pc, #92]	; (89de0 <Calculate_direction+0x8c>)
   89d84:	681a      	ldr	r2, [r3, #0]
   89d86:	4b15      	ldr	r3, [pc, #84]	; (89ddc <Calculate_direction+0x88>)
   89d88:	6819      	ldr	r1, [r3, #0]
   89d8a:	4b16      	ldr	r3, [pc, #88]	; (89de4 <Calculate_direction+0x90>)
   89d8c:	4610      	mov	r0, r2
   89d8e:	4798      	blx	r3
   89d90:	4603      	mov	r3, r0
   89d92:	461a      	mov	r2, r3
   89d94:	4b14      	ldr	r3, [pc, #80]	; (89de8 <Calculate_direction+0x94>)
   89d96:	f04f 0100 	mov.w	r1, #0
   89d9a:	4610      	mov	r0, r2
   89d9c:	4798      	blx	r3
   89d9e:	4603      	mov	r3, r0
   89da0:	2b00      	cmp	r3, #0
   89da2:	d003      	beq.n	89dac <Calculate_direction+0x58>
	    TS2_Direction = DOWN;
   89da4:	4b11      	ldr	r3, [pc, #68]	; (89dec <Calculate_direction+0x98>)
   89da6:	2201      	movs	r2, #1
   89da8:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   89daa:	e014      	b.n	89dd6 <Calculate_direction+0x82>
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   89dac:	4b0c      	ldr	r3, [pc, #48]	; (89de0 <Calculate_direction+0x8c>)
   89dae:	681a      	ldr	r2, [r3, #0]
   89db0:	4b0a      	ldr	r3, [pc, #40]	; (89ddc <Calculate_direction+0x88>)
   89db2:	6819      	ldr	r1, [r3, #0]
   89db4:	4b0b      	ldr	r3, [pc, #44]	; (89de4 <Calculate_direction+0x90>)
   89db6:	4610      	mov	r0, r2
   89db8:	4798      	blx	r3
   89dba:	4603      	mov	r3, r0
   89dbc:	461a      	mov	r2, r3
   89dbe:	4b0c      	ldr	r3, [pc, #48]	; (89df0 <Calculate_direction+0x9c>)
   89dc0:	f04f 0100 	mov.w	r1, #0
   89dc4:	4610      	mov	r0, r2
   89dc6:	4798      	blx	r3
   89dc8:	4603      	mov	r3, r0
   89dca:	2b00      	cmp	r3, #0
   89dcc:	d100      	bne.n	89dd0 <Calculate_direction+0x7c>
		TS2_Direction = NUETRAL;

}
   89dce:	e002      	b.n	89dd6 <Calculate_direction+0x82>
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
   89dd0:	4b06      	ldr	r3, [pc, #24]	; (89dec <Calculate_direction+0x98>)
   89dd2:	2202      	movs	r2, #2
   89dd4:	701a      	strb	r2, [r3, #0]

}
   89dd6:	bf00      	nop
   89dd8:	bd80      	pop	{r7, pc}
   89dda:	bf00      	nop
   89ddc:	20071898 	.word	0x20071898
   89de0:	200718b0 	.word	0x200718b0
   89de4:	000a7d95 	.word	0x000a7d95
   89de8:	000a8321 	.word	0x000a8321
   89dec:	200720da 	.word	0x200720da
   89df0:	000a82d1 	.word	0x000a82d1
   89df4:	00000000 	.word	0x00000000

00089df8 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   89df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89dfa:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   89dfc:	4b90      	ldr	r3, [pc, #576]	; (8a040 <Coarse_DutyCorrection+0x248>)
   89dfe:	681a      	ldr	r2, [r3, #0]
   89e00:	4b90      	ldr	r3, [pc, #576]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89e02:	4610      	mov	r0, r2
   89e04:	4798      	blx	r3
   89e06:	4c90      	ldr	r4, [pc, #576]	; (8a048 <Coarse_DutyCorrection+0x250>)
   89e08:	a387      	add	r3, pc, #540	; (adr r3, 8a028 <Coarse_DutyCorrection+0x230>)
   89e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e0e:	47a0      	blx	r4
   89e10:	4603      	mov	r3, r0
   89e12:	2b00      	cmp	r3, #0
   89e14:	d002      	beq.n	89e1c <Coarse_DutyCorrection+0x24>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   89e16:	4b8d      	ldr	r3, [pc, #564]	; (8a04c <Coarse_DutyCorrection+0x254>)
   89e18:	223c      	movs	r2, #60	; 0x3c
   89e1a:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   89e1c:	4b88      	ldr	r3, [pc, #544]	; (8a040 <Coarse_DutyCorrection+0x248>)
   89e1e:	681a      	ldr	r2, [r3, #0]
   89e20:	4b88      	ldr	r3, [pc, #544]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89e22:	4610      	mov	r0, r2
   89e24:	4798      	blx	r3
   89e26:	4c88      	ldr	r4, [pc, #544]	; (8a048 <Coarse_DutyCorrection+0x250>)
   89e28:	a381      	add	r3, pc, #516	; (adr r3, 8a030 <Coarse_DutyCorrection+0x238>)
   89e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e2e:	47a0      	blx	r4
   89e30:	4603      	mov	r3, r0
   89e32:	2b00      	cmp	r3, #0
   89e34:	d00f      	beq.n	89e56 <Coarse_DutyCorrection+0x5e>
   89e36:	4b82      	ldr	r3, [pc, #520]	; (8a040 <Coarse_DutyCorrection+0x248>)
   89e38:	681a      	ldr	r2, [r3, #0]
   89e3a:	4b82      	ldr	r3, [pc, #520]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89e3c:	4610      	mov	r0, r2
   89e3e:	4798      	blx	r3
   89e40:	4c83      	ldr	r4, [pc, #524]	; (8a050 <Coarse_DutyCorrection+0x258>)
   89e42:	a379      	add	r3, pc, #484	; (adr r3, 8a028 <Coarse_DutyCorrection+0x230>)
   89e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e48:	47a0      	blx	r4
   89e4a:	4603      	mov	r3, r0
   89e4c:	2b00      	cmp	r3, #0
   89e4e:	d002      	beq.n	89e56 <Coarse_DutyCorrection+0x5e>
	{
		duty_count = 40;
   89e50:	4b7e      	ldr	r3, [pc, #504]	; (8a04c <Coarse_DutyCorrection+0x254>)
   89e52:	2228      	movs	r2, #40	; 0x28
   89e54:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   89e56:	4b7a      	ldr	r3, [pc, #488]	; (8a040 <Coarse_DutyCorrection+0x248>)
   89e58:	681a      	ldr	r2, [r3, #0]
   89e5a:	4b7a      	ldr	r3, [pc, #488]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89e5c:	4610      	mov	r0, r2
   89e5e:	4798      	blx	r3
   89e60:	4c7c      	ldr	r4, [pc, #496]	; (8a054 <Coarse_DutyCorrection+0x25c>)
   89e62:	a373      	add	r3, pc, #460	; (adr r3, 8a030 <Coarse_DutyCorrection+0x238>)
   89e64:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e68:	47a0      	blx	r4
   89e6a:	4603      	mov	r3, r0
   89e6c:	2b00      	cmp	r3, #0
   89e6e:	d002      	beq.n	89e76 <Coarse_DutyCorrection+0x7e>
	{
		duty_count = 8;
   89e70:	4b76      	ldr	r3, [pc, #472]	; (8a04c <Coarse_DutyCorrection+0x254>)
   89e72:	2208      	movs	r2, #8
   89e74:	701a      	strb	r2, [r3, #0]
	
	}
	
	if (SYSTEM_FLOW == 800)
   89e76:	4b78      	ldr	r3, [pc, #480]	; (8a058 <Coarse_DutyCorrection+0x260>)
   89e78:	681b      	ldr	r3, [r3, #0]
   89e7a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89e7e:	f040 814c 	bne.w	8a11a <Coarse_DutyCorrection+0x322>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2)) )   // if direction is upward restrict correction if TS2 not yet 39
   89e82:	4b76      	ldr	r3, [pc, #472]	; (8a05c <Coarse_DutyCorrection+0x264>)
   89e84:	781b      	ldrb	r3, [r3, #0]
   89e86:	2b00      	cmp	r3, #0
   89e88:	d128      	bne.n	89edc <Coarse_DutyCorrection+0xe4>
   89e8a:	4b75      	ldr	r3, [pc, #468]	; (8a060 <Coarse_DutyCorrection+0x268>)
   89e8c:	681a      	ldr	r2, [r3, #0]
   89e8e:	4b75      	ldr	r3, [pc, #468]	; (8a064 <Coarse_DutyCorrection+0x26c>)
   89e90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89e94:	4610      	mov	r0, r2
   89e96:	4798      	blx	r3
   89e98:	4603      	mov	r3, r0
   89e9a:	4618      	mov	r0, r3
   89e9c:	4b72      	ldr	r3, [pc, #456]	; (8a068 <Coarse_DutyCorrection+0x270>)
   89e9e:	681a      	ldr	r2, [r3, #0]
   89ea0:	4b72      	ldr	r3, [pc, #456]	; (8a06c <Coarse_DutyCorrection+0x274>)
   89ea2:	4611      	mov	r1, r2
   89ea4:	4798      	blx	r3
   89ea6:	4603      	mov	r3, r0
   89ea8:	2b00      	cmp	r3, #0
   89eaa:	d017      	beq.n	89edc <Coarse_DutyCorrection+0xe4>
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   89eac:	4b70      	ldr	r3, [pc, #448]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89eae:	f9b3 3000 	ldrsh.w	r3, [r3]
   89eb2:	b29a      	uxth	r2, r3
   89eb4:	4b65      	ldr	r3, [pc, #404]	; (8a04c <Coarse_DutyCorrection+0x254>)
   89eb6:	781b      	ldrb	r3, [r3, #0]
   89eb8:	b29b      	uxth	r3, r3
   89eba:	1ad3      	subs	r3, r2, r3
   89ebc:	b29b      	uxth	r3, r3
   89ebe:	b21a      	sxth	r2, r3
   89ec0:	4b6b      	ldr	r3, [pc, #428]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89ec2:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89ec4:	4b6a      	ldr	r3, [pc, #424]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
   89eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89ece:	f300 8404 	bgt.w	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   89ed2:	4b67      	ldr	r3, [pc, #412]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89ed4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89ed8:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2)) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89eda:	e3fe      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
   89edc:	4b5f      	ldr	r3, [pc, #380]	; (8a05c <Coarse_DutyCorrection+0x264>)
   89ede:	781b      	ldrb	r3, [r3, #0]
   89ee0:	2b00      	cmp	r3, #0
   89ee2:	d157      	bne.n	89f94 <Coarse_DutyCorrection+0x19c>
   89ee4:	4b60      	ldr	r3, [pc, #384]	; (8a068 <Coarse_DutyCorrection+0x270>)
   89ee6:	681a      	ldr	r2, [r3, #0]
   89ee8:	4b56      	ldr	r3, [pc, #344]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89eea:	4610      	mov	r0, r2
   89eec:	4798      	blx	r3
   89eee:	4605      	mov	r5, r0
   89ef0:	460e      	mov	r6, r1
   89ef2:	4b5b      	ldr	r3, [pc, #364]	; (8a060 <Coarse_DutyCorrection+0x268>)
   89ef4:	681a      	ldr	r2, [r3, #0]
   89ef6:	4b53      	ldr	r3, [pc, #332]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89ef8:	4610      	mov	r0, r2
   89efa:	4798      	blx	r3
   89efc:	4c5d      	ldr	r4, [pc, #372]	; (8a074 <Coarse_DutyCorrection+0x27c>)
   89efe:	f04f 0200 	mov.w	r2, #0
   89f02:	4b5d      	ldr	r3, [pc, #372]	; (8a078 <Coarse_DutyCorrection+0x280>)
   89f04:	47a0      	blx	r4
   89f06:	4603      	mov	r3, r0
   89f08:	460c      	mov	r4, r1
   89f0a:	461a      	mov	r2, r3
   89f0c:	4623      	mov	r3, r4
   89f0e:	4c51      	ldr	r4, [pc, #324]	; (8a054 <Coarse_DutyCorrection+0x25c>)
   89f10:	4628      	mov	r0, r5
   89f12:	4631      	mov	r1, r6
   89f14:	47a0      	blx	r4
   89f16:	4603      	mov	r3, r0
   89f18:	2b00      	cmp	r3, #0
   89f1a:	d03b      	beq.n	89f94 <Coarse_DutyCorrection+0x19c>
   89f1c:	4b57      	ldr	r3, [pc, #348]	; (8a07c <Coarse_DutyCorrection+0x284>)
   89f1e:	681a      	ldr	r2, [r3, #0]
   89f20:	4b48      	ldr	r3, [pc, #288]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89f22:	4610      	mov	r0, r2
   89f24:	4798      	blx	r3
   89f26:	4605      	mov	r5, r0
   89f28:	460e      	mov	r6, r1
   89f2a:	4b55      	ldr	r3, [pc, #340]	; (8a080 <Coarse_DutyCorrection+0x288>)
   89f2c:	681a      	ldr	r2, [r3, #0]
   89f2e:	4b45      	ldr	r3, [pc, #276]	; (8a044 <Coarse_DutyCorrection+0x24c>)
   89f30:	4610      	mov	r0, r2
   89f32:	4798      	blx	r3
   89f34:	4c4f      	ldr	r4, [pc, #316]	; (8a074 <Coarse_DutyCorrection+0x27c>)
   89f36:	a340      	add	r3, pc, #256	; (adr r3, 8a038 <Coarse_DutyCorrection+0x240>)
   89f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   89f3c:	47a0      	blx	r4
   89f3e:	4603      	mov	r3, r0
   89f40:	460c      	mov	r4, r1
   89f42:	461a      	mov	r2, r3
   89f44:	4623      	mov	r3, r4
   89f46:	4c40      	ldr	r4, [pc, #256]	; (8a048 <Coarse_DutyCorrection+0x250>)
   89f48:	4628      	mov	r0, r5
   89f4a:	4631      	mov	r1, r6
   89f4c:	47a0      	blx	r4
   89f4e:	4603      	mov	r3, r0
   89f50:	2b00      	cmp	r3, #0
   89f52:	d01f      	beq.n	89f94 <Coarse_DutyCorrection+0x19c>
		{
			avg_duty = avg_duty - 10;
   89f54:	4b46      	ldr	r3, [pc, #280]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89f56:	f9b3 3000 	ldrsh.w	r3, [r3]
   89f5a:	b29b      	uxth	r3, r3
   89f5c:	3b0a      	subs	r3, #10
   89f5e:	b29b      	uxth	r3, r3
   89f60:	b21a      	sxth	r2, r3
   89f62:	4b43      	ldr	r3, [pc, #268]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89f64:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89f66:	4b42      	ldr	r3, [pc, #264]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89f68:	f9b3 3000 	ldrsh.w	r3, [r3]
   89f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   89f70:	f300 83b3 	bgt.w	8a6da <Coarse_DutyCorrection+0x8e2>
   89f74:	4b41      	ldr	r3, [pc, #260]	; (8a07c <Coarse_DutyCorrection+0x284>)
   89f76:	681a      	ldr	r2, [r3, #0]
   89f78:	4b41      	ldr	r3, [pc, #260]	; (8a080 <Coarse_DutyCorrection+0x288>)
   89f7a:	6819      	ldr	r1, [r3, #0]
   89f7c:	4b41      	ldr	r3, [pc, #260]	; (8a084 <Coarse_DutyCorrection+0x28c>)
   89f7e:	4610      	mov	r0, r2
   89f80:	4798      	blx	r3
   89f82:	4603      	mov	r3, r0
   89f84:	2b00      	cmp	r3, #0
   89f86:	d100      	bne.n	89f8a <Coarse_DutyCorrection+0x192>
   89f88:	e3a7      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   89f8a:	4b39      	ldr	r3, [pc, #228]	; (8a070 <Coarse_DutyCorrection+0x278>)
   89f8c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   89f90:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   89f92:	e3a2      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
   89f94:	4b31      	ldr	r3, [pc, #196]	; (8a05c <Coarse_DutyCorrection+0x264>)
   89f96:	781b      	ldrb	r3, [r3, #0]
   89f98:	2b00      	cmp	r3, #0
   89f9a:	d17f      	bne.n	8a09c <Coarse_DutyCorrection+0x2a4>
   89f9c:	4b30      	ldr	r3, [pc, #192]	; (8a060 <Coarse_DutyCorrection+0x268>)
   89f9e:	681a      	ldr	r2, [r3, #0]
   89fa0:	4b39      	ldr	r3, [pc, #228]	; (8a088 <Coarse_DutyCorrection+0x290>)
   89fa2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89fa6:	4610      	mov	r0, r2
   89fa8:	4798      	blx	r3
   89faa:	4603      	mov	r3, r0
   89fac:	4618      	mov	r0, r3
   89fae:	4b2e      	ldr	r3, [pc, #184]	; (8a068 <Coarse_DutyCorrection+0x270>)
   89fb0:	681a      	ldr	r2, [r3, #0]
   89fb2:	4b2e      	ldr	r3, [pc, #184]	; (8a06c <Coarse_DutyCorrection+0x274>)
   89fb4:	4611      	mov	r1, r2
   89fb6:	4798      	blx	r3
   89fb8:	4603      	mov	r3, r0
   89fba:	2b00      	cmp	r3, #0
   89fbc:	d06e      	beq.n	8a09c <Coarse_DutyCorrection+0x2a4>
   89fbe:	4b28      	ldr	r3, [pc, #160]	; (8a060 <Coarse_DutyCorrection+0x268>)
   89fc0:	681a      	ldr	r2, [r3, #0]
   89fc2:	4b28      	ldr	r3, [pc, #160]	; (8a064 <Coarse_DutyCorrection+0x26c>)
   89fc4:	4931      	ldr	r1, [pc, #196]	; (8a08c <Coarse_DutyCorrection+0x294>)
   89fc6:	4610      	mov	r0, r2
   89fc8:	4798      	blx	r3
   89fca:	4603      	mov	r3, r0
   89fcc:	4618      	mov	r0, r3
   89fce:	4b26      	ldr	r3, [pc, #152]	; (8a068 <Coarse_DutyCorrection+0x270>)
   89fd0:	681a      	ldr	r2, [r3, #0]
   89fd2:	4b2f      	ldr	r3, [pc, #188]	; (8a090 <Coarse_DutyCorrection+0x298>)
   89fd4:	4611      	mov	r1, r2
   89fd6:	4798      	blx	r3
   89fd8:	4603      	mov	r3, r0
   89fda:	2b00      	cmp	r3, #0
   89fdc:	d05e      	beq.n	8a09c <Coarse_DutyCorrection+0x2a4>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   89fde:	4b2d      	ldr	r3, [pc, #180]	; (8a094 <Coarse_DutyCorrection+0x29c>)
   89fe0:	681a      	ldr	r2, [r3, #0]
   89fe2:	4b22      	ldr	r3, [pc, #136]	; (8a06c <Coarse_DutyCorrection+0x274>)
   89fe4:	492c      	ldr	r1, [pc, #176]	; (8a098 <Coarse_DutyCorrection+0x2a0>)
   89fe6:	4610      	mov	r0, r2
   89fe8:	4798      	blx	r3
   89fea:	4603      	mov	r3, r0
   89fec:	2b00      	cmp	r3, #0
   89fee:	f000 8374 	beq.w	8a6da <Coarse_DutyCorrection+0x8e2>
   89ff2:	4b22      	ldr	r3, [pc, #136]	; (8a07c <Coarse_DutyCorrection+0x284>)
   89ff4:	681a      	ldr	r2, [r3, #0]
   89ff6:	4b22      	ldr	r3, [pc, #136]	; (8a080 <Coarse_DutyCorrection+0x288>)
   89ff8:	6819      	ldr	r1, [r3, #0]
   89ffa:	4b22      	ldr	r3, [pc, #136]	; (8a084 <Coarse_DutyCorrection+0x28c>)
   89ffc:	4610      	mov	r0, r2
   89ffe:	4798      	blx	r3
   8a000:	4603      	mov	r3, r0
   8a002:	2b00      	cmp	r3, #0
   8a004:	d100      	bne.n	8a008 <Coarse_DutyCorrection+0x210>
   8a006:	e368      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
   8a008:	4b10      	ldr	r3, [pc, #64]	; (8a04c <Coarse_DutyCorrection+0x254>)
   8a00a:	781b      	ldrb	r3, [r3, #0]
   8a00c:	b29a      	uxth	r2, r3
   8a00e:	4b18      	ldr	r3, [pc, #96]	; (8a070 <Coarse_DutyCorrection+0x278>)
   8a010:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a014:	b29b      	uxth	r3, r3
   8a016:	4413      	add	r3, r2
   8a018:	b29b      	uxth	r3, r3
   8a01a:	b21a      	sxth	r2, r3
   8a01c:	4b14      	ldr	r3, [pc, #80]	; (8a070 <Coarse_DutyCorrection+0x278>)
   8a01e:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a020:	e35b      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
   8a022:	bf00      	nop
   8a024:	f3af 8000 	nop.w
   8a028:	eb851eb8 	.word	0xeb851eb8
   8a02c:	3f9eb851 	.word	0x3f9eb851
   8a030:	33333333 	.word	0x33333333
   8a034:	3fd33333 	.word	0x3fd33333
   8a038:	9999999a 	.word	0x9999999a
   8a03c:	3fb99999 	.word	0x3fb99999
   8a040:	200718b8 	.word	0x200718b8
   8a044:	000a7681 	.word	0x000a7681
   8a048:	000a7c21 	.word	0x000a7c21
   8a04c:	200718bc 	.word	0x200718bc
   8a050:	000a7c49 	.word	0x000a7c49
   8a054:	000a7c35 	.word	0x000a7c35
   8a058:	200704d8 	.word	0x200704d8
   8a05c:	200720da 	.word	0x200720da
   8a060:	200720dc 	.word	0x200720dc
   8a064:	000a7d99 	.word	0x000a7d99
   8a068:	20071898 	.word	0x20071898
   8a06c:	000a82f9 	.word	0x000a82f9
   8a070:	20071886 	.word	0x20071886
   8a074:	000a73c5 	.word	0x000a73c5
   8a078:	3fe00000 	.word	0x3fe00000
   8a07c:	2007189c 	.word	0x2007189c
   8a080:	200720c8 	.word	0x200720c8
   8a084:	000a82e5 	.word	0x000a82e5
   8a088:	000a7d95 	.word	0x000a7d95
   8a08c:	40400000 	.word	0x40400000
   8a090:	000a830d 	.word	0x000a830d
   8a094:	20071894 	.word	0x20071894
   8a098:	42100000 	.word	0x42100000
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
   8a09c:	4b8c      	ldr	r3, [pc, #560]	; (8a2d0 <Coarse_DutyCorrection+0x4d8>)
   8a09e:	781b      	ldrb	r3, [r3, #0]
   8a0a0:	2b01      	cmp	r3, #1
   8a0a2:	d12f      	bne.n	8a104 <Coarse_DutyCorrection+0x30c>
   8a0a4:	4b8b      	ldr	r3, [pc, #556]	; (8a2d4 <Coarse_DutyCorrection+0x4dc>)
   8a0a6:	681a      	ldr	r2, [r3, #0]
   8a0a8:	4b8b      	ldr	r3, [pc, #556]	; (8a2d8 <Coarse_DutyCorrection+0x4e0>)
   8a0aa:	6819      	ldr	r1, [r3, #0]
   8a0ac:	4b8b      	ldr	r3, [pc, #556]	; (8a2dc <Coarse_DutyCorrection+0x4e4>)
   8a0ae:	4610      	mov	r0, r2
   8a0b0:	4798      	blx	r3
   8a0b2:	4603      	mov	r3, r0
   8a0b4:	2b00      	cmp	r3, #0
   8a0b6:	d025      	beq.n	8a104 <Coarse_DutyCorrection+0x30c>
		{
			avg_duty = avg_duty + duty_count;
   8a0b8:	4b89      	ldr	r3, [pc, #548]	; (8a2e0 <Coarse_DutyCorrection+0x4e8>)
   8a0ba:	781b      	ldrb	r3, [r3, #0]
   8a0bc:	b29a      	uxth	r2, r3
   8a0be:	4b89      	ldr	r3, [pc, #548]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a0c0:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a0c4:	b29b      	uxth	r3, r3
   8a0c6:	4413      	add	r3, r2
   8a0c8:	b29b      	uxth	r3, r3
   8a0ca:	b21a      	sxth	r2, r3
   8a0cc:	4b85      	ldr	r3, [pc, #532]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a0ce:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a0d0:	4b84      	ldr	r3, [pc, #528]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a0d2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a0d6:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a0da:	4293      	cmp	r3, r2
   8a0dc:	f340 82fd 	ble.w	8a6da <Coarse_DutyCorrection+0x8e2>
   8a0e0:	4b81      	ldr	r3, [pc, #516]	; (8a2e8 <Coarse_DutyCorrection+0x4f0>)
   8a0e2:	681a      	ldr	r2, [r3, #0]
   8a0e4:	4b81      	ldr	r3, [pc, #516]	; (8a2ec <Coarse_DutyCorrection+0x4f4>)
   8a0e6:	6819      	ldr	r1, [r3, #0]
   8a0e8:	4b81      	ldr	r3, [pc, #516]	; (8a2f0 <Coarse_DutyCorrection+0x4f8>)
   8a0ea:	4610      	mov	r0, r2
   8a0ec:	4798      	blx	r3
   8a0ee:	4603      	mov	r3, r0
   8a0f0:	2b00      	cmp	r3, #0
   8a0f2:	d100      	bne.n	8a0f6 <Coarse_DutyCorrection+0x2fe>
   8a0f4:	e2f1      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 2300;
   8a0f6:	4b7b      	ldr	r3, [pc, #492]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a0f8:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a0fc:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a0fe:	4b7d      	ldr	r3, [pc, #500]	; (8a2f4 <Coarse_DutyCorrection+0x4fc>)
   8a100:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
		{
			avg_duty = avg_duty + duty_count;
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a102:	e2ea      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a104:	4b72      	ldr	r3, [pc, #456]	; (8a2d0 <Coarse_DutyCorrection+0x4d8>)
   8a106:	781b      	ldrb	r3, [r3, #0]
   8a108:	2b02      	cmp	r3, #2
   8a10a:	f040 82e6 	bne.w	8a6da <Coarse_DutyCorrection+0x8e2>
		avg_duty = avg_duty;
   8a10e:	4b75      	ldr	r3, [pc, #468]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a110:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a114:	4b73      	ldr	r3, [pc, #460]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a116:	801a      	strh	r2, [r3, #0]
		}
	
		avg_duty = avg_duty;
		
	}
}
   8a118:	e2df      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
		avg_duty = avg_duty;
		
	}

	else if (SYSTEM_FLOW == 500)
   8a11a:	4b77      	ldr	r3, [pc, #476]	; (8a2f8 <Coarse_DutyCorrection+0x500>)
   8a11c:	681b      	ldr	r3, [r3, #0]
   8a11e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8a122:	f040 815a 	bne.w	8a3da <Coarse_DutyCorrection+0x5e2>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
   8a126:	4b6a      	ldr	r3, [pc, #424]	; (8a2d0 <Coarse_DutyCorrection+0x4d8>)
   8a128:	781b      	ldrb	r3, [r3, #0]
   8a12a:	2b00      	cmp	r3, #0
   8a12c:	d128      	bne.n	8a180 <Coarse_DutyCorrection+0x388>
   8a12e:	4b6a      	ldr	r3, [pc, #424]	; (8a2d8 <Coarse_DutyCorrection+0x4e0>)
   8a130:	681a      	ldr	r2, [r3, #0]
   8a132:	4b72      	ldr	r3, [pc, #456]	; (8a2fc <Coarse_DutyCorrection+0x504>)
   8a134:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a138:	4610      	mov	r0, r2
   8a13a:	4798      	blx	r3
   8a13c:	4603      	mov	r3, r0
   8a13e:	4618      	mov	r0, r3
   8a140:	4b64      	ldr	r3, [pc, #400]	; (8a2d4 <Coarse_DutyCorrection+0x4dc>)
   8a142:	681a      	ldr	r2, [r3, #0]
   8a144:	4b65      	ldr	r3, [pc, #404]	; (8a2dc <Coarse_DutyCorrection+0x4e4>)
   8a146:	4611      	mov	r1, r2
   8a148:	4798      	blx	r3
   8a14a:	4603      	mov	r3, r0
   8a14c:	2b00      	cmp	r3, #0
   8a14e:	d017      	beq.n	8a180 <Coarse_DutyCorrection+0x388>
		{													// Prescribed_T2 = 39 
			
			avg_duty = avg_duty - duty_count;
   8a150:	4b64      	ldr	r3, [pc, #400]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a152:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a156:	b29a      	uxth	r2, r3
   8a158:	4b61      	ldr	r3, [pc, #388]	; (8a2e0 <Coarse_DutyCorrection+0x4e8>)
   8a15a:	781b      	ldrb	r3, [r3, #0]
   8a15c:	b29b      	uxth	r3, r3
   8a15e:	1ad3      	subs	r3, r2, r3
   8a160:	b29b      	uxth	r3, r3
   8a162:	b21a      	sxth	r2, r3
   8a164:	4b5f      	ldr	r3, [pc, #380]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a166:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a168:	4b5e      	ldr	r3, [pc, #376]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a16a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a16e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a172:	f300 82b2 	bgt.w	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a176:	4b5b      	ldr	r3, [pc, #364]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a178:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a17c:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 39 
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a17e:	e2ac      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a180:	4b53      	ldr	r3, [pc, #332]	; (8a2d0 <Coarse_DutyCorrection+0x4d8>)
   8a182:	781b      	ldrb	r3, [r3, #0]
   8a184:	2b00      	cmp	r3, #0
   8a186:	d157      	bne.n	8a238 <Coarse_DutyCorrection+0x440>
   8a188:	4b52      	ldr	r3, [pc, #328]	; (8a2d4 <Coarse_DutyCorrection+0x4dc>)
   8a18a:	681a      	ldr	r2, [r3, #0]
   8a18c:	4b5c      	ldr	r3, [pc, #368]	; (8a300 <Coarse_DutyCorrection+0x508>)
   8a18e:	4610      	mov	r0, r2
   8a190:	4798      	blx	r3
   8a192:	4605      	mov	r5, r0
   8a194:	460e      	mov	r6, r1
   8a196:	4b50      	ldr	r3, [pc, #320]	; (8a2d8 <Coarse_DutyCorrection+0x4e0>)
   8a198:	681a      	ldr	r2, [r3, #0]
   8a19a:	4b59      	ldr	r3, [pc, #356]	; (8a300 <Coarse_DutyCorrection+0x508>)
   8a19c:	4610      	mov	r0, r2
   8a19e:	4798      	blx	r3
   8a1a0:	4c58      	ldr	r4, [pc, #352]	; (8a304 <Coarse_DutyCorrection+0x50c>)
   8a1a2:	f04f 0200 	mov.w	r2, #0
   8a1a6:	4b58      	ldr	r3, [pc, #352]	; (8a308 <Coarse_DutyCorrection+0x510>)
   8a1a8:	47a0      	blx	r4
   8a1aa:	4603      	mov	r3, r0
   8a1ac:	460c      	mov	r4, r1
   8a1ae:	461a      	mov	r2, r3
   8a1b0:	4623      	mov	r3, r4
   8a1b2:	4c56      	ldr	r4, [pc, #344]	; (8a30c <Coarse_DutyCorrection+0x514>)
   8a1b4:	4628      	mov	r0, r5
   8a1b6:	4631      	mov	r1, r6
   8a1b8:	47a0      	blx	r4
   8a1ba:	4603      	mov	r3, r0
   8a1bc:	2b00      	cmp	r3, #0
   8a1be:	d03b      	beq.n	8a238 <Coarse_DutyCorrection+0x440>
   8a1c0:	4b49      	ldr	r3, [pc, #292]	; (8a2e8 <Coarse_DutyCorrection+0x4f0>)
   8a1c2:	681a      	ldr	r2, [r3, #0]
   8a1c4:	4b4e      	ldr	r3, [pc, #312]	; (8a300 <Coarse_DutyCorrection+0x508>)
   8a1c6:	4610      	mov	r0, r2
   8a1c8:	4798      	blx	r3
   8a1ca:	4605      	mov	r5, r0
   8a1cc:	460e      	mov	r6, r1
   8a1ce:	4b47      	ldr	r3, [pc, #284]	; (8a2ec <Coarse_DutyCorrection+0x4f4>)
   8a1d0:	681a      	ldr	r2, [r3, #0]
   8a1d2:	4b4b      	ldr	r3, [pc, #300]	; (8a300 <Coarse_DutyCorrection+0x508>)
   8a1d4:	4610      	mov	r0, r2
   8a1d6:	4798      	blx	r3
   8a1d8:	4c4a      	ldr	r4, [pc, #296]	; (8a304 <Coarse_DutyCorrection+0x50c>)
   8a1da:	a33b      	add	r3, pc, #236	; (adr r3, 8a2c8 <Coarse_DutyCorrection+0x4d0>)
   8a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1e0:	47a0      	blx	r4
   8a1e2:	4603      	mov	r3, r0
   8a1e4:	460c      	mov	r4, r1
   8a1e6:	461a      	mov	r2, r3
   8a1e8:	4623      	mov	r3, r4
   8a1ea:	4c49      	ldr	r4, [pc, #292]	; (8a310 <Coarse_DutyCorrection+0x518>)
   8a1ec:	4628      	mov	r0, r5
   8a1ee:	4631      	mov	r1, r6
   8a1f0:	47a0      	blx	r4
   8a1f2:	4603      	mov	r3, r0
   8a1f4:	2b00      	cmp	r3, #0
   8a1f6:	d01f      	beq.n	8a238 <Coarse_DutyCorrection+0x440>
		{
			avg_duty = avg_duty - 10; 
   8a1f8:	4b3a      	ldr	r3, [pc, #232]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a1fa:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a1fe:	b29b      	uxth	r3, r3
   8a200:	3b0a      	subs	r3, #10
   8a202:	b29b      	uxth	r3, r3
   8a204:	b21a      	sxth	r2, r3
   8a206:	4b37      	ldr	r3, [pc, #220]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a208:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a20a:	4b36      	ldr	r3, [pc, #216]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a20c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a210:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a214:	f300 8261 	bgt.w	8a6da <Coarse_DutyCorrection+0x8e2>
   8a218:	4b33      	ldr	r3, [pc, #204]	; (8a2e8 <Coarse_DutyCorrection+0x4f0>)
   8a21a:	681a      	ldr	r2, [r3, #0]
   8a21c:	4b33      	ldr	r3, [pc, #204]	; (8a2ec <Coarse_DutyCorrection+0x4f4>)
   8a21e:	6819      	ldr	r1, [r3, #0]
   8a220:	4b3c      	ldr	r3, [pc, #240]	; (8a314 <Coarse_DutyCorrection+0x51c>)
   8a222:	4610      	mov	r0, r2
   8a224:	4798      	blx	r3
   8a226:	4603      	mov	r3, r0
   8a228:	2b00      	cmp	r3, #0
   8a22a:	d100      	bne.n	8a22e <Coarse_DutyCorrection+0x436>
   8a22c:	e255      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a22e:	4b2d      	ldr	r3, [pc, #180]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a230:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a234:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10; 
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a236:	e250      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a238:	4b25      	ldr	r3, [pc, #148]	; (8a2d0 <Coarse_DutyCorrection+0x4d8>)
   8a23a:	781b      	ldrb	r3, [r3, #0]
   8a23c:	2b00      	cmp	r3, #0
   8a23e:	d173      	bne.n	8a328 <Coarse_DutyCorrection+0x530>
   8a240:	4b25      	ldr	r3, [pc, #148]	; (8a2d8 <Coarse_DutyCorrection+0x4e0>)
   8a242:	681a      	ldr	r2, [r3, #0]
   8a244:	4b34      	ldr	r3, [pc, #208]	; (8a318 <Coarse_DutyCorrection+0x520>)
   8a246:	4935      	ldr	r1, [pc, #212]	; (8a31c <Coarse_DutyCorrection+0x524>)
   8a248:	4610      	mov	r0, r2
   8a24a:	4798      	blx	r3
   8a24c:	4603      	mov	r3, r0
   8a24e:	4618      	mov	r0, r3
   8a250:	4b20      	ldr	r3, [pc, #128]	; (8a2d4 <Coarse_DutyCorrection+0x4dc>)
   8a252:	681a      	ldr	r2, [r3, #0]
   8a254:	4b21      	ldr	r3, [pc, #132]	; (8a2dc <Coarse_DutyCorrection+0x4e4>)
   8a256:	4611      	mov	r1, r2
   8a258:	4798      	blx	r3
   8a25a:	4603      	mov	r3, r0
   8a25c:	2b00      	cmp	r3, #0
   8a25e:	d063      	beq.n	8a328 <Coarse_DutyCorrection+0x530>
   8a260:	4b1d      	ldr	r3, [pc, #116]	; (8a2d8 <Coarse_DutyCorrection+0x4e0>)
   8a262:	681a      	ldr	r2, [r3, #0]
   8a264:	4b25      	ldr	r3, [pc, #148]	; (8a2fc <Coarse_DutyCorrection+0x504>)
   8a266:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a26a:	4610      	mov	r0, r2
   8a26c:	4798      	blx	r3
   8a26e:	4603      	mov	r3, r0
   8a270:	4618      	mov	r0, r3
   8a272:	4b18      	ldr	r3, [pc, #96]	; (8a2d4 <Coarse_DutyCorrection+0x4dc>)
   8a274:	681a      	ldr	r2, [r3, #0]
   8a276:	4b1e      	ldr	r3, [pc, #120]	; (8a2f0 <Coarse_DutyCorrection+0x4f8>)
   8a278:	4611      	mov	r1, r2
   8a27a:	4798      	blx	r3
   8a27c:	4603      	mov	r3, r0
   8a27e:	2b00      	cmp	r3, #0
   8a280:	d052      	beq.n	8a328 <Coarse_DutyCorrection+0x530>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a282:	4b27      	ldr	r3, [pc, #156]	; (8a320 <Coarse_DutyCorrection+0x528>)
   8a284:	681a      	ldr	r2, [r3, #0]
   8a286:	4b15      	ldr	r3, [pc, #84]	; (8a2dc <Coarse_DutyCorrection+0x4e4>)
   8a288:	4926      	ldr	r1, [pc, #152]	; (8a324 <Coarse_DutyCorrection+0x52c>)
   8a28a:	4610      	mov	r0, r2
   8a28c:	4798      	blx	r3
   8a28e:	4603      	mov	r3, r0
   8a290:	2b00      	cmp	r3, #0
   8a292:	f000 8222 	beq.w	8a6da <Coarse_DutyCorrection+0x8e2>
   8a296:	4b14      	ldr	r3, [pc, #80]	; (8a2e8 <Coarse_DutyCorrection+0x4f0>)
   8a298:	681a      	ldr	r2, [r3, #0]
   8a29a:	4b14      	ldr	r3, [pc, #80]	; (8a2ec <Coarse_DutyCorrection+0x4f4>)
   8a29c:	6819      	ldr	r1, [r3, #0]
   8a29e:	4b1d      	ldr	r3, [pc, #116]	; (8a314 <Coarse_DutyCorrection+0x51c>)
   8a2a0:	4610      	mov	r0, r2
   8a2a2:	4798      	blx	r3
   8a2a4:	4603      	mov	r3, r0
   8a2a6:	2b00      	cmp	r3, #0
   8a2a8:	d100      	bne.n	8a2ac <Coarse_DutyCorrection+0x4b4>
   8a2aa:	e216      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a2ac:	4b0c      	ldr	r3, [pc, #48]	; (8a2e0 <Coarse_DutyCorrection+0x4e8>)
   8a2ae:	781b      	ldrb	r3, [r3, #0]
   8a2b0:	b29a      	uxth	r2, r3
   8a2b2:	4b0c      	ldr	r3, [pc, #48]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a2b4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a2b8:	b29b      	uxth	r3, r3
   8a2ba:	4413      	add	r3, r2
   8a2bc:	b29b      	uxth	r3, r3
   8a2be:	b21a      	sxth	r2, r3
   8a2c0:	4b08      	ldr	r3, [pc, #32]	; (8a2e4 <Coarse_DutyCorrection+0x4ec>)
   8a2c2:	801a      	strh	r2, [r3, #0]
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a2c4:	e209      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
   8a2c6:	bf00      	nop
   8a2c8:	9999999a 	.word	0x9999999a
   8a2cc:	3fb99999 	.word	0x3fb99999
   8a2d0:	200720da 	.word	0x200720da
   8a2d4:	20071898 	.word	0x20071898
   8a2d8:	200720dc 	.word	0x200720dc
   8a2dc:	000a82f9 	.word	0x000a82f9
   8a2e0:	200718bc 	.word	0x200718bc
   8a2e4:	20071886 	.word	0x20071886
   8a2e8:	2007189c 	.word	0x2007189c
   8a2ec:	200720c8 	.word	0x200720c8
   8a2f0:	000a830d 	.word	0x000a830d
   8a2f4:	0009adcd 	.word	0x0009adcd
   8a2f8:	200704d8 	.word	0x200704d8
   8a2fc:	000a7d99 	.word	0x000a7d99
   8a300:	000a7681 	.word	0x000a7681
   8a304:	000a73c5 	.word	0x000a73c5
   8a308:	3fe00000 	.word	0x3fe00000
   8a30c:	000a7c35 	.word	0x000a7c35
   8a310:	000a7c49 	.word	0x000a7c49
   8a314:	000a82e5 	.word	0x000a82e5
   8a318:	000a7d95 	.word	0x000a7d95
   8a31c:	40400000 	.word	0x40400000
   8a320:	20071894 	.word	0x20071894
   8a324:	42100000 	.word	0x42100000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}           //To avoid TS2 getting stuck at 36 or 36.5
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2-2) )  
   8a328:	4b95      	ldr	r3, [pc, #596]	; (8a580 <Coarse_DutyCorrection+0x788>)
   8a32a:	781b      	ldrb	r3, [r3, #0]
   8a32c:	2b01      	cmp	r3, #1
   8a32e:	d149      	bne.n	8a3c4 <Coarse_DutyCorrection+0x5cc>
   8a330:	4b94      	ldr	r3, [pc, #592]	; (8a584 <Coarse_DutyCorrection+0x78c>)
   8a332:	681a      	ldr	r2, [r3, #0]
   8a334:	4b94      	ldr	r3, [pc, #592]	; (8a588 <Coarse_DutyCorrection+0x790>)
   8a336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a33a:	4610      	mov	r0, r2
   8a33c:	4798      	blx	r3
   8a33e:	4603      	mov	r3, r0
   8a340:	4618      	mov	r0, r3
   8a342:	4b92      	ldr	r3, [pc, #584]	; (8a58c <Coarse_DutyCorrection+0x794>)
   8a344:	681a      	ldr	r2, [r3, #0]
   8a346:	4b92      	ldr	r3, [pc, #584]	; (8a590 <Coarse_DutyCorrection+0x798>)
   8a348:	4611      	mov	r1, r2
   8a34a:	4798      	blx	r3
   8a34c:	4603      	mov	r3, r0
   8a34e:	2b00      	cmp	r3, #0
   8a350:	d038      	beq.n	8a3c4 <Coarse_DutyCorrection+0x5cc>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8a352:	4b90      	ldr	r3, [pc, #576]	; (8a594 <Coarse_DutyCorrection+0x79c>)
   8a354:	681a      	ldr	r2, [r3, #0]
   8a356:	4b90      	ldr	r3, [pc, #576]	; (8a598 <Coarse_DutyCorrection+0x7a0>)
   8a358:	4990      	ldr	r1, [pc, #576]	; (8a59c <Coarse_DutyCorrection+0x7a4>)
   8a35a:	4610      	mov	r0, r2
   8a35c:	4798      	blx	r3
   8a35e:	4603      	mov	r3, r0
   8a360:	2b00      	cmp	r3, #0
   8a362:	d015      	beq.n	8a390 <Coarse_DutyCorrection+0x598>
   8a364:	4b8e      	ldr	r3, [pc, #568]	; (8a5a0 <Coarse_DutyCorrection+0x7a8>)
   8a366:	681a      	ldr	r2, [r3, #0]
   8a368:	4b8e      	ldr	r3, [pc, #568]	; (8a5a4 <Coarse_DutyCorrection+0x7ac>)
   8a36a:	6819      	ldr	r1, [r3, #0]
   8a36c:	4b8e      	ldr	r3, [pc, #568]	; (8a5a8 <Coarse_DutyCorrection+0x7b0>)
   8a36e:	4610      	mov	r0, r2
   8a370:	4798      	blx	r3
   8a372:	4603      	mov	r3, r0
   8a374:	2b00      	cmp	r3, #0
   8a376:	d00b      	beq.n	8a390 <Coarse_DutyCorrection+0x598>
			{
				avg_duty = avg_duty + duty_count;            
   8a378:	4b8c      	ldr	r3, [pc, #560]	; (8a5ac <Coarse_DutyCorrection+0x7b4>)
   8a37a:	781b      	ldrb	r3, [r3, #0]
   8a37c:	b29a      	uxth	r2, r3
   8a37e:	4b8c      	ldr	r3, [pc, #560]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a380:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a384:	b29b      	uxth	r3, r3
   8a386:	4413      	add	r3, r2
   8a388:	b29b      	uxth	r3, r3
   8a38a:	b21a      	sxth	r2, r3
   8a38c:	4b88      	ldr	r3, [pc, #544]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a38e:	801a      	strh	r2, [r3, #0]
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a390:	4b87      	ldr	r3, [pc, #540]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a392:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a396:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a39a:	4293      	cmp	r3, r2
   8a39c:	f340 819d 	ble.w	8a6da <Coarse_DutyCorrection+0x8e2>
   8a3a0:	4b7f      	ldr	r3, [pc, #508]	; (8a5a0 <Coarse_DutyCorrection+0x7a8>)
   8a3a2:	681a      	ldr	r2, [r3, #0]
   8a3a4:	4b7f      	ldr	r3, [pc, #508]	; (8a5a4 <Coarse_DutyCorrection+0x7ac>)
   8a3a6:	6819      	ldr	r1, [r3, #0]
   8a3a8:	4b79      	ldr	r3, [pc, #484]	; (8a590 <Coarse_DutyCorrection+0x798>)
   8a3aa:	4610      	mov	r0, r2
   8a3ac:	4798      	blx	r3
   8a3ae:	4603      	mov	r3, r0
   8a3b0:	2b00      	cmp	r3, #0
   8a3b2:	d100      	bne.n	8a3b6 <Coarse_DutyCorrection+0x5be>
   8a3b4:	e191      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
			{
				avg_duty = 2300;
   8a3b6:	4b7e      	ldr	r3, [pc, #504]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a3b8:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a3bc:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a3be:	4b7d      	ldr	r3, [pc, #500]	; (8a5b4 <Coarse_DutyCorrection+0x7bc>)
   8a3c0:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a3c2:	e18a      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a3c4:	4b6e      	ldr	r3, [pc, #440]	; (8a580 <Coarse_DutyCorrection+0x788>)
   8a3c6:	781b      	ldrb	r3, [r3, #0]
   8a3c8:	2b02      	cmp	r3, #2
   8a3ca:	f040 8186 	bne.w	8a6da <Coarse_DutyCorrection+0x8e2>
		avg_duty = avg_duty;
   8a3ce:	4b78      	ldr	r3, [pc, #480]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a3d0:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a3d4:	4b76      	ldr	r3, [pc, #472]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a3d6:	801a      	strh	r2, [r3, #0]
		}
	
		avg_duty = avg_duty;
		
	}
}
   8a3d8:	e17f      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
		avg_duty = avg_duty;
		
	}
	
	else if (SYSTEM_FLOW == 300)
   8a3da:	4b77      	ldr	r3, [pc, #476]	; (8a5b8 <Coarse_DutyCorrection+0x7c0>)
   8a3dc:	681b      	ldr	r3, [r3, #0]
   8a3de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8a3e2:	f040 817a 	bne.w	8a6da <Coarse_DutyCorrection+0x8e2>
	{
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2))  ) )// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
   8a3e6:	4b66      	ldr	r3, [pc, #408]	; (8a580 <Coarse_DutyCorrection+0x788>)
   8a3e8:	781b      	ldrb	r3, [r3, #0]
   8a3ea:	2b00      	cmp	r3, #0
   8a3ec:	d133      	bne.n	8a456 <Coarse_DutyCorrection+0x65e>
   8a3ee:	4b65      	ldr	r3, [pc, #404]	; (8a584 <Coarse_DutyCorrection+0x78c>)
   8a3f0:	681a      	ldr	r2, [r3, #0]
   8a3f2:	4b72      	ldr	r3, [pc, #456]	; (8a5bc <Coarse_DutyCorrection+0x7c4>)
   8a3f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a3f8:	4610      	mov	r0, r2
   8a3fa:	4798      	blx	r3
   8a3fc:	4603      	mov	r3, r0
   8a3fe:	4618      	mov	r0, r3
   8a400:	4b62      	ldr	r3, [pc, #392]	; (8a58c <Coarse_DutyCorrection+0x794>)
   8a402:	681a      	ldr	r2, [r3, #0]
   8a404:	4b64      	ldr	r3, [pc, #400]	; (8a598 <Coarse_DutyCorrection+0x7a0>)
   8a406:	4611      	mov	r1, r2
   8a408:	4798      	blx	r3
   8a40a:	4603      	mov	r3, r0
   8a40c:	2b00      	cmp	r3, #0
   8a40e:	d022      	beq.n	8a456 <Coarse_DutyCorrection+0x65e>
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
   8a410:	4b67      	ldr	r3, [pc, #412]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a412:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a416:	b29a      	uxth	r2, r3
   8a418:	4b64      	ldr	r3, [pc, #400]	; (8a5ac <Coarse_DutyCorrection+0x7b4>)
   8a41a:	781b      	ldrb	r3, [r3, #0]
   8a41c:	b29b      	uxth	r3, r3
   8a41e:	1ad3      	subs	r3, r2, r3
   8a420:	b29b      	uxth	r3, r3
   8a422:	b21a      	sxth	r2, r3
   8a424:	4b62      	ldr	r3, [pc, #392]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a426:	801a      	strh	r2, [r3, #0]
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a428:	4b61      	ldr	r3, [pc, #388]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a42a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a42e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a432:	f300 814c 	bgt.w	8a6ce <Coarse_DutyCorrection+0x8d6>
   8a436:	4b5a      	ldr	r3, [pc, #360]	; (8a5a0 <Coarse_DutyCorrection+0x7a8>)
   8a438:	681a      	ldr	r2, [r3, #0]
   8a43a:	4b5a      	ldr	r3, [pc, #360]	; (8a5a4 <Coarse_DutyCorrection+0x7ac>)
   8a43c:	6819      	ldr	r1, [r3, #0]
   8a43e:	4b5a      	ldr	r3, [pc, #360]	; (8a5a8 <Coarse_DutyCorrection+0x7b0>)
   8a440:	4610      	mov	r0, r2
   8a442:	4798      	blx	r3
   8a444:	4603      	mov	r3, r0
   8a446:	2b00      	cmp	r3, #0
   8a448:	d100      	bne.n	8a44c <Coarse_DutyCorrection+0x654>
   8a44a:	e140      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a44c:	4b58      	ldr	r3, [pc, #352]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a44e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a452:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2))  ) )// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a454:	e13b      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2 +1)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a456:	4b4a      	ldr	r3, [pc, #296]	; (8a580 <Coarse_DutyCorrection+0x788>)
   8a458:	781b      	ldrb	r3, [r3, #0]
   8a45a:	2b00      	cmp	r3, #0
   8a45c:	d14c      	bne.n	8a4f8 <Coarse_DutyCorrection+0x700>
   8a45e:	4b49      	ldr	r3, [pc, #292]	; (8a584 <Coarse_DutyCorrection+0x78c>)
   8a460:	681a      	ldr	r2, [r3, #0]
   8a462:	4b56      	ldr	r3, [pc, #344]	; (8a5bc <Coarse_DutyCorrection+0x7c4>)
   8a464:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a468:	4610      	mov	r0, r2
   8a46a:	4798      	blx	r3
   8a46c:	4603      	mov	r3, r0
   8a46e:	4618      	mov	r0, r3
   8a470:	4b46      	ldr	r3, [pc, #280]	; (8a58c <Coarse_DutyCorrection+0x794>)
   8a472:	681a      	ldr	r2, [r3, #0]
   8a474:	4b48      	ldr	r3, [pc, #288]	; (8a598 <Coarse_DutyCorrection+0x7a0>)
   8a476:	4611      	mov	r1, r2
   8a478:	4798      	blx	r3
   8a47a:	4603      	mov	r3, r0
   8a47c:	2b00      	cmp	r3, #0
   8a47e:	d03b      	beq.n	8a4f8 <Coarse_DutyCorrection+0x700>
   8a480:	4b47      	ldr	r3, [pc, #284]	; (8a5a0 <Coarse_DutyCorrection+0x7a8>)
   8a482:	681a      	ldr	r2, [r3, #0]
   8a484:	4b4e      	ldr	r3, [pc, #312]	; (8a5c0 <Coarse_DutyCorrection+0x7c8>)
   8a486:	4610      	mov	r0, r2
   8a488:	4798      	blx	r3
   8a48a:	4605      	mov	r5, r0
   8a48c:	460e      	mov	r6, r1
   8a48e:	4b45      	ldr	r3, [pc, #276]	; (8a5a4 <Coarse_DutyCorrection+0x7ac>)
   8a490:	681a      	ldr	r2, [r3, #0]
   8a492:	4b4b      	ldr	r3, [pc, #300]	; (8a5c0 <Coarse_DutyCorrection+0x7c8>)
   8a494:	4610      	mov	r0, r2
   8a496:	4798      	blx	r3
   8a498:	4c4a      	ldr	r4, [pc, #296]	; (8a5c4 <Coarse_DutyCorrection+0x7cc>)
   8a49a:	a337      	add	r3, pc, #220	; (adr r3, 8a578 <Coarse_DutyCorrection+0x780>)
   8a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a4a0:	47a0      	blx	r4
   8a4a2:	4603      	mov	r3, r0
   8a4a4:	460c      	mov	r4, r1
   8a4a6:	461a      	mov	r2, r3
   8a4a8:	4623      	mov	r3, r4
   8a4aa:	4c47      	ldr	r4, [pc, #284]	; (8a5c8 <Coarse_DutyCorrection+0x7d0>)
   8a4ac:	4628      	mov	r0, r5
   8a4ae:	4631      	mov	r1, r6
   8a4b0:	47a0      	blx	r4
   8a4b2:	4603      	mov	r3, r0
   8a4b4:	2b00      	cmp	r3, #0
   8a4b6:	d01f      	beq.n	8a4f8 <Coarse_DutyCorrection+0x700>
		{
			avg_duty = avg_duty - 10;
   8a4b8:	4b3d      	ldr	r3, [pc, #244]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a4ba:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a4be:	b29b      	uxth	r3, r3
   8a4c0:	3b0a      	subs	r3, #10
   8a4c2:	b29b      	uxth	r3, r3
   8a4c4:	b21a      	sxth	r2, r3
   8a4c6:	4b3a      	ldr	r3, [pc, #232]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a4c8:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a4ca:	4b39      	ldr	r3, [pc, #228]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a4d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a4d4:	f300 80fb 	bgt.w	8a6ce <Coarse_DutyCorrection+0x8d6>
   8a4d8:	4b31      	ldr	r3, [pc, #196]	; (8a5a0 <Coarse_DutyCorrection+0x7a8>)
   8a4da:	681a      	ldr	r2, [r3, #0]
   8a4dc:	4b31      	ldr	r3, [pc, #196]	; (8a5a4 <Coarse_DutyCorrection+0x7ac>)
   8a4de:	6819      	ldr	r1, [r3, #0]
   8a4e0:	4b31      	ldr	r3, [pc, #196]	; (8a5a8 <Coarse_DutyCorrection+0x7b0>)
   8a4e2:	4610      	mov	r0, r2
   8a4e4:	4798      	blx	r3
   8a4e6:	4603      	mov	r3, r0
   8a4e8:	2b00      	cmp	r3, #0
   8a4ea:	d100      	bne.n	8a4ee <Coarse_DutyCorrection+0x6f6>
   8a4ec:	e0ef      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a4ee:	4b30      	ldr	r3, [pc, #192]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a4f0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a4f4:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2 +1)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a4f6:	e0ea      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
   8a4f8:	4b21      	ldr	r3, [pc, #132]	; (8a580 <Coarse_DutyCorrection+0x788>)
   8a4fa:	781b      	ldrb	r3, [r3, #0]
   8a4fc:	2b00      	cmp	r3, #0
   8a4fe:	d167      	bne.n	8a5d0 <Coarse_DutyCorrection+0x7d8>
   8a500:	4b20      	ldr	r3, [pc, #128]	; (8a584 <Coarse_DutyCorrection+0x78c>)
   8a502:	681a      	ldr	r2, [r3, #0]
   8a504:	4b20      	ldr	r3, [pc, #128]	; (8a588 <Coarse_DutyCorrection+0x790>)
   8a506:	4931      	ldr	r1, [pc, #196]	; (8a5cc <Coarse_DutyCorrection+0x7d4>)
   8a508:	4610      	mov	r0, r2
   8a50a:	4798      	blx	r3
   8a50c:	4603      	mov	r3, r0
   8a50e:	4618      	mov	r0, r3
   8a510:	4b1e      	ldr	r3, [pc, #120]	; (8a58c <Coarse_DutyCorrection+0x794>)
   8a512:	681a      	ldr	r2, [r3, #0]
   8a514:	4b20      	ldr	r3, [pc, #128]	; (8a598 <Coarse_DutyCorrection+0x7a0>)
   8a516:	4611      	mov	r1, r2
   8a518:	4798      	blx	r3
   8a51a:	4603      	mov	r3, r0
   8a51c:	2b00      	cmp	r3, #0
   8a51e:	d057      	beq.n	8a5d0 <Coarse_DutyCorrection+0x7d8>
   8a520:	4b1a      	ldr	r3, [pc, #104]	; (8a58c <Coarse_DutyCorrection+0x794>)
   8a522:	681a      	ldr	r2, [r3, #0]
   8a524:	4b17      	ldr	r3, [pc, #92]	; (8a584 <Coarse_DutyCorrection+0x78c>)
   8a526:	6819      	ldr	r1, [r3, #0]
   8a528:	4b1b      	ldr	r3, [pc, #108]	; (8a598 <Coarse_DutyCorrection+0x7a0>)
   8a52a:	4610      	mov	r0, r2
   8a52c:	4798      	blx	r3
   8a52e:	4603      	mov	r3, r0
   8a530:	2b00      	cmp	r3, #0
   8a532:	d04d      	beq.n	8a5d0 <Coarse_DutyCorrection+0x7d8>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a534:	4b17      	ldr	r3, [pc, #92]	; (8a594 <Coarse_DutyCorrection+0x79c>)
   8a536:	681a      	ldr	r2, [r3, #0]
   8a538:	4b17      	ldr	r3, [pc, #92]	; (8a598 <Coarse_DutyCorrection+0x7a0>)
   8a53a:	4918      	ldr	r1, [pc, #96]	; (8a59c <Coarse_DutyCorrection+0x7a4>)
   8a53c:	4610      	mov	r0, r2
   8a53e:	4798      	blx	r3
   8a540:	4603      	mov	r3, r0
   8a542:	2b00      	cmp	r3, #0
   8a544:	f000 80c3 	beq.w	8a6ce <Coarse_DutyCorrection+0x8d6>
   8a548:	4b15      	ldr	r3, [pc, #84]	; (8a5a0 <Coarse_DutyCorrection+0x7a8>)
   8a54a:	681a      	ldr	r2, [r3, #0]
   8a54c:	4b15      	ldr	r3, [pc, #84]	; (8a5a4 <Coarse_DutyCorrection+0x7ac>)
   8a54e:	6819      	ldr	r1, [r3, #0]
   8a550:	4b15      	ldr	r3, [pc, #84]	; (8a5a8 <Coarse_DutyCorrection+0x7b0>)
   8a552:	4610      	mov	r0, r2
   8a554:	4798      	blx	r3
   8a556:	4603      	mov	r3, r0
   8a558:	2b00      	cmp	r3, #0
   8a55a:	d100      	bne.n	8a55e <Coarse_DutyCorrection+0x766>
   8a55c:	e0b7      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a55e:	4b13      	ldr	r3, [pc, #76]	; (8a5ac <Coarse_DutyCorrection+0x7b4>)
   8a560:	781b      	ldrb	r3, [r3, #0]
   8a562:	b29a      	uxth	r2, r3
   8a564:	4b12      	ldr	r3, [pc, #72]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a566:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a56a:	b29b      	uxth	r3, r3
   8a56c:	4413      	add	r3, r2
   8a56e:	b29b      	uxth	r3, r3
   8a570:	b21a      	sxth	r2, r3
   8a572:	4b0f      	ldr	r3, [pc, #60]	; (8a5b0 <Coarse_DutyCorrection+0x7b8>)
   8a574:	801a      	strh	r2, [r3, #0]
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a576:	e0aa      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
   8a578:	9999999a 	.word	0x9999999a
   8a57c:	3fb99999 	.word	0x3fb99999
   8a580:	200720da 	.word	0x200720da
   8a584:	200720dc 	.word	0x200720dc
   8a588:	000a7d95 	.word	0x000a7d95
   8a58c:	20071898 	.word	0x20071898
   8a590:	000a830d 	.word	0x000a830d
   8a594:	20071894 	.word	0x20071894
   8a598:	000a82f9 	.word	0x000a82f9
   8a59c:	42100000 	.word	0x42100000
   8a5a0:	2007189c 	.word	0x2007189c
   8a5a4:	200720c8 	.word	0x200720c8
   8a5a8:	000a82e5 	.word	0x000a82e5
   8a5ac:	200718bc 	.word	0x200718bc
   8a5b0:	20071886 	.word	0x20071886
   8a5b4:	0009adcd 	.word	0x0009adcd
   8a5b8:	200704d8 	.word	0x200704d8
   8a5bc:	000a7d99 	.word	0x000a7d99
   8a5c0:	000a7681 	.word	0x000a7681
   8a5c4:	000a73c5 	.word	0x000a73c5
   8a5c8:	000a7c49 	.word	0x000a7c49
   8a5cc:	40400000 	.word	0x40400000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )        // last was 39
   8a5d0:	4b45      	ldr	r3, [pc, #276]	; (8a6e8 <Coarse_DutyCorrection+0x8f0>)
   8a5d2:	781b      	ldrb	r3, [r3, #0]
   8a5d4:	2b01      	cmp	r3, #1
   8a5d6:	d136      	bne.n	8a646 <Coarse_DutyCorrection+0x84e>
   8a5d8:	4b44      	ldr	r3, [pc, #272]	; (8a6ec <Coarse_DutyCorrection+0x8f4>)
   8a5da:	681a      	ldr	r2, [r3, #0]
   8a5dc:	4b44      	ldr	r3, [pc, #272]	; (8a6f0 <Coarse_DutyCorrection+0x8f8>)
   8a5de:	6819      	ldr	r1, [r3, #0]
   8a5e0:	4b44      	ldr	r3, [pc, #272]	; (8a6f4 <Coarse_DutyCorrection+0x8fc>)
   8a5e2:	4610      	mov	r0, r2
   8a5e4:	4798      	blx	r3
   8a5e6:	4603      	mov	r3, r0
   8a5e8:	2b00      	cmp	r3, #0
   8a5ea:	d02c      	beq.n	8a646 <Coarse_DutyCorrection+0x84e>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8a5ec:	4b42      	ldr	r3, [pc, #264]	; (8a6f8 <Coarse_DutyCorrection+0x900>)
   8a5ee:	681a      	ldr	r2, [r3, #0]
   8a5f0:	4b40      	ldr	r3, [pc, #256]	; (8a6f4 <Coarse_DutyCorrection+0x8fc>)
   8a5f2:	4942      	ldr	r1, [pc, #264]	; (8a6fc <Coarse_DutyCorrection+0x904>)
   8a5f4:	4610      	mov	r0, r2
   8a5f6:	4798      	blx	r3
   8a5f8:	4603      	mov	r3, r0
   8a5fa:	2b00      	cmp	r3, #0
   8a5fc:	d015      	beq.n	8a62a <Coarse_DutyCorrection+0x832>
   8a5fe:	4b40      	ldr	r3, [pc, #256]	; (8a700 <Coarse_DutyCorrection+0x908>)
   8a600:	681a      	ldr	r2, [r3, #0]
   8a602:	4b40      	ldr	r3, [pc, #256]	; (8a704 <Coarse_DutyCorrection+0x90c>)
   8a604:	6819      	ldr	r1, [r3, #0]
   8a606:	4b40      	ldr	r3, [pc, #256]	; (8a708 <Coarse_DutyCorrection+0x910>)
   8a608:	4610      	mov	r0, r2
   8a60a:	4798      	blx	r3
   8a60c:	4603      	mov	r3, r0
   8a60e:	2b00      	cmp	r3, #0
   8a610:	d00b      	beq.n	8a62a <Coarse_DutyCorrection+0x832>
			{
				avg_duty = avg_duty + duty_count;            
   8a612:	4b3e      	ldr	r3, [pc, #248]	; (8a70c <Coarse_DutyCorrection+0x914>)
   8a614:	781b      	ldrb	r3, [r3, #0]
   8a616:	b29a      	uxth	r2, r3
   8a618:	4b3d      	ldr	r3, [pc, #244]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a61a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a61e:	b29b      	uxth	r3, r3
   8a620:	4413      	add	r3, r2
   8a622:	b29b      	uxth	r3, r3
   8a624:	b21a      	sxth	r2, r3
   8a626:	4b3a      	ldr	r3, [pc, #232]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a628:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8a62a:	4b39      	ldr	r3, [pc, #228]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a62c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a630:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8a634:	4293      	cmp	r3, r2
   8a636:	dd4a      	ble.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				avg_duty = 2500;
   8a638:	4b35      	ldr	r3, [pc, #212]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a63a:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8a63e:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a640:	4b34      	ldr	r3, [pc, #208]	; (8a714 <Coarse_DutyCorrection+0x91c>)
   8a642:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8a644:	e043      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL){
   8a646:	4b28      	ldr	r3, [pc, #160]	; (8a6e8 <Coarse_DutyCorrection+0x8f0>)
   8a648:	781b      	ldrb	r3, [r3, #0]
   8a64a:	2b02      	cmp	r3, #2
   8a64c:	d13f      	bne.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			if (Check_4_Neutralstability())
   8a64e:	4b32      	ldr	r3, [pc, #200]	; (8a718 <Coarse_DutyCorrection+0x920>)
   8a650:	4798      	blx	r3
   8a652:	4603      	mov	r3, r0
   8a654:	2b00      	cmp	r3, #0
   8a656:	d03a      	beq.n	8a6ce <Coarse_DutyCorrection+0x8d6>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8a658:	4b29      	ldr	r3, [pc, #164]	; (8a700 <Coarse_DutyCorrection+0x908>)
   8a65a:	681a      	ldr	r2, [r3, #0]
   8a65c:	4b29      	ldr	r3, [pc, #164]	; (8a704 <Coarse_DutyCorrection+0x90c>)
   8a65e:	6819      	ldr	r1, [r3, #0]
   8a660:	4b2e      	ldr	r3, [pc, #184]	; (8a71c <Coarse_DutyCorrection+0x924>)
   8a662:	4610      	mov	r0, r2
   8a664:	4798      	blx	r3
   8a666:	4603      	mov	r3, r0
   8a668:	461a      	mov	r2, r3
   8a66a:	4b2d      	ldr	r3, [pc, #180]	; (8a720 <Coarse_DutyCorrection+0x928>)
   8a66c:	4610      	mov	r0, r2
   8a66e:	4798      	blx	r3
   8a670:	4c2c      	ldr	r4, [pc, #176]	; (8a724 <Coarse_DutyCorrection+0x92c>)
   8a672:	a31b      	add	r3, pc, #108	; (adr r3, 8a6e0 <Coarse_DutyCorrection+0x8e8>)
   8a674:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a678:	47a0      	blx	r4
   8a67a:	4603      	mov	r3, r0
   8a67c:	2b00      	cmp	r3, #0
   8a67e:	d009      	beq.n	8a694 <Coarse_DutyCorrection+0x89c>
				{
					avg_duty = avg_duty-6;
   8a680:	4b23      	ldr	r3, [pc, #140]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a682:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a686:	b29b      	uxth	r3, r3
   8a688:	3b06      	subs	r3, #6
   8a68a:	b29b      	uxth	r3, r3
   8a68c:	b21a      	sxth	r2, r3
   8a68e:	4b20      	ldr	r3, [pc, #128]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a690:	801a      	strh	r2, [r3, #0]
   8a692:	e01c      	b.n	8a6ce <Coarse_DutyCorrection+0x8d6>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8a694:	4b1b      	ldr	r3, [pc, #108]	; (8a704 <Coarse_DutyCorrection+0x90c>)
   8a696:	681a      	ldr	r2, [r3, #0]
   8a698:	4b19      	ldr	r3, [pc, #100]	; (8a700 <Coarse_DutyCorrection+0x908>)
   8a69a:	6819      	ldr	r1, [r3, #0]
   8a69c:	4b1f      	ldr	r3, [pc, #124]	; (8a71c <Coarse_DutyCorrection+0x924>)
   8a69e:	4610      	mov	r0, r2
   8a6a0:	4798      	blx	r3
   8a6a2:	4603      	mov	r3, r0
   8a6a4:	461a      	mov	r2, r3
   8a6a6:	4b1e      	ldr	r3, [pc, #120]	; (8a720 <Coarse_DutyCorrection+0x928>)
   8a6a8:	4610      	mov	r0, r2
   8a6aa:	4798      	blx	r3
   8a6ac:	4c1d      	ldr	r4, [pc, #116]	; (8a724 <Coarse_DutyCorrection+0x92c>)
   8a6ae:	a30c      	add	r3, pc, #48	; (adr r3, 8a6e0 <Coarse_DutyCorrection+0x8e8>)
   8a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a6b4:	47a0      	blx	r4
   8a6b6:	4603      	mov	r3, r0
   8a6b8:	2b00      	cmp	r3, #0
   8a6ba:	d008      	beq.n	8a6ce <Coarse_DutyCorrection+0x8d6>
				{
					avg_duty = avg_duty+6;
   8a6bc:	4b14      	ldr	r3, [pc, #80]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a6be:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a6c2:	b29b      	uxth	r3, r3
   8a6c4:	3306      	adds	r3, #6
   8a6c6:	b29b      	uxth	r3, r3
   8a6c8:	b21a      	sxth	r2, r3
   8a6ca:	4b11      	ldr	r3, [pc, #68]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a6cc:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	
		avg_duty = avg_duty;
   8a6ce:	4b10      	ldr	r3, [pc, #64]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a6d0:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a6d4:	4b0e      	ldr	r3, [pc, #56]	; (8a710 <Coarse_DutyCorrection+0x918>)
   8a6d6:	801a      	strh	r2, [r3, #0]
		
	}
}
   8a6d8:	e7ff      	b.n	8a6da <Coarse_DutyCorrection+0x8e2>
   8a6da:	bf00      	nop
   8a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a6de:	bf00      	nop
   8a6e0:	9999999a 	.word	0x9999999a
   8a6e4:	3fc99999 	.word	0x3fc99999
   8a6e8:	200720da 	.word	0x200720da
   8a6ec:	20071898 	.word	0x20071898
   8a6f0:	200720dc 	.word	0x200720dc
   8a6f4:	000a82f9 	.word	0x000a82f9
   8a6f8:	20071894 	.word	0x20071894
   8a6fc:	42100000 	.word	0x42100000
   8a700:	2007189c 	.word	0x2007189c
   8a704:	200720c8 	.word	0x200720c8
   8a708:	000a82e5 	.word	0x000a82e5
   8a70c:	200718bc 	.word	0x200718bc
   8a710:	20071886 	.word	0x20071886
   8a714:	0009adcd 	.word	0x0009adcd
   8a718:	00089c21 	.word	0x00089c21
   8a71c:	000a7d95 	.word	0x000a7d95
   8a720:	000a7681 	.word	0x000a7681
   8a724:	000a7c49 	.word	0x000a7c49

0008a728 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a72a:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8a72c:	4b7e      	ldr	r3, [pc, #504]	; (8a928 <Fine_DutyCorrection+0x200>)
   8a72e:	681a      	ldr	r2, [r3, #0]
   8a730:	4b7e      	ldr	r3, [pc, #504]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a732:	4610      	mov	r0, r2
   8a734:	4798      	blx	r3
   8a736:	4c7e      	ldr	r4, [pc, #504]	; (8a930 <Fine_DutyCorrection+0x208>)
   8a738:	a377      	add	r3, pc, #476	; (adr r3, 8a918 <Fine_DutyCorrection+0x1f0>)
   8a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a73e:	47a0      	blx	r4
   8a740:	4603      	mov	r3, r0
   8a742:	2b00      	cmp	r3, #0
   8a744:	d002      	beq.n	8a74c <Fine_DutyCorrection+0x24>
	{
		duty_count = 42;												
   8a746:	4b7b      	ldr	r3, [pc, #492]	; (8a934 <Fine_DutyCorrection+0x20c>)
   8a748:	222a      	movs	r2, #42	; 0x2a
   8a74a:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8a74c:	4b76      	ldr	r3, [pc, #472]	; (8a928 <Fine_DutyCorrection+0x200>)
   8a74e:	681a      	ldr	r2, [r3, #0]
   8a750:	4b76      	ldr	r3, [pc, #472]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a752:	4610      	mov	r0, r2
   8a754:	4798      	blx	r3
   8a756:	4c76      	ldr	r4, [pc, #472]	; (8a930 <Fine_DutyCorrection+0x208>)
   8a758:	a371      	add	r3, pc, #452	; (adr r3, 8a920 <Fine_DutyCorrection+0x1f8>)
   8a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a75e:	47a0      	blx	r4
   8a760:	4603      	mov	r3, r0
   8a762:	2b00      	cmp	r3, #0
   8a764:	d00f      	beq.n	8a786 <Fine_DutyCorrection+0x5e>
   8a766:	4b70      	ldr	r3, [pc, #448]	; (8a928 <Fine_DutyCorrection+0x200>)
   8a768:	681a      	ldr	r2, [r3, #0]
   8a76a:	4b70      	ldr	r3, [pc, #448]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a76c:	4610      	mov	r0, r2
   8a76e:	4798      	blx	r3
   8a770:	4c71      	ldr	r4, [pc, #452]	; (8a938 <Fine_DutyCorrection+0x210>)
   8a772:	a369      	add	r3, pc, #420	; (adr r3, 8a918 <Fine_DutyCorrection+0x1f0>)
   8a774:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a778:	47a0      	blx	r4
   8a77a:	4603      	mov	r3, r0
   8a77c:	2b00      	cmp	r3, #0
   8a77e:	d002      	beq.n	8a786 <Fine_DutyCorrection+0x5e>
	{
		duty_count = 20;
   8a780:	4b6c      	ldr	r3, [pc, #432]	; (8a934 <Fine_DutyCorrection+0x20c>)
   8a782:	2214      	movs	r2, #20
   8a784:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   8a786:	4b68      	ldr	r3, [pc, #416]	; (8a928 <Fine_DutyCorrection+0x200>)
   8a788:	681a      	ldr	r2, [r3, #0]
   8a78a:	4b68      	ldr	r3, [pc, #416]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a78c:	4610      	mov	r0, r2
   8a78e:	4798      	blx	r3
   8a790:	4c6a      	ldr	r4, [pc, #424]	; (8a93c <Fine_DutyCorrection+0x214>)
   8a792:	a363      	add	r3, pc, #396	; (adr r3, 8a920 <Fine_DutyCorrection+0x1f8>)
   8a794:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a798:	47a0      	blx	r4
   8a79a:	4603      	mov	r3, r0
   8a79c:	2b00      	cmp	r3, #0
   8a79e:	d002      	beq.n	8a7a6 <Fine_DutyCorrection+0x7e>
	{
		duty_count = 4;
   8a7a0:	4b64      	ldr	r3, [pc, #400]	; (8a934 <Fine_DutyCorrection+0x20c>)
   8a7a2:	2204      	movs	r2, #4
   8a7a4:	701a      	strb	r2, [r3, #0]
	}
	
	if (SYSTEM_FLOW == 800)
   8a7a6:	4b66      	ldr	r3, [pc, #408]	; (8a940 <Fine_DutyCorrection+0x218>)
   8a7a8:	681b      	ldr	r3, [r3, #0]
   8a7aa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8a7ae:	f040 814a 	bne.w	8aa46 <Fine_DutyCorrection+0x31e>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8a7b2:	4b64      	ldr	r3, [pc, #400]	; (8a944 <Fine_DutyCorrection+0x21c>)
   8a7b4:	781b      	ldrb	r3, [r3, #0]
   8a7b6:	2b00      	cmp	r3, #0
   8a7b8:	d150      	bne.n	8a85c <Fine_DutyCorrection+0x134>
   8a7ba:	4b63      	ldr	r3, [pc, #396]	; (8a948 <Fine_DutyCorrection+0x220>)
   8a7bc:	681a      	ldr	r2, [r3, #0]
   8a7be:	4b5b      	ldr	r3, [pc, #364]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a7c0:	4610      	mov	r0, r2
   8a7c2:	4798      	blx	r3
   8a7c4:	4605      	mov	r5, r0
   8a7c6:	460e      	mov	r6, r1
   8a7c8:	4b60      	ldr	r3, [pc, #384]	; (8a94c <Fine_DutyCorrection+0x224>)
   8a7ca:	681a      	ldr	r2, [r3, #0]
   8a7cc:	4b57      	ldr	r3, [pc, #348]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a7ce:	4610      	mov	r0, r2
   8a7d0:	4798      	blx	r3
   8a7d2:	4c5f      	ldr	r4, [pc, #380]	; (8a950 <Fine_DutyCorrection+0x228>)
   8a7d4:	f04f 0200 	mov.w	r2, #0
   8a7d8:	4b5e      	ldr	r3, [pc, #376]	; (8a954 <Fine_DutyCorrection+0x22c>)
   8a7da:	47a0      	blx	r4
   8a7dc:	4603      	mov	r3, r0
   8a7de:	460c      	mov	r4, r1
   8a7e0:	461a      	mov	r2, r3
   8a7e2:	4623      	mov	r3, r4
   8a7e4:	4c55      	ldr	r4, [pc, #340]	; (8a93c <Fine_DutyCorrection+0x214>)
   8a7e6:	4628      	mov	r0, r5
   8a7e8:	4631      	mov	r1, r6
   8a7ea:	47a0      	blx	r4
   8a7ec:	4603      	mov	r3, r0
   8a7ee:	2b00      	cmp	r3, #0
   8a7f0:	d034      	beq.n	8a85c <Fine_DutyCorrection+0x134>
   8a7f2:	4b59      	ldr	r3, [pc, #356]	; (8a958 <Fine_DutyCorrection+0x230>)
   8a7f4:	681a      	ldr	r2, [r3, #0]
   8a7f6:	4b4d      	ldr	r3, [pc, #308]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a7f8:	4610      	mov	r0, r2
   8a7fa:	4798      	blx	r3
   8a7fc:	4605      	mov	r5, r0
   8a7fe:	460e      	mov	r6, r1
   8a800:	4b56      	ldr	r3, [pc, #344]	; (8a95c <Fine_DutyCorrection+0x234>)
   8a802:	681a      	ldr	r2, [r3, #0]
   8a804:	4b49      	ldr	r3, [pc, #292]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a806:	4610      	mov	r0, r2
   8a808:	4798      	blx	r3
   8a80a:	4c51      	ldr	r4, [pc, #324]	; (8a950 <Fine_DutyCorrection+0x228>)
   8a80c:	f04f 0200 	mov.w	r2, #0
   8a810:	4b50      	ldr	r3, [pc, #320]	; (8a954 <Fine_DutyCorrection+0x22c>)
   8a812:	47a0      	blx	r4
   8a814:	4603      	mov	r3, r0
   8a816:	460c      	mov	r4, r1
   8a818:	461a      	mov	r2, r3
   8a81a:	4623      	mov	r3, r4
   8a81c:	4c47      	ldr	r4, [pc, #284]	; (8a93c <Fine_DutyCorrection+0x214>)
   8a81e:	4628      	mov	r0, r5
   8a820:	4631      	mov	r1, r6
   8a822:	47a0      	blx	r4
   8a824:	4603      	mov	r3, r0
   8a826:	2b00      	cmp	r3, #0
   8a828:	d018      	beq.n	8a85c <Fine_DutyCorrection+0x134>
		{
			avg_duty = avg_duty - duty_count;
   8a82a:	4b4d      	ldr	r3, [pc, #308]	; (8a960 <Fine_DutyCorrection+0x238>)
   8a82c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a830:	b29a      	uxth	r2, r3
   8a832:	4b40      	ldr	r3, [pc, #256]	; (8a934 <Fine_DutyCorrection+0x20c>)
   8a834:	781b      	ldrb	r3, [r3, #0]
   8a836:	b29b      	uxth	r3, r3
   8a838:	1ad3      	subs	r3, r2, r3
   8a83a:	b29b      	uxth	r3, r3
   8a83c:	b21a      	sxth	r2, r3
   8a83e:	4b48      	ldr	r3, [pc, #288]	; (8a960 <Fine_DutyCorrection+0x238>)
   8a840:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a842:	4b47      	ldr	r3, [pc, #284]	; (8a960 <Fine_DutyCorrection+0x238>)
   8a844:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a84c:	f300 8411 	bgt.w	8b072 <Fine_DutyCorrection+0x94a>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8a850:	4b43      	ldr	r3, [pc, #268]	; (8a960 <Fine_DutyCorrection+0x238>)
   8a852:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a856:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a858:	f000 bc0b 	b.w	8b072 <Fine_DutyCorrection+0x94a>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+2.5))) && (Tmp3Val <= (Prescribed_T3+0.5)) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   8a85c:	4b39      	ldr	r3, [pc, #228]	; (8a944 <Fine_DutyCorrection+0x21c>)
   8a85e:	781b      	ldrb	r3, [r3, #0]
   8a860:	2b00      	cmp	r3, #0
   8a862:	f040 8085 	bne.w	8a970 <Fine_DutyCorrection+0x248>
   8a866:	4b39      	ldr	r3, [pc, #228]	; (8a94c <Fine_DutyCorrection+0x224>)
   8a868:	681a      	ldr	r2, [r3, #0]
   8a86a:	4b3e      	ldr	r3, [pc, #248]	; (8a964 <Fine_DutyCorrection+0x23c>)
   8a86c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a870:	4610      	mov	r0, r2
   8a872:	4798      	blx	r3
   8a874:	4603      	mov	r3, r0
   8a876:	4618      	mov	r0, r3
   8a878:	4b33      	ldr	r3, [pc, #204]	; (8a948 <Fine_DutyCorrection+0x220>)
   8a87a:	681a      	ldr	r2, [r3, #0]
   8a87c:	4b3a      	ldr	r3, [pc, #232]	; (8a968 <Fine_DutyCorrection+0x240>)
   8a87e:	4611      	mov	r1, r2
   8a880:	4798      	blx	r3
   8a882:	4603      	mov	r3, r0
   8a884:	2b00      	cmp	r3, #0
   8a886:	d073      	beq.n	8a970 <Fine_DutyCorrection+0x248>
   8a888:	4b2f      	ldr	r3, [pc, #188]	; (8a948 <Fine_DutyCorrection+0x220>)
   8a88a:	681a      	ldr	r2, [r3, #0]
   8a88c:	4b27      	ldr	r3, [pc, #156]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a88e:	4610      	mov	r0, r2
   8a890:	4798      	blx	r3
   8a892:	4605      	mov	r5, r0
   8a894:	460e      	mov	r6, r1
   8a896:	4b2d      	ldr	r3, [pc, #180]	; (8a94c <Fine_DutyCorrection+0x224>)
   8a898:	681a      	ldr	r2, [r3, #0]
   8a89a:	4b24      	ldr	r3, [pc, #144]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a89c:	4610      	mov	r0, r2
   8a89e:	4798      	blx	r3
   8a8a0:	4c2b      	ldr	r4, [pc, #172]	; (8a950 <Fine_DutyCorrection+0x228>)
   8a8a2:	f04f 0200 	mov.w	r2, #0
   8a8a6:	4b31      	ldr	r3, [pc, #196]	; (8a96c <Fine_DutyCorrection+0x244>)
   8a8a8:	47a0      	blx	r4
   8a8aa:	4603      	mov	r3, r0
   8a8ac:	460c      	mov	r4, r1
   8a8ae:	461a      	mov	r2, r3
   8a8b0:	4623      	mov	r3, r4
   8a8b2:	4c1f      	ldr	r4, [pc, #124]	; (8a930 <Fine_DutyCorrection+0x208>)
   8a8b4:	4628      	mov	r0, r5
   8a8b6:	4631      	mov	r1, r6
   8a8b8:	47a0      	blx	r4
   8a8ba:	4603      	mov	r3, r0
   8a8bc:	2b00      	cmp	r3, #0
   8a8be:	d057      	beq.n	8a970 <Fine_DutyCorrection+0x248>
   8a8c0:	4b25      	ldr	r3, [pc, #148]	; (8a958 <Fine_DutyCorrection+0x230>)
   8a8c2:	681a      	ldr	r2, [r3, #0]
   8a8c4:	4b19      	ldr	r3, [pc, #100]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a8c6:	4610      	mov	r0, r2
   8a8c8:	4798      	blx	r3
   8a8ca:	4605      	mov	r5, r0
   8a8cc:	460e      	mov	r6, r1
   8a8ce:	4b23      	ldr	r3, [pc, #140]	; (8a95c <Fine_DutyCorrection+0x234>)
   8a8d0:	681a      	ldr	r2, [r3, #0]
   8a8d2:	4b16      	ldr	r3, [pc, #88]	; (8a92c <Fine_DutyCorrection+0x204>)
   8a8d4:	4610      	mov	r0, r2
   8a8d6:	4798      	blx	r3
   8a8d8:	4c1d      	ldr	r4, [pc, #116]	; (8a950 <Fine_DutyCorrection+0x228>)
   8a8da:	f04f 0200 	mov.w	r2, #0
   8a8de:	4b1d      	ldr	r3, [pc, #116]	; (8a954 <Fine_DutyCorrection+0x22c>)
   8a8e0:	47a0      	blx	r4
   8a8e2:	4603      	mov	r3, r0
   8a8e4:	460c      	mov	r4, r1
   8a8e6:	461a      	mov	r2, r3
   8a8e8:	4623      	mov	r3, r4
   8a8ea:	4c11      	ldr	r4, [pc, #68]	; (8a930 <Fine_DutyCorrection+0x208>)
   8a8ec:	4628      	mov	r0, r5
   8a8ee:	4631      	mov	r1, r6
   8a8f0:	47a0      	blx	r4
   8a8f2:	4603      	mov	r3, r0
   8a8f4:	2b00      	cmp	r3, #0
   8a8f6:	d03b      	beq.n	8a970 <Fine_DutyCorrection+0x248>
		{																						// earlier value 38 chged on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a8f8:	4b0e      	ldr	r3, [pc, #56]	; (8a934 <Fine_DutyCorrection+0x20c>)
   8a8fa:	781b      	ldrb	r3, [r3, #0]
   8a8fc:	b29a      	uxth	r2, r3
   8a8fe:	4b18      	ldr	r3, [pc, #96]	; (8a960 <Fine_DutyCorrection+0x238>)
   8a900:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a904:	b29b      	uxth	r3, r3
   8a906:	4413      	add	r3, r2
   8a908:	b29b      	uxth	r3, r3
   8a90a:	b21a      	sxth	r2, r3
   8a90c:	4b14      	ldr	r3, [pc, #80]	; (8a960 <Fine_DutyCorrection+0x238>)
   8a90e:	801a      	strh	r2, [r3, #0]
   8a910:	e3af      	b.n	8b072 <Fine_DutyCorrection+0x94a>
   8a912:	bf00      	nop
   8a914:	f3af 8000 	nop.w
   8a918:	eb851eb8 	.word	0xeb851eb8
   8a91c:	3f9eb851 	.word	0x3f9eb851
   8a920:	33333333 	.word	0x33333333
   8a924:	3fd33333 	.word	0x3fd33333
   8a928:	200718b8 	.word	0x200718b8
   8a92c:	000a7681 	.word	0x000a7681
   8a930:	000a7c21 	.word	0x000a7c21
   8a934:	200718bc 	.word	0x200718bc
   8a938:	000a7c49 	.word	0x000a7c49
   8a93c:	000a7c35 	.word	0x000a7c35
   8a940:	200704d8 	.word	0x200704d8
   8a944:	200720da 	.word	0x200720da
   8a948:	20071898 	.word	0x20071898
   8a94c:	200720dc 	.word	0x200720dc
   8a950:	000a73c5 	.word	0x000a73c5
   8a954:	3fe00000 	.word	0x3fe00000
   8a958:	2007189c 	.word	0x2007189c
   8a95c:	200720c8 	.word	0x200720c8
   8a960:	20071886 	.word	0x20071886
   8a964:	000a7d95 	.word	0x000a7d95
   8a968:	000a82f9 	.word	0x000a82f9
   8a96c:	40040000 	.word	0x40040000
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
   8a970:	4b93      	ldr	r3, [pc, #588]	; (8abc0 <Fine_DutyCorrection+0x498>)
   8a972:	781b      	ldrb	r3, [r3, #0]
   8a974:	2b01      	cmp	r3, #1
   8a976:	d15b      	bne.n	8aa30 <Fine_DutyCorrection+0x308>
   8a978:	4b92      	ldr	r3, [pc, #584]	; (8abc4 <Fine_DutyCorrection+0x49c>)
   8a97a:	681a      	ldr	r2, [r3, #0]
   8a97c:	4b92      	ldr	r3, [pc, #584]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8a97e:	4610      	mov	r0, r2
   8a980:	4798      	blx	r3
   8a982:	4605      	mov	r5, r0
   8a984:	460e      	mov	r6, r1
   8a986:	4b91      	ldr	r3, [pc, #580]	; (8abcc <Fine_DutyCorrection+0x4a4>)
   8a988:	681a      	ldr	r2, [r3, #0]
   8a98a:	4b8f      	ldr	r3, [pc, #572]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8a98c:	4610      	mov	r0, r2
   8a98e:	4798      	blx	r3
   8a990:	4c8f      	ldr	r4, [pc, #572]	; (8abd0 <Fine_DutyCorrection+0x4a8>)
   8a992:	f04f 0200 	mov.w	r2, #0
   8a996:	4b8f      	ldr	r3, [pc, #572]	; (8abd4 <Fine_DutyCorrection+0x4ac>)
   8a998:	47a0      	blx	r4
   8a99a:	4603      	mov	r3, r0
   8a99c:	460c      	mov	r4, r1
   8a99e:	461a      	mov	r2, r3
   8a9a0:	4623      	mov	r3, r4
   8a9a2:	4c8d      	ldr	r4, [pc, #564]	; (8abd8 <Fine_DutyCorrection+0x4b0>)
   8a9a4:	4628      	mov	r0, r5
   8a9a6:	4631      	mov	r1, r6
   8a9a8:	47a0      	blx	r4
   8a9aa:	4603      	mov	r3, r0
   8a9ac:	2b00      	cmp	r3, #0
   8a9ae:	d03f      	beq.n	8aa30 <Fine_DutyCorrection+0x308>
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
   8a9b0:	4b8a      	ldr	r3, [pc, #552]	; (8abdc <Fine_DutyCorrection+0x4b4>)
   8a9b2:	681a      	ldr	r2, [r3, #0]
   8a9b4:	4b8a      	ldr	r3, [pc, #552]	; (8abe0 <Fine_DutyCorrection+0x4b8>)
   8a9b6:	498b      	ldr	r1, [pc, #556]	; (8abe4 <Fine_DutyCorrection+0x4bc>)
   8a9b8:	4610      	mov	r0, r2
   8a9ba:	4798      	blx	r3
   8a9bc:	4603      	mov	r3, r0
   8a9be:	2b00      	cmp	r3, #0
   8a9c0:	d027      	beq.n	8aa12 <Fine_DutyCorrection+0x2ea>
   8a9c2:	4b89      	ldr	r3, [pc, #548]	; (8abe8 <Fine_DutyCorrection+0x4c0>)
   8a9c4:	681a      	ldr	r2, [r3, #0]
   8a9c6:	4b80      	ldr	r3, [pc, #512]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8a9c8:	4610      	mov	r0, r2
   8a9ca:	4798      	blx	r3
   8a9cc:	4605      	mov	r5, r0
   8a9ce:	460e      	mov	r6, r1
   8a9d0:	4b86      	ldr	r3, [pc, #536]	; (8abec <Fine_DutyCorrection+0x4c4>)
   8a9d2:	681a      	ldr	r2, [r3, #0]
   8a9d4:	4b7c      	ldr	r3, [pc, #496]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8a9d6:	4610      	mov	r0, r2
   8a9d8:	4798      	blx	r3
   8a9da:	4c7d      	ldr	r4, [pc, #500]	; (8abd0 <Fine_DutyCorrection+0x4a8>)
   8a9dc:	a374      	add	r3, pc, #464	; (adr r3, 8abb0 <Fine_DutyCorrection+0x488>)
   8a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a9e2:	47a0      	blx	r4
   8a9e4:	4603      	mov	r3, r0
   8a9e6:	460c      	mov	r4, r1
   8a9e8:	461a      	mov	r2, r3
   8a9ea:	4623      	mov	r3, r4
   8a9ec:	4c80      	ldr	r4, [pc, #512]	; (8abf0 <Fine_DutyCorrection+0x4c8>)
   8a9ee:	4628      	mov	r0, r5
   8a9f0:	4631      	mov	r1, r6
   8a9f2:	47a0      	blx	r4
   8a9f4:	4603      	mov	r3, r0
   8a9f6:	2b00      	cmp	r3, #0
   8a9f8:	d00b      	beq.n	8aa12 <Fine_DutyCorrection+0x2ea>
			  avg_duty = avg_duty + duty_count;
   8a9fa:	4b7e      	ldr	r3, [pc, #504]	; (8abf4 <Fine_DutyCorrection+0x4cc>)
   8a9fc:	781b      	ldrb	r3, [r3, #0]
   8a9fe:	b29a      	uxth	r2, r3
   8aa00:	4b7d      	ldr	r3, [pc, #500]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aa02:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aa06:	b29b      	uxth	r3, r3
   8aa08:	4413      	add	r3, r2
   8aa0a:	b29b      	uxth	r3, r3
   8aa0c:	b21a      	sxth	r2, r3
   8aa0e:	4b7a      	ldr	r3, [pc, #488]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aa10:	801a      	strh	r2, [r3, #0]
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8aa12:	4b79      	ldr	r3, [pc, #484]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aa14:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aa18:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8aa1c:	4293      	cmp	r3, r2
   8aa1e:	f340 8328 	ble.w	8b072 <Fine_DutyCorrection+0x94a>
			{
				avg_duty = 2300;
   8aa22:	4b75      	ldr	r3, [pc, #468]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aa24:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8aa28:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8aa2a:	4b74      	ldr	r3, [pc, #464]	; (8abfc <Fine_DutyCorrection+0x4d4>)
   8aa2c:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
			  avg_duty = avg_duty + duty_count;
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8aa2e:	e320      	b.n	8b072 <Fine_DutyCorrection+0x94a>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8aa30:	4b63      	ldr	r3, [pc, #396]	; (8abc0 <Fine_DutyCorrection+0x498>)
   8aa32:	781b      	ldrb	r3, [r3, #0]
   8aa34:	2b02      	cmp	r3, #2
   8aa36:	f040 831c 	bne.w	8b072 <Fine_DutyCorrection+0x94a>
				avg_duty = avg_duty;
   8aa3a:	4b6f      	ldr	r3, [pc, #444]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aa3c:	f9b3 2000 	ldrsh.w	r2, [r3]
   8aa40:	4b6d      	ldr	r3, [pc, #436]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aa42:	801a      	strh	r2, [r3, #0]

		}
	  avg_duty = avg_duty;
	}
	
}
   8aa44:	e315      	b.n	8b072 <Fine_DutyCorrection+0x94a>
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
				avg_duty = avg_duty;
	}
	else if (SYSTEM_FLOW == 500)
   8aa46:	4b6e      	ldr	r3, [pc, #440]	; (8ac00 <Fine_DutyCorrection+0x4d8>)
   8aa48:	681b      	ldr	r3, [r3, #0]
   8aa4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8aa4e:	f040 8188 	bne.w	8ad62 <Fine_DutyCorrection+0x63a>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.1)) && (Tmp3Val >= (Prescribed_T3+0.2)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8aa52:	4b5b      	ldr	r3, [pc, #364]	; (8abc0 <Fine_DutyCorrection+0x498>)
   8aa54:	781b      	ldrb	r3, [r3, #0]
   8aa56:	2b00      	cmp	r3, #0
   8aa58:	d14f      	bne.n	8aafa <Fine_DutyCorrection+0x3d2>
   8aa5a:	4b5a      	ldr	r3, [pc, #360]	; (8abc4 <Fine_DutyCorrection+0x49c>)
   8aa5c:	681a      	ldr	r2, [r3, #0]
   8aa5e:	4b5a      	ldr	r3, [pc, #360]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8aa60:	4610      	mov	r0, r2
   8aa62:	4798      	blx	r3
   8aa64:	4605      	mov	r5, r0
   8aa66:	460e      	mov	r6, r1
   8aa68:	4b58      	ldr	r3, [pc, #352]	; (8abcc <Fine_DutyCorrection+0x4a4>)
   8aa6a:	681a      	ldr	r2, [r3, #0]
   8aa6c:	4b56      	ldr	r3, [pc, #344]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8aa6e:	4610      	mov	r0, r2
   8aa70:	4798      	blx	r3
   8aa72:	4c57      	ldr	r4, [pc, #348]	; (8abd0 <Fine_DutyCorrection+0x4a8>)
   8aa74:	a350      	add	r3, pc, #320	; (adr r3, 8abb8 <Fine_DutyCorrection+0x490>)
   8aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aa7a:	47a0      	blx	r4
   8aa7c:	4603      	mov	r3, r0
   8aa7e:	460c      	mov	r4, r1
   8aa80:	461a      	mov	r2, r3
   8aa82:	4623      	mov	r3, r4
   8aa84:	4c5f      	ldr	r4, [pc, #380]	; (8ac04 <Fine_DutyCorrection+0x4dc>)
   8aa86:	4628      	mov	r0, r5
   8aa88:	4631      	mov	r1, r6
   8aa8a:	47a0      	blx	r4
   8aa8c:	4603      	mov	r3, r0
   8aa8e:	2b00      	cmp	r3, #0
   8aa90:	d033      	beq.n	8aafa <Fine_DutyCorrection+0x3d2>
   8aa92:	4b55      	ldr	r3, [pc, #340]	; (8abe8 <Fine_DutyCorrection+0x4c0>)
   8aa94:	681a      	ldr	r2, [r3, #0]
   8aa96:	4b4c      	ldr	r3, [pc, #304]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8aa98:	4610      	mov	r0, r2
   8aa9a:	4798      	blx	r3
   8aa9c:	4605      	mov	r5, r0
   8aa9e:	460e      	mov	r6, r1
   8aaa0:	4b52      	ldr	r3, [pc, #328]	; (8abec <Fine_DutyCorrection+0x4c4>)
   8aaa2:	681a      	ldr	r2, [r3, #0]
   8aaa4:	4b48      	ldr	r3, [pc, #288]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8aaa6:	4610      	mov	r0, r2
   8aaa8:	4798      	blx	r3
   8aaaa:	4c49      	ldr	r4, [pc, #292]	; (8abd0 <Fine_DutyCorrection+0x4a8>)
   8aaac:	a340      	add	r3, pc, #256	; (adr r3, 8abb0 <Fine_DutyCorrection+0x488>)
   8aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aab2:	47a0      	blx	r4
   8aab4:	4603      	mov	r3, r0
   8aab6:	460c      	mov	r4, r1
   8aab8:	461a      	mov	r2, r3
   8aaba:	4623      	mov	r3, r4
   8aabc:	4c51      	ldr	r4, [pc, #324]	; (8ac04 <Fine_DutyCorrection+0x4dc>)
   8aabe:	4628      	mov	r0, r5
   8aac0:	4631      	mov	r1, r6
   8aac2:	47a0      	blx	r4
   8aac4:	4603      	mov	r3, r0
   8aac6:	2b00      	cmp	r3, #0
   8aac8:	d017      	beq.n	8aafa <Fine_DutyCorrection+0x3d2>
		{
			avg_duty = avg_duty - duty_count;
   8aaca:	4b4b      	ldr	r3, [pc, #300]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aacc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aad0:	b29a      	uxth	r2, r3
   8aad2:	4b48      	ldr	r3, [pc, #288]	; (8abf4 <Fine_DutyCorrection+0x4cc>)
   8aad4:	781b      	ldrb	r3, [r3, #0]
   8aad6:	b29b      	uxth	r3, r3
   8aad8:	1ad3      	subs	r3, r2, r3
   8aada:	b29b      	uxth	r3, r3
   8aadc:	b21a      	sxth	r2, r3
   8aade:	4b46      	ldr	r3, [pc, #280]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aae0:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8aae2:	4b45      	ldr	r3, [pc, #276]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aae4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8aaec:	f300 8133 	bgt.w	8ad56 <Fine_DutyCorrection+0x62e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8aaf0:	4b41      	ldr	r3, [pc, #260]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8aaf2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8aaf6:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.1)) && (Tmp3Val >= (Prescribed_T3+0.2)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8aaf8:	e12d      	b.n	8ad56 <Fine_DutyCorrection+0x62e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+0.5))) && (Tmp3Val <= (Prescribed_T3-0.2)) ) 
   8aafa:	4b31      	ldr	r3, [pc, #196]	; (8abc0 <Fine_DutyCorrection+0x498>)
   8aafc:	781b      	ldrb	r3, [r3, #0]
   8aafe:	2b00      	cmp	r3, #0
   8ab00:	f040 8086 	bne.w	8ac10 <Fine_DutyCorrection+0x4e8>
   8ab04:	4b31      	ldr	r3, [pc, #196]	; (8abcc <Fine_DutyCorrection+0x4a4>)
   8ab06:	681a      	ldr	r2, [r3, #0]
   8ab08:	4b3f      	ldr	r3, [pc, #252]	; (8ac08 <Fine_DutyCorrection+0x4e0>)
   8ab0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8ab0e:	4610      	mov	r0, r2
   8ab10:	4798      	blx	r3
   8ab12:	4603      	mov	r3, r0
   8ab14:	4618      	mov	r0, r3
   8ab16:	4b2b      	ldr	r3, [pc, #172]	; (8abc4 <Fine_DutyCorrection+0x49c>)
   8ab18:	681a      	ldr	r2, [r3, #0]
   8ab1a:	4b31      	ldr	r3, [pc, #196]	; (8abe0 <Fine_DutyCorrection+0x4b8>)
   8ab1c:	4611      	mov	r1, r2
   8ab1e:	4798      	blx	r3
   8ab20:	4603      	mov	r3, r0
   8ab22:	2b00      	cmp	r3, #0
   8ab24:	d074      	beq.n	8ac10 <Fine_DutyCorrection+0x4e8>
   8ab26:	4b27      	ldr	r3, [pc, #156]	; (8abc4 <Fine_DutyCorrection+0x49c>)
   8ab28:	681a      	ldr	r2, [r3, #0]
   8ab2a:	4b27      	ldr	r3, [pc, #156]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8ab2c:	4610      	mov	r0, r2
   8ab2e:	4798      	blx	r3
   8ab30:	4605      	mov	r5, r0
   8ab32:	460e      	mov	r6, r1
   8ab34:	4b25      	ldr	r3, [pc, #148]	; (8abcc <Fine_DutyCorrection+0x4a4>)
   8ab36:	681a      	ldr	r2, [r3, #0]
   8ab38:	4b23      	ldr	r3, [pc, #140]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8ab3a:	4610      	mov	r0, r2
   8ab3c:	4798      	blx	r3
   8ab3e:	4c24      	ldr	r4, [pc, #144]	; (8abd0 <Fine_DutyCorrection+0x4a8>)
   8ab40:	f04f 0200 	mov.w	r2, #0
   8ab44:	4b23      	ldr	r3, [pc, #140]	; (8abd4 <Fine_DutyCorrection+0x4ac>)
   8ab46:	47a0      	blx	r4
   8ab48:	4603      	mov	r3, r0
   8ab4a:	460c      	mov	r4, r1
   8ab4c:	461a      	mov	r2, r3
   8ab4e:	4623      	mov	r3, r4
   8ab50:	4c21      	ldr	r4, [pc, #132]	; (8abd8 <Fine_DutyCorrection+0x4b0>)
   8ab52:	4628      	mov	r0, r5
   8ab54:	4631      	mov	r1, r6
   8ab56:	47a0      	blx	r4
   8ab58:	4603      	mov	r3, r0
   8ab5a:	2b00      	cmp	r3, #0
   8ab5c:	d058      	beq.n	8ac10 <Fine_DutyCorrection+0x4e8>
   8ab5e:	4b22      	ldr	r3, [pc, #136]	; (8abe8 <Fine_DutyCorrection+0x4c0>)
   8ab60:	681a      	ldr	r2, [r3, #0]
   8ab62:	4b19      	ldr	r3, [pc, #100]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8ab64:	4610      	mov	r0, r2
   8ab66:	4798      	blx	r3
   8ab68:	4605      	mov	r5, r0
   8ab6a:	460e      	mov	r6, r1
   8ab6c:	4b1f      	ldr	r3, [pc, #124]	; (8abec <Fine_DutyCorrection+0x4c4>)
   8ab6e:	681a      	ldr	r2, [r3, #0]
   8ab70:	4b15      	ldr	r3, [pc, #84]	; (8abc8 <Fine_DutyCorrection+0x4a0>)
   8ab72:	4610      	mov	r0, r2
   8ab74:	4798      	blx	r3
   8ab76:	4c25      	ldr	r4, [pc, #148]	; (8ac0c <Fine_DutyCorrection+0x4e4>)
   8ab78:	a30d      	add	r3, pc, #52	; (adr r3, 8abb0 <Fine_DutyCorrection+0x488>)
   8ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ab7e:	47a0      	blx	r4
   8ab80:	4603      	mov	r3, r0
   8ab82:	460c      	mov	r4, r1
   8ab84:	461a      	mov	r2, r3
   8ab86:	4623      	mov	r3, r4
   8ab88:	4c13      	ldr	r4, [pc, #76]	; (8abd8 <Fine_DutyCorrection+0x4b0>)
   8ab8a:	4628      	mov	r0, r5
   8ab8c:	4631      	mov	r1, r6
   8ab8e:	47a0      	blx	r4
   8ab90:	4603      	mov	r3, r0
   8ab92:	2b00      	cmp	r3, #0
   8ab94:	d03c      	beq.n	8ac10 <Fine_DutyCorrection+0x4e8>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{																                          //38    changed on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8ab96:	4b17      	ldr	r3, [pc, #92]	; (8abf4 <Fine_DutyCorrection+0x4cc>)
   8ab98:	781b      	ldrb	r3, [r3, #0]
   8ab9a:	b29a      	uxth	r2, r3
   8ab9c:	4b16      	ldr	r3, [pc, #88]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8ab9e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aba2:	b29b      	uxth	r3, r3
   8aba4:	4413      	add	r3, r2
   8aba6:	b29b      	uxth	r3, r3
   8aba8:	b21a      	sxth	r2, r3
   8abaa:	4b13      	ldr	r3, [pc, #76]	; (8abf8 <Fine_DutyCorrection+0x4d0>)
   8abac:	801a      	strh	r2, [r3, #0]
   8abae:	e0d2      	b.n	8ad56 <Fine_DutyCorrection+0x62e>
   8abb0:	9999999a 	.word	0x9999999a
   8abb4:	3fc99999 	.word	0x3fc99999
   8abb8:	9999999a 	.word	0x9999999a
   8abbc:	3fb99999 	.word	0x3fb99999
   8abc0:	200720da 	.word	0x200720da
   8abc4:	20071898 	.word	0x20071898
   8abc8:	000a7681 	.word	0x000a7681
   8abcc:	200720dc 	.word	0x200720dc
   8abd0:	000a73c5 	.word	0x000a73c5
   8abd4:	3fe00000 	.word	0x3fe00000
   8abd8:	000a7c21 	.word	0x000a7c21
   8abdc:	20071894 	.word	0x20071894
   8abe0:	000a82f9 	.word	0x000a82f9
   8abe4:	42100000 	.word	0x42100000
   8abe8:	2007189c 	.word	0x2007189c
   8abec:	200720c8 	.word	0x200720c8
   8abf0:	000a7c0d 	.word	0x000a7c0d
   8abf4:	200718bc 	.word	0x200718bc
   8abf8:	20071886 	.word	0x20071886
   8abfc:	0009adcd 	.word	0x0009adcd
   8ac00:	200704d8 	.word	0x200704d8
   8ac04:	000a7c35 	.word	0x000a7c35
   8ac08:	000a7d95 	.word	0x000a7d95
   8ac0c:	000a73c1 	.word	0x000a73c1
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )  
   8ac10:	4b85      	ldr	r3, [pc, #532]	; (8ae28 <Fine_DutyCorrection+0x700>)
   8ac12:	781b      	ldrb	r3, [r3, #0]
   8ac14:	2b01      	cmp	r3, #1
   8ac16:	d15a      	bne.n	8acce <Fine_DutyCorrection+0x5a6>
   8ac18:	4b84      	ldr	r3, [pc, #528]	; (8ae2c <Fine_DutyCorrection+0x704>)
   8ac1a:	681a      	ldr	r2, [r3, #0]
   8ac1c:	4b84      	ldr	r3, [pc, #528]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8ac1e:	4610      	mov	r0, r2
   8ac20:	4798      	blx	r3
   8ac22:	4605      	mov	r5, r0
   8ac24:	460e      	mov	r6, r1
   8ac26:	4b83      	ldr	r3, [pc, #524]	; (8ae34 <Fine_DutyCorrection+0x70c>)
   8ac28:	681a      	ldr	r2, [r3, #0]
   8ac2a:	4b81      	ldr	r3, [pc, #516]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8ac2c:	4610      	mov	r0, r2
   8ac2e:	4798      	blx	r3
   8ac30:	4c81      	ldr	r4, [pc, #516]	; (8ae38 <Fine_DutyCorrection+0x710>)
   8ac32:	f04f 0200 	mov.w	r2, #0
   8ac36:	4b81      	ldr	r3, [pc, #516]	; (8ae3c <Fine_DutyCorrection+0x714>)
   8ac38:	47a0      	blx	r4
   8ac3a:	4603      	mov	r3, r0
   8ac3c:	460c      	mov	r4, r1
   8ac3e:	461a      	mov	r2, r3
   8ac40:	4623      	mov	r3, r4
   8ac42:	4c7f      	ldr	r4, [pc, #508]	; (8ae40 <Fine_DutyCorrection+0x718>)
   8ac44:	4628      	mov	r0, r5
   8ac46:	4631      	mov	r1, r6
   8ac48:	47a0      	blx	r4
   8ac4a:	4603      	mov	r3, r0
   8ac4c:	2b00      	cmp	r3, #0
   8ac4e:	d03e      	beq.n	8acce <Fine_DutyCorrection+0x5a6>
		{
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.1 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8ac50:	4b7c      	ldr	r3, [pc, #496]	; (8ae44 <Fine_DutyCorrection+0x71c>)
   8ac52:	681a      	ldr	r2, [r3, #0]
   8ac54:	4b7c      	ldr	r3, [pc, #496]	; (8ae48 <Fine_DutyCorrection+0x720>)
   8ac56:	497d      	ldr	r1, [pc, #500]	; (8ae4c <Fine_DutyCorrection+0x724>)
   8ac58:	4610      	mov	r0, r2
   8ac5a:	4798      	blx	r3
   8ac5c:	4603      	mov	r3, r0
   8ac5e:	2b00      	cmp	r3, #0
   8ac60:	d027      	beq.n	8acb2 <Fine_DutyCorrection+0x58a>
   8ac62:	4b7b      	ldr	r3, [pc, #492]	; (8ae50 <Fine_DutyCorrection+0x728>)
   8ac64:	681a      	ldr	r2, [r3, #0]
   8ac66:	4b72      	ldr	r3, [pc, #456]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8ac68:	4610      	mov	r0, r2
   8ac6a:	4798      	blx	r3
   8ac6c:	4605      	mov	r5, r0
   8ac6e:	460e      	mov	r6, r1
   8ac70:	4b78      	ldr	r3, [pc, #480]	; (8ae54 <Fine_DutyCorrection+0x72c>)
   8ac72:	681a      	ldr	r2, [r3, #0]
   8ac74:	4b6e      	ldr	r3, [pc, #440]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8ac76:	4610      	mov	r0, r2
   8ac78:	4798      	blx	r3
   8ac7a:	4c6f      	ldr	r4, [pc, #444]	; (8ae38 <Fine_DutyCorrection+0x710>)
   8ac7c:	a366      	add	r3, pc, #408	; (adr r3, 8ae18 <Fine_DutyCorrection+0x6f0>)
   8ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ac82:	47a0      	blx	r4
   8ac84:	4603      	mov	r3, r0
   8ac86:	460c      	mov	r4, r1
   8ac88:	461a      	mov	r2, r3
   8ac8a:	4623      	mov	r3, r4
   8ac8c:	4c72      	ldr	r4, [pc, #456]	; (8ae58 <Fine_DutyCorrection+0x730>)
   8ac8e:	4628      	mov	r0, r5
   8ac90:	4631      	mov	r1, r6
   8ac92:	47a0      	blx	r4
   8ac94:	4603      	mov	r3, r0
   8ac96:	2b00      	cmp	r3, #0
   8ac98:	d00b      	beq.n	8acb2 <Fine_DutyCorrection+0x58a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8ac9a:	4b70      	ldr	r3, [pc, #448]	; (8ae5c <Fine_DutyCorrection+0x734>)
   8ac9c:	781b      	ldrb	r3, [r3, #0]
   8ac9e:	b29a      	uxth	r2, r3
   8aca0:	4b6f      	ldr	r3, [pc, #444]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8aca2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aca6:	b29b      	uxth	r3, r3
   8aca8:	4413      	add	r3, r2
   8acaa:	b29b      	uxth	r3, r3
   8acac:	b21a      	sxth	r2, r3
   8acae:	4b6c      	ldr	r3, [pc, #432]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8acb0:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8acb2:	4b6b      	ldr	r3, [pc, #428]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8acb4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8acb8:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8acbc:	4293      	cmp	r3, r2
   8acbe:	dd4a      	ble.n	8ad56 <Fine_DutyCorrection+0x62e>
			{
				avg_duty = 2300;
   8acc0:	4b67      	ldr	r3, [pc, #412]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8acc2:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8acc6:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8acc8:	4b66      	ldr	r3, [pc, #408]	; (8ae64 <Fine_DutyCorrection+0x73c>)
   8acca:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.1 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8accc:	e043      	b.n	8ad56 <Fine_DutyCorrection+0x62e>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8acce:	4b56      	ldr	r3, [pc, #344]	; (8ae28 <Fine_DutyCorrection+0x700>)
   8acd0:	781b      	ldrb	r3, [r3, #0]
   8acd2:	2b02      	cmp	r3, #2
   8acd4:	d13f      	bne.n	8ad56 <Fine_DutyCorrection+0x62e>
			{
				if (Check_4_Neutralstability())
   8acd6:	4b64      	ldr	r3, [pc, #400]	; (8ae68 <Fine_DutyCorrection+0x740>)
   8acd8:	4798      	blx	r3
   8acda:	4603      	mov	r3, r0
   8acdc:	2b00      	cmp	r3, #0
   8acde:	d03a      	beq.n	8ad56 <Fine_DutyCorrection+0x62e>
				{
					if ((Tmp3Val - Prescribed_T3) >0.2)
   8ace0:	4b5b      	ldr	r3, [pc, #364]	; (8ae50 <Fine_DutyCorrection+0x728>)
   8ace2:	681a      	ldr	r2, [r3, #0]
   8ace4:	4b5b      	ldr	r3, [pc, #364]	; (8ae54 <Fine_DutyCorrection+0x72c>)
   8ace6:	6819      	ldr	r1, [r3, #0]
   8ace8:	4b60      	ldr	r3, [pc, #384]	; (8ae6c <Fine_DutyCorrection+0x744>)
   8acea:	4610      	mov	r0, r2
   8acec:	4798      	blx	r3
   8acee:	4603      	mov	r3, r0
   8acf0:	461a      	mov	r2, r3
   8acf2:	4b4f      	ldr	r3, [pc, #316]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8acf4:	4610      	mov	r0, r2
   8acf6:	4798      	blx	r3
   8acf8:	4c5d      	ldr	r4, [pc, #372]	; (8ae70 <Fine_DutyCorrection+0x748>)
   8acfa:	a349      	add	r3, pc, #292	; (adr r3, 8ae20 <Fine_DutyCorrection+0x6f8>)
   8acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ad00:	47a0      	blx	r4
   8ad02:	4603      	mov	r3, r0
   8ad04:	2b00      	cmp	r3, #0
   8ad06:	d009      	beq.n	8ad1c <Fine_DutyCorrection+0x5f4>
					{
						avg_duty = avg_duty-6;
   8ad08:	4b55      	ldr	r3, [pc, #340]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ad0a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ad0e:	b29b      	uxth	r3, r3
   8ad10:	3b06      	subs	r3, #6
   8ad12:	b29b      	uxth	r3, r3
   8ad14:	b21a      	sxth	r2, r3
   8ad16:	4b52      	ldr	r3, [pc, #328]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ad18:	801a      	strh	r2, [r3, #0]
   8ad1a:	e01c      	b.n	8ad56 <Fine_DutyCorrection+0x62e>
					}
					else if ((Prescribed_T3- Tmp3Val) >0.2)
   8ad1c:	4b4d      	ldr	r3, [pc, #308]	; (8ae54 <Fine_DutyCorrection+0x72c>)
   8ad1e:	681a      	ldr	r2, [r3, #0]
   8ad20:	4b4b      	ldr	r3, [pc, #300]	; (8ae50 <Fine_DutyCorrection+0x728>)
   8ad22:	6819      	ldr	r1, [r3, #0]
   8ad24:	4b51      	ldr	r3, [pc, #324]	; (8ae6c <Fine_DutyCorrection+0x744>)
   8ad26:	4610      	mov	r0, r2
   8ad28:	4798      	blx	r3
   8ad2a:	4603      	mov	r3, r0
   8ad2c:	461a      	mov	r2, r3
   8ad2e:	4b40      	ldr	r3, [pc, #256]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8ad30:	4610      	mov	r0, r2
   8ad32:	4798      	blx	r3
   8ad34:	4c4e      	ldr	r4, [pc, #312]	; (8ae70 <Fine_DutyCorrection+0x748>)
   8ad36:	a33a      	add	r3, pc, #232	; (adr r3, 8ae20 <Fine_DutyCorrection+0x6f8>)
   8ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ad3c:	47a0      	blx	r4
   8ad3e:	4603      	mov	r3, r0
   8ad40:	2b00      	cmp	r3, #0
   8ad42:	d008      	beq.n	8ad56 <Fine_DutyCorrection+0x62e>
					{
						avg_duty = avg_duty+6;
   8ad44:	4b46      	ldr	r3, [pc, #280]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ad46:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ad4a:	b29b      	uxth	r3, r3
   8ad4c:	3306      	adds	r3, #6
   8ad4e:	b29b      	uxth	r3, r3
   8ad50:	b21a      	sxth	r2, r3
   8ad52:	4b43      	ldr	r3, [pc, #268]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ad54:	801a      	strh	r2, [r3, #0]
					}
				}		
			}
		
		
				avg_duty = avg_duty;
   8ad56:	4b42      	ldr	r3, [pc, #264]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ad58:	f9b3 2000 	ldrsh.w	r2, [r3]
   8ad5c:	4b40      	ldr	r3, [pc, #256]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ad5e:	801a      	strh	r2, [r3, #0]

		}
	  avg_duty = avg_duty;
	}
	
}
   8ad60:	e187      	b.n	8b072 <Fine_DutyCorrection+0x94a>
		
				avg_duty = avg_duty;
	}
	
	
	else if (SYSTEM_FLOW == 300)                                        // Gopal: if the flow rate is set to 300 temperature
   8ad62:	4b44      	ldr	r3, [pc, #272]	; (8ae74 <Fine_DutyCorrection+0x74c>)
   8ad64:	681b      	ldr	r3, [r3, #0]
   8ad66:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8ad6a:	f040 8182 	bne.w	8b072 <Fine_DutyCorrection+0x94a>
	{
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))     // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
   8ad6e:	4b2e      	ldr	r3, [pc, #184]	; (8ae28 <Fine_DutyCorrection+0x700>)
   8ad70:	781b      	ldrb	r3, [r3, #0]
   8ad72:	2b00      	cmp	r3, #0
   8ad74:	f040 8086 	bne.w	8ae84 <Fine_DutyCorrection+0x75c>
   8ad78:	4b2e      	ldr	r3, [pc, #184]	; (8ae34 <Fine_DutyCorrection+0x70c>)
   8ad7a:	681a      	ldr	r2, [r3, #0]
   8ad7c:	4b3e      	ldr	r3, [pc, #248]	; (8ae78 <Fine_DutyCorrection+0x750>)
   8ad7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8ad82:	4610      	mov	r0, r2
   8ad84:	4798      	blx	r3
   8ad86:	4603      	mov	r3, r0
   8ad88:	4618      	mov	r0, r3
   8ad8a:	4b28      	ldr	r3, [pc, #160]	; (8ae2c <Fine_DutyCorrection+0x704>)
   8ad8c:	681a      	ldr	r2, [r3, #0]
   8ad8e:	4b2e      	ldr	r3, [pc, #184]	; (8ae48 <Fine_DutyCorrection+0x720>)
   8ad90:	4611      	mov	r1, r2
   8ad92:	4798      	blx	r3
   8ad94:	4603      	mov	r3, r0
   8ad96:	2b00      	cmp	r3, #0
   8ad98:	d074      	beq.n	8ae84 <Fine_DutyCorrection+0x75c>
   8ad9a:	4b2d      	ldr	r3, [pc, #180]	; (8ae50 <Fine_DutyCorrection+0x728>)
   8ad9c:	681a      	ldr	r2, [r3, #0]
   8ad9e:	4b24      	ldr	r3, [pc, #144]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8ada0:	4610      	mov	r0, r2
   8ada2:	4798      	blx	r3
   8ada4:	4605      	mov	r5, r0
   8ada6:	460e      	mov	r6, r1
   8ada8:	4b2a      	ldr	r3, [pc, #168]	; (8ae54 <Fine_DutyCorrection+0x72c>)
   8adaa:	681a      	ldr	r2, [r3, #0]
   8adac:	4b20      	ldr	r3, [pc, #128]	; (8ae30 <Fine_DutyCorrection+0x708>)
   8adae:	4610      	mov	r0, r2
   8adb0:	4798      	blx	r3
   8adb2:	4c21      	ldr	r4, [pc, #132]	; (8ae38 <Fine_DutyCorrection+0x710>)
   8adb4:	a318      	add	r3, pc, #96	; (adr r3, 8ae18 <Fine_DutyCorrection+0x6f0>)
   8adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8adba:	47a0      	blx	r4
   8adbc:	4603      	mov	r3, r0
   8adbe:	460c      	mov	r4, r1
   8adc0:	461a      	mov	r2, r3
   8adc2:	4623      	mov	r3, r4
   8adc4:	4c2d      	ldr	r4, [pc, #180]	; (8ae7c <Fine_DutyCorrection+0x754>)
   8adc6:	4628      	mov	r0, r5
   8adc8:	4631      	mov	r1, r6
   8adca:	47a0      	blx	r4
   8adcc:	4603      	mov	r3, r0
   8adce:	2b00      	cmp	r3, #0
   8add0:	d058      	beq.n	8ae84 <Fine_DutyCorrection+0x75c>
									     //Gopal: changed to 41 07092017 ; 
		{                                
			avg_duty = avg_duty - duty_count;
   8add2:	4b23      	ldr	r3, [pc, #140]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8add4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8add8:	b29a      	uxth	r2, r3
   8adda:	4b20      	ldr	r3, [pc, #128]	; (8ae5c <Fine_DutyCorrection+0x734>)
   8addc:	781b      	ldrb	r3, [r3, #0]
   8adde:	b29b      	uxth	r3, r3
   8ade0:	1ad3      	subs	r3, r2, r3
   8ade2:	b29b      	uxth	r3, r3
   8ade4:	b21a      	sxth	r2, r3
   8ade6:	4b1e      	ldr	r3, [pc, #120]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ade8:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8adea:	4b1d      	ldr	r3, [pc, #116]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8adec:	f9b3 3000 	ldrsh.w	r3, [r3]
   8adf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8adf4:	f300 8137 	bgt.w	8b066 <Fine_DutyCorrection+0x93e>
   8adf8:	4b15      	ldr	r3, [pc, #84]	; (8ae50 <Fine_DutyCorrection+0x728>)
   8adfa:	681a      	ldr	r2, [r3, #0]
   8adfc:	4b15      	ldr	r3, [pc, #84]	; (8ae54 <Fine_DutyCorrection+0x72c>)
   8adfe:	6819      	ldr	r1, [r3, #0]
   8ae00:	4b1f      	ldr	r3, [pc, #124]	; (8ae80 <Fine_DutyCorrection+0x758>)
   8ae02:	4610      	mov	r0, r2
   8ae04:	4798      	blx	r3
   8ae06:	4603      	mov	r3, r0
   8ae08:	2b00      	cmp	r3, #0
   8ae0a:	d100      	bne.n	8ae0e <Fine_DutyCorrection+0x6e6>
   8ae0c:	e12b      	b.n	8b066 <Fine_DutyCorrection+0x93e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8ae0e:	4b14      	ldr	r3, [pc, #80]	; (8ae60 <Fine_DutyCorrection+0x738>)
   8ae10:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8ae14:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
									     //Gopal: changed to 41 07092017 ; 
		{                                
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8ae16:	e126      	b.n	8b066 <Fine_DutyCorrection+0x93e>
   8ae18:	9999999a 	.word	0x9999999a
   8ae1c:	3fb99999 	.word	0x3fb99999
   8ae20:	9999999a 	.word	0x9999999a
   8ae24:	3fc99999 	.word	0x3fc99999
   8ae28:	200720da 	.word	0x200720da
   8ae2c:	20071898 	.word	0x20071898
   8ae30:	000a7681 	.word	0x000a7681
   8ae34:	200720dc 	.word	0x200720dc
   8ae38:	000a73c5 	.word	0x000a73c5
   8ae3c:	3fe00000 	.word	0x3fe00000
   8ae40:	000a7c21 	.word	0x000a7c21
   8ae44:	20071894 	.word	0x20071894
   8ae48:	000a82f9 	.word	0x000a82f9
   8ae4c:	42100000 	.word	0x42100000
   8ae50:	2007189c 	.word	0x2007189c
   8ae54:	200720c8 	.word	0x200720c8
   8ae58:	000a7c0d 	.word	0x000a7c0d
   8ae5c:	200718bc 	.word	0x200718bc
   8ae60:	20071886 	.word	0x20071886
   8ae64:	0009adcd 	.word	0x0009adcd
   8ae68:	00089c21 	.word	0x00089c21
   8ae6c:	000a7d95 	.word	0x000a7d95
   8ae70:	000a7c49 	.word	0x000a7c49
   8ae74:	200704d8 	.word	0x200704d8
   8ae78:	000a7d99 	.word	0x000a7d99
   8ae7c:	000a7c35 	.word	0x000a7c35
   8ae80:	000a82e5 	.word	0x000a82e5
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
   8ae84:	4b7e      	ldr	r3, [pc, #504]	; (8b080 <Fine_DutyCorrection+0x958>)
   8ae86:	781b      	ldrb	r3, [r3, #0]
   8ae88:	2b00      	cmp	r3, #0
   8ae8a:	d154      	bne.n	8af36 <Fine_DutyCorrection+0x80e>
   8ae8c:	4b7d      	ldr	r3, [pc, #500]	; (8b084 <Fine_DutyCorrection+0x95c>)
   8ae8e:	681a      	ldr	r2, [r3, #0]
   8ae90:	4b7d      	ldr	r3, [pc, #500]	; (8b088 <Fine_DutyCorrection+0x960>)
   8ae92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8ae96:	4610      	mov	r0, r2
   8ae98:	4798      	blx	r3
   8ae9a:	4603      	mov	r3, r0
   8ae9c:	4618      	mov	r0, r3
   8ae9e:	4b7b      	ldr	r3, [pc, #492]	; (8b08c <Fine_DutyCorrection+0x964>)
   8aea0:	681a      	ldr	r2, [r3, #0]
   8aea2:	4b7b      	ldr	r3, [pc, #492]	; (8b090 <Fine_DutyCorrection+0x968>)
   8aea4:	4611      	mov	r1, r2
   8aea6:	4798      	blx	r3
   8aea8:	4603      	mov	r3, r0
   8aeaa:	2b00      	cmp	r3, #0
   8aeac:	d043      	beq.n	8af36 <Fine_DutyCorrection+0x80e>
   8aeae:	4b75      	ldr	r3, [pc, #468]	; (8b084 <Fine_DutyCorrection+0x95c>)
   8aeb0:	681a      	ldr	r2, [r3, #0]
   8aeb2:	4b78      	ldr	r3, [pc, #480]	; (8b094 <Fine_DutyCorrection+0x96c>)
   8aeb4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8aeb8:	4610      	mov	r0, r2
   8aeba:	4798      	blx	r3
   8aebc:	4603      	mov	r3, r0
   8aebe:	4618      	mov	r0, r3
   8aec0:	4b72      	ldr	r3, [pc, #456]	; (8b08c <Fine_DutyCorrection+0x964>)
   8aec2:	681a      	ldr	r2, [r3, #0]
   8aec4:	4b74      	ldr	r3, [pc, #464]	; (8b098 <Fine_DutyCorrection+0x970>)
   8aec6:	4611      	mov	r1, r2
   8aec8:	4798      	blx	r3
   8aeca:	4603      	mov	r3, r0
   8aecc:	2b00      	cmp	r3, #0
   8aece:	d032      	beq.n	8af36 <Fine_DutyCorrection+0x80e>
   8aed0:	4b72      	ldr	r3, [pc, #456]	; (8b09c <Fine_DutyCorrection+0x974>)
   8aed2:	681a      	ldr	r2, [r3, #0]
   8aed4:	4b72      	ldr	r3, [pc, #456]	; (8b0a0 <Fine_DutyCorrection+0x978>)
   8aed6:	4610      	mov	r0, r2
   8aed8:	4798      	blx	r3
   8aeda:	4605      	mov	r5, r0
   8aedc:	460e      	mov	r6, r1
   8aede:	4b71      	ldr	r3, [pc, #452]	; (8b0a4 <Fine_DutyCorrection+0x97c>)
   8aee0:	681a      	ldr	r2, [r3, #0]
   8aee2:	4b6f      	ldr	r3, [pc, #444]	; (8b0a0 <Fine_DutyCorrection+0x978>)
   8aee4:	4610      	mov	r0, r2
   8aee6:	4798      	blx	r3
   8aee8:	4c6f      	ldr	r4, [pc, #444]	; (8b0a8 <Fine_DutyCorrection+0x980>)
   8aeea:	a363      	add	r3, pc, #396	; (adr r3, 8b078 <Fine_DutyCorrection+0x950>)
   8aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aef0:	47a0      	blx	r4
   8aef2:	4603      	mov	r3, r0
   8aef4:	460c      	mov	r4, r1
   8aef6:	461a      	mov	r2, r3
   8aef8:	4623      	mov	r3, r4
   8aefa:	4c6c      	ldr	r4, [pc, #432]	; (8b0ac <Fine_DutyCorrection+0x984>)
   8aefc:	4628      	mov	r0, r5
   8aefe:	4631      	mov	r1, r6
   8af00:	47a0      	blx	r4
   8af02:	4603      	mov	r3, r0
   8af04:	2b00      	cmp	r3, #0
   8af06:	d016      	beq.n	8af36 <Fine_DutyCorrection+0x80e>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 37.2
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8af08:	4b69      	ldr	r3, [pc, #420]	; (8b0b0 <Fine_DutyCorrection+0x988>)
   8af0a:	681a      	ldr	r2, [r3, #0]
   8af0c:	4b60      	ldr	r3, [pc, #384]	; (8b090 <Fine_DutyCorrection+0x968>)
   8af0e:	4969      	ldr	r1, [pc, #420]	; (8b0b4 <Fine_DutyCorrection+0x98c>)
   8af10:	4610      	mov	r0, r2
   8af12:	4798      	blx	r3
   8af14:	4603      	mov	r3, r0
   8af16:	2b00      	cmp	r3, #0
   8af18:	f000 80a5 	beq.w	8b066 <Fine_DutyCorrection+0x93e>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8af1c:	4b66      	ldr	r3, [pc, #408]	; (8b0b8 <Fine_DutyCorrection+0x990>)
   8af1e:	781b      	ldrb	r3, [r3, #0]
   8af20:	b29a      	uxth	r2, r3
   8af22:	4b66      	ldr	r3, [pc, #408]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8af24:	f9b3 3000 	ldrsh.w	r3, [r3]
   8af28:	b29b      	uxth	r3, r3
   8af2a:	4413      	add	r3, r2
   8af2c:	b29b      	uxth	r3, r3
   8af2e:	b21a      	sxth	r2, r3
   8af30:	4b62      	ldr	r3, [pc, #392]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8af32:	801a      	strh	r2, [r3, #0]
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
		 // Gopal added TS3 check as to increase duty if ts3 goes below 37.2
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8af34:	e097      	b.n	8b066 <Fine_DutyCorrection+0x93e>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+1)) )  // 39.5
   8af36:	4b52      	ldr	r3, [pc, #328]	; (8b080 <Fine_DutyCorrection+0x958>)
   8af38:	781b      	ldrb	r3, [r3, #0]
   8af3a:	2b01      	cmp	r3, #1
   8af3c:	d14f      	bne.n	8afde <Fine_DutyCorrection+0x8b6>
   8af3e:	4b51      	ldr	r3, [pc, #324]	; (8b084 <Fine_DutyCorrection+0x95c>)
   8af40:	681a      	ldr	r2, [r3, #0]
   8af42:	4b54      	ldr	r3, [pc, #336]	; (8b094 <Fine_DutyCorrection+0x96c>)
   8af44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8af48:	4610      	mov	r0, r2
   8af4a:	4798      	blx	r3
   8af4c:	4603      	mov	r3, r0
   8af4e:	4618      	mov	r0, r3
   8af50:	4b4e      	ldr	r3, [pc, #312]	; (8b08c <Fine_DutyCorrection+0x964>)
   8af52:	681a      	ldr	r2, [r3, #0]
   8af54:	4b50      	ldr	r3, [pc, #320]	; (8b098 <Fine_DutyCorrection+0x970>)
   8af56:	4611      	mov	r1, r2
   8af58:	4798      	blx	r3
   8af5a:	4603      	mov	r3, r0
   8af5c:	2b00      	cmp	r3, #0
   8af5e:	d03e      	beq.n	8afde <Fine_DutyCorrection+0x8b6>
		{
//			if ((Tmp1Val <=36) && (Tmp2Val <= 39) && (Tmp3Val <= 37.5)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8af60:	4b53      	ldr	r3, [pc, #332]	; (8b0b0 <Fine_DutyCorrection+0x988>)
   8af62:	681a      	ldr	r2, [r3, #0]
   8af64:	4b4a      	ldr	r3, [pc, #296]	; (8b090 <Fine_DutyCorrection+0x968>)
   8af66:	4953      	ldr	r1, [pc, #332]	; (8b0b4 <Fine_DutyCorrection+0x98c>)
   8af68:	4610      	mov	r0, r2
   8af6a:	4798      	blx	r3
   8af6c:	4603      	mov	r3, r0
   8af6e:	2b00      	cmp	r3, #0
   8af70:	d027      	beq.n	8afc2 <Fine_DutyCorrection+0x89a>
   8af72:	4b4a      	ldr	r3, [pc, #296]	; (8b09c <Fine_DutyCorrection+0x974>)
   8af74:	681a      	ldr	r2, [r3, #0]
   8af76:	4b4a      	ldr	r3, [pc, #296]	; (8b0a0 <Fine_DutyCorrection+0x978>)
   8af78:	4610      	mov	r0, r2
   8af7a:	4798      	blx	r3
   8af7c:	4605      	mov	r5, r0
   8af7e:	460e      	mov	r6, r1
   8af80:	4b48      	ldr	r3, [pc, #288]	; (8b0a4 <Fine_DutyCorrection+0x97c>)
   8af82:	681a      	ldr	r2, [r3, #0]
   8af84:	4b46      	ldr	r3, [pc, #280]	; (8b0a0 <Fine_DutyCorrection+0x978>)
   8af86:	4610      	mov	r0, r2
   8af88:	4798      	blx	r3
   8af8a:	4c47      	ldr	r4, [pc, #284]	; (8b0a8 <Fine_DutyCorrection+0x980>)
   8af8c:	a33a      	add	r3, pc, #232	; (adr r3, 8b078 <Fine_DutyCorrection+0x950>)
   8af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af92:	47a0      	blx	r4
   8af94:	4603      	mov	r3, r0
   8af96:	460c      	mov	r4, r1
   8af98:	461a      	mov	r2, r3
   8af9a:	4623      	mov	r3, r4
   8af9c:	4c43      	ldr	r4, [pc, #268]	; (8b0ac <Fine_DutyCorrection+0x984>)
   8af9e:	4628      	mov	r0, r5
   8afa0:	4631      	mov	r1, r6
   8afa2:	47a0      	blx	r4
   8afa4:	4603      	mov	r3, r0
   8afa6:	2b00      	cmp	r3, #0
   8afa8:	d00b      	beq.n	8afc2 <Fine_DutyCorrection+0x89a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8afaa:	4b43      	ldr	r3, [pc, #268]	; (8b0b8 <Fine_DutyCorrection+0x990>)
   8afac:	781b      	ldrb	r3, [r3, #0]
   8afae:	b29a      	uxth	r2, r3
   8afb0:	4b42      	ldr	r3, [pc, #264]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8afb2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8afb6:	b29b      	uxth	r3, r3
   8afb8:	4413      	add	r3, r2
   8afba:	b29b      	uxth	r3, r3
   8afbc:	b21a      	sxth	r2, r3
   8afbe:	4b3f      	ldr	r3, [pc, #252]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8afc0:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8afc2:	4b3e      	ldr	r3, [pc, #248]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8afc4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8afc8:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8afcc:	4293      	cmp	r3, r2
   8afce:	dd4a      	ble.n	8b066 <Fine_DutyCorrection+0x93e>
			{
				avg_duty = 2500;
   8afd0:	4b3a      	ldr	r3, [pc, #232]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8afd2:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8afd6:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8afd8:	4b39      	ldr	r3, [pc, #228]	; (8b0c0 <Fine_DutyCorrection+0x998>)
   8afda:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8afdc:	e043      	b.n	8b066 <Fine_DutyCorrection+0x93e>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8afde:	4b28      	ldr	r3, [pc, #160]	; (8b080 <Fine_DutyCorrection+0x958>)
   8afe0:	781b      	ldrb	r3, [r3, #0]
   8afe2:	2b02      	cmp	r3, #2
   8afe4:	d13f      	bne.n	8b066 <Fine_DutyCorrection+0x93e>
		{
				
			if (Check_4_Neutralstability())
   8afe6:	4b37      	ldr	r3, [pc, #220]	; (8b0c4 <Fine_DutyCorrection+0x99c>)
   8afe8:	4798      	blx	r3
   8afea:	4603      	mov	r3, r0
   8afec:	2b00      	cmp	r3, #0
   8afee:	d03a      	beq.n	8b066 <Fine_DutyCorrection+0x93e>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8aff0:	4b2a      	ldr	r3, [pc, #168]	; (8b09c <Fine_DutyCorrection+0x974>)
   8aff2:	681a      	ldr	r2, [r3, #0]
   8aff4:	4b2b      	ldr	r3, [pc, #172]	; (8b0a4 <Fine_DutyCorrection+0x97c>)
   8aff6:	6819      	ldr	r1, [r3, #0]
   8aff8:	4b23      	ldr	r3, [pc, #140]	; (8b088 <Fine_DutyCorrection+0x960>)
   8affa:	4610      	mov	r0, r2
   8affc:	4798      	blx	r3
   8affe:	4603      	mov	r3, r0
   8b000:	461a      	mov	r2, r3
   8b002:	4b27      	ldr	r3, [pc, #156]	; (8b0a0 <Fine_DutyCorrection+0x978>)
   8b004:	4610      	mov	r0, r2
   8b006:	4798      	blx	r3
   8b008:	4c2f      	ldr	r4, [pc, #188]	; (8b0c8 <Fine_DutyCorrection+0x9a0>)
   8b00a:	a31b      	add	r3, pc, #108	; (adr r3, 8b078 <Fine_DutyCorrection+0x950>)
   8b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b010:	47a0      	blx	r4
   8b012:	4603      	mov	r3, r0
   8b014:	2b00      	cmp	r3, #0
   8b016:	d009      	beq.n	8b02c <Fine_DutyCorrection+0x904>
				{
					avg_duty = avg_duty-6;
   8b018:	4b28      	ldr	r3, [pc, #160]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8b01a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b01e:	b29b      	uxth	r3, r3
   8b020:	3b06      	subs	r3, #6
   8b022:	b29b      	uxth	r3, r3
   8b024:	b21a      	sxth	r2, r3
   8b026:	4b25      	ldr	r3, [pc, #148]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8b028:	801a      	strh	r2, [r3, #0]
   8b02a:	e01c      	b.n	8b066 <Fine_DutyCorrection+0x93e>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8b02c:	4b1d      	ldr	r3, [pc, #116]	; (8b0a4 <Fine_DutyCorrection+0x97c>)
   8b02e:	681a      	ldr	r2, [r3, #0]
   8b030:	4b1a      	ldr	r3, [pc, #104]	; (8b09c <Fine_DutyCorrection+0x974>)
   8b032:	6819      	ldr	r1, [r3, #0]
   8b034:	4b14      	ldr	r3, [pc, #80]	; (8b088 <Fine_DutyCorrection+0x960>)
   8b036:	4610      	mov	r0, r2
   8b038:	4798      	blx	r3
   8b03a:	4603      	mov	r3, r0
   8b03c:	461a      	mov	r2, r3
   8b03e:	4b18      	ldr	r3, [pc, #96]	; (8b0a0 <Fine_DutyCorrection+0x978>)
   8b040:	4610      	mov	r0, r2
   8b042:	4798      	blx	r3
   8b044:	4c20      	ldr	r4, [pc, #128]	; (8b0c8 <Fine_DutyCorrection+0x9a0>)
   8b046:	a30c      	add	r3, pc, #48	; (adr r3, 8b078 <Fine_DutyCorrection+0x950>)
   8b048:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b04c:	47a0      	blx	r4
   8b04e:	4603      	mov	r3, r0
   8b050:	2b00      	cmp	r3, #0
   8b052:	d008      	beq.n	8b066 <Fine_DutyCorrection+0x93e>
				{
					avg_duty = avg_duty+6;
   8b054:	4b19      	ldr	r3, [pc, #100]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8b056:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b05a:	b29b      	uxth	r3, r3
   8b05c:	3306      	adds	r3, #6
   8b05e:	b29b      	uxth	r3, r3
   8b060:	b21a      	sxth	r2, r3
   8b062:	4b16      	ldr	r3, [pc, #88]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8b064:	801a      	strh	r2, [r3, #0]
				}
			}
			

		}
	  avg_duty = avg_duty;
   8b066:	4b15      	ldr	r3, [pc, #84]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8b068:	f9b3 2000 	ldrsh.w	r2, [r3]
   8b06c:	4b13      	ldr	r3, [pc, #76]	; (8b0bc <Fine_DutyCorrection+0x994>)
   8b06e:	801a      	strh	r2, [r3, #0]
	}
	
}
   8b070:	e7ff      	b.n	8b072 <Fine_DutyCorrection+0x94a>
   8b072:	bf00      	nop
   8b074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b076:	bf00      	nop
   8b078:	9999999a 	.word	0x9999999a
   8b07c:	3fc99999 	.word	0x3fc99999
   8b080:	200720da 	.word	0x200720da
   8b084:	200720dc 	.word	0x200720dc
   8b088:	000a7d95 	.word	0x000a7d95
   8b08c:	20071898 	.word	0x20071898
   8b090:	000a82f9 	.word	0x000a82f9
   8b094:	000a7d99 	.word	0x000a7d99
   8b098:	000a830d 	.word	0x000a830d
   8b09c:	2007189c 	.word	0x2007189c
   8b0a0:	000a7681 	.word	0x000a7681
   8b0a4:	200720c8 	.word	0x200720c8
   8b0a8:	000a73c5 	.word	0x000a73c5
   8b0ac:	000a7c0d 	.word	0x000a7c0d
   8b0b0:	20071894 	.word	0x20071894
   8b0b4:	42100000 	.word	0x42100000
   8b0b8:	200718bc 	.word	0x200718bc
   8b0bc:	20071886 	.word	0x20071886
   8b0c0:	0009adcd 	.word	0x0009adcd
   8b0c4:	00089c21 	.word	0x00089c21
   8b0c8:	000a7c49 	.word	0x000a7c49

0008b0cc <DataDisplay>:

DataDisplay()
{
   8b0cc:	b580      	push	{r7, lr}
   8b0ce:	b082      	sub	sp, #8
   8b0d0:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   8b0d2:	2300      	movs	r3, #0
   8b0d4:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   8b0d6:	4b23      	ldr	r3, [pc, #140]	; (8b164 <DataDisplay+0x98>)
   8b0d8:	681a      	ldr	r2, [r3, #0]
   8b0da:	4b23      	ldr	r3, [pc, #140]	; (8b168 <DataDisplay+0x9c>)
   8b0dc:	4610      	mov	r0, r2
   8b0de:	4798      	blx	r3
   8b0e0:	4603      	mov	r3, r0
   8b0e2:	b29b      	uxth	r3, r3
   8b0e4:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   8b0e6:	2304      	movs	r3, #4
   8b0e8:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b0ea:	1d3b      	adds	r3, r7, #4
   8b0ec:	2204      	movs	r2, #4
   8b0ee:	4619      	mov	r1, r3
   8b0f0:	2037      	movs	r0, #55	; 0x37
   8b0f2:	4b1e      	ldr	r3, [pc, #120]	; (8b16c <DataDisplay+0xa0>)
   8b0f4:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b0f6:	2300      	movs	r3, #0
   8b0f8:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   8b0fa:	4b1d      	ldr	r3, [pc, #116]	; (8b170 <DataDisplay+0xa4>)
   8b0fc:	681a      	ldr	r2, [r3, #0]
   8b0fe:	4b1a      	ldr	r3, [pc, #104]	; (8b168 <DataDisplay+0x9c>)
   8b100:	4610      	mov	r0, r2
   8b102:	4798      	blx	r3
   8b104:	4603      	mov	r3, r0
   8b106:	b29b      	uxth	r3, r3
   8b108:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   8b10a:	2305      	movs	r3, #5
   8b10c:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b10e:	1d3b      	adds	r3, r7, #4
   8b110:	2204      	movs	r2, #4
   8b112:	4619      	mov	r1, r3
   8b114:	2037      	movs	r0, #55	; 0x37
   8b116:	4b15      	ldr	r3, [pc, #84]	; (8b16c <DataDisplay+0xa0>)
   8b118:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b11a:	2300      	movs	r3, #0
   8b11c:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   8b11e:	4b15      	ldr	r3, [pc, #84]	; (8b174 <DataDisplay+0xa8>)
   8b120:	681a      	ldr	r2, [r3, #0]
   8b122:	4b11      	ldr	r3, [pc, #68]	; (8b168 <DataDisplay+0x9c>)
   8b124:	4610      	mov	r0, r2
   8b126:	4798      	blx	r3
   8b128:	4603      	mov	r3, r0
   8b12a:	b29b      	uxth	r3, r3
   8b12c:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   8b12e:	2306      	movs	r3, #6
   8b130:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b132:	1d3b      	adds	r3, r7, #4
   8b134:	2204      	movs	r2, #4
   8b136:	4619      	mov	r1, r3
   8b138:	2037      	movs	r0, #55	; 0x37
   8b13a:	4b0c      	ldr	r3, [pc, #48]	; (8b16c <DataDisplay+0xa0>)
   8b13c:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b13e:	2300      	movs	r3, #0
   8b140:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   8b142:	4b0d      	ldr	r3, [pc, #52]	; (8b178 <DataDisplay+0xac>)
   8b144:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b148:	b29b      	uxth	r3, r3
   8b14a:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   8b14c:	2307      	movs	r3, #7
   8b14e:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b150:	1d3b      	adds	r3, r7, #4
   8b152:	2204      	movs	r2, #4
   8b154:	4619      	mov	r1, r3
   8b156:	2037      	movs	r0, #55	; 0x37
   8b158:	4b04      	ldr	r3, [pc, #16]	; (8b16c <DataDisplay+0xa0>)
   8b15a:	4798      	blx	r3
// 	cl_tdata.Twobyte = TS2_slope * 100;
// 	cl_tdata.bytearray[2] = 15;
// 	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
//****************************************
}
   8b15c:	bf00      	nop
   8b15e:	3708      	adds	r7, #8
   8b160:	46bd      	mov	sp, r7
   8b162:	bd80      	pop	{r7, pc}
   8b164:	20071894 	.word	0x20071894
   8b168:	000a8381 	.word	0x000a8381
   8b16c:	0009cbd5 	.word	0x0009cbd5
   8b170:	20071898 	.word	0x20071898
   8b174:	2007189c 	.word	0x2007189c
   8b178:	20071886 	.word	0x20071886

0008b17c <Hot_Rinse>:


void Hot_Rinse()
{
   8b17c:	b590      	push	{r4, r7, lr}
   8b17e:	b083      	sub	sp, #12
   8b180:	af00      	add	r7, sp, #0
		int16_t sensordata;
		
		count_500ms ++;
   8b182:	4b8a      	ldr	r3, [pc, #552]	; (8b3ac <Hot_Rinse+0x230>)
   8b184:	881b      	ldrh	r3, [r3, #0]
   8b186:	3301      	adds	r3, #1
   8b188:	b29a      	uxth	r2, r3
   8b18a:	4b88      	ldr	r3, [pc, #544]	; (8b3ac <Hot_Rinse+0x230>)
   8b18c:	801a      	strh	r2, [r3, #0]
		if (count_500ms > 600)
   8b18e:	4b87      	ldr	r3, [pc, #540]	; (8b3ac <Hot_Rinse+0x230>)
   8b190:	881b      	ldrh	r3, [r3, #0]
   8b192:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   8b196:	d902      	bls.n	8b19e <Hot_Rinse+0x22>
		{
			flag_5min =1;
   8b198:	4b85      	ldr	r3, [pc, #532]	; (8b3b0 <Hot_Rinse+0x234>)
   8b19a:	2201      	movs	r2, #1
   8b19c:	701a      	strb	r2, [r3, #0]
		}
		if(HeaterState == CL_HEATER_STATE_OFF  )
   8b19e:	4b85      	ldr	r3, [pc, #532]	; (8b3b4 <Hot_Rinse+0x238>)
   8b1a0:	781b      	ldrb	r3, [r3, #0]
   8b1a2:	2b04      	cmp	r3, #4
   8b1a4:	d102      	bne.n	8b1ac <Hot_Rinse+0x30>
		{
			sv_cntrl_poweroffheater();
   8b1a6:	4b84      	ldr	r3, [pc, #528]	; (8b3b8 <Hot_Rinse+0x23c>)
   8b1a8:	4798      	blx	r3
			return;
   8b1aa:	e0fb      	b.n	8b3a4 <Hot_Rinse+0x228>
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   8b1ac:	4b81      	ldr	r3, [pc, #516]	; (8b3b4 <Hot_Rinse+0x238>)
   8b1ae:	781b      	ldrb	r3, [r3, #0]
   8b1b0:	2b00      	cmp	r3, #0
   8b1b2:	f000 80f6 	beq.w	8b3a2 <Hot_Rinse+0x226>
   8b1b6:	4b7f      	ldr	r3, [pc, #508]	; (8b3b4 <Hot_Rinse+0x238>)
   8b1b8:	781b      	ldrb	r3, [r3, #0]
   8b1ba:	2b00      	cmp	r3, #0
   8b1bc:	f000 80f1 	beq.w	8b3a2 <Hot_Rinse+0x226>
			return;
		}
		//avg_duty is set to value 2240 for TS3 = 37.4 at global level
		
		
		if(HeaterState == CL_HEATER_STATE_ON)
   8b1c0:	4b7c      	ldr	r3, [pc, #496]	; (8b3b4 <Hot_Rinse+0x238>)
   8b1c2:	781b      	ldrb	r3, [r3, #0]
   8b1c4:	2b01      	cmp	r3, #1
   8b1c6:	d107      	bne.n	8b1d8 <Hot_Rinse+0x5c>
		{
			sv_cntrl_poweronheater();
   8b1c8:	4b7c      	ldr	r3, [pc, #496]	; (8b3bc <Hot_Rinse+0x240>)
   8b1ca:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   8b1cc:	4b7c      	ldr	r3, [pc, #496]	; (8b3c0 <Hot_Rinse+0x244>)
   8b1ce:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b1d2:	4618      	mov	r0, r3
   8b1d4:	4b7b      	ldr	r3, [pc, #492]	; (8b3c4 <Hot_Rinse+0x248>)
   8b1d6:	4798      	blx	r3
// 			Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// 			Tmp1Val = Tmp1Val - 2.5 + 1.2;
// 		}
// 		
// 		if (!(count_500ms %40))
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   8b1d8:	4b7b      	ldr	r3, [pc, #492]	; (8b3c8 <Hot_Rinse+0x24c>)
   8b1da:	681b      	ldr	r3, [r3, #0]
   8b1dc:	4a7b      	ldr	r2, [pc, #492]	; (8b3cc <Hot_Rinse+0x250>)
   8b1de:	6013      	str	r3, [r2, #0]
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8b1e0:	1dbb      	adds	r3, r7, #6
   8b1e2:	4619      	mov	r1, r3
   8b1e4:	2013      	movs	r0, #19
   8b1e6:	4b7a      	ldr	r3, [pc, #488]	; (8b3d0 <Hot_Rinse+0x254>)
   8b1e8:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
// 			res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
// 			Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
// 			Tmp2Val = Tmp2Val - - 0.4;                                     // sensor offset

			Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   8b1ea:	4b77      	ldr	r3, [pc, #476]	; (8b3c8 <Hot_Rinse+0x24c>)
   8b1ec:	681a      	ldr	r2, [r3, #0]
   8b1ee:	4b79      	ldr	r3, [pc, #484]	; (8b3d4 <Hot_Rinse+0x258>)
   8b1f0:	4979      	ldr	r1, [pc, #484]	; (8b3d8 <Hot_Rinse+0x25c>)
   8b1f2:	4610      	mov	r0, r2
   8b1f4:	4798      	blx	r3
   8b1f6:	4603      	mov	r3, r0
   8b1f8:	461c      	mov	r4, r3
   8b1fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8b1fe:	4b77      	ldr	r3, [pc, #476]	; (8b3dc <Hot_Rinse+0x260>)
   8b200:	4610      	mov	r0, r2
   8b202:	4798      	blx	r3
   8b204:	4602      	mov	r2, r0
   8b206:	4b76      	ldr	r3, [pc, #472]	; (8b3e0 <Hot_Rinse+0x264>)
   8b208:	4976      	ldr	r1, [pc, #472]	; (8b3e4 <Hot_Rinse+0x268>)
   8b20a:	4610      	mov	r0, r2
   8b20c:	4798      	blx	r3
   8b20e:	4603      	mov	r3, r0
   8b210:	461a      	mov	r2, r3
   8b212:	4b75      	ldr	r3, [pc, #468]	; (8b3e8 <Hot_Rinse+0x26c>)
   8b214:	4611      	mov	r1, r2
   8b216:	4620      	mov	r0, r4
   8b218:	4798      	blx	r3
   8b21a:	4603      	mov	r3, r0
   8b21c:	461a      	mov	r2, r3
   8b21e:	4b70      	ldr	r3, [pc, #448]	; (8b3e0 <Hot_Rinse+0x264>)
   8b220:	4972      	ldr	r1, [pc, #456]	; (8b3ec <Hot_Rinse+0x270>)
   8b222:	4610      	mov	r0, r2
   8b224:	4798      	blx	r3
   8b226:	4603      	mov	r3, r0
   8b228:	461a      	mov	r2, r3
   8b22a:	4b67      	ldr	r3, [pc, #412]	; (8b3c8 <Hot_Rinse+0x24c>)
   8b22c:	601a      	str	r2, [r3, #0]
//			Tmp2Val = (float)sensordata/100;
		}
		
		if (!(count_500ms %20))
   8b22e:	4b5f      	ldr	r3, [pc, #380]	; (8b3ac <Hot_Rinse+0x230>)
   8b230:	881a      	ldrh	r2, [r3, #0]
   8b232:	4b6f      	ldr	r3, [pc, #444]	; (8b3f0 <Hot_Rinse+0x274>)
   8b234:	fba3 1302 	umull	r1, r3, r3, r2
   8b238:	0919      	lsrs	r1, r3, #4
   8b23a:	460b      	mov	r3, r1
   8b23c:	009b      	lsls	r3, r3, #2
   8b23e:	440b      	add	r3, r1
   8b240:	009b      	lsls	r3, r3, #2
   8b242:	1ad3      	subs	r3, r2, r3
   8b244:	b29b      	uxth	r3, r3
   8b246:	2b00      	cmp	r3, #0
   8b248:	d103      	bne.n	8b252 <Hot_Rinse+0xd6>
		{
			Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   8b24a:	4b6a      	ldr	r3, [pc, #424]	; (8b3f4 <Hot_Rinse+0x278>)
   8b24c:	681b      	ldr	r3, [r3, #0]
   8b24e:	4a6a      	ldr	r2, [pc, #424]	; (8b3f8 <Hot_Rinse+0x27c>)
   8b250:	6013      	str	r3, [r2, #0]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   8b252:	1dbb      	adds	r3, r7, #6
   8b254:	4619      	mov	r1, r3
   8b256:	2014      	movs	r0, #20
   8b258:	4b5d      	ldr	r3, [pc, #372]	; (8b3d0 <Hot_Rinse+0x254>)
   8b25a:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
// 			res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 			Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //			Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
// 			Tmp3Val = Tmp3Val - - 0.4;										// sensor offset
			Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   8b25c:	4b65      	ldr	r3, [pc, #404]	; (8b3f4 <Hot_Rinse+0x278>)
   8b25e:	681a      	ldr	r2, [r3, #0]
   8b260:	4b5c      	ldr	r3, [pc, #368]	; (8b3d4 <Hot_Rinse+0x258>)
   8b262:	495d      	ldr	r1, [pc, #372]	; (8b3d8 <Hot_Rinse+0x25c>)
   8b264:	4610      	mov	r0, r2
   8b266:	4798      	blx	r3
   8b268:	4603      	mov	r3, r0
   8b26a:	461c      	mov	r4, r3
   8b26c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8b270:	4b5a      	ldr	r3, [pc, #360]	; (8b3dc <Hot_Rinse+0x260>)
   8b272:	4610      	mov	r0, r2
   8b274:	4798      	blx	r3
   8b276:	4602      	mov	r2, r0
   8b278:	4b59      	ldr	r3, [pc, #356]	; (8b3e0 <Hot_Rinse+0x264>)
   8b27a:	495a      	ldr	r1, [pc, #360]	; (8b3e4 <Hot_Rinse+0x268>)
   8b27c:	4610      	mov	r0, r2
   8b27e:	4798      	blx	r3
   8b280:	4603      	mov	r3, r0
   8b282:	461a      	mov	r2, r3
   8b284:	4b58      	ldr	r3, [pc, #352]	; (8b3e8 <Hot_Rinse+0x26c>)
   8b286:	4611      	mov	r1, r2
   8b288:	4620      	mov	r0, r4
   8b28a:	4798      	blx	r3
   8b28c:	4603      	mov	r3, r0
   8b28e:	461a      	mov	r2, r3
   8b290:	4b53      	ldr	r3, [pc, #332]	; (8b3e0 <Hot_Rinse+0x264>)
   8b292:	4956      	ldr	r1, [pc, #344]	; (8b3ec <Hot_Rinse+0x270>)
   8b294:	4610      	mov	r0, r2
   8b296:	4798      	blx	r3
   8b298:	4603      	mov	r3, r0
   8b29a:	461a      	mov	r2, r3
   8b29c:	4b55      	ldr	r3, [pc, #340]	; (8b3f4 <Hot_Rinse+0x278>)
   8b29e:	601a      	str	r2, [r3, #0]
//			Tmp3Val = (float)sensordata /100;
		}
		
	if (flag_5min)
   8b2a0:	4b43      	ldr	r3, [pc, #268]	; (8b3b0 <Hot_Rinse+0x234>)
   8b2a2:	781b      	ldrb	r3, [r3, #0]
   8b2a4:	2b00      	cmp	r3, #0
   8b2a6:	d07d      	beq.n	8b3a4 <Hot_Rinse+0x228>
	{
	
		
		if (!(count_500ms %30))
   8b2a8:	4b40      	ldr	r3, [pc, #256]	; (8b3ac <Hot_Rinse+0x230>)
   8b2aa:	881a      	ldrh	r2, [r3, #0]
   8b2ac:	4b53      	ldr	r3, [pc, #332]	; (8b3fc <Hot_Rinse+0x280>)
   8b2ae:	fba3 1302 	umull	r1, r3, r3, r2
   8b2b2:	0919      	lsrs	r1, r3, #4
   8b2b4:	460b      	mov	r3, r1
   8b2b6:	011b      	lsls	r3, r3, #4
   8b2b8:	1a5b      	subs	r3, r3, r1
   8b2ba:	005b      	lsls	r3, r3, #1
   8b2bc:	1ad3      	subs	r3, r2, r3
   8b2be:	b29b      	uxth	r3, r3
   8b2c0:	2b00      	cmp	r3, #0
   8b2c2:	d16f      	bne.n	8b3a4 <Hot_Rinse+0x228>
		{
			
		
			if ((Tmp2Val - 80) > 5 )     
   8b2c4:	4b40      	ldr	r3, [pc, #256]	; (8b3c8 <Hot_Rinse+0x24c>)
   8b2c6:	681a      	ldr	r2, [r3, #0]
   8b2c8:	4b4d      	ldr	r3, [pc, #308]	; (8b400 <Hot_Rinse+0x284>)
   8b2ca:	494e      	ldr	r1, [pc, #312]	; (8b404 <Hot_Rinse+0x288>)
   8b2cc:	4610      	mov	r0, r2
   8b2ce:	4798      	blx	r3
   8b2d0:	4603      	mov	r3, r0
   8b2d2:	461a      	mov	r2, r3
   8b2d4:	4b4c      	ldr	r3, [pc, #304]	; (8b408 <Hot_Rinse+0x28c>)
   8b2d6:	494d      	ldr	r1, [pc, #308]	; (8b40c <Hot_Rinse+0x290>)
   8b2d8:	4610      	mov	r0, r2
   8b2da:	4798      	blx	r3
   8b2dc:	4603      	mov	r3, r0
   8b2de:	2b00      	cmp	r3, #0
   8b2e0:	d014      	beq.n	8b30c <Hot_Rinse+0x190>
			{
				avg_duty = avg_duty - 100;
   8b2e2:	4b37      	ldr	r3, [pc, #220]	; (8b3c0 <Hot_Rinse+0x244>)
   8b2e4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b2e8:	b29b      	uxth	r3, r3
   8b2ea:	3b64      	subs	r3, #100	; 0x64
   8b2ec:	b29b      	uxth	r3, r3
   8b2ee:	b21a      	sxth	r2, r3
   8b2f0:	4b33      	ldr	r3, [pc, #204]	; (8b3c0 <Hot_Rinse+0x244>)
   8b2f2:	801a      	strh	r2, [r3, #0]
				if (avg_duty <2500)
   8b2f4:	4b32      	ldr	r3, [pc, #200]	; (8b3c0 <Hot_Rinse+0x244>)
   8b2f6:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b2fa:	f640 12c3 	movw	r2, #2499	; 0x9c3
   8b2fe:	4293      	cmp	r3, r2
   8b300:	dc48      	bgt.n	8b394 <Hot_Rinse+0x218>
				{
					avg_duty = 2500;
   8b302:	4b2f      	ldr	r3, [pc, #188]	; (8b3c0 <Hot_Rinse+0x244>)
   8b304:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b308:	801a      	strh	r2, [r3, #0]
   8b30a:	e043      	b.n	8b394 <Hot_Rinse+0x218>
				}
			
			}
			else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
   8b30c:	4b2e      	ldr	r3, [pc, #184]	; (8b3c8 <Hot_Rinse+0x24c>)
   8b30e:	681a      	ldr	r2, [r3, #0]
   8b310:	4b3b      	ldr	r3, [pc, #236]	; (8b400 <Hot_Rinse+0x284>)
   8b312:	4611      	mov	r1, r2
   8b314:	483e      	ldr	r0, [pc, #248]	; (8b410 <Hot_Rinse+0x294>)
   8b316:	4798      	blx	r3
   8b318:	4603      	mov	r3, r0
   8b31a:	461a      	mov	r2, r3
   8b31c:	4b3a      	ldr	r3, [pc, #232]	; (8b408 <Hot_Rinse+0x28c>)
   8b31e:	493b      	ldr	r1, [pc, #236]	; (8b40c <Hot_Rinse+0x290>)
   8b320:	4610      	mov	r0, r2
   8b322:	4798      	blx	r3
   8b324:	4603      	mov	r3, r0
   8b326:	2b00      	cmp	r3, #0
   8b328:	d01d      	beq.n	8b366 <Hot_Rinse+0x1ea>
   8b32a:	4b32      	ldr	r3, [pc, #200]	; (8b3f4 <Hot_Rinse+0x278>)
   8b32c:	681a      	ldr	r2, [r3, #0]
   8b32e:	4b39      	ldr	r3, [pc, #228]	; (8b414 <Hot_Rinse+0x298>)
   8b330:	4939      	ldr	r1, [pc, #228]	; (8b418 <Hot_Rinse+0x29c>)
   8b332:	4610      	mov	r0, r2
   8b334:	4798      	blx	r3
   8b336:	4603      	mov	r3, r0
   8b338:	2b00      	cmp	r3, #0
   8b33a:	d014      	beq.n	8b366 <Hot_Rinse+0x1ea>
			{
				avg_duty = avg_duty + 80;
   8b33c:	4b20      	ldr	r3, [pc, #128]	; (8b3c0 <Hot_Rinse+0x244>)
   8b33e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b342:	b29b      	uxth	r3, r3
   8b344:	3350      	adds	r3, #80	; 0x50
   8b346:	b29b      	uxth	r3, r3
   8b348:	b21a      	sxth	r2, r3
   8b34a:	4b1d      	ldr	r3, [pc, #116]	; (8b3c0 <Hot_Rinse+0x244>)
   8b34c:	801a      	strh	r2, [r3, #0]
				if (avg_duty >3500)
   8b34e:	4b1c      	ldr	r3, [pc, #112]	; (8b3c0 <Hot_Rinse+0x244>)
   8b350:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b354:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b358:	4293      	cmp	r3, r2
   8b35a:	dd1b      	ble.n	8b394 <Hot_Rinse+0x218>
				{
					avg_duty = 3500;
   8b35c:	4b18      	ldr	r3, [pc, #96]	; (8b3c0 <Hot_Rinse+0x244>)
   8b35e:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b362:	801a      	strh	r2, [r3, #0]
			
			}
			else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
			{
				avg_duty = avg_duty + 80;
				if (avg_duty >3500)
   8b364:	e016      	b.n	8b394 <Hot_Rinse+0x218>
				{
					avg_duty = 3500;
				}
			}
		
			else if ((Tmp3Val <= 80) && (Tmp3Val >= 70))
   8b366:	4b23      	ldr	r3, [pc, #140]	; (8b3f4 <Hot_Rinse+0x278>)
   8b368:	681a      	ldr	r2, [r3, #0]
   8b36a:	4b2a      	ldr	r3, [pc, #168]	; (8b414 <Hot_Rinse+0x298>)
   8b36c:	4925      	ldr	r1, [pc, #148]	; (8b404 <Hot_Rinse+0x288>)
   8b36e:	4610      	mov	r0, r2
   8b370:	4798      	blx	r3
   8b372:	4603      	mov	r3, r0
   8b374:	2b00      	cmp	r3, #0
   8b376:	d00d      	beq.n	8b394 <Hot_Rinse+0x218>
   8b378:	4b1e      	ldr	r3, [pc, #120]	; (8b3f4 <Hot_Rinse+0x278>)
   8b37a:	681a      	ldr	r2, [r3, #0]
   8b37c:	4b27      	ldr	r3, [pc, #156]	; (8b41c <Hot_Rinse+0x2a0>)
   8b37e:	4926      	ldr	r1, [pc, #152]	; (8b418 <Hot_Rinse+0x29c>)
   8b380:	4610      	mov	r0, r2
   8b382:	4798      	blx	r3
   8b384:	4603      	mov	r3, r0
   8b386:	2b00      	cmp	r3, #0
   8b388:	d004      	beq.n	8b394 <Hot_Rinse+0x218>
			{
				avg_duty = avg_duty;
   8b38a:	4b0d      	ldr	r3, [pc, #52]	; (8b3c0 <Hot_Rinse+0x244>)
   8b38c:	f9b3 2000 	ldrsh.w	r2, [r3]
   8b390:	4b0b      	ldr	r3, [pc, #44]	; (8b3c0 <Hot_Rinse+0x244>)
   8b392:	801a      	strh	r2, [r3, #0]
			}
		
			sv_cntrl_incheater(avg_duty);
   8b394:	4b0a      	ldr	r3, [pc, #40]	; (8b3c0 <Hot_Rinse+0x244>)
   8b396:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b39a:	4618      	mov	r0, r3
   8b39c:	4b09      	ldr	r3, [pc, #36]	; (8b3c4 <Hot_Rinse+0x248>)
   8b39e:	4798      	blx	r3
   8b3a0:	e000      	b.n	8b3a4 <Hot_Rinse+0x228>
			sv_cntrl_poweroffheater();
			return;
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
		{
			return;
   8b3a2:	bf00      	nop
			sv_cntrl_incheater(avg_duty);
		
		}
	}
	
}
   8b3a4:	370c      	adds	r7, #12
   8b3a6:	46bd      	mov	sp, r7
   8b3a8:	bd90      	pop	{r4, r7, pc}
   8b3aa:	bf00      	nop
   8b3ac:	200718a0 	.word	0x200718a0
   8b3b0:	200718bd 	.word	0x200718bd
   8b3b4:	20071883 	.word	0x20071883
   8b3b8:	0009adcd 	.word	0x0009adcd
   8b3bc:	0009adb9 	.word	0x0009adb9
   8b3c0:	20071886 	.word	0x20071886
   8b3c4:	0009aec1 	.word	0x0009aec1
   8b3c8:	20071898 	.word	0x20071898
   8b3cc:	200718b0 	.word	0x200718b0
   8b3d0:	0008fa01 	.word	0x0008fa01
   8b3d4:	000a7fa9 	.word	0x000a7fa9
   8b3d8:	41100000 	.word	0x41100000
   8b3dc:	000a7f01 	.word	0x000a7f01
   8b3e0:	000a8111 	.word	0x000a8111
   8b3e4:	42c80000 	.word	0x42c80000
   8b3e8:	000a7d99 	.word	0x000a7d99
   8b3ec:	41200000 	.word	0x41200000
   8b3f0:	cccccccd 	.word	0xcccccccd
   8b3f4:	2007189c 	.word	0x2007189c
   8b3f8:	200720cc 	.word	0x200720cc
   8b3fc:	88888889 	.word	0x88888889
   8b400:	000a7d95 	.word	0x000a7d95
   8b404:	42a00000 	.word	0x42a00000
   8b408:	000a8321 	.word	0x000a8321
   8b40c:	40a00000 	.word	0x40a00000
   8b410:	42960000 	.word	0x42960000
   8b414:	000a82f9 	.word	0x000a82f9
   8b418:	428c0000 	.word	0x428c0000
   8b41c:	000a830d 	.word	0x000a830d

0008b420 <Cl_Init_Controller>:
extern Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;

Cl_ReturnCodeType  Cl_Init_Controller(Cl_Mac_EventsType Cl_MacInitEvent)
{
   8b420:	b580      	push	{r7, lr}
   8b422:	b090      	sub	sp, #64	; 0x40
   8b424:	af00      	add	r7, sp, #0
   8b426:	4603      	mov	r3, r0
   8b428:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_initcode = CL_OK;
   8b42a:	2300      	movs	r3, #0
   8b42c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8b430:	2300      	movs	r3, #0
   8b432:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8b436:	2300      	movs	r3, #0
   8b438:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8b43a:	f107 0239 	add.w	r2, r7, #57	; 0x39
   8b43e:	79fb      	ldrb	r3, [r7, #7]
   8b440:	4611      	mov	r1, r2
   8b442:	4618      	mov	r0, r3
   8b444:	4b82      	ldr	r3, [pc, #520]	; (8b650 <Cl_Init_Controller+0x230>)
   8b446:	4798      	blx	r3
	switch (Cl_Init_States)
   8b448:	4b82      	ldr	r3, [pc, #520]	; (8b654 <Cl_Init_Controller+0x234>)
   8b44a:	781b      	ldrb	r3, [r3, #0]
   8b44c:	2b08      	cmp	r3, #8
   8b44e:	f200 80f8 	bhi.w	8b642 <Cl_Init_Controller+0x222>
   8b452:	a201      	add	r2, pc, #4	; (adr r2, 8b458 <Cl_Init_Controller+0x38>)
   8b454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b458:	0008b47d 	.word	0x0008b47d
   8b45c:	0008b58b 	.word	0x0008b58b
   8b460:	0008b5b5 	.word	0x0008b5b5
   8b464:	0008b643 	.word	0x0008b643
   8b468:	0008b643 	.word	0x0008b643
   8b46c:	0008b5dd 	.word	0x0008b5dd
   8b470:	0008b643 	.word	0x0008b643
   8b474:	0008b643 	.word	0x0008b643
   8b478:	0008b60d 	.word	0x0008b60d
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8b47c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b480:	2b01      	cmp	r3, #1
   8b482:	d000      	beq.n	8b486 <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8b484:	e080      	b.n	8b588 <Cl_Init_Controller+0x168>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8b486:	4b73      	ldr	r3, [pc, #460]	; (8b654 <Cl_Init_Controller+0x234>)
   8b488:	2201      	movs	r2, #1
   8b48a:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8b48c:	2302      	movs	r3, #2
   8b48e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b492:	231a      	movs	r3, #26
   8b494:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b498:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b49c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b4a0:	2201      	movs	r2, #1
   8b4a2:	4618      	mov	r0, r3
   8b4a4:	4b6c      	ldr	r3, [pc, #432]	; (8b658 <Cl_Init_Controller+0x238>)
   8b4a6:	4798      	blx	r3
   8b4a8:	4603      	mov	r3, r0
   8b4aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8b4ae:	4b69      	ldr	r3, [pc, #420]	; (8b654 <Cl_Init_Controller+0x234>)
   8b4b0:	2205      	movs	r2, #5
   8b4b2:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8b4b4:	2305      	movs	r3, #5
   8b4b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b4ba:	231a      	movs	r3, #26
   8b4bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b4c0:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b4c4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b4c8:	2201      	movs	r2, #1
   8b4ca:	4618      	mov	r0, r3
   8b4cc:	4b62      	ldr	r3, [pc, #392]	; (8b658 <Cl_Init_Controller+0x238>)
   8b4ce:	4798      	blx	r3
   8b4d0:	4603      	mov	r3, r0
   8b4d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8b4d6:	e00d      	b.n	8b4f4 <Cl_Init_Controller+0xd4>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8b4d8:	4a60      	ldr	r2, [pc, #384]	; (8b65c <Cl_Init_Controller+0x23c>)
   8b4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b4dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b4e2:	009b      	lsls	r3, r3, #2
   8b4e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8b4e8:	440b      	add	r3, r1
   8b4ea:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8b4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b4f0:	3301      	adds	r3, #1
   8b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b4f6:	2b09      	cmp	r3, #9
   8b4f8:	ddee      	ble.n	8b4d8 <Cl_Init_Controller+0xb8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8b4fa:	2300      	movs	r3, #0
   8b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8b4fe:	e00f      	b.n	8b520 <Cl_Init_Controller+0x100>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8b500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b502:	009b      	lsls	r3, r3, #2
   8b504:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8b508:	4413      	add	r3, r2
   8b50a:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8b50e:	4953      	ldr	r1, [pc, #332]	; (8b65c <Cl_Init_Controller+0x23c>)
   8b510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b512:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8b516:	429a      	cmp	r2, r3
   8b518:	d106      	bne.n	8b528 <Cl_Init_Controller+0x108>
							{
								// test FAILed
								break;
							}
							count++;
   8b51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b51c:	3301      	adds	r3, #1
   8b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8b520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b522:	2b09      	cmp	r3, #9
   8b524:	ddec      	ble.n	8b500 <Cl_Init_Controller+0xe0>
   8b526:	e000      	b.n	8b52a <Cl_Init_Controller+0x10a>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
							{
								// test FAILed
								break;
   8b528:	bf00      	nop
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8b52a:	4b4a      	ldr	r3, [pc, #296]	; (8b654 <Cl_Init_Controller+0x234>)
   8b52c:	2207      	movs	r2, #7
   8b52e:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8b530:	2307      	movs	r3, #7
   8b532:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b536:	231a      	movs	r3, #26
   8b538:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b53c:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b540:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b544:	2201      	movs	r2, #1
   8b546:	4618      	mov	r0, r3
   8b548:	4b43      	ldr	r3, [pc, #268]	; (8b658 <Cl_Init_Controller+0x238>)
   8b54a:	4798      	blx	r3
   8b54c:	4603      	mov	r3, r0
   8b54e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8b552:	4b40      	ldr	r3, [pc, #256]	; (8b654 <Cl_Init_Controller+0x234>)
   8b554:	2208      	movs	r2, #8
   8b556:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8b558:	2308      	movs	r3, #8
   8b55a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8b55e:	231b      	movs	r3, #27
   8b560:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8b564:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b568:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b56c:	2200      	movs	r2, #0
   8b56e:	4618      	mov	r0, r3
   8b570:	4b39      	ldr	r3, [pc, #228]	; (8b658 <Cl_Init_Controller+0x238>)
   8b572:	4798      	blx	r3
   8b574:	4603      	mov	r3, r0
   8b576:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8b57a:	2000      	movs	r0, #0
   8b57c:	4b38      	ldr	r3, [pc, #224]	; (8b660 <Cl_Init_Controller+0x240>)
   8b57e:	4798      	blx	r3
   8b580:	4603      	mov	r3, r0
   8b582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8b586:	bf00      	nop
						default:break;
					}
		break;
   8b588:	e05c      	b.n	8b644 <Cl_Init_Controller+0x224>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8b58a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b58e:	3b02      	subs	r3, #2
   8b590:	2b04      	cmp	r3, #4
   8b592:	d80d      	bhi.n	8b5b0 <Cl_Init_Controller+0x190>
   8b594:	a201      	add	r2, pc, #4	; (adr r2, 8b59c <Cl_Init_Controller+0x17c>)
   8b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b59a:	bf00      	nop
   8b59c:	0008b5b1 	.word	0x0008b5b1
   8b5a0:	0008b5b1 	.word	0x0008b5b1
   8b5a4:	0008b5b1 	.word	0x0008b5b1
   8b5a8:	0008b5b1 	.word	0x0008b5b1
   8b5ac:	0008b5b1 	.word	0x0008b5b1
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b5b0:	bf00      	nop
					}
		break;
   8b5b2:	e047      	b.n	8b644 <Cl_Init_Controller+0x224>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8b5b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b5b8:	3b02      	subs	r3, #2
   8b5ba:	2b04      	cmp	r3, #4
   8b5bc:	d80c      	bhi.n	8b5d8 <Cl_Init_Controller+0x1b8>
   8b5be:	a201      	add	r2, pc, #4	; (adr r2, 8b5c4 <Cl_Init_Controller+0x1a4>)
   8b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b5c4:	0008b5d9 	.word	0x0008b5d9
   8b5c8:	0008b5d9 	.word	0x0008b5d9
   8b5cc:	0008b5d9 	.word	0x0008b5d9
   8b5d0:	0008b5d9 	.word	0x0008b5d9
   8b5d4:	0008b5d9 	.word	0x0008b5d9
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b5d8:	bf00      	nop
					}
		break;
   8b5da:	e033      	b.n	8b644 <Cl_Init_Controller+0x224>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8b5dc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b5e0:	3b02      	subs	r3, #2
   8b5e2:	2b04      	cmp	r3, #4
   8b5e4:	d810      	bhi.n	8b608 <Cl_Init_Controller+0x1e8>
   8b5e6:	a201      	add	r2, pc, #4	; (adr r2, 8b5ec <Cl_Init_Controller+0x1cc>)
   8b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b5ec:	0008b609 	.word	0x0008b609
   8b5f0:	0008b609 	.word	0x0008b609
   8b5f4:	0008b601 	.word	0x0008b601
   8b5f8:	0008b609 	.word	0x0008b609
   8b5fc:	0008b609 	.word	0x0008b609
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8b600:	4b14      	ldr	r3, [pc, #80]	; (8b654 <Cl_Init_Controller+0x234>)
   8b602:	2208      	movs	r2, #8
   8b604:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8b606:	e000      	b.n	8b60a <Cl_Init_Controller+0x1ea>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b608:	bf00      	nop
					}
		break;
   8b60a:	e01b      	b.n	8b644 <Cl_Init_Controller+0x224>
		case CL_INIT_READY:
							switch(cl_initevent)
   8b60c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b610:	3b02      	subs	r3, #2
   8b612:	2b04      	cmp	r3, #4
   8b614:	d813      	bhi.n	8b63e <Cl_Init_Controller+0x21e>
   8b616:	a201      	add	r2, pc, #4	; (adr r2, 8b61c <Cl_Init_Controller+0x1fc>)
   8b618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b61c:	0008b63f 	.word	0x0008b63f
   8b620:	0008b63f 	.word	0x0008b63f
   8b624:	0008b631 	.word	0x0008b631
   8b628:	0008b63f 	.word	0x0008b63f
   8b62c:	0008b63f 	.word	0x0008b63f
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8b630:	2043      	movs	r0, #67	; 0x43
   8b632:	4b0c      	ldr	r3, [pc, #48]	; (8b664 <Cl_Init_Controller+0x244>)
   8b634:	4798      	blx	r3
   8b636:	4603      	mov	r3, r0
   8b638:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8b63c:	e000      	b.n	8b640 <Cl_Init_Controller+0x220>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8b63e:	bf00      	nop
							}
					

		break;
   8b640:	e000      	b.n	8b644 <Cl_Init_Controller+0x224>

			
			default: break;
   8b642:	bf00      	nop
	}
return CL_OK;	
   8b644:	2300      	movs	r3, #0
}
   8b646:	4618      	mov	r0, r3
   8b648:	3740      	adds	r7, #64	; 0x40
   8b64a:	46bd      	mov	sp, r7
   8b64c:	bd80      	pop	{r7, pc}
   8b64e:	bf00      	nop
   8b650:	0008b669 	.word	0x0008b669
   8b654:	200718be 	.word	0x200718be
   8b658:	0009cbd5 	.word	0x0009cbd5
   8b65c:	200704dc 	.word	0x200704dc
   8b660:	000905f1 	.word	0x000905f1
   8b664:	0008b715 	.word	0x0008b715

0008b668 <cl_init_translatemacevent>:

Cl_ReturnCodeType  cl_init_translatemacevent(Cl_Mac_EventsType Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8b668:	b480      	push	{r7}
   8b66a:	b083      	sub	sp, #12
   8b66c:	af00      	add	r7, sp, #0
   8b66e:	4603      	mov	r3, r0
   8b670:	6039      	str	r1, [r7, #0]
   8b672:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8b674:	79fb      	ldrb	r3, [r7, #7]
   8b676:	3b2a      	subs	r3, #42	; 0x2a
   8b678:	2b13      	cmp	r3, #19
   8b67a:	d843      	bhi.n	8b704 <cl_init_translatemacevent+0x9c>
   8b67c:	a201      	add	r2, pc, #4	; (adr r2, 8b684 <cl_init_translatemacevent+0x1c>)
   8b67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b682:	bf00      	nop
   8b684:	0008b6d5 	.word	0x0008b6d5
   8b688:	0008b705 	.word	0x0008b705
   8b68c:	0008b705 	.word	0x0008b705
   8b690:	0008b705 	.word	0x0008b705
   8b694:	0008b705 	.word	0x0008b705
   8b698:	0008b705 	.word	0x0008b705
   8b69c:	0008b705 	.word	0x0008b705
   8b6a0:	0008b705 	.word	0x0008b705
   8b6a4:	0008b705 	.word	0x0008b705
   8b6a8:	0008b705 	.word	0x0008b705
   8b6ac:	0008b705 	.word	0x0008b705
   8b6b0:	0008b705 	.word	0x0008b705
   8b6b4:	0008b705 	.word	0x0008b705
   8b6b8:	0008b705 	.word	0x0008b705
   8b6bc:	0008b705 	.word	0x0008b705
   8b6c0:	0008b6dd 	.word	0x0008b6dd
   8b6c4:	0008b6e5 	.word	0x0008b6e5
   8b6c8:	0008b6ed 	.word	0x0008b6ed
   8b6cc:	0008b6f5 	.word	0x0008b6f5
   8b6d0:	0008b6fd 	.word	0x0008b6fd
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8b6d4:	683b      	ldr	r3, [r7, #0]
   8b6d6:	2201      	movs	r2, #1
   8b6d8:	701a      	strb	r2, [r3, #0]
		break;
   8b6da:	e014      	b.n	8b706 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8b6dc:	683b      	ldr	r3, [r7, #0]
   8b6de:	2202      	movs	r2, #2
   8b6e0:	701a      	strb	r2, [r3, #0]
		break;
   8b6e2:	e010      	b.n	8b706 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8b6e4:	683b      	ldr	r3, [r7, #0]
   8b6e6:	2203      	movs	r2, #3
   8b6e8:	701a      	strb	r2, [r3, #0]
		break;
   8b6ea:	e00c      	b.n	8b706 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8b6ec:	683b      	ldr	r3, [r7, #0]
   8b6ee:	2204      	movs	r2, #4
   8b6f0:	701a      	strb	r2, [r3, #0]
		break;		
   8b6f2:	e008      	b.n	8b706 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8b6f4:	683b      	ldr	r3, [r7, #0]
   8b6f6:	2205      	movs	r2, #5
   8b6f8:	701a      	strb	r2, [r3, #0]
		break;	
   8b6fa:	e004      	b.n	8b706 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8b6fc:	683b      	ldr	r3, [r7, #0]
   8b6fe:	2206      	movs	r2, #6
   8b700:	701a      	strb	r2, [r3, #0]
		break;
   8b702:	e000      	b.n	8b706 <cl_init_translatemacevent+0x9e>
		default:
		break;
   8b704:	bf00      	nop
	}
	return CL_OK;
   8b706:	2300      	movs	r3, #0
}
   8b708:	4618      	mov	r0, r3
   8b70a:	370c      	adds	r7, #12
   8b70c:	46bd      	mov	sp, r7
   8b70e:	bc80      	pop	{r7}
   8b710:	4770      	bx	lr
   8b712:	bf00      	nop

0008b714 <Cl_mac_apprequesthandler>:


Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType);

Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType cl_macirq)
{
   8b714:	b480      	push	{r7}
   8b716:	b085      	sub	sp, #20
   8b718:	af00      	add	r7, sp, #0
   8b71a:	4603      	mov	r3, r0
   8b71c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_Mac_RetVal = CL_OK;
   8b71e:	2300      	movs	r3, #0
   8b720:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEventQueue1.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8b722:	4b0d      	ldr	r3, [pc, #52]	; (8b758 <Cl_mac_apprequesthandler+0x44>)
   8b724:	781b      	ldrb	r3, [r3, #0]
   8b726:	2b09      	cmp	r3, #9
   8b728:	d80f      	bhi.n	8b74a <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = cl_macirq ;
   8b72a:	4b0b      	ldr	r3, [pc, #44]	; (8b758 <Cl_mac_apprequesthandler+0x44>)
   8b72c:	781b      	ldrb	r3, [r3, #0]
   8b72e:	461a      	mov	r2, r3
   8b730:	4b09      	ldr	r3, [pc, #36]	; (8b758 <Cl_mac_apprequesthandler+0x44>)
   8b732:	4413      	add	r3, r2
   8b734:	79fa      	ldrb	r2, [r7, #7]
   8b736:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   8b738:	4b07      	ldr	r3, [pc, #28]	; (8b758 <Cl_mac_apprequesthandler+0x44>)
   8b73a:	2201      	movs	r2, #1
   8b73c:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   8b73e:	4b06      	ldr	r3, [pc, #24]	; (8b758 <Cl_mac_apprequesthandler+0x44>)
   8b740:	781b      	ldrb	r3, [r3, #0]
   8b742:	3301      	adds	r3, #1
   8b744:	b2da      	uxtb	r2, r3
   8b746:	4b04      	ldr	r3, [pc, #16]	; (8b758 <Cl_mac_apprequesthandler+0x44>)
   8b748:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8b74a:	7bfb      	ldrb	r3, [r7, #15]
   8b74c:	4618      	mov	r0, r3
   8b74e:	3714      	adds	r7, #20
   8b750:	46bd      	mov	sp, r7
   8b752:	bc80      	pop	{r7}
   8b754:	4770      	bx	lr
   8b756:	bf00      	nop
   8b758:	20072270 	.word	0x20072270

0008b75c <main>:
extern Cl_Uint8Type cur_datasize;
extern Cl_Uint8Type flag_hotcitric, flag_hotrinse,flag_na , flag_citric;
Cl_Uint8Type queue_sequence_counter = 0;
int main(void)

{
   8b75c:	b580      	push	{r7, lr}
   8b75e:	b084      	sub	sp, #16
   8b760:	af00      	add	r7, sp, #0
	   
	Cl_ReturnCodeType 	 Cl_MacRetval = CL_ERROR;
   8b762:	2304      	movs	r3, #4
   8b764:	73fb      	strb	r3, [r7, #15]
	Cl_Mac_EventsType Cl_MacstbEvent = EVT_NULL;
   8b766:	2300      	movs	r3, #0
   8b768:	72fb      	strb	r3, [r7, #11]
	Cl_Uint8Type Cl_MacEventData = 0;
   8b76a:	2300      	movs	r3, #0
   8b76c:	72bb      	strb	r3, [r7, #10]
	static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	Cl_Uint16Type temp100;
	   cl_Datastreamtype cl_temp  ;
	board_init();
   8b76e:	4b99      	ldr	r3, [pc, #612]	; (8b9d4 <main+0x278>)
   8b770:	4798      	blx	r3
	sysclk_init();	
   8b772:	4b99      	ldr	r3, [pc, #612]	; (8b9d8 <main+0x27c>)
   8b774:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8b776:	4b99      	ldr	r3, [pc, #612]	; (8b9dc <main+0x280>)
   8b778:	4798      	blx	r3
	                                                                                           
//	udc_start();
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8b77a:	200b      	movs	r0, #11
   8b77c:	4b98      	ldr	r3, [pc, #608]	; (8b9e0 <main+0x284>)
   8b77e:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8b780:	2016      	movs	r0, #22
   8b782:	4b97      	ldr	r3, [pc, #604]	; (8b9e0 <main+0x284>)
   8b784:	4798      	blx	r3

	sv_cntrl_activatepump(DCMOTOR1);
   8b786:	2001      	movs	r0, #1
   8b788:	4b96      	ldr	r3, [pc, #600]	; (8b9e4 <main+0x288>)
   8b78a:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   8b78c:	2002      	movs	r0, #2
   8b78e:	4b95      	ldr	r3, [pc, #596]	; (8b9e4 <main+0x288>)
   8b790:	4798      	blx	r3
	sv_cntrl_activatepump(UFPUMP);
   8b792:	2004      	movs	r0, #4
   8b794:	4b93      	ldr	r3, [pc, #588]	; (8b9e4 <main+0x288>)
   8b796:	4798      	blx	r3
	sv_cntrl_activatepump(HEPARINPUMP);
   8b798:	2005      	movs	r0, #5
   8b79a:	4b92      	ldr	r3, [pc, #584]	; (8b9e4 <main+0x288>)
   8b79c:	4798      	blx	r3

	sv_cntrl_deactivatepump(DCMOTOR1);
   8b79e:	2001      	movs	r0, #1
   8b7a0:	4b91      	ldr	r3, [pc, #580]	; (8b9e8 <main+0x28c>)
   8b7a2:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   8b7a4:	2002      	movs	r0, #2
   8b7a6:	4b90      	ldr	r3, [pc, #576]	; (8b9e8 <main+0x28c>)
   8b7a8:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   8b7aa:	2004      	movs	r0, #4
   8b7ac:	4b8e      	ldr	r3, [pc, #568]	; (8b9e8 <main+0x28c>)
   8b7ae:	4798      	blx	r3
	sv_cntrl_deactivatepump(HEPARINPUMP);
   8b7b0:	2005      	movs	r0, #5
   8b7b2:	4b8d      	ldr	r3, [pc, #564]	; (8b9e8 <main+0x28c>)
   8b7b4:	4798      	blx	r3
	
// 	sv_cntrl_setpumpspeed(DCMOTOR2,1400);
// 	sv_cntrl_activatepump(DCMOTOR2);
   
	Cl_MacRetval = Cl_MacInit(); 	
   8b7b6:	4b8d      	ldr	r3, [pc, #564]	; (8b9ec <main+0x290>)
   8b7b8:	4798      	blx	r3
   8b7ba:	4603      	mov	r3, r0
   8b7bc:	73fb      	strb	r3, [r7, #15]
	for(temp100 = 1;temp100<=20; temp100++)
   8b7be:	2301      	movs	r3, #1
   8b7c0:	81bb      	strh	r3, [r7, #12]
   8b7c2:	e00a      	b.n	8b7da <main+0x7e>
	{
		sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8b7c4:	89bb      	ldrh	r3, [r7, #12]
   8b7c6:	b2db      	uxtb	r3, r3
   8b7c8:	4618      	mov	r0, r3
   8b7ca:	4b89      	ldr	r3, [pc, #548]	; (8b9f0 <main+0x294>)
   8b7cc:	4798      	blx	r3
		cl_wait(10);
   8b7ce:	200a      	movs	r0, #10
   8b7d0:	4b88      	ldr	r3, [pc, #544]	; (8b9f4 <main+0x298>)
   8b7d2:	4798      	blx	r3
	
// 	sv_cntrl_setpumpspeed(DCMOTOR2,1400);
// 	sv_cntrl_activatepump(DCMOTOR2);
   
	Cl_MacRetval = Cl_MacInit(); 	
	for(temp100 = 1;temp100<=20; temp100++)
   8b7d4:	89bb      	ldrh	r3, [r7, #12]
   8b7d6:	3301      	adds	r3, #1
   8b7d8:	81bb      	strh	r3, [r7, #12]
   8b7da:	89bb      	ldrh	r3, [r7, #12]
   8b7dc:	2b14      	cmp	r3, #20
   8b7de:	d9f1      	bls.n	8b7c4 <main+0x68>
//	SV_CS_SET_POT(3800);				  
//	sv_cs_setpotvalue(3800);


	
	sv_cntrl_resetoutput(29,PA);                         //  V1 Hardware control disabled
   8b7e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8b7e4:	201d      	movs	r0, #29
   8b7e6:	4b84      	ldr	r3, [pc, #528]	; (8b9f8 <main+0x29c>)
   8b7e8:	4798      	blx	r3
	sv_cntrl_setoutput(10,PB);                            //  V1 on Software control    
   8b7ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8b7ee:	200a      	movs	r0, #10
   8b7f0:	4b82      	ldr	r3, [pc, #520]	; (8b9fc <main+0x2a0>)
   8b7f2:	4798      	blx	r3
	sv_cntrl_resetoutput(27,PC);
   8b7f4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8b7f8:	201b      	movs	r0, #27
   8b7fa:	4b7f      	ldr	r3, [pc, #508]	; (8b9f8 <main+0x29c>)
   8b7fc:	4798      	blx	r3
	sv_cntrl_setoutput(14,PB);                            // Blood Pump Power Control    
   8b7fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8b802:	200e      	movs	r0, #14
   8b804:	4b7d      	ldr	r3, [pc, #500]	; (8b9fc <main+0x2a0>)
   8b806:	4798      	blx	r3
	
	sv_cntrl_setoutput(2,PD);
   8b808:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8b80c:	2002      	movs	r0, #2
   8b80e:	4b7b      	ldr	r3, [pc, #492]	; (8b9fc <main+0x2a0>)
   8b810:	4798      	blx	r3
	
	
	
	
	sv_cntrl_buzzer();
   8b812:	4b7b      	ldr	r3, [pc, #492]	; (8ba00 <main+0x2a4>)
   8b814:	4798      	blx	r3
	sv_cntrl_nobuzzer();
   8b816:	4b7b      	ldr	r3, [pc, #492]	; (8ba04 <main+0x2a8>)
   8b818:	4798      	blx	r3
	sv_cntrl_setyellowalarm();
   8b81a:	4b7b      	ldr	r3, [pc, #492]	; (8ba08 <main+0x2ac>)
   8b81c:	4798      	blx	r3
	sv_cntrl_resetyellowalarm();
   8b81e:	4b7b      	ldr	r3, [pc, #492]	; (8ba0c <main+0x2b0>)
   8b820:	4798      	blx	r3
	sv_cntrl_setredalarm();
   8b822:	4b7b      	ldr	r3, [pc, #492]	; (8ba10 <main+0x2b4>)
   8b824:	4798      	blx	r3
	sv_cntrl_resetredalarm();
   8b826:	4b7b      	ldr	r3, [pc, #492]	; (8ba14 <main+0x2b8>)
   8b828:	4798      	blx	r3
	sv_cntrl_setgreenalarm();
   8b82a:	4b7b      	ldr	r3, [pc, #492]	; (8ba18 <main+0x2bc>)
   8b82c:	4798      	blx	r3
	sv_cntrl_resetgreenalarm();
   8b82e:	4b7b      	ldr	r3, [pc, #492]	; (8ba1c <main+0x2c0>)
   8b830:	4798      	blx	r3
// 	sv_status_getsystemstatus(&temp_sensor_struct);
// 	;
// 	
// }
	
	sv_cntrl_activate_valve( VALVE_ID17);
   8b832:	2011      	movs	r0, #17
   8b834:	4b7a      	ldr	r3, [pc, #488]	; (8ba20 <main+0x2c4>)
   8b836:	4798      	blx	r3
	
	Cl_MacRetval = Cl_App_init(); 
   8b838:	4b7a      	ldr	r3, [pc, #488]	; (8ba24 <main+0x2c8>)
   8b83a:	4798      	blx	r3
   8b83c:	4603      	mov	r3, r0
   8b83e:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8b840:	7bfb      	ldrb	r3, [r7, #15]
   8b842:	2b00      	cmp	r3, #0
   8b844:	d001      	beq.n	8b84a <main+0xee>
   8b846:	4b78      	ldr	r3, [pc, #480]	; (8ba28 <main+0x2cc>)
   8b848:	4798      	blx	r3
	
	if( Cl_MacRetval != CL_OK)
	{
		// Handle error
	}
	Cl_MacRetval = Cl_Mac_Configure();
   8b84a:	4b78      	ldr	r3, [pc, #480]	; (8ba2c <main+0x2d0>)
   8b84c:	4798      	blx	r3
   8b84e:	4603      	mov	r3, r0
   8b850:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8b852:	7bfb      	ldrb	r3, [r7, #15]
   8b854:	2b00      	cmp	r3, #0
   8b856:	d001      	beq.n	8b85c <main+0x100>
   8b858:	4b73      	ldr	r3, [pc, #460]	; (8ba28 <main+0x2cc>)
   8b85a:	4798      	blx	r3
		}		
	//	 if ( Cl_MacRetval == CL_ACCEPTED)
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			
			Cl_MacState = MAC_CONSOLE_SYNC;
   8b85c:	4b74      	ldr	r3, [pc, #464]	; (8ba30 <main+0x2d4>)
   8b85e:	2204      	movs	r2, #4
   8b860:	701a      	strb	r2, [r3, #0]
			Cl_MacRetval = CL_ERROR;
   8b862:	2304      	movs	r3, #4
   8b864:	73fb      	strb	r3, [r7, #15]
			Cl_MacRetval = Cl_Console_Console_Sync();
   8b866:	4b73      	ldr	r3, [pc, #460]	; (8ba34 <main+0x2d8>)
   8b868:	4798      	blx	r3
   8b86a:	4603      	mov	r3, r0
   8b86c:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8b86e:	7bfb      	ldrb	r3, [r7, #15]
   8b870:	2b00      	cmp	r3, #0
   8b872:	d001      	beq.n	8b878 <main+0x11c>
   8b874:	4b6c      	ldr	r3, [pc, #432]	; (8ba28 <main+0x2cc>)
   8b876:	4798      	blx	r3
			if(Cl_MacRetval == CL_OK)
   8b878:	7bfb      	ldrb	r3, [r7, #15]
   8b87a:	2b00      	cmp	r3, #0
   8b87c:	d105      	bne.n	8b88a <main+0x12e>
			{
				cl_sys_state = CL_SYS_STATE_WAIT_FOR_MODE;
   8b87e:	4b6e      	ldr	r3, [pc, #440]	; (8ba38 <main+0x2dc>)
   8b880:	2201      	movs	r2, #1
   8b882:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8b884:	4b6a      	ldr	r3, [pc, #424]	; (8ba30 <main+0x2d4>)
   8b886:	2202      	movs	r2, #2
   8b888:	701a      	strb	r2, [r3, #0]
	while (FOREVER)  // LOOP MAIN
	{

//sv_cntrl_setyellowalarm();
//sv_cntrl_deactivate_valve( VALVE_ID18);
	Cl_Mac_StateDummy = Cl_MacState;
   8b88a:	4b69      	ldr	r3, [pc, #420]	; (8ba30 <main+0x2d4>)
   8b88c:	781a      	ldrb	r2, [r3, #0]
   8b88e:	4b6b      	ldr	r3, [pc, #428]	; (8ba3c <main+0x2e0>)
   8b890:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8b892:	4b6b      	ldr	r3, [pc, #428]	; (8ba40 <main+0x2e4>)
   8b894:	681b      	ldr	r3, [r3, #0]
   8b896:	4a6b      	ldr	r2, [pc, #428]	; (8ba44 <main+0x2e8>)
   8b898:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8b89a:	4b6b      	ldr	r3, [pc, #428]	; (8ba48 <main+0x2ec>)
   8b89c:	4798      	blx	r3
   8b89e:	4603      	mov	r3, r0
   8b8a0:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforBCEvent();
   8b8a2:	4b6a      	ldr	r3, [pc, #424]	; (8ba4c <main+0x2f0>)
   8b8a4:	4798      	blx	r3
   8b8a6:	4603      	mov	r3, r0
   8b8a8:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforAlarms();
   8b8aa:	4b69      	ldr	r3, [pc, #420]	; (8ba50 <main+0x2f4>)
   8b8ac:	4798      	blx	r3
   8b8ae:	4603      	mov	r3, r0
   8b8b0:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8b8b2:	7bfb      	ldrb	r3, [r7, #15]
   8b8b4:	2b00      	cmp	r3, #0
   8b8b6:	d001      	beq.n	8b8bc <main+0x160>
   8b8b8:	4b5b      	ldr	r3, [pc, #364]	; (8ba28 <main+0x2cc>)
   8b8ba:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8b8bc:	4b65      	ldr	r3, [pc, #404]	; (8ba54 <main+0x2f8>)
   8b8be:	4798      	blx	r3
   8b8c0:	4603      	mov	r3, r0
   8b8c2:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8b8c4:	7bfb      	ldrb	r3, [r7, #15]
   8b8c6:	2b00      	cmp	r3, #0
   8b8c8:	d001      	beq.n	8b8ce <main+0x172>
   8b8ca:	4b57      	ldr	r3, [pc, #348]	; (8ba28 <main+0x2cc>)
   8b8cc:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		// TODO :  check for ret val
		delayticks = g_ul_ms_ticks - ul_cur_ticks; // testing-debugging
   8b8ce:	4b5c      	ldr	r3, [pc, #368]	; (8ba40 <main+0x2e4>)
   8b8d0:	681a      	ldr	r2, [r3, #0]
   8b8d2:	4b5c      	ldr	r3, [pc, #368]	; (8ba44 <main+0x2e8>)
   8b8d4:	681b      	ldr	r3, [r3, #0]
   8b8d6:	1ad3      	subs	r3, r2, r3
   8b8d8:	4a5f      	ldr	r2, [pc, #380]	; (8ba58 <main+0x2fc>)
   8b8da:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8b8dc:	2032      	movs	r0, #50	; 0x32
   8b8de:	4b5f      	ldr	r3, [pc, #380]	; (8ba5c <main+0x300>)
   8b8e0:	4798      	blx	r3
   8b8e2:	4603      	mov	r3, r0
   8b8e4:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8b8e6:	7bfb      	ldrb	r3, [r7, #15]
   8b8e8:	2b00      	cmp	r3, #0
   8b8ea:	f002 8272 	beq.w	8ddd2 <main+0x2676>
   8b8ee:	4b4e      	ldr	r3, [pc, #312]	; (8ba28 <main+0x2cc>)
   8b8f0:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue3.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8b8f2:	f002 ba6e 	b.w	8ddd2 <main+0x2676>
		
		{
		Cl_MacEvent = EVT_NULL;
   8b8f6:	4b5a      	ldr	r3, [pc, #360]	; (8ba60 <main+0x304>)
   8b8f8:	2200      	movs	r2, #0
   8b8fa:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8b8fc:	4b59      	ldr	r3, [pc, #356]	; (8ba64 <main+0x308>)
   8b8fe:	4798      	blx	r3
   8b900:	4603      	mov	r3, r0
   8b902:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8b904:	7bfb      	ldrb	r3, [r7, #15]
   8b906:	2b00      	cmp	r3, #0
   8b908:	d001      	beq.n	8b90e <main+0x1b2>
   8b90a:	4b47      	ldr	r3, [pc, #284]	; (8ba28 <main+0x2cc>)
   8b90c:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

		if(Cl_MacNewEvent)
   8b90e:	4b56      	ldr	r3, [pc, #344]	; (8ba68 <main+0x30c>)
   8b910:	781b      	ldrb	r3, [r3, #0]
   8b912:	2b00      	cmp	r3, #0
   8b914:	f002 825d 	beq.w	8ddd2 <main+0x2676>
		
		{
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8b918:	4b51      	ldr	r3, [pc, #324]	; (8ba60 <main+0x304>)
   8b91a:	781b      	ldrb	r3, [r3, #0]
   8b91c:	4618      	mov	r0, r3
   8b91e:	4b4f      	ldr	r3, [pc, #316]	; (8ba5c <main+0x300>)
   8b920:	4798      	blx	r3
   8b922:	4603      	mov	r3, r0
   8b924:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8b926:	7bfb      	ldrb	r3, [r7, #15]
   8b928:	2b00      	cmp	r3, #0
   8b92a:	d001      	beq.n	8b930 <main+0x1d4>
   8b92c:	4b3e      	ldr	r3, [pc, #248]	; (8ba28 <main+0x2cc>)
   8b92e:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8b930:	4b4b      	ldr	r3, [pc, #300]	; (8ba60 <main+0x304>)
   8b932:	781b      	ldrb	r3, [r3, #0]
   8b934:	2b02      	cmp	r3, #2
   8b936:	d102      	bne.n	8b93e <main+0x1e2>
				}
				else{
					// again send 
			//		Cl_SendDatatoconsole(cur_command, cur_data,cur_datasize);
				}
				ConsoleSync = true;
   8b938:	4b4c      	ldr	r3, [pc, #304]	; (8ba6c <main+0x310>)
   8b93a:	2201      	movs	r2, #1
   8b93c:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8b93e:	4b48      	ldr	r3, [pc, #288]	; (8ba60 <main+0x304>)
   8b940:	781b      	ldrb	r3, [r3, #0]
   8b942:	2b01      	cmp	r3, #1
   8b944:	d111      	bne.n	8b96a <main+0x20e>
			{
				//send sync
				Cl_Uint8Type data = CON_RX_COMMAND_SYNC;
   8b946:	2303      	movs	r3, #3
   8b948:	70fb      	strb	r3, [r7, #3]
				ConsoleSync = true;
   8b94a:	4b48      	ldr	r3, [pc, #288]	; (8ba6c <main+0x310>)
   8b94c:	2201      	movs	r2, #1
   8b94e:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8b950:	1cfb      	adds	r3, r7, #3
   8b952:	2201      	movs	r2, #1
   8b954:	4619      	mov	r1, r3
   8b956:	2004      	movs	r0, #4
   8b958:	4b45      	ldr	r3, [pc, #276]	; (8ba70 <main+0x314>)
   8b95a:	4798      	blx	r3
   8b95c:	4603      	mov	r3, r0
   8b95e:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8b960:	7bfb      	ldrb	r3, [r7, #15]
   8b962:	2b00      	cmp	r3, #0
   8b964:	d001      	beq.n	8b96a <main+0x20e>
   8b966:	4b30      	ldr	r3, [pc, #192]	; (8ba28 <main+0x2cc>)
   8b968:	4798      	blx	r3
				}
				
			}			
			
			
				switch (Cl_MacState)
   8b96a:	4b31      	ldr	r3, [pc, #196]	; (8ba30 <main+0x2d4>)
   8b96c:	781b      	ldrb	r3, [r3, #0]
   8b96e:	3b01      	subs	r3, #1
   8b970:	2b15      	cmp	r3, #21
   8b972:	f202 8222 	bhi.w	8ddba <main+0x265e>
   8b976:	a201      	add	r2, pc, #4	; (adr r2, 8b97c <main+0x220>)
   8b978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b97c:	0008ddbb 	.word	0x0008ddbb
   8b980:	0008ba75 	.word	0x0008ba75
   8b984:	0008ddbb 	.word	0x0008ddbb
   8b988:	0008ddbb 	.word	0x0008ddbb
   8b98c:	0008bb85 	.word	0x0008bb85
   8b990:	0008c2fd 	.word	0x0008c2fd
   8b994:	0008c3b3 	.word	0x0008c3b3
   8b998:	0008c09f 	.word	0x0008c09f
   8b99c:	0008ddbb 	.word	0x0008ddbb
   8b9a0:	0008c693 	.word	0x0008c693
   8b9a4:	0008c9f7 	.word	0x0008c9f7
   8b9a8:	0008ccb1 	.word	0x0008ccb1
   8b9ac:	0008cecf 	.word	0x0008cecf
   8b9b0:	0008cef9 	.word	0x0008cef9
   8b9b4:	0008d6cd 	.word	0x0008d6cd
   8b9b8:	0008d985 	.word	0x0008d985
   8b9bc:	0008db83 	.word	0x0008db83
   8b9c0:	0008ddb3 	.word	0x0008ddb3
   8b9c4:	0008ddb7 	.word	0x0008ddb7
   8b9c8:	0008d165 	.word	0x0008d165
   8b9cc:	0008d495 	.word	0x0008d495
   8b9d0:	0008bed1 	.word	0x0008bed1
   8b9d4:	0009b815 	.word	0x0009b815
   8b9d8:	0008044d 	.word	0x0008044d
   8b9dc:	0009b675 	.word	0x0009b675
   8b9e0:	0009bf9d 	.word	0x0009bf9d
   8b9e4:	0009ad41 	.word	0x0009ad41
   8b9e8:	0009ad7d 	.word	0x0009ad7d
   8b9ec:	0008de3d 	.word	0x0008de3d
   8b9f0:	0009ae01 	.word	0x0009ae01
   8b9f4:	00093ea9 	.word	0x00093ea9
   8b9f8:	0009b0ed 	.word	0x0009b0ed
   8b9fc:	0009b0cd 	.word	0x0009b0cd
   8ba00:	0009b069 	.word	0x0009b069
   8ba04:	0009b0b9 	.word	0x0009b0b9
   8ba08:	0009b041 	.word	0x0009b041
   8ba0c:	0009b091 	.word	0x0009b091
   8ba10:	0009b02d 	.word	0x0009b02d
   8ba14:	0009b07d 	.word	0x0009b07d
   8ba18:	0009b055 	.word	0x0009b055
   8ba1c:	0009b0a5 	.word	0x0009b0a5
   8ba20:	0009ade1 	.word	0x0009ade1
   8ba24:	0008df11 	.word	0x0008df11
   8ba28:	00088aa9 	.word	0x00088aa9
   8ba2c:	0008dfd9 	.word	0x0008dfd9
   8ba30:	20070504 	.word	0x20070504
   8ba34:	0009cffd 	.word	0x0009cffd
   8ba38:	200718c0 	.word	0x200718c0
   8ba3c:	20072569 	.word	0x20072569
   8ba40:	20071980 	.word	0x20071980
   8ba44:	200722cc 	.word	0x200722cc
   8ba48:	0008dffd 	.word	0x0008dffd
   8ba4c:	0008e415 	.word	0x0008e415
   8ba50:	0008e3e9 	.word	0x0008e3e9
   8ba54:	0008e02d 	.word	0x0008e02d
   8ba58:	20072448 	.word	0x20072448
   8ba5c:	00088ab9 	.word	0x00088ab9
   8ba60:	200718bf 	.word	0x200718bf
   8ba64:	0008e0ad 	.word	0x0008e0ad
   8ba68:	200718c1 	.word	0x200718c1
   8ba6c:	20070505 	.word	0x20070505
   8ba70:	0009cbd5 	.word	0x0009cbd5
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8ba74:	4bb4      	ldr	r3, [pc, #720]	; (8bd48 <main+0x5ec>)
   8ba76:	781b      	ldrb	r3, [r3, #0]
   8ba78:	3b2a      	subs	r3, #42	; 0x2a
   8ba7a:	2b19      	cmp	r3, #25
   8ba7c:	d87c      	bhi.n	8bb78 <main+0x41c>
   8ba7e:	a201      	add	r2, pc, #4	; (adr r2, 8ba84 <main+0x328>)
   8ba80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ba84:	0008baed 	.word	0x0008baed
   8ba88:	0008bb79 	.word	0x0008bb79
   8ba8c:	0008bb79 	.word	0x0008bb79
   8ba90:	0008bb79 	.word	0x0008bb79
   8ba94:	0008bb79 	.word	0x0008bb79
   8ba98:	0008bb79 	.word	0x0008bb79
   8ba9c:	0008bb79 	.word	0x0008bb79
   8baa0:	0008bb79 	.word	0x0008bb79
   8baa4:	0008bb79 	.word	0x0008bb79
   8baa8:	0008bb79 	.word	0x0008bb79
   8baac:	0008bb79 	.word	0x0008bb79
   8bab0:	0008bb79 	.word	0x0008bb79
   8bab4:	0008bb79 	.word	0x0008bb79
   8bab8:	0008bb79 	.word	0x0008bb79
   8babc:	0008bb79 	.word	0x0008bb79
   8bac0:	0008bb59 	.word	0x0008bb59
   8bac4:	0008bb79 	.word	0x0008bb79
   8bac8:	0008bb59 	.word	0x0008bb59
   8bacc:	0008bb59 	.word	0x0008bb59
   8bad0:	0008bb59 	.word	0x0008bb59
   8bad4:	0008bb79 	.word	0x0008bb79
   8bad8:	0008bb79 	.word	0x0008bb79
   8badc:	0008bb79 	.word	0x0008bb79
   8bae0:	0008bb79 	.word	0x0008bb79
   8bae4:	0008bb79 	.word	0x0008bb79
   8bae8:	0008bb0d 	.word	0x0008bb0d
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8baec:	4b96      	ldr	r3, [pc, #600]	; (8bd48 <main+0x5ec>)
   8baee:	781b      	ldrb	r3, [r3, #0]
   8baf0:	4618      	mov	r0, r3
   8baf2:	4b96      	ldr	r3, [pc, #600]	; (8bd4c <main+0x5f0>)
   8baf4:	4798      	blx	r3
   8baf6:	4603      	mov	r3, r0
   8baf8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8bafa:	7bfb      	ldrb	r3, [r7, #15]
   8bafc:	2b00      	cmp	r3, #0
   8bafe:	d001      	beq.n	8bb04 <main+0x3a8>
   8bb00:	4b93      	ldr	r3, [pc, #588]	; (8bd50 <main+0x5f4>)
   8bb02:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
								// Handle error
								}
			
							Cl_MacEvent = EVT_NULL;
   8bb04:	4b90      	ldr	r3, [pc, #576]	; (8bd48 <main+0x5ec>)
   8bb06:	2200      	movs	r2, #0
   8bb08:	701a      	strb	r2, [r3, #0]
						break;
   8bb0a:	e039      	b.n	8bb80 <main+0x424>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8bb0c:	202b      	movs	r0, #43	; 0x2b
   8bb0e:	4b8f      	ldr	r3, [pc, #572]	; (8bd4c <main+0x5f0>)
   8bb10:	4798      	blx	r3
   8bb12:	4603      	mov	r3, r0
   8bb14:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8bb16:	7bfb      	ldrb	r3, [r7, #15]
   8bb18:	2b00      	cmp	r3, #0
   8bb1a:	d001      	beq.n	8bb20 <main+0x3c4>
   8bb1c:	4b8c      	ldr	r3, [pc, #560]	; (8bd50 <main+0x5f4>)
   8bb1e:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8bb20:	7bfb      	ldrb	r3, [r7, #15]
   8bb22:	2b00      	cmp	r3, #0
   8bb24:	d109      	bne.n	8bb3a <main+0x3de>
								{
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8bb26:	202b      	movs	r0, #43	; 0x2b
   8bb28:	4b8a      	ldr	r3, [pc, #552]	; (8bd54 <main+0x5f8>)
   8bb2a:	4798      	blx	r3
   8bb2c:	4603      	mov	r3, r0
   8bb2e:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8bb30:	7bfb      	ldrb	r3, [r7, #15]
   8bb32:	2b00      	cmp	r3, #0
   8bb34:	d001      	beq.n	8bb3a <main+0x3de>
   8bb36:	4b86      	ldr	r3, [pc, #536]	; (8bd50 <main+0x5f4>)
   8bb38:	4798      	blx	r3
								}
								
								if( Cl_MacRetval == CL_OK)
   8bb3a:	7bfb      	ldrb	r3, [r7, #15]
   8bb3c:	2b00      	cmp	r3, #0
   8bb3e:	d11e      	bne.n	8bb7e <main+0x422>
								{
									Cl_MacEvent = EVT_NULL;
   8bb40:	4b81      	ldr	r3, [pc, #516]	; (8bd48 <main+0x5ec>)
   8bb42:	2200      	movs	r2, #0
   8bb44:	701a      	strb	r2, [r3, #0]
									Cl_MacState =   MAC_STANDBY;
   8bb46:	4b84      	ldr	r3, [pc, #528]	; (8bd58 <main+0x5fc>)
   8bb48:	2205      	movs	r2, #5
   8bb4a:	701a      	strb	r2, [r3, #0]
									//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
									ASSERT_ERROR(Cl_MacRetval);
   8bb4c:	7bfb      	ldrb	r3, [r7, #15]
   8bb4e:	2b00      	cmp	r3, #0
   8bb50:	d015      	beq.n	8bb7e <main+0x422>
   8bb52:	4b7f      	ldr	r3, [pc, #508]	; (8bd50 <main+0x5f4>)
   8bb54:	4798      	blx	r3

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8bb56:	e012      	b.n	8bb7e <main+0x422>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8bb58:	4b7b      	ldr	r3, [pc, #492]	; (8bd48 <main+0x5ec>)
   8bb5a:	781b      	ldrb	r3, [r3, #0]
   8bb5c:	4618      	mov	r0, r3
   8bb5e:	4b7b      	ldr	r3, [pc, #492]	; (8bd4c <main+0x5f0>)
   8bb60:	4798      	blx	r3
   8bb62:	4603      	mov	r3, r0
   8bb64:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8bb66:	7bfb      	ldrb	r3, [r7, #15]
   8bb68:	2b00      	cmp	r3, #0
   8bb6a:	d001      	beq.n	8bb70 <main+0x414>
   8bb6c:	4b78      	ldr	r3, [pc, #480]	; (8bd50 <main+0x5f4>)
   8bb6e:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
							Cl_MacEvent = EVT_NULL;
   8bb70:	4b75      	ldr	r3, [pc, #468]	; (8bd48 <main+0x5ec>)
   8bb72:	2200      	movs	r2, #0
   8bb74:	701a      	strb	r2, [r3, #0]

						break;
   8bb76:	e003      	b.n	8bb80 <main+0x424>
						default: break;
   8bb78:	bf00      	nop
   8bb7a:	f002 b921 	b.w	8ddc0 <main+0x2664>

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8bb7e:	bf00      	nop
							Cl_MacEvent = EVT_NULL;

						break;
						default: break;
					}
					break;
   8bb80:	f002 b91e 	b.w	8ddc0 <main+0x2664>
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8bb84:	4b70      	ldr	r3, [pc, #448]	; (8bd48 <main+0x5ec>)
   8bb86:	781b      	ldrb	r3, [r3, #0]
   8bb88:	3b07      	subs	r3, #7
   8bb8a:	2b5b      	cmp	r3, #91	; 0x5b
   8bb8c:	f200 8197 	bhi.w	8bebe <main+0x762>
   8bb90:	a201      	add	r2, pc, #4	; (adr r2, 8bb98 <main+0x43c>)
   8bb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bb96:	bf00      	nop
   8bb98:	0008bd5d 	.word	0x0008bd5d
   8bb9c:	0008bebf 	.word	0x0008bebf
   8bba0:	0008be4d 	.word	0x0008be4d
   8bba4:	0008bd29 	.word	0x0008bd29
   8bba8:	0008bd29 	.word	0x0008bd29
   8bbac:	0008bd29 	.word	0x0008bd29
   8bbb0:	0008bebf 	.word	0x0008bebf
   8bbb4:	0008bebf 	.word	0x0008bebf
   8bbb8:	0008bdbd 	.word	0x0008bdbd
   8bbbc:	0008bebf 	.word	0x0008bebf
   8bbc0:	0008bebf 	.word	0x0008bebf
   8bbc4:	0008bebf 	.word	0x0008bebf
   8bbc8:	0008bebf 	.word	0x0008bebf
   8bbcc:	0008bebf 	.word	0x0008bebf
   8bbd0:	0008bebf 	.word	0x0008bebf
   8bbd4:	0008bebf 	.word	0x0008bebf
   8bbd8:	0008bebf 	.word	0x0008bebf
   8bbdc:	0008bebf 	.word	0x0008bebf
   8bbe0:	0008bebf 	.word	0x0008bebf
   8bbe4:	0008bebf 	.word	0x0008bebf
   8bbe8:	0008bebf 	.word	0x0008bebf
   8bbec:	0008bebf 	.word	0x0008bebf
   8bbf0:	0008bebf 	.word	0x0008bebf
   8bbf4:	0008bebf 	.word	0x0008bebf
   8bbf8:	0008bebf 	.word	0x0008bebf
   8bbfc:	0008bebf 	.word	0x0008bebf
   8bc00:	0008bebf 	.word	0x0008bebf
   8bc04:	0008bebf 	.word	0x0008bebf
   8bc08:	0008bebf 	.word	0x0008bebf
   8bc0c:	0008bebf 	.word	0x0008bebf
   8bc10:	0008bebf 	.word	0x0008bebf
   8bc14:	0008bebf 	.word	0x0008bebf
   8bc18:	0008bebf 	.word	0x0008bebf
   8bc1c:	0008bebf 	.word	0x0008bebf
   8bc20:	0008bd09 	.word	0x0008bd09
   8bc24:	0008bebf 	.word	0x0008bebf
   8bc28:	0008bd29 	.word	0x0008bd29
   8bc2c:	0008bebf 	.word	0x0008bebf
   8bc30:	0008bd29 	.word	0x0008bd29
   8bc34:	0008bd29 	.word	0x0008bd29
   8bc38:	0008bebf 	.word	0x0008bebf
   8bc3c:	0008bebf 	.word	0x0008bebf
   8bc40:	0008bebf 	.word	0x0008bebf
   8bc44:	0008bebf 	.word	0x0008bebf
   8bc48:	0008bebf 	.word	0x0008bebf
   8bc4c:	0008bebf 	.word	0x0008bebf
   8bc50:	0008bebf 	.word	0x0008bebf
   8bc54:	0008bebf 	.word	0x0008bebf
   8bc58:	0008bebf 	.word	0x0008bebf
   8bc5c:	0008bebf 	.word	0x0008bebf
   8bc60:	0008bd29 	.word	0x0008bd29
   8bc64:	0008bebf 	.word	0x0008bebf
   8bc68:	0008bd29 	.word	0x0008bd29
   8bc6c:	0008bd29 	.word	0x0008bd29
   8bc70:	0008bd29 	.word	0x0008bd29
   8bc74:	0008bebf 	.word	0x0008bebf
   8bc78:	0008bdf9 	.word	0x0008bdf9
   8bc7c:	0008bebf 	.word	0x0008bebf
   8bc80:	0008bebf 	.word	0x0008bebf
   8bc84:	0008bebf 	.word	0x0008bebf
   8bc88:	0008bebf 	.word	0x0008bebf
   8bc8c:	0008bebf 	.word	0x0008bebf
   8bc90:	0008bebf 	.word	0x0008bebf
   8bc94:	0008bebf 	.word	0x0008bebf
   8bc98:	0008bebf 	.word	0x0008bebf
   8bc9c:	0008bebf 	.word	0x0008bebf
   8bca0:	0008bebf 	.word	0x0008bebf
   8bca4:	0008bebf 	.word	0x0008bebf
   8bca8:	0008bebf 	.word	0x0008bebf
   8bcac:	0008bebf 	.word	0x0008bebf
   8bcb0:	0008bebf 	.word	0x0008bebf
   8bcb4:	0008bebf 	.word	0x0008bebf
   8bcb8:	0008bebf 	.word	0x0008bebf
   8bcbc:	0008bebf 	.word	0x0008bebf
   8bcc0:	0008bebf 	.word	0x0008bebf
   8bcc4:	0008bebf 	.word	0x0008bebf
   8bcc8:	0008bebf 	.word	0x0008bebf
   8bccc:	0008bebf 	.word	0x0008bebf
   8bcd0:	0008bebf 	.word	0x0008bebf
   8bcd4:	0008bebf 	.word	0x0008bebf
   8bcd8:	0008bebf 	.word	0x0008bebf
   8bcdc:	0008bebf 	.word	0x0008bebf
   8bce0:	0008bebf 	.word	0x0008bebf
   8bce4:	0008bebf 	.word	0x0008bebf
   8bce8:	0008bd29 	.word	0x0008bd29
   8bcec:	0008bd29 	.word	0x0008bd29
   8bcf0:	0008bebf 	.word	0x0008bebf
   8bcf4:	0008bebf 	.word	0x0008bebf
   8bcf8:	0008bd29 	.word	0x0008bd29
   8bcfc:	0008bebf 	.word	0x0008bebf
   8bd00:	0008bebf 	.word	0x0008bebf
   8bd04:	0008bde3 	.word	0x0008bde3
				
					{
						
						case EVT_CONSOLE_COMMAND_CLR_ALARM:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8bd08:	4b0f      	ldr	r3, [pc, #60]	; (8bd48 <main+0x5ec>)
   8bd0a:	781b      	ldrb	r3, [r3, #0]
   8bd0c:	4618      	mov	r0, r3
   8bd0e:	4b11      	ldr	r3, [pc, #68]	; (8bd54 <main+0x5f8>)
   8bd10:	4798      	blx	r3
   8bd12:	4603      	mov	r3, r0
   8bd14:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8bd16:	7bfb      	ldrb	r3, [r7, #15]
   8bd18:	2b00      	cmp	r3, #0
   8bd1a:	d001      	beq.n	8bd20 <main+0x5c4>
   8bd1c:	4b0c      	ldr	r3, [pc, #48]	; (8bd50 <main+0x5f4>)
   8bd1e:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8bd20:	4b09      	ldr	r3, [pc, #36]	; (8bd48 <main+0x5ec>)
   8bd22:	2200      	movs	r2, #0
   8bd24:	701a      	strb	r2, [r3, #0]
							break;
   8bd26:	e0d1      	b.n	8becc <main+0x770>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8bd28:	4b07      	ldr	r3, [pc, #28]	; (8bd48 <main+0x5ec>)
   8bd2a:	781b      	ldrb	r3, [r3, #0]
   8bd2c:	4618      	mov	r0, r3
   8bd2e:	4b09      	ldr	r3, [pc, #36]	; (8bd54 <main+0x5f8>)
   8bd30:	4798      	blx	r3
   8bd32:	4603      	mov	r3, r0
   8bd34:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8bd36:	7bfb      	ldrb	r3, [r7, #15]
   8bd38:	2b00      	cmp	r3, #0
   8bd3a:	d001      	beq.n	8bd40 <main+0x5e4>
   8bd3c:	4b04      	ldr	r3, [pc, #16]	; (8bd50 <main+0x5f4>)
   8bd3e:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8bd40:	4b01      	ldr	r3, [pc, #4]	; (8bd48 <main+0x5ec>)
   8bd42:	2200      	movs	r2, #0
   8bd44:	701a      	strb	r2, [r3, #0]
							break;
   8bd46:	e0c1      	b.n	8becc <main+0x770>
   8bd48:	200718bf 	.word	0x200718bf
   8bd4c:	0008b421 	.word	0x0008b421
   8bd50:	00088aa9 	.word	0x00088aa9
   8bd54:	000a64b5 	.word	0x000a64b5
   8bd58:	20070504 	.word	0x20070504

					
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8bd5c:	4bad      	ldr	r3, [pc, #692]	; (8c014 <main+0x8b8>)
   8bd5e:	2200      	movs	r2, #0
   8bd60:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8bd62:	4bad      	ldr	r3, [pc, #692]	; (8c018 <main+0x8bc>)
   8bd64:	781b      	ldrb	r3, [r3, #0]
   8bd66:	4618      	mov	r0, r3
   8bd68:	4bac      	ldr	r3, [pc, #688]	; (8c01c <main+0x8c0>)
   8bd6a:	4798      	blx	r3
   8bd6c:	4603      	mov	r3, r0
   8bd6e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8bd70:	7bfb      	ldrb	r3, [r7, #15]
   8bd72:	2b00      	cmp	r3, #0
   8bd74:	d001      	beq.n	8bd7a <main+0x61e>
   8bd76:	4baa      	ldr	r3, [pc, #680]	; (8c020 <main+0x8c4>)
   8bd78:	4798      	blx	r3

							if(Cl_MacRetval == CL_OK)
   8bd7a:	7bfb      	ldrb	r3, [r7, #15]
   8bd7c:	2b00      	cmp	r3, #0
   8bd7e:	d10e      	bne.n	8bd9e <main+0x642>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bd80:	4ba5      	ldr	r3, [pc, #660]	; (8c018 <main+0x8bc>)
   8bd82:	781b      	ldrb	r3, [r3, #0]
   8bd84:	4618      	mov	r0, r3
   8bd86:	4ba7      	ldr	r3, [pc, #668]	; (8c024 <main+0x8c8>)
   8bd88:	4798      	blx	r3
   8bd8a:	4603      	mov	r3, r0
   8bd8c:	73fb      	strb	r3, [r7, #15]
								if(Cl_MacRetval != CL_REJECTED)
   8bd8e:	7bfb      	ldrb	r3, [r7, #15]
   8bd90:	2b03      	cmp	r3, #3
   8bd92:	d004      	beq.n	8bd9e <main+0x642>
								{
									ASSERT_ERROR(Cl_MacRetval);	
   8bd94:	7bfb      	ldrb	r3, [r7, #15]
   8bd96:	2b00      	cmp	r3, #0
   8bd98:	d001      	beq.n	8bd9e <main+0x642>
   8bd9a:	4ba1      	ldr	r3, [pc, #644]	; (8c020 <main+0x8c4>)
   8bd9c:	4798      	blx	r3
								}
								
							}							
							if( Cl_MacRetval == CL_OK)
   8bd9e:	7bfb      	ldrb	r3, [r7, #15]
   8bda0:	2b00      	cmp	r3, #0
   8bda2:	d107      	bne.n	8bdb4 <main+0x658>
							{
								Cl_MacState = MAC_RINSE;
   8bda4:	4ba0      	ldr	r3, [pc, #640]	; (8c028 <main+0x8cc>)
   8bda6:	2207      	movs	r2, #7
   8bda8:	701a      	strb	r2, [r3, #0]
								//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);			
   8bdaa:	7bfb      	ldrb	r3, [r7, #15]
   8bdac:	2b00      	cmp	r3, #0
   8bdae:	d001      	beq.n	8bdb4 <main+0x658>
   8bdb0:	4b9b      	ldr	r3, [pc, #620]	; (8c020 <main+0x8c4>)
   8bdb2:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// Handle error
							}
							Cl_MacEvent = EVT_NULL;
   8bdb4:	4b98      	ldr	r3, [pc, #608]	; (8c018 <main+0x8bc>)
   8bdb6:	2200      	movs	r2, #0
   8bdb8:	701a      	strb	r2, [r3, #0]
						break;
   8bdba:	e087      	b.n	8becc <main+0x770>
						case EVT_CONSOLE_COMMAND_START_PRIME:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8bdbc:	4b96      	ldr	r3, [pc, #600]	; (8c018 <main+0x8bc>)
   8bdbe:	781b      	ldrb	r3, [r3, #0]
   8bdc0:	4618      	mov	r0, r3
   8bdc2:	4b98      	ldr	r3, [pc, #608]	; (8c024 <main+0x8c8>)
   8bdc4:	4798      	blx	r3
   8bdc6:	4603      	mov	r3, r0
   8bdc8:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8bdca:	7bfb      	ldrb	r3, [r7, #15]
   8bdcc:	2b00      	cmp	r3, #0
   8bdce:	d001      	beq.n	8bdd4 <main+0x678>
   8bdd0:	4b93      	ldr	r3, [pc, #588]	; (8c020 <main+0x8c4>)
   8bdd2:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8bdd4:	7bfb      	ldrb	r3, [r7, #15]
   8bdd6:	2b00      	cmp	r3, #0
   8bdd8:	d174      	bne.n	8bec4 <main+0x768>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8bdda:	4b93      	ldr	r3, [pc, #588]	; (8c028 <main+0x8cc>)
   8bddc:	220a      	movs	r2, #10
   8bdde:	701a      	strb	r2, [r3, #0]
							else
							{
									// Handle error
							}
							
						break;
   8bde0:	e070      	b.n	8bec4 <main+0x768>
						case EVT_CONSOLE_COMMAND_SELFTEST_START:
					
						{
							
				//	Cl_MacRetval = Cl_selftest_init();
						Cl_MacRetval = self_test(Cl_MacEvent);
   8bde2:	4b8d      	ldr	r3, [pc, #564]	; (8c018 <main+0x8bc>)
   8bde4:	781b      	ldrb	r3, [r3, #0]
   8bde6:	4618      	mov	r0, r3
   8bde8:	4b90      	ldr	r3, [pc, #576]	; (8c02c <main+0x8d0>)
   8bdea:	4798      	blx	r3
   8bdec:	4603      	mov	r3, r0
   8bdee:	73fb      	strb	r3, [r7, #15]
						Cl_MacState = MAC_START_SELFTEST;
   8bdf0:	4b8d      	ldr	r3, [pc, #564]	; (8c028 <main+0x8cc>)
   8bdf2:	2216      	movs	r2, #22
   8bdf4:	701a      	strb	r2, [r3, #0]
// 						command = CON_TX_COMMAND_RINSE_STARTED;
// 						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
// 						
						}
						break;
   8bdf6:	e069      	b.n	8becc <main+0x770>
						//	ASSERT_ERROR(Cl_MacRetval);
						//	if( Cl_MacRetval == CL_OK)
						//	{
								
								
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8bdf8:	4b8d      	ldr	r3, [pc, #564]	; (8c030 <main+0x8d4>)
   8bdfa:	791b      	ldrb	r3, [r3, #4]
   8bdfc:	713b      	strb	r3, [r7, #4]
								if (cl_temp.bytearray[0] == 4)
   8bdfe:	793b      	ldrb	r3, [r7, #4]
   8be00:	2b04      	cmp	r3, #4
   8be02:	d103      	bne.n	8be0c <main+0x6b0>
								{
									flag_hotcitric = 1;
   8be04:	4b8b      	ldr	r3, [pc, #556]	; (8c034 <main+0x8d8>)
   8be06:	2201      	movs	r2, #1
   8be08:	701a      	strb	r2, [r3, #0]
   8be0a:	e005      	b.n	8be18 <main+0x6bc>
								}
								else if (cl_temp.bytearray[0] == 3)
   8be0c:	793b      	ldrb	r3, [r7, #4]
   8be0e:	2b03      	cmp	r3, #3
   8be10:	d102      	bne.n	8be18 <main+0x6bc>
								{
									flag_na = 1;
   8be12:	4b89      	ldr	r3, [pc, #548]	; (8c038 <main+0x8dc>)
   8be14:	2201      	movs	r2, #1
   8be16:	701a      	strb	r2, [r3, #0]
								}
								
								Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8be18:	4b7f      	ldr	r3, [pc, #508]	; (8c018 <main+0x8bc>)
   8be1a:	781b      	ldrb	r3, [r3, #0]
   8be1c:	4618      	mov	r0, r3
   8be1e:	4b87      	ldr	r3, [pc, #540]	; (8c03c <main+0x8e0>)
   8be20:	4798      	blx	r3
   8be22:	4603      	mov	r3, r0
   8be24:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8be26:	7bfb      	ldrb	r3, [r7, #15]
   8be28:	2b00      	cmp	r3, #0
   8be2a:	d001      	beq.n	8be30 <main+0x6d4>
   8be2c:	4b7c      	ldr	r3, [pc, #496]	; (8c020 <main+0x8c4>)
   8be2e:	4798      	blx	r3
								Cl_MacState = MAC_DISINFECT;
   8be30:	4b7d      	ldr	r3, [pc, #500]	; (8c028 <main+0x8cc>)
   8be32:	2208      	movs	r2, #8
   8be34:	701a      	strb	r2, [r3, #0]
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
   8be36:	2201      	movs	r2, #1
   8be38:	2108      	movs	r1, #8
   8be3a:	2045      	movs	r0, #69	; 0x45
   8be3c:	4b80      	ldr	r3, [pc, #512]	; (8c040 <main+0x8e4>)
   8be3e:	4798      	blx	r3
								ASSERT_ERROR(Cl_MacRetval);
   8be40:	7bfb      	ldrb	r3, [r7, #15]
   8be42:	2b00      	cmp	r3, #0
   8be44:	d041      	beq.n	8beca <main+0x76e>
   8be46:	4b76      	ldr	r3, [pc, #472]	; (8c020 <main+0x8c4>)
   8be48:	4798      	blx	r3
// 							{
// 								// Handle error
// 							}
							

						break;
   8be4a:	e03e      	b.n	8beca <main+0x76e>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8be4c:	4b72      	ldr	r3, [pc, #456]	; (8c018 <main+0x8bc>)
   8be4e:	781b      	ldrb	r3, [r3, #0]
   8be50:	4618      	mov	r0, r3
   8be52:	4b72      	ldr	r3, [pc, #456]	; (8c01c <main+0x8c0>)
   8be54:	4798      	blx	r3
   8be56:	4603      	mov	r3, r0
   8be58:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8be5a:	7bfb      	ldrb	r3, [r7, #15]
   8be5c:	2b00      	cmp	r3, #0
   8be5e:	d001      	beq.n	8be64 <main+0x708>
   8be60:	4b6f      	ldr	r3, [pc, #444]	; (8c020 <main+0x8c4>)
   8be62:	4798      	blx	r3
							if(Cl_MacRetval == CL_ACCEPTED)
   8be64:	7bfb      	ldrb	r3, [r7, #15]
   8be66:	2b02      	cmp	r3, #2
   8be68:	d10b      	bne.n	8be82 <main+0x726>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8be6a:	4b6b      	ldr	r3, [pc, #428]	; (8c018 <main+0x8bc>)
   8be6c:	781b      	ldrb	r3, [r3, #0]
   8be6e:	4618      	mov	r0, r3
   8be70:	4b6c      	ldr	r3, [pc, #432]	; (8c024 <main+0x8c8>)
   8be72:	4798      	blx	r3
   8be74:	4603      	mov	r3, r0
   8be76:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8be78:	7bfb      	ldrb	r3, [r7, #15]
   8be7a:	2b00      	cmp	r3, #0
   8be7c:	d001      	beq.n	8be82 <main+0x726>
   8be7e:	4b68      	ldr	r3, [pc, #416]	; (8c020 <main+0x8c4>)
   8be80:	4798      	blx	r3
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8be82:	7bfb      	ldrb	r3, [r7, #15]
   8be84:	2b02      	cmp	r3, #2
   8be86:	d10b      	bne.n	8bea0 <main+0x744>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8be88:	4b63      	ldr	r3, [pc, #396]	; (8c018 <main+0x8bc>)
   8be8a:	781b      	ldrb	r3, [r3, #0]
   8be8c:	4618      	mov	r0, r3
   8be8e:	4b6d      	ldr	r3, [pc, #436]	; (8c044 <main+0x8e8>)
   8be90:	4798      	blx	r3
   8be92:	4603      	mov	r3, r0
   8be94:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8be96:	7bfb      	ldrb	r3, [r7, #15]
   8be98:	2b00      	cmp	r3, #0
   8be9a:	d001      	beq.n	8bea0 <main+0x744>
   8be9c:	4b60      	ldr	r3, [pc, #384]	; (8c020 <main+0x8c4>)
   8be9e:	4798      	blx	r3
							}
							
							if( Cl_MacRetval == CL_OK)
   8bea0:	7bfb      	ldrb	r3, [r7, #15]
   8bea2:	2b00      	cmp	r3, #0
   8bea4:	d107      	bne.n	8beb6 <main+0x75a>
							{
								Cl_MacState = MAC_DPREP;
   8bea6:	4b60      	ldr	r3, [pc, #384]	; (8c028 <main+0x8cc>)
   8bea8:	220b      	movs	r2, #11
   8beaa:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
								ASSERT_ERROR(Cl_MacRetval);
   8beac:	7bfb      	ldrb	r3, [r7, #15]
   8beae:	2b00      	cmp	r3, #0
   8beb0:	d001      	beq.n	8beb6 <main+0x75a>
   8beb2:	4b5b      	ldr	r3, [pc, #364]	; (8c020 <main+0x8c4>)
   8beb4:	4798      	blx	r3
							{
									// handle error
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8beb6:	4b58      	ldr	r3, [pc, #352]	; (8c018 <main+0x8bc>)
   8beb8:	2200      	movs	r2, #0
   8beba:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8bebc:	e006      	b.n	8becc <main+0x770>

						
						default: break;
   8bebe:	bf00      	nop
   8bec0:	f001 bf7e 	b.w	8ddc0 <main+0x2664>
							else
							{
									// Handle error
							}
							
						break;
   8bec4:	bf00      	nop
   8bec6:	f001 bf7b 	b.w	8ddc0 <main+0x2664>
// 							{
// 								// Handle error
// 							}
							

						break;
   8beca:	bf00      	nop
						break;

						
						default: break;
					}
					break;
   8becc:	f001 bf78 	b.w	8ddc0 <main+0x2664>
						case MAC_START_SELFTEST:                                                                   //  *************************************
						
						switch(Cl_MacEvent)
   8bed0:	4b51      	ldr	r3, [pc, #324]	; (8c018 <main+0x8bc>)
   8bed2:	781b      	ldrb	r3, [r3, #0]
   8bed4:	3b38      	subs	r3, #56	; 0x38
   8bed6:	2b2f      	cmp	r3, #47	; 0x2f
   8bed8:	f200 80e0 	bhi.w	8c09c <main+0x940>
   8bedc:	a201      	add	r2, pc, #4	; (adr r2, 8bee4 <main+0x788>)
   8bede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bee2:	bf00      	nop
   8bee4:	0008bfa5 	.word	0x0008bfa5
   8bee8:	0008bfa5 	.word	0x0008bfa5
   8beec:	0008bfa5 	.word	0x0008bfa5
   8bef0:	0008bfa5 	.word	0x0008bfa5
   8bef4:	0008bfa5 	.word	0x0008bfa5
   8bef8:	0008c09d 	.word	0x0008c09d
   8befc:	0008c09d 	.word	0x0008c09d
   8bf00:	0008c09d 	.word	0x0008c09d
   8bf04:	0008c09d 	.word	0x0008c09d
   8bf08:	0008c09d 	.word	0x0008c09d
   8bf0c:	0008c09d 	.word	0x0008c09d
   8bf10:	0008c09d 	.word	0x0008c09d
   8bf14:	0008c09d 	.word	0x0008c09d
   8bf18:	0008c09d 	.word	0x0008c09d
   8bf1c:	0008c09d 	.word	0x0008c09d
   8bf20:	0008c09d 	.word	0x0008c09d
   8bf24:	0008c09d 	.word	0x0008c09d
   8bf28:	0008c09d 	.word	0x0008c09d
   8bf2c:	0008c09d 	.word	0x0008c09d
   8bf30:	0008c09d 	.word	0x0008c09d
   8bf34:	0008c09d 	.word	0x0008c09d
   8bf38:	0008c09d 	.word	0x0008c09d
   8bf3c:	0008c09d 	.word	0x0008c09d
   8bf40:	0008c09d 	.word	0x0008c09d
   8bf44:	0008c09d 	.word	0x0008c09d
   8bf48:	0008c09d 	.word	0x0008c09d
   8bf4c:	0008c09d 	.word	0x0008c09d
   8bf50:	0008c09d 	.word	0x0008c09d
   8bf54:	0008c09d 	.word	0x0008c09d
   8bf58:	0008c09d 	.word	0x0008c09d
   8bf5c:	0008c09d 	.word	0x0008c09d
   8bf60:	0008c09d 	.word	0x0008c09d
   8bf64:	0008c09d 	.word	0x0008c09d
   8bf68:	0008c09d 	.word	0x0008c09d
   8bf6c:	0008c09d 	.word	0x0008c09d
   8bf70:	0008c09d 	.word	0x0008c09d
   8bf74:	0008c09d 	.word	0x0008c09d
   8bf78:	0008c09d 	.word	0x0008c09d
   8bf7c:	0008c09d 	.word	0x0008c09d
   8bf80:	0008c09d 	.word	0x0008c09d
   8bf84:	0008c09d 	.word	0x0008c09d
   8bf88:	0008c09d 	.word	0x0008c09d
   8bf8c:	0008bfa5 	.word	0x0008bfa5
   8bf90:	0008bfa5 	.word	0x0008bfa5
   8bf94:	0008bfa5 	.word	0x0008bfa5
   8bf98:	0008c04d 	.word	0x0008c04d
   8bf9c:	0008bfc5 	.word	0x0008bfc5
   8bfa0:	0008bfa5 	.word	0x0008bfa5
							//case EVT_CONSOLE_COMMAND_GET_DATA:
							//case EVT_CONSOLE_COMMAND_SET_DATA:
							case EVT_COSOLE_COMMAND_SELFTEST_ALARM_PAAS:
							case EVT_COSOLE_COMMAND_SELFTEST_ALARM_FAIL:
							case EVT_CONSOLE_COMMAND_SYNCCONFIRMED:
							Cl_MacRetval =  self_test(Cl_MacEvent);
   8bfa4:	4b1c      	ldrge	r3, [pc, #112]	; (8c018 <main+0x8bc>)
   8bfa6:	781b      	ldrblt	r3, [r3, #0]
   8bfa8:	4618      	movge	r0, r3
   8bfaa:	4b20      	ldr	r3, [pc, #128]	; (8c02c <main+0x8d0>)
   8bfac:	4798      	blx	r3
   8bfae:	4603      	mov	r3, r0
   8bfb0:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8bfb2:	7bfb      	ldrb	r3, [r7, #15]
   8bfb4:	2b00      	cmp	r3, #0
   8bfb6:	d001      	beq.n	8bfbc <main+0x860>
   8bfb8:	4b19      	ldr	r3, [pc, #100]	; (8c020 <main+0x8c4>)
   8bfba:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8bfbc:	4b16      	ldr	r3, [pc, #88]	; (8c018 <main+0x8bc>)
   8bfbe:	2200      	movs	r2, #0
   8bfc0:	701a      	strb	r2, [r3, #0]
							break;
   8bfc2:	e06c      	b.n	8c09e <main+0x942>
							
							case EVT_CONSOLE_COMMAND_SELFTEST_STOP:
							
			       				Cl_MacRetval = self_test(Cl_MacEvent);
   8bfc4:	4b14      	ldr	r3, [pc, #80]	; (8c018 <main+0x8bc>)
   8bfc6:	781b      	ldrb	r3, [r3, #0]
   8bfc8:	4618      	mov	r0, r3
   8bfca:	4b18      	ldr	r3, [pc, #96]	; (8c02c <main+0x8d0>)
   8bfcc:	4798      	blx	r3
   8bfce:	4603      	mov	r3, r0
   8bfd0:	73fb      	strb	r3, [r7, #15]
						 		ASSERT_ERROR(Cl_MacRetval);
   8bfd2:	7bfb      	ldrb	r3, [r7, #15]
   8bfd4:	2b00      	cmp	r3, #0
   8bfd6:	d001      	beq.n	8bfdc <main+0x880>
   8bfd8:	4b11      	ldr	r3, [pc, #68]	; (8c020 <main+0x8c4>)
   8bfda:	4798      	blx	r3
							    if( Cl_MacRetval == CL_OK)
   8bfdc:	7bfb      	ldrb	r3, [r7, #15]
   8bfde:	2b00      	cmp	r3, #0
   8bfe0:	d114      	bne.n	8c00c <main+0x8b0>
								{
									
									
									Cl_MacRetval =Cl_selftest_init();
   8bfe2:	4b19      	ldr	r3, [pc, #100]	; (8c048 <main+0x8ec>)
   8bfe4:	4798      	blx	r3
   8bfe6:	4603      	mov	r3, r0
   8bfe8:	73fb      	strb	r3, [r7, #15]
									
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8bfea:	202b      	movs	r0, #43	; 0x2b
   8bfec:	4b0b      	ldr	r3, [pc, #44]	; (8c01c <main+0x8c0>)
   8bfee:	4798      	blx	r3
   8bff0:	4603      	mov	r3, r0
   8bff2:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8bff4:	7bfb      	ldrb	r3, [r7, #15]
   8bff6:	2b00      	cmp	r3, #0
   8bff8:	d001      	beq.n	8bffe <main+0x8a2>
   8bffa:	4b09      	ldr	r3, [pc, #36]	; (8c020 <main+0x8c4>)
   8bffc:	4798      	blx	r3
									Cl_MacState =   MAC_STANDBY;
   8bffe:	4b0a      	ldr	r3, [pc, #40]	; (8c028 <main+0x8cc>)
   8c000:	2205      	movs	r2, #5
   8c002:	701a      	strb	r2, [r3, #0]
									
									Cl_MacEvent = EVT_NULL;
   8c004:	4b04      	ldr	r3, [pc, #16]	; (8c018 <main+0x8bc>)
   8c006:	2200      	movs	r2, #0
   8c008:	701a      	strb	r2, [r3, #0]
									break;
   8c00a:	e048      	b.n	8c09e <main+0x942>

								}
								else
								{
									Cl_MacEvent = EVT_NULL;    //handle error
   8c00c:	4b02      	ldr	r3, [pc, #8]	; (8c018 <main+0x8bc>)
   8c00e:	2200      	movs	r2, #0
   8c010:	701a      	strb	r2, [r3, #0]
								}
							
							break;
   8c012:	e044      	b.n	8c09e <main+0x942>
   8c014:	200718c4 	.word	0x200718c4
   8c018:	200718bf 	.word	0x200718bf
   8c01c:	000a64b5 	.word	0x000a64b5
   8c020:	00088aa9 	.word	0x00088aa9
   8c024:	000a3a31 	.word	0x000a3a31
   8c028:	20070504 	.word	0x20070504
   8c02c:	0008e441 	.word	0x0008e441
   8c030:	20072350 	.word	0x20072350
   8c034:	20071937 	.word	0x20071937
   8c038:	20071939 	.word	0x20071939
   8c03c:	0009d3e1 	.word	0x0009d3e1
   8c040:	0009cbd5 	.word	0x0009cbd5
   8c044:	0009f771 	.word	0x0009f771
   8c048:	0008f259 	.word	0x0008f259
							
							
							
							case MACREQ_SELFTEST_COMPLETED:
							
							Cl_MacRetval = self_test(Cl_MacEvent);
   8c04c:	4ba3      	ldr	r3, [pc, #652]	; (8c2dc <main+0xb80>)
   8c04e:	781b      	ldrb	r3, [r3, #0]
   8c050:	4618      	mov	r0, r3
   8c052:	4ba3      	ldr	r3, [pc, #652]	; (8c2e0 <main+0xb84>)
   8c054:	4798      	blx	r3
   8c056:	4603      	mov	r3, r0
   8c058:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c05a:	7bfb      	ldrb	r3, [r7, #15]
   8c05c:	2b00      	cmp	r3, #0
   8c05e:	d001      	beq.n	8c064 <main+0x908>
   8c060:	4ba0      	ldr	r3, [pc, #640]	; (8c2e4 <main+0xb88>)
   8c062:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c064:	7bfb      	ldrb	r3, [r7, #15]
   8c066:	2b00      	cmp	r3, #0
   8c068:	d114      	bne.n	8c094 <main+0x938>
							{
								
								
 							Cl_MacRetval =Cl_selftest_init();
   8c06a:	4b9f      	ldr	r3, [pc, #636]	; (8c2e8 <main+0xb8c>)
   8c06c:	4798      	blx	r3
   8c06e:	4603      	mov	r3, r0
   8c070:	73fb      	strb	r3, [r7, #15]
								 	
									 	Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c072:	202b      	movs	r0, #43	; 0x2b
   8c074:	4b9d      	ldr	r3, [pc, #628]	; (8c2ec <main+0xb90>)
   8c076:	4798      	blx	r3
   8c078:	4603      	mov	r3, r0
   8c07a:	73fb      	strb	r3, [r7, #15]
									 	ASSERT_ERROR(Cl_MacRetval);
   8c07c:	7bfb      	ldrb	r3, [r7, #15]
   8c07e:	2b00      	cmp	r3, #0
   8c080:	d001      	beq.n	8c086 <main+0x92a>
   8c082:	4b98      	ldr	r3, [pc, #608]	; (8c2e4 <main+0xb88>)
   8c084:	4798      	blx	r3
									 	Cl_MacState =   MAC_STANDBY;
   8c086:	4b9a      	ldr	r3, [pc, #616]	; (8c2f0 <main+0xb94>)
   8c088:	2205      	movs	r2, #5
   8c08a:	701a      	strb	r2, [r3, #0]
								 	
								 	Cl_MacEvent = EVT_NULL;
   8c08c:	4b93      	ldr	r3, [pc, #588]	; (8c2dc <main+0xb80>)
   8c08e:	2200      	movs	r2, #0
   8c090:	701a      	strb	r2, [r3, #0]
								 	break;
   8c092:	e004      	b.n	8c09e <main+0x942>
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c094:	4b91      	ldr	r3, [pc, #580]	; (8c2dc <main+0xb80>)
   8c096:	2200      	movs	r2, #0
   8c098:	701a      	strb	r2, [r3, #0]
							break;
   8c09a:	e000      	b.n	8c09e <main+0x942>
// 							ASSERT_ERROR(Cl_MacRetval);
// 							break;
// 							
						
						
						default: break;                                                              //        **********************************************
   8c09c:	bf00      	nop
						
						}
					
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8c09e:	4b8f      	ldr	r3, [pc, #572]	; (8c2dc <main+0xb80>)
   8c0a0:	781b      	ldrb	r3, [r3, #0]
   8c0a2:	3b07      	subs	r3, #7
   8c0a4:	2b55      	cmp	r3, #85	; 0x55
   8c0a6:	f200 810b 	bhi.w	8c2c0 <main+0xb64>
   8c0aa:	a201      	add	r2, pc, #4	; (adr r2, 8c0b0 <main+0x954>)
   8c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c0b0:	0008c251 	.word	0x0008c251
   8c0b4:	0008c2c1 	.word	0x0008c2c1
   8c0b8:	0008c2c1 	.word	0x0008c2c1
   8c0bc:	0008c251 	.word	0x0008c251
   8c0c0:	0008c251 	.word	0x0008c251
   8c0c4:	0008c251 	.word	0x0008c251
   8c0c8:	0008c2c1 	.word	0x0008c2c1
   8c0cc:	0008c2c1 	.word	0x0008c2c1
   8c0d0:	0008c2c1 	.word	0x0008c2c1
   8c0d4:	0008c2c1 	.word	0x0008c2c1
   8c0d8:	0008c2c1 	.word	0x0008c2c1
   8c0dc:	0008c2c1 	.word	0x0008c2c1
   8c0e0:	0008c2c1 	.word	0x0008c2c1
   8c0e4:	0008c2c1 	.word	0x0008c2c1
   8c0e8:	0008c2c1 	.word	0x0008c2c1
   8c0ec:	0008c2c1 	.word	0x0008c2c1
   8c0f0:	0008c2c1 	.word	0x0008c2c1
   8c0f4:	0008c2c1 	.word	0x0008c2c1
   8c0f8:	0008c2c1 	.word	0x0008c2c1
   8c0fc:	0008c2c1 	.word	0x0008c2c1
   8c100:	0008c2c1 	.word	0x0008c2c1
   8c104:	0008c2c1 	.word	0x0008c2c1
   8c108:	0008c2c1 	.word	0x0008c2c1
   8c10c:	0008c2c1 	.word	0x0008c2c1
   8c110:	0008c2c1 	.word	0x0008c2c1
   8c114:	0008c2c1 	.word	0x0008c2c1
   8c118:	0008c2c1 	.word	0x0008c2c1
   8c11c:	0008c2c1 	.word	0x0008c2c1
   8c120:	0008c2c1 	.word	0x0008c2c1
   8c124:	0008c2c1 	.word	0x0008c2c1
   8c128:	0008c2c1 	.word	0x0008c2c1
   8c12c:	0008c2c1 	.word	0x0008c2c1
   8c130:	0008c2c1 	.word	0x0008c2c1
   8c134:	0008c2c1 	.word	0x0008c2c1
   8c138:	0008c241 	.word	0x0008c241
   8c13c:	0008c2c1 	.word	0x0008c2c1
   8c140:	0008c2c1 	.word	0x0008c2c1
   8c144:	0008c2c1 	.word	0x0008c2c1
   8c148:	0008c2c1 	.word	0x0008c2c1
   8c14c:	0008c241 	.word	0x0008c241
   8c150:	0008c2c1 	.word	0x0008c2c1
   8c154:	0008c2c1 	.word	0x0008c2c1
   8c158:	0008c2c1 	.word	0x0008c2c1
   8c15c:	0008c2c1 	.word	0x0008c2c1
   8c160:	0008c2c1 	.word	0x0008c2c1
   8c164:	0008c2c1 	.word	0x0008c2c1
   8c168:	0008c2c1 	.word	0x0008c2c1
   8c16c:	0008c2c1 	.word	0x0008c2c1
   8c170:	0008c2c1 	.word	0x0008c2c1
   8c174:	0008c209 	.word	0x0008c209
   8c178:	0008c209 	.word	0x0008c209
   8c17c:	0008c209 	.word	0x0008c209
   8c180:	0008c209 	.word	0x0008c209
   8c184:	0008c209 	.word	0x0008c209
   8c188:	0008c2c1 	.word	0x0008c2c1
   8c18c:	0008c2c1 	.word	0x0008c2c1
   8c190:	0008c251 	.word	0x0008c251
   8c194:	0008c251 	.word	0x0008c251
   8c198:	0008c251 	.word	0x0008c251
   8c19c:	0008c2c1 	.word	0x0008c2c1
   8c1a0:	0008c2c1 	.word	0x0008c2c1
   8c1a4:	0008c26b 	.word	0x0008c26b
   8c1a8:	0008c26b 	.word	0x0008c26b
   8c1ac:	0008c2c1 	.word	0x0008c2c1
   8c1b0:	0008c2c1 	.word	0x0008c2c1
   8c1b4:	0008c2c1 	.word	0x0008c2c1
   8c1b8:	0008c2c1 	.word	0x0008c2c1
   8c1bc:	0008c2c1 	.word	0x0008c2c1
   8c1c0:	0008c2c1 	.word	0x0008c2c1
   8c1c4:	0008c2c1 	.word	0x0008c2c1
   8c1c8:	0008c2c1 	.word	0x0008c2c1
   8c1cc:	0008c2c1 	.word	0x0008c2c1
   8c1d0:	0008c2c1 	.word	0x0008c2c1
   8c1d4:	0008c2c1 	.word	0x0008c2c1
   8c1d8:	0008c251 	.word	0x0008c251
   8c1dc:	0008c285 	.word	0x0008c285
   8c1e0:	0008c285 	.word	0x0008c285
   8c1e4:	0008c29f 	.word	0x0008c29f
   8c1e8:	0008c2c1 	.word	0x0008c2c1
   8c1ec:	0008c2c1 	.word	0x0008c2c1
   8c1f0:	0008c2c1 	.word	0x0008c2c1
   8c1f4:	0008c2c1 	.word	0x0008c2c1
   8c1f8:	0008c2c1 	.word	0x0008c2c1
   8c1fc:	0008c2c1 	.word	0x0008c2c1
   8c200:	0008c251 	.word	0x0008c251
   8c204:	0008c251 	.word	0x0008c251
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c208:	4b34      	ldr	r3, [pc, #208]	; (8c2dc <main+0xb80>)
   8c20a:	781b      	ldrb	r3, [r3, #0]
   8c20c:	4618      	mov	r0, r3
   8c20e:	4b39      	ldr	r3, [pc, #228]	; (8c2f4 <main+0xb98>)
   8c210:	4798      	blx	r3
   8c212:	4603      	mov	r3, r0
   8c214:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c216:	7bfb      	ldrb	r3, [r7, #15]
   8c218:	2b00      	cmp	r3, #0
   8c21a:	d001      	beq.n	8c220 <main+0xac4>
   8c21c:	4b31      	ldr	r3, [pc, #196]	; (8c2e4 <main+0xb88>)
   8c21e:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c220:	7bfb      	ldrb	r3, [r7, #15]
   8c222:	2b00      	cmp	r3, #0
   8c224:	d14e      	bne.n	8c2c4 <main+0xb68>
							{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c226:	4b2d      	ldr	r3, [pc, #180]	; (8c2dc <main+0xb80>)
   8c228:	781b      	ldrb	r3, [r3, #0]
   8c22a:	4618      	mov	r0, r3
   8c22c:	4b32      	ldr	r3, [pc, #200]	; (8c2f8 <main+0xb9c>)
   8c22e:	4798      	blx	r3
   8c230:	4603      	mov	r3, r0
   8c232:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c234:	7bfb      	ldrb	r3, [r7, #15]
   8c236:	2b00      	cmp	r3, #0
   8c238:	d044      	beq.n	8c2c4 <main+0xb68>
   8c23a:	4b2a      	ldr	r3, [pc, #168]	; (8c2e4 <main+0xb88>)
   8c23c:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c23e:	e041      	b.n	8c2c4 <main+0xb68>
						
						case EVT_CONSOLE_COMMAND_CLR_ALARM:
						case EVT_ALARM_TRIGGERED:
						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c240:	4b26      	ldr	r3, [pc, #152]	; (8c2dc <main+0xb80>)
   8c242:	781b      	ldrb	r3, [r3, #0]
   8c244:	4618      	mov	r0, r3
   8c246:	4b2b      	ldr	r3, [pc, #172]	; (8c2f4 <main+0xb98>)
   8c248:	4798      	blx	r3
   8c24a:	4603      	mov	r3, r0
   8c24c:	73fb      	strb	r3, [r7, #15]
						
						break;
   8c24e:	e040      	b.n	8c2d2 <main+0xb76>
						case EVT_CONSOLE_COMMAND_RINSE_START:
						case MACREQ_BC_OPENFILL_COMPLETED:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c250:	4b22      	ldr	r3, [pc, #136]	; (8c2dc <main+0xb80>)
   8c252:	781b      	ldrb	r3, [r3, #0]
   8c254:	4618      	mov	r0, r3
   8c256:	4b27      	ldr	r3, [pc, #156]	; (8c2f4 <main+0xb98>)
   8c258:	4798      	blx	r3
   8c25a:	4603      	mov	r3, r0
   8c25c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c25e:	7bfb      	ldrb	r3, [r7, #15]
   8c260:	2b00      	cmp	r3, #0
   8c262:	d031      	beq.n	8c2c8 <main+0xb6c>
   8c264:	4b1f      	ldr	r3, [pc, #124]	; (8c2e4 <main+0xb88>)
   8c266:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c268:	e02e      	b.n	8c2c8 <main+0xb6c>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c26a:	4b1c      	ldr	r3, [pc, #112]	; (8c2dc <main+0xb80>)
   8c26c:	781b      	ldrb	r3, [r3, #0]
   8c26e:	4618      	mov	r0, r3
   8c270:	4b21      	ldr	r3, [pc, #132]	; (8c2f8 <main+0xb9c>)
   8c272:	4798      	blx	r3
   8c274:	4603      	mov	r3, r0
   8c276:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c278:	7bfb      	ldrb	r3, [r7, #15]
   8c27a:	2b00      	cmp	r3, #0
   8c27c:	d026      	beq.n	8c2cc <main+0xb70>
   8c27e:	4b19      	ldr	r3, [pc, #100]	; (8c2e4 <main+0xb88>)
   8c280:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c282:	e023      	b.n	8c2cc <main+0xb70>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c284:	4b15      	ldr	r3, [pc, #84]	; (8c2dc <main+0xb80>)
   8c286:	781b      	ldrb	r3, [r3, #0]
   8c288:	4618      	mov	r0, r3
   8c28a:	4b1a      	ldr	r3, [pc, #104]	; (8c2f4 <main+0xb98>)
   8c28c:	4798      	blx	r3
   8c28e:	4603      	mov	r3, r0
   8c290:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c292:	7bfb      	ldrb	r3, [r7, #15]
   8c294:	2b00      	cmp	r3, #0
   8c296:	d01b      	beq.n	8c2d0 <main+0xb74>
   8c298:	4b12      	ldr	r3, [pc, #72]	; (8c2e4 <main+0xb88>)
   8c29a:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c29c:	e018      	b.n	8c2d0 <main+0xb74>
						case MACREQ_DISINF_COMPLETED:
					//	Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
					//	ASSERT_ERROR(Cl_MacRetval);
					//		if( Cl_MacRetval == CL_OK)
							{
								Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c29e:	202b      	movs	r0, #43	; 0x2b
   8c2a0:	4b12      	ldr	r3, [pc, #72]	; (8c2ec <main+0xb90>)
   8c2a2:	4798      	blx	r3
   8c2a4:	4603      	mov	r3, r0
   8c2a6:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c2a8:	7bfb      	ldrb	r3, [r7, #15]
   8c2aa:	2b00      	cmp	r3, #0
   8c2ac:	d001      	beq.n	8c2b2 <main+0xb56>
   8c2ae:	4b0d      	ldr	r3, [pc, #52]	; (8c2e4 <main+0xb88>)
   8c2b0:	4798      	blx	r3
								Cl_MacState =   MAC_STANDBY;
   8c2b2:	4b0f      	ldr	r3, [pc, #60]	; (8c2f0 <main+0xb94>)
   8c2b4:	2205      	movs	r2, #5
   8c2b6:	701a      	strb	r2, [r3, #0]
							}
						Cl_MacEvent = EVT_NULL;
   8c2b8:	4b08      	ldr	r3, [pc, #32]	; (8c2dc <main+0xb80>)
   8c2ba:	2200      	movs	r2, #0
   8c2bc:	701a      	strb	r2, [r3, #0]
						break;
   8c2be:	e008      	b.n	8c2d2 <main+0xb76>
						default:break;
   8c2c0:	bf00      	nop
   8c2c2:	e006      	b.n	8c2d2 <main+0xb76>
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c2c4:	bf00      	nop
   8c2c6:	e004      	b.n	8c2d2 <main+0xb76>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c2c8:	bf00      	nop
   8c2ca:	e002      	b.n	8c2d2 <main+0xb76>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c2cc:	bf00      	nop
   8c2ce:	e000      	b.n	8c2d2 <main+0xb76>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c2d0:	bf00      	nop
						Cl_MacEvent = EVT_NULL;
						break;
						default:break;
					}
	
					Cl_MacEvent = EVT_NULL;
   8c2d2:	4b02      	ldr	r3, [pc, #8]	; (8c2dc <main+0xb80>)
   8c2d4:	2200      	movs	r2, #0
   8c2d6:	701a      	strb	r2, [r3, #0]
					break;
   8c2d8:	f001 bd72 	b.w	8ddc0 <main+0x2664>
   8c2dc:	200718bf 	.word	0x200718bf
   8c2e0:	0008e441 	.word	0x0008e441
   8c2e4:	00088aa9 	.word	0x00088aa9
   8c2e8:	0008f259 	.word	0x0008f259
   8c2ec:	000a64b5 	.word	0x000a64b5
   8c2f0:	20070504 	.word	0x20070504
   8c2f4:	0009d3e1 	.word	0x0009d3e1
   8c2f8:	000a3a31 	.word	0x000a3a31
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8c2fc:	4bcc      	ldr	r3, [pc, #816]	; (8c630 <main+0xed4>)
   8c2fe:	781b      	ldrb	r3, [r3, #0]
   8c300:	3b07      	subs	r3, #7
   8c302:	2b27      	cmp	r3, #39	; 0x27
   8c304:	d852      	bhi.n	8c3ac <main+0xc50>
   8c306:	a201      	add	r2, pc, #4	; (adr r2, 8c30c <main+0xbb0>)
   8c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c30c:	0008c3ad 	.word	0x0008c3ad
   8c310:	0008c3ad 	.word	0x0008c3ad
   8c314:	0008c3ad 	.word	0x0008c3ad
   8c318:	0008c3ad 	.word	0x0008c3ad
   8c31c:	0008c3ad 	.word	0x0008c3ad
   8c320:	0008c3ad 	.word	0x0008c3ad
   8c324:	0008c3ad 	.word	0x0008c3ad
   8c328:	0008c3ad 	.word	0x0008c3ad
   8c32c:	0008c3ad 	.word	0x0008c3ad
   8c330:	0008c3ad 	.word	0x0008c3ad
   8c334:	0008c3ad 	.word	0x0008c3ad
   8c338:	0008c3ad 	.word	0x0008c3ad
   8c33c:	0008c3ad 	.word	0x0008c3ad
   8c340:	0008c3ad 	.word	0x0008c3ad
   8c344:	0008c3ad 	.word	0x0008c3ad
   8c348:	0008c3ad 	.word	0x0008c3ad
   8c34c:	0008c3ad 	.word	0x0008c3ad
   8c350:	0008c3ad 	.word	0x0008c3ad
   8c354:	0008c3ad 	.word	0x0008c3ad
   8c358:	0008c3ad 	.word	0x0008c3ad
   8c35c:	0008c3ad 	.word	0x0008c3ad
   8c360:	0008c3ad 	.word	0x0008c3ad
   8c364:	0008c3ad 	.word	0x0008c3ad
   8c368:	0008c3ad 	.word	0x0008c3ad
   8c36c:	0008c3ad 	.word	0x0008c3ad
   8c370:	0008c3ad 	.word	0x0008c3ad
   8c374:	0008c3ad 	.word	0x0008c3ad
   8c378:	0008c3ad 	.word	0x0008c3ad
   8c37c:	0008c3ad 	.word	0x0008c3ad
   8c380:	0008c3ad 	.word	0x0008c3ad
   8c384:	0008c3ad 	.word	0x0008c3ad
   8c388:	0008c3ad 	.word	0x0008c3ad
   8c38c:	0008c3ad 	.word	0x0008c3ad
   8c390:	0008c3ad 	.word	0x0008c3ad
   8c394:	0008c3ad 	.word	0x0008c3ad
   8c398:	0008c3ad 	.word	0x0008c3ad
   8c39c:	0008c3ad 	.word	0x0008c3ad
   8c3a0:	0008c3ad 	.word	0x0008c3ad
   8c3a4:	0008c3ad 	.word	0x0008c3ad
   8c3a8:	0008c3ad 	.word	0x0008c3ad
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8c3ac:	bf00      	nop
					}
					break;
   8c3ae:	f001 bd07 	b.w	8ddc0 <main+0x2664>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8c3b2:	4b9f      	ldr	r3, [pc, #636]	; (8c630 <main+0xed4>)
   8c3b4:	781b      	ldrb	r3, [r3, #0]
   8c3b6:	3b07      	subs	r3, #7
   8c3b8:	2b58      	cmp	r3, #88	; 0x58
   8c3ba:	f200 8161 	bhi.w	8c680 <main+0xf24>
   8c3be:	a201      	add	r2, pc, #4	; (adr r2, 8c3c4 <main+0xc68>)
   8c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c3c4:	0008c529 	.word	0x0008c529
   8c3c8:	0008c60f 	.word	0x0008c60f
   8c3cc:	0008c5ad 	.word	0x0008c5ad
   8c3d0:	0008c667 	.word	0x0008c667
   8c3d4:	0008c667 	.word	0x0008c667
   8c3d8:	0008c667 	.word	0x0008c667
   8c3dc:	0008c681 	.word	0x0008c681
   8c3e0:	0008c681 	.word	0x0008c681
   8c3e4:	0008c64d 	.word	0x0008c64d
   8c3e8:	0008c64d 	.word	0x0008c64d
   8c3ec:	0008c681 	.word	0x0008c681
   8c3f0:	0008c681 	.word	0x0008c681
   8c3f4:	0008c681 	.word	0x0008c681
   8c3f8:	0008c681 	.word	0x0008c681
   8c3fc:	0008c681 	.word	0x0008c681
   8c400:	0008c681 	.word	0x0008c681
   8c404:	0008c681 	.word	0x0008c681
   8c408:	0008c681 	.word	0x0008c681
   8c40c:	0008c681 	.word	0x0008c681
   8c410:	0008c681 	.word	0x0008c681
   8c414:	0008c681 	.word	0x0008c681
   8c418:	0008c681 	.word	0x0008c681
   8c41c:	0008c681 	.word	0x0008c681
   8c420:	0008c681 	.word	0x0008c681
   8c424:	0008c64d 	.word	0x0008c64d
   8c428:	0008c64d 	.word	0x0008c64d
   8c42c:	0008c681 	.word	0x0008c681
   8c430:	0008c681 	.word	0x0008c681
   8c434:	0008c681 	.word	0x0008c681
   8c438:	0008c681 	.word	0x0008c681
   8c43c:	0008c681 	.word	0x0008c681
   8c440:	0008c667 	.word	0x0008c667
   8c444:	0008c667 	.word	0x0008c667
   8c448:	0008c667 	.word	0x0008c667
   8c44c:	0008c5ad 	.word	0x0008c5ad
   8c450:	0008c681 	.word	0x0008c681
   8c454:	0008c681 	.word	0x0008c681
   8c458:	0008c681 	.word	0x0008c681
   8c45c:	0008c5ad 	.word	0x0008c5ad
   8c460:	0008c5ad 	.word	0x0008c5ad
   8c464:	0008c681 	.word	0x0008c681
   8c468:	0008c681 	.word	0x0008c681
   8c46c:	0008c58d 	.word	0x0008c58d
   8c470:	0008c681 	.word	0x0008c681
   8c474:	0008c681 	.word	0x0008c681
   8c478:	0008c681 	.word	0x0008c681
   8c47c:	0008c681 	.word	0x0008c681
   8c480:	0008c681 	.word	0x0008c681
   8c484:	0008c681 	.word	0x0008c681
   8c488:	0008c5ad 	.word	0x0008c5ad
   8c48c:	0008c5ad 	.word	0x0008c5ad
   8c490:	0008c5ad 	.word	0x0008c5ad
   8c494:	0008c5ad 	.word	0x0008c5ad
   8c498:	0008c5ad 	.word	0x0008c5ad
   8c49c:	0008c5ad 	.word	0x0008c5ad
   8c4a0:	0008c681 	.word	0x0008c681
   8c4a4:	0008c681 	.word	0x0008c681
   8c4a8:	0008c681 	.word	0x0008c681
   8c4ac:	0008c681 	.word	0x0008c681
   8c4b0:	0008c681 	.word	0x0008c681
   8c4b4:	0008c681 	.word	0x0008c681
   8c4b8:	0008c681 	.word	0x0008c681
   8c4bc:	0008c681 	.word	0x0008c681
   8c4c0:	0008c681 	.word	0x0008c681
   8c4c4:	0008c681 	.word	0x0008c681
   8c4c8:	0008c5cd 	.word	0x0008c5cd
   8c4cc:	0008c681 	.word	0x0008c681
   8c4d0:	0008c681 	.word	0x0008c681
   8c4d4:	0008c681 	.word	0x0008c681
   8c4d8:	0008c681 	.word	0x0008c681
   8c4dc:	0008c681 	.word	0x0008c681
   8c4e0:	0008c681 	.word	0x0008c681
   8c4e4:	0008c681 	.word	0x0008c681
   8c4e8:	0008c681 	.word	0x0008c681
   8c4ec:	0008c5ad 	.word	0x0008c5ad
   8c4f0:	0008c681 	.word	0x0008c681
   8c4f4:	0008c681 	.word	0x0008c681
   8c4f8:	0008c681 	.word	0x0008c681
   8c4fc:	0008c681 	.word	0x0008c681
   8c500:	0008c681 	.word	0x0008c681
   8c504:	0008c681 	.word	0x0008c681
   8c508:	0008c681 	.word	0x0008c681
   8c50c:	0008c681 	.word	0x0008c681
   8c510:	0008c681 	.word	0x0008c681
   8c514:	0008c5ad 	.word	0x0008c5ad
   8c518:	0008c5ad 	.word	0x0008c5ad
   8c51c:	0008c681 	.word	0x0008c681
   8c520:	0008c681 	.word	0x0008c681
   8c524:	0008c5ad 	.word	0x0008c5ad
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec =0;
   8c528:	4b42      	ldr	r3, [pc, #264]	; (8c634 <main+0xed8>)
   8c52a:	2200      	movs	r2, #0
   8c52c:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c52e:	4b40      	ldr	r3, [pc, #256]	; (8c630 <main+0xed4>)
   8c530:	781b      	ldrb	r3, [r3, #0]
   8c532:	4618      	mov	r0, r3
   8c534:	4b40      	ldr	r3, [pc, #256]	; (8c638 <main+0xedc>)
   8c536:	4798      	blx	r3
   8c538:	4603      	mov	r3, r0
   8c53a:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c53c:	7bfb      	ldrb	r3, [r7, #15]
   8c53e:	2b00      	cmp	r3, #0
   8c540:	d001      	beq.n	8c546 <main+0xdea>
   8c542:	4b3e      	ldr	r3, [pc, #248]	; (8c63c <main+0xee0>)
   8c544:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c546:	7bfb      	ldrb	r3, [r7, #15]
   8c548:	2b00      	cmp	r3, #0
   8c54a:	d10c      	bne.n	8c566 <main+0xe0a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c54c:	4b38      	ldr	r3, [pc, #224]	; (8c630 <main+0xed4>)
   8c54e:	781b      	ldrb	r3, [r3, #0]
   8c550:	4618      	mov	r0, r3
   8c552:	4b3b      	ldr	r3, [pc, #236]	; (8c640 <main+0xee4>)
   8c554:	4798      	blx	r3
   8c556:	4603      	mov	r3, r0
   8c558:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8c55a:	7bfb      	ldrb	r3, [r7, #15]
   8c55c:	2b00      	cmp	r3, #0
   8c55e:	d011      	beq.n	8c584 <main+0xe28>
   8c560:	4b36      	ldr	r3, [pc, #216]	; (8c63c <main+0xee0>)
   8c562:	4798      	blx	r3
   8c564:	e00e      	b.n	8c584 <main+0xe28>
							}
							else if(Cl_MacRetval == CL_OK)
   8c566:	7bfb      	ldrb	r3, [r7, #15]
   8c568:	2b00      	cmp	r3, #0
   8c56a:	d10b      	bne.n	8c584 <main+0xe28>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c56c:	4b30      	ldr	r3, [pc, #192]	; (8c630 <main+0xed4>)
   8c56e:	781b      	ldrb	r3, [r3, #0]
   8c570:	4618      	mov	r0, r3
   8c572:	4b33      	ldr	r3, [pc, #204]	; (8c640 <main+0xee4>)
   8c574:	4798      	blx	r3
   8c576:	4603      	mov	r3, r0
   8c578:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c57a:	7bfb      	ldrb	r3, [r7, #15]
   8c57c:	2b00      	cmp	r3, #0
   8c57e:	d001      	beq.n	8c584 <main+0xe28>
   8c580:	4b2e      	ldr	r3, [pc, #184]	; (8c63c <main+0xee0>)
   8c582:	4798      	blx	r3
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8c584:	4b2a      	ldr	r3, [pc, #168]	; (8c630 <main+0xed4>)
   8c586:	2200      	movs	r2, #0
   8c588:	701a      	strb	r2, [r3, #0]
						break;
   8c58a:	e080      	b.n	8c68e <main+0xf32>

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c58c:	4b28      	ldr	r3, [pc, #160]	; (8c630 <main+0xed4>)
   8c58e:	781b      	ldrb	r3, [r3, #0]
   8c590:	4618      	mov	r0, r3
   8c592:	4b2b      	ldr	r3, [pc, #172]	; (8c640 <main+0xee4>)
   8c594:	4798      	blx	r3
   8c596:	4603      	mov	r3, r0
   8c598:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c59a:	7bfb      	ldrb	r3, [r7, #15]
   8c59c:	2b00      	cmp	r3, #0
   8c59e:	d001      	beq.n	8c5a4 <main+0xe48>
   8c5a0:	4b26      	ldr	r3, [pc, #152]	; (8c63c <main+0xee0>)
   8c5a2:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								 // handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c5a4:	4b22      	ldr	r3, [pc, #136]	; (8c630 <main+0xed4>)
   8c5a6:	2200      	movs	r2, #0
   8c5a8:	701a      	strb	r2, [r3, #0]
						break;
   8c5aa:	e070      	b.n	8c68e <main+0xf32>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:

							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c5ac:	4b20      	ldr	r3, [pc, #128]	; (8c630 <main+0xed4>)
   8c5ae:	781b      	ldrb	r3, [r3, #0]
   8c5b0:	4618      	mov	r0, r3
   8c5b2:	4b23      	ldr	r3, [pc, #140]	; (8c640 <main+0xee4>)
   8c5b4:	4798      	blx	r3
   8c5b6:	4603      	mov	r3, r0
   8c5b8:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c5ba:	7bfb      	ldrb	r3, [r7, #15]
   8c5bc:	2b00      	cmp	r3, #0
   8c5be:	d001      	beq.n	8c5c4 <main+0xe68>
   8c5c0:	4b1e      	ldr	r3, [pc, #120]	; (8c63c <main+0xee0>)
   8c5c2:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8c5c4:	4b1a      	ldr	r3, [pc, #104]	; (8c630 <main+0xed4>)
   8c5c6:	2200      	movs	r2, #0
   8c5c8:	701a      	strb	r2, [r3, #0]
						break;
   8c5ca:	e060      	b.n	8c68e <main+0xf32>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c5cc:	4b18      	ldr	r3, [pc, #96]	; (8c630 <main+0xed4>)
   8c5ce:	781b      	ldrb	r3, [r3, #0]
   8c5d0:	4618      	mov	r0, r3
   8c5d2:	4b1b      	ldr	r3, [pc, #108]	; (8c640 <main+0xee4>)
   8c5d4:	4798      	blx	r3
   8c5d6:	4603      	mov	r3, r0
   8c5d8:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c5da:	7bfb      	ldrb	r3, [r7, #15]
   8c5dc:	2b00      	cmp	r3, #0
   8c5de:	d001      	beq.n	8c5e4 <main+0xe88>
   8c5e0:	4b16      	ldr	r3, [pc, #88]	; (8c63c <main+0xee0>)
   8c5e2:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c5e4:	7bfb      	ldrb	r3, [r7, #15]
   8c5e6:	2b00      	cmp	r3, #0
   8c5e8:	d109      	bne.n	8c5fe <main+0xea2>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8c5ea:	4b16      	ldr	r3, [pc, #88]	; (8c644 <main+0xee8>)
   8c5ec:	220a      	movs	r2, #10
   8c5ee:	701a      	strb	r2, [r3, #0]
								Cl_Uint8Type temp = MAC_POST_RINSE_STANDBY;
   8c5f0:	230a      	movs	r3, #10
   8c5f2:	727b      	strb	r3, [r7, #9]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(Cl_Uint8Type*)temp,1);
									ASSERT_ERROR(Cl_MacRetval);
   8c5f4:	7bfb      	ldrb	r3, [r7, #15]
   8c5f6:	2b00      	cmp	r3, #0
   8c5f8:	d001      	beq.n	8c5fe <main+0xea2>
   8c5fa:	4b10      	ldr	r3, [pc, #64]	; (8c63c <main+0xee0>)
   8c5fc:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacRetval = Cl_dlsis_init();
   8c5fe:	4b12      	ldr	r3, [pc, #72]	; (8c648 <main+0xeec>)
   8c600:	4798      	blx	r3
   8c602:	4603      	mov	r3, r0
   8c604:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacEvent = EVT_NULL;
   8c606:	4b0a      	ldr	r3, [pc, #40]	; (8c630 <main+0xed4>)
   8c608:	2200      	movs	r2, #0
   8c60a:	701a      	strb	r2, [r3, #0]
						break;
   8c60c:	e03f      	b.n	8c68e <main+0xf32>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c60e:	4b08      	ldr	r3, [pc, #32]	; (8c630 <main+0xed4>)
   8c610:	781b      	ldrb	r3, [r3, #0]
   8c612:	4618      	mov	r0, r3
   8c614:	4b0a      	ldr	r3, [pc, #40]	; (8c640 <main+0xee4>)
   8c616:	4798      	blx	r3
   8c618:	4603      	mov	r3, r0
   8c61a:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c61c:	7bfb      	ldrb	r3, [r7, #15]
   8c61e:	2b00      	cmp	r3, #0
   8c620:	d001      	beq.n	8c626 <main+0xeca>
   8c622:	4b06      	ldr	r3, [pc, #24]	; (8c63c <main+0xee0>)
   8c624:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8c626:	4b02      	ldr	r3, [pc, #8]	; (8c630 <main+0xed4>)
   8c628:	2200      	movs	r2, #0
   8c62a:	701a      	strb	r2, [r3, #0]
						break;
   8c62c:	e02f      	b.n	8c68e <main+0xf32>
   8c62e:	bf00      	nop
   8c630:	200718bf 	.word	0x200718bf
   8c634:	200718c4 	.word	0x200718c4
   8c638:	000a64b5 	.word	0x000a64b5
   8c63c:	00088aa9 	.word	0x00088aa9
   8c640:	000a3a31 	.word	0x000a3a31
   8c644:	20070504 	.word	0x20070504
   8c648:	00084e9d 	.word	0x00084e9d

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c64c:	4bb7      	ldr	r3, [pc, #732]	; (8c92c <main+0x11d0>)
   8c64e:	781b      	ldrb	r3, [r3, #0]
   8c650:	4618      	mov	r0, r3
   8c652:	4bb7      	ldr	r3, [pc, #732]	; (8c930 <main+0x11d4>)
   8c654:	4798      	blx	r3
   8c656:	4603      	mov	r3, r0
   8c658:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c65a:	7bfb      	ldrb	r3, [r7, #15]
   8c65c:	2b00      	cmp	r3, #0
   8c65e:	d012      	beq.n	8c686 <main+0xf2a>
   8c660:	4bb4      	ldr	r3, [pc, #720]	; (8c934 <main+0x11d8>)
   8c662:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8c664:	e00f      	b.n	8c686 <main+0xf2a>
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c666:	4bb1      	ldr	r3, [pc, #708]	; (8c92c <main+0x11d0>)
   8c668:	781b      	ldrb	r3, [r3, #0]
   8c66a:	4618      	mov	r0, r3
   8c66c:	4bb0      	ldr	r3, [pc, #704]	; (8c930 <main+0x11d4>)
   8c66e:	4798      	blx	r3
   8c670:	4603      	mov	r3, r0
   8c672:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c674:	7bfb      	ldrb	r3, [r7, #15]
   8c676:	2b00      	cmp	r3, #0
   8c678:	d008      	beq.n	8c68c <main+0xf30>
   8c67a:	4bae      	ldr	r3, [pc, #696]	; (8c934 <main+0x11d8>)
   8c67c:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8c67e:	e005      	b.n	8c68c <main+0xf30>
						default: break;
   8c680:	bf00      	nop
   8c682:	f001 bb9d 	b.w	8ddc0 <main+0x2664>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8c686:	bf00      	nop
   8c688:	f001 bb9a 	b.w	8ddc0 <main+0x2664>
						ASSERT_ERROR(Cl_MacRetval);
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8c68c:	bf00      	nop
						default: break;
					}
					break;
   8c68e:	f001 bb97 	b.w	8ddc0 <main+0x2664>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8c692:	4ba6      	ldr	r3, [pc, #664]	; (8c92c <main+0x11d0>)
   8c694:	781b      	ldrb	r3, [r3, #0]
   8c696:	3b07      	subs	r3, #7
   8c698:	2b58      	cmp	r3, #88	; 0x58
   8c69a:	f200 8197 	bhi.w	8c9cc <main+0x1270>
   8c69e:	a201      	add	r2, pc, #4	; (adr r2, 8c6a4 <main+0xf48>)
   8c6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c6a4:	0008c85f 	.word	0x0008c85f
   8c6a8:	0008c9cd 	.word	0x0008c9cd
   8c6ac:	0008c8b9 	.word	0x0008c8b9
   8c6b0:	0008c9b3 	.word	0x0008c9b3
   8c6b4:	0008c9b3 	.word	0x0008c9b3
   8c6b8:	0008c9b3 	.word	0x0008c9b3
   8c6bc:	0008c9cd 	.word	0x0008c9cd
   8c6c0:	0008c9cd 	.word	0x0008c9cd
   8c6c4:	0008c999 	.word	0x0008c999
   8c6c8:	0008c999 	.word	0x0008c999
   8c6cc:	0008c9cd 	.word	0x0008c9cd
   8c6d0:	0008c9cd 	.word	0x0008c9cd
   8c6d4:	0008c9cd 	.word	0x0008c9cd
   8c6d8:	0008c9cd 	.word	0x0008c9cd
   8c6dc:	0008c9cd 	.word	0x0008c9cd
   8c6e0:	0008c9cd 	.word	0x0008c9cd
   8c6e4:	0008c9cd 	.word	0x0008c9cd
   8c6e8:	0008c9cd 	.word	0x0008c9cd
   8c6ec:	0008c9cd 	.word	0x0008c9cd
   8c6f0:	0008c9cd 	.word	0x0008c9cd
   8c6f4:	0008c9cd 	.word	0x0008c9cd
   8c6f8:	0008c9cd 	.word	0x0008c9cd
   8c6fc:	0008c94d 	.word	0x0008c94d
   8c700:	0008c9cd 	.word	0x0008c9cd
   8c704:	0008c973 	.word	0x0008c973
   8c708:	0008c973 	.word	0x0008c973
   8c70c:	0008c9cd 	.word	0x0008c9cd
   8c710:	0008c9cd 	.word	0x0008c9cd
   8c714:	0008c9cd 	.word	0x0008c9cd
   8c718:	0008c9cd 	.word	0x0008c9cd
   8c71c:	0008c9cd 	.word	0x0008c9cd
   8c720:	0008c9b3 	.word	0x0008c9b3
   8c724:	0008c9b3 	.word	0x0008c9b3
   8c728:	0008c9b3 	.word	0x0008c9b3
   8c72c:	0008c9b3 	.word	0x0008c9b3
   8c730:	0008c9cd 	.word	0x0008c9cd
   8c734:	0008c9cd 	.word	0x0008c9cd
   8c738:	0008c9cd 	.word	0x0008c9cd
   8c73c:	0008c809 	.word	0x0008c809
   8c740:	0008c809 	.word	0x0008c809
   8c744:	0008c9cd 	.word	0x0008c9cd
   8c748:	0008c9cd 	.word	0x0008c9cd
   8c74c:	0008c9cd 	.word	0x0008c9cd
   8c750:	0008c9cd 	.word	0x0008c9cd
   8c754:	0008c9cd 	.word	0x0008c9cd
   8c758:	0008c9cd 	.word	0x0008c9cd
   8c75c:	0008c9cd 	.word	0x0008c9cd
   8c760:	0008c9cd 	.word	0x0008c9cd
   8c764:	0008c9cd 	.word	0x0008c9cd
   8c768:	0008c9cd 	.word	0x0008c9cd
   8c76c:	0008c9cd 	.word	0x0008c9cd
   8c770:	0008c9cd 	.word	0x0008c9cd
   8c774:	0008c9cd 	.word	0x0008c9cd
   8c778:	0008c9cd 	.word	0x0008c9cd
   8c77c:	0008c9cd 	.word	0x0008c9cd
   8c780:	0008c9cd 	.word	0x0008c9cd
   8c784:	0008c819 	.word	0x0008c819
   8c788:	0008c9cd 	.word	0x0008c9cd
   8c78c:	0008c9cd 	.word	0x0008c9cd
   8c790:	0008c9cd 	.word	0x0008c9cd
   8c794:	0008c9cd 	.word	0x0008c9cd
   8c798:	0008c9cd 	.word	0x0008c9cd
   8c79c:	0008c9cd 	.word	0x0008c9cd
   8c7a0:	0008c9cd 	.word	0x0008c9cd
   8c7a4:	0008c9cd 	.word	0x0008c9cd
   8c7a8:	0008c9cd 	.word	0x0008c9cd
   8c7ac:	0008c9cd 	.word	0x0008c9cd
   8c7b0:	0008c9cd 	.word	0x0008c9cd
   8c7b4:	0008c9cd 	.word	0x0008c9cd
   8c7b8:	0008c9cd 	.word	0x0008c9cd
   8c7bc:	0008c9cd 	.word	0x0008c9cd
   8c7c0:	0008c9cd 	.word	0x0008c9cd
   8c7c4:	0008c9cd 	.word	0x0008c9cd
   8c7c8:	0008c9cd 	.word	0x0008c9cd
   8c7cc:	0008c9cd 	.word	0x0008c9cd
   8c7d0:	0008c9cd 	.word	0x0008c9cd
   8c7d4:	0008c9cd 	.word	0x0008c9cd
   8c7d8:	0008c9cd 	.word	0x0008c9cd
   8c7dc:	0008c9cd 	.word	0x0008c9cd
   8c7e0:	0008c9cd 	.word	0x0008c9cd
   8c7e4:	0008c9cd 	.word	0x0008c9cd
   8c7e8:	0008c9cd 	.word	0x0008c9cd
   8c7ec:	0008c9cd 	.word	0x0008c9cd
   8c7f0:	0008c9cd 	.word	0x0008c9cd
   8c7f4:	0008c9b3 	.word	0x0008c9b3
   8c7f8:	0008c9b3 	.word	0x0008c9b3
   8c7fc:	0008c9cd 	.word	0x0008c9cd
   8c800:	0008c9cd 	.word	0x0008c9cd
   8c804:	0008c809 	.word	0x0008c809
				
					{
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						case EVT_CONSOLE_COMMAND_MUTE_ALARM:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c808:	4b48      	ldr	r3, [pc, #288]	; (8c92c <main+0x11d0>)
   8c80a:	781b      	ldrb	r3, [r3, #0]
   8c80c:	4618      	mov	r0, r3
   8c80e:	4b48      	ldr	r3, [pc, #288]	; (8c930 <main+0x11d4>)
   8c810:	4798      	blx	r3
   8c812:	4603      	mov	r3, r0
   8c814:	73fb      	strb	r3, [r7, #15]
						break;
   8c816:	e0ec      	b.n	8c9f2 <main+0x1296>

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c818:	4b44      	ldr	r3, [pc, #272]	; (8c92c <main+0x11d0>)
   8c81a:	781b      	ldrb	r3, [r3, #0]
   8c81c:	4618      	mov	r0, r3
   8c81e:	4b46      	ldr	r3, [pc, #280]	; (8c938 <main+0x11dc>)
   8c820:	4798      	blx	r3
   8c822:	4603      	mov	r3, r0
   8c824:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c826:	7bfb      	ldrb	r3, [r7, #15]
   8c828:	2b00      	cmp	r3, #0
   8c82a:	d001      	beq.n	8c830 <main+0x10d4>
   8c82c:	4b41      	ldr	r3, [pc, #260]	; (8c934 <main+0x11d8>)
   8c82e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c830:	7bfb      	ldrb	r3, [r7, #15]
   8c832:	2b00      	cmp	r3, #0
   8c834:	d10b      	bne.n	8c84e <main+0x10f2>
							{
							Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c836:	4b3d      	ldr	r3, [pc, #244]	; (8c92c <main+0x11d0>)
   8c838:	781b      	ldrb	r3, [r3, #0]
   8c83a:	4618      	mov	r0, r3
   8c83c:	4b3f      	ldr	r3, [pc, #252]	; (8c93c <main+0x11e0>)
   8c83e:	4798      	blx	r3
   8c840:	4603      	mov	r3, r0
   8c842:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c844:	7bfb      	ldrb	r3, [r7, #15]
   8c846:	2b00      	cmp	r3, #0
   8c848:	d001      	beq.n	8c84e <main+0x10f2>
   8c84a:	4b3a      	ldr	r3, [pc, #232]	; (8c934 <main+0x11d8>)
   8c84c:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8c84e:	7bfb      	ldrb	r3, [r7, #15]
   8c850:	2b00      	cmp	r3, #0
   8c852:	f040 80be 	bne.w	8c9d2 <main+0x1276>
							{
								Cl_MacState = MAC_DISINFECT;
   8c856:	4b3a      	ldr	r3, [pc, #232]	; (8c940 <main+0x11e4>)
   8c858:	2208      	movs	r2, #8
   8c85a:	701a      	strb	r2, [r3, #0]
							else
							{
								// handdle error
							}
						
						break;
   8c85c:	e0b9      	b.n	8c9d2 <main+0x1276>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c85e:	4b33      	ldr	r3, [pc, #204]	; (8c92c <main+0x11d0>)
   8c860:	781b      	ldrb	r3, [r3, #0]
   8c862:	4618      	mov	r0, r3
   8c864:	4b37      	ldr	r3, [pc, #220]	; (8c944 <main+0x11e8>)
   8c866:	4798      	blx	r3
   8c868:	4603      	mov	r3, r0
   8c86a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c86c:	7bfb      	ldrb	r3, [r7, #15]
   8c86e:	2b00      	cmp	r3, #0
   8c870:	d001      	beq.n	8c876 <main+0x111a>
   8c872:	4b30      	ldr	r3, [pc, #192]	; (8c934 <main+0x11d8>)
   8c874:	4798      	blx	r3
								if(Cl_MacRetval == CL_OK)
   8c876:	7bfb      	ldrb	r3, [r7, #15]
   8c878:	2b00      	cmp	r3, #0
   8c87a:	d10b      	bne.n	8c894 <main+0x1138>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c87c:	4b2b      	ldr	r3, [pc, #172]	; (8c92c <main+0x11d0>)
   8c87e:	781b      	ldrb	r3, [r3, #0]
   8c880:	4618      	mov	r0, r3
   8c882:	4b2b      	ldr	r3, [pc, #172]	; (8c930 <main+0x11d4>)
   8c884:	4798      	blx	r3
   8c886:	4603      	mov	r3, r0
   8c888:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8c88a:	7bfb      	ldrb	r3, [r7, #15]
   8c88c:	2b00      	cmp	r3, #0
   8c88e:	d001      	beq.n	8c894 <main+0x1138>
   8c890:	4b28      	ldr	r3, [pc, #160]	; (8c934 <main+0x11d8>)
   8c892:	4798      	blx	r3
								}
													
								if( Cl_MacRetval == CL_OK)
   8c894:	7bfb      	ldrb	r3, [r7, #15]
   8c896:	2b00      	cmp	r3, #0
   8c898:	d102      	bne.n	8c8a0 <main+0x1144>
								{
									Cl_MacState = MAC_RINSE;
   8c89a:	4b29      	ldr	r3, [pc, #164]	; (8c940 <main+0x11e4>)
   8c89c:	2207      	movs	r2, #7
   8c89e:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;						
								}
								if( Cl_MacRetval == CL_OK)
   8c8a0:	7bfb      	ldrb	r3, [r7, #15]
   8c8a2:	2b00      	cmp	r3, #0
   8c8a4:	d104      	bne.n	8c8b0 <main+0x1154>
								{
								//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8c8a6:	7bfb      	ldrb	r3, [r7, #15]
   8c8a8:	2b00      	cmp	r3, #0
   8c8aa:	d001      	beq.n	8c8b0 <main+0x1154>
   8c8ac:	4b21      	ldr	r3, [pc, #132]	; (8c934 <main+0x11d8>)
   8c8ae:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// handle error
								}
								
								Cl_MacEvent = EVT_NULL;
   8c8b0:	4b1e      	ldr	r3, [pc, #120]	; (8c92c <main+0x11d0>)
   8c8b2:	2200      	movs	r2, #0
   8c8b4:	701a      	strb	r2, [r3, #0]
						break;
   8c8b6:	e09c      	b.n	8c9f2 <main+0x1296>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c8b8:	4b1c      	ldr	r3, [pc, #112]	; (8c92c <main+0x11d0>)
   8c8ba:	781b      	ldrb	r3, [r3, #0]
   8c8bc:	4618      	mov	r0, r3
   8c8be:	4b21      	ldr	r3, [pc, #132]	; (8c944 <main+0x11e8>)
   8c8c0:	4798      	blx	r3
   8c8c2:	4603      	mov	r3, r0
   8c8c4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c8c6:	7bfb      	ldrb	r3, [r7, #15]
   8c8c8:	2b00      	cmp	r3, #0
   8c8ca:	d001      	beq.n	8c8d0 <main+0x1174>
   8c8cc:	4b19      	ldr	r3, [pc, #100]	; (8c934 <main+0x11d8>)
   8c8ce:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c8d0:	7bfb      	ldrb	r3, [r7, #15]
   8c8d2:	2b00      	cmp	r3, #0
   8c8d4:	d10b      	bne.n	8c8ee <main+0x1192>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c8d6:	4b15      	ldr	r3, [pc, #84]	; (8c92c <main+0x11d0>)
   8c8d8:	781b      	ldrb	r3, [r3, #0]
   8c8da:	4618      	mov	r0, r3
   8c8dc:	4b14      	ldr	r3, [pc, #80]	; (8c930 <main+0x11d4>)
   8c8de:	4798      	blx	r3
   8c8e0:	4603      	mov	r3, r0
   8c8e2:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c8e4:	7bfb      	ldrb	r3, [r7, #15]
   8c8e6:	2b00      	cmp	r3, #0
   8c8e8:	d001      	beq.n	8c8ee <main+0x1192>
   8c8ea:	4b12      	ldr	r3, [pc, #72]	; (8c934 <main+0x11d8>)
   8c8ec:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8c8ee:	7bfb      	ldrb	r3, [r7, #15]
   8c8f0:	2b00      	cmp	r3, #0
   8c8f2:	d10b      	bne.n	8c90c <main+0x11b0>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c8f4:	4b0d      	ldr	r3, [pc, #52]	; (8c92c <main+0x11d0>)
   8c8f6:	781b      	ldrb	r3, [r3, #0]
   8c8f8:	4618      	mov	r0, r3
   8c8fa:	4b13      	ldr	r3, [pc, #76]	; (8c948 <main+0x11ec>)
   8c8fc:	4798      	blx	r3
   8c8fe:	4603      	mov	r3, r0
   8c900:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c902:	7bfb      	ldrb	r3, [r7, #15]
   8c904:	2b00      	cmp	r3, #0
   8c906:	d001      	beq.n	8c90c <main+0x11b0>
   8c908:	4b0a      	ldr	r3, [pc, #40]	; (8c934 <main+0x11d8>)
   8c90a:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8c90c:	7bfb      	ldrb	r3, [r7, #15]
   8c90e:	2b00      	cmp	r3, #0
   8c910:	d102      	bne.n	8c918 <main+0x11bc>
							{
									Cl_MacState = MAC_DPREP;
   8c912:	4b0b      	ldr	r3, [pc, #44]	; (8c940 <main+0x11e4>)
   8c914:	220b      	movs	r2, #11
   8c916:	701a      	strb	r2, [r3, #0]
							}
							if(Cl_MacRetval == CL_OK)
   8c918:	7bfb      	ldrb	r3, [r7, #15]
   8c91a:	2b00      	cmp	r3, #0
   8c91c:	d15c      	bne.n	8c9d8 <main+0x127c>
							{
							//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
							ASSERT_ERROR(Cl_MacRetval);
   8c91e:	7bfb      	ldrb	r3, [r7, #15]
   8c920:	2b00      	cmp	r3, #0
   8c922:	d059      	beq.n	8c9d8 <main+0x127c>
   8c924:	4b03      	ldr	r3, [pc, #12]	; (8c934 <main+0x11d8>)
   8c926:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8c928:	e056      	b.n	8c9d8 <main+0x127c>
   8c92a:	bf00      	nop
   8c92c:	200718bf 	.word	0x200718bf
   8c930:	000a3a31 	.word	0x000a3a31
   8c934:	00088aa9 	.word	0x00088aa9
   8c938:	00084fb9 	.word	0x00084fb9
   8c93c:	0009d3e1 	.word	0x0009d3e1
   8c940:	20070504 	.word	0x20070504
   8c944:	000a64b5 	.word	0x000a64b5
   8c948:	0009f771 	.word	0x0009f771
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c94c:	4bb5      	ldr	r3, [pc, #724]	; (8cc24 <main+0x14c8>)
   8c94e:	781b      	ldrb	r3, [r3, #0]
   8c950:	4618      	mov	r0, r3
   8c952:	4bb5      	ldr	r3, [pc, #724]	; (8cc28 <main+0x14cc>)
   8c954:	4798      	blx	r3
   8c956:	4603      	mov	r3, r0
   8c958:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c95a:	7bfb      	ldrb	r3, [r7, #15]
   8c95c:	2b00      	cmp	r3, #0
   8c95e:	d001      	beq.n	8c964 <main+0x1208>
   8c960:	4bb2      	ldr	r3, [pc, #712]	; (8cc2c <main+0x14d0>)
   8c962:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c964:	7bfb      	ldrb	r3, [r7, #15]
   8c966:	2b00      	cmp	r3, #0
   8c968:	d139      	bne.n	8c9de <main+0x1282>
							{
									Cl_MacState = MAC_DPREP;
   8c96a:	4bb1      	ldr	r3, [pc, #708]	; (8cc30 <main+0x14d4>)
   8c96c:	220b      	movs	r2, #11
   8c96e:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
						
						break;
   8c970:	e035      	b.n	8c9de <main+0x1282>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						break;

						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c972:	4bac      	ldr	r3, [pc, #688]	; (8cc24 <main+0x14c8>)
   8c974:	781b      	ldrb	r3, [r3, #0]
   8c976:	4618      	mov	r0, r3
   8c978:	4bae      	ldr	r3, [pc, #696]	; (8cc34 <main+0x14d8>)
   8c97a:	4798      	blx	r3
   8c97c:	4603      	mov	r3, r0
   8c97e:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c980:	7bfb      	ldrb	r3, [r7, #15]
   8c982:	2b00      	cmp	r3, #0
   8c984:	d001      	beq.n	8c98a <main+0x122e>
   8c986:	4ba9      	ldr	r3, [pc, #676]	; (8cc2c <main+0x14d0>)
   8c988:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c98a:	7bfb      	ldrb	r3, [r7, #15]
   8c98c:	2b00      	cmp	r3, #0
   8c98e:	d129      	bne.n	8c9e4 <main+0x1288>
							{
								Cl_MacState = MAC_DPREP;
   8c990:	4ba7      	ldr	r3, [pc, #668]	; (8cc30 <main+0x14d4>)
   8c992:	220b      	movs	r2, #11
   8c994:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
													
						break;
   8c996:	e025      	b.n	8c9e4 <main+0x1288>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c998:	4ba2      	ldr	r3, [pc, #648]	; (8cc24 <main+0x14c8>)
   8c99a:	781b      	ldrb	r3, [r3, #0]
   8c99c:	4618      	mov	r0, r3
   8c99e:	4ba5      	ldr	r3, [pc, #660]	; (8cc34 <main+0x14d8>)
   8c9a0:	4798      	blx	r3
   8c9a2:	4603      	mov	r3, r0
   8c9a4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c9a6:	7bfb      	ldrb	r3, [r7, #15]
   8c9a8:	2b00      	cmp	r3, #0
   8c9aa:	d01e      	beq.n	8c9ea <main+0x128e>
   8c9ac:	4b9f      	ldr	r3, [pc, #636]	; (8cc2c <main+0x14d0>)
   8c9ae:	4798      	blx	r3
							else
							{
								// handle error
							}
													
						break;
   8c9b0:	e01b      	b.n	8c9ea <main+0x128e>
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8c9b2:	4b9c      	ldr	r3, [pc, #624]	; (8cc24 <main+0x14c8>)
   8c9b4:	781b      	ldrb	r3, [r3, #0]
   8c9b6:	4618      	mov	r0, r3
   8c9b8:	4b9e      	ldr	r3, [pc, #632]	; (8cc34 <main+0x14d8>)
   8c9ba:	4798      	blx	r3
   8c9bc:	4603      	mov	r3, r0
   8c9be:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c9c0:	7bfb      	ldrb	r3, [r7, #15]
   8c9c2:	2b00      	cmp	r3, #0
   8c9c4:	d014      	beq.n	8c9f0 <main+0x1294>
   8c9c6:	4b99      	ldr	r3, [pc, #612]	; (8cc2c <main+0x14d0>)
   8c9c8:	4798      	blx	r3
							else
							{
								// handle error
							}
																		
						break;
   8c9ca:	e011      	b.n	8c9f0 <main+0x1294>
						default: break;
   8c9cc:	bf00      	nop
   8c9ce:	f001 b9f7 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handdle error
							}
						
						break;
   8c9d2:	bf00      	nop
   8c9d4:	f001 b9f4 	b.w	8ddc0 <main+0x2664>
							}
							else
							{
								// handle error
							}
						break;
   8c9d8:	bf00      	nop
   8c9da:	f001 b9f1 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}
						
						break;
   8c9de:	bf00      	nop
   8c9e0:	f001 b9ee 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}
													
						break;
   8c9e4:	bf00      	nop
   8c9e6:	f001 b9eb 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}
													
						break;
   8c9ea:	bf00      	nop
   8c9ec:	f001 b9e8 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}
																		
						break;
   8c9f0:	bf00      	nop
						default: break;
					}
					break;
   8c9f2:	f001 b9e5 	b.w	8ddc0 <main+0x2664>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8c9f6:	4b8b      	ldr	r3, [pc, #556]	; (8cc24 <main+0x14c8>)
   8c9f8:	781b      	ldrb	r3, [r3, #0]
   8c9fa:	3b09      	subs	r3, #9
   8c9fc:	2b56      	cmp	r3, #86	; 0x56
   8c9fe:	f200 8142 	bhi.w	8cc86 <main+0x152a>
   8ca02:	a201      	add	r2, pc, #4	; (adr r2, 8ca08 <main+0x12ac>)
   8ca04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ca08:	0008cb7b 	.word	0x0008cb7b
   8ca0c:	0008cb7b 	.word	0x0008cb7b
   8ca10:	0008cb7b 	.word	0x0008cb7b
   8ca14:	0008cb7b 	.word	0x0008cb7b
   8ca18:	0008cc87 	.word	0x0008cc87
   8ca1c:	0008cc87 	.word	0x0008cc87
   8ca20:	0008cba1 	.word	0x0008cba1
   8ca24:	0008cb7b 	.word	0x0008cb7b
   8ca28:	0008cb7b 	.word	0x0008cb7b
   8ca2c:	0008cc6d 	.word	0x0008cc6d
   8ca30:	0008cb7b 	.word	0x0008cb7b
   8ca34:	0008cb7b 	.word	0x0008cb7b
   8ca38:	0008cb7b 	.word	0x0008cb7b
   8ca3c:	0008cbed 	.word	0x0008cbed
   8ca40:	0008cc87 	.word	0x0008cc87
   8ca44:	0008cc87 	.word	0x0008cc87
   8ca48:	0008cc87 	.word	0x0008cc87
   8ca4c:	0008cc87 	.word	0x0008cc87
   8ca50:	0008cc87 	.word	0x0008cc87
   8ca54:	0008cc87 	.word	0x0008cc87
   8ca58:	0008cb7b 	.word	0x0008cb7b
   8ca5c:	0008cb7b 	.word	0x0008cb7b
   8ca60:	0008cbc7 	.word	0x0008cbc7
   8ca64:	0008cc87 	.word	0x0008cc87
   8ca68:	0008cc87 	.word	0x0008cc87
   8ca6c:	0008cc87 	.word	0x0008cc87
   8ca70:	0008cc87 	.word	0x0008cc87
   8ca74:	0008cc87 	.word	0x0008cc87
   8ca78:	0008cc87 	.word	0x0008cc87
   8ca7c:	0008cb7b 	.word	0x0008cb7b
   8ca80:	0008cb7b 	.word	0x0008cb7b
   8ca84:	0008cb7b 	.word	0x0008cb7b
   8ca88:	0008cb7b 	.word	0x0008cb7b
   8ca8c:	0008cc87 	.word	0x0008cc87
   8ca90:	0008cc87 	.word	0x0008cc87
   8ca94:	0008cc87 	.word	0x0008cc87
   8ca98:	0008cb7b 	.word	0x0008cb7b
   8ca9c:	0008cb7b 	.word	0x0008cb7b
   8caa0:	0008cc87 	.word	0x0008cc87
   8caa4:	0008cc87 	.word	0x0008cc87
   8caa8:	0008cc87 	.word	0x0008cc87
   8caac:	0008cc87 	.word	0x0008cc87
   8cab0:	0008cc87 	.word	0x0008cc87
   8cab4:	0008cc87 	.word	0x0008cc87
   8cab8:	0008cc87 	.word	0x0008cc87
   8cabc:	0008cc87 	.word	0x0008cc87
   8cac0:	0008cc87 	.word	0x0008cc87
   8cac4:	0008cb7b 	.word	0x0008cb7b
   8cac8:	0008cb7b 	.word	0x0008cb7b
   8cacc:	0008cb7b 	.word	0x0008cb7b
   8cad0:	0008cb7b 	.word	0x0008cb7b
   8cad4:	0008cb7b 	.word	0x0008cb7b
   8cad8:	0008cb7b 	.word	0x0008cb7b
   8cadc:	0008cc87 	.word	0x0008cc87
   8cae0:	0008cc87 	.word	0x0008cc87
   8cae4:	0008cc87 	.word	0x0008cc87
   8cae8:	0008cc87 	.word	0x0008cc87
   8caec:	0008cc87 	.word	0x0008cc87
   8caf0:	0008cc87 	.word	0x0008cc87
   8caf4:	0008cc87 	.word	0x0008cc87
   8caf8:	0008cc87 	.word	0x0008cc87
   8cafc:	0008cc87 	.word	0x0008cc87
   8cb00:	0008cc87 	.word	0x0008cc87
   8cb04:	0008cc87 	.word	0x0008cc87
   8cb08:	0008cc87 	.word	0x0008cc87
   8cb0c:	0008cc87 	.word	0x0008cc87
   8cb10:	0008cc87 	.word	0x0008cc87
   8cb14:	0008cc3d 	.word	0x0008cc3d
   8cb18:	0008cc87 	.word	0x0008cc87
   8cb1c:	0008cc87 	.word	0x0008cc87
   8cb20:	0008cc87 	.word	0x0008cc87
   8cb24:	0008cc87 	.word	0x0008cc87
   8cb28:	0008cc87 	.word	0x0008cc87
   8cb2c:	0008cc87 	.word	0x0008cc87
   8cb30:	0008cc87 	.word	0x0008cc87
   8cb34:	0008cc87 	.word	0x0008cc87
   8cb38:	0008cc87 	.word	0x0008cc87
   8cb3c:	0008cc87 	.word	0x0008cc87
   8cb40:	0008cc87 	.word	0x0008cc87
   8cb44:	0008cb65 	.word	0x0008cb65
   8cb48:	0008cc87 	.word	0x0008cc87
   8cb4c:	0008cc87 	.word	0x0008cc87
   8cb50:	0008cb7b 	.word	0x0008cb7b
   8cb54:	0008cb7b 	.word	0x0008cb7b
   8cb58:	0008cc87 	.word	0x0008cc87
   8cb5c:	0008cc87 	.word	0x0008cc87
   8cb60:	0008cb7b 	.word	0x0008cb7b
						{
							
							case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							Cl_MacState = MAC_ISOUF;
   8cb64:	4b32      	ldr	r3, [pc, #200]	; (8cc30 <main+0x14d4>)
   8cb66:	2214      	movs	r2, #20
   8cb68:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8cb6a:	4b2e      	ldr	r3, [pc, #184]	; (8cc24 <main+0x14c8>)
   8cb6c:	781b      	ldrb	r3, [r3, #0]
   8cb6e:	4618      	mov	r0, r3
   8cb70:	4b31      	ldr	r3, [pc, #196]	; (8cc38 <main+0x14dc>)
   8cb72:	4798      	blx	r3
   8cb74:	4603      	mov	r3, r0
   8cb76:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8cb78:	e098      	b.n	8ccac <main+0x1550>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cb7a:	4b2a      	ldr	r3, [pc, #168]	; (8cc24 <main+0x14c8>)
   8cb7c:	781b      	ldrb	r3, [r3, #0]
   8cb7e:	4618      	mov	r0, r3
   8cb80:	4b29      	ldr	r3, [pc, #164]	; (8cc28 <main+0x14cc>)
   8cb82:	4798      	blx	r3
   8cb84:	4603      	mov	r3, r0
   8cb86:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cb88:	7bfb      	ldrb	r3, [r7, #15]
   8cb8a:	2b00      	cmp	r3, #0
   8cb8c:	d001      	beq.n	8cb92 <main+0x1436>
   8cb8e:	4b27      	ldr	r3, [pc, #156]	; (8cc2c <main+0x14d0>)
   8cb90:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cb92:	7bfb      	ldrb	r3, [r7, #15]
   8cb94:	2b00      	cmp	r3, #0
   8cb96:	d179      	bne.n	8cc8c <main+0x1530>
							{
								Cl_MacState = MAC_DPREP;
   8cb98:	4b25      	ldr	r3, [pc, #148]	; (8cc30 <main+0x14d4>)
   8cb9a:	220b      	movs	r2, #11
   8cb9c:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
							
						break;
   8cb9e:	e075      	b.n	8cc8c <main+0x1530>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cba0:	4b20      	ldr	r3, [pc, #128]	; (8cc24 <main+0x14c8>)
   8cba2:	781b      	ldrb	r3, [r3, #0]
   8cba4:	4618      	mov	r0, r3
   8cba6:	4b20      	ldr	r3, [pc, #128]	; (8cc28 <main+0x14cc>)
   8cba8:	4798      	blx	r3
   8cbaa:	4603      	mov	r3, r0
   8cbac:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbae:	7bfb      	ldrb	r3, [r7, #15]
   8cbb0:	2b00      	cmp	r3, #0
   8cbb2:	d001      	beq.n	8cbb8 <main+0x145c>
   8cbb4:	4b1d      	ldr	r3, [pc, #116]	; (8cc2c <main+0x14d0>)
   8cbb6:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cbb8:	7bfb      	ldrb	r3, [r7, #15]
   8cbba:	2b00      	cmp	r3, #0
   8cbbc:	d169      	bne.n	8cc92 <main+0x1536>
							{
								Cl_MacState = MAC_DPREP;
   8cbbe:	4b1c      	ldr	r3, [pc, #112]	; (8cc30 <main+0x14d4>)
   8cbc0:	220b      	movs	r2, #11
   8cbc2:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8cbc4:	e065      	b.n	8cc92 <main+0x1536>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cbc6:	4b17      	ldr	r3, [pc, #92]	; (8cc24 <main+0x14c8>)
   8cbc8:	781b      	ldrb	r3, [r3, #0]
   8cbca:	4618      	mov	r0, r3
   8cbcc:	4b16      	ldr	r3, [pc, #88]	; (8cc28 <main+0x14cc>)
   8cbce:	4798      	blx	r3
   8cbd0:	4603      	mov	r3, r0
   8cbd2:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbd4:	7bfb      	ldrb	r3, [r7, #15]
   8cbd6:	2b00      	cmp	r3, #0
   8cbd8:	d001      	beq.n	8cbde <main+0x1482>
   8cbda:	4b14      	ldr	r3, [pc, #80]	; (8cc2c <main+0x14d0>)
   8cbdc:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cbde:	7bfb      	ldrb	r3, [r7, #15]
   8cbe0:	2b00      	cmp	r3, #0
   8cbe2:	d159      	bne.n	8cc98 <main+0x153c>
							{
								Cl_MacState = MAC_DPREP;
   8cbe4:	4b12      	ldr	r3, [pc, #72]	; (8cc30 <main+0x14d4>)
   8cbe6:	220b      	movs	r2, #11
   8cbe8:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8cbea:	e055      	b.n	8cc98 <main+0x153c>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cbec:	4b0d      	ldr	r3, [pc, #52]	; (8cc24 <main+0x14c8>)
   8cbee:	781b      	ldrb	r3, [r3, #0]
   8cbf0:	4618      	mov	r0, r3
   8cbf2:	4b0d      	ldr	r3, [pc, #52]	; (8cc28 <main+0x14cc>)
   8cbf4:	4798      	blx	r3
   8cbf6:	4603      	mov	r3, r0
   8cbf8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbfa:	7bfb      	ldrb	r3, [r7, #15]
   8cbfc:	2b00      	cmp	r3, #0
   8cbfe:	d001      	beq.n	8cc04 <main+0x14a8>
   8cc00:	4b0a      	ldr	r3, [pc, #40]	; (8cc2c <main+0x14d0>)
   8cc02:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cc04:	7bfb      	ldrb	r3, [r7, #15]
   8cc06:	2b00      	cmp	r3, #0
   8cc08:	d102      	bne.n	8cc10 <main+0x14b4>
							{
								Cl_MacState = MAC_DPREP;
   8cc0a:	4b09      	ldr	r3, [pc, #36]	; (8cc30 <main+0x14d4>)
   8cc0c:	220b      	movs	r2, #11
   8cc0e:	701a      	strb	r2, [r3, #0]
							{
								// handle error
							}
	
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8cc10:	4b07      	ldr	r3, [pc, #28]	; (8cc30 <main+0x14d4>)
   8cc12:	220c      	movs	r2, #12
   8cc14:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cc16:	7bfb      	ldrb	r3, [r7, #15]
   8cc18:	2b00      	cmp	r3, #0
   8cc1a:	d040      	beq.n	8cc9e <main+0x1542>
   8cc1c:	4b03      	ldr	r3, [pc, #12]	; (8cc2c <main+0x14d0>)
   8cc1e:	4798      	blx	r3
						
						break;
   8cc20:	e03d      	b.n	8cc9e <main+0x1542>
   8cc22:	bf00      	nop
   8cc24:	200718bf 	.word	0x200718bf
   8cc28:	0009f771 	.word	0x0009f771
   8cc2c:	00088aa9 	.word	0x00088aa9
   8cc30:	20070504 	.word	0x20070504
   8cc34:	000a3a31 	.word	0x000a3a31
   8cc38:	00095241 	.word	0x00095241
						
						
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cc3c:	4baa      	ldr	r3, [pc, #680]	; (8cee8 <main+0x178c>)
   8cc3e:	781b      	ldrb	r3, [r3, #0]
   8cc40:	4618      	mov	r0, r3
   8cc42:	4baa      	ldr	r3, [pc, #680]	; (8ceec <main+0x1790>)
   8cc44:	4798      	blx	r3
   8cc46:	4603      	mov	r3, r0
   8cc48:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cc4a:	7bfb      	ldrb	r3, [r7, #15]
   8cc4c:	2b00      	cmp	r3, #0
   8cc4e:	d001      	beq.n	8cc54 <main+0x14f8>
   8cc50:	4ba7      	ldr	r3, [pc, #668]	; (8cef0 <main+0x1794>)
   8cc52:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8cc54:	7bfb      	ldrb	r3, [r7, #15]
   8cc56:	2b00      	cmp	r3, #0
   8cc58:	d124      	bne.n	8cca4 <main+0x1548>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8cc5a:	4ba6      	ldr	r3, [pc, #664]	; (8cef4 <main+0x1798>)
   8cc5c:	220e      	movs	r2, #14
   8cc5e:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cc60:	7bfb      	ldrb	r3, [r7, #15]
   8cc62:	2b00      	cmp	r3, #0
   8cc64:	d01e      	beq.n	8cca4 <main+0x1548>
   8cc66:	4ba2      	ldr	r3, [pc, #648]	; (8cef0 <main+0x1794>)
   8cc68:	4798      	blx	r3
						}
						else
						{
							// handle error
						}
						break;
   8cc6a:	e01b      	b.n	8cca4 <main+0x1548>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cc6c:	4b9e      	ldr	r3, [pc, #632]	; (8cee8 <main+0x178c>)
   8cc6e:	781b      	ldrb	r3, [r3, #0]
   8cc70:	4618      	mov	r0, r3
   8cc72:	4b9e      	ldr	r3, [pc, #632]	; (8ceec <main+0x1790>)
   8cc74:	4798      	blx	r3
   8cc76:	4603      	mov	r3, r0
   8cc78:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cc7a:	7bfb      	ldrb	r3, [r7, #15]
   8cc7c:	2b00      	cmp	r3, #0
   8cc7e:	d014      	beq.n	8ccaa <main+0x154e>
   8cc80:	4b9b      	ldr	r3, [pc, #620]	; (8cef0 <main+0x1794>)
   8cc82:	4798      	blx	r3



						break;
   8cc84:	e011      	b.n	8ccaa <main+0x154e>

						default: break;
   8cc86:	bf00      	nop
   8cc88:	f001 b89a 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}
							
						break;
   8cc8c:	bf00      	nop
   8cc8e:	f001 b897 	b.w	8ddc0 <main+0x2664>
							}
							else
							{
								// handle error
							}
						break;
   8cc92:	bf00      	nop
   8cc94:	f001 b894 	b.w	8ddc0 <main+0x2664>
							}
							else
							{
								// handle error
							}
						break;
   8cc98:	bf00      	nop
   8cc9a:	f001 b891 	b.w	8ddc0 <main+0x2664>
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
						
						break;
   8cc9e:	bf00      	nop
   8cca0:	f001 b88e 	b.w	8ddc0 <main+0x2664>
						}
						else
						{
							// handle error
						}
						break;
   8cca4:	bf00      	nop
   8cca6:	f001 b88b 	b.w	8ddc0 <main+0x2664>
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);



						break;
   8ccaa:	bf00      	nop

						default: break;
					}
					break;
   8ccac:	f001 b888 	b.w	8ddc0 <main+0x2664>
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8ccb0:	4b8d      	ldr	r3, [pc, #564]	; (8cee8 <main+0x178c>)
   8ccb2:	781b      	ldrb	r3, [r3, #0]
   8ccb4:	3b0a      	subs	r3, #10
   8ccb6:	2b55      	cmp	r3, #85	; 0x55
   8ccb8:	f200 80fa 	bhi.w	8ceb0 <main+0x1754>
   8ccbc:	a201      	add	r2, pc, #4	; (adr r2, 8ccc4 <main+0x1568>)
   8ccbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ccc2:	bf00      	nop
   8ccc4:	0008ce1d 	.word	0x0008ce1d
   8ccc8:	0008ce1d 	.word	0x0008ce1d
   8cccc:	0008ce1d 	.word	0x0008ce1d
   8ccd0:	0008ceb1 	.word	0x0008ceb1
   8ccd4:	0008ceb1 	.word	0x0008ceb1
   8ccd8:	0008ce37 	.word	0x0008ce37
   8ccdc:	0008ceb1 	.word	0x0008ceb1
   8cce0:	0008ce1d 	.word	0x0008ce1d
   8cce4:	0008ce1d 	.word	0x0008ce1d
   8cce8:	0008ce1d 	.word	0x0008ce1d
   8ccec:	0008ce1d 	.word	0x0008ce1d
   8ccf0:	0008ceb1 	.word	0x0008ceb1
   8ccf4:	0008ce1d 	.word	0x0008ce1d
   8ccf8:	0008ceb1 	.word	0x0008ceb1
   8ccfc:	0008ceb1 	.word	0x0008ceb1
   8cd00:	0008ceb1 	.word	0x0008ceb1
   8cd04:	0008ceb1 	.word	0x0008ceb1
   8cd08:	0008ceb1 	.word	0x0008ceb1
   8cd0c:	0008ceb1 	.word	0x0008ceb1
   8cd10:	0008ceb1 	.word	0x0008ceb1
   8cd14:	0008ceb1 	.word	0x0008ceb1
   8cd18:	0008ceb1 	.word	0x0008ceb1
   8cd1c:	0008ceb1 	.word	0x0008ceb1
   8cd20:	0008ceb1 	.word	0x0008ceb1
   8cd24:	0008ceb1 	.word	0x0008ceb1
   8cd28:	0008ceb1 	.word	0x0008ceb1
   8cd2c:	0008ceb1 	.word	0x0008ceb1
   8cd30:	0008ceb1 	.word	0x0008ceb1
   8cd34:	0008ce1d 	.word	0x0008ce1d
   8cd38:	0008ce1d 	.word	0x0008ce1d
   8cd3c:	0008ce1d 	.word	0x0008ce1d
   8cd40:	0008ceb1 	.word	0x0008ceb1
   8cd44:	0008ceb1 	.word	0x0008ceb1
   8cd48:	0008ceb1 	.word	0x0008ceb1
   8cd4c:	0008ceb1 	.word	0x0008ceb1
   8cd50:	0008ce1d 	.word	0x0008ce1d
   8cd54:	0008ce1d 	.word	0x0008ce1d
   8cd58:	0008ceb1 	.word	0x0008ceb1
   8cd5c:	0008ceb1 	.word	0x0008ceb1
   8cd60:	0008ceb1 	.word	0x0008ceb1
   8cd64:	0008ceb1 	.word	0x0008ceb1
   8cd68:	0008ceb1 	.word	0x0008ceb1
   8cd6c:	0008ceb1 	.word	0x0008ceb1
   8cd70:	0008ceb1 	.word	0x0008ceb1
   8cd74:	0008ceb1 	.word	0x0008ceb1
   8cd78:	0008ceb1 	.word	0x0008ceb1
   8cd7c:	0008ceb1 	.word	0x0008ceb1
   8cd80:	0008ceb1 	.word	0x0008ceb1
   8cd84:	0008ce1d 	.word	0x0008ce1d
   8cd88:	0008ce1d 	.word	0x0008ce1d
   8cd8c:	0008ce1d 	.word	0x0008ce1d
   8cd90:	0008ce1d 	.word	0x0008ce1d
   8cd94:	0008ceb1 	.word	0x0008ceb1
   8cd98:	0008ceb1 	.word	0x0008ceb1
   8cd9c:	0008ceb1 	.word	0x0008ceb1
   8cda0:	0008ceb1 	.word	0x0008ceb1
   8cda4:	0008ceb1 	.word	0x0008ceb1
   8cda8:	0008ceb1 	.word	0x0008ceb1
   8cdac:	0008ceb1 	.word	0x0008ceb1
   8cdb0:	0008ceb1 	.word	0x0008ceb1
   8cdb4:	0008ceb1 	.word	0x0008ceb1
   8cdb8:	0008ceb1 	.word	0x0008ceb1
   8cdbc:	0008ceb1 	.word	0x0008ceb1
   8cdc0:	0008ce67 	.word	0x0008ce67
   8cdc4:	0008ceb1 	.word	0x0008ceb1
   8cdc8:	0008ceb1 	.word	0x0008ceb1
   8cdcc:	0008ce81 	.word	0x0008ce81
   8cdd0:	0008ceb1 	.word	0x0008ceb1
   8cdd4:	0008ceb1 	.word	0x0008ceb1
   8cdd8:	0008ceb1 	.word	0x0008ceb1
   8cddc:	0008ceb1 	.word	0x0008ceb1
   8cde0:	0008ceb1 	.word	0x0008ceb1
   8cde4:	0008ceb1 	.word	0x0008ceb1
   8cde8:	0008ceb1 	.word	0x0008ceb1
   8cdec:	0008ceb1 	.word	0x0008ceb1
   8cdf0:	0008ceb1 	.word	0x0008ceb1
   8cdf4:	0008ceb1 	.word	0x0008ceb1
   8cdf8:	0008ceb1 	.word	0x0008ceb1
   8cdfc:	0008ceb1 	.word	0x0008ceb1
   8ce00:	0008ceb1 	.word	0x0008ceb1
   8ce04:	0008ceb1 	.word	0x0008ceb1
   8ce08:	0008ce1d 	.word	0x0008ce1d
   8ce0c:	0008ce1d 	.word	0x0008ce1d
   8ce10:	0008ceb1 	.word	0x0008ceb1
   8ce14:	0008ceb1 	.word	0x0008ceb1
   8ce18:	0008ce1d 	.word	0x0008ce1d
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_MUTE_ALARM:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce1c:	4b32      	ldr	r3, [pc, #200]	; (8cee8 <main+0x178c>)
   8ce1e:	781b      	ldrb	r3, [r3, #0]
   8ce20:	4618      	mov	r0, r3
   8ce22:	4b32      	ldr	r3, [pc, #200]	; (8ceec <main+0x1790>)
   8ce24:	4798      	blx	r3
   8ce26:	4603      	mov	r3, r0
   8ce28:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce2a:	7bfb      	ldrb	r3, [r7, #15]
   8ce2c:	2b00      	cmp	r3, #0
   8ce2e:	d042      	beq.n	8ceb6 <main+0x175a>
   8ce30:	4b2f      	ldr	r3, [pc, #188]	; (8cef0 <main+0x1794>)
   8ce32:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8ce34:	e03f      	b.n	8ceb6 <main+0x175a>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce36:	4b2c      	ldr	r3, [pc, #176]	; (8cee8 <main+0x178c>)
   8ce38:	781b      	ldrb	r3, [r3, #0]
   8ce3a:	4618      	mov	r0, r3
   8ce3c:	4b2b      	ldr	r3, [pc, #172]	; (8ceec <main+0x1790>)
   8ce3e:	4798      	blx	r3
   8ce40:	4603      	mov	r3, r0
   8ce42:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce44:	7bfb      	ldrb	r3, [r7, #15]
   8ce46:	2b00      	cmp	r3, #0
   8ce48:	d001      	beq.n	8ce4e <main+0x16f2>
   8ce4a:	4b29      	ldr	r3, [pc, #164]	; (8cef0 <main+0x1794>)
   8ce4c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ce4e:	7bfb      	ldrb	r3, [r7, #15]
   8ce50:	2b00      	cmp	r3, #0
   8ce52:	d133      	bne.n	8cebc <main+0x1760>
							{
								Cl_MacState = 	MAC_DPREP_PRIME;
   8ce54:	4b27      	ldr	r3, [pc, #156]	; (8cef4 <main+0x1798>)
   8ce56:	220c      	movs	r2, #12
   8ce58:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
								ASSERT_ERROR(Cl_MacRetval);
   8ce5a:	7bfb      	ldrb	r3, [r7, #15]
   8ce5c:	2b00      	cmp	r3, #0
   8ce5e:	d02d      	beq.n	8cebc <main+0x1760>
   8ce60:	4b23      	ldr	r3, [pc, #140]	; (8cef0 <main+0x1794>)
   8ce62:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8ce64:	e02a      	b.n	8cebc <main+0x1760>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce66:	4b20      	ldr	r3, [pc, #128]	; (8cee8 <main+0x178c>)
   8ce68:	781b      	ldrb	r3, [r3, #0]
   8ce6a:	4618      	mov	r0, r3
   8ce6c:	4b1f      	ldr	r3, [pc, #124]	; (8ceec <main+0x1790>)
   8ce6e:	4798      	blx	r3
   8ce70:	4603      	mov	r3, r0
   8ce72:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce74:	7bfb      	ldrb	r3, [r7, #15]
   8ce76:	2b00      	cmp	r3, #0
   8ce78:	d023      	beq.n	8cec2 <main+0x1766>
   8ce7a:	4b1d      	ldr	r3, [pc, #116]	; (8cef0 <main+0x1794>)
   8ce7c:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8ce7e:	e020      	b.n	8cec2 <main+0x1766>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce80:	4b19      	ldr	r3, [pc, #100]	; (8cee8 <main+0x178c>)
   8ce82:	781b      	ldrb	r3, [r3, #0]
   8ce84:	4618      	mov	r0, r3
   8ce86:	4b19      	ldr	r3, [pc, #100]	; (8ceec <main+0x1790>)
   8ce88:	4798      	blx	r3
   8ce8a:	4603      	mov	r3, r0
   8ce8c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce8e:	7bfb      	ldrb	r3, [r7, #15]
   8ce90:	2b00      	cmp	r3, #0
   8ce92:	d001      	beq.n	8ce98 <main+0x173c>
   8ce94:	4b16      	ldr	r3, [pc, #88]	; (8cef0 <main+0x1794>)
   8ce96:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ce98:	7bfb      	ldrb	r3, [r7, #15]
   8ce9a:	2b00      	cmp	r3, #0
   8ce9c:	d114      	bne.n	8cec8 <main+0x176c>
							{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8ce9e:	4b15      	ldr	r3, [pc, #84]	; (8cef4 <main+0x1798>)
   8cea0:	220e      	movs	r2, #14
   8cea2:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cea4:	7bfb      	ldrb	r3, [r7, #15]
   8cea6:	2b00      	cmp	r3, #0
   8cea8:	d00e      	beq.n	8cec8 <main+0x176c>
   8ceaa:	4b11      	ldr	r3, [pc, #68]	; (8cef0 <main+0x1794>)
   8ceac:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8ceae:	e00b      	b.n	8cec8 <main+0x176c>
					

						default: break;
   8ceb0:	bf00      	nop
   8ceb2:	f000 bf85 	b.w	8ddc0 <main+0x2664>
						ASSERT_ERROR(Cl_MacRetval);
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8ceb6:	bf00      	nop
   8ceb8:	f000 bf82 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}

						break;
   8cebc:	bf00      	nop
   8cebe:	f000 bf7f 	b.w	8ddc0 <main+0x2664>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8cec2:	bf00      	nop
   8cec4:	f000 bf7c 	b.w	8ddc0 <main+0x2664>
							else
							{
								// handle error
							}

						break;
   8cec8:	bf00      	nop
					

						default: break;
					}
					break;
   8ceca:	f000 bf79 	b.w	8ddc0 <main+0x2664>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8cece:	4b06      	ldr	r3, [pc, #24]	; (8cee8 <main+0x178c>)
   8ced0:	781b      	ldrb	r3, [r3, #0]
   8ced2:	2b07      	cmp	r3, #7
   8ced4:	d002      	beq.n	8cedc <main+0x1780>
   8ced6:	2b09      	cmp	r3, #9
   8ced8:	d003      	beq.n	8cee2 <main+0x1786>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8ceda:	e003      	b.n	8cee4 <main+0x1788>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8cedc:	bf00      	nop
   8cede:	f000 bf6f 	b.w	8ddc0 <main+0x2664>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8cee2:	bf00      	nop
						default: break;
					}
					break;
   8cee4:	f000 bf6c 	b.w	8ddc0 <main+0x2664>
   8cee8:	200718bf 	.word	0x200718bf
   8ceec:	0009f771 	.word	0x0009f771
   8cef0:	00088aa9 	.word	0x00088aa9
   8cef4:	20070504 	.word	0x20070504
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8cef8:	4b92      	ldr	r3, [pc, #584]	; (8d144 <main+0x19e8>)
   8cefa:	781b      	ldrb	r3, [r3, #0]
   8cefc:	3b0a      	subs	r3, #10
   8cefe:	2b55      	cmp	r3, #85	; 0x55
   8cf00:	f200 8116 	bhi.w	8d130 <main+0x19d4>
   8cf04:	a201      	add	r2, pc, #4	; (adr r2, 8cf0c <main+0x17b0>)
   8cf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cf0a:	bf00      	nop
   8cf0c:	0008d065 	.word	0x0008d065
   8cf10:	0008d065 	.word	0x0008d065
   8cf14:	0008d065 	.word	0x0008d065
   8cf18:	0008d131 	.word	0x0008d131
   8cf1c:	0008d131 	.word	0x0008d131
   8cf20:	0008d131 	.word	0x0008d131
   8cf24:	0008d131 	.word	0x0008d131
   8cf28:	0008d131 	.word	0x0008d131
   8cf2c:	0008d131 	.word	0x0008d131
   8cf30:	0008d131 	.word	0x0008d131
   8cf34:	0008d131 	.word	0x0008d131
   8cf38:	0008d065 	.word	0x0008d065
   8cf3c:	0008d131 	.word	0x0008d131
   8cf40:	0008d07f 	.word	0x0008d07f
   8cf44:	0008d131 	.word	0x0008d131
   8cf48:	0008d131 	.word	0x0008d131
   8cf4c:	0008d065 	.word	0x0008d065
   8cf50:	0008d065 	.word	0x0008d065
   8cf54:	0008d065 	.word	0x0008d065
   8cf58:	0008d131 	.word	0x0008d131
   8cf5c:	0008d131 	.word	0x0008d131
   8cf60:	0008d131 	.word	0x0008d131
   8cf64:	0008d131 	.word	0x0008d131
   8cf68:	0008d065 	.word	0x0008d065
   8cf6c:	0008d131 	.word	0x0008d131
   8cf70:	0008d131 	.word	0x0008d131
   8cf74:	0008d131 	.word	0x0008d131
   8cf78:	0008d131 	.word	0x0008d131
   8cf7c:	0008d131 	.word	0x0008d131
   8cf80:	0008d065 	.word	0x0008d065
   8cf84:	0008d065 	.word	0x0008d065
   8cf88:	0008d131 	.word	0x0008d131
   8cf8c:	0008d131 	.word	0x0008d131
   8cf90:	0008d131 	.word	0x0008d131
   8cf94:	0008d131 	.word	0x0008d131
   8cf98:	0008d065 	.word	0x0008d065
   8cf9c:	0008d065 	.word	0x0008d065
   8cfa0:	0008d131 	.word	0x0008d131
   8cfa4:	0008d131 	.word	0x0008d131
   8cfa8:	0008d131 	.word	0x0008d131
   8cfac:	0008d131 	.word	0x0008d131
   8cfb0:	0008d131 	.word	0x0008d131
   8cfb4:	0008d131 	.word	0x0008d131
   8cfb8:	0008d131 	.word	0x0008d131
   8cfbc:	0008d131 	.word	0x0008d131
   8cfc0:	0008d131 	.word	0x0008d131
   8cfc4:	0008d065 	.word	0x0008d065
   8cfc8:	0008d131 	.word	0x0008d131
   8cfcc:	0008d065 	.word	0x0008d065
   8cfd0:	0008d065 	.word	0x0008d065
   8cfd4:	0008d131 	.word	0x0008d131
   8cfd8:	0008d131 	.word	0x0008d131
   8cfdc:	0008d131 	.word	0x0008d131
   8cfe0:	0008d131 	.word	0x0008d131
   8cfe4:	0008d131 	.word	0x0008d131
   8cfe8:	0008d131 	.word	0x0008d131
   8cfec:	0008d131 	.word	0x0008d131
   8cff0:	0008d131 	.word	0x0008d131
   8cff4:	0008d131 	.word	0x0008d131
   8cff8:	0008d131 	.word	0x0008d131
   8cffc:	0008d131 	.word	0x0008d131
   8d000:	0008d131 	.word	0x0008d131
   8d004:	0008d131 	.word	0x0008d131
   8d008:	0008d131 	.word	0x0008d131
   8d00c:	0008d131 	.word	0x0008d131
   8d010:	0008d131 	.word	0x0008d131
   8d014:	0008d131 	.word	0x0008d131
   8d018:	0008d131 	.word	0x0008d131
   8d01c:	0008d131 	.word	0x0008d131
   8d020:	0008d131 	.word	0x0008d131
   8d024:	0008d131 	.word	0x0008d131
   8d028:	0008d131 	.word	0x0008d131
   8d02c:	0008d131 	.word	0x0008d131
   8d030:	0008d131 	.word	0x0008d131
   8d034:	0008d131 	.word	0x0008d131
   8d038:	0008d065 	.word	0x0008d065
   8d03c:	0008d131 	.word	0x0008d131
   8d040:	0008d131 	.word	0x0008d131
   8d044:	0008d11b 	.word	0x0008d11b
   8d048:	0008d131 	.word	0x0008d131
   8d04c:	0008d131 	.word	0x0008d131
   8d050:	0008d065 	.word	0x0008d065
   8d054:	0008d065 	.word	0x0008d065
   8d058:	0008d131 	.word	0x0008d131
   8d05c:	0008d131 	.word	0x0008d131
   8d060:	0008d065 	.word	0x0008d065
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d064:	4b37      	ldr	r3, [pc, #220]	; (8d144 <main+0x19e8>)
   8d066:	781b      	ldrb	r3, [r3, #0]
   8d068:	4618      	mov	r0, r3
   8d06a:	4b37      	ldr	r3, [pc, #220]	; (8d148 <main+0x19ec>)
   8d06c:	4798      	blx	r3
   8d06e:	4603      	mov	r3, r0
   8d070:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d072:	7bfb      	ldrb	r3, [r7, #15]
   8d074:	2b00      	cmp	r3, #0
   8d076:	d05e      	beq.n	8d136 <main+0x19da>
   8d078:	4b34      	ldr	r3, [pc, #208]	; (8d14c <main+0x19f0>)
   8d07a:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8d07c:	e05b      	b.n	8d136 <main+0x19da>
						//case EVT_CONSOLE_COMMAND_GET_DATA:
					//	Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
					//	ASSERT_ERROR(Cl_MacRetval);
					//	break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d07e:	4b31      	ldr	r3, [pc, #196]	; (8d144 <main+0x19e8>)
   8d080:	781b      	ldrb	r3, [r3, #0]
   8d082:	4618      	mov	r0, r3
   8d084:	4b32      	ldr	r3, [pc, #200]	; (8d150 <main+0x19f4>)
   8d086:	4798      	blx	r3
   8d088:	4603      	mov	r3, r0
   8d08a:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d08c:	7bfb      	ldrb	r3, [r7, #15]
   8d08e:	2b00      	cmp	r3, #0
   8d090:	d001      	beq.n	8d096 <main+0x193a>
   8d092:	4b2e      	ldr	r3, [pc, #184]	; (8d14c <main+0x19f0>)
   8d094:	4798      	blx	r3
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d096:	7bfb      	ldrb	r3, [r7, #15]
   8d098:	2b00      	cmp	r3, #0
   8d09a:	d002      	beq.n	8d0a2 <main+0x1946>
   8d09c:	7bfb      	ldrb	r3, [r7, #15]
   8d09e:	2b03      	cmp	r3, #3
   8d0a0:	d10b      	bne.n	8d0ba <main+0x195e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d0a2:	4b28      	ldr	r3, [pc, #160]	; (8d144 <main+0x19e8>)
   8d0a4:	781b      	ldrb	r3, [r3, #0]
   8d0a6:	4618      	mov	r0, r3
   8d0a8:	4b2a      	ldr	r3, [pc, #168]	; (8d154 <main+0x19f8>)
   8d0aa:	4798      	blx	r3
   8d0ac:	4603      	mov	r3, r0
   8d0ae:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d0b0:	7bfb      	ldrb	r3, [r7, #15]
   8d0b2:	2b00      	cmp	r3, #0
   8d0b4:	d001      	beq.n	8d0ba <main+0x195e>
   8d0b6:	4b25      	ldr	r3, [pc, #148]	; (8d14c <main+0x19f0>)
   8d0b8:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d0ba:	7bfb      	ldrb	r3, [r7, #15]
   8d0bc:	2b00      	cmp	r3, #0
   8d0be:	d002      	beq.n	8d0c6 <main+0x196a>
   8d0c0:	7bfb      	ldrb	r3, [r7, #15]
   8d0c2:	2b03      	cmp	r3, #3
   8d0c4:	d10b      	bne.n	8d0de <main+0x1982>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d0c6:	4b1f      	ldr	r3, [pc, #124]	; (8d144 <main+0x19e8>)
   8d0c8:	781b      	ldrb	r3, [r3, #0]
   8d0ca:	4618      	mov	r0, r3
   8d0cc:	4b1e      	ldr	r3, [pc, #120]	; (8d148 <main+0x19ec>)
   8d0ce:	4798      	blx	r3
   8d0d0:	4603      	mov	r3, r0
   8d0d2:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d0d4:	7bfb      	ldrb	r3, [r7, #15]
   8d0d6:	2b00      	cmp	r3, #0
   8d0d8:	d001      	beq.n	8d0de <main+0x1982>
   8d0da:	4b1c      	ldr	r3, [pc, #112]	; (8d14c <main+0x19f0>)
   8d0dc:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d0de:	7bfb      	ldrb	r3, [r7, #15]
   8d0e0:	2b00      	cmp	r3, #0
   8d0e2:	d002      	beq.n	8d0ea <main+0x198e>
   8d0e4:	7bfb      	ldrb	r3, [r7, #15]
   8d0e6:	2b03      	cmp	r3, #3
   8d0e8:	d10b      	bne.n	8d102 <main+0x19a6>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d0ea:	4b16      	ldr	r3, [pc, #88]	; (8d144 <main+0x19e8>)
   8d0ec:	781b      	ldrb	r3, [r3, #0]
   8d0ee:	4618      	mov	r0, r3
   8d0f0:	4b19      	ldr	r3, [pc, #100]	; (8d158 <main+0x19fc>)
   8d0f2:	4798      	blx	r3
   8d0f4:	4603      	mov	r3, r0
   8d0f6:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d0f8:	7bfb      	ldrb	r3, [r7, #15]
   8d0fa:	2b00      	cmp	r3, #0
   8d0fc:	d001      	beq.n	8d102 <main+0x19a6>
   8d0fe:	4b13      	ldr	r3, [pc, #76]	; (8d14c <main+0x19f0>)
   8d100:	4798      	blx	r3
							else
							{
								//handle error
							}

						if(Cl_MacRetval == CL_OK)
   8d102:	7bfb      	ldrb	r3, [r7, #15]
   8d104:	2b00      	cmp	r3, #0
   8d106:	d119      	bne.n	8d13c <main+0x19e0>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d108:	4b14      	ldr	r3, [pc, #80]	; (8d15c <main+0x1a00>)
   8d10a:	220f      	movs	r2, #15
   8d10c:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d10e:	7bfb      	ldrb	r3, [r7, #15]
   8d110:	2b00      	cmp	r3, #0
   8d112:	d013      	beq.n	8d13c <main+0x19e0>
   8d114:	4b0d      	ldr	r3, [pc, #52]	; (8d14c <main+0x19f0>)
   8d116:	4798      	blx	r3
						}
						break;
   8d118:	e010      	b.n	8d13c <main+0x19e0>
						
						// add case for isouf start event
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d11a:	4b10      	ldr	r3, [pc, #64]	; (8d15c <main+0x1a00>)
   8d11c:	2214      	movs	r2, #20
   8d11e:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d120:	4b08      	ldr	r3, [pc, #32]	; (8d144 <main+0x19e8>)
   8d122:	781b      	ldrb	r3, [r3, #0]
   8d124:	4618      	mov	r0, r3
   8d126:	4b0e      	ldr	r3, [pc, #56]	; (8d160 <main+0x1a04>)
   8d128:	4798      	blx	r3
   8d12a:	4603      	mov	r3, r0
   8d12c:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d12e:	e006      	b.n	8d13e <main+0x19e2>
						
						default: break;
   8d130:	bf00      	nop
   8d132:	f000 be45 	b.w	8ddc0 <main+0x2664>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8d136:	bf00      	nop
   8d138:	f000 be42 	b.w	8ddc0 <main+0x2664>
						{
							Cl_MacState = MAC_DIALYSIS;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8d13c:	bf00      	nop
						
						break;
						
						default: break;
					}
					break;
   8d13e:	f000 be3f 	b.w	8ddc0 <main+0x2664>
   8d142:	bf00      	nop
   8d144:	200718bf 	.word	0x200718bf
   8d148:	0009f771 	.word	0x0009f771
   8d14c:	00088aa9 	.word	0x00088aa9
   8d150:	000a64b5 	.word	0x000a64b5
   8d154:	000a3a31 	.word	0x000a3a31
   8d158:	00084fb9 	.word	0x00084fb9
   8d15c:	20070504 	.word	0x20070504
   8d160:	00095241 	.word	0x00095241
					
					case MAC_ISOUF:
					
					switch(Cl_MacEvent){
   8d164:	4ba7      	ldr	r3, [pc, #668]	; (8d404 <main+0x1ca8>)
   8d166:	781b      	ldrb	r3, [r3, #0]
   8d168:	3b07      	subs	r3, #7
   8d16a:	2b58      	cmp	r3, #88	; 0x58
   8d16c:	f200 8627 	bhi.w	8ddbe <main+0x2662>
   8d170:	a201      	add	r2, pc, #4	; (adr r2, 8d178 <main+0x1a1c>)
   8d172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d176:	bf00      	nop
   8d178:	0008d429 	.word	0x0008d429
   8d17c:	0008ddbf 	.word	0x0008ddbf
   8d180:	0008ddbf 	.word	0x0008ddbf
   8d184:	0008d2ed 	.word	0x0008d2ed
   8d188:	0008d2ed 	.word	0x0008d2ed
   8d18c:	0008d2ed 	.word	0x0008d2ed
   8d190:	0008ddbf 	.word	0x0008ddbf
   8d194:	0008ddbf 	.word	0x0008ddbf
   8d198:	0008ddbf 	.word	0x0008ddbf
   8d19c:	0008ddbf 	.word	0x0008ddbf
   8d1a0:	0008ddbf 	.word	0x0008ddbf
   8d1a4:	0008ddbf 	.word	0x0008ddbf
   8d1a8:	0008ddbf 	.word	0x0008ddbf
   8d1ac:	0008ddbf 	.word	0x0008ddbf
   8d1b0:	0008d2ed 	.word	0x0008d2ed
   8d1b4:	0008ddbf 	.word	0x0008ddbf
   8d1b8:	0008d367 	.word	0x0008d367
   8d1bc:	0008ddbf 	.word	0x0008ddbf
   8d1c0:	0008ddbf 	.word	0x0008ddbf
   8d1c4:	0008d2ed 	.word	0x0008d2ed
   8d1c8:	0008d2ed 	.word	0x0008d2ed
   8d1cc:	0008ddbf 	.word	0x0008ddbf
   8d1d0:	0008ddbf 	.word	0x0008ddbf
   8d1d4:	0008ddbf 	.word	0x0008ddbf
   8d1d8:	0008ddbf 	.word	0x0008ddbf
   8d1dc:	0008ddbf 	.word	0x0008ddbf
   8d1e0:	0008ddbf 	.word	0x0008ddbf
   8d1e4:	0008ddbf 	.word	0x0008ddbf
   8d1e8:	0008ddbf 	.word	0x0008ddbf
   8d1ec:	0008ddbf 	.word	0x0008ddbf
   8d1f0:	0008ddbf 	.word	0x0008ddbf
   8d1f4:	0008ddbf 	.word	0x0008ddbf
   8d1f8:	0008d2ed 	.word	0x0008d2ed
   8d1fc:	0008d2ed 	.word	0x0008d2ed
   8d200:	0008d2ed 	.word	0x0008d2ed
   8d204:	0008ddbf 	.word	0x0008ddbf
   8d208:	0008ddbf 	.word	0x0008ddbf
   8d20c:	0008ddbf 	.word	0x0008ddbf
   8d210:	0008d2ed 	.word	0x0008d2ed
   8d214:	0008d2ed 	.word	0x0008d2ed
   8d218:	0008ddbf 	.word	0x0008ddbf
   8d21c:	0008ddbf 	.word	0x0008ddbf
   8d220:	0008ddbf 	.word	0x0008ddbf
   8d224:	0008ddbf 	.word	0x0008ddbf
   8d228:	0008ddbf 	.word	0x0008ddbf
   8d22c:	0008ddbf 	.word	0x0008ddbf
   8d230:	0008ddbf 	.word	0x0008ddbf
   8d234:	0008ddbf 	.word	0x0008ddbf
   8d238:	0008ddbf 	.word	0x0008ddbf
   8d23c:	0008d2ed 	.word	0x0008d2ed
   8d240:	0008ddbf 	.word	0x0008ddbf
   8d244:	0008d2ed 	.word	0x0008d2ed
   8d248:	0008d2ed 	.word	0x0008d2ed
   8d24c:	0008d2ed 	.word	0x0008d2ed
   8d250:	0008d2ed 	.word	0x0008d2ed
   8d254:	0008ddbf 	.word	0x0008ddbf
   8d258:	0008ddbf 	.word	0x0008ddbf
   8d25c:	0008ddbf 	.word	0x0008ddbf
   8d260:	0008ddbf 	.word	0x0008ddbf
   8d264:	0008ddbf 	.word	0x0008ddbf
   8d268:	0008ddbf 	.word	0x0008ddbf
   8d26c:	0008ddbf 	.word	0x0008ddbf
   8d270:	0008ddbf 	.word	0x0008ddbf
   8d274:	0008ddbf 	.word	0x0008ddbf
   8d278:	0008ddbf 	.word	0x0008ddbf
   8d27c:	0008ddbf 	.word	0x0008ddbf
   8d280:	0008ddbf 	.word	0x0008ddbf
   8d284:	0008ddbf 	.word	0x0008ddbf
   8d288:	0008ddbf 	.word	0x0008ddbf
   8d28c:	0008ddbf 	.word	0x0008ddbf
   8d290:	0008ddbf 	.word	0x0008ddbf
   8d294:	0008ddbf 	.word	0x0008ddbf
   8d298:	0008ddbf 	.word	0x0008ddbf
   8d29c:	0008ddbf 	.word	0x0008ddbf
   8d2a0:	0008ddbf 	.word	0x0008ddbf
   8d2a4:	0008ddbf 	.word	0x0008ddbf
   8d2a8:	0008ddbf 	.word	0x0008ddbf
   8d2ac:	0008ddbf 	.word	0x0008ddbf
   8d2b0:	0008ddbf 	.word	0x0008ddbf
   8d2b4:	0008ddbf 	.word	0x0008ddbf
   8d2b8:	0008ddbf 	.word	0x0008ddbf
   8d2bc:	0008d2dd 	.word	0x0008d2dd
   8d2c0:	0008d34b 	.word	0x0008d34b
   8d2c4:	0008d30d 	.word	0x0008d30d
   8d2c8:	0008d2ed 	.word	0x0008d2ed
   8d2cc:	0008d2ed 	.word	0x0008d2ed
   8d2d0:	0008ddbf 	.word	0x0008ddbf
   8d2d4:	0008ddbf 	.word	0x0008ddbf
   8d2d8:	0008d2ed 	.word	0x0008d2ed
					
					case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							//Cl_MacState = MAC_ISOUF;
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d2dc:	4b49      	ldr	r3, [pc, #292]	; (8d404 <main+0x1ca8>)
   8d2de:	781b      	ldrb	r3, [r3, #0]
   8d2e0:	4618      	mov	r0, r3
   8d2e2:	4b49      	ldr	r3, [pc, #292]	; (8d408 <main+0x1cac>)
   8d2e4:	4798      	blx	r3
   8d2e6:	4603      	mov	r3, r0
   8d2e8:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8d2ea:	e0d1      	b.n	8d490 <main+0x1d34>
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d2ec:	4b45      	ldr	r3, [pc, #276]	; (8d404 <main+0x1ca8>)
   8d2ee:	781b      	ldrb	r3, [r3, #0]
   8d2f0:	4618      	mov	r0, r3
   8d2f2:	4b45      	ldr	r3, [pc, #276]	; (8d408 <main+0x1cac>)
   8d2f4:	4798      	blx	r3
   8d2f6:	4603      	mov	r3, r0
   8d2f8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d2fa:	7bfb      	ldrb	r3, [r7, #15]
   8d2fc:	2b00      	cmp	r3, #0
   8d2fe:	d001      	beq.n	8d304 <main+0x1ba8>
   8d300:	4b42      	ldr	r3, [pc, #264]	; (8d40c <main+0x1cb0>)
   8d302:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d304:	4b3f      	ldr	r3, [pc, #252]	; (8d404 <main+0x1ca8>)
   8d306:	2200      	movs	r2, #0
   8d308:	701a      	strb	r2, [r3, #0]
						break;
   8d30a:	e0c1      	b.n	8d490 <main+0x1d34>
						
						case MACREQ_ISOUF_COMPLETED:
						
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d30c:	4b3d      	ldr	r3, [pc, #244]	; (8d404 <main+0x1ca8>)
   8d30e:	781b      	ldrb	r3, [r3, #0]
   8d310:	4618      	mov	r0, r3
   8d312:	4b3d      	ldr	r3, [pc, #244]	; (8d408 <main+0x1cac>)
   8d314:	4798      	blx	r3
   8d316:	4603      	mov	r3, r0
   8d318:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d31a:	7bfb      	ldrb	r3, [r7, #15]
   8d31c:	2b00      	cmp	r3, #0
   8d31e:	d001      	beq.n	8d324 <main+0x1bc8>
   8d320:	4b3a      	ldr	r3, [pc, #232]	; (8d40c <main+0x1cb0>)
   8d322:	4798      	blx	r3
						if( Cl_MacRetval == CL_OK)
   8d324:	7bfb      	ldrb	r3, [r7, #15]
   8d326:	2b00      	cmp	r3, #0
   8d328:	d10b      	bne.n	8d342 <main+0x1be6>
						{
							
						//	Cl_MacRetval = Cl_rinse_init();
						//	Cl_MacRetval = Cl_stby_init();
						//	Cl_MacRetval = Cl_dprep_init();
							Cl_MacRetval =Cl_isouf_init();
   8d32a:	4b39      	ldr	r3, [pc, #228]	; (8d410 <main+0x1cb4>)
   8d32c:	4798      	blx	r3
   8d32e:	4603      	mov	r3, r0
   8d330:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacState = MAC_POST_ISOUF_STANDBY;
   8d332:	4b38      	ldr	r3, [pc, #224]	; (8d414 <main+0x1cb8>)
   8d334:	2215      	movs	r2, #21
   8d336:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d338:	7bfb      	ldrb	r3, [r7, #15]
   8d33a:	2b00      	cmp	r3, #0
   8d33c:	d001      	beq.n	8d342 <main+0x1be6>
   8d33e:	4b33      	ldr	r3, [pc, #204]	; (8d40c <main+0x1cb0>)
   8d340:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d342:	4b30      	ldr	r3, [pc, #192]	; (8d404 <main+0x1ca8>)
   8d344:	2200      	movs	r2, #0
   8d346:	701a      	strb	r2, [r3, #0]
						break;
   8d348:	e0a2      	b.n	8d490 <main+0x1d34>
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d34a:	4b2e      	ldr	r3, [pc, #184]	; (8d404 <main+0x1ca8>)
   8d34c:	781b      	ldrb	r3, [r3, #0]
   8d34e:	4618      	mov	r0, r3
   8d350:	4b2d      	ldr	r3, [pc, #180]	; (8d408 <main+0x1cac>)
   8d352:	4798      	blx	r3
   8d354:	4603      	mov	r3, r0
   8d356:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d358:	7bfb      	ldrb	r3, [r7, #15]
   8d35a:	2b00      	cmp	r3, #0
   8d35c:	f000 8094 	beq.w	8d488 <main+0x1d2c>
   8d360:	4b2a      	ldr	r3, [pc, #168]	; (8d40c <main+0x1cb0>)
   8d362:	4798      	blx	r3
						break;
   8d364:	e090      	b.n	8d488 <main+0x1d2c>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d366:	4b27      	ldr	r3, [pc, #156]	; (8d404 <main+0x1ca8>)
   8d368:	781b      	ldrb	r3, [r3, #0]
   8d36a:	4618      	mov	r0, r3
   8d36c:	4b2a      	ldr	r3, [pc, #168]	; (8d418 <main+0x1cbc>)
   8d36e:	4798      	blx	r3
   8d370:	4603      	mov	r3, r0
   8d372:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d374:	7bfb      	ldrb	r3, [r7, #15]
   8d376:	2b00      	cmp	r3, #0
   8d378:	d001      	beq.n	8d37e <main+0x1c22>
   8d37a:	4b24      	ldr	r3, [pc, #144]	; (8d40c <main+0x1cb0>)
   8d37c:	4798      	blx	r3
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d37e:	7bfb      	ldrb	r3, [r7, #15]
   8d380:	2b00      	cmp	r3, #0
   8d382:	d002      	beq.n	8d38a <main+0x1c2e>
   8d384:	7bfb      	ldrb	r3, [r7, #15]
   8d386:	2b03      	cmp	r3, #3
   8d388:	d10b      	bne.n	8d3a2 <main+0x1c46>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d38a:	4b1e      	ldr	r3, [pc, #120]	; (8d404 <main+0x1ca8>)
   8d38c:	781b      	ldrb	r3, [r3, #0]
   8d38e:	4618      	mov	r0, r3
   8d390:	4b22      	ldr	r3, [pc, #136]	; (8d41c <main+0x1cc0>)
   8d392:	4798      	blx	r3
   8d394:	4603      	mov	r3, r0
   8d396:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d398:	7bfb      	ldrb	r3, [r7, #15]
   8d39a:	2b00      	cmp	r3, #0
   8d39c:	d001      	beq.n	8d3a2 <main+0x1c46>
   8d39e:	4b1b      	ldr	r3, [pc, #108]	; (8d40c <main+0x1cb0>)
   8d3a0:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d3a2:	7bfb      	ldrb	r3, [r7, #15]
   8d3a4:	2b00      	cmp	r3, #0
   8d3a6:	d002      	beq.n	8d3ae <main+0x1c52>
   8d3a8:	7bfb      	ldrb	r3, [r7, #15]
   8d3aa:	2b03      	cmp	r3, #3
   8d3ac:	d10b      	bne.n	8d3c6 <main+0x1c6a>
						{
							Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d3ae:	4b15      	ldr	r3, [pc, #84]	; (8d404 <main+0x1ca8>)
   8d3b0:	781b      	ldrb	r3, [r3, #0]
   8d3b2:	4618      	mov	r0, r3
   8d3b4:	4b1a      	ldr	r3, [pc, #104]	; (8d420 <main+0x1cc4>)
   8d3b6:	4798      	blx	r3
   8d3b8:	4603      	mov	r3, r0
   8d3ba:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d3bc:	7bfb      	ldrb	r3, [r7, #15]
   8d3be:	2b00      	cmp	r3, #0
   8d3c0:	d001      	beq.n	8d3c6 <main+0x1c6a>
   8d3c2:	4b12      	ldr	r3, [pc, #72]	; (8d40c <main+0x1cb0>)
   8d3c4:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d3c6:	7bfb      	ldrb	r3, [r7, #15]
   8d3c8:	2b00      	cmp	r3, #0
   8d3ca:	d002      	beq.n	8d3d2 <main+0x1c76>
   8d3cc:	7bfb      	ldrb	r3, [r7, #15]
   8d3ce:	2b03      	cmp	r3, #3
   8d3d0:	d10b      	bne.n	8d3ea <main+0x1c8e>
						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d3d2:	4b0c      	ldr	r3, [pc, #48]	; (8d404 <main+0x1ca8>)
   8d3d4:	781b      	ldrb	r3, [r3, #0]
   8d3d6:	4618      	mov	r0, r3
   8d3d8:	4b12      	ldr	r3, [pc, #72]	; (8d424 <main+0x1cc8>)
   8d3da:	4798      	blx	r3
   8d3dc:	4603      	mov	r3, r0
   8d3de:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d3e0:	7bfb      	ldrb	r3, [r7, #15]
   8d3e2:	2b00      	cmp	r3, #0
   8d3e4:	d001      	beq.n	8d3ea <main+0x1c8e>
   8d3e6:	4b09      	ldr	r3, [pc, #36]	; (8d40c <main+0x1cb0>)
   8d3e8:	4798      	blx	r3
						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8d3ea:	7bfb      	ldrb	r3, [r7, #15]
   8d3ec:	2b00      	cmp	r3, #0
   8d3ee:	d14e      	bne.n	8d48e <main+0x1d32>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d3f0:	4b08      	ldr	r3, [pc, #32]	; (8d414 <main+0x1cb8>)
   8d3f2:	220f      	movs	r2, #15
   8d3f4:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d3f6:	7bfb      	ldrb	r3, [r7, #15]
   8d3f8:	2b00      	cmp	r3, #0
   8d3fa:	d048      	beq.n	8d48e <main+0x1d32>
   8d3fc:	4b03      	ldr	r3, [pc, #12]	; (8d40c <main+0x1cb0>)
   8d3fe:	4798      	blx	r3
						}
						break;
   8d400:	e045      	b.n	8d48e <main+0x1d32>
   8d402:	bf00      	nop
   8d404:	200718bf 	.word	0x200718bf
   8d408:	00095241 	.word	0x00095241
   8d40c:	00088aa9 	.word	0x00088aa9
   8d410:	00096c39 	.word	0x00096c39
   8d414:	20070504 	.word	0x20070504
   8d418:	000a64b5 	.word	0x000a64b5
   8d41c:	000a3a31 	.word	0x000a3a31
   8d420:	0009f771 	.word	0x0009f771
   8d424:	00084fb9 	.word	0x00084fb9
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						loopcountinsec = 0;
   8d428:	4b9f      	ldr	r3, [pc, #636]	; (8d6a8 <main+0x1f4c>)
   8d42a:	2200      	movs	r2, #0
   8d42c:	601a      	str	r2, [r3, #0]
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d42e:	4b9f      	ldr	r3, [pc, #636]	; (8d6ac <main+0x1f50>)
   8d430:	781b      	ldrb	r3, [r3, #0]
   8d432:	4618      	mov	r0, r3
   8d434:	4b9e      	ldr	r3, [pc, #632]	; (8d6b0 <main+0x1f54>)
   8d436:	4798      	blx	r3
   8d438:	4603      	mov	r3, r0
   8d43a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d43c:	7bfb      	ldrb	r3, [r7, #15]
   8d43e:	2b00      	cmp	r3, #0
   8d440:	d001      	beq.n	8d446 <main+0x1cea>
   8d442:	4b9c      	ldr	r3, [pc, #624]	; (8d6b4 <main+0x1f58>)
   8d444:	4798      	blx	r3

						if(Cl_MacRetval == CL_OK)
   8d446:	7bfb      	ldrb	r3, [r7, #15]
   8d448:	2b00      	cmp	r3, #0
   8d44a:	d10e      	bne.n	8d46a <main+0x1d0e>
						{
							
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d44c:	4b97      	ldr	r3, [pc, #604]	; (8d6ac <main+0x1f50>)
   8d44e:	781b      	ldrb	r3, [r3, #0]
   8d450:	4618      	mov	r0, r3
   8d452:	4b99      	ldr	r3, [pc, #612]	; (8d6b8 <main+0x1f5c>)
   8d454:	4798      	blx	r3
   8d456:	4603      	mov	r3, r0
   8d458:	73fb      	strb	r3, [r7, #15]
							if(Cl_MacRetval != CL_REJECTED)
   8d45a:	7bfb      	ldrb	r3, [r7, #15]
   8d45c:	2b03      	cmp	r3, #3
   8d45e:	d004      	beq.n	8d46a <main+0x1d0e>
							{
								ASSERT_ERROR(Cl_MacRetval);
   8d460:	7bfb      	ldrb	r3, [r7, #15]
   8d462:	2b00      	cmp	r3, #0
   8d464:	d001      	beq.n	8d46a <main+0x1d0e>
   8d466:	4b93      	ldr	r3, [pc, #588]	; (8d6b4 <main+0x1f58>)
   8d468:	4798      	blx	r3
							}
							
						}
						if( Cl_MacRetval == CL_OK)
   8d46a:	7bfb      	ldrb	r3, [r7, #15]
   8d46c:	2b00      	cmp	r3, #0
   8d46e:	d107      	bne.n	8d480 <main+0x1d24>
						{
							Cl_MacState = MAC_RINSE;
   8d470:	4b92      	ldr	r3, [pc, #584]	; (8d6bc <main+0x1f60>)
   8d472:	2207      	movs	r2, #7
   8d474:	701a      	strb	r2, [r3, #0]
						//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d476:	7bfb      	ldrb	r3, [r7, #15]
   8d478:	2b00      	cmp	r3, #0
   8d47a:	d001      	beq.n	8d480 <main+0x1d24>
   8d47c:	4b8d      	ldr	r3, [pc, #564]	; (8d6b4 <main+0x1f58>)
   8d47e:	4798      	blx	r3
						}
						if( Cl_MacRetval != CL_OK)
						{
							// Handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d480:	4b8a      	ldr	r3, [pc, #552]	; (8d6ac <main+0x1f50>)
   8d482:	2200      	movs	r2, #0
   8d484:	701a      	strb	r2, [r3, #0]
						break;
   8d486:	e003      	b.n	8d490 <main+0x1d34>
						break;
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
   8d488:	bf00      	nop
   8d48a:	f000 bc98 	b.w	8ddbe <main+0x2662>
						{
							Cl_MacState = MAC_DIALYSIS;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8d48e:	bf00      	nop
						break;

						
					}
					
					break;
   8d490:	f000 bc95 	b.w	8ddbe <main+0x2662>
					
					case MAC_POST_ISOUF_STANDBY:
					
					switch(Cl_MacEvent){
   8d494:	4b85      	ldr	r3, [pc, #532]	; (8d6ac <main+0x1f50>)
   8d496:	781b      	ldrb	r3, [r3, #0]
   8d498:	3b07      	subs	r3, #7
   8d49a:	2b58      	cmp	r3, #88	; 0x58
   8d49c:	f200 80fe 	bhi.w	8d69c <main+0x1f40>
   8d4a0:	a201      	add	r2, pc, #4	; (adr r2, 8d4a8 <main+0x1d4c>)
   8d4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d4a6:	bf00      	nop
   8d4a8:	0008d653 	.word	0x0008d653
   8d4ac:	0008d69d 	.word	0x0008d69d
   8d4b0:	0008d69d 	.word	0x0008d69d
   8d4b4:	0008d60d 	.word	0x0008d60d
   8d4b8:	0008d60d 	.word	0x0008d60d
   8d4bc:	0008d60d 	.word	0x0008d60d
   8d4c0:	0008d69d 	.word	0x0008d69d
   8d4c4:	0008d69d 	.word	0x0008d69d
   8d4c8:	0008d69d 	.word	0x0008d69d
   8d4cc:	0008d69d 	.word	0x0008d69d
   8d4d0:	0008d69d 	.word	0x0008d69d
   8d4d4:	0008d69d 	.word	0x0008d69d
   8d4d8:	0008d69d 	.word	0x0008d69d
   8d4dc:	0008d69d 	.word	0x0008d69d
   8d4e0:	0008d60d 	.word	0x0008d60d
   8d4e4:	0008d69d 	.word	0x0008d69d
   8d4e8:	0008d62d 	.word	0x0008d62d
   8d4ec:	0008d69d 	.word	0x0008d69d
   8d4f0:	0008d69d 	.word	0x0008d69d
   8d4f4:	0008d69d 	.word	0x0008d69d
   8d4f8:	0008d69d 	.word	0x0008d69d
   8d4fc:	0008d69d 	.word	0x0008d69d
   8d500:	0008d69d 	.word	0x0008d69d
   8d504:	0008d69d 	.word	0x0008d69d
   8d508:	0008d69d 	.word	0x0008d69d
   8d50c:	0008d69d 	.word	0x0008d69d
   8d510:	0008d69d 	.word	0x0008d69d
   8d514:	0008d69d 	.word	0x0008d69d
   8d518:	0008d69d 	.word	0x0008d69d
   8d51c:	0008d69d 	.word	0x0008d69d
   8d520:	0008d69d 	.word	0x0008d69d
   8d524:	0008d69d 	.word	0x0008d69d
   8d528:	0008d60d 	.word	0x0008d60d
   8d52c:	0008d60d 	.word	0x0008d60d
   8d530:	0008d60d 	.word	0x0008d60d
   8d534:	0008d69d 	.word	0x0008d69d
   8d538:	0008d69d 	.word	0x0008d69d
   8d53c:	0008d69d 	.word	0x0008d69d
   8d540:	0008d60d 	.word	0x0008d60d
   8d544:	0008d60d 	.word	0x0008d60d
   8d548:	0008d69d 	.word	0x0008d69d
   8d54c:	0008d69d 	.word	0x0008d69d
   8d550:	0008d69d 	.word	0x0008d69d
   8d554:	0008d69d 	.word	0x0008d69d
   8d558:	0008d69d 	.word	0x0008d69d
   8d55c:	0008d69d 	.word	0x0008d69d
   8d560:	0008d69d 	.word	0x0008d69d
   8d564:	0008d69d 	.word	0x0008d69d
   8d568:	0008d69d 	.word	0x0008d69d
   8d56c:	0008d60d 	.word	0x0008d60d
   8d570:	0008d69d 	.word	0x0008d69d
   8d574:	0008d60d 	.word	0x0008d60d
   8d578:	0008d60d 	.word	0x0008d60d
   8d57c:	0008d60d 	.word	0x0008d60d
   8d580:	0008d60d 	.word	0x0008d60d
   8d584:	0008d69d 	.word	0x0008d69d
   8d588:	0008d69d 	.word	0x0008d69d
   8d58c:	0008d69d 	.word	0x0008d69d
   8d590:	0008d69d 	.word	0x0008d69d
   8d594:	0008d69d 	.word	0x0008d69d
   8d598:	0008d69d 	.word	0x0008d69d
   8d59c:	0008d69d 	.word	0x0008d69d
   8d5a0:	0008d69d 	.word	0x0008d69d
   8d5a4:	0008d69d 	.word	0x0008d69d
   8d5a8:	0008d69d 	.word	0x0008d69d
   8d5ac:	0008d69d 	.word	0x0008d69d
   8d5b0:	0008d69d 	.word	0x0008d69d
   8d5b4:	0008d69d 	.word	0x0008d69d
   8d5b8:	0008d69d 	.word	0x0008d69d
   8d5bc:	0008d69d 	.word	0x0008d69d
   8d5c0:	0008d69d 	.word	0x0008d69d
   8d5c4:	0008d69d 	.word	0x0008d69d
   8d5c8:	0008d69d 	.word	0x0008d69d
   8d5cc:	0008d69d 	.word	0x0008d69d
   8d5d0:	0008d69d 	.word	0x0008d69d
   8d5d4:	0008d69d 	.word	0x0008d69d
   8d5d8:	0008d69d 	.word	0x0008d69d
   8d5dc:	0008d69d 	.word	0x0008d69d
   8d5e0:	0008d69d 	.word	0x0008d69d
   8d5e4:	0008d69d 	.word	0x0008d69d
   8d5e8:	0008d69d 	.word	0x0008d69d
   8d5ec:	0008d687 	.word	0x0008d687
   8d5f0:	0008d69d 	.word	0x0008d69d
   8d5f4:	0008d69d 	.word	0x0008d69d
   8d5f8:	0008d60d 	.word	0x0008d60d
   8d5fc:	0008d60d 	.word	0x0008d60d
   8d600:	0008d69d 	.word	0x0008d69d
   8d604:	0008d69d 	.word	0x0008d69d
   8d608:	0008d60d 	.word	0x0008d60d
						case EVT_CONSOLE_COMMAND_MUTE_ALARM:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d60c:	4b27      	ldr	r3, [pc, #156]	; (8d6ac <main+0x1f50>)
   8d60e:	781b      	ldrb	r3, [r3, #0]
   8d610:	4618      	mov	r0, r3
   8d612:	4b2b      	ldr	r3, [pc, #172]	; (8d6c0 <main+0x1f64>)
   8d614:	4798      	blx	r3
   8d616:	4603      	mov	r3, r0
   8d618:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d61a:	7bfb      	ldrb	r3, [r7, #15]
   8d61c:	2b00      	cmp	r3, #0
   8d61e:	d001      	beq.n	8d624 <main+0x1ec8>
   8d620:	4b24      	ldr	r3, [pc, #144]	; (8d6b4 <main+0x1f58>)
   8d622:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d624:	4b21      	ldr	r3, [pc, #132]	; (8d6ac <main+0x1f50>)
   8d626:	2200      	movs	r2, #0
   8d628:	701a      	strb	r2, [r3, #0]
						break;
   8d62a:	e03c      	b.n	8d6a6 <main+0x1f4a>
						{
							//handle error
						}      */
					//	if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
					//	{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d62c:	4b1f      	ldr	r3, [pc, #124]	; (8d6ac <main+0x1f50>)
   8d62e:	781b      	ldrb	r3, [r3, #0]
   8d630:	4618      	mov	r0, r3
   8d632:	4b24      	ldr	r3, [pc, #144]	; (8d6c4 <main+0x1f68>)
   8d634:	4798      	blx	r3
   8d636:	4603      	mov	r3, r0
   8d638:	73fb      	strb	r3, [r7, #15]
					//	else
					//	{
							//handle error
					//	}

						if(Cl_MacRetval == CL_OK)
   8d63a:	7bfb      	ldrb	r3, [r7, #15]
   8d63c:	2b00      	cmp	r3, #0
   8d63e:	d12f      	bne.n	8d6a0 <main+0x1f44>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d640:	4b1e      	ldr	r3, [pc, #120]	; (8d6bc <main+0x1f60>)
   8d642:	220f      	movs	r2, #15
   8d644:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d646:	7bfb      	ldrb	r3, [r7, #15]
   8d648:	2b00      	cmp	r3, #0
   8d64a:	d029      	beq.n	8d6a0 <main+0x1f44>
   8d64c:	4b19      	ldr	r3, [pc, #100]	; (8d6b4 <main+0x1f58>)
   8d64e:	4798      	blx	r3
						}
						break;
   8d650:	e026      	b.n	8d6a0 <main+0x1f44>
						case EVT_CONSOLE_COMMAND_RINSE_START:
						//Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
						//ASSERT_ERROR(Cl_MacRetval);
						//if(Cl_MacRetval == CL_OK)
						//{
							Cl_rinse_init();
   8d652:	4b1d      	ldr	r3, [pc, #116]	; (8d6c8 <main+0x1f6c>)
   8d654:	4798      	blx	r3
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d656:	4b15      	ldr	r3, [pc, #84]	; (8d6ac <main+0x1f50>)
   8d658:	781b      	ldrb	r3, [r3, #0]
   8d65a:	4618      	mov	r0, r3
   8d65c:	4b16      	ldr	r3, [pc, #88]	; (8d6b8 <main+0x1f5c>)
   8d65e:	4798      	blx	r3
   8d660:	4603      	mov	r3, r0
   8d662:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d664:	7bfb      	ldrb	r3, [r7, #15]
   8d666:	2b00      	cmp	r3, #0
   8d668:	d001      	beq.n	8d66e <main+0x1f12>
   8d66a:	4b12      	ldr	r3, [pc, #72]	; (8d6b4 <main+0x1f58>)
   8d66c:	4798      	blx	r3
						//else
						//{
							//handle error
						//}
						
						if( Cl_MacRetval == CL_OK)
   8d66e:	7bfb      	ldrb	r3, [r7, #15]
   8d670:	2b00      	cmp	r3, #0
   8d672:	d117      	bne.n	8d6a4 <main+0x1f48>
						{
							Cl_MacState = MAC_RINSE;
   8d674:	4b11      	ldr	r3, [pc, #68]	; (8d6bc <main+0x1f60>)
   8d676:	2207      	movs	r2, #7
   8d678:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d67a:	7bfb      	ldrb	r3, [r7, #15]
   8d67c:	2b00      	cmp	r3, #0
   8d67e:	d011      	beq.n	8d6a4 <main+0x1f48>
   8d680:	4b0c      	ldr	r3, [pc, #48]	; (8d6b4 <main+0x1f58>)
   8d682:	4798      	blx	r3
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8d684:	e00e      	b.n	8d6a4 <main+0x1f48>
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d686:	4b0d      	ldr	r3, [pc, #52]	; (8d6bc <main+0x1f60>)
   8d688:	2214      	movs	r2, #20
   8d68a:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d68c:	4b07      	ldr	r3, [pc, #28]	; (8d6ac <main+0x1f50>)
   8d68e:	781b      	ldrb	r3, [r3, #0]
   8d690:	4618      	mov	r0, r3
   8d692:	4b0b      	ldr	r3, [pc, #44]	; (8d6c0 <main+0x1f64>)
   8d694:	4798      	blx	r3
   8d696:	4603      	mov	r3, r0
   8d698:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d69a:	e004      	b.n	8d6a6 <main+0x1f4a>
						
						
						default: break;
   8d69c:	bf00      	nop
   8d69e:	e38f      	b.n	8ddc0 <main+0x2664>
						{
							Cl_MacState = MAC_DIALYSIS;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8d6a0:	bf00      	nop
   8d6a2:	e38d      	b.n	8ddc0 <main+0x2664>
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8d6a4:	bf00      	nop
						break;
						
						
						default: break;
					}
					break;
   8d6a6:	e38b      	b.n	8ddc0 <main+0x2664>
   8d6a8:	200718c4 	.word	0x200718c4
   8d6ac:	200718bf 	.word	0x200718bf
   8d6b0:	000a64b5 	.word	0x000a64b5
   8d6b4:	00088aa9 	.word	0x00088aa9
   8d6b8:	000a3a31 	.word	0x000a3a31
   8d6bc:	20070504 	.word	0x20070504
   8d6c0:	00095241 	.word	0x00095241
   8d6c4:	00084fb9 	.word	0x00084fb9
   8d6c8:	000a5349 	.word	0x000a5349
					
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8d6cc:	4ba3      	ldr	r3, [pc, #652]	; (8d95c <main+0x2200>)
   8d6ce:	781b      	ldrb	r3, [r3, #0]
   8d6d0:	3b07      	subs	r3, #7
   8d6d2:	2b5a      	cmp	r3, #90	; 0x5a
   8d6d4:	f200 813b 	bhi.w	8d94e <main+0x21f2>
   8d6d8:	a201      	add	r2, pc, #4	; (adr r2, 8d6e0 <main+0x1f84>)
   8d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d6de:	bf00      	nop
   8d6e0:	0008d8b3 	.word	0x0008d8b3
   8d6e4:	0008d94f 	.word	0x0008d94f
   8d6e8:	0008d94f 	.word	0x0008d94f
   8d6ec:	0008d84d 	.word	0x0008d84d
   8d6f0:	0008d84d 	.word	0x0008d84d
   8d6f4:	0008d84d 	.word	0x0008d84d
   8d6f8:	0008d94f 	.word	0x0008d94f
   8d6fc:	0008d94f 	.word	0x0008d94f
   8d700:	0008d94f 	.word	0x0008d94f
   8d704:	0008d94f 	.word	0x0008d94f
   8d708:	0008d94f 	.word	0x0008d94f
   8d70c:	0008d94f 	.word	0x0008d94f
   8d710:	0008d94f 	.word	0x0008d94f
   8d714:	0008d94f 	.word	0x0008d94f
   8d718:	0008d84d 	.word	0x0008d84d
   8d71c:	0008d94f 	.word	0x0008d94f
   8d720:	0008d94f 	.word	0x0008d94f
   8d724:	0008d86d 	.word	0x0008d86d
   8d728:	0008d84d 	.word	0x0008d84d
   8d72c:	0008d84d 	.word	0x0008d84d
   8d730:	0008d84d 	.word	0x0008d84d
   8d734:	0008d94f 	.word	0x0008d94f
   8d738:	0008d94f 	.word	0x0008d94f
   8d73c:	0008d94f 	.word	0x0008d94f
   8d740:	0008d94f 	.word	0x0008d94f
   8d744:	0008d94f 	.word	0x0008d94f
   8d748:	0008d94f 	.word	0x0008d94f
   8d74c:	0008d94f 	.word	0x0008d94f
   8d750:	0008d94f 	.word	0x0008d94f
   8d754:	0008d94f 	.word	0x0008d94f
   8d758:	0008d94f 	.word	0x0008d94f
   8d75c:	0008d94f 	.word	0x0008d94f
   8d760:	0008d84d 	.word	0x0008d84d
   8d764:	0008d84d 	.word	0x0008d84d
   8d768:	0008d84d 	.word	0x0008d84d
   8d76c:	0008d94f 	.word	0x0008d94f
   8d770:	0008d94f 	.word	0x0008d94f
   8d774:	0008d94f 	.word	0x0008d94f
   8d778:	0008d84d 	.word	0x0008d84d
   8d77c:	0008d84d 	.word	0x0008d84d
   8d780:	0008d94f 	.word	0x0008d94f
   8d784:	0008d94f 	.word	0x0008d94f
   8d788:	0008d94f 	.word	0x0008d94f
   8d78c:	0008d94f 	.word	0x0008d94f
   8d790:	0008d94f 	.word	0x0008d94f
   8d794:	0008d94f 	.word	0x0008d94f
   8d798:	0008d94f 	.word	0x0008d94f
   8d79c:	0008d94f 	.word	0x0008d94f
   8d7a0:	0008d94f 	.word	0x0008d94f
   8d7a4:	0008d84d 	.word	0x0008d84d
   8d7a8:	0008d94f 	.word	0x0008d94f
   8d7ac:	0008d84d 	.word	0x0008d84d
   8d7b0:	0008d84d 	.word	0x0008d84d
   8d7b4:	0008d84d 	.word	0x0008d84d
   8d7b8:	0008d84d 	.word	0x0008d84d
   8d7bc:	0008d94f 	.word	0x0008d94f
   8d7c0:	0008d94f 	.word	0x0008d94f
   8d7c4:	0008d94f 	.word	0x0008d94f
   8d7c8:	0008d94f 	.word	0x0008d94f
   8d7cc:	0008d94f 	.word	0x0008d94f
   8d7d0:	0008d94f 	.word	0x0008d94f
   8d7d4:	0008d94f 	.word	0x0008d94f
   8d7d8:	0008d94f 	.word	0x0008d94f
   8d7dc:	0008d94f 	.word	0x0008d94f
   8d7e0:	0008d94f 	.word	0x0008d94f
   8d7e4:	0008d94f 	.word	0x0008d94f
   8d7e8:	0008d94f 	.word	0x0008d94f
   8d7ec:	0008d94f 	.word	0x0008d94f
   8d7f0:	0008d94f 	.word	0x0008d94f
   8d7f4:	0008d94f 	.word	0x0008d94f
   8d7f8:	0008d94f 	.word	0x0008d94f
   8d7fc:	0008d94f 	.word	0x0008d94f
   8d800:	0008d94f 	.word	0x0008d94f
   8d804:	0008d901 	.word	0x0008d901
   8d808:	0008d94f 	.word	0x0008d94f
   8d80c:	0008d94f 	.word	0x0008d94f
   8d810:	0008d94f 	.word	0x0008d94f
   8d814:	0008d94f 	.word	0x0008d94f
   8d818:	0008d94f 	.word	0x0008d94f
   8d81c:	0008d94f 	.word	0x0008d94f
   8d820:	0008d94f 	.word	0x0008d94f
   8d824:	0008d887 	.word	0x0008d887
   8d828:	0008d94f 	.word	0x0008d94f
   8d82c:	0008d94f 	.word	0x0008d94f
   8d830:	0008d84d 	.word	0x0008d84d
   8d834:	0008d84d 	.word	0x0008d84d
   8d838:	0008d94f 	.word	0x0008d94f
   8d83c:	0008d89d 	.word	0x0008d89d
   8d840:	0008d84d 	.word	0x0008d84d
   8d844:	0008d84d 	.word	0x0008d84d
   8d848:	0008d84d 	.word	0x0008d84d
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_ON:
						case EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_OFF:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d84c:	4b43      	ldr	r3, [pc, #268]	; (8d95c <main+0x2200>)
   8d84e:	781b      	ldrb	r3, [r3, #0]
   8d850:	4618      	mov	r0, r3
   8d852:	4b43      	ldr	r3, [pc, #268]	; (8d960 <main+0x2204>)
   8d854:	4798      	blx	r3
   8d856:	4603      	mov	r3, r0
   8d858:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d85a:	7bfb      	ldrb	r3, [r7, #15]
   8d85c:	2b00      	cmp	r3, #0
   8d85e:	d001      	beq.n	8d864 <main+0x2108>
   8d860:	4b40      	ldr	r3, [pc, #256]	; (8d964 <main+0x2208>)
   8d862:	4798      	blx	r3
								if(Cl_MacRetval != CL_OK)
								{
									// handle error
								}
							
							Cl_MacEvent = EVT_NULL;
   8d864:	4b3d      	ldr	r3, [pc, #244]	; (8d95c <main+0x2200>)
   8d866:	2200      	movs	r2, #0
   8d868:	701a      	strb	r2, [r3, #0]
						break;
   8d86a:	e075      	b.n	8d958 <main+0x21fc>
// 							{
// 								// handle error
// 							}
// 						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d86c:	4b3b      	ldr	r3, [pc, #236]	; (8d95c <main+0x2200>)
   8d86e:	781b      	ldrb	r3, [r3, #0]
   8d870:	4618      	mov	r0, r3
   8d872:	4b3b      	ldr	r3, [pc, #236]	; (8d960 <main+0x2204>)
   8d874:	4798      	blx	r3
   8d876:	4603      	mov	r3, r0
   8d878:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d87a:	7bfb      	ldrb	r3, [r7, #15]
   8d87c:	2b00      	cmp	r3, #0
   8d87e:	d068      	beq.n	8d952 <main+0x21f6>
   8d880:	4b38      	ldr	r3, [pc, #224]	; (8d964 <main+0x2208>)
   8d882:	4798      	blx	r3
						break;
   8d884:	e065      	b.n	8d952 <main+0x21f6>
						break;
						#endif
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d886:	4b38      	ldr	r3, [pc, #224]	; (8d968 <main+0x220c>)
   8d888:	2214      	movs	r2, #20
   8d88a:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d88c:	4b33      	ldr	r3, [pc, #204]	; (8d95c <main+0x2200>)
   8d88e:	781b      	ldrb	r3, [r3, #0]
   8d890:	4618      	mov	r0, r3
   8d892:	4b36      	ldr	r3, [pc, #216]	; (8d96c <main+0x2210>)
   8d894:	4798      	blx	r3
   8d896:	4603      	mov	r3, r0
   8d898:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d89a:	e05d      	b.n	8d958 <main+0x21fc>
						
						
						case MACREQ_POST_DIALYSIS_ISOUF_REQ :
						Cl_MacState = MAC_ISOUF;
   8d89c:	4b32      	ldr	r3, [pc, #200]	; (8d968 <main+0x220c>)
   8d89e:	2214      	movs	r2, #20
   8d8a0:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d8a2:	4b2e      	ldr	r3, [pc, #184]	; (8d95c <main+0x2200>)
   8d8a4:	781b      	ldrb	r3, [r3, #0]
   8d8a6:	4618      	mov	r0, r3
   8d8a8:	4b30      	ldr	r3, [pc, #192]	; (8d96c <main+0x2210>)
   8d8aa:	4798      	blx	r3
   8d8ac:	4603      	mov	r3, r0
   8d8ae:	73fb      	strb	r3, [r7, #15]
						
						break;
   8d8b0:	e052      	b.n	8d958 <main+0x21fc>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d8b2:	4b2a      	ldr	r3, [pc, #168]	; (8d95c <main+0x2200>)
   8d8b4:	781b      	ldrb	r3, [r3, #0]
   8d8b6:	4618      	mov	r0, r3
   8d8b8:	4b2d      	ldr	r3, [pc, #180]	; (8d970 <main+0x2214>)
   8d8ba:	4798      	blx	r3
   8d8bc:	4603      	mov	r3, r0
   8d8be:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d8c0:	7bfb      	ldrb	r3, [r7, #15]
   8d8c2:	2b00      	cmp	r3, #0
   8d8c4:	d001      	beq.n	8d8ca <main+0x216e>
   8d8c6:	4b27      	ldr	r3, [pc, #156]	; (8d964 <main+0x2208>)
   8d8c8:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d8ca:	7bfb      	ldrb	r3, [r7, #15]
   8d8cc:	2b00      	cmp	r3, #0
   8d8ce:	d10b      	bne.n	8d8e8 <main+0x218c>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d8d0:	4b22      	ldr	r3, [pc, #136]	; (8d95c <main+0x2200>)
   8d8d2:	781b      	ldrb	r3, [r3, #0]
   8d8d4:	4618      	mov	r0, r3
   8d8d6:	4b27      	ldr	r3, [pc, #156]	; (8d974 <main+0x2218>)
   8d8d8:	4798      	blx	r3
   8d8da:	4603      	mov	r3, r0
   8d8dc:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d8de:	7bfb      	ldrb	r3, [r7, #15]
   8d8e0:	2b00      	cmp	r3, #0
   8d8e2:	d001      	beq.n	8d8e8 <main+0x218c>
   8d8e4:	4b1f      	ldr	r3, [pc, #124]	; (8d964 <main+0x2208>)
   8d8e6:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8d8e8:	7bfb      	ldrb	r3, [r7, #15]
   8d8ea:	2b00      	cmp	r3, #0
   8d8ec:	d133      	bne.n	8d956 <main+0x21fa>
							{
								Cl_MacState = MAC_RINSE;
   8d8ee:	4b1e      	ldr	r3, [pc, #120]	; (8d968 <main+0x220c>)
   8d8f0:	2207      	movs	r2, #7
   8d8f2:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);
   8d8f4:	7bfb      	ldrb	r3, [r7, #15]
   8d8f6:	2b00      	cmp	r3, #0
   8d8f8:	d02d      	beq.n	8d956 <main+0x21fa>
   8d8fa:	4b1a      	ldr	r3, [pc, #104]	; (8d964 <main+0x2208>)
   8d8fc:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8d8fe:	e02a      	b.n	8d956 <main+0x21fa>
		
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d900:	4b16      	ldr	r3, [pc, #88]	; (8d95c <main+0x2200>)
   8d902:	781b      	ldrb	r3, [r3, #0]
   8d904:	4618      	mov	r0, r3
   8d906:	4b16      	ldr	r3, [pc, #88]	; (8d960 <main+0x2204>)
   8d908:	4798      	blx	r3
   8d90a:	4603      	mov	r3, r0
   8d90c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d90e:	7bfb      	ldrb	r3, [r7, #15]
   8d910:	2b00      	cmp	r3, #0
   8d912:	d001      	beq.n	8d918 <main+0x21bc>
   8d914:	4b13      	ldr	r3, [pc, #76]	; (8d964 <main+0x2208>)
   8d916:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8d918:	7bfb      	ldrb	r3, [r7, #15]
   8d91a:	2b00      	cmp	r3, #0
   8d91c:	d113      	bne.n	8d946 <main+0x21ea>
							{
							
								Cl_MacRetval = Cl_rinse_init();
   8d91e:	4b16      	ldr	r3, [pc, #88]	; (8d978 <main+0x221c>)
   8d920:	4798      	blx	r3
   8d922:	4603      	mov	r3, r0
   8d924:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_stby_init();
   8d926:	4b15      	ldr	r3, [pc, #84]	; (8d97c <main+0x2220>)
   8d928:	4798      	blx	r3
   8d92a:	4603      	mov	r3, r0
   8d92c:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_dprep_init();
   8d92e:	4b14      	ldr	r3, [pc, #80]	; (8d980 <main+0x2224>)
   8d930:	4798      	blx	r3
   8d932:	4603      	mov	r3, r0
   8d934:	73fb      	strb	r3, [r7, #15]
								
								
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8d936:	4b0c      	ldr	r3, [pc, #48]	; (8d968 <main+0x220c>)
   8d938:	2211      	movs	r2, #17
   8d93a:	701a      	strb	r2, [r3, #0]
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8d93c:	7bfb      	ldrb	r3, [r7, #15]
   8d93e:	2b00      	cmp	r3, #0
   8d940:	d001      	beq.n	8d946 <main+0x21ea>
   8d942:	4b08      	ldr	r3, [pc, #32]	; (8d964 <main+0x2208>)
   8d944:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8d946:	4b05      	ldr	r3, [pc, #20]	; (8d95c <main+0x2200>)
   8d948:	2200      	movs	r2, #0
   8d94a:	701a      	strb	r2, [r3, #0]
						break;
   8d94c:	e004      	b.n	8d958 <main+0x21fc>
						default: break;
   8d94e:	bf00      	nop
   8d950:	e236      	b.n	8ddc0 <main+0x2664>
// 							}
// 						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
   8d952:	bf00      	nop
   8d954:	e234      	b.n	8ddc0 <main+0x2664>
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8d956:	bf00      	nop
							}
							Cl_MacEvent = EVT_NULL;
						break;
						default: break;
					}
					break;
   8d958:	e232      	b.n	8ddc0 <main+0x2664>
   8d95a:	bf00      	nop
   8d95c:	200718bf 	.word	0x200718bf
   8d960:	00084fb9 	.word	0x00084fb9
   8d964:	00088aa9 	.word	0x00088aa9
   8d968:	20070504 	.word	0x20070504
   8d96c:	00095241 	.word	0x00095241
   8d970:	000a64b5 	.word	0x000a64b5
   8d974:	000a3a31 	.word	0x000a3a31
   8d978:	000a5349 	.word	0x000a5349
   8d97c:	000a707d 	.word	0x000a707d
   8d980:	0009f621 	.word	0x0009f621
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8d984:	4bd9      	ldr	r3, [pc, #868]	; (8dcec <main+0x2590>)
   8d986:	781b      	ldrb	r3, [r3, #0]
   8d988:	3b07      	subs	r3, #7
   8d98a:	2b55      	cmp	r3, #85	; 0x55
   8d98c:	f200 80f5 	bhi.w	8db7a <main+0x241e>
   8d990:	a201      	add	r2, pc, #4	; (adr r2, 8d998 <main+0x223c>)
   8d992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d996:	bf00      	nop
   8d998:	0008db01 	.word	0x0008db01
   8d99c:	0008db7b 	.word	0x0008db7b
   8d9a0:	0008db7b 	.word	0x0008db7b
   8d9a4:	0008daf1 	.word	0x0008daf1
   8d9a8:	0008daf1 	.word	0x0008daf1
   8d9ac:	0008daf1 	.word	0x0008daf1
   8d9b0:	0008db7b 	.word	0x0008db7b
   8d9b4:	0008db7b 	.word	0x0008db7b
   8d9b8:	0008db7b 	.word	0x0008db7b
   8d9bc:	0008db7b 	.word	0x0008db7b
   8d9c0:	0008db7b 	.word	0x0008db7b
   8d9c4:	0008db7b 	.word	0x0008db7b
   8d9c8:	0008db7b 	.word	0x0008db7b
   8d9cc:	0008db7b 	.word	0x0008db7b
   8d9d0:	0008db7b 	.word	0x0008db7b
   8d9d4:	0008db7b 	.word	0x0008db7b
   8d9d8:	0008db7b 	.word	0x0008db7b
   8d9dc:	0008db7b 	.word	0x0008db7b
   8d9e0:	0008db7b 	.word	0x0008db7b
   8d9e4:	0008db55 	.word	0x0008db55
   8d9e8:	0008db55 	.word	0x0008db55
   8d9ec:	0008db7b 	.word	0x0008db7b
   8d9f0:	0008db7b 	.word	0x0008db7b
   8d9f4:	0008db7b 	.word	0x0008db7b
   8d9f8:	0008db7b 	.word	0x0008db7b
   8d9fc:	0008db7b 	.word	0x0008db7b
   8da00:	0008db7b 	.word	0x0008db7b
   8da04:	0008db7b 	.word	0x0008db7b
   8da08:	0008db7b 	.word	0x0008db7b
   8da0c:	0008db7b 	.word	0x0008db7b
   8da10:	0008db7b 	.word	0x0008db7b
   8da14:	0008db7b 	.word	0x0008db7b
   8da18:	0008daf1 	.word	0x0008daf1
   8da1c:	0008daf1 	.word	0x0008daf1
   8da20:	0008db7b 	.word	0x0008db7b
   8da24:	0008db7b 	.word	0x0008db7b
   8da28:	0008db7b 	.word	0x0008db7b
   8da2c:	0008db7b 	.word	0x0008db7b
   8da30:	0008db7b 	.word	0x0008db7b
   8da34:	0008db7b 	.word	0x0008db7b
   8da38:	0008db7b 	.word	0x0008db7b
   8da3c:	0008db7b 	.word	0x0008db7b
   8da40:	0008db7b 	.word	0x0008db7b
   8da44:	0008db7b 	.word	0x0008db7b
   8da48:	0008db7b 	.word	0x0008db7b
   8da4c:	0008db7b 	.word	0x0008db7b
   8da50:	0008db7b 	.word	0x0008db7b
   8da54:	0008db7b 	.word	0x0008db7b
   8da58:	0008db7b 	.word	0x0008db7b
   8da5c:	0008db7b 	.word	0x0008db7b
   8da60:	0008db7b 	.word	0x0008db7b
   8da64:	0008db7b 	.word	0x0008db7b
   8da68:	0008db7b 	.word	0x0008db7b
   8da6c:	0008db7b 	.word	0x0008db7b
   8da70:	0008db7b 	.word	0x0008db7b
   8da74:	0008db7b 	.word	0x0008db7b
   8da78:	0008db7b 	.word	0x0008db7b
   8da7c:	0008db7b 	.word	0x0008db7b
   8da80:	0008db7b 	.word	0x0008db7b
   8da84:	0008db7b 	.word	0x0008db7b
   8da88:	0008db7b 	.word	0x0008db7b
   8da8c:	0008db7b 	.word	0x0008db7b
   8da90:	0008db7b 	.word	0x0008db7b
   8da94:	0008db7b 	.word	0x0008db7b
   8da98:	0008db7b 	.word	0x0008db7b
   8da9c:	0008db7b 	.word	0x0008db7b
   8daa0:	0008db7b 	.word	0x0008db7b
   8daa4:	0008db7b 	.word	0x0008db7b
   8daa8:	0008db7b 	.word	0x0008db7b
   8daac:	0008db7b 	.word	0x0008db7b
   8dab0:	0008db7b 	.word	0x0008db7b
   8dab4:	0008db7b 	.word	0x0008db7b
   8dab8:	0008db7b 	.word	0x0008db7b
   8dabc:	0008db7b 	.word	0x0008db7b
   8dac0:	0008db7b 	.word	0x0008db7b
   8dac4:	0008db7b 	.word	0x0008db7b
   8dac8:	0008db7b 	.word	0x0008db7b
   8dacc:	0008db7b 	.word	0x0008db7b
   8dad0:	0008db7b 	.word	0x0008db7b
   8dad4:	0008db7b 	.word	0x0008db7b
   8dad8:	0008db7b 	.word	0x0008db7b
   8dadc:	0008db7b 	.word	0x0008db7b
   8dae0:	0008db7b 	.word	0x0008db7b
   8dae4:	0008db7b 	.word	0x0008db7b
   8dae8:	0008daf1 	.word	0x0008daf1
   8daec:	0008daf1 	.word	0x0008daf1
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8daf0:	4b7e      	ldr	r3, [pc, #504]	; (8dcec <main+0x2590>)
   8daf2:	781b      	ldrb	r3, [r3, #0]
   8daf4:	4618      	mov	r0, r3
   8daf6:	4b7e      	ldr	r3, [pc, #504]	; (8dcf0 <main+0x2594>)
   8daf8:	4798      	blx	r3
   8dafa:	4603      	mov	r3, r0
   8dafc:	73fb      	strb	r3, [r7, #15]
						break;
   8dafe:	e03f      	b.n	8db80 <main+0x2424>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8db00:	4b7a      	ldr	r3, [pc, #488]	; (8dcec <main+0x2590>)
   8db02:	781b      	ldrb	r3, [r3, #0]
   8db04:	4618      	mov	r0, r3
   8db06:	4b7a      	ldr	r3, [pc, #488]	; (8dcf0 <main+0x2594>)
   8db08:	4798      	blx	r3
   8db0a:	4603      	mov	r3, r0
   8db0c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8db0e:	7bfb      	ldrb	r3, [r7, #15]
   8db10:	2b00      	cmp	r3, #0
   8db12:	d001      	beq.n	8db18 <main+0x23bc>
   8db14:	4b77      	ldr	r3, [pc, #476]	; (8dcf4 <main+0x2598>)
   8db16:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8db18:	7bfb      	ldrb	r3, [r7, #15]
   8db1a:	2b00      	cmp	r3, #0
   8db1c:	d10b      	bne.n	8db36 <main+0x23da>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8db1e:	4b73      	ldr	r3, [pc, #460]	; (8dcec <main+0x2590>)
   8db20:	781b      	ldrb	r3, [r3, #0]
   8db22:	4618      	mov	r0, r3
   8db24:	4b74      	ldr	r3, [pc, #464]	; (8dcf8 <main+0x259c>)
   8db26:	4798      	blx	r3
   8db28:	4603      	mov	r3, r0
   8db2a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8db2c:	7bfb      	ldrb	r3, [r7, #15]
   8db2e:	2b00      	cmp	r3, #0
   8db30:	d001      	beq.n	8db36 <main+0x23da>
   8db32:	4b70      	ldr	r3, [pc, #448]	; (8dcf4 <main+0x2598>)
   8db34:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if( Cl_MacRetval == CL_OK)
   8db36:	7bfb      	ldrb	r3, [r7, #15]
   8db38:	2b00      	cmp	r3, #0
   8db3a:	d107      	bne.n	8db4c <main+0x23f0>
							{
								Cl_MacState = MAC_RINSE;
   8db3c:	4b6f      	ldr	r3, [pc, #444]	; (8dcfc <main+0x25a0>)
   8db3e:	2207      	movs	r2, #7
   8db40:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8db42:	7bfb      	ldrb	r3, [r7, #15]
   8db44:	2b00      	cmp	r3, #0
   8db46:	d001      	beq.n	8db4c <main+0x23f0>
   8db48:	4b6a      	ldr	r3, [pc, #424]	; (8dcf4 <main+0x2598>)
   8db4a:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8db4c:	4b67      	ldr	r3, [pc, #412]	; (8dcec <main+0x2590>)
   8db4e:	2200      	movs	r2, #0
   8db50:	701a      	strb	r2, [r3, #0]
						break;
   8db52:	e015      	b.n	8db80 <main+0x2424>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8db54:	4b65      	ldr	r3, [pc, #404]	; (8dcec <main+0x2590>)
   8db56:	781b      	ldrb	r3, [r3, #0]
   8db58:	4618      	mov	r0, r3
   8db5a:	4b69      	ldr	r3, [pc, #420]	; (8dd00 <main+0x25a4>)
   8db5c:	4798      	blx	r3
   8db5e:	4603      	mov	r3, r0
   8db60:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8db62:	7bfb      	ldrb	r3, [r7, #15]
   8db64:	2b00      	cmp	r3, #0
   8db66:	d001      	beq.n	8db6c <main+0x2410>
   8db68:	4b62      	ldr	r3, [pc, #392]	; (8dcf4 <main+0x2598>)
   8db6a:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8db6c:	7bfb      	ldrb	r3, [r7, #15]
   8db6e:	2b00      	cmp	r3, #0
   8db70:	d105      	bne.n	8db7e <main+0x2422>
								{
									Cl_MacState = MAC_DIALYSIS;
   8db72:	4b62      	ldr	r3, [pc, #392]	; (8dcfc <main+0x25a0>)
   8db74:	220f      	movs	r2, #15
   8db76:	701a      	strb	r2, [r3, #0]
								else
								{
									//handle error
								}
						
						break;
   8db78:	e001      	b.n	8db7e <main+0x2422>
						{
							//handle error
						}
						break;
						#endif
						default: break;
   8db7a:	bf00      	nop
   8db7c:	e120      	b.n	8ddc0 <main+0x2664>
								else
								{
									//handle error
								}
						
						break;
   8db7e:	bf00      	nop
						}
						break;
						#endif
						default: break;
					}
					break;
   8db80:	e11e      	b.n	8ddc0 <main+0x2664>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8db82:	4b5a      	ldr	r3, [pc, #360]	; (8dcec <main+0x2590>)
   8db84:	781b      	ldrb	r3, [r3, #0]
   8db86:	3b07      	subs	r3, #7
   8db88:	2b55      	cmp	r3, #85	; 0x55
   8db8a:	f200 810e 	bhi.w	8ddaa <main+0x264e>
   8db8e:	a201      	add	r2, pc, #4	; (adr r2, 8db94 <main+0x2438>)
   8db90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8db94:	0008dd57 	.word	0x0008dd57
   8db98:	0008ddab 	.word	0x0008ddab
   8db9c:	0008ddab 	.word	0x0008ddab
   8dba0:	0008dd05 	.word	0x0008dd05
   8dba4:	0008dd05 	.word	0x0008dd05
   8dba8:	0008dd05 	.word	0x0008dd05
   8dbac:	0008ddab 	.word	0x0008ddab
   8dbb0:	0008ddab 	.word	0x0008ddab
   8dbb4:	0008ddab 	.word	0x0008ddab
   8dbb8:	0008ddab 	.word	0x0008ddab
   8dbbc:	0008ddab 	.word	0x0008ddab
   8dbc0:	0008ddab 	.word	0x0008ddab
   8dbc4:	0008ddab 	.word	0x0008ddab
   8dbc8:	0008ddab 	.word	0x0008ddab
   8dbcc:	0008ddab 	.word	0x0008ddab
   8dbd0:	0008ddab 	.word	0x0008ddab
   8dbd4:	0008ddab 	.word	0x0008ddab
   8dbd8:	0008ddab 	.word	0x0008ddab
   8dbdc:	0008ddab 	.word	0x0008ddab
   8dbe0:	0008dd05 	.word	0x0008dd05
   8dbe4:	0008dd05 	.word	0x0008dd05
   8dbe8:	0008ddab 	.word	0x0008ddab
   8dbec:	0008ddab 	.word	0x0008ddab
   8dbf0:	0008ddab 	.word	0x0008ddab
   8dbf4:	0008ddab 	.word	0x0008ddab
   8dbf8:	0008ddab 	.word	0x0008ddab
   8dbfc:	0008ddab 	.word	0x0008ddab
   8dc00:	0008ddab 	.word	0x0008ddab
   8dc04:	0008ddab 	.word	0x0008ddab
   8dc08:	0008ddab 	.word	0x0008ddab
   8dc0c:	0008ddab 	.word	0x0008ddab
   8dc10:	0008ddab 	.word	0x0008ddab
   8dc14:	0008dd05 	.word	0x0008dd05
   8dc18:	0008dd05 	.word	0x0008dd05
   8dc1c:	0008ddab 	.word	0x0008ddab
   8dc20:	0008ddab 	.word	0x0008ddab
   8dc24:	0008ddab 	.word	0x0008ddab
   8dc28:	0008ddab 	.word	0x0008ddab
   8dc2c:	0008ddab 	.word	0x0008ddab
   8dc30:	0008ddab 	.word	0x0008ddab
   8dc34:	0008ddab 	.word	0x0008ddab
   8dc38:	0008ddab 	.word	0x0008ddab
   8dc3c:	0008ddab 	.word	0x0008ddab
   8dc40:	0008ddab 	.word	0x0008ddab
   8dc44:	0008ddab 	.word	0x0008ddab
   8dc48:	0008ddab 	.word	0x0008ddab
   8dc4c:	0008ddab 	.word	0x0008ddab
   8dc50:	0008ddab 	.word	0x0008ddab
   8dc54:	0008ddab 	.word	0x0008ddab
   8dc58:	0008ddab 	.word	0x0008ddab
   8dc5c:	0008ddab 	.word	0x0008ddab
   8dc60:	0008ddab 	.word	0x0008ddab
   8dc64:	0008ddab 	.word	0x0008ddab
   8dc68:	0008ddab 	.word	0x0008ddab
   8dc6c:	0008ddab 	.word	0x0008ddab
   8dc70:	0008ddab 	.word	0x0008ddab
   8dc74:	0008dd1f 	.word	0x0008dd1f
   8dc78:	0008ddab 	.word	0x0008ddab
   8dc7c:	0008ddab 	.word	0x0008ddab
   8dc80:	0008ddab 	.word	0x0008ddab
   8dc84:	0008ddab 	.word	0x0008ddab
   8dc88:	0008ddab 	.word	0x0008ddab
   8dc8c:	0008ddab 	.word	0x0008ddab
   8dc90:	0008ddab 	.word	0x0008ddab
   8dc94:	0008ddab 	.word	0x0008ddab
   8dc98:	0008ddab 	.word	0x0008ddab
   8dc9c:	0008ddab 	.word	0x0008ddab
   8dca0:	0008ddab 	.word	0x0008ddab
   8dca4:	0008ddab 	.word	0x0008ddab
   8dca8:	0008ddab 	.word	0x0008ddab
   8dcac:	0008ddab 	.word	0x0008ddab
   8dcb0:	0008ddab 	.word	0x0008ddab
   8dcb4:	0008ddab 	.word	0x0008ddab
   8dcb8:	0008ddab 	.word	0x0008ddab
   8dcbc:	0008ddab 	.word	0x0008ddab
   8dcc0:	0008ddab 	.word	0x0008ddab
   8dcc4:	0008ddab 	.word	0x0008ddab
   8dcc8:	0008ddab 	.word	0x0008ddab
   8dccc:	0008ddab 	.word	0x0008ddab
   8dcd0:	0008ddab 	.word	0x0008ddab
   8dcd4:	0008ddab 	.word	0x0008ddab
   8dcd8:	0008ddab 	.word	0x0008ddab
   8dcdc:	0008ddab 	.word	0x0008ddab
   8dce0:	0008ddab 	.word	0x0008ddab
   8dce4:	0008dd05 	.word	0x0008dd05
   8dce8:	0008dd05 	.word	0x0008dd05
   8dcec:	200718bf 	.word	0x200718bf
   8dcf0:	000a64b5 	.word	0x000a64b5
   8dcf4:	00088aa9 	.word	0x00088aa9
   8dcf8:	000a3a31 	.word	0x000a3a31
   8dcfc:	20070504 	.word	0x20070504
   8dd00:	00084fb9 	.word	0x00084fb9
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dd04:	4b40      	ldr	r3, [pc, #256]	; (8de08 <main+0x26ac>)
   8dd06:	781b      	ldrb	r3, [r3, #0]
   8dd08:	4618      	mov	r0, r3
   8dd0a:	4b40      	ldr	r3, [pc, #256]	; (8de0c <main+0x26b0>)
   8dd0c:	4798      	blx	r3
   8dd0e:	4603      	mov	r3, r0
   8dd10:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dd12:	7bfb      	ldrb	r3, [r7, #15]
   8dd14:	2b00      	cmp	r3, #0
   8dd16:	d04a      	beq.n	8ddae <main+0x2652>
   8dd18:	4b3d      	ldr	r3, [pc, #244]	; (8de10 <main+0x26b4>)
   8dd1a:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8dd1c:	e047      	b.n	8ddae <main+0x2652>
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dd1e:	4b3a      	ldr	r3, [pc, #232]	; (8de08 <main+0x26ac>)
   8dd20:	781b      	ldrb	r3, [r3, #0]
   8dd22:	4618      	mov	r0, r3
   8dd24:	4b39      	ldr	r3, [pc, #228]	; (8de0c <main+0x26b0>)
   8dd26:	4798      	blx	r3
   8dd28:	4603      	mov	r3, r0
   8dd2a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dd2c:	7bfb      	ldrb	r3, [r7, #15]
   8dd2e:	2b00      	cmp	r3, #0
   8dd30:	d001      	beq.n	8dd36 <main+0x25da>
   8dd32:	4b37      	ldr	r3, [pc, #220]	; (8de10 <main+0x26b4>)
   8dd34:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8dd36:	4b34      	ldr	r3, [pc, #208]	; (8de08 <main+0x26ac>)
   8dd38:	781b      	ldrb	r3, [r3, #0]
   8dd3a:	4618      	mov	r0, r3
   8dd3c:	4b35      	ldr	r3, [pc, #212]	; (8de14 <main+0x26b8>)
   8dd3e:	4798      	blx	r3
   8dd40:	4603      	mov	r3, r0
   8dd42:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dd44:	7bfb      	ldrb	r3, [r7, #15]
   8dd46:	2b00      	cmp	r3, #0
   8dd48:	d001      	beq.n	8dd4e <main+0x25f2>
   8dd4a:	4b31      	ldr	r3, [pc, #196]	; (8de10 <main+0x26b4>)
   8dd4c:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						
						Cl_MacState = MAC_DISINFECT;
   8dd4e:	4b32      	ldr	r3, [pc, #200]	; (8de18 <main+0x26bc>)
   8dd50:	2208      	movs	r2, #8
   8dd52:	701a      	strb	r2, [r3, #0]
						
						break;
   8dd54:	e02c      	b.n	8ddb0 <main+0x2654>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8dd56:	4b2c      	ldr	r3, [pc, #176]	; (8de08 <main+0x26ac>)
   8dd58:	781b      	ldrb	r3, [r3, #0]
   8dd5a:	4618      	mov	r0, r3
   8dd5c:	4b2f      	ldr	r3, [pc, #188]	; (8de1c <main+0x26c0>)
   8dd5e:	4798      	blx	r3
   8dd60:	4603      	mov	r3, r0
   8dd62:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8dd64:	7bfb      	ldrb	r3, [r7, #15]
   8dd66:	2b00      	cmp	r3, #0
   8dd68:	d001      	beq.n	8dd6e <main+0x2612>
   8dd6a:	4b29      	ldr	r3, [pc, #164]	; (8de10 <main+0x26b4>)
   8dd6c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8dd6e:	7bfb      	ldrb	r3, [r7, #15]
   8dd70:	2b00      	cmp	r3, #0
   8dd72:	d10b      	bne.n	8dd8c <main+0x2630>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8dd74:	4b24      	ldr	r3, [pc, #144]	; (8de08 <main+0x26ac>)
   8dd76:	781b      	ldrb	r3, [r3, #0]
   8dd78:	4618      	mov	r0, r3
   8dd7a:	4b29      	ldr	r3, [pc, #164]	; (8de20 <main+0x26c4>)
   8dd7c:	4798      	blx	r3
   8dd7e:	4603      	mov	r3, r0
   8dd80:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8dd82:	7bfb      	ldrb	r3, [r7, #15]
   8dd84:	2b00      	cmp	r3, #0
   8dd86:	d001      	beq.n	8dd8c <main+0x2630>
   8dd88:	4b21      	ldr	r3, [pc, #132]	; (8de10 <main+0x26b4>)
   8dd8a:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8dd8c:	7bfb      	ldrb	r3, [r7, #15]
   8dd8e:	2b00      	cmp	r3, #0
   8dd90:	d107      	bne.n	8dda2 <main+0x2646>
							{
								Cl_MacState = MAC_RINSE;
   8dd92:	4b21      	ldr	r3, [pc, #132]	; (8de18 <main+0x26bc>)
   8dd94:	2207      	movs	r2, #7
   8dd96:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8dd98:	7bfb      	ldrb	r3, [r7, #15]
   8dd9a:	2b00      	cmp	r3, #0
   8dd9c:	d001      	beq.n	8dda2 <main+0x2646>
   8dd9e:	4b1c      	ldr	r3, [pc, #112]	; (8de10 <main+0x26b4>)
   8dda0:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8dda2:	4b19      	ldr	r3, [pc, #100]	; (8de08 <main+0x26ac>)
   8dda4:	2200      	movs	r2, #0
   8dda6:	701a      	strb	r2, [r3, #0]
						break;
   8dda8:	e002      	b.n	8ddb0 <main+0x2654>
						

						default: break;
   8ddaa:	bf00      	nop
   8ddac:	e008      	b.n	8ddc0 <main+0x2664>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8ddae:	bf00      	nop
						break;
						

						default: break;
					}
					break;
   8ddb0:	e006      	b.n	8ddc0 <main+0x2664>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8ddb2:	bf00      	nop
					}
					break;
   8ddb4:	e004      	b.n	8ddc0 <main+0x2664>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8ddb6:	bf00      	nop
					}
					break;
   8ddb8:	e002      	b.n	8ddc0 <main+0x2664>
					default :
					break;
   8ddba:	bf00      	nop
   8ddbc:	e000      	b.n	8ddc0 <main+0x2664>
						break;

						
					}
					
					break;
   8ddbe:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8ddc0:	4b18      	ldr	r3, [pc, #96]	; (8de24 <main+0x26c8>)
   8ddc2:	4798      	blx	r3
   8ddc4:	4603      	mov	r3, r0
   8ddc6:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8ddc8:	7bfb      	ldrb	r3, [r7, #15]
   8ddca:	2b00      	cmp	r3, #0
   8ddcc:	d001      	beq.n	8ddd2 <main+0x2676>
   8ddce:	4b10      	ldr	r3, [pc, #64]	; (8de10 <main+0x26b4>)
   8ddd0:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue3.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8ddd2:	4b15      	ldr	r3, [pc, #84]	; (8de28 <main+0x26cc>)
   8ddd4:	781b      	ldrb	r3, [r3, #0]
   8ddd6:	2b00      	cmp	r3, #0
   8ddd8:	f47d ad8d 	bne.w	8b8f6 <main+0x19a>
   8dddc:	4b13      	ldr	r3, [pc, #76]	; (8de2c <main+0x26d0>)
   8ddde:	781b      	ldrb	r3, [r3, #0]
   8dde0:	2b00      	cmp	r3, #0
   8dde2:	f47d ad88 	bne.w	8b8f6 <main+0x19a>
   8dde6:	4b12      	ldr	r3, [pc, #72]	; (8de30 <main+0x26d4>)
   8dde8:	781b      	ldrb	r3, [r3, #0]
   8ddea:	2b00      	cmp	r3, #0
   8ddec:	f47d ad83 	bne.w	8b8f6 <main+0x19a>
   8ddf0:	4b10      	ldr	r3, [pc, #64]	; (8de34 <main+0x26d8>)
   8ddf2:	781b      	ldrb	r3, [r3, #0]
   8ddf4:	2b00      	cmp	r3, #0
   8ddf6:	f47d ad7e 	bne.w	8b8f6 <main+0x19a>
   8ddfa:	4b0f      	ldr	r3, [pc, #60]	; (8de38 <main+0x26dc>)
   8ddfc:	781b      	ldrb	r3, [r3, #0]
   8ddfe:	2b00      	cmp	r3, #0
   8de00:	f47d ad79 	bne.w	8b8f6 <main+0x19a>
		
		}
		
		//sv_cntrl_resetyellowalarm();

	}
   8de04:	f7fd bd41 	b.w	8b88a <main+0x12e>
   8de08:	200718bf 	.word	0x200718bf
   8de0c:	00084fb9 	.word	0x00084fb9
   8de10:	00088aa9 	.word	0x00088aa9
   8de14:	0009d3e1 	.word	0x0009d3e1
   8de18:	20070504 	.word	0x20070504
   8de1c:	000a64b5 	.word	0x000a64b5
   8de20:	000a3a31 	.word	0x000a3a31
   8de24:	0008e3d9 	.word	0x0008e3d9
   8de28:	2007244c 	.word	0x2007244c
   8de2c:	20072270 	.word	0x20072270
   8de30:	200720e0 	.word	0x200720e0
   8de34:	2007238c 	.word	0x2007238c
   8de38:	20072214 	.word	0x20072214

0008de3c <Cl_MacInit>:
 * \return CL_OK on success.
 *
 * \Globals used : Cl_MacEventQueue1
 */
Cl_ReturnCodeType 	Cl_MacInit(void) 
{
   8de3c:	b580      	push	{r7, lr}
   8de3e:	b082      	sub	sp, #8
   8de40:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_MacRetval = CL_OK;
   8de42:	2300      	movs	r3, #0
   8de44:	71fb      	strb	r3, [r7, #7]
		
		queue_sequence_counter = 0;
   8de46:	4b28      	ldr	r3, [pc, #160]	; (8dee8 <Cl_MacInit+0xac>)
   8de48:	2200      	movs	r2, #0
   8de4a:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue1.Cl_MacEvent[0] =0;
   8de4c:	4b27      	ldr	r3, [pc, #156]	; (8deec <Cl_MacInit+0xb0>)
   8de4e:	2200      	movs	r2, #0
   8de50:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = false;
   8de52:	4b26      	ldr	r3, [pc, #152]	; (8deec <Cl_MacInit+0xb0>)
   8de54:	2200      	movs	r2, #0
   8de56:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount = 0;
   8de58:	4b24      	ldr	r3, [pc, #144]	; (8deec <Cl_MacInit+0xb0>)
   8de5a:	2200      	movs	r2, #0
   8de5c:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue4.Cl_MacEvent[0] =0;
   8de5e:	4b24      	ldr	r3, [pc, #144]	; (8def0 <Cl_MacInit+0xb4>)
   8de60:	2200      	movs	r2, #0
   8de62:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue4.Cl_MacNewEvent = false;
   8de64:	4b22      	ldr	r3, [pc, #136]	; (8def0 <Cl_MacInit+0xb4>)
   8de66:	2200      	movs	r2, #0
   8de68:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount = 0;
   8de6a:	4b21      	ldr	r3, [pc, #132]	; (8def0 <Cl_MacInit+0xb4>)
   8de6c:	2200      	movs	r2, #0
   8de6e:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueueBc.Cl_MacEvent[0] =0;
   8de70:	4b20      	ldr	r3, [pc, #128]	; (8def4 <Cl_MacInit+0xb8>)
   8de72:	2200      	movs	r2, #0
   8de74:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueueBc.Cl_MacNewEvent = false;
   8de76:	4b1f      	ldr	r3, [pc, #124]	; (8def4 <Cl_MacInit+0xb8>)
   8de78:	2200      	movs	r2, #0
   8de7a:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount = 0;
   8de7c:	4b1d      	ldr	r3, [pc, #116]	; (8def4 <Cl_MacInit+0xb8>)
   8de7e:	2200      	movs	r2, #0
   8de80:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8de82:	4b1d      	ldr	r3, [pc, #116]	; (8def8 <Cl_MacInit+0xbc>)
   8de84:	2214      	movs	r2, #20
   8de86:	759a      	strb	r2, [r3, #22]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8de88:	4b1c      	ldr	r3, [pc, #112]	; (8defc <Cl_MacInit+0xc0>)
   8de8a:	2228      	movs	r2, #40	; 0x28
   8de8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		Cl_Console_buffer1.BufferEmpty = true;
   8de90:	4b1b      	ldr	r3, [pc, #108]	; (8df00 <Cl_MacInit+0xc4>)
   8de92:	2201      	movs	r2, #1
   8de94:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8de96:	4b1a      	ldr	r3, [pc, #104]	; (8df00 <Cl_MacInit+0xc4>)
   8de98:	2200      	movs	r2, #0
   8de9a:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8de9c:	4b18      	ldr	r3, [pc, #96]	; (8df00 <Cl_MacInit+0xc4>)
   8de9e:	2200      	movs	r2, #0
   8dea0:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.CurreltyActive=true;
   8dea2:	4b17      	ldr	r3, [pc, #92]	; (8df00 <Cl_MacInit+0xc4>)
   8dea4:	2201      	movs	r2, #1
   8dea6:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8dea8:	4b15      	ldr	r3, [pc, #84]	; (8df00 <Cl_MacInit+0xc4>)
   8deaa:	2200      	movs	r2, #0
   8deac:	76da      	strb	r2, [r3, #27]

		Cl_Console_buffer2.BufferEmpty = true;
   8deae:	4b15      	ldr	r3, [pc, #84]	; (8df04 <Cl_MacInit+0xc8>)
   8deb0:	2201      	movs	r2, #1
   8deb2:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8deb4:	4b13      	ldr	r3, [pc, #76]	; (8df04 <Cl_MacInit+0xc8>)
   8deb6:	2200      	movs	r2, #0
   8deb8:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8deba:	4b12      	ldr	r3, [pc, #72]	; (8df04 <Cl_MacInit+0xc8>)
   8debc:	2200      	movs	r2, #0
   8debe:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.CurreltyActive=false;
   8dec0:	4b10      	ldr	r3, [pc, #64]	; (8df04 <Cl_MacInit+0xc8>)
   8dec2:	2200      	movs	r2, #0
   8dec4:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8dec6:	4b0f      	ldr	r3, [pc, #60]	; (8df04 <Cl_MacInit+0xc8>)
   8dec8:	2200      	movs	r2, #0
   8deca:	76da      	strb	r2, [r3, #27]
		
		Cl_MacState =	MAC_INIT;
   8decc:	4b0e      	ldr	r3, [pc, #56]	; (8df08 <Cl_MacInit+0xcc>)
   8dece:	2202      	movs	r2, #2
   8ded0:	701a      	strb	r2, [r3, #0]
		
		if( Cl_MacRetval != CL_OK)
		{
			//handle error
		}
		ASSERT_ERROR(Cl_MacRetval);
   8ded2:	79fb      	ldrb	r3, [r7, #7]
   8ded4:	2b00      	cmp	r3, #0
   8ded6:	d001      	beq.n	8dedc <Cl_MacInit+0xa0>
   8ded8:	4b0c      	ldr	r3, [pc, #48]	; (8df0c <Cl_MacInit+0xd0>)
   8deda:	4798      	blx	r3
		return Cl_MacRetval;
   8dedc:	79fb      	ldrb	r3, [r7, #7]
}
   8dede:	4618      	mov	r0, r3
   8dee0:	3708      	adds	r7, #8
   8dee2:	46bd      	mov	sp, r7
   8dee4:	bd80      	pop	{r7, pc}
   8dee6:	bf00      	nop
   8dee8:	200718c2 	.word	0x200718c2
   8deec:	20072270 	.word	0x20072270
   8def0:	20072214 	.word	0x20072214
   8def4:	2007244c 	.word	0x2007244c
   8def8:	20072330 	.word	0x20072330
   8defc:	2007213c 	.word	0x2007213c
   8df00:	2007236c 	.word	0x2007236c
   8df04:	200721cc 	.word	0x200721cc
   8df08:	20070504 	.word	0x20070504
   8df0c:	00088aa9 	.word	0x00088aa9

0008df10 <Cl_App_init>:
 * \void function 
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType  Cl_App_init(void)
{
   8df10:	b580      	push	{r7, lr}
   8df12:	b082      	sub	sp, #8
   8df14:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType  Cl_RetValue = CL_ERROR;
   8df16:	2304      	movs	r3, #4
   8df18:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8df1a:	4b26      	ldr	r3, [pc, #152]	; (8dfb4 <Cl_App_init+0xa4>)
   8df1c:	4798      	blx	r3
   8df1e:	4603      	mov	r3, r0
   8df20:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df22:	79fb      	ldrb	r3, [r7, #7]
   8df24:	2b00      	cmp	r3, #0
   8df26:	d001      	beq.n	8df2c <Cl_App_init+0x1c>
   8df28:	4b23      	ldr	r3, [pc, #140]	; (8dfb8 <Cl_App_init+0xa8>)
   8df2a:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_Console_init();
   8df2c:	4b23      	ldr	r3, [pc, #140]	; (8dfbc <Cl_App_init+0xac>)
   8df2e:	4798      	blx	r3
   8df30:	4603      	mov	r3, r0
   8df32:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df34:	79fb      	ldrb	r3, [r7, #7]
   8df36:	2b00      	cmp	r3, #0
   8df38:	d001      	beq.n	8df3e <Cl_App_init+0x2e>
   8df3a:	4b1f      	ldr	r3, [pc, #124]	; (8dfb8 <Cl_App_init+0xa8>)
   8df3c:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_disinf_init();
   8df3e:	4b20      	ldr	r3, [pc, #128]	; (8dfc0 <Cl_App_init+0xb0>)
   8df40:	4798      	blx	r3
   8df42:	4603      	mov	r3, r0
   8df44:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df46:	79fb      	ldrb	r3, [r7, #7]
   8df48:	2b00      	cmp	r3, #0
   8df4a:	d001      	beq.n	8df50 <Cl_App_init+0x40>
   8df4c:	4b1a      	ldr	r3, [pc, #104]	; (8dfb8 <Cl_App_init+0xa8>)
   8df4e:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dlsis_init();
   8df50:	4b1c      	ldr	r3, [pc, #112]	; (8dfc4 <Cl_App_init+0xb4>)
   8df52:	4798      	blx	r3
   8df54:	4603      	mov	r3, r0
   8df56:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df58:	79fb      	ldrb	r3, [r7, #7]
   8df5a:	2b00      	cmp	r3, #0
   8df5c:	d001      	beq.n	8df62 <Cl_App_init+0x52>
   8df5e:	4b16      	ldr	r3, [pc, #88]	; (8dfb8 <Cl_App_init+0xa8>)
   8df60:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dprep_init(	);
   8df62:	4b19      	ldr	r3, [pc, #100]	; (8dfc8 <Cl_App_init+0xb8>)
   8df64:	4798      	blx	r3
   8df66:	4603      	mov	r3, r0
   8df68:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df6a:	79fb      	ldrb	r3, [r7, #7]
   8df6c:	2b00      	cmp	r3, #0
   8df6e:	d001      	beq.n	8df74 <Cl_App_init+0x64>
   8df70:	4b11      	ldr	r3, [pc, #68]	; (8dfb8 <Cl_App_init+0xa8>)
   8df72:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_rinse_init();
   8df74:	4b15      	ldr	r3, [pc, #84]	; (8dfcc <Cl_App_init+0xbc>)
   8df76:	4798      	blx	r3
   8df78:	4603      	mov	r3, r0
   8df7a:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df7c:	79fb      	ldrb	r3, [r7, #7]
   8df7e:	2b00      	cmp	r3, #0
   8df80:	d001      	beq.n	8df86 <Cl_App_init+0x76>
   8df82:	4b0d      	ldr	r3, [pc, #52]	; (8dfb8 <Cl_App_init+0xa8>)
   8df84:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_stby_init();
   8df86:	4b12      	ldr	r3, [pc, #72]	; (8dfd0 <Cl_App_init+0xc0>)
   8df88:	4798      	blx	r3
   8df8a:	4603      	mov	r3, r0
   8df8c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df8e:	79fb      	ldrb	r3, [r7, #7]
   8df90:	2b00      	cmp	r3, #0
   8df92:	d001      	beq.n	8df98 <Cl_App_init+0x88>
   8df94:	4b08      	ldr	r3, [pc, #32]	; (8dfb8 <Cl_App_init+0xa8>)
   8df96:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	Cl_RetValue = cl_datamanager_init();
   8df98:	4b0e      	ldr	r3, [pc, #56]	; (8dfd4 <Cl_App_init+0xc4>)
   8df9a:	4798      	blx	r3
   8df9c:	4603      	mov	r3, r0
   8df9e:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8dfa0:	79fb      	ldrb	r3, [r7, #7]
   8dfa2:	2b00      	cmp	r3, #0
   8dfa4:	d001      	beq.n	8dfaa <Cl_App_init+0x9a>
   8dfa6:	4b04      	ldr	r3, [pc, #16]	; (8dfb8 <Cl_App_init+0xa8>)
   8dfa8:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8dfaa:	2300      	movs	r3, #0
	
}
   8dfac:	4618      	mov	r0, r3
   8dfae:	3708      	adds	r7, #8
   8dfb0:	46bd      	mov	sp, r7
   8dfb2:	bd80      	pop	{r7, pc}
   8dfb4:	00080bb9 	.word	0x00080bb9
   8dfb8:	00088aa9 	.word	0x00088aa9
   8dfbc:	0009d14d 	.word	0x0009d14d
   8dfc0:	0009d3d1 	.word	0x0009d3d1
   8dfc4:	00084e9d 	.word	0x00084e9d
   8dfc8:	0009f621 	.word	0x0009f621
   8dfcc:	000a5349 	.word	0x000a5349
   8dfd0:	000a707d 	.word	0x000a707d
   8dfd4:	000844d1 	.word	0x000844d1

0008dfd8 <Cl_Mac_Configure>:
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Mac_Configure(void)

{ 
   8dfd8:	b580      	push	{r7, lr}
   8dfda:	b082      	sub	sp, #8
   8dfdc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retval = CL_ERROR;
   8dfde:	2304      	movs	r3, #4
   8dfe0:	71fb      	strb	r3, [r7, #7]
	
	/*printf("System Configuring Controls\n");*/
	ASSERT_ERROR(Cl_Mac_retval);
   8dfe2:	79fb      	ldrb	r3, [r7, #7]
   8dfe4:	2b00      	cmp	r3, #0
   8dfe6:	d001      	beq.n	8dfec <Cl_Mac_Configure+0x14>
   8dfe8:	4b03      	ldr	r3, [pc, #12]	; (8dff8 <Cl_Mac_Configure+0x20>)
   8dfea:	4798      	blx	r3
			if( Cl_Mac_retval != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8dfec:	2300      	movs	r3, #0
}
   8dfee:	4618      	mov	r0, r3
   8dff0:	3708      	adds	r7, #8
   8dff2:	46bd      	mov	sp, r7
   8dff4:	bd80      	pop	{r7, pc}
   8dff6:	bf00      	nop
   8dff8:	00088aa9 	.word	0x00088aa9

0008dffc <Cl_Mac_GetSystem_Status_Query>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType 	Cl_Mac_GetSystem_Status_Query(void)
{
   8dffc:	b580      	push	{r7, lr}
   8dffe:	b082      	sub	sp, #8
   8e000:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval= CL_ERROR;
   8e002:	2304      	movs	r3, #4
   8e004:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8e006:	4b07      	ldr	r3, [pc, #28]	; (8e024 <Cl_Mac_GetSystem_Status_Query+0x28>)
   8e008:	4798      	blx	r3
   8e00a:	4603      	mov	r3, r0
   8e00c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_MacRetval);
   8e00e:	79fb      	ldrb	r3, [r7, #7]
   8e010:	2b00      	cmp	r3, #0
   8e012:	d001      	beq.n	8e018 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8e014:	4b04      	ldr	r3, [pc, #16]	; (8e028 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8e016:	4798      	blx	r3
				if( Cl_MacRetval != CL_OK)
				{
					//handle error
				}
	
	return CL_OK;
   8e018:	2300      	movs	r3, #0
}
   8e01a:	4618      	mov	r0, r3
   8e01c:	3708      	adds	r7, #8
   8e01e:	46bd      	mov	sp, r7
   8e020:	bd80      	pop	{r7, pc}
   8e022:	bf00      	nop
   8e024:	0008f281 	.word	0x0008f281
   8e028:	00088aa9 	.word	0x00088aa9

0008e02c <Cl_MacCheckforConsoleMessage>:
						}
		return CL_OK;
	
}
Cl_ReturnCodeType 	Cl_MacCheckforConsoleMessage(void)
{
   8e02c:	b580      	push	{r7, lr}
   8e02e:	b082      	sub	sp, #8
   8e030:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8e032:	4b19      	ldr	r3, [pc, #100]	; (8e098 <Cl_MacCheckforConsoleMessage+0x6c>)
   8e034:	4798      	blx	r3
   8e036:	4603      	mov	r3, r0
   8e038:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8e03a:	79fb      	ldrb	r3, [r7, #7]
   8e03c:	2b00      	cmp	r3, #0
   8e03e:	d001      	beq.n	8e044 <Cl_MacCheckforConsoleMessage+0x18>
   8e040:	4b16      	ldr	r3, [pc, #88]	; (8e09c <Cl_MacCheckforConsoleMessage+0x70>)
   8e042:	4798      	blx	r3
			if(Cl_MacRetval1 == CL_OK)
   8e044:	79fb      	ldrb	r3, [r7, #7]
   8e046:	2b00      	cmp	r3, #0
   8e048:	d108      	bne.n	8e05c <Cl_MacCheckforConsoleMessage+0x30>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8e04a:	4b15      	ldr	r3, [pc, #84]	; (8e0a0 <Cl_MacCheckforConsoleMessage+0x74>)
   8e04c:	4798      	blx	r3
   8e04e:	4603      	mov	r3, r0
   8e050:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8e052:	79fb      	ldrb	r3, [r7, #7]
   8e054:	2b00      	cmp	r3, #0
   8e056:	d001      	beq.n	8e05c <Cl_MacCheckforConsoleMessage+0x30>
   8e058:	4b10      	ldr	r3, [pc, #64]	; (8e09c <Cl_MacCheckforConsoleMessage+0x70>)
   8e05a:	4798      	blx	r3
				
			} else 
			
			{ // LOG ERROR
			}
			if(Cl_MacRetval1 == CL_OK)
   8e05c:	79fb      	ldrb	r3, [r7, #7]
   8e05e:	2b00      	cmp	r3, #0
   8e060:	d108      	bne.n	8e074 <Cl_MacCheckforConsoleMessage+0x48>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8e062:	4b10      	ldr	r3, [pc, #64]	; (8e0a4 <Cl_MacCheckforConsoleMessage+0x78>)
   8e064:	4798      	blx	r3
   8e066:	4603      	mov	r3, r0
   8e068:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8e06a:	79fb      	ldrb	r3, [r7, #7]
   8e06c:	2b00      	cmp	r3, #0
   8e06e:	d001      	beq.n	8e074 <Cl_MacCheckforConsoleMessage+0x48>
   8e070:	4b0a      	ldr	r3, [pc, #40]	; (8e09c <Cl_MacCheckforConsoleMessage+0x70>)
   8e072:	4798      	blx	r3
			} 
			else { //LOG ERROR
			}
			
			if(Cl_MacRetval1== CL_OK)
   8e074:	79fb      	ldrb	r3, [r7, #7]
   8e076:	2b00      	cmp	r3, #0
   8e078:	d108      	bne.n	8e08c <Cl_MacCheckforConsoleMessage+0x60>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent(); // Create tyhe event and put it in the queue
   8e07a:	4b0b      	ldr	r3, [pc, #44]	; (8e0a8 <Cl_MacCheckforConsoleMessage+0x7c>)
   8e07c:	4798      	blx	r3
   8e07e:	4603      	mov	r3, r0
   8e080:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8e082:	79fb      	ldrb	r3, [r7, #7]
   8e084:	2b00      	cmp	r3, #0
   8e086:	d001      	beq.n	8e08c <Cl_MacCheckforConsoleMessage+0x60>
   8e088:	4b04      	ldr	r3, [pc, #16]	; (8e09c <Cl_MacCheckforConsoleMessage+0x70>)
   8e08a:	4798      	blx	r3
				
			} 
			else {// LOG ERROR
			}
			
			return CL_OK; 
   8e08c:	2300      	movs	r3, #0
}
   8e08e:	4618      	mov	r0, r3
   8e090:	3708      	adds	r7, #8
   8e092:	46bd      	mov	sp, r7
   8e094:	bd80      	pop	{r7, pc}
   8e096:	bf00      	nop
   8e098:	0009c829 	.word	0x0009c829
   8e09c:	00088aa9 	.word	0x00088aa9
   8e0a0:	0009c889 	.word	0x0009c889
   8e0a4:	0009c869 	.word	0x0009c869
   8e0a8:	0009c9f1 	.word	0x0009c9f1

0008e0ac <Cl_MacCreate_Macevent>:
 * \Globals used : 
 */


Cl_ReturnCodeType	Cl_MacCreate_Macevent(void)
{
   8e0ac:	b480      	push	{r7}
   8e0ae:	b083      	sub	sp, #12
   8e0b0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retVal = CL_OK;
   8e0b2:	2300      	movs	r3, #0
   8e0b4:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
   8e0b6:	4b97      	ldr	r3, [pc, #604]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e0b8:	2200      	movs	r2, #0
   8e0ba:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8e0bc:	4b96      	ldr	r3, [pc, #600]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e0be:	2200      	movs	r2, #0
   8e0c0:	701a      	strb	r2, [r3, #0]
	
	queue_sequence_counter++;
   8e0c2:	4b96      	ldr	r3, [pc, #600]	; (8e31c <Cl_MacCreate_Macevent+0x270>)
   8e0c4:	781b      	ldrb	r3, [r3, #0]
   8e0c6:	3301      	adds	r3, #1
   8e0c8:	b2da      	uxtb	r2, r3
   8e0ca:	4b94      	ldr	r3, [pc, #592]	; (8e31c <Cl_MacCreate_Macevent+0x270>)
   8e0cc:	701a      	strb	r2, [r3, #0]
	if(queue_sequence_counter > 5){
   8e0ce:	4b93      	ldr	r3, [pc, #588]	; (8e31c <Cl_MacCreate_Macevent+0x270>)
   8e0d0:	781b      	ldrb	r3, [r3, #0]
   8e0d2:	2b05      	cmp	r3, #5
   8e0d4:	d902      	bls.n	8e0dc <Cl_MacCreate_Macevent+0x30>
		
		queue_sequence_counter = 1;
   8e0d6:	4b91      	ldr	r3, [pc, #580]	; (8e31c <Cl_MacCreate_Macevent+0x270>)
   8e0d8:	2201      	movs	r2, #1
   8e0da:	701a      	strb	r2, [r3, #0]
	}
	
	switch(queue_sequence_counter){
   8e0dc:	4b8f      	ldr	r3, [pc, #572]	; (8e31c <Cl_MacCreate_Macevent+0x270>)
   8e0de:	781b      	ldrb	r3, [r3, #0]
   8e0e0:	3b01      	subs	r3, #1
   8e0e2:	2b04      	cmp	r3, #4
   8e0e4:	f200 816c 	bhi.w	8e3c0 <Cl_MacCreate_Macevent+0x314>
   8e0e8:	a201      	add	r2, pc, #4	; (adr r2, 8e0f0 <Cl_MacCreate_Macevent+0x44>)
   8e0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e0ee:	bf00      	nop
   8e0f0:	0008e105 	.word	0x0008e105
   8e0f4:	0008e189 	.word	0x0008e189
   8e0f8:	0008e20d 	.word	0x0008e20d
   8e0fc:	0008e291 	.word	0x0008e291
   8e100:	0008e331 	.word	0x0008e331
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e104:	4b86      	ldr	r3, [pc, #536]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e106:	785b      	ldrb	r3, [r3, #1]
   8e108:	2b00      	cmp	r3, #0
   8e10a:	d035      	beq.n	8e178 <Cl_MacCreate_Macevent+0xcc>
   8e10c:	4b84      	ldr	r3, [pc, #528]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e10e:	781b      	ldrb	r3, [r3, #0]
   8e110:	2b00      	cmp	r3, #0
   8e112:	d031      	beq.n	8e178 <Cl_MacCreate_Macevent+0xcc>
		{
			

			Cl_MacNewEvent = true;
   8e114:	4b7f      	ldr	r3, [pc, #508]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e116:	2201      	movs	r2, #1
   8e118:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
   8e11a:	4b81      	ldr	r3, [pc, #516]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e11c:	789a      	ldrb	r2, [r3, #2]
   8e11e:	4b7e      	ldr	r3, [pc, #504]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e120:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
   8e122:	4b7f      	ldr	r3, [pc, #508]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e124:	781b      	ldrb	r3, [r3, #0]
   8e126:	3b01      	subs	r3, #1
   8e128:	b2da      	uxtb	r2, r3
   8e12a:	4b7d      	ldr	r3, [pc, #500]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e12c:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e12e:	2300      	movs	r3, #0
   8e130:	71fb      	strb	r3, [r7, #7]
   8e132:	e019      	b.n	8e168 <Cl_MacCreate_Macevent+0xbc>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e134:	79fb      	ldrb	r3, [r7, #7]
   8e136:	2b09      	cmp	r3, #9
   8e138:	d80a      	bhi.n	8e150 <Cl_MacCreate_Macevent+0xa4>
				{
					Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = Cl_MacEventQueueBc.Cl_MacEvent[tempcount+1];
   8e13a:	79fb      	ldrb	r3, [r7, #7]
   8e13c:	79fa      	ldrb	r2, [r7, #7]
   8e13e:	3201      	adds	r2, #1
   8e140:	4977      	ldr	r1, [pc, #476]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e142:	440a      	add	r2, r1
   8e144:	7891      	ldrb	r1, [r2, #2]
   8e146:	4a76      	ldr	r2, [pc, #472]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e148:	4413      	add	r3, r2
   8e14a:	460a      	mov	r2, r1
   8e14c:	709a      	strb	r2, [r3, #2]
   8e14e:	e008      	b.n	8e162 <Cl_MacCreate_Macevent+0xb6>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e150:	79fb      	ldrb	r3, [r7, #7]
   8e152:	2b09      	cmp	r3, #9
   8e154:	d90e      	bls.n	8e174 <Cl_MacCreate_Macevent+0xc8>
					{
						Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = EVT_NULL;
   8e156:	79fb      	ldrb	r3, [r7, #7]
   8e158:	4a71      	ldr	r2, [pc, #452]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e15a:	4413      	add	r3, r2
   8e15c:	2200      	movs	r2, #0
   8e15e:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e160:	e008      	b.n	8e174 <Cl_MacCreate_Macevent+0xc8>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e162:	79fb      	ldrb	r3, [r7, #7]
   8e164:	3301      	adds	r3, #1
   8e166:	71fb      	strb	r3, [r7, #7]
   8e168:	4b6d      	ldr	r3, [pc, #436]	; (8e320 <Cl_MacCreate_Macevent+0x274>)
   8e16a:	781b      	ldrb	r3, [r3, #0]
   8e16c:	79fa      	ldrb	r2, [r7, #7]
   8e16e:	429a      	cmp	r2, r3
   8e170:	d3e0      	bcc.n	8e134 <Cl_MacCreate_Macevent+0x88>
	
	switch(queue_sequence_counter){
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e172:	e008      	b.n	8e186 <Cl_MacCreate_Macevent+0xda>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e174:	bf00      	nop
	
	switch(queue_sequence_counter){
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e176:	e006      	b.n	8e186 <Cl_MacCreate_Macevent+0xda>
			}
			
			
		}
		else{
			Cl_MacNewEvent = false;
   8e178:	4b66      	ldr	r3, [pc, #408]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e17a:	2200      	movs	r2, #0
   8e17c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e17e:	4b66      	ldr	r3, [pc, #408]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e180:	2200      	movs	r2, #0
   8e182:	701a      	strb	r2, [r3, #0]
		}
		
		break;
   8e184:	e11c      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
   8e186:	e11b      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e188:	4b66      	ldr	r3, [pc, #408]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e18a:	785b      	ldrb	r3, [r3, #1]
   8e18c:	2b00      	cmp	r3, #0
   8e18e:	d035      	beq.n	8e1fc <Cl_MacCreate_Macevent+0x150>
   8e190:	4b64      	ldr	r3, [pc, #400]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e192:	781b      	ldrb	r3, [r3, #0]
   8e194:	2b00      	cmp	r3, #0
   8e196:	d031      	beq.n	8e1fc <Cl_MacCreate_Macevent+0x150>
		{
	

			Cl_MacNewEvent = true;
   8e198:	4b5e      	ldr	r3, [pc, #376]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e19a:	2201      	movs	r2, #1
   8e19c:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
   8e19e:	4b61      	ldr	r3, [pc, #388]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1a0:	789a      	ldrb	r2, [r3, #2]
   8e1a2:	4b5d      	ldr	r3, [pc, #372]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e1a4:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
   8e1a6:	4b5f      	ldr	r3, [pc, #380]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1a8:	781b      	ldrb	r3, [r3, #0]
   8e1aa:	3b01      	subs	r3, #1
   8e1ac:	b2da      	uxtb	r2, r3
   8e1ae:	4b5d      	ldr	r3, [pc, #372]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1b0:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e1b2:	2300      	movs	r3, #0
   8e1b4:	71fb      	strb	r3, [r7, #7]
   8e1b6:	e019      	b.n	8e1ec <Cl_MacCreate_Macevent+0x140>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e1b8:	79fb      	ldrb	r3, [r7, #7]
   8e1ba:	2b09      	cmp	r3, #9
   8e1bc:	d80a      	bhi.n	8e1d4 <Cl_MacCreate_Macevent+0x128>
				{
					Cl_MacEventQueue3.Cl_MacEvent[tempcount] = Cl_MacEventQueue3.Cl_MacEvent[tempcount+1];
   8e1be:	79fb      	ldrb	r3, [r7, #7]
   8e1c0:	79fa      	ldrb	r2, [r7, #7]
   8e1c2:	3201      	adds	r2, #1
   8e1c4:	4957      	ldr	r1, [pc, #348]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1c6:	440a      	add	r2, r1
   8e1c8:	7891      	ldrb	r1, [r2, #2]
   8e1ca:	4a56      	ldr	r2, [pc, #344]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1cc:	4413      	add	r3, r2
   8e1ce:	460a      	mov	r2, r1
   8e1d0:	709a      	strb	r2, [r3, #2]
   8e1d2:	e008      	b.n	8e1e6 <Cl_MacCreate_Macevent+0x13a>

			
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e1d4:	79fb      	ldrb	r3, [r7, #7]
   8e1d6:	2b09      	cmp	r3, #9
   8e1d8:	d90e      	bls.n	8e1f8 <Cl_MacCreate_Macevent+0x14c>
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
   8e1da:	79fb      	ldrb	r3, [r7, #7]
   8e1dc:	4a51      	ldr	r2, [pc, #324]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1de:	4413      	add	r3, r2
   8e1e0:	2200      	movs	r2, #0
   8e1e2:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e1e4:	e008      	b.n	8e1f8 <Cl_MacCreate_Macevent+0x14c>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e1e6:	79fb      	ldrb	r3, [r7, #7]
   8e1e8:	3301      	adds	r3, #1
   8e1ea:	71fb      	strb	r3, [r7, #7]
   8e1ec:	4b4d      	ldr	r3, [pc, #308]	; (8e324 <Cl_MacCreate_Macevent+0x278>)
   8e1ee:	781b      	ldrb	r3, [r3, #0]
   8e1f0:	79fa      	ldrb	r2, [r7, #7]
   8e1f2:	429a      	cmp	r2, r3
   8e1f4:	d3e0      	bcc.n	8e1b8 <Cl_MacCreate_Macevent+0x10c>
		
		break;
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e1f6:	e008      	b.n	8e20a <Cl_MacCreate_Macevent+0x15e>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e1f8:	bf00      	nop
		
		break;
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e1fa:	e006      	b.n	8e20a <Cl_MacCreate_Macevent+0x15e>
			}
	
	
		}
	else{
		Cl_MacNewEvent = false;
   8e1fc:	4b45      	ldr	r3, [pc, #276]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e1fe:	2200      	movs	r2, #0
   8e200:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e202:	4b45      	ldr	r3, [pc, #276]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e204:	2200      	movs	r2, #0
   8e206:	701a      	strb	r2, [r3, #0]
	}
		break;
   8e208:	e0da      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
   8e20a:	e0d9      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e20c:	4b46      	ldr	r3, [pc, #280]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e20e:	785b      	ldrb	r3, [r3, #1]
   8e210:	2b00      	cmp	r3, #0
   8e212:	d035      	beq.n	8e280 <Cl_MacCreate_Macevent+0x1d4>
   8e214:	4b44      	ldr	r3, [pc, #272]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e216:	781b      	ldrb	r3, [r3, #0]
   8e218:	2b00      	cmp	r3, #0
   8e21a:	d031      	beq.n	8e280 <Cl_MacCreate_Macevent+0x1d4>
		{
			

			Cl_MacNewEvent = true;
   8e21c:	4b3d      	ldr	r3, [pc, #244]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e21e:	2201      	movs	r2, #1
   8e220:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
   8e222:	4b41      	ldr	r3, [pc, #260]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e224:	789a      	ldrb	r2, [r3, #2]
   8e226:	4b3c      	ldr	r3, [pc, #240]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e228:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
   8e22a:	4b3f      	ldr	r3, [pc, #252]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e22c:	781b      	ldrb	r3, [r3, #0]
   8e22e:	3b01      	subs	r3, #1
   8e230:	b2da      	uxtb	r2, r3
   8e232:	4b3d      	ldr	r3, [pc, #244]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e234:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e236:	2300      	movs	r3, #0
   8e238:	71fb      	strb	r3, [r7, #7]
   8e23a:	e019      	b.n	8e270 <Cl_MacCreate_Macevent+0x1c4>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e23c:	79fb      	ldrb	r3, [r7, #7]
   8e23e:	2b09      	cmp	r3, #9
   8e240:	d80a      	bhi.n	8e258 <Cl_MacCreate_Macevent+0x1ac>
				{
					Cl_MacEventQueue4.Cl_MacEvent[tempcount] = Cl_MacEventQueue4.Cl_MacEvent[tempcount+1];
   8e242:	79fb      	ldrb	r3, [r7, #7]
   8e244:	79fa      	ldrb	r2, [r7, #7]
   8e246:	3201      	adds	r2, #1
   8e248:	4937      	ldr	r1, [pc, #220]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e24a:	440a      	add	r2, r1
   8e24c:	7891      	ldrb	r1, [r2, #2]
   8e24e:	4a36      	ldr	r2, [pc, #216]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e250:	4413      	add	r3, r2
   8e252:	460a      	mov	r2, r1
   8e254:	709a      	strb	r2, [r3, #2]
   8e256:	e008      	b.n	8e26a <Cl_MacCreate_Macevent+0x1be>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e258:	79fb      	ldrb	r3, [r7, #7]
   8e25a:	2b09      	cmp	r3, #9
   8e25c:	d90e      	bls.n	8e27c <Cl_MacCreate_Macevent+0x1d0>
					{
						Cl_MacEventQueue4.Cl_MacEvent[tempcount] = EVT_NULL;
   8e25e:	79fb      	ldrb	r3, [r7, #7]
   8e260:	4a31      	ldr	r2, [pc, #196]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e262:	4413      	add	r3, r2
   8e264:	2200      	movs	r2, #0
   8e266:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e268:	e008      	b.n	8e27c <Cl_MacCreate_Macevent+0x1d0>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e26a:	79fb      	ldrb	r3, [r7, #7]
   8e26c:	3301      	adds	r3, #1
   8e26e:	71fb      	strb	r3, [r7, #7]
   8e270:	4b2d      	ldr	r3, [pc, #180]	; (8e328 <Cl_MacCreate_Macevent+0x27c>)
   8e272:	781b      	ldrb	r3, [r3, #0]
   8e274:	79fa      	ldrb	r2, [r7, #7]
   8e276:	429a      	cmp	r2, r3
   8e278:	d3e0      	bcc.n	8e23c <Cl_MacCreate_Macevent+0x190>
			Cl_MacEvent = EVT_NULL;
	}
		break;
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e27a:	e008      	b.n	8e28e <Cl_MacCreate_Macevent+0x1e2>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue4.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e27c:	bf00      	nop
			Cl_MacEvent = EVT_NULL;
	}
		break;
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e27e:	e006      	b.n	8e28e <Cl_MacCreate_Macevent+0x1e2>
			}
			
			
		}
		else{
		Cl_MacNewEvent = false;
   8e280:	4b24      	ldr	r3, [pc, #144]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e282:	2200      	movs	r2, #0
   8e284:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e286:	4b24      	ldr	r3, [pc, #144]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e288:	2200      	movs	r2, #0
   8e28a:	701a      	strb	r2, [r3, #0]
	}
		
		break;
   8e28c:	e098      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
   8e28e:	e097      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e290:	4b26      	ldr	r3, [pc, #152]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e292:	785b      	ldrb	r3, [r3, #1]
   8e294:	2b00      	cmp	r3, #0
   8e296:	d035      	beq.n	8e304 <Cl_MacCreate_Macevent+0x258>
   8e298:	4b24      	ldr	r3, [pc, #144]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e29a:	781b      	ldrb	r3, [r3, #0]
   8e29c:	2b00      	cmp	r3, #0
   8e29e:	d031      	beq.n	8e304 <Cl_MacCreate_Macevent+0x258>
			{
				

				Cl_MacNewEvent = true;
   8e2a0:	4b1c      	ldr	r3, [pc, #112]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e2a2:	2201      	movs	r2, #1
   8e2a4:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
   8e2a6:	4b21      	ldr	r3, [pc, #132]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2a8:	789a      	ldrb	r2, [r3, #2]
   8e2aa:	4b1b      	ldr	r3, [pc, #108]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e2ac:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
   8e2ae:	4b1f      	ldr	r3, [pc, #124]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2b0:	781b      	ldrb	r3, [r3, #0]
   8e2b2:	3b01      	subs	r3, #1
   8e2b4:	b2da      	uxtb	r2, r3
   8e2b6:	4b1d      	ldr	r3, [pc, #116]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2b8:	701a      	strb	r2, [r3, #0]
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e2ba:	2300      	movs	r3, #0
   8e2bc:	71fb      	strb	r3, [r7, #7]
   8e2be:	e019      	b.n	8e2f4 <Cl_MacCreate_Macevent+0x248>
				{
					if(tempcount < MAC_EVENT_COUNT_MAX)
   8e2c0:	79fb      	ldrb	r3, [r7, #7]
   8e2c2:	2b09      	cmp	r3, #9
   8e2c4:	d80a      	bhi.n	8e2dc <Cl_MacCreate_Macevent+0x230>
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = Cl_MacEventQueue1.Cl_MacEvent[tempcount+1];
   8e2c6:	79fb      	ldrb	r3, [r7, #7]
   8e2c8:	79fa      	ldrb	r2, [r7, #7]
   8e2ca:	3201      	adds	r2, #1
   8e2cc:	4917      	ldr	r1, [pc, #92]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2ce:	440a      	add	r2, r1
   8e2d0:	7891      	ldrb	r1, [r2, #2]
   8e2d2:	4a16      	ldr	r2, [pc, #88]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2d4:	4413      	add	r3, r2
   8e2d6:	460a      	mov	r2, r1
   8e2d8:	709a      	strb	r2, [r3, #2]
   8e2da:	e008      	b.n	8e2ee <Cl_MacCreate_Macevent+0x242>

						
					}
					else
					{
						if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e2dc:	79fb      	ldrb	r3, [r7, #7]
   8e2de:	2b09      	cmp	r3, #9
   8e2e0:	d90e      	bls.n	8e300 <Cl_MacCreate_Macevent+0x254>
						{
							Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;
   8e2e2:	79fb      	ldrb	r3, [r7, #7]
   8e2e4:	4a11      	ldr	r2, [pc, #68]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2e6:	4413      	add	r3, r2
   8e2e8:	2200      	movs	r2, #0
   8e2ea:	709a      	strb	r2, [r3, #2]
						}
						// handle error, raise alarm. system stops
						break; //handle exception
   8e2ec:	e008      	b.n	8e300 <Cl_MacCreate_Macevent+0x254>

				Cl_MacNewEvent = true;
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e2ee:	79fb      	ldrb	r3, [r7, #7]
   8e2f0:	3301      	adds	r3, #1
   8e2f2:	71fb      	strb	r3, [r7, #7]
   8e2f4:	4b0d      	ldr	r3, [pc, #52]	; (8e32c <Cl_MacCreate_Macevent+0x280>)
   8e2f6:	781b      	ldrb	r3, [r3, #0]
   8e2f8:	79fa      	ldrb	r2, [r7, #7]
   8e2fa:	429a      	cmp	r2, r3
   8e2fc:	d3e0      	bcc.n	8e2c0 <Cl_MacCreate_Macevent+0x214>
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e2fe:	e008      	b.n	8e312 <Cl_MacCreate_Macevent+0x266>
						if(tempcount >= MAC_EVENT_COUNT_MAX)
						{
							Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;
						}
						// handle error, raise alarm. system stops
						break; //handle exception
   8e300:	bf00      	nop
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e302:	e006      	b.n	8e312 <Cl_MacCreate_Macevent+0x266>
				}
				
				
			}
			else{
		Cl_MacNewEvent = false;
   8e304:	4b03      	ldr	r3, [pc, #12]	; (8e314 <Cl_MacCreate_Macevent+0x268>)
   8e306:	2200      	movs	r2, #0
   8e308:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e30a:	4b03      	ldr	r3, [pc, #12]	; (8e318 <Cl_MacCreate_Macevent+0x26c>)
   8e30c:	2200      	movs	r2, #0
   8e30e:	701a      	strb	r2, [r3, #0]
	}
			
		break;
   8e310:	e056      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
   8e312:	e055      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x314>
   8e314:	200718c1 	.word	0x200718c1
   8e318:	200718bf 	.word	0x200718bf
   8e31c:	200718c2 	.word	0x200718c2
   8e320:	2007244c 	.word	0x2007244c
   8e324:	2007238c 	.word	0x2007238c
   8e328:	20072214 	.word	0x20072214
   8e32c:	20072270 	.word	0x20072270
		case 5 : // timer events
		if ((Cl_MacEventQueue2.Cl_MacNewEvent) && (Cl_MacEventQueue2.Cl_MacNewEventcount > 0))
   8e330:	4b26      	ldr	r3, [pc, #152]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e332:	785b      	ldrb	r3, [r3, #1]
   8e334:	2b00      	cmp	r3, #0
   8e336:	d03c      	beq.n	8e3b2 <Cl_MacCreate_Macevent+0x306>
   8e338:	4b24      	ldr	r3, [pc, #144]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e33a:	781b      	ldrb	r3, [r3, #0]
   8e33c:	2b00      	cmp	r3, #0
   8e33e:	d038      	beq.n	8e3b2 <Cl_MacCreate_Macevent+0x306>
		{
			

			Cl_MacNewEvent = true;
   8e340:	4b23      	ldr	r3, [pc, #140]	; (8e3d0 <Cl_MacCreate_Macevent+0x324>)
   8e342:	2201      	movs	r2, #1
   8e344:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
   8e346:	4b21      	ldr	r3, [pc, #132]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e348:	789a      	ldrb	r2, [r3, #2]
   8e34a:	4b22      	ldr	r3, [pc, #136]	; (8e3d4 <Cl_MacCreate_Macevent+0x328>)
   8e34c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
   8e34e:	4b1f      	ldr	r3, [pc, #124]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e350:	781b      	ldrb	r3, [r3, #0]
   8e352:	3b01      	subs	r3, #1
   8e354:	b2da      	uxtb	r2, r3
   8e356:	4b1d      	ldr	r3, [pc, #116]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e358:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e35a:	2300      	movs	r3, #0
   8e35c:	71fb      	strb	r3, [r7, #7]
   8e35e:	e019      	b.n	8e394 <Cl_MacCreate_Macevent+0x2e8>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e360:	79fb      	ldrb	r3, [r7, #7]
   8e362:	2b09      	cmp	r3, #9
   8e364:	d80a      	bhi.n	8e37c <Cl_MacCreate_Macevent+0x2d0>
				{
					Cl_MacEventQueue2.Cl_MacEvent[tempcount] = Cl_MacEventQueue2.Cl_MacEvent[tempcount+1];
   8e366:	79fb      	ldrb	r3, [r7, #7]
   8e368:	79fa      	ldrb	r2, [r7, #7]
   8e36a:	3201      	adds	r2, #1
   8e36c:	4917      	ldr	r1, [pc, #92]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e36e:	440a      	add	r2, r1
   8e370:	7891      	ldrb	r1, [r2, #2]
   8e372:	4a16      	ldr	r2, [pc, #88]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e374:	4413      	add	r3, r2
   8e376:	460a      	mov	r2, r1
   8e378:	709a      	strb	r2, [r3, #2]
   8e37a:	e008      	b.n	8e38e <Cl_MacCreate_Macevent+0x2e2>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e37c:	79fb      	ldrb	r3, [r7, #7]
   8e37e:	2b09      	cmp	r3, #9
   8e380:	d90e      	bls.n	8e3a0 <Cl_MacCreate_Macevent+0x2f4>
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
   8e382:	79fb      	ldrb	r3, [r7, #7]
   8e384:	4a11      	ldr	r2, [pc, #68]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e386:	4413      	add	r3, r2
   8e388:	2200      	movs	r2, #0
   8e38a:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e38c:	e008      	b.n	8e3a0 <Cl_MacCreate_Macevent+0x2f4>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e38e:	79fb      	ldrb	r3, [r7, #7]
   8e390:	3301      	adds	r3, #1
   8e392:	71fb      	strb	r3, [r7, #7]
   8e394:	4b0d      	ldr	r3, [pc, #52]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e396:	781b      	ldrb	r3, [r3, #0]
   8e398:	79fa      	ldrb	r2, [r7, #7]
   8e39a:	429a      	cmp	r2, r3
   8e39c:	d3e0      	bcc.n	8e360 <Cl_MacCreate_Macevent+0x2b4>
   8e39e:	e000      	b.n	8e3a2 <Cl_MacCreate_Macevent+0x2f6>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e3a0:	bf00      	nop
				}
			}
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
   8e3a2:	4b0a      	ldr	r3, [pc, #40]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e3a4:	781b      	ldrb	r3, [r3, #0]
   8e3a6:	461a      	mov	r2, r3
   8e3a8:	4b08      	ldr	r3, [pc, #32]	; (8e3cc <Cl_MacCreate_Macevent+0x320>)
   8e3aa:	4413      	add	r3, r2
   8e3ac:	2200      	movs	r2, #0
   8e3ae:	709a      	strb	r2, [r3, #2]
		{
			Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
			
		}
		break;
   8e3b0:	e005      	b.n	8e3be <Cl_MacCreate_Macevent+0x312>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8e3b2:	4b07      	ldr	r3, [pc, #28]	; (8e3d0 <Cl_MacCreate_Macevent+0x324>)
   8e3b4:	2200      	movs	r2, #0
   8e3b6:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e3b8:	4b06      	ldr	r3, [pc, #24]	; (8e3d4 <Cl_MacCreate_Macevent+0x328>)
   8e3ba:	2200      	movs	r2, #0
   8e3bc:	701a      	strb	r2, [r3, #0]
			
		}
		break;
   8e3be:	bf00      	nop
			
			
		}
	*/

	return CL_OK;
   8e3c0:	2300      	movs	r3, #0
}
   8e3c2:	4618      	mov	r0, r3
   8e3c4:	370c      	adds	r7, #12
   8e3c6:	46bd      	mov	sp, r7
   8e3c8:	bc80      	pop	{r7}
   8e3ca:	4770      	bx	lr
   8e3cc:	200720e0 	.word	0x200720e0
   8e3d0:	200718c1 	.word	0x200718c1
   8e3d4:	200718bf 	.word	0x200718bf

0008e3d8 <Cl_Mac_ClearEvents>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_Mac_ClearEvents(void)
{
   8e3d8:	b480      	push	{r7}
   8e3da:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8e3dc:	2300      	movs	r3, #0
	
}
   8e3de:	4618      	mov	r0, r3
   8e3e0:	46bd      	mov	sp, r7
   8e3e2:	bc80      	pop	{r7}
   8e3e4:	4770      	bx	lr
   8e3e6:	bf00      	nop

0008e3e8 <Cl_Mac_CheckforAlarms>:
 */



Cl_ReturnCodeType Cl_Mac_CheckforAlarms(void)
{
   8e3e8:	b580      	push	{r7, lr}
   8e3ea:	b082      	sub	sp, #8
   8e3ec:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8e3ee:	4b07      	ldr	r3, [pc, #28]	; (8e40c <Cl_Mac_CheckforAlarms+0x24>)
   8e3f0:	4798      	blx	r3
   8e3f2:	4603      	mov	r3, r0
   8e3f4:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e3f6:	79fb      	ldrb	r3, [r7, #7]
   8e3f8:	2b00      	cmp	r3, #0
   8e3fa:	d001      	beq.n	8e400 <Cl_Mac_CheckforAlarms+0x18>
   8e3fc:	4b04      	ldr	r3, [pc, #16]	; (8e410 <Cl_Mac_CheckforAlarms+0x28>)
   8e3fe:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
		return CL_OK;
   8e400:	2300      	movs	r3, #0
}
   8e402:	4618      	mov	r0, r3
   8e404:	3708      	adds	r7, #8
   8e406:	46bd      	mov	sp, r7
   8e408:	bd80      	pop	{r7, pc}
   8e40a:	bf00      	nop
   8e40c:	00080f51 	.word	0x00080f51
   8e410:	00088aa9 	.word	0x00088aa9

0008e414 <Cl_Mac_CheckforBCEvent>:

Cl_ReturnCodeType Cl_Mac_CheckforBCEvent(void)
{
   8e414:	b580      	push	{r7, lr}
   8e416:	b082      	sub	sp, #8
   8e418:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_CheckBcEvent();
   8e41a:	4b07      	ldr	r3, [pc, #28]	; (8e438 <Cl_Mac_CheckforBCEvent+0x24>)
   8e41c:	4798      	blx	r3
   8e41e:	4603      	mov	r3, r0
   8e420:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e422:	79fb      	ldrb	r3, [r7, #7]
   8e424:	2b00      	cmp	r3, #0
   8e426:	d001      	beq.n	8e42c <Cl_Mac_CheckforBCEvent+0x18>
   8e428:	4b04      	ldr	r3, [pc, #16]	; (8e43c <Cl_Mac_CheckforBCEvent+0x28>)
   8e42a:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
	return CL_OK;
   8e42c:	2300      	movs	r3, #0
}
   8e42e:	4618      	mov	r0, r3
   8e430:	3708      	adds	r7, #8
   8e432:	46bd      	mov	sp, r7
   8e434:	bd80      	pop	{r7, pc}
   8e436:	bf00      	nop
   8e438:	00082b1d 	.word	0x00082b1d
   8e43c:	00088aa9 	.word	0x00088aa9

0008e440 <self_test>:
   Cl_Uint8Type status[CL_SELFTEST_RESULT_MAXSTATE];

  
//	cl_selftest_transelateevent(Cl_Mac_EventsType, Cl_selftest_event*)
Cl_ReturnCodeType self_test(Cl_Mac_EventsType Cl_MacselftestEvent)
	{
   8e440:	b580      	push	{r7, lr}
   8e442:	b090      	sub	sp, #64	; 0x40
   8e444:	af00      	add	r7, sp, #0
   8e446:	4603      	mov	r3, r0
   8e448:	71fb      	strb	r3, [r7, #7]
	//	Cl_selftest_StatesType cl_selfteststate = CL_SELFTEST_STATE_IDLE;
		Cl_ReturnCodeType  Cl_selftestretcode = CL_OK;
   8e44a:	2300      	movs	r3, #0
   8e44c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		cl_ufpump_states uf_pumpstate ;       //= CL_UFP_STATE_IDLE;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8e450:	2359      	movs	r3, #89	; 0x59
   8e452:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   8e456:	2300      	movs	r3, #0
   8e458:	62bb      	str	r3, [r7, #40]	; 0x28
	Cl_Uint8Type data = 0;
   8e45a:	2300      	movs	r3, #0
   8e45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 cl_selftest_event cl_selftest_event_type;
		Cl_Uint32Type uf_test_value=0, hp_test_value = 0, bp_test_value =0 ,bicarb_test_value = 0;
   8e460:	2300      	movs	r3, #0
   8e462:	63bb      	str	r3, [r7, #56]	; 0x38
   8e464:	2300      	movs	r3, #0
   8e466:	637b      	str	r3, [r7, #52]	; 0x34
   8e468:	2300      	movs	r3, #0
   8e46a:	633b      	str	r3, [r7, #48]	; 0x30
   8e46c:	2300      	movs	r3, #0
   8e46e:	62fb      	str	r3, [r7, #44]	; 0x2c
		Cl_selftestretcode= cl_selftest_translatemacevent(Cl_MacselftestEvent, &cl_selftest_event_type);
   8e470:	f107 0226 	add.w	r2, r7, #38	; 0x26
   8e474:	79fb      	ldrb	r3, [r7, #7]
   8e476:	4611      	mov	r1, r2
   8e478:	4618      	mov	r0, r3
   8e47a:	4bae      	ldr	r3, [pc, #696]	; (8e734 <self_test+0x2f4>)
   8e47c:	4798      	blx	r3
   8e47e:	4603      	mov	r3, r0
   8e480:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		
		  int16_t bf_b=0;
   8e484:	2300      	movs	r3, #0
   8e486:	84bb      	strh	r3, [r7, #36]	; 0x24
		  int16_t af_b=0;
   8e488:	2300      	movs	r3, #0
   8e48a:	847b      	strh	r3, [r7, #34]	; 0x22
		   uint16_t v_C=0;
   8e48c:	2300      	movs	r3, #0
   8e48e:	843b      	strh	r3, [r7, #32]
		int16_t apt_val= 0,vpt_val=0;
   8e490:	2300      	movs	r3, #0
   8e492:	83fb      	strh	r3, [r7, #30]
   8e494:	2300      	movs	r3, #0
   8e496:	83bb      	strh	r3, [r7, #28]
		int16_t Ts1=0,Ts2=0,Ts3=0;
   8e498:	2300      	movs	r3, #0
   8e49a:	837b      	strh	r3, [r7, #26]
   8e49c:	2300      	movs	r3, #0
   8e49e:	833b      	strh	r3, [r7, #24]
   8e4a0:	2300      	movs	r3, #0
   8e4a2:	82fb      	strh	r3, [r7, #22]
	int16_t Ps_1 =0,Ps_2 =0,Ps_3= 0;
   8e4a4:	2300      	movs	r3, #0
   8e4a6:	82bb      	strh	r3, [r7, #20]
   8e4a8:	2300      	movs	r3, #0
   8e4aa:	827b      	strh	r3, [r7, #18]
   8e4ac:	2300      	movs	r3, #0
   8e4ae:	823b      	strh	r3, [r7, #16]
	Cl_Uint16Type cs1 =0,cs2 =0,cs3	= 0;
   8e4b0:	2300      	movs	r3, #0
   8e4b2:	81fb      	strh	r3, [r7, #14]
   8e4b4:	2300      	movs	r3, #0
   8e4b6:	81bb      	strh	r3, [r7, #12]
   8e4b8:	2300      	movs	r3, #0
   8e4ba:	817b      	strh	r3, [r7, #10]
switch(cl_selftest_event_type)
   8e4bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e4c0:	3b02      	subs	r3, #2
   8e4c2:	2b0a      	cmp	r3, #10
   8e4c4:	d84e      	bhi.n	8e564 <self_test+0x124>
   8e4c6:	a201      	add	r2, pc, #4	; (adr r2, 8e4cc <self_test+0x8c>)
   8e4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e4cc:	0008e529 	.word	0x0008e529
   8e4d0:	0008e565 	.word	0x0008e565
   8e4d4:	0008e565 	.word	0x0008e565
   8e4d8:	0008e565 	.word	0x0008e565
   8e4dc:	0008e565 	.word	0x0008e565
   8e4e0:	0008e565 	.word	0x0008e565
   8e4e4:	0008e565 	.word	0x0008e565
   8e4e8:	0008e565 	.word	0x0008e565
   8e4ec:	0008e4f9 	.word	0x0008e4f9
   8e4f0:	0008e511 	.word	0x0008e511
   8e4f4:	0008e55d 	.word	0x0008e55d
{
	case EVENT_selftest_ALARM_PAAS:	
	{
		status[CL_SELFTEST_RESULT_ALARM] = TEST_PAAS;
   8e4f8:	4b8f      	ldr	r3, [pc, #572]	; (8e738 <self_test+0x2f8>)
   8e4fa:	2201      	movs	r2, #1
   8e4fc:	705a      	strb	r2, [r3, #1]
		
			sv_cntrl_nobuzzer();
   8e4fe:	4b8f      	ldr	r3, [pc, #572]	; (8e73c <self_test+0x2fc>)
   8e500:	4798      	blx	r3
			sv_cntrl_resetredalarm();
   8e502:	4b8f      	ldr	r3, [pc, #572]	; (8e740 <self_test+0x300>)
   8e504:	4798      	blx	r3
			sv_cntrl_resetyellowalarm();
   8e506:	4b8f      	ldr	r3, [pc, #572]	; (8e744 <self_test+0x304>)
   8e508:	4798      	blx	r3
			sv_cntrl_resetgreenalarm();
   8e50a:	4b8f      	ldr	r3, [pc, #572]	; (8e748 <self_test+0x308>)
   8e50c:	4798      	blx	r3
// 			command = CON_TX_COMMAND_SELFTEST_START_ALARM;
// 			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
			break;
   8e50e:	e02a      	b.n	8e566 <self_test+0x126>
	}
	
	case EVENT_selftest_ALARM_FAIL:	
	{
		status[CL_SELFTEST_RESULT_ALARM] = TEST_FAIL;
   8e510:	4b89      	ldr	r3, [pc, #548]	; (8e738 <self_test+0x2f8>)
   8e512:	2200      	movs	r2, #0
   8e514:	705a      	strb	r2, [r3, #1]
		sv_cntrl_nobuzzer();
   8e516:	4b89      	ldr	r3, [pc, #548]	; (8e73c <self_test+0x2fc>)
   8e518:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   8e51a:	4b89      	ldr	r3, [pc, #548]	; (8e740 <self_test+0x300>)
   8e51c:	4798      	blx	r3
		sv_cntrl_resetyellowalarm();
   8e51e:	4b89      	ldr	r3, [pc, #548]	; (8e744 <self_test+0x304>)
   8e520:	4798      	blx	r3
		sv_cntrl_resetgreenalarm();
   8e522:	4b89      	ldr	r3, [pc, #548]	; (8e748 <self_test+0x308>)
   8e524:	4798      	blx	r3
		break;
   8e526:	e01e      	b.n	8e566 <self_test+0x126>
	}
	case EVENT_STOP_selftest:
	{
			
				 sv_cntrl_deactivatepump(UFPUMP);
   8e528:	2004      	movs	r0, #4
   8e52a:	4b88      	ldr	r3, [pc, #544]	; (8e74c <self_test+0x30c>)
   8e52c:	4798      	blx	r3
				 sv_cntrl_deactivatepump(HEPARINPUMP);
   8e52e:	2005      	movs	r0, #5
   8e530:	4b86      	ldr	r3, [pc, #536]	; (8e74c <self_test+0x30c>)
   8e532:	4798      	blx	r3
				 sv_cntrl_deactivatepump(BLOODPUMP);
   8e534:	2003      	movs	r0, #3
   8e536:	4b85      	ldr	r3, [pc, #532]	; (8e74c <self_test+0x30c>)
   8e538:	4798      	blx	r3
				sv_prop_bicarb_selftest_f_b();
   8e53a:	4b85      	ldr	r3, [pc, #532]	; (8e750 <self_test+0x310>)
   8e53c:	4798      	blx	r3
				
				command = CON_TX_COMMAND_SELFTEST_STOPPED;
   8e53e:	2357      	movs	r3, #87	; 0x57
   8e540:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e544:	f107 0127 	add.w	r1, r7, #39	; 0x27
   8e548:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8e54c:	2200      	movs	r2, #0
   8e54e:	4618      	mov	r0, r3
   8e550:	4b80      	ldr	r3, [pc, #512]	; (8e754 <self_test+0x314>)
   8e552:	4798      	blx	r3
   8e554:	4603      	mov	r3, r0
   8e556:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
   8e55a:	e004      	b.n	8e566 <self_test+0x126>
			
	}
	case EVENT_selftest_SYNC_ACK:
	status[CL_SELFTEST_RESULT_SYNC] = 1;
   8e55c:	4b76      	ldr	r3, [pc, #472]	; (8e738 <self_test+0x2f8>)
   8e55e:	2201      	movs	r2, #1
   8e560:	701a      	strb	r2, [r3, #0]
	break;
   8e562:	e000      	b.n	8e566 <self_test+0x126>
	
	default:
	
	break;
   8e564:	bf00      	nop
}
	
	
	switch(cl_selfteststate)
   8e566:	4b7c      	ldr	r3, [pc, #496]	; (8e758 <self_test+0x318>)
   8e568:	781b      	ldrb	r3, [r3, #0]
   8e56a:	2b17      	cmp	r3, #23
   8e56c:	f200 85bb 	bhi.w	8f0e6 <self_test+0xca6>
   8e570:	a201      	add	r2, pc, #4	; (adr r2, 8e578 <self_test+0x138>)
   8e572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e576:	bf00      	nop
   8e578:	0008e5d9 	.word	0x0008e5d9
   8e57c:	0008e61d 	.word	0x0008e61d
   8e580:	0008e64f 	.word	0x0008e64f
   8e584:	0008f0e7 	.word	0x0008f0e7
   8e588:	0008e6a1 	.word	0x0008e6a1
   8e58c:	0008e727 	.word	0x0008e727
   8e590:	0008e807 	.word	0x0008e807
   8e594:	0008e855 	.word	0x0008e855
   8e598:	0008e8df 	.word	0x0008e8df
   8e59c:	0008e923 	.word	0x0008e923
   8e5a0:	0008e9a7 	.word	0x0008e9a7
   8e5a4:	0008ea79 	.word	0x0008ea79
   8e5a8:	0008eaa3 	.word	0x0008eaa3
   8e5ac:	0008eae7 	.word	0x0008eae7
   8e5b0:	0008eb2b 	.word	0x0008eb2b
   8e5b4:	0008ebb1 	.word	0x0008ebb1
   8e5b8:	0008ec55 	.word	0x0008ec55
   8e5bc:	0008edb5 	.word	0x0008edb5
   8e5c0:	0008eedf 	.word	0x0008eedf
   8e5c4:	0008efd1 	.word	0x0008efd1
   8e5c8:	0008f00b 	.word	0x0008f00b
   8e5cc:	0008f0e7 	.word	0x0008f0e7
   8e5d0:	0008f0e7 	.word	0x0008f0e7
   8e5d4:	0008f059 	.word	0x0008f059
	{
		case CL_SELFTEST_STATE_IDLE:
		switch(cl_selftest_event_type)
   8e5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e5dc:	2b01      	cmp	r3, #1
   8e5de:	d000      	beq.n	8e5e2 <self_test+0x1a2>
// 				break;
// 			}
// 			
		
 			default:
 			break;
   8e5e0:	e01a      	b.n	8e618 <self_test+0x1d8>
		switch(cl_selftest_event_type)
		{
			case EVENT_start_selftest:
			{
				
				data = 0;
   8e5e2:	2300      	movs	r3, #0
   8e5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				startpropFlag = false;
   8e5e8:	4b5c      	ldr	r3, [pc, #368]	; (8e75c <self_test+0x31c>)
   8e5ea:	2200      	movs	r2, #0
   8e5ec:	701a      	strb	r2, [r3, #0]
				durcount = 0;
   8e5ee:	4b5c      	ldr	r3, [pc, #368]	; (8e760 <self_test+0x320>)
   8e5f0:	2200      	movs	r2, #0
   8e5f2:	601a      	str	r2, [r3, #0]
			
			command = CON_TX_COMMAND_SELFTEST_STARTED;
   8e5f4:	2352      	movs	r3, #82	; 0x52
   8e5f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e5fa:	f107 0127 	add.w	r1, r7, #39	; 0x27
   8e5fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8e602:	2200      	movs	r2, #0
   8e604:	4618      	mov	r0, r3
   8e606:	4b53      	ldr	r3, [pc, #332]	; (8e754 <self_test+0x314>)
   8e608:	4798      	blx	r3
   8e60a:	4603      	mov	r3, r0
   8e60c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			
		
			         cl_selfteststate = CL_SELFTEST_STATE_sync;
   8e610:	4b51      	ldr	r3, [pc, #324]	; (8e758 <self_test+0x318>)
   8e612:	2201      	movs	r2, #1
   8e614:	701a      	strb	r2, [r3, #0]
					//cl_selfteststate = CL_SELFTEST_STATE_START_ALARMS_BUZZERS;
			break;
   8e616:	bf00      	nop
// 			
		
 			default:
 			break;
		}
		break;
   8e618:	f000 bd66 	b.w	8f0e8 <self_test+0xca8>
		case CL_SELFTEST_STATE_sync:
			switch (cl_selftest_event_type)
   8e61c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e620:	2b06      	cmp	r3, #6
   8e622:	d000      	beq.n	8e626 <self_test+0x1e6>
						command = CON_TX_COMMAND_SELFTEST_SYNC_CHECK;
			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
				cl_selfteststate = CL_SELFTEST_STATE_START_ALARMS_BUZZERS;
				break;
				default:
				break;
   8e624:	e011      	b.n	8e64a <self_test+0x20a>
		case CL_SELFTEST_STATE_sync:
			switch (cl_selftest_event_type)
			
			{
					case EVENT_selftest_TICK_100MS:
						command = CON_TX_COMMAND_SELFTEST_SYNC_CHECK;
   8e626:	2358      	movs	r3, #88	; 0x58
   8e628:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e62c:	f107 0127 	add.w	r1, r7, #39	; 0x27
   8e630:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8e634:	2200      	movs	r2, #0
   8e636:	4618      	mov	r0, r3
   8e638:	4b46      	ldr	r3, [pc, #280]	; (8e754 <self_test+0x314>)
   8e63a:	4798      	blx	r3
   8e63c:	4603      	mov	r3, r0
   8e63e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				cl_selfteststate = CL_SELFTEST_STATE_START_ALARMS_BUZZERS;
   8e642:	4b45      	ldr	r3, [pc, #276]	; (8e758 <self_test+0x318>)
   8e644:	2202      	movs	r2, #2
   8e646:	701a      	strb	r2, [r3, #0]
				break;
   8e648:	bf00      	nop
				default:
				break;
			}
			break;
   8e64a:	f000 bd4d 	b.w	8f0e8 <self_test+0xca8>
		case CL_SELFTEST_STATE_START_ALARMS_BUZZERS:
	
			switch(cl_selftest_event_type)
   8e64e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e652:	2b06      	cmp	r3, #6
   8e654:	d000      	beq.n	8e658 <self_test+0x218>
				cl_selfteststate = CL_SELFTEST_STATE_START_UFPUMP;
				break;
				}
				break;
			default:
			break;
   8e656:	e021      	b.n	8e69c <self_test+0x25c>
		case CL_SELFTEST_STATE_START_ALARMS_BUZZERS:
	
			switch(cl_selftest_event_type)
			{
				case EVENT_selftest_TICK_100MS:
				if(status[CL_SELFTEST_RESULT_ALARM] == TEST_PAAS)
   8e658:	4b37      	ldr	r3, [pc, #220]	; (8e738 <self_test+0x2f8>)
   8e65a:	785b      	ldrb	r3, [r3, #1]
   8e65c:	2b01      	cmp	r3, #1
   8e65e:	d103      	bne.n	8e668 <self_test+0x228>
				{
				cl_selfteststate = CL_SELFTEST_STATE_START_UFPUMP;
   8e660:	4b3d      	ldr	r3, [pc, #244]	; (8e758 <self_test+0x318>)
   8e662:	2204      	movs	r2, #4
   8e664:	701a      	strb	r2, [r3, #0]
				break;
   8e666:	e019      	b.n	8e69c <self_test+0x25c>
				}
				else	
				{
					sv_cntrl_buzzer();
   8e668:	4b3e      	ldr	r3, [pc, #248]	; (8e764 <self_test+0x324>)
   8e66a:	4798      	blx	r3
				sv_cntrl_setredalarm();
   8e66c:	4b3e      	ldr	r3, [pc, #248]	; (8e768 <self_test+0x328>)
   8e66e:	4798      	blx	r3
				sv_cntrl_setyellowalarm();
   8e670:	4b3e      	ldr	r3, [pc, #248]	; (8e76c <self_test+0x32c>)
   8e672:	4798      	blx	r3
				sv_cntrl_setgreenalarm();
   8e674:	4b3e      	ldr	r3, [pc, #248]	; (8e770 <self_test+0x330>)
   8e676:	4798      	blx	r3
				
				command = CON_TX_COMMAND_SELFTEST_START_ALARM;
   8e678:	2356      	movs	r3, #86	; 0x56
   8e67a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8e67e:	f107 0127 	add.w	r1, r7, #39	; 0x27
   8e682:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8e686:	2200      	movs	r2, #0
   8e688:	4618      	mov	r0, r3
   8e68a:	4b32      	ldr	r3, [pc, #200]	; (8e754 <self_test+0x314>)
   8e68c:	4798      	blx	r3
   8e68e:	4603      	mov	r3, r0
   8e690:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				cl_selfteststate = CL_SELFTEST_STATE_START_UFPUMP;
   8e694:	4b30      	ldr	r3, [pc, #192]	; (8e758 <self_test+0x318>)
   8e696:	2204      	movs	r2, #4
   8e698:	701a      	strb	r2, [r3, #0]
				break;
   8e69a:	bf00      	nop
				}
				break;
			default:
			break;
		}
		break;
   8e69c:	f000 bd24 	b.w	8f0e8 <self_test+0xca8>
// 			break;
		
		
		
		case CL_SELFTEST_STATE_START_UFPUMP:
		switch(cl_selftest_event_type)
   8e6a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e6a4:	2b06      	cmp	r3, #6
   8e6a6:	d000      	beq.n	8e6aa <self_test+0x26a>
// 				Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
// 				break;
// 			//}
// 			
			default:
			break;
   8e6a8:	e03b      	b.n	8e722 <self_test+0x2e2>
		case CL_SELFTEST_STATE_START_UFPUMP:
		switch(cl_selftest_event_type)
		{ 
			
			case EVENT_selftest_TICK_100MS:
			if(status[CL_SELFTEST_RESULT_UFPUMP] == TEST_PAAS)   
   8e6aa:	4b23      	ldr	r3, [pc, #140]	; (8e738 <self_test+0x2f8>)
   8e6ac:	789b      	ldrb	r3, [r3, #2]
   8e6ae:	2b01      	cmp	r3, #1
   8e6b0:	d103      	bne.n	8e6ba <self_test+0x27a>
			{
				cl_selfteststate = CL_SELFTEST_STATE_START_HPPUMP;
   8e6b2:	4b29      	ldr	r3, [pc, #164]	; (8e758 <self_test+0x318>)
   8e6b4:	2206      	movs	r2, #6
   8e6b6:	701a      	strb	r2, [r3, #0]
				break;
   8e6b8:	e033      	b.n	8e722 <self_test+0x2e2>
			
			else
			{
				//sv_cntrl_setpumpspeed(UFPUMP,1000);
				
			Cl_selftestretcode =  sv_cntrl_activatepump(UFPUMP);
   8e6ba:	2004      	movs	r0, #4
   8e6bc:	4b2d      	ldr	r3, [pc, #180]	; (8e774 <self_test+0x334>)
   8e6be:	4798      	blx	r3
   8e6c0:	4603      	mov	r3, r0
   8e6c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			sv_cntrl_setpumpspeed(UFPUMP,12000);
   8e6c6:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   8e6ca:	2004      	movs	r0, #4
   8e6cc:	4b2a      	ldr	r3, [pc, #168]	; (8e778 <self_test+0x338>)
   8e6ce:	4798      	blx	r3
			cl_wait(100);
   8e6d0:	2064      	movs	r0, #100	; 0x64
   8e6d2:	4b2a      	ldr	r3, [pc, #168]	; (8e77c <self_test+0x33c>)
   8e6d4:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,8000);
   8e6d6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   8e6da:	2004      	movs	r0, #4
   8e6dc:	4b26      	ldr	r3, [pc, #152]	; (8e778 <self_test+0x338>)
   8e6de:	4798      	blx	r3
			cl_wait(100);
   8e6e0:	2064      	movs	r0, #100	; 0x64
   8e6e2:	4b26      	ldr	r3, [pc, #152]	; (8e77c <self_test+0x33c>)
   8e6e4:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,6000);
   8e6e6:	f241 7170 	movw	r1, #6000	; 0x1770
   8e6ea:	2004      	movs	r0, #4
   8e6ec:	4b22      	ldr	r3, [pc, #136]	; (8e778 <self_test+0x338>)
   8e6ee:	4798      	blx	r3
			cl_wait(100);
   8e6f0:	2064      	movs	r0, #100	; 0x64
   8e6f2:	4b22      	ldr	r3, [pc, #136]	; (8e77c <self_test+0x33c>)
   8e6f4:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,1000);
   8e6f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8e6fa:	2004      	movs	r0, #4
   8e6fc:	4b1e      	ldr	r3, [pc, #120]	; (8e778 <self_test+0x338>)
   8e6fe:	4798      	blx	r3
			cl_wait(100);
   8e700:	2064      	movs	r0, #100	; 0x64
   8e702:	4b1e      	ldr	r3, [pc, #120]	; (8e77c <self_test+0x33c>)
   8e704:	4798      	blx	r3
			sv_cntrl_setpumpspeed(UFPUMP,500);
   8e706:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   8e70a:	2004      	movs	r0, #4
   8e70c:	4b1a      	ldr	r3, [pc, #104]	; (8e778 <self_test+0x338>)
   8e70e:	4798      	blx	r3
			cl_wait(100);
   8e710:	2064      	movs	r0, #100	; 0x64
   8e712:	4b1a      	ldr	r3, [pc, #104]	; (8e77c <self_test+0x33c>)
   8e714:	4798      	blx	r3
//			Cl_selftestretcode =  sv_cntrl_activatepump(UFPUMP);
             cl_selftestFeedback_start();
   8e716:	4b1a      	ldr	r3, [pc, #104]	; (8e780 <self_test+0x340>)
   8e718:	4798      	blx	r3
			cl_selfteststate = CL_SELFTEST_STATE_UFPUMP_STATUS;
   8e71a:	4b0f      	ldr	r3, [pc, #60]	; (8e758 <self_test+0x318>)
   8e71c:	2205      	movs	r2, #5
   8e71e:	701a      	strb	r2, [r3, #0]
			break;
   8e720:	bf00      	nop
// 			//}
// 			
			default:
			break;
		}
		break;	 
   8e722:	f000 bce1 	b.w	8f0e8 <self_test+0xca8>
		
		case CL_SELFTEST_STATE_UFPUMP_STATUS:
		switch(cl_selftest_event_type)
   8e726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e72a:	2b02      	cmp	r3, #2
   8e72c:	d064      	beq.n	8e7f8 <self_test+0x3b8>
   8e72e:	2b08      	cmp	r3, #8
   8e730:	d028      	beq.n	8e784 <self_test+0x344>
				// {
					 status[CL_SELFTEST_RESULT_UFPUMP] = TEST_FAIL;
					 break;
				// }
			
			default:break;
   8e732:	e066      	b.n	8e802 <self_test+0x3c2>
   8e734:	0008f115 	.word	0x0008f115
   8e738:	200724f4 	.word	0x200724f4
   8e73c:	0009b0b9 	.word	0x0009b0b9
   8e740:	0009b07d 	.word	0x0009b07d
   8e744:	0009b091 	.word	0x0009b091
   8e748:	0009b0a5 	.word	0x0009b0a5
   8e74c:	0009ad7d 	.word	0x0009ad7d
   8e750:	0009b19d 	.word	0x0009b19d
   8e754:	0009cbd5 	.word	0x0009cbd5
   8e758:	200718ca 	.word	0x200718ca
   8e75c:	200718ce 	.word	0x200718ce
   8e760:	200718d0 	.word	0x200718d0
   8e764:	0009b069 	.word	0x0009b069
   8e768:	0009b02d 	.word	0x0009b02d
   8e76c:	0009b041 	.word	0x0009b041
   8e770:	0009b055 	.word	0x0009b055
   8e774:	0009ad41 	.word	0x0009ad41
   8e778:	0009ae59 	.word	0x0009ae59
   8e77c:	00093ea9 	.word	0x00093ea9
   8e780:	00096c5d 	.word	0x00096c5d
		{
			case EVENT_selftest_TICK_SECOND:
			
		//	 int16_t uf_test_value = 0;
			 
				uf_test_value = uf_periodvalue;
   8e784:	4b9c      	ldr	r3, [pc, #624]	; (8e9f8 <self_test+0x5b8>)
   8e786:	881b      	ldrh	r3, [r3, #0]
   8e788:	63bb      	str	r3, [r7, #56]	; 0x38
				 
				 if ((uf_test_value == Expected_uf_test_value) && (uf_test_value == Expected_uf_test_value1))
   8e78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8e78c:	f240 12b3 	movw	r2, #435	; 0x1b3
   8e790:	4293      	cmp	r3, r2
   8e792:	d112      	bne.n	8e7ba <self_test+0x37a>
   8e794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8e796:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
   8e79a:	d10e      	bne.n	8e7ba <self_test+0x37a>
				 {
					 status[CL_SELFTEST_RESULT_UFPUMP] = TEST_PAAS; //test[0] = 1;
   8e79c:	4b97      	ldr	r3, [pc, #604]	; (8e9fc <self_test+0x5bc>)
   8e79e:	2201      	movs	r2, #1
   8e7a0:	709a      	strb	r2, [r3, #2]
					
					 sv_cntrl_deactivatepump(UFPUMP);
   8e7a2:	2004      	movs	r0, #4
   8e7a4:	4b96      	ldr	r3, [pc, #600]	; (8ea00 <self_test+0x5c0>)
   8e7a6:	4798      	blx	r3
					 test_time = 0;
   8e7a8:	4b96      	ldr	r3, [pc, #600]	; (8ea04 <self_test+0x5c4>)
   8e7aa:	2200      	movs	r2, #0
   8e7ac:	801a      	strh	r2, [r3, #0]
					 cl_selftestFeedback_stop();
   8e7ae:	4b96      	ldr	r3, [pc, #600]	; (8ea08 <self_test+0x5c8>)
   8e7b0:	4798      	blx	r3
					/* uf_test_value = 0;*/
					  
					 cl_selfteststate = CL_SELFTEST_STATE_START_HPPUMP;
   8e7b2:	4b96      	ldr	r3, [pc, #600]	; (8ea0c <self_test+0x5cc>)
   8e7b4:	2206      	movs	r2, #6
   8e7b6:	701a      	strb	r2, [r3, #0]
				
					 break;
   8e7b8:	e023      	b.n	8e802 <self_test+0x3c2>
				 }
				 else
				 {
					  test_time++;
   8e7ba:	4b92      	ldr	r3, [pc, #584]	; (8ea04 <self_test+0x5c4>)
   8e7bc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8e7c0:	b29b      	uxth	r3, r3
   8e7c2:	3301      	adds	r3, #1
   8e7c4:	b29b      	uxth	r3, r3
   8e7c6:	b21a      	sxth	r2, r3
   8e7c8:	4b8e      	ldr	r3, [pc, #568]	; (8ea04 <self_test+0x5c4>)
   8e7ca:	801a      	strh	r2, [r3, #0]
					 if (test_time > 3)
   8e7cc:	4b8d      	ldr	r3, [pc, #564]	; (8ea04 <self_test+0x5c4>)
   8e7ce:	f9b3 3000 	ldrsh.w	r3, [r3]
   8e7d2:	2b03      	cmp	r3, #3
   8e7d4:	dd14      	ble.n	8e800 <self_test+0x3c0>
					 {
						 sv_cntrl_deactivatepump(UFPUMP);
   8e7d6:	2004      	movs	r0, #4
   8e7d8:	4b89      	ldr	r3, [pc, #548]	; (8ea00 <self_test+0x5c0>)
   8e7da:	4798      	blx	r3
						 cl_selftestFeedback_stop();
   8e7dc:	4b8a      	ldr	r3, [pc, #552]	; (8ea08 <self_test+0x5c8>)
   8e7de:	4798      	blx	r3
						   status[CL_SELFTEST_RESULT_UFPUMP] = TEST_FAIL  ;      // test[0] = 0;
   8e7e0:	4b86      	ldr	r3, [pc, #536]	; (8e9fc <self_test+0x5bc>)
   8e7e2:	2200      	movs	r2, #0
   8e7e4:	709a      	strb	r2, [r3, #2]
						  test_time = 0;
   8e7e6:	4b87      	ldr	r3, [pc, #540]	; (8ea04 <self_test+0x5c4>)
   8e7e8:	2200      	movs	r2, #0
   8e7ea:	801a      	strh	r2, [r3, #0]
						   cl_selftestFeedback_stop();
   8e7ec:	4b86      	ldr	r3, [pc, #536]	; (8ea08 <self_test+0x5c8>)
   8e7ee:	4798      	blx	r3
						 cl_selfteststate = CL_SELFTEST_STATE_START_HPPUMP;
   8e7f0:	4b86      	ldr	r3, [pc, #536]	; (8ea0c <self_test+0x5cc>)
   8e7f2:	2206      	movs	r2, #6
   8e7f4:	701a      	strb	r2, [r3, #0]
						 
						 
						  break;
   8e7f6:	e004      	b.n	8e802 <self_test+0x3c2>
					 }
				 }
				 break;
				 case EVENT_STOP_selftest:
				// {
					 status[CL_SELFTEST_RESULT_UFPUMP] = TEST_FAIL;
   8e7f8:	4b80      	ldr	r3, [pc, #512]	; (8e9fc <self_test+0x5bc>)
   8e7fa:	2200      	movs	r2, #0
   8e7fc:	709a      	strb	r2, [r3, #2]
					 break;
   8e7fe:	e000      	b.n	8e802 <self_test+0x3c2>
						 
						  break;
						 
					 }
				 }
				 break;
   8e800:	bf00      	nop
				// }
			
			default:break;
		}
		
		break;
   8e802:	f000 bc71 	b.w	8f0e8 <self_test+0xca8>

		case CL_SELFTEST_STATE_START_HPPUMP:
		switch(cl_selftest_event_type)
   8e806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e80a:	2b02      	cmp	r3, #2
   8e80c:	d01c      	beq.n	8e848 <self_test+0x408>
   8e80e:	2b05      	cmp	r3, #5
   8e810:	d000      	beq.n	8e814 <self_test+0x3d4>
			 //{
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
				 
				 break;
			// }
			default:break;
   8e812:	e01d      	b.n	8e850 <self_test+0x410>

		case CL_SELFTEST_STATE_START_HPPUMP:
		switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_50MS:
			if(status[CL_SELFTEST_RESULT_HPPUMP] == TEST_PAAS)
   8e814:	4b79      	ldr	r3, [pc, #484]	; (8e9fc <self_test+0x5bc>)
   8e816:	78db      	ldrb	r3, [r3, #3]
   8e818:	2b01      	cmp	r3, #1
   8e81a:	d103      	bne.n	8e824 <self_test+0x3e4>
		{
			 cl_selfteststate = CL_SELFTEST_STATE_START_BDPUMP;
   8e81c:	4b7b      	ldr	r3, [pc, #492]	; (8ea0c <self_test+0x5cc>)
   8e81e:	2208      	movs	r2, #8
   8e820:	701a      	strb	r2, [r3, #0]
			 break;
   8e822:	e015      	b.n	8e850 <self_test+0x410>
		}
		else
			{
				
			sv_cntrl_setHepa_dir();
   8e824:	4b7a      	ldr	r3, [pc, #488]	; (8ea10 <self_test+0x5d0>)
   8e826:	4798      	blx	r3

			sv_cntrl_activatepump(HEPARINPUMP);
   8e828:	2005      	movs	r0, #5
   8e82a:	4b7a      	ldr	r3, [pc, #488]	; (8ea14 <self_test+0x5d4>)
   8e82c:	4798      	blx	r3
	        cl_wait(100);
   8e82e:	2064      	movs	r0, #100	; 0x64
   8e830:	4b79      	ldr	r3, [pc, #484]	; (8ea18 <self_test+0x5d8>)
   8e832:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,2);
   8e834:	2102      	movs	r1, #2
   8e836:	2005      	movs	r0, #5
   8e838:	4b78      	ldr	r3, [pc, #480]	; (8ea1c <self_test+0x5dc>)
   8e83a:	4798      	blx	r3
			cl_hep_selftest_start();
   8e83c:	4b78      	ldr	r3, [pc, #480]	; (8ea20 <self_test+0x5e0>)
   8e83e:	4798      	blx	r3
			cl_selfteststate = CL_SELFTEST_STATE_HPPUMP_STATUS;
   8e840:	4b72      	ldr	r3, [pc, #456]	; (8ea0c <self_test+0x5cc>)
   8e842:	2207      	movs	r2, #7
   8e844:	701a      	strb	r2, [r3, #0]
			break;
   8e846:	e003      	b.n	8e850 <self_test+0x410>
			}
			break;
			 case EVENT_STOP_selftest:
			 //{
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
   8e848:	4b6c      	ldr	r3, [pc, #432]	; (8e9fc <self_test+0x5bc>)
   8e84a:	2200      	movs	r2, #0
   8e84c:	70da      	strb	r2, [r3, #3]
				 
				 break;
   8e84e:	bf00      	nop
			// }
			default:break;
			
		}
		break;
   8e850:	f000 bc4a 	b.w	8f0e8 <self_test+0xca8>
		
		case CL_SELFTEST_STATE_HPPUMP_STATUS:
		switch(cl_selftest_event_type)
   8e854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e858:	2b02      	cmp	r3, #2
   8e85a:	d039      	beq.n	8e8d0 <self_test+0x490>
   8e85c:	2b08      	cmp	r3, #8
   8e85e:	d000      	beq.n	8e862 <self_test+0x422>
			// {
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
				 break;
			// }
			
			default:break;
   8e860:	e03b      	b.n	8e8da <self_test+0x49a>
		switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_SECOND:
		//	 uint16_t hp_test_value = 0;
			
		 hp_test_value = hep_periodvalue;
   8e862:	4b70      	ldr	r3, [pc, #448]	; (8ea24 <self_test+0x5e4>)
   8e864:	881b      	ldrh	r3, [r3, #0]
   8e866:	637b      	str	r3, [r7, #52]	; 0x34
			
			if( (hp_test_value >= Expected_hp_test_value1)&&(hp_test_value <= Expected_hp_test_value2))
   8e868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8e86a:	2b4f      	cmp	r3, #79	; 0x4f
   8e86c:	d90f      	bls.n	8e88e <self_test+0x44e>
   8e86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8e870:	2bc8      	cmp	r3, #200	; 0xc8
   8e872:	d80c      	bhi.n	8e88e <self_test+0x44e>
			{
				status[CL_SELFTEST_RESULT_HPPUMP] = TEST_PAAS;
   8e874:	4b61      	ldr	r3, [pc, #388]	; (8e9fc <self_test+0x5bc>)
   8e876:	2201      	movs	r2, #1
   8e878:	70da      	strb	r2, [r3, #3]
				sv_cntrl_deactivatepump(HEPARINPUMP);
   8e87a:	2005      	movs	r0, #5
   8e87c:	4b60      	ldr	r3, [pc, #384]	; (8ea00 <self_test+0x5c0>)
   8e87e:	4798      	blx	r3
				Cl_ReturnCodeType cl_hep_selftest_stop();
				cl_selfteststate = CL_SELFTEST_STATE_START_BDPUMP;
   8e880:	4b62      	ldr	r3, [pc, #392]	; (8ea0c <self_test+0x5cc>)
   8e882:	2208      	movs	r2, #8
   8e884:	701a      	strb	r2, [r3, #0]
		
				test_time = 0;
   8e886:	4b5f      	ldr	r3, [pc, #380]	; (8ea04 <self_test+0x5c4>)
   8e888:	2200      	movs	r2, #0
   8e88a:	801a      	strh	r2, [r3, #0]
				break;
   8e88c:	e025      	b.n	8e8da <self_test+0x49a>
			}
			else
			{
				test_time++;
   8e88e:	4b5d      	ldr	r3, [pc, #372]	; (8ea04 <self_test+0x5c4>)
   8e890:	f9b3 3000 	ldrsh.w	r3, [r3]
   8e894:	b29b      	uxth	r3, r3
   8e896:	3301      	adds	r3, #1
   8e898:	b29b      	uxth	r3, r3
   8e89a:	b21a      	sxth	r2, r3
   8e89c:	4b59      	ldr	r3, [pc, #356]	; (8ea04 <self_test+0x5c4>)
   8e89e:	801a      	strh	r2, [r3, #0]
				if (test_time++ > 5)
   8e8a0:	4b58      	ldr	r3, [pc, #352]	; (8ea04 <self_test+0x5c4>)
   8e8a2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8e8a6:	b29a      	uxth	r2, r3
   8e8a8:	3201      	adds	r2, #1
   8e8aa:	b292      	uxth	r2, r2
   8e8ac:	b211      	sxth	r1, r2
   8e8ae:	4a55      	ldr	r2, [pc, #340]	; (8ea04 <self_test+0x5c4>)
   8e8b0:	8011      	strh	r1, [r2, #0]
   8e8b2:	2b05      	cmp	r3, #5
   8e8b4:	dd10      	ble.n	8e8d8 <self_test+0x498>
				{
					sv_cntrl_deactivatepump(HEPARINPUMP);
   8e8b6:	2005      	movs	r0, #5
   8e8b8:	4b51      	ldr	r3, [pc, #324]	; (8ea00 <self_test+0x5c0>)
   8e8ba:	4798      	blx	r3
					status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
   8e8bc:	4b4f      	ldr	r3, [pc, #316]	; (8e9fc <self_test+0x5bc>)
   8e8be:	2200      	movs	r2, #0
   8e8c0:	70da      	strb	r2, [r3, #3]
					Cl_ReturnCodeType cl_hep_selftest_stop();
					cl_selfteststate = CL_SELFTEST_STATE_START_BDPUMP;
   8e8c2:	4b52      	ldr	r3, [pc, #328]	; (8ea0c <self_test+0x5cc>)
   8e8c4:	2208      	movs	r2, #8
   8e8c6:	701a      	strb	r2, [r3, #0]
					
					test_time = 0;
   8e8c8:	4b4e      	ldr	r3, [pc, #312]	; (8ea04 <self_test+0x5c4>)
   8e8ca:	2200      	movs	r2, #0
   8e8cc:	801a      	strh	r2, [r3, #0]
					break;
   8e8ce:	e004      	b.n	8e8da <self_test+0x49a>
				}
			}
			break;
			 case EVENT_STOP_selftest:
			// {
				 status[CL_SELFTEST_RESULT_HPPUMP] = TEST_FAIL;
   8e8d0:	4b4a      	ldr	r3, [pc, #296]	; (8e9fc <self_test+0x5bc>)
   8e8d2:	2200      	movs	r2, #0
   8e8d4:	70da      	strb	r2, [r3, #3]
				 break;
   8e8d6:	e000      	b.n	8e8da <self_test+0x49a>
					test_time = 0;
					break;
					
				}
			}
			break;
   8e8d8:	bf00      	nop
				 break;
			// }
			
			default:break;
		}
		break;	
   8e8da:	f000 bc05 	b.w	8f0e8 <self_test+0xca8>
	
				case CL_SELFTEST_STATE_START_BDPUMP:
				switch(cl_selftest_event_type)
   8e8de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e8e2:	2b05      	cmp	r3, #5
   8e8e4:	d000      	beq.n	8e8e8 <self_test+0x4a8>
// 					  case EVENT_STOP_selftest:
// 					 // {
// 						  status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
// 						  break;
// 					//  }
					default:break;
   8e8e6:	e01b      	b.n	8e920 <self_test+0x4e0>
				case CL_SELFTEST_STATE_START_BDPUMP:
				switch(cl_selftest_event_type)
				{
					case EVENT_selftest_TICK_50MS:
					
                      if(status[CL_SELFTEST_RESULT_BDPUMP] == TEST_PAAS)
   8e8e8:	4b44      	ldr	r3, [pc, #272]	; (8e9fc <self_test+0x5bc>)
   8e8ea:	791b      	ldrb	r3, [r3, #4]
   8e8ec:	2b01      	cmp	r3, #1
   8e8ee:	d103      	bne.n	8e8f8 <self_test+0x4b8>
					  {
						  cl_selfteststate = CL_SELFTEST_STATE_START_PISTON_PUMP;
   8e8f0:	4b46      	ldr	r3, [pc, #280]	; (8ea0c <self_test+0x5cc>)
   8e8f2:	220a      	movs	r2, #10
   8e8f4:	701a      	strb	r2, [r3, #0]
						  break;
   8e8f6:	e013      	b.n	8e920 <self_test+0x4e0>
					  }
					  else
					  {
						  
					  Cl_selftestretcode = sv_cntrl_activatepump(BLOODPUMP);
   8e8f8:	2003      	movs	r0, #3
   8e8fa:	4b46      	ldr	r3, [pc, #280]	; (8ea14 <self_test+0x5d4>)
   8e8fc:	4798      	blx	r3
   8e8fe:	4603      	mov	r3, r0
   8e900:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					  cl_wait(100);
   8e904:	2064      	movs	r0, #100	; 0x64
   8e906:	4b44      	ldr	r3, [pc, #272]	; (8ea18 <self_test+0x5d8>)
   8e908:	4798      	blx	r3
					sv_cntrl_setpumpspeed(BLOODPUMP,400);
   8e90a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   8e90e:	2003      	movs	r0, #3
   8e910:	4b42      	ldr	r3, [pc, #264]	; (8ea1c <self_test+0x5dc>)
   8e912:	4798      	blx	r3

				
					cl_bp_selftest_start();
   8e914:	4b44      	ldr	r3, [pc, #272]	; (8ea28 <self_test+0x5e8>)
   8e916:	4798      	blx	r3
					cl_selfteststate = CL_SELFTEST_STATE_BDPUMP_STATUS;
   8e918:	4b3c      	ldr	r3, [pc, #240]	; (8ea0c <self_test+0x5cc>)
   8e91a:	2209      	movs	r2, #9
   8e91c:	701a      	strb	r2, [r3, #0]
					break;
   8e91e:	bf00      	nop
// 						  break;
// 					//  }
					default:break;
					
				}
				break;
   8e920:	e3e2      	b.n	8f0e8 <self_test+0xca8>
				
				case CL_SELFTEST_STATE_BDPUMP_STATUS:
				switch(cl_selftest_event_type)
   8e922:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e926:	2b02      	cmp	r3, #2
   8e928:	d037      	beq.n	8e99a <self_test+0x55a>
   8e92a:	2b08      	cmp	r3, #8
   8e92c:	d000      	beq.n	8e930 <self_test+0x4f0>
					// {
						 status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
						 break;
					// }
					
					default:break;
   8e92e:	e039      	b.n	8e9a4 <self_test+0x564>
				case CL_SELFTEST_STATE_BDPUMP_STATUS:
				switch(cl_selftest_event_type)
				{
					case EVENT_selftest_TICK_SECOND:
			//		 uint16_t hp_test_value = 0;
					bp_test_value = bp_periodvalue;
   8e930:	4b3e      	ldr	r3, [pc, #248]	; (8ea2c <self_test+0x5ec>)
   8e932:	881b      	ldrh	r3, [r3, #0]
   8e934:	633b      	str	r3, [r7, #48]	; 0x30
					
					if ((bp_test_value <= Expected_bp_test_value1)&&(bp_test_value >= Expected_bp_test_value2))
   8e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8e938:	2b3c      	cmp	r3, #60	; 0x3c
   8e93a:	d811      	bhi.n	8e960 <self_test+0x520>
   8e93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8e93e:	2bc7      	cmp	r3, #199	; 0xc7
   8e940:	d90e      	bls.n	8e960 <self_test+0x520>
					{
						status[CL_SELFTEST_RESULT_BDPUMP] = TEST_PAAS;
   8e942:	4b2e      	ldr	r3, [pc, #184]	; (8e9fc <self_test+0x5bc>)
   8e944:	2201      	movs	r2, #1
   8e946:	711a      	strb	r2, [r3, #4]
						sv_cntrl_deactivatepump(BLOODPUMP);
   8e948:	2003      	movs	r0, #3
   8e94a:	4b2d      	ldr	r3, [pc, #180]	; (8ea00 <self_test+0x5c0>)
   8e94c:	4798      	blx	r3
						cl_bp_selftest_stop();
   8e94e:	4b38      	ldr	r3, [pc, #224]	; (8ea30 <self_test+0x5f0>)
   8e950:	4798      	blx	r3
						cl_selfteststate = CL_SELFTEST_STATE_START_PISTON_PUMP;
   8e952:	4b2e      	ldr	r3, [pc, #184]	; (8ea0c <self_test+0x5cc>)
   8e954:	220a      	movs	r2, #10
   8e956:	701a      	strb	r2, [r3, #0]
						test_time = 0;
   8e958:	4b2a      	ldr	r3, [pc, #168]	; (8ea04 <self_test+0x5c4>)
   8e95a:	2200      	movs	r2, #0
   8e95c:	801a      	strh	r2, [r3, #0]
						break;
   8e95e:	e021      	b.n	8e9a4 <self_test+0x564>
					}
					else
					{
						test_time++;
   8e960:	4b28      	ldr	r3, [pc, #160]	; (8ea04 <self_test+0x5c4>)
   8e962:	f9b3 3000 	ldrsh.w	r3, [r3]
   8e966:	b29b      	uxth	r3, r3
   8e968:	3301      	adds	r3, #1
   8e96a:	b29b      	uxth	r3, r3
   8e96c:	b21a      	sxth	r2, r3
   8e96e:	4b25      	ldr	r3, [pc, #148]	; (8ea04 <self_test+0x5c4>)
   8e970:	801a      	strh	r2, [r3, #0]
						if (test_time > 3)
   8e972:	4b24      	ldr	r3, [pc, #144]	; (8ea04 <self_test+0x5c4>)
   8e974:	f9b3 3000 	ldrsh.w	r3, [r3]
   8e978:	2b03      	cmp	r3, #3
   8e97a:	dd12      	ble.n	8e9a2 <self_test+0x562>
						{
							sv_cntrl_deactivatepump(BLOODPUMP);
   8e97c:	2003      	movs	r0, #3
   8e97e:	4b20      	ldr	r3, [pc, #128]	; (8ea00 <self_test+0x5c0>)
   8e980:	4798      	blx	r3
							status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
   8e982:	4b1e      	ldr	r3, [pc, #120]	; (8e9fc <self_test+0x5bc>)
   8e984:	2200      	movs	r2, #0
   8e986:	711a      	strb	r2, [r3, #4]
							cl_selfteststate = CL_SELFTEST_STATE_START_PISTON_PUMP;
   8e988:	4b20      	ldr	r3, [pc, #128]	; (8ea0c <self_test+0x5cc>)
   8e98a:	220a      	movs	r2, #10
   8e98c:	701a      	strb	r2, [r3, #0]
							cl_bp_selftest_stop();
   8e98e:	4b28      	ldr	r3, [pc, #160]	; (8ea30 <self_test+0x5f0>)
   8e990:	4798      	blx	r3
							test_time = 0;
   8e992:	4b1c      	ldr	r3, [pc, #112]	; (8ea04 <self_test+0x5c4>)
   8e994:	2200      	movs	r2, #0
   8e996:	801a      	strh	r2, [r3, #0]
							break;
   8e998:	e004      	b.n	8e9a4 <self_test+0x564>
						}
					}
					break;
					 case EVENT_STOP_selftest:
					// {
						 status[CL_SELFTEST_RESULT_BDPUMP] = TEST_FAIL;
   8e99a:	4b18      	ldr	r3, [pc, #96]	; (8e9fc <self_test+0x5bc>)
   8e99c:	2200      	movs	r2, #0
   8e99e:	711a      	strb	r2, [r3, #4]
						 break;
   8e9a0:	e000      	b.n	8e9a4 <self_test+0x564>
							test_time = 0;
							break;
							
						}
					}
					break;
   8e9a2:	bf00      	nop
						 break;
					// }
					
					default:break;
				}
				break;
   8e9a4:	e3a0      	b.n	8f0e8 <self_test+0xca8>
// 				
// 				default:break;
// 			
// 			}
		case CL_SELFTEST_STATE_START_PISTON_PUMP:
		switch(cl_selftest_event_type)
   8e9a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8e9aa:	2b07      	cmp	r3, #7
   8e9ac:	d000      	beq.n	8e9b0 <self_test+0x570>
			
			}
			}
			break;
			default:
			break;
   8e9ae:	e062      	b.n	8ea76 <self_test+0x636>
		switch(cl_selftest_event_type)
		{
			
			
			case EVENT_selftest_TICK_500MS:
			if((status[CL_SELFTEST_RESULT_BICARBPUMP] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_ACIDPUMP] == TEST_PAAS))
   8e9b0:	4b12      	ldr	r3, [pc, #72]	; (8e9fc <self_test+0x5bc>)
   8e9b2:	799b      	ldrb	r3, [r3, #6]
   8e9b4:	2b01      	cmp	r3, #1
   8e9b6:	d107      	bne.n	8e9c8 <self_test+0x588>
   8e9b8:	4b10      	ldr	r3, [pc, #64]	; (8e9fc <self_test+0x5bc>)
   8e9ba:	795b      	ldrb	r3, [r3, #5]
   8e9bc:	2b01      	cmp	r3, #1
   8e9be:	d103      	bne.n	8e9c8 <self_test+0x588>
			{
				cl_selfteststate = CL_SELFTEST_STATE_APT_STATUS;
   8e9c0:	4b12      	ldr	r3, [pc, #72]	; (8ea0c <self_test+0x5cc>)
   8e9c2:	220e      	movs	r2, #14
   8e9c4:	701a      	strb	r2, [r3, #0]
				break;
   8e9c6:	e056      	b.n	8ea76 <self_test+0x636>
			}
			
			else
			{
				
			time_count++;
   8e9c8:	4b1a      	ldr	r3, [pc, #104]	; (8ea34 <self_test+0x5f4>)
   8e9ca:	881b      	ldrh	r3, [r3, #0]
   8e9cc:	3301      	adds	r3, #1
   8e9ce:	b29a      	uxth	r2, r3
   8e9d0:	4b18      	ldr	r3, [pc, #96]	; (8ea34 <self_test+0x5f4>)
   8e9d2:	801a      	strh	r2, [r3, #0]
			if(time_count==2)
   8e9d4:	4b17      	ldr	r3, [pc, #92]	; (8ea34 <self_test+0x5f4>)
   8e9d6:	881b      	ldrh	r3, [r3, #0]
   8e9d8:	2b02      	cmp	r3, #2
   8e9da:	d102      	bne.n	8e9e2 <self_test+0x5a2>
			{
            sv_prop_startpropeo_aligning();
   8e9dc:	4b16      	ldr	r3, [pc, #88]	; (8ea38 <self_test+0x5f8>)
   8e9de:	4798      	blx	r3
			break;
   8e9e0:	e049      	b.n	8ea76 <self_test+0x636>
			}
			else if (time_count==15)
   8e9e2:	4b14      	ldr	r3, [pc, #80]	; (8ea34 <self_test+0x5f4>)
   8e9e4:	881b      	ldrh	r3, [r3, #0]
   8e9e6:	2b0f      	cmp	r3, #15
   8e9e8:	d12c      	bne.n	8ea44 <self_test+0x604>
			{
           
				 //sv_prop_bicarb_selftest();
				 sv_prop_startopenfill(); 
   8e9ea:	4b14      	ldr	r3, [pc, #80]	; (8ea3c <self_test+0x5fc>)
   8e9ec:	4798      	blx	r3
				 startpropFlag = true;
   8e9ee:	4b14      	ldr	r3, [pc, #80]	; (8ea40 <self_test+0x600>)
   8e9f0:	2201      	movs	r2, #1
   8e9f2:	701a      	strb	r2, [r3, #0]
			
			break;
   8e9f4:	e03f      	b.n	8ea76 <self_test+0x636>
   8e9f6:	bf00      	nop
   8e9f8:	200724d2 	.word	0x200724d2
   8e9fc:	200724f4 	.word	0x200724f4
   8ea00:	0009ad7d 	.word	0x0009ad7d
   8ea04:	200718d4 	.word	0x200718d4
   8ea08:	00096c75 	.word	0x00096c75
   8ea0c:	200718ca 	.word	0x200718ca
   8ea10:	0009ae31 	.word	0x0009ae31
   8ea14:	0009ad41 	.word	0x0009ad41
   8ea18:	00093ea9 	.word	0x00093ea9
   8ea1c:	0009ae59 	.word	0x0009ae59
   8ea20:	00094e09 	.word	0x00094e09
   8ea24:	200724d4 	.word	0x200724d4
   8ea28:	00094199 	.word	0x00094199
   8ea2c:	200718c8 	.word	0x200718c8
   8ea30:	000941b1 	.word	0x000941b1
   8ea34:	200718cc 	.word	0x200718cc
   8ea38:	0009b151 	.word	0x0009b151
   8ea3c:	0009b271 	.word	0x0009b271
   8ea40:	200718ce 	.word	0x200718ce
			}
			else if(startpropFlag){
   8ea44:	4b8e      	ldr	r3, [pc, #568]	; (8ec80 <self_test+0x840>)
   8ea46:	781b      	ldrb	r3, [r3, #0]
   8ea48:	2b00      	cmp	r3, #0
   8ea4a:	d013      	beq.n	8ea74 <self_test+0x634>
				
			durcount++;
   8ea4c:	4b8d      	ldr	r3, [pc, #564]	; (8ec84 <self_test+0x844>)
   8ea4e:	681b      	ldr	r3, [r3, #0]
   8ea50:	3301      	adds	r3, #1
   8ea52:	4a8c      	ldr	r2, [pc, #560]	; (8ec84 <self_test+0x844>)
   8ea54:	6013      	str	r3, [r2, #0]
			if(durcount >=2){
   8ea56:	4b8b      	ldr	r3, [pc, #556]	; (8ec84 <self_test+0x844>)
   8ea58:	681b      	ldr	r3, [r3, #0]
   8ea5a:	2b01      	cmp	r3, #1
   8ea5c:	dd0a      	ble.n	8ea74 <self_test+0x634>
				startpropFlag = false;	
   8ea5e:	4b88      	ldr	r3, [pc, #544]	; (8ec80 <self_test+0x840>)
   8ea60:	2200      	movs	r2, #0
   8ea62:	701a      	strb	r2, [r3, #0]
				sv_prop_stopopenfill();
   8ea64:	4b88      	ldr	r3, [pc, #544]	; (8ec88 <self_test+0x848>)
   8ea66:	4798      	blx	r3
				time_count = 0;
   8ea68:	4b88      	ldr	r3, [pc, #544]	; (8ec8c <self_test+0x84c>)
   8ea6a:	2200      	movs	r2, #0
   8ea6c:	801a      	strh	r2, [r3, #0]
			cl_selfteststate = CL_SELFTEST_STATE_STOP_PISTON_PUMP;
   8ea6e:	4b88      	ldr	r3, [pc, #544]	; (8ec90 <self_test+0x850>)
   8ea70:	220b      	movs	r2, #11
   8ea72:	701a      	strb	r2, [r3, #0]
			
			}
			
			}
			}
			break;
   8ea74:	bf00      	nop
			default:
			break;
			
		}
		break;
   8ea76:	e337      	b.n	8f0e8 <self_test+0xca8>
		
		case CL_SELFTEST_STATE_STOP_PISTON_PUMP:
		switch(cl_selftest_event_type)
   8ea78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ea7c:	2b02      	cmp	r3, #2
   8ea7e:	d00b      	beq.n	8ea98 <self_test+0x658>
   8ea80:	2b08      	cmp	r3, #8
   8ea82:	d000      	beq.n	8ea86 <self_test+0x646>
			 // {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_FAIL;
				  break;
			 // }
			
			default:break;
   8ea84:	e00c      	b.n	8eaa0 <self_test+0x660>
		case CL_SELFTEST_STATE_STOP_PISTON_PUMP:
		switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_SECOND:
		
				sv_prop_bicarb_selftest_f_b();
   8ea86:	4b83      	ldr	r3, [pc, #524]	; (8ec94 <self_test+0x854>)
   8ea88:	4798      	blx	r3
				cl_selfteststate = CL_SELFTEST_STATE_ACIDPUMP_STATUS;
   8ea8a:	4b81      	ldr	r3, [pc, #516]	; (8ec90 <self_test+0x850>)
   8ea8c:	220c      	movs	r2, #12
   8ea8e:	701a      	strb	r2, [r3, #0]
				time_count = 0;
   8ea90:	4b7e      	ldr	r3, [pc, #504]	; (8ec8c <self_test+0x84c>)
   8ea92:	2200      	movs	r2, #0
   8ea94:	801a      	strh	r2, [r3, #0]
				break;
   8ea96:	e003      	b.n	8eaa0 <self_test+0x660>
// 			}
// 			break;
// 			}
			  case EVENT_STOP_selftest:
			 // {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_FAIL;
   8ea98:	4b7f      	ldr	r3, [pc, #508]	; (8ec98 <self_test+0x858>)
   8ea9a:	2200      	movs	r2, #0
   8ea9c:	719a      	strb	r2, [r3, #6]
				  break;
   8ea9e:	bf00      	nop
			 // }
			
			default:break;
		}
		break;
   8eaa0:	e322      	b.n	8f0e8 <self_test+0xca8>
		case CL_SELFTEST_STATE_ACIDPUMP_STATUS:
	    switch(cl_selftest_event_type)
   8eaa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eaa6:	2b08      	cmp	r3, #8
   8eaa8:	d000      	beq.n	8eaac <self_test+0x66c>
			cl_selfteststate =  CL_SELFTEST_STATE_BICARBPUMP_STATUS;
			break;
		}
		break;
		default:
		break;
   8eaaa:	e01b      	b.n	8eae4 <self_test+0x6a4>
	    switch(cl_selftest_event_type)
		{
			case EVENT_selftest_TICK_SECOND:
				
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_F_B,&af_b);
   8eaac:	f107 0322 	add.w	r3, r7, #34	; 0x22
   8eab0:	4619      	mov	r1, r3
   8eab2:	2026      	movs	r0, #38	; 0x26
   8eab4:	4b79      	ldr	r3, [pc, #484]	; (8ec9c <self_test+0x85c>)
   8eab6:	4798      	blx	r3
				if ((af_b >= Expected_acid_test_value1) && (af_b <= Expected_acid_test_value1))
   8eab8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   8eabc:	2b01      	cmp	r3, #1
   8eabe:	dd0a      	ble.n	8ead6 <self_test+0x696>
   8eac0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   8eac4:	2b02      	cmp	r3, #2
   8eac6:	dc06      	bgt.n	8ead6 <self_test+0x696>
				 				{
				 					status[CL_SELFTEST_RESULT_ACIDPUMP] = TEST_PAAS;
   8eac8:	4b73      	ldr	r3, [pc, #460]	; (8ec98 <self_test+0x858>)
   8eaca:	2201      	movs	r2, #1
   8eacc:	715a      	strb	r2, [r3, #5]
				 						cl_selfteststate =  CL_SELFTEST_STATE_BICARBPUMP_STATUS;
   8eace:	4b70      	ldr	r3, [pc, #448]	; (8ec90 <self_test+0x850>)
   8ead0:	220d      	movs	r2, #13
   8ead2:	701a      	strb	r2, [r3, #0]
										 break;
   8ead4:	e006      	b.n	8eae4 <self_test+0x6a4>
			
		                         }
		else 
		{
			status[CL_SELFTEST_RESULT_ACIDPUMP] = TEST_FAIL;
   8ead6:	4b70      	ldr	r3, [pc, #448]	; (8ec98 <self_test+0x858>)
   8ead8:	2200      	movs	r2, #0
   8eada:	715a      	strb	r2, [r3, #5]
			cl_selfteststate =  CL_SELFTEST_STATE_BICARBPUMP_STATUS;
   8eadc:	4b6c      	ldr	r3, [pc, #432]	; (8ec90 <self_test+0x850>)
   8eade:	220d      	movs	r2, #13
   8eae0:	701a      	strb	r2, [r3, #0]
			break;
   8eae2:	bf00      	nop
		default:
		break;
		
		}
		
		break;
   8eae4:	e300      	b.n	8f0e8 <self_test+0xca8>
		case CL_SELFTEST_STATE_BICARBPUMP_STATUS:
		  switch(cl_selftest_event_type)
   8eae6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eaea:	2b07      	cmp	r3, #7
   8eaec:	d000      	beq.n	8eaf0 <self_test+0x6b0>
				  cl_selfteststate =  CL_SELFTEST_STATE_APT_STATUS;
				  break;
			  }
			  break;
			  default:
			  break;
   8eaee:	e01b      	b.n	8eb28 <self_test+0x6e8>
		  switch(cl_selftest_event_type)
		  {
			  case EVENT_selftest_TICK_500MS:
			  
			
			  Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_F_B,&bf_b);
   8eaf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
   8eaf4:	4619      	mov	r1, r3
   8eaf6:	2026      	movs	r0, #38	; 0x26
   8eaf8:	4b68      	ldr	r3, [pc, #416]	; (8ec9c <self_test+0x85c>)
   8eafa:	4798      	blx	r3
			  if ((bf_b >= Expected_bicarb_test_value1) && (bf_b <= Expected_bicarb_test_value2))
   8eafc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   8eb00:	2b01      	cmp	r3, #1
   8eb02:	dd0a      	ble.n	8eb1a <self_test+0x6da>
   8eb04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   8eb08:	2b08      	cmp	r3, #8
   8eb0a:	dc06      	bgt.n	8eb1a <self_test+0x6da>
			  {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_PAAS;
   8eb0c:	4b62      	ldr	r3, [pc, #392]	; (8ec98 <self_test+0x858>)
   8eb0e:	2201      	movs	r2, #1
   8eb10:	719a      	strb	r2, [r3, #6]
				  cl_selfteststate = CL_SELFTEST_STATE_APT_STATUS;
   8eb12:	4b5f      	ldr	r3, [pc, #380]	; (8ec90 <self_test+0x850>)
   8eb14:	220e      	movs	r2, #14
   8eb16:	701a      	strb	r2, [r3, #0]
				  break;
   8eb18:	e006      	b.n	8eb28 <self_test+0x6e8>
				  
			  }
			  else
			  {
				  status[CL_SELFTEST_RESULT_BICARBPUMP] = TEST_FAIL;
   8eb1a:	4b5f      	ldr	r3, [pc, #380]	; (8ec98 <self_test+0x858>)
   8eb1c:	2200      	movs	r2, #0
   8eb1e:	719a      	strb	r2, [r3, #6]
				  cl_selfteststate =  CL_SELFTEST_STATE_APT_STATUS;
   8eb20:	4b5b      	ldr	r3, [pc, #364]	; (8ec90 <self_test+0x850>)
   8eb22:	220e      	movs	r2, #14
   8eb24:	701a      	strb	r2, [r3, #0]
				  break;
   8eb26:	bf00      	nop
			  break;
			  
		  }
		
		
		break;
   8eb28:	e2de      	b.n	8f0e8 <self_test+0xca8>
		
		
		
		
			case CL_SELFTEST_STATE_APT_STATUS:
			switch(cl_selftest_event_type)
   8eb2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eb2e:	2b08      	cmp	r3, #8
   8eb30:	d000      	beq.n	8eb34 <self_test+0x6f4>
								break;
							}
				}
				break;
							default:
							break;
   8eb32:	e03c      	b.n	8ebae <self_test+0x76e>
			case CL_SELFTEST_STATE_APT_STATUS:
			switch(cl_selftest_event_type)
			{
				
				case EVENT_selftest_TICK_SECOND:
				if (status[CL_SELFTEST_RESULT_APT_STATUS] == TEST_PAAS)
   8eb34:	4b58      	ldr	r3, [pc, #352]	; (8ec98 <self_test+0x858>)
   8eb36:	79db      	ldrb	r3, [r3, #7]
   8eb38:	2b01      	cmp	r3, #1
   8eb3a:	d103      	bne.n	8eb44 <self_test+0x704>
				{
					cl_selfteststate = CL_SELFTEST_STATE_VPT_STATUS;
   8eb3c:	4b54      	ldr	r3, [pc, #336]	; (8ec90 <self_test+0x850>)
   8eb3e:	220f      	movs	r2, #15
   8eb40:	701a      	strb	r2, [r3, #0]
					break;
   8eb42:	e034      	b.n	8ebae <self_test+0x76e>
				}
				else{
				
				test_time++;
   8eb44:	4b56      	ldr	r3, [pc, #344]	; (8eca0 <self_test+0x860>)
   8eb46:	f9b3 3000 	ldrsh.w	r3, [r3]
   8eb4a:	b29b      	uxth	r3, r3
   8eb4c:	3301      	adds	r3, #1
   8eb4e:	b29b      	uxth	r3, r3
   8eb50:	b21a      	sxth	r2, r3
   8eb52:	4b53      	ldr	r3, [pc, #332]	; (8eca0 <self_test+0x860>)
   8eb54:	801a      	strh	r2, [r3, #0]
				
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&apt_val);
   8eb56:	f107 031e 	add.w	r3, r7, #30
   8eb5a:	4619      	mov	r1, r3
   8eb5c:	200b      	movs	r0, #11
   8eb5e:	4b4f      	ldr	r3, [pc, #316]	; (8ec9c <self_test+0x85c>)
   8eb60:	4798      	blx	r3
				
						apt_val=apt_val/10;
   8eb62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
   8eb66:	4a4f      	ldr	r2, [pc, #316]	; (8eca4 <self_test+0x864>)
   8eb68:	fb82 1203 	smull	r1, r2, r2, r3
   8eb6c:	1092      	asrs	r2, r2, #2
   8eb6e:	17db      	asrs	r3, r3, #31
   8eb70:	1ad3      	subs	r3, r2, r3
   8eb72:	b21b      	sxth	r3, r3
   8eb74:	83fb      	strh	r3, [r7, #30]
						if((apt_val >= expected_lowerapt_value)&&(apt_val <= expected_higherapt_value))
   8eb76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
   8eb7a:	2b00      	cmp	r3, #0
   8eb7c:	db0d      	blt.n	8eb9a <self_test+0x75a>
   8eb7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
   8eb82:	2b46      	cmp	r3, #70	; 0x46
   8eb84:	dc09      	bgt.n	8eb9a <self_test+0x75a>
							{
								status[CL_SELFTEST_RESULT_APT_STATUS] = TEST_PAAS;
   8eb86:	4b44      	ldr	r3, [pc, #272]	; (8ec98 <self_test+0x858>)
   8eb88:	2201      	movs	r2, #1
   8eb8a:	71da      	strb	r2, [r3, #7]
								test_time = 0;
   8eb8c:	4b44      	ldr	r3, [pc, #272]	; (8eca0 <self_test+0x860>)
   8eb8e:	2200      	movs	r2, #0
   8eb90:	801a      	strh	r2, [r3, #0]
								cl_selfteststate =  CL_SELFTEST_STATE_VPT_STATUS;
   8eb92:	4b3f      	ldr	r3, [pc, #252]	; (8ec90 <self_test+0x850>)
   8eb94:	220f      	movs	r2, #15
   8eb96:	701a      	strb	r2, [r3, #0]
								break;
   8eb98:	e009      	b.n	8ebae <self_test+0x76e>
							}
							
							else
							{
								status[CL_SELFTEST_RESULT_APT_STATUS] = TEST_FAIL;
   8eb9a:	4b3f      	ldr	r3, [pc, #252]	; (8ec98 <self_test+0x858>)
   8eb9c:	2200      	movs	r2, #0
   8eb9e:	71da      	strb	r2, [r3, #7]
								test_time = 0;
   8eba0:	4b3f      	ldr	r3, [pc, #252]	; (8eca0 <self_test+0x860>)
   8eba2:	2200      	movs	r2, #0
   8eba4:	801a      	strh	r2, [r3, #0]
								cl_selfteststate =  CL_SELFTEST_STATE_VPT_STATUS;
   8eba6:	4b3a      	ldr	r3, [pc, #232]	; (8ec90 <self_test+0x850>)
   8eba8:	220f      	movs	r2, #15
   8ebaa:	701a      	strb	r2, [r3, #0]
								break;
   8ebac:	bf00      	nop
							break;
							
						
					
			}
			break;
   8ebae:	e29b      	b.n	8f0e8 <self_test+0xca8>
					case CL_SELFTEST_STATE_VPT_STATUS:
					switch(cl_selftest_event_type)
   8ebb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ebb4:	2b08      	cmp	r3, #8
   8ebb6:	d000      	beq.n	8ebba <self_test+0x77a>
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
									break;
								}
						}
						break;
								default:break;
   8ebb8:	e04b      	b.n	8ec52 <self_test+0x812>
					case CL_SELFTEST_STATE_VPT_STATUS:
					switch(cl_selftest_event_type)
					{
						
						case EVENT_selftest_TICK_SECOND:
						if (status[CL_SELFTEST_RESULT_VPT_STATUS] == TEST_PAAS)
   8ebba:	4b37      	ldr	r3, [pc, #220]	; (8ec98 <self_test+0x858>)
   8ebbc:	7a1b      	ldrb	r3, [r3, #8]
   8ebbe:	2b01      	cmp	r3, #1
   8ebc0:	d103      	bne.n	8ebca <self_test+0x78a>
						{
							cl_selfteststate = CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
   8ebc2:	4b33      	ldr	r3, [pc, #204]	; (8ec90 <self_test+0x850>)
   8ebc4:	2210      	movs	r2, #16
   8ebc6:	701a      	strb	r2, [r3, #0]
							break;
   8ebc8:	e043      	b.n	8ec52 <self_test+0x812>
						}
						else{
						test_time++;
   8ebca:	4b35      	ldr	r3, [pc, #212]	; (8eca0 <self_test+0x860>)
   8ebcc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ebd0:	b29b      	uxth	r3, r3
   8ebd2:	3301      	adds	r3, #1
   8ebd4:	b29b      	uxth	r3, r3
   8ebd6:	b21a      	sxth	r2, r3
   8ebd8:	4b31      	ldr	r3, [pc, #196]	; (8eca0 <self_test+0x860>)
   8ebda:	801a      	strh	r2, [r3, #0]
						
					//	uint16_t vpt_val = 0;
						
						Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&vpt_val);
   8ebdc:	f107 031c 	add.w	r3, r7, #28
   8ebe0:	4619      	mov	r1, r3
   8ebe2:	200c      	movs	r0, #12
   8ebe4:	4b2d      	ldr	r3, [pc, #180]	; (8ec9c <self_test+0x85c>)
   8ebe6:	4798      	blx	r3
						vpt_val=vpt_val/10;
   8ebe8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
   8ebec:	4a2d      	ldr	r2, [pc, #180]	; (8eca4 <self_test+0x864>)
   8ebee:	fb82 1203 	smull	r1, r2, r2, r3
   8ebf2:	1092      	asrs	r2, r2, #2
   8ebf4:	17db      	asrs	r3, r3, #31
   8ebf6:	1ad3      	subs	r3, r2, r3
   8ebf8:	b21b      	sxth	r3, r3
   8ebfa:	83bb      	strh	r3, [r7, #28]
							vpt_val=((vpt_val/10)-1000);
   8ebfc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
   8ec00:	4a28      	ldr	r2, [pc, #160]	; (8eca4 <self_test+0x864>)
   8ec02:	fb82 1203 	smull	r1, r2, r2, r3
   8ec06:	1092      	asrs	r2, r2, #2
   8ec08:	17db      	asrs	r3, r3, #31
   8ec0a:	1ad3      	subs	r3, r2, r3
   8ec0c:	b21b      	sxth	r3, r3
   8ec0e:	b29b      	uxth	r3, r3
   8ec10:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8ec14:	b29b      	uxth	r3, r3
   8ec16:	b21b      	sxth	r3, r3
   8ec18:	83bb      	strh	r3, [r7, #28]
								if((vpt_val >= expected_lowerapt_value)&&(vpt_val <= expected_higherapt_value) )
   8ec1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
   8ec1e:	2b00      	cmp	r3, #0
   8ec20:	db0d      	blt.n	8ec3e <self_test+0x7fe>
   8ec22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
   8ec26:	2b46      	cmp	r3, #70	; 0x46
   8ec28:	dc09      	bgt.n	8ec3e <self_test+0x7fe>
								{
									status[CL_SELFTEST_RESULT_VPT_STATUS] = TEST_PAAS;
   8ec2a:	4b1b      	ldr	r3, [pc, #108]	; (8ec98 <self_test+0x858>)
   8ec2c:	2201      	movs	r2, #1
   8ec2e:	721a      	strb	r2, [r3, #8]
									test_time = 0;
   8ec30:	4b1b      	ldr	r3, [pc, #108]	; (8eca0 <self_test+0x860>)
   8ec32:	2200      	movs	r2, #0
   8ec34:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
   8ec36:	4b16      	ldr	r3, [pc, #88]	; (8ec90 <self_test+0x850>)
   8ec38:	2210      	movs	r2, #16
   8ec3a:	701a      	strb	r2, [r3, #0]
									break;
   8ec3c:	e009      	b.n	8ec52 <self_test+0x812>
								}
								
								else
								{
									status[CL_SELFTEST_RESULT_VPT_STATUS] = TEST_FAIL ;
   8ec3e:	4b16      	ldr	r3, [pc, #88]	; (8ec98 <self_test+0x858>)
   8ec40:	2200      	movs	r2, #0
   8ec42:	721a      	strb	r2, [r3, #8]
									test_time = 0;
   8ec44:	4b16      	ldr	r3, [pc, #88]	; (8eca0 <self_test+0x860>)
   8ec46:	2200      	movs	r2, #0
   8ec48:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_TEMPSTATUS;
   8ec4a:	4b11      	ldr	r3, [pc, #68]	; (8ec90 <self_test+0x850>)
   8ec4c:	2210      	movs	r2, #16
   8ec4e:	701a      	strb	r2, [r3, #0]
									break;
   8ec50:	bf00      	nop
								}
						}
						break;
								default:break;
							}
					break;
   8ec52:	e249      	b.n	8f0e8 <self_test+0xca8>
				
				case CL_SELFTEST_STATE_SENSOR_TEMPSTATUS:
				switch(cl_selftest_event_type)
   8ec54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8ec58:	2b07      	cmp	r3, #7
   8ec5a:	d000      	beq.n	8ec5e <self_test+0x81e>
								}
							}
					}
					break;
					default:
					break;
   8ec5c:	e0a9      	b.n	8edb2 <self_test+0x972>
				case CL_SELFTEST_STATE_SENSOR_TEMPSTATUS:
				switch(cl_selftest_event_type)
				{
					
					case  EVENT_selftest_TICK_500MS:
					if ((status[CL_SELFTEST_RESULT_TEMPSTATUS1] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_TEMPSTATUS2] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_TEMPSTATUS3] == TEST_PAAS))
   8ec5e:	4b0e      	ldr	r3, [pc, #56]	; (8ec98 <self_test+0x858>)
   8ec60:	7a5b      	ldrb	r3, [r3, #9]
   8ec62:	2b01      	cmp	r3, #1
   8ec64:	d120      	bne.n	8eca8 <self_test+0x868>
   8ec66:	4b0c      	ldr	r3, [pc, #48]	; (8ec98 <self_test+0x858>)
   8ec68:	7a9b      	ldrb	r3, [r3, #10]
   8ec6a:	2b01      	cmp	r3, #1
   8ec6c:	d11c      	bne.n	8eca8 <self_test+0x868>
   8ec6e:	4b0a      	ldr	r3, [pc, #40]	; (8ec98 <self_test+0x858>)
   8ec70:	7adb      	ldrb	r3, [r3, #11]
   8ec72:	2b01      	cmp	r3, #1
   8ec74:	d118      	bne.n	8eca8 <self_test+0x868>
					{
						cl_selfteststate = CL_SELFTEST_STATE_SENSOR_PSTATUS;   //	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&TEMP_DATA.Twobyte);
   8ec76:	4b06      	ldr	r3, [pc, #24]	; (8ec90 <self_test+0x850>)
   8ec78:	2211      	movs	r2, #17
   8ec7a:	701a      	strb	r2, [r3, #0]
						break;                                                      //Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&TEMP_DATA.Twobyte)
   8ec7c:	e099      	b.n	8edb2 <self_test+0x972>
   8ec7e:	bf00      	nop
   8ec80:	200718ce 	.word	0x200718ce
   8ec84:	200718d0 	.word	0x200718d0
   8ec88:	0009b299 	.word	0x0009b299
   8ec8c:	200718cc 	.word	0x200718cc
   8ec90:	200718ca 	.word	0x200718ca
   8ec94:	0009b19d 	.word	0x0009b19d
   8ec98:	200724f4 	.word	0x200724f4
   8ec9c:	0008fa01 	.word	0x0008fa01
   8eca0:	200718d4 	.word	0x200718d4
   8eca4:	66666667 	.word	0x66666667
					else
					{
						
							
						
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Ts1);
   8eca8:	f107 031a 	add.w	r3, r7, #26
   8ecac:	4619      	mov	r1, r3
   8ecae:	2012      	movs	r0, #18
   8ecb0:	4bab      	ldr	r3, [pc, #684]	; (8ef60 <self_test+0xb20>)
   8ecb2:	4798      	blx	r3
						Ts1=Ts1/100;
   8ecb4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   8ecb8:	4aaa      	ldr	r2, [pc, #680]	; (8ef64 <self_test+0xb24>)
   8ecba:	fb82 1203 	smull	r1, r2, r2, r3
   8ecbe:	1152      	asrs	r2, r2, #5
   8ecc0:	17db      	asrs	r3, r3, #31
   8ecc2:	1ad3      	subs	r3, r2, r3
   8ecc4:	b21b      	sxth	r3, r3
   8ecc6:	837b      	strh	r3, [r7, #26]
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Ts2);
   8ecc8:	f107 0318 	add.w	r3, r7, #24
   8eccc:	4619      	mov	r1, r3
   8ecce:	2013      	movs	r0, #19
   8ecd0:	4ba3      	ldr	r3, [pc, #652]	; (8ef60 <self_test+0xb20>)
   8ecd2:	4798      	blx	r3
						Ts2=Ts2/100;
   8ecd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   8ecd8:	4aa2      	ldr	r2, [pc, #648]	; (8ef64 <self_test+0xb24>)
   8ecda:	fb82 1203 	smull	r1, r2, r2, r3
   8ecde:	1152      	asrs	r2, r2, #5
   8ece0:	17db      	asrs	r3, r3, #31
   8ece2:	1ad3      	subs	r3, r2, r3
   8ece4:	b21b      	sxth	r3, r3
   8ece6:	833b      	strh	r3, [r7, #24]
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Ts3);
   8ece8:	f107 0316 	add.w	r3, r7, #22
   8ecec:	4619      	mov	r1, r3
   8ecee:	2014      	movs	r0, #20
   8ecf0:	4b9b      	ldr	r3, [pc, #620]	; (8ef60 <self_test+0xb20>)
   8ecf2:	4798      	blx	r3
						Ts3=Ts3/100;
   8ecf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   8ecf8:	4a9a      	ldr	r2, [pc, #616]	; (8ef64 <self_test+0xb24>)
   8ecfa:	fb82 1203 	smull	r1, r2, r2, r3
   8ecfe:	1152      	asrs	r2, r2, #5
   8ed00:	17db      	asrs	r3, r3, #31
   8ed02:	1ad3      	subs	r3, r2, r3
   8ed04:	b21b      	sxth	r3, r3
   8ed06:	82fb      	strh	r3, [r7, #22]
						
					test_time++;
   8ed08:	4b97      	ldr	r3, [pc, #604]	; (8ef68 <self_test+0xb28>)
   8ed0a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ed0e:	b29b      	uxth	r3, r3
   8ed10:	3301      	adds	r3, #1
   8ed12:	b29b      	uxth	r3, r3
   8ed14:	b21a      	sxth	r2, r3
   8ed16:	4b94      	ldr	r3, [pc, #592]	; (8ef68 <self_test+0xb28>)
   8ed18:	801a      	strh	r2, [r3, #0]
						if(test_time == 1)
   8ed1a:	4b93      	ldr	r3, [pc, #588]	; (8ef68 <self_test+0xb28>)
   8ed1c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ed20:	2b01      	cmp	r3, #1
   8ed22:	d10f      	bne.n	8ed44 <self_test+0x904>
						{
							if((Ts1 >= expected_lowertemp1_value)&&(Ts1 <= expected_highertemp1_value) )
   8ed24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   8ed28:	2b13      	cmp	r3, #19
   8ed2a:	dd07      	ble.n	8ed3c <self_test+0x8fc>
   8ed2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   8ed30:	2b1c      	cmp	r3, #28
   8ed32:	dc03      	bgt.n	8ed3c <self_test+0x8fc>
							
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS1] = TEST_PAAS;
   8ed34:	4b8d      	ldr	r3, [pc, #564]	; (8ef6c <self_test+0xb2c>)
   8ed36:	2201      	movs	r2, #1
   8ed38:	725a      	strb	r2, [r3, #9]
								break;
   8ed3a:	e03a      	b.n	8edb2 <self_test+0x972>
							}
							
							
							else
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS1] = TEST_FAIL;
   8ed3c:	4b8b      	ldr	r3, [pc, #556]	; (8ef6c <self_test+0xb2c>)
   8ed3e:	2200      	movs	r2, #0
   8ed40:	725a      	strb	r2, [r3, #9]
								break;
   8ed42:	e036      	b.n	8edb2 <self_test+0x972>
							}
						}
						
						if((test_time == 2))
   8ed44:	4b88      	ldr	r3, [pc, #544]	; (8ef68 <self_test+0xb28>)
   8ed46:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ed4a:	2b02      	cmp	r3, #2
   8ed4c:	d10f      	bne.n	8ed6e <self_test+0x92e>
						{
							if((Ts2 >= expected_lowertemp2_value)&&(Ts2 <= expected_highertemp2_value) )
   8ed4e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   8ed52:	2b13      	cmp	r3, #19
   8ed54:	dd07      	ble.n	8ed66 <self_test+0x926>
   8ed56:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   8ed5a:	2b1c      	cmp	r3, #28
   8ed5c:	dc03      	bgt.n	8ed66 <self_test+0x926>
							
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS2] = TEST_PAAS;
   8ed5e:	4b83      	ldr	r3, [pc, #524]	; (8ef6c <self_test+0xb2c>)
   8ed60:	2201      	movs	r2, #1
   8ed62:	729a      	strb	r2, [r3, #10]
								break;
   8ed64:	e025      	b.n	8edb2 <self_test+0x972>
							}
							
							
							else
							{
								status[CL_SELFTEST_RESULT_TEMPSTATUS2] = TEST_FAIL;
   8ed66:	4b81      	ldr	r3, [pc, #516]	; (8ef6c <self_test+0xb2c>)
   8ed68:	2200      	movs	r2, #0
   8ed6a:	729a      	strb	r2, [r3, #10]
								break;
   8ed6c:	e021      	b.n	8edb2 <self_test+0x972>
							}
						}
						
							
							if((test_time >= 3))
   8ed6e:	4b7e      	ldr	r3, [pc, #504]	; (8ef68 <self_test+0xb28>)
   8ed70:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ed74:	2b02      	cmp	r3, #2
   8ed76:	dd1b      	ble.n	8edb0 <self_test+0x970>
							{
								if((Ts3 >= expected_lowertemp3_value)&&(Ts3 <= expected_highertemp3_value) )
   8ed78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   8ed7c:	2b13      	cmp	r3, #19
   8ed7e:	dd0d      	ble.n	8ed9c <self_test+0x95c>
   8ed80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   8ed84:	2b1c      	cmp	r3, #28
   8ed86:	dc09      	bgt.n	8ed9c <self_test+0x95c>
								
								{
									status[CL_SELFTEST_RESULT_TEMPSTATUS3] = TEST_PAAS;
   8ed88:	4b78      	ldr	r3, [pc, #480]	; (8ef6c <self_test+0xb2c>)
   8ed8a:	2201      	movs	r2, #1
   8ed8c:	72da      	strb	r2, [r3, #11]
									cl_selfteststate = CL_SELFTEST_STATE_SENSOR_PSTATUS;
   8ed8e:	4b78      	ldr	r3, [pc, #480]	; (8ef70 <self_test+0xb30>)
   8ed90:	2211      	movs	r2, #17
   8ed92:	701a      	strb	r2, [r3, #0]
									test_time = 0;
   8ed94:	4b74      	ldr	r3, [pc, #464]	; (8ef68 <self_test+0xb28>)
   8ed96:	2200      	movs	r2, #0
   8ed98:	801a      	strh	r2, [r3, #0]
									break;
   8ed9a:	e00a      	b.n	8edb2 <self_test+0x972>
								}
								
								
								else
								{
									status[CL_SELFTEST_RESULT_TEMPSTATUS3] = TEST_FAIL;
   8ed9c:	4b73      	ldr	r3, [pc, #460]	; (8ef6c <self_test+0xb2c>)
   8ed9e:	2200      	movs	r2, #0
   8eda0:	72da      	strb	r2, [r3, #11]
									cl_selfteststate = CL_SELFTEST_STATE_SENSOR_PSTATUS;
   8eda2:	4b73      	ldr	r3, [pc, #460]	; (8ef70 <self_test+0xb30>)
   8eda4:	2211      	movs	r2, #17
   8eda6:	701a      	strb	r2, [r3, #0]
									test_time = 0;
   8eda8:	4b6f      	ldr	r3, [pc, #444]	; (8ef68 <self_test+0xb28>)
   8edaa:	2200      	movs	r2, #0
   8edac:	801a      	strh	r2, [r3, #0]
									break;
   8edae:	e000      	b.n	8edb2 <self_test+0x972>
								}
							}
					}
					break;
   8edb0:	bf00      	nop
					default:
					break;
		}
		
				break;
   8edb2:	e199      	b.n	8f0e8 <self_test+0xca8>
				
				case CL_SELFTEST_STATE_SENSOR_PSTATUS:
				switch(cl_selftest_event_type)
   8edb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8edb8:	2b07      	cmp	r3, #7
   8edba:	d000      	beq.n	8edbe <self_test+0x97e>
									break;
								}
							}
				}
				break;
						default:break;
   8edbc:	e08e      	b.n	8eedc <self_test+0xa9c>
				
				case CL_SELFTEST_STATE_SENSOR_PSTATUS:
				switch(cl_selftest_event_type)
				{
					case  EVENT_selftest_TICK_500MS:
					if ((status[CL_SELFTEST_RESULT_PSTATUS1] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_PSTATUS2] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_PSTATUS2] == TEST_PAAS))
   8edbe:	4b6b      	ldr	r3, [pc, #428]	; (8ef6c <self_test+0xb2c>)
   8edc0:	7b1b      	ldrb	r3, [r3, #12]
   8edc2:	2b01      	cmp	r3, #1
   8edc4:	d10b      	bne.n	8edde <self_test+0x99e>
   8edc6:	4b69      	ldr	r3, [pc, #420]	; (8ef6c <self_test+0xb2c>)
   8edc8:	7b5b      	ldrb	r3, [r3, #13]
   8edca:	2b01      	cmp	r3, #1
   8edcc:	d107      	bne.n	8edde <self_test+0x99e>
   8edce:	4b67      	ldr	r3, [pc, #412]	; (8ef6c <self_test+0xb2c>)
   8edd0:	7b5b      	ldrb	r3, [r3, #13]
   8edd2:	2b01      	cmp	r3, #1
   8edd4:	d103      	bne.n	8edde <self_test+0x99e>
					{
						cl_selfteststate = CL_SELFTEST_STATE_SENSOR_CONDSTATUS;
   8edd6:	4b66      	ldr	r3, [pc, #408]	; (8ef70 <self_test+0xb30>)
   8edd8:	2212      	movs	r2, #18
   8edda:	701a      	strb	r2, [r3, #0]
						break;
   8eddc:	e07e      	b.n	8eedc <self_test+0xa9c>
					}
				else	
				{
					
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps_1);
   8edde:	f107 0314 	add.w	r3, r7, #20
   8ede2:	4619      	mov	r1, r3
   8ede4:	200e      	movs	r0, #14
   8ede6:	4b5e      	ldr	r3, [pc, #376]	; (8ef60 <self_test+0xb20>)
   8ede8:	4798      	blx	r3
		Ps_1=(Ps_1-1000);
   8edea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   8edee:	b29b      	uxth	r3, r3
   8edf0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8edf4:	b29b      	uxth	r3, r3
   8edf6:	b21b      	sxth	r3, r3
   8edf8:	82bb      	strh	r3, [r7, #20]
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps_2);
   8edfa:	f107 0312 	add.w	r3, r7, #18
   8edfe:	4619      	mov	r1, r3
   8ee00:	200f      	movs	r0, #15
   8ee02:	4b57      	ldr	r3, [pc, #348]	; (8ef60 <self_test+0xb20>)
   8ee04:	4798      	blx	r3
			Ps_2=(Ps_2-1000);
   8ee06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   8ee0a:	b29b      	uxth	r3, r3
   8ee0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8ee10:	b29b      	uxth	r3, r3
   8ee12:	b21b      	sxth	r3, r3
   8ee14:	827b      	strh	r3, [r7, #18]
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps_3);
   8ee16:	f107 0310 	add.w	r3, r7, #16
   8ee1a:	4619      	mov	r1, r3
   8ee1c:	2010      	movs	r0, #16
   8ee1e:	4b50      	ldr	r3, [pc, #320]	; (8ef60 <self_test+0xb20>)
   8ee20:	4798      	blx	r3
			Ps_3=(Ps_3-1000);
   8ee22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   8ee26:	b29b      	uxth	r3, r3
   8ee28:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   8ee2c:	b29b      	uxth	r3, r3
   8ee2e:	b21b      	sxth	r3, r3
   8ee30:	823b      	strh	r3, [r7, #16]
			test_time++;
   8ee32:	4b4d      	ldr	r3, [pc, #308]	; (8ef68 <self_test+0xb28>)
   8ee34:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ee38:	b29b      	uxth	r3, r3
   8ee3a:	3301      	adds	r3, #1
   8ee3c:	b29b      	uxth	r3, r3
   8ee3e:	b21a      	sxth	r2, r3
   8ee40:	4b49      	ldr	r3, [pc, #292]	; (8ef68 <self_test+0xb28>)
   8ee42:	801a      	strh	r2, [r3, #0]
			if(test_time == 1)
   8ee44:	4b48      	ldr	r3, [pc, #288]	; (8ef68 <self_test+0xb28>)
   8ee46:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ee4a:	2b01      	cmp	r3, #1
   8ee4c:	d10f      	bne.n	8ee6e <self_test+0xa2e>
			{
				if((Ps_1 >= expected_lowerPS1_value)&&(Ps_1<=expected_higherPS1_value) )
   8ee4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   8ee52:	2b00      	cmp	r3, #0
   8ee54:	db07      	blt.n	8ee66 <self_test+0xa26>
   8ee56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   8ee5a:	2bc8      	cmp	r3, #200	; 0xc8
   8ee5c:	dc03      	bgt.n	8ee66 <self_test+0xa26>
			
					{
						status[CL_SELFTEST_RESULT_PSTATUS1] = TEST_PAAS;
   8ee5e:	4b43      	ldr	r3, [pc, #268]	; (8ef6c <self_test+0xb2c>)
   8ee60:	2201      	movs	r2, #1
   8ee62:	731a      	strb	r2, [r3, #12]
						break;
   8ee64:	e03a      	b.n	8eedc <self_test+0xa9c>
					}
					
					
					else
					{
						status[CL_SELFTEST_RESULT_PSTATUS1] = TEST_FAIL;
   8ee66:	4b41      	ldr	r3, [pc, #260]	; (8ef6c <self_test+0xb2c>)
   8ee68:	2200      	movs	r2, #0
   8ee6a:	731a      	strb	r2, [r3, #12]
						break;
   8ee6c:	e036      	b.n	8eedc <self_test+0xa9c>
					}
			}
					
					if((test_time == 2) ) 
   8ee6e:	4b3e      	ldr	r3, [pc, #248]	; (8ef68 <self_test+0xb28>)
   8ee70:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ee74:	2b02      	cmp	r3, #2
   8ee76:	d10f      	bne.n	8ee98 <self_test+0xa58>
					{
						if((Ps_2 >= expected_lowerPS2_value)&&(Ps_2 <=expected_higherPS2_value) )
   8ee78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   8ee7c:	2b00      	cmp	r3, #0
   8ee7e:	db07      	blt.n	8ee90 <self_test+0xa50>
   8ee80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
   8ee84:	2bc8      	cmp	r3, #200	; 0xc8
   8ee86:	dc03      	bgt.n	8ee90 <self_test+0xa50>
						
						{
							status[CL_SELFTEST_RESULT_PSTATUS2] = TEST_PAAS;
   8ee88:	4b38      	ldr	r3, [pc, #224]	; (8ef6c <self_test+0xb2c>)
   8ee8a:	2201      	movs	r2, #1
   8ee8c:	735a      	strb	r2, [r3, #13]
							break;
   8ee8e:	e025      	b.n	8eedc <self_test+0xa9c>
						}
						
						
						else
						{
							status[CL_SELFTEST_RESULT_PSTATUS2] = TEST_FAIL;
   8ee90:	4b36      	ldr	r3, [pc, #216]	; (8ef6c <self_test+0xb2c>)
   8ee92:	2200      	movs	r2, #0
   8ee94:	735a      	strb	r2, [r3, #13]
							break;
   8ee96:	e021      	b.n	8eedc <self_test+0xa9c>
						}
					}
						if((test_time==3) )
   8ee98:	4b33      	ldr	r3, [pc, #204]	; (8ef68 <self_test+0xb28>)
   8ee9a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ee9e:	2b03      	cmp	r3, #3
   8eea0:	d11b      	bne.n	8eeda <self_test+0xa9a>
							{
								if((Ps_3 >= expected_lowerPS3_value)&& (Ps_3<=expected_higherPS3_value))
   8eea2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   8eea6:	2b00      	cmp	r3, #0
   8eea8:	db0d      	blt.n	8eec6 <self_test+0xa86>
   8eeaa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   8eeae:	2bc8      	cmp	r3, #200	; 0xc8
   8eeb0:	dc09      	bgt.n	8eec6 <self_test+0xa86>
								
								{
									status[CL_SELFTEST_RESULT_PSTATUS3] = TEST_PAAS;
   8eeb2:	4b2e      	ldr	r3, [pc, #184]	; (8ef6c <self_test+0xb2c>)
   8eeb4:	2201      	movs	r2, #1
   8eeb6:	739a      	strb	r2, [r3, #14]
									test_time=0;
   8eeb8:	4b2b      	ldr	r3, [pc, #172]	; (8ef68 <self_test+0xb28>)
   8eeba:	2200      	movs	r2, #0
   8eebc:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_CONDSTATUS;
   8eebe:	4b2c      	ldr	r3, [pc, #176]	; (8ef70 <self_test+0xb30>)
   8eec0:	2212      	movs	r2, #18
   8eec2:	701a      	strb	r2, [r3, #0]
									break;
   8eec4:	e00a      	b.n	8eedc <self_test+0xa9c>
								}
								
								
								else
								{
									status[CL_SELFTEST_RESULT_PSTATUS3] = TEST_FAIL;
   8eec6:	4b29      	ldr	r3, [pc, #164]	; (8ef6c <self_test+0xb2c>)
   8eec8:	2200      	movs	r2, #0
   8eeca:	739a      	strb	r2, [r3, #14]
									test_time=0;
   8eecc:	4b26      	ldr	r3, [pc, #152]	; (8ef68 <self_test+0xb28>)
   8eece:	2200      	movs	r2, #0
   8eed0:	801a      	strh	r2, [r3, #0]
									cl_selfteststate =  CL_SELFTEST_STATE_SENSOR_CONDSTATUS;
   8eed2:	4b27      	ldr	r3, [pc, #156]	; (8ef70 <self_test+0xb30>)
   8eed4:	2212      	movs	r2, #18
   8eed6:	701a      	strb	r2, [r3, #0]
									break;
   8eed8:	e000      	b.n	8eedc <self_test+0xa9c>
								}
							}
				}
				break;
   8eeda:	bf00      	nop
						default:break;
					
				}
				break;
   8eedc:	e104      	b.n	8f0e8 <self_test+0xca8>
// 						
// 					}
// 					break;
					
							case CL_SELFTEST_STATE_SENSOR_CONDSTATUS:
							switch(cl_selftest_event_type)
   8eede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8eee2:	2b07      	cmp	r3, #7
   8eee4:	d000      	beq.n	8eee8 <self_test+0xaa8>
										}
									}
								}
								break;
								default:
								break;
   8eee6:	e072      	b.n	8efce <self_test+0xb8e>
							case CL_SELFTEST_STATE_SENSOR_CONDSTATUS:
							switch(cl_selftest_event_type)
							{
								
								case  EVENT_selftest_TICK_500MS:
								if ((status[CL_SELFTEST_RESULT_CONDSTATUS1] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_CONDSTATUS2] == TEST_PAAS) && (status[CL_SELFTEST_RESULT_CONDSTATUS3] == TEST_PAAS))
   8eee8:	4b20      	ldr	r3, [pc, #128]	; (8ef6c <self_test+0xb2c>)
   8eeea:	7bdb      	ldrb	r3, [r3, #15]
   8eeec:	2b01      	cmp	r3, #1
   8eeee:	d10b      	bne.n	8ef08 <self_test+0xac8>
   8eef0:	4b1e      	ldr	r3, [pc, #120]	; (8ef6c <self_test+0xb2c>)
   8eef2:	7c1b      	ldrb	r3, [r3, #16]
   8eef4:	2b01      	cmp	r3, #1
   8eef6:	d107      	bne.n	8ef08 <self_test+0xac8>
   8eef8:	4b1c      	ldr	r3, [pc, #112]	; (8ef6c <self_test+0xb2c>)
   8eefa:	7c5b      	ldrb	r3, [r3, #17]
   8eefc:	2b01      	cmp	r3, #1
   8eefe:	d103      	bne.n	8ef08 <self_test+0xac8>
								{
									cl_selfteststate = CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP;   //	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&TEMP_DATA.Twobyte);
   8ef00:	4b1b      	ldr	r3, [pc, #108]	; (8ef70 <self_test+0xb30>)
   8ef02:	2213      	movs	r2, #19
   8ef04:	701a      	strb	r2, [r3, #0]
									break;                                                      //Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&TEMP_DATA.Twobyte)
   8ef06:	e062      	b.n	8efce <self_test+0xb8e>
								}
								else
								{
									
									Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND, &cs1);
   8ef08:	f107 030e 	add.w	r3, r7, #14
   8ef0c:	4619      	mov	r1, r3
   8ef0e:	2022      	movs	r0, #34	; 0x22
   8ef10:	4b13      	ldr	r3, [pc, #76]	; (8ef60 <self_test+0xb20>)
   8ef12:	4798      	blx	r3
									
									Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND, &cs2);
   8ef14:	f107 030c 	add.w	r3, r7, #12
   8ef18:	4619      	mov	r1, r3
   8ef1a:	2023      	movs	r0, #35	; 0x23
   8ef1c:	4b10      	ldr	r3, [pc, #64]	; (8ef60 <self_test+0xb20>)
   8ef1e:	4798      	blx	r3
									
									Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS, &cs3);
   8ef20:	f107 030a 	add.w	r3, r7, #10
   8ef24:	4619      	mov	r1, r3
   8ef26:	2007      	movs	r0, #7
   8ef28:	4b0d      	ldr	r3, [pc, #52]	; (8ef60 <self_test+0xb20>)
   8ef2a:	4798      	blx	r3
									
									
									test_time++;
   8ef2c:	4b0e      	ldr	r3, [pc, #56]	; (8ef68 <self_test+0xb28>)
   8ef2e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ef32:	b29b      	uxth	r3, r3
   8ef34:	3301      	adds	r3, #1
   8ef36:	b29b      	uxth	r3, r3
   8ef38:	b21a      	sxth	r2, r3
   8ef3a:	4b0b      	ldr	r3, [pc, #44]	; (8ef68 <self_test+0xb28>)
   8ef3c:	801a      	strh	r2, [r3, #0]
									if(test_time == 1)
   8ef3e:	4b0a      	ldr	r3, [pc, #40]	; (8ef68 <self_test+0xb28>)
   8ef40:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ef44:	2b01      	cmp	r3, #1
   8ef46:	d115      	bne.n	8ef74 <self_test+0xb34>
									{
										if((cs1 >= expected_lowercond1_value)&&(cs1 <= expected_highercond1_value) )
   8ef48:	89fb      	ldrh	r3, [r7, #14]
   8ef4a:	2b05      	cmp	r3, #5
   8ef4c:	d803      	bhi.n	8ef56 <self_test+0xb16>
										
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS1] = TEST_PAAS;
   8ef4e:	4b07      	ldr	r3, [pc, #28]	; (8ef6c <self_test+0xb2c>)
   8ef50:	2201      	movs	r2, #1
   8ef52:	73da      	strb	r2, [r3, #15]
											break;
   8ef54:	e03b      	b.n	8efce <self_test+0xb8e>
										}
										
										
										else
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS1] = TEST_FAIL;
   8ef56:	4b05      	ldr	r3, [pc, #20]	; (8ef6c <self_test+0xb2c>)
   8ef58:	2200      	movs	r2, #0
   8ef5a:	73da      	strb	r2, [r3, #15]
											break;
   8ef5c:	e037      	b.n	8efce <self_test+0xb8e>
   8ef5e:	bf00      	nop
   8ef60:	0008fa01 	.word	0x0008fa01
   8ef64:	51eb851f 	.word	0x51eb851f
   8ef68:	200718d4 	.word	0x200718d4
   8ef6c:	200724f4 	.word	0x200724f4
   8ef70:	200718ca 	.word	0x200718ca
										}
									}
									
									if((test_time == 2))
   8ef74:	4b5f      	ldr	r3, [pc, #380]	; (8f0f4 <self_test+0xcb4>)
   8ef76:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ef7a:	2b02      	cmp	r3, #2
   8ef7c:	d10a      	bne.n	8ef94 <self_test+0xb54>
									{
										if((cs2 >= expected_lowercond2_value)&&(cs2 <= expected_highercond2_value) )
   8ef7e:	89bb      	ldrh	r3, [r7, #12]
   8ef80:	2b05      	cmp	r3, #5
   8ef82:	d803      	bhi.n	8ef8c <self_test+0xb4c>
										
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS2] = TEST_PAAS;
   8ef84:	4b5c      	ldr	r3, [pc, #368]	; (8f0f8 <self_test+0xcb8>)
   8ef86:	2201      	movs	r2, #1
   8ef88:	741a      	strb	r2, [r3, #16]
											break;
   8ef8a:	e020      	b.n	8efce <self_test+0xb8e>
										}
										
										
										else
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS2] = TEST_FAIL;
   8ef8c:	4b5a      	ldr	r3, [pc, #360]	; (8f0f8 <self_test+0xcb8>)
   8ef8e:	2200      	movs	r2, #0
   8ef90:	741a      	strb	r2, [r3, #16]
											break;
   8ef92:	e01c      	b.n	8efce <self_test+0xb8e>
										}
									}
									
									
									if((test_time >= 3))
   8ef94:	4b57      	ldr	r3, [pc, #348]	; (8f0f4 <self_test+0xcb4>)
   8ef96:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ef9a:	2b02      	cmp	r3, #2
   8ef9c:	dd16      	ble.n	8efcc <self_test+0xb8c>
									{
										if((cs3 >= expected_lowercond3_value)&&(cs3 <= expected_highercond3_value) )
   8ef9e:	897b      	ldrh	r3, [r7, #10]
   8efa0:	2b05      	cmp	r3, #5
   8efa2:	d809      	bhi.n	8efb8 <self_test+0xb78>
										
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS3] = TEST_PAAS;
   8efa4:	4b54      	ldr	r3, [pc, #336]	; (8f0f8 <self_test+0xcb8>)
   8efa6:	2201      	movs	r2, #1
   8efa8:	745a      	strb	r2, [r3, #17]
											cl_selfteststate = CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP;
   8efaa:	4b54      	ldr	r3, [pc, #336]	; (8f0fc <self_test+0xcbc>)
   8efac:	2213      	movs	r2, #19
   8efae:	701a      	strb	r2, [r3, #0]
											test_time = 0;
   8efb0:	4b50      	ldr	r3, [pc, #320]	; (8f0f4 <self_test+0xcb4>)
   8efb2:	2200      	movs	r2, #0
   8efb4:	801a      	strh	r2, [r3, #0]
											break;
   8efb6:	e00a      	b.n	8efce <self_test+0xb8e>
										}
										
										
										else
										{
											status[CL_SELFTEST_RESULT_CONDSTATUS3] = TEST_FAIL;
   8efb8:	4b4f      	ldr	r3, [pc, #316]	; (8f0f8 <self_test+0xcb8>)
   8efba:	2200      	movs	r2, #0
   8efbc:	745a      	strb	r2, [r3, #17]
											cl_selfteststate = CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP;
   8efbe:	4b4f      	ldr	r3, [pc, #316]	; (8f0fc <self_test+0xcbc>)
   8efc0:	2213      	movs	r2, #19
   8efc2:	701a      	strb	r2, [r3, #0]
											test_time = 0;
   8efc4:	4b4b      	ldr	r3, [pc, #300]	; (8f0f4 <self_test+0xcb4>)
   8efc6:	2200      	movs	r2, #0
   8efc8:	801a      	strh	r2, [r3, #0]
											break;
   8efca:	e000      	b.n	8efce <self_test+0xb8e>
										}
									}
								}
								break;
   8efcc:	bf00      	nop
								default:
								break;
							}
							
							break;
   8efce:	e08b      	b.n	8f0e8 <self_test+0xca8>
							
							case CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP:
							switch(cl_selftest_event_type)
   8efd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8efd4:	2b05      	cmp	r3, #5
   8efd6:	d000      	beq.n	8efda <self_test+0xb9a>
									
									cl_selfteststate = CL_SELFTEST_STATE_VENOUSCLAMP_STATUS;
									break;
								}
								break;
								default:break;
   8efd8:	e016      	b.n	8f008 <self_test+0xbc8>
							
							case CL_SELFTEST_STATE_SENSOR_VENOUSCLAMP:
							switch(cl_selftest_event_type)
							{
								case EVENT_selftest_TICK_50MS:
								if (status[CL_SELFTEST_RESULT_VENOUSCLAMP] == TEST_PAAS)
   8efda:	4b47      	ldr	r3, [pc, #284]	; (8f0f8 <self_test+0xcb8>)
   8efdc:	7c9b      	ldrb	r3, [r3, #18]
   8efde:	2b01      	cmp	r3, #1
   8efe0:	d106      	bne.n	8eff0 <self_test+0xbb0>
								{
									cl_selfteststate = CL_SELFTEST_STATE_COMPLETED;
   8efe2:	4b46      	ldr	r3, [pc, #280]	; (8f0fc <self_test+0xcbc>)
   8efe4:	2217      	movs	r2, #23
   8efe6:	701a      	strb	r2, [r3, #0]
									 Cl_mac_apprequesthandler(MACREQ_SELFTEST_COMPLETED);
   8efe8:	2065      	movs	r0, #101	; 0x65
   8efea:	4b45      	ldr	r3, [pc, #276]	; (8f100 <self_test+0xcc0>)
   8efec:	4798      	blx	r3
									break;
   8efee:	e00b      	b.n	8f008 <self_test+0xbc8>
								}
								else{
									Cl_SysStat_GetSensor_Status_Query(SENSOR_VC_F_B,&v_C );
   8eff0:	f107 0320 	add.w	r3, r7, #32
   8eff4:	4619      	mov	r1, r3
   8eff6:	2025      	movs	r0, #37	; 0x25
   8eff8:	4b42      	ldr	r3, [pc, #264]	; (8f104 <self_test+0xcc4>)
   8effa:	4798      	blx	r3
									sv_cntrl_activatevenousclamp();
   8effc:	4b42      	ldr	r3, [pc, #264]	; (8f108 <self_test+0xcc8>)
   8effe:	4798      	blx	r3
									

									
									
									cl_selfteststate = CL_SELFTEST_STATE_VENOUSCLAMP_STATUS;
   8f000:	4b3e      	ldr	r3, [pc, #248]	; (8f0fc <self_test+0xcbc>)
   8f002:	2214      	movs	r2, #20
   8f004:	701a      	strb	r2, [r3, #0]
									break;
   8f006:	bf00      	nop
								}
								break;
								default:break;
								
							}
							break;
   8f008:	e06e      	b.n	8f0e8 <self_test+0xca8>
					
		           case CL_SELFTEST_STATE_VENOUSCLAMP_STATUS:
		           switch(cl_selftest_event_type)
   8f00a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f00e:	2b08      	cmp	r3, #8
   8f010:	d000      	beq.n	8f014 <self_test+0xbd4>

			          
			           
			          
			           break;
			           default:break;
   8f012:	e020      	b.n	8f056 <self_test+0xc16>
		           case CL_SELFTEST_STATE_VENOUSCLAMP_STATUS:
		           switch(cl_selftest_event_type)
		           {
			           case EVENT_selftest_TICK_SECOND:

			          Cl_SysStat_GetSensor_Status_Query(SENSOR_VC_F_B,&v_C );    //for venous
   8f014:	f107 0320 	add.w	r3, r7, #32
   8f018:	4619      	mov	r1, r3
   8f01a:	2025      	movs	r0, #37	; 0x25
   8f01c:	4b39      	ldr	r3, [pc, #228]	; (8f104 <self_test+0xcc4>)
   8f01e:	4798      	blx	r3
					   if(v_C==1)
   8f020:	8c3b      	ldrh	r3, [r7, #32]
   8f022:	2b01      	cmp	r3, #1
   8f024:	d10b      	bne.n	8f03e <self_test+0xbfe>
					   {
						  status[CL_SELFTEST_RESULT_VENOUSCLAMP] = TEST_PAAS; 
   8f026:	4b34      	ldr	r3, [pc, #208]	; (8f0f8 <self_test+0xcb8>)
   8f028:	2201      	movs	r2, #1
   8f02a:	749a      	strb	r2, [r3, #18]
						     sv_cntrl_deactivatevenousclamp();
   8f02c:	4b37      	ldr	r3, [pc, #220]	; (8f10c <self_test+0xccc>)
   8f02e:	4798      	blx	r3
 						   Cl_mac_apprequesthandler(MACREQ_SELFTEST_COMPLETED);
   8f030:	2065      	movs	r0, #101	; 0x65
   8f032:	4b33      	ldr	r3, [pc, #204]	; (8f100 <self_test+0xcc0>)
   8f034:	4798      	blx	r3
						
						   cl_selfteststate = CL_SELFTEST_STATE_COMPLETED;
   8f036:	4b31      	ldr	r3, [pc, #196]	; (8f0fc <self_test+0xcbc>)
   8f038:	2217      	movs	r2, #23
   8f03a:	701a      	strb	r2, [r3, #0]
						  break;
   8f03c:	e00b      	b.n	8f056 <self_test+0xc16>
						  
					   }
					   else
					   {
						   status[CL_SELFTEST_RESULT_VENOUSCLAMP] = TEST_FAIL;
   8f03e:	4b2e      	ldr	r3, [pc, #184]	; (8f0f8 <self_test+0xcb8>)
   8f040:	2200      	movs	r2, #0
   8f042:	749a      	strb	r2, [r3, #18]
						   sv_cntrl_deactivatevenousclamp(); 
   8f044:	4b31      	ldr	r3, [pc, #196]	; (8f10c <self_test+0xccc>)
   8f046:	4798      	blx	r3
						    Cl_mac_apprequesthandler(MACREQ_SELFTEST_COMPLETED);
   8f048:	2065      	movs	r0, #101	; 0x65
   8f04a:	4b2d      	ldr	r3, [pc, #180]	; (8f100 <self_test+0xcc0>)
   8f04c:	4798      	blx	r3
							
							   cl_selfteststate =CL_SELFTEST_STATE_COMPLETED;
   8f04e:	4b2b      	ldr	r3, [pc, #172]	; (8f0fc <self_test+0xcbc>)
   8f050:	2217      	movs	r2, #23
   8f052:	701a      	strb	r2, [r3, #0]
						   break;
   8f054:	bf00      	nop
			          
			           break;
			           default:break;
			           
		           }
				   break;
   8f056:	e047      	b.n	8f0e8 <self_test+0xca8>
		   
		 case CL_SELFTEST_STATE_COMPLETED:
		 switch(cl_selftest_event_type)
   8f058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   8f05c:	2b04      	cmp	r3, #4
   8f05e:	d002      	beq.n	8f066 <self_test+0xc26>
   8f060:	2b06      	cmp	r3, #6
   8f062:	d03f      	beq.n	8f0e4 <self_test+0xca4>
					 }
				 }
				 
               break;
			// }
			 default:break;
   8f064:	e03f      	b.n	8f0e6 <self_test+0xca6>
		 {
			 case EVENT_selftest_TICK_100MS:
			 break;
			 case EVENT_selftest_COMPLETED:
			// {
				 command = CON_TX_COMMAND_SELFTEST_REPORT;
   8f066:	2355      	movs	r3, #85	; 0x55
   8f068:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				 Cl_selftestretcode = Cl_SendDatatoconsole(command,&status,19);
   8f06c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8f070:	2213      	movs	r2, #19
   8f072:	4921      	ldr	r1, [pc, #132]	; (8f0f8 <self_test+0xcb8>)
   8f074:	4618      	mov	r0, r3
   8f076:	4b26      	ldr	r3, [pc, #152]	; (8f110 <self_test+0xcd0>)
   8f078:	4798      	blx	r3
   8f07a:	4603      	mov	r3, r0
   8f07c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				 
				 for(int16_t i=0;i<CL_SELFTEST_RESULT_MAXSTATE;i++)
   8f080:	2300      	movs	r3, #0
   8f082:	87fb      	strh	r3, [r7, #62]	; 0x3e
   8f084:	e029      	b.n	8f0da <self_test+0xc9a>
				 {
					 if (status[i]== 0)
   8f086:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   8f08a:	4a1b      	ldr	r2, [pc, #108]	; (8f0f8 <self_test+0xcb8>)
   8f08c:	5cd3      	ldrb	r3, [r2, r3]
   8f08e:	2b00      	cmp	r3, #0
   8f090:	d10f      	bne.n	8f0b2 <self_test+0xc72>
					 {
					 	command = CON_TX_COMMAND_SELFTEST_FAILED;
   8f092:	2354      	movs	r3, #84	; 0x54
   8f094:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					 	Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8f098:	f107 0127 	add.w	r1, r7, #39	; 0x27
   8f09c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8f0a0:	2200      	movs	r2, #0
   8f0a2:	4618      	mov	r0, r3
   8f0a4:	4b1a      	ldr	r3, [pc, #104]	; (8f110 <self_test+0xcd0>)
   8f0a6:	4798      	blx	r3
   8f0a8:	4603      	mov	r3, r0
   8f0aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						 break;
   8f0ae:	bf00      	nop
						 command = CON_TX_COMMAND_SELFTEST_PASSED;
						 Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
					 }
				 }
				 
               break;
   8f0b0:	e019      	b.n	8f0e6 <self_test+0xca6>
						 break;
					 }
					 
					 else
					 {
						 command = CON_TX_COMMAND_SELFTEST_PASSED;
   8f0b2:	2353      	movs	r3, #83	; 0x53
   8f0b4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						 Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
   8f0b8:	f107 0127 	add.w	r1, r7, #39	; 0x27
   8f0bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8f0c0:	2200      	movs	r2, #0
   8f0c2:	4618      	mov	r0, r3
   8f0c4:	4b12      	ldr	r3, [pc, #72]	; (8f110 <self_test+0xcd0>)
   8f0c6:	4798      	blx	r3
   8f0c8:	4603      	mov	r3, r0
   8f0ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			 case EVENT_selftest_COMPLETED:
			// {
				 command = CON_TX_COMMAND_SELFTEST_REPORT;
				 Cl_selftestretcode = Cl_SendDatatoconsole(command,&status,19);
				 
				 for(int16_t i=0;i<CL_SELFTEST_RESULT_MAXSTATE;i++)
   8f0ce:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   8f0d2:	b29b      	uxth	r3, r3
   8f0d4:	3301      	adds	r3, #1
   8f0d6:	b29b      	uxth	r3, r3
   8f0d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
   8f0da:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   8f0de:	2b12      	cmp	r3, #18
   8f0e0:	ddd1      	ble.n	8f086 <self_test+0xc46>
						 command = CON_TX_COMMAND_SELFTEST_PASSED;
						 Cl_selftestretcode = Cl_SendDatatoconsole(command,&data,0);
					 }
				 }
				 
               break;
   8f0e2:	e000      	b.n	8f0e6 <self_test+0xca6>
		   
		 case CL_SELFTEST_STATE_COMPLETED:
		 switch(cl_selftest_event_type)
		 {
			 case EVENT_selftest_TICK_100MS:
			 break;
   8f0e4:	bf00      	nop
			// }
			 default:break;
			 
		 }
		
      default:break;
   8f0e6:	bf00      	nop
		
		
					
	
	}	
	return CL_OK;
   8f0e8:	2300      	movs	r3, #0
		
	}
   8f0ea:	4618      	mov	r0, r3
   8f0ec:	3740      	adds	r7, #64	; 0x40
   8f0ee:	46bd      	mov	sp, r7
   8f0f0:	bd80      	pop	{r7, pc}
   8f0f2:	bf00      	nop
   8f0f4:	200718d4 	.word	0x200718d4
   8f0f8:	200724f4 	.word	0x200724f4
   8f0fc:	200718ca 	.word	0x200718ca
   8f100:	0008b715 	.word	0x0008b715
   8f104:	0008fa01 	.word	0x0008fa01
   8f108:	0009af2d 	.word	0x0009af2d
   8f10c:	0009af41 	.word	0x0009af41
   8f110:	0009cbd5 	.word	0x0009cbd5

0008f114 <cl_selftest_translatemacevent>:
		
		
		
	
	Cl_ReturnCodeType cl_selftest_translatemacevent(Cl_Mac_EventsType Cl_MacselftestEvent,cl_selftest_event* cl_selftest_event_type) 
	{
   8f114:	b480      	push	{r7}
   8f116:	b083      	sub	sp, #12
   8f118:	af00      	add	r7, sp, #0
   8f11a:	4603      	mov	r3, r0
   8f11c:	6039      	str	r1, [r7, #0]
   8f11e:	71fb      	strb	r3, [r7, #7]
		switch(Cl_MacselftestEvent)
   8f120:	79fb      	ldrb	r3, [r7, #7]
   8f122:	3b38      	subs	r3, #56	; 0x38
   8f124:	2b2f      	cmp	r3, #47	; 0x2f
   8f126:	f200 808f 	bhi.w	8f248 <cl_selftest_translatemacevent+0x134>
   8f12a:	a201      	add	r2, pc, #4	; (adr r2, 8f130 <cl_selftest_translatemacevent+0x1c>)
   8f12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8f130:	0008f221 	.word	0x0008f221
   8f134:	0008f229 	.word	0x0008f229
   8f138:	0008f231 	.word	0x0008f231
   8f13c:	0008f239 	.word	0x0008f239
   8f140:	0008f241 	.word	0x0008f241
   8f144:	0008f249 	.word	0x0008f249
   8f148:	0008f249 	.word	0x0008f249
   8f14c:	0008f249 	.word	0x0008f249
   8f150:	0008f249 	.word	0x0008f249
   8f154:	0008f249 	.word	0x0008f249
   8f158:	0008f249 	.word	0x0008f249
   8f15c:	0008f249 	.word	0x0008f249
   8f160:	0008f249 	.word	0x0008f249
   8f164:	0008f249 	.word	0x0008f249
   8f168:	0008f249 	.word	0x0008f249
   8f16c:	0008f249 	.word	0x0008f249
   8f170:	0008f249 	.word	0x0008f249
   8f174:	0008f249 	.word	0x0008f249
   8f178:	0008f249 	.word	0x0008f249
   8f17c:	0008f249 	.word	0x0008f249
   8f180:	0008f249 	.word	0x0008f249
   8f184:	0008f249 	.word	0x0008f249
   8f188:	0008f249 	.word	0x0008f249
   8f18c:	0008f249 	.word	0x0008f249
   8f190:	0008f249 	.word	0x0008f249
   8f194:	0008f249 	.word	0x0008f249
   8f198:	0008f249 	.word	0x0008f249
   8f19c:	0008f249 	.word	0x0008f249
   8f1a0:	0008f249 	.word	0x0008f249
   8f1a4:	0008f249 	.word	0x0008f249
   8f1a8:	0008f249 	.word	0x0008f249
   8f1ac:	0008f249 	.word	0x0008f249
   8f1b0:	0008f249 	.word	0x0008f249
   8f1b4:	0008f249 	.word	0x0008f249
   8f1b8:	0008f249 	.word	0x0008f249
   8f1bc:	0008f249 	.word	0x0008f249
   8f1c0:	0008f249 	.word	0x0008f249
   8f1c4:	0008f249 	.word	0x0008f249
   8f1c8:	0008f249 	.word	0x0008f249
   8f1cc:	0008f249 	.word	0x0008f249
   8f1d0:	0008f249 	.word	0x0008f249
   8f1d4:	0008f249 	.word	0x0008f249
   8f1d8:	0008f1f1 	.word	0x0008f1f1
   8f1dc:	0008f1f9 	.word	0x0008f1f9
   8f1e0:	0008f201 	.word	0x0008f201
   8f1e4:	0008f219 	.word	0x0008f219
   8f1e8:	0008f211 	.word	0x0008f211
   8f1ec:	0008f209 	.word	0x0008f209
		{

			
			case  EVT_CONSOLE_COMMAND_SELFTEST_START:
			*cl_selftest_event_type = EVENT_start_selftest;
   8f1f0:	683b      	ldr	r3, [r7, #0]
   8f1f2:	2201      	movs	r2, #1
   8f1f4:	701a      	strb	r2, [r3, #0]
			break;
   8f1f6:	e028      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			
			case EVT_COSOLE_COMMAND_SELFTEST_ALARM_PAAS:
			*cl_selftest_event_type =EVENT_selftest_ALARM_PAAS;
   8f1f8:	683b      	ldr	r3, [r7, #0]
   8f1fa:	220a      	movs	r2, #10
   8f1fc:	701a      	strb	r2, [r3, #0]
			break;
   8f1fe:	e024      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			case EVT_COSOLE_COMMAND_SELFTEST_ALARM_FAIL:
		    *cl_selftest_event_type =EVENT_selftest_ALARM_FAIL;
   8f200:	683b      	ldr	r3, [r7, #0]
   8f202:	220b      	movs	r2, #11
   8f204:	701a      	strb	r2, [r3, #0]
		    break;
   8f206:	e020      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			
			case EVT_CONSOLE_COMMAND_SYNCCONFIRMED:
			 *cl_selftest_event_type =EVENT_selftest_SYNC_ACK;
   8f208:	683b      	ldr	r3, [r7, #0]
   8f20a:	220c      	movs	r2, #12
   8f20c:	701a      	strb	r2, [r3, #0]
			 break;
   8f20e:	e01c      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			case EVT_CONSOLE_COMMAND_SELFTEST_STOP:
			*cl_selftest_event_type = EVENT_STOP_selftest;
   8f210:	683b      	ldr	r3, [r7, #0]
   8f212:	2202      	movs	r2, #2
   8f214:	701a      	strb	r2, [r3, #0]
			break;
   8f216:	e018      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			case MACREQ_SELFTEST_COMPLETED:
			*cl_selftest_event_type = EVENT_selftest_COMPLETED;
   8f218:	683b      	ldr	r3, [r7, #0]
   8f21a:	2204      	movs	r2, #4
   8f21c:	701a      	strb	r2, [r3, #0]
			break;
   8f21e:	e014      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			
			
			case EVT_TICK_50M:
			*cl_selftest_event_type =   EVENT_selftest_TICK_50MS;
   8f220:	683b      	ldr	r3, [r7, #0]
   8f222:	2205      	movs	r2, #5
   8f224:	701a      	strb	r2, [r3, #0]
			break;
   8f226:	e010      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			break;
			case EVT_TICK_100M:
			*cl_selftest_event_type =  EVENT_selftest_TICK_100MS;
   8f228:	683b      	ldr	r3, [r7, #0]
   8f22a:	2206      	movs	r2, #6
   8f22c:	701a      	strb	r2, [r3, #0]
			break;
   8f22e:	e00c      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			case EVT_TICK_500M:
			*cl_selftest_event_type =   EVENT_selftest_TICK_500MS;
   8f230:	683b      	ldr	r3, [r7, #0]
   8f232:	2207      	movs	r2, #7
   8f234:	701a      	strb	r2, [r3, #0]
			break;
   8f236:	e008      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			case EVT_TICK_SEC:
			*cl_selftest_event_type =  EVENT_selftest_TICK_SECOND;
   8f238:	683b      	ldr	r3, [r7, #0]
   8f23a:	2208      	movs	r2, #8
   8f23c:	701a      	strb	r2, [r3, #0]
			break;
   8f23e:	e004      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			case EVT_TICK_MIN:
			*cl_selftest_event_type =   EVENT_selftest_TICK_MINUTE;
   8f240:	683b      	ldr	r3, [r7, #0]
   8f242:	2209      	movs	r2, #9
   8f244:	701a      	strb	r2, [r3, #0]
			break;
   8f246:	e000      	b.n	8f24a <cl_selftest_translatemacevent+0x136>
			default:
			break;
   8f248:	bf00      	nop
		}
		return CL_OK;
   8f24a:	2300      	movs	r3, #0
	}	
   8f24c:	4618      	mov	r0, r3
   8f24e:	370c      	adds	r7, #12
   8f250:	46bd      	mov	sp, r7
   8f252:	bc80      	pop	{r7}
   8f254:	4770      	bx	lr
   8f256:	bf00      	nop

0008f258 <Cl_selftest_init>:
	
	
	
	
	Cl_ReturnCodeType Cl_selftest_init(void)
	{
   8f258:	b480      	push	{r7}
   8f25a:	af00      	add	r7, sp, #0
		
		cl_selfteststate = CL_SELFTEST_STATE_IDLE;
   8f25c:	4b05      	ldr	r3, [pc, #20]	; (8f274 <Cl_selftest_init+0x1c>)
   8f25e:	2200      	movs	r2, #0
   8f260:	701a      	strb	r2, [r3, #0]

		//cl_isouf_event = EVENT_NULL_EVENT;
		
		selftest_second_counter=0 ;
   8f262:	4b05      	ldr	r3, [pc, #20]	; (8f278 <Cl_selftest_init+0x20>)
   8f264:	2200      	movs	r2, #0
   8f266:	801a      	strh	r2, [r3, #0]
		return CL_OK;
   8f268:	2300      	movs	r3, #0
	}
   8f26a:	4618      	mov	r0, r3
   8f26c:	46bd      	mov	sp, r7
   8f26e:	bc80      	pop	{r7}
   8f270:	4770      	bx	lr
   8f272:	bf00      	nop
   8f274:	200718ca 	.word	0x200718ca
   8f278:	200718d6 	.word	0x200718d6
   8f27c:	00000000 	.word	0x00000000

0008f280 <Cl_SysStat_System_Status_Query>:
static uint8_t Count_500ms =0;
extern float cl_utilities_CalConductivity(uint16_t ,float);
int16_t PS1_bar =0,PS2_bar =0,PS3_bar =0 , Apt_bar = 0 , Vpt_bar = 0;  // manav02 added apt and vpt
//float PS1_bar =0,PS2_bar =0,PS3_bar =0 , Apt_bar = 0 , Vpt_bar = 0;  // manav02 added apt and vpt
Cl_ReturnCodeType 		Cl_SysStat_System_Status_Query(void)
{
   8f280:	b590      	push	{r4, r7, lr}
   8f282:	b09f      	sub	sp, #124	; 0x7c
   8f284:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1, raw_data =0, cal_temp =0 ;
   8f286:	2300      	movs	r3, #0
   8f288:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
   8f28c:	2300      	movs	r3, #0
   8f28e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	float conductivity_CS3 = 0,conductivity_CS2 =0, conductivity_CS1=0 ;
   8f292:	f04f 0300 	mov.w	r3, #0
   8f296:	673b      	str	r3, [r7, #112]	; 0x70
   8f298:	f04f 0300 	mov.w	r3, #0
   8f29c:	66fb      	str	r3, [r7, #108]	; 0x6c
   8f29e:	f04f 0300 	mov.w	r3, #0
   8f2a2:	66bb      	str	r3, [r7, #104]	; 0x68
	
	 RetVal = cl_memset((Cl_Uint8Type*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8f2a4:	1d3b      	adds	r3, r7, #4
   8f2a6:	2160      	movs	r1, #96	; 0x60
   8f2a8:	4618      	mov	r0, r3
   8f2aa:	4b97      	ldr	r3, [pc, #604]	; (8f508 <Cl_SysStat_System_Status_Query+0x288>)
   8f2ac:	4798      	blx	r3
   8f2ae:	4603      	mov	r3, r0
   8f2b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8f2b4:	4b95      	ldr	r3, [pc, #596]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f2b6:	2201      	movs	r2, #1
   8f2b8:	839a      	strh	r2, [r3, #28]
	 cl_sys_statbuffer.DGPstatus = 1;
   8f2ba:	4b94      	ldr	r3, [pc, #592]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f2bc:	2201      	movs	r2, #1
   8f2be:	83da      	strh	r2, [r3, #30]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8f2c0:	1d3b      	adds	r3, r7, #4
   8f2c2:	4618      	mov	r0, r3
   8f2c4:	4b92      	ldr	r3, [pc, #584]	; (8f510 <Cl_SysStat_System_Status_Query+0x290>)
   8f2c6:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8f2c8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   8f2ca:	4b90      	ldr	r3, [pc, #576]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f2cc:	875a      	strh	r2, [r3, #58]	; 0x3a
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8f2ce:	8bfa      	ldrh	r2, [r7, #30]
   8f2d0:	4b8e      	ldr	r3, [pc, #568]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f2d2:	831a      	strh	r2, [r3, #24]
	if(sv_sys_statbuffer.aptstatus > 0  && sv_sys_statbuffer.aptstatus < 65535)
   8f2d4:	8abb      	ldrh	r3, [r7, #20]
   8f2d6:	2b00      	cmp	r3, #0
   8f2d8:	d007      	beq.n	8f2ea <Cl_SysStat_System_Status_Query+0x6a>
   8f2da:	8abb      	ldrh	r3, [r7, #20]
   8f2dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8f2e0:	4293      	cmp	r3, r2
   8f2e2:	d002      	beq.n	8f2ea <Cl_SysStat_System_Status_Query+0x6a>
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8f2e4:	8aba      	ldrh	r2, [r7, #20]
   8f2e6:	4b89      	ldr	r3, [pc, #548]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f2e8:	821a      	strh	r2, [r3, #16]
	if(sv_sys_statbuffer.vptstatus > 0 && sv_sys_statbuffer.vptstatus < 65535)
   8f2ea:	8afb      	ldrh	r3, [r7, #22]
   8f2ec:	2b00      	cmp	r3, #0
   8f2ee:	d007      	beq.n	8f300 <Cl_SysStat_System_Status_Query+0x80>
   8f2f0:	8afb      	ldrh	r3, [r7, #22]
   8f2f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8f2f6:	4293      	cmp	r3, r2
   8f2f8:	d002      	beq.n	8f300 <Cl_SysStat_System_Status_Query+0x80>
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8f2fa:	8afa      	ldrh	r2, [r7, #22]
   8f2fc:	4b83      	ldr	r3, [pc, #524]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f2fe:	825a      	strh	r2, [r3, #18]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8f300:	8bba      	ldrh	r2, [r7, #28]
   8f302:	4b82      	ldr	r3, [pc, #520]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f304:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.BP_ON_OFF = sv_sys_statbuffer.BP_ON_OFF;
   8f306:	89ba      	ldrh	r2, [r7, #12]
   8f308:	4b80      	ldr	r3, [pc, #512]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f30a:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8f30c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
   8f310:	4b7e      	ldr	r3, [pc, #504]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8f316:	88fa      	ldrh	r2, [r7, #6]
   8f318:	4b7c      	ldr	r3, [pc, #496]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f31a:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8f31c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   8f31e:	4b7b      	ldr	r3, [pc, #492]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f320:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8f322:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8f324:	4b79      	ldr	r3, [pc, #484]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f326:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.cond_status  = cl_sys_statbuffer.cond_status_dac; // sanjeer - for now  as hardware connection opending  - to be removed
   8f328:	4b78      	ldr	r3, [pc, #480]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f32a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   8f32c:	4b77      	ldr	r3, [pc, #476]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f32e:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_acid = sv_sys_statbuffer.cond_acid;
   8f330:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   8f332:	4b76      	ldr	r3, [pc, #472]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f334:	879a      	strh	r2, [r3, #60]	; 0x3c
	cl_sys_statbuffer.cond_bicarb = sv_sys_statbuffer.cond_bicarb;
   8f336:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8f33a:	4b74      	ldr	r3, [pc, #464]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f33c:	87da      	strh	r2, [r3, #62]	; 0x3e
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8f33e:	8c3a      	ldrh	r2, [r7, #32]
   8f340:	4b72      	ldr	r3, [pc, #456]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f342:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.DGPstatus = sv_sys_statbuffer.DGPstatus;
   8f344:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
   8f348:	4b70      	ldr	r3, [pc, #448]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f34a:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8f34c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8f34e:	4b6f      	ldr	r3, [pc, #444]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f350:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8f352:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   8f356:	2b00      	cmp	r3, #0
   8f358:	bf14      	ite	ne
   8f35a:	2301      	movne	r3, #1
   8f35c:	2300      	moveq	r3, #0
   8f35e:	b2da      	uxtb	r2, r3
   8f360:	4b6a      	ldr	r3, [pc, #424]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8f366:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
   8f36a:	2b00      	cmp	r3, #0
   8f36c:	bf14      	ite	ne
   8f36e:	2301      	movne	r3, #1
   8f370:	2300      	moveq	r3, #0
   8f372:	b2da      	uxtb	r2, r3
   8f374:	4b65      	ldr	r3, [pc, #404]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f376:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8f37a:	793b      	ldrb	r3, [r7, #4]
   8f37c:	2b00      	cmp	r3, #0
   8f37e:	bf14      	ite	ne
   8f380:	2301      	movne	r3, #1
   8f382:	2300      	moveq	r3, #0
   8f384:	b2da      	uxtb	r2, r3
   8f386:	4b61      	ldr	r3, [pc, #388]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f388:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8f38a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8f38e:	2b00      	cmp	r3, #0
   8f390:	bf14      	ite	ne
   8f392:	2301      	movne	r3, #1
   8f394:	2300      	moveq	r3, #0
   8f396:	b2da      	uxtb	r2, r3
   8f398:	4b5c      	ldr	r3, [pc, #368]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8f39e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8f3a0:	4b5a      	ldr	r3, [pc, #360]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f3a2:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8f3a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8f3a6:	4b59      	ldr	r3, [pc, #356]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f3a8:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8f3aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8f3ac:	4b57      	ldr	r3, [pc, #348]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f3ae:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8f3b0:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
   8f3b4:	4b55      	ldr	r3, [pc, #340]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f3b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8f3ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8f3bc:	4b53      	ldr	r3, [pc, #332]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f3be:	841a      	strh	r2, [r3, #32]
//	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
	raw_data = sv_sys_statbuffer.Temp1status;
   8f3c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8f3c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768); 
   8f3c6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f3ca:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f3ce:	fb02 f303 	mul.w	r3, r2, r3
   8f3d2:	2b00      	cmp	r3, #0
   8f3d4:	da02      	bge.n	8f3dc <Cl_SysStat_System_Status_Query+0x15c>
   8f3d6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f3da:	33ff      	adds	r3, #255	; 0xff
   8f3dc:	141b      	asrs	r3, r3, #16
   8f3de:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f3e2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f3e6:	4618      	mov	r0, r3
   8f3e8:	4b4a      	ldr	r3, [pc, #296]	; (8f514 <Cl_SysStat_System_Status_Query+0x294>)
   8f3ea:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8f3ec:	4b4a      	ldr	r3, [pc, #296]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f3ee:	681a      	ldr	r2, [r3, #0]
   8f3f0:	4b4a      	ldr	r3, [pc, #296]	; (8f51c <Cl_SysStat_System_Status_Query+0x29c>)
   8f3f2:	494b      	ldr	r1, [pc, #300]	; (8f520 <Cl_SysStat_System_Status_Query+0x2a0>)
   8f3f4:	4610      	mov	r0, r2
   8f3f6:	4798      	blx	r3
   8f3f8:	4603      	mov	r3, r0
   8f3fa:	4618      	mov	r0, r3
   8f3fc:	4b46      	ldr	r3, [pc, #280]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f3fe:	681a      	ldr	r2, [r3, #0]
   8f400:	4b48      	ldr	r3, [pc, #288]	; (8f524 <Cl_SysStat_System_Status_Query+0x2a4>)
   8f402:	4611      	mov	r1, r2
   8f404:	4798      	blx	r3
   8f406:	4603      	mov	r3, r0
   8f408:	461a      	mov	r2, r3
   8f40a:	4b47      	ldr	r3, [pc, #284]	; (8f528 <Cl_SysStat_System_Status_Query+0x2a8>)
   8f40c:	4947      	ldr	r1, [pc, #284]	; (8f52c <Cl_SysStat_System_Status_Query+0x2ac>)
   8f40e:	4610      	mov	r0, r2
   8f410:	4798      	blx	r3
   8f412:	4603      	mov	r3, r0
   8f414:	461a      	mov	r2, r3
   8f416:	4b40      	ldr	r3, [pc, #256]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f418:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp1status = res_temp_value  -75 -100 ;
   8f41a:	4b3f      	ldr	r3, [pc, #252]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f41c:	681a      	ldr	r2, [r3, #0]
   8f41e:	4b44      	ldr	r3, [pc, #272]	; (8f530 <Cl_SysStat_System_Status_Query+0x2b0>)
   8f420:	4944      	ldr	r1, [pc, #272]	; (8f534 <Cl_SysStat_System_Status_Query+0x2b4>)
   8f422:	4610      	mov	r0, r2
   8f424:	4798      	blx	r3
   8f426:	4603      	mov	r3, r0
   8f428:	461a      	mov	r2, r3
   8f42a:	4b41      	ldr	r3, [pc, #260]	; (8f530 <Cl_SysStat_System_Status_Query+0x2b0>)
   8f42c:	4942      	ldr	r1, [pc, #264]	; (8f538 <Cl_SysStat_System_Status_Query+0x2b8>)
   8f42e:	4610      	mov	r0, r2
   8f430:	4798      	blx	r3
   8f432:	4603      	mov	r3, r0
   8f434:	461a      	mov	r2, r3
   8f436:	4b41      	ldr	r3, [pc, #260]	; (8f53c <Cl_SysStat_System_Status_Query+0x2bc>)
   8f438:	4610      	mov	r0, r2
   8f43a:	4798      	blx	r3
   8f43c:	4603      	mov	r3, r0
   8f43e:	b29a      	uxth	r2, r3
   8f440:	4b32      	ldr	r3, [pc, #200]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f442:	851a      	strh	r2, [r3, #40]	; 0x28
//cl_sys_statbuffer.Temp1status = res_temp_value  -75;                // Manav Machine
//	cl_sys_statbuffer.Temp1status = res_temp_value -80 ;			
				
//	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
	raw_data = sv_sys_statbuffer.Temp2status;
   8f444:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8f446:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8f44a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f44e:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f452:	fb02 f303 	mul.w	r3, r2, r3
   8f456:	2b00      	cmp	r3, #0
   8f458:	da02      	bge.n	8f460 <Cl_SysStat_System_Status_Query+0x1e0>
   8f45a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f45e:	33ff      	adds	r3, #255	; 0xff
   8f460:	141b      	asrs	r3, r3, #16
   8f462:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f466:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f46a:	4618      	mov	r0, r3
   8f46c:	4b29      	ldr	r3, [pc, #164]	; (8f514 <Cl_SysStat_System_Status_Query+0x294>)
   8f46e:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8f470:	4b29      	ldr	r3, [pc, #164]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f472:	681a      	ldr	r2, [r3, #0]
   8f474:	4b29      	ldr	r3, [pc, #164]	; (8f51c <Cl_SysStat_System_Status_Query+0x29c>)
   8f476:	492a      	ldr	r1, [pc, #168]	; (8f520 <Cl_SysStat_System_Status_Query+0x2a0>)
   8f478:	4610      	mov	r0, r2
   8f47a:	4798      	blx	r3
   8f47c:	4603      	mov	r3, r0
   8f47e:	4618      	mov	r0, r3
   8f480:	4b25      	ldr	r3, [pc, #148]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f482:	681a      	ldr	r2, [r3, #0]
   8f484:	4b27      	ldr	r3, [pc, #156]	; (8f524 <Cl_SysStat_System_Status_Query+0x2a4>)
   8f486:	4611      	mov	r1, r2
   8f488:	4798      	blx	r3
   8f48a:	4603      	mov	r3, r0
   8f48c:	461a      	mov	r2, r3
   8f48e:	4b26      	ldr	r3, [pc, #152]	; (8f528 <Cl_SysStat_System_Status_Query+0x2a8>)
   8f490:	4926      	ldr	r1, [pc, #152]	; (8f52c <Cl_SysStat_System_Status_Query+0x2ac>)
   8f492:	4610      	mov	r0, r2
   8f494:	4798      	blx	r3
   8f496:	4603      	mov	r3, r0
   8f498:	461a      	mov	r2, r3
   8f49a:	4b1f      	ldr	r3, [pc, #124]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f49c:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp2status = res_temp_value -35;
   8f49e:	4b1e      	ldr	r3, [pc, #120]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f4a0:	681a      	ldr	r2, [r3, #0]
   8f4a2:	4b23      	ldr	r3, [pc, #140]	; (8f530 <Cl_SysStat_System_Status_Query+0x2b0>)
   8f4a4:	4926      	ldr	r1, [pc, #152]	; (8f540 <Cl_SysStat_System_Status_Query+0x2c0>)
   8f4a6:	4610      	mov	r0, r2
   8f4a8:	4798      	blx	r3
   8f4aa:	4603      	mov	r3, r0
   8f4ac:	461a      	mov	r2, r3
   8f4ae:	4b23      	ldr	r3, [pc, #140]	; (8f53c <Cl_SysStat_System_Status_Query+0x2bc>)
   8f4b0:	4610      	mov	r0, r2
   8f4b2:	4798      	blx	r3
   8f4b4:	4603      	mov	r3, r0
   8f4b6:	b29a      	uxth	r2, r3
   8f4b8:	4b14      	ldr	r3, [pc, #80]	; (8f50c <Cl_SysStat_System_Status_Query+0x28c>)
   8f4ba:	855a      	strh	r2, [r3, #42]	; 0x2a
//	cl_sys_statbuffer.Temp2status = res_temp_value -25;               // Manav Machine       
//	cl_sys_statbuffer.Temp2status = res_temp_value +20 -770;
	
//	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
	raw_data = sv_sys_statbuffer.Temp3status;
   8f4bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   8f4be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8f4c2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f4c6:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f4ca:	fb02 f303 	mul.w	r3, r2, r3
   8f4ce:	2b00      	cmp	r3, #0
   8f4d0:	da02      	bge.n	8f4d8 <Cl_SysStat_System_Status_Query+0x258>
   8f4d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f4d6:	33ff      	adds	r3, #255	; 0xff
   8f4d8:	141b      	asrs	r3, r3, #16
   8f4da:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f4de:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f4e2:	4618      	mov	r0, r3
   8f4e4:	4b0b      	ldr	r3, [pc, #44]	; (8f514 <Cl_SysStat_System_Status_Query+0x294>)
   8f4e6:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8f4e8:	4b0b      	ldr	r3, [pc, #44]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f4ea:	681a      	ldr	r2, [r3, #0]
   8f4ec:	4b0b      	ldr	r3, [pc, #44]	; (8f51c <Cl_SysStat_System_Status_Query+0x29c>)
   8f4ee:	490c      	ldr	r1, [pc, #48]	; (8f520 <Cl_SysStat_System_Status_Query+0x2a0>)
   8f4f0:	4610      	mov	r0, r2
   8f4f2:	4798      	blx	r3
   8f4f4:	4603      	mov	r3, r0
   8f4f6:	4618      	mov	r0, r3
   8f4f8:	4b07      	ldr	r3, [pc, #28]	; (8f518 <Cl_SysStat_System_Status_Query+0x298>)
   8f4fa:	681a      	ldr	r2, [r3, #0]
   8f4fc:	4b09      	ldr	r3, [pc, #36]	; (8f524 <Cl_SysStat_System_Status_Query+0x2a4>)
   8f4fe:	4611      	mov	r1, r2
   8f500:	4798      	blx	r3
   8f502:	4603      	mov	r3, r0
   8f504:	461a      	mov	r2, r3
   8f506:	e01d      	b.n	8f544 <Cl_SysStat_System_Status_Query+0x2c4>
   8f508:	00093ef1 	.word	0x00093ef1
   8f50c:	2007216c 	.word	0x2007216c
   8f510:	0009b345 	.word	0x0009b345
   8f514:	00090ad1 	.word	0x00090ad1
   8f518:	20071930 	.word	0x20071930
   8f51c:	000a7fa9 	.word	0x000a7fa9
   8f520:	41100000 	.word	0x41100000
   8f524:	000a7d99 	.word	0x000a7d99
   8f528:	000a8111 	.word	0x000a8111
   8f52c:	41200000 	.word	0x41200000
   8f530:	000a7d95 	.word	0x000a7d95
   8f534:	42960000 	.word	0x42960000
   8f538:	42c80000 	.word	0x42c80000
   8f53c:	000a8381 	.word	0x000a8381
   8f540:	420c0000 	.word	0x420c0000
   8f544:	4b9a      	ldr	r3, [pc, #616]	; (8f7b0 <Cl_SysStat_System_Status_Query+0x530>)
   8f546:	499b      	ldr	r1, [pc, #620]	; (8f7b4 <Cl_SysStat_System_Status_Query+0x534>)
   8f548:	4610      	mov	r0, r2
   8f54a:	4798      	blx	r3
   8f54c:	4603      	mov	r3, r0
   8f54e:	461a      	mov	r2, r3
   8f550:	4b99      	ldr	r3, [pc, #612]	; (8f7b8 <Cl_SysStat_System_Status_Query+0x538>)
   8f552:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp3status = res_temp_value + 20 ;
   8f554:	4b98      	ldr	r3, [pc, #608]	; (8f7b8 <Cl_SysStat_System_Status_Query+0x538>)
   8f556:	681a      	ldr	r2, [r3, #0]
   8f558:	4b98      	ldr	r3, [pc, #608]	; (8f7bc <Cl_SysStat_System_Status_Query+0x53c>)
   8f55a:	4999      	ldr	r1, [pc, #612]	; (8f7c0 <Cl_SysStat_System_Status_Query+0x540>)
   8f55c:	4610      	mov	r0, r2
   8f55e:	4798      	blx	r3
   8f560:	4603      	mov	r3, r0
   8f562:	461a      	mov	r2, r3
   8f564:	4b97      	ldr	r3, [pc, #604]	; (8f7c4 <Cl_SysStat_System_Status_Query+0x544>)
   8f566:	4610      	mov	r0, r2
   8f568:	4798      	blx	r3
   8f56a:	4603      	mov	r3, r0
   8f56c:	b29a      	uxth	r2, r3
   8f56e:	4b96      	ldr	r3, [pc, #600]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f570:	859a      	strh	r2, [r3, #44]	; 0x2c
//cl_sys_statbuffer.Temp3status = res_temp_value -20 ;              // Manav Machine
//	cl_sys_statbuffer.Temp3status = res_temp_value +20 - 30 - 80 + 120 ;
	
//	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
	raw_data = sv_sys_statbuffer.Temp4status;
   8f572:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   8f574:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8f578:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f57c:	f649 5208 	movw	r2, #40200	; 0x9d08
   8f580:	fb02 f303 	mul.w	r3, r2, r3
   8f584:	2b00      	cmp	r3, #0
   8f586:	da02      	bge.n	8f58e <Cl_SysStat_System_Status_Query+0x30e>
   8f588:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8f58c:	33ff      	adds	r3, #255	; 0xff
   8f58e:	141b      	asrs	r3, r3, #16
   8f590:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	res_temp_lookuptable(cal_temp);
   8f594:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
   8f598:	4618      	mov	r0, r3
   8f59a:	4b8c      	ldr	r3, [pc, #560]	; (8f7cc <Cl_SysStat_System_Status_Query+0x54c>)
   8f59c:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8f59e:	4b86      	ldr	r3, [pc, #536]	; (8f7b8 <Cl_SysStat_System_Status_Query+0x538>)
   8f5a0:	681a      	ldr	r2, [r3, #0]
   8f5a2:	4b8b      	ldr	r3, [pc, #556]	; (8f7d0 <Cl_SysStat_System_Status_Query+0x550>)
   8f5a4:	498b      	ldr	r1, [pc, #556]	; (8f7d4 <Cl_SysStat_System_Status_Query+0x554>)
   8f5a6:	4610      	mov	r0, r2
   8f5a8:	4798      	blx	r3
   8f5aa:	4603      	mov	r3, r0
   8f5ac:	4618      	mov	r0, r3
   8f5ae:	4b82      	ldr	r3, [pc, #520]	; (8f7b8 <Cl_SysStat_System_Status_Query+0x538>)
   8f5b0:	681a      	ldr	r2, [r3, #0]
   8f5b2:	4b82      	ldr	r3, [pc, #520]	; (8f7bc <Cl_SysStat_System_Status_Query+0x53c>)
   8f5b4:	4611      	mov	r1, r2
   8f5b6:	4798      	blx	r3
   8f5b8:	4603      	mov	r3, r0
   8f5ba:	461a      	mov	r2, r3
   8f5bc:	4b7c      	ldr	r3, [pc, #496]	; (8f7b0 <Cl_SysStat_System_Status_Query+0x530>)
   8f5be:	497d      	ldr	r1, [pc, #500]	; (8f7b4 <Cl_SysStat_System_Status_Query+0x534>)
   8f5c0:	4610      	mov	r0, r2
   8f5c2:	4798      	blx	r3
   8f5c4:	4603      	mov	r3, r0
   8f5c6:	461a      	mov	r2, r3
   8f5c8:	4b7b      	ldr	r3, [pc, #492]	; (8f7b8 <Cl_SysStat_System_Status_Query+0x538>)
   8f5ca:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp4status = res_temp_value ;
   8f5cc:	4b7a      	ldr	r3, [pc, #488]	; (8f7b8 <Cl_SysStat_System_Status_Query+0x538>)
   8f5ce:	681a      	ldr	r2, [r3, #0]
   8f5d0:	4b7c      	ldr	r3, [pc, #496]	; (8f7c4 <Cl_SysStat_System_Status_Query+0x544>)
   8f5d2:	4610      	mov	r0, r2
   8f5d4:	4798      	blx	r3
   8f5d6:	4603      	mov	r3, r0
   8f5d8:	b29a      	uxth	r2, r3
   8f5da:	4b7b      	ldr	r3, [pc, #492]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f5dc:	85da      	strh	r2, [r3, #46]	; 0x2e
	
	// ----------------added manav02 for conductivity globalization-------------------------
	
	raw_data = sv_sys_statbuffer.cond_status;
   8f5de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   8f5e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	conductivity_CS3 = cl_utilities_CalConductivity(raw_data,(sv_sys_statbuffer.CS3_Tempstatus)/100);
   8f5e4:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
   8f5e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   8f5ea:	4a7b      	ldr	r2, [pc, #492]	; (8f7d8 <Cl_SysStat_System_Status_Query+0x558>)
   8f5ec:	fba2 2303 	umull	r2, r3, r2, r3
   8f5f0:	095b      	lsrs	r3, r3, #5
   8f5f2:	b29b      	uxth	r3, r3
   8f5f4:	461a      	mov	r2, r3
   8f5f6:	4b79      	ldr	r3, [pc, #484]	; (8f7dc <Cl_SysStat_System_Status_Query+0x55c>)
   8f5f8:	4610      	mov	r0, r2
   8f5fa:	4798      	blx	r3
   8f5fc:	4603      	mov	r3, r0
   8f5fe:	4619      	mov	r1, r3
   8f600:	4620      	mov	r0, r4
   8f602:	4b77      	ldr	r3, [pc, #476]	; (8f7e0 <Cl_SysStat_System_Status_Query+0x560>)
   8f604:	4798      	blx	r3
   8f606:	6738      	str	r0, [r7, #112]	; 0x70
	//avgcond = avgcond + conductivity_CS3;
	
//	conductivity_CS3 = (conductivity_CS3*9 + conductivity_CS3)/10;
	cl_sys_statbuffer.cond_status = conductivity_CS3  ;
   8f608:	4b6e      	ldr	r3, [pc, #440]	; (8f7c4 <Cl_SysStat_System_Status_Query+0x544>)
   8f60a:	6f38      	ldr	r0, [r7, #112]	; 0x70
   8f60c:	4798      	blx	r3
   8f60e:	4603      	mov	r3, r0
   8f610:	b29a      	uxth	r2, r3
   8f612:	4b6d      	ldr	r3, [pc, #436]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f614:	86da      	strh	r2, [r3, #54]	; 0x36
	avg_conductivity = raw_data;
   8f616:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8f61a:	4b70      	ldr	r3, [pc, #448]	; (8f7dc <Cl_SysStat_System_Status_Query+0x55c>)
   8f61c:	4610      	mov	r0, r2
   8f61e:	4798      	blx	r3
   8f620:	4602      	mov	r2, r0
   8f622:	4b70      	ldr	r3, [pc, #448]	; (8f7e4 <Cl_SysStat_System_Status_Query+0x564>)
   8f624:	601a      	str	r2, [r3, #0]
	
	// ----------------added Gopal for conductivity CS2 -------------------------
	
	raw_data = sv_sys_statbuffer.cond_bicarb;
   8f626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   8f62a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	conductivity_CS2 = cl_utilities_CalConductivity(raw_data,(cl_sys_statbuffer.CS2_Tempstatus)/100);
   8f62e:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
   8f632:	4b65      	ldr	r3, [pc, #404]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8f636:	4a68      	ldr	r2, [pc, #416]	; (8f7d8 <Cl_SysStat_System_Status_Query+0x558>)
   8f638:	fba2 2303 	umull	r2, r3, r2, r3
   8f63c:	095b      	lsrs	r3, r3, #5
   8f63e:	b29b      	uxth	r3, r3
   8f640:	461a      	mov	r2, r3
   8f642:	4b66      	ldr	r3, [pc, #408]	; (8f7dc <Cl_SysStat_System_Status_Query+0x55c>)
   8f644:	4610      	mov	r0, r2
   8f646:	4798      	blx	r3
   8f648:	4603      	mov	r3, r0
   8f64a:	4619      	mov	r1, r3
   8f64c:	4620      	mov	r0, r4
   8f64e:	4b64      	ldr	r3, [pc, #400]	; (8f7e0 <Cl_SysStat_System_Status_Query+0x560>)
   8f650:	4798      	blx	r3
   8f652:	66f8      	str	r0, [r7, #108]	; 0x6c
	//avgcond = avgcond + conductivity_CS3;
	
	conductivity_CS2 = (conductivity_CS2*9 + conductivity_CS2)/10;
   8f654:	4b5e      	ldr	r3, [pc, #376]	; (8f7d0 <Cl_SysStat_System_Status_Query+0x550>)
   8f656:	495f      	ldr	r1, [pc, #380]	; (8f7d4 <Cl_SysStat_System_Status_Query+0x554>)
   8f658:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   8f65a:	4798      	blx	r3
   8f65c:	4603      	mov	r3, r0
   8f65e:	461a      	mov	r2, r3
   8f660:	4b56      	ldr	r3, [pc, #344]	; (8f7bc <Cl_SysStat_System_Status_Query+0x53c>)
   8f662:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   8f664:	4610      	mov	r0, r2
   8f666:	4798      	blx	r3
   8f668:	4603      	mov	r3, r0
   8f66a:	461a      	mov	r2, r3
   8f66c:	4b50      	ldr	r3, [pc, #320]	; (8f7b0 <Cl_SysStat_System_Status_Query+0x530>)
   8f66e:	4951      	ldr	r1, [pc, #324]	; (8f7b4 <Cl_SysStat_System_Status_Query+0x534>)
   8f670:	4610      	mov	r0, r2
   8f672:	4798      	blx	r3
   8f674:	4603      	mov	r3, r0
   8f676:	66fb      	str	r3, [r7, #108]	; 0x6c
	cl_sys_statbuffer.cond_bicarb = conductivity_CS2 ;
   8f678:	4b52      	ldr	r3, [pc, #328]	; (8f7c4 <Cl_SysStat_System_Status_Query+0x544>)
   8f67a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   8f67c:	4798      	blx	r3
   8f67e:	4603      	mov	r3, r0
   8f680:	b29a      	uxth	r2, r3
   8f682:	4b51      	ldr	r3, [pc, #324]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f684:	87da      	strh	r2, [r3, #62]	; 0x3e
	
	// ----------------added Gopal for conductivity CS1 -------------------------
	
	raw_data = sv_sys_statbuffer.cond_acid;
   8f686:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   8f688:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	conductivity_CS1 = cl_utilities_CalConductivity(raw_data,(cl_sys_statbuffer.Temp3status)/100);
   8f68c:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
   8f690:	4b4d      	ldr	r3, [pc, #308]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8f694:	4a50      	ldr	r2, [pc, #320]	; (8f7d8 <Cl_SysStat_System_Status_Query+0x558>)
   8f696:	fba2 2303 	umull	r2, r3, r2, r3
   8f69a:	095b      	lsrs	r3, r3, #5
   8f69c:	b29b      	uxth	r3, r3
   8f69e:	461a      	mov	r2, r3
   8f6a0:	4b4e      	ldr	r3, [pc, #312]	; (8f7dc <Cl_SysStat_System_Status_Query+0x55c>)
   8f6a2:	4610      	mov	r0, r2
   8f6a4:	4798      	blx	r3
   8f6a6:	4603      	mov	r3, r0
   8f6a8:	4619      	mov	r1, r3
   8f6aa:	4620      	mov	r0, r4
   8f6ac:	4b4c      	ldr	r3, [pc, #304]	; (8f7e0 <Cl_SysStat_System_Status_Query+0x560>)
   8f6ae:	4798      	blx	r3
   8f6b0:	66b8      	str	r0, [r7, #104]	; 0x68
	//avgcond = avgcond + conductivity_CS3;
	
	conductivity_CS1 = (conductivity_CS1*9 + conductivity_CS1)/10;
   8f6b2:	4b47      	ldr	r3, [pc, #284]	; (8f7d0 <Cl_SysStat_System_Status_Query+0x550>)
   8f6b4:	4947      	ldr	r1, [pc, #284]	; (8f7d4 <Cl_SysStat_System_Status_Query+0x554>)
   8f6b6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   8f6b8:	4798      	blx	r3
   8f6ba:	4603      	mov	r3, r0
   8f6bc:	461a      	mov	r2, r3
   8f6be:	4b3f      	ldr	r3, [pc, #252]	; (8f7bc <Cl_SysStat_System_Status_Query+0x53c>)
   8f6c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   8f6c2:	4610      	mov	r0, r2
   8f6c4:	4798      	blx	r3
   8f6c6:	4603      	mov	r3, r0
   8f6c8:	461a      	mov	r2, r3
   8f6ca:	4b39      	ldr	r3, [pc, #228]	; (8f7b0 <Cl_SysStat_System_Status_Query+0x530>)
   8f6cc:	4939      	ldr	r1, [pc, #228]	; (8f7b4 <Cl_SysStat_System_Status_Query+0x534>)
   8f6ce:	4610      	mov	r0, r2
   8f6d0:	4798      	blx	r3
   8f6d2:	4603      	mov	r3, r0
   8f6d4:	66bb      	str	r3, [r7, #104]	; 0x68
	cl_sys_statbuffer.cond_acid = conductivity_CS1 ;
   8f6d6:	4b3b      	ldr	r3, [pc, #236]	; (8f7c4 <Cl_SysStat_System_Status_Query+0x544>)
   8f6d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   8f6da:	4798      	blx	r3
   8f6dc:	4603      	mov	r3, r0
   8f6de:	b29a      	uxth	r2, r3
   8f6e0:	4b39      	ldr	r3, [pc, #228]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f6e2:	879a      	strh	r2, [r3, #60]	; 0x3c
	
	
	
	//------------------manav02 added for pressure globalization----------------------------------------------------------------
	
	raw_data = sv_sys_statbuffer.ps1status;
   8f6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   8f6e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	PS1_bar = raw_data;
   8f6ea:	4a3f      	ldr	r2, [pc, #252]	; (8f7e8 <Cl_SysStat_System_Status_Query+0x568>)
   8f6ec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8f6f0:	8013      	strh	r3, [r2, #0]
// 			PS1_bar = (65536 - raw_data) *(-1);
// 		}
// 		else
// 		PS1_bar = (float)raw_data;
		
		pressure_final_ps1 = (0.091009 * PS1_bar) + 491.794;
   8f6f2:	4b3d      	ldr	r3, [pc, #244]	; (8f7e8 <Cl_SysStat_System_Status_Query+0x568>)
   8f6f4:	f9b3 2000 	ldrsh.w	r2, [r3]
   8f6f8:	4b3c      	ldr	r3, [pc, #240]	; (8f7ec <Cl_SysStat_System_Status_Query+0x56c>)
   8f6fa:	4610      	mov	r0, r2
   8f6fc:	4798      	blx	r3
   8f6fe:	4c3c      	ldr	r4, [pc, #240]	; (8f7f0 <Cl_SysStat_System_Status_Query+0x570>)
   8f700:	a327      	add	r3, pc, #156	; (adr r3, 8f7a0 <Cl_SysStat_System_Status_Query+0x520>)
   8f702:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f706:	47a0      	blx	r4
   8f708:	4603      	mov	r3, r0
   8f70a:	460c      	mov	r4, r1
   8f70c:	4618      	mov	r0, r3
   8f70e:	4621      	mov	r1, r4
   8f710:	4c38      	ldr	r4, [pc, #224]	; (8f7f4 <Cl_SysStat_System_Status_Query+0x574>)
   8f712:	a325      	add	r3, pc, #148	; (adr r3, 8f7a8 <Cl_SysStat_System_Status_Query+0x528>)
   8f714:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f718:	47a0      	blx	r4
   8f71a:	4603      	mov	r3, r0
   8f71c:	460c      	mov	r4, r1
   8f71e:	4619      	mov	r1, r3
   8f720:	4622      	mov	r2, r4
   8f722:	4b35      	ldr	r3, [pc, #212]	; (8f7f8 <Cl_SysStat_System_Status_Query+0x578>)
   8f724:	4608      	mov	r0, r1
   8f726:	4611      	mov	r1, r2
   8f728:	4798      	blx	r3
   8f72a:	4602      	mov	r2, r0
   8f72c:	4b33      	ldr	r3, [pc, #204]	; (8f7fc <Cl_SysStat_System_Status_Query+0x57c>)
   8f72e:	601a      	str	r2, [r3, #0]
	
		cl_sys_statbuffer.ps1status = 	pressure_final_ps1 + 1000 ;
   8f730:	4b32      	ldr	r3, [pc, #200]	; (8f7fc <Cl_SysStat_System_Status_Query+0x57c>)
   8f732:	681a      	ldr	r2, [r3, #0]
   8f734:	4b21      	ldr	r3, [pc, #132]	; (8f7bc <Cl_SysStat_System_Status_Query+0x53c>)
   8f736:	4932      	ldr	r1, [pc, #200]	; (8f800 <Cl_SysStat_System_Status_Query+0x580>)
   8f738:	4610      	mov	r0, r2
   8f73a:	4798      	blx	r3
   8f73c:	4603      	mov	r3, r0
   8f73e:	461a      	mov	r2, r3
   8f740:	4b20      	ldr	r3, [pc, #128]	; (8f7c4 <Cl_SysStat_System_Status_Query+0x544>)
   8f742:	4610      	mov	r0, r2
   8f744:	4798      	blx	r3
   8f746:	4603      	mov	r3, r0
   8f748:	b29a      	uxth	r2, r3
   8f74a:	4b1f      	ldr	r3, [pc, #124]	; (8f7c8 <Cl_SysStat_System_Status_Query+0x548>)
   8f74c:	845a      	strh	r2, [r3, #34]	; 0x22
	
	raw_data = sv_sys_statbuffer.ps2status;
   8f74e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   8f750:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	PS2_bar = raw_data;
   8f754:	4a2b      	ldr	r2, [pc, #172]	; (8f804 <Cl_SysStat_System_Status_Query+0x584>)
   8f756:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8f75a:	8013      	strh	r3, [r2, #0]
// 		PS2_bar = (65536 - raw_data) *(-1);
// 	}
// 	else
// 	PS2_bar = (float)raw_data;
	
	pressure_final_ps2 = (0.091009 * PS2_bar) + 491.794;
   8f75c:	4b29      	ldr	r3, [pc, #164]	; (8f804 <Cl_SysStat_System_Status_Query+0x584>)
   8f75e:	f9b3 2000 	ldrsh.w	r2, [r3]
   8f762:	4b22      	ldr	r3, [pc, #136]	; (8f7ec <Cl_SysStat_System_Status_Query+0x56c>)
   8f764:	4610      	mov	r0, r2
   8f766:	4798      	blx	r3
   8f768:	4c21      	ldr	r4, [pc, #132]	; (8f7f0 <Cl_SysStat_System_Status_Query+0x570>)
   8f76a:	a30d      	add	r3, pc, #52	; (adr r3, 8f7a0 <Cl_SysStat_System_Status_Query+0x520>)
   8f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f770:	47a0      	blx	r4
   8f772:	4603      	mov	r3, r0
   8f774:	460c      	mov	r4, r1
   8f776:	4618      	mov	r0, r3
   8f778:	4621      	mov	r1, r4
   8f77a:	4c1e      	ldr	r4, [pc, #120]	; (8f7f4 <Cl_SysStat_System_Status_Query+0x574>)
   8f77c:	a30a      	add	r3, pc, #40	; (adr r3, 8f7a8 <Cl_SysStat_System_Status_Query+0x528>)
   8f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f782:	47a0      	blx	r4
   8f784:	4603      	mov	r3, r0
   8f786:	460c      	mov	r4, r1
   8f788:	4619      	mov	r1, r3
   8f78a:	4622      	mov	r2, r4
   8f78c:	4b1a      	ldr	r3, [pc, #104]	; (8f7f8 <Cl_SysStat_System_Status_Query+0x578>)
   8f78e:	4608      	mov	r0, r1
   8f790:	4611      	mov	r1, r2
   8f792:	4798      	blx	r3
   8f794:	4602      	mov	r2, r0
   8f796:	4b1c      	ldr	r3, [pc, #112]	; (8f808 <Cl_SysStat_System_Status_Query+0x588>)
   8f798:	601a      	str	r2, [r3, #0]
   8f79a:	e037      	b.n	8f80c <Cl_SysStat_System_Status_Query+0x58c>
   8f79c:	f3af 8000 	nop.w
   8f7a0:	a6a44418 	.word	0xa6a44418
   8f7a4:	3fb74c5d 	.word	0x3fb74c5d
   8f7a8:	39581062 	.word	0x39581062
   8f7ac:	407ebcb4 	.word	0x407ebcb4
   8f7b0:	000a8111 	.word	0x000a8111
   8f7b4:	41200000 	.word	0x41200000
   8f7b8:	20071930 	.word	0x20071930
   8f7bc:	000a7d99 	.word	0x000a7d99
   8f7c0:	41a00000 	.word	0x41a00000
   8f7c4:	000a8381 	.word	0x000a8381
   8f7c8:	2007216c 	.word	0x2007216c
   8f7cc:	00090ad1 	.word	0x00090ad1
   8f7d0:	000a7fa9 	.word	0x000a7fa9
   8f7d4:	41100000 	.word	0x41100000
   8f7d8:	51eb851f 	.word	0x51eb851f
   8f7dc:	000a7f01 	.word	0x000a7f01
   8f7e0:	00093f31 	.word	0x00093f31
   8f7e4:	200718f8 	.word	0x200718f8
   8f7e8:	200718fe 	.word	0x200718fe
   8f7ec:	000a765d 	.word	0x000a765d
   8f7f0:	000a7729 	.word	0x000a7729
   8f7f4:	000a73c5 	.word	0x000a73c5
   8f7f8:	000a7ced 	.word	0x000a7ced
   8f7fc:	20071730 	.word	0x20071730
   8f800:	447a0000 	.word	0x447a0000
   8f804:	20071900 	.word	0x20071900
   8f808:	20071734 	.word	0x20071734
	
	cl_sys_statbuffer.ps2status = 	pressure_final_ps2 + 1000 ;
   8f80c:	4b6c      	ldr	r3, [pc, #432]	; (8f9c0 <Cl_SysStat_System_Status_Query+0x740>)
   8f80e:	681a      	ldr	r2, [r3, #0]
   8f810:	4b6c      	ldr	r3, [pc, #432]	; (8f9c4 <Cl_SysStat_System_Status_Query+0x744>)
   8f812:	496d      	ldr	r1, [pc, #436]	; (8f9c8 <Cl_SysStat_System_Status_Query+0x748>)
   8f814:	4610      	mov	r0, r2
   8f816:	4798      	blx	r3
   8f818:	4603      	mov	r3, r0
   8f81a:	461a      	mov	r2, r3
   8f81c:	4b6b      	ldr	r3, [pc, #428]	; (8f9cc <Cl_SysStat_System_Status_Query+0x74c>)
   8f81e:	4610      	mov	r0, r2
   8f820:	4798      	blx	r3
   8f822:	4603      	mov	r3, r0
   8f824:	b29a      	uxth	r2, r3
   8f826:	4b6a      	ldr	r3, [pc, #424]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f828:	849a      	strh	r2, [r3, #36]	; 0x24
	
	raw_data = sv_sys_statbuffer.ps3status;
   8f82a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   8f82c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	PS3_bar = raw_data;
   8f830:	4a68      	ldr	r2, [pc, #416]	; (8f9d4 <Cl_SysStat_System_Status_Query+0x754>)
   8f832:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8f836:	8013      	strh	r3, [r2, #0]
// 		PS3_bar = (65536 - raw_data) *(-1);
// 	}
// 	else
// 	PS3_bar = (float)raw_data;
	
	pressure_final_ps3 = (0.091009 * PS3_bar) + 491.794;
   8f838:	4b66      	ldr	r3, [pc, #408]	; (8f9d4 <Cl_SysStat_System_Status_Query+0x754>)
   8f83a:	f9b3 2000 	ldrsh.w	r2, [r3]
   8f83e:	4b66      	ldr	r3, [pc, #408]	; (8f9d8 <Cl_SysStat_System_Status_Query+0x758>)
   8f840:	4610      	mov	r0, r2
   8f842:	4798      	blx	r3
   8f844:	4c65      	ldr	r4, [pc, #404]	; (8f9dc <Cl_SysStat_System_Status_Query+0x75c>)
   8f846:	a35a      	add	r3, pc, #360	; (adr r3, 8f9b0 <Cl_SysStat_System_Status_Query+0x730>)
   8f848:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f84c:	47a0      	blx	r4
   8f84e:	4603      	mov	r3, r0
   8f850:	460c      	mov	r4, r1
   8f852:	4618      	mov	r0, r3
   8f854:	4621      	mov	r1, r4
   8f856:	4c62      	ldr	r4, [pc, #392]	; (8f9e0 <Cl_SysStat_System_Status_Query+0x760>)
   8f858:	a357      	add	r3, pc, #348	; (adr r3, 8f9b8 <Cl_SysStat_System_Status_Query+0x738>)
   8f85a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f85e:	47a0      	blx	r4
   8f860:	4603      	mov	r3, r0
   8f862:	460c      	mov	r4, r1
   8f864:	4619      	mov	r1, r3
   8f866:	4622      	mov	r2, r4
   8f868:	4b5e      	ldr	r3, [pc, #376]	; (8f9e4 <Cl_SysStat_System_Status_Query+0x764>)
   8f86a:	4608      	mov	r0, r1
   8f86c:	4611      	mov	r1, r2
   8f86e:	4798      	blx	r3
   8f870:	4602      	mov	r2, r0
   8f872:	4b5d      	ldr	r3, [pc, #372]	; (8f9e8 <Cl_SysStat_System_Status_Query+0x768>)
   8f874:	601a      	str	r2, [r3, #0]
	
	cl_sys_statbuffer.ps3status = 	pressure_final_ps3 + 1000 ;
   8f876:	4b5c      	ldr	r3, [pc, #368]	; (8f9e8 <Cl_SysStat_System_Status_Query+0x768>)
   8f878:	681a      	ldr	r2, [r3, #0]
   8f87a:	4b52      	ldr	r3, [pc, #328]	; (8f9c4 <Cl_SysStat_System_Status_Query+0x744>)
   8f87c:	4952      	ldr	r1, [pc, #328]	; (8f9c8 <Cl_SysStat_System_Status_Query+0x748>)
   8f87e:	4610      	mov	r0, r2
   8f880:	4798      	blx	r3
   8f882:	4603      	mov	r3, r0
   8f884:	461a      	mov	r2, r3
   8f886:	4b51      	ldr	r3, [pc, #324]	; (8f9cc <Cl_SysStat_System_Status_Query+0x74c>)
   8f888:	4610      	mov	r0, r2
   8f88a:	4798      	blx	r3
   8f88c:	4603      	mov	r3, r0
   8f88e:	b29a      	uxth	r2, r3
   8f890:	4b4f      	ldr	r3, [pc, #316]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f892:	84da      	strh	r2, [r3, #38]	; 0x26
	
	raw_data = 	cl_sys_statbuffer.aptstatus;
   8f894:	4b4e      	ldr	r3, [pc, #312]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f896:	8a1b      	ldrh	r3, [r3, #16]
   8f898:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	
	//calibration_apt(raw_data);
	
	//Apt_bar = ((Apt_bar* 49) + pressure_final_apt)/50;
//manav03 added	
	if(raw_data > 32268){
   8f89c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f8a0:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f8a4:	4293      	cmp	r3, r2
   8f8a6:	dd04      	ble.n	8f8b2 <Cl_SysStat_System_Status_Query+0x632>
		
		Apt_bar  = (65536 -raw_data)*(-1);
   8f8a8:	4a50      	ldr	r2, [pc, #320]	; (8f9ec <Cl_SysStat_System_Status_Query+0x76c>)
   8f8aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8f8ae:	8013      	strh	r3, [r2, #0]
   8f8b0:	e00c      	b.n	8f8cc <Cl_SysStat_System_Status_Query+0x64c>
		
	}
	else{
		Apt_bar = (float)raw_data;
   8f8b2:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8f8b6:	4b4e      	ldr	r3, [pc, #312]	; (8f9f0 <Cl_SysStat_System_Status_Query+0x770>)
   8f8b8:	4610      	mov	r0, r2
   8f8ba:	4798      	blx	r3
   8f8bc:	4602      	mov	r2, r0
   8f8be:	4b4d      	ldr	r3, [pc, #308]	; (8f9f4 <Cl_SysStat_System_Status_Query+0x774>)
   8f8c0:	4610      	mov	r0, r2
   8f8c2:	4798      	blx	r3
   8f8c4:	4603      	mov	r3, r0
   8f8c6:	b21a      	sxth	r2, r3
   8f8c8:	4b48      	ldr	r3, [pc, #288]	; (8f9ec <Cl_SysStat_System_Status_Query+0x76c>)
   8f8ca:	801a      	strh	r2, [r3, #0]
	}
	
	cl_sys_statbuffer.aptstatus = 	Apt_bar/10 + 1000 ;
   8f8cc:	4b47      	ldr	r3, [pc, #284]	; (8f9ec <Cl_SysStat_System_Status_Query+0x76c>)
   8f8ce:	f9b3 3000 	ldrsh.w	r3, [r3]
   8f8d2:	4a49      	ldr	r2, [pc, #292]	; (8f9f8 <Cl_SysStat_System_Status_Query+0x778>)
   8f8d4:	fb82 1203 	smull	r1, r2, r2, r3
   8f8d8:	1092      	asrs	r2, r2, #2
   8f8da:	17db      	asrs	r3, r3, #31
   8f8dc:	1ad3      	subs	r3, r2, r3
   8f8de:	b21b      	sxth	r3, r3
   8f8e0:	b29b      	uxth	r3, r3
   8f8e2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8f8e6:	b29a      	uxth	r2, r3
   8f8e8:	4b39      	ldr	r3, [pc, #228]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f8ea:	821a      	strh	r2, [r3, #16]
	
	raw_data = 	cl_sys_statbuffer.vptstatus;
   8f8ec:	4b38      	ldr	r3, [pc, #224]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f8ee:	8a5b      	ldrh	r3, [r3, #18]
   8f8f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
//manav03 added	
	if(raw_data > 32268){
   8f8f4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
   8f8f8:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f8fc:	4293      	cmp	r3, r2
   8f8fe:	dd04      	ble.n	8f90a <Cl_SysStat_System_Status_Query+0x68a>
		
		Vpt_bar  = (65536 -raw_data)*(-1);
   8f900:	4a3e      	ldr	r2, [pc, #248]	; (8f9fc <Cl_SysStat_System_Status_Query+0x77c>)
   8f902:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   8f906:	8013      	strh	r3, [r2, #0]
   8f908:	e00c      	b.n	8f924 <Cl_SysStat_System_Status_Query+0x6a4>
		
	}
	else{
		Vpt_bar = (float)raw_data;
   8f90a:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
   8f90e:	4b38      	ldr	r3, [pc, #224]	; (8f9f0 <Cl_SysStat_System_Status_Query+0x770>)
   8f910:	4610      	mov	r0, r2
   8f912:	4798      	blx	r3
   8f914:	4602      	mov	r2, r0
   8f916:	4b37      	ldr	r3, [pc, #220]	; (8f9f4 <Cl_SysStat_System_Status_Query+0x774>)
   8f918:	4610      	mov	r0, r2
   8f91a:	4798      	blx	r3
   8f91c:	4603      	mov	r3, r0
   8f91e:	b21a      	sxth	r2, r3
   8f920:	4b36      	ldr	r3, [pc, #216]	; (8f9fc <Cl_SysStat_System_Status_Query+0x77c>)
   8f922:	801a      	strh	r2, [r3, #0]
	}
	
	cl_sys_statbuffer.vptstatus = 	Vpt_bar/10 + 1000 ;
   8f924:	4b35      	ldr	r3, [pc, #212]	; (8f9fc <Cl_SysStat_System_Status_Query+0x77c>)
   8f926:	f9b3 3000 	ldrsh.w	r3, [r3]
   8f92a:	4a33      	ldr	r2, [pc, #204]	; (8f9f8 <Cl_SysStat_System_Status_Query+0x778>)
   8f92c:	fb82 1203 	smull	r1, r2, r2, r3
   8f930:	1092      	asrs	r2, r2, #2
   8f932:	17db      	asrs	r3, r3, #31
   8f934:	1ad3      	subs	r3, r2, r3
   8f936:	b21b      	sxth	r3, r3
   8f938:	b29b      	uxth	r3, r3
   8f93a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   8f93e:	b29a      	uxth	r2, r3
   8f940:	4b23      	ldr	r3, [pc, #140]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f942:	825a      	strh	r2, [r3, #18]
// 	Vpt_bar = ((Vpt_bar* 49) + pressure_final_vpSt)/50;
// 	
// 	cl_sys_statbuffer.vptstatus =  Vpt_bar + 1000 ;
	
	//-------------------------------------------------------------------------------------------------
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8f944:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   8f948:	4b21      	ldr	r3, [pc, #132]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f94a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8f94e:	8a3a      	ldrh	r2, [r7, #16]
   8f950:	4b1f      	ldr	r3, [pc, #124]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f952:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8f954:	8a7a      	ldrh	r2, [r7, #18]
   8f956:	4b1e      	ldr	r3, [pc, #120]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f958:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8f95a:	89fa      	ldrh	r2, [r7, #14]
   8f95c:	4b1c      	ldr	r3, [pc, #112]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f95e:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8f960:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
   8f964:	4b1a      	ldr	r3, [pc, #104]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f966:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8f96a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   8f96e:	4b18      	ldr	r3, [pc, #96]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	cl_sys_statbuffer.BP_DEC = sv_sys_statbuffer.BP_DEC;
   8f974:	897a      	ldrh	r2, [r7, #10]
   8f976:	4b16      	ldr	r3, [pc, #88]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f978:	80da      	strh	r2, [r3, #6]
	cl_sys_statbuffer.BP_INC = sv_sys_statbuffer.BP_INC;
   8f97a:	893a      	ldrh	r2, [r7, #8]
   8f97c:	4b14      	ldr	r3, [pc, #80]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f97e:	809a      	strh	r2, [r3, #4]
	cl_sys_statbuffer.PowerFailure = sv_sys_statbuffer.PowerFailure;
   8f980:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   8f984:	4b12      	ldr	r3, [pc, #72]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f986:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	cl_sys_statbuffer.VC_status= sv_sys_statbuffer.VC_status;
   8f98a:	8b3a      	ldrh	r2, [r7, #24]
   8f98c:	4b10      	ldr	r3, [pc, #64]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f98e:	829a      	strh	r2, [r3, #20]
	cl_sys_statbuffer.acid_fd_back=sv_sys_statbuffer.acid_fd_back;
   8f990:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
   8f994:	4b0e      	ldr	r3, [pc, #56]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	cl_sys_statbuffer.bicarb_fd_back=sv_sys_statbuffer.bicarb_fd_back;
   8f99a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
   8f99e:	4b0c      	ldr	r3, [pc, #48]	; (8f9d0 <Cl_SysStat_System_Status_Query+0x750>)
   8f9a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8f9a4:	2300      	movs	r3, #0
}
   8f9a6:	4618      	mov	r0, r3
   8f9a8:	377c      	adds	r7, #124	; 0x7c
   8f9aa:	46bd      	mov	sp, r7
   8f9ac:	bd90      	pop	{r4, r7, pc}
   8f9ae:	bf00      	nop
   8f9b0:	a6a44418 	.word	0xa6a44418
   8f9b4:	3fb74c5d 	.word	0x3fb74c5d
   8f9b8:	39581062 	.word	0x39581062
   8f9bc:	407ebcb4 	.word	0x407ebcb4
   8f9c0:	20071734 	.word	0x20071734
   8f9c4:	000a7d99 	.word	0x000a7d99
   8f9c8:	447a0000 	.word	0x447a0000
   8f9cc:	000a8381 	.word	0x000a8381
   8f9d0:	2007216c 	.word	0x2007216c
   8f9d4:	20071902 	.word	0x20071902
   8f9d8:	000a765d 	.word	0x000a765d
   8f9dc:	000a7729 	.word	0x000a7729
   8f9e0:	000a73c5 	.word	0x000a73c5
   8f9e4:	000a7ced 	.word	0x000a7ced
   8f9e8:	20071738 	.word	0x20071738
   8f9ec:	20071904 	.word	0x20071904
   8f9f0:	000a7f01 	.word	0x000a7f01
   8f9f4:	000a8335 	.word	0x000a8335
   8f9f8:	66666667 	.word	0x66666667
   8f9fc:	20071906 	.word	0x20071906

0008fa00 <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodeType 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8fa00:	b480      	push	{r7}
   8fa02:	b085      	sub	sp, #20
   8fa04:	af00      	add	r7, sp, #0
   8fa06:	4603      	mov	r3, r0
   8fa08:	6039      	str	r1, [r7, #0]
   8fa0a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType RetVal;
	Cl_Uint16Type tempdata=0;
   8fa0c:	2300      	movs	r3, #0
   8fa0e:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8fa10:	79fb      	ldrb	r3, [r7, #7]
   8fa12:	3b01      	subs	r3, #1
   8fa14:	2b2f      	cmp	r3, #47	; 0x2f
   8fa16:	f200 81f5 	bhi.w	8fe04 <Cl_SysStat_GetSensor_Status_Query+0x404>
   8fa1a:	a201      	add	r2, pc, #4	; (adr r2, 8fa20 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8fa20:	0008fdcd 	.word	0x0008fdcd
   8fa24:	0008fe05 	.word	0x0008fe05
   8fa28:	0008fb47 	.word	0x0008fb47
   8fa2c:	0008fb57 	.word	0x0008fb57
   8fa30:	0008fb67 	.word	0x0008fb67
   8fa34:	0008fba3 	.word	0x0008fba3
   8fa38:	0008fb77 	.word	0x0008fb77
   8fa3c:	0008fbb1 	.word	0x0008fbb1
   8fa40:	0008fbdb 	.word	0x0008fbdb
   8fa44:	0008fbe9 	.word	0x0008fbe9
   8fa48:	0008fbf7 	.word	0x0008fbf7
   8fa4c:	0008fc25 	.word	0x0008fc25
   8fa50:	0008fc53 	.word	0x0008fc53
   8fa54:	0008fc63 	.word	0x0008fc63
   8fa58:	0008fc91 	.word	0x0008fc91
   8fa5c:	0008fcbf 	.word	0x0008fcbf
   8fa60:	0008fe05 	.word	0x0008fe05
   8fa64:	0008fced 	.word	0x0008fced
   8fa68:	0008fd25 	.word	0x0008fd25
   8fa6c:	0008fd53 	.word	0x0008fd53
   8fa70:	0008fbbf 	.word	0x0008fbbf
   8fa74:	0008fe05 	.word	0x0008fe05
   8fa78:	0008fd85 	.word	0x0008fd85
   8fa7c:	0008fd93 	.word	0x0008fd93
   8fa80:	0008fdbd 	.word	0x0008fdbd
   8fa84:	0008fbcd 	.word	0x0008fbcd
   8fa88:	0008fda1 	.word	0x0008fda1
   8fa8c:	0008fdaf 	.word	0x0008fdaf
   8fa90:	0008fb1d 	.word	0x0008fb1d
   8fa94:	0008fb2b 	.word	0x0008fb2b
   8fa98:	0008fb39 	.word	0x0008fb39
   8fa9c:	0008fafd 	.word	0x0008fafd
   8faa0:	0008fb0d 	.word	0x0008fb0d
   8faa4:	0008fae1 	.word	0x0008fae1
   8faa8:	0008faef 	.word	0x0008faef
   8faac:	0008fe05 	.word	0x0008fe05
   8fab0:	0008fdd9 	.word	0x0008fdd9
   8fab4:	0008fde5 	.word	0x0008fde5
   8fab8:	0008fdf5 	.word	0x0008fdf5
   8fabc:	0008fe05 	.word	0x0008fe05
   8fac0:	0008fe05 	.word	0x0008fe05
   8fac4:	0008fe05 	.word	0x0008fe05
   8fac8:	0008fe05 	.word	0x0008fe05
   8facc:	0008fe05 	.word	0x0008fe05
   8fad0:	0008fe05 	.word	0x0008fe05
   8fad4:	0008fe05 	.word	0x0008fe05
   8fad8:	0008fe05 	.word	0x0008fe05
   8fadc:	0008fd77 	.word	0x0008fd77
		{
			case SENSOR_ACID_COND:
			tempdata =  cl_sys_statbuffer.cond_acid;
   8fae0:	4b8a      	ldr	r3, [pc, #552]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fae2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8fae4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fae6:	683b      	ldr	r3, [r7, #0]
   8fae8:	89fa      	ldrh	r2, [r7, #14]
   8faea:	801a      	strh	r2, [r3, #0]
			break;
   8faec:	e18b      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BICARB_COND:
			tempdata =  cl_sys_statbuffer.cond_bicarb;
   8faee:	4b87      	ldr	r3, [pc, #540]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8faf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8faf2:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8faf4:	683b      	ldr	r3, [r7, #0]
   8faf6:	89fa      	ldrh	r2, [r7, #14]
   8faf8:	801a      	strh	r2, [r3, #0]
			break;
   8fafa:	e184      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_ACID_INLET:
			tempdata =  cl_sys_statbuffer.acid_inlet_status;
   8fafc:	4b83      	ldr	r3, [pc, #524]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fafe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   8fb02:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb04:	683b      	ldr	r3, [r7, #0]
   8fb06:	89fa      	ldrh	r2, [r7, #14]
   8fb08:	801a      	strh	r2, [r3, #0]
			break;
   8fb0a:	e17c      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BICARB_INLET:
			
			tempdata =  cl_sys_statbuffer.bicarb_inlet_status;
   8fb0c:	4b7f      	ldr	r3, [pc, #508]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
   8fb12:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb14:	683b      	ldr	r3, [r7, #0]
   8fb16:	89fa      	ldrh	r2, [r7, #14]
   8fb18:	801a      	strh	r2, [r3, #0]
			
			break;
   8fb1a:	e174      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BP_INC_M:
			tempdata =  cl_sys_statbuffer.BP_INC;
   8fb1c:	4b7b      	ldr	r3, [pc, #492]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb1e:	889b      	ldrh	r3, [r3, #4]
   8fb20:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb22:	683b      	ldr	r3, [r7, #0]
   8fb24:	89fa      	ldrh	r2, [r7, #14]
   8fb26:	801a      	strh	r2, [r3, #0]
			break;
   8fb28:	e16d      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BP_DEC_M:
			tempdata =  cl_sys_statbuffer.BP_DEC;
   8fb2a:	4b78      	ldr	r3, [pc, #480]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb2c:	88db      	ldrh	r3, [r3, #6]
   8fb2e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb30:	683b      	ldr	r3, [r7, #0]
   8fb32:	89fa      	ldrh	r2, [r7, #14]
   8fb34:	801a      	strh	r2, [r3, #0]
			break;
   8fb36:	e166      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BP_ON_OFF_M:
			tempdata =  cl_sys_statbuffer.BP_ON_OFF;
   8fb38:	4b74      	ldr	r3, [pc, #464]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb3a:	891b      	ldrh	r3, [r3, #8]
   8fb3c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb3e:	683b      	ldr	r3, [r7, #0]
   8fb40:	89fa      	ldrh	r2, [r7, #14]
   8fb42:	801a      	strh	r2, [r3, #0]
			break;
   8fb44:	e15f      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8fb46:	4b71      	ldr	r3, [pc, #452]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8fb4c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb4e:	683b      	ldr	r3, [r7, #0]
   8fb50:	89fa      	ldrh	r2, [r7, #14]
   8fb52:	801a      	strh	r2, [r3, #0]
			break;
   8fb54:	e157      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8fb56:	4b6d      	ldr	r3, [pc, #436]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb58:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
   8fb5c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb5e:	683b      	ldr	r3, [r7, #0]
   8fb60:	89fa      	ldrh	r2, [r7, #14]
   8fb62:	801a      	strh	r2, [r3, #0]
			break;
   8fb64:	e14f      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8fb66:	4b69      	ldr	r3, [pc, #420]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8fb6c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fb6e:	683b      	ldr	r3, [r7, #0]
   8fb70:	89fa      	ldrh	r2, [r7, #14]
   8fb72:	801a      	strh	r2, [r3, #0]
			break;
   8fb74:	e147      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8fb76:	4b66      	ldr	r3, [pc, #408]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fb78:	7f9b      	ldrb	r3, [r3, #30]
   8fb7a:	f083 0301 	eor.w	r3, r3, #1
   8fb7e:	b2db      	uxtb	r3, r3
   8fb80:	2b00      	cmp	r3, #0
   8fb82:	d006      	beq.n	8fb92 <Cl_SysStat_GetSensor_Status_Query+0x192>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8fb84:	4b61      	ldr	r3, [pc, #388]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fb86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8fb88:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fb8a:	683b      	ldr	r3, [r7, #0]
   8fb8c:	89fa      	ldrh	r2, [r7, #14]
   8fb8e:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8fb90:	e139      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8fb92:	4b5f      	ldr	r3, [pc, #380]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fb94:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
   8fb98:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fb9a:	683b      	ldr	r3, [r7, #0]
   8fb9c:	89fa      	ldrh	r2, [r7, #14]
   8fb9e:	801a      	strh	r2, [r3, #0]
			}
			break;
   8fba0:	e131      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8fba2:	4b5a      	ldr	r3, [pc, #360]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fba4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   8fba6:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fba8:	683b      	ldr	r3, [r7, #0]
   8fbaa:	89fa      	ldrh	r2, [r7, #14]
   8fbac:	801a      	strh	r2, [r3, #0]
			break;
   8fbae:	e12a      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8fbb0:	4b56      	ldr	r3, [pc, #344]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fbb2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8fbb4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fbb6:	683b      	ldr	r3, [r7, #0]
   8fbb8:	89fa      	ldrh	r2, [r7, #14]
   8fbba:	801a      	strh	r2, [r3, #0]
			break;
   8fbbc:	e123      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8fbbe:	4b53      	ldr	r3, [pc, #332]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fbc0:	8b9b      	ldrh	r3, [r3, #28]
   8fbc2:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fbc4:	683b      	ldr	r3, [r7, #0]
   8fbc6:	89fa      	ldrh	r2, [r7, #14]
   8fbc8:	801a      	strh	r2, [r3, #0]
			break;
   8fbca:	e11c      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8fbcc:	4b4f      	ldr	r3, [pc, #316]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fbce:	8c1b      	ldrh	r3, [r3, #32]
   8fbd0:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fbd2:	683b      	ldr	r3, [r7, #0]
   8fbd4:	89fa      	ldrh	r2, [r7, #14]
   8fbd6:	801a      	strh	r2, [r3, #0]
			break;
   8fbd8:	e115      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8fbda:	4b4c      	ldr	r3, [pc, #304]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fbdc:	8b1b      	ldrh	r3, [r3, #24]
   8fbde:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fbe0:	683b      	ldr	r3, [r7, #0]
   8fbe2:	89fa      	ldrh	r2, [r7, #14]
   8fbe4:	801a      	strh	r2, [r3, #0]
			break;
   8fbe6:	e10e      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8fbe8:	4b48      	ldr	r3, [pc, #288]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fbea:	8b5b      	ldrh	r3, [r3, #26]
   8fbec:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fbee:	683b      	ldr	r3, [r7, #0]
   8fbf0:	89fa      	ldrh	r2, [r7, #14]
   8fbf2:	801a      	strh	r2, [r3, #0]
			break;
   8fbf4:	e107      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8fbf6:	4b46      	ldr	r3, [pc, #280]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fbf8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8fbfc:	f083 0301 	eor.w	r3, r3, #1
   8fc00:	b2db      	uxtb	r3, r3
   8fc02:	2b00      	cmp	r3, #0
   8fc04:	d006      	beq.n	8fc14 <Cl_SysStat_GetSensor_Status_Query+0x214>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8fc06:	4b41      	ldr	r3, [pc, #260]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fc08:	8a1b      	ldrh	r3, [r3, #16]
   8fc0a:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8fc0c:	683b      	ldr	r3, [r7, #0]
   8fc0e:	89fa      	ldrh	r2, [r7, #14]
   8fc10:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8fc12:	e0f8      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8fc14:	4b3e      	ldr	r3, [pc, #248]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fc16:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
   8fc1a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fc1c:	683b      	ldr	r3, [r7, #0]
   8fc1e:	89fa      	ldrh	r2, [r7, #14]
   8fc20:	801a      	strh	r2, [r3, #0]
			}

			break;
   8fc22:	e0f0      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8fc24:	4b3a      	ldr	r3, [pc, #232]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fc26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8fc2a:	f083 0301 	eor.w	r3, r3, #1
   8fc2e:	b2db      	uxtb	r3, r3
   8fc30:	2b00      	cmp	r3, #0
   8fc32:	d006      	beq.n	8fc42 <Cl_SysStat_GetSensor_Status_Query+0x242>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8fc34:	4b35      	ldr	r3, [pc, #212]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fc36:	8a5b      	ldrh	r3, [r3, #18]
   8fc38:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fc3a:	683b      	ldr	r3, [r7, #0]
   8fc3c:	89fa      	ldrh	r2, [r7, #14]
   8fc3e:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8fc40:	e0e1      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8fc42:	4b33      	ldr	r3, [pc, #204]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fc44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   8fc48:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fc4a:	683b      	ldr	r3, [r7, #0]
   8fc4c:	89fa      	ldrh	r2, [r7, #14]
   8fc4e:	801a      	strh	r2, [r3, #0]
			}
			break;
   8fc50:	e0d9      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8fc52:	4b2e      	ldr	r3, [pc, #184]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fc54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
   8fc58:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8fc5a:	683b      	ldr	r3, [r7, #0]
   8fc5c:	89fa      	ldrh	r2, [r7, #14]
   8fc5e:	801a      	strh	r2, [r3, #0]
			break;
   8fc60:	e0d1      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8fc62:	4b2b      	ldr	r3, [pc, #172]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fc64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8fc68:	f083 0301 	eor.w	r3, r3, #1
   8fc6c:	b2db      	uxtb	r3, r3
   8fc6e:	2b00      	cmp	r3, #0
   8fc70:	d006      	beq.n	8fc80 <Cl_SysStat_GetSensor_Status_Query+0x280>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8fc72:	4b26      	ldr	r3, [pc, #152]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fc74:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8fc76:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8fc78:	683b      	ldr	r3, [r7, #0]
   8fc7a:	89fa      	ldrh	r2, [r7, #14]
   8fc7c:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8fc7e:	e0c2      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8fc80:	4b23      	ldr	r3, [pc, #140]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fc82:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
   8fc86:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8fc88:	683b      	ldr	r3, [r7, #0]
   8fc8a:	89fa      	ldrh	r2, [r7, #14]
   8fc8c:	801a      	strh	r2, [r3, #0]
					}
			break;
   8fc8e:	e0ba      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8fc90:	4b1f      	ldr	r3, [pc, #124]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fc92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8fc96:	f083 0301 	eor.w	r3, r3, #1
   8fc9a:	b2db      	uxtb	r3, r3
   8fc9c:	2b00      	cmp	r3, #0
   8fc9e:	d006      	beq.n	8fcae <Cl_SysStat_GetSensor_Status_Query+0x2ae>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   8fca0:	4b1a      	ldr	r3, [pc, #104]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fca2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8fca4:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8fca6:	683b      	ldr	r3, [r7, #0]
   8fca8:	89fa      	ldrh	r2, [r7, #14]
   8fcaa:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8fcac:	e0ab      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   8fcae:	4b18      	ldr	r3, [pc, #96]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fcb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
   8fcb4:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8fcb6:	683b      	ldr	r3, [r7, #0]
   8fcb8:	89fa      	ldrh	r2, [r7, #14]
   8fcba:	801a      	strh	r2, [r3, #0]
					}
			break;
   8fcbc:	e0a3      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   8fcbe:	4b14      	ldr	r3, [pc, #80]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fcc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8fcc4:	f083 0301 	eor.w	r3, r3, #1
   8fcc8:	b2db      	uxtb	r3, r3
   8fcca:	2b00      	cmp	r3, #0
   8fccc:	d006      	beq.n	8fcdc <Cl_SysStat_GetSensor_Status_Query+0x2dc>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   8fcce:	4b0f      	ldr	r3, [pc, #60]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fcd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8fcd2:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8fcd4:	683b      	ldr	r3, [r7, #0]
   8fcd6:	89fa      	ldrh	r2, [r7, #14]
   8fcd8:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8fcda:	e094      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   8fcdc:	4b0c      	ldr	r3, [pc, #48]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fcde:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
   8fce2:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8fce4:	683b      	ldr	r3, [r7, #0]
   8fce6:	89fa      	ldrh	r2, [r7, #14]
   8fce8:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8fcea:	e08c      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   8fcec:	4b08      	ldr	r3, [pc, #32]	; (8fd10 <Cl_SysStat_GetSensor_Status_Query+0x310>)
   8fcee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8fcf2:	f083 0301 	eor.w	r3, r3, #1
   8fcf6:	b2db      	uxtb	r3, r3
   8fcf8:	2b00      	cmp	r3, #0
   8fcfa:	d00b      	beq.n	8fd14 <Cl_SysStat_GetSensor_Status_Query+0x314>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   8fcfc:	4b03      	ldr	r3, [pc, #12]	; (8fd0c <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8fcfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8fd00:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8fd02:	683b      	ldr	r3, [r7, #0]
   8fd04:	89fa      	ldrh	r2, [r7, #14]
   8fd06:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   8fd08:	e07d      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
   8fd0a:	bf00      	nop
   8fd0c:	2007216c 	.word	0x2007216c
   8fd10:	2007256c 	.word	0x2007256c
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8fd14:	4b3f      	ldr	r3, [pc, #252]	; (8fe14 <Cl_SysStat_GetSensor_Status_Query+0x414>)
   8fd16:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
   8fd1a:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8fd1c:	683b      	ldr	r3, [r7, #0]
   8fd1e:	89fa      	ldrh	r2, [r7, #14]
   8fd20:	801a      	strh	r2, [r3, #0]
						}


			break;
   8fd22:	e070      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   8fd24:	4b3b      	ldr	r3, [pc, #236]	; (8fe14 <Cl_SysStat_GetSensor_Status_Query+0x414>)
   8fd26:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8fd2a:	f083 0301 	eor.w	r3, r3, #1
   8fd2e:	b2db      	uxtb	r3, r3
   8fd30:	2b00      	cmp	r3, #0
   8fd32:	d006      	beq.n	8fd42 <Cl_SysStat_GetSensor_Status_Query+0x342>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   8fd34:	4b38      	ldr	r3, [pc, #224]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fd36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8fd38:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fd3a:	683b      	ldr	r3, [r7, #0]
   8fd3c:	89fa      	ldrh	r2, [r7, #14]
   8fd3e:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8fd40:	e061      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   8fd42:	4b34      	ldr	r3, [pc, #208]	; (8fe14 <Cl_SysStat_GetSensor_Status_Query+0x414>)
   8fd44:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
   8fd48:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fd4a:	683b      	ldr	r3, [r7, #0]
   8fd4c:	89fa      	ldrh	r2, [r7, #14]
   8fd4e:	801a      	strh	r2, [r3, #0]
			}
			break;
   8fd50:	e059      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_TEMP3STATUS:
			
			if(error_flag == 0)
   8fd52:	4b32      	ldr	r3, [pc, #200]	; (8fe1c <Cl_SysStat_GetSensor_Status_Query+0x41c>)
   8fd54:	781b      	ldrb	r3, [r3, #0]
   8fd56:	2b00      	cmp	r3, #0
   8fd58:	d106      	bne.n	8fd68 <Cl_SysStat_GetSensor_Status_Query+0x368>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   8fd5a:	4b2f      	ldr	r3, [pc, #188]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fd5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8fd5e:	81fb      	strh	r3, [r7, #14]
				//Cl_Uint16Type data=0;
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
   8fd60:	683b      	ldr	r3, [r7, #0]
   8fd62:	89fa      	ldrh	r2, [r7, #14]
   8fd64:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  400;
				*pdata  = tempdata;
			}
			break;
   8fd66:	e04e      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  400;
   8fd68:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8fd6c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fd6e:	683b      	ldr	r3, [r7, #0]
   8fd70:	89fa      	ldrh	r2, [r7, #14]
   8fd72:	801a      	strh	r2, [r3, #0]
			}
			break;
   8fd74:	e047      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   8fd76:	4b28      	ldr	r3, [pc, #160]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fd78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8fd7a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fd7c:	683b      	ldr	r3, [r7, #0]
   8fd7e:	89fa      	ldrh	r2, [r7, #14]
   8fd80:	801a      	strh	r2, [r3, #0]
			break;
   8fd82:	e040      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8fd84:	4b24      	ldr	r3, [pc, #144]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fd86:	899b      	ldrh	r3, [r3, #12]
   8fd88:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fd8a:	683b      	ldr	r3, [r7, #0]
   8fd8c:	89fa      	ldrh	r2, [r7, #14]
   8fd8e:	801a      	strh	r2, [r3, #0]
			break;
   8fd90:	e039      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8fd92:	4b21      	ldr	r3, [pc, #132]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fd94:	89db      	ldrh	r3, [r3, #14]
   8fd96:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fd98:	683b      	ldr	r3, [r7, #0]
   8fd9a:	89fa      	ldrh	r2, [r7, #14]
   8fd9c:	801a      	strh	r2, [r3, #0]
			break;
   8fd9e:	e032      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8fda0:	4b1d      	ldr	r3, [pc, #116]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fda2:	895b      	ldrh	r3, [r3, #10]
   8fda4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fda6:	683b      	ldr	r3, [r7, #0]
   8fda8:	89fa      	ldrh	r2, [r7, #14]
   8fdaa:	801a      	strh	r2, [r3, #0]
			break;
   8fdac:	e02b      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   8fdae:	4b1a      	ldr	r3, [pc, #104]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fdb0:	885b      	ldrh	r3, [r3, #2]
   8fdb2:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fdb4:	683b      	ldr	r3, [r7, #0]
   8fdb6:	89fa      	ldrh	r2, [r7, #14]
   8fdb8:	801a      	strh	r2, [r3, #0]
			break;
   8fdba:	e024      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   8fdbc:	4b16      	ldr	r3, [pc, #88]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fdbe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   8fdc2:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fdc4:	683b      	ldr	r3, [r7, #0]
   8fdc6:	89fa      	ldrh	r2, [r7, #14]
   8fdc8:	801a      	strh	r2, [r3, #0]
			break;
   8fdca:	e01c      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   8fdcc:	4b12      	ldr	r3, [pc, #72]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fdce:	781b      	ldrb	r3, [r3, #0]
   8fdd0:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fdd2:	683b      	ldr	r3, [r7, #0]
   8fdd4:	89fa      	ldrh	r2, [r7, #14]
   8fdd6:	801a      	strh	r2, [r3, #0]
			case SENSOR_VC_F_B:	
				tempdata =  cl_sys_statbuffer.VC_status;
   8fdd8:	4b0f      	ldr	r3, [pc, #60]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fdda:	8a9b      	ldrh	r3, [r3, #20]
   8fddc:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fdde:	683b      	ldr	r3, [r7, #0]
   8fde0:	89fa      	ldrh	r2, [r7, #14]
   8fde2:	801a      	strh	r2, [r3, #0]
			case SENSOR_ACID_F_B:
				tempdata = cl_sys_statbuffer.acid_fd_back;
   8fde4:	4b0c      	ldr	r3, [pc, #48]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fde6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
   8fdea:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8fdec:	683b      	ldr	r3, [r7, #0]
   8fdee:	89fa      	ldrh	r2, [r7, #14]
   8fdf0:	801a      	strh	r2, [r3, #0]
				break;
   8fdf2:	e008      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			case SENSOR_BICARB_F_B:
			     tempdata = cl_sys_statbuffer.bicarb_fd_back;
   8fdf4:	4b08      	ldr	r3, [pc, #32]	; (8fe18 <Cl_SysStat_GetSensor_Status_Query+0x418>)
   8fdf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
   8fdfa:	81fb      	strh	r3, [r7, #14]
				 *pdata  = tempdata;
   8fdfc:	683b      	ldr	r3, [r7, #0]
   8fdfe:	89fa      	ldrh	r2, [r7, #14]
   8fe00:	801a      	strh	r2, [r3, #0]
				 break;	
   8fe02:	e000      	b.n	8fe06 <Cl_SysStat_GetSensor_Status_Query+0x406>
			default:
			break;
   8fe04:	bf00      	nop
		}
	return CL_OK;
   8fe06:	2300      	movs	r3, #0
}
   8fe08:	4618      	mov	r0, r3
   8fe0a:	3714      	adds	r7, #20
   8fe0c:	46bd      	mov	sp, r7
   8fe0e:	bc80      	pop	{r7}
   8fe10:	4770      	bx	lr
   8fe12:	bf00      	nop
   8fe14:	2007256c 	.word	0x2007256c
   8fe18:	2007216c 	.word	0x2007216c
   8fe1c:	20071815 	.word	0x20071815

0008fe20 <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   8fe20:	b590      	push	{r4, r7, lr}
   8fe22:	b09d      	sub	sp, #116	; 0x74
   8fe24:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8fe26:	2304      	movs	r3, #4
   8fe28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	int16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8fe2c:	2300      	movs	r3, #0
   8fe2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int16_t sensordata=0,temp2=0;
   8fe32:	2300      	movs	r3, #0
   8fe34:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   8fe38:	2300      	movs	r3, #0
   8fe3a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8fe3e:	2300      	movs	r3, #0
   8fe40:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	int16_t sensordatamillivolts =0;
   8fe44:	2300      	movs	r3, #0
   8fe46:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	int16_t tempdata =0,count1;
   8fe4a:	2300      	movs	r3, #0
   8fe4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	int16_t Pressuredatainmillibars =0;
   8fe50:	2300      	movs	r3, #0
   8fe52:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	Cl_Uint8Type* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	uint16_t raw_cond =0;
   8fe56:	2300      	movs	r3, #0
   8fe58:	85fb      	strh	r3, [r7, #46]	; 0x2e
	StateLogDatatype data;
	Cl_Uint8Type dataarray[36] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   8fe5a:	1d3b      	adds	r3, r7, #4
   8fe5c:	2224      	movs	r2, #36	; 0x24
   8fe5e:	2100      	movs	r1, #0
   8fe60:	4618      	mov	r0, r3
   8fe62:	4bab      	ldr	r3, [pc, #684]	; (90110 <Cl_SysStat_mean_status_update+0x2f0>)
   8fe64:	4798      	blx	r3
	Count_500ms++;
   8fe66:	4bab      	ldr	r3, [pc, #684]	; (90114 <Cl_SysStat_mean_status_update+0x2f4>)
   8fe68:	781b      	ldrb	r3, [r3, #0]
   8fe6a:	3301      	adds	r3, #1
   8fe6c:	b2da      	uxtb	r2, r3
   8fe6e:	4ba9      	ldr	r3, [pc, #676]	; (90114 <Cl_SysStat_mean_status_update+0x2f4>)
   8fe70:	701a      	strb	r2, [r3, #0]
	
	float TS3;
	Cl_Uint8Type count=0;
   8fe72:	2300      	movs	r3, #0
   8fe74:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	static Cl_Uint8Type  flow_counter =0 ;
	static Cl_Uint16Type counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8fe78:	4ba7      	ldr	r3, [pc, #668]	; (90118 <Cl_SysStat_mean_status_update+0x2f8>)
   8fe7a:	781b      	ldrb	r3, [r3, #0]
   8fe7c:	2b00      	cmp	r3, #0
   8fe7e:	f000 83a2 	beq.w	905c6 <Cl_SysStat_mean_status_update+0x7a6>
	{
	
		if(syncdone)
   8fe82:	4ba5      	ldr	r3, [pc, #660]	; (90118 <Cl_SysStat_mean_status_update+0x2f8>)
   8fe84:	781b      	ldrb	r3, [r3, #0]
   8fe86:	2b00      	cmp	r3, #0
   8fe88:	f000 839d 	beq.w	905c6 <Cl_SysStat_mean_status_update+0x7a6>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8fe8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
   8fe90:	4619      	mov	r1, r3
   8fe92:	2012      	movs	r0, #18
   8fe94:	4ba1      	ldr	r3, [pc, #644]	; (9011c <Cl_SysStat_mean_status_update+0x2fc>)
   8fe96:	4798      	blx	r3
			{
							
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp1 =	(avgtmp1*9 + sensordata)/10;
   8fe98:	4ba1      	ldr	r3, [pc, #644]	; (90120 <Cl_SysStat_mean_status_update+0x300>)
   8fe9a:	681a      	ldr	r2, [r3, #0]
   8fe9c:	4ba1      	ldr	r3, [pc, #644]	; (90124 <Cl_SysStat_mean_status_update+0x304>)
   8fe9e:	49a2      	ldr	r1, [pc, #648]	; (90128 <Cl_SysStat_mean_status_update+0x308>)
   8fea0:	4610      	mov	r0, r2
   8fea2:	4798      	blx	r3
   8fea4:	4603      	mov	r3, r0
   8fea6:	461c      	mov	r4, r3
   8fea8:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
   8feac:	4b9f      	ldr	r3, [pc, #636]	; (9012c <Cl_SysStat_mean_status_update+0x30c>)
   8feae:	4610      	mov	r0, r2
   8feb0:	4798      	blx	r3
   8feb2:	4602      	mov	r2, r0
   8feb4:	4b9e      	ldr	r3, [pc, #632]	; (90130 <Cl_SysStat_mean_status_update+0x310>)
   8feb6:	4611      	mov	r1, r2
   8feb8:	4620      	mov	r0, r4
   8feba:	4798      	blx	r3
   8febc:	4603      	mov	r3, r0
   8febe:	461a      	mov	r2, r3
   8fec0:	4b9c      	ldr	r3, [pc, #624]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   8fec2:	499d      	ldr	r1, [pc, #628]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   8fec4:	4610      	mov	r0, r2
   8fec6:	4798      	blx	r3
   8fec8:	4603      	mov	r3, r0
   8feca:	461a      	mov	r2, r3
   8fecc:	4b94      	ldr	r3, [pc, #592]	; (90120 <Cl_SysStat_mean_status_update+0x300>)
   8fece:	601a      	str	r2, [r3, #0]
// //				temp = temp - 25 +12 + 2.5;
// 				bulk_data[0] = res_temp_value/10;
// 				//bulk_data[0] = toggle_count_flow;
//				bulk_data[0] = sensordata/10;
			
				bulk_data[0] = avgtmp1/10; // manav changed
   8fed0:	4b93      	ldr	r3, [pc, #588]	; (90120 <Cl_SysStat_mean_status_update+0x300>)
   8fed2:	681a      	ldr	r2, [r3, #0]
   8fed4:	4b97      	ldr	r3, [pc, #604]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   8fed6:	4998      	ldr	r1, [pc, #608]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   8fed8:	4610      	mov	r0, r2
   8feda:	4798      	blx	r3
   8fedc:	4603      	mov	r3, r0
   8fede:	461a      	mov	r2, r3
   8fee0:	4b96      	ldr	r3, [pc, #600]	; (9013c <Cl_SysStat_mean_status_update+0x31c>)
   8fee2:	4610      	mov	r0, r2
   8fee4:	4798      	blx	r3
   8fee6:	4603      	mov	r3, r0
   8fee8:	b21b      	sxth	r3, r3
   8feea:	863b      	strh	r3, [r7, #48]	; 0x30
				
				
				data.fourbytedata = avgtmp1/10;
   8feec:	4b8c      	ldr	r3, [pc, #560]	; (90120 <Cl_SysStat_mean_status_update+0x300>)
   8feee:	681a      	ldr	r2, [r3, #0]
   8fef0:	4b90      	ldr	r3, [pc, #576]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   8fef2:	4991      	ldr	r1, [pc, #580]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   8fef4:	4610      	mov	r0, r2
   8fef6:	4798      	blx	r3
   8fef8:	4603      	mov	r3, r0
   8fefa:	461a      	mov	r2, r3
   8fefc:	4b90      	ldr	r3, [pc, #576]	; (90140 <Cl_SysStat_mean_status_update+0x320>)
   8fefe:	4610      	mov	r0, r2
   8ff00:	4798      	blx	r3
   8ff02:	4603      	mov	r3, r0
   8ff04:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   8ff06:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   8ff0a:	1c5a      	adds	r2, r3, #1
   8ff0c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   8ff10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   8ff14:	f107 0170 	add.w	r1, r7, #112	; 0x70
   8ff18:	440b      	add	r3, r1
   8ff1a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   8ff1e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   8ff22:	1c5a      	adds	r2, r3, #1
   8ff24:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   8ff28:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   8ff2c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   8ff30:	440b      	add	r3, r1
   8ff32:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   8ff36:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   8ff3a:	1c5a      	adds	r2, r3, #1
   8ff3c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   8ff40:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   8ff44:	f107 0170 	add.w	r1, r7, #112	; 0x70
   8ff48:	440b      	add	r3, r1
   8ff4a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   8ff4e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   8ff52:	1c5a      	adds	r2, r3, #1
   8ff54:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   8ff58:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   8ff5c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   8ff60:	440b      	add	r3, r1
   8ff62:	f803 2c6c 	strb.w	r2, [r3, #-108]
				
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8ff66:	f107 0350 	add.w	r3, r7, #80	; 0x50
   8ff6a:	4619      	mov	r1, r3
   8ff6c:	2013      	movs	r0, #19
   8ff6e:	4b6b      	ldr	r3, [pc, #428]	; (9011c <Cl_SysStat_mean_status_update+0x2fc>)
   8ff70:	4798      	blx	r3
			{
// 					
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp2 =	((avgtmp2*9 + sensordata)/10 );
   8ff72:	4b74      	ldr	r3, [pc, #464]	; (90144 <Cl_SysStat_mean_status_update+0x324>)
   8ff74:	681a      	ldr	r2, [r3, #0]
   8ff76:	4b6b      	ldr	r3, [pc, #428]	; (90124 <Cl_SysStat_mean_status_update+0x304>)
   8ff78:	496b      	ldr	r1, [pc, #428]	; (90128 <Cl_SysStat_mean_status_update+0x308>)
   8ff7a:	4610      	mov	r0, r2
   8ff7c:	4798      	blx	r3
   8ff7e:	4603      	mov	r3, r0
   8ff80:	461c      	mov	r4, r3
   8ff82:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
   8ff86:	4b69      	ldr	r3, [pc, #420]	; (9012c <Cl_SysStat_mean_status_update+0x30c>)
   8ff88:	4610      	mov	r0, r2
   8ff8a:	4798      	blx	r3
   8ff8c:	4602      	mov	r2, r0
   8ff8e:	4b68      	ldr	r3, [pc, #416]	; (90130 <Cl_SysStat_mean_status_update+0x310>)
   8ff90:	4611      	mov	r1, r2
   8ff92:	4620      	mov	r0, r4
   8ff94:	4798      	blx	r3
   8ff96:	4603      	mov	r3, r0
   8ff98:	461a      	mov	r2, r3
   8ff9a:	4b66      	ldr	r3, [pc, #408]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   8ff9c:	4966      	ldr	r1, [pc, #408]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   8ff9e:	4610      	mov	r0, r2
   8ffa0:	4798      	blx	r3
   8ffa2:	4603      	mov	r3, r0
   8ffa4:	461a      	mov	r2, r3
   8ffa6:	4b67      	ldr	r3, [pc, #412]	; (90144 <Cl_SysStat_mean_status_update+0x324>)
   8ffa8:	601a      	str	r2, [r3, #0]
// 			//	temp = temp -45;                                      // commented for machine 2
// 			//	temp = temp - 25 +12;
// //				temp = temp - 25 + 8.1 ;
// 				bulk_data[1] = (res_temp_value- 4)/10;
//				bulk_data[1] = sensordata /10;
			bulk_data[1] = avgtmp2 /10; // manav changed
   8ffaa:	4b66      	ldr	r3, [pc, #408]	; (90144 <Cl_SysStat_mean_status_update+0x324>)
   8ffac:	681a      	ldr	r2, [r3, #0]
   8ffae:	4b61      	ldr	r3, [pc, #388]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   8ffb0:	4961      	ldr	r1, [pc, #388]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   8ffb2:	4610      	mov	r0, r2
   8ffb4:	4798      	blx	r3
   8ffb6:	4603      	mov	r3, r0
   8ffb8:	461a      	mov	r2, r3
   8ffba:	4b60      	ldr	r3, [pc, #384]	; (9013c <Cl_SysStat_mean_status_update+0x31c>)
   8ffbc:	4610      	mov	r0, r2
   8ffbe:	4798      	blx	r3
   8ffc0:	4603      	mov	r3, r0
   8ffc2:	b21b      	sxth	r3, r3
   8ffc4:	867b      	strh	r3, [r7, #50]	; 0x32
				
				data.fourbytedata = avgtmp2/10;
   8ffc6:	4b5f      	ldr	r3, [pc, #380]	; (90144 <Cl_SysStat_mean_status_update+0x324>)
   8ffc8:	681a      	ldr	r2, [r3, #0]
   8ffca:	4b5a      	ldr	r3, [pc, #360]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   8ffcc:	495a      	ldr	r1, [pc, #360]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   8ffce:	4610      	mov	r0, r2
   8ffd0:	4798      	blx	r3
   8ffd2:	4603      	mov	r3, r0
   8ffd4:	461a      	mov	r2, r3
   8ffd6:	4b5a      	ldr	r3, [pc, #360]	; (90140 <Cl_SysStat_mean_status_update+0x320>)
   8ffd8:	4610      	mov	r0, r2
   8ffda:	4798      	blx	r3
   8ffdc:	4603      	mov	r3, r0
   8ffde:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   8ffe0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   8ffe4:	1c5a      	adds	r2, r3, #1
   8ffe6:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   8ffea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   8ffee:	f107 0170 	add.w	r1, r7, #112	; 0x70
   8fff2:	440b      	add	r3, r1
   8fff4:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   8fff8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   8fffc:	1c5a      	adds	r2, r3, #1
   8fffe:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90002:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   90006:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9000a:	440b      	add	r3, r1
   9000c:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   90010:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90014:	1c5a      	adds	r2, r3, #1
   90016:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9001a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   9001e:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90022:	440b      	add	r3, r1
   90024:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   90028:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9002c:	1c5a      	adds	r2, r3, #1
   9002e:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90032:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90036:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9003a:	440b      	add	r3, r1
   9003c:	f803 2c6c 	strb.w	r2, [r3, #-108]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   90040:	f107 0350 	add.w	r3, r7, #80	; 0x50
   90044:	4619      	mov	r1, r3
   90046:	2014      	movs	r0, #20
   90048:	4b34      	ldr	r3, [pc, #208]	; (9011c <Cl_SysStat_mean_status_update+0x2fc>)
   9004a:	4798      	blx	r3
			{
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp3 =	(avgtmp3*9 + sensordata)/10;
   9004c:	4b3e      	ldr	r3, [pc, #248]	; (90148 <Cl_SysStat_mean_status_update+0x328>)
   9004e:	681a      	ldr	r2, [r3, #0]
   90050:	4b34      	ldr	r3, [pc, #208]	; (90124 <Cl_SysStat_mean_status_update+0x304>)
   90052:	4935      	ldr	r1, [pc, #212]	; (90128 <Cl_SysStat_mean_status_update+0x308>)
   90054:	4610      	mov	r0, r2
   90056:	4798      	blx	r3
   90058:	4603      	mov	r3, r0
   9005a:	461c      	mov	r4, r3
   9005c:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
   90060:	4b32      	ldr	r3, [pc, #200]	; (9012c <Cl_SysStat_mean_status_update+0x30c>)
   90062:	4610      	mov	r0, r2
   90064:	4798      	blx	r3
   90066:	4602      	mov	r2, r0
   90068:	4b31      	ldr	r3, [pc, #196]	; (90130 <Cl_SysStat_mean_status_update+0x310>)
   9006a:	4611      	mov	r1, r2
   9006c:	4620      	mov	r0, r4
   9006e:	4798      	blx	r3
   90070:	4603      	mov	r3, r0
   90072:	461a      	mov	r2, r3
   90074:	4b2f      	ldr	r3, [pc, #188]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   90076:	4930      	ldr	r1, [pc, #192]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   90078:	4610      	mov	r0, r2
   9007a:	4798      	blx	r3
   9007c:	4603      	mov	r3, r0
   9007e:	461a      	mov	r2, r3
   90080:	4b31      	ldr	r3, [pc, #196]	; (90148 <Cl_SysStat_mean_status_update+0x328>)
   90082:	601a      	str	r2, [r3, #0]
// 				TS3 = (res_temp_value/10) - 0.4;
// //				TS3 = (res_temp_value/100) - 3.1 - 2;
// //				TS3 = (avgtmp3/10) - 0.4;
// 				bulk_data[2] =  (uint16_t)(TS3); // * 10);
//				bulk_data[2] = sensordata/10;
			bulk_data[2] = avgtmp3/10;   // manav changed
   90084:	4b30      	ldr	r3, [pc, #192]	; (90148 <Cl_SysStat_mean_status_update+0x328>)
   90086:	681a      	ldr	r2, [r3, #0]
   90088:	4b2a      	ldr	r3, [pc, #168]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   9008a:	492b      	ldr	r1, [pc, #172]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   9008c:	4610      	mov	r0, r2
   9008e:	4798      	blx	r3
   90090:	4603      	mov	r3, r0
   90092:	461a      	mov	r2, r3
   90094:	4b29      	ldr	r3, [pc, #164]	; (9013c <Cl_SysStat_mean_status_update+0x31c>)
   90096:	4610      	mov	r0, r2
   90098:	4798      	blx	r3
   9009a:	4603      	mov	r3, r0
   9009c:	b21b      	sxth	r3, r3
   9009e:	86bb      	strh	r3, [r7, #52]	; 0x34
				
				data.fourbytedata = avgtmp3/10;
   900a0:	4b29      	ldr	r3, [pc, #164]	; (90148 <Cl_SysStat_mean_status_update+0x328>)
   900a2:	681a      	ldr	r2, [r3, #0]
   900a4:	4b23      	ldr	r3, [pc, #140]	; (90134 <Cl_SysStat_mean_status_update+0x314>)
   900a6:	4924      	ldr	r1, [pc, #144]	; (90138 <Cl_SysStat_mean_status_update+0x318>)
   900a8:	4610      	mov	r0, r2
   900aa:	4798      	blx	r3
   900ac:	4603      	mov	r3, r0
   900ae:	461a      	mov	r2, r3
   900b0:	4b23      	ldr	r3, [pc, #140]	; (90140 <Cl_SysStat_mean_status_update+0x320>)
   900b2:	4610      	mov	r0, r2
   900b4:	4798      	blx	r3
   900b6:	4603      	mov	r3, r0
   900b8:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   900ba:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   900be:	1c5a      	adds	r2, r3, #1
   900c0:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   900c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   900c8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   900cc:	440b      	add	r3, r1
   900ce:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   900d2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   900d6:	1c5a      	adds	r2, r3, #1
   900d8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   900dc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   900e0:	f107 0170 	add.w	r1, r7, #112	; 0x70
   900e4:	440b      	add	r3, r1
   900e6:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   900ea:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   900ee:	1c5a      	adds	r2, r3, #1
   900f0:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   900f4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   900f8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   900fc:	440b      	add	r3, r1
   900fe:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   90102:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90106:	1c5a      	adds	r2, r3, #1
   90108:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9010c:	e01e      	b.n	9014c <Cl_SysStat_mean_status_update+0x32c>
   9010e:	bf00      	nop
   90110:	000a84fd 	.word	0x000a84fd
   90114:	200718fc 	.word	0x200718fc
   90118:	20071ad0 	.word	0x20071ad0
   9011c:	0008fa01 	.word	0x0008fa01
   90120:	200718e4 	.word	0x200718e4
   90124:	000a7fa9 	.word	0x000a7fa9
   90128:	41100000 	.word	0x41100000
   9012c:	000a7f01 	.word	0x000a7f01
   90130:	000a7d99 	.word	0x000a7d99
   90134:	000a8111 	.word	0x000a8111
   90138:	41200000 	.word	0x41200000
   9013c:	000a8335 	.word	0x000a8335
   90140:	000a8381 	.word	0x000a8381
   90144:	200718e0 	.word	0x200718e0
   90148:	200718dc 	.word	0x200718dc
   9014c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90150:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90154:	440b      	add	r3, r1
   90156:	f803 2c6c 	strb.w	r2, [r3, #-108]
				
				TS3 = (float)avgtmp3 /100;
   9015a:	4b5c      	ldr	r3, [pc, #368]	; (902cc <Cl_SysStat_mean_status_update+0x4ac>)
   9015c:	681a      	ldr	r2, [r3, #0]
   9015e:	4b5c      	ldr	r3, [pc, #368]	; (902d0 <Cl_SysStat_mean_status_update+0x4b0>)
   90160:	495c      	ldr	r1, [pc, #368]	; (902d4 <Cl_SysStat_mean_status_update+0x4b4>)
   90162:	4610      	mov	r0, r2
   90164:	4798      	blx	r3
   90166:	4603      	mov	r3, r0
   90168:	65fb      	str	r3, [r7, #92]	; 0x5c
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&raw_cond);
   9016a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   9016e:	4619      	mov	r1, r3
   90170:	2007      	movs	r0, #7
   90172:	4b59      	ldr	r3, [pc, #356]	; (902d8 <Cl_SysStat_mean_status_update+0x4b8>)
   90174:	4798      	blx	r3
			}
	
	*/
	
			    //bulk_data[3] = avg_conductivity;  // manav02 commented								// multiplication for display purpose
				bulk_data[3] = raw_cond  ;         // Gopal: adjusted for set value display -50
   90176:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   90178:	b21b      	sxth	r3, r3
   9017a:	86fb      	strh	r3, [r7, #54]	; 0x36
				//data.fourbytedata = avg_conductivity; // manav02 commented
				data.fourbytedata = raw_cond/10;    // manav02 added
   9017c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   9017e:	4a57      	ldr	r2, [pc, #348]	; (902dc <Cl_SysStat_mean_status_update+0x4bc>)
   90180:	fba2 2303 	umull	r2, r3, r2, r3
   90184:	08db      	lsrs	r3, r3, #3
   90186:	b29b      	uxth	r3, r3
   90188:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   9018a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9018e:	1c5a      	adds	r2, r3, #1
   90190:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90194:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   90198:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9019c:	440b      	add	r3, r1
   9019e:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   901a2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   901a6:	1c5a      	adds	r2, r3, #1
   901a8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   901ac:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   901b0:	f107 0170 	add.w	r1, r7, #112	; 0x70
   901b4:	440b      	add	r3, r1
   901b6:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   901ba:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   901be:	1c5a      	adds	r2, r3, #1
   901c0:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   901c4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   901c8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   901cc:	440b      	add	r3, r1
   901ce:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   901d2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   901d6:	1c5a      	adds	r2, r3, #1
   901d8:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   901dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   901e0:	f107 0170 	add.w	r1, r7, #112	; 0x70
   901e4:	440b      	add	r3, r1
   901e6:	f803 2c6c 	strb.w	r2, [r3, #-108]
		//		bulk_data[3] = cond1x100;                    //   chnaged on 01072017
		
//				bulk_data[3] = raw_cond;
***********************************************************************/	
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND,&sensordata);
   901ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
   901ee:	4619      	mov	r1, r3
   901f0:	2022      	movs	r0, #34	; 0x22
   901f2:	4b39      	ldr	r3, [pc, #228]	; (902d8 <Cl_SysStat_mean_status_update+0x4b8>)
   901f4:	4798      	blx	r3
				
			}
			#endif
			//	bulk_data[0] = sensordata;
			
				if(avgcond == 0)
   901f6:	4b3a      	ldr	r3, [pc, #232]	; (902e0 <Cl_SysStat_mean_status_update+0x4c0>)
   901f8:	681a      	ldr	r2, [r3, #0]
   901fa:	4b3a      	ldr	r3, [pc, #232]	; (902e4 <Cl_SysStat_mean_status_update+0x4c4>)
   901fc:	f04f 0100 	mov.w	r1, #0
   90200:	4610      	mov	r0, r2
   90202:	4798      	blx	r3
   90204:	4603      	mov	r3, r0
   90206:	2b00      	cmp	r3, #0
   90208:	d008      	beq.n	9021c <Cl_SysStat_mean_status_update+0x3fc>
				{
					avgcond_acid = sensordata;
   9020a:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
   9020e:	4b36      	ldr	r3, [pc, #216]	; (902e8 <Cl_SysStat_mean_status_update+0x4c8>)
   90210:	4610      	mov	r0, r2
   90212:	4798      	blx	r3
   90214:	4602      	mov	r2, r0
   90216:	4b35      	ldr	r3, [pc, #212]	; (902ec <Cl_SysStat_mean_status_update+0x4cc>)
   90218:	601a      	str	r2, [r3, #0]
   9021a:	e01b      	b.n	90254 <Cl_SysStat_mean_status_update+0x434>
				}
				else
				{
					avgcond_acid =(avgcond_acid*5 + sensordata)/6;
   9021c:	4b33      	ldr	r3, [pc, #204]	; (902ec <Cl_SysStat_mean_status_update+0x4cc>)
   9021e:	681a      	ldr	r2, [r3, #0]
   90220:	4b33      	ldr	r3, [pc, #204]	; (902f0 <Cl_SysStat_mean_status_update+0x4d0>)
   90222:	4934      	ldr	r1, [pc, #208]	; (902f4 <Cl_SysStat_mean_status_update+0x4d4>)
   90224:	4610      	mov	r0, r2
   90226:	4798      	blx	r3
   90228:	4603      	mov	r3, r0
   9022a:	461c      	mov	r4, r3
   9022c:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
   90230:	4b2d      	ldr	r3, [pc, #180]	; (902e8 <Cl_SysStat_mean_status_update+0x4c8>)
   90232:	4610      	mov	r0, r2
   90234:	4798      	blx	r3
   90236:	4602      	mov	r2, r0
   90238:	4b2f      	ldr	r3, [pc, #188]	; (902f8 <Cl_SysStat_mean_status_update+0x4d8>)
   9023a:	4611      	mov	r1, r2
   9023c:	4620      	mov	r0, r4
   9023e:	4798      	blx	r3
   90240:	4603      	mov	r3, r0
   90242:	461a      	mov	r2, r3
   90244:	4b22      	ldr	r3, [pc, #136]	; (902d0 <Cl_SysStat_mean_status_update+0x4b0>)
   90246:	492d      	ldr	r1, [pc, #180]	; (902fc <Cl_SysStat_mean_status_update+0x4dc>)
   90248:	4610      	mov	r0, r2
   9024a:	4798      	blx	r3
   9024c:	4603      	mov	r3, r0
   9024e:	461a      	mov	r2, r3
   90250:	4b26      	ldr	r3, [pc, #152]	; (902ec <Cl_SysStat_mean_status_update+0x4cc>)
   90252:	601a      	str	r2, [r3, #0]
				
			//	bulk_data[3] = avgcond;
			
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   90254:	2300      	movs	r3, #0
   90256:	603b      	str	r3, [r7, #0]
				cl_tdata.Twobyte = avgcond_acid;
   90258:	4b24      	ldr	r3, [pc, #144]	; (902ec <Cl_SysStat_mean_status_update+0x4cc>)
   9025a:	681a      	ldr	r2, [r3, #0]
   9025c:	4b28      	ldr	r3, [pc, #160]	; (90300 <Cl_SysStat_mean_status_update+0x4e0>)
   9025e:	4610      	mov	r0, r2
   90260:	4798      	blx	r3
   90262:	4603      	mov	r3, r0
   90264:	b29b      	uxth	r3, r3
   90266:	803b      	strh	r3, [r7, #0]
				cl_tdata.bytearray[2] = 4;
   90268:	2304      	movs	r3, #4
   9026a:	70bb      	strb	r3, [r7, #2]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   9026c:	463b      	mov	r3, r7
   9026e:	2204      	movs	r2, #4
   90270:	4619      	mov	r1, r3
   90272:	2037      	movs	r0, #55	; 0x37
   90274:	4b23      	ldr	r3, [pc, #140]	; (90304 <Cl_SysStat_mean_status_update+0x4e4>)
   90276:	4798      	blx	r3
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND,&sensordata);
   90278:	f107 0350 	add.w	r3, r7, #80	; 0x50
   9027c:	4619      	mov	r1, r3
   9027e:	2023      	movs	r0, #35	; 0x23
   90280:	4b15      	ldr	r3, [pc, #84]	; (902d8 <Cl_SysStat_mean_status_update+0x4b8>)
   90282:	4798      	blx	r3
// 				cl_tdata.word =0;
// 				cl_tdata.Twobyte = avgcond_bicarb;
// 				cl_tdata.bytearray[2] = 6;
// 				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);

		bulk_data[0] = sensordata;
   90284:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
   90288:	863b      	strh	r3, [r7, #48]	; 0x30
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   9028a:	f107 0350 	add.w	r3, r7, #80	; 0x50
   9028e:	4619      	mov	r1, r3
   90290:	2019      	movs	r0, #25
   90292:	4b11      	ldr	r3, [pc, #68]	; (902d8 <Cl_SysStat_mean_status_update+0x4b8>)
   90294:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   90296:	2300      	movs	r3, #0
   90298:	64fb      	str	r3, [r7, #76]	; 0x4c
				cl_tdata.Twobyte = sensordata;
   9029a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
   9029e:	b29b      	uxth	r3, r3
   902a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				cl_tdata.bytearray[2] = 3;
   902a4:	2303      	movs	r3, #3
   902a6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				bulk_data[4] = sensordata; // manav changed
   902aa:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
   902ae:	873b      	strh	r3, [r7, #56]	; 0x38
				dataarray[count++] = data.bytedata[2];
				dataarray[count++] = data.bytedata[3];
				*/
				
				
				if(prev_flow_status == sensordata)
   902b0:	4b15      	ldr	r3, [pc, #84]	; (90308 <Cl_SysStat_mean_status_update+0x4e8>)
   902b2:	f9b3 2000 	ldrsh.w	r2, [r3]
   902b6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
   902ba:	429a      	cmp	r2, r3
   902bc:	d128      	bne.n	90310 <Cl_SysStat_mean_status_update+0x4f0>
				{
					if(flow_counter++ > 10)
   902be:	4b13      	ldr	r3, [pc, #76]	; (9030c <Cl_SysStat_mean_status_update+0x4ec>)
   902c0:	781b      	ldrb	r3, [r3, #0]
   902c2:	3301      	adds	r3, #1
   902c4:	b2da      	uxtb	r2, r3
   902c6:	4b11      	ldr	r3, [pc, #68]	; (9030c <Cl_SysStat_mean_status_update+0x4ec>)
   902c8:	701a      	strb	r2, [r3, #0]
   902ca:	e024      	b.n	90316 <Cl_SysStat_mean_status_update+0x4f6>
   902cc:	200718dc 	.word	0x200718dc
   902d0:	000a8111 	.word	0x000a8111
   902d4:	42c80000 	.word	0x42c80000
   902d8:	0008fa01 	.word	0x0008fa01
   902dc:	cccccccd 	.word	0xcccccccd
   902e0:	200718e8 	.word	0x200718e8
   902e4:	000a82d1 	.word	0x000a82d1
   902e8:	000a7f01 	.word	0x000a7f01
   902ec:	200718ec 	.word	0x200718ec
   902f0:	000a7fa9 	.word	0x000a7fa9
   902f4:	40a00000 	.word	0x40a00000
   902f8:	000a7d99 	.word	0x000a7d99
   902fc:	40c00000 	.word	0x40c00000
   90300:	000a8381 	.word	0x000a8381
   90304:	0009cbd5 	.word	0x0009cbd5
   90308:	20071908 	.word	0x20071908
   9030c:	2007190a 	.word	0x2007190a
					}
					
				}
				else
				{
					flow_counter = 0;
   90310:	4baf      	ldr	r3, [pc, #700]	; (905d0 <Cl_SysStat_mean_status_update+0x7b0>)
   90312:	2200      	movs	r2, #0
   90314:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   90316:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
   9031a:	4bae      	ldr	r3, [pc, #696]	; (905d4 <Cl_SysStat_mean_status_update+0x7b4>)
   9031c:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   9031e:	f107 0354 	add.w	r3, r7, #84	; 0x54
   90322:	4619      	mov	r1, r3
   90324:	200b      	movs	r0, #11
   90326:	4bac      	ldr	r3, [pc, #688]	; (905d8 <Cl_SysStat_mean_status_update+0x7b8>)
   90328:	4798      	blx	r3
// 				calibration_apt(Atp);                                   // manav02 commented
// 				aptavg = ((aptavg* 2) + pressure_final_apt)/3;
// 				cl_tdata.word = 0;
// 				cl_tdata.Twobyte = aptavg + 1000;
// 				cl_tdata.bytearray[2] = 14;
				bulk_data[5] = Atp;//cl_tdata.Twobyte;                          // manav02 changed
   9032a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
   9032e:	877b      	strh	r3, [r7, #58]	; 0x3a
				
				data.fourbytedata = Atp; //aptavg;                                    // manav02 changed
   90330:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
   90334:	62bb      	str	r3, [r7, #40]	; 0x28
				dataarray[count++] = data.bytedata[0];
   90336:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9033a:	1c5a      	adds	r2, r3, #1
   9033c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90340:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   90344:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90348:	440b      	add	r3, r1
   9034a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[1];
   9034e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90352:	1c5a      	adds	r2, r3, #1
   90354:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90358:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   9035c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90360:	440b      	add	r3, r1
   90362:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[2];
   90366:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9036a:	1c5a      	adds	r2, r3, #1
   9036c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90370:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   90374:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90378:	440b      	add	r3, r1
   9037a:	f803 2c6c 	strb.w	r2, [r3, #-108]
				dataarray[count++] = data.bytedata[3];
   9037e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90382:	1c5a      	adds	r2, r3, #1
   90384:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90388:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   9038c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90390:	440b      	add	r3, r1
   90392:	f803 2c6c 	strb.w	r2, [r3, #-108]
				
								
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   90396:	f107 0352 	add.w	r3, r7, #82	; 0x52
   9039a:	4619      	mov	r1, r3
   9039c:	200c      	movs	r0, #12
   9039e:	4b8e      	ldr	r3, [pc, #568]	; (905d8 <Cl_SysStat_mean_status_update+0x7b8>)
   903a0:	4798      	blx	r3
// 			calibration_vpt(Vtp);												// manav02 commented
// 			vptavg = ((vptavg* 2) + pressure_final_vpt)/3;
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = vptavg + 1000;
// 			cl_tdata.bytearray[2] = 15;                                         
			bulk_data[6] = Vtp;//cl_tdata.Twobyte;									// manav02 changed			
   903a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
   903a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	
	data.fourbytedata = Vtp;//vptavg;                                                    // manav02 changed
   903a8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
   903ac:	62bb      	str	r3, [r7, #40]	; 0x28
	dataarray[count++] = data.bytedata[0];
   903ae:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   903b2:	1c5a      	adds	r2, r3, #1
   903b4:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   903b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   903bc:	f107 0170 	add.w	r1, r7, #112	; 0x70
   903c0:	440b      	add	r3, r1
   903c2:	f803 2c6c 	strb.w	r2, [r3, #-108]
	dataarray[count++] = data.bytedata[1];
   903c6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   903ca:	1c5a      	adds	r2, r3, #1
   903cc:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   903d0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   903d4:	f107 0170 	add.w	r1, r7, #112	; 0x70
   903d8:	440b      	add	r3, r1
   903da:	f803 2c6c 	strb.w	r2, [r3, #-108]
	dataarray[count++] = data.bytedata[2];
   903de:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   903e2:	1c5a      	adds	r2, r3, #1
   903e4:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   903e8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   903ec:	f107 0170 	add.w	r1, r7, #112	; 0x70
   903f0:	440b      	add	r3, r1
   903f2:	f803 2c6c 	strb.w	r2, [r3, #-108]
	dataarray[count++] = data.bytedata[3];
   903f6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   903fa:	1c5a      	adds	r2, r3, #1
   903fc:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90400:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90404:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90408:	440b      	add	r3, r1
   9040a:	f803 2c6c 	strb.w	r2, [r3, #-108]
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   9040e:	f107 0356 	add.w	r3, r7, #86	; 0x56
   90412:	4619      	mov	r1, r3
   90414:	2010      	movs	r0, #16
   90416:	4b70      	ldr	r3, [pc, #448]	; (905d8 <Cl_SysStat_mean_status_update+0x7b8>)
   90418:	4798      	blx	r3
// 			}			
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps3avg;
// 			cl_tdata.bytearray[2] = 20;
// //			bulk_data[7] = cl_tdata.Twobyte;
			bulk_data[7] = Ps3;//+ 1000 ; manav02 commented
   9041a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
   9041e:	87fb      	strh	r3, [r7, #62]	; 0x3e
		data.fourbytedata = Ps3 ;
   90420:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
   90424:	62bb      	str	r3, [r7, #40]	; 0x28
		dataarray[count++] = data.bytedata[0];
   90426:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9042a:	1c5a      	adds	r2, r3, #1
   9042c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90430:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   90434:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90438:	440b      	add	r3, r1
   9043a:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[1];
   9043e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90442:	1c5a      	adds	r2, r3, #1
   90444:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90448:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   9044c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90450:	440b      	add	r3, r1
   90452:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[2];
   90456:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9045a:	1c5a      	adds	r2, r3, #1
   9045c:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90460:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   90464:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90468:	440b      	add	r3, r1
   9046a:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[3];
   9046e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90472:	1c5a      	adds	r2, r3, #1
   90474:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90478:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   9047c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90480:	440b      	add	r3, r1
   90482:	f803 2c6c 	strb.w	r2, [r3, #-108]
	
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   90486:	f107 0358 	add.w	r3, r7, #88	; 0x58
   9048a:	4619      	mov	r1, r3
   9048c:	200f      	movs	r0, #15
   9048e:	4b52      	ldr	r3, [pc, #328]	; (905d8 <Cl_SysStat_mean_status_update+0x7b8>)
   90490:	4798      	blx	r3
				PS2_bar = (float)Ps2;
				
				PS2_bar = (0.091009 * PS2_bar) + 491.794;
	*/
	
			bulk_data[8] = Ps2 ;//+ 1000  ; manav02 removed 1000
   90492:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   90496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

			data.fourbytedata = Ps2;
   9049a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   9049e:	62bb      	str	r3, [r7, #40]	; 0x28
			dataarray[count++] = data.bytedata[0];
   904a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   904a4:	1c5a      	adds	r2, r3, #1
   904a6:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   904aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   904ae:	f107 0170 	add.w	r1, r7, #112	; 0x70
   904b2:	440b      	add	r3, r1
   904b4:	f803 2c6c 	strb.w	r2, [r3, #-108]
			dataarray[count++] = data.bytedata[1];
   904b8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   904bc:	1c5a      	adds	r2, r3, #1
   904be:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   904c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   904c6:	f107 0170 	add.w	r1, r7, #112	; 0x70
   904ca:	440b      	add	r3, r1
   904cc:	f803 2c6c 	strb.w	r2, [r3, #-108]
			dataarray[count++] = data.bytedata[2];
   904d0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   904d4:	1c5a      	adds	r2, r3, #1
   904d6:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   904da:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   904de:	f107 0170 	add.w	r1, r7, #112	; 0x70
   904e2:	440b      	add	r3, r1
   904e4:	f803 2c6c 	strb.w	r2, [r3, #-108]
			dataarray[count++] = data.bytedata[3];
   904e8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   904ec:	1c5a      	adds	r2, r3, #1
   904ee:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   904f2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   904f6:	f107 0170 	add.w	r1, r7, #112	; 0x70
   904fa:	440b      	add	r3, r1
   904fc:	f803 2c6c 	strb.w	r2, [r3, #-108]
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   90500:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   90504:	4619      	mov	r1, r3
   90506:	200e      	movs	r0, #14
   90508:	4b33      	ldr	r3, [pc, #204]	; (905d8 <Cl_SysStat_mean_status_update+0x7b8>)
   9050a:	4798      	blx	r3
				
				PS1_bar = (0.091009 * PS1_bar) + 491.794;
			
			//Cl_Uint16Type ps1temp =  (int)PS1_bar + 1000 ;//* 100;
*/			
			bulk_data[9] = Ps1;// + 1000;//PS1_bar * 100; manav02 removed 1000
   9050c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
   90510:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			
			data.fourbytedata = Ps1;
   90514:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
   90518:	62bb      	str	r3, [r7, #40]	; 0x28
		dataarray[count++] = data.bytedata[0];
   9051a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9051e:	1c5a      	adds	r2, r3, #1
   90520:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90524:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   90528:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9052c:	440b      	add	r3, r1
   9052e:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[1];
   90532:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90536:	1c5a      	adds	r2, r3, #1
   90538:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9053c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
   90540:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90544:	440b      	add	r3, r1
   90546:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[2];
   9054a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   9054e:	1c5a      	adds	r2, r3, #1
   90550:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   90554:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
   90558:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9055c:	440b      	add	r3, r1
   9055e:	f803 2c6c 	strb.w	r2, [r3, #-108]
		dataarray[count++] = data.bytedata[3];
   90562:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
   90566:	1c5a      	adds	r2, r3, #1
   90568:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
   9056c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   90570:	f107 0170 	add.w	r1, r7, #112	; 0x70
   90574:	440b      	add	r3, r1
   90576:	f803 2c6c 	strb.w	r2, [r3, #-108]
	
			if(ps1avg > 300)
   9057a:	4b18      	ldr	r3, [pc, #96]	; (905dc <Cl_SysStat_mean_status_update+0x7bc>)
   9057c:	681a      	ldr	r2, [r3, #0]
   9057e:	4b18      	ldr	r3, [pc, #96]	; (905e0 <Cl_SysStat_mean_status_update+0x7c0>)
   90580:	4918      	ldr	r1, [pc, #96]	; (905e4 <Cl_SysStat_mean_status_update+0x7c4>)
   90582:	4610      	mov	r0, r2
   90584:	4798      	blx	r3
   90586:	4603      	mov	r3, r0
   90588:	2b00      	cmp	r3, #0
   9058a:	d006      	beq.n	9059a <Cl_SysStat_mean_status_update+0x77a>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   9058c:	4b16      	ldr	r3, [pc, #88]	; (905e8 <Cl_SysStat_mean_status_update+0x7c8>)
   9058e:	881b      	ldrh	r3, [r3, #0]
   90590:	3301      	adds	r3, #1
   90592:	b29a      	uxth	r2, r3
   90594:	4b14      	ldr	r3, [pc, #80]	; (905e8 <Cl_SysStat_mean_status_update+0x7c8>)
   90596:	801a      	strh	r2, [r3, #0]
   90598:	e00c      	b.n	905b4 <Cl_SysStat_mean_status_update+0x794>
			}
			else
			{
				 valve_4_count++;
   9059a:	4b13      	ldr	r3, [pc, #76]	; (905e8 <Cl_SysStat_mean_status_update+0x7c8>)
   9059c:	881b      	ldrh	r3, [r3, #0]
   9059e:	3301      	adds	r3, #1
   905a0:	b29a      	uxth	r2, r3
   905a2:	4b11      	ldr	r3, [pc, #68]	; (905e8 <Cl_SysStat_mean_status_update+0x7c8>)
   905a4:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   905a6:	4b10      	ldr	r3, [pc, #64]	; (905e8 <Cl_SysStat_mean_status_update+0x7c8>)
   905a8:	881b      	ldrh	r3, [r3, #0]
   905aa:	2b00      	cmp	r3, #0
   905ac:	d002      	beq.n	905b4 <Cl_SysStat_mean_status_update+0x794>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   905ae:	4b0e      	ldr	r3, [pc, #56]	; (905e8 <Cl_SysStat_mean_status_update+0x7c8>)
   905b0:	2200      	movs	r2, #0
   905b2:	801a      	strh	r2, [r3, #0]
				}
			}
	
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&dataarray,36);
   905b4:	1d3b      	adds	r3, r7, #4
   905b6:	2224      	movs	r2, #36	; 0x24
   905b8:	4619      	mov	r1, r3
   905ba:	203e      	movs	r0, #62	; 0x3e
   905bc:	4b0b      	ldr	r3, [pc, #44]	; (905ec <Cl_SysStat_mean_status_update+0x7cc>)
   905be:	4798      	blx	r3
   905c0:	4603      	mov	r3, r0
   905c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
		
	}
}
   905c6:	bf00      	nop
   905c8:	3774      	adds	r7, #116	; 0x74
   905ca:	46bd      	mov	sp, r7
   905cc:	bd90      	pop	{r4, r7, pc}
   905ce:	bf00      	nop
   905d0:	2007190a 	.word	0x2007190a
   905d4:	20071908 	.word	0x20071908
   905d8:	0008fa01 	.word	0x0008fa01
   905dc:	200718d8 	.word	0x200718d8
   905e0:	000a8321 	.word	0x000a8321
   905e4:	43960000 	.word	0x43960000
   905e8:	200718f0 	.word	0x200718f0
   905ec:	0009cbd5 	.word	0x0009cbd5

000905f0 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   905f0:	b590      	push	{r4, r7, lr}
   905f2:	b085      	sub	sp, #20
   905f4:	af00      	add	r7, sp, #0
   905f6:	4603      	mov	r3, r0
   905f8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_retval = CL_OK;
   905fa:	2300      	movs	r3, #0
   905fc:	73fb      	strb	r3, [r7, #15]
		Cl_Uint16Type temp_val  = 0, cond_millivolts = 0;
   905fe:	2300      	movs	r3, #0
   90600:	817b      	strh	r3, [r7, #10]
   90602:	2300      	movs	r3, #0
   90604:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint16Type cond_pot_val_2volts = (7000 * 1024)/10000; 
		static Cl_Uint16Type cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   90606:	4b72      	ldr	r3, [pc, #456]	; (907d0 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   90608:	781b      	ldrb	r3, [r3, #0]
   9060a:	2b00      	cmp	r3, #0
   9060c:	d002      	beq.n	90614 <Cl_Conductivity_Sensor_Controller+0x24>
   9060e:	2b02      	cmp	r3, #2
   90610:	d060      	beq.n	906d4 <Cl_Conductivity_Sensor_Controller+0xe4>
					break;
					default:break;
				}
				
			break;
			default:break;
   90612:	e0d1      	b.n	907b8 <Cl_Conductivity_Sensor_Controller+0x1c8>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   90614:	79fb      	ldrb	r3, [r7, #7]
   90616:	2b00      	cmp	r3, #0
   90618:	d003      	beq.n	90622 <Cl_Conductivity_Sensor_Controller+0x32>
   9061a:	2b02      	cmp	r3, #2
   9061c:	d023      	beq.n	90666 <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   9061e:	bf00      	nop
					}
			break;
   90620:	e0ca      	b.n	907b8 <Cl_Conductivity_Sensor_Controller+0x1c8>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   90622:	4b6c      	ldr	r3, [pc, #432]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90624:	881b      	ldrh	r3, [r3, #0]
   90626:	4618      	mov	r0, r3
   90628:	4b6b      	ldr	r3, [pc, #428]	; (907d8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   9062a:	4798      	blx	r3
						cl_wait(100);
   9062c:	2064      	movs	r0, #100	; 0x64
   9062e:	4b6b      	ldr	r3, [pc, #428]	; (907dc <Cl_Conductivity_Sensor_Controller+0x1ec>)
   90630:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   90632:	f107 030a 	add.w	r3, r7, #10
   90636:	4619      	mov	r1, r3
   90638:	2006      	movs	r0, #6
   9063a:	4b69      	ldr	r3, [pc, #420]	; (907e0 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   9063c:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   9063e:	897b      	ldrh	r3, [r7, #10]
   90640:	461a      	mov	r2, r3
   90642:	0092      	lsls	r2, r2, #2
   90644:	4413      	add	r3, r2
   90646:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   90648:	4b66      	ldr	r3, [pc, #408]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   9064a:	881b      	ldrh	r3, [r3, #0]
   9064c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   90650:	d907      	bls.n	90662 <Cl_Conductivity_Sensor_Controller+0x72>
   90652:	4b64      	ldr	r3, [pc, #400]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90654:	881b      	ldrh	r3, [r3, #0]
   90656:	f640 0297 	movw	r2, #2199	; 0x897
   9065a:	4293      	cmp	r3, r2
   9065c:	d801      	bhi.n	90662 <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   9065e:	2300      	movs	r3, #0
   90660:	e0ab      	b.n	907ba <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							return CL_ERROR;
   90662:	2304      	movs	r3, #4
   90664:	e0a9      	b.n	907ba <Cl_Conductivity_Sensor_Controller+0x1ca>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   90666:	f107 030a 	add.w	r3, r7, #10
   9066a:	4619      	mov	r1, r3
   9066c:	2006      	movs	r0, #6
   9066e:	4b5c      	ldr	r3, [pc, #368]	; (907e0 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   90670:	4798      	blx	r3
						cond_millivolts = 0.8036 * temp_val;
   90672:	897b      	ldrh	r3, [r7, #10]
   90674:	461a      	mov	r2, r3
   90676:	4b5c      	ldr	r3, [pc, #368]	; (907e8 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   90678:	4610      	mov	r0, r2
   9067a:	4798      	blx	r3
   9067c:	4c5b      	ldr	r4, [pc, #364]	; (907ec <Cl_Conductivity_Sensor_Controller+0x1fc>)
   9067e:	a352      	add	r3, pc, #328	; (adr r3, 907c8 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   90680:	e9d3 2300 	ldrd	r2, r3, [r3]
   90684:	47a0      	blx	r4
   90686:	4603      	mov	r3, r0
   90688:	460c      	mov	r4, r1
   9068a:	4619      	mov	r1, r3
   9068c:	4622      	mov	r2, r4
   9068e:	4b58      	ldr	r3, [pc, #352]	; (907f0 <Cl_Conductivity_Sensor_Controller+0x200>)
   90690:	4608      	mov	r0, r1
   90692:	4611      	mov	r1, r2
   90694:	4798      	blx	r3
   90696:	4603      	mov	r3, r0
   90698:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   9069a:	4a52      	ldr	r2, [pc, #328]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   9069c:	89bb      	ldrh	r3, [r7, #12]
   9069e:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   906a0:	4a54      	ldr	r2, [pc, #336]	; (907f4 <Cl_Conductivity_Sensor_Controller+0x204>)
   906a2:	89bb      	ldrh	r3, [r7, #12]
   906a4:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   906a6:	4b4a      	ldr	r3, [pc, #296]	; (907d0 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   906a8:	2202      	movs	r2, #2
   906aa:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   906ac:	4b4d      	ldr	r3, [pc, #308]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   906ae:	881b      	ldrh	r3, [r3, #0]
   906b0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   906b4:	d907      	bls.n	906c6 <Cl_Conductivity_Sensor_Controller+0xd6>
   906b6:	4b4b      	ldr	r3, [pc, #300]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   906b8:	881b      	ldrh	r3, [r3, #0]
   906ba:	f640 0297 	movw	r2, #2199	; 0x897
   906be:	4293      	cmp	r3, r2
   906c0:	d801      	bhi.n	906c6 <Cl_Conductivity_Sensor_Controller+0xd6>
						{
							return CL_OK;
   906c2:	2300      	movs	r3, #0
   906c4:	e079      	b.n	907ba <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   906c6:	4b43      	ldr	r3, [pc, #268]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   906c8:	881b      	ldrh	r3, [r3, #0]
   906ca:	4618      	mov	r0, r3
   906cc:	4b42      	ldr	r3, [pc, #264]	; (907d8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   906ce:	4798      	blx	r3
							return CL_OK;
   906d0:	2300      	movs	r3, #0
   906d2:	e072      	b.n	907ba <Cl_Conductivity_Sensor_Controller+0x1ca>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   906d4:	79fb      	ldrb	r3, [r7, #7]
   906d6:	2b02      	cmp	r3, #2
   906d8:	d000      	beq.n	906dc <Cl_Conductivity_Sensor_Controller+0xec>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   906da:	e06c      	b.n	907b6 <Cl_Conductivity_Sensor_Controller+0x1c6>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   906dc:	f107 030a 	add.w	r3, r7, #10
   906e0:	4619      	mov	r1, r3
   906e2:	2006      	movs	r0, #6
   906e4:	4b3e      	ldr	r3, [pc, #248]	; (907e0 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   906e6:	4798      	blx	r3
					cond_millivolts = 0.8036 * temp_val;
   906e8:	897b      	ldrh	r3, [r7, #10]
   906ea:	461a      	mov	r2, r3
   906ec:	4b3e      	ldr	r3, [pc, #248]	; (907e8 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   906ee:	4610      	mov	r0, r2
   906f0:	4798      	blx	r3
   906f2:	4c3e      	ldr	r4, [pc, #248]	; (907ec <Cl_Conductivity_Sensor_Controller+0x1fc>)
   906f4:	a334      	add	r3, pc, #208	; (adr r3, 907c8 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   906f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   906fa:	47a0      	blx	r4
   906fc:	4603      	mov	r3, r0
   906fe:	460c      	mov	r4, r1
   90700:	4619      	mov	r1, r3
   90702:	4622      	mov	r2, r4
   90704:	4b3a      	ldr	r3, [pc, #232]	; (907f0 <Cl_Conductivity_Sensor_Controller+0x200>)
   90706:	4608      	mov	r0, r1
   90708:	4611      	mov	r1, r2
   9070a:	4798      	blx	r3
   9070c:	4603      	mov	r3, r0
   9070e:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   90710:	4b34      	ldr	r3, [pc, #208]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90712:	881b      	ldrh	r3, [r3, #0]
   90714:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   90718:	d949      	bls.n	907ae <Cl_Conductivity_Sensor_Controller+0x1be>
   9071a:	4b32      	ldr	r3, [pc, #200]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   9071c:	881b      	ldrh	r3, [r3, #0]
   9071e:	f640 0297 	movw	r2, #2199	; 0x897
   90722:	4293      	cmp	r3, r2
   90724:	d843      	bhi.n	907ae <Cl_Conductivity_Sensor_Controller+0x1be>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   90726:	4b2f      	ldr	r3, [pc, #188]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   90728:	881b      	ldrh	r3, [r3, #0]
   9072a:	461a      	mov	r2, r3
   9072c:	4613      	mov	r3, r2
   9072e:	00db      	lsls	r3, r3, #3
   90730:	4413      	add	r3, r2
   90732:	005b      	lsls	r3, r3, #1
   90734:	441a      	add	r2, r3
   90736:	89bb      	ldrh	r3, [r7, #12]
   90738:	4413      	add	r3, r2
   9073a:	4a2f      	ldr	r2, [pc, #188]	; (907f8 <Cl_Conductivity_Sensor_Controller+0x208>)
   9073c:	fb82 1203 	smull	r1, r2, r2, r3
   90740:	10d2      	asrs	r2, r2, #3
   90742:	17db      	asrs	r3, r3, #31
   90744:	1ad3      	subs	r3, r2, r3
   90746:	b29a      	uxth	r2, r3
   90748:	4b26      	ldr	r3, [pc, #152]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   9074a:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   9074c:	4b25      	ldr	r3, [pc, #148]	; (907e4 <Cl_Conductivity_Sensor_Controller+0x1f4>)
   9074e:	881b      	ldrh	r3, [r3, #0]
   90750:	005a      	lsls	r2, r3, #1
   90752:	89bb      	ldrh	r3, [r7, #12]
   90754:	4413      	add	r3, r2
   90756:	4a29      	ldr	r2, [pc, #164]	; (907fc <Cl_Conductivity_Sensor_Controller+0x20c>)
   90758:	fb82 1203 	smull	r1, r2, r2, r3
   9075c:	17db      	asrs	r3, r3, #31
   9075e:	1ad3      	subs	r3, r2, r3
   90760:	b29a      	uxth	r2, r3
   90762:	4b24      	ldr	r3, [pc, #144]	; (907f4 <Cl_Conductivity_Sensor_Controller+0x204>)
   90764:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   90766:	4b23      	ldr	r3, [pc, #140]	; (907f4 <Cl_Conductivity_Sensor_Controller+0x204>)
   90768:	881b      	ldrh	r3, [r3, #0]
   9076a:	f240 72d5 	movw	r2, #2005	; 0x7d5
   9076e:	4293      	cmp	r3, r2
   90770:	d90b      	bls.n	9078a <Cl_Conductivity_Sensor_Controller+0x19a>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   90772:	4b18      	ldr	r3, [pc, #96]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90774:	881b      	ldrh	r3, [r3, #0]
   90776:	3b01      	subs	r3, #1
   90778:	b29a      	uxth	r2, r3
   9077a:	4b16      	ldr	r3, [pc, #88]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   9077c:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   9077e:	4b15      	ldr	r3, [pc, #84]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90780:	881b      	ldrh	r3, [r3, #0]
   90782:	4618      	mov	r0, r3
   90784:	4b14      	ldr	r3, [pc, #80]	; (907d8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   90786:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   90788:	e013      	b.n	907b2 <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
						}
						else if (cond_3sec_avg < 1995 )
   9078a:	4b1a      	ldr	r3, [pc, #104]	; (907f4 <Cl_Conductivity_Sensor_Controller+0x204>)
   9078c:	881b      	ldrh	r3, [r3, #0]
   9078e:	f240 72ca 	movw	r2, #1994	; 0x7ca
   90792:	4293      	cmp	r3, r2
   90794:	d80d      	bhi.n	907b2 <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   90796:	4b0f      	ldr	r3, [pc, #60]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   90798:	881b      	ldrh	r3, [r3, #0]
   9079a:	3301      	adds	r3, #1
   9079c:	b29a      	uxth	r2, r3
   9079e:	4b0d      	ldr	r3, [pc, #52]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   907a0:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   907a2:	4b0c      	ldr	r3, [pc, #48]	; (907d4 <Cl_Conductivity_Sensor_Controller+0x1e4>)
   907a4:	881b      	ldrh	r3, [r3, #0]
   907a6:	4618      	mov	r0, r3
   907a8:	4b0b      	ldr	r3, [pc, #44]	; (907d8 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   907aa:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   907ac:	e001      	b.n	907b2 <Cl_Conductivity_Sensor_Controller+0x1c2>
			
						}
					}
					else
					{
						return CL_ERROR;
   907ae:	2304      	movs	r3, #4
   907b0:	e003      	b.n	907ba <Cl_Conductivity_Sensor_Controller+0x1ca>
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   907b2:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   907b4:	bf00      	nop
					default:break;
				}
				
			break;
   907b6:	bf00      	nop
			default:break;
		}
		
	return CL_OK;
   907b8:	2300      	movs	r3, #0
   907ba:	4618      	mov	r0, r3
   907bc:	3714      	adds	r7, #20
   907be:	46bd      	mov	sp, r7
   907c0:	bd90      	pop	{r4, r7, pc}
   907c2:	bf00      	nop
   907c4:	f3af 8000 	nop.w
   907c8:	58e21965 	.word	0x58e21965
   907cc:	3fe9b717 	.word	0x3fe9b717
   907d0:	2007190b 	.word	0x2007190b
   907d4:	20070506 	.word	0x20070506
   907d8:	0009b2e1 	.word	0x0009b2e1
   907dc:	00093ea9 	.word	0x00093ea9
   907e0:	0008fa01 	.word	0x0008fa01
   907e4:	2007190c 	.word	0x2007190c
   907e8:	000a765d 	.word	0x000a765d
   907ec:	000a7729 	.word	0x000a7729
   907f0:	000a7cad 	.word	0x000a7cad
   907f4:	2007190e 	.word	0x2007190e
   907f8:	66666667 	.word	0x66666667
   907fc:	55555556 	.word	0x55555556

00090800 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   90800:	b580      	push	{r7, lr}
   90802:	b084      	sub	sp, #16
   90804:	af00      	add	r7, sp, #0
   90806:	4603      	mov	r3, r0
   90808:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   9080a:	2300      	movs	r3, #0
   9080c:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   9080e:	2300      	movs	r3, #0
   90810:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   90812:	4b91      	ldr	r3, [pc, #580]	; (90a58 <Cl_Pressure_Controller_Handler+0x258>)
   90814:	781b      	ldrb	r3, [r3, #0]
   90816:	2b01      	cmp	r3, #1
   90818:	f040 8096 	bne.w	90948 <Cl_Pressure_Controller_Handler+0x148>
	{
		switch(Cl_Ps_Event)
   9081c:	79fb      	ldrb	r3, [r7, #7]
   9081e:	2b00      	cmp	r3, #0
   90820:	f000 8110 	beq.w	90a44 <Cl_Pressure_Controller_Handler+0x244>
   90824:	2b01      	cmp	r3, #1
   90826:	d000      	beq.n	9082a <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   90828:	e111      	b.n	90a4e <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   9082a:	4b8c      	ldr	r3, [pc, #560]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   9082c:	881b      	ldrh	r3, [r3, #0]
   9082e:	2b00      	cmp	r3, #0
   90830:	d114      	bne.n	9085c <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   90832:	498b      	ldr	r1, [pc, #556]	; (90a60 <Cl_Pressure_Controller_Handler+0x260>)
   90834:	200e      	movs	r0, #14
   90836:	4b8b      	ldr	r3, [pc, #556]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90838:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   9083a:	498b      	ldr	r1, [pc, #556]	; (90a68 <Cl_Pressure_Controller_Handler+0x268>)
   9083c:	200f      	movs	r0, #15
   9083e:	4b89      	ldr	r3, [pc, #548]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90840:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   90842:	498a      	ldr	r1, [pc, #552]	; (90a6c <Cl_Pressure_Controller_Handler+0x26c>)
   90844:	2010      	movs	r0, #16
   90846:	4b87      	ldr	r3, [pc, #540]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90848:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   9084a:	4989      	ldr	r1, [pc, #548]	; (90a70 <Cl_Pressure_Controller_Handler+0x270>)
   9084c:	200b      	movs	r0, #11
   9084e:	4b85      	ldr	r3, [pc, #532]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90850:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   90852:	4988      	ldr	r1, [pc, #544]	; (90a74 <Cl_Pressure_Controller_Handler+0x274>)
   90854:	200b      	movs	r0, #11
   90856:	4b83      	ldr	r3, [pc, #524]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90858:	4798      	blx	r3
   9085a:	e063      	b.n	90924 <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   9085c:	f107 030c 	add.w	r3, r7, #12
   90860:	4619      	mov	r1, r3
   90862:	200e      	movs	r0, #14
   90864:	4b7f      	ldr	r3, [pc, #508]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90866:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   90868:	4b7d      	ldr	r3, [pc, #500]	; (90a60 <Cl_Pressure_Controller_Handler+0x260>)
   9086a:	881b      	ldrh	r3, [r3, #0]
   9086c:	461a      	mov	r2, r3
   9086e:	89bb      	ldrh	r3, [r7, #12]
   90870:	4413      	add	r3, r2
   90872:	4a7a      	ldr	r2, [pc, #488]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   90874:	8812      	ldrh	r2, [r2, #0]
   90876:	fb93 f3f2 	sdiv	r3, r3, r2
   9087a:	b29b      	uxth	r3, r3
   9087c:	3301      	adds	r3, #1
   9087e:	b29a      	uxth	r2, r3
   90880:	4b77      	ldr	r3, [pc, #476]	; (90a60 <Cl_Pressure_Controller_Handler+0x260>)
   90882:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   90884:	f107 030c 	add.w	r3, r7, #12
   90888:	4619      	mov	r1, r3
   9088a:	200f      	movs	r0, #15
   9088c:	4b75      	ldr	r3, [pc, #468]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   9088e:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   90890:	4b75      	ldr	r3, [pc, #468]	; (90a68 <Cl_Pressure_Controller_Handler+0x268>)
   90892:	881b      	ldrh	r3, [r3, #0]
   90894:	461a      	mov	r2, r3
   90896:	89bb      	ldrh	r3, [r7, #12]
   90898:	4413      	add	r3, r2
   9089a:	4a70      	ldr	r2, [pc, #448]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   9089c:	8812      	ldrh	r2, [r2, #0]
   9089e:	fb93 f3f2 	sdiv	r3, r3, r2
   908a2:	b29b      	uxth	r3, r3
   908a4:	3301      	adds	r3, #1
   908a6:	b29a      	uxth	r2, r3
   908a8:	4b6f      	ldr	r3, [pc, #444]	; (90a68 <Cl_Pressure_Controller_Handler+0x268>)
   908aa:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   908ac:	f107 030c 	add.w	r3, r7, #12
   908b0:	4619      	mov	r1, r3
   908b2:	2010      	movs	r0, #16
   908b4:	4b6b      	ldr	r3, [pc, #428]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   908b6:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   908b8:	4b6c      	ldr	r3, [pc, #432]	; (90a6c <Cl_Pressure_Controller_Handler+0x26c>)
   908ba:	881b      	ldrh	r3, [r3, #0]
   908bc:	461a      	mov	r2, r3
   908be:	89bb      	ldrh	r3, [r7, #12]
   908c0:	4413      	add	r3, r2
   908c2:	4a66      	ldr	r2, [pc, #408]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   908c4:	8812      	ldrh	r2, [r2, #0]
   908c6:	fb93 f3f2 	sdiv	r3, r3, r2
   908ca:	b29b      	uxth	r3, r3
   908cc:	3301      	adds	r3, #1
   908ce:	b29a      	uxth	r2, r3
   908d0:	4b66      	ldr	r3, [pc, #408]	; (90a6c <Cl_Pressure_Controller_Handler+0x26c>)
   908d2:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   908d4:	f107 030c 	add.w	r3, r7, #12
   908d8:	4619      	mov	r1, r3
   908da:	200b      	movs	r0, #11
   908dc:	4b61      	ldr	r3, [pc, #388]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   908de:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   908e0:	4b63      	ldr	r3, [pc, #396]	; (90a70 <Cl_Pressure_Controller_Handler+0x270>)
   908e2:	881b      	ldrh	r3, [r3, #0]
   908e4:	461a      	mov	r2, r3
   908e6:	89bb      	ldrh	r3, [r7, #12]
   908e8:	4413      	add	r3, r2
   908ea:	4a5c      	ldr	r2, [pc, #368]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   908ec:	8812      	ldrh	r2, [r2, #0]
   908ee:	fb93 f3f2 	sdiv	r3, r3, r2
   908f2:	b29b      	uxth	r3, r3
   908f4:	3301      	adds	r3, #1
   908f6:	b29a      	uxth	r2, r3
   908f8:	4b5d      	ldr	r3, [pc, #372]	; (90a70 <Cl_Pressure_Controller_Handler+0x270>)
   908fa:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   908fc:	f107 030c 	add.w	r3, r7, #12
   90900:	4619      	mov	r1, r3
   90902:	200b      	movs	r0, #11
   90904:	4b57      	ldr	r3, [pc, #348]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90906:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   90908:	4b5a      	ldr	r3, [pc, #360]	; (90a74 <Cl_Pressure_Controller_Handler+0x274>)
   9090a:	881b      	ldrh	r3, [r3, #0]
   9090c:	461a      	mov	r2, r3
   9090e:	89bb      	ldrh	r3, [r7, #12]
   90910:	4413      	add	r3, r2
   90912:	4a52      	ldr	r2, [pc, #328]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   90914:	8812      	ldrh	r2, [r2, #0]
   90916:	fb93 f3f2 	sdiv	r3, r3, r2
   9091a:	b29b      	uxth	r3, r3
   9091c:	3301      	adds	r3, #1
   9091e:	b29a      	uxth	r2, r3
   90920:	4b54      	ldr	r3, [pc, #336]	; (90a74 <Cl_Pressure_Controller_Handler+0x274>)
   90922:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   90924:	4b4d      	ldr	r3, [pc, #308]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   90926:	881b      	ldrh	r3, [r3, #0]
   90928:	3301      	adds	r3, #1
   9092a:	b29a      	uxth	r2, r3
   9092c:	4b4b      	ldr	r3, [pc, #300]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   9092e:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   90930:	4b4a      	ldr	r3, [pc, #296]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   90932:	881b      	ldrh	r3, [r3, #0]
   90934:	2b0a      	cmp	r3, #10
   90936:	f240 8087 	bls.w	90a48 <Cl_Pressure_Controller_Handler+0x248>
			{
				counter = 0;
   9093a:	4b48      	ldr	r3, [pc, #288]	; (90a5c <Cl_Pressure_Controller_Handler+0x25c>)
   9093c:	2200      	movs	r2, #0
   9093e:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   90940:	4b45      	ldr	r3, [pc, #276]	; (90a58 <Cl_Pressure_Controller_Handler+0x258>)
   90942:	2202      	movs	r2, #2
   90944:	701a      	strb	r2, [r3, #0]
			}
			break;
   90946:	e07f      	b.n	90a48 <Cl_Pressure_Controller_Handler+0x248>
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   90948:	4b43      	ldr	r3, [pc, #268]	; (90a58 <Cl_Pressure_Controller_Handler+0x258>)
   9094a:	781b      	ldrb	r3, [r3, #0]
   9094c:	2b02      	cmp	r3, #2
   9094e:	d17e      	bne.n	90a4e <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
   90950:	79fb      	ldrb	r3, [r7, #7]
   90952:	2b00      	cmp	r3, #0
   90954:	d07a      	beq.n	90a4c <Cl_Pressure_Controller_Handler+0x24c>
   90956:	2b01      	cmp	r3, #1
   90958:	d000      	beq.n	9095c <Cl_Pressure_Controller_Handler+0x15c>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   9095a:	e078      	b.n	90a4e <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   9095c:	f107 030c 	add.w	r3, r7, #12
   90960:	4619      	mov	r1, r3
   90962:	200e      	movs	r0, #14
   90964:	4b3f      	ldr	r3, [pc, #252]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90966:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   90968:	4b3d      	ldr	r3, [pc, #244]	; (90a60 <Cl_Pressure_Controller_Handler+0x260>)
   9096a:	881b      	ldrh	r3, [r3, #0]
   9096c:	461a      	mov	r2, r3
   9096e:	4613      	mov	r3, r2
   90970:	00db      	lsls	r3, r3, #3
   90972:	4413      	add	r3, r2
   90974:	89ba      	ldrh	r2, [r7, #12]
   90976:	4413      	add	r3, r2
   90978:	4a3f      	ldr	r2, [pc, #252]	; (90a78 <Cl_Pressure_Controller_Handler+0x278>)
   9097a:	fb82 1203 	smull	r1, r2, r2, r3
   9097e:	1092      	asrs	r2, r2, #2
   90980:	17db      	asrs	r3, r3, #31
   90982:	1ad3      	subs	r3, r2, r3
   90984:	b29a      	uxth	r2, r3
   90986:	4b36      	ldr	r3, [pc, #216]	; (90a60 <Cl_Pressure_Controller_Handler+0x260>)
   90988:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   9098a:	f107 030c 	add.w	r3, r7, #12
   9098e:	4619      	mov	r1, r3
   90990:	200f      	movs	r0, #15
   90992:	4b34      	ldr	r3, [pc, #208]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90994:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   90996:	4b34      	ldr	r3, [pc, #208]	; (90a68 <Cl_Pressure_Controller_Handler+0x268>)
   90998:	881b      	ldrh	r3, [r3, #0]
   9099a:	461a      	mov	r2, r3
   9099c:	4613      	mov	r3, r2
   9099e:	00db      	lsls	r3, r3, #3
   909a0:	4413      	add	r3, r2
   909a2:	89ba      	ldrh	r2, [r7, #12]
   909a4:	4413      	add	r3, r2
   909a6:	4a34      	ldr	r2, [pc, #208]	; (90a78 <Cl_Pressure_Controller_Handler+0x278>)
   909a8:	fb82 1203 	smull	r1, r2, r2, r3
   909ac:	1092      	asrs	r2, r2, #2
   909ae:	17db      	asrs	r3, r3, #31
   909b0:	1ad3      	subs	r3, r2, r3
   909b2:	b29a      	uxth	r2, r3
   909b4:	4b2c      	ldr	r3, [pc, #176]	; (90a68 <Cl_Pressure_Controller_Handler+0x268>)
   909b6:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   909b8:	f107 030c 	add.w	r3, r7, #12
   909bc:	4619      	mov	r1, r3
   909be:	2010      	movs	r0, #16
   909c0:	4b28      	ldr	r3, [pc, #160]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   909c2:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   909c4:	4b29      	ldr	r3, [pc, #164]	; (90a6c <Cl_Pressure_Controller_Handler+0x26c>)
   909c6:	881b      	ldrh	r3, [r3, #0]
   909c8:	461a      	mov	r2, r3
   909ca:	4613      	mov	r3, r2
   909cc:	00db      	lsls	r3, r3, #3
   909ce:	4413      	add	r3, r2
   909d0:	89ba      	ldrh	r2, [r7, #12]
   909d2:	4413      	add	r3, r2
   909d4:	4a28      	ldr	r2, [pc, #160]	; (90a78 <Cl_Pressure_Controller_Handler+0x278>)
   909d6:	fb82 1203 	smull	r1, r2, r2, r3
   909da:	1092      	asrs	r2, r2, #2
   909dc:	17db      	asrs	r3, r3, #31
   909de:	1ad3      	subs	r3, r2, r3
   909e0:	b29a      	uxth	r2, r3
   909e2:	4b22      	ldr	r3, [pc, #136]	; (90a6c <Cl_Pressure_Controller_Handler+0x26c>)
   909e4:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   909e6:	f107 030c 	add.w	r3, r7, #12
   909ea:	4619      	mov	r1, r3
   909ec:	200b      	movs	r0, #11
   909ee:	4b1d      	ldr	r3, [pc, #116]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   909f0:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   909f2:	4b1f      	ldr	r3, [pc, #124]	; (90a70 <Cl_Pressure_Controller_Handler+0x270>)
   909f4:	881b      	ldrh	r3, [r3, #0]
   909f6:	461a      	mov	r2, r3
   909f8:	4613      	mov	r3, r2
   909fa:	00db      	lsls	r3, r3, #3
   909fc:	4413      	add	r3, r2
   909fe:	89ba      	ldrh	r2, [r7, #12]
   90a00:	4413      	add	r3, r2
   90a02:	4a1d      	ldr	r2, [pc, #116]	; (90a78 <Cl_Pressure_Controller_Handler+0x278>)
   90a04:	fb82 1203 	smull	r1, r2, r2, r3
   90a08:	1092      	asrs	r2, r2, #2
   90a0a:	17db      	asrs	r3, r3, #31
   90a0c:	1ad3      	subs	r3, r2, r3
   90a0e:	b29a      	uxth	r2, r3
   90a10:	4b17      	ldr	r3, [pc, #92]	; (90a70 <Cl_Pressure_Controller_Handler+0x270>)
   90a12:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   90a14:	f107 030c 	add.w	r3, r7, #12
   90a18:	4619      	mov	r1, r3
   90a1a:	200c      	movs	r0, #12
   90a1c:	4b11      	ldr	r3, [pc, #68]	; (90a64 <Cl_Pressure_Controller_Handler+0x264>)
   90a1e:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   90a20:	4b14      	ldr	r3, [pc, #80]	; (90a74 <Cl_Pressure_Controller_Handler+0x274>)
   90a22:	881b      	ldrh	r3, [r3, #0]
   90a24:	461a      	mov	r2, r3
   90a26:	4613      	mov	r3, r2
   90a28:	00db      	lsls	r3, r3, #3
   90a2a:	4413      	add	r3, r2
   90a2c:	89ba      	ldrh	r2, [r7, #12]
   90a2e:	4413      	add	r3, r2
   90a30:	4a11      	ldr	r2, [pc, #68]	; (90a78 <Cl_Pressure_Controller_Handler+0x278>)
   90a32:	fb82 1203 	smull	r1, r2, r2, r3
   90a36:	1092      	asrs	r2, r2, #2
   90a38:	17db      	asrs	r3, r3, #31
   90a3a:	1ad3      	subs	r3, r2, r3
   90a3c:	b29a      	uxth	r2, r3
   90a3e:	4b0d      	ldr	r3, [pc, #52]	; (90a74 <Cl_Pressure_Controller_Handler+0x274>)
   90a40:	801a      	strh	r2, [r3, #0]

			
			
			break;
   90a42:	e004      	b.n	90a4e <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   90a44:	bf00      	nop
   90a46:	e002      	b.n	90a4e <Cl_Pressure_Controller_Handler+0x24e>
			if(counter > 10)
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
   90a48:	bf00      	nop
   90a4a:	e000      	b.n	90a4e <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   90a4c:	bf00      	nop
		
	}

	
	
	return cl_retval;
   90a4e:	7bfb      	ldrb	r3, [r7, #15]
}
   90a50:	4618      	mov	r0, r3
   90a52:	3710      	adds	r7, #16
   90a54:	46bd      	mov	sp, r7
   90a56:	bd80      	pop	{r7, pc}
   90a58:	2007191c 	.word	0x2007191c
   90a5c:	2007191a 	.word	0x2007191a
   90a60:	20071910 	.word	0x20071910
   90a64:	0008fa01 	.word	0x0008fa01
   90a68:	20071912 	.word	0x20071912
   90a6c:	20071914 	.word	0x20071914
   90a70:	20071916 	.word	0x20071916
   90a74:	20071918 	.word	0x20071918
   90a78:	66666667 	.word	0x66666667

00090a7c <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   90a7c:	b480      	push	{r7}
   90a7e:	b083      	sub	sp, #12
   90a80:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   90a82:	2300      	movs	r3, #0
   90a84:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   90a86:	4b0c      	ldr	r3, [pc, #48]	; (90ab8 <Cl_Pressure_Controller_Init+0x3c>)
   90a88:	2200      	movs	r2, #0
   90a8a:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   90a8c:	4b0b      	ldr	r3, [pc, #44]	; (90abc <Cl_Pressure_Controller_Init+0x40>)
   90a8e:	2200      	movs	r2, #0
   90a90:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   90a92:	4b0b      	ldr	r3, [pc, #44]	; (90ac0 <Cl_Pressure_Controller_Init+0x44>)
   90a94:	2200      	movs	r2, #0
   90a96:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   90a98:	4b0a      	ldr	r3, [pc, #40]	; (90ac4 <Cl_Pressure_Controller_Init+0x48>)
   90a9a:	2200      	movs	r2, #0
   90a9c:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   90a9e:	4b0a      	ldr	r3, [pc, #40]	; (90ac8 <Cl_Pressure_Controller_Init+0x4c>)
   90aa0:	2200      	movs	r2, #0
   90aa2:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   90aa4:	4b09      	ldr	r3, [pc, #36]	; (90acc <Cl_Pressure_Controller_Init+0x50>)
   90aa6:	2201      	movs	r2, #1
   90aa8:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   90aaa:	79fb      	ldrb	r3, [r7, #7]
   90aac:	4618      	mov	r0, r3
   90aae:	370c      	adds	r7, #12
   90ab0:	46bd      	mov	sp, r7
   90ab2:	bc80      	pop	{r7}
   90ab4:	4770      	bx	lr
   90ab6:	bf00      	nop
   90ab8:	20071910 	.word	0x20071910
   90abc:	20071912 	.word	0x20071912
   90ac0:	20071914 	.word	0x20071914
   90ac4:	20071916 	.word	0x20071916
   90ac8:	20071918 	.word	0x20071918
   90acc:	2007191c 	.word	0x2007191c

00090ad0 <res_temp_lookuptable>:
	{11708,4400},{11747,4500},{11785,4600},{11824,4700},{11862,4800},{11901,4900},{11940,5000},{11978,5100},{12016,5200},{12055,5300},{12093,5400},{12132,5500},{12170,5600},{12209,5700},{12247,5800},{12286,5900},{12324,6000},{12362,6100},{12401,6200},
	{12439,6300},{12477,6400},{12516,6500},{12554,6600},{12592,6700},{12631,6800},{12669,6900},{12707,7000},{12745,7100},{12784,7200},{12822,7300},{12860,7400},{12898,7500},{12937,7600},{12975,7700},{13013,7800},{13051,7900},{13089,8000},{13127,8100},
	{13166,8200},{13204,8300},{13242,8400},{13280,8500},{13318,8600},{13356,8700},{13394,8800},{13432,8900},{13470,9000},{13508,9100},{13546,9200}
};
void res_temp_lookuptable(Cl_Uint32Type res)
{
   90ad0:	b590      	push	{r4, r7, lr}
   90ad2:	b085      	sub	sp, #20
   90ad4:	af00      	add	r7, sp, #0
   90ad6:	6078      	str	r0, [r7, #4]
	int i;
	float slope=0;
   90ad8:	f04f 0300 	mov.w	r3, #0
   90adc:	60bb      	str	r3, [r7, #8]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   90ade:	2300      	movs	r3, #0
   90ae0:	60fb      	str	r3, [r7, #12]
   90ae2:	e075      	b.n	90bd0 <res_temp_lookuptable+0x100>
	{
		if (res == res_temp[i].resistance)
   90ae4:	4b3e      	ldr	r3, [pc, #248]	; (90be0 <res_temp_lookuptable+0x110>)
   90ae6:	6878      	ldr	r0, [r7, #4]
   90ae8:	4798      	blx	r3
   90aea:	4a3e      	ldr	r2, [pc, #248]	; (90be4 <res_temp_lookuptable+0x114>)
   90aec:	68fb      	ldr	r3, [r7, #12]
   90aee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90af2:	4b3d      	ldr	r3, [pc, #244]	; (90be8 <res_temp_lookuptable+0x118>)
   90af4:	4611      	mov	r1, r2
   90af6:	4798      	blx	r3
   90af8:	4603      	mov	r3, r0
   90afa:	2b00      	cmp	r3, #0
   90afc:	d007      	beq.n	90b0e <res_temp_lookuptable+0x3e>
		{
			res_temp_value=res_temp[i].temperature;
   90afe:	4a39      	ldr	r2, [pc, #228]	; (90be4 <res_temp_lookuptable+0x114>)
   90b00:	68fb      	ldr	r3, [r7, #12]
   90b02:	00db      	lsls	r3, r3, #3
   90b04:	4413      	add	r3, r2
   90b06:	685b      	ldr	r3, [r3, #4]
   90b08:	4a38      	ldr	r2, [pc, #224]	; (90bec <res_temp_lookuptable+0x11c>)
   90b0a:	6013      	str	r3, [r2, #0]
			break;
   90b0c:	e063      	b.n	90bd6 <res_temp_lookuptable+0x106>
		}
		else if ((res > res_temp[i].resistance) && (res < res_temp[i+1].resistance))
   90b0e:	4b34      	ldr	r3, [pc, #208]	; (90be0 <res_temp_lookuptable+0x110>)
   90b10:	6878      	ldr	r0, [r7, #4]
   90b12:	4798      	blx	r3
   90b14:	4a33      	ldr	r2, [pc, #204]	; (90be4 <res_temp_lookuptable+0x114>)
   90b16:	68fb      	ldr	r3, [r7, #12]
   90b18:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90b1c:	4b34      	ldr	r3, [pc, #208]	; (90bf0 <res_temp_lookuptable+0x120>)
   90b1e:	4611      	mov	r1, r2
   90b20:	4798      	blx	r3
   90b22:	4603      	mov	r3, r0
   90b24:	2b00      	cmp	r3, #0
   90b26:	d050      	beq.n	90bca <res_temp_lookuptable+0xfa>
   90b28:	4b2d      	ldr	r3, [pc, #180]	; (90be0 <res_temp_lookuptable+0x110>)
   90b2a:	6878      	ldr	r0, [r7, #4]
   90b2c:	4798      	blx	r3
   90b2e:	68fb      	ldr	r3, [r7, #12]
   90b30:	3301      	adds	r3, #1
   90b32:	4a2c      	ldr	r2, [pc, #176]	; (90be4 <res_temp_lookuptable+0x114>)
   90b34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90b38:	4b2e      	ldr	r3, [pc, #184]	; (90bf4 <res_temp_lookuptable+0x124>)
   90b3a:	4611      	mov	r1, r2
   90b3c:	4798      	blx	r3
   90b3e:	4603      	mov	r3, r0
   90b40:	2b00      	cmp	r3, #0
   90b42:	d042      	beq.n	90bca <res_temp_lookuptable+0xfa>
		{
			slope = ((res_temp[i+1].temperature-res_temp[i].temperature)/(res_temp[i+1].resistance-res_temp[i].resistance));
   90b44:	68fb      	ldr	r3, [r7, #12]
   90b46:	3301      	adds	r3, #1
   90b48:	4a26      	ldr	r2, [pc, #152]	; (90be4 <res_temp_lookuptable+0x114>)
   90b4a:	00db      	lsls	r3, r3, #3
   90b4c:	4413      	add	r3, r2
   90b4e:	6858      	ldr	r0, [r3, #4]
   90b50:	4a24      	ldr	r2, [pc, #144]	; (90be4 <res_temp_lookuptable+0x114>)
   90b52:	68fb      	ldr	r3, [r7, #12]
   90b54:	00db      	lsls	r3, r3, #3
   90b56:	4413      	add	r3, r2
   90b58:	685a      	ldr	r2, [r3, #4]
   90b5a:	4b27      	ldr	r3, [pc, #156]	; (90bf8 <res_temp_lookuptable+0x128>)
   90b5c:	4611      	mov	r1, r2
   90b5e:	4798      	blx	r3
   90b60:	4603      	mov	r3, r0
   90b62:	461c      	mov	r4, r3
   90b64:	68fb      	ldr	r3, [r7, #12]
   90b66:	3301      	adds	r3, #1
   90b68:	4a1e      	ldr	r2, [pc, #120]	; (90be4 <res_temp_lookuptable+0x114>)
   90b6a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   90b6e:	4a1d      	ldr	r2, [pc, #116]	; (90be4 <res_temp_lookuptable+0x114>)
   90b70:	68fb      	ldr	r3, [r7, #12]
   90b72:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90b76:	4b20      	ldr	r3, [pc, #128]	; (90bf8 <res_temp_lookuptable+0x128>)
   90b78:	4611      	mov	r1, r2
   90b7a:	4798      	blx	r3
   90b7c:	4603      	mov	r3, r0
   90b7e:	461a      	mov	r2, r3
   90b80:	4b1e      	ldr	r3, [pc, #120]	; (90bfc <res_temp_lookuptable+0x12c>)
   90b82:	4611      	mov	r1, r2
   90b84:	4620      	mov	r0, r4
   90b86:	4798      	blx	r3
   90b88:	4603      	mov	r3, r0
   90b8a:	60bb      	str	r3, [r7, #8]
			res_temp_value = slope * (res-res_temp[i].resistance) + res_temp[i].temperature;
   90b8c:	4b14      	ldr	r3, [pc, #80]	; (90be0 <res_temp_lookuptable+0x110>)
   90b8e:	6878      	ldr	r0, [r7, #4]
   90b90:	4798      	blx	r3
   90b92:	4a14      	ldr	r2, [pc, #80]	; (90be4 <res_temp_lookuptable+0x114>)
   90b94:	68fb      	ldr	r3, [r7, #12]
   90b96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   90b9a:	4b17      	ldr	r3, [pc, #92]	; (90bf8 <res_temp_lookuptable+0x128>)
   90b9c:	4611      	mov	r1, r2
   90b9e:	4798      	blx	r3
   90ba0:	4603      	mov	r3, r0
   90ba2:	461a      	mov	r2, r3
   90ba4:	4b16      	ldr	r3, [pc, #88]	; (90c00 <res_temp_lookuptable+0x130>)
   90ba6:	68b9      	ldr	r1, [r7, #8]
   90ba8:	4610      	mov	r0, r2
   90baa:	4798      	blx	r3
   90bac:	4603      	mov	r3, r0
   90bae:	4618      	mov	r0, r3
   90bb0:	4a0c      	ldr	r2, [pc, #48]	; (90be4 <res_temp_lookuptable+0x114>)
   90bb2:	68fb      	ldr	r3, [r7, #12]
   90bb4:	00db      	lsls	r3, r3, #3
   90bb6:	4413      	add	r3, r2
   90bb8:	685a      	ldr	r2, [r3, #4]
   90bba:	4b12      	ldr	r3, [pc, #72]	; (90c04 <res_temp_lookuptable+0x134>)
   90bbc:	4611      	mov	r1, r2
   90bbe:	4798      	blx	r3
   90bc0:	4603      	mov	r3, r0
   90bc2:	461a      	mov	r2, r3
   90bc4:	4b09      	ldr	r3, [pc, #36]	; (90bec <res_temp_lookuptable+0x11c>)
   90bc6:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   90bc8:	e005      	b.n	90bd6 <res_temp_lookuptable+0x106>
void res_temp_lookuptable(Cl_Uint32Type res)
{
	int i;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   90bca:	68fb      	ldr	r3, [r7, #12]
   90bcc:	3301      	adds	r3, #1
   90bce:	60fb      	str	r3, [r7, #12]
   90bd0:	68fb      	ldr	r3, [r7, #12]
   90bd2:	2b95      	cmp	r3, #149	; 0x95
   90bd4:	dd86      	ble.n	90ae4 <res_temp_lookuptable+0x14>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   90bd6:	bf00      	nop
   90bd8:	3714      	adds	r7, #20
   90bda:	46bd      	mov	sp, r7
   90bdc:	bd90      	pop	{r4, r7, pc}
   90bde:	bf00      	nop
   90be0:	000a7ef9 	.word	0x000a7ef9
   90be4:	20070508 	.word	0x20070508
   90be8:	000a82d1 	.word	0x000a82d1
   90bec:	20071930 	.word	0x20071930
   90bf0:	000a8321 	.word	0x000a8321
   90bf4:	000a82e5 	.word	0x000a82e5
   90bf8:	000a7d95 	.word	0x000a7d95
   90bfc:	000a8111 	.word	0x000a8111
   90c00:	000a7fa9 	.word	0x000a7fa9
   90c04:	000a7d99 	.word	0x000a7d99

00090c08 <Cl_Temperature_Controller_Handler>:
Cl_ReturnCodeType  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   90c08:	b590      	push	{r4, r7, lr}
   90c0a:	b08b      	sub	sp, #44	; 0x2c
   90c0c:	af00      	add	r7, sp, #0
   90c0e:	4603      	mov	r3, r0
   90c10:	71fb      	strb	r3, [r7, #7]
float temp=0,cal_data=0;
   90c12:	f04f 0300 	mov.w	r3, #0
   90c16:	627b      	str	r3, [r7, #36]	; 0x24
   90c18:	f04f 0300 	mov.w	r3, #0
   90c1c:	623b      	str	r3, [r7, #32]
	Cl_ReturnCodeType cl_retval = CL_OK;
   90c1e:	2300      	movs	r3, #0
   90c20:	77fb      	strb	r3, [r7, #31]
	 Cl_Uint16Type temp_val  = 0;
   90c22:	2300      	movs	r3, #0
   90c24:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type data=0;
   90c26:	2300      	movs	r3, #0
   90c28:	827b      	strh	r3, [r7, #18]
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   90c2a:	4b90      	ldr	r3, [pc, #576]	; (90e6c <Cl_Temperature_Controller_Handler+0x264>)
   90c2c:	781b      	ldrb	r3, [r3, #0]
   90c2e:	2b01      	cmp	r3, #1
   90c30:	f040 8090 	bne.w	90d54 <Cl_Temperature_Controller_Handler+0x14c>
	{
			switch(Cl_Tc_Event)
   90c34:	79fb      	ldrb	r3, [r7, #7]
   90c36:	2b01      	cmp	r3, #1
   90c38:	d005      	beq.n	90c46 <Cl_Temperature_Controller_Handler+0x3e>
   90c3a:	2b03      	cmp	r3, #3
   90c3c:	d076      	beq.n	90d2c <Cl_Temperature_Controller_Handler+0x124>
   90c3e:	2b00      	cmp	r3, #0
   90c40:	f000 8166 	beq.w	90f10 <Cl_Temperature_Controller_Handler+0x308>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
					temp3_correcton = data - Temp3;
				break;
				default:break;
   90c44:	e169      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   90c46:	4b8a      	ldr	r3, [pc, #552]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90c48:	881b      	ldrh	r3, [r3, #0]
   90c4a:	2b00      	cmp	r3, #0
   90c4c:	d10c      	bne.n	90c68 <Cl_Temperature_Controller_Handler+0x60>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   90c4e:	4989      	ldr	r1, [pc, #548]	; (90e74 <Cl_Temperature_Controller_Handler+0x26c>)
   90c50:	2012      	movs	r0, #18
   90c52:	4b89      	ldr	r3, [pc, #548]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90c54:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   90c56:	4989      	ldr	r1, [pc, #548]	; (90e7c <Cl_Temperature_Controller_Handler+0x274>)
   90c58:	2013      	movs	r0, #19
   90c5a:	4b87      	ldr	r3, [pc, #540]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90c5c:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   90c5e:	4988      	ldr	r1, [pc, #544]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90c60:	2014      	movs	r0, #20
   90c62:	4b85      	ldr	r3, [pc, #532]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90c64:	4798      	blx	r3
   90c66:	e04f      	b.n	90d08 <Cl_Temperature_Controller_Handler+0x100>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   90c68:	f107 0314 	add.w	r3, r7, #20
   90c6c:	4619      	mov	r1, r3
   90c6e:	2012      	movs	r0, #18
   90c70:	4b81      	ldr	r3, [pc, #516]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90c72:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   90c74:	4b7f      	ldr	r3, [pc, #508]	; (90e74 <Cl_Temperature_Controller_Handler+0x26c>)
   90c76:	881b      	ldrh	r3, [r3, #0]
   90c78:	461a      	mov	r2, r3
   90c7a:	8abb      	ldrh	r3, [r7, #20]
   90c7c:	4413      	add	r3, r2
   90c7e:	4a7c      	ldr	r2, [pc, #496]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90c80:	8812      	ldrh	r2, [r2, #0]
   90c82:	fb93 f3f2 	sdiv	r3, r3, r2
   90c86:	b29b      	uxth	r3, r3
   90c88:	3301      	adds	r3, #1
   90c8a:	b29a      	uxth	r2, r3
   90c8c:	4b79      	ldr	r3, [pc, #484]	; (90e74 <Cl_Temperature_Controller_Handler+0x26c>)
   90c8e:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   90c90:	f107 0314 	add.w	r3, r7, #20
   90c94:	4619      	mov	r1, r3
   90c96:	2013      	movs	r0, #19
   90c98:	4b77      	ldr	r3, [pc, #476]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90c9a:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   90c9c:	4b77      	ldr	r3, [pc, #476]	; (90e7c <Cl_Temperature_Controller_Handler+0x274>)
   90c9e:	881b      	ldrh	r3, [r3, #0]
   90ca0:	461a      	mov	r2, r3
   90ca2:	8abb      	ldrh	r3, [r7, #20]
   90ca4:	4413      	add	r3, r2
   90ca6:	4a72      	ldr	r2, [pc, #456]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90ca8:	8812      	ldrh	r2, [r2, #0]
   90caa:	fb93 f3f2 	sdiv	r3, r3, r2
   90cae:	b29b      	uxth	r3, r3
   90cb0:	3301      	adds	r3, #1
   90cb2:	b29a      	uxth	r2, r3
   90cb4:	4b71      	ldr	r3, [pc, #452]	; (90e7c <Cl_Temperature_Controller_Handler+0x274>)
   90cb6:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   90cb8:	f107 0314 	add.w	r3, r7, #20
   90cbc:	4619      	mov	r1, r3
   90cbe:	2014      	movs	r0, #20
   90cc0:	4b6d      	ldr	r3, [pc, #436]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90cc2:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   90cc4:	8abb      	ldrh	r3, [r7, #20]
   90cc6:	461a      	mov	r2, r3
   90cc8:	4b6e      	ldr	r3, [pc, #440]	; (90e84 <Cl_Temperature_Controller_Handler+0x27c>)
   90cca:	4610      	mov	r0, r2
   90ccc:	4798      	blx	r3
   90cce:	4b6c      	ldr	r3, [pc, #432]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90cd0:	681a      	ldr	r2, [r3, #0]
   90cd2:	4b6d      	ldr	r3, [pc, #436]	; (90e88 <Cl_Temperature_Controller_Handler+0x280>)
   90cd4:	4611      	mov	r1, r2
   90cd6:	4798      	blx	r3
   90cd8:	4603      	mov	r3, r0
   90cda:	461c      	mov	r4, r3
   90cdc:	4b64      	ldr	r3, [pc, #400]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90cde:	881b      	ldrh	r3, [r3, #0]
   90ce0:	461a      	mov	r2, r3
   90ce2:	4b68      	ldr	r3, [pc, #416]	; (90e84 <Cl_Temperature_Controller_Handler+0x27c>)
   90ce4:	4610      	mov	r0, r2
   90ce6:	4798      	blx	r3
   90ce8:	4602      	mov	r2, r0
   90cea:	4b68      	ldr	r3, [pc, #416]	; (90e8c <Cl_Temperature_Controller_Handler+0x284>)
   90cec:	4611      	mov	r1, r2
   90cee:	4620      	mov	r0, r4
   90cf0:	4798      	blx	r3
   90cf2:	4603      	mov	r3, r0
   90cf4:	461a      	mov	r2, r3
   90cf6:	4b64      	ldr	r3, [pc, #400]	; (90e88 <Cl_Temperature_Controller_Handler+0x280>)
   90cf8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   90cfc:	4610      	mov	r0, r2
   90cfe:	4798      	blx	r3
   90d00:	4603      	mov	r3, r0
   90d02:	461a      	mov	r2, r3
   90d04:	4b5e      	ldr	r3, [pc, #376]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90d06:	601a      	str	r2, [r3, #0]
				}

				counter++;
   90d08:	4b59      	ldr	r3, [pc, #356]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90d0a:	881b      	ldrh	r3, [r3, #0]
   90d0c:	3301      	adds	r3, #1
   90d0e:	b29a      	uxth	r2, r3
   90d10:	4b57      	ldr	r3, [pc, #348]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90d12:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   90d14:	4b56      	ldr	r3, [pc, #344]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90d16:	881b      	ldrh	r3, [r3, #0]
   90d18:	2b0a      	cmp	r3, #10
   90d1a:	f240 80fb 	bls.w	90f14 <Cl_Temperature_Controller_Handler+0x30c>
				{
					counter = 0;
   90d1e:	4b54      	ldr	r3, [pc, #336]	; (90e70 <Cl_Temperature_Controller_Handler+0x268>)
   90d20:	2200      	movs	r2, #0
   90d22:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   90d24:	4b51      	ldr	r3, [pc, #324]	; (90e6c <Cl_Temperature_Controller_Handler+0x264>)
   90d26:	2202      	movs	r2, #2
   90d28:	701a      	strb	r2, [r3, #0]
				}
				break;
   90d2a:	e0f3      	b.n	90f14 <Cl_Temperature_Controller_Handler+0x30c>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
   90d2c:	f107 0312 	add.w	r3, r7, #18
   90d30:	4618      	mov	r0, r3
   90d32:	4b57      	ldr	r3, [pc, #348]	; (90e90 <Cl_Temperature_Controller_Handler+0x288>)
   90d34:	4798      	blx	r3
					temp3_correcton = data - Temp3;
   90d36:	8a7b      	ldrh	r3, [r7, #18]
   90d38:	461a      	mov	r2, r3
   90d3a:	4b52      	ldr	r3, [pc, #328]	; (90e84 <Cl_Temperature_Controller_Handler+0x27c>)
   90d3c:	4610      	mov	r0, r2
   90d3e:	4798      	blx	r3
   90d40:	4b4f      	ldr	r3, [pc, #316]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90d42:	681a      	ldr	r2, [r3, #0]
   90d44:	4b53      	ldr	r3, [pc, #332]	; (90e94 <Cl_Temperature_Controller_Handler+0x28c>)
   90d46:	4611      	mov	r1, r2
   90d48:	4798      	blx	r3
   90d4a:	4603      	mov	r3, r0
   90d4c:	461a      	mov	r2, r3
   90d4e:	4b52      	ldr	r3, [pc, #328]	; (90e98 <Cl_Temperature_Controller_Handler+0x290>)
   90d50:	601a      	str	r2, [r3, #0]
				break;
   90d52:	e0e2      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   90d54:	4b45      	ldr	r3, [pc, #276]	; (90e6c <Cl_Temperature_Controller_Handler+0x264>)
   90d56:	781b      	ldrb	r3, [r3, #0]
   90d58:	2b02      	cmp	r3, #2
   90d5a:	f040 80de 	bne.w	90f1a <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
   90d5e:	79fb      	ldrb	r3, [r7, #7]
   90d60:	2b01      	cmp	r3, #1
   90d62:	d006      	beq.n	90d72 <Cl_Temperature_Controller_Handler+0x16a>
   90d64:	2b03      	cmp	r3, #3
   90d66:	f000 80a9 	beq.w	90ebc <Cl_Temperature_Controller_Handler+0x2b4>
   90d6a:	2b00      	cmp	r3, #0
   90d6c:	f000 80d4 	beq.w	90f18 <Cl_Temperature_Controller_Handler+0x310>
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
				}
				
				break;
				default:break;
   90d70:	e0d3      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   90d72:	f107 0314 	add.w	r3, r7, #20
   90d76:	4619      	mov	r1, r3
   90d78:	2012      	movs	r0, #18
   90d7a:	4b3f      	ldr	r3, [pc, #252]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90d7c:	4798      	blx	r3
				
////				(402 *100* temp_val)/(2*32768);								// resistance of PT100
//				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
//				Temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
//				Temp1 = Temp1 - 2.5 + 0.25;										// sensor offset 
				Temp1 = (float)temp_val /100;
   90d7e:	8aba      	ldrh	r2, [r7, #20]
   90d80:	4b46      	ldr	r3, [pc, #280]	; (90e9c <Cl_Temperature_Controller_Handler+0x294>)
   90d82:	4610      	mov	r0, r2
   90d84:	4798      	blx	r3
   90d86:	4602      	mov	r2, r0
   90d88:	4b40      	ldr	r3, [pc, #256]	; (90e8c <Cl_Temperature_Controller_Handler+0x284>)
   90d8a:	4945      	ldr	r1, [pc, #276]	; (90ea0 <Cl_Temperature_Controller_Handler+0x298>)
   90d8c:	4610      	mov	r0, r2
   90d8e:	4798      	blx	r3
   90d90:	4603      	mov	r3, r0
   90d92:	461a      	mov	r2, r3
   90d94:	4b43      	ldr	r3, [pc, #268]	; (90ea4 <Cl_Temperature_Controller_Handler+0x29c>)
   90d96:	4610      	mov	r0, r2
   90d98:	4798      	blx	r3
   90d9a:	4603      	mov	r3, r0
   90d9c:	b29a      	uxth	r2, r3
   90d9e:	4b35      	ldr	r3, [pc, #212]	; (90e74 <Cl_Temperature_Controller_Handler+0x26c>)
   90da0:	801a      	strh	r2, [r3, #0]
				Temp1 = (Temp1 *9 + temp_val)/10;
   90da2:	4b34      	ldr	r3, [pc, #208]	; (90e74 <Cl_Temperature_Controller_Handler+0x26c>)
   90da4:	881b      	ldrh	r3, [r3, #0]
   90da6:	461a      	mov	r2, r3
   90da8:	4613      	mov	r3, r2
   90daa:	00db      	lsls	r3, r3, #3
   90dac:	4413      	add	r3, r2
   90dae:	8aba      	ldrh	r2, [r7, #20]
   90db0:	4413      	add	r3, r2
   90db2:	4a3d      	ldr	r2, [pc, #244]	; (90ea8 <Cl_Temperature_Controller_Handler+0x2a0>)
   90db4:	fb82 1203 	smull	r1, r2, r2, r3
   90db8:	1092      	asrs	r2, r2, #2
   90dba:	17db      	asrs	r3, r3, #31
   90dbc:	1ad3      	subs	r3, r2, r3
   90dbe:	b29a      	uxth	r2, r3
   90dc0:	4b2c      	ldr	r3, [pc, #176]	; (90e74 <Cl_Temperature_Controller_Handler+0x26c>)
   90dc2:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   90dc4:	f107 0314 	add.w	r3, r7, #20
   90dc8:	4619      	mov	r1, r3
   90dca:	2013      	movs	r0, #19
   90dcc:	4b2a      	ldr	r3, [pc, #168]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90dce:	4798      	blx	r3
// 				//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				Temp2 = res_temp_value/100;									// Temp3 value in XX.yy format
// 				Temp2 = Temp2 - 0.4;                                            // sensor offset
				Temp2 = (float)temp_val /100;
   90dd0:	8aba      	ldrh	r2, [r7, #20]
   90dd2:	4b32      	ldr	r3, [pc, #200]	; (90e9c <Cl_Temperature_Controller_Handler+0x294>)
   90dd4:	4610      	mov	r0, r2
   90dd6:	4798      	blx	r3
   90dd8:	4602      	mov	r2, r0
   90dda:	4b2c      	ldr	r3, [pc, #176]	; (90e8c <Cl_Temperature_Controller_Handler+0x284>)
   90ddc:	4930      	ldr	r1, [pc, #192]	; (90ea0 <Cl_Temperature_Controller_Handler+0x298>)
   90dde:	4610      	mov	r0, r2
   90de0:	4798      	blx	r3
   90de2:	4603      	mov	r3, r0
   90de4:	461a      	mov	r2, r3
   90de6:	4b2f      	ldr	r3, [pc, #188]	; (90ea4 <Cl_Temperature_Controller_Handler+0x29c>)
   90de8:	4610      	mov	r0, r2
   90dea:	4798      	blx	r3
   90dec:	4603      	mov	r3, r0
   90dee:	b29a      	uxth	r2, r3
   90df0:	4b22      	ldr	r3, [pc, #136]	; (90e7c <Cl_Temperature_Controller_Handler+0x274>)
   90df2:	801a      	strh	r2, [r3, #0]
				Temp2 = (Temp2 *9 + temp_val)/10;
   90df4:	4b21      	ldr	r3, [pc, #132]	; (90e7c <Cl_Temperature_Controller_Handler+0x274>)
   90df6:	881b      	ldrh	r3, [r3, #0]
   90df8:	461a      	mov	r2, r3
   90dfa:	4613      	mov	r3, r2
   90dfc:	00db      	lsls	r3, r3, #3
   90dfe:	4413      	add	r3, r2
   90e00:	8aba      	ldrh	r2, [r7, #20]
   90e02:	4413      	add	r3, r2
   90e04:	4a28      	ldr	r2, [pc, #160]	; (90ea8 <Cl_Temperature_Controller_Handler+0x2a0>)
   90e06:	fb82 1203 	smull	r1, r2, r2, r3
   90e0a:	1092      	asrs	r2, r2, #2
   90e0c:	17db      	asrs	r3, r3, #31
   90e0e:	1ad3      	subs	r3, r2, r3
   90e10:	b29a      	uxth	r2, r3
   90e12:	4b1a      	ldr	r3, [pc, #104]	; (90e7c <Cl_Temperature_Controller_Handler+0x274>)
   90e14:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   90e16:	f107 0314 	add.w	r3, r7, #20
   90e1a:	4619      	mov	r1, r3
   90e1c:	2014      	movs	r0, #20
   90e1e:	4b16      	ldr	r3, [pc, #88]	; (90e78 <Cl_Temperature_Controller_Handler+0x270>)
   90e20:	4798      	blx	r3
// 				Temp3 = Temp3 - 0.4 ;										// sensor offset 
// 				
// 				
// // 				temp = temp_val * 0.8036;
// // 				calibration_tmp(temp,TS3);
				Temp3 = (float)temp_val /100;
   90e22:	8aba      	ldrh	r2, [r7, #20]
   90e24:	4b1d      	ldr	r3, [pc, #116]	; (90e9c <Cl_Temperature_Controller_Handler+0x294>)
   90e26:	4610      	mov	r0, r2
   90e28:	4798      	blx	r3
   90e2a:	4602      	mov	r2, r0
   90e2c:	4b17      	ldr	r3, [pc, #92]	; (90e8c <Cl_Temperature_Controller_Handler+0x284>)
   90e2e:	491c      	ldr	r1, [pc, #112]	; (90ea0 <Cl_Temperature_Controller_Handler+0x298>)
   90e30:	4610      	mov	r0, r2
   90e32:	4798      	blx	r3
   90e34:	4603      	mov	r3, r0
   90e36:	461a      	mov	r2, r3
   90e38:	4b11      	ldr	r3, [pc, #68]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90e3a:	601a      	str	r2, [r3, #0]
				Temp3 =(Temp3*5 + temprature_final_value_3)/6;
   90e3c:	4b10      	ldr	r3, [pc, #64]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90e3e:	681a      	ldr	r2, [r3, #0]
   90e40:	4b1a      	ldr	r3, [pc, #104]	; (90eac <Cl_Temperature_Controller_Handler+0x2a4>)
   90e42:	491b      	ldr	r1, [pc, #108]	; (90eb0 <Cl_Temperature_Controller_Handler+0x2a8>)
   90e44:	4610      	mov	r0, r2
   90e46:	4798      	blx	r3
   90e48:	4603      	mov	r3, r0
   90e4a:	4618      	mov	r0, r3
   90e4c:	4b19      	ldr	r3, [pc, #100]	; (90eb4 <Cl_Temperature_Controller_Handler+0x2ac>)
   90e4e:	681a      	ldr	r2, [r3, #0]
   90e50:	4b0d      	ldr	r3, [pc, #52]	; (90e88 <Cl_Temperature_Controller_Handler+0x280>)
   90e52:	4611      	mov	r1, r2
   90e54:	4798      	blx	r3
   90e56:	4603      	mov	r3, r0
   90e58:	461a      	mov	r2, r3
   90e5a:	4b0c      	ldr	r3, [pc, #48]	; (90e8c <Cl_Temperature_Controller_Handler+0x284>)
   90e5c:	4916      	ldr	r1, [pc, #88]	; (90eb8 <Cl_Temperature_Controller_Handler+0x2b0>)
   90e5e:	4610      	mov	r0, r2
   90e60:	4798      	blx	r3
   90e62:	4603      	mov	r3, r0
   90e64:	461a      	mov	r2, r3
   90e66:	4b06      	ldr	r3, [pc, #24]	; (90e80 <Cl_Temperature_Controller_Handler+0x278>)
   90e68:	601a      	str	r2, [r3, #0]
				break;
   90e6a:	e056      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
   90e6c:	2007192c 	.word	0x2007192c
   90e70:	20071922 	.word	0x20071922
   90e74:	2007191e 	.word	0x2007191e
   90e78:	0008fa01 	.word	0x0008fa01
   90e7c:	20071920 	.word	0x20071920
   90e80:	20071924 	.word	0x20071924
   90e84:	000a7f01 	.word	0x000a7f01
   90e88:	000a7d99 	.word	0x000a7d99
   90e8c:	000a8111 	.word	0x000a8111
   90e90:	0009aead 	.word	0x0009aead
   90e94:	000a7d95 	.word	0x000a7d95
   90e98:	20071928 	.word	0x20071928
   90e9c:	000a7ef9 	.word	0x000a7ef9
   90ea0:	42c80000 	.word	0x42c80000
   90ea4:	000a8381 	.word	0x000a8381
   90ea8:	66666667 	.word	0x66666667
   90eac:	000a7fa9 	.word	0x000a7fa9
   90eb0:	40a00000 	.word	0x40a00000
   90eb4:	20071740 	.word	0x20071740
   90eb8:	40c00000 	.word	0x40c00000
				case TS_EVENT_5SEC:
				data = 0;
   90ebc:	2300      	movs	r3, #0
   90ebe:	827b      	strh	r3, [r7, #18]
				{
					float temp=0;
   90ec0:	f04f 0300 	mov.w	r3, #0
   90ec4:	61bb      	str	r3, [r7, #24]
					Cl_Uint16Type test_data =0 ;
   90ec6:	2300      	movs	r3, #0
   90ec8:	82fb      	strh	r3, [r7, #22]
					
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &data);
   90eca:	f107 0312 	add.w	r3, r7, #18
   90ece:	4619      	mov	r1, r3
   90ed0:	2014      	movs	r0, #20
   90ed2:	4b14      	ldr	r3, [pc, #80]	; (90f24 <Cl_Temperature_Controller_Handler+0x31c>)
   90ed4:	4798      	blx	r3
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				temp = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp = temp - 31 + 14;										// sensor offset
// 				temp = temp - 0.4;										// sensor offset
				temp = (float)data /100;
   90ed6:	8a7a      	ldrh	r2, [r7, #18]
   90ed8:	4b13      	ldr	r3, [pc, #76]	; (90f28 <Cl_Temperature_Controller_Handler+0x320>)
   90eda:	4610      	mov	r0, r2
   90edc:	4798      	blx	r3
   90ede:	4602      	mov	r2, r0
   90ee0:	4b12      	ldr	r3, [pc, #72]	; (90f2c <Cl_Temperature_Controller_Handler+0x324>)
   90ee2:	4913      	ldr	r1, [pc, #76]	; (90f30 <Cl_Temperature_Controller_Handler+0x328>)
   90ee4:	4610      	mov	r0, r2
   90ee6:	4798      	blx	r3
   90ee8:	4603      	mov	r3, r0
   90eea:	61bb      	str	r3, [r7, #24]
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   90eec:	2300      	movs	r3, #0
   90eee:	60fb      	str	r3, [r7, #12]
				cl_tdata.Twobyte = temp;
   90ef0:	4b10      	ldr	r3, [pc, #64]	; (90f34 <Cl_Temperature_Controller_Handler+0x32c>)
   90ef2:	69b8      	ldr	r0, [r7, #24]
   90ef4:	4798      	blx	r3
   90ef6:	4603      	mov	r3, r0
   90ef8:	b29b      	uxth	r3, r3
   90efa:	81bb      	strh	r3, [r7, #12]
				cl_tdata.bytearray[2] = 31;
   90efc:	231f      	movs	r3, #31
   90efe:	73bb      	strb	r3, [r7, #14]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   90f00:	f107 030c 	add.w	r3, r7, #12
   90f04:	2204      	movs	r2, #4
   90f06:	4619      	mov	r1, r3
   90f08:	2037      	movs	r0, #55	; 0x37
   90f0a:	4b0b      	ldr	r3, [pc, #44]	; (90f38 <Cl_Temperature_Controller_Handler+0x330>)
   90f0c:	4798      	blx	r3
				
				}
				
				break;
   90f0e:	e004      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   90f10:	bf00      	nop
   90f12:	e002      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
				if(counter > 10)
				{
					counter = 0;
					Cl_Temp_State = TS_STATE_ACTIVE;
				}
				break;
   90f14:	bf00      	nop
   90f16:	e000      	b.n	90f1a <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   90f18:	bf00      	nop
			
	}

	
	
	return cl_retval;
   90f1a:	7ffb      	ldrb	r3, [r7, #31]
}
   90f1c:	4618      	mov	r0, r3
   90f1e:	372c      	adds	r7, #44	; 0x2c
   90f20:	46bd      	mov	sp, r7
   90f22:	bd90      	pop	{r4, r7, pc}
   90f24:	0008fa01 	.word	0x0008fa01
   90f28:	000a7ef9 	.word	0x000a7ef9
   90f2c:	000a8111 	.word	0x000a8111
   90f30:	42c80000 	.word	0x42c80000
   90f34:	000a8381 	.word	0x000a8381
   90f38:	0009cbd5 	.word	0x0009cbd5

00090f3c <Cl_Temperature_Controller_Init>:

Cl_ReturnCodeType  Cl_Temperature_Controller_Init(void)
{
   90f3c:	b480      	push	{r7}
   90f3e:	b083      	sub	sp, #12
   90f40:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   90f42:	2300      	movs	r3, #0
   90f44:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   90f46:	4b09      	ldr	r3, [pc, #36]	; (90f6c <Cl_Temperature_Controller_Init+0x30>)
   90f48:	2200      	movs	r2, #0
   90f4a:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   90f4c:	4b08      	ldr	r3, [pc, #32]	; (90f70 <Cl_Temperature_Controller_Init+0x34>)
   90f4e:	2200      	movs	r2, #0
   90f50:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   90f52:	4b08      	ldr	r3, [pc, #32]	; (90f74 <Cl_Temperature_Controller_Init+0x38>)
   90f54:	f04f 0200 	mov.w	r2, #0
   90f58:	601a      	str	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   90f5a:	4b07      	ldr	r3, [pc, #28]	; (90f78 <Cl_Temperature_Controller_Init+0x3c>)
   90f5c:	2201      	movs	r2, #1
   90f5e:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   90f60:	79fb      	ldrb	r3, [r7, #7]
}
   90f62:	4618      	mov	r0, r3
   90f64:	370c      	adds	r7, #12
   90f66:	46bd      	mov	sp, r7
   90f68:	bc80      	pop	{r7}
   90f6a:	4770      	bx	lr
   90f6c:	2007191e 	.word	0x2007191e
   90f70:	20071920 	.word	0x20071920
   90f74:	20071924 	.word	0x20071924
   90f78:	2007192c 	.word	0x2007192c
   90f7c:	00000000 	.word	0x00000000

00090f80 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodeType cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   90f80:	b590      	push	{r4, r7, lr}
   90f82:	b0c9      	sub	sp, #292	; 0x124
   90f84:	af00      	add	r7, sp, #0
   90f86:	1d3b      	adds	r3, r7, #4
   90f88:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   90f8a:	2304      	movs	r3, #4
   90f8c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	Cl_Uint8Type datasize;
	Cl_Uint8Type version;
	int16_t sensordata=0;
   90f90:	2300      	movs	r3, #0
   90f92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   90f96:	2300      	movs	r3, #0
   90f98:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   90f9c:	2300      	movs	r3, #0
   90f9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   90fa2:	2300      	movs	r3, #0
   90fa4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   90fa8:	2300      	movs	r3, #0
   90faa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   90fae:	2300      	movs	r3, #0
   90fb0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	Cl_Uint8Type temp;
	Cl_Uint32Type rateval;
	Cl_Testcommandtype test;
	Cl_Uint32Type count1;
	
	cl_indata.bytearray[0] = 0;
   90fb4:	2300      	movs	r3, #0
   90fb6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   90fba:	2300      	movs	r3, #0
   90fbc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   90fc0:	2300      	movs	r3, #0
   90fc2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   90fc6:	2300      	movs	r3, #0
   90fc8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   90fcc:	2300      	movs	r3, #0
   90fce:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   90fd2:	2300      	movs	r3, #0
   90fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   90fd8:	2300      	movs	r3, #0
   90fda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90fde:	e01c      	b.n	9101a <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   90fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90fe4:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90fe8:	4413      	add	r3, r2
   90fea:	2200      	movs	r2, #0
   90fec:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   90ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90ff4:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90ff8:	4413      	add	r3, r2
   90ffa:	2200      	movs	r2, #0
   90ffc:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   91000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91004:	f507 7290 	add.w	r2, r7, #288	; 0x120
   91008:	4413      	add	r3, r2
   9100a:	2200      	movs	r2, #0
   9100c:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   91010:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91014:	3301      	adds	r3, #1
   91016:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   9101a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9101e:	2b13      	cmp	r3, #19
   91020:	d9de      	bls.n	90fe0 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   91022:	1d3b      	adds	r3, r7, #4
   91024:	681b      	ldr	r3, [r3, #0]
   91026:	78db      	ldrb	r3, [r3, #3]
   91028:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   9102c:	2300      	movs	r3, #0
   9102e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   91032:	e01e      	b.n	91072 <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   91034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91038:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   9103c:	1d39      	adds	r1, r7, #4
   9103e:	6809      	ldr	r1, [r1, #0]
   91040:	440a      	add	r2, r1
   91042:	7912      	ldrb	r2, [r2, #4]
   91044:	f507 7190 	add.w	r1, r7, #288	; 0x120
   91048:	440b      	add	r3, r1
   9104a:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   9104e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91052:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   91056:	1d39      	adds	r1, r7, #4
   91058:	6809      	ldr	r1, [r1, #0]
   9105a:	440a      	add	r2, r1
   9105c:	7912      	ldrb	r2, [r2, #4]
   9105e:	f507 7190 	add.w	r1, r7, #288	; 0x120
   91062:	440b      	add	r3, r1
   91064:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   91068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9106c:	3301      	adds	r3, #1
   9106e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   91072:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91076:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   9107a:	429a      	cmp	r2, r3
   9107c:	d3da      	bcc.n	91034 <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   9107e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   91082:	2b6e      	cmp	r3, #110	; 0x6e
   91084:	f202 83fa 	bhi.w	9387c <cl_testharnesscommandhandler+0x28fc>
   91088:	a201      	add	r2, pc, #4	; (adr r2, 91090 <cl_testharnesscommandhandler+0x110>)
   9108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9108e:	bf00      	nop
   91090:	00091397 	.word	0x00091397
   91094:	000913ab 	.word	0x000913ab
   91098:	000913c1 	.word	0x000913c1
   9109c:	0009387d 	.word	0x0009387d
   910a0:	0009387d 	.word	0x0009387d
   910a4:	0009387d 	.word	0x0009387d
   910a8:	0009387d 	.word	0x0009387d
   910ac:	000913d7 	.word	0x000913d7
   910b0:	000913f7 	.word	0x000913f7
   910b4:	00091417 	.word	0x00091417
   910b8:	00091437 	.word	0x00091437
   910bc:	00091457 	.word	0x00091457
   910c0:	00091465 	.word	0x00091465
   910c4:	00091473 	.word	0x00091473
   910c8:	0009151d 	.word	0x0009151d
   910cc:	0009152b 	.word	0x0009152b
   910d0:	0009153f 	.word	0x0009153f
   910d4:	00091585 	.word	0x00091585
   910d8:	00091593 	.word	0x00091593
   910dc:	00091495 	.word	0x00091495
   910e0:	000914c9 	.word	0x000914c9
   910e4:	000915e5 	.word	0x000915e5
   910e8:	00091633 	.word	0x00091633
   910ec:	00091861 	.word	0x00091861
   910f0:	00091965 	.word	0x00091965
   910f4:	00091987 	.word	0x00091987
   910f8:	000919a9 	.word	0x000919a9
   910fc:	00091aa7 	.word	0x00091aa7
   91100:	00091aeb 	.word	0x00091aeb
   91104:	00091b0d 	.word	0x00091b0d
   91108:	00091b5f 	.word	0x00091b5f
   9110c:	00091bb7 	.word	0x00091bb7
   91110:	00091c3d 	.word	0x00091c3d
   91114:	00091c5f 	.word	0x00091c5f
   91118:	00091d23 	.word	0x00091d23
   9111c:	00091d37 	.word	0x00091d37
   91120:	00091d51 	.word	0x00091d51
   91124:	00091d6b 	.word	0x00091d6b
   91128:	00091d81 	.word	0x00091d81
   9112c:	00091e6b 	.word	0x00091e6b
   91130:	0009387d 	.word	0x0009387d
   91134:	00091e27 	.word	0x00091e27
   91138:	00091e4b 	.word	0x00091e4b
   9113c:	00091eab 	.word	0x00091eab
   91140:	00091ecd 	.word	0x00091ecd
   91144:	00091eef 	.word	0x00091eef
   91148:	00091fad 	.word	0x00091fad
   9114c:	00091919 	.word	0x00091919
   91150:	000919fb 	.word	0x000919fb
   91154:	0009387d 	.word	0x0009387d
   91158:	0009387d 	.word	0x0009387d
   9115c:	00092011 	.word	0x00092011
   91160:	0009204b 	.word	0x0009204b
   91164:	000921a9 	.word	0x000921a9
   91168:	00092085 	.word	0x00092085
   9116c:	000920cb 	.word	0x000920cb
   91170:	00092111 	.word	0x00092111
   91174:	0009215d 	.word	0x0009215d
   91178:	00092239 	.word	0x00092239
   9117c:	00092291 	.word	0x00092291
   91180:	00092317 	.word	0x00092317
   91184:	000922bf 	.word	0x000922bf
   91188:	00093237 	.word	0x00093237
   9118c:	000915a3 	.word	0x000915a3
   91190:	000915bf 	.word	0x000915bf
   91194:	0009232d 	.word	0x0009232d
   91198:	00092339 	.word	0x00092339
   9119c:	0009238b 	.word	0x0009238b
   911a0:	000923ad 	.word	0x000923ad
   911a4:	000923bb 	.word	0x000923bb
   911a8:	000923e1 	.word	0x000923e1
   911ac:	000923eb 	.word	0x000923eb
   911b0:	00091a47 	.word	0x00091a47
   911b4:	00092413 	.word	0x00092413
   911b8:	0009387d 	.word	0x0009387d
   911bc:	0009242f 	.word	0x0009242f
   911c0:	00092445 	.word	0x00092445
   911c4:	00091481 	.word	0x00091481
   911c8:	0009148b 	.word	0x0009148b
   911cc:	00092345 	.word	0x00092345
   911d0:	0009244d 	.word	0x0009244d
   911d4:	00091b73 	.word	0x00091b73
   911d8:	00091b95 	.word	0x00091b95
   911dc:	00091f95 	.word	0x00091f95
   911e0:	00091607 	.word	0x00091607
   911e4:	00091655 	.word	0x00091655
   911e8:	00091cb3 	.word	0x00091cb3
   911ec:	00091ceb 	.word	0x00091ceb
   911f0:	0009387d 	.word	0x0009387d
   911f4:	00091309 	.word	0x00091309
   911f8:	00091261 	.word	0x00091261
   911fc:	0009128f 	.word	0x0009128f
   91200:	000912bd 	.word	0x000912bd
   91204:	0009248d 	.word	0x0009248d
   91208:	000924a1 	.word	0x000924a1
   9120c:	00092475 	.word	0x00092475
   91210:	0009247d 	.word	0x0009247d
   91214:	0009124d 	.word	0x0009124d
   91218:	00091257 	.word	0x00091257
   9121c:	00091d97 	.word	0x00091d97
   91220:	00091db9 	.word	0x00091db9
   91224:	000924af 	.word	0x000924af
   91228:	000924b7 	.word	0x000924b7
   9122c:	000924bf 	.word	0x000924bf
   91230:	000924cb 	.word	0x000924cb
   91234:	000924d7 	.word	0x000924d7
   91238:	000916d1 	.word	0x000916d1
   9123c:	0009179d 	.word	0x0009179d
   91240:	0009174d 	.word	0x0009174d
   91244:	0009387d 	.word	0x0009387d
   91248:	0009387d 	.word	0x0009387d
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   9124c:	4bbf      	ldr	r3, [pc, #764]	; (9154c <cl_testharnesscommandhandler+0x5cc>)
   9124e:	2201      	movs	r2, #1
   91250:	701a      	strb	r2, [r3, #0]
		break;
   91252:	f002 bb1a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   91256:	4bbd      	ldr	r3, [pc, #756]	; (9154c <cl_testharnesscommandhandler+0x5cc>)
   91258:	2200      	movs	r2, #0
   9125a:	701a      	strb	r2, [r3, #0]
		break;
   9125c:	f002 bb15 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   91260:	4bbb      	ldr	r3, [pc, #748]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   91262:	781a      	ldrb	r2, [r3, #0]
   91264:	4bbb      	ldr	r3, [pc, #748]	; (91554 <cl_testharnesscommandhandler+0x5d4>)
   91266:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   91268:	4bb9      	ldr	r3, [pc, #740]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   9126a:	2201      	movs	r2, #1
   9126c:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   9126e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   91272:	4bb9      	ldr	r3, [pc, #740]	; (91558 <cl_testharnesscommandhandler+0x5d8>)
   91274:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   91276:	4bb8      	ldr	r3, [pc, #736]	; (91558 <cl_testharnesscommandhandler+0x5d8>)
   91278:	781b      	ldrb	r3, [r3, #0]
   9127a:	2101      	movs	r1, #1
   9127c:	4618      	mov	r0, r3
   9127e:	4bb7      	ldr	r3, [pc, #732]	; (9155c <cl_testharnesscommandhandler+0x5dc>)
   91280:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   91282:	4bb4      	ldr	r3, [pc, #720]	; (91554 <cl_testharnesscommandhandler+0x5d4>)
   91284:	781a      	ldrb	r2, [r3, #0]
   91286:	4bb2      	ldr	r3, [pc, #712]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   91288:	701a      	strb	r2, [r3, #0]
		break;
   9128a:	f002 bafe 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   9128e:	4bb0      	ldr	r3, [pc, #704]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   91290:	781a      	ldrb	r2, [r3, #0]
   91292:	4bb0      	ldr	r3, [pc, #704]	; (91554 <cl_testharnesscommandhandler+0x5d4>)
   91294:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   91296:	4bae      	ldr	r3, [pc, #696]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   91298:	2201      	movs	r2, #1
   9129a:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   9129c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   912a0:	4bad      	ldr	r3, [pc, #692]	; (91558 <cl_testharnesscommandhandler+0x5d8>)
   912a2:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   912a4:	4bac      	ldr	r3, [pc, #688]	; (91558 <cl_testharnesscommandhandler+0x5d8>)
   912a6:	781b      	ldrb	r3, [r3, #0]
   912a8:	2100      	movs	r1, #0
   912aa:	4618      	mov	r0, r3
   912ac:	4bab      	ldr	r3, [pc, #684]	; (9155c <cl_testharnesscommandhandler+0x5dc>)
   912ae:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   912b0:	4ba8      	ldr	r3, [pc, #672]	; (91554 <cl_testharnesscommandhandler+0x5d4>)
   912b2:	781a      	ldrb	r2, [r3, #0]
   912b4:	4ba6      	ldr	r3, [pc, #664]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   912b6:	701a      	strb	r2, [r3, #0]
		
		break;
   912b8:	f002 bae7 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   912bc:	4ba4      	ldr	r3, [pc, #656]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   912be:	781a      	ldrb	r2, [r3, #0]
   912c0:	4ba4      	ldr	r3, [pc, #656]	; (91554 <cl_testharnesscommandhandler+0x5d4>)
   912c2:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   912c4:	4ba2      	ldr	r3, [pc, #648]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   912c6:	2201      	movs	r2, #1
   912c8:	701a      	strb	r2, [r3, #0]
		temp = 0;
   912ca:	2300      	movs	r3, #0
   912cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   912d0:	e008      	b.n	912e4 <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   912d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   912d6:	1c5a      	adds	r2, r3, #1
   912d8:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   912dc:	2100      	movs	r1, #0
   912de:	4618      	mov	r0, r3
   912e0:	4b9e      	ldr	r3, [pc, #632]	; (9155c <cl_testharnesscommandhandler+0x5dc>)
   912e2:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   912e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   912e8:	2b42      	cmp	r3, #66	; 0x42
   912ea:	d9f2      	bls.n	912d2 <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   912ec:	4b98      	ldr	r3, [pc, #608]	; (91550 <cl_testharnesscommandhandler+0x5d0>)
   912ee:	2200      	movs	r2, #0
   912f0:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   912f2:	4b9b      	ldr	r3, [pc, #620]	; (91560 <cl_testharnesscommandhandler+0x5e0>)
   912f4:	f9b3 3000 	ldrsh.w	r3, [r3]
   912f8:	b29b      	uxth	r3, r3
   912fa:	3301      	adds	r3, #1
   912fc:	b29b      	uxth	r3, r3
   912fe:	b21a      	sxth	r2, r3
   91300:	4b97      	ldr	r3, [pc, #604]	; (91560 <cl_testharnesscommandhandler+0x5e0>)
   91302:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   91304:	f002 bac1 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91308:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9130c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91310:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91314:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   91318:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   9131c:	f003 0301 	and.w	r3, r3, #1
   91320:	2b00      	cmp	r3, #0
   91322:	d004      	beq.n	9132e <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   91324:	4b8f      	ldr	r3, [pc, #572]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   91326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   9132a:	631a      	str	r2, [r3, #48]	; 0x30
   9132c:	e003      	b.n	91336 <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   9132e:	4b8d      	ldr	r3, [pc, #564]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   91330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   91334:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   91336:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   9133a:	f003 0302 	and.w	r3, r3, #2
   9133e:	2b00      	cmp	r3, #0
   91340:	d004      	beq.n	9134c <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   91342:	4b88      	ldr	r3, [pc, #544]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   91344:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   91348:	631a      	str	r2, [r3, #48]	; 0x30
   9134a:	e003      	b.n	91354 <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   9134c:	4b85      	ldr	r3, [pc, #532]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   9134e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   91352:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   91354:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   91358:	f003 0304 	and.w	r3, r3, #4
   9135c:	2b00      	cmp	r3, #0
   9135e:	d004      	beq.n	9136a <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   91360:	4b80      	ldr	r3, [pc, #512]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   91362:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   91366:	631a      	str	r2, [r3, #48]	; 0x30
   91368:	e003      	b.n	91372 <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   9136a:	4b7e      	ldr	r3, [pc, #504]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   9136c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   91370:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   91372:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   91376:	f003 0308 	and.w	r3, r3, #8
   9137a:	2b00      	cmp	r3, #0
   9137c:	d005      	beq.n	9138a <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   9137e:	4b79      	ldr	r3, [pc, #484]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   91380:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   91384:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   91386:	f002 ba80 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   9138a:	4b76      	ldr	r3, [pc, #472]	; (91564 <cl_testharnesscommandhandler+0x5e4>)
   9138c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   91390:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   91392:	f002 ba7a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   91396:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9139a:	b29a      	uxth	r2, r3
   9139c:	4b72      	ldr	r3, [pc, #456]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9139e:	86da      	strh	r2, [r3, #54]	; 0x36
		
		cl_thretval = CL_OK;
   913a0:	2300      	movs	r3, #0
   913a2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   913a6:	f002 ba70 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   913aa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   913ae:	b29a      	uxth	r2, r3
   913b0:	4b6d      	ldr	r3, [pc, #436]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   913b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				cl_thretval = CL_OK;
   913b6:	2300      	movs	r3, #0
   913b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   913bc:	f002 ba65 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   913c0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   913c4:	b29a      	uxth	r2, r3
   913c6:	4b68      	ldr	r3, [pc, #416]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   913c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
				cl_thretval = CL_OK;
   913cc:	2300      	movs	r3, #0
   913ce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   913d2:	f002 ba5a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   913d6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   913da:	2b00      	cmp	r3, #0
   913dc:	d105      	bne.n	913ea <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   913de:	4b62      	ldr	r3, [pc, #392]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   913e0:	2200      	movs	r2, #0
   913e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   913e6:	f002 ba50 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   913ea:	4b5f      	ldr	r3, [pc, #380]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   913ec:	2201      	movs	r2, #1
   913ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
   913f2:	f002 ba4a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   913f6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   913fa:	2b00      	cmp	r3, #0
   913fc:	d105      	bne.n	9140a <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   913fe:	4b5a      	ldr	r3, [pc, #360]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   91400:	2200      	movs	r2, #0
   91402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   91406:	f002 ba40 	b.w	9388a <cl_testharnesscommandhandler+0x290a>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   9140a:	4b57      	ldr	r3, [pc, #348]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9140c:	2201      	movs	r2, #1
   9140e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		break;
   91412:	f002 ba3a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   91416:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9141a:	2b00      	cmp	r3, #0
   9141c:	d105      	bne.n	9142a <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   9141e:	4b52      	ldr	r3, [pc, #328]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   91420:	2200      	movs	r2, #0
   91422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   91426:	f002 ba30 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   9142a:	4b4f      	ldr	r3, [pc, #316]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9142c:	2201      	movs	r2, #1
   9142e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		break;
   91432:	f002 ba2a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   91436:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9143a:	2b00      	cmp	r3, #0
   9143c:	d105      	bne.n	9144a <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   9143e:	4b4a      	ldr	r3, [pc, #296]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   91440:	2200      	movs	r2, #0
   91442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   91446:	f002 ba20 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   9144a:	4b47      	ldr	r3, [pc, #284]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9144c:	2201      	movs	r2, #1
   9144e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		break;
   91452:	f002 ba1a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   91456:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9145a:	b29a      	uxth	r2, r3
   9145c:	4b42      	ldr	r3, [pc, #264]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9145e:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   91460:	f002 ba13 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   91464:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91468:	b29a      	uxth	r2, r3
   9146a:	4b3f      	ldr	r3, [pc, #252]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9146c:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   9146e:	f002 ba0c 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   91472:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91476:	b29a      	uxth	r2, r3
   91478:	4b3b      	ldr	r3, [pc, #236]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   9147a:	859a      	strh	r2, [r3, #44]	; 0x2c
		break;
   9147c:	f002 ba05 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   91480:	4b3a      	ldr	r3, [pc, #232]	; (9156c <cl_testharnesscommandhandler+0x5ec>)
   91482:	2201      	movs	r2, #1
   91484:	701a      	strb	r2, [r3, #0]
		break;
   91486:	f002 ba00 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   9148a:	4b38      	ldr	r3, [pc, #224]	; (9156c <cl_testharnesscommandhandler+0x5ec>)
   9148c:	2200      	movs	r2, #0
   9148e:	701a      	strb	r2, [r3, #0]
		break;
   91490:	f002 b9fb 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   91494:	f897 0099 	ldrb.w	r0, [r7, #153]	; 0x99
   91498:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   9149c:	f107 0378 	add.w	r3, r7, #120	; 0x78
   914a0:	3302      	adds	r3, #2
   914a2:	4619      	mov	r1, r3
   914a4:	4b32      	ldr	r3, [pc, #200]	; (91570 <cl_testharnesscommandhandler+0x5f0>)
   914a6:	4798      	blx	r3
   914a8:	4603      	mov	r3, r0
   914aa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   914ae:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   914b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
   914b6:	4611      	mov	r1, r2
   914b8:	4618      	mov	r0, r3
   914ba:	4b2e      	ldr	r3, [pc, #184]	; (91574 <cl_testharnesscommandhandler+0x5f4>)
   914bc:	4798      	blx	r3
   914be:	4603      	mov	r3, r0
   914c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   914c4:	f002 b9e1 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   914c8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   914cc:	2b06      	cmp	r3, #6
   914ce:	d00b      	beq.n	914e8 <cl_testharnesscommandhandler+0x568>
   914d0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   914d4:	2b07      	cmp	r3, #7
   914d6:	d007      	beq.n	914e8 <cl_testharnesscommandhandler+0x568>
   914d8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   914dc:	2b08      	cmp	r3, #8
   914de:	d003      	beq.n	914e8 <cl_testharnesscommandhandler+0x568>
   914e0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   914e4:	2b0a      	cmp	r3, #10
   914e6:	d10c      	bne.n	91502 <cl_testharnesscommandhandler+0x582>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   914e8:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   914ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
   914f0:	4611      	mov	r1, r2
   914f2:	4618      	mov	r0, r3
   914f4:	4b20      	ldr	r3, [pc, #128]	; (91578 <cl_testharnesscommandhandler+0x5f8>)
   914f6:	4798      	blx	r3
   914f8:	4603      	mov	r3, r0
   914fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   914fe:	f002 b9c4 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   91502:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   91506:	f107 0264 	add.w	r2, r7, #100	; 0x64
   9150a:	4611      	mov	r1, r2
   9150c:	4618      	mov	r0, r3
   9150e:	4b19      	ldr	r3, [pc, #100]	; (91574 <cl_testharnesscommandhandler+0x5f4>)
   91510:	4798      	blx	r3
   91512:	4603      	mov	r3, r0
   91514:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   91518:	f002 b9b7 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   9151c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91520:	b29a      	uxth	r2, r3
   91522:	4b11      	ldr	r3, [pc, #68]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   91524:	831a      	strh	r2, [r3, #24]
		break;
   91526:	f002 b9b0 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   9152a:	4b14      	ldr	r3, [pc, #80]	; (9157c <cl_testharnesscommandhandler+0x5fc>)
   9152c:	2200      	movs	r2, #0
   9152e:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   91530:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91534:	b29a      	uxth	r2, r3
   91536:	4b12      	ldr	r3, [pc, #72]	; (91580 <cl_testharnesscommandhandler+0x600>)
   91538:	835a      	strh	r2, [r3, #26]
		break;
   9153a:	f002 b9a6 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   9153e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91542:	b29a      	uxth	r2, r3
   91544:	4b08      	ldr	r3, [pc, #32]	; (91568 <cl_testharnesscommandhandler+0x5e8>)
   91546:	821a      	strh	r2, [r3, #16]
		break;
   91548:	f002 b99f 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
   9154c:	20071936 	.word	0x20071936
   91550:	200709b8 	.word	0x200709b8
   91554:	200709b9 	.word	0x200709b9
   91558:	20072566 	.word	0x20072566
   9155c:	000829e5 	.word	0x000829e5
   91560:	2007194e 	.word	0x2007194e
   91564:	400e1200 	.word	0x400e1200
   91568:	2007216c 	.word	0x2007216c
   9156c:	20071940 	.word	0x20071940
   91570:	0009b739 	.word	0x0009b739
   91574:	0009b701 	.word	0x0009b701
   91578:	000938e9 	.word	0x000938e9
   9157c:	20071935 	.word	0x20071935
   91580:	20072508 	.word	0x20072508
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   91584:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91588:	b29a      	uxth	r2, r3
   9158a:	4bbd      	ldr	r3, [pc, #756]	; (91880 <cl_testharnesscommandhandler+0x900>)
   9158c:	825a      	strh	r2, [r3, #18]
		break;
   9158e:	f002 b97c 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   91592:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91596:	b29a      	uxth	r2, r3
   91598:	4bb9      	ldr	r3, [pc, #740]	; (91880 <cl_testharnesscommandhandler+0x900>)
   9159a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		break;
   9159e:	f002 b974 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   915a2:	2064      	movs	r0, #100	; 0x64
   915a4:	4bb7      	ldr	r3, [pc, #732]	; (91884 <cl_testharnesscommandhandler+0x904>)
   915a6:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_ON";
   915a8:	4bb7      	ldr	r3, [pc, #732]	; (91888 <cl_testharnesscommandhandler+0x908>)
   915aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = sv_cntrl_poweronheater();
		SetHeaterState(CL_HEATER_STATE_ON);
   915ae:	2001      	movs	r0, #1
   915b0:	4bb6      	ldr	r3, [pc, #728]	; (9188c <cl_testharnesscommandhandler+0x90c>)
   915b2:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   915b4:	2064      	movs	r0, #100	; 0x64
   915b6:	4bb3      	ldr	r3, [pc, #716]	; (91884 <cl_testharnesscommandhandler+0x904>)
   915b8:	4798      	blx	r3
		break;
   915ba:	f002 b966 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   915be:	2064      	movs	r0, #100	; 0x64
   915c0:	4bb0      	ldr	r3, [pc, #704]	; (91884 <cl_testharnesscommandhandler+0x904>)
   915c2:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_OFF";
   915c4:	4bb2      	ldr	r3, [pc, #712]	; (91890 <cl_testharnesscommandhandler+0x910>)
   915c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   915ca:	4bb2      	ldr	r3, [pc, #712]	; (91894 <cl_testharnesscommandhandler+0x914>)
   915cc:	4798      	blx	r3
   915ce:	4603      	mov	r3, r0
   915d0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		SetHeaterState(CL_HEATER_STATE_OFF);
   915d4:	2004      	movs	r0, #4
   915d6:	4bad      	ldr	r3, [pc, #692]	; (9188c <cl_testharnesscommandhandler+0x90c>)
   915d8:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   915da:	2064      	movs	r0, #100	; 0x64
   915dc:	4ba9      	ldr	r3, [pc, #676]	; (91884 <cl_testharnesscommandhandler+0x904>)
   915de:	4798      	blx	r3
		break;
   915e0:	f002 b953 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   915e4:	2064      	movs	r0, #100	; 0x64
   915e6:	4ba7      	ldr	r3, [pc, #668]	; (91884 <cl_testharnesscommandhandler+0x904>)
   915e8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_ON";
   915ea:	4bab      	ldr	r3, [pc, #684]	; (91898 <cl_testharnesscommandhandler+0x918>)
   915ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   915f0:	2001      	movs	r0, #1
   915f2:	4baa      	ldr	r3, [pc, #680]	; (9189c <cl_testharnesscommandhandler+0x91c>)
   915f4:	4798      	blx	r3
   915f6:	4603      	mov	r3, r0
   915f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   915fc:	2064      	movs	r0, #100	; 0x64
   915fe:	4ba1      	ldr	r3, [pc, #644]	; (91884 <cl_testharnesscommandhandler+0x904>)
   91600:	4798      	blx	r3
		break;
   91602:	f002 b942 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   91606:	2064      	movs	r0, #100	; 0x64
   91608:	4b9e      	ldr	r3, [pc, #632]	; (91884 <cl_testharnesscommandhandler+0x904>)
   9160a:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_ON";
   9160c:	4ba2      	ldr	r3, [pc, #648]	; (91898 <cl_testharnesscommandhandler+0x918>)
   9160e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	Cl_Uint32Type t = 300;
   91612:	f44f 7396 	mov.w	r3, #300	; 0x12c
   91616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   9161a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   9161e:	4b99      	ldr	r3, [pc, #612]	; (91884 <cl_testharnesscommandhandler+0x904>)
   91620:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   91622:	2001      	movs	r0, #1
   91624:	4b9e      	ldr	r3, [pc, #632]	; (918a0 <cl_testharnesscommandhandler+0x920>)
   91626:	4798      	blx	r3
   91628:	4603      	mov	r3, r0
   9162a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   9162e:	f002 b92c 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   91632:	2064      	movs	r0, #100	; 0x64
   91634:	4b93      	ldr	r3, [pc, #588]	; (91884 <cl_testharnesscommandhandler+0x904>)
   91636:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_OFF";
   91638:	4b9a      	ldr	r3, [pc, #616]	; (918a4 <cl_testharnesscommandhandler+0x924>)
   9163a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   9163e:	2001      	movs	r0, #1
   91640:	4b97      	ldr	r3, [pc, #604]	; (918a0 <cl_testharnesscommandhandler+0x920>)
   91642:	4798      	blx	r3
   91644:	4603      	mov	r3, r0
   91646:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   9164a:	2064      	movs	r0, #100	; 0x64
   9164c:	4b8d      	ldr	r3, [pc, #564]	; (91884 <cl_testharnesscommandhandler+0x904>)
   9164e:	4798      	blx	r3
	break;	
   91650:	f002 b91b 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   91654:	200a      	movs	r0, #10
   91656:	4b8b      	ldr	r3, [pc, #556]	; (91884 <cl_testharnesscommandhandler+0x904>)
   91658:	4798      	blx	r3
			if(iic_nack)
   9165a:	4b93      	ldr	r3, [pc, #588]	; (918a8 <cl_testharnesscommandhandler+0x928>)
   9165c:	781b      	ldrb	r3, [r3, #0]
   9165e:	2b00      	cmp	r3, #0
   91660:	d002      	beq.n	91668 <cl_testharnesscommandhandler+0x6e8>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   91662:	4b91      	ldr	r3, [pc, #580]	; (918a8 <cl_testharnesscommandhandler+0x928>)
   91664:	2200      	movs	r2, #0
   91666:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   91668:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9166c:	2b03      	cmp	r3, #3
   9166e:	d104      	bne.n	9167a <cl_testharnesscommandhandler+0x6fa>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91670:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91674:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91678:	e00b      	b.n	91692 <cl_testharnesscommandhandler+0x712>
		
			
		}
		else if(TestMsg.datasize == 4)
   9167a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9167e:	2b04      	cmp	r3, #4
   91680:	d107      	bne.n	91692 <cl_testharnesscommandhandler+0x712>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   91682:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91686:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   9168a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9168e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   91692:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91696:	2b02      	cmp	r3, #2
   91698:	d115      	bne.n	916c6 <cl_testharnesscommandhandler+0x746>
		{
			Cl_Uint16Type potvalue = 0;
   9169a:	2300      	movs	r3, #0
   9169c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   916a0:	4b82      	ldr	r3, [pc, #520]	; (918ac <cl_testharnesscommandhandler+0x92c>)
   916a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   916a6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   916aa:	029b      	lsls	r3, r3, #10
   916ac:	4a80      	ldr	r2, [pc, #512]	; (918b0 <cl_testharnesscommandhandler+0x930>)
   916ae:	fb82 1203 	smull	r1, r2, r2, r3
   916b2:	1312      	asrs	r2, r2, #12
   916b4:	17db      	asrs	r3, r3, #31
   916b6:	1ad3      	subs	r3, r2, r3
   916b8:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   916bc:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   916c0:	4618      	mov	r0, r3
   916c2:	4b7c      	ldr	r3, [pc, #496]	; (918b4 <cl_testharnesscommandhandler+0x934>)
   916c4:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   916c6:	2300      	movs	r3, #0
   916c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   916cc:	f002 b8dd 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   916d0:	200a      	movs	r0, #10
   916d2:	4b6c      	ldr	r3, [pc, #432]	; (91884 <cl_testharnesscommandhandler+0x904>)
   916d4:	4798      	blx	r3
		if(iic_nack)
   916d6:	4b74      	ldr	r3, [pc, #464]	; (918a8 <cl_testharnesscommandhandler+0x928>)
   916d8:	781b      	ldrb	r3, [r3, #0]
   916da:	2b00      	cmp	r3, #0
   916dc:	d002      	beq.n	916e4 <cl_testharnesscommandhandler+0x764>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   916de:	4b72      	ldr	r3, [pc, #456]	; (918a8 <cl_testharnesscommandhandler+0x928>)
   916e0:	2200      	movs	r2, #0
   916e2:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   916e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   916e8:	2b03      	cmp	r3, #3
   916ea:	d104      	bne.n	916f6 <cl_testharnesscommandhandler+0x776>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   916ec:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   916f0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   916f4:	e00b      	b.n	9170e <cl_testharnesscommandhandler+0x78e>
			
			
		}
		else if(TestMsg.datasize == 4)
   916f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   916fa:	2b04      	cmp	r3, #4
   916fc:	d107      	bne.n	9170e <cl_testharnesscommandhandler+0x78e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   916fe:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91702:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   91706:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9170a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   9170e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91712:	2b02      	cmp	r3, #2
   91714:	d115      	bne.n	91742 <cl_testharnesscommandhandler+0x7c2>
		{
			Cl_Uint16Type potvalue = 0;
   91716:	2300      	movs	r3, #0
   91718:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   9171c:	4b63      	ldr	r3, [pc, #396]	; (918ac <cl_testharnesscommandhandler+0x92c>)
   9171e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   91722:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91726:	029b      	lsls	r3, r3, #10
   91728:	4a61      	ldr	r2, [pc, #388]	; (918b0 <cl_testharnesscommandhandler+0x930>)
   9172a:	fb82 1203 	smull	r1, r2, r2, r3
   9172e:	1312      	asrs	r2, r2, #12
   91730:	17db      	asrs	r3, r3, #31
   91732:	1ad3      	subs	r3, r2, r3
   91734:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   91738:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   9173c:	4618      	mov	r0, r3
   9173e:	4b5e      	ldr	r3, [pc, #376]	; (918b8 <cl_testharnesscommandhandler+0x938>)
   91740:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   91742:	2300      	movs	r3, #0
   91744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   91748:	f002 b89f 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	Cl_Uint8Type system_status[10];
	 system_status[0] = Cl_Mac_StateDummy;
   9174c:	4b5b      	ldr	r3, [pc, #364]	; (918bc <cl_testharnesscommandhandler+0x93c>)
   9174e:	781b      	ldrb	r3, [r3, #0]
   91750:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   91754:	4b5a      	ldr	r3, [pc, #360]	; (918c0 <cl_testharnesscommandhandler+0x940>)
   91756:	781b      	ldrb	r3, [r3, #0]
   91758:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   9175c:	4b59      	ldr	r3, [pc, #356]	; (918c4 <cl_testharnesscommandhandler+0x944>)
   9175e:	781b      	ldrb	r3, [r3, #0]
   91760:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   91764:	4b58      	ldr	r3, [pc, #352]	; (918c8 <cl_testharnesscommandhandler+0x948>)
   91766:	781b      	ldrb	r3, [r3, #0]
   91768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   9176c:	4b57      	ldr	r3, [pc, #348]	; (918cc <cl_testharnesscommandhandler+0x94c>)
   9176e:	781b      	ldrb	r3, [r3, #0]
   91770:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   91774:	4b56      	ldr	r3, [pc, #344]	; (918d0 <cl_testharnesscommandhandler+0x950>)
   91776:	781b      	ldrb	r3, [r3, #0]
   91778:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   9177c:	4b55      	ldr	r3, [pc, #340]	; (918d4 <cl_testharnesscommandhandler+0x954>)
   9177e:	781b      	ldrb	r3, [r3, #0]
   91780:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   91784:	f107 0354 	add.w	r3, r7, #84	; 0x54
   91788:	2207      	movs	r2, #7
   9178a:	4619      	mov	r1, r3
   9178c:	2047      	movs	r0, #71	; 0x47
   9178e:	4b52      	ldr	r3, [pc, #328]	; (918d8 <cl_testharnesscommandhandler+0x958>)
   91790:	4798      	blx	r3
   91792:	4603      	mov	r3, r0
   91794:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   91798:	f002 b877 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
   9179c:	2300      	movs	r3, #0
   9179e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   917a2:	2300      	movs	r3, #0
   917a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   917a8:	2300      	movs	r3, #0
   917aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   917ae:	e051      	b.n	91854 <cl_testharnesscommandhandler+0x8d4>
		{
				temparray[cntr_1++] = cntr;
   917b0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   917b4:	1c5a      	adds	r2, r3, #1
   917b6:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   917ba:	f507 7290 	add.w	r2, r7, #288	; 0x120
   917be:	4413      	add	r3, r2
   917c0:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   917c4:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   917c8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   917cc:	1c5a      	adds	r2, r3, #1
   917ce:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   917d2:	4619      	mov	r1, r3
   917d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   917d8:	4a40      	ldr	r2, [pc, #256]	; (918dc <cl_testharnesscommandhandler+0x95c>)
   917da:	011b      	lsls	r3, r3, #4
   917dc:	4413      	add	r3, r2
   917de:	330e      	adds	r3, #14
   917e0:	781b      	ldrb	r3, [r3, #0]
   917e2:	461a      	mov	r2, r3
   917e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
   917e8:	440b      	add	r3, r1
   917ea:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   917ee:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   917f2:	1c5a      	adds	r2, r3, #1
   917f4:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   917f8:	4619      	mov	r1, r3
   917fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   917fe:	4a37      	ldr	r2, [pc, #220]	; (918dc <cl_testharnesscommandhandler+0x95c>)
   91800:	011b      	lsls	r3, r3, #4
   91802:	4413      	add	r3, r2
   91804:	330f      	adds	r3, #15
   91806:	781b      	ldrb	r3, [r3, #0]
   91808:	461a      	mov	r2, r3
   9180a:	f507 7390 	add.w	r3, r7, #288	; 0x120
   9180e:	440b      	add	r3, r1
   91810:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   91814:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   91818:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   9181c:	492f      	ldr	r1, [pc, #188]	; (918dc <cl_testharnesscommandhandler+0x95c>)
   9181e:	0112      	lsls	r2, r2, #4
   91820:	440a      	add	r2, r1
   91822:	3202      	adds	r2, #2
   91824:	7812      	ldrb	r2, [r2, #0]
   91826:	f507 7190 	add.w	r1, r7, #288	; 0x120
   9182a:	440b      	add	r3, r1
   9182c:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   91830:	2300      	movs	r3, #0
   91832:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   91836:	f107 0350 	add.w	r3, r7, #80	; 0x50
   9183a:	2204      	movs	r2, #4
   9183c:	4619      	mov	r1, r3
   9183e:	2048      	movs	r0, #72	; 0x48
   91840:	4b25      	ldr	r3, [pc, #148]	; (918d8 <cl_testharnesscommandhandler+0x958>)
   91842:	4798      	blx	r3
   91844:	4603      	mov	r3, r0
   91846:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   9184a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   9184e:	3301      	adds	r3, #1
   91850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   91854:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   91858:	2b42      	cmp	r3, #66	; 0x42
   9185a:	d9a9      	bls.n	917b0 <cl_testharnesscommandhandler+0x830>
		
		}
			
	}
	
	break;
   9185c:	f002 b815 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   91860:	2064      	movs	r0, #100	; 0x64
   91862:	4b08      	ldr	r3, [pc, #32]	; (91884 <cl_testharnesscommandhandler+0x904>)
   91864:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_RATE";
   91866:	4b1e      	ldr	r3, [pc, #120]	; (918e0 <cl_testharnesscommandhandler+0x960>)
   91868:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   9186c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91870:	2b02      	cmp	r3, #2
   91872:	d137      	bne.n	918e4 <cl_testharnesscommandhandler+0x964>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91874:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91878:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9187c:	e03e      	b.n	918fc <cl_testharnesscommandhandler+0x97c>
   9187e:	bf00      	nop
   91880:	2007216c 	.word	0x2007216c
   91884:	00093ea9 	.word	0x00093ea9
   91888:	000a9fb8 	.word	0x000a9fb8
   9188c:	00089035 	.word	0x00089035
   91890:	000a9fc0 	.word	0x000a9fc0
   91894:	0009adcd 	.word	0x0009adcd
   91898:	000a9fc8 	.word	0x000a9fc8
   9189c:	0009ad41 	.word	0x0009ad41
   918a0:	0009ad7d 	.word	0x0009ad7d
   918a4:	000a9fd0 	.word	0x000a9fd0
   918a8:	2007194b 	.word	0x2007194b
   918ac:	000a9fd8 	.word	0x000a9fd8
   918b0:	68db8bad 	.word	0x68db8bad
   918b4:	0009b2c1 	.word	0x0009b2c1
   918b8:	0009b2e1 	.word	0x0009b2e1
   918bc:	20072569 	.word	0x20072569
   918c0:	20072568 	.word	0x20072568
   918c4:	2007260c 	.word	0x2007260c
   918c8:	2007260f 	.word	0x2007260f
   918cc:	2007260e 	.word	0x2007260e
   918d0:	20072567 	.word	0x20072567
   918d4:	2007260d 	.word	0x2007260d
   918d8:	0009cbd5 	.word	0x0009cbd5
   918dc:	20071c0c 	.word	0x20071c0c
   918e0:	000a9fe4 	.word	0x000a9fe4
		}
		else if(TestMsg.datasize == 3)
   918e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   918e8:	2b03      	cmp	r3, #3
   918ea:	d107      	bne.n	918fc <cl_testharnesscommandhandler+0x97c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   918ec:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   918f0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   918f4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   918f8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   918fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91900:	4619      	mov	r1, r3
   91902:	2001      	movs	r0, #1
   91904:	4bb6      	ldr	r3, [pc, #728]	; (91be0 <cl_testharnesscommandhandler+0xc60>)
   91906:	4798      	blx	r3
   91908:	4603      	mov	r3, r0
   9190a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   9190e:	2064      	movs	r0, #100	; 0x64
   91910:	4bb4      	ldr	r3, [pc, #720]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91912:	4798      	blx	r3
		break;
   91914:	f001 bfb9 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   91918:	2064      	movs	r0, #100	; 0x64
   9191a:	4bb2      	ldr	r3, [pc, #712]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   9191c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_FRQ";
   9191e:	4bb2      	ldr	r3, [pc, #712]	; (91be8 <cl_testharnesscommandhandler+0xc68>)
   91920:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   91924:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91928:	2b02      	cmp	r3, #2
   9192a:	d104      	bne.n	91936 <cl_testharnesscommandhandler+0x9b6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   9192c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91930:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91934:	e00b      	b.n	9194e <cl_testharnesscommandhandler+0x9ce>
		}
		else if(TestMsg.datasize == 3)
   91936:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9193a:	2b03      	cmp	r3, #3
   9193c:	d107      	bne.n	9194e <cl_testharnesscommandhandler+0x9ce>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   9193e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91942:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91946:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9194a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   9194e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91952:	4619      	mov	r1, r3
   91954:	2001      	movs	r0, #1
   91956:	4ba5      	ldr	r3, [pc, #660]	; (91bec <cl_testharnesscommandhandler+0xc6c>)
   91958:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9195a:	2064      	movs	r0, #100	; 0x64
   9195c:	4ba1      	ldr	r3, [pc, #644]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   9195e:	4798      	blx	r3
		break;
   91960:	f001 bf93 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   91964:	2064      	movs	r0, #100	; 0x64
   91966:	4b9f      	ldr	r3, [pc, #636]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91968:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   9196a:	2002      	movs	r0, #2
   9196c:	4ba0      	ldr	r3, [pc, #640]	; (91bf0 <cl_testharnesscommandhandler+0xc70>)
   9196e:	4798      	blx	r3
   91970:	4603      	mov	r3, r0
   91972:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			
		//cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
		pdataarray = (Cl_Uint8Type *)"DGP_ON";
   91976:	4b9f      	ldr	r3, [pc, #636]	; (91bf4 <cl_testharnesscommandhandler+0xc74>)
   91978:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9197c:	2064      	movs	r0, #100	; 0x64
   9197e:	4b99      	ldr	r3, [pc, #612]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91980:	4798      	blx	r3
		break;
   91982:	f001 bf82 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   91986:	2064      	movs	r0, #100	; 0x64
   91988:	4b96      	ldr	r3, [pc, #600]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   9198a:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   9198c:	2002      	movs	r0, #2
   9198e:	4b9a      	ldr	r3, [pc, #616]	; (91bf8 <cl_testharnesscommandhandler+0xc78>)
   91990:	4798      	blx	r3
   91992:	4603      	mov	r3, r0
   91994:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,900);
		pdataarray = (Cl_Uint8Type *)"DGP_OFF";
   91998:	4b98      	ldr	r3, [pc, #608]	; (91bfc <cl_testharnesscommandhandler+0xc7c>)
   9199a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9199e:	2064      	movs	r0, #100	; 0x64
   919a0:	4b90      	ldr	r3, [pc, #576]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   919a2:	4798      	blx	r3
		break;
   919a4:	f001 bf71 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   919a8:	2064      	movs	r0, #100	; 0x64
   919aa:	4b8e      	ldr	r3, [pc, #568]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   919ac:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_RATE";
   919ae:	4b94      	ldr	r3, [pc, #592]	; (91c00 <cl_testharnesscommandhandler+0xc80>)
   919b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   919b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   919b8:	2b02      	cmp	r3, #2
   919ba:	d104      	bne.n	919c6 <cl_testharnesscommandhandler+0xa46>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   919bc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   919c0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   919c4:	e00b      	b.n	919de <cl_testharnesscommandhandler+0xa5e>
		}
		else if(TestMsg.datasize == 3)
   919c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   919ca:	2b03      	cmp	r3, #3
   919cc:	d107      	bne.n	919de <cl_testharnesscommandhandler+0xa5e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   919ce:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   919d2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   919d6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   919da:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   919de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   919e2:	4619      	mov	r1, r3
   919e4:	2002      	movs	r0, #2
   919e6:	4b7e      	ldr	r3, [pc, #504]	; (91be0 <cl_testharnesscommandhandler+0xc60>)
   919e8:	4798      	blx	r3
   919ea:	4603      	mov	r3, r0
   919ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   919f0:	2064      	movs	r0, #100	; 0x64
   919f2:	4b7c      	ldr	r3, [pc, #496]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   919f4:	4798      	blx	r3
		break;
   919f6:	f001 bf48 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   919fa:	2064      	movs	r0, #100	; 0x64
   919fc:	4b79      	ldr	r3, [pc, #484]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   919fe:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_FRQ";
   91a00:	4b80      	ldr	r3, [pc, #512]	; (91c04 <cl_testharnesscommandhandler+0xc84>)
   91a02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   91a06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a0a:	2b02      	cmp	r3, #2
   91a0c:	d104      	bne.n	91a18 <cl_testharnesscommandhandler+0xa98>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91a0e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91a12:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91a16:	e00b      	b.n	91a30 <cl_testharnesscommandhandler+0xab0>
		}
		else if(TestMsg.datasize == 3)
   91a18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a1c:	2b03      	cmp	r3, #3
   91a1e:	d107      	bne.n	91a30 <cl_testharnesscommandhandler+0xab0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91a20:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91a24:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91a28:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91a2c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   91a30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91a34:	4619      	mov	r1, r3
   91a36:	2002      	movs	r0, #2
   91a38:	4b6c      	ldr	r3, [pc, #432]	; (91bec <cl_testharnesscommandhandler+0xc6c>)
   91a3a:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91a3c:	2064      	movs	r0, #100	; 0x64
   91a3e:	4b69      	ldr	r3, [pc, #420]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91a40:	4798      	blx	r3
		break;
   91a42:	f001 bf22 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   91a46:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a4a:	2b02      	cmp	r3, #2
   91a4c:	d104      	bne.n	91a58 <cl_testharnesscommandhandler+0xad8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91a4e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91a52:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91a56:	e00b      	b.n	91a70 <cl_testharnesscommandhandler+0xaf0>
		}
		else if(TestMsg.datasize == 3)
   91a58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91a5c:	2b03      	cmp	r3, #3
   91a5e:	d107      	bne.n	91a70 <cl_testharnesscommandhandler+0xaf0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91a60:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91a64:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91a68:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91a6c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   91a70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   91a74:	4b64      	ldr	r3, [pc, #400]	; (91c08 <cl_testharnesscommandhandler+0xc88>)
   91a76:	4610      	mov	r0, r2
   91a78:	4798      	blx	r3
   91a7a:	4c64      	ldr	r4, [pc, #400]	; (91c0c <cl_testharnesscommandhandler+0xc8c>)
   91a7c:	a356      	add	r3, pc, #344	; (adr r3, 91bd8 <cl_testharnesscommandhandler+0xc58>)
   91a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   91a82:	47a0      	blx	r4
   91a84:	4603      	mov	r3, r0
   91a86:	460c      	mov	r4, r1
   91a88:	4619      	mov	r1, r3
   91a8a:	4622      	mov	r2, r4
   91a8c:	4b60      	ldr	r3, [pc, #384]	; (91c10 <cl_testharnesscommandhandler+0xc90>)
   91a8e:	4608      	mov	r0, r1
   91a90:	4611      	mov	r1, r2
   91a92:	4798      	blx	r3
   91a94:	4603      	mov	r3, r0
   91a96:	b21a      	sxth	r2, r3
   91a98:	4b5e      	ldr	r3, [pc, #376]	; (91c14 <cl_testharnesscommandhandler+0xc94>)
   91a9a:	801a      	strh	r2, [r3, #0]
			pdataarray = (Cl_Uint8Type*) "PS_T";
   91a9c:	4b5e      	ldr	r3, [pc, #376]	; (91c18 <cl_testharnesscommandhandler+0xc98>)
   91a9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   91aa2:	f001 bef2 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   91aa6:	2064      	movs	r0, #100	; 0x64
   91aa8:	4b4e      	ldr	r3, [pc, #312]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91aaa:	4798      	blx	r3
//		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
//		sv_cntrl_setpumpspeed(UFPUMP,10000);
				cl_uf_controller(CL_UF_EVENT_START,0);
   91aac:	2100      	movs	r1, #0
   91aae:	2002      	movs	r0, #2
   91ab0:	4b5a      	ldr	r3, [pc, #360]	; (91c1c <cl_testharnesscommandhandler+0xc9c>)
   91ab2:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   91ab4:	4b5a      	ldr	r3, [pc, #360]	; (91c20 <cl_testharnesscommandhandler+0xca0>)
   91ab6:	4798      	blx	r3
				cl_wait(100);
   91ab8:	2064      	movs	r0, #100	; 0x64
   91aba:	4b4a      	ldr	r3, [pc, #296]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91abc:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   91abe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   91ac2:	2001      	movs	r0, #1
   91ac4:	4b55      	ldr	r3, [pc, #340]	; (91c1c <cl_testharnesscommandhandler+0xc9c>)
   91ac6:	4798      	blx	r3
				cl_wait(100);
   91ac8:	2064      	movs	r0, #100	; 0x64
   91aca:	4b46      	ldr	r3, [pc, #280]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91acc:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   91ace:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   91ad2:	2001      	movs	r0, #1
   91ad4:	4b51      	ldr	r3, [pc, #324]	; (91c1c <cl_testharnesscommandhandler+0xc9c>)
   91ad6:	4798      	blx	r3
				cl_wait(100);
   91ad8:	2064      	movs	r0, #100	; 0x64
   91ada:	4b42      	ldr	r3, [pc, #264]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91adc:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   91ade:	2196      	movs	r1, #150	; 0x96
   91ae0:	2001      	movs	r0, #1
   91ae2:	4b4e      	ldr	r3, [pc, #312]	; (91c1c <cl_testharnesscommandhandler+0xc9c>)
   91ae4:	4798      	blx	r3
				
		break;
   91ae6:	f001 bed0 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   91aea:	2064      	movs	r0, #100	; 0x64
   91aec:	4b3d      	ldr	r3, [pc, #244]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91aee:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   91af0:	2004      	movs	r0, #4
   91af2:	4b41      	ldr	r3, [pc, #260]	; (91bf8 <cl_testharnesscommandhandler+0xc78>)
   91af4:	4798      	blx	r3
   91af6:	4603      	mov	r3, r0
   91af8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (Cl_Uint8Type *)"UFP_OFF";
   91afc:	4b49      	ldr	r3, [pc, #292]	; (91c24 <cl_testharnesscommandhandler+0xca4>)
   91afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91b02:	2064      	movs	r0, #100	; 0x64
   91b04:	4b37      	ldr	r3, [pc, #220]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b06:	4798      	blx	r3
		break;
   91b08:	f001 bebf 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   91b0c:	2064      	movs	r0, #100	; 0x64
   91b0e:	4b35      	ldr	r3, [pc, #212]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b10:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   91b12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91b16:	2b02      	cmp	r3, #2
   91b18:	d104      	bne.n	91b24 <cl_testharnesscommandhandler+0xba4>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91b1a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91b1e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91b22:	e00b      	b.n	91b3c <cl_testharnesscommandhandler+0xbbc>
		}
		else if(TestMsg.datasize == 3)
   91b24:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91b28:	2b03      	cmp	r3, #3
   91b2a:	d107      	bne.n	91b3c <cl_testharnesscommandhandler+0xbbc>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91b2c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91b30:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91b34:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91b38:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   91b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91b40:	4619      	mov	r1, r3
   91b42:	2004      	movs	r0, #4
   91b44:	4b26      	ldr	r3, [pc, #152]	; (91be0 <cl_testharnesscommandhandler+0xc60>)
   91b46:	4798      	blx	r3
		uf_rotation_counter = 0;
   91b48:	4b37      	ldr	r3, [pc, #220]	; (91c28 <cl_testharnesscommandhandler+0xca8>)
   91b4a:	2200      	movs	r2, #0
   91b4c:	801a      	strh	r2, [r3, #0]
		pdataarray = (Cl_Uint8Type *)"UFP_RATE";
   91b4e:	4b37      	ldr	r3, [pc, #220]	; (91c2c <cl_testharnesscommandhandler+0xcac>)
   91b50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91b54:	2064      	movs	r0, #100	; 0x64
   91b56:	4b23      	ldr	r3, [pc, #140]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b58:	4798      	blx	r3
		break;
   91b5a:	f001 be96 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   91b5e:	2064      	movs	r0, #100	; 0x64
   91b60:	4b20      	ldr	r3, [pc, #128]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b62:	4798      	blx	r3
		sv_cntrl_activatevenousclamp();
   91b64:	4b32      	ldr	r3, [pc, #200]	; (91c30 <cl_testharnesscommandhandler+0xcb0>)
   91b66:	4798      	blx	r3
					//sv_cntrl_deactivate_valve(VALVE_ID4);
					//cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	//flag_hotrinse_1 = 1;
		cl_wait(100);
   91b68:	2064      	movs	r0, #100	; 0x64
   91b6a:	4b1e      	ldr	r3, [pc, #120]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b6c:	4798      	blx	r3
		break;
   91b6e:	f001 be8c 	b.w	9388a <cl_testharnesscommandhandler+0x290a>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   91b72:	2064      	movs	r0, #100	; 0x64
   91b74:	4b1b      	ldr	r3, [pc, #108]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b76:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   91b78:	2006      	movs	r0, #6
   91b7a:	4b1d      	ldr	r3, [pc, #116]	; (91bf0 <cl_testharnesscommandhandler+0xc70>)
   91b7c:	4798      	blx	r3
   91b7e:	4603      	mov	r3, r0
   91b80:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (Cl_Uint8Type *)"VLA_PUMP_ON";
   91b84:	4b2b      	ldr	r3, [pc, #172]	; (91c34 <cl_testharnesscommandhandler+0xcb4>)
   91b86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91b8a:	2064      	movs	r0, #100	; 0x64
   91b8c:	4b15      	ldr	r3, [pc, #84]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b8e:	4798      	blx	r3
		break;
   91b90:	f001 be7b 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   91b94:	2064      	movs	r0, #100	; 0x64
   91b96:	4b13      	ldr	r3, [pc, #76]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91b98:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   91b9a:	2006      	movs	r0, #6
   91b9c:	4b16      	ldr	r3, [pc, #88]	; (91bf8 <cl_testharnesscommandhandler+0xc78>)
   91b9e:	4798      	blx	r3
   91ba0:	4603      	mov	r3, r0
   91ba2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (Cl_Uint8Type *)"VLA_PUMP_OFF";
   91ba6:	4b24      	ldr	r3, [pc, #144]	; (91c38 <cl_testharnesscommandhandler+0xcb8>)
   91ba8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91bac:	2064      	movs	r0, #100	; 0x64
   91bae:	4b0d      	ldr	r3, [pc, #52]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91bb0:	4798      	blx	r3
		break;
   91bb2:	f001 be6a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   91bb6:	2064      	movs	r0, #100	; 0x64
   91bb8:	4b0a      	ldr	r3, [pc, #40]	; (91be4 <cl_testharnesscommandhandler+0xc64>)
   91bba:	4798      	blx	r3
				

				
		//pdataarray = (Cl_Uint8Type *)"BP_ON";
		Cl_Uint16Type temp_10;
		Cl_Uint16Type potvalue1,read_data = 0;
   91bbc:	2300      	movs	r3, #0
   91bbe:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   91bc2:	2003      	movs	r0, #3
   91bc4:	4b0a      	ldr	r3, [pc, #40]	; (91bf0 <cl_testharnesscommandhandler+0xc70>)
   91bc6:	4798      	blx	r3
   91bc8:	4603      	mov	r3, r0
   91bca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   91bce:	f001 be5c 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
   91bd2:	bf00      	nop
   91bd4:	f3af 8000 	nop.w
   91bd8:	487fcb92 	.word	0x487fcb92
   91bdc:	3ffd7dbf 	.word	0x3ffd7dbf
   91be0:	0009ae59 	.word	0x0009ae59
   91be4:	00093ea9 	.word	0x00093ea9
   91be8:	000a9fec 	.word	0x000a9fec
   91bec:	0009b009 	.word	0x0009b009
   91bf0:	0009ad41 	.word	0x0009ad41
   91bf4:	000a9ff4 	.word	0x000a9ff4
   91bf8:	0009ad7d 	.word	0x0009ad7d
   91bfc:	000a9ffc 	.word	0x000a9ffc
   91c00:	000aa004 	.word	0x000aa004
   91c04:	000aa010 	.word	0x000aa010
   91c08:	000a763d 	.word	0x000a763d
   91c0c:	000a7729 	.word	0x000a7729
   91c10:	000a7c5d 	.word	0x000a7c5d
   91c14:	20070102 	.word	0x20070102
   91c18:	000aa018 	.word	0x000aa018
   91c1c:	00096ea9 	.word	0x00096ea9
   91c20:	00096c8d 	.word	0x00096c8d
   91c24:	000aa020 	.word	0x000aa020
   91c28:	2007194c 	.word	0x2007194c
   91c2c:	000aa028 	.word	0x000aa028
   91c30:	0009af2d 	.word	0x0009af2d
   91c34:	000aa034 	.word	0x000aa034
   91c38:	000aa040 	.word	0x000aa040

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   91c3c:	2064      	movs	r0, #100	; 0x64
   91c3e:	4bb2      	ldr	r3, [pc, #712]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91c40:	4798      	blx	r3
		Cl_Uint8Type data =0;
   91c42:	2300      	movs	r3, #0
   91c44:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   91c48:	2003      	movs	r0, #3
   91c4a:	4bb0      	ldr	r3, [pc, #704]	; (91f0c <cl_testharnesscommandhandler+0xf8c>)
   91c4c:	4798      	blx	r3
   91c4e:	4603      	mov	r3, r0
   91c50:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
	//	pdataarray = (Cl_Uint8Type *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91c54:	2064      	movs	r0, #100	; 0x64
   91c56:	4bac      	ldr	r3, [pc, #688]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91c58:	4798      	blx	r3
		break;
   91c5a:	f001 be16 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   91c5e:	2064      	movs	r0, #100	; 0x64
   91c60:	4ba9      	ldr	r3, [pc, #676]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91c62:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   91c64:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91c68:	2b02      	cmp	r3, #2
   91c6a:	d104      	bne.n	91c76 <cl_testharnesscommandhandler+0xcf6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91c6c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91c70:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91c74:	e00b      	b.n	91c8e <cl_testharnesscommandhandler+0xd0e>
		}
		else if(TestMsg.datasize == 3)
   91c76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91c7a:	2b03      	cmp	r3, #3
   91c7c:	d107      	bne.n	91c8e <cl_testharnesscommandhandler+0xd0e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91c7e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91c82:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91c86:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91c8a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		Treatdata[ID_bloodratetreat] = cl_indata.word;
   91c8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91c92:	4a9f      	ldr	r2, [pc, #636]	; (91f10 <cl_testharnesscommandhandler+0xf90>)
   91c94:	65d3      	str	r3, [r2, #92]	; 0x5c
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   91c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91c9a:	4619      	mov	r1, r3
   91c9c:	2003      	movs	r0, #3
   91c9e:	4b9d      	ldr	r3, [pc, #628]	; (91f14 <cl_testharnesscommandhandler+0xf94>)
   91ca0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BP_RATE";
   91ca2:	4b9d      	ldr	r3, [pc, #628]	; (91f18 <cl_testharnesscommandhandler+0xf98>)
   91ca4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91ca8:	2064      	movs	r0, #100	; 0x64
   91caa:	4b97      	ldr	r3, [pc, #604]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91cac:	4798      	blx	r3
		break;
   91cae:	f001 bdec 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   91cb2:	2064      	movs	r0, #100	; 0x64
   91cb4:	4b94      	ldr	r3, [pc, #592]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91cb6:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   91cb8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91cbc:	2b02      	cmp	r3, #2
   91cbe:	d105      	bne.n	91ccc <cl_testharnesscommandhandler+0xd4c>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91cc0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91cc4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   91cc8:	f001 bdda 	b.w	93880 <cl_testharnesscommandhandler+0x2900>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   91ccc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91cd0:	2b03      	cmp	r3, #3
   91cd2:	f041 85d5 	bne.w	93880 <cl_testharnesscommandhandler+0x2900>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91cd6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91cda:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91cde:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91ce2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   91ce6:	f001 bdcb 	b.w	93880 <cl_testharnesscommandhandler+0x2900>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   91cea:	2064      	movs	r0, #100	; 0x64
   91cec:	4b86      	ldr	r3, [pc, #536]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91cee:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   91cf0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91cf4:	2b02      	cmp	r3, #2
   91cf6:	d105      	bne.n	91d04 <cl_testharnesscommandhandler+0xd84>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91cf8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91cfc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   91d00:	f001 bdc0 	b.w	93884 <cl_testharnesscommandhandler+0x2904>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   91d04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91d08:	2b03      	cmp	r3, #3
   91d0a:	f041 85bb 	bne.w	93884 <cl_testharnesscommandhandler+0x2904>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91d0e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91d12:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91d16:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91d1a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   91d1e:	f001 bdb1 	b.w	93884 <cl_testharnesscommandhandler+0x2904>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   91d22:	2064      	movs	r0, #100	; 0x64
   91d24:	4b78      	ldr	r3, [pc, #480]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d26:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   91d28:	4b7c      	ldr	r3, [pc, #496]	; (91f1c <cl_testharnesscommandhandler+0xf9c>)
   91d2a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"VC_OFF";
   91d2c:	4b7c      	ldr	r3, [pc, #496]	; (91f20 <cl_testharnesscommandhandler+0xfa0>)
   91d2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//		cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		//flag_hotrinse = 1;
		//cl_wait(100);
		break;
   91d32:	f001 bdaa 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   91d36:	2064      	movs	r0, #100	; 0x64
   91d38:	4b73      	ldr	r3, [pc, #460]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d3a:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   91d3c:	4b79      	ldr	r3, [pc, #484]	; (91f24 <cl_testharnesscommandhandler+0xfa4>)
   91d3e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_ON";
   91d40:	4b79      	ldr	r3, [pc, #484]	; (91f28 <cl_testharnesscommandhandler+0xfa8>)
   91d42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d46:	2064      	movs	r0, #100	; 0x64
   91d48:	4b6f      	ldr	r3, [pc, #444]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d4a:	4798      	blx	r3
		break;
   91d4c:	f001 bd9d 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   91d50:	2064      	movs	r0, #100	; 0x64
   91d52:	4b6d      	ldr	r3, [pc, #436]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d54:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   91d56:	4b75      	ldr	r3, [pc, #468]	; (91f2c <cl_testharnesscommandhandler+0xfac>)
   91d58:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_OFF";
   91d5a:	4b75      	ldr	r3, [pc, #468]	; (91f30 <cl_testharnesscommandhandler+0xfb0>)
   91d5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d60:	2064      	movs	r0, #100	; 0x64
   91d62:	4b69      	ldr	r3, [pc, #420]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d64:	4798      	blx	r3
		break;
   91d66:	f001 bd90 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   91d6a:	2064      	movs	r0, #100	; 0x64
   91d6c:	4b66      	ldr	r3, [pc, #408]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d6e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_ON";
   91d70:	4b70      	ldr	r3, [pc, #448]	; (91f34 <cl_testharnesscommandhandler+0xfb4>)
   91d72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d76:	2064      	movs	r0, #100	; 0x64
   91d78:	4b63      	ldr	r3, [pc, #396]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d7a:	4798      	blx	r3
		break;
   91d7c:	f001 bd85 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   91d80:	2064      	movs	r0, #100	; 0x64
   91d82:	4b61      	ldr	r3, [pc, #388]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d84:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_OFF";
   91d86:	4b6c      	ldr	r3, [pc, #432]	; (91f38 <cl_testharnesscommandhandler+0xfb8>)
   91d88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91d8c:	2064      	movs	r0, #100	; 0x64
   91d8e:	4b5e      	ldr	r3, [pc, #376]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91d90:	4798      	blx	r3
		break;
   91d92:	f001 bd7a 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_OPEN";
   91d96:	4b69      	ldr	r3, [pc, #420]	; (91f3c <cl_testharnesscommandhandler+0xfbc>)
   91d98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   91d9c:	2004      	movs	r0, #4
   91d9e:	4b68      	ldr	r3, [pc, #416]	; (91f40 <cl_testharnesscommandhandler+0xfc0>)
   91da0:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91da2:	2064      	movs	r0, #100	; 0x64
   91da4:	4b58      	ldr	r3, [pc, #352]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91da6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   91da8:	2004      	movs	r0, #4
   91daa:	4b66      	ldr	r3, [pc, #408]	; (91f44 <cl_testharnesscommandhandler+0xfc4>)
   91dac:	4798      	blx	r3
		cl_wait(100);
   91dae:	2064      	movs	r0, #100	; 0x64
   91db0:	4b55      	ldr	r3, [pc, #340]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91db2:	4798      	blx	r3
		break;
   91db4:	f001 bd69 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   91db8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91dbc:	2b00      	cmp	r3, #0
   91dbe:	d10d      	bne.n	91ddc <cl_testharnesscommandhandler+0xe5c>
		{
			sv_cs_setpotvalue(3800);
   91dc0:	f640 60d8 	movw	r0, #3800	; 0xed8
   91dc4:	4b60      	ldr	r3, [pc, #384]	; (91f48 <cl_testharnesscommandhandler+0xfc8>)
   91dc6:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   91dc8:	f240 411a 	movw	r1, #1050	; 0x41a
   91dcc:	2001      	movs	r0, #1
   91dce:	4b51      	ldr	r3, [pc, #324]	; (91f14 <cl_testharnesscommandhandler+0xf94>)
   91dd0:	4798      	blx	r3
   91dd2:	4603      	mov	r3, r0
   91dd4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   91dd8:	f001 bd56 	b.w	93888 <cl_testharnesscommandhandler+0x2908>
		{
			sv_cs_setpotvalue(3800);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
			
		}
		else if(TestMsg.data.byte[1] == 1)
   91ddc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91de0:	2b01      	cmp	r3, #1
   91de2:	d10d      	bne.n	91e00 <cl_testharnesscommandhandler+0xe80>
		{
						sv_cs_setpotvalue(2450);
   91de4:	f640 1092 	movw	r0, #2450	; 0x992
   91de8:	4b57      	ldr	r3, [pc, #348]	; (91f48 <cl_testharnesscommandhandler+0xfc8>)
   91dea:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   91dec:	f240 21e9 	movw	r1, #745	; 0x2e9
   91df0:	2001      	movs	r0, #1
   91df2:	4b48      	ldr	r3, [pc, #288]	; (91f14 <cl_testharnesscommandhandler+0xf94>)
   91df4:	4798      	blx	r3
   91df6:	4603      	mov	r3, r0
   91df8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   91dfc:	f001 bd44 	b.w	93888 <cl_testharnesscommandhandler+0x2908>
		else if(TestMsg.data.byte[1] == 1)
		{
						sv_cs_setpotvalue(2450);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
		}
		else if(TestMsg.data.byte[1] == 2)
   91e00:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91e04:	2b02      	cmp	r3, #2
   91e06:	f041 853f 	bne.w	93888 <cl_testharnesscommandhandler+0x2908>
		{
						sv_cs_setpotvalue(1090);
   91e0a:	f240 4042 	movw	r0, #1090	; 0x442
   91e0e:	4b4e      	ldr	r3, [pc, #312]	; (91f48 <cl_testharnesscommandhandler+0xfc8>)
   91e10:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   91e12:	f44f 71b9 	mov.w	r1, #370	; 0x172
   91e16:	2001      	movs	r0, #1
   91e18:	4b3e      	ldr	r3, [pc, #248]	; (91f14 <cl_testharnesscommandhandler+0xf94>)
   91e1a:	4798      	blx	r3
   91e1c:	4603      	mov	r3, r0
   91e1e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   91e22:	f001 bd31 	b.w	93888 <cl_testharnesscommandhandler+0x2908>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   91e26:	2300      	movs	r3, #0
   91e28:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   91e2a:	2064      	movs	r0, #100	; 0x64
   91e2c:	4b36      	ldr	r3, [pc, #216]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91e2e:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"V_OPEN";
   91e30:	4b42      	ldr	r3, [pc, #264]	; (91f3c <cl_testharnesscommandhandler+0xfbc>)
   91e32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   91e36:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91e3a:	4618      	mov	r0, r3
   91e3c:	4b40      	ldr	r3, [pc, #256]	; (91f40 <cl_testharnesscommandhandler+0xfc0>)
   91e3e:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   91e40:	2064      	movs	r0, #100	; 0x64
   91e42:	4b31      	ldr	r3, [pc, #196]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91e44:	4798      	blx	r3
					
		}
		}
		break;
   91e46:	f001 bd20 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   91e4a:	2064      	movs	r0, #100	; 0x64
   91e4c:	4b2e      	ldr	r3, [pc, #184]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91e4e:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   91e50:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91e54:	4618      	mov	r0, r3
   91e56:	4b3b      	ldr	r3, [pc, #236]	; (91f44 <cl_testharnesscommandhandler+0xfc4>)
   91e58:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_CLOSE";
   91e5a:	4b3c      	ldr	r3, [pc, #240]	; (91f4c <cl_testharnesscommandhandler+0xfcc>)
   91e5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91e60:	2064      	movs	r0, #100	; 0x64
   91e62:	4b29      	ldr	r3, [pc, #164]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91e64:	4798      	blx	r3
		break;
   91e66:	f001 bd10 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   91e6a:	2064      	movs	r0, #100	; 0x64
   91e6c:	4b26      	ldr	r3, [pc, #152]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91e6e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
   91e70:	4b37      	ldr	r3, [pc, #220]	; (91f50 <cl_testharnesscommandhandler+0xfd0>)
   91e72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   91e76:	2301      	movs	r3, #1
   91e78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   91e7c:	e00c      	b.n	91e98 <cl_testharnesscommandhandler+0xf18>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   91e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91e82:	4618      	mov	r0, r3
   91e84:	4b2e      	ldr	r3, [pc, #184]	; (91f40 <cl_testharnesscommandhandler+0xfc0>)
   91e86:	4798      	blx	r3
				cl_wait(10);
   91e88:	200a      	movs	r0, #10
   91e8a:	4b1f      	ldr	r3, [pc, #124]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91e8c:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   91e8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91e92:	3301      	adds	r3, #1
   91e94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   91e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   91e9c:	2b14      	cmp	r3, #20
   91e9e:	d9ee      	bls.n	91e7e <cl_testharnesscommandhandler+0xefe>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   91ea0:	2064      	movs	r0, #100	; 0x64
   91ea2:	4b19      	ldr	r3, [pc, #100]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91ea4:	4798      	blx	r3
		break;
   91ea6:	f001 bcf0 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   91eaa:	2064      	movs	r0, #100	; 0x64
   91eac:	4b16      	ldr	r3, [pc, #88]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91eae:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   91eb0:	2005      	movs	r0, #5
   91eb2:	4b28      	ldr	r3, [pc, #160]	; (91f54 <cl_testharnesscommandhandler+0xfd4>)
   91eb4:	4798      	blx	r3
   91eb6:	4603      	mov	r3, r0
   91eb8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_ON";
   91ebc:	4b26      	ldr	r3, [pc, #152]	; (91f58 <cl_testharnesscommandhandler+0xfd8>)
   91ebe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91ec2:	2064      	movs	r0, #100	; 0x64
   91ec4:	4b10      	ldr	r3, [pc, #64]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91ec6:	4798      	blx	r3
		break;
   91ec8:	f001 bcdf 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   91ecc:	2064      	movs	r0, #100	; 0x64
   91ece:	4b0e      	ldr	r3, [pc, #56]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91ed0:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   91ed2:	2005      	movs	r0, #5
   91ed4:	4b0d      	ldr	r3, [pc, #52]	; (91f0c <cl_testharnesscommandhandler+0xf8c>)
   91ed6:	4798      	blx	r3
   91ed8:	4603      	mov	r3, r0
   91eda:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_OFF";
   91ede:	4b1f      	ldr	r3, [pc, #124]	; (91f5c <cl_testharnesscommandhandler+0xfdc>)
   91ee0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91ee4:	2064      	movs	r0, #100	; 0x64
   91ee6:	4b08      	ldr	r3, [pc, #32]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91ee8:	4798      	blx	r3
		break;
   91eea:	f001 bcce 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   91eee:	2064      	movs	r0, #100	; 0x64
   91ef0:	4b05      	ldr	r3, [pc, #20]	; (91f08 <cl_testharnesscommandhandler+0xf88>)
   91ef2:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   91ef4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91ef8:	2b02      	cmp	r3, #2
   91efa:	d131      	bne.n	91f60 <cl_testharnesscommandhandler+0xfe0>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91efc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91f00:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91f04:	e038      	b.n	91f78 <cl_testharnesscommandhandler+0xff8>
   91f06:	bf00      	nop
   91f08:	00093ea9 	.word	0x00093ea9
   91f0c:	0009ad7d 	.word	0x0009ad7d
   91f10:	20072614 	.word	0x20072614
   91f14:	0009ae59 	.word	0x0009ae59
   91f18:	000aa050 	.word	0x000aa050
   91f1c:	0009af41 	.word	0x0009af41
   91f20:	000aa058 	.word	0x000aa058
   91f24:	0009ae31 	.word	0x0009ae31
   91f28:	000aa060 	.word	0x000aa060
   91f2c:	0009ae45 	.word	0x0009ae45
   91f30:	000aa068 	.word	0x000aa068
   91f34:	000aa070 	.word	0x000aa070
   91f38:	000aa07c 	.word	0x000aa07c
   91f3c:	000aa088 	.word	0x000aa088
   91f40:	0009ade1 	.word	0x0009ade1
   91f44:	0009ae01 	.word	0x0009ae01
   91f48:	0009b2c1 	.word	0x0009b2c1
   91f4c:	000aa090 	.word	0x000aa090
   91f50:	000aa098 	.word	0x000aa098
   91f54:	0009ad41 	.word	0x0009ad41
   91f58:	000aa0a4 	.word	0x000aa0a4
   91f5c:	000aa0ac 	.word	0x000aa0ac
						}
						else if(TestMsg.datasize == 3)
   91f60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91f64:	2b03      	cmp	r3, #3
   91f66:	d107      	bne.n	91f78 <cl_testharnesscommandhandler+0xff8>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91f68:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91f6c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91f70:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91f74:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   91f78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91f7c:	4619      	mov	r1, r3
   91f7e:	2005      	movs	r0, #5
   91f80:	4b9e      	ldr	r3, [pc, #632]	; (921fc <cl_testharnesscommandhandler+0x127c>)
   91f82:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_RATE";
   91f84:	4b9e      	ldr	r3, [pc, #632]	; (92200 <cl_testharnesscommandhandler+0x1280>)
   91f86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91f8a:	2064      	movs	r0, #100	; 0x64
   91f8c:	4b9d      	ldr	r3, [pc, #628]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   91f8e:	4798      	blx	r3
		break;
   91f90:	f001 bc7b 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   91f94:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91f98:	2b00      	cmp	r3, #0
   91f9a:	d003      	beq.n	91fa4 <cl_testharnesscommandhandler+0x1024>
		{
			sv_cntrl_setHepa_dir();
   91f9c:	4b9a      	ldr	r3, [pc, #616]	; (92208 <cl_testharnesscommandhandler+0x1288>)
   91f9e:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   91fa0:	f001 bc73 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   91fa4:	4b99      	ldr	r3, [pc, #612]	; (9220c <cl_testharnesscommandhandler+0x128c>)
   91fa6:	4798      	blx	r3
		}
		break;
   91fa8:	f001 bc6f 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   91fac:	2032      	movs	r0, #50	; 0x32
   91fae:	4b95      	ldr	r3, [pc, #596]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   91fb0:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   91fb2:	2001      	movs	r0, #1
   91fb4:	4b96      	ldr	r3, [pc, #600]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   91fb6:	4798      	blx	r3
   91fb8:	4603      	mov	r3, r0
   91fba:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91fbe:	200a      	movs	r0, #10
   91fc0:	4b90      	ldr	r3, [pc, #576]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   91fc2:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   91fc4:	2002      	movs	r0, #2
   91fc6:	4b92      	ldr	r3, [pc, #584]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   91fc8:	4798      	blx	r3
   91fca:	4603      	mov	r3, r0
   91fcc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91fd0:	200a      	movs	r0, #10
   91fd2:	4b8c      	ldr	r3, [pc, #560]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   91fd4:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   91fd6:	2003      	movs	r0, #3
   91fd8:	4b8d      	ldr	r3, [pc, #564]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   91fda:	4798      	blx	r3
   91fdc:	4603      	mov	r3, r0
   91fde:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91fe2:	200a      	movs	r0, #10
   91fe4:	4b87      	ldr	r3, [pc, #540]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   91fe6:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   91fe8:	2004      	movs	r0, #4
   91fea:	4b89      	ldr	r3, [pc, #548]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   91fec:	4798      	blx	r3
   91fee:	4603      	mov	r3, r0
   91ff0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91ff4:	200a      	movs	r0, #10
   91ff6:	4b83      	ldr	r3, [pc, #524]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   91ff8:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   91ffa:	2005      	movs	r0, #5
   91ffc:	4b84      	ldr	r3, [pc, #528]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   91ffe:	4798      	blx	r3
   92000:	4603      	mov	r3, r0
   92002:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   92006:	2032      	movs	r0, #50	; 0x32
   92008:	4b7e      	ldr	r3, [pc, #504]	; (92204 <cl_testharnesscommandhandler+0x1284>)
   9200a:	4798      	blx	r3
		break;
   9200c:	f001 bc3d 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   92010:	2006      	movs	r0, #6
   92012:	4b80      	ldr	r3, [pc, #512]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92014:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   92016:	2007      	movs	r0, #7
   92018:	4b7e      	ldr	r3, [pc, #504]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9201a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   9201c:	200c      	movs	r0, #12
   9201e:	4b7d      	ldr	r3, [pc, #500]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92020:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   92022:	2009      	movs	r0, #9
   92024:	4b7b      	ldr	r3, [pc, #492]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92026:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   92028:	2005      	movs	r0, #5
   9202a:	4b7b      	ldr	r3, [pc, #492]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9202c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9202e:	2008      	movs	r0, #8
   92030:	4b79      	ldr	r3, [pc, #484]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92032:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   92034:	200a      	movs	r0, #10
   92036:	4b78      	ldr	r3, [pc, #480]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92038:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9203a:	200b      	movs	r0, #11
   9203c:	4b76      	ldr	r3, [pc, #472]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9203e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1 SET";
   92040:	4b76      	ldr	r3, [pc, #472]	; (9221c <cl_testharnesscommandhandler+0x129c>)
   92042:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   92046:	f001 bc20 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   9204a:	2005      	movs	r0, #5
   9204c:	4b71      	ldr	r3, [pc, #452]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9204e:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   92050:	2008      	movs	r0, #8
   92052:	4b70      	ldr	r3, [pc, #448]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92054:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   92056:	200a      	movs	r0, #10
   92058:	4b6e      	ldr	r3, [pc, #440]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9205a:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   9205c:	200b      	movs	r0, #11
   9205e:	4b6d      	ldr	r3, [pc, #436]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92060:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   92062:	200c      	movs	r0, #12
   92064:	4b6c      	ldr	r3, [pc, #432]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92066:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   92068:	2009      	movs	r0, #9
   9206a:	4b6b      	ldr	r3, [pc, #428]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9206c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   9206e:	2006      	movs	r0, #6
   92070:	4b69      	ldr	r3, [pc, #420]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92072:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   92074:	2007      	movs	r0, #7
   92076:	4b68      	ldr	r3, [pc, #416]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92078:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2 SET";
   9207a:	4b69      	ldr	r3, [pc, #420]	; (92220 <cl_testharnesscommandhandler+0x12a0>)
   9207c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   92080:	f001 bc03 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   92084:	2006      	movs	r0, #6
   92086:	4b63      	ldr	r3, [pc, #396]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92088:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   9208a:	2007      	movs	r0, #7
   9208c:	4b61      	ldr	r3, [pc, #388]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9208e:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   92090:	200c      	movs	r0, #12
   92092:	4b60      	ldr	r3, [pc, #384]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92094:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   92096:	2009      	movs	r0, #9
   92098:	4b5e      	ldr	r3, [pc, #376]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9209a:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   9209c:	2005      	movs	r0, #5
   9209e:	4b5e      	ldr	r3, [pc, #376]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920a0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   920a2:	2008      	movs	r0, #8
   920a4:	4b5c      	ldr	r3, [pc, #368]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920a6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   920a8:	200a      	movs	r0, #10
   920aa:	4b5b      	ldr	r3, [pc, #364]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920ac:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   920ae:	200b      	movs	r0, #11
   920b0:	4b59      	ldr	r3, [pc, #356]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920b2:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   920b4:	200d      	movs	r0, #13
   920b6:	4b57      	ldr	r3, [pc, #348]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920b8:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   920ba:	200e      	movs	r0, #14
   920bc:	4b55      	ldr	r3, [pc, #340]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920be:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1_1314 SET";
   920c0:	4b58      	ldr	r3, [pc, #352]	; (92224 <cl_testharnesscommandhandler+0x12a4>)
   920c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   920c6:	f001 bbe0 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   920ca:	2005      	movs	r0, #5
   920cc:	4b51      	ldr	r3, [pc, #324]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920ce:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   920d0:	2008      	movs	r0, #8
   920d2:	4b50      	ldr	r3, [pc, #320]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920d4:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   920d6:	200a      	movs	r0, #10
   920d8:	4b4e      	ldr	r3, [pc, #312]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920da:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   920dc:	200b      	movs	r0, #11
   920de:	4b4d      	ldr	r3, [pc, #308]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920e0:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   920e2:	200c      	movs	r0, #12
   920e4:	4b4c      	ldr	r3, [pc, #304]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920e6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   920e8:	2009      	movs	r0, #9
   920ea:	4b4b      	ldr	r3, [pc, #300]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920ec:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   920ee:	2006      	movs	r0, #6
   920f0:	4b49      	ldr	r3, [pc, #292]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920f2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   920f4:	2007      	movs	r0, #7
   920f6:	4b48      	ldr	r3, [pc, #288]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   920f8:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   920fa:	200d      	movs	r0, #13
   920fc:	4b45      	ldr	r3, [pc, #276]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   920fe:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   92100:	200e      	movs	r0, #14
   92102:	4b44      	ldr	r3, [pc, #272]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92104:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2_1314 SET";
   92106:	4b48      	ldr	r3, [pc, #288]	; (92228 <cl_testharnesscommandhandler+0x12a8>)
   92108:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   9210c:	f001 bbbd 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   92110:	2006      	movs	r0, #6
   92112:	4b40      	ldr	r3, [pc, #256]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92114:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   92116:	2007      	movs	r0, #7
   92118:	4b3e      	ldr	r3, [pc, #248]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9211a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   9211c:	200c      	movs	r0, #12
   9211e:	4b3d      	ldr	r3, [pc, #244]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92120:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   92122:	2009      	movs	r0, #9
   92124:	4b3b      	ldr	r3, [pc, #236]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92126:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   92128:	2005      	movs	r0, #5
   9212a:	4b3b      	ldr	r3, [pc, #236]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9212c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9212e:	2008      	movs	r0, #8
   92130:	4b39      	ldr	r3, [pc, #228]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92132:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   92134:	200a      	movs	r0, #10
   92136:	4b38      	ldr	r3, [pc, #224]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92138:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9213a:	200b      	movs	r0, #11
   9213c:	4b36      	ldr	r3, [pc, #216]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9213e:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   92140:	2004      	movs	r0, #4
   92142:	4b34      	ldr	r3, [pc, #208]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92144:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   92146:	200d      	movs	r0, #13
   92148:	4b33      	ldr	r3, [pc, #204]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9214a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   9214c:	200e      	movs	r0, #14
   9214e:	4b32      	ldr	r3, [pc, #200]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92150:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V1_4 SET";
   92152:	4b36      	ldr	r3, [pc, #216]	; (9222c <cl_testharnesscommandhandler+0x12ac>)
   92154:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   92158:	f001 bb97 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   9215c:	2005      	movs	r0, #5
   9215e:	4b2d      	ldr	r3, [pc, #180]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92160:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   92162:	2008      	movs	r0, #8
   92164:	4b2b      	ldr	r3, [pc, #172]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92166:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   92168:	200a      	movs	r0, #10
   9216a:	4b2a      	ldr	r3, [pc, #168]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   9216c:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   9216e:	200b      	movs	r0, #11
   92170:	4b28      	ldr	r3, [pc, #160]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92172:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   92174:	200c      	movs	r0, #12
   92176:	4b28      	ldr	r3, [pc, #160]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92178:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   9217a:	2009      	movs	r0, #9
   9217c:	4b26      	ldr	r3, [pc, #152]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9217e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   92180:	2006      	movs	r0, #6
   92182:	4b25      	ldr	r3, [pc, #148]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92184:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   92186:	2007      	movs	r0, #7
   92188:	4b23      	ldr	r3, [pc, #140]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9218a:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   9218c:	2004      	movs	r0, #4
   9218e:	4b21      	ldr	r3, [pc, #132]	; (92214 <cl_testharnesscommandhandler+0x1294>)
   92190:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   92192:	200d      	movs	r0, #13
   92194:	4b20      	ldr	r3, [pc, #128]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   92196:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   92198:	200e      	movs	r0, #14
   9219a:	4b1f      	ldr	r3, [pc, #124]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   9219c:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V2_4 SET";
   9219e:	4b24      	ldr	r3, [pc, #144]	; (92230 <cl_testharnesscommandhandler+0x12b0>)
   921a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   921a4:	f001 bb71 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   921a8:	2005      	movs	r0, #5
   921aa:	4b1b      	ldr	r3, [pc, #108]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921ac:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   921ae:	2008      	movs	r0, #8
   921b0:	4b19      	ldr	r3, [pc, #100]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921b2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   921b4:	200a      	movs	r0, #10
   921b6:	4b18      	ldr	r3, [pc, #96]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921b8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   921ba:	200b      	movs	r0, #11
   921bc:	4b16      	ldr	r3, [pc, #88]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921be:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   921c0:	200c      	movs	r0, #12
   921c2:	4b15      	ldr	r3, [pc, #84]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921c4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   921c6:	2009      	movs	r0, #9
   921c8:	4b13      	ldr	r3, [pc, #76]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921ca:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   921cc:	2006      	movs	r0, #6
   921ce:	4b12      	ldr	r3, [pc, #72]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921d0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   921d2:	2007      	movs	r0, #7
   921d4:	4b10      	ldr	r3, [pc, #64]	; (92218 <cl_testharnesscommandhandler+0x1298>)
   921d6:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   921d8:	2001      	movs	r0, #1
   921da:	4b0d      	ldr	r3, [pc, #52]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   921dc:	4798      	blx	r3
   921de:	4603      	mov	r3, r0
   921e0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   921e4:	2002      	movs	r0, #2
   921e6:	4b0a      	ldr	r3, [pc, #40]	; (92210 <cl_testharnesscommandhandler+0x1290>)
   921e8:	4798      	blx	r3
   921ea:	4603      	mov	r3, r0
   921ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"BC_RESET";
   921f0:	4b10      	ldr	r3, [pc, #64]	; (92234 <cl_testharnesscommandhandler+0x12b4>)
   921f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   921f6:	f001 bb48 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
   921fa:	bf00      	nop
   921fc:	0009ae59 	.word	0x0009ae59
   92200:	000aa0b4 	.word	0x000aa0b4
   92204:	00093ea9 	.word	0x00093ea9
   92208:	0009ae31 	.word	0x0009ae31
   9220c:	0009ae45 	.word	0x0009ae45
   92210:	0009ad7d 	.word	0x0009ad7d
   92214:	0009ade1 	.word	0x0009ade1
   92218:	0009ae01 	.word	0x0009ae01
   9221c:	000aa0bc 	.word	0x000aa0bc
   92220:	000aa0c8 	.word	0x000aa0c8
   92224:	000aa0d4 	.word	0x000aa0d4
   92228:	000aa0e4 	.word	0x000aa0e4
   9222c:	000aa0f4 	.word	0x000aa0f4
   92230:	000aa100 	.word	0x000aa100
   92234:	000aa10c 	.word	0x000aa10c
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   92238:	4bb2      	ldr	r3, [pc, #712]	; (92504 <cl_testharnesscommandhandler+0x1584>)
   9223a:	2201      	movs	r2, #1
   9223c:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   9223e:	2005      	movs	r0, #5
   92240:	4bb1      	ldr	r3, [pc, #708]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   92242:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   92244:	2008      	movs	r0, #8
   92246:	4bb0      	ldr	r3, [pc, #704]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   92248:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   9224a:	200a      	movs	r0, #10
   9224c:	4bae      	ldr	r3, [pc, #696]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   9224e:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   92250:	200b      	movs	r0, #11
   92252:	4bad      	ldr	r3, [pc, #692]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   92254:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   92256:	200c      	movs	r0, #12
   92258:	4bab      	ldr	r3, [pc, #684]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   9225a:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   9225c:	2009      	movs	r0, #9
   9225e:	4baa      	ldr	r3, [pc, #680]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   92260:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   92262:	2006      	movs	r0, #6
   92264:	4ba8      	ldr	r3, [pc, #672]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   92266:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   92268:	2007      	movs	r0, #7
   9226a:	4ba7      	ldr	r3, [pc, #668]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   9226c:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   9226e:	2001      	movs	r0, #1
   92270:	4ba6      	ldr	r3, [pc, #664]	; (9250c <cl_testharnesscommandhandler+0x158c>)
   92272:	4798      	blx	r3
   92274:	4603      	mov	r3, r0
   92276:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   9227a:	2002      	movs	r0, #2
   9227c:	4ba3      	ldr	r3, [pc, #652]	; (9250c <cl_testharnesscommandhandler+0x158c>)
   9227e:	4798      	blx	r3
   92280:	4603      	mov	r3, r0
   92282:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (Cl_Uint8Type *)"BC_FREEZE";
   92286:	4ba2      	ldr	r3, [pc, #648]	; (92510 <cl_testharnesscommandhandler+0x1590>)
   92288:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   9228c:	f001 bafd 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   92290:	4b9c      	ldr	r3, [pc, #624]	; (92504 <cl_testharnesscommandhandler+0x1584>)
   92292:	2200      	movs	r2, #0
   92294:	701a      	strb	r2, [r3, #0]
				pdataarray = (Cl_Uint8Type *)"BC_UNFREEZE";
   92296:	4b9f      	ldr	r3, [pc, #636]	; (92514 <cl_testharnesscommandhandler+0x1594>)
   92298:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   9229c:	2001      	movs	r0, #1
   9229e:	4b9e      	ldr	r3, [pc, #632]	; (92518 <cl_testharnesscommandhandler+0x1598>)
   922a0:	4798      	blx	r3
   922a2:	4603      	mov	r3, r0
   922a4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   922a8:	2002      	movs	r0, #2
   922aa:	4b9b      	ldr	r3, [pc, #620]	; (92518 <cl_testharnesscommandhandler+0x1598>)
   922ac:	4798      	blx	r3
   922ae:	4603      	mov	r3, r0
   922b0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   922b4:	4b93      	ldr	r3, [pc, #588]	; (92504 <cl_testharnesscommandhandler+0x1584>)
   922b6:	2200      	movs	r2, #0
   922b8:	701a      	strb	r2, [r3, #0]
		break;
   922ba:	f001 bae6 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (Cl_Uint8Type *)"OPENFILL";
   922be:	4b97      	ldr	r3, [pc, #604]	; (9251c <cl_testharnesscommandhandler+0x159c>)
   922c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   922c4:	2005      	movs	r0, #5
   922c6:	4b96      	ldr	r3, [pc, #600]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922c8:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   922ca:	2008      	movs	r0, #8
   922cc:	4b94      	ldr	r3, [pc, #592]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922ce:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   922d0:	200a      	movs	r0, #10
   922d2:	4b93      	ldr	r3, [pc, #588]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922d4:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   922d6:	200b      	movs	r0, #11
   922d8:	4b91      	ldr	r3, [pc, #580]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922da:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   922dc:	200c      	movs	r0, #12
   922de:	4b90      	ldr	r3, [pc, #576]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922e0:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   922e2:	2009      	movs	r0, #9
   922e4:	4b8e      	ldr	r3, [pc, #568]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922e6:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   922e8:	2006      	movs	r0, #6
   922ea:	4b8d      	ldr	r3, [pc, #564]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922ec:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   922ee:	2007      	movs	r0, #7
   922f0:	4b8b      	ldr	r3, [pc, #556]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   922f2:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   922f4:	2001      	movs	r0, #1
   922f6:	4b88      	ldr	r3, [pc, #544]	; (92518 <cl_testharnesscommandhandler+0x1598>)
   922f8:	4798      	blx	r3
   922fa:	4603      	mov	r3, r0
   922fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   92300:	2002      	movs	r0, #2
   92302:	4b85      	ldr	r3, [pc, #532]	; (92518 <cl_testharnesscommandhandler+0x1598>)
   92304:	4798      	blx	r3
   92306:	4603      	mov	r3, r0
   92308:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   9230c:	4b7d      	ldr	r3, [pc, #500]	; (92504 <cl_testharnesscommandhandler+0x1584>)
   9230e:	2200      	movs	r2, #0
   92310:	701a      	strb	r2, [r3, #0]
					break;
   92312:	f001 baba 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (Cl_Uint8Type *)"JTR";
   92316:	4b83      	ldr	r3, [pc, #524]	; (92524 <cl_testharnesscommandhandler+0x15a4>)
   92318:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   9231c:	4b82      	ldr	r3, [pc, #520]	; (92528 <cl_testharnesscommandhandler+0x15a8>)
   9231e:	2205      	movs	r2, #5
   92320:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   92322:	4b78      	ldr	r3, [pc, #480]	; (92504 <cl_testharnesscommandhandler+0x1584>)
   92324:	2200      	movs	r2, #0
   92326:	701a      	strb	r2, [r3, #0]
			break;
   92328:	f001 baaf 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   9232c:	f44f 6010 	mov.w	r0, #2304	; 0x900
   92330:	4b7e      	ldr	r3, [pc, #504]	; (9252c <cl_testharnesscommandhandler+0x15ac>)
   92332:	4798      	blx	r3
			
			break;
   92334:	f001 baa9 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   92338:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   9233c:	4b7b      	ldr	r3, [pc, #492]	; (9252c <cl_testharnesscommandhandler+0x15ac>)
   9233e:	4798      	blx	r3
			break;
   92340:	f001 baa3 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   92344:	2064      	movs	r0, #100	; 0x64
   92346:	4b7a      	ldr	r3, [pc, #488]	; (92530 <cl_testharnesscommandhandler+0x15b0>)
   92348:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   9234a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9234e:	2b02      	cmp	r3, #2
   92350:	d104      	bne.n	9235c <cl_testharnesscommandhandler+0x13dc>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   92352:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92356:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9235a:	e00b      	b.n	92374 <cl_testharnesscommandhandler+0x13f4>
				}
				else if(TestMsg.datasize == 3)
   9235c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92360:	2b03      	cmp	r3, #3
   92362:	d107      	bne.n	92374 <cl_testharnesscommandhandler+0x13f4>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   92364:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92368:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   9236c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   92370:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   92374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   92378:	4a6e      	ldr	r2, [pc, #440]	; (92534 <cl_testharnesscommandhandler+0x15b4>)
   9237a:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   9237c:	4b6d      	ldr	r3, [pc, #436]	; (92534 <cl_testharnesscommandhandler+0x15b4>)
   9237e:	681b      	ldr	r3, [r3, #0]
   92380:	4618      	mov	r0, r3
   92382:	4b6a      	ldr	r3, [pc, #424]	; (9252c <cl_testharnesscommandhandler+0x15ac>)
   92384:	4798      	blx	r3
			break;
   92386:	f001 ba80 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (Cl_Uint8Type *)"VC_ON";
   9238a:	4b6b      	ldr	r3, [pc, #428]	; (92538 <cl_testharnesscommandhandler+0x15b8>)
   9238c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   92390:	2004      	movs	r0, #4
   92392:	4b63      	ldr	r3, [pc, #396]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   92394:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   92396:	2032      	movs	r0, #50	; 0x32
   92398:	4b65      	ldr	r3, [pc, #404]	; (92530 <cl_testharnesscommandhandler+0x15b0>)
   9239a:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   9239c:	2004      	movs	r0, #4
   9239e:	4b5a      	ldr	r3, [pc, #360]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   923a0:	4798      	blx	r3
						cl_wait(50);
   923a2:	2032      	movs	r0, #50	; 0x32
   923a4:	4b62      	ldr	r3, [pc, #392]	; (92530 <cl_testharnesscommandhandler+0x15b0>)
   923a6:	4798      	blx	r3
			break;
   923a8:	f001 ba6f 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   923ac:	4b63      	ldr	r3, [pc, #396]	; (9253c <cl_testharnesscommandhandler+0x15bc>)
   923ae:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
   923b0:	4b63      	ldr	r3, [pc, #396]	; (92540 <cl_testharnesscommandhandler+0x15c0>)
   923b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   923b6:	f001 ba68 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   923ba:	2300      	movs	r3, #0
   923bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   923c0:	e008      	b.n	923d4 <cl_testharnesscommandhandler+0x1454>
			{
							cl_indata.word = count1;
   923c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   923c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   923ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   923ce:	3301      	adds	r3, #1
   923d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   923d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   923d8:	2b0f      	cmp	r3, #15
   923da:	d9f2      	bls.n	923c2 <cl_testharnesscommandhandler+0x1442>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   923dc:	f001 ba55 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   923e0:	4b58      	ldr	r3, [pc, #352]	; (92544 <cl_testharnesscommandhandler+0x15c4>)
   923e2:	2201      	movs	r2, #1
   923e4:	701a      	strb	r2, [r3, #0]
			break;
   923e6:	f001 ba50 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   923ea:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   923ee:	2b01      	cmp	r3, #1
   923f0:	d107      	bne.n	92402 <cl_testharnesscommandhandler+0x1482>
				{
					Current_sense_trigger = true;
   923f2:	4b55      	ldr	r3, [pc, #340]	; (92548 <cl_testharnesscommandhandler+0x15c8>)
   923f4:	2201      	movs	r2, #1
   923f6:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "CS_TRIGGER";
   923f8:	4b54      	ldr	r3, [pc, #336]	; (9254c <cl_testharnesscommandhandler+0x15cc>)
   923fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   923fe:	f001 ba44 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
					//Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   92402:	4b51      	ldr	r3, [pc, #324]	; (92548 <cl_testharnesscommandhandler+0x15c8>)
   92404:	2200      	movs	r2, #0
   92406:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "PS_TRIGGER";
   92408:	4b51      	ldr	r3, [pc, #324]	; (92550 <cl_testharnesscommandhandler+0x15d0>)
   9240a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   9240e:	f001 ba3c 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (Cl_Uint8Type *)"Ver:T.4";
   92412:	4b50      	ldr	r3, [pc, #320]	; (92554 <cl_testharnesscommandhandler+0x15d4>)
   92414:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   92418:	2207      	movs	r2, #7
   9241a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9241e:	2018      	movs	r0, #24
   92420:	4b4d      	ldr	r3, [pc, #308]	; (92558 <cl_testharnesscommandhandler+0x15d8>)
   92422:	4798      	blx	r3
   92424:	4603      	mov	r3, r0
   92426:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   9242a:	f001 ba2e 	b.w	9388a <cl_testharnesscommandhandler+0x290a>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   9242e:	2004      	movs	r0, #4
   92430:	4b3b      	ldr	r3, [pc, #236]	; (92520 <cl_testharnesscommandhandler+0x15a0>)
   92432:	4798      	blx	r3
							cl_wait(50);
   92434:	2032      	movs	r0, #50	; 0x32
   92436:	4b3e      	ldr	r3, [pc, #248]	; (92530 <cl_testharnesscommandhandler+0x15b0>)
   92438:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   9243a:	2004      	movs	r0, #4
   9243c:	4b32      	ldr	r3, [pc, #200]	; (92508 <cl_testharnesscommandhandler+0x1588>)
   9243e:	4798      	blx	r3
						break;
   92440:	f001 ba23 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			case TEST_SHORT_RINSE:
			sv_prop_startacidpump();
   92444:	4b45      	ldr	r3, [pc, #276]	; (9255c <cl_testharnesscommandhandler+0x15dc>)
   92446:	4798      	blx	r3
							cl_tdata.bytearray[2] = 23;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&test_hstate,1);
						}
							
			#endif
			break;
   92448:	f001 ba1f 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   9244c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92450:	2b01      	cmp	r3, #1
   92452:	d107      	bne.n	92464 <cl_testharnesscommandhandler+0x14e4>
				{
						gflow_en = true;
   92454:	4b42      	ldr	r3, [pc, #264]	; (92560 <cl_testharnesscommandhandler+0x15e0>)
   92456:	2201      	movs	r2, #1
   92458:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_EN";
   9245a:	4b42      	ldr	r3, [pc, #264]	; (92564 <cl_testharnesscommandhandler+0x15e4>)
   9245c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   92460:	f001 ba13 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   92464:	4b3e      	ldr	r3, [pc, #248]	; (92560 <cl_testharnesscommandhandler+0x15e0>)
   92466:	2200      	movs	r2, #0
   92468:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";
   9246a:	4b3f      	ldr	r3, [pc, #252]	; (92568 <cl_testharnesscommandhandler+0x15e8>)
   9246c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   92470:	f001 ba0b 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   92474:	4b3d      	ldr	r3, [pc, #244]	; (9256c <cl_testharnesscommandhandler+0x15ec>)
   92476:	4798      	blx	r3
		//sv_prop_startacidpump();
		//sv_prop_startbicarbpump();
		
				break;
   92478:	f001 ba07 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propo_ACIDrc( TestMsg.data.byte[1]);
   9247c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92480:	b29b      	uxth	r3, r3
   92482:	4618      	mov	r0, r3
   92484:	4b3a      	ldr	r3, [pc, #232]	; (92570 <cl_testharnesscommandhandler+0x15f0>)
   92486:	4798      	blx	r3
		break;
   92488:	f001 b9ff 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   9248c:	4b39      	ldr	r3, [pc, #228]	; (92574 <cl_testharnesscommandhandler+0x15f4>)
   9248e:	2200      	movs	r2, #0
   92490:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (Cl_Uint8Type *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				Cl_Uint16Type read_data = 0;
   92492:	2300      	movs	r3, #0
   92494:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   92498:	4b37      	ldr	r3, [pc, #220]	; (92578 <cl_testharnesscommandhandler+0x15f8>)
   9249a:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   9249c:	f001 b9f5 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_STOP_PROPO:
			cl_wait(100);
   924a0:	2064      	movs	r0, #100	; 0x64
   924a2:	4b23      	ldr	r3, [pc, #140]	; (92530 <cl_testharnesscommandhandler+0x15b0>)
   924a4:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   924a6:	4b35      	ldr	r3, [pc, #212]	; (9257c <cl_testharnesscommandhandler+0x15fc>)
   924a8:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   924aa:	f001 b9ee 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   924ae:	4b34      	ldr	r3, [pc, #208]	; (92580 <cl_testharnesscommandhandler+0x1600>)
   924b0:	4798      	blx	r3
		break;
   924b2:	f001 b9ea 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   924b6:	4b33      	ldr	r3, [pc, #204]	; (92584 <cl_testharnesscommandhandler+0x1604>)
   924b8:	4798      	blx	r3
		break;
   924ba:	f001 b9e6 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   924be:	4b32      	ldr	r3, [pc, #200]	; (92588 <cl_testharnesscommandhandler+0x1608>)
   924c0:	4798      	blx	r3
		 sv_prop_stopmixing();
   924c2:	4b2e      	ldr	r3, [pc, #184]	; (9257c <cl_testharnesscommandhandler+0x15fc>)
   924c4:	4798      	blx	r3
		// DD_SET_VALVE (VALVE_ID2);
		// DD_SET_VALVE (VALVE_ID3);
		// sv_prop_startmixing();
		break;
   924c6:	f001 b9e0 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   924ca:	4b30      	ldr	r3, [pc, #192]	; (9258c <cl_testharnesscommandhandler+0x160c>)
   924cc:	4798      	blx	r3
		 sv_prop_stopmixing();
   924ce:	4b2b      	ldr	r3, [pc, #172]	; (9257c <cl_testharnesscommandhandler+0x15fc>)
   924d0:	4798      	blx	r3
		break;
   924d2:	f001 b9da 	b.w	9388a <cl_testharnesscommandhandler+0x290a>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   924d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   924da:	2b02      	cmp	r3, #2
   924dc:	d104      	bne.n	924e8 <cl_testharnesscommandhandler+0x1568>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   924de:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   924e2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   924e6:	e078      	b.n	925da <cl_testharnesscommandhandler+0x165a>
						}
						else if(TestMsg.datasize == 3)
   924e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   924ec:	2b03      	cmp	r3, #3
   924ee:	d14f      	bne.n	92590 <cl_testharnesscommandhandler+0x1610>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   924f0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   924f4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   924f8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   924fc:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   92500:	e06b      	b.n	925da <cl_testharnesscommandhandler+0x165a>
   92502:	bf00      	nop
   92504:	2007193f 	.word	0x2007193f
   92508:	0009ae01 	.word	0x0009ae01
   9250c:	0009ad7d 	.word	0x0009ad7d
   92510:	000aa118 	.word	0x000aa118
   92514:	000aa124 	.word	0x000aa124
   92518:	0009ad41 	.word	0x0009ad41
   9251c:	000aa130 	.word	0x000aa130
   92520:	0009ade1 	.word	0x0009ade1
   92524:	000aa13c 	.word	0x000aa13c
   92528:	20071b98 	.word	0x20071b98
   9252c:	0009aec1 	.word	0x0009aec1
   92530:	00093ea9 	.word	0x00093ea9
   92534:	200704c8 	.word	0x200704c8
   92538:	000aa140 	.word	0x000aa140
   9253c:	0009af41 	.word	0x0009af41
   92540:	000aa058 	.word	0x000aa058
   92544:	2007193e 	.word	0x2007193e
   92548:	200709ba 	.word	0x200709ba
   9254c:	000aa148 	.word	0x000aa148
   92550:	000aa154 	.word	0x000aa154
   92554:	000aa160 	.word	0x000aa160
   92558:	0009cbd5 	.word	0x0009cbd5
   9255c:	0009b1b1 	.word	0x0009b1b1
   92560:	20071941 	.word	0x20071941
   92564:	000aa168 	.word	0x000aa168
   92568:	000aa170 	.word	0x000aa170
   9256c:	0009b17d 	.word	0x0009b17d
   92570:	0009b1c5 	.word	0x0009b1c5
   92574:	2007193c 	.word	0x2007193c
   92578:	0009b151 	.word	0x0009b151
   9257c:	0009b20d 	.word	0x0009b20d
   92580:	0009af8d 	.word	0x0009af8d
   92584:	0009afa9 	.word	0x0009afa9
   92588:	0009af55 	.word	0x0009af55
   9258c:	0009af71 	.word	0x0009af71
							
						}
							else if(TestMsg.datasize == 4)
   92590:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   92594:	2b04      	cmp	r3, #4
   92596:	d10c      	bne.n	925b2 <cl_testharnesscommandhandler+0x1632>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   92598:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9259c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   925a0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   925a4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   925a8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   925ac:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   925b0:	e013      	b.n	925da <cl_testharnesscommandhandler+0x165a>
							
						}
							else if(TestMsg.datasize == 5)
   925b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   925b6:	2b05      	cmp	r3, #5
   925b8:	d10f      	bne.n	925da <cl_testharnesscommandhandler+0x165a>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   925ba:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   925be:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   925c2:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   925c6:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   925ca:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   925ce:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   925d2:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   925d6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   925da:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   925de:	2b0c      	cmp	r3, #12
   925e0:	d028      	beq.n	92634 <cl_testharnesscommandhandler+0x16b4>
   925e2:	2b0c      	cmp	r3, #12
   925e4:	dc11      	bgt.n	9260a <cl_testharnesscommandhandler+0x168a>
   925e6:	2b05      	cmp	r3, #5
   925e8:	f000 83fe 	beq.w	92de8 <cl_testharnesscommandhandler+0x1e68>
   925ec:	2b05      	cmp	r3, #5
   925ee:	dc04      	bgt.n	925fa <cl_testharnesscommandhandler+0x167a>
   925f0:	2b01      	cmp	r3, #1
   925f2:	f000 8365 	beq.w	92cc0 <cl_testharnesscommandhandler+0x1d40>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   925f6:	f000 be1d 	b.w	93234 <cl_testharnesscommandhandler+0x22b4>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   925fa:	2b06      	cmp	r3, #6
   925fc:	f000 8497 	beq.w	92f2e <cl_testharnesscommandhandler+0x1fae>
   92600:	2b07      	cmp	r3, #7
   92602:	f000 8553 	beq.w	930ac <cl_testharnesscommandhandler+0x212c>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   92606:	f000 be15 	b.w	93234 <cl_testharnesscommandhandler+0x22b4>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   9260a:	2b11      	cmp	r3, #17
   9260c:	f000 820c 	beq.w	92a28 <cl_testharnesscommandhandler+0x1aa8>
   92610:	2b11      	cmp	r3, #17
   92612:	dc07      	bgt.n	92624 <cl_testharnesscommandhandler+0x16a4>
   92614:	2b0d      	cmp	r3, #13
   92616:	f000 80b1 	beq.w	9277c <cl_testharnesscommandhandler+0x17fc>
   9261a:	2b0e      	cmp	r3, #14
   9261c:	f000 814e 	beq.w	928bc <cl_testharnesscommandhandler+0x193c>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   92620:	f000 be08 	b.w	93234 <cl_testharnesscommandhandler+0x22b4>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   92624:	2b12      	cmp	r3, #18
   92626:	f000 8298 	beq.w	92b5a <cl_testharnesscommandhandler+0x1bda>
   9262a:	2bff      	cmp	r3, #255	; 0xff
   9262c:	f000 85e1 	beq.w	931f2 <cl_testharnesscommandhandler+0x2272>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   92630:	f000 be00 	b.w	93234 <cl_testharnesscommandhandler+0x22b4>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   92634:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92638:	2b01      	cmp	r3, #1
   9263a:	d11f      	bne.n	9267c <cl_testharnesscommandhandler+0x16fc>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   9263c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92640:	4bc4      	ldr	r3, [pc, #784]	; (92954 <cl_testharnesscommandhandler+0x19d4>)
   92642:	4610      	mov	r0, r2
   92644:	4798      	blx	r3
   92646:	4602      	mov	r2, r0
   92648:	4bc3      	ldr	r3, [pc, #780]	; (92958 <cl_testharnesscommandhandler+0x19d8>)
   9264a:	639a      	str	r2, [r3, #56]	; 0x38
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9264c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92650:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   92654:	220a      	movs	r2, #10
   92656:	49c1      	ldr	r1, [pc, #772]	; (9295c <cl_testharnesscommandhandler+0x19dc>)
   92658:	2018      	movs	r0, #24
   9265a:	4bc1      	ldr	r3, [pc, #772]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   9265c:	4798      	blx	r3
   9265e:	4603      	mov	r3, r0
   92660:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92664:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   92668:	2202      	movs	r2, #2
   9266a:	4619      	mov	r1, r3
   9266c:	2019      	movs	r0, #25
   9266e:	4bbc      	ldr	r3, [pc, #752]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92670:	4798      	blx	r3
   92672:	4603      	mov	r3, r0
   92674:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92678:	f000 bdcb 	b.w	93212 <cl_testharnesscommandhandler+0x2292>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   9267c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92680:	2b00      	cmp	r3, #0
   92682:	d126      	bne.n	926d2 <cl_testharnesscommandhandler+0x1752>
							{
								int16_t temp=0,temp1=0;
   92684:	2300      	movs	r3, #0
   92686:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   9268a:	2300      	movs	r3, #0
   9268c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   92690:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92694:	4baf      	ldr	r3, [pc, #700]	; (92954 <cl_testharnesscommandhandler+0x19d4>)
   92696:	4610      	mov	r0, r2
   92698:	4798      	blx	r3
   9269a:	4602      	mov	r2, r0
   9269c:	4bae      	ldr	r3, [pc, #696]	; (92958 <cl_testharnesscommandhandler+0x19d8>)
   9269e:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   926a0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   926a4:	b21b      	sxth	r3, r3
   926a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   926aa:	2209      	movs	r2, #9
   926ac:	49ad      	ldr	r1, [pc, #692]	; (92964 <cl_testharnesscommandhandler+0x19e4>)
   926ae:	2018      	movs	r0, #24
   926b0:	4bab      	ldr	r3, [pc, #684]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   926b2:	4798      	blx	r3
   926b4:	4603      	mov	r3, r0
   926b6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   926ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
   926be:	2202      	movs	r2, #2
   926c0:	4619      	mov	r1, r3
   926c2:	2019      	movs	r0, #25
   926c4:	4ba6      	ldr	r3, [pc, #664]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   926c6:	4798      	blx	r3
   926c8:	4603      	mov	r3, r0
   926ca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   926ce:	f000 bda0 	b.w	93212 <cl_testharnesscommandhandler+0x2292>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   926d2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   926d6:	2b02      	cmp	r3, #2
   926d8:	d128      	bne.n	9272c <cl_testharnesscommandhandler+0x17ac>
							{
								int16_t temp=0,temp1=0;
   926da:	2300      	movs	r3, #0
   926dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   926e0:	2300      	movs	r3, #0
   926e2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   926e6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   926ea:	b21a      	sxth	r2, r3
   926ec:	4b9e      	ldr	r3, [pc, #632]	; (92968 <cl_testharnesscommandhandler+0x19e8>)
   926ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   926f2:	4b9d      	ldr	r3, [pc, #628]	; (92968 <cl_testharnesscommandhandler+0x19e8>)
   926f4:	2201      	movs	r2, #1
   926f6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   926fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   926fe:	b21b      	sxth	r3, r3
   92700:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   92704:	2209      	movs	r2, #9
   92706:	4997      	ldr	r1, [pc, #604]	; (92964 <cl_testharnesscommandhandler+0x19e4>)
   92708:	2018      	movs	r0, #24
   9270a:	4b95      	ldr	r3, [pc, #596]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   9270c:	4798      	blx	r3
   9270e:	4603      	mov	r3, r0
   92710:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92714:	f107 0346 	add.w	r3, r7, #70	; 0x46
   92718:	2202      	movs	r2, #2
   9271a:	4619      	mov	r1, r3
   9271c:	2019      	movs	r0, #25
   9271e:	4b90      	ldr	r3, [pc, #576]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92720:	4798      	blx	r3
   92722:	4603      	mov	r3, r0
   92724:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92728:	f000 bd73 	b.w	93212 <cl_testharnesscommandhandler+0x2292>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9272c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92730:	2b03      	cmp	r3, #3
   92732:	f040 856e 	bne.w	93212 <cl_testharnesscommandhandler+0x2292>
							{
								int16_t temp=0,temp1=0;
   92736:	2300      	movs	r3, #0
   92738:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   9273c:	2300      	movs	r3, #0
   9273e:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   92742:	4b89      	ldr	r3, [pc, #548]	; (92968 <cl_testharnesscommandhandler+0x19e8>)
   92744:	2200      	movs	r2, #0
   92746:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9274a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9274e:	b21b      	sxth	r3, r3
   92750:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   92754:	2205      	movs	r2, #5
   92756:	4985      	ldr	r1, [pc, #532]	; (9296c <cl_testharnesscommandhandler+0x19ec>)
   92758:	2018      	movs	r0, #24
   9275a:	4b81      	ldr	r3, [pc, #516]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   9275c:	4798      	blx	r3
   9275e:	4603      	mov	r3, r0
   92760:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92764:	f107 0344 	add.w	r3, r7, #68	; 0x44
   92768:	2202      	movs	r2, #2
   9276a:	4619      	mov	r1, r3
   9276c:	2019      	movs	r0, #25
   9276e:	4b7c      	ldr	r3, [pc, #496]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92770:	4798      	blx	r3
   92772:	4603      	mov	r3, r0
   92774:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92778:	f000 bd4b 	b.w	93212 <cl_testharnesscommandhandler+0x2292>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   9277c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92780:	2b01      	cmp	r3, #1
   92782:	d11f      	bne.n	927c4 <cl_testharnesscommandhandler+0x1844>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   92784:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92788:	4b72      	ldr	r3, [pc, #456]	; (92954 <cl_testharnesscommandhandler+0x19d4>)
   9278a:	4610      	mov	r0, r2
   9278c:	4798      	blx	r3
   9278e:	4602      	mov	r2, r0
   92790:	4b71      	ldr	r3, [pc, #452]	; (92958 <cl_testharnesscommandhandler+0x19d8>)
   92792:	641a      	str	r2, [r3, #64]	; 0x40
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92794:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92798:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   9279c:	220a      	movs	r2, #10
   9279e:	4974      	ldr	r1, [pc, #464]	; (92970 <cl_testharnesscommandhandler+0x19f0>)
   927a0:	2018      	movs	r0, #24
   927a2:	4b6f      	ldr	r3, [pc, #444]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   927a4:	4798      	blx	r3
   927a6:	4603      	mov	r3, r0
   927a8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   927ac:	f107 0342 	add.w	r3, r7, #66	; 0x42
   927b0:	2202      	movs	r2, #2
   927b2:	4619      	mov	r1, r3
   927b4:	2019      	movs	r0, #25
   927b6:	4b6a      	ldr	r3, [pc, #424]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   927b8:	4798      	blx	r3
   927ba:	4603      	mov	r3, r0
   927bc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   927c0:	f000 bd29 	b.w	93216 <cl_testharnesscommandhandler+0x2296>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   927c4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   927c8:	2b00      	cmp	r3, #0
   927ca:	d126      	bne.n	9281a <cl_testharnesscommandhandler+0x189a>
							{
								int16_t temp=0,temp1=0;
   927cc:	2300      	movs	r3, #0
   927ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   927d2:	2300      	movs	r3, #0
   927d4:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   927d8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   927dc:	4b5d      	ldr	r3, [pc, #372]	; (92954 <cl_testharnesscommandhandler+0x19d4>)
   927de:	4610      	mov	r0, r2
   927e0:	4798      	blx	r3
   927e2:	4602      	mov	r2, r0
   927e4:	4b5c      	ldr	r3, [pc, #368]	; (92958 <cl_testharnesscommandhandler+0x19d8>)
   927e6:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   927e8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   927ec:	b21b      	sxth	r3, r3
   927ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   927f2:	2209      	movs	r2, #9
   927f4:	495f      	ldr	r1, [pc, #380]	; (92974 <cl_testharnesscommandhandler+0x19f4>)
   927f6:	2018      	movs	r0, #24
   927f8:	4b59      	ldr	r3, [pc, #356]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   927fa:	4798      	blx	r3
   927fc:	4603      	mov	r3, r0
   927fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92802:	f107 0340 	add.w	r3, r7, #64	; 0x40
   92806:	2202      	movs	r2, #2
   92808:	4619      	mov	r1, r3
   9280a:	2019      	movs	r0, #25
   9280c:	4b54      	ldr	r3, [pc, #336]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   9280e:	4798      	blx	r3
   92810:	4603      	mov	r3, r0
   92812:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92816:	f000 bcfe 	b.w	93216 <cl_testharnesscommandhandler+0x2296>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   9281a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9281e:	2b02      	cmp	r3, #2
   92820:	d126      	bne.n	92870 <cl_testharnesscommandhandler+0x18f0>
							{
								int16_t temp=0,temp1=0;
   92822:	2300      	movs	r3, #0
   92824:	87fb      	strh	r3, [r7, #62]	; 0x3e
   92826:	2300      	movs	r3, #0
   92828:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   9282c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92830:	b21a      	sxth	r2, r3
   92832:	4b4d      	ldr	r3, [pc, #308]	; (92968 <cl_testharnesscommandhandler+0x19e8>)
   92834:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   92838:	4b4b      	ldr	r3, [pc, #300]	; (92968 <cl_testharnesscommandhandler+0x19e8>)
   9283a:	2201      	movs	r2, #1
   9283c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92840:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92844:	b21b      	sxth	r3, r3
   92846:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92848:	2209      	movs	r2, #9
   9284a:	494b      	ldr	r1, [pc, #300]	; (92978 <cl_testharnesscommandhandler+0x19f8>)
   9284c:	2018      	movs	r0, #24
   9284e:	4b44      	ldr	r3, [pc, #272]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92850:	4798      	blx	r3
   92852:	4603      	mov	r3, r0
   92854:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92858:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   9285c:	2202      	movs	r2, #2
   9285e:	4619      	mov	r1, r3
   92860:	2019      	movs	r0, #25
   92862:	4b3f      	ldr	r3, [pc, #252]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92864:	4798      	blx	r3
   92866:	4603      	mov	r3, r0
   92868:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9286c:	f000 bcd3 	b.w	93216 <cl_testharnesscommandhandler+0x2296>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92870:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92874:	2b03      	cmp	r3, #3
   92876:	f040 84ce 	bne.w	93216 <cl_testharnesscommandhandler+0x2296>
							{
								int16_t temp=0,temp1=0;
   9287a:	2300      	movs	r3, #0
   9287c:	87bb      	strh	r3, [r7, #60]	; 0x3c
   9287e:	2300      	movs	r3, #0
   92880:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   92884:	4b38      	ldr	r3, [pc, #224]	; (92968 <cl_testharnesscommandhandler+0x19e8>)
   92886:	2200      	movs	r2, #0
   92888:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9288c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92890:	b21b      	sxth	r3, r3
   92892:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   92894:	2205      	movs	r2, #5
   92896:	4939      	ldr	r1, [pc, #228]	; (9297c <cl_testharnesscommandhandler+0x19fc>)
   92898:	2018      	movs	r0, #24
   9289a:	4b31      	ldr	r3, [pc, #196]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   9289c:	4798      	blx	r3
   9289e:	4603      	mov	r3, r0
   928a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   928a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   928a8:	2202      	movs	r2, #2
   928aa:	4619      	mov	r1, r3
   928ac:	2019      	movs	r0, #25
   928ae:	4b2c      	ldr	r3, [pc, #176]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   928b0:	4798      	blx	r3
   928b2:	4603      	mov	r3, r0
   928b4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   928b8:	f000 bcad 	b.w	93216 <cl_testharnesscommandhandler+0x2296>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   928bc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   928c0:	2b01      	cmp	r3, #1
   928c2:	d11e      	bne.n	92902 <cl_testharnesscommandhandler+0x1982>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   928c4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   928c8:	4b22      	ldr	r3, [pc, #136]	; (92954 <cl_testharnesscommandhandler+0x19d4>)
   928ca:	4610      	mov	r0, r2
   928cc:	4798      	blx	r3
   928ce:	4602      	mov	r2, r0
   928d0:	4b21      	ldr	r3, [pc, #132]	; (92958 <cl_testharnesscommandhandler+0x19d8>)
   928d2:	649a      	str	r2, [r3, #72]	; 0x48
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   928d4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   928d8:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   928da:	2208      	movs	r2, #8
   928dc:	4928      	ldr	r1, [pc, #160]	; (92980 <cl_testharnesscommandhandler+0x1a00>)
   928de:	2018      	movs	r0, #24
   928e0:	4b1f      	ldr	r3, [pc, #124]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   928e2:	4798      	blx	r3
   928e4:	4603      	mov	r3, r0
   928e6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   928ea:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   928ee:	2202      	movs	r2, #2
   928f0:	4619      	mov	r1, r3
   928f2:	2019      	movs	r0, #25
   928f4:	4b1a      	ldr	r3, [pc, #104]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   928f6:	4798      	blx	r3
   928f8:	4603      	mov	r3, r0
   928fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   928fe:	f000 bc8c 	b.w	9321a <cl_testharnesscommandhandler+0x229a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
							}
							else if (cl_indata.bytearray[2]== 0)
   92902:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92906:	2b00      	cmp	r3, #0
   92908:	d13e      	bne.n	92988 <cl_testharnesscommandhandler+0x1a08>
							{
								int16_t temp=0,temp1=0;
   9290a:	2300      	movs	r3, #0
   9290c:	873b      	strh	r3, [r7, #56]	; 0x38
   9290e:	2300      	movs	r3, #0
   92910:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   92914:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92918:	4b0e      	ldr	r3, [pc, #56]	; (92954 <cl_testharnesscommandhandler+0x19d4>)
   9291a:	4610      	mov	r0, r2
   9291c:	4798      	blx	r3
   9291e:	4602      	mov	r2, r0
   92920:	4b0d      	ldr	r3, [pc, #52]	; (92958 <cl_testharnesscommandhandler+0x19d8>)
   92922:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92924:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92928:	b21b      	sxth	r3, r3
   9292a:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   9292c:	2207      	movs	r2, #7
   9292e:	4915      	ldr	r1, [pc, #84]	; (92984 <cl_testharnesscommandhandler+0x1a04>)
   92930:	2018      	movs	r0, #24
   92932:	4b0b      	ldr	r3, [pc, #44]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92934:	4798      	blx	r3
   92936:	4603      	mov	r3, r0
   92938:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9293c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   92940:	2202      	movs	r2, #2
   92942:	4619      	mov	r1, r3
   92944:	2019      	movs	r0, #25
   92946:	4b06      	ldr	r3, [pc, #24]	; (92960 <cl_testharnesscommandhandler+0x19e0>)
   92948:	4798      	blx	r3
   9294a:	4603      	mov	r3, r0
   9294c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92950:	f000 bc63 	b.w	9321a <cl_testharnesscommandhandler+0x229a>
   92954:	000a7ef9 	.word	0x000a7ef9
   92958:	20072044 	.word	0x20072044
   9295c:	000aa17c 	.word	0x000aa17c
   92960:	0009cbd5 	.word	0x0009cbd5
   92964:	000aa188 	.word	0x000aa188
   92968:	2007256c 	.word	0x2007256c
   9296c:	000aa194 	.word	0x000aa194
   92970:	000aa19c 	.word	0x000aa19c
   92974:	000aa1a8 	.word	0x000aa1a8
   92978:	000aa1b4 	.word	0x000aa1b4
   9297c:	000aa1bc 	.word	0x000aa1bc
   92980:	000aa1c4 	.word	0x000aa1c4
   92984:	000aa1d0 	.word	0x000aa1d0
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   92988:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9298c:	2b02      	cmp	r3, #2
   9298e:	d126      	bne.n	929de <cl_testharnesscommandhandler+0x1a5e>
							{
								int16_t temp=0,temp1=0;
   92990:	2300      	movs	r3, #0
   92992:	86fb      	strh	r3, [r7, #54]	; 0x36
   92994:	2300      	movs	r3, #0
   92996:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   9299a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9299e:	b21a      	sxth	r2, r3
   929a0:	4bba      	ldr	r3, [pc, #744]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   929a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   929a6:	4bb9      	ldr	r3, [pc, #740]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   929a8:	2201      	movs	r2, #1
   929aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   929ae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   929b2:	b21b      	sxth	r3, r3
   929b4:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   929b6:	2209      	movs	r2, #9
   929b8:	49b5      	ldr	r1, [pc, #724]	; (92c90 <cl_testharnesscommandhandler+0x1d10>)
   929ba:	2018      	movs	r0, #24
   929bc:	4bb5      	ldr	r3, [pc, #724]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   929be:	4798      	blx	r3
   929c0:	4603      	mov	r3, r0
   929c2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   929c6:	f107 0336 	add.w	r3, r7, #54	; 0x36
   929ca:	2202      	movs	r2, #2
   929cc:	4619      	mov	r1, r3
   929ce:	2019      	movs	r0, #25
   929d0:	4bb0      	ldr	r3, [pc, #704]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   929d2:	4798      	blx	r3
   929d4:	4603      	mov	r3, r0
   929d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   929da:	f000 bc1e 	b.w	9321a <cl_testharnesscommandhandler+0x229a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   929de:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   929e2:	2b03      	cmp	r3, #3
   929e4:	f040 8419 	bne.w	9321a <cl_testharnesscommandhandler+0x229a>
							{
								int16_t temp=0,temp1=0;
   929e8:	2300      	movs	r3, #0
   929ea:	86bb      	strh	r3, [r7, #52]	; 0x34
   929ec:	2300      	movs	r3, #0
   929ee:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   929f2:	4ba6      	ldr	r3, [pc, #664]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   929f4:	2200      	movs	r2, #0
   929f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   929fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   929fe:	b21b      	sxth	r3, r3
   92a00:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   92a02:	2205      	movs	r2, #5
   92a04:	49a4      	ldr	r1, [pc, #656]	; (92c98 <cl_testharnesscommandhandler+0x1d18>)
   92a06:	2018      	movs	r0, #24
   92a08:	4ba2      	ldr	r3, [pc, #648]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92a0a:	4798      	blx	r3
   92a0c:	4603      	mov	r3, r0
   92a0e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
   92a16:	2202      	movs	r2, #2
   92a18:	4619      	mov	r1, r3
   92a1a:	2019      	movs	r0, #25
   92a1c:	4b9d      	ldr	r3, [pc, #628]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92a1e:	4798      	blx	r3
   92a20:	4603      	mov	r3, r0
   92a22:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92a26:	e3f8      	b.n	9321a <cl_testharnesscommandhandler+0x229a>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   92a28:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92a2c:	2b01      	cmp	r3, #1
   92a2e:	d11d      	bne.n	92a6c <cl_testharnesscommandhandler+0x1aec>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   92a30:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92a34:	4b99      	ldr	r3, [pc, #612]	; (92c9c <cl_testharnesscommandhandler+0x1d1c>)
   92a36:	4610      	mov	r0, r2
   92a38:	4798      	blx	r3
   92a3a:	4602      	mov	r2, r0
   92a3c:	4b98      	ldr	r3, [pc, #608]	; (92ca0 <cl_testharnesscommandhandler+0x1d20>)
   92a3e:	609a      	str	r2, [r3, #8]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92a40:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92a44:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   92a46:	2208      	movs	r2, #8
   92a48:	4996      	ldr	r1, [pc, #600]	; (92ca4 <cl_testharnesscommandhandler+0x1d24>)
   92a4a:	2018      	movs	r0, #24
   92a4c:	4b91      	ldr	r3, [pc, #580]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92a4e:	4798      	blx	r3
   92a50:	4603      	mov	r3, r0
   92a52:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92a56:	f107 0332 	add.w	r3, r7, #50	; 0x32
   92a5a:	2202      	movs	r2, #2
   92a5c:	4619      	mov	r1, r3
   92a5e:	2019      	movs	r0, #25
   92a60:	4b8c      	ldr	r3, [pc, #560]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92a62:	4798      	blx	r3
   92a64:	4603      	mov	r3, r0
   92a66:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   92a6a:	e3d8      	b.n	9321e <cl_testharnesscommandhandler+0x229e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								}
								else if (cl_indata.bytearray[2]== 0)
   92a6c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92a70:	2b00      	cmp	r3, #0
   92a72:	d124      	bne.n	92abe <cl_testharnesscommandhandler+0x1b3e>
								{
									int16_t temp=0,temp1=0;
   92a74:	2300      	movs	r3, #0
   92a76:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   92a7a:	2300      	movs	r3, #0
   92a7c:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									temp = cl_indata.Twobyte-1000;
   92a80:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92a84:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92a88:	b29b      	uxth	r3, r3
   92a8a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   92a8e:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   92a92:	4b85      	ldr	r3, [pc, #532]	; (92ca8 <cl_testharnesscommandhandler+0x1d28>)
   92a94:	4610      	mov	r0, r2
   92a96:	4798      	blx	r3
   92a98:	4602      	mov	r2, r0
   92a9a:	4b81      	ldr	r3, [pc, #516]	; (92ca0 <cl_testharnesscommandhandler+0x1d20>)
   92a9c:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   92a9e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   92aa2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92aa6:	b29b      	uxth	r3, r3
   92aa8:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   92aac:	220c      	movs	r2, #12
   92aae:	497f      	ldr	r1, [pc, #508]	; (92cac <cl_testharnesscommandhandler+0x1d2c>)
   92ab0:	2018      	movs	r0, #24
   92ab2:	4b78      	ldr	r3, [pc, #480]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92ab4:	4798      	blx	r3
   92ab6:	4603      	mov	r3, r0
   92ab8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   92abc:	e3af      	b.n	9321e <cl_testharnesscommandhandler+0x229e>
									temp1=temp+1000;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   92abe:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92ac2:	2b02      	cmp	r3, #2
   92ac4:	d124      	bne.n	92b10 <cl_testharnesscommandhandler+0x1b90>
								{
									int16_t temp=0,temp1=0;
   92ac6:	2300      	movs	r3, #0
   92ac8:	863b      	strh	r3, [r7, #48]	; 0x30
   92aca:	2300      	movs	r3, #0
   92acc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   92ad0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92ad4:	b21a      	sxth	r2, r3
   92ad6:	4b6d      	ldr	r3, [pc, #436]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   92ad8:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   92ada:	4b6c      	ldr	r3, [pc, #432]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   92adc:	2201      	movs	r2, #1
   92ade:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   92ae2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92ae6:	b21b      	sxth	r3, r3
   92ae8:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92aea:	2209      	movs	r2, #9
   92aec:	4968      	ldr	r1, [pc, #416]	; (92c90 <cl_testharnesscommandhandler+0x1d10>)
   92aee:	2018      	movs	r0, #24
   92af0:	4b68      	ldr	r3, [pc, #416]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92af2:	4798      	blx	r3
   92af4:	4603      	mov	r3, r0
   92af6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
   92afe:	2202      	movs	r2, #2
   92b00:	4619      	mov	r1, r3
   92b02:	2019      	movs	r0, #25
   92b04:	4b63      	ldr	r3, [pc, #396]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92b06:	4798      	blx	r3
   92b08:	4603      	mov	r3, r0
   92b0a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   92b0e:	e386      	b.n	9321e <cl_testharnesscommandhandler+0x229e>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   92b10:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92b14:	2b03      	cmp	r3, #3
   92b16:	f040 8382 	bne.w	9321e <cl_testharnesscommandhandler+0x229e>
								{
									int16_t temp=0,temp1=0;
   92b1a:	2300      	movs	r3, #0
   92b1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
   92b1e:	2300      	movs	r3, #0
   92b20:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   92b24:	4b59      	ldr	r3, [pc, #356]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   92b26:	2200      	movs	r2, #0
   92b28:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   92b2c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92b30:	b21b      	sxth	r3, r3
   92b32:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   92b34:	2209      	movs	r2, #9
   92b36:	495e      	ldr	r1, [pc, #376]	; (92cb0 <cl_testharnesscommandhandler+0x1d30>)
   92b38:	2018      	movs	r0, #24
   92b3a:	4b56      	ldr	r3, [pc, #344]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92b3c:	4798      	blx	r3
   92b3e:	4603      	mov	r3, r0
   92b40:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92b44:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   92b48:	2202      	movs	r2, #2
   92b4a:	4619      	mov	r1, r3
   92b4c:	2019      	movs	r0, #25
   92b4e:	4b51      	ldr	r3, [pc, #324]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92b50:	4798      	blx	r3
   92b52:	4603      	mov	r3, r0
   92b54:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   92b58:	e361      	b.n	9321e <cl_testharnesscommandhandler+0x229e>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   92b5a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92b5e:	2b01      	cmp	r3, #1
   92b60:	d11d      	bne.n	92b9e <cl_testharnesscommandhandler+0x1c1e>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   92b62:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92b66:	4b4d      	ldr	r3, [pc, #308]	; (92c9c <cl_testharnesscommandhandler+0x1d1c>)
   92b68:	4610      	mov	r0, r2
   92b6a:	4798      	blx	r3
   92b6c:	4602      	mov	r2, r0
   92b6e:	4b4c      	ldr	r3, [pc, #304]	; (92ca0 <cl_testharnesscommandhandler+0x1d20>)
   92b70:	611a      	str	r2, [r3, #16]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92b72:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92b76:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   92b78:	2208      	movs	r2, #8
   92b7a:	494e      	ldr	r1, [pc, #312]	; (92cb4 <cl_testharnesscommandhandler+0x1d34>)
   92b7c:	2018      	movs	r0, #24
   92b7e:	4b45      	ldr	r3, [pc, #276]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92b80:	4798      	blx	r3
   92b82:	4603      	mov	r3, r0
   92b84:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   92b8c:	2202      	movs	r2, #2
   92b8e:	4619      	mov	r1, r3
   92b90:	2019      	movs	r0, #25
   92b92:	4b40      	ldr	r3, [pc, #256]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92b94:	4798      	blx	r3
   92b96:	4603      	mov	r3, r0
   92b98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92b9c:	e341      	b.n	93222 <cl_testharnesscommandhandler+0x22a2>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   92b9e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92ba2:	2b00      	cmp	r3, #0
   92ba4:	d124      	bne.n	92bf0 <cl_testharnesscommandhandler+0x1c70>
							{
								int16_t temp=0,temp1=0;
   92ba6:	2300      	movs	r3, #0
   92ba8:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   92bac:	2300      	movs	r3, #0
   92bae:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								temp = cl_indata.Twobyte-1000;
   92bb2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92bb6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92bba:	b29b      	uxth	r3, r3
   92bbc:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   92bc0:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   92bc4:	4b38      	ldr	r3, [pc, #224]	; (92ca8 <cl_testharnesscommandhandler+0x1d28>)
   92bc6:	4610      	mov	r0, r2
   92bc8:	4798      	blx	r3
   92bca:	4602      	mov	r2, r0
   92bcc:	4b34      	ldr	r3, [pc, #208]	; (92ca0 <cl_testharnesscommandhandler+0x1d20>)
   92bce:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   92bd0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   92bd4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92bd8:	b29b      	uxth	r3, r3
   92bda:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   92bde:	220c      	movs	r2, #12
   92be0:	4935      	ldr	r1, [pc, #212]	; (92cb8 <cl_testharnesscommandhandler+0x1d38>)
   92be2:	2018      	movs	r0, #24
   92be4:	4b2b      	ldr	r3, [pc, #172]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92be6:	4798      	blx	r3
   92be8:	4603      	mov	r3, r0
   92bea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92bee:	e318      	b.n	93222 <cl_testharnesscommandhandler+0x22a2>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   92bf0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92bf4:	2b02      	cmp	r3, #2
   92bf6:	d124      	bne.n	92c42 <cl_testharnesscommandhandler+0x1cc2>
							{
								int16_t temp=0,temp1=0;
   92bf8:	2300      	movs	r3, #0
   92bfa:	857b      	strh	r3, [r7, #42]	; 0x2a
   92bfc:	2300      	movs	r3, #0
   92bfe:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   92c02:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92c06:	b21a      	sxth	r2, r3
   92c08:	4b20      	ldr	r3, [pc, #128]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   92c0a:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   92c0c:	4b1f      	ldr	r3, [pc, #124]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   92c0e:	2201      	movs	r2, #1
   92c10:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92c14:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92c18:	b21b      	sxth	r3, r3
   92c1a:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92c1c:	2209      	movs	r2, #9
   92c1e:	491c      	ldr	r1, [pc, #112]	; (92c90 <cl_testharnesscommandhandler+0x1d10>)
   92c20:	2018      	movs	r0, #24
   92c22:	4b1c      	ldr	r3, [pc, #112]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92c24:	4798      	blx	r3
   92c26:	4603      	mov	r3, r0
   92c28:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92c2c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   92c30:	2202      	movs	r2, #2
   92c32:	4619      	mov	r1, r3
   92c34:	2019      	movs	r0, #25
   92c36:	4b17      	ldr	r3, [pc, #92]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92c38:	4798      	blx	r3
   92c3a:	4603      	mov	r3, r0
   92c3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92c40:	e2ef      	b.n	93222 <cl_testharnesscommandhandler+0x22a2>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92c42:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92c46:	2b03      	cmp	r3, #3
   92c48:	f040 82eb 	bne.w	93222 <cl_testharnesscommandhandler+0x22a2>
							{
								int16_t temp=0,temp1=0;
   92c4c:	2300      	movs	r3, #0
   92c4e:	853b      	strh	r3, [r7, #40]	; 0x28
   92c50:	2300      	movs	r3, #0
   92c52:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   92c56:	4b0d      	ldr	r3, [pc, #52]	; (92c8c <cl_testharnesscommandhandler+0x1d0c>)
   92c58:	2200      	movs	r2, #0
   92c5a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92c5e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92c62:	b21b      	sxth	r3, r3
   92c64:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   92c66:	2209      	movs	r2, #9
   92c68:	4914      	ldr	r1, [pc, #80]	; (92cbc <cl_testharnesscommandhandler+0x1d3c>)
   92c6a:	2018      	movs	r0, #24
   92c6c:	4b09      	ldr	r3, [pc, #36]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92c6e:	4798      	blx	r3
   92c70:	4603      	mov	r3, r0
   92c72:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
   92c7a:	2202      	movs	r2, #2
   92c7c:	4619      	mov	r1, r3
   92c7e:	2019      	movs	r0, #25
   92c80:	4b04      	ldr	r3, [pc, #16]	; (92c94 <cl_testharnesscommandhandler+0x1d14>)
   92c82:	4798      	blx	r3
   92c84:	4603      	mov	r3, r0
   92c86:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92c8a:	e2ca      	b.n	93222 <cl_testharnesscommandhandler+0x22a2>
   92c8c:	2007256c 	.word	0x2007256c
   92c90:	000aa1b4 	.word	0x000aa1b4
   92c94:	0009cbd5 	.word	0x0009cbd5
   92c98:	000aa1dc 	.word	0x000aa1dc
   92c9c:	000a7ef9 	.word	0x000a7ef9
   92ca0:	20072044 	.word	0x20072044
   92ca4:	000aa1e4 	.word	0x000aa1e4
   92ca8:	000a7f01 	.word	0x000a7f01
   92cac:	000aa1f0 	.word	0x000aa1f0
   92cb0:	000aa200 	.word	0x000aa200
   92cb4:	000aa208 	.word	0x000aa208
   92cb8:	000aa214 	.word	0x000aa214
   92cbc:	000aa224 	.word	0x000aa224
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   92cc0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92cc4:	2b01      	cmp	r3, #1
   92cc6:	d11a      	bne.n	92cfe <cl_testharnesscommandhandler+0x1d7e>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   92cc8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92ccc:	b21a      	sxth	r2, r3
   92cce:	4bbe      	ldr	r3, [pc, #760]	; (92fc8 <cl_testharnesscommandhandler+0x2048>)
   92cd0:	805a      	strh	r2, [r3, #2]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92cd2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   92cd8:	2208      	movs	r2, #8
   92cda:	49bc      	ldr	r1, [pc, #752]	; (92fcc <cl_testharnesscommandhandler+0x204c>)
   92cdc:	2018      	movs	r0, #24
   92cde:	4bbc      	ldr	r3, [pc, #752]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92ce0:	4798      	blx	r3
   92ce2:	4603      	mov	r3, r0
   92ce4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92ce8:	f107 0326 	add.w	r3, r7, #38	; 0x26
   92cec:	2202      	movs	r2, #2
   92cee:	4619      	mov	r1, r3
   92cf0:	2019      	movs	r0, #25
   92cf2:	4bb7      	ldr	r3, [pc, #732]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92cf4:	4798      	blx	r3
   92cf6:	4603      	mov	r3, r0
   92cf8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92cfc:	e293      	b.n	93226 <cl_testharnesscommandhandler+0x22a6>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   92cfe:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92d02:	2b00      	cmp	r3, #0
   92d04:	d120      	bne.n	92d48 <cl_testharnesscommandhandler+0x1dc8>
							{
								
								int16_t temp=0,temp1=0;
   92d06:	2300      	movs	r3, #0
   92d08:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   92d0c:	2300      	movs	r3, #0
   92d0e:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   92d10:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d14:	b21a      	sxth	r2, r3
   92d16:	4bac      	ldr	r3, [pc, #688]	; (92fc8 <cl_testharnesscommandhandler+0x2048>)
   92d18:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   92d1a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d1e:	b21b      	sxth	r3, r3
   92d20:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   92d22:	2208      	movs	r2, #8
   92d24:	49ab      	ldr	r1, [pc, #684]	; (92fd4 <cl_testharnesscommandhandler+0x2054>)
   92d26:	2018      	movs	r0, #24
   92d28:	4ba9      	ldr	r3, [pc, #676]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92d2a:	4798      	blx	r3
   92d2c:	4603      	mov	r3, r0
   92d2e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   92d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
   92d36:	2202      	movs	r2, #2
   92d38:	4619      	mov	r1, r3
   92d3a:	2019      	movs	r0, #25
   92d3c:	4ba4      	ldr	r3, [pc, #656]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92d3e:	4798      	blx	r3
   92d40:	4603      	mov	r3, r0
   92d42:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92d46:	e26e      	b.n	93226 <cl_testharnesscommandhandler+0x22a6>
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
								temp1=cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   92d48:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92d4c:	2b02      	cmp	r3, #2
   92d4e:	d123      	bne.n	92d98 <cl_testharnesscommandhandler+0x1e18>
							{
								int16_t temp=0,temp1=0;
   92d50:	2300      	movs	r3, #0
   92d52:	847b      	strh	r3, [r7, #34]	; 0x22
   92d54:	2300      	movs	r3, #0
   92d56:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   92d5a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d5e:	b21a      	sxth	r2, r3
   92d60:	4b9d      	ldr	r3, [pc, #628]	; (92fd8 <cl_testharnesscommandhandler+0x2058>)
   92d62:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   92d64:	4b9c      	ldr	r3, [pc, #624]	; (92fd8 <cl_testharnesscommandhandler+0x2058>)
   92d66:	2201      	movs	r2, #1
   92d68:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92d6a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92d6e:	b21b      	sxth	r3, r3
   92d70:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92d72:	2209      	movs	r2, #9
   92d74:	4999      	ldr	r1, [pc, #612]	; (92fdc <cl_testharnesscommandhandler+0x205c>)
   92d76:	2018      	movs	r0, #24
   92d78:	4b95      	ldr	r3, [pc, #596]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92d7a:	4798      	blx	r3
   92d7c:	4603      	mov	r3, r0
   92d7e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92d82:	f107 0322 	add.w	r3, r7, #34	; 0x22
   92d86:	2202      	movs	r2, #2
   92d88:	4619      	mov	r1, r3
   92d8a:	2019      	movs	r0, #25
   92d8c:	4b90      	ldr	r3, [pc, #576]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92d8e:	4798      	blx	r3
   92d90:	4603      	mov	r3, r0
   92d92:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92d96:	e246      	b.n	93226 <cl_testharnesscommandhandler+0x22a6>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92d98:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92d9c:	2b03      	cmp	r3, #3
   92d9e:	f040 8242 	bne.w	93226 <cl_testharnesscommandhandler+0x22a6>
							{
								int16_t temp=0,temp1=0;
   92da2:	f107 0320 	add.w	r3, r7, #32
   92da6:	2200      	movs	r2, #0
   92da8:	801a      	strh	r2, [r3, #0]
   92daa:	2300      	movs	r3, #0
   92dac:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   92db0:	4b89      	ldr	r3, [pc, #548]	; (92fd8 <cl_testharnesscommandhandler+0x2058>)
   92db2:	2200      	movs	r2, #0
   92db4:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92db6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92dba:	b21a      	sxth	r2, r3
   92dbc:	f107 0320 	add.w	r3, r7, #32
   92dc0:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   92dc2:	2207      	movs	r2, #7
   92dc4:	4986      	ldr	r1, [pc, #536]	; (92fe0 <cl_testharnesscommandhandler+0x2060>)
   92dc6:	2018      	movs	r0, #24
   92dc8:	4b81      	ldr	r3, [pc, #516]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92dca:	4798      	blx	r3
   92dcc:	4603      	mov	r3, r0
   92dce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92dd2:	f107 0320 	add.w	r3, r7, #32
   92dd6:	2202      	movs	r2, #2
   92dd8:	4619      	mov	r1, r3
   92dda:	2019      	movs	r0, #25
   92ddc:	4b7c      	ldr	r3, [pc, #496]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92dde:	4798      	blx	r3
   92de0:	4603      	mov	r3, r0
   92de2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92de6:	e21e      	b.n	93226 <cl_testharnesscommandhandler+0x22a6>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   92de8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92dec:	2b01      	cmp	r3, #1
   92dee:	d11f      	bne.n	92e30 <cl_testharnesscommandhandler+0x1eb0>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   92df0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92df4:	4b7b      	ldr	r3, [pc, #492]	; (92fe4 <cl_testharnesscommandhandler+0x2064>)
   92df6:	4610      	mov	r0, r2
   92df8:	4798      	blx	r3
   92dfa:	4602      	mov	r2, r0
   92dfc:	4b72      	ldr	r3, [pc, #456]	; (92fc8 <cl_testharnesscommandhandler+0x2048>)
   92dfe:	619a      	str	r2, [r3, #24]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92e00:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92e04:	f107 031e 	add.w	r3, r7, #30
   92e08:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   92e0a:	2208      	movs	r2, #8
   92e0c:	4976      	ldr	r1, [pc, #472]	; (92fe8 <cl_testharnesscommandhandler+0x2068>)
   92e0e:	2018      	movs	r0, #24
   92e10:	4b6f      	ldr	r3, [pc, #444]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92e12:	4798      	blx	r3
   92e14:	4603      	mov	r3, r0
   92e16:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92e1a:	f107 031e 	add.w	r3, r7, #30
   92e1e:	2202      	movs	r2, #2
   92e20:	4619      	mov	r1, r3
   92e22:	2019      	movs	r0, #25
   92e24:	4b6a      	ldr	r3, [pc, #424]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92e26:	4798      	blx	r3
   92e28:	4603      	mov	r3, r0
   92e2a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92e2e:	e1fc      	b.n	9322a <cl_testharnesscommandhandler+0x22aa>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   92e30:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92e34:	2b00      	cmp	r3, #0
   92e36:	d124      	bne.n	92e82 <cl_testharnesscommandhandler+0x1f02>
							{
								int16_t temp=0,temp1=0;
   92e38:	2300      	movs	r3, #0
   92e3a:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   92e3e:	2300      	movs	r3, #0
   92e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								temp = cl_indata.Twobyte-1000;
   92e44:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92e48:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92e4c:	b29b      	uxth	r3, r3
   92e4e:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   92e52:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   92e56:	4b65      	ldr	r3, [pc, #404]	; (92fec <cl_testharnesscommandhandler+0x206c>)
   92e58:	4610      	mov	r0, r2
   92e5a:	4798      	blx	r3
   92e5c:	4602      	mov	r2, r0
   92e5e:	4b5a      	ldr	r3, [pc, #360]	; (92fc8 <cl_testharnesscommandhandler+0x2048>)
   92e60:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   92e62:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   92e66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92e6a:	b29b      	uxth	r3, r3
   92e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   92e70:	220c      	movs	r2, #12
   92e72:	495f      	ldr	r1, [pc, #380]	; (92ff0 <cl_testharnesscommandhandler+0x2070>)
   92e74:	2018      	movs	r0, #24
   92e76:	4b56      	ldr	r3, [pc, #344]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92e78:	4798      	blx	r3
   92e7a:	4603      	mov	r3, r0
   92e7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92e80:	e1d3      	b.n	9322a <cl_testharnesscommandhandler+0x22aa>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   92e82:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92e86:	2b02      	cmp	r3, #2
   92e88:	d128      	bne.n	92edc <cl_testharnesscommandhandler+0x1f5c>
							{
								int16_t temp=0,temp1=0;
   92e8a:	f107 031c 	add.w	r3, r7, #28
   92e8e:	2200      	movs	r2, #0
   92e90:	801a      	strh	r2, [r3, #0]
   92e92:	2300      	movs	r3, #0
   92e94:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   92e98:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92e9c:	b21a      	sxth	r2, r3
   92e9e:	4b4e      	ldr	r3, [pc, #312]	; (92fd8 <cl_testharnesscommandhandler+0x2058>)
   92ea0:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   92ea2:	4b4d      	ldr	r3, [pc, #308]	; (92fd8 <cl_testharnesscommandhandler+0x2058>)
   92ea4:	2201      	movs	r2, #1
   92ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92eaa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92eae:	b21a      	sxth	r2, r3
   92eb0:	f107 031c 	add.w	r3, r7, #28
   92eb4:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92eb6:	2209      	movs	r2, #9
   92eb8:	4948      	ldr	r1, [pc, #288]	; (92fdc <cl_testharnesscommandhandler+0x205c>)
   92eba:	2018      	movs	r0, #24
   92ebc:	4b44      	ldr	r3, [pc, #272]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92ebe:	4798      	blx	r3
   92ec0:	4603      	mov	r3, r0
   92ec2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92ec6:	f107 031c 	add.w	r3, r7, #28
   92eca:	2202      	movs	r2, #2
   92ecc:	4619      	mov	r1, r3
   92ece:	2019      	movs	r0, #25
   92ed0:	4b3f      	ldr	r3, [pc, #252]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92ed2:	4798      	blx	r3
   92ed4:	4603      	mov	r3, r0
   92ed6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92eda:	e1a6      	b.n	9322a <cl_testharnesscommandhandler+0x22aa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92edc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92ee0:	2b03      	cmp	r3, #3
   92ee2:	f040 81a2 	bne.w	9322a <cl_testharnesscommandhandler+0x22aa>
							{
								int16_t temp=0,temp1=0;
   92ee6:	f107 031a 	add.w	r3, r7, #26
   92eea:	2200      	movs	r2, #0
   92eec:	801a      	strh	r2, [r3, #0]
   92eee:	2300      	movs	r3, #0
   92ef0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   92ef4:	4b38      	ldr	r3, [pc, #224]	; (92fd8 <cl_testharnesscommandhandler+0x2058>)
   92ef6:	2200      	movs	r2, #0
   92ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92efc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92f00:	b21a      	sxth	r2, r3
   92f02:	f107 031a 	add.w	r3, r7, #26
   92f06:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   92f08:	2209      	movs	r2, #9
   92f0a:	493a      	ldr	r1, [pc, #232]	; (92ff4 <cl_testharnesscommandhandler+0x2074>)
   92f0c:	2018      	movs	r0, #24
   92f0e:	4b30      	ldr	r3, [pc, #192]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92f10:	4798      	blx	r3
   92f12:	4603      	mov	r3, r0
   92f14:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92f18:	f107 031a 	add.w	r3, r7, #26
   92f1c:	2202      	movs	r2, #2
   92f1e:	4619      	mov	r1, r3
   92f20:	2019      	movs	r0, #25
   92f22:	4b2b      	ldr	r3, [pc, #172]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92f24:	4798      	blx	r3
   92f26:	4603      	mov	r3, r0
   92f28:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92f2c:	e17d      	b.n	9322a <cl_testharnesscommandhandler+0x22aa>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   92f2e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92f32:	2b01      	cmp	r3, #1
   92f34:	d11f      	bne.n	92f76 <cl_testharnesscommandhandler+0x1ff6>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   92f36:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92f3a:	4b2a      	ldr	r3, [pc, #168]	; (92fe4 <cl_testharnesscommandhandler+0x2064>)
   92f3c:	4610      	mov	r0, r2
   92f3e:	4798      	blx	r3
   92f40:	4602      	mov	r2, r0
   92f42:	4b21      	ldr	r3, [pc, #132]	; (92fc8 <cl_testharnesscommandhandler+0x2048>)
   92f44:	621a      	str	r2, [r3, #32]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92f46:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92f4a:	f107 0318 	add.w	r3, r7, #24
   92f4e:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   92f50:	2203      	movs	r2, #3
   92f52:	4929      	ldr	r1, [pc, #164]	; (92ff8 <cl_testharnesscommandhandler+0x2078>)
   92f54:	2018      	movs	r0, #24
   92f56:	4b1e      	ldr	r3, [pc, #120]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92f58:	4798      	blx	r3
   92f5a:	4603      	mov	r3, r0
   92f5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92f60:	f107 0318 	add.w	r3, r7, #24
   92f64:	2202      	movs	r2, #2
   92f66:	4619      	mov	r1, r3
   92f68:	2019      	movs	r0, #25
   92f6a:	4b19      	ldr	r3, [pc, #100]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92f6c:	4798      	blx	r3
   92f6e:	4603      	mov	r3, r0
   92f70:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92f74:	e15b      	b.n	9322e <cl_testharnesscommandhandler+0x22ae>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   92f76:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92f7a:	2b00      	cmp	r3, #0
   92f7c:	d140      	bne.n	93000 <cl_testharnesscommandhandler+0x2080>
							{
								int16_t temp=0,temp1=0;
   92f7e:	2300      	movs	r3, #0
   92f80:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   92f84:	2300      	movs	r3, #0
   92f86:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								temp = cl_indata.Twobyte-1000;
   92f8a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92f8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92f92:	b29b      	uxth	r3, r3
   92f94:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   92f98:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   92f9c:	4b13      	ldr	r3, [pc, #76]	; (92fec <cl_testharnesscommandhandler+0x206c>)
   92f9e:	4610      	mov	r0, r2
   92fa0:	4798      	blx	r3
   92fa2:	4602      	mov	r2, r0
   92fa4:	4b08      	ldr	r3, [pc, #32]	; (92fc8 <cl_testharnesscommandhandler+0x2048>)
   92fa6:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   92fa8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   92fac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92fb0:	b29b      	uxth	r3, r3
   92fb2:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   92fb6:	220c      	movs	r2, #12
   92fb8:	4910      	ldr	r1, [pc, #64]	; (92ffc <cl_testharnesscommandhandler+0x207c>)
   92fba:	2018      	movs	r0, #24
   92fbc:	4b04      	ldr	r3, [pc, #16]	; (92fd0 <cl_testharnesscommandhandler+0x2050>)
   92fbe:	4798      	blx	r3
   92fc0:	4603      	mov	r3, r0
   92fc2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92fc6:	e132      	b.n	9322e <cl_testharnesscommandhandler+0x22ae>
   92fc8:	20072044 	.word	0x20072044
   92fcc:	000aa22c 	.word	0x000aa22c
   92fd0:	0009cbd5 	.word	0x0009cbd5
   92fd4:	000aa238 	.word	0x000aa238
   92fd8:	2007256c 	.word	0x2007256c
   92fdc:	000aa1b4 	.word	0x000aa1b4
   92fe0:	000aa244 	.word	0x000aa244
   92fe4:	000a7ef9 	.word	0x000a7ef9
   92fe8:	000aa24c 	.word	0x000aa24c
   92fec:	000a7f01 	.word	0x000a7f01
   92ff0:	000aa258 	.word	0x000aa258
   92ff4:	000aa224 	.word	0x000aa224
   92ff8:	000aa268 	.word	0x000aa268
   92ffc:	000aa26c 	.word	0x000aa26c
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   93000:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   93004:	2b02      	cmp	r3, #2
   93006:	d128      	bne.n	9305a <cl_testharnesscommandhandler+0x20da>
							{
								int16_t temp=0,temp1=0;
   93008:	f107 0316 	add.w	r3, r7, #22
   9300c:	2200      	movs	r2, #0
   9300e:	801a      	strh	r2, [r3, #0]
   93010:	2300      	movs	r3, #0
   93012:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   93016:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9301a:	b21a      	sxth	r2, r3
   9301c:	4ba6      	ldr	r3, [pc, #664]	; (932b8 <cl_testharnesscommandhandler+0x2338>)
   9301e:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   93020:	4ba5      	ldr	r3, [pc, #660]	; (932b8 <cl_testharnesscommandhandler+0x2338>)
   93022:	2201      	movs	r2, #1
   93024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93028:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9302c:	b21a      	sxth	r2, r3
   9302e:	f107 0316 	add.w	r3, r7, #22
   93032:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   93034:	2209      	movs	r2, #9
   93036:	49a1      	ldr	r1, [pc, #644]	; (932bc <cl_testharnesscommandhandler+0x233c>)
   93038:	2018      	movs	r0, #24
   9303a:	4ba1      	ldr	r3, [pc, #644]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   9303c:	4798      	blx	r3
   9303e:	4603      	mov	r3, r0
   93040:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   93044:	f107 0316 	add.w	r3, r7, #22
   93048:	2202      	movs	r2, #2
   9304a:	4619      	mov	r1, r3
   9304c:	2019      	movs	r0, #25
   9304e:	4b9c      	ldr	r3, [pc, #624]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   93050:	4798      	blx	r3
   93052:	4603      	mov	r3, r0
   93054:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93058:	e0e9      	b.n	9322e <cl_testharnesscommandhandler+0x22ae>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9305a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9305e:	2b03      	cmp	r3, #3
   93060:	f040 80e5 	bne.w	9322e <cl_testharnesscommandhandler+0x22ae>
							{
								int16_t temp=0,temp1=0;
   93064:	f107 0314 	add.w	r3, r7, #20
   93068:	2200      	movs	r2, #0
   9306a:	801a      	strh	r2, [r3, #0]
   9306c:	2300      	movs	r3, #0
   9306e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   93072:	4b91      	ldr	r3, [pc, #580]	; (932b8 <cl_testharnesscommandhandler+0x2338>)
   93074:	2200      	movs	r2, #0
   93076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9307a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9307e:	b21a      	sxth	r2, r3
   93080:	f107 0314 	add.w	r3, r7, #20
   93084:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   93086:	2209      	movs	r2, #9
   93088:	498e      	ldr	r1, [pc, #568]	; (932c4 <cl_testharnesscommandhandler+0x2344>)
   9308a:	2018      	movs	r0, #24
   9308c:	4b8c      	ldr	r3, [pc, #560]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   9308e:	4798      	blx	r3
   93090:	4603      	mov	r3, r0
   93092:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   93096:	f107 0314 	add.w	r3, r7, #20
   9309a:	2202      	movs	r2, #2
   9309c:	4619      	mov	r1, r3
   9309e:	2019      	movs	r0, #25
   930a0:	4b87      	ldr	r3, [pc, #540]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   930a2:	4798      	blx	r3
   930a4:	4603      	mov	r3, r0
   930a6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   930aa:	e0c0      	b.n	9322e <cl_testharnesscommandhandler+0x22ae>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   930ac:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   930b0:	2b01      	cmp	r3, #1
   930b2:	d11f      	bne.n	930f4 <cl_testharnesscommandhandler+0x2174>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   930b4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   930b8:	4b83      	ldr	r3, [pc, #524]	; (932c8 <cl_testharnesscommandhandler+0x2348>)
   930ba:	4610      	mov	r0, r2
   930bc:	4798      	blx	r3
   930be:	4602      	mov	r2, r0
   930c0:	4b82      	ldr	r3, [pc, #520]	; (932cc <cl_testharnesscommandhandler+0x234c>)
   930c2:	629a      	str	r2, [r3, #40]	; 0x28
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   930c4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   930c8:	f107 0312 	add.w	r3, r7, #18
   930cc:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   930ce:	2203      	movs	r2, #3
   930d0:	497f      	ldr	r1, [pc, #508]	; (932d0 <cl_testharnesscommandhandler+0x2350>)
   930d2:	2018      	movs	r0, #24
   930d4:	4b7a      	ldr	r3, [pc, #488]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   930d6:	4798      	blx	r3
   930d8:	4603      	mov	r3, r0
   930da:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   930de:	f107 0312 	add.w	r3, r7, #18
   930e2:	2202      	movs	r2, #2
   930e4:	4619      	mov	r1, r3
   930e6:	2019      	movs	r0, #25
   930e8:	4b75      	ldr	r3, [pc, #468]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   930ea:	4798      	blx	r3
   930ec:	4603      	mov	r3, r0
   930ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   930f2:	e09e      	b.n	93232 <cl_testharnesscommandhandler+0x22b2>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   930f4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   930f8:	2b00      	cmp	r3, #0
   930fa:	d124      	bne.n	93146 <cl_testharnesscommandhandler+0x21c6>
							{
								int16_t temp=0,temp1=0;
   930fc:	2300      	movs	r3, #0
   930fe:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   93102:	2300      	movs	r3, #0
   93104:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								temp = cl_indata.Twobyte-1000;
   93108:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9310c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   93110:	b29b      	uxth	r3, r3
   93112:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   93116:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   9311a:	4b6e      	ldr	r3, [pc, #440]	; (932d4 <cl_testharnesscommandhandler+0x2354>)
   9311c:	4610      	mov	r0, r2
   9311e:	4798      	blx	r3
   93120:	4602      	mov	r2, r0
   93122:	4b6a      	ldr	r3, [pc, #424]	; (932cc <cl_testharnesscommandhandler+0x234c>)
   93124:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   93126:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   9312a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   9312e:	b29b      	uxth	r3, r3
   93130:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   93134:	220c      	movs	r2, #12
   93136:	4968      	ldr	r1, [pc, #416]	; (932d8 <cl_testharnesscommandhandler+0x2358>)
   93138:	2018      	movs	r0, #24
   9313a:	4b61      	ldr	r3, [pc, #388]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   9313c:	4798      	blx	r3
   9313e:	4603      	mov	r3, r0
   93140:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93144:	e075      	b.n	93232 <cl_testharnesscommandhandler+0x22b2>
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   93146:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9314a:	2b02      	cmp	r3, #2
   9314c:	d129      	bne.n	931a2 <cl_testharnesscommandhandler+0x2222>
							{
								int16_t temp=0,temp1=0;
   9314e:	f107 0310 	add.w	r3, r7, #16
   93152:	2200      	movs	r2, #0
   93154:	801a      	strh	r2, [r3, #0]
   93156:	2300      	movs	r3, #0
   93158:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   9315c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93160:	b21a      	sxth	r2, r3
   93162:	4b55      	ldr	r3, [pc, #340]	; (932b8 <cl_testharnesscommandhandler+0x2338>)
   93164:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   93168:	4b53      	ldr	r3, [pc, #332]	; (932b8 <cl_testharnesscommandhandler+0x2338>)
   9316a:	2201      	movs	r2, #1
   9316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   93170:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   93174:	b21a      	sxth	r2, r3
   93176:	f107 0310 	add.w	r3, r7, #16
   9317a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   9317c:	2209      	movs	r2, #9
   9317e:	494f      	ldr	r1, [pc, #316]	; (932bc <cl_testharnesscommandhandler+0x233c>)
   93180:	2018      	movs	r0, #24
   93182:	4b4f      	ldr	r3, [pc, #316]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   93184:	4798      	blx	r3
   93186:	4603      	mov	r3, r0
   93188:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9318c:	f107 0310 	add.w	r3, r7, #16
   93190:	2202      	movs	r2, #2
   93192:	4619      	mov	r1, r3
   93194:	2019      	movs	r0, #25
   93196:	4b4a      	ldr	r3, [pc, #296]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   93198:	4798      	blx	r3
   9319a:	4603      	mov	r3, r0
   9319c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   931a0:	e047      	b.n	93232 <cl_testharnesscommandhandler+0x22b2>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   931a2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   931a6:	2b03      	cmp	r3, #3
   931a8:	d143      	bne.n	93232 <cl_testharnesscommandhandler+0x22b2>
							{
								int16_t temp=0,temp1=0;
   931aa:	f107 030e 	add.w	r3, r7, #14
   931ae:	2200      	movs	r2, #0
   931b0:	801a      	strh	r2, [r3, #0]
   931b2:	2300      	movs	r3, #0
   931b4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   931b8:	4b3f      	ldr	r3, [pc, #252]	; (932b8 <cl_testharnesscommandhandler+0x2338>)
   931ba:	2200      	movs	r2, #0
   931bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   931c0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   931c4:	b21a      	sxth	r2, r3
   931c6:	f107 030e 	add.w	r3, r7, #14
   931ca:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   931cc:	2209      	movs	r2, #9
   931ce:	4943      	ldr	r1, [pc, #268]	; (932dc <cl_testharnesscommandhandler+0x235c>)
   931d0:	2018      	movs	r0, #24
   931d2:	4b3b      	ldr	r3, [pc, #236]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   931d4:	4798      	blx	r3
   931d6:	4603      	mov	r3, r0
   931d8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   931dc:	f107 030e 	add.w	r3, r7, #14
   931e0:	2202      	movs	r2, #2
   931e2:	4619      	mov	r1, r3
   931e4:	2019      	movs	r0, #25
   931e6:	4b36      	ldr	r3, [pc, #216]	; (932c0 <cl_testharnesscommandhandler+0x2340>)
   931e8:	4798      	blx	r3
   931ea:	4603      	mov	r3, r0
   931ec:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   931f0:	e01f      	b.n	93232 <cl_testharnesscommandhandler+0x22b2>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   931f2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   931f6:	2b01      	cmp	r3, #1
   931f8:	d105      	bne.n	93206 <cl_testharnesscommandhandler+0x2286>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   931fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   931fe:	b21a      	sxth	r2, r3
   93200:	4b32      	ldr	r3, [pc, #200]	; (932cc <cl_testharnesscommandhandler+0x234c>)
   93202:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   93204:	e016      	b.n	93234 <cl_testharnesscommandhandler+0x22b4>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   93206:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9320a:	b21a      	sxth	r2, r3
   9320c:	4b2f      	ldr	r3, [pc, #188]	; (932cc <cl_testharnesscommandhandler+0x234c>)
   9320e:	801a      	strh	r2, [r3, #0]
							}
							break;
   93210:	e010      	b.n	93234 <cl_testharnesscommandhandler+0x22b4>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93212:	bf00      	nop
   93214:	e339      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93216:	bf00      	nop
   93218:	e337      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9321a:	bf00      	nop
   9321c:	e335      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   9321e:	bf00      	nop
   93220:	e333      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93222:	bf00      	nop
   93224:	e331      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93226:	bf00      	nop
   93228:	e32f      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9322a:	bf00      	nop
   9322c:	e32d      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9322e:	bf00      	nop
   93230:	e32b      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   93232:	bf00      	nop
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
						}
		break;
   93234:	e329      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   93236:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9323a:	3b05      	subs	r3, #5
   9323c:	2b11      	cmp	r3, #17
   9323e:	f200 8317 	bhi.w	93870 <cl_testharnesscommandhandler+0x28f0>
   93242:	a201      	add	r2, pc, #4	; (adr r2, 93248 <cl_testharnesscommandhandler+0x22c8>)
   93244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93248:	000932ed 	.word	0x000932ed
   9324c:	00093387 	.word	0x00093387
   93250:	00093421 	.word	0x00093421
   93254:	00093871 	.word	0x00093871
   93258:	00093871 	.word	0x00093871
   9325c:	00093871 	.word	0x00093871
   93260:	00093871 	.word	0x00093871
   93264:	00093697 	.word	0x00093697
   93268:	00093735 	.word	0x00093735
   9326c:	000937d3 	.word	0x000937d3
   93270:	00093871 	.word	0x00093871
   93274:	00093871 	.word	0x00093871
   93278:	00093499 	.word	0x00093499
   9327c:	000934f9 	.word	0x000934f9
   93280:	00093871 	.word	0x00093871
   93284:	000935c5 	.word	0x000935c5
   93288:	00093291 	.word	0x00093291
   9328c:	000932a5 	.word	0x000932a5
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (Cl_Uint8Type *)"HP_START=";
   93290:	4b13      	ldr	r3, [pc, #76]	; (932e0 <cl_testharnesscommandhandler+0x2360>)
   93292:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   93296:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9329a:	4619      	mov	r1, r3
   9329c:	2017      	movs	r0, #23
   9329e:	4b11      	ldr	r3, [pc, #68]	; (932e4 <cl_testharnesscommandhandler+0x2364>)
   932a0:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   932a2:	e2ea      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   932a4:	f107 0392 	add.w	r3, r7, #146	; 0x92
   932a8:	4619      	mov	r1, r3
   932aa:	2018      	movs	r0, #24
   932ac:	4b0d      	ldr	r3, [pc, #52]	; (932e4 <cl_testharnesscommandhandler+0x2364>)
   932ae:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_END=";
   932b0:	4b0d      	ldr	r3, [pc, #52]	; (932e8 <cl_testharnesscommandhandler+0x2368>)
   932b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   932b6:	e2e0      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
   932b8:	2007256c 	.word	0x2007256c
   932bc:	000aa1b4 	.word	0x000aa1b4
   932c0:	0009cbd5 	.word	0x0009cbd5
   932c4:	000aa224 	.word	0x000aa224
   932c8:	000a7ef9 	.word	0x000a7ef9
   932cc:	20072044 	.word	0x20072044
   932d0:	000aa27c 	.word	0x000aa27c
   932d4:	000a7f01 	.word	0x000a7f01
   932d8:	000aa280 	.word	0x000aa280
   932dc:	000aa290 	.word	0x000aa290
   932e0:	000aa298 	.word	0x000aa298
   932e4:	000938e9 	.word	0x000938e9
   932e8:	000aa2a4 	.word	0x000aa2a4
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   932ec:	f107 0392 	add.w	r3, r7, #146	; 0x92
   932f0:	4619      	mov	r1, r3
   932f2:	200e      	movs	r0, #14
   932f4:	4ba8      	ldr	r3, [pc, #672]	; (93598 <cl_testharnesscommandhandler+0x2618>)
   932f6:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"PS1=";
   932f8:	4ba8      	ldr	r3, [pc, #672]	; (9359c <cl_testharnesscommandhandler+0x261c>)
   932fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   932fe:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   93302:	461a      	mov	r2, r3
   93304:	f640 43e4 	movw	r3, #3300	; 0xce4
   93308:	fb03 f302 	mul.w	r3, r3, r2
   9330c:	2b00      	cmp	r3, #0
   9330e:	da01      	bge.n	93314 <cl_testharnesscommandhandler+0x2394>
   93310:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   93314:	131b      	asrs	r3, r3, #12
   93316:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   9331a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9331e:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   93322:	4b9f      	ldr	r3, [pc, #636]	; (935a0 <cl_testharnesscommandhandler+0x2620>)
   93324:	4610      	mov	r0, r2
   93326:	4798      	blx	r3
   93328:	4c9e      	ldr	r4, [pc, #632]	; (935a4 <cl_testharnesscommandhandler+0x2624>)
   9332a:	a397      	add	r3, pc, #604	; (adr r3, 93588 <cl_testharnesscommandhandler+0x2608>)
   9332c:	e9d3 2300 	ldrd	r2, r3, [r3]
   93330:	47a0      	blx	r4
   93332:	4603      	mov	r3, r0
   93334:	460c      	mov	r4, r1
   93336:	4619      	mov	r1, r3
   93338:	4622      	mov	r2, r4
   9333a:	4b9b      	ldr	r3, [pc, #620]	; (935a8 <cl_testharnesscommandhandler+0x2628>)
   9333c:	4608      	mov	r0, r1
   9333e:	4611      	mov	r1, r2
   93340:	4798      	blx	r3
   93342:	4603      	mov	r3, r0
   93344:	b21b      	sxth	r3, r3
   93346:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   9334a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9334e:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   93352:	da08      	bge.n	93366 <cl_testharnesscommandhandler+0x23e6>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   93354:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   93358:	b29b      	uxth	r3, r3
   9335a:	3b32      	subs	r3, #50	; 0x32
   9335c:	b29b      	uxth	r3, r3
   9335e:	b21b      	sxth	r3, r3
   93360:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   93364:	e286      	b.n	93874 <cl_testharnesscommandhandler+0x28f4>
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
				if (  sensordatamillivolts < 1360 )
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
				}
				else if(  sensordatamillivolts < 1650 )
   93366:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9336a:	f240 6271 	movw	r2, #1649	; 0x671
   9336e:	4293      	cmp	r3, r2
   93370:	f300 8280 	bgt.w	93874 <cl_testharnesscommandhandler+0x28f4>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   93374:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   93378:	b29b      	uxth	r3, r3
   9337a:	3b19      	subs	r3, #25
   9337c:	b29b      	uxth	r3, r3
   9337e:	b21b      	sxth	r3, r3
   93380:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   93384:	e276      	b.n	93874 <cl_testharnesscommandhandler+0x28f4>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   93386:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9338a:	4619      	mov	r1, r3
   9338c:	200f      	movs	r0, #15
   9338e:	4b82      	ldr	r3, [pc, #520]	; (93598 <cl_testharnesscommandhandler+0x2618>)
   93390:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS2=";
   93392:	4b86      	ldr	r3, [pc, #536]	; (935ac <cl_testharnesscommandhandler+0x262c>)
   93394:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   93398:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   9339c:	461a      	mov	r2, r3
   9339e:	f640 43e4 	movw	r3, #3300	; 0xce4
   933a2:	fb03 f302 	mul.w	r3, r3, r2
   933a6:	2b00      	cmp	r3, #0
   933a8:	da01      	bge.n	933ae <cl_testharnesscommandhandler+0x242e>
   933aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   933ae:	131b      	asrs	r3, r3, #12
   933b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   933b4:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   933b8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   933bc:	4b78      	ldr	r3, [pc, #480]	; (935a0 <cl_testharnesscommandhandler+0x2620>)
   933be:	4610      	mov	r0, r2
   933c0:	4798      	blx	r3
   933c2:	4c78      	ldr	r4, [pc, #480]	; (935a4 <cl_testharnesscommandhandler+0x2624>)
   933c4:	a370      	add	r3, pc, #448	; (adr r3, 93588 <cl_testharnesscommandhandler+0x2608>)
   933c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   933ca:	47a0      	blx	r4
   933cc:	4603      	mov	r3, r0
   933ce:	460c      	mov	r4, r1
   933d0:	4619      	mov	r1, r3
   933d2:	4622      	mov	r2, r4
   933d4:	4b74      	ldr	r3, [pc, #464]	; (935a8 <cl_testharnesscommandhandler+0x2628>)
   933d6:	4608      	mov	r0, r1
   933d8:	4611      	mov	r1, r2
   933da:	4798      	blx	r3
   933dc:	4603      	mov	r3, r0
   933de:	b21b      	sxth	r3, r3
   933e0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   933e4:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   933e8:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   933ec:	da08      	bge.n	93400 <cl_testharnesscommandhandler+0x2480>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   933ee:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   933f2:	b29b      	uxth	r3, r3
   933f4:	3b32      	subs	r3, #50	; 0x32
   933f6:	b29b      	uxth	r3, r3
   933f8:	b21b      	sxth	r3, r3
   933fa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   933fe:	e23b      	b.n	93878 <cl_testharnesscommandhandler+0x28f8>
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
			if (  sensordatamillivolts < 1360 )
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
			}
			else if(  sensordatamillivolts < 1650 )
   93400:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93404:	f240 6271 	movw	r2, #1649	; 0x671
   93408:	4293      	cmp	r3, r2
   9340a:	f300 8235 	bgt.w	93878 <cl_testharnesscommandhandler+0x28f8>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   9340e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   93412:	b29b      	uxth	r3, r3
   93414:	3b19      	subs	r3, #25
   93416:	b29b      	uxth	r3, r3
   93418:	b21b      	sxth	r3, r3
   9341a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   9341e:	e22b      	b.n	93878 <cl_testharnesscommandhandler+0x28f8>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   93420:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93424:	4619      	mov	r1, r3
   93426:	2027      	movs	r0, #39	; 0x27
   93428:	4b5b      	ldr	r3, [pc, #364]	; (93598 <cl_testharnesscommandhandler+0x2618>)
   9342a:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS3=";
   9342c:	4b60      	ldr	r3, [pc, #384]	; (935b0 <cl_testharnesscommandhandler+0x2630>)
   9342e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   93432:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   93436:	461a      	mov	r2, r3
   93438:	f640 43e4 	movw	r3, #3300	; 0xce4
   9343c:	fb03 f302 	mul.w	r3, r3, r2
   93440:	2b00      	cmp	r3, #0
   93442:	da01      	bge.n	93448 <cl_testharnesscommandhandler+0x24c8>
   93444:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   93448:	131b      	asrs	r3, r3, #12
   9344a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   9344e:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   93452:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   93456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9345a:	fb02 f303 	mul.w	r3, r2, r3
   9345e:	4a55      	ldr	r2, [pc, #340]	; (935b4 <cl_testharnesscommandhandler+0x2634>)
   93460:	fb82 1203 	smull	r1, r2, r2, r3
   93464:	1252      	asrs	r2, r2, #9
   93466:	17db      	asrs	r3, r3, #31
   93468:	1ad3      	subs	r3, r2, r3
   9346a:	b21b      	sxth	r3, r3
   9346c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   93470:	2204      	movs	r2, #4
   93472:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93476:	2018      	movs	r0, #24
   93478:	4b4f      	ldr	r3, [pc, #316]	; (935b8 <cl_testharnesscommandhandler+0x2638>)
   9347a:	4798      	blx	r3
   9347c:	4603      	mov	r3, r0
   9347e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   93482:	f107 0390 	add.w	r3, r7, #144	; 0x90
   93486:	2202      	movs	r2, #2
   93488:	4619      	mov	r1, r3
   9348a:	2019      	movs	r0, #25
   9348c:	4b4a      	ldr	r3, [pc, #296]	; (935b8 <cl_testharnesscommandhandler+0x2638>)
   9348e:	4798      	blx	r3
   93490:	4603      	mov	r3, r0
   93492:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   93496:	e1f0      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   93498:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9349c:	4619      	mov	r1, r3
   9349e:	2024      	movs	r0, #36	; 0x24
   934a0:	4b3d      	ldr	r3, [pc, #244]	; (93598 <cl_testharnesscommandhandler+0x2618>)
   934a2:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   934a4:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   934a8:	461a      	mov	r2, r3
   934aa:	f640 43e4 	movw	r3, #3300	; 0xce4
   934ae:	fb03 f302 	mul.w	r3, r3, r2
   934b2:	2b00      	cmp	r3, #0
   934b4:	da01      	bge.n	934ba <cl_testharnesscommandhandler+0x253a>
   934b6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   934ba:	131b      	asrs	r3, r3, #12
   934bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   934c0:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   934c4:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   934c8:	4b35      	ldr	r3, [pc, #212]	; (935a0 <cl_testharnesscommandhandler+0x2620>)
   934ca:	4610      	mov	r0, r2
   934cc:	4798      	blx	r3
   934ce:	4c35      	ldr	r4, [pc, #212]	; (935a4 <cl_testharnesscommandhandler+0x2624>)
   934d0:	a32f      	add	r3, pc, #188	; (adr r3, 93590 <cl_testharnesscommandhandler+0x2610>)
   934d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   934d6:	47a0      	blx	r4
   934d8:	4603      	mov	r3, r0
   934da:	460c      	mov	r4, r1
   934dc:	4619      	mov	r1, r3
   934de:	4622      	mov	r2, r4
   934e0:	4b31      	ldr	r3, [pc, #196]	; (935a8 <cl_testharnesscommandhandler+0x2628>)
   934e2:	4608      	mov	r0, r1
   934e4:	4611      	mov	r1, r2
   934e6:	4798      	blx	r3
   934e8:	4603      	mov	r3, r0
   934ea:	b21b      	sxth	r3, r3
   934ec:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"APT=";
   934f0:	4b32      	ldr	r3, [pc, #200]	; (935bc <cl_testharnesscommandhandler+0x263c>)
   934f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   934f6:	e1c0      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   934f8:	f107 0392 	add.w	r3, r7, #146	; 0x92
   934fc:	4619      	mov	r1, r3
   934fe:	2026      	movs	r0, #38	; 0x26
   93500:	4b25      	ldr	r3, [pc, #148]	; (93598 <cl_testharnesscommandhandler+0x2618>)
   93502:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"VPT=";
   93504:	4b2e      	ldr	r3, [pc, #184]	; (935c0 <cl_testharnesscommandhandler+0x2640>)
   93506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   9350a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   9350e:	461a      	mov	r2, r3
   93510:	f640 43e4 	movw	r3, #3300	; 0xce4
   93514:	fb03 f302 	mul.w	r3, r3, r2
   93518:	2b00      	cmp	r3, #0
   9351a:	da01      	bge.n	93520 <cl_testharnesscommandhandler+0x25a0>
   9351c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   93520:	131b      	asrs	r3, r3, #12
   93522:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   93526:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9352a:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   9352e:	4b1c      	ldr	r3, [pc, #112]	; (935a0 <cl_testharnesscommandhandler+0x2620>)
   93530:	4610      	mov	r0, r2
   93532:	4798      	blx	r3
   93534:	4c1b      	ldr	r4, [pc, #108]	; (935a4 <cl_testharnesscommandhandler+0x2624>)
   93536:	a316      	add	r3, pc, #88	; (adr r3, 93590 <cl_testharnesscommandhandler+0x2610>)
   93538:	e9d3 2300 	ldrd	r2, r3, [r3]
   9353c:	47a0      	blx	r4
   9353e:	4603      	mov	r3, r0
   93540:	460c      	mov	r4, r1
   93542:	4619      	mov	r1, r3
   93544:	4622      	mov	r2, r4
   93546:	4b18      	ldr	r3, [pc, #96]	; (935a8 <cl_testharnesscommandhandler+0x2628>)
   93548:	4608      	mov	r0, r1
   9354a:	4611      	mov	r1, r2
   9354c:	4798      	blx	r3
   9354e:	4603      	mov	r3, r0
   93550:	b21b      	sxth	r3, r3
   93552:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"VPT=";
   93556:	4b1a      	ldr	r3, [pc, #104]	; (935c0 <cl_testharnesscommandhandler+0x2640>)
   93558:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   9355c:	2204      	movs	r2, #4
   9355e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93562:	2018      	movs	r0, #24
   93564:	4b14      	ldr	r3, [pc, #80]	; (935b8 <cl_testharnesscommandhandler+0x2638>)
   93566:	4798      	blx	r3
   93568:	4603      	mov	r3, r0
   9356a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   9356e:	f107 0390 	add.w	r3, r7, #144	; 0x90
   93572:	2202      	movs	r2, #2
   93574:	4619      	mov	r1, r3
   93576:	2019      	movs	r0, #25
   93578:	4b0f      	ldr	r3, [pc, #60]	; (935b8 <cl_testharnesscommandhandler+0x2638>)
   9357a:	4798      	blx	r3
   9357c:	4603      	mov	r3, r0
   9357e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   93582:	e17a      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
   93584:	f3af 8000 	nop.w
   93588:	8f5c28f6 	.word	0x8f5c28f6
   9358c:	3fe8f5c2 	.word	0x3fe8f5c2
   93590:	33333333 	.word	0x33333333
   93594:	3fe33333 	.word	0x3fe33333
   93598:	000938e9 	.word	0x000938e9
   9359c:	000aa2ac 	.word	0x000aa2ac
   935a0:	000a765d 	.word	0x000a765d
   935a4:	000a797d 	.word	0x000a797d
   935a8:	000a7c5d 	.word	0x000a7c5d
   935ac:	000aa2b4 	.word	0x000aa2b4
   935b0:	000aa2bc 	.word	0x000aa2bc
   935b4:	77280773 	.word	0x77280773
   935b8:	0009cbd5 	.word	0x0009cbd5
   935bc:	000aa2c4 	.word	0x000aa2c4
   935c0:	000aa2cc 	.word	0x000aa2cc
			
			pdataarray = (Cl_Uint8Type *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   935c4:	4bb8      	ldr	r3, [pc, #736]	; (938a8 <cl_testharnesscommandhandler+0x2928>)
   935c6:	f9b3 3000 	ldrsh.w	r3, [r3]
   935ca:	b29a      	uxth	r2, r3
   935cc:	4bb7      	ldr	r3, [pc, #732]	; (938ac <cl_testharnesscommandhandler+0x292c>)
   935ce:	f9b3 3000 	ldrsh.w	r3, [r3]
   935d2:	b29b      	uxth	r3, r3
   935d4:	1ad3      	subs	r3, r2, r3
   935d6:	b29b      	uxth	r3, r3
   935d8:	b21b      	sxth	r3, r3
   935da:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   935de:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   935e2:	b29b      	uxth	r3, r3
   935e4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   935e8:	b29b      	uxth	r3, r3
   935ea:	b21b      	sxth	r3, r3
   935ec:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (Cl_Uint8Type *)"TMP1=";
   935f0:	4baf      	ldr	r3, [pc, #700]	; (938b0 <cl_testharnesscommandhandler+0x2930>)
   935f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   935f6:	2204      	movs	r2, #4
   935f8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   935fc:	2018      	movs	r0, #24
   935fe:	4bad      	ldr	r3, [pc, #692]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   93600:	4798      	blx	r3
   93602:	4603      	mov	r3, r0
   93604:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   93608:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   9360c:	2202      	movs	r2, #2
   9360e:	4619      	mov	r1, r3
   93610:	2019      	movs	r0, #25
   93612:	4ba8      	ldr	r3, [pc, #672]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   93614:	4798      	blx	r3
   93616:	4603      	mov	r3, r0
   93618:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   9361c:	4ba2      	ldr	r3, [pc, #648]	; (938a8 <cl_testharnesscommandhandler+0x2928>)
   9361e:	f9b3 3000 	ldrsh.w	r3, [r3]
   93622:	461a      	mov	r2, r3
   93624:	4ba4      	ldr	r3, [pc, #656]	; (938b8 <cl_testharnesscommandhandler+0x2938>)
   93626:	f9b3 3000 	ldrsh.w	r3, [r3]
   9362a:	4413      	add	r3, r2
   9362c:	0fda      	lsrs	r2, r3, #31
   9362e:	4413      	add	r3, r2
   93630:	105b      	asrs	r3, r3, #1
   93632:	b29a      	uxth	r2, r3
   93634:	4b9d      	ldr	r3, [pc, #628]	; (938ac <cl_testharnesscommandhandler+0x292c>)
   93636:	f9b3 3000 	ldrsh.w	r3, [r3]
   9363a:	4619      	mov	r1, r3
   9363c:	4b9f      	ldr	r3, [pc, #636]	; (938bc <cl_testharnesscommandhandler+0x293c>)
   9363e:	f9b3 3000 	ldrsh.w	r3, [r3]
   93642:	440b      	add	r3, r1
   93644:	0fd9      	lsrs	r1, r3, #31
   93646:	440b      	add	r3, r1
   93648:	105b      	asrs	r3, r3, #1
   9364a:	b29b      	uxth	r3, r3
   9364c:	1ad3      	subs	r3, r2, r3
   9364e:	b29b      	uxth	r3, r3
   93650:	b21b      	sxth	r3, r3
   93652:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (Cl_Uint8Type *)"TMP2=";
   93656:	4b9a      	ldr	r3, [pc, #616]	; (938c0 <cl_testharnesscommandhandler+0x2940>)
   93658:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   9365c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   93660:	b29b      	uxth	r3, r3
   93662:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   93666:	b29b      	uxth	r3, r3
   93668:	b21b      	sxth	r3, r3
   9366a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   9366e:	2204      	movs	r2, #4
   93670:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93674:	2018      	movs	r0, #24
   93676:	4b8f      	ldr	r3, [pc, #572]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   93678:	4798      	blx	r3
   9367a:	4603      	mov	r3, r0
   9367c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   93680:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   93684:	2202      	movs	r2, #2
   93686:	4619      	mov	r1, r3
   93688:	2019      	movs	r0, #25
   9368a:	4b8a      	ldr	r3, [pc, #552]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   9368c:	4798      	blx	r3
   9368e:	4603      	mov	r3, r0
   93690:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   93694:	e0f1      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   93696:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9369a:	4619      	mov	r1, r3
   9369c:	2012      	movs	r0, #18
   9369e:	4b89      	ldr	r3, [pc, #548]	; (938c4 <cl_testharnesscommandhandler+0x2944>)
   936a0:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   936a2:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   936a6:	4b88      	ldr	r3, [pc, #544]	; (938c8 <cl_testharnesscommandhandler+0x2948>)
   936a8:	4610      	mov	r0, r2
   936aa:	4798      	blx	r3
   936ac:	4c87      	ldr	r4, [pc, #540]	; (938cc <cl_testharnesscommandhandler+0x294c>)
   936ae:	a37a      	add	r3, pc, #488	; (adr r3, 93898 <cl_testharnesscommandhandler+0x2918>)
   936b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   936b4:	47a0      	blx	r4
   936b6:	4603      	mov	r3, r0
   936b8:	460c      	mov	r4, r1
   936ba:	4618      	mov	r0, r3
   936bc:	4621      	mov	r1, r4
   936be:	4c84      	ldr	r4, [pc, #528]	; (938d0 <cl_testharnesscommandhandler+0x2950>)
   936c0:	a377      	add	r3, pc, #476	; (adr r3, 938a0 <cl_testharnesscommandhandler+0x2920>)
   936c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   936c6:	47a0      	blx	r4
   936c8:	4603      	mov	r3, r0
   936ca:	460c      	mov	r4, r1
   936cc:	4619      	mov	r1, r3
   936ce:	4622      	mov	r2, r4
   936d0:	4b80      	ldr	r3, [pc, #512]	; (938d4 <cl_testharnesscommandhandler+0x2954>)
   936d2:	4608      	mov	r0, r1
   936d4:	4611      	mov	r1, r2
   936d6:	4798      	blx	r3
   936d8:	4603      	mov	r3, r0
   936da:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
							temp1 = 3700 + (temp * 1000)/340;
   936de:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   936e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   936e6:	fb02 f303 	mul.w	r3, r2, r3
   936ea:	4a7b      	ldr	r2, [pc, #492]	; (938d8 <cl_testharnesscommandhandler+0x2958>)
   936ec:	fb82 1203 	smull	r1, r2, r2, r3
   936f0:	11d2      	asrs	r2, r2, #7
   936f2:	17db      	asrs	r3, r3, #31
   936f4:	1ad3      	subs	r3, r2, r3
   936f6:	b29b      	uxth	r3, r3
   936f8:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   936fc:	b29b      	uxth	r3, r3
   936fe:	b21a      	sxth	r2, r3
   93700:	f107 030c 	add.w	r3, r7, #12
   93704:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (Cl_Uint8Type *)"TEMP1=";
   93706:	4b75      	ldr	r3, [pc, #468]	; (938dc <cl_testharnesscommandhandler+0x295c>)
   93708:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   9370c:	2206      	movs	r2, #6
   9370e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   93712:	2018      	movs	r0, #24
   93714:	4b67      	ldr	r3, [pc, #412]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   93716:	4798      	blx	r3
   93718:	4603      	mov	r3, r0
   9371a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   9371e:	f107 030c 	add.w	r3, r7, #12
   93722:	2202      	movs	r2, #2
   93724:	4619      	mov	r1, r3
   93726:	2019      	movs	r0, #25
   93728:	4b62      	ldr	r3, [pc, #392]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   9372a:	4798      	blx	r3
   9372c:	4603      	mov	r3, r0
   9372e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   93732:	e0a2      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   93734:	f107 0392 	add.w	r3, r7, #146	; 0x92
   93738:	4619      	mov	r1, r3
   9373a:	2013      	movs	r0, #19
   9373c:	4b61      	ldr	r3, [pc, #388]	; (938c4 <cl_testharnesscommandhandler+0x2944>)
   9373e:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   93740:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   93744:	4b60      	ldr	r3, [pc, #384]	; (938c8 <cl_testharnesscommandhandler+0x2948>)
   93746:	4610      	mov	r0, r2
   93748:	4798      	blx	r3
   9374a:	4c60      	ldr	r4, [pc, #384]	; (938cc <cl_testharnesscommandhandler+0x294c>)
   9374c:	a352      	add	r3, pc, #328	; (adr r3, 93898 <cl_testharnesscommandhandler+0x2918>)
   9374e:	e9d3 2300 	ldrd	r2, r3, [r3]
   93752:	47a0      	blx	r4
   93754:	4603      	mov	r3, r0
   93756:	460c      	mov	r4, r1
   93758:	4618      	mov	r0, r3
   9375a:	4621      	mov	r1, r4
   9375c:	4c5c      	ldr	r4, [pc, #368]	; (938d0 <cl_testharnesscommandhandler+0x2950>)
   9375e:	a350      	add	r3, pc, #320	; (adr r3, 938a0 <cl_testharnesscommandhandler+0x2920>)
   93760:	e9d3 2300 	ldrd	r2, r3, [r3]
   93764:	47a0      	blx	r4
   93766:	4603      	mov	r3, r0
   93768:	460c      	mov	r4, r1
   9376a:	4619      	mov	r1, r3
   9376c:	4622      	mov	r2, r4
   9376e:	4b59      	ldr	r3, [pc, #356]	; (938d4 <cl_testharnesscommandhandler+0x2954>)
   93770:	4608      	mov	r0, r1
   93772:	4611      	mov	r1, r2
   93774:	4798      	blx	r3
   93776:	4603      	mov	r3, r0
   93778:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					temp1 = 3700 + (temp * 1000)/340;
   9377c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   93780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   93784:	fb02 f303 	mul.w	r3, r2, r3
   93788:	4a53      	ldr	r2, [pc, #332]	; (938d8 <cl_testharnesscommandhandler+0x2958>)
   9378a:	fb82 1203 	smull	r1, r2, r2, r3
   9378e:	11d2      	asrs	r2, r2, #7
   93790:	17db      	asrs	r3, r3, #31
   93792:	1ad3      	subs	r3, r2, r3
   93794:	b29b      	uxth	r3, r3
   93796:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   9379a:	b29b      	uxth	r3, r3
   9379c:	b21a      	sxth	r2, r3
   9379e:	f107 030a 	add.w	r3, r7, #10
   937a2:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (Cl_Uint8Type *)"TEMP2=";
   937a4:	4b4e      	ldr	r3, [pc, #312]	; (938e0 <cl_testharnesscommandhandler+0x2960>)
   937a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   937aa:	2206      	movs	r2, #6
   937ac:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   937b0:	2018      	movs	r0, #24
   937b2:	4b40      	ldr	r3, [pc, #256]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   937b4:	4798      	blx	r3
   937b6:	4603      	mov	r3, r0
   937b8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   937bc:	f107 030a 	add.w	r3, r7, #10
   937c0:	2202      	movs	r2, #2
   937c2:	4619      	mov	r1, r3
   937c4:	2019      	movs	r0, #25
   937c6:	4b3b      	ldr	r3, [pc, #236]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   937c8:	4798      	blx	r3
   937ca:	4603      	mov	r3, r0
   937cc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   937d0:	e053      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   937d2:	f107 0392 	add.w	r3, r7, #146	; 0x92
   937d6:	4619      	mov	r1, r3
   937d8:	2014      	movs	r0, #20
   937da:	4b3a      	ldr	r3, [pc, #232]	; (938c4 <cl_testharnesscommandhandler+0x2944>)
   937dc:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   937de:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   937e2:	4b39      	ldr	r3, [pc, #228]	; (938c8 <cl_testharnesscommandhandler+0x2948>)
   937e4:	4610      	mov	r0, r2
   937e6:	4798      	blx	r3
   937e8:	4c38      	ldr	r4, [pc, #224]	; (938cc <cl_testharnesscommandhandler+0x294c>)
   937ea:	a32b      	add	r3, pc, #172	; (adr r3, 93898 <cl_testharnesscommandhandler+0x2918>)
   937ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   937f0:	47a0      	blx	r4
   937f2:	4603      	mov	r3, r0
   937f4:	460c      	mov	r4, r1
   937f6:	4618      	mov	r0, r3
   937f8:	4621      	mov	r1, r4
   937fa:	4c35      	ldr	r4, [pc, #212]	; (938d0 <cl_testharnesscommandhandler+0x2950>)
   937fc:	a328      	add	r3, pc, #160	; (adr r3, 938a0 <cl_testharnesscommandhandler+0x2920>)
   937fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   93802:	47a0      	blx	r4
   93804:	4603      	mov	r3, r0
   93806:	460c      	mov	r4, r1
   93808:	4619      	mov	r1, r3
   9380a:	4622      	mov	r2, r4
   9380c:	4b31      	ldr	r3, [pc, #196]	; (938d4 <cl_testharnesscommandhandler+0x2954>)
   9380e:	4608      	mov	r0, r1
   93810:	4611      	mov	r1, r2
   93812:	4798      	blx	r3
   93814:	4603      	mov	r3, r0
   93816:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				temp1 = 3700 + (temp * 1000)/340;
   9381a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   9381e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   93822:	fb02 f303 	mul.w	r3, r2, r3
   93826:	4a2c      	ldr	r2, [pc, #176]	; (938d8 <cl_testharnesscommandhandler+0x2958>)
   93828:	fb82 1203 	smull	r1, r2, r2, r3
   9382c:	11d2      	asrs	r2, r2, #7
   9382e:	17db      	asrs	r3, r3, #31
   93830:	1ad3      	subs	r3, r2, r3
   93832:	b29b      	uxth	r3, r3
   93834:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   93838:	b29b      	uxth	r3, r3
   9383a:	b21a      	sxth	r2, r3
   9383c:	f107 0308 	add.w	r3, r7, #8
   93840:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (Cl_Uint8Type *)"TEMP3=";
   93842:	4b28      	ldr	r3, [pc, #160]	; (938e4 <cl_testharnesscommandhandler+0x2964>)
   93844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   93848:	2206      	movs	r2, #6
   9384a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9384e:	2018      	movs	r0, #24
   93850:	4b18      	ldr	r3, [pc, #96]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   93852:	4798      	blx	r3
   93854:	4603      	mov	r3, r0
   93856:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   9385a:	f107 0308 	add.w	r3, r7, #8
   9385e:	2202      	movs	r2, #2
   93860:	4619      	mov	r1, r3
   93862:	2019      	movs	r0, #25
   93864:	4b13      	ldr	r3, [pc, #76]	; (938b4 <cl_testharnesscommandhandler+0x2934>)
   93866:	4798      	blx	r3
   93868:	4603      	mov	r3, r0
   9386a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   9386e:	e004      	b.n	9387a <cl_testharnesscommandhandler+0x28fa>


			
			default: break;
   93870:	bf00      	nop
   93872:	e00a      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
				
			}
			#endif

			
			break;
   93874:	bf00      	nop
   93876:	e008      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   93878:	bf00      	nop

			
			default: break;
		}

		break;
   9387a:	e006      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
		default:
		
		break;
   9387c:	bf00      	nop
   9387e:	e004      	b.n	9388a <cl_testharnesscommandhandler+0x290a>

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   93880:	bf00      	nop
   93882:	e002      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   93884:	bf00      	nop
   93886:	e000      	b.n	9388a <cl_testharnesscommandhandler+0x290a>
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   93888:	bf00      	nop
		break;
	}
	
	
	
	return CL_OK;
   9388a:	2300      	movs	r3, #0
	
}
   9388c:	4618      	mov	r0, r3
   9388e:	f507 7792 	add.w	r7, r7, #292	; 0x124
   93892:	46bd      	mov	sp, r7
   93894:	bd90      	pop	{r4, r7, pc}
   93896:	bf00      	nop
   93898:	a6b50b0f 	.word	0xa6b50b0f
   9389c:	3fe9c779 	.word	0x3fe9c779
   938a0:	00000000 	.word	0x00000000
   938a4:	4096a800 	.word	0x4096a800
   938a8:	20071948 	.word	0x20071948
   938ac:	20071942 	.word	0x20071942
   938b0:	000aa2d4 	.word	0x000aa2d4
   938b4:	0009cbd5 	.word	0x0009cbd5
   938b8:	20071946 	.word	0x20071946
   938bc:	20071944 	.word	0x20071944
   938c0:	000aa2dc 	.word	0x000aa2dc
   938c4:	000938e9 	.word	0x000938e9
   938c8:	000a765d 	.word	0x000a765d
   938cc:	000a7729 	.word	0x000a7729
   938d0:	000a73c1 	.word	0x000a73c1
   938d4:	000a7c5d 	.word	0x000a7c5d
   938d8:	60606061 	.word	0x60606061
   938dc:	000aa2e4 	.word	0x000aa2e4
   938e0:	000aa2ec 	.word	0x000aa2ec
   938e4:	000aa2f4 	.word	0x000aa2f4

000938e8 <cl_testgetsensordata>:


Cl_ReturnCodeType  cl_testgetsensordata(Cl_Uint8Type dataId, uint16_t* dataItem)
{
   938e8:	b580      	push	{r7, lr}
   938ea:	b086      	sub	sp, #24
   938ec:	af00      	add	r7, sp, #0
   938ee:	4603      	mov	r3, r0
   938f0:	6039      	str	r1, [r7, #0]
   938f2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   938f4:	2304      	movs	r3, #4
   938f6:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type bytedata =0 ;
   938f8:	2300      	movs	r3, #0
   938fa:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type twobytedatal=0;
   938fc:	2300      	movs	r3, #0
   938fe:	81bb      	strh	r3, [r7, #12]
	Cl_Uint32Type worddata=0;
   93900:	2300      	movs	r3, #0
   93902:	60bb      	str	r3, [r7, #8]
	
	Cl_Uint8Type pbytedata;
	Cl_Uint16Type p2bytedatal;
	Cl_Uint32Type pworddata;
	
	pbytedata = &bytedata;
   93904:	f107 030f 	add.w	r3, r7, #15
   93908:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   9390a:	f107 030c 	add.w	r3, r7, #12
   9390e:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   93910:	f107 0308 	add.w	r3, r7, #8
   93914:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   93916:	79fb      	ldrb	r3, [r7, #7]
   93918:	6839      	ldr	r1, [r7, #0]
   9391a:	4618      	mov	r0, r3
   9391c:	4b03      	ldr	r3, [pc, #12]	; (9392c <cl_testgetsensordata+0x44>)
   9391e:	4798      	blx	r3
	
return CL_OK;	
   93920:	2300      	movs	r3, #0
}
   93922:	4618      	mov	r0, r3
   93924:	3718      	adds	r7, #24
   93926:	46bd      	mov	sp, r7
   93928:	bd80      	pop	{r7, pc}
   9392a:	bf00      	nop
   9392c:	0008fa01 	.word	0x0008fa01

00093930 <pinclock>:
	#endif

}

void pinclock(void)
{
   93930:	b480      	push	{r7}
   93932:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   93934:	bf00      	nop
   93936:	46bd      	mov	sp, r7
   93938:	bc80      	pop	{r7}
   9393a:	4770      	bx	lr

0009393c <testsectclock>:
	minute_count++;
}


void testsectclock(void)
{
   9393c:	b580      	push	{r7, lr}
   9393e:	b086      	sub	sp, #24
   93940:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   93942:	2300      	movs	r3, #0
   93944:	82fb      	strh	r3, [r7, #22]
   93946:	2300      	movs	r3, #0
   93948:	82bb      	strh	r3, [r7, #20]
   9394a:	2300      	movs	r3, #0
   9394c:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   9394e:	2300      	movs	r3, #0
   93950:	823b      	strh	r3, [r7, #16]
   93952:	2300      	movs	r3, #0
   93954:	81fb      	strh	r3, [r7, #14]
   93956:	2300      	movs	r3, #0
   93958:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   9395a:	f04f 0300 	mov.w	r3, #0
   9395e:	60bb      	str	r3, [r7, #8]
	Cl_Uint16Type int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   93960:	1dbb      	adds	r3, r7, #6
   93962:	4619      	mov	r1, r3
   93964:	2013      	movs	r0, #19
   93966:	4b0f      	ldr	r3, [pc, #60]	; (939a4 <testsectclock+0x68>)
   93968:	4798      	blx	r3
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
   9396a:	4b0f      	ldr	r3, [pc, #60]	; (939a8 <testsectclock+0x6c>)
   9396c:	681a      	ldr	r2, [r3, #0]
   9396e:	4b0f      	ldr	r3, [pc, #60]	; (939ac <testsectclock+0x70>)
   93970:	490f      	ldr	r1, [pc, #60]	; (939b0 <testsectclock+0x74>)
   93972:	4610      	mov	r0, r2
   93974:	4798      	blx	r3
   93976:	4603      	mov	r3, r0
   93978:	2b00      	cmp	r3, #0
   9397a:	d100      	bne.n	9397e <testsectclock+0x42>
	}
		
	}
		
	
}
   9397c:	e00d      	b.n	9399a <testsectclock+0x5e>
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
	{
		if (flag_hotcitric == 1 || hotrinse_flag == 1)
   9397e:	4b0d      	ldr	r3, [pc, #52]	; (939b4 <testsectclock+0x78>)
   93980:	781b      	ldrb	r3, [r3, #0]
   93982:	b2db      	uxtb	r3, r3
   93984:	2b01      	cmp	r3, #1
   93986:	d008      	beq.n	9399a <testsectclock+0x5e>
   93988:	4b0b      	ldr	r3, [pc, #44]	; (939b8 <testsectclock+0x7c>)
   9398a:	781b      	ldrb	r3, [r3, #0]
   9398c:	2b01      	cmp	r3, #1
   9398e:	d004      	beq.n	9399a <testsectclock+0x5e>
		{
			
		}
		else
		{
		sv_cntrl_poweroffheater();
   93990:	4b0a      	ldr	r3, [pc, #40]	; (939bc <testsectclock+0x80>)
   93992:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   93994:	2004      	movs	r0, #4
   93996:	4b0a      	ldr	r3, [pc, #40]	; (939c0 <testsectclock+0x84>)
   93998:	4798      	blx	r3
	}
		
	}
		
	
}
   9399a:	bf00      	nop
   9399c:	3718      	adds	r7, #24
   9399e:	46bd      	mov	sp, r7
   939a0:	bd80      	pop	{r7, pc}
   939a2:	bf00      	nop
   939a4:	0008fa01 	.word	0x0008fa01
   939a8:	2007173c 	.word	0x2007173c
   939ac:	000a8321 	.word	0x000a8321
   939b0:	471c4000 	.word	0x471c4000
   939b4:	20071937 	.word	0x20071937
   939b8:	20071bb5 	.word	0x20071bb5
   939bc:	0009adcd 	.word	0x0009adcd
   939c0:	00089035 	.word	0x00089035

000939c4 <Cl_TimerTickCallback>:

Cl_ReturnCodeType Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodeType Cl_TimerTickCallback()
{
   939c4:	b580      	push	{r7, lr}
   939c6:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   939c8:	4b1c      	ldr	r3, [pc, #112]	; (93a3c <Cl_TimerTickCallback+0x78>)
   939ca:	681b      	ldr	r3, [r3, #0]
   939cc:	3301      	adds	r3, #1
   939ce:	4a1b      	ldr	r2, [pc, #108]	; (93a3c <Cl_TimerTickCallback+0x78>)
   939d0:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   939d2:	4b1a      	ldr	r3, [pc, #104]	; (93a3c <Cl_TimerTickCallback+0x78>)
   939d4:	681b      	ldr	r3, [r3, #0]
   939d6:	2b00      	cmp	r3, #0
   939d8:	dd07      	ble.n	939ea <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   939da:	4b18      	ldr	r3, [pc, #96]	; (93a3c <Cl_TimerTickCallback+0x78>)
   939dc:	2200      	movs	r2, #0
   939de:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   939e0:	4b17      	ldr	r3, [pc, #92]	; (93a40 <Cl_TimerTickCallback+0x7c>)
   939e2:	681b      	ldr	r3, [r3, #0]
   939e4:	3301      	adds	r3, #1
   939e6:	4a16      	ldr	r2, [pc, #88]	; (93a40 <Cl_TimerTickCallback+0x7c>)
   939e8:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   939ea:	4b15      	ldr	r3, [pc, #84]	; (93a40 <Cl_TimerTickCallback+0x7c>)
   939ec:	681b      	ldr	r3, [r3, #0]
   939ee:	2b3b      	cmp	r3, #59	; 0x3b
   939f0:	dd07      	ble.n	93a02 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   939f2:	4b13      	ldr	r3, [pc, #76]	; (93a40 <Cl_TimerTickCallback+0x7c>)
   939f4:	2200      	movs	r2, #0
   939f6:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   939f8:	4b12      	ldr	r3, [pc, #72]	; (93a44 <Cl_TimerTickCallback+0x80>)
   939fa:	681b      	ldr	r3, [r3, #0]
   939fc:	3301      	adds	r3, #1
   939fe:	4a11      	ldr	r2, [pc, #68]	; (93a44 <Cl_TimerTickCallback+0x80>)
   93a00:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	if(Cl_Minutes >= SIXTY)
   93a02:	4b10      	ldr	r3, [pc, #64]	; (93a44 <Cl_TimerTickCallback+0x80>)
   93a04:	681b      	ldr	r3, [r3, #0]
   93a06:	2b3b      	cmp	r3, #59	; 0x3b
   93a08:	dd0d      	ble.n	93a26 <Cl_TimerTickCallback+0x62>
//	if(Cl_Minutes >= 10)
	{
		Cl_Minutes = 0;
   93a0a:	4b0e      	ldr	r3, [pc, #56]	; (93a44 <Cl_TimerTickCallback+0x80>)
   93a0c:	2200      	movs	r2, #0
   93a0e:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   93a10:	4b0d      	ldr	r3, [pc, #52]	; (93a48 <Cl_TimerTickCallback+0x84>)
   93a12:	681b      	ldr	r3, [r3, #0]
   93a14:	3301      	adds	r3, #1
   93a16:	4a0c      	ldr	r2, [pc, #48]	; (93a48 <Cl_TimerTickCallback+0x84>)
   93a18:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   93a1a:	4b0c      	ldr	r3, [pc, #48]	; (93a4c <Cl_TimerTickCallback+0x88>)
   93a1c:	4798      	blx	r3
   93a1e:	4603      	mov	r3, r0
   93a20:	461a      	mov	r2, r3
   93a22:	4b0b      	ldr	r3, [pc, #44]	; (93a50 <Cl_TimerTickCallback+0x8c>)
   93a24:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   93a26:	4b08      	ldr	r3, [pc, #32]	; (93a48 <Cl_TimerTickCallback+0x84>)
   93a28:	681b      	ldr	r3, [r3, #0]
   93a2a:	2b17      	cmp	r3, #23
   93a2c:	dd02      	ble.n	93a34 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   93a2e:	4b06      	ldr	r3, [pc, #24]	; (93a48 <Cl_TimerTickCallback+0x84>)
   93a30:	2200      	movs	r2, #0
   93a32:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   93a34:	2300      	movs	r3, #0
}
   93a36:	4618      	mov	r0, r3
   93a38:	bd80      	pop	{r7, pc}
   93a3a:	bf00      	nop
   93a3c:	20071958 	.word	0x20071958
   93a40:	2007195c 	.word	0x2007195c
   93a44:	20071960 	.word	0x20071960
   93a48:	20071964 	.word	0x20071964
   93a4c:	00093e41 	.word	0x00093e41
   93a50:	20072610 	.word	0x20072610

00093a54 <Cl_MilliTickcallBack>:




Cl_ReturnCodeType Cl_MilliTickcallBack(void)
{
   93a54:	b580      	push	{r7, lr}
   93a56:	b082      	sub	sp, #8
   93a58:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   93a5a:	4b63      	ldr	r3, [pc, #396]	; (93be8 <Cl_MilliTickcallBack+0x194>)
   93a5c:	681b      	ldr	r3, [r3, #0]
   93a5e:	2b01      	cmp	r3, #1
   93a60:	d10d      	bne.n	93a7e <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   93a62:	4b62      	ldr	r3, [pc, #392]	; (93bec <Cl_MilliTickcallBack+0x198>)
   93a64:	681b      	ldr	r3, [r3, #0]
   93a66:	3301      	adds	r3, #1
   93a68:	4a60      	ldr	r2, [pc, #384]	; (93bec <Cl_MilliTickcallBack+0x198>)
   93a6a:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   93a6c:	4b5f      	ldr	r3, [pc, #380]	; (93bec <Cl_MilliTickcallBack+0x198>)
   93a6e:	681b      	ldr	r3, [r3, #0]
   93a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   93a74:	dd06      	ble.n	93a84 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   93a76:	4b5d      	ldr	r3, [pc, #372]	; (93bec <Cl_MilliTickcallBack+0x198>)
   93a78:	2200      	movs	r2, #0
   93a7a:	601a      	str	r2, [r3, #0]
   93a7c:	e002      	b.n	93a84 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   93a7e:	4b5b      	ldr	r3, [pc, #364]	; (93bec <Cl_MilliTickcallBack+0x198>)
   93a80:	2200      	movs	r2, #0
   93a82:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   93a84:	4b5a      	ldr	r3, [pc, #360]	; (93bf0 <Cl_MilliTickcallBack+0x19c>)
   93a86:	681b      	ldr	r3, [r3, #0]
   93a88:	3301      	adds	r3, #1
   93a8a:	4a59      	ldr	r2, [pc, #356]	; (93bf0 <Cl_MilliTickcallBack+0x19c>)
   93a8c:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   93a8e:	4b58      	ldr	r3, [pc, #352]	; (93bf0 <Cl_MilliTickcallBack+0x19c>)
   93a90:	681b      	ldr	r3, [r3, #0]
   93a92:	2b32      	cmp	r3, #50	; 0x32
   93a94:	dd02      	ble.n	93a9c <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   93a96:	4b56      	ldr	r3, [pc, #344]	; (93bf0 <Cl_MilliTickcallBack+0x19c>)
   93a98:	2200      	movs	r2, #0
   93a9a:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   93a9c:	4b55      	ldr	r3, [pc, #340]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93a9e:	681b      	ldr	r3, [r3, #0]
   93aa0:	3301      	adds	r3, #1
   93aa2:	4a54      	ldr	r2, [pc, #336]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93aa4:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   93aa6:	4b53      	ldr	r3, [pc, #332]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93aa8:	6819      	ldr	r1, [r3, #0]
   93aaa:	4b53      	ldr	r3, [pc, #332]	; (93bf8 <Cl_MilliTickcallBack+0x1a4>)
   93aac:	fb83 2301 	smull	r2, r3, r3, r1
   93ab0:	10da      	asrs	r2, r3, #3
   93ab2:	17cb      	asrs	r3, r1, #31
   93ab4:	1ad2      	subs	r2, r2, r3
   93ab6:	4613      	mov	r3, r2
   93ab8:	009b      	lsls	r3, r3, #2
   93aba:	4413      	add	r3, r2
   93abc:	009b      	lsls	r3, r3, #2
   93abe:	1aca      	subs	r2, r1, r3
   93ac0:	2a00      	cmp	r2, #0
   93ac2:	d103      	bne.n	93acc <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   93ac4:	4b4d      	ldr	r3, [pc, #308]	; (93bfc <Cl_MilliTickcallBack+0x1a8>)
   93ac6:	4798      	blx	r3
   93ac8:	4603      	mov	r3, r0
   93aca:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   93acc:	4b49      	ldr	r3, [pc, #292]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93ace:	681b      	ldr	r3, [r3, #0]
   93ad0:	f003 0301 	and.w	r3, r3, #1
   93ad4:	2b00      	cmp	r3, #0
   93ad6:	d105      	bne.n	93ae4 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   93ad8:	4b49      	ldr	r3, [pc, #292]	; (93c00 <Cl_MilliTickcallBack+0x1ac>)
   93ada:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   93adc:	4b49      	ldr	r3, [pc, #292]	; (93c04 <Cl_MilliTickcallBack+0x1b0>)
   93ade:	4798      	blx	r3
   93ae0:	4603      	mov	r3, r0
   93ae2:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   93ae4:	4b43      	ldr	r3, [pc, #268]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93ae6:	6819      	ldr	r1, [r3, #0]
   93ae8:	4b43      	ldr	r3, [pc, #268]	; (93bf8 <Cl_MilliTickcallBack+0x1a4>)
   93aea:	fb83 2301 	smull	r2, r3, r3, r1
   93aee:	105a      	asrs	r2, r3, #1
   93af0:	17cb      	asrs	r3, r1, #31
   93af2:	1ad2      	subs	r2, r2, r3
   93af4:	4613      	mov	r3, r2
   93af6:	009b      	lsls	r3, r3, #2
   93af8:	4413      	add	r3, r2
   93afa:	1aca      	subs	r2, r1, r3
   93afc:	2a00      	cmp	r2, #0
   93afe:	d103      	bne.n	93b08 <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   93b00:	4b41      	ldr	r3, [pc, #260]	; (93c08 <Cl_MilliTickcallBack+0x1b4>)
   93b02:	4798      	blx	r3
   93b04:	4603      	mov	r3, r0
   93b06:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   93b08:	4b3a      	ldr	r3, [pc, #232]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93b0a:	6819      	ldr	r1, [r3, #0]
   93b0c:	4b3a      	ldr	r3, [pc, #232]	; (93bf8 <Cl_MilliTickcallBack+0x1a4>)
   93b0e:	fb83 2301 	smull	r2, r3, r3, r1
   93b12:	109a      	asrs	r2, r3, #2
   93b14:	17cb      	asrs	r3, r1, #31
   93b16:	1ad2      	subs	r2, r2, r3
   93b18:	4613      	mov	r3, r2
   93b1a:	009b      	lsls	r3, r3, #2
   93b1c:	4413      	add	r3, r2
   93b1e:	005b      	lsls	r3, r3, #1
   93b20:	1aca      	subs	r2, r1, r3
   93b22:	2a00      	cmp	r2, #0
   93b24:	d103      	bne.n	93b2e <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   93b26:	4b39      	ldr	r3, [pc, #228]	; (93c0c <Cl_MilliTickcallBack+0x1b8>)
   93b28:	4798      	blx	r3
   93b2a:	4603      	mov	r3, r0
   93b2c:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   93b2e:	4b31      	ldr	r3, [pc, #196]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93b30:	681a      	ldr	r2, [r3, #0]
   93b32:	4b37      	ldr	r3, [pc, #220]	; (93c10 <Cl_MilliTickcallBack+0x1bc>)
   93b34:	fb83 1302 	smull	r1, r3, r3, r2
   93b38:	1119      	asrs	r1, r3, #4
   93b3a:	17d3      	asrs	r3, r2, #31
   93b3c:	1acb      	subs	r3, r1, r3
   93b3e:	2132      	movs	r1, #50	; 0x32
   93b40:	fb01 f303 	mul.w	r3, r1, r3
   93b44:	1ad3      	subs	r3, r2, r3
   93b46:	2b00      	cmp	r3, #0
   93b48:	d103      	bne.n	93b52 <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   93b4a:	4b32      	ldr	r3, [pc, #200]	; (93c14 <Cl_MilliTickcallBack+0x1c0>)
   93b4c:	4798      	blx	r3
   93b4e:	4603      	mov	r3, r0
   93b50:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   93b52:	4b28      	ldr	r3, [pc, #160]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93b54:	681b      	ldr	r3, [r3, #0]
   93b56:	2b64      	cmp	r3, #100	; 0x64
   93b58:	d108      	bne.n	93b6c <Cl_MilliTickcallBack+0x118>
		{
			//Cl_msticks = 0;
			Cl_ms100ticks++;
   93b5a:	4b2f      	ldr	r3, [pc, #188]	; (93c18 <Cl_MilliTickcallBack+0x1c4>)
   93b5c:	681b      	ldr	r3, [r3, #0]
   93b5e:	3301      	adds	r3, #1
   93b60:	4a2d      	ldr	r2, [pc, #180]	; (93c18 <Cl_MilliTickcallBack+0x1c4>)
   93b62:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   93b64:	4b2d      	ldr	r3, [pc, #180]	; (93c1c <Cl_MilliTickcallBack+0x1c8>)
   93b66:	4798      	blx	r3
   93b68:	4603      	mov	r3, r0
   93b6a:	71fb      	strb	r3, [r7, #7]
				//cl_hep_pump_enddetction_timer();


		}

if(Cl_msticks == 150)
   93b6c:	4b21      	ldr	r3, [pc, #132]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93b6e:	681b      	ldr	r3, [r3, #0]
   93b70:	2b96      	cmp	r3, #150	; 0x96
   93b72:	d10b      	bne.n	93b8c <Cl_MilliTickcallBack+0x138>
		{
			Cl_msticks = 0;
   93b74:	4b1f      	ldr	r3, [pc, #124]	; (93bf4 <Cl_MilliTickcallBack+0x1a0>)
   93b76:	2200      	movs	r2, #0
   93b78:	601a      	str	r2, [r3, #0]
			Cl_ms150ticks++;
   93b7a:	4b29      	ldr	r3, [pc, #164]	; (93c20 <Cl_MilliTickcallBack+0x1cc>)
   93b7c:	681b      	ldr	r3, [r3, #0]
   93b7e:	3301      	adds	r3, #1
   93b80:	4a27      	ldr	r2, [pc, #156]	; (93c20 <Cl_MilliTickcallBack+0x1cc>)
   93b82:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick150Ms_Event();
   93b84:	4b27      	ldr	r3, [pc, #156]	; (93c24 <Cl_MilliTickcallBack+0x1d0>)
   93b86:	4798      	blx	r3
   93b88:	4603      	mov	r3, r0
   93b8a:	71fb      	strb	r3, [r7, #7]


		}


		if(Cl_ms100ticks == 3 )
   93b8c:	4b22      	ldr	r3, [pc, #136]	; (93c18 <Cl_MilliTickcallBack+0x1c4>)
   93b8e:	681b      	ldr	r3, [r3, #0]
   93b90:	2b03      	cmp	r3, #3
   93b92:	d11d      	bne.n	93bd0 <Cl_MilliTickcallBack+0x17c>
		{
			Cl_ms100ticks = 0;
   93b94:	4b20      	ldr	r3, [pc, #128]	; (93c18 <Cl_MilliTickcallBack+0x1c4>)
   93b96:	2200      	movs	r2, #0
   93b98:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   93b9a:	4b23      	ldr	r3, [pc, #140]	; (93c28 <Cl_MilliTickcallBack+0x1d4>)
   93b9c:	681b      	ldr	r3, [r3, #0]
   93b9e:	3301      	adds	r3, #1
   93ba0:	4a21      	ldr	r2, [pc, #132]	; (93c28 <Cl_MilliTickcallBack+0x1d4>)
   93ba2:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   93ba4:	4b20      	ldr	r3, [pc, #128]	; (93c28 <Cl_MilliTickcallBack+0x1d4>)
   93ba6:	681b      	ldr	r3, [r3, #0]
   93ba8:	2b02      	cmp	r3, #2
   93baa:	d10d      	bne.n	93bc8 <Cl_MilliTickcallBack+0x174>
			{
				Cl_ms500ticks = 0;
   93bac:	4b1e      	ldr	r3, [pc, #120]	; (93c28 <Cl_MilliTickcallBack+0x1d4>)
   93bae:	2200      	movs	r2, #0
   93bb0:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   93bb2:	4b1e      	ldr	r3, [pc, #120]	; (93c2c <Cl_MilliTickcallBack+0x1d8>)
   93bb4:	4798      	blx	r3
   93bb6:	4603      	mov	r3, r0
   93bb8:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   93bba:	4b1d      	ldr	r3, [pc, #116]	; (93c30 <Cl_MilliTickcallBack+0x1dc>)
   93bbc:	681b      	ldr	r3, [r3, #0]
   93bbe:	3301      	adds	r3, #1
   93bc0:	4a1b      	ldr	r2, [pc, #108]	; (93c30 <Cl_MilliTickcallBack+0x1dc>)
   93bc2:	6013      	str	r3, [r2, #0]
				testsectclock();
   93bc4:	4b1b      	ldr	r3, [pc, #108]	; (93c34 <Cl_MilliTickcallBack+0x1e0>)
   93bc6:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   93bc8:	4b1b      	ldr	r3, [pc, #108]	; (93c38 <Cl_MilliTickcallBack+0x1e4>)
   93bca:	4798      	blx	r3
   93bcc:	4603      	mov	r3, r0
   93bce:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   93bd0:	4b17      	ldr	r3, [pc, #92]	; (93c30 <Cl_MilliTickcallBack+0x1dc>)
   93bd2:	681b      	ldr	r3, [r3, #0]
   93bd4:	2b02      	cmp	r3, #2
   93bd6:	d102      	bne.n	93bde <Cl_MilliTickcallBack+0x18a>
		{
			Cl_ms1000ticks =0;
   93bd8:	4b15      	ldr	r3, [pc, #84]	; (93c30 <Cl_MilliTickcallBack+0x1dc>)
   93bda:	2200      	movs	r2, #0
   93bdc:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   93bde:	2300      	movs	r3, #0
}
   93be0:	4618      	mov	r0, r3
   93be2:	3708      	adds	r7, #8
   93be4:	46bd      	mov	sp, r7
   93be6:	bd80      	pop	{r7, pc}
   93be8:	20071a30 	.word	0x20071a30
   93bec:	20071954 	.word	0x20071954
   93bf0:	20071950 	.word	0x20071950
   93bf4:	20071968 	.word	0x20071968
   93bf8:	66666667 	.word	0x66666667
   93bfc:	00093c6d 	.word	0x00093c6d
   93c00:	00093931 	.word	0x00093931
   93c04:	00093c3d 	.word	0x00093c3d
   93c08:	00093c4d 	.word	0x00093c4d
   93c0c:	00093c5d 	.word	0x00093c5d
   93c10:	51eb851f 	.word	0x51eb851f
   93c14:	00093ca9 	.word	0x00093ca9
   93c18:	2007196c 	.word	0x2007196c
   93c1c:	00093ce9 	.word	0x00093ce9
   93c20:	20071970 	.word	0x20071970
   93c24:	00093d25 	.word	0x00093d25
   93c28:	20071974 	.word	0x20071974
   93c2c:	00093d9d 	.word	0x00093d9d
   93c30:	20071978 	.word	0x20071978
   93c34:	0009393d 	.word	0x0009393d
   93c38:	00093d61 	.word	0x00093d61

00093c3c <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodeType  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   93c3c:	b480      	push	{r7}
   93c3e:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   93c40:	2300      	movs	r3, #0
	 
 }
   93c42:	4618      	mov	r0, r3
   93c44:	46bd      	mov	sp, r7
   93c46:	bc80      	pop	{r7}
   93c48:	4770      	bx	lr
   93c4a:	bf00      	nop

00093c4c <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   93c4c:	b480      	push	{r7}
   93c4e:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   93c50:	2300      	movs	r3, #0
	 
 }
   93c52:	4618      	mov	r0, r3
   93c54:	46bd      	mov	sp, r7
   93c56:	bc80      	pop	{r7}
   93c58:	4770      	bx	lr
   93c5a:	bf00      	nop

00093c5c <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   93c5c:	b480      	push	{r7}
   93c5e:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   93c60:	2300      	movs	r3, #0
	 
 }
   93c62:	4618      	mov	r0, r3
   93c64:	46bd      	mov	sp, r7
   93c66:	bc80      	pop	{r7}
   93c68:	4770      	bx	lr
   93c6a:	bf00      	nop

00093c6c <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   93c6c:	b480      	push	{r7}
   93c6e:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93c70:	4b0c      	ldr	r3, [pc, #48]	; (93ca4 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93c72:	781b      	ldrb	r3, [r3, #0]
   93c74:	2b09      	cmp	r3, #9
   93c76:	d80f      	bhi.n	93c98 <Cl_Timer_Create_Tick20Ms_Event+0x2c>
// 				  
// 			  }
// 			  
// 			  testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 			  
		 	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_20M;
   93c78:	4b0a      	ldr	r3, [pc, #40]	; (93ca4 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93c7a:	781b      	ldrb	r3, [r3, #0]
   93c7c:	461a      	mov	r2, r3
   93c7e:	4b09      	ldr	r3, [pc, #36]	; (93ca4 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93c80:	4413      	add	r3, r2
   93c82:	2237      	movs	r2, #55	; 0x37
   93c84:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93c86:	4b07      	ldr	r3, [pc, #28]	; (93ca4 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93c88:	2201      	movs	r2, #1
   93c8a:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93c8c:	4b05      	ldr	r3, [pc, #20]	; (93ca4 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93c8e:	781b      	ldrb	r3, [r3, #0]
   93c90:	3301      	adds	r3, #1
   93c92:	b2da      	uxtb	r2, r3
   93c94:	4b03      	ldr	r3, [pc, #12]	; (93ca4 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   93c96:	701a      	strb	r2, [r3, #0]
	 	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);       //12-04
		 }
	 	 return CL_OK;
   93c98:	2300      	movs	r3, #0
	 	 
 }
   93c9a:	4618      	mov	r0, r3
   93c9c:	46bd      	mov	sp, r7
   93c9e:	bc80      	pop	{r7}
   93ca0:	4770      	bx	lr
   93ca2:	bf00      	nop
   93ca4:	200720e0 	.word	0x200720e0

00093ca8 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   93ca8:	b580      	push	{r7, lr}
   93caa:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   93cac:	4b0c      	ldr	r3, [pc, #48]	; (93ce0 <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   93cae:	4798      	blx	r3
	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93cb0:	4b0c      	ldr	r3, [pc, #48]	; (93ce4 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   93cb2:	781b      	ldrb	r3, [r3, #0]
   93cb4:	2b09      	cmp	r3, #9
   93cb6:	d80f      	bhi.n	93cd8 <Cl_Timer_Create_Tick50Ms_Event+0x30>
	 
	 
	 {
		 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_50M;
   93cb8:	4b0a      	ldr	r3, [pc, #40]	; (93ce4 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   93cba:	781b      	ldrb	r3, [r3, #0]
   93cbc:	461a      	mov	r2, r3
   93cbe:	4b09      	ldr	r3, [pc, #36]	; (93ce4 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   93cc0:	4413      	add	r3, r2
   93cc2:	2238      	movs	r2, #56	; 0x38
   93cc4:	709a      	strb	r2, [r3, #2]
		 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93cc6:	4b07      	ldr	r3, [pc, #28]	; (93ce4 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   93cc8:	2201      	movs	r2, #1
   93cca:	705a      	strb	r2, [r3, #1]
		 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93ccc:	4b05      	ldr	r3, [pc, #20]	; (93ce4 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   93cce:	781b      	ldrb	r3, [r3, #0]
   93cd0:	3301      	adds	r3, #1
   93cd2:	b2da      	uxtb	r2, r3
   93cd4:	4b03      	ldr	r3, [pc, #12]	; (93ce4 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   93cd6:	701a      	strb	r2, [r3, #0]
	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
	 return CL_OK;
   93cd8:	2300      	movs	r3, #0
	 
	 
 }
   93cda:	4618      	mov	r0, r3
   93cdc:	bd80      	pop	{r7, pc}
   93cde:	bf00      	nop
   93ce0:	00082d45 	.word	0x00082d45
   93ce4:	200720e0 	.word	0x200720e0

00093ce8 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodeType  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   93ce8:	b480      	push	{r7}
   93cea:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93cec:	4b0c      	ldr	r3, [pc, #48]	; (93d20 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   93cee:	781b      	ldrb	r3, [r3, #0]
   93cf0:	2b09      	cmp	r3, #9
   93cf2:	d80f      	bhi.n	93d14 <Cl_Timer_Create_Tick100Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   93cf4:	4b0a      	ldr	r3, [pc, #40]	; (93d20 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   93cf6:	781b      	ldrb	r3, [r3, #0]
   93cf8:	461a      	mov	r2, r3
   93cfa:	4b09      	ldr	r3, [pc, #36]	; (93d20 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   93cfc:	4413      	add	r3, r2
   93cfe:	2239      	movs	r2, #57	; 0x39
   93d00:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93d02:	4b07      	ldr	r3, [pc, #28]	; (93d20 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   93d04:	2201      	movs	r2, #1
   93d06:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93d08:	4b05      	ldr	r3, [pc, #20]	; (93d20 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   93d0a:	781b      	ldrb	r3, [r3, #0]
   93d0c:	3301      	adds	r3, #1
   93d0e:	b2da      	uxtb	r2, r3
   93d10:	4b03      	ldr	r3, [pc, #12]	; (93d20 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   93d12:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   93d14:	2300      	movs	r3, #0
		 
		 
	 }
   93d16:	4618      	mov	r0, r3
   93d18:	46bd      	mov	sp, r7
   93d1a:	bc80      	pop	{r7}
   93d1c:	4770      	bx	lr
   93d1e:	bf00      	nop
   93d20:	200720e0 	.word	0x200720e0

00093d24 <Cl_Timer_Create_Tick150Ms_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_Tick150Ms_Event(void)
	 {
   93d24:	b480      	push	{r7}
   93d26:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93d28:	4b0c      	ldr	r3, [pc, #48]	; (93d5c <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93d2a:	781b      	ldrb	r3, [r3, #0]
   93d2c:	2b09      	cmp	r3, #9
   93d2e:	d80f      	bhi.n	93d50 <Cl_Timer_Create_Tick150Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_150M ;
   93d30:	4b0a      	ldr	r3, [pc, #40]	; (93d5c <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93d32:	781b      	ldrb	r3, [r3, #0]
   93d34:	461a      	mov	r2, r3
   93d36:	4b09      	ldr	r3, [pc, #36]	; (93d5c <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93d38:	4413      	add	r3, r2
   93d3a:	225d      	movs	r2, #93	; 0x5d
   93d3c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93d3e:	4b07      	ldr	r3, [pc, #28]	; (93d5c <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93d40:	2201      	movs	r2, #1
   93d42:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93d44:	4b05      	ldr	r3, [pc, #20]	; (93d5c <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93d46:	781b      	ldrb	r3, [r3, #0]
   93d48:	3301      	adds	r3, #1
   93d4a:	b2da      	uxtb	r2, r3
   93d4c:	4b03      	ldr	r3, [pc, #12]	; (93d5c <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93d4e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   93d50:	2300      	movs	r3, #0
		 
		 
	 }
   93d52:	4618      	mov	r0, r3
   93d54:	46bd      	mov	sp, r7
   93d56:	bc80      	pop	{r7}
   93d58:	4770      	bx	lr
   93d5a:	bf00      	nop
   93d5c:	200720e0 	.word	0x200720e0

00093d60 <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodeType  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   93d60:	b480      	push	{r7}
   93d62:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93d64:	4b0c      	ldr	r3, [pc, #48]	; (93d98 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93d66:	781b      	ldrb	r3, [r3, #0]
   93d68:	2b09      	cmp	r3, #9
   93d6a:	d80f      	bhi.n	93d8c <Cl_Timer_Create_Tick500Ms_Event+0x2c>
		 
		 
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   93d6c:	4b0a      	ldr	r3, [pc, #40]	; (93d98 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93d6e:	781b      	ldrb	r3, [r3, #0]
   93d70:	461a      	mov	r2, r3
   93d72:	4b09      	ldr	r3, [pc, #36]	; (93d98 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93d74:	4413      	add	r3, r2
   93d76:	223a      	movs	r2, #58	; 0x3a
   93d78:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93d7a:	4b07      	ldr	r3, [pc, #28]	; (93d98 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93d7c:	2201      	movs	r2, #1
   93d7e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93d80:	4b05      	ldr	r3, [pc, #20]	; (93d98 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93d82:	781b      	ldrb	r3, [r3, #0]
   93d84:	3301      	adds	r3, #1
   93d86:	b2da      	uxtb	r2, r3
   93d88:	4b03      	ldr	r3, [pc, #12]	; (93d98 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93d8a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
		 return CL_OK;
   93d8c:	2300      	movs	r3, #0
		 
		 
	 }
   93d8e:	4618      	mov	r0, r3
   93d90:	46bd      	mov	sp, r7
   93d92:	bc80      	pop	{r7}
   93d94:	4770      	bx	lr
   93d96:	bf00      	nop
   93d98:	200720e0 	.word	0x200720e0

00093d9c <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_TickSec_Event(void)
	 {
   93d9c:	b580      	push	{r7, lr}
   93d9e:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static Cl_Uint8Type Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   93da0:	4b14      	ldr	r3, [pc, #80]	; (93df4 <Cl_Timer_Create_TickSec_Event+0x58>)
   93da2:	781b      	ldrb	r3, [r3, #0]
   93da4:	3301      	adds	r3, #1
   93da6:	b2da      	uxtb	r2, r3
   93da8:	4b12      	ldr	r3, [pc, #72]	; (93df4 <Cl_Timer_Create_TickSec_Event+0x58>)
   93daa:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93dac:	4b12      	ldr	r3, [pc, #72]	; (93df8 <Cl_Timer_Create_TickSec_Event+0x5c>)
   93dae:	781b      	ldrb	r3, [r3, #0]
   93db0:	2b09      	cmp	r3, #9
   93db2:	d80f      	bhi.n	93dd4 <Cl_Timer_Create_TickSec_Event+0x38>
		
		
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   93db4:	4b10      	ldr	r3, [pc, #64]	; (93df8 <Cl_Timer_Create_TickSec_Event+0x5c>)
   93db6:	781b      	ldrb	r3, [r3, #0]
   93db8:	461a      	mov	r2, r3
   93dba:	4b0f      	ldr	r3, [pc, #60]	; (93df8 <Cl_Timer_Create_TickSec_Event+0x5c>)
   93dbc:	4413      	add	r3, r2
   93dbe:	223b      	movs	r2, #59	; 0x3b
   93dc0:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93dc2:	4b0d      	ldr	r3, [pc, #52]	; (93df8 <Cl_Timer_Create_TickSec_Event+0x5c>)
   93dc4:	2201      	movs	r2, #1
   93dc6:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93dc8:	4b0b      	ldr	r3, [pc, #44]	; (93df8 <Cl_Timer_Create_TickSec_Event+0x5c>)
   93dca:	781b      	ldrb	r3, [r3, #0]
   93dcc:	3301      	adds	r3, #1
   93dce:	b2da      	uxtb	r2, r3
   93dd0:	4b09      	ldr	r3, [pc, #36]	; (93df8 <Cl_Timer_Create_TickSec_Event+0x5c>)
   93dd2:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);            //12-04
		 }		 
		if(Cl_Secondscnt >= 60)
   93dd4:	4b07      	ldr	r3, [pc, #28]	; (93df4 <Cl_Timer_Create_TickSec_Event+0x58>)
   93dd6:	781b      	ldrb	r3, [r3, #0]
   93dd8:	2b3b      	cmp	r3, #59	; 0x3b
   93dda:	d908      	bls.n	93dee <Cl_Timer_Create_TickSec_Event+0x52>
		 {
			 Cl_Secondscnt = 0;
   93ddc:	4b05      	ldr	r3, [pc, #20]	; (93df4 <Cl_Timer_Create_TickSec_Event+0x58>)
   93dde:	2200      	movs	r2, #0
   93de0:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   93de2:	4b06      	ldr	r3, [pc, #24]	; (93dfc <Cl_Timer_Create_TickSec_Event+0x60>)
   93de4:	4798      	blx	r3
   93de6:	4603      	mov	r3, r0
   93de8:	461a      	mov	r2, r3
   93dea:	4b05      	ldr	r3, [pc, #20]	; (93e00 <Cl_Timer_Create_TickSec_Event+0x64>)
   93dec:	701a      	strb	r2, [r3, #0]
			// tg_timer_minute();
		 }
			 return CL_OK;
   93dee:	2300      	movs	r3, #0
		 
		
		 }
   93df0:	4618      	mov	r0, r3
   93df2:	bd80      	pop	{r7, pc}
   93df4:	2007197c 	.word	0x2007197c
   93df8:	200720e0 	.word	0x200720e0
   93dfc:	00093e05 	.word	0x00093e05
   93e00:	20072610 	.word	0x20072610

00093e04 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickMin_Event(void)
	 {
   93e04:	b480      	push	{r7}
   93e06:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   93e08:	4b0c      	ldr	r3, [pc, #48]	; (93e3c <Cl_Timer_Create_TickMin_Event+0x38>)
   93e0a:	781b      	ldrb	r3, [r3, #0]
   93e0c:	2b09      	cmp	r3, #9
   93e0e:	d80f      	bhi.n	93e30 <Cl_Timer_Create_TickMin_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   93e10:	4b0a      	ldr	r3, [pc, #40]	; (93e3c <Cl_Timer_Create_TickMin_Event+0x38>)
   93e12:	781b      	ldrb	r3, [r3, #0]
   93e14:	461a      	mov	r2, r3
   93e16:	4b09      	ldr	r3, [pc, #36]	; (93e3c <Cl_Timer_Create_TickMin_Event+0x38>)
   93e18:	4413      	add	r3, r2
   93e1a:	223c      	movs	r2, #60	; 0x3c
   93e1c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93e1e:	4b07      	ldr	r3, [pc, #28]	; (93e3c <Cl_Timer_Create_TickMin_Event+0x38>)
   93e20:	2201      	movs	r2, #1
   93e22:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93e24:	4b05      	ldr	r3, [pc, #20]	; (93e3c <Cl_Timer_Create_TickMin_Event+0x38>)
   93e26:	781b      	ldrb	r3, [r3, #0]
   93e28:	3301      	adds	r3, #1
   93e2a:	b2da      	uxtb	r2, r3
   93e2c:	4b03      	ldr	r3, [pc, #12]	; (93e3c <Cl_Timer_Create_TickMin_Event+0x38>)
   93e2e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);             //12-04
		 }
		 return CL_OK;
   93e30:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   93e32:	4618      	mov	r0, r3
   93e34:	46bd      	mov	sp, r7
   93e36:	bc80      	pop	{r7}
   93e38:	4770      	bx	lr
   93e3a:	bf00      	nop
   93e3c:	200720e0 	.word	0x200720e0

00093e40 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickHour_Event(void)
	 {
   93e40:	b480      	push	{r7}
   93e42:	af00      	add	r7, sp, #0

		 if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   93e44:	4b0c      	ldr	r3, [pc, #48]	; (93e78 <Cl_Timer_Create_TickHour_Event+0x38>)
   93e46:	781b      	ldrb	r3, [r3, #0]
   93e48:	2b0a      	cmp	r3, #10
   93e4a:	d80f      	bhi.n	93e6c <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   93e4c:	4b0a      	ldr	r3, [pc, #40]	; (93e78 <Cl_Timer_Create_TickHour_Event+0x38>)
   93e4e:	781b      	ldrb	r3, [r3, #0]
   93e50:	461a      	mov	r2, r3
   93e52:	4b09      	ldr	r3, [pc, #36]	; (93e78 <Cl_Timer_Create_TickHour_Event+0x38>)
   93e54:	4413      	add	r3, r2
   93e56:	223d      	movs	r2, #61	; 0x3d
   93e58:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93e5a:	4b07      	ldr	r3, [pc, #28]	; (93e78 <Cl_Timer_Create_TickHour_Event+0x38>)
   93e5c:	2201      	movs	r2, #1
   93e5e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93e60:	4b05      	ldr	r3, [pc, #20]	; (93e78 <Cl_Timer_Create_TickHour_Event+0x38>)
   93e62:	781b      	ldrb	r3, [r3, #0]
   93e64:	3301      	adds	r3, #1
   93e66:	b2da      	uxtb	r2, r3
   93e68:	4b03      	ldr	r3, [pc, #12]	; (93e78 <Cl_Timer_Create_TickHour_Event+0x38>)
   93e6a:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   93e6c:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   93e6e:	4618      	mov	r0, r3
   93e70:	46bd      	mov	sp, r7
   93e72:	bc80      	pop	{r7}
   93e74:	4770      	bx	lr
   93e76:	bf00      	nop
   93e78:	200720e0 	.word	0x200720e0

00093e7c <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   93e7c:	b480      	push	{r7}
   93e7e:	b085      	sub	sp, #20
   93e80:	af00      	add	r7, sp, #0
   93e82:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   93e84:	4b07      	ldr	r3, [pc, #28]	; (93ea4 <mdelay+0x28>)
   93e86:	681b      	ldr	r3, [r3, #0]
   93e88:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   93e8a:	bf00      	nop
   93e8c:	4b05      	ldr	r3, [pc, #20]	; (93ea4 <mdelay+0x28>)
   93e8e:	681a      	ldr	r2, [r3, #0]
   93e90:	68fb      	ldr	r3, [r7, #12]
   93e92:	1ad2      	subs	r2, r2, r3
   93e94:	687b      	ldr	r3, [r7, #4]
   93e96:	429a      	cmp	r2, r3
   93e98:	d3f8      	bcc.n	93e8c <mdelay+0x10>
}
   93e9a:	bf00      	nop
   93e9c:	3714      	adds	r7, #20
   93e9e:	46bd      	mov	sp, r7
   93ea0:	bc80      	pop	{r7}
   93ea2:	4770      	bx	lr
   93ea4:	20071980 	.word	0x20071980

00093ea8 <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   93ea8:	b580      	push	{r7, lr}
   93eaa:	b082      	sub	sp, #8
   93eac:	af00      	add	r7, sp, #0
   93eae:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   93eb0:	6878      	ldr	r0, [r7, #4]
   93eb2:	4b03      	ldr	r3, [pc, #12]	; (93ec0 <cl_wait+0x18>)
   93eb4:	4798      	blx	r3
	return CL_OK;
   93eb6:	2300      	movs	r3, #0
}
   93eb8:	4618      	mov	r0, r3
   93eba:	3708      	adds	r7, #8
   93ebc:	46bd      	mov	sp, r7
   93ebe:	bd80      	pop	{r7, pc}
   93ec0:	00093e7d 	.word	0x00093e7d

00093ec4 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   93ec4:	b580      	push	{r7, lr}
   93ec6:	b082      	sub	sp, #8
   93ec8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   93eca:	4b07      	ldr	r3, [pc, #28]	; (93ee8 <cl_systemtickcallback+0x24>)
   93ecc:	4798      	blx	r3
   93ece:	4603      	mov	r3, r0
   93ed0:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   93ed2:	4b06      	ldr	r3, [pc, #24]	; (93eec <cl_systemtickcallback+0x28>)
   93ed4:	681b      	ldr	r3, [r3, #0]
   93ed6:	3301      	adds	r3, #1
   93ed8:	4a04      	ldr	r2, [pc, #16]	; (93eec <cl_systemtickcallback+0x28>)
   93eda:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   93edc:	2300      	movs	r3, #0
}
   93ede:	4618      	mov	r0, r3
   93ee0:	3708      	adds	r7, #8
   93ee2:	46bd      	mov	sp, r7
   93ee4:	bd80      	pop	{r7, pc}
   93ee6:	bf00      	nop
   93ee8:	00093a55 	.word	0x00093a55
   93eec:	20071980 	.word	0x20071980

00093ef0 <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   93ef0:	b480      	push	{r7}
   93ef2:	b085      	sub	sp, #20
   93ef4:	af00      	add	r7, sp, #0
   93ef6:	6078      	str	r0, [r7, #4]
   93ef8:	460b      	mov	r3, r1
   93efa:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   93efc:	2300      	movs	r3, #0
   93efe:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   93f00:	687b      	ldr	r3, [r7, #4]
   93f02:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   93f04:	2300      	movs	r3, #0
   93f06:	73fb      	strb	r3, [r7, #15]
   93f08:	e007      	b.n	93f1a <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   93f0a:	7bfb      	ldrb	r3, [r7, #15]
   93f0c:	687a      	ldr	r2, [r7, #4]
   93f0e:	4413      	add	r3, r2
   93f10:	2200      	movs	r2, #0
   93f12:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   93f14:	7bfb      	ldrb	r3, [r7, #15]
   93f16:	3301      	adds	r3, #1
   93f18:	73fb      	strb	r3, [r7, #15]
   93f1a:	7bfa      	ldrb	r2, [r7, #15]
   93f1c:	78fb      	ldrb	r3, [r7, #3]
   93f1e:	429a      	cmp	r2, r3
   93f20:	d3f3      	bcc.n	93f0a <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   93f22:	2300      	movs	r3, #0
}
   93f24:	4618      	mov	r0, r3
   93f26:	3714      	adds	r7, #20
   93f28:	46bd      	mov	sp, r7
   93f2a:	bc80      	pop	{r7}
   93f2c:	4770      	bx	lr
   93f2e:	bf00      	nop

00093f30 <cl_utilities_CalConductivity>:
//			return conductivity;
			return conductivity; ///10;
}*/

float cl_utilities_CalConductivity(uint16_t raw_cond,float temperature)
{
   93f30:	b580      	push	{r7, lr}
   93f32:	b084      	sub	sp, #16
   93f34:	af00      	add	r7, sp, #0
   93f36:	4603      	mov	r3, r0
   93f38:	6039      	str	r1, [r7, #0]
   93f3a:	80fb      	strh	r3, [r7, #6]
			float conductivity, conductance;
			conductance = raw_cond;// /1000; 
   93f3c:	88fa      	ldrh	r2, [r7, #6]
   93f3e:	4b06      	ldr	r3, [pc, #24]	; (93f58 <cl_utilities_CalConductivity+0x28>)
   93f40:	4610      	mov	r0, r2
   93f42:	4798      	blx	r3
   93f44:	4603      	mov	r3, r0
   93f46:	60fb      	str	r3, [r7, #12]
//			conductivity = (raw_cond -66.67)/100;                                 // raw conductance contains conductance of fixed 150 ohm resistance
	//		cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
//			conductivity = conductance * 1.272;                             // Conductance * cell constant = conductivity
			conductivity = conductance;
   93f48:	68fb      	ldr	r3, [r7, #12]
   93f4a:	60bb      	str	r3, [r7, #8]
	//		conductivity = (0.0001*conductivity*conductivity + 0.032*conductivity) * 100;                          // Gopal: Need to check for offset if required based on the observations in IBP 02082017
// 			conductivity = (conductivity/(1+(temperature  -25.0)*0.021));                    // conductivity compensated at 25 degrees using win-situ formula

			return conductivity; ///10;
   93f4c:	68bb      	ldr	r3, [r7, #8]
   93f4e:	4618      	mov	r0, r3
   93f50:	3710      	adds	r7, #16
   93f52:	46bd      	mov	sp, r7
   93f54:	bd80      	pop	{r7, pc}
   93f56:	bf00      	nop
   93f58:	000a7ef9 	.word	0x000a7ef9

00093f5c <cl_bp_controller>:
	}
	return CL_OK;
}

Cl_ReturnCodeType cl_bp_controller(cl_bp_events bp_event , Cl_Uint32Type data)
{
   93f5c:	b580      	push	{r7, lr}
   93f5e:	b084      	sub	sp, #16
   93f60:	af00      	add	r7, sp, #0
   93f62:	4603      	mov	r3, r0
   93f64:	6039      	str	r1, [r7, #0]
   93f66:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bp_retcode = CL_OK;
   93f68:	2300      	movs	r3, #0
   93f6a:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   93f6c:	2300      	movs	r3, #0
   93f6e:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type bp_delta_value = 0 ;
   93f70:	2300      	movs	r3, #0
   93f72:	81bb      	strh	r3, [r7, #12]
	
	
	switch(bp_state)
   93f74:	4b7e      	ldr	r3, [pc, #504]	; (94170 <cl_bp_controller+0x214>)
   93f76:	781b      	ldrb	r3, [r3, #0]
   93f78:	2b04      	cmp	r3, #4
   93f7a:	f200 80f2 	bhi.w	94162 <cl_bp_controller+0x206>
   93f7e:	a201      	add	r2, pc, #4	; (adr r2, 93f84 <cl_bp_controller+0x28>)
   93f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93f84:	00093f99 	.word	0x00093f99
   93f88:	00093ff5 	.word	0x00093ff5
   93f8c:	0009409f 	.word	0x0009409f
   93f90:	000940f1 	.word	0x000940f1
   93f94:	00094163 	.word	0x00094163
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   93f98:	79fb      	ldrb	r3, [r7, #7]
   93f9a:	2b01      	cmp	r3, #1
   93f9c:	d002      	beq.n	93fa4 <cl_bp_controller+0x48>
   93f9e:	2b02      	cmp	r3, #2
   93fa0:	d00e      	beq.n	93fc0 <cl_bp_controller+0x64>
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			
			default:break;
   93fa2:	e026      	b.n	93ff2 <cl_bp_controller+0x96>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   93fa4:	683b      	ldr	r3, [r7, #0]
   93fa6:	4a73      	ldr	r2, [pc, #460]	; (94174 <cl_bp_controller+0x218>)
   93fa8:	6013      	str	r3, [r2, #0]
			pwm_period = cl_bp_rate ;
   93faa:	4b72      	ldr	r3, [pc, #456]	; (94174 <cl_bp_controller+0x218>)
   93fac:	681b      	ldr	r3, [r3, #0]
   93fae:	4a72      	ldr	r2, [pc, #456]	; (94178 <cl_bp_controller+0x21c>)
   93fb0:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
   93fb2:	4b71      	ldr	r3, [pc, #452]	; (94178 <cl_bp_controller+0x21c>)
   93fb4:	681b      	ldr	r3, [r3, #0]
   93fb6:	4619      	mov	r1, r3
   93fb8:	2003      	movs	r0, #3
   93fba:	4b70      	ldr	r3, [pc, #448]	; (9417c <cl_bp_controller+0x220>)
   93fbc:	4798      	blx	r3
			break;
   93fbe:	e018      	b.n	93ff2 <cl_bp_controller+0x96>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   93fc0:	2101      	movs	r1, #1
   93fc2:	2001      	movs	r0, #1
   93fc4:	4b6e      	ldr	r3, [pc, #440]	; (94180 <cl_bp_controller+0x224>)
   93fc6:	4798      	blx	r3
   93fc8:	4603      	mov	r3, r0
   93fca:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   93fcc:	2003      	movs	r0, #3
   93fce:	4b6d      	ldr	r3, [pc, #436]	; (94184 <cl_bp_controller+0x228>)
   93fd0:	4798      	blx	r3
   93fd2:	4603      	mov	r3, r0
   93fd4:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   93fd6:	4b6c      	ldr	r3, [pc, #432]	; (94188 <cl_bp_controller+0x22c>)
   93fd8:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   93fda:	463b      	mov	r3, r7
   93fdc:	2200      	movs	r2, #0
   93fde:	4619      	mov	r1, r3
   93fe0:	2035      	movs	r0, #53	; 0x35
   93fe2:	4b6a      	ldr	r3, [pc, #424]	; (9418c <cl_bp_controller+0x230>)
   93fe4:	4798      	blx	r3
   93fe6:	4603      	mov	r3, r0
   93fe8:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   93fea:	4b61      	ldr	r3, [pc, #388]	; (94170 <cl_bp_controller+0x214>)
   93fec:	2201      	movs	r2, #1
   93fee:	701a      	strb	r2, [r3, #0]
			break;
   93ff0:	bf00      	nop
			
			default:break;
			
		}
		break;
   93ff2:	e0b7      	b.n	94164 <cl_bp_controller+0x208>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   93ff4:	79fb      	ldrb	r3, [r7, #7]
   93ff6:	3b01      	subs	r3, #1
   93ff8:	2b06      	cmp	r3, #6
   93ffa:	d84e      	bhi.n	9409a <cl_bp_controller+0x13e>
   93ffc:	a201      	add	r2, pc, #4	; (adr r2, 94004 <cl_bp_controller+0xa8>)
   93ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94002:	bf00      	nop
   94004:	00094053 	.word	0x00094053
   94008:	00094021 	.word	0x00094021
   9400c:	0009409b 	.word	0x0009409b
   94010:	00094065 	.word	0x00094065
   94014:	00094093 	.word	0x00094093
   94018:	0009409b 	.word	0x0009409b
   9401c:	0009409b 	.word	0x0009409b
		{
			case CL_BP_EVENT_START:
			
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   94020:	2003      	movs	r0, #3
   94022:	4b58      	ldr	r3, [pc, #352]	; (94184 <cl_bp_controller+0x228>)
   94024:	4798      	blx	r3
   94026:	4603      	mov	r3, r0
   94028:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9402a:	2101      	movs	r1, #1
   9402c:	2001      	movs	r0, #1
   9402e:	4b54      	ldr	r3, [pc, #336]	; (94180 <cl_bp_controller+0x224>)
   94030:	4798      	blx	r3
   94032:	4603      	mov	r3, r0
   94034:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   94036:	4b54      	ldr	r3, [pc, #336]	; (94188 <cl_bp_controller+0x22c>)
   94038:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   9403a:	463b      	mov	r3, r7
   9403c:	2200      	movs	r2, #0
   9403e:	4619      	mov	r1, r3
   94040:	2035      	movs	r0, #53	; 0x35
   94042:	4b52      	ldr	r3, [pc, #328]	; (9418c <cl_bp_controller+0x230>)
   94044:	4798      	blx	r3
   94046:	4603      	mov	r3, r0
   94048:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   9404a:	4b49      	ldr	r3, [pc, #292]	; (94170 <cl_bp_controller+0x214>)
   9404c:	2201      	movs	r2, #1
   9404e:	701a      	strb	r2, [r3, #0]
			
			break;
   94050:	e024      	b.n	9409c <cl_bp_controller+0x140>
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   94052:	683b      	ldr	r3, [r7, #0]
   94054:	4619      	mov	r1, r3
   94056:	2003      	movs	r0, #3
   94058:	4b48      	ldr	r3, [pc, #288]	; (9417c <cl_bp_controller+0x220>)
   9405a:	4798      	blx	r3
			bp_state =  CL_BP_STATE_STARTED;
   9405c:	4b44      	ldr	r3, [pc, #272]	; (94170 <cl_bp_controller+0x214>)
   9405e:	2201      	movs	r2, #1
   94060:	701a      	strb	r2, [r3, #0]
			break;
   94062:	e01b      	b.n	9409c <cl_bp_controller+0x140>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
		//	cl_wait(200);
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   94064:	2003      	movs	r0, #3
   94066:	4b4a      	ldr	r3, [pc, #296]	; (94190 <cl_bp_controller+0x234>)
   94068:	4798      	blx	r3
   9406a:	4603      	mov	r3, r0
   9406c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   9406e:	4b46      	ldr	r3, [pc, #280]	; (94188 <cl_bp_controller+0x22c>)
   94070:	4798      	blx	r3
		//	cl_wait(20);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   94072:	463b      	mov	r3, r7
   94074:	2200      	movs	r2, #0
   94076:	4619      	mov	r1, r3
   94078:	2036      	movs	r0, #54	; 0x36
   9407a:	4b44      	ldr	r3, [pc, #272]	; (9418c <cl_bp_controller+0x230>)
   9407c:	4798      	blx	r3
   9407e:	4603      	mov	r3, r0
   94080:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   94082:	4b44      	ldr	r3, [pc, #272]	; (94194 <cl_bp_controller+0x238>)
   94084:	4798      	blx	r3
   94086:	4603      	mov	r3, r0
   94088:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   9408a:	4b39      	ldr	r3, [pc, #228]	; (94170 <cl_bp_controller+0x214>)
   9408c:	2202      	movs	r2, #2
   9408e:	701a      	strb	r2, [r3, #0]
			break;
   94090:	e004      	b.n	9409c <cl_bp_controller+0x140>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   94092:	4b37      	ldr	r3, [pc, #220]	; (94170 <cl_bp_controller+0x214>)
   94094:	2200      	movs	r2, #0
   94096:	701a      	strb	r2, [r3, #0]
			break;
   94098:	e000      	b.n	9409c <cl_bp_controller+0x140>
			default:break;
   9409a:	bf00      	nop
			
		}
		break;
   9409c:	e062      	b.n	94164 <cl_bp_controller+0x208>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   9409e:	79fb      	ldrb	r3, [r7, #7]
   940a0:	2b01      	cmp	r3, #1
   940a2:	d002      	beq.n	940aa <cl_bp_controller+0x14e>
   940a4:	2b02      	cmp	r3, #2
   940a6:	d009      	beq.n	940bc <cl_bp_controller+0x160>
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   940a8:	e021      	b.n	940ee <cl_bp_controller+0x192>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   940aa:	683b      	ldr	r3, [r7, #0]
   940ac:	4a31      	ldr	r2, [pc, #196]	; (94174 <cl_bp_controller+0x218>)
   940ae:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   940b0:	683b      	ldr	r3, [r7, #0]
   940b2:	4619      	mov	r1, r3
   940b4:	2003      	movs	r0, #3
   940b6:	4b31      	ldr	r3, [pc, #196]	; (9417c <cl_bp_controller+0x220>)
   940b8:	4798      	blx	r3
			break;
   940ba:	e018      	b.n	940ee <cl_bp_controller+0x192>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   940bc:	2003      	movs	r0, #3
   940be:	4b31      	ldr	r3, [pc, #196]	; (94184 <cl_bp_controller+0x228>)
   940c0:	4798      	blx	r3
   940c2:	4603      	mov	r3, r0
   940c4:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   940c6:	2101      	movs	r1, #1
   940c8:	2001      	movs	r0, #1
   940ca:	4b2d      	ldr	r3, [pc, #180]	; (94180 <cl_bp_controller+0x224>)
   940cc:	4798      	blx	r3
   940ce:	4603      	mov	r3, r0
   940d0:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   940d2:	4b2d      	ldr	r3, [pc, #180]	; (94188 <cl_bp_controller+0x22c>)
   940d4:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   940d6:	463b      	mov	r3, r7
   940d8:	2200      	movs	r2, #0
   940da:	4619      	mov	r1, r3
   940dc:	2035      	movs	r0, #53	; 0x35
   940de:	4b2b      	ldr	r3, [pc, #172]	; (9418c <cl_bp_controller+0x230>)
   940e0:	4798      	blx	r3
   940e2:	4603      	mov	r3, r0
   940e4:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   940e6:	4b22      	ldr	r3, [pc, #136]	; (94170 <cl_bp_controller+0x214>)
   940e8:	2201      	movs	r2, #1
   940ea:	701a      	strb	r2, [r3, #0]
			break;
   940ec:	bf00      	nop
			default:break;
			
		}
		break;
   940ee:	e039      	b.n	94164 <cl_bp_controller+0x208>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   940f0:	79fb      	ldrb	r3, [r7, #7]
   940f2:	2b02      	cmp	r3, #2
   940f4:	d008      	beq.n	94108 <cl_bp_controller+0x1ac>
   940f6:	2b04      	cmp	r3, #4
   940f8:	d01f      	beq.n	9413a <cl_bp_controller+0x1de>
   940fa:	2b01      	cmp	r3, #1
   940fc:	d000      	beq.n	94100 <cl_bp_controller+0x1a4>
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   940fe:	e02f      	b.n	94160 <cl_bp_controller+0x204>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   94100:	683b      	ldr	r3, [r7, #0]
   94102:	4a1c      	ldr	r2, [pc, #112]	; (94174 <cl_bp_controller+0x218>)
   94104:	6013      	str	r3, [r2, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   94106:	e02b      	b.n	94160 <cl_bp_controller+0x204>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   94108:	2003      	movs	r0, #3
   9410a:	4b1e      	ldr	r3, [pc, #120]	; (94184 <cl_bp_controller+0x228>)
   9410c:	4798      	blx	r3
   9410e:	4603      	mov	r3, r0
   94110:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   94112:	2101      	movs	r1, #1
   94114:	2001      	movs	r0, #1
   94116:	4b1a      	ldr	r3, [pc, #104]	; (94180 <cl_bp_controller+0x224>)
   94118:	4798      	blx	r3
   9411a:	4603      	mov	r3, r0
   9411c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   9411e:	4b1a      	ldr	r3, [pc, #104]	; (94188 <cl_bp_controller+0x22c>)
   94120:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   94122:	463b      	mov	r3, r7
   94124:	2200      	movs	r2, #0
   94126:	4619      	mov	r1, r3
   94128:	2035      	movs	r0, #53	; 0x35
   9412a:	4b18      	ldr	r3, [pc, #96]	; (9418c <cl_bp_controller+0x230>)
   9412c:	4798      	blx	r3
   9412e:	4603      	mov	r3, r0
   94130:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   94132:	4b0f      	ldr	r3, [pc, #60]	; (94170 <cl_bp_controller+0x214>)
   94134:	2201      	movs	r2, #1
   94136:	701a      	strb	r2, [r3, #0]
			break;
   94138:	e012      	b.n	94160 <cl_bp_controller+0x204>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   9413a:	2003      	movs	r0, #3
   9413c:	4b14      	ldr	r3, [pc, #80]	; (94190 <cl_bp_controller+0x234>)
   9413e:	4798      	blx	r3
   94140:	4603      	mov	r3, r0
   94142:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   94144:	4b10      	ldr	r3, [pc, #64]	; (94188 <cl_bp_controller+0x22c>)
   94146:	4798      	blx	r3
			bp_state = CL_BP_STATE_STOPPED;
   94148:	4b09      	ldr	r3, [pc, #36]	; (94170 <cl_bp_controller+0x214>)
   9414a:	2202      	movs	r2, #2
   9414c:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   9414e:	463b      	mov	r3, r7
   94150:	2200      	movs	r2, #0
   94152:	4619      	mov	r1, r3
   94154:	2036      	movs	r0, #54	; 0x36
   94156:	4b0d      	ldr	r3, [pc, #52]	; (9418c <cl_bp_controller+0x230>)
   94158:	4798      	blx	r3
   9415a:	4603      	mov	r3, r0
   9415c:	73fb      	strb	r3, [r7, #15]
			break;
   9415e:	bf00      	nop
			default:break;
			
		}
		break;
   94160:	e000      	b.n	94164 <cl_bp_controller+0x208>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   94162:	bf00      	nop
		
		
	}
	return CL_OK;
   94164:	2300      	movs	r3, #0
   94166:	4618      	mov	r0, r3
   94168:	3710      	adds	r7, #16
   9416a:	46bd      	mov	sp, r7
   9416c:	bd80      	pop	{r7, pc}
   9416e:	bf00      	nop
   94170:	20071984 	.word	0x20071984
   94174:	20071988 	.word	0x20071988
   94178:	200709bc 	.word	0x200709bc
   9417c:	0009ae59 	.word	0x0009ae59
   94180:	000829e5 	.word	0x000829e5
   94184:	0009ad41 	.word	0x0009ad41
   94188:	000941c9 	.word	0x000941c9
   9418c:	0009cbd5 	.word	0x0009cbd5
   94190:	0009ad7d 	.word	0x0009ad7d
   94194:	000941e1 	.word	0x000941e1

00094198 <cl_bp_selftest_start>:
static Cl_Uint16Type bp_rotation_counter = 0,bp_selftest_rotation_counter = 0;
static Cl_BoolType count_state = false;


Cl_ReturnCodeType cl_bp_selftest_start(void)
{
   94198:	b480      	push	{r7}
   9419a:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_SELFTEST_START;
   9419c:	4b03      	ldr	r3, [pc, #12]	; (941ac <cl_bp_selftest_start+0x14>)
   9419e:	2202      	movs	r2, #2
   941a0:	701a      	strb	r2, [r3, #0]
	return 0;
   941a2:	2300      	movs	r3, #0
}
   941a4:	4618      	mov	r0, r3
   941a6:	46bd      	mov	sp, r7
   941a8:	bc80      	pop	{r7}
   941aa:	4770      	bx	lr
   941ac:	2007198e 	.word	0x2007198e

000941b0 <cl_bp_selftest_stop>:
Cl_ReturnCodeType cl_bp_selftest_stop(void)
{
   941b0:	b480      	push	{r7}
   941b2:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_IDLE;
   941b4:	4b03      	ldr	r3, [pc, #12]	; (941c4 <cl_bp_selftest_stop+0x14>)
   941b6:	2200      	movs	r2, #0
   941b8:	701a      	strb	r2, [r3, #0]
	return 0;
   941ba:	2300      	movs	r3, #0
}
   941bc:	4618      	mov	r0, r3
   941be:	46bd      	mov	sp, r7
   941c0:	bc80      	pop	{r7}
   941c2:	4770      	bx	lr
   941c4:	2007198e 	.word	0x2007198e

000941c8 <cl_bp_pumpFeedback_start>:



Cl_ReturnCodeType cl_bp_pumpFeedback_start(void)
{
   941c8:	b480      	push	{r7}
   941ca:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
   941cc:	4b03      	ldr	r3, [pc, #12]	; (941dc <cl_bp_pumpFeedback_start+0x14>)
   941ce:	2201      	movs	r2, #1
   941d0:	701a      	strb	r2, [r3, #0]
	return 0;
   941d2:	2300      	movs	r3, #0
}
   941d4:	4618      	mov	r0, r3
   941d6:	46bd      	mov	sp, r7
   941d8:	bc80      	pop	{r7}
   941da:	4770      	bx	lr
   941dc:	2007198e 	.word	0x2007198e

000941e0 <cl_bp_pumpFeedback_stop>:
Cl_ReturnCodeType cl_bp_pumpFeedback_stop(void)
{
   941e0:	b480      	push	{r7}
   941e2:	af00      	add	r7, sp, #0
	
	return 0;
   941e4:	2300      	movs	r3, #0
}
   941e6:	4618      	mov	r0, r3
   941e8:	46bd      	mov	sp, r7
   941ea:	bc80      	pop	{r7}
   941ec:	4770      	bx	lr
   941ee:	bf00      	nop

000941f0 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   941f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   941f2:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);

	if(cl_bp_pump_state != CL_BP_P_STATE_IDLE)
   941f4:	4b68      	ldr	r3, [pc, #416]	; (94398 <cl_bp_pumpFeedback_timer+0x1a8>)
   941f6:	781b      	ldrb	r3, [r3, #0]
   941f8:	2b00      	cmp	r3, #0
   941fa:	f000 80c0 	beq.w	9437e <cl_bp_pumpFeedback_timer+0x18e>
	{
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   941fe:	4967      	ldr	r1, [pc, #412]	; (9439c <cl_bp_pumpFeedback_timer+0x1ac>)
   94200:	201c      	movs	r0, #28
   94202:	4b67      	ldr	r3, [pc, #412]	; (943a0 <cl_bp_pumpFeedback_timer+0x1b0>)
   94204:	4798      	blx	r3

	twentymscounter++;
   94206:	4b67      	ldr	r3, [pc, #412]	; (943a4 <cl_bp_pumpFeedback_timer+0x1b4>)
   94208:	881b      	ldrh	r3, [r3, #0]
   9420a:	3301      	adds	r3, #1
   9420c:	b29a      	uxth	r2, r3
   9420e:	4b65      	ldr	r3, [pc, #404]	; (943a4 <cl_bp_pumpFeedback_timer+0x1b4>)
   94210:	801a      	strh	r2, [r3, #0]
			if(twentymscounter > 1000)
   94212:	4b64      	ldr	r3, [pc, #400]	; (943a4 <cl_bp_pumpFeedback_timer+0x1b4>)
   94214:	881b      	ldrh	r3, [r3, #0]
   94216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9421a:	d903      	bls.n	94224 <cl_bp_pumpFeedback_timer+0x34>
			{
				// raise BP alarm
				Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   9421c:	2101      	movs	r1, #1
   9421e:	2037      	movs	r0, #55	; 0x37
   94220:	4b61      	ldr	r3, [pc, #388]	; (943a8 <cl_bp_pumpFeedback_timer+0x1b8>)
   94222:	4798      	blx	r3
// 			{
// 				cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
// 			}
	
		
			if(count_state == false)
   94224:	4b61      	ldr	r3, [pc, #388]	; (943ac <cl_bp_pumpFeedback_timer+0x1bc>)
   94226:	781b      	ldrb	r3, [r3, #0]
   94228:	f083 0301 	eor.w	r3, r3, #1
   9422c:	b2db      	uxtb	r3, r3
   9422e:	2b00      	cmp	r3, #0
   94230:	d012      	beq.n	94258 <cl_bp_pumpFeedback_timer+0x68>
			{
				if(bp_rotataion_marker == 0 )
   94232:	4b5a      	ldr	r3, [pc, #360]	; (9439c <cl_bp_pumpFeedback_timer+0x1ac>)
   94234:	881b      	ldrh	r3, [r3, #0]
   94236:	2b00      	cmp	r3, #0
   94238:	f040 809d 	bne.w	94376 <cl_bp_pumpFeedback_timer+0x186>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   9423c:	4b5c      	ldr	r3, [pc, #368]	; (943b0 <cl_bp_pumpFeedback_timer+0x1c0>)
   9423e:	881a      	ldrh	r2, [r3, #0]
   94240:	4b56      	ldr	r3, [pc, #344]	; (9439c <cl_bp_pumpFeedback_timer+0x1ac>)
   94242:	881b      	ldrh	r3, [r3, #0]
   94244:	429a      	cmp	r2, r3
   94246:	f000 8096 	beq.w	94376 <cl_bp_pumpFeedback_timer+0x186>
					{
						count_state = true;
   9424a:	4b58      	ldr	r3, [pc, #352]	; (943ac <cl_bp_pumpFeedback_timer+0x1bc>)
   9424c:	2201      	movs	r2, #1
   9424e:	701a      	strb	r2, [r3, #0]
						//bp_rotation_counter++;
						twentymscounter = 0;
   94250:	4b54      	ldr	r3, [pc, #336]	; (943a4 <cl_bp_pumpFeedback_timer+0x1b4>)
   94252:	2200      	movs	r2, #0
   94254:	801a      	strh	r2, [r3, #0]
   94256:	e08e      	b.n	94376 <cl_bp_pumpFeedback_timer+0x186>
					}
				}
			}
			else
			{
				if(bp_rotataion_marker == 0 )
   94258:	4b50      	ldr	r3, [pc, #320]	; (9439c <cl_bp_pumpFeedback_timer+0x1ac>)
   9425a:	881b      	ldrh	r3, [r3, #0]
   9425c:	2b00      	cmp	r3, #0
   9425e:	f040 808a 	bne.w	94376 <cl_bp_pumpFeedback_timer+0x186>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   94262:	4b53      	ldr	r3, [pc, #332]	; (943b0 <cl_bp_pumpFeedback_timer+0x1c0>)
   94264:	881a      	ldrh	r2, [r3, #0]
   94266:	4b4d      	ldr	r3, [pc, #308]	; (9439c <cl_bp_pumpFeedback_timer+0x1ac>)
   94268:	881b      	ldrh	r3, [r3, #0]
   9426a:	429a      	cmp	r2, r3
   9426c:	f000 8083 	beq.w	94376 <cl_bp_pumpFeedback_timer+0x186>
					{
						count_state = true;
   94270:	4b4e      	ldr	r3, [pc, #312]	; (943ac <cl_bp_pumpFeedback_timer+0x1bc>)
   94272:	2201      	movs	r2, #1
   94274:	701a      	strb	r2, [r3, #0]
						bp_rotation_counter++;
   94276:	4b4f      	ldr	r3, [pc, #316]	; (943b4 <cl_bp_pumpFeedback_timer+0x1c4>)
   94278:	881b      	ldrh	r3, [r3, #0]
   9427a:	3301      	adds	r3, #1
   9427c:	b29a      	uxth	r2, r3
   9427e:	4b4d      	ldr	r3, [pc, #308]	; (943b4 <cl_bp_pumpFeedback_timer+0x1c4>)
   94280:	801a      	strh	r2, [r3, #0]
						bp_selftest_rotation_counter++;
   94282:	4b4d      	ldr	r3, [pc, #308]	; (943b8 <cl_bp_pumpFeedback_timer+0x1c8>)
   94284:	881b      	ldrh	r3, [r3, #0]
   94286:	3301      	adds	r3, #1
   94288:	b29a      	uxth	r2, r3
   9428a:	4b4b      	ldr	r3, [pc, #300]	; (943b8 <cl_bp_pumpFeedback_timer+0x1c8>)
   9428c:	801a      	strh	r2, [r3, #0]
						
						
						
								
								if (bp_selftest_rotation_counter >= 10)
   9428e:	4b4a      	ldr	r3, [pc, #296]	; (943b8 <cl_bp_pumpFeedback_timer+0x1c8>)
   94290:	881b      	ldrh	r3, [r3, #0]
   94292:	2b09      	cmp	r3, #9
   94294:	d90f      	bls.n	942b6 <cl_bp_pumpFeedback_timer+0xc6>
								{
									bp_period = twentymscounter*20;
   94296:	4b43      	ldr	r3, [pc, #268]	; (943a4 <cl_bp_pumpFeedback_timer+0x1b4>)
   94298:	881b      	ldrh	r3, [r3, #0]
   9429a:	461a      	mov	r2, r3
   9429c:	0092      	lsls	r2, r2, #2
   9429e:	4413      	add	r3, r2
   942a0:	009b      	lsls	r3, r3, #2
   942a2:	b29a      	uxth	r2, r3
   942a4:	4b45      	ldr	r3, [pc, #276]	; (943bc <cl_bp_pumpFeedback_timer+0x1cc>)
   942a6:	801a      	strh	r2, [r3, #0]
									bp_periodvalue = bp_period;
   942a8:	4b44      	ldr	r3, [pc, #272]	; (943bc <cl_bp_pumpFeedback_timer+0x1cc>)
   942aa:	881a      	ldrh	r2, [r3, #0]
   942ac:	4b44      	ldr	r3, [pc, #272]	; (943c0 <cl_bp_pumpFeedback_timer+0x1d0>)
   942ae:	801a      	strh	r2, [r3, #0]
									bp_selftest_rotation_counter = 0;
   942b0:	4b41      	ldr	r3, [pc, #260]	; (943b8 <cl_bp_pumpFeedback_timer+0x1c8>)
   942b2:	2200      	movs	r2, #0
   942b4:	801a      	strh	r2, [r3, #0]
								}
						
						
						
				
						if((cl_bp_pump_state != CL_BP_P_STATE_STARTED) && (cl_bp_pump_state !=CL_BP_P_SELFTEST_START))
   942b6:	4b38      	ldr	r3, [pc, #224]	; (94398 <cl_bp_pumpFeedback_timer+0x1a8>)
   942b8:	781b      	ldrb	r3, [r3, #0]
   942ba:	2b01      	cmp	r3, #1
   942bc:	d04e      	beq.n	9435c <cl_bp_pumpFeedback_timer+0x16c>
   942be:	4b36      	ldr	r3, [pc, #216]	; (94398 <cl_bp_pumpFeedback_timer+0x1a8>)
   942c0:	781b      	ldrb	r3, [r3, #0]
   942c2:	2b02      	cmp	r3, #2
   942c4:	d04a      	beq.n	9435c <cl_bp_pumpFeedback_timer+0x16c>
						{
							if((bp_period > (1.01 *bp_expected_period)) || bp_period > 3000 )
   942c6:	4b3d      	ldr	r3, [pc, #244]	; (943bc <cl_bp_pumpFeedback_timer+0x1cc>)
   942c8:	881b      	ldrh	r3, [r3, #0]
   942ca:	461a      	mov	r2, r3
   942cc:	4b3d      	ldr	r3, [pc, #244]	; (943c4 <cl_bp_pumpFeedback_timer+0x1d4>)
   942ce:	4610      	mov	r0, r2
   942d0:	4798      	blx	r3
   942d2:	4605      	mov	r5, r0
   942d4:	460e      	mov	r6, r1
   942d6:	4b3c      	ldr	r3, [pc, #240]	; (943c8 <cl_bp_pumpFeedback_timer+0x1d8>)
   942d8:	881b      	ldrh	r3, [r3, #0]
   942da:	461a      	mov	r2, r3
   942dc:	4b39      	ldr	r3, [pc, #228]	; (943c4 <cl_bp_pumpFeedback_timer+0x1d4>)
   942de:	4610      	mov	r0, r2
   942e0:	4798      	blx	r3
   942e2:	4c3a      	ldr	r4, [pc, #232]	; (943cc <cl_bp_pumpFeedback_timer+0x1dc>)
   942e4:	a328      	add	r3, pc, #160	; (adr r3, 94388 <cl_bp_pumpFeedback_timer+0x198>)
   942e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   942ea:	47a0      	blx	r4
   942ec:	4603      	mov	r3, r0
   942ee:	460c      	mov	r4, r1
   942f0:	461a      	mov	r2, r3
   942f2:	4623      	mov	r3, r4
   942f4:	4c36      	ldr	r4, [pc, #216]	; (943d0 <cl_bp_pumpFeedback_timer+0x1e0>)
   942f6:	4628      	mov	r0, r5
   942f8:	4631      	mov	r1, r6
   942fa:	47a0      	blx	r4
   942fc:	4603      	mov	r3, r0
   942fe:	2b00      	cmp	r3, #0
   94300:	d105      	bne.n	9430e <cl_bp_pumpFeedback_timer+0x11e>
   94302:	4b2e      	ldr	r3, [pc, #184]	; (943bc <cl_bp_pumpFeedback_timer+0x1cc>)
   94304:	881b      	ldrh	r3, [r3, #0]
   94306:	f640 32b8 	movw	r2, #3000	; 0xbb8
   9430a:	4293      	cmp	r3, r2
   9430c:	d904      	bls.n	94318 <cl_bp_pumpFeedback_timer+0x128>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
							Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   9430e:	2101      	movs	r1, #1
   94310:	2037      	movs	r0, #55	; 0x37
   94312:	4b25      	ldr	r3, [pc, #148]	; (943a8 <cl_bp_pumpFeedback_timer+0x1b8>)
   94314:	4798      	blx	r3
   94316:	e021      	b.n	9435c <cl_bp_pumpFeedback_timer+0x16c>
							}
							else if(bp_period < (0.99 *bp_expected_period))
   94318:	4b28      	ldr	r3, [pc, #160]	; (943bc <cl_bp_pumpFeedback_timer+0x1cc>)
   9431a:	881b      	ldrh	r3, [r3, #0]
   9431c:	461a      	mov	r2, r3
   9431e:	4b29      	ldr	r3, [pc, #164]	; (943c4 <cl_bp_pumpFeedback_timer+0x1d4>)
   94320:	4610      	mov	r0, r2
   94322:	4798      	blx	r3
   94324:	4605      	mov	r5, r0
   94326:	460e      	mov	r6, r1
   94328:	4b27      	ldr	r3, [pc, #156]	; (943c8 <cl_bp_pumpFeedback_timer+0x1d8>)
   9432a:	881b      	ldrh	r3, [r3, #0]
   9432c:	461a      	mov	r2, r3
   9432e:	4b25      	ldr	r3, [pc, #148]	; (943c4 <cl_bp_pumpFeedback_timer+0x1d4>)
   94330:	4610      	mov	r0, r2
   94332:	4798      	blx	r3
   94334:	4c25      	ldr	r4, [pc, #148]	; (943cc <cl_bp_pumpFeedback_timer+0x1dc>)
   94336:	a316      	add	r3, pc, #88	; (adr r3, 94390 <cl_bp_pumpFeedback_timer+0x1a0>)
   94338:	e9d3 2300 	ldrd	r2, r3, [r3]
   9433c:	47a0      	blx	r4
   9433e:	4603      	mov	r3, r0
   94340:	460c      	mov	r4, r1
   94342:	461a      	mov	r2, r3
   94344:	4623      	mov	r3, r4
   94346:	4c23      	ldr	r4, [pc, #140]	; (943d4 <cl_bp_pumpFeedback_timer+0x1e4>)
   94348:	4628      	mov	r0, r5
   9434a:	4631      	mov	r1, r6
   9434c:	47a0      	blx	r4
   9434e:	4603      	mov	r3, r0
   94350:	2b00      	cmp	r3, #0
   94352:	d003      	beq.n	9435c <cl_bp_pumpFeedback_timer+0x16c>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_FAST;
							Cl_Alarm_TriggerAlarm(BP_OVERRUN,1);
   94354:	2101      	movs	r1, #1
   94356:	2036      	movs	r0, #54	; 0x36
   94358:	4b13      	ldr	r3, [pc, #76]	; (943a8 <cl_bp_pumpFeedback_timer+0x1b8>)
   9435a:	4798      	blx	r3
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
							}
						}

				
						bp_freq_in_min  = ( 60000) / bp_period;
   9435c:	4b17      	ldr	r3, [pc, #92]	; (943bc <cl_bp_pumpFeedback_timer+0x1cc>)
   9435e:	881b      	ldrh	r3, [r3, #0]
   94360:	461a      	mov	r2, r3
   94362:	f64e 2360 	movw	r3, #60000	; 0xea60
   94366:	fb93 f3f2 	sdiv	r3, r3, r2
   9436a:	b29a      	uxth	r2, r3
   9436c:	4b1a      	ldr	r3, [pc, #104]	; (943d8 <cl_bp_pumpFeedback_timer+0x1e8>)
   9436e:	801a      	strh	r2, [r3, #0]
						twentymscounter = 0;
   94370:	4b0c      	ldr	r3, [pc, #48]	; (943a4 <cl_bp_pumpFeedback_timer+0x1b4>)
   94372:	2200      	movs	r2, #0
   94374:	801a      	strh	r2, [r3, #0]
				
					}
				}
		
			}
			prev_bp_rotataion_marker = bp_rotataion_marker;
   94376:	4b09      	ldr	r3, [pc, #36]	; (9439c <cl_bp_pumpFeedback_timer+0x1ac>)
   94378:	881a      	ldrh	r2, [r3, #0]
   9437a:	4b0d      	ldr	r3, [pc, #52]	; (943b0 <cl_bp_pumpFeedback_timer+0x1c0>)
   9437c:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   9437e:	2300      	movs	r3, #0
}
   94380:	4618      	mov	r0, r3
   94382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   94384:	f3af 8000 	nop.w
   94388:	c28f5c29 	.word	0xc28f5c29
   9438c:	3ff028f5 	.word	0x3ff028f5
   94390:	7ae147ae 	.word	0x7ae147ae
   94394:	3fefae14 	.word	0x3fefae14
   94398:	2007198e 	.word	0x2007198e
   9439c:	200709c0 	.word	0x200709c0
   943a0:	0008fa01 	.word	0x0008fa01
   943a4:	20071990 	.word	0x20071990
   943a8:	00082c31 	.word	0x00082c31
   943ac:	2007199a 	.word	0x2007199a
   943b0:	200709c2 	.word	0x200709c2
   943b4:	20071996 	.word	0x20071996
   943b8:	20071998 	.word	0x20071998
   943bc:	20071992 	.word	0x20071992
   943c0:	200718c8 	.word	0x200718c8
   943c4:	000a765d 	.word	0x000a765d
   943c8:	2007198c 	.word	0x2007198c
   943cc:	000a7729 	.word	0x000a7729
   943d0:	000a7c49 	.word	0x000a7c49
   943d4:	000a7c0d 	.word	0x000a7c0d
   943d8:	20071994 	.word	0x20071994

000943dc <cl_deaeration_controller>:
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodeType cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   943dc:	b580      	push	{r7, lr}
   943de:	b084      	sub	sp, #16
   943e0:	af00      	add	r7, sp, #0
   943e2:	4603      	mov	r3, r0
   943e4:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_ret_value = CL_OK;
   943e6:	2300      	movs	r3, #0
   943e8:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
   943ea:	4b28      	ldr	r3, [pc, #160]	; (9448c <cl_deaeration_controller+0xb0>)
   943ec:	781b      	ldrb	r3, [r3, #0]
   943ee:	2b01      	cmp	r3, #1
   943f0:	d00d      	beq.n	9440e <cl_deaeration_controller+0x32>
   943f2:	2b02      	cmp	r3, #2
   943f4:	d02a      	beq.n	9444c <cl_deaeration_controller+0x70>
   943f6:	2b00      	cmp	r3, #0
   943f8:	d000      	beq.n	943fc <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   943fa:	e042      	b.n	94482 <cl_deaeration_controller+0xa6>
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   943fc:	79fb      	ldrb	r3, [r7, #7]
   943fe:	2b00      	cmp	r3, #0
   94400:	d000      	beq.n	94404 <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   94402:	e003      	b.n	9440c <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   94404:	4b21      	ldr	r3, [pc, #132]	; (9448c <cl_deaeration_controller+0xb0>)
   94406:	2201      	movs	r2, #1
   94408:	701a      	strb	r2, [r3, #0]
					break;
   9440a:	bf00      	nop
					default:break;
				}
		break;
   9440c:	e039      	b.n	94482 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   9440e:	79fb      	ldrb	r3, [r7, #7]
   94410:	2b01      	cmp	r3, #1
   94412:	d002      	beq.n	9441a <cl_deaeration_controller+0x3e>
   94414:	2b02      	cmp	r3, #2
   94416:	d004      	beq.n	94422 <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   94418:	e017      	b.n	9444a <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   9441a:	4b1c      	ldr	r3, [pc, #112]	; (9448c <cl_deaeration_controller+0xb0>)
   9441c:	2200      	movs	r2, #0
   9441e:	701a      	strb	r2, [r3, #0]
				break;
   94420:	e013      	b.n	9444a <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   94422:	f107 030c 	add.w	r3, r7, #12
   94426:	4619      	mov	r1, r3
   94428:	200a      	movs	r0, #10
   9442a:	4b19      	ldr	r3, [pc, #100]	; (94490 <cl_deaeration_controller+0xb4>)
   9442c:	4798      	blx	r3
				if (dac2_status < 10)
   9442e:	89bb      	ldrh	r3, [r7, #12]
   94430:	2b09      	cmp	r3, #9
   94432:	d806      	bhi.n	94442 <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   94434:	2013      	movs	r0, #19
   94436:	4b17      	ldr	r3, [pc, #92]	; (94494 <cl_deaeration_controller+0xb8>)
   94438:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   9443a:	4b14      	ldr	r3, [pc, #80]	; (9448c <cl_deaeration_controller+0xb0>)
   9443c:	2202      	movs	r2, #2
   9443e:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   94440:	e002      	b.n	94448 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   94442:	2013      	movs	r0, #19
   94444:	4b14      	ldr	r3, [pc, #80]	; (94498 <cl_deaeration_controller+0xbc>)
   94446:	4798      	blx	r3
				}
				break;
   94448:	bf00      	nop
				default:
				break;
			}
		break;
   9444a:	e01a      	b.n	94482 <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   9444c:	79fb      	ldrb	r3, [r7, #7]
   9444e:	2b01      	cmp	r3, #1
   94450:	d002      	beq.n	94458 <cl_deaeration_controller+0x7c>
   94452:	2b03      	cmp	r3, #3
   94454:	d005      	beq.n	94462 <cl_deaeration_controller+0x86>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   94456:	e013      	b.n	94480 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   94458:	4b0c      	ldr	r3, [pc, #48]	; (9448c <cl_deaeration_controller+0xb0>)
   9445a:	2200      	movs	r2, #0
   9445c:	701a      	strb	r2, [r3, #0]
						break;
   9445e:	bf00      	nop
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   94460:	e00e      	b.n	94480 <cl_deaeration_controller+0xa4>
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
						break;
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   94462:	f107 030c 	add.w	r3, r7, #12
   94466:	4619      	mov	r1, r3
   94468:	200a      	movs	r0, #10
   9446a:	4b09      	ldr	r3, [pc, #36]	; (94490 <cl_deaeration_controller+0xb4>)
   9446c:	4798      	blx	r3
						if (dac2_status > 5)
   9446e:	89bb      	ldrh	r3, [r7, #12]
   94470:	2b05      	cmp	r3, #5
   94472:	d905      	bls.n	94480 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   94474:	2013      	movs	r0, #19
   94476:	4b08      	ldr	r3, [pc, #32]	; (94498 <cl_deaeration_controller+0xbc>)
   94478:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   9447a:	4b04      	ldr	r3, [pc, #16]	; (9448c <cl_deaeration_controller+0xb0>)
   9447c:	2201      	movs	r2, #1
   9447e:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   94480:	bf00      	nop
		default:break;
	}

	return CL_OK;
   94482:	2300      	movs	r3, #0
   94484:	4618      	mov	r0, r3
   94486:	3710      	adds	r7, #16
   94488:	46bd      	mov	sp, r7
   9448a:	bd80      	pop	{r7, pc}
   9448c:	2007199b 	.word	0x2007199b
   94490:	0008fa01 	.word	0x0008fa01
   94494:	0009ade1 	.word	0x0009ade1
   94498:	0009ae01 	.word	0x0009ae01

0009449c <cl_flow_switchcontroller>:
int lowflowCounter = 0;
int noflowCounter = 0;
int highflowCounter = 0;
	extern Cl_Sys_statusType cl_sys_statbuffer; // manav03 added
	Cl_ReturnCodeType cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   9449c:	b580      	push	{r7, lr}
   9449e:	b084      	sub	sp, #16
   944a0:	af00      	add	r7, sp, #0
   944a2:	4603      	mov	r3, r0
   944a4:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		static uint8_t three_sec_count = 0;
		
		switch(flowswitchcntrlstate)
   944a6:	4b94      	ldr	r3, [pc, #592]	; (946f8 <cl_flow_switchcontroller+0x25c>)
   944a8:	781b      	ldrb	r3, [r3, #0]
   944aa:	2b03      	cmp	r3, #3
   944ac:	f200 811e 	bhi.w	946ec <cl_flow_switchcontroller+0x250>
   944b0:	a201      	add	r2, pc, #4	; (adr r2, 944b8 <cl_flow_switchcontroller+0x1c>)
   944b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   944b6:	bf00      	nop
   944b8:	0009465b 	.word	0x0009465b
   944bc:	0009466f 	.word	0x0009466f
   944c0:	000944c9 	.word	0x000944c9
   944c4:	000946d9 	.word	0x000946d9
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   944c8:	79fb      	ldrb	r3, [r7, #7]
   944ca:	3b01      	subs	r3, #1
   944cc:	2b05      	cmp	r3, #5
   944ce:	f200 80be 	bhi.w	9464e <cl_flow_switchcontroller+0x1b2>
   944d2:	a201      	add	r2, pc, #4	; (adr r2, 944d8 <cl_flow_switchcontroller+0x3c>)
   944d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   944d8:	000944f1 	.word	0x000944f1
   944dc:	000944f9 	.word	0x000944f9
   944e0:	00094511 	.word	0x00094511
   944e4:	0009464f 	.word	0x0009464f
   944e8:	000945db 	.word	0x000945db
   944ec:	000945db 	.word	0x000945db
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   944f0:	4b81      	ldr	r3, [pc, #516]	; (946f8 <cl_flow_switchcontroller+0x25c>)
   944f2:	2201      	movs	r2, #1
   944f4:	701a      	strb	r2, [r3, #0]
			
						break;
   944f6:	e0af      	b.n	94658 <cl_flow_switchcontroller+0x1bc>
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,0);
   944f8:	2100      	movs	r1, #0
   944fa:	200d      	movs	r0, #13
   944fc:	4b7f      	ldr	r3, [pc, #508]	; (946fc <cl_flow_switchcontroller+0x260>)
   944fe:	4798      	blx	r3
						Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,0);
   94500:	2100      	movs	r1, #0
   94502:	200e      	movs	r0, #14
   94504:	4b7d      	ldr	r3, [pc, #500]	; (946fc <cl_flow_switchcontroller+0x260>)
   94506:	4798      	blx	r3
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   94508:	4b7b      	ldr	r3, [pc, #492]	; (946f8 <cl_flow_switchcontroller+0x25c>)
   9450a:	2200      	movs	r2, #0
   9450c:	701a      	strb	r2, [r3, #0]
						break;
   9450e:	e0a3      	b.n	94658 <cl_flow_switchcontroller+0x1bc>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						three_sec_count++;
   94510:	4b7b      	ldr	r3, [pc, #492]	; (94700 <cl_flow_switchcontroller+0x264>)
   94512:	781b      	ldrb	r3, [r3, #0]
   94514:	3301      	adds	r3, #1
   94516:	b2da      	uxtb	r2, r3
   94518:	4b79      	ldr	r3, [pc, #484]	; (94700 <cl_flow_switchcontroller+0x264>)
   9451a:	701a      	strb	r2, [r3, #0]
						if(three_sec_count > 3)
   9451c:	4b78      	ldr	r3, [pc, #480]	; (94700 <cl_flow_switchcontroller+0x264>)
   9451e:	781b      	ldrb	r3, [r3, #0]
   94520:	2b03      	cmp	r3, #3
   94522:	f240 8096 	bls.w	94652 <cl_flow_switchcontroller+0x1b6>
						{
							three_sec_count = 0;
   94526:	4b76      	ldr	r3, [pc, #472]	; (94700 <cl_flow_switchcontroller+0x264>)
   94528:	2200      	movs	r2, #0
   9452a:	701a      	strb	r2, [r3, #0]
						
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   9452c:	200c      	movs	r0, #12
   9452e:	4b75      	ldr	r3, [pc, #468]	; (94704 <cl_flow_switchcontroller+0x268>)
   94530:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   94532:	200d      	movs	r0, #13
   94534:	4b73      	ldr	r3, [pc, #460]	; (94704 <cl_flow_switchcontroller+0x268>)
   94536:	4798      	blx	r3
						
										cl_tdata.word = 0;
   94538:	2300      	movs	r3, #0
   9453a:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count_flow;
   9453c:	4b72      	ldr	r3, [pc, #456]	; (94708 <cl_flow_switchcontroller+0x26c>)
   9453e:	881b      	ldrh	r3, [r3, #0]
   94540:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   94542:	2315      	movs	r3, #21
   94544:	73bb      	strb	r3, [r7, #14]
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						
						
						if(toggle_count_flow < 50 ) // manav02 added         // 200 incase no flow
   94546:	4b70      	ldr	r3, [pc, #448]	; (94708 <cl_flow_switchcontroller+0x26c>)
   94548:	881b      	ldrh	r3, [r3, #0]
   9454a:	2b31      	cmp	r3, #49	; 0x31
   9454c:	d810      	bhi.n	94570 <cl_flow_switchcontroller+0xd4>
						{
							// low  flow alarm
							noflowCounter++ ;
   9454e:	4b6f      	ldr	r3, [pc, #444]	; (9470c <cl_flow_switchcontroller+0x270>)
   94550:	681b      	ldr	r3, [r3, #0]
   94552:	3301      	adds	r3, #1
   94554:	4a6d      	ldr	r2, [pc, #436]	; (9470c <cl_flow_switchcontroller+0x270>)
   94556:	6013      	str	r3, [r2, #0]
							if(noflowCounter > 3){
   94558:	4b6c      	ldr	r3, [pc, #432]	; (9470c <cl_flow_switchcontroller+0x270>)
   9455a:	681b      	ldr	r3, [r3, #0]
   9455c:	2b03      	cmp	r3, #3
   9455e:	dd33      	ble.n	945c8 <cl_flow_switchcontroller+0x12c>
							noflowCounter = 0;
   94560:	4b6a      	ldr	r3, [pc, #424]	; (9470c <cl_flow_switchcontroller+0x270>)
   94562:	2200      	movs	r2, #0
   94564:	601a      	str	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(FLOW_NO_FLOW,1);
   94566:	2101      	movs	r1, #1
   94568:	200c      	movs	r0, #12
   9456a:	4b64      	ldr	r3, [pc, #400]	; (946fc <cl_flow_switchcontroller+0x260>)
   9456c:	4798      	blx	r3
   9456e:	e02b      	b.n	945c8 <cl_flow_switchcontroller+0x12c>
							//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						
						
						else if(toggle_count_flow < 600 ) // manav02 changed from 0 to 200  600 incase of switching
   94570:	4b65      	ldr	r3, [pc, #404]	; (94708 <cl_flow_switchcontroller+0x26c>)
   94572:	881b      	ldrh	r3, [r3, #0]
   94574:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   94578:	d210      	bcs.n	9459c <cl_flow_switchcontroller+0x100>
						{
							// low  flow alarm 
							lowflowCounter++ ;
   9457a:	4b65      	ldr	r3, [pc, #404]	; (94710 <cl_flow_switchcontroller+0x274>)
   9457c:	681b      	ldr	r3, [r3, #0]
   9457e:	3301      	adds	r3, #1
   94580:	4a63      	ldr	r2, [pc, #396]	; (94710 <cl_flow_switchcontroller+0x274>)
   94582:	6013      	str	r3, [r2, #0]
							if(lowflowCounter > 3){
   94584:	4b62      	ldr	r3, [pc, #392]	; (94710 <cl_flow_switchcontroller+0x274>)
   94586:	681b      	ldr	r3, [r3, #0]
   94588:	2b03      	cmp	r3, #3
   9458a:	dd1d      	ble.n	945c8 <cl_flow_switchcontroller+0x12c>
							lowflowCounter = 0;
   9458c:	4b60      	ldr	r3, [pc, #384]	; (94710 <cl_flow_switchcontroller+0x274>)
   9458e:	2200      	movs	r2, #0
   94590:	601a      	str	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   94592:	2101      	movs	r1, #1
   94594:	200d      	movs	r0, #13
   94596:	4b59      	ldr	r3, [pc, #356]	; (946fc <cl_flow_switchcontroller+0x260>)
   94598:	4798      	blx	r3
   9459a:	e015      	b.n	945c8 <cl_flow_switchcontroller+0x12c>
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						
						
						
						else if(toggle_count_flow > 2700 )
   9459c:	4b5a      	ldr	r3, [pc, #360]	; (94708 <cl_flow_switchcontroller+0x26c>)
   9459e:	881b      	ldrh	r3, [r3, #0]
   945a0:	f640 228c 	movw	r2, #2700	; 0xa8c
   945a4:	4293      	cmp	r3, r2
   945a6:	d90f      	bls.n	945c8 <cl_flow_switchcontroller+0x12c>
						{
							//  high  flow alarm 
							highflowCounter++ ;
   945a8:	4b5a      	ldr	r3, [pc, #360]	; (94714 <cl_flow_switchcontroller+0x278>)
   945aa:	681b      	ldr	r3, [r3, #0]
   945ac:	3301      	adds	r3, #1
   945ae:	4a59      	ldr	r2, [pc, #356]	; (94714 <cl_flow_switchcontroller+0x278>)
   945b0:	6013      	str	r3, [r2, #0]
							if(highflowCounter > 3){
   945b2:	4b58      	ldr	r3, [pc, #352]	; (94714 <cl_flow_switchcontroller+0x278>)
   945b4:	681b      	ldr	r3, [r3, #0]
   945b6:	2b03      	cmp	r3, #3
   945b8:	dd06      	ble.n	945c8 <cl_flow_switchcontroller+0x12c>
							highflowCounter = 0;
   945ba:	4b56      	ldr	r3, [pc, #344]	; (94714 <cl_flow_switchcontroller+0x278>)
   945bc:	2200      	movs	r2, #0
   945be:	601a      	str	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   945c0:	2101      	movs	r1, #1
   945c2:	200e      	movs	r0, #14
   945c4:	4b4d      	ldr	r3, [pc, #308]	; (946fc <cl_flow_switchcontroller+0x260>)
   945c6:	4798      	blx	r3
							}
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
   945c8:	2202      	movs	r2, #2
   945ca:	494f      	ldr	r1, [pc, #316]	; (94708 <cl_flow_switchcontroller+0x26c>)
   945cc:	2019      	movs	r0, #25
   945ce:	4b52      	ldr	r3, [pc, #328]	; (94718 <cl_flow_switchcontroller+0x27c>)
   945d0:	4798      	blx	r3
						toggle_count_flow = 0;
   945d2:	4b4d      	ldr	r3, [pc, #308]	; (94708 <cl_flow_switchcontroller+0x26c>)
   945d4:	2200      	movs	r2, #0
   945d6:	801a      	strh	r2, [r3, #0]
						}
						
						break;
   945d8:	e03b      	b.n	94652 <cl_flow_switchcontroller+0x1b6>
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
			//---------------manav03 added form alarm detector
			if(cl_sys_statbuffer.Flowstatus)
   945da:	4b50      	ldr	r3, [pc, #320]	; (9471c <cl_flow_switchcontroller+0x280>)
   945dc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   945e0:	2b00      	cmp	r3, #0
   945e2:	d002      	beq.n	945ea <cl_flow_switchcontroller+0x14e>
			{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;
   945e4:	4b4e      	ldr	r3, [pc, #312]	; (94720 <cl_flow_switchcontroller+0x284>)
   945e6:	2201      	movs	r2, #1
   945e8:	701a      	strb	r2, [r3, #0]
			}
			if(!cl_sys_statbuffer.Flowstatus)
   945ea:	4b4c      	ldr	r3, [pc, #304]	; (9471c <cl_flow_switchcontroller+0x280>)
   945ec:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
   945f0:	2b00      	cmp	r3, #0
   945f2:	d102      	bne.n	945fa <cl_flow_switchcontroller+0x15e>
			{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   945f4:	4b4a      	ldr	r3, [pc, #296]	; (94720 <cl_flow_switchcontroller+0x284>)
   945f6:	2202      	movs	r2, #2
   945f8:	701a      	strb	r2, [r3, #0]
			}
			//-------------------------------------------------------------------------
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   945fa:	4b49      	ldr	r3, [pc, #292]	; (94720 <cl_flow_switchcontroller+0x284>)
   945fc:	781b      	ldrb	r3, [r3, #0]
   945fe:	2b01      	cmp	r3, #1
   94600:	d110      	bne.n	94624 <cl_flow_switchcontroller+0x188>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   94602:	4b47      	ldr	r3, [pc, #284]	; (94720 <cl_flow_switchcontroller+0x284>)
   94604:	2200      	movs	r2, #0
   94606:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   94608:	4b46      	ldr	r3, [pc, #280]	; (94724 <cl_flow_switchcontroller+0x288>)
   9460a:	781b      	ldrb	r3, [r3, #0]
   9460c:	2b01      	cmp	r3, #1
   9460e:	d022      	beq.n	94656 <cl_flow_switchcontroller+0x1ba>
								{
									
									toggle_count_flow++;
   94610:	4b3d      	ldr	r3, [pc, #244]	; (94708 <cl_flow_switchcontroller+0x26c>)
   94612:	881b      	ldrh	r3, [r3, #0]
   94614:	3301      	adds	r3, #1
   94616:	b29a      	uxth	r2, r3
   94618:	4b3b      	ldr	r3, [pc, #236]	; (94708 <cl_flow_switchcontroller+0x26c>)
   9461a:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   9461c:	4b41      	ldr	r3, [pc, #260]	; (94724 <cl_flow_switchcontroller+0x288>)
   9461e:	2201      	movs	r2, #1
   94620:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   94622:	e018      	b.n	94656 <cl_flow_switchcontroller+0x1ba>
									toggle_count_flow++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   94624:	4b3e      	ldr	r3, [pc, #248]	; (94720 <cl_flow_switchcontroller+0x284>)
   94626:	781b      	ldrb	r3, [r3, #0]
   94628:	2b02      	cmp	r3, #2
   9462a:	d114      	bne.n	94656 <cl_flow_switchcontroller+0x1ba>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9462c:	4b3c      	ldr	r3, [pc, #240]	; (94720 <cl_flow_switchcontroller+0x284>)
   9462e:	2200      	movs	r2, #0
   94630:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   94632:	4b3c      	ldr	r3, [pc, #240]	; (94724 <cl_flow_switchcontroller+0x288>)
   94634:	781b      	ldrb	r3, [r3, #0]
   94636:	2b02      	cmp	r3, #2
   94638:	d00d      	beq.n	94656 <cl_flow_switchcontroller+0x1ba>
								{
									toggle_count_flow++;
   9463a:	4b33      	ldr	r3, [pc, #204]	; (94708 <cl_flow_switchcontroller+0x26c>)
   9463c:	881b      	ldrh	r3, [r3, #0]
   9463e:	3301      	adds	r3, #1
   94640:	b29a      	uxth	r2, r3
   94642:	4b31      	ldr	r3, [pc, #196]	; (94708 <cl_flow_switchcontroller+0x26c>)
   94644:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   94646:	4b37      	ldr	r3, [pc, #220]	; (94724 <cl_flow_switchcontroller+0x288>)
   94648:	2202      	movs	r2, #2
   9464a:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   9464c:	e003      	b.n	94656 <cl_flow_switchcontroller+0x1ba>
						
						default:break;
   9464e:	bf00      	nop
   94650:	e04c      	b.n	946ec <cl_flow_switchcontroller+0x250>
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
						toggle_count_flow = 0;
						}
						
						break;
   94652:	bf00      	nop
   94654:	e04a      	b.n	946ec <cl_flow_switchcontroller+0x250>
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   94656:	bf00      	nop
						
						default:break;
					}
			break;
   94658:	e048      	b.n	946ec <cl_flow_switchcontroller+0x250>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   9465a:	79fb      	ldrb	r3, [r7, #7]
   9465c:	2b01      	cmp	r3, #1
   9465e:	d001      	beq.n	94664 <cl_flow_switchcontroller+0x1c8>
   94660:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   94662:	e003      	b.n	9466c <cl_flow_switchcontroller+0x1d0>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   94664:	4b24      	ldr	r3, [pc, #144]	; (946f8 <cl_flow_switchcontroller+0x25c>)
   94666:	2201      	movs	r2, #1
   94668:	701a      	strb	r2, [r3, #0]
									break;
   9466a:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   9466c:	e03e      	b.n	946ec <cl_flow_switchcontroller+0x250>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   9466e:	79fb      	ldrb	r3, [r7, #7]
   94670:	2b03      	cmp	r3, #3
   94672:	d002      	beq.n	9467a <cl_flow_switchcontroller+0x1de>
   94674:	2b06      	cmp	r3, #6
   94676:	d004      	beq.n	94682 <cl_flow_switchcontroller+0x1e6>
										}

					
									}
								break;
									default:break;
   94678:	e02d      	b.n	946d6 <cl_flow_switchcontroller+0x23a>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   9467a:	4b1f      	ldr	r3, [pc, #124]	; (946f8 <cl_flow_switchcontroller+0x25c>)
   9467c:	2202      	movs	r2, #2
   9467e:	701a      	strb	r2, [r3, #0]
									break;
   94680:	e029      	b.n	946d6 <cl_flow_switchcontroller+0x23a>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   94682:	4b27      	ldr	r3, [pc, #156]	; (94720 <cl_flow_switchcontroller+0x284>)
   94684:	781b      	ldrb	r3, [r3, #0]
   94686:	2b01      	cmp	r3, #1
   94688:	d110      	bne.n	946ac <cl_flow_switchcontroller+0x210>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9468a:	4b25      	ldr	r3, [pc, #148]	; (94720 <cl_flow_switchcontroller+0x284>)
   9468c:	2200      	movs	r2, #0
   9468e:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   94690:	4b24      	ldr	r3, [pc, #144]	; (94724 <cl_flow_switchcontroller+0x288>)
   94692:	781b      	ldrb	r3, [r3, #0]
   94694:	2b01      	cmp	r3, #1
   94696:	d01d      	beq.n	946d4 <cl_flow_switchcontroller+0x238>
										{
									
											toggle_count_flow++;
   94698:	4b1b      	ldr	r3, [pc, #108]	; (94708 <cl_flow_switchcontroller+0x26c>)
   9469a:	881b      	ldrh	r3, [r3, #0]
   9469c:	3301      	adds	r3, #1
   9469e:	b29a      	uxth	r2, r3
   946a0:	4b19      	ldr	r3, [pc, #100]	; (94708 <cl_flow_switchcontroller+0x26c>)
   946a2:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   946a4:	4b1f      	ldr	r3, [pc, #124]	; (94724 <cl_flow_switchcontroller+0x288>)
   946a6:	2201      	movs	r2, #1
   946a8:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   946aa:	e013      	b.n	946d4 <cl_flow_switchcontroller+0x238>
											toggle_count_flow++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   946ac:	4b1c      	ldr	r3, [pc, #112]	; (94720 <cl_flow_switchcontroller+0x284>)
   946ae:	781b      	ldrb	r3, [r3, #0]
   946b0:	2b02      	cmp	r3, #2
   946b2:	d10f      	bne.n	946d4 <cl_flow_switchcontroller+0x238>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   946b4:	4b1a      	ldr	r3, [pc, #104]	; (94720 <cl_flow_switchcontroller+0x284>)
   946b6:	2200      	movs	r2, #0
   946b8:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   946ba:	4b1a      	ldr	r3, [pc, #104]	; (94724 <cl_flow_switchcontroller+0x288>)
   946bc:	781b      	ldrb	r3, [r3, #0]
   946be:	2b02      	cmp	r3, #2
   946c0:	d008      	beq.n	946d4 <cl_flow_switchcontroller+0x238>
										{
											toggle_count_flow++;
   946c2:	4b11      	ldr	r3, [pc, #68]	; (94708 <cl_flow_switchcontroller+0x26c>)
   946c4:	881b      	ldrh	r3, [r3, #0]
   946c6:	3301      	adds	r3, #1
   946c8:	b29a      	uxth	r2, r3
   946ca:	4b0f      	ldr	r3, [pc, #60]	; (94708 <cl_flow_switchcontroller+0x26c>)
   946cc:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   946ce:	4b15      	ldr	r3, [pc, #84]	; (94724 <cl_flow_switchcontroller+0x288>)
   946d0:	2202      	movs	r2, #2
   946d2:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   946d4:	bf00      	nop
									default:break;
								}
			break;
   946d6:	e009      	b.n	946ec <cl_flow_switchcontroller+0x250>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   946d8:	79fb      	ldrb	r3, [r7, #7]
   946da:	2b01      	cmp	r3, #1
   946dc:	d001      	beq.n	946e2 <cl_flow_switchcontroller+0x246>
   946de:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   946e0:	e003      	b.n	946ea <cl_flow_switchcontroller+0x24e>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   946e2:	4b05      	ldr	r3, [pc, #20]	; (946f8 <cl_flow_switchcontroller+0x25c>)
   946e4:	2202      	movs	r2, #2
   946e6:	701a      	strb	r2, [r3, #0]
									
									break;
   946e8:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   946ea:	bf00      	nop
		}
		return CL_OK;
   946ec:	2300      	movs	r3, #0
   946ee:	4618      	mov	r0, r3
   946f0:	3710      	adds	r7, #16
   946f2:	46bd      	mov	sp, r7
   946f4:	bd80      	pop	{r7, pc}
   946f6:	bf00      	nop
   946f8:	2007199f 	.word	0x2007199f
   946fc:	00082c31 	.word	0x00082c31
   94700:	200719b0 	.word	0x200719b0
   94704:	00082ad9 	.word	0x00082ad9
   94708:	200719a0 	.word	0x200719a0
   9470c:	200719a8 	.word	0x200719a8
   94710:	200719a4 	.word	0x200719a4
   94714:	200719ac 	.word	0x200719ac
   94718:	0009cbd5 	.word	0x0009cbd5
   9471c:	2007216c 	.word	0x2007216c
   94720:	2007199c 	.word	0x2007199c
   94724:	2007199e 	.word	0x2007199e

00094728 <cl_hep_controller>:
{
	return CL_OK;
}

Cl_ReturnCodeType cl_hep_controller(cl_hep_events hp_event , int32_t data)
{
   94728:	b580      	push	{r7, lr}
   9472a:	b084      	sub	sp, #16
   9472c:	af00      	add	r7, sp, #0
   9472e:	4603      	mov	r3, r0
   94730:	6039      	str	r1, [r7, #0]
   94732:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_hep_retcode = CL_OK;
   94734:	2300      	movs	r3, #0
   94736:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   94738:	2300      	movs	r3, #0
   9473a:	73bb      	strb	r3, [r7, #14]
		int16_t hep_delta_value = 0 ;
   9473c:	2300      	movs	r3, #0
   9473e:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint32Type pwm_period = 0;
	    static Cl_Uint32Type pwm_count = 0;
	switch(hp_State)
   94740:	4baf      	ldr	r3, [pc, #700]	; (94a00 <cl_hep_controller+0x2d8>)
   94742:	781b      	ldrb	r3, [r3, #0]
   94744:	2b10      	cmp	r3, #16
   94746:	f200 832b 	bhi.w	94da0 <cl_hep_controller+0x678>
   9474a:	a201      	add	r2, pc, #4	; (adr r2, 94750 <cl_hep_controller+0x28>)
   9474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94750:	00094795 	.word	0x00094795
   94754:	000948ed 	.word	0x000948ed
   94758:	0009499b 	.word	0x0009499b
   9475c:	00094ae9 	.word	0x00094ae9
   94760:	00094a73 	.word	0x00094a73
   94764:	00094b61 	.word	0x00094b61
   94768:	00094bc9 	.word	0x00094bc9
   9476c:	00094da1 	.word	0x00094da1
   94770:	00094c93 	.word	0x00094c93
   94774:	00094da1 	.word	0x00094da1
   94778:	00094da1 	.word	0x00094da1
   9477c:	00094da1 	.word	0x00094da1
   94780:	00094da1 	.word	0x00094da1
   94784:	00094da1 	.word	0x00094da1
   94788:	00094da1 	.word	0x00094da1
   9478c:	00094da1 	.word	0x00094da1
   94790:	00094da1 	.word	0x00094da1
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   94794:	79fb      	ldrb	r3, [r7, #7]
   94796:	3b01      	subs	r3, #1
   94798:	2b12      	cmp	r3, #18
   9479a:	f200 8303 	bhi.w	94da4 <cl_hep_controller+0x67c>
   9479e:	a201      	add	r2, pc, #4	; (adr r2, 947a4 <cl_hep_controller+0x7c>)
   947a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   947a4:	00094879 	.word	0x00094879
   947a8:	000948cd 	.word	0x000948cd
   947ac:	000948db 	.word	0x000948db
   947b0:	000948a3 	.word	0x000948a3
   947b4:	00094da5 	.word	0x00094da5
   947b8:	00094da5 	.word	0x00094da5
   947bc:	000947f1 	.word	0x000947f1
   947c0:	00094da5 	.word	0x00094da5
   947c4:	00094827 	.word	0x00094827
   947c8:	00094da5 	.word	0x00094da5
   947cc:	00094839 	.word	0x00094839
   947d0:	00094da5 	.word	0x00094da5
   947d4:	0009486b 	.word	0x0009486b
   947d8:	00094da5 	.word	0x00094da5
   947dc:	00094da5 	.word	0x00094da5
   947e0:	00094da5 	.word	0x00094da5
   947e4:	00094da5 	.word	0x00094da5
   947e8:	000948e9 	.word	0x000948e9
   947ec:	000948e9 	.word	0x000948e9
			{
				
				case CL_HEP_EVENT_STARTBOLUS:
					pwm_period =  cl_hep_deliveryrate ;
   947f0:	4b84      	ldr	r3, [pc, #528]	; (94a04 <cl_hep_controller+0x2dc>)
   947f2:	681b      	ldr	r3, [r3, #0]
   947f4:	4a84      	ldr	r2, [pc, #528]	; (94a08 <cl_hep_controller+0x2e0>)
   947f6:	6013      	str	r3, [r2, #0]
					pwm_period = 2;
   947f8:	4b83      	ldr	r3, [pc, #524]	; (94a08 <cl_hep_controller+0x2e0>)
   947fa:	2202      	movs	r2, #2
   947fc:	601a      	str	r2, [r3, #0]
				//	cl_wait(100);
					
				//	cl_wait(100);
					sv_cntrl_activatepump(HEPARINPUMP);
   947fe:	2005      	movs	r0, #5
   94800:	4b82      	ldr	r3, [pc, #520]	; (94a0c <cl_hep_controller+0x2e4>)
   94802:	4798      	blx	r3
					sv_cntrl_setHepa_dir();
   94804:	4b82      	ldr	r3, [pc, #520]	; (94a10 <cl_hep_controller+0x2e8>)
   94806:	4798      	blx	r3
					cl_wait(100);
   94808:	2064      	movs	r0, #100	; 0x64
   9480a:	4b82      	ldr	r3, [pc, #520]	; (94a14 <cl_hep_controller+0x2ec>)
   9480c:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9480e:	4b7e      	ldr	r3, [pc, #504]	; (94a08 <cl_hep_controller+0x2e0>)
   94810:	681b      	ldr	r3, [r3, #0]
   94812:	4619      	mov	r1, r3
   94814:	2005      	movs	r0, #5
   94816:	4b80      	ldr	r3, [pc, #512]	; (94a18 <cl_hep_controller+0x2f0>)
   94818:	4798      	blx	r3
	//				cl_hep_bolus_count_rate = cl_hep_bolus_count_rate;//300;
					cl_hep_pumpFeedback_start();
   9481a:	4b80      	ldr	r3, [pc, #512]	; (94a1c <cl_hep_controller+0x2f4>)
   9481c:	4798      	blx	r3
				hp_State = CL_HEP_STATE_BOLUS_ON;
   9481e:	4b78      	ldr	r3, [pc, #480]	; (94a00 <cl_hep_controller+0x2d8>)
   94820:	2206      	movs	r2, #6
   94822:	701a      	strb	r2, [r3, #0]
				break;
   94824:	e061      	b.n	948ea <cl_hep_controller+0x1c2>
				case CL_HEP_EVENT_STOPBOLUS:
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94826:	2005      	movs	r0, #5
   94828:	4b7d      	ldr	r3, [pc, #500]	; (94a20 <cl_hep_controller+0x2f8>)
   9482a:	4798      	blx	r3
   9482c:	4603      	mov	r3, r0
   9482e:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   94830:	4b73      	ldr	r3, [pc, #460]	; (94a00 <cl_hep_controller+0x2d8>)
   94832:	2200      	movs	r2, #0
   94834:	701a      	strb	r2, [r3, #0]
				break;
   94836:	e058      	b.n	948ea <cl_hep_controller+0x1c2>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						//pwm_period = Treatdata[ID_heprate] ;
							pwm_period = hep_calibration(data);
   94838:	683b      	ldr	r3, [r7, #0]
   9483a:	4618      	mov	r0, r3
   9483c:	4b79      	ldr	r3, [pc, #484]	; (94a24 <cl_hep_controller+0x2fc>)
   9483e:	4798      	blx	r3
   94840:	4602      	mov	r2, r0
   94842:	4b71      	ldr	r3, [pc, #452]	; (94a08 <cl_hep_controller+0x2e0>)
   94844:	601a      	str	r2, [r3, #0]
							
						//	cl_wait(100);
						//	pwm_count = rin_calibration(data);
						
						
						sv_cntrl_setHepa_dir();
   94846:	4b72      	ldr	r3, [pc, #456]	; (94a10 <cl_hep_controller+0x2e8>)
   94848:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   9484a:	2005      	movs	r0, #5
   9484c:	4b6f      	ldr	r3, [pc, #444]	; (94a0c <cl_hep_controller+0x2e4>)
   9484e:	4798      	blx	r3
					//	pwm_period = 10 ;
						cl_wait(100);
   94850:	2064      	movs	r0, #100	; 0x64
   94852:	4b70      	ldr	r3, [pc, #448]	; (94a14 <cl_hep_controller+0x2ec>)
   94854:	4798      	blx	r3
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94856:	4b6c      	ldr	r3, [pc, #432]	; (94a08 <cl_hep_controller+0x2e0>)
   94858:	681b      	ldr	r3, [r3, #0]
   9485a:	4619      	mov	r1, r3
   9485c:	2005      	movs	r0, #5
   9485e:	4b6e      	ldr	r3, [pc, #440]	; (94a18 <cl_hep_controller+0x2f0>)
   94860:	4798      	blx	r3
					//	cl_wait(100);
						
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   94862:	4b67      	ldr	r3, [pc, #412]	; (94a00 <cl_hep_controller+0x2d8>)
   94864:	2208      	movs	r2, #8
   94866:	701a      	strb	r2, [r3, #0]

				break;
   94868:	e03f      	b.n	948ea <cl_hep_controller+0x1c2>
				
				case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   9486a:	2005      	movs	r0, #5
   9486c:	4b6c      	ldr	r3, [pc, #432]	; (94a20 <cl_hep_controller+0x2f8>)
   9486e:	4798      	blx	r3
				hp_State =  CL_HEP_STATE_IDLE;
   94870:	4b63      	ldr	r3, [pc, #396]	; (94a00 <cl_hep_controller+0x2d8>)
   94872:	2200      	movs	r2, #0
   94874:	701a      	strb	r2, [r3, #0]
				break;
   94876:	e038      	b.n	948ea <cl_hep_controller+0x1c2>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				pwm_period = 2 ;
   94878:	4b63      	ldr	r3, [pc, #396]	; (94a08 <cl_hep_controller+0x2e0>)
   9487a:	2202      	movs	r2, #2
   9487c:	601a      	str	r2, [r3, #0]
				
				sv_cntrl_setHepa_dir();
   9487e:	4b64      	ldr	r3, [pc, #400]	; (94a10 <cl_hep_controller+0x2e8>)
   94880:	4798      	blx	r3
				sv_cntrl_activatepump(HEPARINPUMP);
   94882:	2005      	movs	r0, #5
   94884:	4b61      	ldr	r3, [pc, #388]	; (94a0c <cl_hep_controller+0x2e4>)
   94886:	4798      	blx	r3
				//cl_hep_pumpFeedback_start();
				cl_wait(100);
   94888:	2064      	movs	r0, #100	; 0x64
   9488a:	4b62      	ldr	r3, [pc, #392]	; (94a14 <cl_hep_controller+0x2ec>)
   9488c:	4798      	blx	r3
				sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9488e:	4b5e      	ldr	r3, [pc, #376]	; (94a08 <cl_hep_controller+0x2e0>)
   94890:	681b      	ldr	r3, [r3, #0]
   94892:	4619      	mov	r1, r3
   94894:	2005      	movs	r0, #5
   94896:	4b60      	ldr	r3, [pc, #384]	; (94a18 <cl_hep_controller+0x2f0>)
   94898:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   9489a:	4b59      	ldr	r3, [pc, #356]	; (94a00 <cl_hep_controller+0x2d8>)
   9489c:	2203      	movs	r2, #3
   9489e:	701a      	strb	r2, [r3, #0]
				break;
   948a0:	e023      	b.n	948ea <cl_hep_controller+0x1c2>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				pwm_period = 2 ;
   948a2:	4b59      	ldr	r3, [pc, #356]	; (94a08 <cl_hep_controller+0x2e0>)
   948a4:	2202      	movs	r2, #2
   948a6:	601a      	str	r2, [r3, #0]
				
					sv_cntrl_resetHepa_dir();
   948a8:	4b5f      	ldr	r3, [pc, #380]	; (94a28 <cl_hep_controller+0x300>)
   948aa:	4798      	blx	r3
					sv_cntrl_activatepump(HEPARINPUMP);
   948ac:	2005      	movs	r0, #5
   948ae:	4b57      	ldr	r3, [pc, #348]	; (94a0c <cl_hep_controller+0x2e4>)
   948b0:	4798      	blx	r3
				//	cl_hep_pumpFeedback_start();
					cl_wait(100);
   948b2:	2064      	movs	r0, #100	; 0x64
   948b4:	4b57      	ldr	r3, [pc, #348]	; (94a14 <cl_hep_controller+0x2ec>)
   948b6:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   948b8:	4b53      	ldr	r3, [pc, #332]	; (94a08 <cl_hep_controller+0x2e0>)
   948ba:	681b      	ldr	r3, [r3, #0]
   948bc:	4619      	mov	r1, r3
   948be:	2005      	movs	r0, #5
   948c0:	4b55      	ldr	r3, [pc, #340]	; (94a18 <cl_hep_controller+0x2f0>)
   948c2:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   948c4:	4b4e      	ldr	r3, [pc, #312]	; (94a00 <cl_hep_controller+0x2d8>)
   948c6:	2204      	movs	r2, #4
   948c8:	701a      	strb	r2, [r3, #0]
				break;
   948ca:	e00e      	b.n	948ea <cl_hep_controller+0x1c2>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   948cc:	2005      	movs	r0, #5
   948ce:	4b54      	ldr	r3, [pc, #336]	; (94a20 <cl_hep_controller+0x2f8>)
   948d0:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   948d2:	4b4b      	ldr	r3, [pc, #300]	; (94a00 <cl_hep_controller+0x2d8>)
   948d4:	2200      	movs	r2, #0
   948d6:	701a      	strb	r2, [r3, #0]
				break;
   948d8:	e007      	b.n	948ea <cl_hep_controller+0x1c2>
				
			
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   948da:	2005      	movs	r0, #5
   948dc:	4b50      	ldr	r3, [pc, #320]	; (94a20 <cl_hep_controller+0x2f8>)
   948de:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   948e0:	4b47      	ldr	r3, [pc, #284]	; (94a00 <cl_hep_controller+0x2d8>)
   948e2:	2200      	movs	r2, #0
   948e4:	701a      	strb	r2, [r3, #0]
				break;
   948e6:	e000      	b.n	948ea <cl_hep_controller+0x1c2>
					//sv_cntrl_setHepa_dir();
					//sv_cntrl_activatepump(HEPARINPUMP);
					
					
					
					break;
   948e8:	bf00      	nop
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   948ea:	e25b      	b.n	94da4 <cl_hep_controller+0x67c>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   948ec:	79fb      	ldrb	r3, [r7, #7]
   948ee:	3b02      	subs	r3, #2
   948f0:	2b10      	cmp	r3, #16
   948f2:	f200 8259 	bhi.w	94da8 <cl_hep_controller+0x680>
   948f6:	a201      	add	r2, pc, #4	; (adr r2, 948fc <cl_hep_controller+0x1d4>)
   948f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   948fc:	0009496b 	.word	0x0009496b
   94900:	00094979 	.word	0x00094979
   94904:	00094941 	.word	0x00094941
   94908:	00094987 	.word	0x00094987
   9490c:	00094991 	.word	0x00094991
   94910:	00094da9 	.word	0x00094da9
   94914:	00094da9 	.word	0x00094da9
   94918:	00094da9 	.word	0x00094da9
   9491c:	00094da9 	.word	0x00094da9
   94920:	00094da9 	.word	0x00094da9
   94924:	00094da9 	.word	0x00094da9
   94928:	00094da9 	.word	0x00094da9
   9492c:	00094da9 	.word	0x00094da9
   94930:	00094da9 	.word	0x00094da9
   94934:	00094da9 	.word	0x00094da9
   94938:	00094da9 	.word	0x00094da9
   9493c:	0009496b 	.word	0x0009496b
		{
			
			
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_resetHepa_dir();   ///change direction 24 july
   94940:	4b39      	ldr	r3, [pc, #228]	; (94a28 <cl_hep_controller+0x300>)
   94942:	4798      	blx	r3
		//	sv_cntrl_setHepa_dir();
			pwm_period = 5;
   94944:	4b30      	ldr	r3, [pc, #192]	; (94a08 <cl_hep_controller+0x2e0>)
   94946:	2205      	movs	r2, #5
   94948:	601a      	str	r2, [r3, #0]
			sv_cntrl_activatepump(HEPARINPUMP);
   9494a:	2005      	movs	r0, #5
   9494c:	4b2f      	ldr	r3, [pc, #188]	; (94a0c <cl_hep_controller+0x2e4>)
   9494e:	4798      	blx	r3
		//	cl_hep_pumpFeedback_start();
			cl_wait(100);
   94950:	2064      	movs	r0, #100	; 0x64
   94952:	4b30      	ldr	r3, [pc, #192]	; (94a14 <cl_hep_controller+0x2ec>)
   94954:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94956:	4b2c      	ldr	r3, [pc, #176]	; (94a08 <cl_hep_controller+0x2e0>)
   94958:	681b      	ldr	r3, [r3, #0]
   9495a:	4619      	mov	r1, r3
   9495c:	2005      	movs	r0, #5
   9495e:	4b2e      	ldr	r3, [pc, #184]	; (94a18 <cl_hep_controller+0x2f0>)
   94960:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   94962:	4b27      	ldr	r3, [pc, #156]	; (94a00 <cl_hep_controller+0x2d8>)
   94964:	2204      	movs	r2, #4
   94966:	701a      	strb	r2, [r3, #0]
			break;
   94968:	e016      	b.n	94998 <cl_hep_controller+0x270>
			case CL_HEP_EVENT_AT_LEFT_END:
			case CL_HEP_EVENT_LEFT_END_REACHED:
		    sv_cntrl_deactivatepump(HEPARINPUMP);
   9496a:	2005      	movs	r0, #5
   9496c:	4b2c      	ldr	r3, [pc, #176]	; (94a20 <cl_hep_controller+0x2f8>)
   9496e:	4798      	blx	r3
		   hp_State = CL_HEP_STATE_IDLE;
   94970:	4b23      	ldr	r3, [pc, #140]	; (94a00 <cl_hep_controller+0x2d8>)
   94972:	2200      	movs	r2, #0
   94974:	701a      	strb	r2, [r3, #0]
		    break;
   94976:	e00f      	b.n	94998 <cl_hep_controller+0x270>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   94978:	2005      	movs	r0, #5
   9497a:	4b29      	ldr	r3, [pc, #164]	; (94a20 <cl_hep_controller+0x2f8>)
   9497c:	4798      	blx	r3
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   9497e:	4b20      	ldr	r3, [pc, #128]	; (94a00 <cl_hep_controller+0x2d8>)
   94980:	2202      	movs	r2, #2
   94982:	701a      	strb	r2, [r3, #0]
			break;
   94984:	e008      	b.n	94998 <cl_hep_controller+0x270>
			
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   94986:	683b      	ldr	r3, [r7, #0]
   94988:	b29a      	uxth	r2, r3
   9498a:	4b28      	ldr	r3, [pc, #160]	; (94a2c <cl_hep_controller+0x304>)
   9498c:	801a      	strh	r2, [r3, #0]
			break;
   9498e:	e003      	b.n	94998 <cl_hep_controller+0x270>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   94990:	683b      	ldr	r3, [r7, #0]
   94992:	4a1c      	ldr	r2, [pc, #112]	; (94a04 <cl_hep_controller+0x2dc>)
   94994:	6013      	str	r3, [r2, #0]
			break;
   94996:	bf00      	nop
		}
		break;
   94998:	e206      	b.n	94da8 <cl_hep_controller+0x680>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   9499a:	79fb      	ldrb	r3, [r7, #7]
   9499c:	3b01      	subs	r3, #1
   9499e:	2b12      	cmp	r3, #18
   949a0:	f200 8204 	bhi.w	94dac <cl_hep_controller+0x684>
   949a4:	a201      	add	r2, pc, #4	; (adr r2, 949ac <cl_hep_controller+0x284>)
   949a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   949aa:	bf00      	nop
   949ac:	00094a31 	.word	0x00094a31
   949b0:	00094a55 	.word	0x00094a55
   949b4:	00094a63 	.word	0x00094a63
   949b8:	00094dad 	.word	0x00094dad
   949bc:	00094dad 	.word	0x00094dad
   949c0:	00094dad 	.word	0x00094dad
   949c4:	00094dad 	.word	0x00094dad
   949c8:	00094dad 	.word	0x00094dad
   949cc:	00094dad 	.word	0x00094dad
   949d0:	00094dad 	.word	0x00094dad
   949d4:	000949f9 	.word	0x000949f9
   949d8:	00094dad 	.word	0x00094dad
   949dc:	00094dad 	.word	0x00094dad
   949e0:	00094dad 	.word	0x00094dad
   949e4:	00094dad 	.word	0x00094dad
   949e8:	00094dad 	.word	0x00094dad
   949ec:	00094dad 	.word	0x00094dad
   949f0:	00094dad 	.word	0x00094dad
   949f4:	00094a63 	.word	0x00094a63
// 			case CL_HEP_EVENT_STARTBOLUS:
// 			hp_State = CL_HEP_STATE_BOLUS_ON;
// 			break;

			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State =  CL_HEP_STATE_IDLE;
   949f8:	4b01      	ldr	r3, [pc, #4]	; (94a00 <cl_hep_controller+0x2d8>)
   949fa:	2200      	movs	r2, #0
   949fc:	701a      	strb	r2, [r3, #0]
			//hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;/24july
			break;
   949fe:	e037      	b.n	94a70 <cl_hep_controller+0x348>
   94a00:	200719b1 	.word	0x200719b1
   94a04:	200709c4 	.word	0x200709c4
   94a08:	200719b8 	.word	0x200719b8
   94a0c:	0009ad41 	.word	0x0009ad41
   94a10:	0009ae31 	.word	0x0009ae31
   94a14:	00093ea9 	.word	0x00093ea9
   94a18:	0009ae59 	.word	0x0009ae59
   94a1c:	00094de5 	.word	0x00094de5
   94a20:	0009ad7d 	.word	0x0009ad7d
   94a24:	00083ba5 	.word	0x00083ba5
   94a28:	0009ae45 	.word	0x0009ae45
   94a2c:	200719b2 	.word	0x200719b2
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_setHepa_dir();     //change direction 24 july
   94a30:	4bbb      	ldr	r3, [pc, #748]	; (94d20 <cl_hep_controller+0x5f8>)
   94a32:	4798      	blx	r3
		//	sv_cntrl_resetHepa_dir();
			sv_cntrl_activatepump(HEPARINPUMP);
   94a34:	2005      	movs	r0, #5
   94a36:	4bbb      	ldr	r3, [pc, #748]	; (94d24 <cl_hep_controller+0x5fc>)
   94a38:	4798      	blx	r3
		//	cl_hep_pumpFeedback_start();
			cl_wait(100);
   94a3a:	2064      	movs	r0, #100	; 0x64
   94a3c:	4bba      	ldr	r3, [pc, #744]	; (94d28 <cl_hep_controller+0x600>)
   94a3e:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94a40:	4bba      	ldr	r3, [pc, #744]	; (94d2c <cl_hep_controller+0x604>)
   94a42:	681b      	ldr	r3, [r3, #0]
   94a44:	4619      	mov	r1, r3
   94a46:	2005      	movs	r0, #5
   94a48:	4bb9      	ldr	r3, [pc, #740]	; (94d30 <cl_hep_controller+0x608>)
   94a4a:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   94a4c:	4bb9      	ldr	r3, [pc, #740]	; (94d34 <cl_hep_controller+0x60c>)
   94a4e:	2203      	movs	r2, #3
   94a50:	701a      	strb	r2, [r3, #0]
			break;
   94a52:	e00d      	b.n	94a70 <cl_hep_controller+0x348>
			case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   94a54:	2005      	movs	r0, #5
   94a56:	4bb8      	ldr	r3, [pc, #736]	; (94d38 <cl_hep_controller+0x610>)
   94a58:	4798      	blx	r3
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   94a5a:	4bb6      	ldr	r3, [pc, #728]	; (94d34 <cl_hep_controller+0x60c>)
   94a5c:	2201      	movs	r2, #1
   94a5e:	701a      	strb	r2, [r3, #0]
				break;
   94a60:	e006      	b.n	94a70 <cl_hep_controller+0x348>
				case CL_HEP_EVENT_AT_RIGHT_END:
			    case CL_HEP_EVENT_RIGHT_END_REACHED:
			    sv_cntrl_deactivatepump(HEPARINPUMP);
   94a62:	2005      	movs	r0, #5
   94a64:	4bb4      	ldr	r3, [pc, #720]	; (94d38 <cl_hep_controller+0x610>)
   94a66:	4798      	blx	r3
			    hp_State = CL_HEP_STATE_IDLE;
   94a68:	4bb2      	ldr	r3, [pc, #712]	; (94d34 <cl_hep_controller+0x60c>)
   94a6a:	2200      	movs	r2, #0
   94a6c:	701a      	strb	r2, [r3, #0]
			    break;
   94a6e:	bf00      	nop
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   94a70:	e19c      	b.n	94dac <cl_hep_controller+0x684>

		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
   94a72:	79fb      	ldrb	r3, [r7, #7]
   94a74:	3b03      	subs	r3, #3
   94a76:	2b10      	cmp	r3, #16
   94a78:	d834      	bhi.n	94ae4 <cl_hep_controller+0x3bc>
   94a7a:	a201      	add	r2, pc, #4	; (adr r2, 94a80 <cl_hep_controller+0x358>)
   94a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94a80:	00094ac5 	.word	0x00094ac5
   94a84:	00094ae5 	.word	0x00094ae5
   94a88:	00094ae5 	.word	0x00094ae5
   94a8c:	00094ae5 	.word	0x00094ae5
   94a90:	00094ae5 	.word	0x00094ae5
   94a94:	00094ae5 	.word	0x00094ae5
   94a98:	00094ad3 	.word	0x00094ad3
   94a9c:	00094ae5 	.word	0x00094ae5
   94aa0:	00094ae5 	.word	0x00094ae5
   94aa4:	00094ae5 	.word	0x00094ae5
   94aa8:	00094ad3 	.word	0x00094ad3
   94aac:	00094ae5 	.word	0x00094ae5
   94ab0:	00094ae5 	.word	0x00094ae5
   94ab4:	00094ae5 	.word	0x00094ae5
   94ab8:	00094ae5 	.word	0x00094ae5
   94abc:	00094ae5 	.word	0x00094ae5
   94ac0:	00094ac5 	.word	0x00094ac5
		{
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			case CL_HEP_EVENT_AT_RIGHT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   94ac4:	2005      	movs	r0, #5
   94ac6:	4b9c      	ldr	r3, [pc, #624]	; (94d38 <cl_hep_controller+0x610>)
   94ac8:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   94aca:	4b9a      	ldr	r3, [pc, #616]	; (94d34 <cl_hep_controller+0x60c>)
   94acc:	2200      	movs	r2, #0
   94ace:	701a      	strb	r2, [r3, #0]
			break;
   94ad0:	e009      	b.n	94ae6 <cl_hep_controller+0x3be>

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94ad2:	2005      	movs	r0, #5
   94ad4:	4b98      	ldr	r3, [pc, #608]	; (94d38 <cl_hep_controller+0x610>)
   94ad6:	4798      	blx	r3
   94ad8:	4603      	mov	r3, r0
   94ada:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   94adc:	4b95      	ldr	r3, [pc, #596]	; (94d34 <cl_hep_controller+0x60c>)
   94ade:	2200      	movs	r2, #0
   94ae0:	701a      	strb	r2, [r3, #0]
			break;
   94ae2:	e000      	b.n	94ae6 <cl_hep_controller+0x3be>
			default:break;
   94ae4:	bf00      	nop

		}
		break;
   94ae6:	e168      	b.n	94dba <cl_hep_controller+0x692>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   94ae8:	79fb      	ldrb	r3, [r7, #7]
   94aea:	3b02      	subs	r3, #2
   94aec:	2b10      	cmp	r3, #16
   94aee:	d835      	bhi.n	94b5c <cl_hep_controller+0x434>
   94af0:	a201      	add	r2, pc, #4	; (adr r2, 94af8 <cl_hep_controller+0x3d0>)
   94af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94af6:	bf00      	nop
   94af8:	00094b3d 	.word	0x00094b3d
   94afc:	00094b5d 	.word	0x00094b5d
   94b00:	00094b5d 	.word	0x00094b5d
   94b04:	00094b5d 	.word	0x00094b5d
   94b08:	00094b5d 	.word	0x00094b5d
   94b0c:	00094b5d 	.word	0x00094b5d
   94b10:	00094b5d 	.word	0x00094b5d
   94b14:	00094b4b 	.word	0x00094b4b
   94b18:	00094b5d 	.word	0x00094b5d
   94b1c:	00094b5d 	.word	0x00094b5d
   94b20:	00094b5d 	.word	0x00094b5d
   94b24:	00094b4b 	.word	0x00094b4b
   94b28:	00094b5d 	.word	0x00094b5d
   94b2c:	00094b5d 	.word	0x00094b5d
   94b30:	00094b5d 	.word	0x00094b5d
   94b34:	00094b5d 	.word	0x00094b5d
   94b38:	00094b3d 	.word	0x00094b3d
// 				break;
// 			}
// 			break;
 			case CL_HEP_EVENT_LEFT_END_REACHED:
			case CL_HEP_EVENT_AT_LEFT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   94b3c:	2005      	movs	r0, #5
   94b3e:	4b7e      	ldr	r3, [pc, #504]	; (94d38 <cl_hep_controller+0x610>)
   94b40:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   94b42:	4b7c      	ldr	r3, [pc, #496]	; (94d34 <cl_hep_controller+0x60c>)
   94b44:	2200      	movs	r2, #0
   94b46:	701a      	strb	r2, [r3, #0]
			break;
   94b48:	e009      	b.n	94b5e <cl_hep_controller+0x436>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94b4a:	2005      	movs	r0, #5
   94b4c:	4b7a      	ldr	r3, [pc, #488]	; (94d38 <cl_hep_controller+0x610>)
   94b4e:	4798      	blx	r3
   94b50:	4603      	mov	r3, r0
   94b52:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   94b54:	4b77      	ldr	r3, [pc, #476]	; (94d34 <cl_hep_controller+0x60c>)
   94b56:	2200      	movs	r2, #0
   94b58:	701a      	strb	r2, [r3, #0]
			break;
   94b5a:	e000      	b.n	94b5e <cl_hep_controller+0x436>
			default:break;
   94b5c:	bf00      	nop

		}
		break;
   94b5e:	e12c      	b.n	94dba <cl_hep_controller+0x692>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   94b60:	79fb      	ldrb	r3, [r7, #7]
   94b62:	3b01      	subs	r3, #1
   94b64:	2b06      	cmp	r3, #6
   94b66:	f200 8123 	bhi.w	94db0 <cl_hep_controller+0x688>
   94b6a:	a201      	add	r2, pc, #4	; (adr r2, 94b70 <cl_hep_controller+0x448>)
   94b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94b70:	00094b95 	.word	0x00094b95
   94b74:	00094ba5 	.word	0x00094ba5
   94b78:	00094bad 	.word	0x00094bad
   94b7c:	00094b9d 	.word	0x00094b9d
   94b80:	00094bb5 	.word	0x00094bb5
   94b84:	00094bbf 	.word	0x00094bbf
   94b88:	00094b8d 	.word	0x00094b8d
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   94b8c:	4b69      	ldr	r3, [pc, #420]	; (94d34 <cl_hep_controller+0x60c>)
   94b8e:	2206      	movs	r2, #6
   94b90:	701a      	strb	r2, [r3, #0]
			break;
   94b92:	e018      	b.n	94bc6 <cl_hep_controller+0x49e>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   94b94:	4b67      	ldr	r3, [pc, #412]	; (94d34 <cl_hep_controller+0x60c>)
   94b96:	2203      	movs	r2, #3
   94b98:	701a      	strb	r2, [r3, #0]
			break;
   94b9a:	e014      	b.n	94bc6 <cl_hep_controller+0x49e>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   94b9c:	4b65      	ldr	r3, [pc, #404]	; (94d34 <cl_hep_controller+0x60c>)
   94b9e:	2204      	movs	r2, #4
   94ba0:	701a      	strb	r2, [r3, #0]
			break;
   94ba2:	e010      	b.n	94bc6 <cl_hep_controller+0x49e>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   94ba4:	4b63      	ldr	r3, [pc, #396]	; (94d34 <cl_hep_controller+0x60c>)
   94ba6:	2201      	movs	r2, #1
   94ba8:	701a      	strb	r2, [r3, #0]
			break;
   94baa:	e00c      	b.n	94bc6 <cl_hep_controller+0x49e>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   94bac:	4b61      	ldr	r3, [pc, #388]	; (94d34 <cl_hep_controller+0x60c>)
   94bae:	2202      	movs	r2, #2
   94bb0:	701a      	strb	r2, [r3, #0]
			break;
   94bb2:	e008      	b.n	94bc6 <cl_hep_controller+0x49e>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   94bb4:	683b      	ldr	r3, [r7, #0]
   94bb6:	b29a      	uxth	r2, r3
   94bb8:	4b60      	ldr	r3, [pc, #384]	; (94d3c <cl_hep_controller+0x614>)
   94bba:	801a      	strh	r2, [r3, #0]
			break;
   94bbc:	e003      	b.n	94bc6 <cl_hep_controller+0x49e>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   94bbe:	683b      	ldr	r3, [r7, #0]
   94bc0:	4a5f      	ldr	r2, [pc, #380]	; (94d40 <cl_hep_controller+0x618>)
   94bc2:	6013      	str	r3, [r2, #0]
			break;
   94bc4:	bf00      	nop
		}
		break;
   94bc6:	e0f3      	b.n	94db0 <cl_hep_controller+0x688>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   94bc8:	79fb      	ldrb	r3, [r7, #7]
   94bca:	3b02      	subs	r3, #2
   94bcc:	2b0c      	cmp	r3, #12
   94bce:	f200 80f1 	bhi.w	94db4 <cl_hep_controller+0x68c>
   94bd2:	a201      	add	r2, pc, #4	; (adr r2, 94bd8 <cl_hep_controller+0x4b0>)
   94bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94bd8:	00094c67 	.word	0x00094c67
   94bdc:	00094c6f 	.word	0x00094c6f
   94be0:	00094db5 	.word	0x00094db5
   94be4:	00094db5 	.word	0x00094db5
   94be8:	00094db5 	.word	0x00094db5
   94bec:	00094db5 	.word	0x00094db5
   94bf0:	00094db5 	.word	0x00094db5
   94bf4:	00094c77 	.word	0x00094c77
   94bf8:	00094c45 	.word	0x00094c45
   94bfc:	00094db5 	.word	0x00094db5
   94c00:	00094db5 	.word	0x00094db5
   94c04:	00094c77 	.word	0x00094c77
   94c08:	00094c0d 	.word	0x00094c0d
		{
	//	case CL_HEP_EVENT_SEC_TICK:
			case CL_HEP_EVENT_100ms_TICK:
			cl_hep_100mseconds++;
   94c0c:	4b4d      	ldr	r3, [pc, #308]	; (94d44 <cl_hep_controller+0x61c>)
   94c0e:	881b      	ldrh	r3, [r3, #0]
   94c10:	3301      	adds	r3, #1
   94c12:	b29a      	uxth	r2, r3
   94c14:	4b4b      	ldr	r3, [pc, #300]	; (94d44 <cl_hep_controller+0x61c>)
   94c16:	801a      	strh	r2, [r3, #0]
	//		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
			
			if(cl_hep_100mseconds >=400)
   94c18:	4b4a      	ldr	r3, [pc, #296]	; (94d44 <cl_hep_controller+0x61c>)
   94c1a:	881b      	ldrh	r3, [r3, #0]
   94c1c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   94c20:	d335      	bcc.n	94c8e <cl_hep_controller+0x566>
			{
				//cl_hep_seconds = 0;
				//if(++cl_hep_minutes > HEPARIN_BOLUS_TIMEOUT)
			//	if(++cl_hep_seconds > HEPARIN_BOLUS_TIMEOUT)
//				{
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94c22:	2005      	movs	r0, #5
   94c24:	4b44      	ldr	r3, [pc, #272]	; (94d38 <cl_hep_controller+0x610>)
   94c26:	4798      	blx	r3
   94c28:	4603      	mov	r3, r0
   94c2a:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   94c2c:	4b41      	ldr	r3, [pc, #260]	; (94d34 <cl_hep_controller+0x60c>)
   94c2e:	2200      	movs	r2, #0
   94c30:	701a      	strb	r2, [r3, #0]
					cl_hep_pumpFeedback_stop();
   94c32:	4b45      	ldr	r3, [pc, #276]	; (94d48 <cl_hep_controller+0x620>)
   94c34:	4798      	blx	r3
					cl_hep_seconds = 0;
   94c36:	4b45      	ldr	r3, [pc, #276]	; (94d4c <cl_hep_controller+0x624>)
   94c38:	2200      	movs	r2, #0
   94c3a:	801a      	strh	r2, [r3, #0]
					cl_hep_100mseconds=0;
   94c3c:	4b41      	ldr	r3, [pc, #260]	; (94d44 <cl_hep_controller+0x61c>)
   94c3e:	2200      	movs	r2, #0
   94c40:	801a      	strh	r2, [r3, #0]
					//cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
	//			}
			}

			break;
   94c42:	e024      	b.n	94c8e <cl_hep_controller+0x566>
			
			case CL_HEP_EVENT_STOP_BOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94c44:	2005      	movs	r0, #5
   94c46:	4b3c      	ldr	r3, [pc, #240]	; (94d38 <cl_hep_controller+0x610>)
   94c48:	4798      	blx	r3
   94c4a:	4603      	mov	r3, r0
   94c4c:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   94c4e:	4b39      	ldr	r3, [pc, #228]	; (94d34 <cl_hep_controller+0x60c>)
   94c50:	2200      	movs	r2, #0
   94c52:	701a      	strb	r2, [r3, #0]
			cl_hep_pumpFeedback_stop();
   94c54:	4b3c      	ldr	r3, [pc, #240]	; (94d48 <cl_hep_controller+0x620>)
   94c56:	4798      	blx	r3
			cl_hep_seconds = 0;
   94c58:	4b3c      	ldr	r3, [pc, #240]	; (94d4c <cl_hep_controller+0x624>)
   94c5a:	2200      	movs	r2, #0
   94c5c:	801a      	strh	r2, [r3, #0]
			cl_hep_100mseconds=0;
   94c5e:	4b39      	ldr	r3, [pc, #228]	; (94d44 <cl_hep_controller+0x61c>)
   94c60:	2200      	movs	r2, #0
   94c62:	801a      	strh	r2, [r3, #0]
			break;
   94c64:	e014      	b.n	94c90 <cl_hep_controller+0x568>
			
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   94c66:	4b33      	ldr	r3, [pc, #204]	; (94d34 <cl_hep_controller+0x60c>)
   94c68:	2201      	movs	r2, #1
   94c6a:	701a      	strb	r2, [r3, #0]
			break;
   94c6c:	e010      	b.n	94c90 <cl_hep_controller+0x568>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   94c6e:	4b31      	ldr	r3, [pc, #196]	; (94d34 <cl_hep_controller+0x60c>)
   94c70:	2202      	movs	r2, #2
   94c72:	701a      	strb	r2, [r3, #0]
			break;
   94c74:	e00c      	b.n	94c90 <cl_hep_controller+0x568>
// 			hp_State = CL_HEP_STATE_IDLE;
// 			break;
// 			
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_seconds = 0;
   94c76:	4b35      	ldr	r3, [pc, #212]	; (94d4c <cl_hep_controller+0x624>)
   94c78:	2200      	movs	r2, #0
   94c7a:	801a      	strh	r2, [r3, #0]
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94c7c:	2005      	movs	r0, #5
   94c7e:	4b2e      	ldr	r3, [pc, #184]	; (94d38 <cl_hep_controller+0x610>)
   94c80:	4798      	blx	r3
   94c82:	4603      	mov	r3, r0
   94c84:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   94c86:	4b2b      	ldr	r3, [pc, #172]	; (94d34 <cl_hep_controller+0x60c>)
   94c88:	2200      	movs	r2, #0
   94c8a:	701a      	strb	r2, [r3, #0]
			break;
   94c8c:	e000      	b.n	94c90 <cl_hep_controller+0x568>
					//cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
	//			}
			}

			break;
   94c8e:	bf00      	nop
			cl_hep_seconds = 0;
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   94c90:	e090      	b.n	94db4 <cl_hep_controller+0x68c>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   94c92:	79fb      	ldrb	r3, [r7, #7]
   94c94:	3b02      	subs	r3, #2
   94c96:	2b0d      	cmp	r3, #13
   94c98:	f200 808e 	bhi.w	94db8 <cl_hep_controller+0x690>
   94c9c:	a201      	add	r2, pc, #4	; (adr r2, 94ca4 <cl_hep_controller+0x57c>)
   94c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94ca2:	bf00      	nop
   94ca4:	00094d0d 	.word	0x00094d0d
   94ca8:	00094d59 	.word	0x00094d59
   94cac:	00094db9 	.word	0x00094db9
   94cb0:	00094db9 	.word	0x00094db9
   94cb4:	00094d6b 	.word	0x00094d6b
   94cb8:	00094db9 	.word	0x00094db9
   94cbc:	00094db9 	.word	0x00094db9
   94cc0:	00094d97 	.word	0x00094d97
   94cc4:	00094db9 	.word	0x00094db9
   94cc8:	00094db9 	.word	0x00094db9
   94ccc:	00094db9 	.word	0x00094db9
   94cd0:	00094db9 	.word	0x00094db9
   94cd4:	00094db9 	.word	0x00094db9
   94cd8:	00094cdd 	.word	0x00094cdd
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   94cdc:	f107 030e 	add.w	r3, r7, #14
   94ce0:	4618      	mov	r0, r3
   94ce2:	4b1b      	ldr	r3, [pc, #108]	; (94d50 <cl_hep_controller+0x628>)
   94ce4:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   94ce6:	f107 030c 	add.w	r3, r7, #12
   94cea:	4618      	mov	r0, r3
   94cec:	4b19      	ldr	r3, [pc, #100]	; (94d54 <cl_hep_controller+0x62c>)
   94cee:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   94cf0:	7bbb      	ldrb	r3, [r7, #14]
   94cf2:	2b06      	cmp	r3, #6
   94cf4:	d004      	beq.n	94d00 <cl_hep_controller+0x5d8>
   94cf6:	2b07      	cmp	r3, #7
   94cf8:	d004      	beq.n	94d04 <cl_hep_controller+0x5dc>
   94cfa:	2b02      	cmp	r3, #2
   94cfc:	d004      	beq.n	94d08 <cl_hep_controller+0x5e0>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   94cfe:	e004      	b.n	94d0a <cl_hep_controller+0x5e2>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   94d00:	bf00      	nop
   94d02:	e04c      	b.n	94d9e <cl_hep_controller+0x676>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   94d04:	bf00      	nop
   94d06:	e04a      	b.n	94d9e <cl_hep_controller+0x676>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   94d08:	bf00      	nop
						default:break;
					}


				break;
   94d0a:	e048      	b.n	94d9e <cl_hep_controller+0x676>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94d0c:	2005      	movs	r0, #5
   94d0e:	4b0a      	ldr	r3, [pc, #40]	; (94d38 <cl_hep_controller+0x610>)
   94d10:	4798      	blx	r3
   94d12:	4603      	mov	r3, r0
   94d14:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   94d16:	4b07      	ldr	r3, [pc, #28]	; (94d34 <cl_hep_controller+0x60c>)
   94d18:	2201      	movs	r2, #1
   94d1a:	701a      	strb	r2, [r3, #0]
				break;
   94d1c:	e03f      	b.n	94d9e <cl_hep_controller+0x676>
   94d1e:	bf00      	nop
   94d20:	0009ae31 	.word	0x0009ae31
   94d24:	0009ad41 	.word	0x0009ad41
   94d28:	00093ea9 	.word	0x00093ea9
   94d2c:	200719b8 	.word	0x200719b8
   94d30:	0009ae59 	.word	0x0009ae59
   94d34:	200719b1 	.word	0x200719b1
   94d38:	0009ad7d 	.word	0x0009ad7d
   94d3c:	200719b2 	.word	0x200719b2
   94d40:	200709c4 	.word	0x200709c4
   94d44:	200719b6 	.word	0x200719b6
   94d48:	00094e21 	.word	0x00094e21
   94d4c:	200719b4 	.word	0x200719b4
   94d50:	00094e39 	.word	0x00094e39
   94d54:	00094e59 	.word	0x00094e59
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   94d58:	2005      	movs	r0, #5
   94d5a:	4b1a      	ldr	r3, [pc, #104]	; (94dc4 <cl_hep_controller+0x69c>)
   94d5c:	4798      	blx	r3
   94d5e:	4603      	mov	r3, r0
   94d60:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   94d62:	4b19      	ldr	r3, [pc, #100]	; (94dc8 <cl_hep_controller+0x6a0>)
   94d64:	2202      	movs	r2, #2
   94d66:	701a      	strb	r2, [r3, #0]
				break;
   94d68:	e019      	b.n	94d9e <cl_hep_controller+0x676>
// 				case CL_HEP_EVENT_SET_BOLUS_RATE:
// 				cl_hep_bolusrate = data ;
// 				break;
 				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
 				
				 pwm_period = hep_calibration(data);
   94d6a:	683b      	ldr	r3, [r7, #0]
   94d6c:	4618      	mov	r0, r3
   94d6e:	4b17      	ldr	r3, [pc, #92]	; (94dcc <cl_hep_controller+0x6a4>)
   94d70:	4798      	blx	r3
   94d72:	4602      	mov	r2, r0
   94d74:	4b16      	ldr	r3, [pc, #88]	; (94dd0 <cl_hep_controller+0x6a8>)
   94d76:	601a      	str	r2, [r3, #0]
				 sv_cntrl_setHepa_dir();
   94d78:	4b16      	ldr	r3, [pc, #88]	; (94dd4 <cl_hep_controller+0x6ac>)
   94d7a:	4798      	blx	r3
				 sv_cntrl_activatepump(HEPARINPUMP);
   94d7c:	2005      	movs	r0, #5
   94d7e:	4b16      	ldr	r3, [pc, #88]	; (94dd8 <cl_hep_controller+0x6b0>)
   94d80:	4798      	blx	r3
				 cl_wait(100);
   94d82:	2064      	movs	r0, #100	; 0x64
   94d84:	4b15      	ldr	r3, [pc, #84]	; (94ddc <cl_hep_controller+0x6b4>)
   94d86:	4798      	blx	r3
				 sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   94d88:	4b11      	ldr	r3, [pc, #68]	; (94dd0 <cl_hep_controller+0x6a8>)
   94d8a:	681b      	ldr	r3, [r3, #0]
   94d8c:	4619      	mov	r1, r3
   94d8e:	2005      	movs	r0, #5
   94d90:	4b13      	ldr	r3, [pc, #76]	; (94de0 <cl_hep_controller+0x6b8>)
   94d92:	4798      	blx	r3
				 
 				break;
   94d94:	e003      	b.n	94d9e <cl_hep_controller+0x676>
// 				case 	CL_HEP_EVENT_PAUSEBOLUS:
// 				hp_State = CL_HEP_STATE_PAUSED;
// 				break;
 				case	CL_HEP_EVENT_STOPBOLUS:
 				hp_State = CL_HEP_STATE_IDLE;
   94d96:	4b0c      	ldr	r3, [pc, #48]	; (94dc8 <cl_hep_controller+0x6a0>)
   94d98:	2200      	movs	r2, #0
   94d9a:	701a      	strb	r2, [r3, #0]
 				break;
   94d9c:	bf00      	nop
			}
		
		break;
   94d9e:	e00b      	b.n	94db8 <cl_hep_controller+0x690>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   94da0:	bf00      	nop
   94da2:	e00a      	b.n	94dba <cl_hep_controller+0x692>
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   94da4:	bf00      	nop
   94da6:	e008      	b.n	94dba <cl_hep_controller+0x692>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   94da8:	bf00      	nop
   94daa:	e006      	b.n	94dba <cl_hep_controller+0x692>
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   94dac:	bf00      	nop
   94dae:	e004      	b.n	94dba <cl_hep_controller+0x692>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   94db0:	bf00      	nop
   94db2:	e002      	b.n	94dba <cl_hep_controller+0x692>
			cl_hep_seconds = 0;
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   94db4:	bf00      	nop
   94db6:	e000      	b.n	94dba <cl_hep_controller+0x692>
 				case	CL_HEP_EVENT_STOPBOLUS:
 				hp_State = CL_HEP_STATE_IDLE;
 				break;
			}
		
		break;
   94db8:	bf00      	nop

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
return CL_OK;	
   94dba:	2300      	movs	r3, #0
   94dbc:	4618      	mov	r0, r3
   94dbe:	3710      	adds	r7, #16
   94dc0:	46bd      	mov	sp, r7
   94dc2:	bd80      	pop	{r7, pc}
   94dc4:	0009ad7d 	.word	0x0009ad7d
   94dc8:	200719b1 	.word	0x200719b1
   94dcc:	00083ba5 	.word	0x00083ba5
   94dd0:	200719b8 	.word	0x200719b8
   94dd4:	0009ae31 	.word	0x0009ae31
   94dd8:	0009ad41 	.word	0x0009ad41
   94ddc:	00093ea9 	.word	0x00093ea9
   94de0:	0009ae59 	.word	0x0009ae59

00094de4 <cl_hep_pumpFeedback_start>:
static Cl_BoolType count_state = false;
Cl_Uint16Type cl_hep_bolus_count_rate =100;
static Cl_Uint16Type pin_status = 1,hp_start_status = 0,prev_hp_start_status = 0,hp_end_status = 0,prev_hp_end_status = 0;
//static Cl_Uint16Type counter = 0;
Cl_ReturnCodeType cl_hep_pumpFeedback_start(void)
{
   94de4:	b480      	push	{r7}
   94de6:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;
   94de8:	4b05      	ldr	r3, [pc, #20]	; (94e00 <cl_hep_pumpFeedback_start+0x1c>)
   94dea:	2203      	movs	r2, #3
   94dec:	701a      	strb	r2, [r3, #0]
	hep_rotation_counter=0;
   94dee:	4b05      	ldr	r3, [pc, #20]	; (94e04 <cl_hep_pumpFeedback_start+0x20>)
   94df0:	2200      	movs	r2, #0
   94df2:	801a      	strh	r2, [r3, #0]
	return 0;
   94df4:	2300      	movs	r3, #0
}
   94df6:	4618      	mov	r0, r3
   94df8:	46bd      	mov	sp, r7
   94dfa:	bc80      	pop	{r7}
   94dfc:	4770      	bx	lr
   94dfe:	bf00      	nop
   94e00:	200719be 	.word	0x200719be
   94e04:	200719c6 	.word	0x200719c6

00094e08 <cl_hep_selftest_start>:


Cl_ReturnCodeType cl_hep_selftest_start(void)
{
   94e08:	b480      	push	{r7}
   94e0a:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_SELFTEST;
   94e0c:	4b03      	ldr	r3, [pc, #12]	; (94e1c <cl_hep_selftest_start+0x14>)
   94e0e:	220c      	movs	r2, #12
   94e10:	701a      	strb	r2, [r3, #0]
	return 0;
   94e12:	2300      	movs	r3, #0
}
   94e14:	4618      	mov	r0, r3
   94e16:	46bd      	mov	sp, r7
   94e18:	bc80      	pop	{r7}
   94e1a:	4770      	bx	lr
   94e1c:	200719be 	.word	0x200719be

00094e20 <cl_hep_pumpFeedback_stop>:
{
	cl_hep_pump_state = CL_HEP_P_STATE_IDLE;
	return 0;
}
Cl_ReturnCodeType cl_hep_pumpFeedback_stop(void)
{
   94e20:	b480      	push	{r7}
   94e22:	af00      	add	r7, sp, #0
	
		cl_hep_pump_state = CL_HEP_P_STATE_IDLE;
   94e24:	4b03      	ldr	r3, [pc, #12]	; (94e34 <cl_hep_pumpFeedback_stop+0x14>)
   94e26:	2200      	movs	r2, #0
   94e28:	701a      	strb	r2, [r3, #0]
	return 0;
   94e2a:	2300      	movs	r3, #0
}
   94e2c:	4618      	mov	r0, r3
   94e2e:	46bd      	mov	sp, r7
   94e30:	bc80      	pop	{r7}
   94e32:	4770      	bx	lr
   94e34:	200719be 	.word	0x200719be

00094e38 <cl_hep_pumpFeedback_get_state>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   94e38:	b480      	push	{r7}
   94e3a:	b083      	sub	sp, #12
   94e3c:	af00      	add	r7, sp, #0
   94e3e:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   94e40:	4b04      	ldr	r3, [pc, #16]	; (94e54 <cl_hep_pumpFeedback_get_state+0x1c>)
   94e42:	781a      	ldrb	r2, [r3, #0]
   94e44:	687b      	ldr	r3, [r7, #4]
   94e46:	701a      	strb	r2, [r3, #0]
	return 0;
   94e48:	2300      	movs	r3, #0
}
   94e4a:	4618      	mov	r0, r3
   94e4c:	370c      	adds	r7, #12
   94e4e:	46bd      	mov	sp, r7
   94e50:	bc80      	pop	{r7}
   94e52:	4770      	bx	lr
   94e54:	200719be 	.word	0x200719be

00094e58 <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   94e58:	b480      	push	{r7}
   94e5a:	b083      	sub	sp, #12
   94e5c:	af00      	add	r7, sp, #0
   94e5e:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   94e60:	4b07      	ldr	r3, [pc, #28]	; (94e80 <cl_hep_pumpFeedback_get_delta+0x28>)
   94e62:	881a      	ldrh	r2, [r3, #0]
   94e64:	4b07      	ldr	r3, [pc, #28]	; (94e84 <cl_hep_pumpFeedback_get_delta+0x2c>)
   94e66:	881b      	ldrh	r3, [r3, #0]
   94e68:	1ad3      	subs	r3, r2, r3
   94e6a:	b29b      	uxth	r3, r3
   94e6c:	b21a      	sxth	r2, r3
   94e6e:	687b      	ldr	r3, [r7, #4]
   94e70:	801a      	strh	r2, [r3, #0]
	return 0;
   94e72:	2300      	movs	r3, #0
}
   94e74:	4618      	mov	r0, r3
   94e76:	370c      	adds	r7, #12
   94e78:	46bd      	mov	sp, r7
   94e7a:	bc80      	pop	{r7}
   94e7c:	4770      	bx	lr
   94e7e:	bf00      	nop
   94e80:	200719c2 	.word	0x200719c2
   94e84:	200719bc 	.word	0x200719bc

00094e88 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_hep_pumpFeedback_timer(void) // 20 ms clock
{
   94e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   94e8a:	af00      	add	r7, sp, #0
	
	if(cl_hep_pump_state != CL_HEP_P_STATE_IDLE)
   94e8c:	4b6e      	ldr	r3, [pc, #440]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   94e8e:	781b      	ldrb	r3, [r3, #0]
   94e90:	2b00      	cmp	r3, #0
   94e92:	f000 80ce 	beq.w	95032 <cl_hep_pumpFeedback_timer+0x1aa>
	{
		
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   94e96:	496d      	ldr	r1, [pc, #436]	; (9504c <cl_hep_pumpFeedback_timer+0x1c4>)
   94e98:	201b      	movs	r0, #27
   94e9a:	4b6d      	ldr	r3, [pc, #436]	; (95050 <cl_hep_pumpFeedback_timer+0x1c8>)
   94e9c:	4798      	blx	r3

		twentymscounter++;
   94e9e:	4b6d      	ldr	r3, [pc, #436]	; (95054 <cl_hep_pumpFeedback_timer+0x1cc>)
   94ea0:	881b      	ldrh	r3, [r3, #0]
   94ea2:	3301      	adds	r3, #1
   94ea4:	b29a      	uxth	r2, r3
   94ea6:	4b6b      	ldr	r3, [pc, #428]	; (95054 <cl_hep_pumpFeedback_timer+0x1cc>)
   94ea8:	801a      	strh	r2, [r3, #0]
// 		{
// 			cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
//  		}


		if(count_state == false)
   94eaa:	4b6b      	ldr	r3, [pc, #428]	; (95058 <cl_hep_pumpFeedback_timer+0x1d0>)
   94eac:	781b      	ldrb	r3, [r3, #0]
   94eae:	f083 0301 	eor.w	r3, r3, #1
   94eb2:	b2db      	uxtb	r3, r3
   94eb4:	2b00      	cmp	r3, #0
   94eb6:	d012      	beq.n	94ede <cl_hep_pumpFeedback_timer+0x56>
		{
			if(hep_rotataion_marker == 0 )
   94eb8:	4b64      	ldr	r3, [pc, #400]	; (9504c <cl_hep_pumpFeedback_timer+0x1c4>)
   94eba:	881b      	ldrh	r3, [r3, #0]
   94ebc:	2b00      	cmp	r3, #0
   94ebe:	f040 80b4 	bne.w	9502a <cl_hep_pumpFeedback_timer+0x1a2>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   94ec2:	4b66      	ldr	r3, [pc, #408]	; (9505c <cl_hep_pumpFeedback_timer+0x1d4>)
   94ec4:	881a      	ldrh	r2, [r3, #0]
   94ec6:	4b61      	ldr	r3, [pc, #388]	; (9504c <cl_hep_pumpFeedback_timer+0x1c4>)
   94ec8:	881b      	ldrh	r3, [r3, #0]
   94eca:	429a      	cmp	r2, r3
   94ecc:	f000 80ad 	beq.w	9502a <cl_hep_pumpFeedback_timer+0x1a2>
				{
					count_state = true;
   94ed0:	4b61      	ldr	r3, [pc, #388]	; (95058 <cl_hep_pumpFeedback_timer+0x1d0>)
   94ed2:	2201      	movs	r2, #1
   94ed4:	701a      	strb	r2, [r3, #0]
					//hep_rotation_counter++;
					twentymscounter = 0;
   94ed6:	4b5f      	ldr	r3, [pc, #380]	; (95054 <cl_hep_pumpFeedback_timer+0x1cc>)
   94ed8:	2200      	movs	r2, #0
   94eda:	801a      	strh	r2, [r3, #0]
   94edc:	e0a5      	b.n	9502a <cl_hep_pumpFeedback_timer+0x1a2>
				}
			}
		}
		else
		{
			if(hep_rotataion_marker == 0 )
   94ede:	4b5b      	ldr	r3, [pc, #364]	; (9504c <cl_hep_pumpFeedback_timer+0x1c4>)
   94ee0:	881b      	ldrh	r3, [r3, #0]
   94ee2:	2b00      	cmp	r3, #0
   94ee4:	f040 80a1 	bne.w	9502a <cl_hep_pumpFeedback_timer+0x1a2>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   94ee8:	4b5c      	ldr	r3, [pc, #368]	; (9505c <cl_hep_pumpFeedback_timer+0x1d4>)
   94eea:	881a      	ldrh	r2, [r3, #0]
   94eec:	4b57      	ldr	r3, [pc, #348]	; (9504c <cl_hep_pumpFeedback_timer+0x1c4>)
   94eee:	881b      	ldrh	r3, [r3, #0]
   94ef0:	429a      	cmp	r2, r3
   94ef2:	f000 809a 	beq.w	9502a <cl_hep_pumpFeedback_timer+0x1a2>
				{
					count_state = true;
   94ef6:	4b58      	ldr	r3, [pc, #352]	; (95058 <cl_hep_pumpFeedback_timer+0x1d0>)
   94ef8:	2201      	movs	r2, #1
   94efa:	701a      	strb	r2, [r3, #0]
					hep_rotation_counter++;
   94efc:	4b58      	ldr	r3, [pc, #352]	; (95060 <cl_hep_pumpFeedback_timer+0x1d8>)
   94efe:	881b      	ldrh	r3, [r3, #0]
   94f00:	3301      	adds	r3, #1
   94f02:	b29a      	uxth	r2, r3
   94f04:	4b56      	ldr	r3, [pc, #344]	; (95060 <cl_hep_pumpFeedback_timer+0x1d8>)
   94f06:	801a      	strh	r2, [r3, #0]
					hep_selftest_rotation_counter++;
   94f08:	4b56      	ldr	r3, [pc, #344]	; (95064 <cl_hep_pumpFeedback_timer+0x1dc>)
   94f0a:	881b      	ldrh	r3, [r3, #0]
   94f0c:	3301      	adds	r3, #1
   94f0e:	b29a      	uxth	r2, r3
   94f10:	4b54      	ldr	r3, [pc, #336]	; (95064 <cl_hep_pumpFeedback_timer+0x1dc>)
   94f12:	801a      	strh	r2, [r3, #0]
					hep_period = twentymscounter*20;
   94f14:	4b4f      	ldr	r3, [pc, #316]	; (95054 <cl_hep_pumpFeedback_timer+0x1cc>)
   94f16:	881b      	ldrh	r3, [r3, #0]
   94f18:	461a      	mov	r2, r3
   94f1a:	0092      	lsls	r2, r2, #2
   94f1c:	4413      	add	r3, r2
   94f1e:	009b      	lsls	r3, r3, #2
   94f20:	b29a      	uxth	r2, r3
   94f22:	4b51      	ldr	r3, [pc, #324]	; (95068 <cl_hep_pumpFeedback_timer+0x1e0>)
   94f24:	801a      	strh	r2, [r3, #0]
					if (hep_rotation_counter >= cl_hep_bolus_count_rate)
   94f26:	4b4e      	ldr	r3, [pc, #312]	; (95060 <cl_hep_pumpFeedback_timer+0x1d8>)
   94f28:	881a      	ldrh	r2, [r3, #0]
   94f2a:	4b50      	ldr	r3, [pc, #320]	; (9506c <cl_hep_pumpFeedback_timer+0x1e4>)
   94f2c:	881b      	ldrh	r3, [r3, #0]
   94f2e:	429a      	cmp	r2, r3
   94f30:	d309      	bcc.n	94f46 <cl_hep_pumpFeedback_timer+0xbe>
					
					{
						cl_hep_controller(CL_HEP_EVENT_STOP_BOLUS,0);
   94f32:	2100      	movs	r1, #0
   94f34:	200a      	movs	r0, #10
   94f36:	4b4e      	ldr	r3, [pc, #312]	; (95070 <cl_hep_pumpFeedback_timer+0x1e8>)
   94f38:	4798      	blx	r3
						hep_rotation_counter=0;
   94f3a:	4b49      	ldr	r3, [pc, #292]	; (95060 <cl_hep_pumpFeedback_timer+0x1d8>)
   94f3c:	2200      	movs	r2, #0
   94f3e:	801a      	strh	r2, [r3, #0]
						hep_selftest_rotation_counter = 0;
   94f40:	4b48      	ldr	r3, [pc, #288]	; (95064 <cl_hep_pumpFeedback_timer+0x1dc>)
   94f42:	2200      	movs	r2, #0
   94f44:	801a      	strh	r2, [r3, #0]
					}
						if (hep_selftest_rotation_counter >= 8)
   94f46:	4b47      	ldr	r3, [pc, #284]	; (95064 <cl_hep_pumpFeedback_timer+0x1dc>)
   94f48:	881b      	ldrh	r3, [r3, #0]
   94f4a:	2b07      	cmp	r3, #7
   94f4c:	d906      	bls.n	94f5c <cl_hep_pumpFeedback_timer+0xd4>
						{
							
							hep_periodvalue = hep_period;
   94f4e:	4b46      	ldr	r3, [pc, #280]	; (95068 <cl_hep_pumpFeedback_timer+0x1e0>)
   94f50:	881a      	ldrh	r2, [r3, #0]
   94f52:	4b48      	ldr	r3, [pc, #288]	; (95074 <cl_hep_pumpFeedback_timer+0x1ec>)
   94f54:	801a      	strh	r2, [r3, #0]
							hep_selftest_rotation_counter = 0;
   94f56:	4b43      	ldr	r3, [pc, #268]	; (95064 <cl_hep_pumpFeedback_timer+0x1dc>)
   94f58:	2200      	movs	r2, #0
   94f5a:	801a      	strh	r2, [r3, #0]
					
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
 
				
					if((cl_hep_pump_state != CL_HEP_P_STATE_STARTED) && (cl_hep_pump_state != CL_HEP_SELFTEST))
   94f5c:	4b3a      	ldr	r3, [pc, #232]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   94f5e:	781b      	ldrb	r3, [r3, #0]
   94f60:	2b03      	cmp	r3, #3
   94f62:	d055      	beq.n	95010 <cl_hep_pumpFeedback_timer+0x188>
   94f64:	4b38      	ldr	r3, [pc, #224]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   94f66:	781b      	ldrb	r3, [r3, #0]
   94f68:	2b0c      	cmp	r3, #12
   94f6a:	d051      	beq.n	95010 <cl_hep_pumpFeedback_timer+0x188>
					{
					
					 	{
						 	cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   94f6c:	4b36      	ldr	r3, [pc, #216]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   94f6e:	2205      	movs	r2, #5
   94f70:	701a      	strb	r2, [r3, #0]
					 	}
						
						if(hep_period > (1.01 *hep_expected_period))
   94f72:	4b3d      	ldr	r3, [pc, #244]	; (95068 <cl_hep_pumpFeedback_timer+0x1e0>)
   94f74:	881b      	ldrh	r3, [r3, #0]
   94f76:	461a      	mov	r2, r3
   94f78:	4b3f      	ldr	r3, [pc, #252]	; (95078 <cl_hep_pumpFeedback_timer+0x1f0>)
   94f7a:	4610      	mov	r0, r2
   94f7c:	4798      	blx	r3
   94f7e:	4605      	mov	r5, r0
   94f80:	460e      	mov	r6, r1
   94f82:	4b3e      	ldr	r3, [pc, #248]	; (9507c <cl_hep_pumpFeedback_timer+0x1f4>)
   94f84:	881b      	ldrh	r3, [r3, #0]
   94f86:	461a      	mov	r2, r3
   94f88:	4b3b      	ldr	r3, [pc, #236]	; (95078 <cl_hep_pumpFeedback_timer+0x1f0>)
   94f8a:	4610      	mov	r0, r2
   94f8c:	4798      	blx	r3
   94f8e:	4c3c      	ldr	r4, [pc, #240]	; (95080 <cl_hep_pumpFeedback_timer+0x1f8>)
   94f90:	a329      	add	r3, pc, #164	; (adr r3, 95038 <cl_hep_pumpFeedback_timer+0x1b0>)
   94f92:	e9d3 2300 	ldrd	r2, r3, [r3]
   94f96:	47a0      	blx	r4
   94f98:	4603      	mov	r3, r0
   94f9a:	460c      	mov	r4, r1
   94f9c:	461a      	mov	r2, r3
   94f9e:	4623      	mov	r3, r4
   94fa0:	4c38      	ldr	r4, [pc, #224]	; (95084 <cl_hep_pumpFeedback_timer+0x1fc>)
   94fa2:	4628      	mov	r0, r5
   94fa4:	4631      	mov	r1, r6
   94fa6:	47a0      	blx	r4
   94fa8:	4603      	mov	r3, r0
   94faa:	2b00      	cmp	r3, #0
   94fac:	d007      	beq.n	94fbe <cl_hep_pumpFeedback_timer+0x136>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   94fae:	4b26      	ldr	r3, [pc, #152]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   94fb0:	2206      	movs	r2, #6
   94fb2:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   94fb4:	2101      	movs	r1, #1
   94fb6:	2035      	movs	r0, #53	; 0x35
   94fb8:	4b33      	ldr	r3, [pc, #204]	; (95088 <cl_hep_pumpFeedback_timer+0x200>)
   94fba:	4798      	blx	r3
   94fbc:	e028      	b.n	95010 <cl_hep_pumpFeedback_timer+0x188>
						}
						else if(hep_period < (0.99 *hep_expected_period))
   94fbe:	4b2a      	ldr	r3, [pc, #168]	; (95068 <cl_hep_pumpFeedback_timer+0x1e0>)
   94fc0:	881b      	ldrh	r3, [r3, #0]
   94fc2:	461a      	mov	r2, r3
   94fc4:	4b2c      	ldr	r3, [pc, #176]	; (95078 <cl_hep_pumpFeedback_timer+0x1f0>)
   94fc6:	4610      	mov	r0, r2
   94fc8:	4798      	blx	r3
   94fca:	4605      	mov	r5, r0
   94fcc:	460e      	mov	r6, r1
   94fce:	4b2b      	ldr	r3, [pc, #172]	; (9507c <cl_hep_pumpFeedback_timer+0x1f4>)
   94fd0:	881b      	ldrh	r3, [r3, #0]
   94fd2:	461a      	mov	r2, r3
   94fd4:	4b28      	ldr	r3, [pc, #160]	; (95078 <cl_hep_pumpFeedback_timer+0x1f0>)
   94fd6:	4610      	mov	r0, r2
   94fd8:	4798      	blx	r3
   94fda:	4c29      	ldr	r4, [pc, #164]	; (95080 <cl_hep_pumpFeedback_timer+0x1f8>)
   94fdc:	a318      	add	r3, pc, #96	; (adr r3, 95040 <cl_hep_pumpFeedback_timer+0x1b8>)
   94fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   94fe2:	47a0      	blx	r4
   94fe4:	4603      	mov	r3, r0
   94fe6:	460c      	mov	r4, r1
   94fe8:	461a      	mov	r2, r3
   94fea:	4623      	mov	r3, r4
   94fec:	4c27      	ldr	r4, [pc, #156]	; (9508c <cl_hep_pumpFeedback_timer+0x204>)
   94fee:	4628      	mov	r0, r5
   94ff0:	4631      	mov	r1, r6
   94ff2:	47a0      	blx	r4
   94ff4:	4603      	mov	r3, r0
   94ff6:	2b00      	cmp	r3, #0
   94ff8:	d007      	beq.n	9500a <cl_hep_pumpFeedback_timer+0x182>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   94ffa:	4b13      	ldr	r3, [pc, #76]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   94ffc:	2207      	movs	r2, #7
   94ffe:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_OVERRUN,1);
   95000:	2101      	movs	r1, #1
   95002:	2034      	movs	r0, #52	; 0x34
   95004:	4b20      	ldr	r3, [pc, #128]	; (95088 <cl_hep_pumpFeedback_timer+0x200>)
   95006:	4798      	blx	r3
   95008:	e002      	b.n	95010 <cl_hep_pumpFeedback_timer+0x188>
						}
						else
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   9500a:	4b0f      	ldr	r3, [pc, #60]	; (95048 <cl_hep_pumpFeedback_timer+0x1c0>)
   9500c:	2205      	movs	r2, #5
   9500e:	701a      	strb	r2, [r3, #0]
						}
					}

				
					hep_freq_in_min  = ( 60000) / hep_period;
   95010:	4b15      	ldr	r3, [pc, #84]	; (95068 <cl_hep_pumpFeedback_timer+0x1e0>)
   95012:	881b      	ldrh	r3, [r3, #0]
   95014:	461a      	mov	r2, r3
   95016:	f64e 2360 	movw	r3, #60000	; 0xea60
   9501a:	fb93 f3f2 	sdiv	r3, r3, r2
   9501e:	b29a      	uxth	r2, r3
   95020:	4b1b      	ldr	r3, [pc, #108]	; (95090 <cl_hep_pumpFeedback_timer+0x208>)
   95022:	801a      	strh	r2, [r3, #0]
					twentymscounter = 0;
   95024:	4b0b      	ldr	r3, [pc, #44]	; (95054 <cl_hep_pumpFeedback_timer+0x1cc>)
   95026:	2200      	movs	r2, #0
   95028:	801a      	strh	r2, [r3, #0]
				
				}
			}
		
		}
		prev_hep_rotataion_marker = hep_rotataion_marker;
   9502a:	4b08      	ldr	r3, [pc, #32]	; (9504c <cl_hep_pumpFeedback_timer+0x1c4>)
   9502c:	881a      	ldrh	r2, [r3, #0]
   9502e:	4b0b      	ldr	r3, [pc, #44]	; (9505c <cl_hep_pumpFeedback_timer+0x1d4>)
   95030:	801a      	strh	r2, [r3, #0]
	
	}
	
	 return 0;
   95032:	2300      	movs	r3, #0
}
   95034:	4618      	mov	r0, r3
   95036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   95038:	c28f5c29 	.word	0xc28f5c29
   9503c:	3ff028f5 	.word	0x3ff028f5
   95040:	7ae147ae 	.word	0x7ae147ae
   95044:	3fefae14 	.word	0x3fefae14
   95048:	200719be 	.word	0x200719be
   9504c:	200709c8 	.word	0x200709c8
   95050:	0008fa01 	.word	0x0008fa01
   95054:	200719c0 	.word	0x200719c0
   95058:	200719ca 	.word	0x200719ca
   9505c:	200709ca 	.word	0x200709ca
   95060:	200719c6 	.word	0x200719c6
   95064:	200719c8 	.word	0x200719c8
   95068:	200719c2 	.word	0x200719c2
   9506c:	200709cc 	.word	0x200709cc
   95070:	00094729 	.word	0x00094729
   95074:	200724d4 	.word	0x200724d4
   95078:	000a765d 	.word	0x000a765d
   9507c:	200719bc 	.word	0x200719bc
   95080:	000a7729 	.word	0x000a7729
   95084:	000a7c49 	.word	0x000a7c49
   95088:	00082c31 	.word	0x00082c31
   9508c:	000a7c0d 	.word	0x000a7c0d
   95090:	200719c4 	.word	0x200719c4

00095094 <cl_hep_pump_enddetction_timer>:



//Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 20 ms clock
Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 100 ms clock
{
   95094:	b580      	push	{r7, lr}
   95096:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   95098:	4920      	ldr	r1, [pc, #128]	; (9511c <cl_hep_pump_enddetction_timer+0x88>)
   9509a:	2017      	movs	r0, #23
   9509c:	4b20      	ldr	r3, [pc, #128]	; (95120 <cl_hep_pump_enddetction_timer+0x8c>)
   9509e:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   950a0:	4b20      	ldr	r3, [pc, #128]	; (95124 <cl_hep_pump_enddetction_timer+0x90>)
   950a2:	881a      	ldrh	r2, [r3, #0]
   950a4:	4b1d      	ldr	r3, [pc, #116]	; (9511c <cl_hep_pump_enddetction_timer+0x88>)
   950a6:	881b      	ldrh	r3, [r3, #0]
   950a8:	429a      	cmp	r2, r3
   950aa:	d00c      	beq.n	950c6 <cl_hep_pump_enddetction_timer+0x32>
			{
				prev_hp_start_status = hp_start_status;
   950ac:	4b1b      	ldr	r3, [pc, #108]	; (9511c <cl_hep_pump_enddetction_timer+0x88>)
   950ae:	881a      	ldrh	r2, [r3, #0]
   950b0:	4b1c      	ldr	r3, [pc, #112]	; (95124 <cl_hep_pump_enddetction_timer+0x90>)
   950b2:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   950b4:	4b19      	ldr	r3, [pc, #100]	; (9511c <cl_hep_pump_enddetction_timer+0x88>)
   950b6:	881b      	ldrh	r3, [r3, #0]
   950b8:	2b00      	cmp	r3, #0
   950ba:	d10c      	bne.n	950d6 <cl_hep_pump_enddetction_timer+0x42>
				{
						cl_hep_controller(CL_HEP_EVENT_RIGHT_END_REACHED , 0);
   950bc:	2100      	movs	r1, #0
   950be:	2003      	movs	r0, #3
   950c0:	4b19      	ldr	r3, [pc, #100]	; (95128 <cl_hep_pump_enddetction_timer+0x94>)
   950c2:	4798      	blx	r3
   950c4:	e007      	b.n	950d6 <cl_hep_pump_enddetction_timer+0x42>
						//sv_cntrl_resetHepa_dir();
						//	sv_cntrl_setHepa_dir();
					
				}
			}
				else if(hp_start_status == 0)
   950c6:	4b15      	ldr	r3, [pc, #84]	; (9511c <cl_hep_pump_enddetction_timer+0x88>)
   950c8:	881b      	ldrh	r3, [r3, #0]
   950ca:	2b00      	cmp	r3, #0
   950cc:	d103      	bne.n	950d6 <cl_hep_pump_enddetction_timer+0x42>
				{
					cl_hep_controller(CL_HEP_EVENT_AT_RIGHT_END , 0); // here the information that we are at right end is sent to the controller.
   950ce:	2100      	movs	r1, #0
   950d0:	2013      	movs	r0, #19
   950d2:	4b15      	ldr	r3, [pc, #84]	; (95128 <cl_hep_pump_enddetction_timer+0x94>)
   950d4:	4798      	blx	r3
				}
				



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   950d6:	4915      	ldr	r1, [pc, #84]	; (9512c <cl_hep_pump_enddetction_timer+0x98>)
   950d8:	2018      	movs	r0, #24
   950da:	4b11      	ldr	r3, [pc, #68]	; (95120 <cl_hep_pump_enddetction_timer+0x8c>)
   950dc:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   950de:	4b14      	ldr	r3, [pc, #80]	; (95130 <cl_hep_pump_enddetction_timer+0x9c>)
   950e0:	881a      	ldrh	r2, [r3, #0]
   950e2:	4b12      	ldr	r3, [pc, #72]	; (9512c <cl_hep_pump_enddetction_timer+0x98>)
   950e4:	881b      	ldrh	r3, [r3, #0]
   950e6:	429a      	cmp	r2, r3
   950e8:	d00c      	beq.n	95104 <cl_hep_pump_enddetction_timer+0x70>
			{
				prev_hp_end_status = hp_end_status;
   950ea:	4b10      	ldr	r3, [pc, #64]	; (9512c <cl_hep_pump_enddetction_timer+0x98>)
   950ec:	881a      	ldrh	r2, [r3, #0]
   950ee:	4b10      	ldr	r3, [pc, #64]	; (95130 <cl_hep_pump_enddetction_timer+0x9c>)
   950f0:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 0)
   950f2:	4b0e      	ldr	r3, [pc, #56]	; (9512c <cl_hep_pump_enddetction_timer+0x98>)
   950f4:	881b      	ldrh	r3, [r3, #0]
   950f6:	2b00      	cmp	r3, #0
   950f8:	d10c      	bne.n	95114 <cl_hep_pump_enddetction_timer+0x80>
				{
					cl_hep_controller(CL_HEP_EVENT_LEFT_END_REACHED , 0);
   950fa:	2100      	movs	r1, #0
   950fc:	2002      	movs	r0, #2
   950fe:	4b0a      	ldr	r3, [pc, #40]	; (95128 <cl_hep_pump_enddetction_timer+0x94>)
   95100:	4798      	blx	r3
   95102:	e007      	b.n	95114 <cl_hep_pump_enddetction_timer+0x80>
					
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",8);
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
				}
			}
			else if(hp_end_status == 0)
   95104:	4b09      	ldr	r3, [pc, #36]	; (9512c <cl_hep_pump_enddetction_timer+0x98>)
   95106:	881b      	ldrh	r3, [r3, #0]
   95108:	2b00      	cmp	r3, #0
   9510a:	d103      	bne.n	95114 <cl_hep_pump_enddetction_timer+0x80>
			{
				cl_hep_controller(CL_HEP_EVENT_AT_LEFT_END , 0);
   9510c:	2100      	movs	r1, #0
   9510e:	2012      	movs	r0, #18
   95110:	4b05      	ldr	r3, [pc, #20]	; (95128 <cl_hep_pump_enddetction_timer+0x94>)
   95112:	4798      	blx	r3
			
		}
			
		
		
		return 0;
   95114:	2300      	movs	r3, #0
   95116:	4618      	mov	r0, r3
   95118:	bd80      	pop	{r7, pc}
   9511a:	bf00      	nop
   9511c:	200719cc 	.word	0x200719cc
   95120:	0008fa01 	.word	0x0008fa01
   95124:	200719ce 	.word	0x200719ce
   95128:	00094729 	.word	0x00094729
   9512c:	200719d0 	.word	0x200719d0
   95130:	200719d2 	.word	0x200719d2

00095134 <cl_level_switchcontroller>:
static InletValvestate_type v1_status = V1_UNDEFINED;
// extern Cl_Uint8Type sv_cntrl_activate_valve(sv_valvetype );
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );
extern Cl_BoolType IntakeReadyFlag;
Cl_ReturnCodeType cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   95134:	b580      	push	{r7, lr}
   95136:	b084      	sub	sp, #16
   95138:	af00      	add	r7, sp, #0
   9513a:	4603      	mov	r3, r0
   9513c:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   9513e:	79fb      	ldrb	r3, [r7, #7]
   95140:	3b01      	subs	r3, #1
   95142:	2b03      	cmp	r3, #3
   95144:	d861      	bhi.n	9520a <cl_level_switchcontroller+0xd6>
   95146:	a201      	add	r2, pc, #4	; (adr r2, 9514c <cl_level_switchcontroller+0x18>)
   95148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9514c:	0009515d 	.word	0x0009515d
   95150:	0009520b 	.word	0x0009520b
   95154:	0009520b 	.word	0x0009520b
   95158:	0009518b 	.word	0x0009518b
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   9515c:	203e      	movs	r0, #62	; 0x3e
   9515e:	4b2f      	ldr	r3, [pc, #188]	; (9521c <cl_level_switchcontroller+0xe8>)
   95160:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   95162:	203d      	movs	r0, #61	; 0x3d
   95164:	4b2d      	ldr	r3, [pc, #180]	; (9521c <cl_level_switchcontroller+0xe8>)
   95166:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   95168:	202d      	movs	r0, #45	; 0x2d
   9516a:	4b2c      	ldr	r3, [pc, #176]	; (9521c <cl_level_switchcontroller+0xe8>)
   9516c:	4798      	blx	r3
		
		toggle_count++;
   9516e:	4b2c      	ldr	r3, [pc, #176]	; (95220 <cl_level_switchcontroller+0xec>)
   95170:	881b      	ldrh	r3, [r3, #0]
   95172:	3301      	adds	r3, #1
   95174:	b29a      	uxth	r2, r3
   95176:	4b2a      	ldr	r3, [pc, #168]	; (95220 <cl_level_switchcontroller+0xec>)
   95178:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   9517a:	2300      	movs	r3, #0
   9517c:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   9517e:	4b28      	ldr	r3, [pc, #160]	; (95220 <cl_level_switchcontroller+0xec>)
   95180:	881b      	ldrh	r3, [r3, #0]
   95182:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   95184:	2315      	movs	r3, #21
   95186:	73bb      	strb	r3, [r7, #14]
			// low inlet flow alarm or level switch  malfunction
	//		Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);    commented
		}

	
		break;
   95188:	e042      	b.n	95210 <cl_level_switchcontroller+0xdc>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   9518a:	4b26      	ldr	r3, [pc, #152]	; (95224 <cl_level_switchcontroller+0xf0>)
   9518c:	781b      	ldrb	r3, [r3, #0]
   9518e:	2b01      	cmp	r3, #1
   95190:	d11b      	bne.n	951ca <cl_level_switchcontroller+0x96>
		{
			//stop flow
			if(IntakeReadyFlag){
   95192:	4b25      	ldr	r3, [pc, #148]	; (95228 <cl_level_switchcontroller+0xf4>)
   95194:	781b      	ldrb	r3, [r3, #0]
   95196:	2b00      	cmp	r3, #0
   95198:	d003      	beq.n	951a2 <cl_level_switchcontroller+0x6e>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   9519a:	2001      	movs	r0, #1
   9519c:	4b23      	ldr	r3, [pc, #140]	; (9522c <cl_level_switchcontroller+0xf8>)
   9519e:	4798      	blx	r3
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   951a0:	e035      	b.n	9520e <cl_level_switchcontroller+0xda>
			}
			else{
				
			
			
			sv_cntrl_deactivate_valve(VALVE_ID1);
   951a2:	2001      	movs	r0, #1
   951a4:	4b21      	ldr	r3, [pc, #132]	; (9522c <cl_level_switchcontroller+0xf8>)
   951a6:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   951a8:	4b1e      	ldr	r3, [pc, #120]	; (95224 <cl_level_switchcontroller+0xf0>)
   951aa:	2200      	movs	r2, #0
   951ac:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   951ae:	4b20      	ldr	r3, [pc, #128]	; (95230 <cl_level_switchcontroller+0xfc>)
   951b0:	2200      	movs	r2, #0
   951b2:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   951b4:	4b1f      	ldr	r3, [pc, #124]	; (95234 <cl_level_switchcontroller+0x100>)
   951b6:	781b      	ldrb	r3, [r3, #0]
   951b8:	2b02      	cmp	r3, #2
   951ba:	d028      	beq.n	9520e <cl_level_switchcontroller+0xda>
			{
				toggle_count = 0;
   951bc:	4b18      	ldr	r3, [pc, #96]	; (95220 <cl_level_switchcontroller+0xec>)
   951be:	2200      	movs	r2, #0
   951c0:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   951c2:	4b1c      	ldr	r3, [pc, #112]	; (95234 <cl_level_switchcontroller+0x100>)
   951c4:	2202      	movs	r2, #2
   951c6:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   951c8:	e021      	b.n	9520e <cl_level_switchcontroller+0xda>
				toggle_count = 0;
				v1_status = V1_OFF;
			}
			}
		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   951ca:	4b16      	ldr	r3, [pc, #88]	; (95224 <cl_level_switchcontroller+0xf0>)
   951cc:	781b      	ldrb	r3, [r3, #0]
   951ce:	2b02      	cmp	r3, #2
   951d0:	d11d      	bne.n	9520e <cl_level_switchcontroller+0xda>
		{
			//start flow
			if(IntakeReadyFlag){
   951d2:	4b15      	ldr	r3, [pc, #84]	; (95228 <cl_level_switchcontroller+0xf4>)
   951d4:	781b      	ldrb	r3, [r3, #0]
   951d6:	2b00      	cmp	r3, #0
   951d8:	d003      	beq.n	951e2 <cl_level_switchcontroller+0xae>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   951da:	2001      	movs	r0, #1
   951dc:	4b13      	ldr	r3, [pc, #76]	; (9522c <cl_level_switchcontroller+0xf8>)
   951de:	4798      	blx	r3
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   951e0:	e015      	b.n	9520e <cl_level_switchcontroller+0xda>
			if(IntakeReadyFlag){
				sv_cntrl_deactivate_valve(VALVE_ID1);
			}
			else{
			
			sv_cntrl_activate_valve(VALVE_ID1);
   951e2:	2001      	movs	r0, #1
   951e4:	4b14      	ldr	r3, [pc, #80]	; (95238 <cl_level_switchcontroller+0x104>)
   951e6:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   951e8:	4b0e      	ldr	r3, [pc, #56]	; (95224 <cl_level_switchcontroller+0xf0>)
   951ea:	2200      	movs	r2, #0
   951ec:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   951ee:	4b13      	ldr	r3, [pc, #76]	; (9523c <cl_level_switchcontroller+0x108>)
   951f0:	2200      	movs	r2, #0
   951f2:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   951f4:	4b0f      	ldr	r3, [pc, #60]	; (95234 <cl_level_switchcontroller+0x100>)
   951f6:	781b      	ldrb	r3, [r3, #0]
   951f8:	2b01      	cmp	r3, #1
   951fa:	d008      	beq.n	9520e <cl_level_switchcontroller+0xda>
			{
				toggle_count = 0;
   951fc:	4b08      	ldr	r3, [pc, #32]	; (95220 <cl_level_switchcontroller+0xec>)
   951fe:	2200      	movs	r2, #0
   95200:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   95202:	4b0c      	ldr	r3, [pc, #48]	; (95234 <cl_level_switchcontroller+0x100>)
   95204:	2201      	movs	r2, #1
   95206:	701a      	strb	r2, [r3, #0]
			}
			}
		}
		break;
   95208:	e001      	b.n	9520e <cl_level_switchcontroller+0xda>
		default:break;
   9520a:	bf00      	nop
   9520c:	e000      	b.n	95210 <cl_level_switchcontroller+0xdc>
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   9520e:	bf00      	nop
		default:break;
		
	}
	return CL_OK;
   95210:	2300      	movs	r3, #0
   95212:	4618      	mov	r0, r3
   95214:	3710      	adds	r7, #16
   95216:	46bd      	mov	sp, r7
   95218:	bd80      	pop	{r7, pc}
   9521a:	bf00      	nop
   9521c:	00082ad9 	.word	0x00082ad9
   95220:	200719da 	.word	0x200719da
   95224:	200719d4 	.word	0x200719d4
   95228:	20071b10 	.word	0x20071b10
   9522c:	0009ae01 	.word	0x0009ae01
   95230:	200719d8 	.word	0x200719d8
   95234:	200719dc 	.word	0x200719dc
   95238:	0009ade1 	.word	0x0009ade1
   9523c:	200719d6 	.word	0x200719d6

00095240 <cl_isouf_controller>:
	{FPCURRENTSTATUS,false,false,false},
	*/
};

Cl_ReturnCodeType cl_isouf_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   95240:	b580      	push	{r7, lr}
   95242:	b090      	sub	sp, #64	; 0x40
   95244:	af00      	add	r7, sp, #0
   95246:	4603      	mov	r3, r0
   95248:	71fb      	strb	r3, [r7, #7]
	
//	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
	Cl_Uint16Type uf_delta_value = 0 ;
   9524a:	2300      	movs	r3, #0
   9524c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   9524e:	2300      	movs	r3, #0
   95250:	63bb      	str	r3, [r7, #56]	; 0x38
	Cl_Uint32Type temptime = 0;
   95252:	2300      	movs	r3, #0
   95254:	637b      	str	r3, [r7, #52]	; 0x34
	
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   95256:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9525a:	2200      	movs	r2, #0
   9525c:	601a      	str	r2, [r3, #0]
   9525e:	711a      	strb	r2, [r3, #4]
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95260:	2359      	movs	r3, #89	; 0x59
   95262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Cl_Uint8Type data = 0;
   95266:	2300      	movs	r3, #0
   95268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Cl_Uint8Type datasize = 0;
   9526c:	2300      	movs	r3, #0
   9526e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   95272:	2300      	movs	r3, #0
   95274:	61fb      	str	r3, [r7, #28]
	
	cl_isouf_events cl_isouf_event = EVENT_ISOUF_NULL_EVENT;
   95276:	2300      	movs	r3, #0
   95278:	76fb      	strb	r3, [r7, #27]
	
	cl_isouf_retcode =  cl_isouf_translatemacevent( Cl_MacDlsisEvent, &cl_isouf_event);
   9527a:	f107 021b 	add.w	r2, r7, #27
   9527e:	79fb      	ldrb	r3, [r7, #7]
   95280:	4611      	mov	r1, r2
   95282:	4618      	mov	r0, r3
   95284:	4bb1      	ldr	r3, [pc, #708]	; (9554c <cl_isouf_controller+0x30c>)
   95286:	4798      	blx	r3
   95288:	4603      	mov	r3, r0
   9528a:	461a      	mov	r2, r3
   9528c:	4bb0      	ldr	r3, [pc, #704]	; (95550 <cl_isouf_controller+0x310>)
   9528e:	701a      	strb	r2, [r3, #0]
	
	
	switch(cl_isouf_event){
   95290:	7efb      	ldrb	r3, [r7, #27]
   95292:	3b10      	subs	r3, #16
   95294:	2b4c      	cmp	r3, #76	; 0x4c
   95296:	f200 8198 	bhi.w	955ca <cl_isouf_controller+0x38a>
   9529a:	a201      	add	r2, pc, #4	; (adr r2, 952a0 <cl_isouf_controller+0x60>)
   9529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   952a0:	000954bb 	.word	0x000954bb
   952a4:	0009547f 	.word	0x0009547f
   952a8:	00095499 	.word	0x00095499
   952ac:	000953df 	.word	0x000953df
   952b0:	00095417 	.word	0x00095417
   952b4:	00095475 	.word	0x00095475
   952b8:	000955cb 	.word	0x000955cb
   952bc:	000955cb 	.word	0x000955cb
   952c0:	000955cb 	.word	0x000955cb
   952c4:	000955cb 	.word	0x000955cb
   952c8:	000955cb 	.word	0x000955cb
   952cc:	000953d5 	.word	0x000953d5
   952d0:	000955cb 	.word	0x000955cb
   952d4:	000955cb 	.word	0x000955cb
   952d8:	000955cb 	.word	0x000955cb
   952dc:	000955cb 	.word	0x000955cb
   952e0:	000955cb 	.word	0x000955cb
   952e4:	000955cb 	.word	0x000955cb
   952e8:	000955cb 	.word	0x000955cb
   952ec:	000955cb 	.word	0x000955cb
   952f0:	000955cb 	.word	0x000955cb
   952f4:	000955cb 	.word	0x000955cb
   952f8:	000955cb 	.word	0x000955cb
   952fc:	000955cb 	.word	0x000955cb
   95300:	000955cb 	.word	0x000955cb
   95304:	000955cb 	.word	0x000955cb
   95308:	000955cb 	.word	0x000955cb
   9530c:	000955cb 	.word	0x000955cb
   95310:	000955cb 	.word	0x000955cb
   95314:	000955cb 	.word	0x000955cb
   95318:	000955cb 	.word	0x000955cb
   9531c:	000955cb 	.word	0x000955cb
   95320:	000955cb 	.word	0x000955cb
   95324:	000955cb 	.word	0x000955cb
   95328:	000955cb 	.word	0x000955cb
   9532c:	000955cb 	.word	0x000955cb
   95330:	000955cb 	.word	0x000955cb
   95334:	000955cb 	.word	0x000955cb
   95338:	000955cb 	.word	0x000955cb
   9533c:	000955cb 	.word	0x000955cb
   95340:	000955cb 	.word	0x000955cb
   95344:	000955cb 	.word	0x000955cb
   95348:	000955cb 	.word	0x000955cb
   9534c:	000955cb 	.word	0x000955cb
   95350:	000955cb 	.word	0x000955cb
   95354:	000955cb 	.word	0x000955cb
   95358:	000955cb 	.word	0x000955cb
   9535c:	000955cb 	.word	0x000955cb
   95360:	000955cb 	.word	0x000955cb
   95364:	000955cb 	.word	0x000955cb
   95368:	000955cb 	.word	0x000955cb
   9536c:	000955cb 	.word	0x000955cb
   95370:	000955cb 	.word	0x000955cb
   95374:	000955cb 	.word	0x000955cb
   95378:	000955cb 	.word	0x000955cb
   9537c:	000955cb 	.word	0x000955cb
   95380:	000955cb 	.word	0x000955cb
   95384:	000955cb 	.word	0x000955cb
   95388:	000955cb 	.word	0x000955cb
   9538c:	000955cb 	.word	0x000955cb
   95390:	000955cb 	.word	0x000955cb
   95394:	000955cb 	.word	0x000955cb
   95398:	000955cb 	.word	0x000955cb
   9539c:	000955cb 	.word	0x000955cb
   953a0:	000955cb 	.word	0x000955cb
   953a4:	000955cb 	.word	0x000955cb
   953a8:	000955cb 	.word	0x000955cb
   953ac:	000955cb 	.word	0x000955cb
   953b0:	000955cb 	.word	0x000955cb
   953b4:	000955cb 	.word	0x000955cb
   953b8:	000955cb 	.word	0x000955cb
   953bc:	000955cb 	.word	0x000955cb
   953c0:	000955cb 	.word	0x000955cb
   953c4:	000955cb 	.word	0x000955cb
   953c8:	000955cb 	.word	0x000955cb
   953cc:	000954f1 	.word	0x000954f1
   953d0:	00095571 	.word	0x00095571
		
		case EVENT_ISOUF_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   953d4:	2100      	movs	r1, #0
   953d6:	2007      	movs	r0, #7
   953d8:	4b5e      	ldr	r3, [pc, #376]	; (95554 <cl_isouf_controller+0x314>)
   953da:	4798      	blx	r3
		break;
   953dc:	e100      	b.n	955e0 <cl_isouf_controller+0x3a0>
		
		
		case EVENT_ISOUF_HEP_RATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   953de:	4b5e      	ldr	r3, [pc, #376]	; (95558 <cl_isouf_controller+0x318>)
   953e0:	7e1b      	ldrb	r3, [r3, #24]
   953e2:	2b00      	cmp	r3, #0
   953e4:	f000 80f3 	beq.w	955ce <cl_isouf_controller+0x38e>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   953e8:	4b5b      	ldr	r3, [pc, #364]	; (95558 <cl_isouf_controller+0x318>)
   953ea:	791b      	ldrb	r3, [r3, #4]
   953ec:	753b      	strb	r3, [r7, #20]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   953ee:	4b5a      	ldr	r3, [pc, #360]	; (95558 <cl_isouf_controller+0x318>)
   953f0:	795b      	ldrb	r3, [r3, #5]
   953f2:	757b      	strb	r3, [r7, #21]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   953f4:	4b58      	ldr	r3, [pc, #352]	; (95558 <cl_isouf_controller+0x318>)
   953f6:	799b      	ldrb	r3, [r3, #6]
   953f8:	75bb      	strb	r3, [r7, #22]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   953fa:	4b57      	ldr	r3, [pc, #348]	; (95558 <cl_isouf_controller+0x318>)
   953fc:	79db      	ldrb	r3, [r3, #7]
   953fe:	75fb      	strb	r3, [r7, #23]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   95400:	8abb      	ldrh	r3, [r7, #20]
   95402:	461a      	mov	r2, r3
   95404:	4b55      	ldr	r3, [pc, #340]	; (9555c <cl_isouf_controller+0x31c>)
   95406:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   95408:	4b54      	ldr	r3, [pc, #336]	; (9555c <cl_isouf_controller+0x31c>)
   9540a:	69db      	ldr	r3, [r3, #28]
   9540c:	4619      	mov	r1, r3
   9540e:	2006      	movs	r0, #6
   95410:	4b50      	ldr	r3, [pc, #320]	; (95554 <cl_isouf_controller+0x314>)
   95412:	4798      	blx	r3
		}
		break;
   95414:	e0db      	b.n	955ce <cl_isouf_controller+0x38e>
		case EVENT_ISOUF_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   95416:	4b50      	ldr	r3, [pc, #320]	; (95558 <cl_isouf_controller+0x318>)
   95418:	7e1b      	ldrb	r3, [r3, #24]
   9541a:	2b00      	cmp	r3, #0
   9541c:	f000 80d9 	beq.w	955d2 <cl_isouf_controller+0x392>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   95420:	4b4d      	ldr	r3, [pc, #308]	; (95558 <cl_isouf_controller+0x318>)
   95422:	795b      	ldrb	r3, [r3, #5]
   95424:	743b      	strb	r3, [r7, #16]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   95426:	4b4c      	ldr	r3, [pc, #304]	; (95558 <cl_isouf_controller+0x318>)
   95428:	799b      	ldrb	r3, [r3, #6]
   9542a:	747b      	strb	r3, [r7, #17]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9542c:	4b4a      	ldr	r3, [pc, #296]	; (95558 <cl_isouf_controller+0x318>)
   9542e:	79db      	ldrb	r3, [r3, #7]
   95430:	74bb      	strb	r3, [r7, #18]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   95432:	4b49      	ldr	r3, [pc, #292]	; (95558 <cl_isouf_controller+0x318>)
   95434:	7a1b      	ldrb	r3, [r3, #8]
   95436:	74fb      	strb	r3, [r7, #19]
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   95438:	4b47      	ldr	r3, [pc, #284]	; (95558 <cl_isouf_controller+0x318>)
   9543a:	791b      	ldrb	r3, [r3, #4]
   9543c:	2b01      	cmp	r3, #1
   9543e:	d104      	bne.n	9544a <cl_isouf_controller+0x20a>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   95440:	2100      	movs	r1, #0
   95442:	2001      	movs	r0, #1
   95444:	4b43      	ldr	r3, [pc, #268]	; (95554 <cl_isouf_controller+0x314>)
   95446:	4798      	blx	r3
			}
			
		}
		
		
		break;
   95448:	e0c3      	b.n	955d2 <cl_isouf_controller+0x392>
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9544a:	4b43      	ldr	r3, [pc, #268]	; (95558 <cl_isouf_controller+0x318>)
   9544c:	791b      	ldrb	r3, [r3, #4]
   9544e:	2b02      	cmp	r3, #2
   95450:	d104      	bne.n	9545c <cl_isouf_controller+0x21c>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   95452:	2100      	movs	r1, #0
   95454:	2004      	movs	r0, #4
   95456:	4b3f      	ldr	r3, [pc, #252]	; (95554 <cl_isouf_controller+0x314>)
   95458:	4798      	blx	r3
			}
			
		}
		
		
		break;
   9545a:	e0ba      	b.n	955d2 <cl_isouf_controller+0x392>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9545c:	4b3e      	ldr	r3, [pc, #248]	; (95558 <cl_isouf_controller+0x318>)
   9545e:	791b      	ldrb	r3, [r3, #4]
   95460:	2b00      	cmp	r3, #0
   95462:	f040 80b6 	bne.w	955d2 <cl_isouf_controller+0x392>
			{
				cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   95466:	4b3d      	ldr	r3, [pc, #244]	; (9555c <cl_isouf_controller+0x31c>)
   95468:	69db      	ldr	r3, [r3, #28]
   9546a:	4619      	mov	r1, r3
   9546c:	200b      	movs	r0, #11
   9546e:	4b39      	ldr	r3, [pc, #228]	; (95554 <cl_isouf_controller+0x314>)
   95470:	4798      	blx	r3
			}
			
		}
		
		
		break;
   95472:	e0ae      	b.n	955d2 <cl_isouf_controller+0x392>
		case EVENT_ISOUF_HEP_OFF:
		cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   95474:	2100      	movs	r1, #0
   95476:	2009      	movs	r0, #9
   95478:	4b36      	ldr	r3, [pc, #216]	; (95554 <cl_isouf_controller+0x314>)
   9547a:	4798      	blx	r3
		break;
   9547c:	e0b0      	b.n	955e0 <cl_isouf_controller+0x3a0>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   9547e:	2100      	movs	r1, #0
   95480:	2002      	movs	r0, #2
   95482:	4b37      	ldr	r3, [pc, #220]	; (95560 <cl_isouf_controller+0x320>)
   95484:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   95486:	2101      	movs	r1, #1
   95488:	2001      	movs	r0, #1
   9548a:	4b36      	ldr	r3, [pc, #216]	; (95564 <cl_isouf_controller+0x324>)
   9548c:	4798      	blx	r3
   9548e:	4603      	mov	r3, r0
   95490:	461a      	mov	r2, r3
   95492:	4b2f      	ldr	r3, [pc, #188]	; (95550 <cl_isouf_controller+0x310>)
   95494:	701a      	strb	r2, [r3, #0]
		break;
   95496:	e0a3      	b.n	955e0 <cl_isouf_controller+0x3a0>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   95498:	2100      	movs	r1, #0
   9549a:	2004      	movs	r0, #4
   9549c:	4b30      	ldr	r3, [pc, #192]	; (95560 <cl_isouf_controller+0x320>)
   9549e:	4798      	blx	r3
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
   954a0:	2101      	movs	r1, #1
   954a2:	203f      	movs	r0, #63	; 0x3f
   954a4:	4b30      	ldr	r3, [pc, #192]	; (95568 <cl_isouf_controller+0x328>)
   954a6:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   954a8:	2100      	movs	r1, #0
   954aa:	2001      	movs	r0, #1
   954ac:	4b2d      	ldr	r3, [pc, #180]	; (95564 <cl_isouf_controller+0x324>)
   954ae:	4798      	blx	r3
   954b0:	4603      	mov	r3, r0
   954b2:	461a      	mov	r2, r3
   954b4:	4b26      	ldr	r3, [pc, #152]	; (95550 <cl_isouf_controller+0x310>)
   954b6:	701a      	strb	r2, [r3, #0]
		break;
   954b8:	e092      	b.n	955e0 <cl_isouf_controller+0x3a0>
		case EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   954ba:	4b27      	ldr	r3, [pc, #156]	; (95558 <cl_isouf_controller+0x318>)
   954bc:	7e1b      	ldrb	r3, [r3, #24]
   954be:	2b00      	cmp	r3, #0
   954c0:	f000 8089 	beq.w	955d6 <cl_isouf_controller+0x396>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   954c4:	4b24      	ldr	r3, [pc, #144]	; (95558 <cl_isouf_controller+0x318>)
   954c6:	791b      	ldrb	r3, [r3, #4]
   954c8:	733b      	strb	r3, [r7, #12]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   954ca:	4b23      	ldr	r3, [pc, #140]	; (95558 <cl_isouf_controller+0x318>)
   954cc:	795b      	ldrb	r3, [r3, #5]
   954ce:	737b      	strb	r3, [r7, #13]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   954d0:	4b21      	ldr	r3, [pc, #132]	; (95558 <cl_isouf_controller+0x318>)
   954d2:	799b      	ldrb	r3, [r3, #6]
   954d4:	73bb      	strb	r3, [r7, #14]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   954d6:	4b20      	ldr	r3, [pc, #128]	; (95558 <cl_isouf_controller+0x318>)
   954d8:	79db      	ldrb	r3, [r3, #7]
   954da:	73fb      	strb	r3, [r7, #15]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   954dc:	89bb      	ldrh	r3, [r7, #12]
   954de:	4619      	mov	r1, r3
   954e0:	2001      	movs	r0, #1
   954e2:	4b1f      	ldr	r3, [pc, #124]	; (95560 <cl_isouf_controller+0x320>)
   954e4:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   954e6:	89bb      	ldrh	r3, [r7, #12]
   954e8:	461a      	mov	r2, r3
   954ea:	4b1c      	ldr	r3, [pc, #112]	; (9555c <cl_isouf_controller+0x31c>)
   954ec:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   954ee:	e072      	b.n	955d6 <cl_isouf_controller+0x396>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   954f0:	4b1a      	ldr	r3, [pc, #104]	; (9555c <cl_isouf_controller+0x31c>)
   954f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   954f4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   954f8:	d86f      	bhi.n	955da <cl_isouf_controller+0x39a>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   954fa:	4b18      	ldr	r3, [pc, #96]	; (9555c <cl_isouf_controller+0x31c>)
   954fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   954fe:	330a      	adds	r3, #10
   95500:	4a16      	ldr	r2, [pc, #88]	; (9555c <cl_isouf_controller+0x31c>)
   95502:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   95504:	4b15      	ldr	r3, [pc, #84]	; (9555c <cl_isouf_controller+0x31c>)
   95506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95508:	4619      	mov	r1, r3
   9550a:	2001      	movs	r0, #1
   9550c:	4b14      	ldr	r3, [pc, #80]	; (95560 <cl_isouf_controller+0x320>)
   9550e:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   95510:	230f      	movs	r3, #15
   95512:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   95516:	4b11      	ldr	r3, [pc, #68]	; (9555c <cl_isouf_controller+0x31c>)
   95518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9551a:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9551c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   95520:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   95524:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   95528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9552c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   95530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   95534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   95538:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9553c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   95540:	2205      	movs	r2, #5
   95542:	4619      	mov	r1, r3
   95544:	202a      	movs	r0, #42	; 0x2a
   95546:	4b09      	ldr	r3, [pc, #36]	; (9556c <cl_isouf_controller+0x32c>)
   95548:	4798      	blx	r3
			
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   9554a:	e046      	b.n	955da <cl_isouf_controller+0x39a>
   9554c:	0009698d 	.word	0x0009698d
   95550:	200719de 	.word	0x200719de
   95554:	00094729 	.word	0x00094729
   95558:	20072350 	.word	0x20072350
   9555c:	20072614 	.word	0x20072614
   95560:	00093f5d 	.word	0x00093f5d
   95564:	000829e5 	.word	0x000829e5
   95568:	00082c31 	.word	0x00082c31
   9556c:	0009cbd5 	.word	0x0009cbd5
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   95570:	4ba5      	ldr	r3, [pc, #660]	; (95808 <cl_isouf_controller+0x5c8>)
   95572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95574:	2b63      	cmp	r3, #99	; 0x63
   95576:	d932      	bls.n	955de <cl_isouf_controller+0x39e>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   95578:	4ba3      	ldr	r3, [pc, #652]	; (95808 <cl_isouf_controller+0x5c8>)
   9557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9557c:	3b0a      	subs	r3, #10
   9557e:	4aa2      	ldr	r2, [pc, #648]	; (95808 <cl_isouf_controller+0x5c8>)
   95580:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   95582:	4ba1      	ldr	r3, [pc, #644]	; (95808 <cl_isouf_controller+0x5c8>)
   95584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95586:	4619      	mov	r1, r3
   95588:	2001      	movs	r0, #1
   9558a:	4ba0      	ldr	r3, [pc, #640]	; (9580c <cl_isouf_controller+0x5cc>)
   9558c:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9558e:	230f      	movs	r3, #15
   95590:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   95594:	4b9c      	ldr	r3, [pc, #624]	; (95808 <cl_isouf_controller+0x5c8>)
   95596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   95598:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9559a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9559e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   955a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   955a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   955aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   955ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   955b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   955b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   955ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
   955be:	2205      	movs	r2, #5
   955c0:	4619      	mov	r1, r3
   955c2:	202a      	movs	r0, #42	; 0x2a
   955c4:	4b92      	ldr	r3, [pc, #584]	; (95810 <cl_isouf_controller+0x5d0>)
   955c6:	4798      	blx	r3
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   955c8:	e009      	b.n	955de <cl_isouf_controller+0x39e>
		
		
		default : break;
   955ca:	bf00      	nop
   955cc:	e008      	b.n	955e0 <cl_isouf_controller+0x3a0>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			Treatdata[ID_heprate] = cl_temp.Twobyte;
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
		}
		break;
   955ce:	bf00      	nop
   955d0:	e006      	b.n	955e0 <cl_isouf_controller+0x3a0>
			}
			
		}
		
		
		break;
   955d2:	bf00      	nop
   955d4:	e004      	b.n	955e0 <cl_isouf_controller+0x3a0>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   955d6:	bf00      	nop
   955d8:	e002      	b.n	955e0 <cl_isouf_controller+0x3a0>
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   955da:	bf00      	nop
   955dc:	e000      	b.n	955e0 <cl_isouf_controller+0x3a0>
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   955de:	bf00      	nop
		
		default : break;
	}
	
	
	switch(cl_isouf_state)
   955e0:	4b8c      	ldr	r3, [pc, #560]	; (95814 <cl_isouf_controller+0x5d4>)
   955e2:	781b      	ldrb	r3, [r3, #0]
   955e4:	2b08      	cmp	r3, #8
   955e6:	f200 8108 	bhi.w	957fa <cl_isouf_controller+0x5ba>
   955ea:	a201      	add	r2, pc, #4	; (adr r2, 955f0 <cl_isouf_controller+0x3b0>)
   955ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   955f0:	00095615 	.word	0x00095615
   955f4:	00095633 	.word	0x00095633
   955f8:	000957a5 	.word	0x000957a5
   955fc:	000957fb 	.word	0x000957fb
   95600:	000957c3 	.word	0x000957c3
   95604:	000957fb 	.word	0x000957fb
   95608:	000957fb 	.word	0x000957fb
   9560c:	000957e7 	.word	0x000957e7
   95610:	00095717 	.word	0x00095717
	{
			case CL_ISOUF_STATE_IDLE:
			switch (cl_isouf_event)
   95614:	7efb      	ldrb	r3, [r7, #27]
   95616:	2b16      	cmp	r3, #22
   95618:	d000      	beq.n	9561c <cl_isouf_controller+0x3dc>
					ufRemoved = 0;
					Cl_Isouf_start();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
					break;
					default: break;
   9561a:	e009      	b.n	95630 <cl_isouf_controller+0x3f0>
				
				{
					case EVENT_ISOUF_START:
					
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   9561c:	4b7e      	ldr	r3, [pc, #504]	; (95818 <cl_isouf_controller+0x5d8>)
   9561e:	f04f 0200 	mov.w	r2, #0
   95622:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   95624:	4b7d      	ldr	r3, [pc, #500]	; (9581c <cl_isouf_controller+0x5dc>)
   95626:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95628:	4b7a      	ldr	r3, [pc, #488]	; (95814 <cl_isouf_controller+0x5d4>)
   9562a:	2201      	movs	r2, #1
   9562c:	701a      	strb	r2, [r3, #0]
					break;
   9562e:	bf00      	nop
					default: break;
				}
				break;
   95630:	e0e4      	b.n	957fc <cl_isouf_controller+0x5bc>
				
					
			case CL_ISOUF_STATE_STARTED:
			
			switch(cl_isouf_event){
   95632:	7efb      	ldrb	r3, [r7, #27]
   95634:	3b08      	subs	r3, #8
   95636:	2b10      	cmp	r3, #16
   95638:	d869      	bhi.n	9570e <cl_isouf_controller+0x4ce>
   9563a:	a201      	add	r2, pc, #4	; (adr r2, 95640 <cl_isouf_controller+0x400>)
   9563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95640:	00095685 	.word	0x00095685
   95644:	000956a3 	.word	0x000956a3
   95648:	0009568b 	.word	0x0009568b
   9564c:	0009570f 	.word	0x0009570f
   95650:	00095695 	.word	0x00095695
   95654:	0009570f 	.word	0x0009570f
   95658:	0009570f 	.word	0x0009570f
   9565c:	0009570f 	.word	0x0009570f
   95660:	0009570f 	.word	0x0009570f
   95664:	0009570f 	.word	0x0009570f
   95668:	0009570f 	.word	0x0009570f
   9566c:	0009570f 	.word	0x0009570f
   95670:	0009570f 	.word	0x0009570f
   95674:	0009570f 	.word	0x0009570f
   95678:	0009570f 	.word	0x0009570f
   9567c:	0009570f 	.word	0x0009570f
   95680:	00095709 	.word	0x00095709
// 				cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
// 				break;
				
				case EVENT_ISOUF_TICK_500MS :
				
					cl_isouf_retcode == cl_checkforblooddetection();
   95684:	4b66      	ldr	r3, [pc, #408]	; (95820 <cl_isouf_controller+0x5e0>)
   95686:	4798      	blx	r3
				
				break;
   95688:	e044      	b.n	95714 <cl_isouf_controller+0x4d4>
				
				case EVENT_ISOUF_TICK_MINUTE:
				
				//isoufRemoved =  isoufRemoved + (Treatdata[ID_ufrate]/10);
				
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   9568a:	2100      	movs	r1, #0
   9568c:	200a      	movs	r0, #10
   9568e:	4b65      	ldr	r3, [pc, #404]	; (95824 <cl_isouf_controller+0x5e4>)
   95690:	4798      	blx	r3
			break;
   95692:	e03f      	b.n	95714 <cl_isouf_controller+0x4d4>
			
			case EVENT_ISOUF_ALARM:
			cl_isouf_retcode = Cl_Isouf_ProcessAlarms();
   95694:	4b64      	ldr	r3, [pc, #400]	; (95828 <cl_isouf_controller+0x5e8>)
   95696:	4798      	blx	r3
   95698:	4603      	mov	r3, r0
   9569a:	461a      	mov	r2, r3
   9569c:	4b63      	ldr	r3, [pc, #396]	; (9582c <cl_isouf_controller+0x5ec>)
   9569e:	701a      	strb	r2, [r3, #0]
				break;
   956a0:	e038      	b.n	95714 <cl_isouf_controller+0x4d4>
				case EVENT_ISOUF_TICK_SECOND :
				
					Cl_ISOufTotalSecondscounter ++ ;
   956a2:	4b63      	ldr	r3, [pc, #396]	; (95830 <cl_isouf_controller+0x5f0>)
   956a4:	681b      	ldr	r3, [r3, #0]
   956a6:	3301      	adds	r3, #1
   956a8:	4a61      	ldr	r2, [pc, #388]	; (95830 <cl_isouf_controller+0x5f0>)
   956aa:	6013      	str	r3, [r2, #0]
				//	if(cl_isouf_retcode == CL_OK){    // manav03 commented
					
					// check for completion
					//cl_sendisoufdata();
					
						Cl_Iso_Senddata();
   956ac:	4b61      	ldr	r3, [pc, #388]	; (95834 <cl_isouf_controller+0x5f4>)
   956ae:	4798      	blx	r3
						if(Cl_ISOufTotalSecondscounter >= Treatdata[ID_treattime]){
   956b0:	4b55      	ldr	r3, [pc, #340]	; (95808 <cl_isouf_controller+0x5c8>)
   956b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   956b4:	4a5e      	ldr	r2, [pc, #376]	; (95830 <cl_isouf_controller+0x5f0>)
   956b6:	6812      	ldr	r2, [r2, #0]
   956b8:	4293      	cmp	r3, r2
   956ba:	d82a      	bhi.n	95712 <cl_isouf_controller+0x4d2>
						
						// complete
						cl_isouf_retcode == cl_isoufcompleted();
   956bc:	4b5e      	ldr	r3, [pc, #376]	; (95838 <cl_isouf_controller+0x5f8>)
   956be:	4798      	blx	r3
						if(cl_isouf_retcode == CL_OK){
   956c0:	4b5a      	ldr	r3, [pc, #360]	; (9582c <cl_isouf_controller+0x5ec>)
   956c2:	781b      	ldrb	r3, [r3, #0]
   956c4:	2b00      	cmp	r3, #0
   956c6:	d124      	bne.n	95712 <cl_isouf_controller+0x4d2>
							
												
							cl_isouf_state = CL_ISOUF_STATE_COMPLETED;
   956c8:	4b52      	ldr	r3, [pc, #328]	; (95814 <cl_isouf_controller+0x5d4>)
   956ca:	2204      	movs	r2, #4
   956cc:	701a      	strb	r2, [r3, #0]
							isouf = false;
   956ce:	4b5b      	ldr	r3, [pc, #364]	; (9583c <cl_isouf_controller+0x5fc>)
   956d0:	2200      	movs	r2, #0
   956d2:	701a      	strb	r2, [r3, #0]
							command = CON_TX_COMMAND_COMMAND_ISOUF_COMPLETED;
   956d4:	234a      	movs	r3, #74	; 0x4a
   956d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   956da:	2301      	movs	r3, #1
   956dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							cl_isouf_retcode = Cl_SendDatatoconsole(command,&data,1);
   956e0:	f107 0123 	add.w	r1, r7, #35	; 0x23
   956e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   956e8:	2201      	movs	r2, #1
   956ea:	4618      	mov	r0, r3
   956ec:	4b48      	ldr	r3, [pc, #288]	; (95810 <cl_isouf_controller+0x5d0>)
   956ee:	4798      	blx	r3
   956f0:	4603      	mov	r3, r0
   956f2:	461a      	mov	r2, r3
   956f4:	4b4d      	ldr	r3, [pc, #308]	; (9582c <cl_isouf_controller+0x5ec>)
   956f6:	701a      	strb	r2, [r3, #0]
							cl_isouf_retcode = Cl_mac_apprequesthandler(MACREQ_ISOUF_COMPLETED);
   956f8:	205a      	movs	r0, #90	; 0x5a
   956fa:	4b51      	ldr	r3, [pc, #324]	; (95840 <cl_isouf_controller+0x600>)
   956fc:	4798      	blx	r3
   956fe:	4603      	mov	r3, r0
   95700:	461a      	mov	r2, r3
   95702:	4b4a      	ldr	r3, [pc, #296]	; (9582c <cl_isouf_controller+0x5ec>)
   95704:	701a      	strb	r2, [r3, #0]
			//	}	
			//	else{
					// raise alarm
			//	}
				
				break;
   95706:	e004      	b.n	95712 <cl_isouf_controller+0x4d2>
				
				
				case EVENT_ISOUF_STOP :
				
					Cl_Isouf_stop();
   95708:	4b4e      	ldr	r3, [pc, #312]	; (95844 <cl_isouf_controller+0x604>)
   9570a:	4798      	blx	r3
				// stop uf pump
					
				
				break;
   9570c:	e002      	b.n	95714 <cl_isouf_controller+0x4d4>
				// implement iso uf stop state
				// implement bp on event
				// implement bp off event  , iso uf should stop
				
				
				default: break;
   9570e:	bf00      	nop
   95710:	e074      	b.n	957fc <cl_isouf_controller+0x5bc>
			//	}	
			//	else{
					// raise alarm
			//	}
				
				break;
   95712:	bf00      	nop
				
				default: break;
				
			}
			
			break;
   95714:	e072      	b.n	957fc <cl_isouf_controller+0x5bc>
			
			case CL_ISOUF_STATE_CRITICAL_ALARM:
			
			switch(cl_isouf_event){
   95716:	7efb      	ldrb	r3, [r7, #27]
   95718:	2b01      	cmp	r3, #1
   9571a:	d008      	beq.n	9572e <cl_isouf_controller+0x4ee>
   9571c:	2b16      	cmp	r3, #22
   9571e:	d000      	beq.n	95722 <cl_isouf_controller+0x4e2>
				
				
				break;
				
				
				default: break;
   95720:	e03f      	b.n	957a2 <cl_isouf_controller+0x562>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				Cl_Isouf_start();
   95722:	4b3e      	ldr	r3, [pc, #248]	; (9581c <cl_isouf_controller+0x5dc>)
   95724:	4798      	blx	r3
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
   95726:	4b3b      	ldr	r3, [pc, #236]	; (95814 <cl_isouf_controller+0x5d4>)
   95728:	2201      	movs	r2, #1
   9572a:	701a      	strb	r2, [r3, #0]
				break;
   9572c:	e039      	b.n	957a2 <cl_isouf_controller+0x562>
				case EVENT_ISOUF_CLR_ALARM:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				// manav03 added
				if(isopowerFailureFlag == 1){
   9572e:	4b46      	ldr	r3, [pc, #280]	; (95848 <cl_isouf_controller+0x608>)
   95730:	681b      	ldr	r3, [r3, #0]
   95732:	2b01      	cmp	r3, #1
   95734:	d120      	bne.n	95778 <cl_isouf_controller+0x538>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&isouf_powerFailSensorData);
   95736:	4945      	ldr	r1, [pc, #276]	; (9584c <cl_isouf_controller+0x60c>)
   95738:	2024      	movs	r0, #36	; 0x24
   9573a:	4b45      	ldr	r3, [pc, #276]	; (95850 <cl_isouf_controller+0x610>)
   9573c:	4798      	blx	r3
					
					if(isouf_powerFailSensorData == 0){
   9573e:	4b43      	ldr	r3, [pc, #268]	; (9584c <cl_isouf_controller+0x60c>)
   95740:	881b      	ldrh	r3, [r3, #0]
   95742:	2b00      	cmp	r3, #0
   95744:	d12c      	bne.n	957a0 <cl_isouf_controller+0x560>
						
						sv_cntrl_resetyellowalarm();
   95746:	4b43      	ldr	r3, [pc, #268]	; (95854 <cl_isouf_controller+0x614>)
   95748:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9574a:	4b43      	ldr	r3, [pc, #268]	; (95858 <cl_isouf_controller+0x618>)
   9574c:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9574e:	4b43      	ldr	r3, [pc, #268]	; (9585c <cl_isouf_controller+0x61c>)
   95750:	4798      	blx	r3
						
						isopowerFailureFlag = 0;
   95752:	4b3d      	ldr	r3, [pc, #244]	; (95848 <cl_isouf_controller+0x608>)
   95754:	2200      	movs	r2, #0
   95756:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   95758:	2351      	movs	r3, #81	; 0x51
   9575a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
						Cl_SendDatatoconsole(command,&data,0);
   9575e:	f107 0123 	add.w	r1, r7, #35	; 0x23
   95762:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   95766:	2200      	movs	r2, #0
   95768:	4618      	mov	r0, r3
   9576a:	4b29      	ldr	r3, [pc, #164]	; (95810 <cl_isouf_controller+0x5d0>)
   9576c:	4798      	blx	r3
						Cl_Isouf_ResetAlertsforReassertion();
   9576e:	4b3c      	ldr	r3, [pc, #240]	; (95860 <cl_isouf_controller+0x620>)
   95770:	4798      	blx	r3
						sv_cntrl_activatevenousclamp();
   95772:	4b3c      	ldr	r3, [pc, #240]	; (95864 <cl_isouf_controller+0x624>)
   95774:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				}
				
				
				
				break;
   95776:	e013      	b.n	957a0 <cl_isouf_controller+0x560>
					
					}
				}
				else{
					
					command = CON_TX_COMMAND_ALARM_CLEARED;
   95778:	2351      	movs	r3, #81	; 0x51
   9577a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					Cl_SendDatatoconsole(command,&data,0);
   9577e:	f107 0123 	add.w	r1, r7, #35	; 0x23
   95782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   95786:	2200      	movs	r2, #0
   95788:	4618      	mov	r0, r3
   9578a:	4b21      	ldr	r3, [pc, #132]	; (95810 <cl_isouf_controller+0x5d0>)
   9578c:	4798      	blx	r3
					
					Cl_Isouf_ResetAlertsforReassertion();
   9578e:	4b34      	ldr	r3, [pc, #208]	; (95860 <cl_isouf_controller+0x620>)
   95790:	4798      	blx	r3
					sv_cntrl_activatevenousclamp();
   95792:	4b34      	ldr	r3, [pc, #208]	; (95864 <cl_isouf_controller+0x624>)
   95794:	4798      	blx	r3
					Cl_Isouf_start();
   95796:	4b21      	ldr	r3, [pc, #132]	; (9581c <cl_isouf_controller+0x5dc>)
   95798:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   9579a:	4b1e      	ldr	r3, [pc, #120]	; (95814 <cl_isouf_controller+0x5d4>)
   9579c:	2201      	movs	r2, #1
   9579e:	701a      	strb	r2, [r3, #0]
				}
				
				
				
				break;
   957a0:	bf00      	nop
				
				
				default: break;
			}
			
			break;
   957a2:	e02b      	b.n	957fc <cl_isouf_controller+0x5bc>
			
			case CL_ISOUF_STATE_STOPPED:
			
				switch(cl_isouf_event){
   957a4:	7efb      	ldrb	r3, [r7, #27]
   957a6:	2b16      	cmp	r3, #22
   957a8:	d000      	beq.n	957ac <cl_isouf_controller+0x56c>
				ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
					
				default: break;	
   957aa:	e009      	b.n	957c0 <cl_isouf_controller+0x580>
					
					case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				ufRemoved = 0;
   957ac:	4b1a      	ldr	r3, [pc, #104]	; (95818 <cl_isouf_controller+0x5d8>)
   957ae:	f04f 0200 	mov.w	r2, #0
   957b2:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   957b4:	4b19      	ldr	r3, [pc, #100]	; (9581c <cl_isouf_controller+0x5dc>)
   957b6:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   957b8:	4b16      	ldr	r3, [pc, #88]	; (95814 <cl_isouf_controller+0x5d4>)
   957ba:	2201      	movs	r2, #1
   957bc:	701a      	strb	r2, [r3, #0]
				break;
   957be:	bf00      	nop
				default: break;	
					
					
				}
			
			break;
   957c0:	e01c      	b.n	957fc <cl_isouf_controller+0x5bc>
			
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
   957c2:	7efb      	ldrb	r3, [r7, #27]
   957c4:	2b09      	cmp	r3, #9
   957c6:	d00c      	beq.n	957e2 <cl_isouf_controller+0x5a2>
   957c8:	2b16      	cmp	r3, #22
   957ca:	d000      	beq.n	957ce <cl_isouf_controller+0x58e>
					ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
			
			default : break;	
   957cc:	e00a      	b.n	957e4 <cl_isouf_controller+0x5a4>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   957ce:	4b12      	ldr	r3, [pc, #72]	; (95818 <cl_isouf_controller+0x5d8>)
   957d0:	f04f 0200 	mov.w	r2, #0
   957d4:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   957d6:	4b11      	ldr	r3, [pc, #68]	; (9581c <cl_isouf_controller+0x5dc>)
   957d8:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   957da:	4b0e      	ldr	r3, [pc, #56]	; (95814 <cl_isouf_controller+0x5d4>)
   957dc:	2201      	movs	r2, #1
   957de:	701a      	strb	r2, [r3, #0]
				break;
   957e0:	e000      	b.n	957e4 <cl_isouf_controller+0x5a4>
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   957e2:	bf00      	nop
				break;
			
			default : break;	
			
			}
			break;
   957e4:	e00a      	b.n	957fc <cl_isouf_controller+0x5bc>
			
			case CL_ISOUF_STATE_POST_COMPLETION:
			
			switch(cl_isouf_event){
   957e6:	7efb      	ldrb	r3, [r7, #27]
   957e8:	2b09      	cmp	r3, #9
   957ea:	d002      	beq.n	957f2 <cl_isouf_controller+0x5b2>
   957ec:	2b0e      	cmp	r3, #14
   957ee:	d002      	beq.n	957f6 <cl_isouf_controller+0x5b6>
				
				break;
				
				
				
				default:break;
   957f0:	e002      	b.n	957f8 <cl_isouf_controller+0x5b8>
			
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   957f2:	bf00      	nop
   957f4:	e002      	b.n	957fc <cl_isouf_controller+0x5bc>
				
				case EVENT_ISOUF_START_RETURN:
				
				break;
   957f6:	bf00      	nop
				
				
				default:break;
			}
			
			break;
   957f8:	e000      	b.n	957fc <cl_isouf_controller+0x5bc>
			
			default:break;
   957fa:	bf00      	nop
			
			
	}
	return CL_OK;
   957fc:	2300      	movs	r3, #0
	
	
}
   957fe:	4618      	mov	r0, r3
   95800:	3740      	adds	r7, #64	; 0x40
   95802:	46bd      	mov	sp, r7
   95804:	bd80      	pop	{r7, pc}
   95806:	bf00      	nop
   95808:	20072614 	.word	0x20072614
   9580c:	00093f5d 	.word	0x00093f5d
   95810:	0009cbd5 	.word	0x0009cbd5
   95814:	200719dd 	.word	0x200719dd
   95818:	20071a1c 	.word	0x20071a1c
   9581c:	00095e79 	.word	0x00095e79
   95820:	00096961 	.word	0x00096961
   95824:	00096ea9 	.word	0x00096ea9
   95828:	00095869 	.word	0x00095869
   9582c:	200719de 	.word	0x200719de
   95830:	200719e0 	.word	0x200719e0
   95834:	00096169 	.word	0x00096169
   95838:	00096c01 	.word	0x00096c01
   9583c:	200719e4 	.word	0x200719e4
   95840:	0008b715 	.word	0x0008b715
   95844:	00095df5 	.word	0x00095df5
   95848:	200719e8 	.word	0x200719e8
   9584c:	200719e6 	.word	0x200719e6
   95850:	0008fa01 	.word	0x0008fa01
   95854:	0009b091 	.word	0x0009b091
   95858:	0009b07d 	.word	0x0009b07d
   9585c:	0009b0b9 	.word	0x0009b0b9
   95860:	00095c45 	.word	0x00095c45
   95864:	0009af2d 	.word	0x0009af2d

00095868 <Cl_Isouf_ProcessAlarms>:




Cl_ReturnCodeType Cl_Isouf_ProcessAlarms()
{
   95868:	b580      	push	{r7, lr}
   9586a:	b082      	sub	sp, #8
   9586c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   9586e:	2300      	movs	r3, #0
   95870:	71fb      	strb	r3, [r7, #7]
	ClIsoufAlarmIdType  ClIsoufAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95872:	2359      	movs	r3, #89	; 0x59
   95874:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_alarmid;
	
	cl_isouf_retcode = Cl_Isouf_UpdateAlarmTable(&ClIsoufAlarmId);
   95876:	1d7b      	adds	r3, r7, #5
   95878:	4618      	mov	r0, r3
   9587a:	4b06      	ldr	r3, [pc, #24]	; (95894 <Cl_Isouf_ProcessAlarms+0x2c>)
   9587c:	4798      	blx	r3
   9587e:	4603      	mov	r3, r0
   95880:	461a      	mov	r2, r3
   95882:	4b05      	ldr	r3, [pc, #20]	; (95898 <Cl_Isouf_ProcessAlarms+0x30>)
   95884:	701a      	strb	r2, [r3, #0]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
	
	return (cl_isouf_retcode );
   95886:	4b04      	ldr	r3, [pc, #16]	; (95898 <Cl_Isouf_ProcessAlarms+0x30>)
   95888:	781b      	ldrb	r3, [r3, #0]
	
}
   9588a:	4618      	mov	r0, r3
   9588c:	3708      	adds	r7, #8
   9588e:	46bd      	mov	sp, r7
   95890:	bd80      	pop	{r7, pc}
   95892:	bf00      	nop
   95894:	0009589d 	.word	0x0009589d
   95898:	200719de 	.word	0x200719de

0009589c <Cl_Isouf_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Isouf_UpdateAlarmTable(ClIsoufAlarmIdType *ClIsoufAlarmId)
{
   9589c:	b580      	push	{r7, lr}
   9589e:	b084      	sub	sp, #16
   958a0:	af00      	add	r7, sp, #0
   958a2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   958a4:	2300      	movs	r3, #0
   958a6:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   958a8:	2300      	movs	r3, #0
   958aa:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   958ac:	2359      	movs	r3, #89	; 0x59
   958ae:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   958b0:	2300      	movs	r3, #0
   958b2:	73bb      	strb	r3, [r7, #14]
   958b4:	e068      	b.n	95988 <Cl_Isouf_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId,&Cl_IsoufAlarmTable[tempcount].IsActive);
   958b6:	7bba      	ldrb	r2, [r7, #14]
   958b8:	4937      	ldr	r1, [pc, #220]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   958ba:	4613      	mov	r3, r2
   958bc:	00db      	lsls	r3, r3, #3
   958be:	1a9b      	subs	r3, r3, r2
   958c0:	440b      	add	r3, r1
   958c2:	7818      	ldrb	r0, [r3, #0]
   958c4:	7bba      	ldrb	r2, [r7, #14]
   958c6:	4613      	mov	r3, r2
   958c8:	00db      	lsls	r3, r3, #3
   958ca:	1a9b      	subs	r3, r3, r2
   958cc:	4a32      	ldr	r2, [pc, #200]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   958ce:	4413      	add	r3, r2
   958d0:	3302      	adds	r3, #2
   958d2:	4619      	mov	r1, r3
   958d4:	4b31      	ldr	r3, [pc, #196]	; (9599c <Cl_Isouf_UpdateAlarmTable+0x100>)
   958d6:	4798      	blx	r3
		if (Cl_IsoufAlarmTable[tempcount].IsActive)
   958d8:	7bba      	ldrb	r2, [r7, #14]
   958da:	492f      	ldr	r1, [pc, #188]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   958dc:	4613      	mov	r3, r2
   958de:	00db      	lsls	r3, r3, #3
   958e0:	1a9b      	subs	r3, r3, r2
   958e2:	440b      	add	r3, r1
   958e4:	3302      	adds	r3, #2
   958e6:	781b      	ldrb	r3, [r3, #0]
   958e8:	2b00      	cmp	r3, #0
   958ea:	d022      	beq.n	95932 <Cl_Isouf_UpdateAlarmTable+0x96>
		{
			if(!Cl_IsoufAlarmTable[tempcount].IsRaised)
   958ec:	7bba      	ldrb	r2, [r7, #14]
   958ee:	492a      	ldr	r1, [pc, #168]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   958f0:	4613      	mov	r3, r2
   958f2:	00db      	lsls	r3, r3, #3
   958f4:	1a9b      	subs	r3, r3, r2
   958f6:	440b      	add	r3, r1
   958f8:	3303      	adds	r3, #3
   958fa:	781b      	ldrb	r3, [r3, #0]
   958fc:	f083 0301 	eor.w	r3, r3, #1
   95900:	b2db      	uxtb	r3, r3
   95902:	2b00      	cmp	r3, #0
   95904:	d03d      	beq.n	95982 <Cl_Isouf_UpdateAlarmTable+0xe6>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
				Cl_IsoufAlarmTable[tempcount].IsRaised = true;
   95906:	7bba      	ldrb	r2, [r7, #14]
   95908:	4923      	ldr	r1, [pc, #140]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   9590a:	4613      	mov	r3, r2
   9590c:	00db      	lsls	r3, r3, #3
   9590e:	1a9b      	subs	r3, r3, r2
   95910:	440b      	add	r3, r1
   95912:	3303      	adds	r3, #3
   95914:	2201      	movs	r2, #1
   95916:	701a      	strb	r2, [r3, #0]
				Cl_isoufretcode = CL_IsoufAlarmActon(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   95918:	7bba      	ldrb	r2, [r7, #14]
   9591a:	491f      	ldr	r1, [pc, #124]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   9591c:	4613      	mov	r3, r2
   9591e:	00db      	lsls	r3, r3, #3
   95920:	1a9b      	subs	r3, r3, r2
   95922:	440b      	add	r3, r1
   95924:	781b      	ldrb	r3, [r3, #0]
   95926:	4618      	mov	r0, r3
   95928:	4b1d      	ldr	r3, [pc, #116]	; (959a0 <Cl_Isouf_UpdateAlarmTable+0x104>)
   9592a:	4798      	blx	r3
   9592c:	4603      	mov	r3, r0
   9592e:	73fb      	strb	r3, [r7, #15]
   95930:	e027      	b.n	95982 <Cl_Isouf_UpdateAlarmTable+0xe6>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_IsoufAlarmTable[tempcount].IsRaised == true)
   95932:	7bba      	ldrb	r2, [r7, #14]
   95934:	4918      	ldr	r1, [pc, #96]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   95936:	4613      	mov	r3, r2
   95938:	00db      	lsls	r3, r3, #3
   9593a:	1a9b      	subs	r3, r3, r2
   9593c:	440b      	add	r3, r1
   9593e:	3303      	adds	r3, #3
   95940:	781b      	ldrb	r3, [r3, #0]
   95942:	2b00      	cmp	r3, #0
   95944:	d01d      	beq.n	95982 <Cl_Isouf_UpdateAlarmTable+0xe6>
			{
				Cl_IsoufAlarmTable[tempcount].IsRaised = false;
   95946:	7bba      	ldrb	r2, [r7, #14]
   95948:	4913      	ldr	r1, [pc, #76]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   9594a:	4613      	mov	r3, r2
   9594c:	00db      	lsls	r3, r3, #3
   9594e:	1a9b      	subs	r3, r3, r2
   95950:	440b      	add	r3, r1
   95952:	3303      	adds	r3, #3
   95954:	2200      	movs	r2, #0
   95956:	701a      	strb	r2, [r3, #0]
				command = CON_TX_COMMAND_ALARM;
   95958:	2307      	movs	r3, #7
   9595a:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   9595c:	7bba      	ldrb	r2, [r7, #14]
   9595e:	490e      	ldr	r1, [pc, #56]	; (95998 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   95960:	4613      	mov	r3, r2
   95962:	00db      	lsls	r3, r3, #3
   95964:	1a9b      	subs	r3, r3, r2
   95966:	440b      	add	r3, r1
   95968:	781b      	ldrb	r3, [r3, #0]
   9596a:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   9596c:	2300      	movs	r3, #0
   9596e:	727b      	strb	r3, [r7, #9]
				Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,2);
   95970:	f107 0108 	add.w	r1, r7, #8
   95974:	7b7b      	ldrb	r3, [r7, #13]
   95976:	2202      	movs	r2, #2
   95978:	4618      	mov	r0, r3
   9597a:	4b0a      	ldr	r3, [pc, #40]	; (959a4 <Cl_Isouf_UpdateAlarmTable+0x108>)
   9597c:	4798      	blx	r3
   9597e:	4603      	mov	r3, r0
   95980:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   95982:	7bbb      	ldrb	r3, [r7, #14]
   95984:	3301      	adds	r3, #1
   95986:	73bb      	strb	r3, [r7, #14]
   95988:	7bbb      	ldrb	r3, [r7, #14]
   9598a:	2b1d      	cmp	r3, #29
   9598c:	d993      	bls.n	958b6 <Cl_Isouf_UpdateAlarmTable+0x1a>
	}
	

	

	return (Cl_isoufretcode );
   9598e:	7bfb      	ldrb	r3, [r7, #15]
}
   95990:	4618      	mov	r0, r3
   95992:	3710      	adds	r7, #16
   95994:	46bd      	mov	sp, r7
   95996:	bd80      	pop	{r7, pc}
   95998:	200709d0 	.word	0x200709d0
   9599c:	00082bc1 	.word	0x00082bc1
   959a0:	000959a9 	.word	0x000959a9
   959a4:	0009cbd5 	.word	0x0009cbd5

000959a8 <CL_IsoufAlarmActon>:


Cl_ReturnCodeType  CL_IsoufAlarmActon(Cl_NewAlarmIdType cl_isoufalarmid)
{
   959a8:	b580      	push	{r7, lr}
   959aa:	b086      	sub	sp, #24
   959ac:	af00      	add	r7, sp, #0
   959ae:	4603      	mov	r3, r0
   959b0:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   959b2:	2300      	movs	r3, #0
   959b4:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   959b6:	f107 0308 	add.w	r3, r7, #8
   959ba:	2100      	movs	r1, #0
   959bc:	460a      	mov	r2, r1
   959be:	801a      	strh	r2, [r3, #0]
   959c0:	460a      	mov	r2, r1
   959c2:	709a      	strb	r2, [r3, #2]
   959c4:	2300      	movs	r3, #0
   959c6:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   959c8:	2359      	movs	r3, #89	; 0x59
   959ca:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   959cc:	2300      	movs	r3, #0
   959ce:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   959d0:	2300      	movs	r3, #0
   959d2:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_isoufalarmid)
   959d4:	79fb      	ldrb	r3, [r7, #7]
   959d6:	3b01      	subs	r3, #1
   959d8:	2b3e      	cmp	r3, #62	; 0x3e
   959da:	f200 8109 	bhi.w	95bf0 <CL_IsoufAlarmActon+0x248>
   959de:	a201      	add	r2, pc, #4	; (adr r2, 959e4 <CL_IsoufAlarmActon+0x3c>)
   959e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   959e4:	00095b31 	.word	0x00095b31
   959e8:	00095bf1 	.word	0x00095bf1
   959ec:	00095bf1 	.word	0x00095bf1
   959f0:	00095bf1 	.word	0x00095bf1
   959f4:	00095b7b 	.word	0x00095b7b
   959f8:	00095b7b 	.word	0x00095b7b
   959fc:	00095b7b 	.word	0x00095b7b
   95a00:	00095b7b 	.word	0x00095b7b
   95a04:	00095b7b 	.word	0x00095b7b
   95a08:	00095bf1 	.word	0x00095bf1
   95a0c:	00095b7b 	.word	0x00095b7b
   95a10:	00095b7b 	.word	0x00095b7b
   95a14:	00095b7b 	.word	0x00095b7b
   95a18:	00095b7b 	.word	0x00095b7b
   95a1c:	00095b7b 	.word	0x00095b7b
   95a20:	00095b7b 	.word	0x00095b7b
   95a24:	00095b7b 	.word	0x00095b7b
   95a28:	00095b7b 	.word	0x00095b7b
   95a2c:	00095b7b 	.word	0x00095b7b
   95a30:	00095b7b 	.word	0x00095b7b
   95a34:	00095b7b 	.word	0x00095b7b
   95a38:	00095b7b 	.word	0x00095b7b
   95a3c:	00095b7b 	.word	0x00095b7b
   95a40:	00095b7b 	.word	0x00095b7b
   95a44:	00095bf1 	.word	0x00095bf1
   95a48:	00095b7b 	.word	0x00095b7b
   95a4c:	00095bf1 	.word	0x00095bf1
   95a50:	00095bf1 	.word	0x00095bf1
   95a54:	00095ae1 	.word	0x00095ae1
   95a58:	00095bf1 	.word	0x00095bf1
   95a5c:	00095bf1 	.word	0x00095bf1
   95a60:	00095b31 	.word	0x00095b31
   95a64:	00095b7b 	.word	0x00095b7b
   95a68:	00095b31 	.word	0x00095b31
   95a6c:	00095b31 	.word	0x00095b31
   95a70:	00095b31 	.word	0x00095b31
   95a74:	00095b31 	.word	0x00095b31
   95a78:	00095b31 	.word	0x00095b31
   95a7c:	00095b7b 	.word	0x00095b7b
   95a80:	00095b7b 	.word	0x00095b7b
   95a84:	00095bf1 	.word	0x00095bf1
   95a88:	00095b7b 	.word	0x00095b7b
   95a8c:	00095bf1 	.word	0x00095bf1
   95a90:	00095b7b 	.word	0x00095b7b
   95a94:	00095bf1 	.word	0x00095bf1
   95a98:	00095bf1 	.word	0x00095bf1
   95a9c:	00095bf1 	.word	0x00095bf1
   95aa0:	00095bf1 	.word	0x00095bf1
   95aa4:	00095bf1 	.word	0x00095bf1
   95aa8:	00095b7b 	.word	0x00095b7b
   95aac:	00095b7b 	.word	0x00095b7b
   95ab0:	00095bf1 	.word	0x00095bf1
   95ab4:	00095bf1 	.word	0x00095bf1
   95ab8:	00095bf1 	.word	0x00095bf1
   95abc:	00095bf1 	.word	0x00095bf1
   95ac0:	00095bf1 	.word	0x00095bf1
   95ac4:	00095b7b 	.word	0x00095b7b
   95ac8:	00095b7b 	.word	0x00095b7b
   95acc:	00095b7b 	.word	0x00095b7b
   95ad0:	00095bf1 	.word	0x00095bf1
   95ad4:	00095bf1 	.word	0x00095bf1
   95ad8:	00095bf1 	.word	0x00095bf1
   95adc:	00095b31 	.word	0x00095b31
		{
			
			case POWER_FAILURE:
			
			isopowerFailureFlag = 1;
   95ae0:	4b48      	ldr	r3, [pc, #288]	; (95c04 <CL_IsoufAlarmActon+0x25c>)
   95ae2:	2201      	movs	r2, #1
   95ae4:	601a      	str	r2, [r3, #0]
			sv_cntrl_setredalarm();
   95ae6:	4b48      	ldr	r3, [pc, #288]	; (95c08 <CL_IsoufAlarmActon+0x260>)
   95ae8:	4798      	blx	r3
			sv_cntrl_buzzer();
   95aea:	4b48      	ldr	r3, [pc, #288]	; (95c0c <CL_IsoufAlarmActon+0x264>)
   95aec:	4798      	blx	r3
			Cl_Isouf_stop();
   95aee:	4b48      	ldr	r3, [pc, #288]	; (95c10 <CL_IsoufAlarmActon+0x268>)
   95af0:	4798      	blx	r3
			
			 if(cl_isoufalarmid != _NO_ALARM)
   95af2:	79fb      	ldrb	r3, [r7, #7]
   95af4:	2b00      	cmp	r3, #0
   95af6:	d07d      	beq.n	95bf4 <CL_IsoufAlarmActon+0x24c>
			 {
				 isoufalarm = cl_isoufalarmid;
   95af8:	4a46      	ldr	r2, [pc, #280]	; (95c14 <CL_IsoufAlarmActon+0x26c>)
   95afa:	79fb      	ldrb	r3, [r7, #7]
   95afc:	7013      	strb	r3, [r2, #0]
				 isoufalarm1 = isoufalarm;
   95afe:	4b45      	ldr	r3, [pc, #276]	; (95c14 <CL_IsoufAlarmActon+0x26c>)
   95b00:	781a      	ldrb	r2, [r3, #0]
   95b02:	4b45      	ldr	r3, [pc, #276]	; (95c18 <CL_IsoufAlarmActon+0x270>)
   95b04:	701a      	strb	r2, [r3, #0]
				 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   95b06:	79fb      	ldrb	r3, [r7, #7]
   95b08:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   95b0a:	2301      	movs	r3, #1
   95b0c:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   95b0e:	2302      	movs	r3, #2
   95b10:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   95b12:	2307      	movs	r3, #7
   95b14:	73fb      	strb	r3, [r7, #15]
				 cl_wait(10);
   95b16:	200a      	movs	r0, #10
   95b18:	4b40      	ldr	r3, [pc, #256]	; (95c1c <CL_IsoufAlarmActon+0x274>)
   95b1a:	4798      	blx	r3
				 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   95b1c:	f107 0108 	add.w	r1, r7, #8
   95b20:	7bfb      	ldrb	r3, [r7, #15]
   95b22:	2203      	movs	r2, #3
   95b24:	4618      	mov	r0, r3
   95b26:	4b3e      	ldr	r3, [pc, #248]	; (95c20 <CL_IsoufAlarmActon+0x278>)
   95b28:	4798      	blx	r3
   95b2a:	4603      	mov	r3, r0
   95b2c:	75fb      	strb	r3, [r7, #23]
				 // 			data[0] = (Cl_Uint8Type)CLEANING;
				 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
				 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
			 }
			
			break;
   95b2e:	e061      	b.n	95bf4 <CL_IsoufAlarmActon+0x24c>
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
			case ABD_EVENT:
			case BLD_EVENT:
							
				sv_cntrl_setredalarm();
   95b30:	4b35      	ldr	r3, [pc, #212]	; (95c08 <CL_IsoufAlarmActon+0x260>)
   95b32:	4798      	blx	r3
				sv_cntrl_buzzer();
   95b34:	4b35      	ldr	r3, [pc, #212]	; (95c0c <CL_IsoufAlarmActon+0x264>)
   95b36:	4798      	blx	r3
				Cl_Isouf_safesate();	
   95b38:	4b3a      	ldr	r3, [pc, #232]	; (95c24 <CL_IsoufAlarmActon+0x27c>)
   95b3a:	4798      	blx	r3
				 if(cl_isoufalarmid != _NO_ALARM)
   95b3c:	79fb      	ldrb	r3, [r7, #7]
   95b3e:	2b00      	cmp	r3, #0
   95b40:	d05a      	beq.n	95bf8 <CL_IsoufAlarmActon+0x250>
				 {
					 isoufalarm = cl_isoufalarmid;
   95b42:	4a34      	ldr	r2, [pc, #208]	; (95c14 <CL_IsoufAlarmActon+0x26c>)
   95b44:	79fb      	ldrb	r3, [r7, #7]
   95b46:	7013      	strb	r3, [r2, #0]
					 isoufalarm1 = isoufalarm;
   95b48:	4b32      	ldr	r3, [pc, #200]	; (95c14 <CL_IsoufAlarmActon+0x26c>)
   95b4a:	781a      	ldrb	r2, [r3, #0]
   95b4c:	4b32      	ldr	r3, [pc, #200]	; (95c18 <CL_IsoufAlarmActon+0x270>)
   95b4e:	701a      	strb	r2, [r3, #0]
					 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   95b50:	79fb      	ldrb	r3, [r7, #7]
   95b52:	723b      	strb	r3, [r7, #8]
					 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   95b54:	2301      	movs	r3, #1
   95b56:	727b      	strb	r3, [r7, #9]
					 data[2] = (Cl_Uint8Type)CRITICAL;
   95b58:	2302      	movs	r3, #2
   95b5a:	72bb      	strb	r3, [r7, #10]
					 command = CON_TX_COMMAND_ALARM;
   95b5c:	2307      	movs	r3, #7
   95b5e:	73fb      	strb	r3, [r7, #15]
					 cl_wait(10);
   95b60:	200a      	movs	r0, #10
   95b62:	4b2e      	ldr	r3, [pc, #184]	; (95c1c <CL_IsoufAlarmActon+0x274>)
   95b64:	4798      	blx	r3
					 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   95b66:	f107 0108 	add.w	r1, r7, #8
   95b6a:	7bfb      	ldrb	r3, [r7, #15]
   95b6c:	2203      	movs	r2, #3
   95b6e:	4618      	mov	r0, r3
   95b70:	4b2b      	ldr	r3, [pc, #172]	; (95c20 <CL_IsoufAlarmActon+0x278>)
   95b72:	4798      	blx	r3
   95b74:	4603      	mov	r3, r0
   95b76:	75fb      	strb	r3, [r7, #23]
					 // 			command = CON_TX_COMMAND_CL_SYS_STATE;
					 // 			data[0] = (Cl_Uint8Type)CLEANING;
					 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
					 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
				 }
			break;
   95b78:	e03e      	b.n	95bf8 <CL_IsoufAlarmActon+0x250>
			case TEMP1_LOW_THRESHOLD:
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:	
				// do nothing as the alarm limits were increased
			
			sv_cntrl_setyellowalarm();
   95b7a:	4b2b      	ldr	r3, [pc, #172]	; (95c28 <CL_IsoufAlarmActon+0x280>)
   95b7c:	4798      	blx	r3
			sv_cntrl_buzzer();
   95b7e:	4b23      	ldr	r3, [pc, #140]	; (95c0c <CL_IsoufAlarmActon+0x264>)
   95b80:	4798      	blx	r3
			
				Cl_bc_controller(BC_EVENT_STOP);
   95b82:	2005      	movs	r0, #5
   95b84:	4b29      	ldr	r3, [pc, #164]	; (95c2c <CL_IsoufAlarmActon+0x284>)
   95b86:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID15);
   95b88:	200f      	movs	r0, #15
   95b8a:	4b29      	ldr	r3, [pc, #164]	; (95c30 <CL_IsoufAlarmActon+0x288>)
   95b8c:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID13);
   95b8e:	200d      	movs	r0, #13
   95b90:	4b27      	ldr	r3, [pc, #156]	; (95c30 <CL_IsoufAlarmActon+0x288>)
   95b92:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID14);
   95b94:	200e      	movs	r0, #14
   95b96:	4b27      	ldr	r3, [pc, #156]	; (95c34 <CL_IsoufAlarmActon+0x28c>)
   95b98:	4798      	blx	r3
				//DD_SET_VALVE(VALVE_ID1);
				sv_cntrl_deactivatepump(DCMOTOR1);
   95b9a:	2001      	movs	r0, #1
   95b9c:	4b26      	ldr	r3, [pc, #152]	; (95c38 <CL_IsoufAlarmActon+0x290>)
   95b9e:	4798      	blx	r3
				sv_cntrl_deactivatepump(DCMOTOR2);
   95ba0:	2002      	movs	r0, #2
   95ba2:	4b25      	ldr	r3, [pc, #148]	; (95c38 <CL_IsoufAlarmActon+0x290>)
   95ba4:	4798      	blx	r3
				// send alert message
				Cl_isoufretcode = sv_cntrl_poweroffheater();
   95ba6:	4b25      	ldr	r3, [pc, #148]	; (95c3c <CL_IsoufAlarmActon+0x294>)
   95ba8:	4798      	blx	r3
   95baa:	4603      	mov	r3, r0
   95bac:	75fb      	strb	r3, [r7, #23]
				Cl_isoufretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   95bae:	2004      	movs	r0, #4
   95bb0:	4b23      	ldr	r3, [pc, #140]	; (95c40 <CL_IsoufAlarmActon+0x298>)
   95bb2:	4798      	blx	r3
   95bb4:	4603      	mov	r3, r0
   95bb6:	75fb      	strb	r3, [r7, #23]
				 isoufalarm = cl_isoufalarmid;
   95bb8:	4a16      	ldr	r2, [pc, #88]	; (95c14 <CL_IsoufAlarmActon+0x26c>)
   95bba:	79fb      	ldrb	r3, [r7, #7]
   95bbc:	7013      	strb	r3, [r2, #0]
				 isoufalarm1 = isoufalarm;
   95bbe:	4b15      	ldr	r3, [pc, #84]	; (95c14 <CL_IsoufAlarmActon+0x26c>)
   95bc0:	781a      	ldrb	r2, [r3, #0]
   95bc2:	4b15      	ldr	r3, [pc, #84]	; (95c18 <CL_IsoufAlarmActon+0x270>)
   95bc4:	701a      	strb	r2, [r3, #0]
				 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   95bc6:	79fb      	ldrb	r3, [r7, #7]
   95bc8:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   95bca:	2301      	movs	r3, #1
   95bcc:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   95bce:	2302      	movs	r3, #2
   95bd0:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALERT;
   95bd2:	234f      	movs	r3, #79	; 0x4f
   95bd4:	73fb      	strb	r3, [r7, #15]
				 cl_wait(10);
   95bd6:	200a      	movs	r0, #10
   95bd8:	4b10      	ldr	r3, [pc, #64]	; (95c1c <CL_IsoufAlarmActon+0x274>)
   95bda:	4798      	blx	r3
				 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   95bdc:	f107 0108 	add.w	r1, r7, #8
   95be0:	7bfb      	ldrb	r3, [r7, #15]
   95be2:	2203      	movs	r2, #3
   95be4:	4618      	mov	r0, r3
   95be6:	4b0e      	ldr	r3, [pc, #56]	; (95c20 <CL_IsoufAlarmActon+0x278>)
   95be8:	4798      	blx	r3
   95bea:	4603      	mov	r3, r0
   95bec:	75fb      	strb	r3, [r7, #23]
				
			break;
   95bee:	e004      	b.n	95bfa <CL_IsoufAlarmActon+0x252>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   95bf0:	bf00      	nop
   95bf2:	e002      	b.n	95bfa <CL_IsoufAlarmActon+0x252>
				 // 			data[0] = (Cl_Uint8Type)CLEANING;
				 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
				 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
			 }
			
			break;
   95bf4:	bf00      	nop
   95bf6:	e000      	b.n	95bfa <CL_IsoufAlarmActon+0x252>
					 // 			command = CON_TX_COMMAND_CL_SYS_STATE;
					 // 			data[0] = (Cl_Uint8Type)CLEANING;
					 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
					 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
				 }
			break;
   95bf8:	bf00      	nop
			default:
			break;

		}
		
return CL_OK;			
   95bfa:	2300      	movs	r3, #0
}
   95bfc:	4618      	mov	r0, r3
   95bfe:	3718      	adds	r7, #24
   95c00:	46bd      	mov	sp, r7
   95c02:	bd80      	pop	{r7, pc}
   95c04:	200719e8 	.word	0x200719e8
   95c08:	0009b02d 	.word	0x0009b02d
   95c0c:	0009b069 	.word	0x0009b069
   95c10:	00095df5 	.word	0x00095df5
   95c14:	2007275c 	.word	0x2007275c
   95c18:	2007275d 	.word	0x2007275d
   95c1c:	00093ea9 	.word	0x00093ea9
   95c20:	0009cbd5 	.word	0x0009cbd5
   95c24:	00095dcd 	.word	0x00095dcd
   95c28:	0009b041 	.word	0x0009b041
   95c2c:	00082ea5 	.word	0x00082ea5
   95c30:	0009ae01 	.word	0x0009ae01
   95c34:	0009ade1 	.word	0x0009ade1
   95c38:	0009ad7d 	.word	0x0009ad7d
   95c3c:	0009adcd 	.word	0x0009adcd
   95c40:	00089035 	.word	0x00089035

00095c44 <Cl_Isouf_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Isouf_ResetAlertsforReassertion(void )
{
   95c44:	b580      	push	{r7, lr}
   95c46:	b082      	sub	sp, #8
   95c48:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   95c4a:	2300      	movs	r3, #0
   95c4c:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95c4e:	2359      	movs	r3, #89	; 0x59
   95c50:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   95c52:	4b5c      	ldr	r3, [pc, #368]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c54:	2200      	movs	r2, #0
   95c56:	70da      	strb	r2, [r3, #3]
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   95c58:	4b5a      	ldr	r3, [pc, #360]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c5a:	2200      	movs	r2, #0
   95c5c:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   95c5e:	2005      	movs	r0, #5
   95c60:	4b59      	ldr	r3, [pc, #356]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95c62:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   95c64:	2006      	movs	r0, #6
   95c66:	4b58      	ldr	r3, [pc, #352]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95c68:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   95c6a:	4b56      	ldr	r3, [pc, #344]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c6c:	2200      	movs	r2, #0
   95c6e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   95c72:	2001      	movs	r0, #1
   95c74:	4b54      	ldr	r3, [pc, #336]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95c76:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   95c78:	4b52      	ldr	r3, [pc, #328]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c7a:	2200      	movs	r2, #0
   95c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   95c80:	4b50      	ldr	r3, [pc, #320]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c82:	2200      	movs	r2, #0
   95c84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   95c88:	2015      	movs	r0, #21
   95c8a:	4b4f      	ldr	r3, [pc, #316]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95c8c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   95c8e:	2016      	movs	r0, #22
   95c90:	4b4d      	ldr	r3, [pc, #308]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95c92:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   95c94:	4b4b      	ldr	r3, [pc, #300]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c96:	2200      	movs	r2, #0
   95c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   95c9c:	4b49      	ldr	r3, [pc, #292]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95c9e:	2200      	movs	r2, #0
   95ca0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   95ca4:	2017      	movs	r0, #23
   95ca6:	4b48      	ldr	r3, [pc, #288]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95ca8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   95caa:	2018      	movs	r0, #24
   95cac:	4b46      	ldr	r3, [pc, #280]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95cae:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   95cb0:	4b44      	ldr	r3, [pc, #272]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95cb2:	2200      	movs	r2, #0
   95cb4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   95cb8:	4b42      	ldr	r3, [pc, #264]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95cba:	2200      	movs	r2, #0
   95cbc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   95cc0:	2027      	movs	r0, #39	; 0x27
   95cc2:	4b41      	ldr	r3, [pc, #260]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95cc4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   95cc6:	2028      	movs	r0, #40	; 0x28
   95cc8:	4b3f      	ldr	r3, [pc, #252]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95cca:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   95ccc:	4b3d      	ldr	r3, [pc, #244]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95cce:	2200      	movs	r2, #0
   95cd0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   95cd4:	2021      	movs	r0, #33	; 0x21
   95cd6:	4b3c      	ldr	r3, [pc, #240]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95cd8:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   95cda:	4b3a      	ldr	r3, [pc, #232]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95cdc:	2200      	movs	r2, #0
   95cde:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   95ce2:	2020      	movs	r0, #32
   95ce4:	4b38      	ldr	r3, [pc, #224]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95ce6:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   95ce8:	4b36      	ldr	r3, [pc, #216]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95cea:	2200      	movs	r2, #0
   95cec:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   95cf0:	2022      	movs	r0, #34	; 0x22
   95cf2:	4b35      	ldr	r3, [pc, #212]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95cf4:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   95cf6:	4b33      	ldr	r3, [pc, #204]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95cf8:	2200      	movs	r2, #0
   95cfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   95cfe:	4b31      	ldr	r3, [pc, #196]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d00:	2200      	movs	r2, #0
   95d02:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   95d06:	2024      	movs	r0, #36	; 0x24
   95d08:	4b2f      	ldr	r3, [pc, #188]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d0a:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   95d0c:	2023      	movs	r0, #35	; 0x23
   95d0e:	4b2e      	ldr	r3, [pc, #184]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d10:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   95d12:	4b2c      	ldr	r3, [pc, #176]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d14:	2200      	movs	r2, #0
   95d16:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   95d1a:	4b2a      	ldr	r3, [pc, #168]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d1c:	2200      	movs	r2, #0
   95d1e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   95d22:	2026      	movs	r0, #38	; 0x26
   95d24:	4b28      	ldr	r3, [pc, #160]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d26:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   95d28:	2025      	movs	r0, #37	; 0x25
   95d2a:	4b27      	ldr	r3, [pc, #156]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d2c:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   95d2e:	4b25      	ldr	r3, [pc, #148]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d30:	2200      	movs	r2, #0
   95d32:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   95d36:	4b23      	ldr	r3, [pc, #140]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d38:	2200      	movs	r2, #0
   95d3a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   95d3e:	2007      	movs	r0, #7
   95d40:	4b21      	ldr	r3, [pc, #132]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d42:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   95d44:	2008      	movs	r0, #8
   95d46:	4b20      	ldr	r3, [pc, #128]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d48:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   95d4a:	4b1e      	ldr	r3, [pc, #120]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d4c:	2200      	movs	r2, #0
   95d4e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   95d52:	4b1c      	ldr	r3, [pc, #112]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d54:	2200      	movs	r2, #0
   95d56:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   95d5a:	2013      	movs	r0, #19
   95d5c:	4b1a      	ldr	r3, [pc, #104]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d5e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   95d60:	2014      	movs	r0, #20
   95d62:	4b19      	ldr	r3, [pc, #100]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d64:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   95d66:	4b17      	ldr	r3, [pc, #92]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d68:	2200      	movs	r2, #0
   95d6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   95d6e:	4b15      	ldr	r3, [pc, #84]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d70:	2200      	movs	r2, #0
   95d72:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   95d76:	2011      	movs	r0, #17
   95d78:	4b13      	ldr	r3, [pc, #76]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d7a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   95d7c:	2012      	movs	r0, #18
   95d7e:	4b12      	ldr	r3, [pc, #72]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d80:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   95d82:	4b10      	ldr	r3, [pc, #64]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d84:	2200      	movs	r2, #0
   95d86:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   95d8a:	4b0e      	ldr	r3, [pc, #56]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95d8c:	2200      	movs	r2, #0
   95d8e:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   95d92:	200f      	movs	r0, #15
   95d94:	4b0c      	ldr	r3, [pc, #48]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d96:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   95d98:	2010      	movs	r0, #16
   95d9a:	4b0b      	ldr	r3, [pc, #44]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95d9c:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_BP_STOPPED].IsRaised = false;
   95d9e:	4b09      	ldr	r3, [pc, #36]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95da0:	2200      	movs	r2, #0
   95da2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(BP_STOPPED);
   95da6:	203f      	movs	r0, #63	; 0x3f
   95da8:	4b07      	ldr	r3, [pc, #28]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95daa:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_POWER_FAILURE].IsRaised = false;
   95dac:	4b05      	ldr	r3, [pc, #20]	; (95dc4 <Cl_Isouf_ResetAlertsforReassertion+0x180>)
   95dae:	2200      	movs	r2, #0
   95db0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	Cl_AlarmResetAlarm(POWER_FAILURE);
   95db4:	201d      	movs	r0, #29
   95db6:	4b04      	ldr	r3, [pc, #16]	; (95dc8 <Cl_Isouf_ResetAlertsforReassertion+0x184>)
   95db8:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   95dba:	79fb      	ldrb	r3, [r7, #7]
}
   95dbc:	4618      	mov	r0, r3
   95dbe:	3708      	adds	r7, #8
   95dc0:	46bd      	mov	sp, r7
   95dc2:	bd80      	pop	{r7, pc}
   95dc4:	200709d0 	.word	0x200709d0
   95dc8:	00082ad9 	.word	0x00082ad9

00095dcc <Cl_Isouf_safesate>:


Cl_ReturnCodeType Cl_Isouf_safesate(){
   95dcc:	b580      	push	{r7, lr}
   95dce:	af00      	add	r7, sp, #0
	
	Cl_Isouf_stop();
   95dd0:	4b05      	ldr	r3, [pc, #20]	; (95de8 <Cl_Isouf_safesate+0x1c>)
   95dd2:	4798      	blx	r3
	cl_wait(10);
   95dd4:	200a      	movs	r0, #10
   95dd6:	4b05      	ldr	r3, [pc, #20]	; (95dec <Cl_Isouf_safesate+0x20>)
   95dd8:	4798      	blx	r3
	cl_isouf_state = CL_ISOUF_STATE_CRITICAL_ALARM;
   95dda:	4b05      	ldr	r3, [pc, #20]	; (95df0 <Cl_Isouf_safesate+0x24>)
   95ddc:	2208      	movs	r2, #8
   95dde:	701a      	strb	r2, [r3, #0]
}
   95de0:	bf00      	nop
   95de2:	4618      	mov	r0, r3
   95de4:	bd80      	pop	{r7, pc}
   95de6:	bf00      	nop
   95de8:	00095df5 	.word	0x00095df5
   95dec:	00093ea9 	.word	0x00093ea9
   95df0:	200719dd 	.word	0x200719dd

00095df4 <Cl_Isouf_stop>:
	
}



Cl_ReturnCodeType Cl_Isouf_stop(){
   95df4:	b580      	push	{r7, lr}
   95df6:	b082      	sub	sp, #8
   95df8:	af00      	add	r7, sp, #0
	
	Cl_Uint8Type data;
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   95dfa:	2100      	movs	r1, #0
   95dfc:	2001      	movs	r0, #1
   95dfe:	4b15      	ldr	r3, [pc, #84]	; (95e54 <Cl_Isouf_stop+0x60>)
   95e00:	4798      	blx	r3
   95e02:	4603      	mov	r3, r0
   95e04:	461a      	mov	r2, r3
   95e06:	4b14      	ldr	r3, [pc, #80]	; (95e58 <Cl_Isouf_stop+0x64>)
   95e08:	701a      	strb	r2, [r3, #0]
// 	sv_cntrl_deactivate_valve(VALVE_ID13);
// 	sv_cntrl_deactivate_valve(VALVE_ID14);
// 	sv_cntrl_activate_valve(VALVE_ID15);
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   95e0a:	2100      	movs	r1, #0
   95e0c:	2004      	movs	r0, #4
   95e0e:	4b13      	ldr	r3, [pc, #76]	; (95e5c <Cl_Isouf_stop+0x68>)
   95e10:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   95e12:	4b13      	ldr	r3, [pc, #76]	; (95e60 <Cl_Isouf_stop+0x6c>)
   95e14:	4798      	blx	r3
	
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   95e16:	2100      	movs	r1, #0
   95e18:	2004      	movs	r0, #4
   95e1a:	4b12      	ldr	r3, [pc, #72]	; (95e64 <Cl_Isouf_stop+0x70>)
   95e1c:	4798      	blx	r3
	isouf = false;
   95e1e:	4b12      	ldr	r3, [pc, #72]	; (95e68 <Cl_Isouf_stop+0x74>)
   95e20:	2200      	movs	r2, #0
   95e22:	701a      	strb	r2, [r3, #0]
	sv_cntrl_enable_bypass();
   95e24:	4b11      	ldr	r3, [pc, #68]	; (95e6c <Cl_Isouf_stop+0x78>)
   95e26:	4798      	blx	r3
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STOPPED,&data,0);
   95e28:	1dfb      	adds	r3, r7, #7
   95e2a:	2200      	movs	r2, #0
   95e2c:	4619      	mov	r1, r3
   95e2e:	204c      	movs	r0, #76	; 0x4c
   95e30:	4b0f      	ldr	r3, [pc, #60]	; (95e70 <Cl_Isouf_stop+0x7c>)
   95e32:	4798      	blx	r3
   95e34:	4603      	mov	r3, r0
   95e36:	461a      	mov	r2, r3
   95e38:	4b07      	ldr	r3, [pc, #28]	; (95e58 <Cl_Isouf_stop+0x64>)
   95e3a:	701a      	strb	r2, [r3, #0]
	
	isouf = false;
   95e3c:	4b0a      	ldr	r3, [pc, #40]	; (95e68 <Cl_Isouf_stop+0x74>)
   95e3e:	2200      	movs	r2, #0
   95e40:	701a      	strb	r2, [r3, #0]
	cl_isouf_state = CL_ISOUF_STATE_STOPPED;
   95e42:	4b0c      	ldr	r3, [pc, #48]	; (95e74 <Cl_Isouf_stop+0x80>)
   95e44:	2202      	movs	r2, #2
   95e46:	701a      	strb	r2, [r3, #0]
	
}
   95e48:	bf00      	nop
   95e4a:	4618      	mov	r0, r3
   95e4c:	3708      	adds	r7, #8
   95e4e:	46bd      	mov	sp, r7
   95e50:	bd80      	pop	{r7, pc}
   95e52:	bf00      	nop
   95e54:	000829e5 	.word	0x000829e5
   95e58:	200719de 	.word	0x200719de
   95e5c:	00093f5d 	.word	0x00093f5d
   95e60:	0009af41 	.word	0x0009af41
   95e64:	00096ea9 	.word	0x00096ea9
   95e68:	200719e4 	.word	0x200719e4
   95e6c:	0009af8d 	.word	0x0009af8d
   95e70:	0009cbd5 	.word	0x0009cbd5
   95e74:	200719dd 	.word	0x200719dd

00095e78 <Cl_Isouf_start>:

Cl_ReturnCodeType Cl_Isouf_start(){
   95e78:	b590      	push	{r4, r7, lr}
   95e7a:	b085      	sub	sp, #20
   95e7c:	af02      	add	r7, sp, #8
	
	Cl_Uint8Type data;
	
	
	sv_cntrl_nobuzzer();
   95e7e:	4ba8      	ldr	r3, [pc, #672]	; (96120 <Cl_Isouf_start+0x2a8>)
   95e80:	4798      	blx	r3
	sv_cntrl_resetyellowalarm();
   95e82:	4ba8      	ldr	r3, [pc, #672]	; (96124 <Cl_Isouf_start+0x2ac>)
   95e84:	4798      	blx	r3
	sv_cntrl_resetgreenalarm();
   95e86:	4ba8      	ldr	r3, [pc, #672]	; (96128 <Cl_Isouf_start+0x2b0>)
   95e88:	4798      	blx	r3
	sv_cntrl_resetredalarm();
   95e8a:	4ba8      	ldr	r3, [pc, #672]	; (9612c <Cl_Isouf_start+0x2b4>)
   95e8c:	4798      	blx	r3
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   95e8e:	2101      	movs	r1, #1
   95e90:	2001      	movs	r0, #1
   95e92:	4ba7      	ldr	r3, [pc, #668]	; (96130 <Cl_Isouf_start+0x2b8>)
   95e94:	4798      	blx	r3
   95e96:	4603      	mov	r3, r0
   95e98:	461a      	mov	r2, r3
   95e9a:	4ba6      	ldr	r3, [pc, #664]	; (96134 <Cl_Isouf_start+0x2bc>)
   95e9c:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   95e9e:	2300      	movs	r3, #0
   95ea0:	9300      	str	r3, [sp, #0]
   95ea2:	f04f 0300 	mov.w	r3, #0
   95ea6:	f04f 0200 	mov.w	r2, #0
   95eaa:	2101      	movs	r1, #1
   95eac:	2001      	movs	r0, #1
   95eae:	4ca2      	ldr	r4, [pc, #648]	; (96138 <Cl_Isouf_start+0x2c0>)
   95eb0:	47a0      	blx	r4
   95eb2:	4603      	mov	r3, r0
   95eb4:	461a      	mov	r2, r3
   95eb6:	4b9f      	ldr	r3, [pc, #636]	; (96134 <Cl_Isouf_start+0x2bc>)
   95eb8:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   95eba:	2300      	movs	r3, #0
   95ebc:	9300      	str	r3, [sp, #0]
   95ebe:	f04f 0300 	mov.w	r3, #0
   95ec2:	f04f 0200 	mov.w	r2, #0
   95ec6:	2100      	movs	r1, #0
   95ec8:	2029      	movs	r0, #41	; 0x29
   95eca:	4c9b      	ldr	r4, [pc, #620]	; (96138 <Cl_Isouf_start+0x2c0>)
   95ecc:	47a0      	blx	r4
   95ece:	4603      	mov	r3, r0
   95ed0:	461a      	mov	r2, r3
   95ed2:	4b98      	ldr	r3, [pc, #608]	; (96134 <Cl_Isouf_start+0x2bc>)
   95ed4:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   95ed6:	2300      	movs	r3, #0
   95ed8:	9300      	str	r3, [sp, #0]
   95eda:	f04f 0300 	mov.w	r3, #0
   95ede:	f04f 0200 	mov.w	r2, #0
   95ee2:	2100      	movs	r1, #0
   95ee4:	202b      	movs	r0, #43	; 0x2b
   95ee6:	4c94      	ldr	r4, [pc, #592]	; (96138 <Cl_Isouf_start+0x2c0>)
   95ee8:	47a0      	blx	r4
   95eea:	4603      	mov	r3, r0
   95eec:	461a      	mov	r2, r3
   95eee:	4b91      	ldr	r3, [pc, #580]	; (96134 <Cl_Isouf_start+0x2bc>)
   95ef0:	701a      	strb	r2, [r3, #0]
	
	
	//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   95ef2:	2101      	movs	r1, #1
   95ef4:	203d      	movs	r0, #61	; 0x3d
   95ef6:	4b8e      	ldr	r3, [pc, #568]	; (96130 <Cl_Isouf_start+0x2b8>)
   95ef8:	4798      	blx	r3
   95efa:	4603      	mov	r3, r0
   95efc:	461a      	mov	r2, r3
   95efe:	4b8d      	ldr	r3, [pc, #564]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f00:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   95f02:	2101      	movs	r1, #1
   95f04:	203e      	movs	r0, #62	; 0x3e
   95f06:	4b8a      	ldr	r3, [pc, #552]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f08:	4798      	blx	r3
   95f0a:	4603      	mov	r3, r0
   95f0c:	461a      	mov	r2, r3
   95f0e:	4b89      	ldr	r3, [pc, #548]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f10:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   95f12:	2101      	movs	r1, #1
   95f14:	2005      	movs	r0, #5
   95f16:	4b86      	ldr	r3, [pc, #536]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f18:	4798      	blx	r3
   95f1a:	4603      	mov	r3, r0
   95f1c:	461a      	mov	r2, r3
   95f1e:	4b85      	ldr	r3, [pc, #532]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f20:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   95f22:	2101      	movs	r1, #1
   95f24:	2006      	movs	r0, #6
   95f26:	4b82      	ldr	r3, [pc, #520]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f28:	4798      	blx	r3
   95f2a:	4603      	mov	r3, r0
   95f2c:	461a      	mov	r2, r3
   95f2e:	4b81      	ldr	r3, [pc, #516]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f30:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   95f32:	2100      	movs	r1, #0
   95f34:	2003      	movs	r0, #3
   95f36:	4b7e      	ldr	r3, [pc, #504]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f38:	4798      	blx	r3
   95f3a:	4603      	mov	r3, r0
   95f3c:	461a      	mov	r2, r3
   95f3e:	4b7d      	ldr	r3, [pc, #500]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f40:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   95f42:	2100      	movs	r1, #0
   95f44:	2004      	movs	r0, #4
   95f46:	4b7a      	ldr	r3, [pc, #488]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f48:	4798      	blx	r3
   95f4a:	4603      	mov	r3, r0
   95f4c:	461a      	mov	r2, r3
   95f4e:	4b79      	ldr	r3, [pc, #484]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f50:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   95f52:	2100      	movs	r1, #0
   95f54:	2007      	movs	r0, #7
   95f56:	4b76      	ldr	r3, [pc, #472]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f58:	4798      	blx	r3
   95f5a:	4603      	mov	r3, r0
   95f5c:	461a      	mov	r2, r3
   95f5e:	4b75      	ldr	r3, [pc, #468]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f60:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   95f62:	2100      	movs	r1, #0
   95f64:	2008      	movs	r0, #8
   95f66:	4b72      	ldr	r3, [pc, #456]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f68:	4798      	blx	r3
   95f6a:	4603      	mov	r3, r0
   95f6c:	461a      	mov	r2, r3
   95f6e:	4b71      	ldr	r3, [pc, #452]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f70:	701a      	strb	r2, [r3, #0]
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   95f72:	2101      	movs	r1, #1
   95f74:	2020      	movs	r0, #32
   95f76:	4b6e      	ldr	r3, [pc, #440]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f78:	4798      	blx	r3
   95f7a:	4603      	mov	r3, r0
   95f7c:	461a      	mov	r2, r3
   95f7e:	4b6d      	ldr	r3, [pc, #436]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f80:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   95f82:	2100      	movs	r1, #0
   95f84:	2021      	movs	r0, #33	; 0x21
   95f86:	4b6a      	ldr	r3, [pc, #424]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f88:	4798      	blx	r3
   95f8a:	4603      	mov	r3, r0
   95f8c:	461a      	mov	r2, r3
   95f8e:	4b69      	ldr	r3, [pc, #420]	; (96134 <Cl_Isouf_start+0x2bc>)
   95f90:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   95f92:	2100      	movs	r1, #0
   95f94:	2024      	movs	r0, #36	; 0x24
   95f96:	4b66      	ldr	r3, [pc, #408]	; (96130 <Cl_Isouf_start+0x2b8>)
   95f98:	4798      	blx	r3
   95f9a:	4603      	mov	r3, r0
   95f9c:	461a      	mov	r2, r3
   95f9e:	4b65      	ldr	r3, [pc, #404]	; (96134 <Cl_Isouf_start+0x2bc>)
   95fa0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   95fa2:	2100      	movs	r1, #0
   95fa4:	2026      	movs	r0, #38	; 0x26
   95fa6:	4b62      	ldr	r3, [pc, #392]	; (96130 <Cl_Isouf_start+0x2b8>)
   95fa8:	4798      	blx	r3
   95faa:	4603      	mov	r3, r0
   95fac:	461a      	mov	r2, r3
   95fae:	4b61      	ldr	r3, [pc, #388]	; (96134 <Cl_Isouf_start+0x2bc>)
   95fb0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   95fb2:	2100      	movs	r1, #0
   95fb4:	2023      	movs	r0, #35	; 0x23
   95fb6:	4b5e      	ldr	r3, [pc, #376]	; (96130 <Cl_Isouf_start+0x2b8>)
   95fb8:	4798      	blx	r3
   95fba:	4603      	mov	r3, r0
   95fbc:	461a      	mov	r2, r3
   95fbe:	4b5d      	ldr	r3, [pc, #372]	; (96134 <Cl_Isouf_start+0x2bc>)
   95fc0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   95fc2:	2100      	movs	r1, #0
   95fc4:	2025      	movs	r0, #37	; 0x25
   95fc6:	4b5a      	ldr	r3, [pc, #360]	; (96130 <Cl_Isouf_start+0x2b8>)
   95fc8:	4798      	blx	r3
   95fca:	4603      	mov	r3, r0
   95fcc:	461a      	mov	r2, r3
   95fce:	4b59      	ldr	r3, [pc, #356]	; (96134 <Cl_Isouf_start+0x2bc>)
   95fd0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   95fd2:	2101      	movs	r1, #1
   95fd4:	2022      	movs	r0, #34	; 0x22
   95fd6:	4b56      	ldr	r3, [pc, #344]	; (96130 <Cl_Isouf_start+0x2b8>)
   95fd8:	4798      	blx	r3
   95fda:	4603      	mov	r3, r0
   95fdc:	461a      	mov	r2, r3
   95fde:	4b55      	ldr	r3, [pc, #340]	; (96134 <Cl_Isouf_start+0x2bc>)
   95fe0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   95fe2:	2100      	movs	r1, #0
   95fe4:	2017      	movs	r0, #23
   95fe6:	4b52      	ldr	r3, [pc, #328]	; (96130 <Cl_Isouf_start+0x2b8>)
   95fe8:	4798      	blx	r3
   95fea:	4603      	mov	r3, r0
   95fec:	461a      	mov	r2, r3
   95fee:	4b51      	ldr	r3, [pc, #324]	; (96134 <Cl_Isouf_start+0x2bc>)
   95ff0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   95ff2:	2100      	movs	r1, #0
   95ff4:	2018      	movs	r0, #24
   95ff6:	4b4e      	ldr	r3, [pc, #312]	; (96130 <Cl_Isouf_start+0x2b8>)
   95ff8:	4798      	blx	r3
   95ffa:	4603      	mov	r3, r0
   95ffc:	461a      	mov	r2, r3
   95ffe:	4b4d      	ldr	r3, [pc, #308]	; (96134 <Cl_Isouf_start+0x2bc>)
   96000:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   96002:	2100      	movs	r1, #0
   96004:	2015      	movs	r0, #21
   96006:	4b4a      	ldr	r3, [pc, #296]	; (96130 <Cl_Isouf_start+0x2b8>)
   96008:	4798      	blx	r3
   9600a:	4603      	mov	r3, r0
   9600c:	461a      	mov	r2, r3
   9600e:	4b49      	ldr	r3, [pc, #292]	; (96134 <Cl_Isouf_start+0x2bc>)
   96010:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   96012:	2100      	movs	r1, #0
   96014:	2016      	movs	r0, #22
   96016:	4b46      	ldr	r3, [pc, #280]	; (96130 <Cl_Isouf_start+0x2b8>)
   96018:	4798      	blx	r3
   9601a:	4603      	mov	r3, r0
   9601c:	461a      	mov	r2, r3
   9601e:	4b45      	ldr	r3, [pc, #276]	; (96134 <Cl_Isouf_start+0x2bc>)
   96020:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   96022:	2100      	movs	r1, #0
   96024:	2027      	movs	r0, #39	; 0x27
   96026:	4b42      	ldr	r3, [pc, #264]	; (96130 <Cl_Isouf_start+0x2b8>)
   96028:	4798      	blx	r3
   9602a:	4603      	mov	r3, r0
   9602c:	461a      	mov	r2, r3
   9602e:	4b41      	ldr	r3, [pc, #260]	; (96134 <Cl_Isouf_start+0x2bc>)
   96030:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   96032:	2100      	movs	r1, #0
   96034:	2028      	movs	r0, #40	; 0x28
   96036:	4b3e      	ldr	r3, [pc, #248]	; (96130 <Cl_Isouf_start+0x2b8>)
   96038:	4798      	blx	r3
   9603a:	4603      	mov	r3, r0
   9603c:	461a      	mov	r2, r3
   9603e:	4b3d      	ldr	r3, [pc, #244]	; (96134 <Cl_Isouf_start+0x2bc>)
   96040:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   96042:	2100      	movs	r1, #0
   96044:	2014      	movs	r0, #20
   96046:	4b3a      	ldr	r3, [pc, #232]	; (96130 <Cl_Isouf_start+0x2b8>)
   96048:	4798      	blx	r3
   9604a:	4603      	mov	r3, r0
   9604c:	461a      	mov	r2, r3
   9604e:	4b39      	ldr	r3, [pc, #228]	; (96134 <Cl_Isouf_start+0x2bc>)
   96050:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   96052:	2100      	movs	r1, #0
   96054:	2013      	movs	r0, #19
   96056:	4b36      	ldr	r3, [pc, #216]	; (96130 <Cl_Isouf_start+0x2b8>)
   96058:	4798      	blx	r3
   9605a:	4603      	mov	r3, r0
   9605c:	461a      	mov	r2, r3
   9605e:	4b35      	ldr	r3, [pc, #212]	; (96134 <Cl_Isouf_start+0x2bc>)
   96060:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   96062:	2100      	movs	r1, #0
   96064:	200f      	movs	r0, #15
   96066:	4b32      	ldr	r3, [pc, #200]	; (96130 <Cl_Isouf_start+0x2b8>)
   96068:	4798      	blx	r3
   9606a:	4603      	mov	r3, r0
   9606c:	461a      	mov	r2, r3
   9606e:	4b31      	ldr	r3, [pc, #196]	; (96134 <Cl_Isouf_start+0x2bc>)
   96070:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   96072:	2100      	movs	r1, #0
   96074:	2010      	movs	r0, #16
   96076:	4b2e      	ldr	r3, [pc, #184]	; (96130 <Cl_Isouf_start+0x2b8>)
   96078:	4798      	blx	r3
   9607a:	4603      	mov	r3, r0
   9607c:	461a      	mov	r2, r3
   9607e:	4b2d      	ldr	r3, [pc, #180]	; (96134 <Cl_Isouf_start+0x2bc>)
   96080:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   96082:	2100      	movs	r1, #0
   96084:	2011      	movs	r0, #17
   96086:	4b2a      	ldr	r3, [pc, #168]	; (96130 <Cl_Isouf_start+0x2b8>)
   96088:	4798      	blx	r3
   9608a:	4603      	mov	r3, r0
   9608c:	461a      	mov	r2, r3
   9608e:	4b29      	ldr	r3, [pc, #164]	; (96134 <Cl_Isouf_start+0x2bc>)
   96090:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   96092:	2100      	movs	r1, #0
   96094:	2012      	movs	r0, #18
   96096:	4b26      	ldr	r3, [pc, #152]	; (96130 <Cl_Isouf_start+0x2b8>)
   96098:	4798      	blx	r3
   9609a:	4603      	mov	r3, r0
   9609c:	461a      	mov	r2, r3
   9609e:	4b25      	ldr	r3, [pc, #148]	; (96134 <Cl_Isouf_start+0x2bc>)
   960a0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   960a2:	2100      	movs	r1, #0
   960a4:	2013      	movs	r0, #19
   960a6:	4b22      	ldr	r3, [pc, #136]	; (96130 <Cl_Isouf_start+0x2b8>)
   960a8:	4798      	blx	r3
   960aa:	4603      	mov	r3, r0
   960ac:	461a      	mov	r2, r3
   960ae:	4b21      	ldr	r3, [pc, #132]	; (96134 <Cl_Isouf_start+0x2bc>)
   960b0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   960b2:	2100      	movs	r1, #0
   960b4:	2014      	movs	r0, #20
   960b6:	4b1e      	ldr	r3, [pc, #120]	; (96130 <Cl_Isouf_start+0x2b8>)
   960b8:	4798      	blx	r3
   960ba:	4603      	mov	r3, r0
   960bc:	461a      	mov	r2, r3
   960be:	4b1d      	ldr	r3, [pc, #116]	; (96134 <Cl_Isouf_start+0x2bc>)
   960c0:	701a      	strb	r2, [r3, #0]
	
	Cl_ISOufTotalSecondscounter = 0;
   960c2:	4b1e      	ldr	r3, [pc, #120]	; (9613c <Cl_Isouf_start+0x2c4>)
   960c4:	2200      	movs	r2, #0
   960c6:	601a      	str	r2, [r3, #0]
	//	cl_dialysate_ready_isouf();
	sv_cntrl_deactivate_valve(VALVE_ID13);
   960c8:	200d      	movs	r0, #13
   960ca:	4b1d      	ldr	r3, [pc, #116]	; (96140 <Cl_Isouf_start+0x2c8>)
   960cc:	4798      	blx	r3
	sv_cntrl_activate_valve(VALVE_ID14);
   960ce:	200e      	movs	r0, #14
   960d0:	4b1c      	ldr	r3, [pc, #112]	; (96144 <Cl_Isouf_start+0x2cc>)
   960d2:	4798      	blx	r3
	sv_cntrl_deactivate_valve(VALVE_ID15);
   960d4:	200f      	movs	r0, #15
   960d6:	4b1a      	ldr	r3, [pc, #104]	; (96140 <Cl_Isouf_start+0x2c8>)
   960d8:	4798      	blx	r3
	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   960da:	2100      	movs	r1, #0
   960dc:	200b      	movs	r0, #11
   960de:	4b1a      	ldr	r3, [pc, #104]	; (96148 <Cl_Isouf_start+0x2d0>)
   960e0:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_START,0);
   960e2:	2100      	movs	r1, #0
   960e4:	2002      	movs	r0, #2
   960e6:	4b19      	ldr	r3, [pc, #100]	; (9614c <Cl_Isouf_start+0x2d4>)
   960e8:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   960ea:	2100      	movs	r1, #0
   960ec:	2002      	movs	r0, #2
   960ee:	4b18      	ldr	r3, [pc, #96]	; (96150 <Cl_Isouf_start+0x2d8>)
   960f0:	4798      	blx	r3
	
	
	isouf = true;
   960f2:	4b18      	ldr	r3, [pc, #96]	; (96154 <Cl_Isouf_start+0x2dc>)
   960f4:	2201      	movs	r2, #1
   960f6:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STARTED,&data,0);
   960f8:	1dfb      	adds	r3, r7, #7
   960fa:	2200      	movs	r2, #0
   960fc:	4619      	mov	r1, r3
   960fe:	204b      	movs	r0, #75	; 0x4b
   96100:	4b15      	ldr	r3, [pc, #84]	; (96158 <Cl_Isouf_start+0x2e0>)
   96102:	4798      	blx	r3
   96104:	4603      	mov	r3, r0
   96106:	461a      	mov	r2, r3
   96108:	4b0a      	ldr	r3, [pc, #40]	; (96134 <Cl_Isouf_start+0x2bc>)
   9610a:	701a      	strb	r2, [r3, #0]
	cl_wait(10);
   9610c:	200a      	movs	r0, #10
   9610e:	4b13      	ldr	r3, [pc, #76]	; (9615c <Cl_Isouf_start+0x2e4>)
   96110:	4798      	blx	r3
		Cl_Iso_UpdateTimeInfo();
   96112:	4b13      	ldr	r3, [pc, #76]	; (96160 <Cl_Isouf_start+0x2e8>)
   96114:	4798      	blx	r3
}
   96116:	bf00      	nop
   96118:	4618      	mov	r0, r3
   9611a:	370c      	adds	r7, #12
   9611c:	46bd      	mov	sp, r7
   9611e:	bd90      	pop	{r4, r7, pc}
   96120:	0009b0b9 	.word	0x0009b0b9
   96124:	0009b091 	.word	0x0009b091
   96128:	0009b0a5 	.word	0x0009b0a5
   9612c:	0009b07d 	.word	0x0009b07d
   96130:	000829e5 	.word	0x000829e5
   96134:	200719de 	.word	0x200719de
   96138:	00082989 	.word	0x00082989
   9613c:	200719e0 	.word	0x200719e0
   96140:	0009ae01 	.word	0x0009ae01
   96144:	0009ade1 	.word	0x0009ade1
   96148:	00094729 	.word	0x00094729
   9614c:	00093f5d 	.word	0x00093f5d
   96150:	00096ea9 	.word	0x00096ea9
   96154:	200719e4 	.word	0x200719e4
   96158:	0009cbd5 	.word	0x0009cbd5
   9615c:	00093ea9 	.word	0x00093ea9
   96160:	0009691d 	.word	0x0009691d
   96164:	00000000 	.word	0x00000000

00096168 <Cl_Iso_Senddata>:

Cl_ReturnCodeType Cl_Iso_Senddata(){
   96168:	b5f0      	push	{r4, r5, r6, r7, lr}
   9616a:	b093      	sub	sp, #76	; 0x4c
   9616c:	af00      	add	r7, sp, #0
	
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9616e:	f107 030c 	add.w	r3, r7, #12
   96172:	222c      	movs	r2, #44	; 0x2c
   96174:	2100      	movs	r1, #0
   96176:	4618      	mov	r0, r3
   96178:	4b7b      	ldr	r3, [pc, #492]	; (96368 <Cl_Iso_Senddata+0x200>)
   9617a:	4798      	blx	r3
	cl_IsoUfDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   9617c:	2300      	movs	r3, #0
   9617e:	807b      	strh	r3, [r7, #2]
   96180:	2300      	movs	r3, #0
   96182:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   96186:	2300      	movs	r3, #0
   96188:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	Cl_Uint8Type count = 0;
   9618c:	2300      	movs	r3, #0
   9618e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   96192:	2359      	movs	r3, #89	; 0x59
   96194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   96198:	232a      	movs	r3, #42	; 0x2a
   9619a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	systemdataarray[0] = ISOUF_DATA;
   9619e:	230c      	movs	r3, #12
   961a0:	733b      	strb	r3, [r7, #12]
	count++;
   961a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   961a6:	3301      	adds	r3, #1
   961a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   961ac:	1cbb      	adds	r3, r7, #2
   961ae:	4619      	mov	r1, r3
   961b0:	2014      	movs	r0, #20
   961b2:	4b6e      	ldr	r3, [pc, #440]	; (9636c <Cl_Iso_Senddata+0x204>)
   961b4:	4798      	blx	r3
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// //							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 31 -20;
// //							avgtmp3 =(avgtmp3*5 + temp1)/6;
// 							avgtmp3 = (res_temp_value  - 0.4)/10;
							avgtmp3 = (float)temp/10;
   961b6:	887a      	ldrh	r2, [r7, #2]
   961b8:	4b6d      	ldr	r3, [pc, #436]	; (96370 <Cl_Iso_Senddata+0x208>)
   961ba:	4610      	mov	r0, r2
   961bc:	4798      	blx	r3
   961be:	4602      	mov	r2, r0
   961c0:	4b6c      	ldr	r3, [pc, #432]	; (96374 <Cl_Iso_Senddata+0x20c>)
   961c2:	496d      	ldr	r1, [pc, #436]	; (96378 <Cl_Iso_Senddata+0x210>)
   961c4:	4610      	mov	r0, r2
   961c6:	4798      	blx	r3
   961c8:	4603      	mov	r3, r0
   961ca:	461a      	mov	r2, r3
   961cc:	4b6b      	ldr	r3, [pc, #428]	; (9637c <Cl_Iso_Senddata+0x214>)
   961ce:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   961d0:	1cbb      	adds	r3, r7, #2
   961d2:	4619      	mov	r1, r3
   961d4:	2007      	movs	r0, #7
   961d6:	4b65      	ldr	r3, [pc, #404]	; (9636c <Cl_Iso_Senddata+0x204>)
   961d8:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				
				if (temp > 50)
   961da:	887b      	ldrh	r3, [r7, #2]
   961dc:	2b32      	cmp	r3, #50	; 0x32
   961de:	f240 80e5 	bls.w	963ac <Cl_Iso_Senddata+0x244>
			{
				//	calibration_cond(temp);
					cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
   961e2:	887b      	ldrh	r3, [r7, #2]
   961e4:	461a      	mov	r2, r3
   961e6:	4b66      	ldr	r3, [pc, #408]	; (96380 <Cl_Iso_Senddata+0x218>)
   961e8:	4610      	mov	r0, r2
   961ea:	4798      	blx	r3
   961ec:	4c65      	ldr	r4, [pc, #404]	; (96384 <Cl_Iso_Senddata+0x21c>)
   961ee:	a356      	add	r3, pc, #344	; (adr r3, 96348 <Cl_Iso_Senddata+0x1e0>)
   961f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   961f4:	47a0      	blx	r4
   961f6:	4603      	mov	r3, r0
   961f8:	460c      	mov	r4, r1
   961fa:	461d      	mov	r5, r3
   961fc:	4626      	mov	r6, r4
   961fe:	887b      	ldrh	r3, [r7, #2]
   96200:	461a      	mov	r2, r3
   96202:	4b5f      	ldr	r3, [pc, #380]	; (96380 <Cl_Iso_Senddata+0x218>)
   96204:	4610      	mov	r0, r2
   96206:	4798      	blx	r3
   96208:	4602      	mov	r2, r0
   9620a:	460b      	mov	r3, r1
   9620c:	4c5d      	ldr	r4, [pc, #372]	; (96384 <Cl_Iso_Senddata+0x21c>)
   9620e:	4628      	mov	r0, r5
   96210:	4631      	mov	r1, r6
   96212:	47a0      	blx	r4
   96214:	4603      	mov	r3, r0
   96216:	460c      	mov	r4, r1
   96218:	461d      	mov	r5, r3
   9621a:	4626      	mov	r6, r4
   9621c:	887b      	ldrh	r3, [r7, #2]
   9621e:	461a      	mov	r2, r3
   96220:	4b57      	ldr	r3, [pc, #348]	; (96380 <Cl_Iso_Senddata+0x218>)
   96222:	4610      	mov	r0, r2
   96224:	4798      	blx	r3
   96226:	4c57      	ldr	r4, [pc, #348]	; (96384 <Cl_Iso_Senddata+0x21c>)
   96228:	a349      	add	r3, pc, #292	; (adr r3, 96350 <Cl_Iso_Senddata+0x1e8>)
   9622a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9622e:	47a0      	blx	r4
   96230:	4603      	mov	r3, r0
   96232:	460c      	mov	r4, r1
   96234:	461a      	mov	r2, r3
   96236:	4623      	mov	r3, r4
   96238:	4c53      	ldr	r4, [pc, #332]	; (96388 <Cl_Iso_Senddata+0x220>)
   9623a:	4628      	mov	r0, r5
   9623c:	4631      	mov	r1, r6
   9623e:	47a0      	blx	r4
   96240:	4603      	mov	r3, r0
   96242:	460c      	mov	r4, r1
   96244:	4618      	mov	r0, r3
   96246:	4621      	mov	r1, r4
   96248:	4c50      	ldr	r4, [pc, #320]	; (9638c <Cl_Iso_Senddata+0x224>)
   9624a:	a343      	add	r3, pc, #268	; (adr r3, 96358 <Cl_Iso_Senddata+0x1f0>)
   9624c:	e9d3 2300 	ldrd	r2, r3, [r3]
   96250:	47a0      	blx	r4
   96252:	4603      	mov	r3, r0
   96254:	460c      	mov	r4, r1
   96256:	4619      	mov	r1, r3
   96258:	4622      	mov	r2, r4
   9625a:	4b4d      	ldr	r3, [pc, #308]	; (96390 <Cl_Iso_Senddata+0x228>)
   9625c:	4608      	mov	r0, r1
   9625e:	4611      	mov	r1, r2
   96260:	4798      	blx	r3
   96262:	4602      	mov	r2, r0
   96264:	4b4b      	ldr	r3, [pc, #300]	; (96394 <Cl_Iso_Senddata+0x22c>)
   96266:	601a      	str	r2, [r3, #0]
				//	cond =(cond*5 + cond_final_cs3)/6;
					cond_comp= cond/(1+(avgtmp3/10-25.0)*0.020);
   96268:	4b4a      	ldr	r3, [pc, #296]	; (96394 <Cl_Iso_Senddata+0x22c>)
   9626a:	681a      	ldr	r2, [r3, #0]
   9626c:	4b4a      	ldr	r3, [pc, #296]	; (96398 <Cl_Iso_Senddata+0x230>)
   9626e:	4610      	mov	r0, r2
   96270:	4798      	blx	r3
   96272:	4605      	mov	r5, r0
   96274:	460e      	mov	r6, r1
   96276:	4b41      	ldr	r3, [pc, #260]	; (9637c <Cl_Iso_Senddata+0x214>)
   96278:	681a      	ldr	r2, [r3, #0]
   9627a:	4b3e      	ldr	r3, [pc, #248]	; (96374 <Cl_Iso_Senddata+0x20c>)
   9627c:	493e      	ldr	r1, [pc, #248]	; (96378 <Cl_Iso_Senddata+0x210>)
   9627e:	4610      	mov	r0, r2
   96280:	4798      	blx	r3
   96282:	4603      	mov	r3, r0
   96284:	461a      	mov	r2, r3
   96286:	4b44      	ldr	r3, [pc, #272]	; (96398 <Cl_Iso_Senddata+0x230>)
   96288:	4610      	mov	r0, r2
   9628a:	4798      	blx	r3
   9628c:	4c3f      	ldr	r4, [pc, #252]	; (9638c <Cl_Iso_Senddata+0x224>)
   9628e:	f04f 0200 	mov.w	r2, #0
   96292:	4b42      	ldr	r3, [pc, #264]	; (9639c <Cl_Iso_Senddata+0x234>)
   96294:	47a0      	blx	r4
   96296:	4603      	mov	r3, r0
   96298:	460c      	mov	r4, r1
   9629a:	4618      	mov	r0, r3
   9629c:	4621      	mov	r1, r4
   9629e:	4c39      	ldr	r4, [pc, #228]	; (96384 <Cl_Iso_Senddata+0x21c>)
   962a0:	a32f      	add	r3, pc, #188	; (adr r3, 96360 <Cl_Iso_Senddata+0x1f8>)
   962a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   962a6:	47a0      	blx	r4
   962a8:	4603      	mov	r3, r0
   962aa:	460c      	mov	r4, r1
   962ac:	4618      	mov	r0, r3
   962ae:	4621      	mov	r1, r4
   962b0:	4c35      	ldr	r4, [pc, #212]	; (96388 <Cl_Iso_Senddata+0x220>)
   962b2:	f04f 0200 	mov.w	r2, #0
   962b6:	4b3a      	ldr	r3, [pc, #232]	; (963a0 <Cl_Iso_Senddata+0x238>)
   962b8:	47a0      	blx	r4
   962ba:	4603      	mov	r3, r0
   962bc:	460c      	mov	r4, r1
   962be:	461a      	mov	r2, r3
   962c0:	4623      	mov	r3, r4
   962c2:	4c38      	ldr	r4, [pc, #224]	; (963a4 <Cl_Iso_Senddata+0x23c>)
   962c4:	4628      	mov	r0, r5
   962c6:	4631      	mov	r1, r6
   962c8:	47a0      	blx	r4
   962ca:	4603      	mov	r3, r0
   962cc:	460c      	mov	r4, r1
   962ce:	4619      	mov	r1, r3
   962d0:	4622      	mov	r2, r4
   962d2:	4b2f      	ldr	r3, [pc, #188]	; (96390 <Cl_Iso_Senddata+0x228>)
   962d4:	4608      	mov	r0, r1
   962d6:	4611      	mov	r1, r2
   962d8:	4798      	blx	r3
   962da:	4603      	mov	r3, r0
   962dc:	63fb      	str	r3, [r7, #60]	; 0x3c
				
					
					tempdata.word = (cond_comp);
   962de:	4b32      	ldr	r3, [pc, #200]	; (963a8 <Cl_Iso_Senddata+0x240>)
   962e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   962e2:	4798      	blx	r3
   962e4:	4603      	mov	r3, r0
   962e6:	607b      	str	r3, [r7, #4]
					systemdataarray[count++] = tempdata.bytearray[0];
   962e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   962ec:	1c5a      	adds	r2, r3, #1
   962ee:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   962f2:	793a      	ldrb	r2, [r7, #4]
   962f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   962f8:	440b      	add	r3, r1
   962fa:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[1];
   962fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96302:	1c5a      	adds	r2, r3, #1
   96304:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96308:	797a      	ldrb	r2, [r7, #5]
   9630a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9630e:	440b      	add	r3, r1
   96310:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[2];
   96314:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96318:	1c5a      	adds	r2, r3, #1
   9631a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9631e:	79ba      	ldrb	r2, [r7, #6]
   96320:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96324:	440b      	add	r3, r1
   96326:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[3];
   9632a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9632e:	1c5a      	adds	r2, r3, #1
   96330:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96334:	79fa      	ldrb	r2, [r7, #7]
   96336:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9633a:	440b      	add	r3, r1
   9633c:	f803 2c3c 	strb.w	r2, [r3, #-60]
   96340:	e062      	b.n	96408 <Cl_Iso_Senddata+0x2a0>
   96342:	bf00      	nop
   96344:	f3af 8000 	nop.w
   96348:	eb1c432d 	.word	0xeb1c432d
   9634c:	bf1a36e2 	.word	0xbf1a36e2
   96350:	70a3d70a 	.word	0x70a3d70a
   96354:	3fd70a3d 	.word	0x3fd70a3d
   96358:	851eb852 	.word	0x851eb852
   9635c:	404331eb 	.word	0x404331eb
   96360:	47ae147b 	.word	0x47ae147b
   96364:	3f947ae1 	.word	0x3f947ae1
   96368:	000a84fd 	.word	0x000a84fd
   9636c:	0008fa01 	.word	0x0008fa01
   96370:	000a7ef9 	.word	0x000a7ef9
   96374:	000a8111 	.word	0x000a8111
   96378:	41200000 	.word	0x41200000
   9637c:	200719ec 	.word	0x200719ec
   96380:	000a765d 	.word	0x000a765d
   96384:	000a7729 	.word	0x000a7729
   96388:	000a73c5 	.word	0x000a73c5
   9638c:	000a73c1 	.word	0x000a73c1
   96390:	000a7ced 	.word	0x000a7ced
   96394:	200719f0 	.word	0x200719f0
   96398:	000a7681 	.word	0x000a7681
   9639c:	40390000 	.word	0x40390000
   963a0:	3ff00000 	.word	0x3ff00000
   963a4:	000a797d 	.word	0x000a797d
   963a8:	000a8381 	.word	0x000a8381
			}
				else
				{
					tempdata.word = 0;
   963ac:	2300      	movs	r3, #0
   963ae:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   963b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   963b4:	1c5a      	adds	r2, r3, #1
   963b6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   963ba:	793a      	ldrb	r2, [r7, #4]
   963bc:	f107 0148 	add.w	r1, r7, #72	; 0x48
   963c0:	440b      	add	r3, r1
   963c2:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   963c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   963ca:	1c5a      	adds	r2, r3, #1
   963cc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   963d0:	797a      	ldrb	r2, [r7, #5]
   963d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   963d6:	440b      	add	r3, r1
   963d8:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   963dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   963e0:	1c5a      	adds	r2, r3, #1
   963e2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   963e6:	79ba      	ldrb	r2, [r7, #6]
   963e8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   963ec:	440b      	add	r3, r1
   963ee:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   963f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   963f6:	1c5a      	adds	r2, r3, #1
   963f8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   963fc:	79fa      	ldrb	r2, [r7, #7]
   963fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96402:	440b      	add	r3, r1
   96404:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   96408:	4baf      	ldr	r3, [pc, #700]	; (966c8 <Cl_Iso_Senddata+0x560>)
   9640a:	681a      	ldr	r2, [r3, #0]
   9640c:	4baf      	ldr	r3, [pc, #700]	; (966cc <Cl_Iso_Senddata+0x564>)
   9640e:	4610      	mov	r0, r2
   96410:	4798      	blx	r3
   96412:	4603      	mov	r3, r0
   96414:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   96416:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9641a:	1c5a      	adds	r2, r3, #1
   9641c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96420:	793a      	ldrb	r2, [r7, #4]
   96422:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96426:	440b      	add	r3, r1
   96428:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   9642c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96430:	1c5a      	adds	r2, r3, #1
   96432:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96436:	797a      	ldrb	r2, [r7, #5]
   96438:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9643c:	440b      	add	r3, r1
   9643e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   96442:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96446:	1c5a      	adds	r2, r3, #1
   96448:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9644c:	79ba      	ldrb	r2, [r7, #6]
   9644e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96452:	440b      	add	r3, r1
   96454:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   96458:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9645c:	1c5a      	adds	r2, r3, #1
   9645e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96462:	79fa      	ldrb	r2, [r7, #7]
   96464:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96468:	440b      	add	r3, r1
   9646a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   9646e:	1d3b      	adds	r3, r7, #4
   96470:	4619      	mov	r1, r3
   96472:	200b      	movs	r0, #11
   96474:	4b96      	ldr	r3, [pc, #600]	; (966d0 <Cl_Iso_Senddata+0x568>)
   96476:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96478:	88bb      	ldrh	r3, [r7, #4]
   9647a:	461a      	mov	r2, r3
   9647c:	4b95      	ldr	r3, [pc, #596]	; (966d4 <Cl_Iso_Senddata+0x56c>)
   9647e:	4610      	mov	r0, r2
   96480:	4798      	blx	r3
   96482:	4c95      	ldr	r4, [pc, #596]	; (966d8 <Cl_Iso_Senddata+0x570>)
   96484:	a38e      	add	r3, pc, #568	; (adr r3, 966c0 <Cl_Iso_Senddata+0x558>)
   96486:	e9d3 2300 	ldrd	r2, r3, [r3]
   9648a:	47a0      	blx	r4
   9648c:	4603      	mov	r3, r0
   9648e:	460c      	mov	r4, r1
   96490:	4619      	mov	r1, r3
   96492:	4622      	mov	r2, r4
   96494:	4b91      	ldr	r3, [pc, #580]	; (966dc <Cl_Iso_Senddata+0x574>)
   96496:	4608      	mov	r0, r1
   96498:	4611      	mov	r1, r2
   9649a:	4798      	blx	r3
   9649c:	4603      	mov	r3, r0
   9649e:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   964a0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   964a4:	4618      	mov	r0, r3
   964a6:	4b8e      	ldr	r3, [pc, #568]	; (966e0 <Cl_Iso_Senddata+0x578>)
   964a8:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   964aa:	4b8e      	ldr	r3, [pc, #568]	; (966e4 <Cl_Iso_Senddata+0x57c>)
   964ac:	681a      	ldr	r2, [r3, #0]
   964ae:	4b8e      	ldr	r3, [pc, #568]	; (966e8 <Cl_Iso_Senddata+0x580>)
   964b0:	498e      	ldr	r1, [pc, #568]	; (966ec <Cl_Iso_Senddata+0x584>)
   964b2:	4610      	mov	r0, r2
   964b4:	4798      	blx	r3
   964b6:	4603      	mov	r3, r0
   964b8:	4618      	mov	r0, r3
   964ba:	4b8d      	ldr	r3, [pc, #564]	; (966f0 <Cl_Iso_Senddata+0x588>)
   964bc:	681a      	ldr	r2, [r3, #0]
   964be:	4b8d      	ldr	r3, [pc, #564]	; (966f4 <Cl_Iso_Senddata+0x58c>)
   964c0:	4611      	mov	r1, r2
   964c2:	4798      	blx	r3
   964c4:	4603      	mov	r3, r0
   964c6:	461a      	mov	r2, r3
   964c8:	4b8b      	ldr	r3, [pc, #556]	; (966f8 <Cl_Iso_Senddata+0x590>)
   964ca:	498c      	ldr	r1, [pc, #560]	; (966fc <Cl_Iso_Senddata+0x594>)
   964cc:	4610      	mov	r0, r2
   964ce:	4798      	blx	r3
   964d0:	4603      	mov	r3, r0
   964d2:	461a      	mov	r2, r3
   964d4:	4b83      	ldr	r3, [pc, #524]	; (966e4 <Cl_Iso_Senddata+0x57c>)
   964d6:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   964d8:	4b82      	ldr	r3, [pc, #520]	; (966e4 <Cl_Iso_Senddata+0x57c>)
   964da:	681a      	ldr	r2, [r3, #0]
   964dc:	4b7b      	ldr	r3, [pc, #492]	; (966cc <Cl_Iso_Senddata+0x564>)
   964de:	4610      	mov	r0, r2
   964e0:	4798      	blx	r3
   964e2:	4603      	mov	r3, r0
   964e4:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   964e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   964ea:	1c5a      	adds	r2, r3, #1
   964ec:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   964f0:	793a      	ldrb	r2, [r7, #4]
   964f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   964f6:	440b      	add	r3, r1
   964f8:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   964fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96500:	1c5a      	adds	r2, r3, #1
   96502:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96506:	797a      	ldrb	r2, [r7, #5]
   96508:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9650c:	440b      	add	r3, r1
   9650e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   96512:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96516:	1c5a      	adds	r2, r3, #1
   96518:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9651c:	79ba      	ldrb	r2, [r7, #6]
   9651e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96522:	440b      	add	r3, r1
   96524:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96528:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9652c:	1c5a      	adds	r2, r3, #1
   9652e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96532:	79fa      	ldrb	r2, [r7, #7]
   96534:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96538:	440b      	add	r3, r1
   9653a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   9653e:	1d3b      	adds	r3, r7, #4
   96540:	4619      	mov	r1, r3
   96542:	200c      	movs	r0, #12
   96544:	4b62      	ldr	r3, [pc, #392]	; (966d0 <Cl_Iso_Senddata+0x568>)
   96546:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96548:	88bb      	ldrh	r3, [r7, #4]
   9654a:	461a      	mov	r2, r3
   9654c:	4b61      	ldr	r3, [pc, #388]	; (966d4 <Cl_Iso_Senddata+0x56c>)
   9654e:	4610      	mov	r0, r2
   96550:	4798      	blx	r3
   96552:	4c61      	ldr	r4, [pc, #388]	; (966d8 <Cl_Iso_Senddata+0x570>)
   96554:	a35a      	add	r3, pc, #360	; (adr r3, 966c0 <Cl_Iso_Senddata+0x558>)
   96556:	e9d3 2300 	ldrd	r2, r3, [r3]
   9655a:	47a0      	blx	r4
   9655c:	4603      	mov	r3, r0
   9655e:	460c      	mov	r4, r1
   96560:	4619      	mov	r1, r3
   96562:	4622      	mov	r2, r4
   96564:	4b5d      	ldr	r3, [pc, #372]	; (966dc <Cl_Iso_Senddata+0x574>)
   96566:	4608      	mov	r0, r1
   96568:	4611      	mov	r1, r2
   9656a:	4798      	blx	r3
   9656c:	4603      	mov	r3, r0
   9656e:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   96570:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   96574:	4618      	mov	r0, r3
   96576:	4b62      	ldr	r3, [pc, #392]	; (96700 <Cl_Iso_Senddata+0x598>)
   96578:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   9657a:	4b62      	ldr	r3, [pc, #392]	; (96704 <Cl_Iso_Senddata+0x59c>)
   9657c:	681a      	ldr	r2, [r3, #0]
   9657e:	4b5a      	ldr	r3, [pc, #360]	; (966e8 <Cl_Iso_Senddata+0x580>)
   96580:	495a      	ldr	r1, [pc, #360]	; (966ec <Cl_Iso_Senddata+0x584>)
   96582:	4610      	mov	r0, r2
   96584:	4798      	blx	r3
   96586:	4603      	mov	r3, r0
   96588:	4618      	mov	r0, r3
   9658a:	4b5f      	ldr	r3, [pc, #380]	; (96708 <Cl_Iso_Senddata+0x5a0>)
   9658c:	681a      	ldr	r2, [r3, #0]
   9658e:	4b59      	ldr	r3, [pc, #356]	; (966f4 <Cl_Iso_Senddata+0x58c>)
   96590:	4611      	mov	r1, r2
   96592:	4798      	blx	r3
   96594:	4603      	mov	r3, r0
   96596:	461a      	mov	r2, r3
   96598:	4b57      	ldr	r3, [pc, #348]	; (966f8 <Cl_Iso_Senddata+0x590>)
   9659a:	4958      	ldr	r1, [pc, #352]	; (966fc <Cl_Iso_Senddata+0x594>)
   9659c:	4610      	mov	r0, r2
   9659e:	4798      	blx	r3
   965a0:	4603      	mov	r3, r0
   965a2:	461a      	mov	r2, r3
   965a4:	4b57      	ldr	r3, [pc, #348]	; (96704 <Cl_Iso_Senddata+0x59c>)
   965a6:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   965a8:	4b56      	ldr	r3, [pc, #344]	; (96704 <Cl_Iso_Senddata+0x59c>)
   965aa:	681a      	ldr	r2, [r3, #0]
   965ac:	4b47      	ldr	r3, [pc, #284]	; (966cc <Cl_Iso_Senddata+0x564>)
   965ae:	4610      	mov	r0, r2
   965b0:	4798      	blx	r3
   965b2:	4603      	mov	r3, r0
   965b4:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   965b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   965ba:	1c5a      	adds	r2, r3, #1
   965bc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   965c0:	793a      	ldrb	r2, [r7, #4]
   965c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   965c6:	440b      	add	r3, r1
   965c8:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   965cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   965d0:	1c5a      	adds	r2, r3, #1
   965d2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   965d6:	797a      	ldrb	r2, [r7, #5]
   965d8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   965dc:	440b      	add	r3, r1
   965de:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   965e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   965e6:	1c5a      	adds	r2, r3, #1
   965e8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   965ec:	79ba      	ldrb	r2, [r7, #6]
   965ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
   965f2:	440b      	add	r3, r1
   965f4:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   965f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   965fc:	1c5a      	adds	r2, r3, #1
   965fe:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96602:	79fa      	ldrb	r2, [r7, #7]
   96604:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96608:	440b      	add	r3, r1
   9660a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   9660e:	1d3b      	adds	r3, r7, #4
   96610:	4619      	mov	r1, r3
   96612:	200e      	movs	r0, #14
   96614:	4b2e      	ldr	r3, [pc, #184]	; (966d0 <Cl_Iso_Senddata+0x568>)
   96616:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96618:	88bb      	ldrh	r3, [r7, #4]
   9661a:	461a      	mov	r2, r3
   9661c:	4b2d      	ldr	r3, [pc, #180]	; (966d4 <Cl_Iso_Senddata+0x56c>)
   9661e:	4610      	mov	r0, r2
   96620:	4798      	blx	r3
   96622:	4c2d      	ldr	r4, [pc, #180]	; (966d8 <Cl_Iso_Senddata+0x570>)
   96624:	a326      	add	r3, pc, #152	; (adr r3, 966c0 <Cl_Iso_Senddata+0x558>)
   96626:	e9d3 2300 	ldrd	r2, r3, [r3]
   9662a:	47a0      	blx	r4
   9662c:	4603      	mov	r3, r0
   9662e:	460c      	mov	r4, r1
   96630:	4619      	mov	r1, r3
   96632:	4622      	mov	r2, r4
   96634:	4b29      	ldr	r3, [pc, #164]	; (966dc <Cl_Iso_Senddata+0x574>)
   96636:	4608      	mov	r0, r1
   96638:	4611      	mov	r1, r2
   9663a:	4798      	blx	r3
   9663c:	4603      	mov	r3, r0
   9663e:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   96640:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   96644:	4618      	mov	r0, r3
   96646:	4b31      	ldr	r3, [pc, #196]	; (9670c <Cl_Iso_Senddata+0x5a4>)
   96648:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   9664a:	4b31      	ldr	r3, [pc, #196]	; (96710 <Cl_Iso_Senddata+0x5a8>)
   9664c:	681a      	ldr	r2, [r3, #0]
   9664e:	4b26      	ldr	r3, [pc, #152]	; (966e8 <Cl_Iso_Senddata+0x580>)
   96650:	4926      	ldr	r1, [pc, #152]	; (966ec <Cl_Iso_Senddata+0x584>)
   96652:	4610      	mov	r0, r2
   96654:	4798      	blx	r3
   96656:	4603      	mov	r3, r0
   96658:	4618      	mov	r0, r3
   9665a:	4b2e      	ldr	r3, [pc, #184]	; (96714 <Cl_Iso_Senddata+0x5ac>)
   9665c:	681a      	ldr	r2, [r3, #0]
   9665e:	4b25      	ldr	r3, [pc, #148]	; (966f4 <Cl_Iso_Senddata+0x58c>)
   96660:	4611      	mov	r1, r2
   96662:	4798      	blx	r3
   96664:	4603      	mov	r3, r0
   96666:	461a      	mov	r2, r3
   96668:	4b23      	ldr	r3, [pc, #140]	; (966f8 <Cl_Iso_Senddata+0x590>)
   9666a:	4924      	ldr	r1, [pc, #144]	; (966fc <Cl_Iso_Senddata+0x594>)
   9666c:	4610      	mov	r0, r2
   9666e:	4798      	blx	r3
   96670:	4603      	mov	r3, r0
   96672:	461a      	mov	r2, r3
   96674:	4b26      	ldr	r3, [pc, #152]	; (96710 <Cl_Iso_Senddata+0x5a8>)
   96676:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   96678:	1d3b      	adds	r3, r7, #4
   9667a:	4619      	mov	r1, r3
   9667c:	200f      	movs	r0, #15
   9667e:	4b14      	ldr	r3, [pc, #80]	; (966d0 <Cl_Iso_Senddata+0x568>)
   96680:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   96682:	88bb      	ldrh	r3, [r7, #4]
   96684:	461a      	mov	r2, r3
   96686:	4b13      	ldr	r3, [pc, #76]	; (966d4 <Cl_Iso_Senddata+0x56c>)
   96688:	4610      	mov	r0, r2
   9668a:	4798      	blx	r3
   9668c:	4c12      	ldr	r4, [pc, #72]	; (966d8 <Cl_Iso_Senddata+0x570>)
   9668e:	a30c      	add	r3, pc, #48	; (adr r3, 966c0 <Cl_Iso_Senddata+0x558>)
   96690:	e9d3 2300 	ldrd	r2, r3, [r3]
   96694:	47a0      	blx	r4
   96696:	4603      	mov	r3, r0
   96698:	460c      	mov	r4, r1
   9669a:	4619      	mov	r1, r3
   9669c:	4622      	mov	r2, r4
   9669e:	4b0f      	ldr	r3, [pc, #60]	; (966dc <Cl_Iso_Senddata+0x574>)
   966a0:	4608      	mov	r0, r1
   966a2:	4611      	mov	r1, r2
   966a4:	4798      	blx	r3
   966a6:	4603      	mov	r3, r0
   966a8:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   966aa:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   966ae:	4618      	mov	r0, r3
   966b0:	4b19      	ldr	r3, [pc, #100]	; (96718 <Cl_Iso_Senddata+0x5b0>)
   966b2:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   966b4:	4b19      	ldr	r3, [pc, #100]	; (9671c <Cl_Iso_Senddata+0x5b4>)
   966b6:	681a      	ldr	r2, [r3, #0]
   966b8:	4b0b      	ldr	r3, [pc, #44]	; (966e8 <Cl_Iso_Senddata+0x580>)
   966ba:	e031      	b.n	96720 <Cl_Iso_Senddata+0x5b8>
   966bc:	f3af 8000 	nop.w
   966c0:	58e21965 	.word	0x58e21965
   966c4:	3fe9b717 	.word	0x3fe9b717
   966c8:	200719ec 	.word	0x200719ec
   966cc:	000a8381 	.word	0x000a8381
   966d0:	0008fa01 	.word	0x0008fa01
   966d4:	000a765d 	.word	0x000a765d
   966d8:	000a7729 	.word	0x000a7729
   966dc:	000a7cad 	.word	0x000a7cad
   966e0:	00083c91 	.word	0x00083c91
   966e4:	200719f4 	.word	0x200719f4
   966e8:	000a7fa9 	.word	0x000a7fa9
   966ec:	40a00000 	.word	0x40a00000
   966f0:	200720b0 	.word	0x200720b0
   966f4:	000a7d99 	.word	0x000a7d99
   966f8:	000a8111 	.word	0x000a8111
   966fc:	40c00000 	.word	0x40c00000
   96700:	00083e11 	.word	0x00083e11
   96704:	200719f8 	.word	0x200719f8
   96708:	2007172c 	.word	0x2007172c
   9670c:	00083f91 	.word	0x00083f91
   96710:	200719fc 	.word	0x200719fc
   96714:	20071730 	.word	0x20071730
   96718:	000840a1 	.word	0x000840a1
   9671c:	20071a00 	.word	0x20071a00
   96720:	496e      	ldr	r1, [pc, #440]	; (968dc <Cl_Iso_Senddata+0x774>)
   96722:	4610      	mov	r0, r2
   96724:	4798      	blx	r3
   96726:	4603      	mov	r3, r0
   96728:	4618      	mov	r0, r3
   9672a:	4b6d      	ldr	r3, [pc, #436]	; (968e0 <Cl_Iso_Senddata+0x778>)
   9672c:	681a      	ldr	r2, [r3, #0]
   9672e:	4b6d      	ldr	r3, [pc, #436]	; (968e4 <Cl_Iso_Senddata+0x77c>)
   96730:	4611      	mov	r1, r2
   96732:	4798      	blx	r3
   96734:	4603      	mov	r3, r0
   96736:	461a      	mov	r2, r3
   96738:	4b6b      	ldr	r3, [pc, #428]	; (968e8 <Cl_Iso_Senddata+0x780>)
   9673a:	496c      	ldr	r1, [pc, #432]	; (968ec <Cl_Iso_Senddata+0x784>)
   9673c:	4610      	mov	r0, r2
   9673e:	4798      	blx	r3
   96740:	4603      	mov	r3, r0
   96742:	461a      	mov	r2, r3
   96744:	4b6a      	ldr	r3, [pc, #424]	; (968f0 <Cl_Iso_Senddata+0x788>)
   96746:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   96748:	4b6a      	ldr	r3, [pc, #424]	; (968f4 <Cl_Iso_Senddata+0x78c>)
   9674a:	681a      	ldr	r2, [r3, #0]
   9674c:	4b6a      	ldr	r3, [pc, #424]	; (968f8 <Cl_Iso_Senddata+0x790>)
   9674e:	6819      	ldr	r1, [r3, #0]
   96750:	4b64      	ldr	r3, [pc, #400]	; (968e4 <Cl_Iso_Senddata+0x77c>)
   96752:	4610      	mov	r0, r2
   96754:	4798      	blx	r3
   96756:	4603      	mov	r3, r0
   96758:	461c      	mov	r4, r3
   9675a:	4b68      	ldr	r3, [pc, #416]	; (968fc <Cl_Iso_Senddata+0x794>)
   9675c:	681a      	ldr	r2, [r3, #0]
   9675e:	4b64      	ldr	r3, [pc, #400]	; (968f0 <Cl_Iso_Senddata+0x788>)
   96760:	6819      	ldr	r1, [r3, #0]
   96762:	4b60      	ldr	r3, [pc, #384]	; (968e4 <Cl_Iso_Senddata+0x77c>)
   96764:	4610      	mov	r0, r2
   96766:	4798      	blx	r3
   96768:	4603      	mov	r3, r0
   9676a:	461a      	mov	r2, r3
   9676c:	4b64      	ldr	r3, [pc, #400]	; (96900 <Cl_Iso_Senddata+0x798>)
   9676e:	4611      	mov	r1, r2
   96770:	4620      	mov	r0, r4
   96772:	4798      	blx	r3
   96774:	4603      	mov	r3, r0
   96776:	461a      	mov	r2, r3
   96778:	4b5b      	ldr	r3, [pc, #364]	; (968e8 <Cl_Iso_Senddata+0x780>)
   9677a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   9677e:	4610      	mov	r0, r2
   96780:	4798      	blx	r3
   96782:	4603      	mov	r3, r0
   96784:	461a      	mov	r2, r3
   96786:	4b5e      	ldr	r3, [pc, #376]	; (96900 <Cl_Iso_Senddata+0x798>)
   96788:	495e      	ldr	r1, [pc, #376]	; (96904 <Cl_Iso_Senddata+0x79c>)
   9678a:	4610      	mov	r0, r2
   9678c:	4798      	blx	r3
   9678e:	4603      	mov	r3, r0
   96790:	461a      	mov	r2, r3
   96792:	4b5d      	ldr	r3, [pc, #372]	; (96908 <Cl_Iso_Senddata+0x7a0>)
   96794:	4610      	mov	r0, r2
   96796:	4798      	blx	r3
   96798:	4603      	mov	r3, r0
   9679a:	607b      	str	r3, [r7, #4]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   9679c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   967a0:	1c5a      	adds	r2, r3, #1
   967a2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   967a6:	793a      	ldrb	r2, [r7, #4]
   967a8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   967ac:	440b      	add	r3, r1
   967ae:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   967b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   967b6:	1c5a      	adds	r2, r3, #1
   967b8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   967bc:	797a      	ldrb	r2, [r7, #5]
   967be:	f107 0148 	add.w	r1, r7, #72	; 0x48
   967c2:	440b      	add	r3, r1
   967c4:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   967c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   967cc:	1c5a      	adds	r2, r3, #1
   967ce:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   967d2:	79ba      	ldrb	r2, [r7, #6]
   967d4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   967d8:	440b      	add	r3, r1
   967da:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   967de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   967e2:	1c5a      	adds	r2, r3, #1
   967e4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   967e8:	79fa      	ldrb	r2, [r7, #7]
   967ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
   967ee:	440b      	add	r3, r1
   967f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
			tempdata.word = ufRemoved ;
   967f4:	4b45      	ldr	r3, [pc, #276]	; (9690c <Cl_Iso_Senddata+0x7a4>)
   967f6:	681a      	ldr	r2, [r3, #0]
   967f8:	4b43      	ldr	r3, [pc, #268]	; (96908 <Cl_Iso_Senddata+0x7a0>)
   967fa:	4610      	mov	r0, r2
   967fc:	4798      	blx	r3
   967fe:	4603      	mov	r3, r0
   96800:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   96802:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96806:	1c5a      	adds	r2, r3, #1
   96808:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9680c:	793a      	ldrb	r2, [r7, #4]
   9680e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96812:	440b      	add	r3, r1
   96814:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96818:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9681c:	1c5a      	adds	r2, r3, #1
   9681e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96822:	797a      	ldrb	r2, [r7, #5]
   96824:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96828:	440b      	add	r3, r1
   9682a:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   9682e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96832:	1c5a      	adds	r2, r3, #1
   96834:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96838:	79ba      	ldrb	r2, [r7, #6]
   9683a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9683e:	440b      	add	r3, r1
   96840:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   96844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96848:	1c5a      	adds	r2, r3, #1
   9684a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9684e:	79fa      	ldrb	r2, [r7, #7]
   96850:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96854:	440b      	add	r3, r1
   96856:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			tempdata.word = Treatdata[ID_ufrate] ;
   9685a:	4b2d      	ldr	r3, [pc, #180]	; (96910 <Cl_Iso_Senddata+0x7a8>)
   9685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9685e:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   96860:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96864:	1c5a      	adds	r2, r3, #1
   96866:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9686a:	793a      	ldrb	r2, [r7, #4]
   9686c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96870:	440b      	add	r3, r1
   96872:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   96876:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9687a:	1c5a      	adds	r2, r3, #1
   9687c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96880:	797a      	ldrb	r2, [r7, #5]
   96882:	f107 0148 	add.w	r1, r7, #72	; 0x48
   96886:	440b      	add	r3, r1
   96888:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   9688c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   96890:	1c5a      	adds	r2, r3, #1
   96892:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   96896:	79ba      	ldrb	r2, [r7, #6]
   96898:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9689c:	440b      	add	r3, r1
   9689e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   968a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   968a6:	1c5a      	adds	r2, r3, #1
   968a8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   968ac:	79fa      	ldrb	r2, [r7, #7]
   968ae:	f107 0148 	add.w	r1, r7, #72	; 0x48
   968b2:	440b      	add	r3, r1
   968b4:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   968b8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   968bc:	f107 030c 	add.w	r3, r7, #12
   968c0:	4619      	mov	r1, r3
   968c2:	202a      	movs	r0, #42	; 0x2a
   968c4:	4b13      	ldr	r3, [pc, #76]	; (96914 <Cl_Iso_Senddata+0x7ac>)
   968c6:	4798      	blx	r3
   968c8:	4603      	mov	r3, r0
   968ca:	461a      	mov	r2, r3
   968cc:	4b12      	ldr	r3, [pc, #72]	; (96918 <Cl_Iso_Senddata+0x7b0>)
   968ce:	701a      	strb	r2, [r3, #0]
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   968d0:	2300      	movs	r3, #0
	
	
}
   968d2:	4618      	mov	r0, r3
   968d4:	374c      	adds	r7, #76	; 0x4c
   968d6:	46bd      	mov	sp, r7
   968d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   968da:	bf00      	nop
   968dc:	40a00000 	.word	0x40a00000
   968e0:	20071734 	.word	0x20071734
   968e4:	000a7d99 	.word	0x000a7d99
   968e8:	000a8111 	.word	0x000a8111
   968ec:	40c00000 	.word	0x40c00000
   968f0:	20071a00 	.word	0x20071a00
   968f4:	200719f4 	.word	0x200719f4
   968f8:	200719f8 	.word	0x200719f8
   968fc:	200719fc 	.word	0x200719fc
   96900:	000a7d95 	.word	0x000a7d95
   96904:	41c80000 	.word	0x41c80000
   96908:	000a8381 	.word	0x000a8381
   9690c:	20071a1c 	.word	0x20071a1c
   96910:	20072614 	.word	0x20072614
   96914:	0009cbd5 	.word	0x0009cbd5
   96918:	200719de 	.word	0x200719de

0009691c <Cl_Iso_UpdateTimeInfo>:

Cl_ReturnCodeType Cl_Iso_UpdateTimeInfo(void)
{
   9691c:	b580      	push	{r7, lr}
   9691e:	b084      	sub	sp, #16
   96920:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   96922:	2304      	movs	r3, #4
   96924:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   96926:	2359      	movs	r3, #89	; 0x59
   96928:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9692a:	1d3b      	adds	r3, r7, #4
   9692c:	2200      	movs	r2, #0
   9692e:	601a      	str	r2, [r3, #0]
   96930:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   96934:	230a      	movs	r3, #10
   96936:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)ISOUF_DATA;
   96938:	230c      	movs	r3, #12
   9693a:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)1;
   9693c:	2301      	movs	r3, #1
   9693e:	717b      	strb	r3, [r7, #5]

	
	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   96940:	1d39      	adds	r1, r7, #4
   96942:	7bbb      	ldrb	r3, [r7, #14]
   96944:	2202      	movs	r2, #2
   96946:	4618      	mov	r0, r3
   96948:	4b04      	ldr	r3, [pc, #16]	; (9695c <Cl_Iso_UpdateTimeInfo+0x40>)
   9694a:	4798      	blx	r3
   9694c:	4603      	mov	r3, r0
   9694e:	73fb      	strb	r3, [r7, #15]
	return CL_OK;
   96950:	2300      	movs	r3, #0
	
}
   96952:	4618      	mov	r0, r3
   96954:	3710      	adds	r7, #16
   96956:	46bd      	mov	sp, r7
   96958:	bd80      	pop	{r7, pc}
   9695a:	bf00      	nop
   9695c:	0009cbd5 	.word	0x0009cbd5

00096960 <cl_checkforblooddetection>:

Cl_ReturnCodeType cl_checkforblooddetection(){
   96960:	b580      	push	{r7, lr}
   96962:	b082      	sub	sp, #8
   96964:	af00      	add	r7, sp, #0
	
	Cl_Uint16Type bldtemp = 0;
   96966:	2300      	movs	r3, #0
   96968:	80fb      	strh	r3, [r7, #6]
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &bldtemp);
   9696a:	1dbb      	adds	r3, r7, #6
   9696c:	4619      	mov	r1, r3
   9696e:	200a      	movs	r0, #10
   96970:	4b05      	ldr	r3, [pc, #20]	; (96988 <cl_checkforblooddetection+0x28>)
   96972:	4798      	blx	r3
	
	if(bldtemp == 1){
   96974:	88fb      	ldrh	r3, [r7, #6]
   96976:	2b01      	cmp	r3, #1
   96978:	d101      	bne.n	9697e <cl_checkforblooddetection+0x1e>
		return CL_OK;
   9697a:	2300      	movs	r3, #0
   9697c:	e000      	b.n	96980 <cl_checkforblooddetection+0x20>
	}
	else{
		return CL_OK; // should be CL_REJECTED
   9697e:	2300      	movs	r3, #0
	}
	
	
}
   96980:	4618      	mov	r0, r3
   96982:	3708      	adds	r7, #8
   96984:	46bd      	mov	sp, r7
   96986:	bd80      	pop	{r7, pc}
   96988:	0008fa01 	.word	0x0008fa01

0009698c <cl_isouf_translatemacevent>:

Cl_ReturnCodeType  cl_isouf_translatemacevent(Cl_Mac_EventsType Cl_MacISOufEvt,cl_isouf_events* cl_isouf_event)
{
   9698c:	b480      	push	{r7}
   9698e:	b083      	sub	sp, #12
   96990:	af00      	add	r7, sp, #0
   96992:	4603      	mov	r3, r0
   96994:	6039      	str	r1, [r7, #0]
   96996:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacISOufEvt)
   96998:	79fb      	ldrb	r3, [r7, #7]
   9699a:	3b07      	subs	r3, #7
   9699c:	2b57      	cmp	r3, #87	; 0x57
   9699e:	f200 8127 	bhi.w	96bf0 <cl_isouf_translatemacevent+0x264>
   969a2:	a201      	add	r2, pc, #4	; (adr r2, 969a8 <cl_isouf_translatemacevent+0x1c>)
   969a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   969a8:	00096b49 	.word	0x00096b49
   969ac:	00096bf1 	.word	0x00096bf1
   969b0:	00096bf1 	.word	0x00096bf1
   969b4:	00096b29 	.word	0x00096b29
   969b8:	00096b31 	.word	0x00096b31
   969bc:	00096b21 	.word	0x00096b21
   969c0:	00096b41 	.word	0x00096b41
   969c4:	00096b39 	.word	0x00096b39
   969c8:	00096bf1 	.word	0x00096bf1
   969cc:	00096bf1 	.word	0x00096bf1
   969d0:	00096bf1 	.word	0x00096bf1
   969d4:	00096bf1 	.word	0x00096bf1
   969d8:	00096bf1 	.word	0x00096bf1
   969dc:	00096bf1 	.word	0x00096bf1
   969e0:	00096ba1 	.word	0x00096ba1
   969e4:	00096bf1 	.word	0x00096bf1
   969e8:	00096b51 	.word	0x00096b51
   969ec:	00096bf1 	.word	0x00096bf1
   969f0:	00096bf1 	.word	0x00096bf1
   969f4:	00096be1 	.word	0x00096be1
   969f8:	00096be9 	.word	0x00096be9
   969fc:	00096bf1 	.word	0x00096bf1
   96a00:	00096bf1 	.word	0x00096bf1
   96a04:	00096bf1 	.word	0x00096bf1
   96a08:	00096bf1 	.word	0x00096bf1
   96a0c:	00096bf1 	.word	0x00096bf1
   96a10:	00096bf1 	.word	0x00096bf1
   96a14:	00096b91 	.word	0x00096b91
   96a18:	00096b99 	.word	0x00096b99
   96a1c:	00096bf1 	.word	0x00096bf1
   96a20:	00096bf1 	.word	0x00096bf1
   96a24:	00096bc9 	.word	0x00096bc9
   96a28:	00096ba9 	.word	0x00096ba9
   96a2c:	00096bb1 	.word	0x00096bb1
   96a30:	00096b19 	.word	0x00096b19
   96a34:	00096bf1 	.word	0x00096bf1
   96a38:	00096bf1 	.word	0x00096bf1
   96a3c:	00096bf1 	.word	0x00096bf1
   96a40:	00096b89 	.word	0x00096b89
   96a44:	00096b81 	.word	0x00096b81
   96a48:	00096bf1 	.word	0x00096bf1
   96a4c:	00096bf1 	.word	0x00096bf1
   96a50:	00096bf1 	.word	0x00096bf1
   96a54:	00096bf1 	.word	0x00096bf1
   96a58:	00096bf1 	.word	0x00096bf1
   96a5c:	00096bf1 	.word	0x00096bf1
   96a60:	00096bf1 	.word	0x00096bf1
   96a64:	00096bf1 	.word	0x00096bf1
   96a68:	00096bf1 	.word	0x00096bf1
   96a6c:	00096b59 	.word	0x00096b59
   96a70:	00096bf1 	.word	0x00096bf1
   96a74:	00096b61 	.word	0x00096b61
   96a78:	00096b69 	.word	0x00096b69
   96a7c:	00096b71 	.word	0x00096b71
   96a80:	00096b79 	.word	0x00096b79
   96a84:	00096bf1 	.word	0x00096bf1
   96a88:	00096bf1 	.word	0x00096bf1
   96a8c:	00096bf1 	.word	0x00096bf1
   96a90:	00096bf1 	.word	0x00096bf1
   96a94:	00096bf1 	.word	0x00096bf1
   96a98:	00096bf1 	.word	0x00096bf1
   96a9c:	00096bf1 	.word	0x00096bf1
   96aa0:	00096bf1 	.word	0x00096bf1
   96aa4:	00096bf1 	.word	0x00096bf1
   96aa8:	00096bf1 	.word	0x00096bf1
   96aac:	00096bf1 	.word	0x00096bf1
   96ab0:	00096bf1 	.word	0x00096bf1
   96ab4:	00096bf1 	.word	0x00096bf1
   96ab8:	00096bf1 	.word	0x00096bf1
   96abc:	00096bf1 	.word	0x00096bf1
   96ac0:	00096bf1 	.word	0x00096bf1
   96ac4:	00096bf1 	.word	0x00096bf1
   96ac8:	00096bf1 	.word	0x00096bf1
   96acc:	00096bf1 	.word	0x00096bf1
   96ad0:	00096bf1 	.word	0x00096bf1
   96ad4:	00096bf1 	.word	0x00096bf1
   96ad8:	00096bf1 	.word	0x00096bf1
   96adc:	00096bf1 	.word	0x00096bf1
   96ae0:	00096bf1 	.word	0x00096bf1
   96ae4:	00096bf1 	.word	0x00096bf1
   96ae8:	00096bf1 	.word	0x00096bf1
   96aec:	00096b09 	.word	0x00096b09
   96af0:	00096b11 	.word	0x00096b11
   96af4:	00096bb9 	.word	0x00096bb9
   96af8:	00096bd1 	.word	0x00096bd1
   96afc:	00096bd9 	.word	0x00096bd9
   96b00:	00096bf1 	.word	0x00096bf1
   96b04:	00096bc1 	.word	0x00096bc1
	{
		
		case EVT_CONSOLE_COMMAND_ISOUF_START :
		*cl_isouf_event = EVENT_ISOUF_START;
   96b08:	683b      	ldr	r3, [r7, #0]
   96b0a:	2216      	movs	r2, #22
   96b0c:	701a      	strb	r2, [r3, #0]
		break;
   96b0e:	e070      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_ISOUF_STOP :
		*cl_isouf_event = EVENT_ISOUF_STOP;
   96b10:	683b      	ldr	r3, [r7, #0]
   96b12:	2218      	movs	r2, #24
   96b14:	701a      	strb	r2, [r3, #0]
		break;
   96b16:	e06c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_isouf_event = EVENT_ISOUF_CLR_ALARM;
   96b18:	683b      	ldr	r3, [r7, #0]
   96b1a:	2201      	movs	r2, #1
   96b1c:	701a      	strb	r2, [r3, #0]
		break;
   96b1e:	e068      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE;
   96b20:	683b      	ldr	r3, [r7, #0]
   96b22:	2210      	movs	r2, #16
   96b24:	701a      	strb	r2, [r3, #0]
		break;
   96b26:	e064      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_ON;
   96b28:	683b      	ldr	r3, [r7, #0]
   96b2a:	2211      	movs	r2, #17
   96b2c:	701a      	strb	r2, [r3, #0]
		break;
   96b2e:	e060      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF;
   96b30:	683b      	ldr	r3, [r7, #0]
   96b32:	2212      	movs	r2, #18
   96b34:	701a      	strb	r2, [r3, #0]
		break;
   96b36:	e05c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_isouf_event = EVENT_ISOUF_GET_DATA;
   96b38:	683b      	ldr	r3, [r7, #0]
   96b3a:	2202      	movs	r2, #2
   96b3c:	701a      	strb	r2, [r3, #0]
		break;
   96b3e:	e058      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_isouf_event = EVENT_ISOUF_SET_DATA;
   96b40:	683b      	ldr	r3, [r7, #0]
   96b42:	2203      	movs	r2, #3
   96b44:	701a      	strb	r2, [r3, #0]
		break;
   96b46:	e054      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_isouf_event= EVENT_ISOUF_START_RINSE;
   96b48:	683b      	ldr	r3, [r7, #0]
   96b4a:	2204      	movs	r2, #4
   96b4c:	701a      	strb	r2, [r3, #0]
		break;
   96b4e:	e050      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_isouf_event= EVENT_ISOUF_START_DIALYSIS;
   96b50:	683b      	ldr	r3, [r7, #0]
   96b52:	2205      	movs	r2, #5
   96b54:	701a      	strb	r2, [r3, #0]
		break;
   96b56:	e04c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_isouf_event =   EVENT_ISOUF_TICK_50MS;
   96b58:	683b      	ldr	r3, [r7, #0]
   96b5a:	2207      	movs	r2, #7
   96b5c:	701a      	strb	r2, [r3, #0]
		break;
   96b5e:	e048      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_500M:
		*cl_isouf_event = EVENT_ISOUF_TICK_500MS;
   96b60:	683b      	ldr	r3, [r7, #0]
   96b62:	2208      	movs	r2, #8
   96b64:	701a      	strb	r2, [r3, #0]
		break;
   96b66:	e044      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_SEC:
		*cl_isouf_event =   EVENT_ISOUF_TICK_SECOND;
   96b68:	683b      	ldr	r3, [r7, #0]
   96b6a:	2209      	movs	r2, #9
   96b6c:	701a      	strb	r2, [r3, #0]
		break;
   96b6e:	e040      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_MIN:
		*cl_isouf_event =   EVENT_ISOUF_TICK_MINUTE;
   96b70:	683b      	ldr	r3, [r7, #0]
   96b72:	220a      	movs	r2, #10
   96b74:	701a      	strb	r2, [r3, #0]
		break;
   96b76:	e03c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_HOUR:
		*cl_isouf_event =   EVENT_ISOUF_TICK_HOUR;
   96b78:	683b      	ldr	r3, [r7, #0]
   96b7a:	220b      	movs	r2, #11
   96b7c:	701a      	strb	r2, [r3, #0]
		break;
   96b7e:	e038      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_ALARM_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALARM;
   96b80:	683b      	ldr	r3, [r7, #0]
   96b82:	220c      	movs	r2, #12
   96b84:	701a      	strb	r2, [r3, #0]
		break;
   96b86:	e034      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_ALERT_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALERT;
   96b88:	683b      	ldr	r3, [r7, #0]
   96b8a:	220d      	movs	r2, #13
   96b8c:	701a      	strb	r2, [r3, #0]
		break;
   96b8e:	e030      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_START_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   96b90:	683b      	ldr	r3, [r7, #0]
   96b92:	220f      	movs	r2, #15
   96b94:	701a      	strb	r2, [r3, #0]
		break;
   96b96:	e02c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   96b98:	683b      	ldr	r3, [r7, #0]
   96b9a:	220f      	movs	r2, #15
   96b9c:	701a      	strb	r2, [r3, #0]
		break;
   96b9e:	e028      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_isouf_event =   EVENT_ISOUF_HEP_RATE;
   96ba0:	683b      	ldr	r3, [r7, #0]
   96ba2:	2213      	movs	r2, #19
   96ba4:	701a      	strb	r2, [r3, #0]
		break;
   96ba6:	e024      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_isouf_event =   EVENT_ISOUF_HEP_ON;
   96ba8:	683b      	ldr	r3, [r7, #0]
   96baa:	2214      	movs	r2, #20
   96bac:	701a      	strb	r2, [r3, #0]
		break;
   96bae:	e020      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_isouf_event =   EVENT_ISOUF_HEP_OFF;
   96bb0:	683b      	ldr	r3, [r7, #0]
   96bb2:	2215      	movs	r2, #21
   96bb4:	701a      	strb	r2, [r3, #0]
		
		break;
   96bb6:	e01c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case MACREQ_ISOUF_COMPLETED:
		*cl_isouf_event =   CL_ISOUF_STATE_POST_COMPLETION;
   96bb8:	683b      	ldr	r3, [r7, #0]
   96bba:	2207      	movs	r2, #7
   96bbc:	701a      	strb	r2, [r3, #0]
		break;
   96bbe:	e018      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case MACREQ_POST_DIALYSIS_ISOUF_REQ:
		*cl_isouf_event =   EVENT_ISOUF_START;
   96bc0:	683b      	ldr	r3, [r7, #0]
   96bc2:	2216      	movs	r2, #22
   96bc4:	701a      	strb	r2, [r3, #0]
		break;
   96bc6:	e014      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_isouf_event = EVENT_ISOUF_HEAPARIN_BOLUS;
   96bc8:	683b      	ldr	r3, [r7, #0]
   96bca:	221b      	movs	r2, #27
   96bcc:	701a      	strb	r2, [r3, #0]
		break;
   96bce:	e010      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   96bd0:	683b      	ldr	r3, [r7, #0]
   96bd2:	225b      	movs	r2, #91	; 0x5b
   96bd4:	701a      	strb	r2, [r3, #0]
		break;
   96bd6:	e00c      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   96bd8:	683b      	ldr	r3, [r7, #0]
   96bda:	225c      	movs	r2, #92	; 0x5c
   96bdc:	701a      	strb	r2, [r3, #0]
		break;
   96bde:	e008      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_ON;
   96be0:	683b      	ldr	r3, [r7, #0]
   96be2:	221c      	movs	r2, #28
   96be4:	701a      	strb	r2, [r3, #0]
		break;
   96be6:	e004      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_OFF;
   96be8:	683b      	ldr	r3, [r7, #0]
   96bea:	221d      	movs	r2, #29
   96bec:	701a      	strb	r2, [r3, #0]
		break;
   96bee:	e000      	b.n	96bf2 <cl_isouf_translatemacevent+0x266>
		default:
		break;
   96bf0:	bf00      	nop
	}
	return CL_OK;
   96bf2:	2300      	movs	r3, #0
}
   96bf4:	4618      	mov	r0, r3
   96bf6:	370c      	adds	r7, #12
   96bf8:	46bd      	mov	sp, r7
   96bfa:	bc80      	pop	{r7}
   96bfc:	4770      	bx	lr
   96bfe:	bf00      	nop

00096c00 <cl_isoufcompleted>:


Cl_ReturnCodeType cl_isoufcompleted(){
   96c00:	b580      	push	{r7, lr}
   96c02:	af00      	add	r7, sp, #0
	
	// stop uf pump
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   96c04:	2100      	movs	r1, #0
   96c06:	2004      	movs	r0, #4
   96c08:	4b07      	ldr	r3, [pc, #28]	; (96c28 <cl_isoufcompleted+0x28>)
   96c0a:	4798      	blx	r3
	
	cl_isouf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   96c0c:	2004      	movs	r0, #4
   96c0e:	4b07      	ldr	r3, [pc, #28]	; (96c2c <cl_isoufcompleted+0x2c>)
   96c10:	4798      	blx	r3
   96c12:	4603      	mov	r3, r0
   96c14:	461a      	mov	r2, r3
   96c16:	4b06      	ldr	r3, [pc, #24]	; (96c30 <cl_isoufcompleted+0x30>)
   96c18:	701a      	strb	r2, [r3, #0]
	isouf = false;
   96c1a:	4b06      	ldr	r3, [pc, #24]	; (96c34 <cl_isoufcompleted+0x34>)
   96c1c:	2200      	movs	r2, #0
   96c1e:	701a      	strb	r2, [r3, #0]
	return CL_OK;
   96c20:	2300      	movs	r3, #0
}
   96c22:	4618      	mov	r0, r3
   96c24:	bd80      	pop	{r7, pc}
   96c26:	bf00      	nop
   96c28:	00096ea9 	.word	0x00096ea9
   96c2c:	0009ad7d 	.word	0x0009ad7d
   96c30:	200719de 	.word	0x200719de
   96c34:	200719e4 	.word	0x200719e4

00096c38 <Cl_isouf_init>:
return CL_OK;

}

 Cl_ReturnCodeType Cl_isouf_init(void)
 {
   96c38:	b480      	push	{r7}
   96c3a:	af00      	add	r7, sp, #0
	 
	 cl_isouf_state = CL_ISOUF_STATE_IDLE;
   96c3c:	4b05      	ldr	r3, [pc, #20]	; (96c54 <Cl_isouf_init+0x1c>)
   96c3e:	2200      	movs	r2, #0
   96c40:	701a      	strb	r2, [r3, #0]

	 //cl_isouf_event = EVENT_NULL_EVENT;
	 
	 Cl_ISOufTotalSecondscounter=0 ;
   96c42:	4b05      	ldr	r3, [pc, #20]	; (96c58 <Cl_isouf_init+0x20>)
   96c44:	2200      	movs	r2, #0
   96c46:	601a      	str	r2, [r3, #0]
	 return CL_OK;
   96c48:	2300      	movs	r3, #0
 }
   96c4a:	4618      	mov	r0, r3
   96c4c:	46bd      	mov	sp, r7
   96c4e:	bc80      	pop	{r7}
   96c50:	4770      	bx	lr
   96c52:	bf00      	nop
   96c54:	200719dd 	.word	0x200719dd
   96c58:	200719e0 	.word	0x200719e0

00096c5c <cl_selftestFeedback_start>:
static Cl_Uint16Type uf_rotataion_marker = 1,prev_uf_rotataion_marker = 1;
static Cl_Uint16Type twentymscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static Cl_Uint16Type uf_rotation_counter = 0,uf_selftest_rotation_counter = 0;
static Cl_BoolType count_state = false;
Cl_ReturnCodeType cl_selftestFeedback_start(void)
{
   96c5c:	b480      	push	{r7}
   96c5e:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_SELFTEST_STARTED;
   96c60:	4b03      	ldr	r3, [pc, #12]	; (96c70 <cl_selftestFeedback_start+0x14>)
   96c62:	2209      	movs	r2, #9
   96c64:	701a      	strb	r2, [r3, #0]
	return 0;
   96c66:	2300      	movs	r3, #0
}
   96c68:	4618      	mov	r0, r3
   96c6a:	46bd      	mov	sp, r7
   96c6c:	bc80      	pop	{r7}
   96c6e:	4770      	bx	lr
   96c70:	20071a06 	.word	0x20071a06

00096c74 <cl_selftestFeedback_stop>:

Cl_ReturnCodeType cl_selftestFeedback_stop(void)
{
   96c74:	b480      	push	{r7}
   96c76:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_IDLE;
   96c78:	4b03      	ldr	r3, [pc, #12]	; (96c88 <cl_selftestFeedback_stop+0x14>)
   96c7a:	2200      	movs	r2, #0
   96c7c:	701a      	strb	r2, [r3, #0]
	return 0;
   96c7e:	2300      	movs	r3, #0
}
   96c80:	4618      	mov	r0, r3
   96c82:	46bd      	mov	sp, r7
   96c84:	bc80      	pop	{r7}
   96c86:	4770      	bx	lr
   96c88:	20071a06 	.word	0x20071a06

00096c8c <cl_ufpumpFeedback_start>:
Cl_ReturnCodeType cl_ufpumpFeedback_start(void) 
{
   96c8c:	b480      	push	{r7}
   96c8e:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   96c90:	4b03      	ldr	r3, [pc, #12]	; (96ca0 <cl_ufpumpFeedback_start+0x14>)
   96c92:	2201      	movs	r2, #1
   96c94:	701a      	strb	r2, [r3, #0]
	return 0;
   96c96:	2300      	movs	r3, #0
}
   96c98:	4618      	mov	r0, r3
   96c9a:	46bd      	mov	sp, r7
   96c9c:	bc80      	pop	{r7}
   96c9e:	4770      	bx	lr
   96ca0:	20071a06 	.word	0x20071a06

00096ca4 <cl_ufpumpFeedback_stop>:
Cl_ReturnCodeType cl_ufpumpFeedback_stop(void)
{
   96ca4:	b480      	push	{r7}
   96ca6:	af00      	add	r7, sp, #0
	
	return 0;
   96ca8:	2300      	movs	r3, #0
}
   96caa:	4618      	mov	r0, r3
   96cac:	46bd      	mov	sp, r7
   96cae:	bc80      	pop	{r7}
   96cb0:	4770      	bx	lr
   96cb2:	bf00      	nop

00096cb4 <cl_ufpumpFeedback_set_expected_period>:
{
	*pdelta = uf_period - uf_expected_period;
	return 0;
}
Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   96cb4:	b480      	push	{r7}
   96cb6:	b083      	sub	sp, #12
   96cb8:	af00      	add	r7, sp, #0
   96cba:	4603      	mov	r3, r0
   96cbc:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   96cbe:	88fa      	ldrh	r2, [r7, #6]
   96cc0:	4b03      	ldr	r3, [pc, #12]	; (96cd0 <cl_ufpumpFeedback_set_expected_period+0x1c>)
   96cc2:	801a      	strh	r2, [r3, #0]
	return 0;
   96cc4:	2300      	movs	r3, #0
}
   96cc6:	4618      	mov	r0, r3
   96cc8:	370c      	adds	r7, #12
   96cca:	46bd      	mov	sp, r7
   96ccc:	bc80      	pop	{r7}
   96cce:	4770      	bx	lr
   96cd0:	20071a04 	.word	0x20071a04
   96cd4:	00000000 	.word	0x00000000

00096cd8 <cl_ufpumpFeedback_timer>:

Cl_ReturnCodeType cl_ufpumpFeedback_timer(void) // 20 ms clock
{
   96cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   96cda:	af00      	add	r7, sp, #0
	if(cl_ufpump_state != CL_UFP_STATE_IDLE)
   96cdc:	4b62      	ldr	r3, [pc, #392]	; (96e68 <cl_ufpumpFeedback_timer+0x190>)
   96cde:	781b      	ldrb	r3, [r3, #0]
   96ce0:	2b00      	cmp	r3, #0
   96ce2:	f000 80b5 	beq.w	96e50 <cl_ufpumpFeedback_timer+0x178>
	{
	//cl_Datastreamtype cl_data;	
	//cl_testgetsensordata(UF_ROTATION_MARKER,&uf_rotataion_marker);
	Cl_SysStat_GetSensor_Status_Query(SENSOR_UFP_FB, &uf_rotataion_marker);
   96ce6:	4961      	ldr	r1, [pc, #388]	; (96e6c <cl_ufpumpFeedback_timer+0x194>)
   96ce8:	201a      	movs	r0, #26
   96cea:	4b61      	ldr	r3, [pc, #388]	; (96e70 <cl_ufpumpFeedback_timer+0x198>)
   96cec:	4798      	blx	r3

	twentymscounter++;
   96cee:	4b61      	ldr	r3, [pc, #388]	; (96e74 <cl_ufpumpFeedback_timer+0x19c>)
   96cf0:	881b      	ldrh	r3, [r3, #0]
   96cf2:	3301      	adds	r3, #1
   96cf4:	b29a      	uxth	r2, r3
   96cf6:	4b5f      	ldr	r3, [pc, #380]	; (96e74 <cl_ufpumpFeedback_timer+0x19c>)
   96cf8:	801a      	strh	r2, [r3, #0]
// 	{
// 		cl_ufpump_state = CL_UFP_STATE_RUNNING;
// 	}
	
	
	if(count_state == false)
   96cfa:	4b5f      	ldr	r3, [pc, #380]	; (96e78 <cl_ufpumpFeedback_timer+0x1a0>)
   96cfc:	781b      	ldrb	r3, [r3, #0]
   96cfe:	f083 0301 	eor.w	r3, r3, #1
   96d02:	b2db      	uxtb	r3, r3
   96d04:	2b00      	cmp	r3, #0
   96d06:	d012      	beq.n	96d2e <cl_ufpumpFeedback_timer+0x56>
	{
		if(uf_rotataion_marker == 0 )
   96d08:	4b58      	ldr	r3, [pc, #352]	; (96e6c <cl_ufpumpFeedback_timer+0x194>)
   96d0a:	881b      	ldrh	r3, [r3, #0]
   96d0c:	2b00      	cmp	r3, #0
   96d0e:	f040 809b 	bne.w	96e48 <cl_ufpumpFeedback_timer+0x170>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   96d12:	4b5a      	ldr	r3, [pc, #360]	; (96e7c <cl_ufpumpFeedback_timer+0x1a4>)
   96d14:	881a      	ldrh	r2, [r3, #0]
   96d16:	4b55      	ldr	r3, [pc, #340]	; (96e6c <cl_ufpumpFeedback_timer+0x194>)
   96d18:	881b      	ldrh	r3, [r3, #0]
   96d1a:	429a      	cmp	r2, r3
   96d1c:	f000 8094 	beq.w	96e48 <cl_ufpumpFeedback_timer+0x170>
			{
				count_state = true;
   96d20:	4b55      	ldr	r3, [pc, #340]	; (96e78 <cl_ufpumpFeedback_timer+0x1a0>)
   96d22:	2201      	movs	r2, #1
   96d24:	701a      	strb	r2, [r3, #0]
				//uf_rotation_counter++;
				twentymscounter = 0;
   96d26:	4b53      	ldr	r3, [pc, #332]	; (96e74 <cl_ufpumpFeedback_timer+0x19c>)
   96d28:	2200      	movs	r2, #0
   96d2a:	801a      	strh	r2, [r3, #0]
   96d2c:	e08c      	b.n	96e48 <cl_ufpumpFeedback_timer+0x170>
			}
		}
	}
	else
	{
		if(uf_rotataion_marker == 0 )
   96d2e:	4b4f      	ldr	r3, [pc, #316]	; (96e6c <cl_ufpumpFeedback_timer+0x194>)
   96d30:	881b      	ldrh	r3, [r3, #0]
   96d32:	2b00      	cmp	r3, #0
   96d34:	f040 8088 	bne.w	96e48 <cl_ufpumpFeedback_timer+0x170>
		{
			if(prev_uf_rotataion_marker != uf_rotataion_marker)
   96d38:	4b50      	ldr	r3, [pc, #320]	; (96e7c <cl_ufpumpFeedback_timer+0x1a4>)
   96d3a:	881a      	ldrh	r2, [r3, #0]
   96d3c:	4b4b      	ldr	r3, [pc, #300]	; (96e6c <cl_ufpumpFeedback_timer+0x194>)
   96d3e:	881b      	ldrh	r3, [r3, #0]
   96d40:	429a      	cmp	r2, r3
   96d42:	f000 8081 	beq.w	96e48 <cl_ufpumpFeedback_timer+0x170>
			{
				count_state = true;
   96d46:	4b4c      	ldr	r3, [pc, #304]	; (96e78 <cl_ufpumpFeedback_timer+0x1a0>)
   96d48:	2201      	movs	r2, #1
   96d4a:	701a      	strb	r2, [r3, #0]
				uf_rotation_counter++;
   96d4c:	4b4c      	ldr	r3, [pc, #304]	; (96e80 <cl_ufpumpFeedback_timer+0x1a8>)
   96d4e:	881b      	ldrh	r3, [r3, #0]
   96d50:	3301      	adds	r3, #1
   96d52:	b29a      	uxth	r2, r3
   96d54:	4b4a      	ldr	r3, [pc, #296]	; (96e80 <cl_ufpumpFeedback_timer+0x1a8>)
   96d56:	801a      	strh	r2, [r3, #0]
				
				uf_selftest_rotation_counter++;
   96d58:	4b4a      	ldr	r3, [pc, #296]	; (96e84 <cl_ufpumpFeedback_timer+0x1ac>)
   96d5a:	881b      	ldrh	r3, [r3, #0]
   96d5c:	3301      	adds	r3, #1
   96d5e:	b29a      	uxth	r2, r3
   96d60:	4b48      	ldr	r3, [pc, #288]	; (96e84 <cl_ufpumpFeedback_timer+0x1ac>)
   96d62:	801a      	strh	r2, [r3, #0]
				
				if (uf_selftest_rotation_counter >= 6)
   96d64:	4b47      	ldr	r3, [pc, #284]	; (96e84 <cl_ufpumpFeedback_timer+0x1ac>)
   96d66:	881b      	ldrh	r3, [r3, #0]
   96d68:	2b05      	cmp	r3, #5
   96d6a:	d911      	bls.n	96d90 <cl_ufpumpFeedback_timer+0xb8>
				{
					uf_period = twentymscounter*15;
   96d6c:	4b41      	ldr	r3, [pc, #260]	; (96e74 <cl_ufpumpFeedback_timer+0x19c>)
   96d6e:	881b      	ldrh	r3, [r3, #0]
   96d70:	461a      	mov	r2, r3
   96d72:	0112      	lsls	r2, r2, #4
   96d74:	1ad3      	subs	r3, r2, r3
   96d76:	b29a      	uxth	r2, r3
   96d78:	4b43      	ldr	r3, [pc, #268]	; (96e88 <cl_ufpumpFeedback_timer+0x1b0>)
   96d7a:	801a      	strh	r2, [r3, #0]
			      uf_periodvalue = uf_period;   //  uf_periodvalue = &uf_period;
   96d7c:	4b42      	ldr	r3, [pc, #264]	; (96e88 <cl_ufpumpFeedback_timer+0x1b0>)
   96d7e:	881a      	ldrh	r2, [r3, #0]
   96d80:	4b42      	ldr	r3, [pc, #264]	; (96e8c <cl_ufpumpFeedback_timer+0x1b4>)
   96d82:	801a      	strh	r2, [r3, #0]
			       uf_selftest_rotation_counter = 0;
   96d84:	4b3f      	ldr	r3, [pc, #252]	; (96e84 <cl_ufpumpFeedback_timer+0x1ac>)
   96d86:	2200      	movs	r2, #0
   96d88:	801a      	strh	r2, [r3, #0]
				   uf_rotation_counter = 0;
   96d8a:	4b3d      	ldr	r3, [pc, #244]	; (96e80 <cl_ufpumpFeedback_timer+0x1a8>)
   96d8c:	2200      	movs	r2, #0
   96d8e:	801a      	strh	r2, [r3, #0]
				
	
			
			
				
				if((cl_ufpump_state != CL_UFP_STATE_STARTED) && (cl_ufpump_state !=  CL_UFP_SELFTEST_STARTED))
   96d90:	4b35      	ldr	r3, [pc, #212]	; (96e68 <cl_ufpumpFeedback_timer+0x190>)
   96d92:	781b      	ldrb	r3, [r3, #0]
   96d94:	2b01      	cmp	r3, #1
   96d96:	d04a      	beq.n	96e2e <cl_ufpumpFeedback_timer+0x156>
   96d98:	4b33      	ldr	r3, [pc, #204]	; (96e68 <cl_ufpumpFeedback_timer+0x190>)
   96d9a:	781b      	ldrb	r3, [r3, #0]
   96d9c:	2b09      	cmp	r3, #9
   96d9e:	d046      	beq.n	96e2e <cl_ufpumpFeedback_timer+0x156>
				{
					if(uf_period > (1.01 *uf_expected_period))
   96da0:	4b39      	ldr	r3, [pc, #228]	; (96e88 <cl_ufpumpFeedback_timer+0x1b0>)
   96da2:	881b      	ldrh	r3, [r3, #0]
   96da4:	461a      	mov	r2, r3
   96da6:	4b3a      	ldr	r3, [pc, #232]	; (96e90 <cl_ufpumpFeedback_timer+0x1b8>)
   96da8:	4610      	mov	r0, r2
   96daa:	4798      	blx	r3
   96dac:	4605      	mov	r5, r0
   96dae:	460e      	mov	r6, r1
   96db0:	4b38      	ldr	r3, [pc, #224]	; (96e94 <cl_ufpumpFeedback_timer+0x1bc>)
   96db2:	881b      	ldrh	r3, [r3, #0]
   96db4:	461a      	mov	r2, r3
   96db6:	4b36      	ldr	r3, [pc, #216]	; (96e90 <cl_ufpumpFeedback_timer+0x1b8>)
   96db8:	4610      	mov	r0, r2
   96dba:	4798      	blx	r3
   96dbc:	4c36      	ldr	r4, [pc, #216]	; (96e98 <cl_ufpumpFeedback_timer+0x1c0>)
   96dbe:	a326      	add	r3, pc, #152	; (adr r3, 96e58 <cl_ufpumpFeedback_timer+0x180>)
   96dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   96dc4:	47a0      	blx	r4
   96dc6:	4603      	mov	r3, r0
   96dc8:	460c      	mov	r4, r1
   96dca:	461a      	mov	r2, r3
   96dcc:	4623      	mov	r3, r4
   96dce:	4c33      	ldr	r4, [pc, #204]	; (96e9c <cl_ufpumpFeedback_timer+0x1c4>)
   96dd0:	4628      	mov	r0, r5
   96dd2:	4631      	mov	r1, r6
   96dd4:	47a0      	blx	r4
   96dd6:	4603      	mov	r3, r0
   96dd8:	2b00      	cmp	r3, #0
   96dda:	d003      	beq.n	96de4 <cl_ufpumpFeedback_timer+0x10c>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_SLOW;
   96ddc:	4b22      	ldr	r3, [pc, #136]	; (96e68 <cl_ufpumpFeedback_timer+0x190>)
   96dde:	2204      	movs	r2, #4
   96de0:	701a      	strb	r2, [r3, #0]
   96de2:	e024      	b.n	96e2e <cl_ufpumpFeedback_timer+0x156>
					}
					else if(uf_period < (0.99 *uf_expected_period))
   96de4:	4b28      	ldr	r3, [pc, #160]	; (96e88 <cl_ufpumpFeedback_timer+0x1b0>)
   96de6:	881b      	ldrh	r3, [r3, #0]
   96de8:	461a      	mov	r2, r3
   96dea:	4b29      	ldr	r3, [pc, #164]	; (96e90 <cl_ufpumpFeedback_timer+0x1b8>)
   96dec:	4610      	mov	r0, r2
   96dee:	4798      	blx	r3
   96df0:	4605      	mov	r5, r0
   96df2:	460e      	mov	r6, r1
   96df4:	4b27      	ldr	r3, [pc, #156]	; (96e94 <cl_ufpumpFeedback_timer+0x1bc>)
   96df6:	881b      	ldrh	r3, [r3, #0]
   96df8:	461a      	mov	r2, r3
   96dfa:	4b25      	ldr	r3, [pc, #148]	; (96e90 <cl_ufpumpFeedback_timer+0x1b8>)
   96dfc:	4610      	mov	r0, r2
   96dfe:	4798      	blx	r3
   96e00:	4c25      	ldr	r4, [pc, #148]	; (96e98 <cl_ufpumpFeedback_timer+0x1c0>)
   96e02:	a317      	add	r3, pc, #92	; (adr r3, 96e60 <cl_ufpumpFeedback_timer+0x188>)
   96e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   96e08:	47a0      	blx	r4
   96e0a:	4603      	mov	r3, r0
   96e0c:	460c      	mov	r4, r1
   96e0e:	461a      	mov	r2, r3
   96e10:	4623      	mov	r3, r4
   96e12:	4c23      	ldr	r4, [pc, #140]	; (96ea0 <cl_ufpumpFeedback_timer+0x1c8>)
   96e14:	4628      	mov	r0, r5
   96e16:	4631      	mov	r1, r6
   96e18:	47a0      	blx	r4
   96e1a:	4603      	mov	r3, r0
   96e1c:	2b00      	cmp	r3, #0
   96e1e:	d003      	beq.n	96e28 <cl_ufpumpFeedback_timer+0x150>
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_FAST;
   96e20:	4b11      	ldr	r3, [pc, #68]	; (96e68 <cl_ufpumpFeedback_timer+0x190>)
   96e22:	2205      	movs	r2, #5
   96e24:	701a      	strb	r2, [r3, #0]
   96e26:	e002      	b.n	96e2e <cl_ufpumpFeedback_timer+0x156>
					}
					else
					{
						cl_ufpump_state = CL_UFP_STATE_RUNNING_NORMAL;
   96e28:	4b0f      	ldr	r3, [pc, #60]	; (96e68 <cl_ufpumpFeedback_timer+0x190>)
   96e2a:	2203      	movs	r2, #3
   96e2c:	701a      	strb	r2, [r3, #0]
					}
				}

				
				uf_freq_in_min  = ( 60000) / uf_period;
   96e2e:	4b16      	ldr	r3, [pc, #88]	; (96e88 <cl_ufpumpFeedback_timer+0x1b0>)
   96e30:	881b      	ldrh	r3, [r3, #0]
   96e32:	461a      	mov	r2, r3
   96e34:	f64e 2360 	movw	r3, #60000	; 0xea60
   96e38:	fb93 f3f2 	sdiv	r3, r3, r2
   96e3c:	b29a      	uxth	r2, r3
   96e3e:	4b19      	ldr	r3, [pc, #100]	; (96ea4 <cl_ufpumpFeedback_timer+0x1cc>)
   96e40:	801a      	strh	r2, [r3, #0]
				twentymscounter = 0;
   96e42:	4b0c      	ldr	r3, [pc, #48]	; (96e74 <cl_ufpumpFeedback_timer+0x19c>)
   96e44:	2200      	movs	r2, #0
   96e46:	801a      	strh	r2, [r3, #0]
				
			}
		}
		
	}
	prev_uf_rotataion_marker = uf_rotataion_marker;
   96e48:	4b08      	ldr	r3, [pc, #32]	; (96e6c <cl_ufpumpFeedback_timer+0x194>)
   96e4a:	881a      	ldrh	r2, [r3, #0]
   96e4c:	4b0b      	ldr	r3, [pc, #44]	; (96e7c <cl_ufpumpFeedback_timer+0x1a4>)
   96e4e:	801a      	strh	r2, [r3, #0]
	}
	return 0;
   96e50:	2300      	movs	r3, #0
}
   96e52:	4618      	mov	r0, r3
   96e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   96e56:	bf00      	nop
   96e58:	c28f5c29 	.word	0xc28f5c29
   96e5c:	3ff028f5 	.word	0x3ff028f5
   96e60:	7ae147ae 	.word	0x7ae147ae
   96e64:	3fefae14 	.word	0x3fefae14
   96e68:	20071a06 	.word	0x20071a06
   96e6c:	20070aa2 	.word	0x20070aa2
   96e70:	0008fa01 	.word	0x0008fa01
   96e74:	20071a08 	.word	0x20071a08
   96e78:	20071a12 	.word	0x20071a12
   96e7c:	20070aa4 	.word	0x20070aa4
   96e80:	20071a0e 	.word	0x20071a0e
   96e84:	20071a10 	.word	0x20071a10
   96e88:	20071a0a 	.word	0x20071a0a
   96e8c:	200724d2 	.word	0x200724d2
   96e90:	000a765d 	.word	0x000a765d
   96e94:	20071a04 	.word	0x20071a04
   96e98:	000a7729 	.word	0x000a7729
   96e9c:	000a7c49 	.word	0x000a7c49
   96ea0:	000a7c0d 	.word	0x000a7c0d
   96ea4:	20071a0c 	.word	0x20071a0c

00096ea8 <cl_uf_controller>:
float ufRemoved =0;
int ufTimeElapsed = 0;
int minCounter = 0 ;
extern bool isouf;
Cl_ReturnCodeType cl_uf_controller(cl_uf_events uf_event , int32_t data )
{
   96ea8:	b580      	push	{r7, lr}
   96eaa:	b08e      	sub	sp, #56	; 0x38
   96eac:	af00      	add	r7, sp, #0
   96eae:	4603      	mov	r3, r0
   96eb0:	6039      	str	r1, [r7, #0]
   96eb2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_uf_retcode = CL_OK;
   96eb4:	2300      	movs	r3, #0
   96eb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   96eba:	2300      	movs	r3, #0
   96ebc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	Cl_Uint16Type uf_delta_value = 0 ;
   96ec0:	2300      	movs	r3, #0
   96ec2:	86bb      	strh	r3, [r7, #52]	; 0x34
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   96ec4:	2300      	movs	r3, #0
   96ec6:	633b      	str	r3, [r7, #48]	; 0x30
	Cl_Uint32Type temptime = 0;
   96ec8:	2300      	movs	r3, #0
   96eca:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	switch(uf_state)
   96ecc:	4b9c      	ldr	r3, [pc, #624]	; (97140 <cl_uf_controller+0x298>)
   96ece:	781b      	ldrb	r3, [r3, #0]
   96ed0:	2b04      	cmp	r3, #4
   96ed2:	f200 8274 	bhi.w	973be <cl_uf_controller+0x516>
   96ed6:	a201      	add	r2, pc, #4	; (adr r2, 96edc <cl_uf_controller+0x34>)
   96ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96edc:	00096ef1 	.word	0x00096ef1
   96ee0:	000970bb 	.word	0x000970bb
   96ee4:	00097287 	.word	0x00097287
   96ee8:	00097373 	.word	0x00097373
   96eec:	000973bf 	.word	0x000973bf
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   96ef0:	79fb      	ldrb	r3, [r7, #7]
   96ef2:	2b02      	cmp	r3, #2
   96ef4:	d014      	beq.n	96f20 <cl_uf_controller+0x78>
   96ef6:	2b08      	cmp	r3, #8
   96ef8:	f000 808d 	beq.w	97016 <cl_uf_controller+0x16e>
   96efc:	2b01      	cmp	r3, #1
   96efe:	d000      	beq.n	96f02 <cl_uf_controller+0x5a>
					}
					
				
					break;
					
					default:break;
   96f00:	e0da      	b.n	970b8 <cl_uf_controller+0x210>
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					
					cl_uf_rate = data;
   96f02:	683b      	ldr	r3, [r7, #0]
   96f04:	4a8f      	ldr	r2, [pc, #572]	; (97144 <cl_uf_controller+0x29c>)
   96f06:	6013      	str	r3, [r2, #0]
					pwm_period =  cl_uf_rate ;
   96f08:	4b8e      	ldr	r3, [pc, #568]	; (97144 <cl_uf_controller+0x29c>)
   96f0a:	681b      	ldr	r3, [r3, #0]
   96f0c:	b29a      	uxth	r2, r3
   96f0e:	4b8e      	ldr	r3, [pc, #568]	; (97148 <cl_uf_controller+0x2a0>)
   96f10:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   96f12:	4b8d      	ldr	r3, [pc, #564]	; (97148 <cl_uf_controller+0x2a0>)
   96f14:	881b      	ldrh	r3, [r3, #0]
   96f16:	4619      	mov	r1, r3
   96f18:	2004      	movs	r0, #4
   96f1a:	4b8c      	ldr	r3, [pc, #560]	; (9714c <cl_uf_controller+0x2a4>)
   96f1c:	4798      	blx	r3
					break;
   96f1e:	e0cb      	b.n	970b8 <cl_uf_controller+0x210>
					case CL_UF_EVENT_START:
				
				if(Cl_MacState == MAC_DIALYSIS)
   96f20:	4b8b      	ldr	r3, [pc, #556]	; (97150 <cl_uf_controller+0x2a8>)
   96f22:	781b      	ldrb	r3, [r3, #0]
   96f24:	2b0f      	cmp	r3, #15
   96f26:	d164      	bne.n	96ff2 <cl_uf_controller+0x14a>
				{
					
					sv_cntrl_setpumpspeed(UFPUMP,12000);
   96f28:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   96f2c:	2004      	movs	r0, #4
   96f2e:	4b87      	ldr	r3, [pc, #540]	; (9714c <cl_uf_controller+0x2a4>)
   96f30:	4798      	blx	r3
					cl_wait(100);
   96f32:	2064      	movs	r0, #100	; 0x64
   96f34:	4b87      	ldr	r3, [pc, #540]	; (97154 <cl_uf_controller+0x2ac>)
   96f36:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,8000);
   96f38:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   96f3c:	2004      	movs	r0, #4
   96f3e:	4b83      	ldr	r3, [pc, #524]	; (9714c <cl_uf_controller+0x2a4>)
   96f40:	4798      	blx	r3
					cl_wait(100);
   96f42:	2064      	movs	r0, #100	; 0x64
   96f44:	4b83      	ldr	r3, [pc, #524]	; (97154 <cl_uf_controller+0x2ac>)
   96f46:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,6000);
   96f48:	f241 7170 	movw	r1, #6000	; 0x1770
   96f4c:	2004      	movs	r0, #4
   96f4e:	4b7f      	ldr	r3, [pc, #508]	; (9714c <cl_uf_controller+0x2a4>)
   96f50:	4798      	blx	r3
					cl_wait(100);
   96f52:	2064      	movs	r0, #100	; 0x64
   96f54:	4b7f      	ldr	r3, [pc, #508]	; (97154 <cl_uf_controller+0x2ac>)
   96f56:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,200);
   96f58:	21c8      	movs	r1, #200	; 0xc8
   96f5a:	2004      	movs	r0, #4
   96f5c:	4b7b      	ldr	r3, [pc, #492]	; (9714c <cl_uf_controller+0x2a4>)
   96f5e:	4798      	blx	r3
					cl_wait(100);
   96f60:	2064      	movs	r0, #100	; 0x64
   96f62:	4b7c      	ldr	r3, [pc, #496]	; (97154 <cl_uf_controller+0x2ac>)
   96f64:	4798      	blx	r3
					
					
					 temp = Treatdata[ID_ufgoal];
   96f66:	4b7c      	ldr	r3, [pc, #496]	; (97158 <cl_uf_controller+0x2b0>)
   96f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   96f6a:	633b      	str	r3, [r7, #48]	; 0x30
					
					 temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
   96f6c:	4b7a      	ldr	r3, [pc, #488]	; (97158 <cl_uf_controller+0x2b0>)
   96f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   96f70:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate = temp/((temptime)/60);
   96f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   96f74:	4a79      	ldr	r2, [pc, #484]	; (9715c <cl_uf_controller+0x2b4>)
   96f76:	fba2 2303 	umull	r2, r3, r2, r3
   96f7a:	095b      	lsrs	r3, r3, #5
   96f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   96f7e:	fbb2 f2f3 	udiv	r2, r2, r3
   96f82:	4b77      	ldr	r3, [pc, #476]	; (97160 <cl_uf_controller+0x2b8>)
   96f84:	4610      	mov	r0, r2
   96f86:	4798      	blx	r3
   96f88:	4603      	mov	r3, r0
   96f8a:	62bb      	str	r3, [r7, #40]	; 0x28
					int16_t intufrate =tempUfRate * 10;
   96f8c:	4b75      	ldr	r3, [pc, #468]	; (97164 <cl_uf_controller+0x2bc>)
   96f8e:	4976      	ldr	r1, [pc, #472]	; (97168 <cl_uf_controller+0x2c0>)
   96f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   96f92:	4798      	blx	r3
   96f94:	4603      	mov	r3, r0
   96f96:	461a      	mov	r2, r3
   96f98:	4b74      	ldr	r3, [pc, #464]	; (9716c <cl_uf_controller+0x2c4>)
   96f9a:	4610      	mov	r0, r2
   96f9c:	4798      	blx	r3
   96f9e:	4603      	mov	r3, r0
   96fa0:	84fb      	strh	r3, [r7, #38]	; 0x26
					
					Cl_Uint32Type calcufrate = tempUfRate * 10;
   96fa2:	4b70      	ldr	r3, [pc, #448]	; (97164 <cl_uf_controller+0x2bc>)
   96fa4:	4970      	ldr	r1, [pc, #448]	; (97168 <cl_uf_controller+0x2c0>)
   96fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   96fa8:	4798      	blx	r3
   96faa:	4603      	mov	r3, r0
   96fac:	461a      	mov	r2, r3
   96fae:	4b70      	ldr	r3, [pc, #448]	; (97170 <cl_uf_controller+0x2c8>)
   96fb0:	4610      	mov	r0, r2
   96fb2:	4798      	blx	r3
   96fb4:	4603      	mov	r3, r0
   96fb6:	623b      	str	r3, [r7, #32]
					Treatdata[ID_ufrate] = calcufrate;
   96fb8:	4a67      	ldr	r2, [pc, #412]	; (97158 <cl_uf_controller+0x2b0>)
   96fba:	6a3b      	ldr	r3, [r7, #32]
   96fbc:	6313      	str	r3, [r2, #48]	; 0x30
					calibrate_uf(intufrate);
   96fbe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   96fc2:	4618      	mov	r0, r3
   96fc4:	4b6b      	ldr	r3, [pc, #428]	; (97174 <cl_uf_controller+0x2cc>)
   96fc6:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   96fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   96fca:	2b00      	cmp	r3, #0
   96fcc:	d071      	beq.n	970b2 <cl_uf_controller+0x20a>
	
					
					sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   96fce:	4b6a      	ldr	r3, [pc, #424]	; (97178 <cl_uf_controller+0x2d0>)
   96fd0:	681b      	ldr	r3, [r3, #0]
   96fd2:	4619      	mov	r1, r3
   96fd4:	2004      	movs	r0, #4
   96fd6:	4b5d      	ldr	r3, [pc, #372]	; (9714c <cl_uf_controller+0x2a4>)
   96fd8:	4798      	blx	r3
				//	cl_ufpumpFeedback_set_expected_period(uf_final); // not required for now
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   96fda:	2004      	movs	r0, #4
   96fdc:	4b67      	ldr	r3, [pc, #412]	; (9717c <cl_uf_controller+0x2d4>)
   96fde:	4798      	blx	r3
   96fe0:	4603      	mov	r3, r0
   96fe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   96fe6:	4b66      	ldr	r3, [pc, #408]	; (97180 <cl_uf_controller+0x2d8>)
   96fe8:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   96fea:	4b55      	ldr	r3, [pc, #340]	; (97140 <cl_uf_controller+0x298>)
   96fec:	2201      	movs	r2, #1
   96fee:	701a      	strb	r2, [r3, #0]
					uf_state = CL_UF_STATE_STARTED;
				
						
					}
					
					break;
   96ff0:	e05f      	b.n	970b2 <cl_uf_controller+0x20a>
					}
					
				}
					else{
				
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period); // enter pwm data from the lookuop table
   96ff2:	4b55      	ldr	r3, [pc, #340]	; (97148 <cl_uf_controller+0x2a0>)
   96ff4:	881b      	ldrh	r3, [r3, #0]
   96ff6:	4619      	mov	r1, r3
   96ff8:	2004      	movs	r0, #4
   96ffa:	4b54      	ldr	r3, [pc, #336]	; (9714c <cl_uf_controller+0x2a4>)
   96ffc:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   96ffe:	2004      	movs	r0, #4
   97000:	4b5e      	ldr	r3, [pc, #376]	; (9717c <cl_uf_controller+0x2d4>)
   97002:	4798      	blx	r3
   97004:	4603      	mov	r3, r0
   97006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   9700a:	4b5d      	ldr	r3, [pc, #372]	; (97180 <cl_uf_controller+0x2d8>)
   9700c:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   9700e:	4b4c      	ldr	r3, [pc, #304]	; (97140 <cl_uf_controller+0x298>)
   97010:	2201      	movs	r2, #1
   97012:	701a      	strb	r2, [r3, #0]
				
						
					}
					
					break;
   97014:	e04d      	b.n	970b2 <cl_uf_controller+0x20a>
					
					case CL_UF_EVENT_RESET:
					
					
					 temp = Treatdata[ID_ufgoal];
   97016:	4b50      	ldr	r3, [pc, #320]	; (97158 <cl_uf_controller+0x2b0>)
   97018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   9701a:	633b      	str	r3, [r7, #48]	; 0x30
					 temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   9701c:	23f0      	movs	r3, #240	; 0xf0
   9701e:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate2 = temp/((temptime)/60);
   97020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   97022:	4a4e      	ldr	r2, [pc, #312]	; (9715c <cl_uf_controller+0x2b4>)
   97024:	fba2 2303 	umull	r2, r3, r2, r3
   97028:	095b      	lsrs	r3, r3, #5
   9702a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   9702c:	fbb2 f2f3 	udiv	r2, r2, r3
   97030:	4b4b      	ldr	r3, [pc, #300]	; (97160 <cl_uf_controller+0x2b8>)
   97032:	4610      	mov	r0, r2
   97034:	4798      	blx	r3
   97036:	4603      	mov	r3, r0
   97038:	61fb      	str	r3, [r7, #28]
					intufrate2 =tempUfRate2 * 10;
   9703a:	4b4a      	ldr	r3, [pc, #296]	; (97164 <cl_uf_controller+0x2bc>)
   9703c:	494a      	ldr	r1, [pc, #296]	; (97168 <cl_uf_controller+0x2c0>)
   9703e:	69f8      	ldr	r0, [r7, #28]
   97040:	4798      	blx	r3
   97042:	4603      	mov	r3, r0
   97044:	461a      	mov	r2, r3
   97046:	4b49      	ldr	r3, [pc, #292]	; (9716c <cl_uf_controller+0x2c4>)
   97048:	4610      	mov	r0, r2
   9704a:	4798      	blx	r3
   9704c:	4603      	mov	r3, r0
   9704e:	b21a      	sxth	r2, r3
   97050:	4b4c      	ldr	r3, [pc, #304]	; (97184 <cl_uf_controller+0x2dc>)
   97052:	801a      	strh	r2, [r3, #0]
					
					Cl_Uint32Type calcufrate = tempUfRate2 * 10;
   97054:	4b43      	ldr	r3, [pc, #268]	; (97164 <cl_uf_controller+0x2bc>)
   97056:	4944      	ldr	r1, [pc, #272]	; (97168 <cl_uf_controller+0x2c0>)
   97058:	69f8      	ldr	r0, [r7, #28]
   9705a:	4798      	blx	r3
   9705c:	4603      	mov	r3, r0
   9705e:	461a      	mov	r2, r3
   97060:	4b43      	ldr	r3, [pc, #268]	; (97170 <cl_uf_controller+0x2c8>)
   97062:	4610      	mov	r0, r2
   97064:	4798      	blx	r3
   97066:	4603      	mov	r3, r0
   97068:	61bb      	str	r3, [r7, #24]
					Treatdata[ID_ufrate] = calcufrate;
   9706a:	4a3b      	ldr	r2, [pc, #236]	; (97158 <cl_uf_controller+0x2b0>)
   9706c:	69bb      	ldr	r3, [r7, #24]
   9706e:	6313      	str	r3, [r2, #48]	; 0x30
					
					calibrate_uf(intufrate2);
   97070:	4b44      	ldr	r3, [pc, #272]	; (97184 <cl_uf_controller+0x2dc>)
   97072:	f9b3 3000 	ldrsh.w	r3, [r3]
   97076:	4618      	mov	r0, r3
   97078:	4b3e      	ldr	r3, [pc, #248]	; (97174 <cl_uf_controller+0x2cc>)
   9707a:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   9707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   9707e:	2b00      	cmp	r3, #0
   97080:	d019      	beq.n	970b6 <cl_uf_controller+0x20e>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   97082:	4b3d      	ldr	r3, [pc, #244]	; (97178 <cl_uf_controller+0x2d0>)
   97084:	681b      	ldr	r3, [r3, #0]
   97086:	4619      	mov	r1, r3
   97088:	2004      	movs	r0, #4
   9708a:	4b30      	ldr	r3, [pc, #192]	; (9714c <cl_uf_controller+0x2a4>)
   9708c:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   9708e:	4b3a      	ldr	r3, [pc, #232]	; (97178 <cl_uf_controller+0x2d0>)
   97090:	681b      	ldr	r3, [r3, #0]
   97092:	b21b      	sxth	r3, r3
   97094:	4618      	mov	r0, r3
   97096:	4b3c      	ldr	r3, [pc, #240]	; (97188 <cl_uf_controller+0x2e0>)
   97098:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   9709a:	2004      	movs	r0, #4
   9709c:	4b37      	ldr	r3, [pc, #220]	; (9717c <cl_uf_controller+0x2d4>)
   9709e:	4798      	blx	r3
   970a0:	4603      	mov	r3, r0
   970a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   970a6:	4b36      	ldr	r3, [pc, #216]	; (97180 <cl_uf_controller+0x2d8>)
   970a8:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   970aa:	4b25      	ldr	r3, [pc, #148]	; (97140 <cl_uf_controller+0x298>)
   970ac:	2201      	movs	r2, #1
   970ae:	701a      	strb	r2, [r3, #0]
					}
					
				
					break;
   970b0:	e001      	b.n	970b6 <cl_uf_controller+0x20e>
					uf_state = CL_UF_STATE_STARTED;
				
						
					}
					
					break;
   970b2:	bf00      	nop
   970b4:	e184      	b.n	973c0 <cl_uf_controller+0x518>
						cl_ufpumpFeedback_start();
						uf_state = CL_UF_STATE_STARTED;
					}
					
				
					break;
   970b6:	bf00      	nop
					
					default:break;
					
				}
			break;
   970b8:	e182      	b.n	973c0 <cl_uf_controller+0x518>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   970ba:	79fb      	ldrb	r3, [r7, #7]
   970bc:	3b01      	subs	r3, #1
   970be:	2b09      	cmp	r3, #9
   970c0:	f200 80dd 	bhi.w	9727e <cl_uf_controller+0x3d6>
   970c4:	a201      	add	r2, pc, #4	; (adr r2, 970cc <cl_uf_controller+0x224>)
   970c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   970ca:	bf00      	nop
   970cc:	00097107 	.word	0x00097107
   970d0:	0009727f 	.word	0x0009727f
   970d4:	0009727f 	.word	0x0009727f
   970d8:	00097119 	.word	0x00097119
   970dc:	00097137 	.word	0x00097137
   970e0:	000970fb 	.word	0x000970fb
   970e4:	0009727f 	.word	0x0009727f
   970e8:	0009719d 	.word	0x0009719d
   970ec:	0009727f 	.word	0x0009727f
   970f0:	000970f5 	.word	0x000970f5
			{
				
				case CL_UF_EVENT_MINUTE:
				
				Cl_SendUfdata();
   970f4:	4b25      	ldr	r3, [pc, #148]	; (9718c <cl_uf_controller+0x2e4>)
   970f6:	4798      	blx	r3
				break;
   970f8:	e0c4      	b.n	97284 <cl_uf_controller+0x3dc>
				case CL_UF_EVENT_SECOND:
				//cl_ufpumpFeedback_get_state(&uf_pumpstate);
				//cl_ufpumpFeedback_get_delta(&uf_delta_value);
			
				
					ufTimeElapsed++;
   970fa:	4b25      	ldr	r3, [pc, #148]	; (97190 <cl_uf_controller+0x2e8>)
   970fc:	681b      	ldr	r3, [r3, #0]
   970fe:	3301      	adds	r3, #1
   97100:	4a23      	ldr	r2, [pc, #140]	; (97190 <cl_uf_controller+0x2e8>)
   97102:	6013      	str	r3, [r2, #0]
// 				}
// 				else
// 				{
// 					
// 				}
				break;
   97104:	e0be      	b.n	97284 <cl_uf_controller+0x3dc>
				
				
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   97106:	683b      	ldr	r3, [r7, #0]
   97108:	4a0e      	ldr	r2, [pc, #56]	; (97144 <cl_uf_controller+0x29c>)
   9710a:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   9710c:	683b      	ldr	r3, [r7, #0]
   9710e:	4619      	mov	r1, r3
   97110:	2004      	movs	r0, #4
   97112:	4b0e      	ldr	r3, [pc, #56]	; (9714c <cl_uf_controller+0x2a4>)
   97114:	4798      	blx	r3
				break;
   97116:	e0b5      	b.n	97284 <cl_uf_controller+0x3dc>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   97118:	2004      	movs	r0, #4
   9711a:	4b1e      	ldr	r3, [pc, #120]	; (97194 <cl_uf_controller+0x2ec>)
   9711c:	4798      	blx	r3
   9711e:	4603      	mov	r3, r0
   97120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   97124:	4b1c      	ldr	r3, [pc, #112]	; (97198 <cl_uf_controller+0x2f0>)
   97126:	4798      	blx	r3
   97128:	4603      	mov	r3, r0
   9712a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   9712e:	4b04      	ldr	r3, [pc, #16]	; (97140 <cl_uf_controller+0x298>)
   97130:	2202      	movs	r2, #2
   97132:	701a      	strb	r2, [r3, #0]
				break;
   97134:	e0a6      	b.n	97284 <cl_uf_controller+0x3dc>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   97136:	4b02      	ldr	r3, [pc, #8]	; (97140 <cl_uf_controller+0x298>)
   97138:	2200      	movs	r2, #0
   9713a:	701a      	strb	r2, [r3, #0]
				break;
   9713c:	e0a2      	b.n	97284 <cl_uf_controller+0x3dc>
   9713e:	bf00      	nop
   97140:	20071a13 	.word	0x20071a13
   97144:	20071a14 	.word	0x20071a14
   97148:	20071a24 	.word	0x20071a24
   9714c:	0009ae59 	.word	0x0009ae59
   97150:	20070504 	.word	0x20070504
   97154:	00093ea9 	.word	0x00093ea9
   97158:	20072614 	.word	0x20072614
   9715c:	88888889 	.word	0x88888889
   97160:	000a7ef9 	.word	0x000a7ef9
   97164:	000a7fa9 	.word	0x000a7fa9
   97168:	41200000 	.word	0x41200000
   9716c:	000a8335 	.word	0x000a8335
   97170:	000a8381 	.word	0x000a8381
   97174:	00084329 	.word	0x00084329
   97178:	20071748 	.word	0x20071748
   9717c:	0009ad41 	.word	0x0009ad41
   97180:	00096c8d 	.word	0x00096c8d
   97184:	20071a18 	.word	0x20071a18
   97188:	00096cb5 	.word	0x00096cb5
   9718c:	00097421 	.word	0x00097421
   97190:	20071a20 	.word	0x20071a20
   97194:	0009ad7d 	.word	0x0009ad7d
   97198:	00096ca5 	.word	0x00096ca5
				case CL_UF_EVENT_RESET:				
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   9719c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   971a0:	2004      	movs	r0, #4
   971a2:	4b8a      	ldr	r3, [pc, #552]	; (973cc <cl_uf_controller+0x524>)
   971a4:	4798      	blx	r3
				cl_wait(100);
   971a6:	2064      	movs	r0, #100	; 0x64
   971a8:	4b89      	ldr	r3, [pc, #548]	; (973d0 <cl_uf_controller+0x528>)
   971aa:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   971ac:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   971b0:	2004      	movs	r0, #4
   971b2:	4b86      	ldr	r3, [pc, #536]	; (973cc <cl_uf_controller+0x524>)
   971b4:	4798      	blx	r3
				cl_wait(100);
   971b6:	2064      	movs	r0, #100	; 0x64
   971b8:	4b85      	ldr	r3, [pc, #532]	; (973d0 <cl_uf_controller+0x528>)
   971ba:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   971bc:	f241 7170 	movw	r1, #6000	; 0x1770
   971c0:	2004      	movs	r0, #4
   971c2:	4b82      	ldr	r3, [pc, #520]	; (973cc <cl_uf_controller+0x524>)
   971c4:	4798      	blx	r3
				cl_wait(100);
   971c6:	2064      	movs	r0, #100	; 0x64
   971c8:	4b81      	ldr	r3, [pc, #516]	; (973d0 <cl_uf_controller+0x528>)
   971ca:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   971cc:	21c8      	movs	r1, #200	; 0xc8
   971ce:	2004      	movs	r0, #4
   971d0:	4b7e      	ldr	r3, [pc, #504]	; (973cc <cl_uf_controller+0x524>)
   971d2:	4798      	blx	r3
				cl_wait(100);
   971d4:	2064      	movs	r0, #100	; 0x64
   971d6:	4b7e      	ldr	r3, [pc, #504]	; (973d0 <cl_uf_controller+0x528>)
   971d8:	4798      	blx	r3
				
										// added this event
				
					
					
					temptime = Treatdata[ID_treattime] - ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration	
   971da:	4b7e      	ldr	r3, [pc, #504]	; (973d4 <cl_uf_controller+0x52c>)
   971dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   971de:	4a7e      	ldr	r2, [pc, #504]	; (973d8 <cl_uf_controller+0x530>)
   971e0:	6812      	ldr	r2, [r2, #0]
   971e2:	1a9b      	subs	r3, r3, r2
   971e4:	62fb      	str	r3, [r7, #44]	; 0x2c
						temp = Treatdata[ID_ufgoal] - ufRemoved;
   971e6:	4b7b      	ldr	r3, [pc, #492]	; (973d4 <cl_uf_controller+0x52c>)
   971e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   971ea:	4b7c      	ldr	r3, [pc, #496]	; (973dc <cl_uf_controller+0x534>)
   971ec:	4610      	mov	r0, r2
   971ee:	4798      	blx	r3
   971f0:	4b7b      	ldr	r3, [pc, #492]	; (973e0 <cl_uf_controller+0x538>)
   971f2:	681a      	ldr	r2, [r3, #0]
   971f4:	4b7b      	ldr	r3, [pc, #492]	; (973e4 <cl_uf_controller+0x53c>)
   971f6:	4611      	mov	r1, r2
   971f8:	4798      	blx	r3
   971fa:	4603      	mov	r3, r0
   971fc:	461a      	mov	r2, r3
   971fe:	4b7a      	ldr	r3, [pc, #488]	; (973e8 <cl_uf_controller+0x540>)
   97200:	4610      	mov	r0, r2
   97202:	4798      	blx	r3
   97204:	4603      	mov	r3, r0
   97206:	633b      	str	r3, [r7, #48]	; 0x30
					
					
					
					float tempUfRate = temp/((temptime)/60);
   97208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   9720a:	4a78      	ldr	r2, [pc, #480]	; (973ec <cl_uf_controller+0x544>)
   9720c:	fba2 2303 	umull	r2, r3, r2, r3
   97210:	095b      	lsrs	r3, r3, #5
   97212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   97214:	fbb2 f2f3 	udiv	r2, r2, r3
   97218:	4b70      	ldr	r3, [pc, #448]	; (973dc <cl_uf_controller+0x534>)
   9721a:	4610      	mov	r0, r2
   9721c:	4798      	blx	r3
   9721e:	4603      	mov	r3, r0
   97220:	617b      	str	r3, [r7, #20]
					intufrate2 =tempUfRate * 10;
   97222:	4b73      	ldr	r3, [pc, #460]	; (973f0 <cl_uf_controller+0x548>)
   97224:	4973      	ldr	r1, [pc, #460]	; (973f4 <cl_uf_controller+0x54c>)
   97226:	6978      	ldr	r0, [r7, #20]
   97228:	4798      	blx	r3
   9722a:	4603      	mov	r3, r0
   9722c:	461a      	mov	r2, r3
   9722e:	4b72      	ldr	r3, [pc, #456]	; (973f8 <cl_uf_controller+0x550>)
   97230:	4610      	mov	r0, r2
   97232:	4798      	blx	r3
   97234:	4603      	mov	r3, r0
   97236:	b21a      	sxth	r2, r3
   97238:	4b70      	ldr	r3, [pc, #448]	; (973fc <cl_uf_controller+0x554>)
   9723a:	801a      	strh	r2, [r3, #0]
					
					calibrate_uf(intufrate2);
   9723c:	4b6f      	ldr	r3, [pc, #444]	; (973fc <cl_uf_controller+0x554>)
   9723e:	f9b3 3000 	ldrsh.w	r3, [r3]
   97242:	4618      	mov	r0, r3
   97244:	4b6e      	ldr	r3, [pc, #440]	; (97400 <cl_uf_controller+0x558>)
   97246:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   97248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   9724a:	2b00      	cmp	r3, #0
   9724c:	d019      	beq.n	97282 <cl_uf_controller+0x3da>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   9724e:	4b6d      	ldr	r3, [pc, #436]	; (97404 <cl_uf_controller+0x55c>)
   97250:	681b      	ldr	r3, [r3, #0]
   97252:	4619      	mov	r1, r3
   97254:	2004      	movs	r0, #4
   97256:	4b5d      	ldr	r3, [pc, #372]	; (973cc <cl_uf_controller+0x524>)
   97258:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   9725a:	4b6a      	ldr	r3, [pc, #424]	; (97404 <cl_uf_controller+0x55c>)
   9725c:	681b      	ldr	r3, [r3, #0]
   9725e:	b21b      	sxth	r3, r3
   97260:	4618      	mov	r0, r3
   97262:	4b69      	ldr	r3, [pc, #420]	; (97408 <cl_uf_controller+0x560>)
   97264:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   97266:	2004      	movs	r0, #4
   97268:	4b68      	ldr	r3, [pc, #416]	; (9740c <cl_uf_controller+0x564>)
   9726a:	4798      	blx	r3
   9726c:	4603      	mov	r3, r0
   9726e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   97272:	4b67      	ldr	r3, [pc, #412]	; (97410 <cl_uf_controller+0x568>)
   97274:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   97276:	4b67      	ldr	r3, [pc, #412]	; (97414 <cl_uf_controller+0x56c>)
   97278:	2201      	movs	r2, #1
   9727a:	701a      	strb	r2, [r3, #0]
					}
					
				break;
   9727c:	e001      	b.n	97282 <cl_uf_controller+0x3da>
				default:break;
   9727e:	bf00      	nop
   97280:	e09e      	b.n	973c0 <cl_uf_controller+0x518>
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
						cl_ufpumpFeedback_start();
						uf_state = CL_UF_STATE_STARTED;
					}
					
				break;
   97282:	bf00      	nop
				default:break;
				
			}
			break;
   97284:	e09c      	b.n	973c0 <cl_uf_controller+0x518>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   97286:	79fb      	ldrb	r3, [r7, #7]
   97288:	2b01      	cmp	r3, #1
   9728a:	d002      	beq.n	97292 <cl_uf_controller+0x3ea>
   9728c:	2b02      	cmp	r3, #2
   9728e:	d009      	beq.n	972a4 <cl_uf_controller+0x3fc>
					uf_state = CL_UF_STATE_STARTED;
				}
				
				
				break;
				default:break;
   97290:	e06e      	b.n	97370 <cl_uf_controller+0x4c8>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   97292:	683b      	ldr	r3, [r7, #0]
   97294:	4a60      	ldr	r2, [pc, #384]	; (97418 <cl_uf_controller+0x570>)
   97296:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   97298:	683b      	ldr	r3, [r7, #0]
   9729a:	4619      	mov	r1, r3
   9729c:	2004      	movs	r0, #4
   9729e:	4b4b      	ldr	r3, [pc, #300]	; (973cc <cl_uf_controller+0x524>)
   972a0:	4798      	blx	r3
				break;
   972a2:	e065      	b.n	97370 <cl_uf_controller+0x4c8>
				case CL_UF_EVENT_START:													// added this event
				//cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				//uf_state = CL_UF_STATE_STARTED;
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   972a4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   972a8:	2004      	movs	r0, #4
   972aa:	4b48      	ldr	r3, [pc, #288]	; (973cc <cl_uf_controller+0x524>)
   972ac:	4798      	blx	r3
				cl_wait(100);
   972ae:	2064      	movs	r0, #100	; 0x64
   972b0:	4b47      	ldr	r3, [pc, #284]	; (973d0 <cl_uf_controller+0x528>)
   972b2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   972b4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   972b8:	2004      	movs	r0, #4
   972ba:	4b44      	ldr	r3, [pc, #272]	; (973cc <cl_uf_controller+0x524>)
   972bc:	4798      	blx	r3
				cl_wait(100);
   972be:	2064      	movs	r0, #100	; 0x64
   972c0:	4b43      	ldr	r3, [pc, #268]	; (973d0 <cl_uf_controller+0x528>)
   972c2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   972c4:	f241 7170 	movw	r1, #6000	; 0x1770
   972c8:	2004      	movs	r0, #4
   972ca:	4b40      	ldr	r3, [pc, #256]	; (973cc <cl_uf_controller+0x524>)
   972cc:	4798      	blx	r3
				cl_wait(100);
   972ce:	2064      	movs	r0, #100	; 0x64
   972d0:	4b3f      	ldr	r3, [pc, #252]	; (973d0 <cl_uf_controller+0x528>)
   972d2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   972d4:	21c8      	movs	r1, #200	; 0xc8
   972d6:	2004      	movs	r0, #4
   972d8:	4b3c      	ldr	r3, [pc, #240]	; (973cc <cl_uf_controller+0x524>)
   972da:	4798      	blx	r3
				cl_wait(100);
   972dc:	2064      	movs	r0, #100	; 0x64
   972de:	4b3c      	ldr	r3, [pc, #240]	; (973d0 <cl_uf_controller+0x528>)
   972e0:	4798      	blx	r3
				
			
			temp = Treatdata[ID_ufgoal] ;//- ufRemoved;
   972e2:	4b3c      	ldr	r3, [pc, #240]	; (973d4 <cl_uf_controller+0x52c>)
   972e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   972e6:	633b      	str	r3, [r7, #48]	; 0x30
			temptime = Treatdata[ID_treattime]; //- ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration
   972e8:	4b3a      	ldr	r3, [pc, #232]	; (973d4 <cl_uf_controller+0x52c>)
   972ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   972ec:	62fb      	str	r3, [r7, #44]	; 0x2c
						
				float tempUfRate = temp/((temptime)/60);
   972ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   972f0:	4a3e      	ldr	r2, [pc, #248]	; (973ec <cl_uf_controller+0x544>)
   972f2:	fba2 2303 	umull	r2, r3, r2, r3
   972f6:	095b      	lsrs	r3, r3, #5
   972f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   972fa:	fbb2 f2f3 	udiv	r2, r2, r3
   972fe:	4b37      	ldr	r3, [pc, #220]	; (973dc <cl_uf_controller+0x534>)
   97300:	4610      	mov	r0, r2
   97302:	4798      	blx	r3
   97304:	4603      	mov	r3, r0
   97306:	613b      	str	r3, [r7, #16]
				intufrate2 =tempUfRate * 10;
   97308:	4b39      	ldr	r3, [pc, #228]	; (973f0 <cl_uf_controller+0x548>)
   9730a:	493a      	ldr	r1, [pc, #232]	; (973f4 <cl_uf_controller+0x54c>)
   9730c:	6938      	ldr	r0, [r7, #16]
   9730e:	4798      	blx	r3
   97310:	4603      	mov	r3, r0
   97312:	461a      	mov	r2, r3
   97314:	4b38      	ldr	r3, [pc, #224]	; (973f8 <cl_uf_controller+0x550>)
   97316:	4610      	mov	r0, r2
   97318:	4798      	blx	r3
   9731a:	4603      	mov	r3, r0
   9731c:	b21a      	sxth	r2, r3
   9731e:	4b37      	ldr	r3, [pc, #220]	; (973fc <cl_uf_controller+0x554>)
   97320:	801a      	strh	r2, [r3, #0]
				Cl_Uint32Type calcufrate = tempUfRate * 10;
   97322:	4b33      	ldr	r3, [pc, #204]	; (973f0 <cl_uf_controller+0x548>)
   97324:	4933      	ldr	r1, [pc, #204]	; (973f4 <cl_uf_controller+0x54c>)
   97326:	6938      	ldr	r0, [r7, #16]
   97328:	4798      	blx	r3
   9732a:	4603      	mov	r3, r0
   9732c:	461a      	mov	r2, r3
   9732e:	4b2e      	ldr	r3, [pc, #184]	; (973e8 <cl_uf_controller+0x540>)
   97330:	4610      	mov	r0, r2
   97332:	4798      	blx	r3
   97334:	4603      	mov	r3, r0
   97336:	60fb      	str	r3, [r7, #12]
					Treatdata[ID_ufrate] = calcufrate;
   97338:	4a26      	ldr	r2, [pc, #152]	; (973d4 <cl_uf_controller+0x52c>)
   9733a:	68fb      	ldr	r3, [r7, #12]
   9733c:	6313      	str	r3, [r2, #48]	; 0x30
				calibrate_uf(intufrate2);
   9733e:	4b2f      	ldr	r3, [pc, #188]	; (973fc <cl_uf_controller+0x554>)
   97340:	f9b3 3000 	ldrsh.w	r3, [r3]
   97344:	4618      	mov	r0, r3
   97346:	4b2e      	ldr	r3, [pc, #184]	; (97400 <cl_uf_controller+0x558>)
   97348:	4798      	blx	r3
				// based on this uf rate calculate the PWM
				// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

				if(temp > 0){
   9734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   9734c:	2b00      	cmp	r3, #0
   9734e:	d00e      	beq.n	9736e <cl_uf_controller+0x4c6>
					
					
		//			sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
//					cl_ufpumpFeedback_set_expected_period(uf_final); // not required
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   97350:	2004      	movs	r0, #4
   97352:	4b2e      	ldr	r3, [pc, #184]	; (9740c <cl_uf_controller+0x564>)
   97354:	4798      	blx	r3
   97356:	4603      	mov	r3, r0
   97358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					sv_cntrl_setpumpspeed(UFPUMP,uf_final);
   9735c:	4b29      	ldr	r3, [pc, #164]	; (97404 <cl_uf_controller+0x55c>)
   9735e:	681b      	ldr	r3, [r3, #0]
   97360:	4619      	mov	r1, r3
   97362:	2004      	movs	r0, #4
   97364:	4b19      	ldr	r3, [pc, #100]	; (973cc <cl_uf_controller+0x524>)
   97366:	4798      	blx	r3
//					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
   97368:	4b2a      	ldr	r3, [pc, #168]	; (97414 <cl_uf_controller+0x56c>)
   9736a:	2201      	movs	r2, #1
   9736c:	701a      	strb	r2, [r3, #0]
				}
				
				
				break;
   9736e:	bf00      	nop
				default:break;
				
			}
			break;
   97370:	e026      	b.n	973c0 <cl_uf_controller+0x518>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   97372:	79fb      	ldrb	r3, [r7, #7]
   97374:	2b02      	cmp	r3, #2
   97376:	d00d      	beq.n	97394 <cl_uf_controller+0x4ec>
   97378:	2b04      	cmp	r3, #4
   9737a:	d015      	beq.n	973a8 <cl_uf_controller+0x500>
   9737c:	2b01      	cmp	r3, #1
   9737e:	d000      	beq.n	97382 <cl_uf_controller+0x4da>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   97380:	e01c      	b.n	973bc <cl_uf_controller+0x514>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   97382:	683b      	ldr	r3, [r7, #0]
   97384:	4a24      	ldr	r2, [pc, #144]	; (97418 <cl_uf_controller+0x570>)
   97386:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   97388:	683b      	ldr	r3, [r7, #0]
   9738a:	4619      	mov	r1, r3
   9738c:	2004      	movs	r0, #4
   9738e:	4b0f      	ldr	r3, [pc, #60]	; (973cc <cl_uf_controller+0x524>)
   97390:	4798      	blx	r3
				break;
   97392:	e013      	b.n	973bc <cl_uf_controller+0x514>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   97394:	2004      	movs	r0, #4
   97396:	4b1d      	ldr	r3, [pc, #116]	; (9740c <cl_uf_controller+0x564>)
   97398:	4798      	blx	r3
   9739a:	4603      	mov	r3, r0
   9739c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STARTED;
   973a0:	4b1c      	ldr	r3, [pc, #112]	; (97414 <cl_uf_controller+0x56c>)
   973a2:	2201      	movs	r2, #1
   973a4:	701a      	strb	r2, [r3, #0]
				break;
   973a6:	e009      	b.n	973bc <cl_uf_controller+0x514>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   973a8:	2004      	movs	r0, #4
   973aa:	4b1c      	ldr	r3, [pc, #112]	; (9741c <cl_uf_controller+0x574>)
   973ac:	4798      	blx	r3
   973ae:	4603      	mov	r3, r0
   973b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   973b4:	4b17      	ldr	r3, [pc, #92]	; (97414 <cl_uf_controller+0x56c>)
   973b6:	2202      	movs	r2, #2
   973b8:	701a      	strb	r2, [r3, #0]
				break;
   973ba:	bf00      	nop
				default:break;
				
			}
			break;
   973bc:	e000      	b.n	973c0 <cl_uf_controller+0x518>
			case CL_UF_STATE_COMPLETED:
			break;
			
			default:break;
   973be:	bf00      	nop
			
			
	}
	return CL_OK;
   973c0:	2300      	movs	r3, #0
	
	
}
   973c2:	4618      	mov	r0, r3
   973c4:	3738      	adds	r7, #56	; 0x38
   973c6:	46bd      	mov	sp, r7
   973c8:	bd80      	pop	{r7, pc}
   973ca:	bf00      	nop
   973cc:	0009ae59 	.word	0x0009ae59
   973d0:	00093ea9 	.word	0x00093ea9
   973d4:	20072614 	.word	0x20072614
   973d8:	20071a20 	.word	0x20071a20
   973dc:	000a7ef9 	.word	0x000a7ef9
   973e0:	20071a1c 	.word	0x20071a1c
   973e4:	000a7d95 	.word	0x000a7d95
   973e8:	000a8381 	.word	0x000a8381
   973ec:	88888889 	.word	0x88888889
   973f0:	000a7fa9 	.word	0x000a7fa9
   973f4:	41200000 	.word	0x41200000
   973f8:	000a8335 	.word	0x000a8335
   973fc:	20071a18 	.word	0x20071a18
   97400:	00084329 	.word	0x00084329
   97404:	20071748 	.word	0x20071748
   97408:	00096cb5 	.word	0x00096cb5
   9740c:	0009ad41 	.word	0x0009ad41
   97410:	00096c8d 	.word	0x00096c8d
   97414:	20071a13 	.word	0x20071a13
   97418:	20071a14 	.word	0x20071a14
   9741c:	0009ad7d 	.word	0x0009ad7d

00097420 <Cl_SendUfdata>:


Cl_ReturnCodeType Cl_SendUfdata(){
   97420:	b580      	push	{r7, lr}
   97422:	af00      	add	r7, sp, #0
	
	ufRemoved =  ufRemoved + (intufrate2/10);
   97424:	4b0c      	ldr	r3, [pc, #48]	; (97458 <Cl_SendUfdata+0x38>)
   97426:	f9b3 3000 	ldrsh.w	r3, [r3]
   9742a:	4a0c      	ldr	r2, [pc, #48]	; (9745c <Cl_SendUfdata+0x3c>)
   9742c:	fb82 1203 	smull	r1, r2, r2, r3
   97430:	1092      	asrs	r2, r2, #2
   97432:	17db      	asrs	r3, r3, #31
   97434:	1ad3      	subs	r3, r2, r3
   97436:	b21a      	sxth	r2, r3
   97438:	4b09      	ldr	r3, [pc, #36]	; (97460 <Cl_SendUfdata+0x40>)
   9743a:	4610      	mov	r0, r2
   9743c:	4798      	blx	r3
   9743e:	4b09      	ldr	r3, [pc, #36]	; (97464 <Cl_SendUfdata+0x44>)
   97440:	681a      	ldr	r2, [r3, #0]
   97442:	4b09      	ldr	r3, [pc, #36]	; (97468 <Cl_SendUfdata+0x48>)
   97444:	4611      	mov	r1, r2
   97446:	4798      	blx	r3
   97448:	4603      	mov	r3, r0
   9744a:	461a      	mov	r2, r3
   9744c:	4b05      	ldr	r3, [pc, #20]	; (97464 <Cl_SendUfdata+0x44>)
   9744e:	601a      	str	r2, [r3, #0]
	
	return CL_OK;
   97450:	2300      	movs	r3, #0
	
}
   97452:	4618      	mov	r0, r3
   97454:	bd80      	pop	{r7, pc}
   97456:	bf00      	nop
   97458:	20071a18 	.word	0x20071a18
   9745c:	66666667 	.word	0x66666667
   97460:	000a7f01 	.word	0x000a7f01
   97464:	20071a1c 	.word	0x20071a1c
   97468:	000a7d99 	.word	0x000a7d99

0009746c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   9746c:	b480      	push	{r7}
   9746e:	b083      	sub	sp, #12
   97470:	af00      	add	r7, sp, #0
   97472:	4603      	mov	r3, r0
   97474:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   97476:	4908      	ldr	r1, [pc, #32]	; (97498 <NVIC_EnableIRQ+0x2c>)
   97478:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9747c:	095b      	lsrs	r3, r3, #5
   9747e:	79fa      	ldrb	r2, [r7, #7]
   97480:	f002 021f 	and.w	r2, r2, #31
   97484:	2001      	movs	r0, #1
   97486:	fa00 f202 	lsl.w	r2, r0, r2
   9748a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   9748e:	bf00      	nop
   97490:	370c      	adds	r7, #12
   97492:	46bd      	mov	sp, r7
   97494:	bc80      	pop	{r7}
   97496:	4770      	bx	lr
   97498:	e000e100 	.word	0xe000e100

0009749c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   9749c:	b480      	push	{r7}
   9749e:	b08b      	sub	sp, #44	; 0x2c
   974a0:	af00      	add	r7, sp, #0
   974a2:	6078      	str	r0, [r7, #4]
   974a4:	460b      	mov	r3, r1
   974a6:	70fb      	strb	r3, [r7, #3]
   974a8:	687b      	ldr	r3, [r7, #4]
   974aa:	627b      	str	r3, [r7, #36]	; 0x24
   974ac:	78fb      	ldrb	r3, [r7, #3]
   974ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   974b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   974b4:	61fb      	str	r3, [r7, #28]
   974b6:	69fb      	ldr	r3, [r7, #28]
   974b8:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   974ba:	69bb      	ldr	r3, [r7, #24]
   974bc:	095b      	lsrs	r3, r3, #5
   974be:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   974c0:	697b      	ldr	r3, [r7, #20]
   974c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   974c6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   974ca:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   974cc:	613b      	str	r3, [r7, #16]

	if (level) {
   974ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   974d2:	2b00      	cmp	r3, #0
   974d4:	d009      	beq.n	974ea <ioport_set_pin_level+0x4e>
   974d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   974d8:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   974da:	68fb      	ldr	r3, [r7, #12]
   974dc:	f003 031f 	and.w	r3, r3, #31
   974e0:	2201      	movs	r2, #1
   974e2:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   974e4:	693b      	ldr	r3, [r7, #16]
   974e6:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   974e8:	e008      	b.n	974fc <ioport_set_pin_level+0x60>
   974ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   974ec:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   974ee:	68bb      	ldr	r3, [r7, #8]
   974f0:	f003 031f 	and.w	r3, r3, #31
   974f4:	2201      	movs	r2, #1
   974f6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   974f8:	693b      	ldr	r3, [r7, #16]
   974fa:	635a      	str	r2, [r3, #52]	; 0x34
   974fc:	bf00      	nop
   974fe:	372c      	adds	r7, #44	; 0x2c
   97500:	46bd      	mov	sp, r7
   97502:	bc80      	pop	{r7}
   97504:	4770      	bx	lr
   97506:	bf00      	nop

00097508 <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;

void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   97508:	b480      	push	{r7}
   9750a:	b083      	sub	sp, #12
   9750c:	af00      	add	r7, sp, #0
   9750e:	6078      	str	r0, [r7, #4]
   97510:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   97512:	687b      	ldr	r3, [r7, #4]
   97514:	683a      	ldr	r2, [r7, #0]
   97516:	601a      	str	r2, [r3, #0]
}
   97518:	bf00      	nop
   9751a:	370c      	adds	r7, #12
   9751c:	46bd      	mov	sp, r7
   9751e:	bc80      	pop	{r7}
   97520:	4770      	bx	lr
   97522:	bf00      	nop

00097524 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   97524:	b580      	push	{r7, lr}
   97526:	b082      	sub	sp, #8
   97528:	af00      	add	r7, sp, #0
   9752a:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   9752c:	687b      	ldr	r3, [r7, #4]
   9752e:	681b      	ldr	r3, [r3, #0]
   97530:	2100      	movs	r1, #0
   97532:	4618      	mov	r0, r3
   97534:	4b02      	ldr	r3, [pc, #8]	; (97540 <sn65hvda540_normal_mode+0x1c>)
   97536:	4798      	blx	r3
}
   97538:	bf00      	nop
   9753a:	3708      	adds	r7, #8
   9753c:	46bd      	mov	sp, r7
   9753e:	bd80      	pop	{r7, pc}
   97540:	0009749d 	.word	0x0009749d

00097544 <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   97544:	b580      	push	{r7, lr}
   97546:	b082      	sub	sp, #8
   97548:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   9754a:	4b13      	ldr	r3, [pc, #76]	; (97598 <CAN0_Handler+0x54>)
   9754c:	691b      	ldr	r3, [r3, #16]
   9754e:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   97550:	687b      	ldr	r3, [r7, #4]
   97552:	b2db      	uxtb	r3, r3
   97554:	2b00      	cmp	r3, #0
   97556:	d01b      	beq.n	97590 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   97558:	4b0f      	ldr	r3, [pc, #60]	; (97598 <CAN0_Handler+0x54>)
   9755a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   9755e:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   97560:	687b      	ldr	r3, [r7, #4]
   97562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   97566:	2b00      	cmp	r3, #0
   97568:	d012      	beq.n	97590 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   9756a:	4b0c      	ldr	r3, [pc, #48]	; (9759c <CAN0_Handler+0x58>)
   9756c:	2201      	movs	r2, #1
   9756e:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   97570:	4a0a      	ldr	r2, [pc, #40]	; (9759c <CAN0_Handler+0x58>)
   97572:	687b      	ldr	r3, [r7, #4]
   97574:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   97576:	4809      	ldr	r0, [pc, #36]	; (9759c <CAN0_Handler+0x58>)
   97578:	4b09      	ldr	r3, [pc, #36]	; (975a0 <CAN0_Handler+0x5c>)
   9757a:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   9757c:	4807      	ldr	r0, [pc, #28]	; (9759c <CAN0_Handler+0x58>)
   9757e:	4b09      	ldr	r3, [pc, #36]	; (975a4 <CAN0_Handler+0x60>)
   97580:	4798      	blx	r3
			g_ul_recv_status = 1;
   97582:	4b09      	ldr	r3, [pc, #36]	; (975a8 <CAN0_Handler+0x64>)
   97584:	2201      	movs	r2, #1
   97586:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   97588:	4b07      	ldr	r3, [pc, #28]	; (975a8 <CAN0_Handler+0x64>)
   9758a:	681b      	ldr	r3, [r3, #0]
   9758c:	4a07      	ldr	r2, [pc, #28]	; (975ac <CAN0_Handler+0x68>)
   9758e:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   97590:	bf00      	nop
   97592:	3708      	adds	r7, #8
   97594:	46bd      	mov	sp, r7
   97596:	bd80      	pop	{r7, pc}
   97598:	400b4000 	.word	0x400b4000
   9759c:	20072798 	.word	0x20072798
   975a0:	0009786d 	.word	0x0009786d
   975a4:	00097655 	.word	0x00097655
   975a8:	20071a28 	.word	0x20071a28
   975ac:	20071a2c 	.word	0x20071a2c

000975b0 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   975b0:	b580      	push	{r7, lr}
   975b2:	b084      	sub	sp, #16
   975b4:	af00      	add	r7, sp, #0
   975b6:	4603      	mov	r3, r0
   975b8:	71fb      	strb	r3, [r7, #7]
   975ba:	460b      	mov	r3, r1
   975bc:	71bb      	strb	r3, [r7, #6]
   975be:	4613      	mov	r3, r2
   975c0:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   975c2:	230a      	movs	r3, #10
   975c4:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   975c6:	79bb      	ldrb	r3, [r7, #6]
   975c8:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   975ca:	79fb      	ldrb	r3, [r7, #7]
   975cc:	049b      	lsls	r3, r3, #18
   975ce:	461a      	mov	r2, r3
   975d0:	4b1b      	ldr	r3, [pc, #108]	; (97640 <dd_master_command+0x90>)
   975d2:	4013      	ands	r3, r2
   975d4:	4a1b      	ldr	r2, [pc, #108]	; (97644 <dd_master_command+0x94>)
   975d6:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   975d8:	88bb      	ldrh	r3, [r7, #4]
   975da:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   975dc:	68fb      	ldr	r3, [r7, #12]
   975de:	4a19      	ldr	r2, [pc, #100]	; (97644 <dd_master_command+0x94>)
   975e0:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   975e2:	4b18      	ldr	r3, [pc, #96]	; (97644 <dd_master_command+0x94>)
   975e4:	2200      	movs	r2, #0
   975e6:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   975e8:	4b17      	ldr	r3, [pc, #92]	; (97648 <dd_master_command+0x98>)
   975ea:	f04f 32ff 	mov.w	r2, #4294967295
   975ee:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   975f0:	202b      	movs	r0, #43	; 0x2b
   975f2:	4b16      	ldr	r3, [pc, #88]	; (9764c <dd_master_command+0x9c>)
   975f4:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   975f6:	4b13      	ldr	r3, [pc, #76]	; (97644 <dd_master_command+0x94>)
   975f8:	2200      	movs	r2, #0
   975fa:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   975fc:	4b11      	ldr	r3, [pc, #68]	; (97644 <dd_master_command+0x94>)
   975fe:	2203      	movs	r2, #3
   97600:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   97602:	4b10      	ldr	r3, [pc, #64]	; (97644 <dd_master_command+0x94>)
   97604:	2200      	movs	r2, #0
   97606:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   97608:	4b0e      	ldr	r3, [pc, #56]	; (97644 <dd_master_command+0x94>)
   9760a:	2204      	movs	r2, #4
   9760c:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   9760e:	4b0d      	ldr	r3, [pc, #52]	; (97644 <dd_master_command+0x94>)
   97610:	2200      	movs	r2, #0
   97612:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   97614:	4b0b      	ldr	r3, [pc, #44]	; (97644 <dd_master_command+0x94>)
   97616:	f240 72fc 	movw	r2, #2044	; 0x7fc
   9761a:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   9761c:	bf00      	nop
   9761e:	4809      	ldr	r0, [pc, #36]	; (97644 <dd_master_command+0x94>)
   97620:	4b0b      	ldr	r3, [pc, #44]	; (97650 <dd_master_command+0xa0>)
   97622:	4798      	blx	r3
   97624:	4603      	mov	r3, r0
   97626:	2b01      	cmp	r3, #1
   97628:	d0f9      	beq.n	9761e <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   9762a:	202b      	movs	r0, #43	; 0x2b
   9762c:	4b07      	ldr	r3, [pc, #28]	; (9764c <dd_master_command+0x9c>)
   9762e:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   97630:	4b05      	ldr	r3, [pc, #20]	; (97648 <dd_master_command+0x98>)
   97632:	2202      	movs	r2, #2
   97634:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   97636:	2300      	movs	r3, #0
}
   97638:	4618      	mov	r0, r3
   9763a:	3710      	adds	r7, #16
   9763c:	46bd      	mov	sp, r7
   9763e:	bd80      	pop	{r7, pc}
   97640:	1ffc0000 	.word	0x1ffc0000
   97644:	20072798 	.word	0x20072798
   97648:	400b4000 	.word	0x400b4000
   9764c:	0009746d 	.word	0x0009746d
   97650:	0009793d 	.word	0x0009793d

00097654 <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   97654:	b480      	push	{r7}
   97656:	b083      	sub	sp, #12
   97658:	af00      	add	r7, sp, #0
   9765a:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   9765c:	687b      	ldr	r3, [r7, #4]
   9765e:	699b      	ldr	r3, [r3, #24]
   97660:	4a7c      	ldr	r2, [pc, #496]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97662:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   97664:	4b7b      	ldr	r3, [pc, #492]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97666:	781b      	ldrb	r3, [r3, #0]
   97668:	b2da      	uxtb	r2, r3
   9766a:	4b7b      	ldr	r3, [pc, #492]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9766c:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   9766e:	4b79      	ldr	r3, [pc, #484]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97670:	785b      	ldrb	r3, [r3, #1]
   97672:	b2da      	uxtb	r2, r3
   97674:	4b78      	ldr	r3, [pc, #480]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97676:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   97678:	4b77      	ldr	r3, [pc, #476]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9767a:	781b      	ldrb	r3, [r3, #0]
   9767c:	b2db      	uxtb	r3, r3
   9767e:	2b02      	cmp	r3, #2
   97680:	d01f      	beq.n	976c2 <dd_can_dump_mailbox_data+0x6e>
   97682:	2b03      	cmp	r3, #3
   97684:	d038      	beq.n	976f8 <dd_can_dump_mailbox_data+0xa4>
   97686:	2b01      	cmp	r3, #1
   97688:	d000      	beq.n	9768c <dd_can_dump_mailbox_data+0x38>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   9768a:	e0de      	b.n	9784a <dd_can_dump_mailbox_data+0x1f6>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   9768c:	4b72      	ldr	r3, [pc, #456]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9768e:	785b      	ldrb	r3, [r3, #1]
   97690:	b2db      	uxtb	r3, r3
   97692:	2b07      	cmp	r3, #7
   97694:	d000      	beq.n	97698 <dd_can_dump_mailbox_data+0x44>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   97696:	e013      	b.n	976c0 <dd_can_dump_mailbox_data+0x6c>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   97698:	4b6e      	ldr	r3, [pc, #440]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   9769a:	885b      	ldrh	r3, [r3, #2]
   9769c:	b29a      	uxth	r2, r3
   9769e:	4b6e      	ldr	r3, [pc, #440]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976a0:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   976a2:	687b      	ldr	r3, [r7, #4]
   976a4:	69db      	ldr	r3, [r3, #28]
   976a6:	4a6b      	ldr	r2, [pc, #428]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976a8:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   976aa:	4b6a      	ldr	r3, [pc, #424]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976ac:	881b      	ldrh	r3, [r3, #0]
   976ae:	b29a      	uxth	r2, r3
   976b0:	4b69      	ldr	r3, [pc, #420]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976b2:	851a      	strh	r2, [r3, #40]	; 0x28
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
   976b4:	4b67      	ldr	r3, [pc, #412]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976b6:	885b      	ldrh	r3, [r3, #2]
   976b8:	b29a      	uxth	r2, r3
   976ba:	4b67      	ldr	r3, [pc, #412]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976bc:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
   976be:	bf00      	nop
			
			default :
			break;
		}
		break;
   976c0:	e0c3      	b.n	9784a <dd_can_dump_mailbox_data+0x1f6>
		
		case PROPORTIONING_CPU_id :
				switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   976c2:	4b65      	ldr	r3, [pc, #404]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976c4:	785b      	ldrb	r3, [r3, #1]
   976c6:	b2db      	uxtb	r3, r3
   976c8:	2b08      	cmp	r3, #8
   976ca:	d000      	beq.n	976ce <dd_can_dump_mailbox_data+0x7a>
					DD_Sensor_status.bicar_feed_back  =  temp_struct.temp_reg_16[0] ;
					DD_Sensor_status.dummy_data =   temp_struct.temp_reg_16[1] ;
					break;
					
					default :
					break;
   976cc:	e013      	b.n	976f6 <dd_can_dump_mailbox_data+0xa2>
		
		case PROPORTIONING_CPU_id :
				switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
					
					case Sensor_group_8 :
					DD_Sensor_status.acid_feed_back = temp_struct.temp_reg_16[1] ;
   976ce:	4b61      	ldr	r3, [pc, #388]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976d0:	885b      	ldrh	r3, [r3, #2]
   976d2:	b29a      	uxth	r2, r3
   976d4:	4b60      	ldr	r3, [pc, #384]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976d6:	859a      	strh	r2, [r3, #44]	; 0x2c
					temp_struct.temp_reg_32 = (p_mailbox->ul_datah);
   976d8:	687b      	ldr	r3, [r7, #4]
   976da:	69db      	ldr	r3, [r3, #28]
   976dc:	4a5d      	ldr	r2, [pc, #372]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976de:	6013      	str	r3, [r2, #0]
					DD_Sensor_status.bicar_feed_back  =  temp_struct.temp_reg_16[0] ;
   976e0:	4b5c      	ldr	r3, [pc, #368]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976e2:	881b      	ldrh	r3, [r3, #0]
   976e4:	b29a      	uxth	r2, r3
   976e6:	4b5c      	ldr	r3, [pc, #368]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976e8:	85da      	strh	r2, [r3, #46]	; 0x2e
					DD_Sensor_status.dummy_data =   temp_struct.temp_reg_16[1] ;
   976ea:	4b5a      	ldr	r3, [pc, #360]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   976ec:	885b      	ldrh	r3, [r3, #2]
   976ee:	b29a      	uxth	r2, r3
   976f0:	4b59      	ldr	r3, [pc, #356]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976f2:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
   976f4:	bf00      	nop
					
					default :
					break;
				}
				break;
   976f6:	e0a8      	b.n	9784a <dd_can_dump_mailbox_data+0x1f6>
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   976f8:	4b57      	ldr	r3, [pc, #348]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   976fa:	785b      	ldrb	r3, [r3, #1]
   976fc:	b2db      	uxtb	r3, r3
   976fe:	3b01      	subs	r3, #1
   97700:	2b05      	cmp	r3, #5
   97702:	f200 80a0 	bhi.w	97846 <dd_can_dump_mailbox_data+0x1f2>
   97706:	a201      	add	r2, pc, #4	; (adr r2, 9770c <dd_can_dump_mailbox_data+0xb8>)
   97708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9770c:	00097725 	.word	0x00097725
   97710:	00097761 	.word	0x00097761
   97714:	0009778f 	.word	0x0009778f
   97718:	000977bd 	.word	0x000977bd
   9771c:	000977eb 	.word	0x000977eb
   97720:	00097819 	.word	0x00097819
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   97724:	4b4b      	ldr	r3, [pc, #300]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97726:	885b      	ldrh	r3, [r3, #2]
   97728:	b29a      	uxth	r2, r3
   9772a:	4b4b      	ldr	r3, [pc, #300]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9772c:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9772e:	687b      	ldr	r3, [r7, #4]
   97730:	69db      	ldr	r3, [r3, #28]
   97732:	4a48      	ldr	r2, [pc, #288]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97734:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   97736:	4b47      	ldr	r3, [pc, #284]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97738:	881b      	ldrh	r3, [r3, #0]
   9773a:	b29a      	uxth	r2, r3
   9773c:	4b46      	ldr	r3, [pc, #280]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9773e:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   97740:	4b44      	ldr	r3, [pc, #272]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97742:	885b      	ldrh	r3, [r3, #2]
   97744:	b29a      	uxth	r2, r3
   97746:	4b44      	ldr	r3, [pc, #272]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97748:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   9774a:	4b44      	ldr	r3, [pc, #272]	; (9785c <dd_can_dump_mailbox_data+0x208>)
   9774c:	2201      	movs	r2, #1
   9774e:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   97750:	4b43      	ldr	r3, [pc, #268]	; (97860 <dd_can_dump_mailbox_data+0x20c>)
   97752:	681a      	ldr	r2, [r3, #0]
   97754:	4b43      	ldr	r3, [pc, #268]	; (97864 <dd_can_dump_mailbox_data+0x210>)
   97756:	681b      	ldr	r3, [r3, #0]
   97758:	1ad3      	subs	r3, r2, r3
   9775a:	4a43      	ldr	r2, [pc, #268]	; (97868 <dd_can_dump_mailbox_data+0x214>)
   9775c:	6013      	str	r3, [r2, #0]
			break;
   9775e:	e073      	b.n	97848 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   97760:	4b3c      	ldr	r3, [pc, #240]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97762:	885b      	ldrh	r3, [r3, #2]
   97764:	b29a      	uxth	r2, r3
   97766:	4b3c      	ldr	r3, [pc, #240]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97768:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9776a:	687b      	ldr	r3, [r7, #4]
   9776c:	69db      	ldr	r3, [r3, #28]
   9776e:	4a39      	ldr	r2, [pc, #228]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97770:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   97772:	4b38      	ldr	r3, [pc, #224]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97774:	881b      	ldrh	r3, [r3, #0]
   97776:	b29a      	uxth	r2, r3
   97778:	4b37      	ldr	r3, [pc, #220]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9777a:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   9777c:	4b35      	ldr	r3, [pc, #212]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   9777e:	885b      	ldrh	r3, [r3, #2]
   97780:	b29a      	uxth	r2, r3
   97782:	4b35      	ldr	r3, [pc, #212]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97784:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   97786:	4b35      	ldr	r3, [pc, #212]	; (9785c <dd_can_dump_mailbox_data+0x208>)
   97788:	2201      	movs	r2, #1
   9778a:	709a      	strb	r2, [r3, #2]
			break;
   9778c:	e05c      	b.n	97848 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.CS1_Tempstatus = temp_struct.temp_reg_16[1];			
   9778e:	4b31      	ldr	r3, [pc, #196]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97790:	885b      	ldrh	r3, [r3, #2]
   97792:	b29a      	uxth	r2, r3
   97794:	4b30      	ldr	r3, [pc, #192]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97796:	821a      	strh	r2, [r3, #16]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97798:	687b      	ldr	r3, [r7, #4]
   9779a:	69db      	ldr	r3, [r3, #28]
   9779c:	4a2d      	ldr	r2, [pc, #180]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   9779e:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS2_Tempstatus =  temp_struct.temp_reg_16[0] ;
   977a0:	4b2c      	ldr	r3, [pc, #176]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977a2:	881b      	ldrh	r3, [r3, #0]
   977a4:	b29a      	uxth	r2, r3
   977a6:	4b2c      	ldr	r3, [pc, #176]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   977a8:	825a      	strh	r2, [r3, #18]
			DD_Sensor_status.Temp3status=   temp_struct.temp_reg_16[1] ;			
   977aa:	4b2a      	ldr	r3, [pc, #168]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977ac:	885b      	ldrh	r3, [r3, #2]
   977ae:	b29a      	uxth	r2, r3
   977b0:	4b29      	ldr	r3, [pc, #164]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   977b2:	81da      	strh	r2, [r3, #14]
			array1[3]	= 1;
   977b4:	4b29      	ldr	r3, [pc, #164]	; (9785c <dd_can_dump_mailbox_data+0x208>)
   977b6:	2201      	movs	r2, #1
   977b8:	70da      	strb	r2, [r3, #3]
			break;
   977ba:	e045      	b.n	97848 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   977bc:	4b25      	ldr	r3, [pc, #148]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977be:	885b      	ldrh	r3, [r3, #2]
   977c0:	b29a      	uxth	r2, r3
   977c2:	4b25      	ldr	r3, [pc, #148]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   977c4:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   977c6:	687b      	ldr	r3, [r7, #4]
   977c8:	69db      	ldr	r3, [r3, #28]
   977ca:	4a22      	ldr	r2, [pc, #136]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977cc:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   977ce:	4b21      	ldr	r3, [pc, #132]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977d0:	881b      	ldrh	r3, [r3, #0]
   977d2:	b29a      	uxth	r2, r3
   977d4:	4b20      	ldr	r3, [pc, #128]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   977d6:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   977d8:	4b1e      	ldr	r3, [pc, #120]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977da:	885b      	ldrh	r3, [r3, #2]
   977dc:	b29a      	uxth	r2, r3
   977de:	4b1e      	ldr	r3, [pc, #120]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   977e0:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   977e2:	4b1e      	ldr	r3, [pc, #120]	; (9785c <dd_can_dump_mailbox_data+0x208>)
   977e4:	2201      	movs	r2, #1
   977e6:	711a      	strb	r2, [r3, #4]
			break;
   977e8:	e02e      	b.n	97848 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   977ea:	4b1a      	ldr	r3, [pc, #104]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977ec:	885b      	ldrh	r3, [r3, #2]
   977ee:	b29a      	uxth	r2, r3
   977f0:	4b19      	ldr	r3, [pc, #100]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   977f2:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   977f4:	687b      	ldr	r3, [r7, #4]
   977f6:	69db      	ldr	r3, [r3, #28]
   977f8:	4a16      	ldr	r2, [pc, #88]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977fa:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   977fc:	4b15      	ldr	r3, [pc, #84]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   977fe:	881b      	ldrh	r3, [r3, #0]
   97800:	b29a      	uxth	r2, r3
   97802:	4b15      	ldr	r3, [pc, #84]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97804:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   97806:	4b13      	ldr	r3, [pc, #76]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97808:	885b      	ldrh	r3, [r3, #2]
   9780a:	b29a      	uxth	r2, r3
   9780c:	4b12      	ldr	r3, [pc, #72]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9780e:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   97810:	4b12      	ldr	r3, [pc, #72]	; (9785c <dd_can_dump_mailbox_data+0x208>)
   97812:	2201      	movs	r2, #1
   97814:	715a      	strb	r2, [r3, #5]
			break;
   97816:	e017      	b.n	97848 <dd_can_dump_mailbox_data+0x1f4>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   97818:	4b0e      	ldr	r3, [pc, #56]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   9781a:	885b      	ldrh	r3, [r3, #2]
   9781c:	b29a      	uxth	r2, r3
   9781e:	4b0e      	ldr	r3, [pc, #56]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97820:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   97822:	687b      	ldr	r3, [r7, #4]
   97824:	69db      	ldr	r3, [r3, #28]
   97826:	4a0b      	ldr	r2, [pc, #44]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97828:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   9782a:	4b0a      	ldr	r3, [pc, #40]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   9782c:	881b      	ldrh	r3, [r3, #0]
   9782e:	b29a      	uxth	r2, r3
   97830:	4b09      	ldr	r3, [pc, #36]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   97832:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   97834:	4b07      	ldr	r3, [pc, #28]	; (97854 <dd_can_dump_mailbox_data+0x200>)
   97836:	885b      	ldrh	r3, [r3, #2]
   97838:	b29a      	uxth	r2, r3
   9783a:	4b07      	ldr	r3, [pc, #28]	; (97858 <dd_can_dump_mailbox_data+0x204>)
   9783c:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   9783e:	4b07      	ldr	r3, [pc, #28]	; (9785c <dd_can_dump_mailbox_data+0x208>)
   97840:	2201      	movs	r2, #1
   97842:	719a      	strb	r2, [r3, #6]
			
			break;
   97844:	e000      	b.n	97848 <dd_can_dump_mailbox_data+0x1f4>
			
			default :
			break;
   97846:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   97848:	bf00      	nop
		
		default:
		break;
	}
}
   9784a:	bf00      	nop
   9784c:	370c      	adds	r7, #12
   9784e:	46bd      	mov	sp, r7
   97850:	bc80      	pop	{r7}
   97852:	4770      	bx	lr
   97854:	20072760 	.word	0x20072760
   97858:	20072764 	.word	0x20072764
   9785c:	20071a44 	.word	0x20071a44
   97860:	20071980 	.word	0x20071980
   97864:	20071a50 	.word	0x20071a50
   97868:	20071a54 	.word	0x20071a54

0009786c <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   9786c:	b480      	push	{r7}
   9786e:	b087      	sub	sp, #28
   97870:	af00      	add	r7, sp, #0
   97872:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   97874:	2300      	movs	r3, #0
   97876:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   97878:	687b      	ldr	r3, [r7, #4]
   9787a:	681b      	ldr	r3, [r3, #0]
   9787c:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   9787e:	687b      	ldr	r3, [r7, #4]
   97880:	689b      	ldr	r3, [r3, #8]
   97882:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   97884:	68fb      	ldr	r3, [r7, #12]
   97886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9788a:	2b00      	cmp	r3, #0
   9788c:	d006      	beq.n	9789c <dd_can_mailbox_read+0x30>
   9788e:	68fb      	ldr	r3, [r7, #12]
   97890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   97894:	2b00      	cmp	r3, #0
   97896:	d001      	beq.n	9789c <dd_can_mailbox_read+0x30>
   97898:	2302      	movs	r3, #2
   9789a:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   9789c:	4a26      	ldr	r2, [pc, #152]	; (97938 <dd_can_mailbox_read+0xcc>)
   9789e:	7cfb      	ldrb	r3, [r7, #19]
   978a0:	015b      	lsls	r3, r3, #5
   978a2:	4413      	add	r3, r2
   978a4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   978a8:	681b      	ldr	r3, [r3, #0]
   978aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   978ae:	687b      	ldr	r3, [r7, #4]
   978b0:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   978b2:	68fb      	ldr	r3, [r7, #12]
   978b4:	0c1b      	lsrs	r3, r3, #16
   978b6:	b2db      	uxtb	r3, r3
   978b8:	f003 030f 	and.w	r3, r3, #15
   978bc:	b2da      	uxtb	r2, r3
   978be:	687b      	ldr	r3, [r7, #4]
   978c0:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   978c2:	4a1d      	ldr	r2, [pc, #116]	; (97938 <dd_can_mailbox_read+0xcc>)
   978c4:	7cfb      	ldrb	r3, [r7, #19]
   978c6:	015b      	lsls	r3, r3, #5
   978c8:	4413      	add	r3, r2
   978ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
   978ce:	681a      	ldr	r2, [r3, #0]
   978d0:	687b      	ldr	r3, [r7, #4]
   978d2:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   978d4:	4a18      	ldr	r2, [pc, #96]	; (97938 <dd_can_mailbox_read+0xcc>)
   978d6:	7cfb      	ldrb	r3, [r7, #19]
   978d8:	015b      	lsls	r3, r3, #5
   978da:	4413      	add	r3, r2
   978dc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   978e0:	681a      	ldr	r2, [r3, #0]
   978e2:	687b      	ldr	r3, [r7, #4]
   978e4:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   978e6:	4a14      	ldr	r2, [pc, #80]	; (97938 <dd_can_mailbox_read+0xcc>)
   978e8:	7cfb      	ldrb	r3, [r7, #19]
   978ea:	015b      	lsls	r3, r3, #5
   978ec:	4413      	add	r3, r2
   978ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
   978f2:	681a      	ldr	r2, [r3, #0]
   978f4:	687b      	ldr	r3, [r7, #4]
   978f6:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   978f8:	687b      	ldr	r3, [r7, #4]
   978fa:	689b      	ldr	r3, [r3, #8]
   978fc:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   978fe:	68fb      	ldr	r3, [r7, #12]
   97900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   97904:	2b00      	cmp	r3, #0
   97906:	d003      	beq.n	97910 <dd_can_mailbox_read+0xa4>
   97908:	697b      	ldr	r3, [r7, #20]
   9790a:	f043 0304 	orr.w	r3, r3, #4
   9790e:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   97910:	4909      	ldr	r1, [pc, #36]	; (97938 <dd_can_mailbox_read+0xcc>)
   97912:	7cfb      	ldrb	r3, [r7, #19]
   97914:	687a      	ldr	r2, [r7, #4]
   97916:	7992      	ldrb	r2, [r2, #6]
   97918:	0412      	lsls	r2, r2, #16
   9791a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   9791e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   97922:	015b      	lsls	r3, r3, #5
   97924:	440b      	add	r3, r1
   97926:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   9792a:	601a      	str	r2, [r3, #0]
	return ul_retval;
   9792c:	697b      	ldr	r3, [r7, #20]
}
   9792e:	4618      	mov	r0, r3
   97930:	371c      	adds	r7, #28
   97932:	46bd      	mov	sp, r7
   97934:	bc80      	pop	{r7}
   97936:	4770      	bx	lr
   97938:	400b4000 	.word	0x400b4000

0009793c <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   9793c:	b480      	push	{r7}
   9793e:	b085      	sub	sp, #20
   97940:	af00      	add	r7, sp, #0
   97942:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   97944:	687b      	ldr	r3, [r7, #4]
   97946:	681b      	ldr	r3, [r3, #0]
   97948:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9794a:	4a2a      	ldr	r2, [pc, #168]	; (979f4 <dd_can_mailbox_write+0xb8>)
   9794c:	7bfb      	ldrb	r3, [r7, #15]
   9794e:	015b      	lsls	r3, r3, #5
   97950:	4413      	add	r3, r2
   97952:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97956:	681a      	ldr	r2, [r3, #0]
   97958:	687b      	ldr	r3, [r7, #4]
   9795a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   9795c:	687b      	ldr	r3, [r7, #4]
   9795e:	689b      	ldr	r3, [r3, #8]
   97960:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   97962:	68bb      	ldr	r3, [r7, #8]
   97964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   97968:	2b00      	cmp	r3, #0
   9796a:	d101      	bne.n	97970 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   9796c:	2301      	movs	r3, #1
   9796e:	e03b      	b.n	979e8 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   97970:	687b      	ldr	r3, [r7, #4]
   97972:	795b      	ldrb	r3, [r3, #5]
   97974:	2b00      	cmp	r3, #0
   97976:	d00b      	beq.n	97990 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   97978:	491e      	ldr	r1, [pc, #120]	; (979f4 <dd_can_mailbox_write+0xb8>)
   9797a:	7bfb      	ldrb	r3, [r7, #15]
   9797c:	687a      	ldr	r2, [r7, #4]
   9797e:	6912      	ldr	r2, [r2, #16]
   97980:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   97984:	015b      	lsls	r3, r3, #5
   97986:	440b      	add	r3, r1
   97988:	f503 7302 	add.w	r3, r3, #520	; 0x208
   9798c:	601a      	str	r2, [r3, #0]
   9798e:	e008      	b.n	979a2 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   97990:	4918      	ldr	r1, [pc, #96]	; (979f4 <dd_can_mailbox_write+0xb8>)
   97992:	7bfb      	ldrb	r3, [r7, #15]
   97994:	687a      	ldr	r2, [r7, #4]
   97996:	6912      	ldr	r2, [r2, #16]
   97998:	015b      	lsls	r3, r3, #5
   9799a:	440b      	add	r3, r1
   9799c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   979a0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   979a2:	4914      	ldr	r1, [pc, #80]	; (979f4 <dd_can_mailbox_write+0xb8>)
   979a4:	7bfb      	ldrb	r3, [r7, #15]
   979a6:	687a      	ldr	r2, [r7, #4]
   979a8:	6992      	ldr	r2, [r2, #24]
   979aa:	015b      	lsls	r3, r3, #5
   979ac:	440b      	add	r3, r1
   979ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
   979b2:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   979b4:	687b      	ldr	r3, [r7, #4]
   979b6:	799b      	ldrb	r3, [r3, #6]
   979b8:	2b04      	cmp	r3, #4
   979ba:	d908      	bls.n	979ce <dd_can_mailbox_write+0x92>
   979bc:	490d      	ldr	r1, [pc, #52]	; (979f4 <dd_can_mailbox_write+0xb8>)
   979be:	7bfb      	ldrb	r3, [r7, #15]
   979c0:	687a      	ldr	r2, [r7, #4]
   979c2:	69d2      	ldr	r2, [r2, #28]
   979c4:	015b      	lsls	r3, r3, #5
   979c6:	440b      	add	r3, r1
   979c8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   979cc:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   979ce:	4909      	ldr	r1, [pc, #36]	; (979f4 <dd_can_mailbox_write+0xb8>)
   979d0:	7bfb      	ldrb	r3, [r7, #15]
   979d2:	687a      	ldr	r2, [r7, #4]
   979d4:	7992      	ldrb	r2, [r2, #6]
   979d6:	0412      	lsls	r2, r2, #16
   979d8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   979dc:	015b      	lsls	r3, r3, #5
   979de:	440b      	add	r3, r1
   979e0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   979e4:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   979e6:	2300      	movs	r3, #0
}
   979e8:	4618      	mov	r0, r3
   979ea:	3714      	adds	r7, #20
   979ec:	46bd      	mov	sp, r7
   979ee:	bc80      	pop	{r7}
   979f0:	4770      	bx	lr
   979f2:	bf00      	nop
   979f4:	400b4000 	.word	0x400b4000

000979f8 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   979f8:	b480      	push	{r7}
   979fa:	b085      	sub	sp, #20
   979fc:	af00      	add	r7, sp, #0
   979fe:	4603      	mov	r3, r0
   97a00:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   97a02:	4b07      	ldr	r3, [pc, #28]	; (97a20 <dd_can_global_send_transfer_cmd+0x28>)
   97a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   97a06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   97a0a:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   97a0c:	4904      	ldr	r1, [pc, #16]	; (97a20 <dd_can_global_send_transfer_cmd+0x28>)
   97a0e:	79fa      	ldrb	r2, [r7, #7]
   97a10:	68fb      	ldr	r3, [r7, #12]
   97a12:	4313      	orrs	r3, r2
   97a14:	624b      	str	r3, [r1, #36]	; 0x24
}
   97a16:	bf00      	nop
   97a18:	3714      	adds	r7, #20
   97a1a:	46bd      	mov	sp, r7
   97a1c:	bc80      	pop	{r7}
   97a1e:	4770      	bx	lr
   97a20:	400b4000 	.word	0x400b4000

00097a24 <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   97a24:	b480      	push	{r7}
   97a26:	b085      	sub	sp, #20
   97a28:	af00      	add	r7, sp, #0
   97a2a:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   97a2c:	687b      	ldr	r3, [r7, #4]
   97a2e:	681b      	ldr	r3, [r3, #0]
   97a30:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   97a32:	687b      	ldr	r3, [r7, #4]
   97a34:	791b      	ldrb	r3, [r3, #4]
   97a36:	2b00      	cmp	r3, #0
   97a38:	d12f      	bne.n	97a9a <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   97a3a:	4a35      	ldr	r2, [pc, #212]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a3c:	7bfb      	ldrb	r3, [r7, #15]
   97a3e:	3310      	adds	r3, #16
   97a40:	015b      	lsls	r3, r3, #5
   97a42:	4413      	add	r3, r2
   97a44:	2200      	movs	r2, #0
   97a46:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   97a48:	4a31      	ldr	r2, [pc, #196]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a4a:	7bfb      	ldrb	r3, [r7, #15]
   97a4c:	3310      	adds	r3, #16
   97a4e:	015b      	lsls	r3, r3, #5
   97a50:	4413      	add	r3, r2
   97a52:	3304      	adds	r3, #4
   97a54:	2200      	movs	r2, #0
   97a56:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   97a58:	4a2d      	ldr	r2, [pc, #180]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a5a:	7bfb      	ldrb	r3, [r7, #15]
   97a5c:	015b      	lsls	r3, r3, #5
   97a5e:	4413      	add	r3, r2
   97a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
   97a64:	2200      	movs	r2, #0
   97a66:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   97a68:	4a29      	ldr	r2, [pc, #164]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a6a:	7bfb      	ldrb	r3, [r7, #15]
   97a6c:	015b      	lsls	r3, r3, #5
   97a6e:	4413      	add	r3, r2
   97a70:	f503 7305 	add.w	r3, r3, #532	; 0x214
   97a74:	2200      	movs	r2, #0
   97a76:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   97a78:	4a25      	ldr	r2, [pc, #148]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a7a:	7bfb      	ldrb	r3, [r7, #15]
   97a7c:	015b      	lsls	r3, r3, #5
   97a7e:	4413      	add	r3, r2
   97a80:	f503 7306 	add.w	r3, r3, #536	; 0x218
   97a84:	2200      	movs	r2, #0
   97a86:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   97a88:	4a21      	ldr	r2, [pc, #132]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a8a:	7bfb      	ldrb	r3, [r7, #15]
   97a8c:	015b      	lsls	r3, r3, #5
   97a8e:	4413      	add	r3, r2
   97a90:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   97a94:	2200      	movs	r2, #0
   97a96:	601a      	str	r2, [r3, #0]
		return;
   97a98:	e035      	b.n	97b06 <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   97a9a:	481d      	ldr	r0, [pc, #116]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97a9c:	7bfb      	ldrb	r3, [r7, #15]
   97a9e:	491c      	ldr	r1, [pc, #112]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97aa0:	7bfa      	ldrb	r2, [r7, #15]
   97aa2:	3210      	adds	r2, #16
   97aa4:	0152      	lsls	r2, r2, #5
   97aa6:	440a      	add	r2, r1
   97aa8:	6812      	ldr	r2, [r2, #0]
   97aaa:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   97aae:	6879      	ldr	r1, [r7, #4]
   97ab0:	79c9      	ldrb	r1, [r1, #7]
   97ab2:	0409      	lsls	r1, r1, #16
   97ab4:	430a      	orrs	r2, r1
   97ab6:	3310      	adds	r3, #16
   97ab8:	015b      	lsls	r3, r3, #5
   97aba:	4403      	add	r3, r0
   97abc:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   97abe:	4914      	ldr	r1, [pc, #80]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97ac0:	7bfb      	ldrb	r3, [r7, #15]
   97ac2:	687a      	ldr	r2, [r7, #4]
   97ac4:	68d2      	ldr	r2, [r2, #12]
   97ac6:	3310      	adds	r3, #16
   97ac8:	015b      	lsls	r3, r3, #5
   97aca:	440b      	add	r3, r1
   97acc:	3304      	adds	r3, #4
   97ace:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   97ad0:	490f      	ldr	r1, [pc, #60]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97ad2:	7bfb      	ldrb	r3, [r7, #15]
   97ad4:	687a      	ldr	r2, [r7, #4]
   97ad6:	6912      	ldr	r2, [r2, #16]
   97ad8:	015b      	lsls	r3, r3, #5
   97ada:	440b      	add	r3, r1
   97adc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   97ae0:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   97ae2:	480b      	ldr	r0, [pc, #44]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97ae4:	7bfb      	ldrb	r3, [r7, #15]
   97ae6:	490a      	ldr	r1, [pc, #40]	; (97b10 <dd_can_mailbox_conf+0xec>)
   97ae8:	7bfa      	ldrb	r2, [r7, #15]
   97aea:	3210      	adds	r2, #16
   97aec:	0152      	lsls	r2, r2, #5
   97aee:	440a      	add	r2, r1
   97af0:	6812      	ldr	r2, [r2, #0]
   97af2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   97af6:	6879      	ldr	r1, [r7, #4]
   97af8:	7909      	ldrb	r1, [r1, #4]
   97afa:	0609      	lsls	r1, r1, #24
   97afc:	430a      	orrs	r2, r1
   97afe:	3310      	adds	r3, #16
   97b00:	015b      	lsls	r3, r3, #5
   97b02:	4403      	add	r3, r0
   97b04:	601a      	str	r2, [r3, #0]
}
   97b06:	3714      	adds	r7, #20
   97b08:	46bd      	mov	sp, r7
   97b0a:	bc80      	pop	{r7}
   97b0c:	4770      	bx	lr
   97b0e:	bf00      	nop
   97b10:	400b4000 	.word	0x400b4000

00097b14 <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint16_t rc_count)
{
   97b14:	b580      	push	{r7, lr}
   97b16:	b084      	sub	sp, #16
   97b18:	af00      	add	r7, sp, #0
   97b1a:	4603      	mov	r3, r0
   97b1c:	460a      	mov	r2, r1
   97b1e:	80fb      	strh	r3, [r7, #6]
   97b20:	4613      	mov	r3, r2
   97b22:	80bb      	strh	r3, [r7, #4]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   97b24:	88fb      	ldrh	r3, [r7, #6]
   97b26:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   97b28:	88ba      	ldrh	r2, [r7, #4]
   97b2a:	7bfb      	ldrb	r3, [r7, #15]
   97b2c:	4619      	mov	r1, r3
   97b2e:	2002      	movs	r0, #2
   97b30:	4b04      	ldr	r3, [pc, #16]	; (97b44 <DD_CAN_WRITE_PROPO+0x30>)
   97b32:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   97b34:	2001      	movs	r0, #1
   97b36:	4b04      	ldr	r3, [pc, #16]	; (97b48 <DD_CAN_WRITE_PROPO+0x34>)
   97b38:	4798      	blx	r3

}
   97b3a:	bf00      	nop
   97b3c:	3710      	adds	r7, #16
   97b3e:	46bd      	mov	sp, r7
   97b40:	bd80      	pop	{r7, pc}
   97b42:	bf00      	nop
   97b44:	000975b1 	.word	0x000975b1
   97b48:	000979f9 	.word	0x000979f9

00097b4c <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   97b4c:	b580      	push	{r7, lr}
   97b4e:	b084      	sub	sp, #16
   97b50:	af00      	add	r7, sp, #0
   97b52:	4603      	mov	r3, r0
   97b54:	460a      	mov	r2, r1
   97b56:	80fb      	strh	r3, [r7, #6]
   97b58:	4613      	mov	r3, r2
   97b5a:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   97b5c:	88fb      	ldrh	r3, [r7, #6]
   97b5e:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   97b60:	4b09      	ldr	r3, [pc, #36]	; (97b88 <DD_CAN_WRITE_HEMO+0x3c>)
   97b62:	f04f 32ff 	mov.w	r2, #4294967295
   97b66:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   97b68:	88ba      	ldrh	r2, [r7, #4]
   97b6a:	7bfb      	ldrb	r3, [r7, #15]
   97b6c:	4619      	mov	r1, r3
   97b6e:	2001      	movs	r0, #1
   97b70:	4b06      	ldr	r3, [pc, #24]	; (97b8c <DD_CAN_WRITE_HEMO+0x40>)
   97b72:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   97b74:	2001      	movs	r0, #1
   97b76:	4b06      	ldr	r3, [pc, #24]	; (97b90 <DD_CAN_WRITE_HEMO+0x44>)
   97b78:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   97b7a:	4b03      	ldr	r3, [pc, #12]	; (97b88 <DD_CAN_WRITE_HEMO+0x3c>)
   97b7c:	2202      	movs	r2, #2
   97b7e:	605a      	str	r2, [r3, #4]
}
   97b80:	bf00      	nop
   97b82:	3710      	adds	r7, #16
   97b84:	46bd      	mov	sp, r7
   97b86:	bd80      	pop	{r7, pc}
   97b88:	400b4000 	.word	0x400b4000
   97b8c:	000975b1 	.word	0x000975b1
   97b90:	000979f9 	.word	0x000979f9

00097b94 <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   97b94:	b580      	push	{r7, lr}
   97b96:	b084      	sub	sp, #16
   97b98:	af00      	add	r7, sp, #0
   97b9a:	4603      	mov	r3, r0
   97b9c:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   97b9e:	88fb      	ldrh	r3, [r7, #6]
   97ba0:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   97ba2:	4b0a      	ldr	r3, [pc, #40]	; (97bcc <DD_CAN_WRITE_SENSOR+0x38>)
   97ba4:	f04f 32ff 	mov.w	r2, #4294967295
   97ba8:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   97baa:	7bfb      	ldrb	r3, [r7, #15]
   97bac:	2200      	movs	r2, #0
   97bae:	4619      	mov	r1, r3
   97bb0:	2003      	movs	r0, #3
   97bb2:	4b07      	ldr	r3, [pc, #28]	; (97bd0 <DD_CAN_WRITE_SENSOR+0x3c>)
   97bb4:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   97bb6:	2001      	movs	r0, #1
   97bb8:	4b06      	ldr	r3, [pc, #24]	; (97bd4 <DD_CAN_WRITE_SENSOR+0x40>)
   97bba:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   97bbc:	4b03      	ldr	r3, [pc, #12]	; (97bcc <DD_CAN_WRITE_SENSOR+0x38>)
   97bbe:	2202      	movs	r2, #2
   97bc0:	605a      	str	r2, [r3, #4]
}
   97bc2:	bf00      	nop
   97bc4:	3710      	adds	r7, #16
   97bc6:	46bd      	mov	sp, r7
   97bc8:	bd80      	pop	{r7, pc}
   97bca:	bf00      	nop
   97bcc:	400b4000 	.word	0x400b4000
   97bd0:	000975b1 	.word	0x000975b1
   97bd4:	000979f9 	.word	0x000979f9

00097bd8 <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   97bd8:	b580      	push	{r7, lr}
   97bda:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   97bdc:	2100      	movs	r1, #0
   97bde:	2027      	movs	r0, #39	; 0x27
   97be0:	4b01      	ldr	r3, [pc, #4]	; (97be8 <DD_CAN_READ_APTVPT+0x10>)
   97be2:	4798      	blx	r3
	
}
   97be4:	bf00      	nop
   97be6:	bd80      	pop	{r7, pc}
   97be8:	00097b4d 	.word	0x00097b4d

00097bec <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   97bec:	b580      	push	{r7, lr}
   97bee:	b08e      	sub	sp, #56	; 0x38
   97bf0:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   97bf2:	4b4f      	ldr	r3, [pc, #316]	; (97d30 <DD_INIT_CAN+0x144>)
   97bf4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   97bf6:	2378      	movs	r3, #120	; 0x78
   97bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   97bfc:	4b4d      	ldr	r3, [pc, #308]	; (97d34 <DD_INIT_CAN+0x148>)
   97bfe:	4a4e      	ldr	r2, [pc, #312]	; (97d38 <DD_INIT_CAN+0x14c>)
   97c00:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   97c04:	4a4b      	ldr	r2, [pc, #300]	; (97d34 <DD_INIT_CAN+0x148>)
   97c06:	4b4b      	ldr	r3, [pc, #300]	; (97d34 <DD_INIT_CAN+0x148>)
   97c08:	681b      	ldr	r3, [r3, #0]
   97c0a:	f023 0301 	bic.w	r3, r3, #1
   97c0e:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   97c10:	4948      	ldr	r1, [pc, #288]	; (97d34 <DD_INIT_CAN+0x148>)
   97c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   97c14:	78db      	ldrb	r3, [r3, #3]
   97c16:	3b01      	subs	r3, #1
   97c18:	f003 0207 	and.w	r2, r3, #7
   97c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   97c1e:	789b      	ldrb	r3, [r3, #2]
   97c20:	3b01      	subs	r3, #1
   97c22:	011b      	lsls	r3, r3, #4
   97c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
   97c28:	431a      	orrs	r2, r3
   97c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   97c2c:	785b      	ldrb	r3, [r3, #1]
   97c2e:	3b01      	subs	r3, #1
   97c30:	021b      	lsls	r3, r3, #8
   97c32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   97c36:	431a      	orrs	r2, r3
   97c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   97c3a:	791b      	ldrb	r3, [r3, #4]
   97c3c:	3b01      	subs	r3, #1
   97c3e:	031b      	lsls	r3, r3, #12
   97c40:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   97c44:	431a      	orrs	r2, r3
   97c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   97c4a:	3b01      	subs	r3, #1
   97c4c:	041b      	lsls	r3, r3, #16
   97c4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   97c52:	4313      	orrs	r3, r2
   97c54:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   97c56:	2300      	movs	r3, #0
   97c58:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   97c5a:	2300      	movs	r3, #0
   97c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   97c60:	e00b      	b.n	97c7a <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   97c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   97c66:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   97c68:	1d3b      	adds	r3, r7, #4
   97c6a:	4618      	mov	r0, r3
   97c6c:	4b33      	ldr	r3, [pc, #204]	; (97d3c <DD_INIT_CAN+0x150>)
   97c6e:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   97c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   97c74:	3301      	adds	r3, #1
   97c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   97c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   97c7e:	2b07      	cmp	r3, #7
   97c80:	d9ef      	bls.n	97c62 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   97c82:	4a2c      	ldr	r2, [pc, #176]	; (97d34 <DD_INIT_CAN+0x148>)
   97c84:	4b2b      	ldr	r3, [pc, #172]	; (97d34 <DD_INIT_CAN+0x148>)
   97c86:	681b      	ldr	r3, [r3, #0]
   97c88:	f043 0301 	orr.w	r3, r3, #1
   97c8c:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   97c8e:	2300      	movs	r3, #0
   97c90:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   97c92:	2300      	movs	r3, #0
   97c94:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   97c96:	e005      	b.n	97ca4 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   97c98:	4b26      	ldr	r3, [pc, #152]	; (97d34 <DD_INIT_CAN+0x148>)
   97c9a:	691b      	ldr	r3, [r3, #16]
   97c9c:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   97c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   97ca0:	3301      	adds	r3, #1
   97ca2:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   97ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   97ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   97caa:	2b00      	cmp	r3, #0
   97cac:	d103      	bne.n	97cb6 <DD_INIT_CAN+0xca>
   97cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   97cb0:	4a23      	ldr	r2, [pc, #140]	; (97d40 <DD_INIT_CAN+0x154>)
   97cb2:	4293      	cmp	r3, r2
   97cb4:	d9f0      	bls.n	97c98 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   97cb6:	4b23      	ldr	r3, [pc, #140]	; (97d44 <DD_INIT_CAN+0x158>)
   97cb8:	2201      	movs	r2, #1
   97cba:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   97cbc:	4b21      	ldr	r3, [pc, #132]	; (97d44 <DD_INIT_CAN+0x158>)
   97cbe:	2201      	movs	r2, #1
   97cc0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   97cc2:	4b20      	ldr	r3, [pc, #128]	; (97d44 <DD_INIT_CAN+0x158>)
   97cc4:	2200      	movs	r2, #0
   97cc6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   97cc8:	4b1e      	ldr	r3, [pc, #120]	; (97d44 <DD_INIT_CAN+0x158>)
   97cca:	2200      	movs	r2, #0
   97ccc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   97cce:	4b1d      	ldr	r3, [pc, #116]	; (97d44 <DD_INIT_CAN+0x158>)
   97cd0:	4a1d      	ldr	r2, [pc, #116]	; (97d48 <DD_INIT_CAN+0x15c>)
   97cd2:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   97cd4:	4b1b      	ldr	r3, [pc, #108]	; (97d44 <DD_INIT_CAN+0x158>)
   97cd6:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   97cda:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   97cdc:	4819      	ldr	r0, [pc, #100]	; (97d44 <DD_INIT_CAN+0x158>)
   97cde:	4b17      	ldr	r3, [pc, #92]	; (97d3c <DD_INIT_CAN+0x150>)
   97ce0:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   97ce2:	4b18      	ldr	r3, [pc, #96]	; (97d44 <DD_INIT_CAN+0x158>)
   97ce4:	2200      	movs	r2, #0
   97ce6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   97ce8:	4b16      	ldr	r3, [pc, #88]	; (97d44 <DD_INIT_CAN+0x158>)
   97cea:	2203      	movs	r2, #3
   97cec:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   97cee:	4b15      	ldr	r3, [pc, #84]	; (97d44 <DD_INIT_CAN+0x158>)
   97cf0:	2201      	movs	r2, #1
   97cf2:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   97cf4:	4b13      	ldr	r3, [pc, #76]	; (97d44 <DD_INIT_CAN+0x158>)
   97cf6:	2200      	movs	r2, #0
   97cf8:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   97cfa:	4b12      	ldr	r3, [pc, #72]	; (97d44 <DD_INIT_CAN+0x158>)
   97cfc:	4a12      	ldr	r2, [pc, #72]	; (97d48 <DD_INIT_CAN+0x15c>)
   97cfe:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   97d00:	4b10      	ldr	r3, [pc, #64]	; (97d44 <DD_INIT_CAN+0x158>)
   97d02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   97d06:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   97d08:	480e      	ldr	r0, [pc, #56]	; (97d44 <DD_INIT_CAN+0x158>)
   97d0a:	4b0c      	ldr	r3, [pc, #48]	; (97d3c <DD_INIT_CAN+0x150>)
   97d0c:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   97d0e:	202b      	movs	r0, #43	; 0x2b
   97d10:	4b0e      	ldr	r3, [pc, #56]	; (97d4c <DD_INIT_CAN+0x160>)
   97d12:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   97d14:	4b07      	ldr	r3, [pc, #28]	; (97d34 <DD_INIT_CAN+0x148>)
   97d16:	2202      	movs	r2, #2
   97d18:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   97d1a:	2103      	movs	r1, #3
   97d1c:	480c      	ldr	r0, [pc, #48]	; (97d50 <DD_INIT_CAN+0x164>)
   97d1e:	4b0d      	ldr	r3, [pc, #52]	; (97d54 <DD_INIT_CAN+0x168>)
   97d20:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   97d22:	480b      	ldr	r0, [pc, #44]	; (97d50 <DD_INIT_CAN+0x164>)
   97d24:	4b0c      	ldr	r3, [pc, #48]	; (97d58 <DD_INIT_CAN+0x16c>)
   97d26:	4798      	blx	r3
		
		
	}
   97d28:	bf00      	nop
   97d2a:	3738      	adds	r7, #56	; 0x38
   97d2c:	46bd      	mov	sp, r7
   97d2e:	bd80      	pop	{r7, pc}
   97d30:	000aa328 	.word	0x000aa328
   97d34:	400b4000 	.word	0x400b4000
   97d38:	43414e00 	.word	0x43414e00
   97d3c:	00097a25 	.word	0x00097a25
   97d40:	0001869f 	.word	0x0001869f
   97d44:	20072798 	.word	0x20072798
   97d48:	1ffc0000 	.word	0x1ffc0000
   97d4c:	0009746d 	.word	0x0009746d
   97d50:	200727b8 	.word	0x200727b8
   97d54:	00097509 	.word	0x00097509
   97d58:	00097525 	.word	0x00097525

00097d5c <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   97d5c:	b480      	push	{r7}
   97d5e:	b085      	sub	sp, #20
   97d60:	af00      	add	r7, sp, #0
   97d62:	4603      	mov	r3, r0
   97d64:	71fb      	strb	r3, [r7, #7]
	uint16_t SENSOR_VAL;
	uint8_t channel = 0;
   97d66:	2300      	movs	r3, #0
   97d68:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   97d6a:	79fb      	ldrb	r3, [r7, #7]
   97d6c:	3b01      	subs	r3, #1
   97d6e:	2b15      	cmp	r3, #21
   97d70:	f200 8088 	bhi.w	97e84 <DD_CAN_READ_SENSORS+0x128>
   97d74:	a201      	add	r2, pc, #4	; (adr r2, 97d7c <DD_CAN_READ_SENSORS+0x20>)
   97d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97d7a:	bf00      	nop
   97d7c:	00097dd5 	.word	0x00097dd5
   97d80:	00097ddd 	.word	0x00097ddd
   97d84:	00097de5 	.word	0x00097de5
   97d88:	00097ded 	.word	0x00097ded
   97d8c:	00097df5 	.word	0x00097df5
   97d90:	00097dfd 	.word	0x00097dfd
   97d94:	00097e05 	.word	0x00097e05
   97d98:	00097e0d 	.word	0x00097e0d
   97d9c:	00097e15 	.word	0x00097e15
   97da0:	00097e1d 	.word	0x00097e1d
   97da4:	00097e25 	.word	0x00097e25
   97da8:	00097e2d 	.word	0x00097e2d
   97dac:	00097e35 	.word	0x00097e35
   97db0:	00097e3d 	.word	0x00097e3d
   97db4:	00097e45 	.word	0x00097e45
   97db8:	00097e4d 	.word	0x00097e4d
   97dbc:	00097e55 	.word	0x00097e55
   97dc0:	00097e5d 	.word	0x00097e5d
   97dc4:	00097e65 	.word	0x00097e65
   97dc8:	00097e6d 	.word	0x00097e6d
   97dcc:	00097e75 	.word	0x00097e75
   97dd0:	00097e7d 	.word	0x00097e7d
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   97dd4:	4b2e      	ldr	r3, [pc, #184]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97dd6:	885b      	ldrh	r3, [r3, #2]
   97dd8:	81fb      	strh	r3, [r7, #14]
		break;
   97dda:	e053      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   97ddc:	4b2c      	ldr	r3, [pc, #176]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97dde:	889b      	ldrh	r3, [r3, #4]
   97de0:	81fb      	strh	r3, [r7, #14]
		break;
   97de2:	e04f      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   97de4:	4b2a      	ldr	r3, [pc, #168]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97de6:	88db      	ldrh	r3, [r3, #6]
   97de8:	81fb      	strh	r3, [r7, #14]
		break;
   97dea:	e04b      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   97dec:	4b28      	ldr	r3, [pc, #160]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97dee:	891b      	ldrh	r3, [r3, #8]
   97df0:	81fb      	strh	r3, [r7, #14]
		break;
   97df2:	e047      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   97df4:	4b26      	ldr	r3, [pc, #152]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97df6:	895b      	ldrh	r3, [r3, #10]
   97df8:	81fb      	strh	r3, [r7, #14]
		
		break;
   97dfa:	e043      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   97dfc:	4b24      	ldr	r3, [pc, #144]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97dfe:	899b      	ldrh	r3, [r3, #12]
   97e00:	81fb      	strh	r3, [r7, #14]
		break;
   97e02:	e03f      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.Temp3status;
   97e04:	4b22      	ldr	r3, [pc, #136]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e06:	89db      	ldrh	r3, [r3, #14]
   97e08:	81fb      	strh	r3, [r7, #14]
		break;
   97e0a:	e03b      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   97e0c:	4b20      	ldr	r3, [pc, #128]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e0e:	8a1b      	ldrh	r3, [r3, #16]
   97e10:	81fb      	strh	r3, [r7, #14]
		break;
   97e12:	e037      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   97e14:	4b1e      	ldr	r3, [pc, #120]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e16:	8a5b      	ldrh	r3, [r3, #18]
   97e18:	81fb      	strh	r3, [r7, #14]
		break;
   97e1a:	e033      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   97e1c:	4b1c      	ldr	r3, [pc, #112]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e1e:	8a9b      	ldrh	r3, [r3, #20]
   97e20:	81fb      	strh	r3, [r7, #14]
		break;
   97e22:	e02f      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   97e24:	4b1a      	ldr	r3, [pc, #104]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e26:	8adb      	ldrh	r3, [r3, #22]
   97e28:	81fb      	strh	r3, [r7, #14]
		break;
   97e2a:	e02b      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   97e2c:	4b18      	ldr	r3, [pc, #96]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e2e:	8b1b      	ldrh	r3, [r3, #24]
   97e30:	81fb      	strh	r3, [r7, #14]
		break;
   97e32:	e027      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   97e34:	4b16      	ldr	r3, [pc, #88]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e36:	8b5b      	ldrh	r3, [r3, #26]
   97e38:	81fb      	strh	r3, [r7, #14]
		break;
   97e3a:	e023      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   97e3c:	4b14      	ldr	r3, [pc, #80]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e3e:	8b9b      	ldrh	r3, [r3, #28]
   97e40:	81fb      	strh	r3, [r7, #14]
		break;
   97e42:	e01f      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   97e44:	4b12      	ldr	r3, [pc, #72]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e46:	8bdb      	ldrh	r3, [r3, #30]
   97e48:	81fb      	strh	r3, [r7, #14]
		break;
   97e4a:	e01b      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   97e4c:	4b10      	ldr	r3, [pc, #64]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e4e:	8c1b      	ldrh	r3, [r3, #32]
   97e50:	81fb      	strh	r3, [r7, #14]
		break;
   97e52:	e017      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   97e54:	4b0e      	ldr	r3, [pc, #56]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e56:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   97e58:	81fb      	strh	r3, [r7, #14]
		break;
   97e5a:	e013      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   97e5c:	4b0c      	ldr	r3, [pc, #48]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   97e60:	81fb      	strh	r3, [r7, #14]
		break;
   97e62:	e00f      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   97e64:	4b0a      	ldr	r3, [pc, #40]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   97e68:	81fb      	strh	r3, [r7, #14]
		break;
   97e6a:	e00b      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   97e6c:	4b08      	ldr	r3, [pc, #32]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   97e70:	81fb      	strh	r3, [r7, #14]
		break;
   97e72:	e007      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		case DD_CAN_SENSOR_ID21:
		 SENSOR_VAL=DD_Sensor_status.acid_feed_back;
   97e74:	4b06      	ldr	r3, [pc, #24]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   97e78:	81fb      	strh	r3, [r7, #14]
		 break;
   97e7a:	e003      	b.n	97e84 <DD_CAN_READ_SENSORS+0x128>
		 case DD_CAN_SENSOR_ID22:
		 SENSOR_VAL=DD_Sensor_status.bicar_feed_back;
   97e7c:	4b04      	ldr	r3, [pc, #16]	; (97e90 <DD_CAN_READ_SENSORS+0x134>)
   97e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   97e80:	81fb      	strh	r3, [r7, #14]
		 break;
   97e82:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   97e84:	89fb      	ldrh	r3, [r7, #14]
	
}
   97e86:	4618      	mov	r0, r3
   97e88:	3714      	adds	r7, #20
   97e8a:	46bd      	mov	sp, r7
   97e8c:	bc80      	pop	{r7}
   97e8e:	4770      	bx	lr
   97e90:	20072764 	.word	0x20072764

00097e94 <DD_INIT_CLOCK>:
// void check_interrupt(void);
// extern uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id);
// extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id);
// static chk_flag_toggle =0;
void DD_INIT_CLOCK()
{
   97e94:	b580      	push	{r7, lr}
   97e96:	af00      	add	r7, sp, #0
	
	sysclk_init();
   97e98:	4b07      	ldr	r3, [pc, #28]	; (97eb8 <DD_INIT_CLOCK+0x24>)
   97e9a:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   97e9c:	4b07      	ldr	r3, [pc, #28]	; (97ebc <DD_INIT_CLOCK+0x28>)
   97e9e:	4a08      	ldr	r2, [pc, #32]	; (97ec0 <DD_INIT_CLOCK+0x2c>)
   97ea0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   97ea4:	4b05      	ldr	r3, [pc, #20]	; (97ebc <DD_INIT_CLOCK+0x28>)
   97ea6:	4a07      	ldr	r2, [pc, #28]	; (97ec4 <DD_INIT_CLOCK+0x30>)
   97ea8:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   97eaa:	4b04      	ldr	r3, [pc, #16]	; (97ebc <DD_INIT_CLOCK+0x28>)
   97eac:	f640 023f 	movw	r2, #2111	; 0x83f
   97eb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
}
   97eb4:	bf00      	nop
   97eb6:	bd80      	pop	{r7, pc}
   97eb8:	0008044d 	.word	0x0008044d
   97ebc:	400e0600 	.word	0x400e0600
   97ec0:	504d4300 	.word	0x504d4300
   97ec4:	f8007900 	.word	0xf8007900

00097ec8 <DD_INIT_PIO>:
#include "cl_consolecontroller.h"
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );


void DD_INIT_PIO()
{
   97ec8:	b580      	push	{r7, lr}
   97eca:	af00      	add	r7, sp, #0
	
	
PIOA->PIO_WPMR = 0x50494F00;			//PIOA->PIO_WPMR = 0x50494F00;
   97ecc:	4b3f      	ldr	r3, [pc, #252]	; (97fcc <DD_INIT_PIO+0x104>)
   97ece:	4a40      	ldr	r2, [pc, #256]	; (97fd0 <DD_INIT_PIO+0x108>)
   97ed0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//PIOA->PIO_PER =  0x21C9ECFC;			//PIOA->PIO_PER  = 0x01C9ECF0;
PIOA->PIO_PER =  0x21C9ECFC;
   97ed4:	4b3d      	ldr	r3, [pc, #244]	; (97fcc <DD_INIT_PIO+0x104>)
   97ed6:	4a3f      	ldr	r2, [pc, #252]	; (97fd4 <DD_INIT_PIO+0x10c>)
   97ed8:	601a      	str	r2, [r3, #0]
PIOA->PIO_OER =  0x20F0B86C;			//PIOA->PIO_OER  = 0x00C0AC70;
   97eda:	4b3c      	ldr	r3, [pc, #240]	; (97fcc <DD_INIT_PIO+0x104>)
   97edc:	4a3e      	ldr	r2, [pc, #248]	; (97fd8 <DD_INIT_PIO+0x110>)
   97ede:	611a      	str	r2, [r3, #16]
PIOA->PIO_ODR =  0x01094494;			//PIOA->PIO_ODR  = 0x01094080;
   97ee0:	4b3a      	ldr	r3, [pc, #232]	; (97fcc <DD_INIT_PIO+0x104>)
   97ee2:	4a3e      	ldr	r2, [pc, #248]	; (97fdc <DD_INIT_PIO+0x114>)
   97ee4:	615a      	str	r2, [r3, #20]
PIOA->PIO_PDR =  0x1E361303;			//PIOA->PIO_PDR =  0x00060000;
   97ee6:	4b39      	ldr	r3, [pc, #228]	; (97fcc <DD_INIT_PIO+0x104>)
   97ee8:	4a3d      	ldr	r2, [pc, #244]	; (97fe0 <DD_INIT_PIO+0x118>)
   97eea:	605a      	str	r2, [r3, #4]
PIOA->PIO_PUER = 0x00060000;
   97eec:	4b37      	ldr	r3, [pc, #220]	; (97fcc <DD_INIT_PIO+0x104>)
   97eee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   97ef2:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_ABSR = 0x00391000;
   97ef4:	4b35      	ldr	r3, [pc, #212]	; (97fcc <DD_INIT_PIO+0x104>)
   97ef6:	4a3b      	ldr	r2, [pc, #236]	; (97fe4 <DD_INIT_PIO+0x11c>)
   97ef8:	671a      	str	r2, [r3, #112]	; 0x70
PIOA->PIO_DIFSR =0x00004000;			 //Blood pump on off debouncing PA14 //PIOA->PIO_DIFSR = 0x08000001;
   97efa:	4b34      	ldr	r3, [pc, #208]	; (97fcc <DD_INIT_PIO+0x104>)
   97efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   97f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 PIOA->PIO_SODR = 1<<2;
   97f04:	4b31      	ldr	r3, [pc, #196]	; (97fcc <DD_INIT_PIO+0x104>)
   97f06:	2204      	movs	r2, #4
   97f08:	631a      	str	r2, [r3, #48]	; 0x30
 PIOA->PIO_PER = 1<<2;
   97f0a:	4b30      	ldr	r3, [pc, #192]	; (97fcc <DD_INIT_PIO+0x104>)
   97f0c:	2204      	movs	r2, #4
   97f0e:	601a      	str	r2, [r3, #0]
 PIOA->PIO_OER = 1<<2;
   97f10:	4b2e      	ldr	r3, [pc, #184]	; (97fcc <DD_INIT_PIO+0x104>)
   97f12:	2204      	movs	r2, #4
   97f14:	611a      	str	r2, [r3, #16]

//PIOA->PIO_CODR = 0x0600A800;
//PIOA->PIO_SODR = 0x00004000;

PIOB->PIO_WPMR = 0x50494F00;			//PIOB->PIO_WPMR = 0x50494F00;
   97f16:	4b34      	ldr	r3, [pc, #208]	; (97fe8 <DD_INIT_PIO+0x120>)
   97f18:	4a2d      	ldr	r2, [pc, #180]	; (97fd0 <DD_INIT_PIO+0x108>)
   97f1a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOB->PIO_PER  = 0x0FE7F700;			//PIOB->PIO_PER  = 0x0B45D300;     PIO enable Register
   97f1e:	4b32      	ldr	r3, [pc, #200]	; (97fe8 <DD_INIT_PIO+0x120>)
   97f20:	4a32      	ldr	r2, [pc, #200]	; (97fec <DD_INIT_PIO+0x124>)
   97f22:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER  = 0x00026400;			//PIOB->PIO_OER  = 0x00004000;     Output Enable Register
   97f24:	4b30      	ldr	r3, [pc, #192]	; (97fe8 <DD_INIT_PIO+0x120>)
   97f26:	f44f 3219 	mov.w	r2, #156672	; 0x26400
   97f2a:	611a      	str	r2, [r3, #16]
PIOB->PIO_ODR  = 0x0FE59300; // 0x0FE59300			//PIOB->PIO_ODR  = 0x0B459300;     Output Disable Register
   97f2c:	4b2e      	ldr	r3, [pc, #184]	; (97fe8 <DD_INIT_PIO+0x120>)
   97f2e:	4a30      	ldr	r2, [pc, #192]	; (97ff0 <DD_INIT_PIO+0x128>)
   97f30:	615a      	str	r2, [r3, #20]
PIOB->PIO_PDR  = 0xF01800FF;			// Pio Disable Register
   97f32:	4b2d      	ldr	r3, [pc, #180]	; (97fe8 <DD_INIT_PIO+0x120>)
   97f34:	4a2f      	ldr	r2, [pc, #188]	; (97ff4 <DD_INIT_PIO+0x12c>)
   97f36:	605a      	str	r2, [r3, #4]
//PIOB->PIO_SODR = 0x04004000;
//PIOB->PIO_CODR = 0x02000000;

PIOC->PIO_WPMR = 0x50494F00;			//PIOC->PIO_WPMR = 0x50494F00;
   97f38:	4b2f      	ldr	r3, [pc, #188]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f3a:	4a25      	ldr	r2, [pc, #148]	; (97fd0 <DD_INIT_PIO+0x108>)
   97f3c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOC->PIO_PER  = 0x7F9FFFFE;			//PIOC->PIO_PER  = 0x7F9FFFFE;
   97f40:	4b2d      	ldr	r3, [pc, #180]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f42:	4a2e      	ldr	r2, [pc, #184]	; (97ffc <DD_INIT_PIO+0x134>)
   97f44:	601a      	str	r2, [r3, #0]
PIOC->PIO_OER  = 0x18E1FFFE;			//PIOC->PIO_OER  = 0x1881FFFE;
   97f46:	4b2c      	ldr	r3, [pc, #176]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f48:	4a2d      	ldr	r2, [pc, #180]	; (98000 <DD_INIT_PIO+0x138>)
   97f4a:	611a      	str	r2, [r3, #16]
PIOC->PIO_ODR  = 0x671E0000;			//PIOC->PIO_ODR  = 0x671E0000;
   97f4c:	4b2a      	ldr	r3, [pc, #168]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f4e:	4a2d      	ldr	r2, [pc, #180]	; (98004 <DD_INIT_PIO+0x13c>)
   97f50:	615a      	str	r2, [r3, #20]
PIOC->PIO_PDR  = 0x80600001;			//
   97f52:	4b29      	ldr	r3, [pc, #164]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f54:	4a2c      	ldr	r2, [pc, #176]	; (98008 <DD_INIT_PIO+0x140>)
   97f56:	605a      	str	r2, [r3, #4]
PIOC->PIO_ABSR = 0x00600000;
   97f58:	4b27      	ldr	r3, [pc, #156]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f5a:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   97f5e:	671a      	str	r2, [r3, #112]	; 0x70
//PIOC->PIO_CODR = 0x360830C4;
//PIOC->PIO_SODR = 0x00000002;

PIOD->PIO_WPMR = 0x50494F00;			//PIOD->PIO_WPMR = 0x50494F00;
   97f60:	4b2a      	ldr	r3, [pc, #168]	; (9800c <DD_INIT_PIO+0x144>)
   97f62:	4a1b      	ldr	r2, [pc, #108]	; (97fd0 <DD_INIT_PIO+0x108>)
   97f64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOD->PIO_PER  = 0x000007FF;			//PIOD->PIO_PER  = 0x000007FF;
   97f68:	4b28      	ldr	r3, [pc, #160]	; (9800c <DD_INIT_PIO+0x144>)
   97f6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
   97f6e:	601a      	str	r2, [r3, #0]
PIOD->PIO_OER  = 0x00000186;			//PIOD->PIO_OER  = 0x00000106;
   97f70:	4b26      	ldr	r3, [pc, #152]	; (9800c <DD_INIT_PIO+0x144>)
   97f72:	f44f 72c3 	mov.w	r2, #390	; 0x186
   97f76:	611a      	str	r2, [r3, #16]
PIOD->PIO_ODR  = 0X00000679;			//PIOD->PIO_ODR  = 0x000006F9;
   97f78:	4b24      	ldr	r3, [pc, #144]	; (9800c <DD_INIT_PIO+0x144>)
   97f7a:	f240 6279 	movw	r2, #1657	; 0x679
   97f7e:	615a      	str	r2, [r3, #20]

//p_io = 21;
//peri = PC;
//DD_RESET_PIO(PC,21);
//PIOA->PIO_WPMR = 0<2;
 PIOC->PIO_CODR = 1<<21;               
   97f80:	4b1d      	ldr	r3, [pc, #116]	; (97ff8 <DD_INIT_PIO+0x130>)
   97f82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   97f86:	635a      	str	r2, [r3, #52]	; 0x34
 PIOB->PIO_SODR = 1<<17;
   97f88:	4b17      	ldr	r3, [pc, #92]	; (97fe8 <DD_INIT_PIO+0x120>)
   97f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   97f8e:	631a      	str	r2, [r3, #48]	; 0x30
 PIOD->PIO_SODR = 1<<2;
   97f90:	4b1e      	ldr	r3, [pc, #120]	; (9800c <DD_INIT_PIO+0x144>)
   97f92:	2204      	movs	r2, #4
   97f94:	631a      	str	r2, [r3, #48]	; 0x30
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   97f96:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   97f9a:	2055      	movs	r0, #85	; 0x55
   97f9c:	4b1c      	ldr	r3, [pc, #112]	; (98010 <DD_INIT_PIO+0x148>)
   97f9e:	4798      	blx	r3
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   97fa0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   97fa4:	2055      	movs	r0, #85	; 0x55
   97fa6:	4b1a      	ldr	r3, [pc, #104]	; (98010 <DD_INIT_PIO+0x148>)
   97fa8:	4798      	blx	r3


gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   97faa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   97fae:	2001      	movs	r0, #1
   97fb0:	4b17      	ldr	r3, [pc, #92]	; (98010 <DD_INIT_PIO+0x148>)
   97fb2:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   97fb4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   97fb8:	2000      	movs	r0, #0
   97fba:	4b15      	ldr	r3, [pc, #84]	; (98010 <DD_INIT_PIO+0x148>)
   97fbc:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   97fbe:	4915      	ldr	r1, [pc, #84]	; (98014 <DD_INIT_PIO+0x14c>)
   97fc0:	2003      	movs	r0, #3
   97fc2:	4b13      	ldr	r3, [pc, #76]	; (98010 <DD_INIT_PIO+0x148>)
   97fc4:	4798      	blx	r3


}
   97fc6:	bf00      	nop
   97fc8:	bd80      	pop	{r7, pc}
   97fca:	bf00      	nop
   97fcc:	400e0e00 	.word	0x400e0e00
   97fd0:	50494f00 	.word	0x50494f00
   97fd4:	21c9ecfc 	.word	0x21c9ecfc
   97fd8:	20f0b86c 	.word	0x20f0b86c
   97fdc:	01094494 	.word	0x01094494
   97fe0:	1e361303 	.word	0x1e361303
   97fe4:	00391000 	.word	0x00391000
   97fe8:	400e1000 	.word	0x400e1000
   97fec:	0fe7f700 	.word	0x0fe7f700
   97ff0:	0fe59300 	.word	0x0fe59300
   97ff4:	f01800ff 	.word	0xf01800ff
   97ff8:	400e1200 	.word	0x400e1200
   97ffc:	7f9ffffe 	.word	0x7f9ffffe
   98000:	18e1fffe 	.word	0x18e1fffe
   98004:	671e0000 	.word	0x671e0000
   98008:	80600001 	.word	0x80600001
   9800c:	400e1400 	.word	0x400e1400
   98010:	0009ba1d 	.word	0x0009ba1d
   98014:	30000001 	.word	0x30000001

00098018 <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   98018:	b480      	push	{r7}
   9801a:	b083      	sub	sp, #12
   9801c:	af00      	add	r7, sp, #0
   9801e:	6078      	str	r0, [r7, #4]
   98020:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   98022:	687b      	ldr	r3, [r7, #4]
   98024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98028:	d01a      	beq.n	98060 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   9802a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9802e:	d803      	bhi.n	98038 <DD_DIS_PERI_AND_RESET_PIO+0x20>
   98030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   98034:	d007      	beq.n	98046 <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   98036:	e03a      	b.n	980ae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   98038:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   9803c:	d01d      	beq.n	9807a <DD_DIS_PERI_AND_RESET_PIO+0x62>
   9803e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   98042:	d027      	beq.n	98094 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   98044:	e033      	b.n	980ae <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   98046:	4a1d      	ldr	r2, [pc, #116]	; (980bc <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   98048:	2101      	movs	r1, #1
   9804a:	683b      	ldr	r3, [r7, #0]
   9804c:	fa01 f303 	lsl.w	r3, r1, r3
   98050:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   98052:	4a1a      	ldr	r2, [pc, #104]	; (980bc <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   98054:	2101      	movs	r1, #1
   98056:	683b      	ldr	r3, [r7, #0]
   98058:	fa01 f303 	lsl.w	r3, r1, r3
   9805c:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   9805e:	e026      	b.n	980ae <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   98060:	4a17      	ldr	r2, [pc, #92]	; (980c0 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   98062:	2101      	movs	r1, #1
   98064:	683b      	ldr	r3, [r7, #0]
   98066:	fa01 f303 	lsl.w	r3, r1, r3
   9806a:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   9806c:	4a14      	ldr	r2, [pc, #80]	; (980c0 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   9806e:	2101      	movs	r1, #1
   98070:	683b      	ldr	r3, [r7, #0]
   98072:	fa01 f303 	lsl.w	r3, r1, r3
   98076:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   98078:	e019      	b.n	980ae <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   9807a:	4a12      	ldr	r2, [pc, #72]	; (980c4 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   9807c:	2101      	movs	r1, #1
   9807e:	683b      	ldr	r3, [r7, #0]
   98080:	fa01 f303 	lsl.w	r3, r1, r3
   98084:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   98086:	4a0f      	ldr	r2, [pc, #60]	; (980c4 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   98088:	2101      	movs	r1, #1
   9808a:	683b      	ldr	r3, [r7, #0]
   9808c:	fa01 f303 	lsl.w	r3, r1, r3
   98090:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   98092:	e00c      	b.n	980ae <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   98094:	4a0c      	ldr	r2, [pc, #48]	; (980c8 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   98096:	2101      	movs	r1, #1
   98098:	683b      	ldr	r3, [r7, #0]
   9809a:	fa01 f303 	lsl.w	r3, r1, r3
   9809e:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   980a0:	4a09      	ldr	r2, [pc, #36]	; (980c8 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   980a2:	2101      	movs	r1, #1
   980a4:	683b      	ldr	r3, [r7, #0]
   980a6:	fa01 f303 	lsl.w	r3, r1, r3
   980aa:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   980ac:	bf00      	nop
			
	}
}
   980ae:	bf00      	nop
   980b0:	4618      	mov	r0, r3
   980b2:	370c      	adds	r7, #12
   980b4:	46bd      	mov	sp, r7
   980b6:	bc80      	pop	{r7}
   980b8:	4770      	bx	lr
   980ba:	bf00      	nop
   980bc:	400e0e00 	.word	0x400e0e00
   980c0:	400e1000 	.word	0x400e1000
   980c4:	400e1200 	.word	0x400e1200
   980c8:	400e1400 	.word	0x400e1400

000980cc <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   980cc:	b480      	push	{r7}
   980ce:	b083      	sub	sp, #12
   980d0:	af00      	add	r7, sp, #0
   980d2:	6078      	str	r0, [r7, #4]
   980d4:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   980d6:	687b      	ldr	r3, [r7, #4]
   980d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   980dc:	d014      	beq.n	98108 <DD_EN_PERI_AND_SET_PIO+0x3c>
   980de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   980e2:	d803      	bhi.n	980ec <DD_EN_PERI_AND_SET_PIO+0x20>
   980e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   980e8:	d007      	beq.n	980fa <DD_EN_PERI_AND_SET_PIO+0x2e>
   980ea:	e022      	b.n	98132 <DD_EN_PERI_AND_SET_PIO+0x66>
   980ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   980f0:	d011      	beq.n	98116 <DD_EN_PERI_AND_SET_PIO+0x4a>
   980f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   980f6:	d015      	beq.n	98124 <DD_EN_PERI_AND_SET_PIO+0x58>
   980f8:	e01b      	b.n	98132 <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   980fa:	4a11      	ldr	r2, [pc, #68]	; (98140 <DD_EN_PERI_AND_SET_PIO+0x74>)
   980fc:	2101      	movs	r1, #1
   980fe:	683b      	ldr	r3, [r7, #0]
   98100:	fa01 f303 	lsl.w	r3, r1, r3
   98104:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   98106:	e014      	b.n	98132 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   98108:	4a0e      	ldr	r2, [pc, #56]	; (98144 <DD_EN_PERI_AND_SET_PIO+0x78>)
   9810a:	2101      	movs	r1, #1
   9810c:	683b      	ldr	r3, [r7, #0]
   9810e:	fa01 f303 	lsl.w	r3, r1, r3
   98112:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   98114:	e00d      	b.n	98132 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   98116:	4a0c      	ldr	r2, [pc, #48]	; (98148 <DD_EN_PERI_AND_SET_PIO+0x7c>)
   98118:	2101      	movs	r1, #1
   9811a:	683b      	ldr	r3, [r7, #0]
   9811c:	fa01 f303 	lsl.w	r3, r1, r3
   98120:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   98122:	e006      	b.n	98132 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   98124:	4a09      	ldr	r2, [pc, #36]	; (9814c <DD_EN_PERI_AND_SET_PIO+0x80>)
   98126:	2101      	movs	r1, #1
   98128:	683b      	ldr	r3, [r7, #0]
   9812a:	fa01 f303 	lsl.w	r3, r1, r3
   9812e:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   98130:	bf00      	nop
		

		
	}
}
   98132:	bf00      	nop
   98134:	4618      	mov	r0, r3
   98136:	370c      	adds	r7, #12
   98138:	46bd      	mov	sp, r7
   9813a:	bc80      	pop	{r7}
   9813c:	4770      	bx	lr
   9813e:	bf00      	nop
   98140:	400e0e00 	.word	0x400e0e00
   98144:	400e1000 	.word	0x400e1000
   98148:	400e1200 	.word	0x400e1200
   9814c:	400e1400 	.word	0x400e1400

00098150 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   98150:	b480      	push	{r7}
   98152:	b083      	sub	sp, #12
   98154:	af00      	add	r7, sp, #0
   98156:	6078      	str	r0, [r7, #4]
   98158:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   9815a:	687b      	ldr	r3, [r7, #4]
   9815c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98160:	d014      	beq.n	9818c <DD_SET_PIO+0x3c>
   98162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98166:	d803      	bhi.n	98170 <DD_SET_PIO+0x20>
   98168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9816c:	d007      	beq.n	9817e <DD_SET_PIO+0x2e>
   9816e:	e022      	b.n	981b6 <DD_SET_PIO+0x66>
   98170:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   98174:	d011      	beq.n	9819a <DD_SET_PIO+0x4a>
   98176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9817a:	d015      	beq.n	981a8 <DD_SET_PIO+0x58>
   9817c:	e01b      	b.n	981b6 <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   9817e:	4a11      	ldr	r2, [pc, #68]	; (981c4 <DD_SET_PIO+0x74>)
   98180:	2101      	movs	r1, #1
   98182:	683b      	ldr	r3, [r7, #0]
   98184:	fa01 f303 	lsl.w	r3, r1, r3
   98188:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   9818a:	e014      	b.n	981b6 <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   9818c:	4a0e      	ldr	r2, [pc, #56]	; (981c8 <DD_SET_PIO+0x78>)
   9818e:	2101      	movs	r1, #1
   98190:	683b      	ldr	r3, [r7, #0]
   98192:	fa01 f303 	lsl.w	r3, r1, r3
   98196:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   98198:	e00d      	b.n	981b6 <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   9819a:	4a0c      	ldr	r2, [pc, #48]	; (981cc <DD_SET_PIO+0x7c>)
   9819c:	2101      	movs	r1, #1
   9819e:	683b      	ldr	r3, [r7, #0]
   981a0:	fa01 f303 	lsl.w	r3, r1, r3
   981a4:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   981a6:	e006      	b.n	981b6 <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   981a8:	4a09      	ldr	r2, [pc, #36]	; (981d0 <DD_SET_PIO+0x80>)
   981aa:	2101      	movs	r1, #1
   981ac:	683b      	ldr	r3, [r7, #0]
   981ae:	fa01 f303 	lsl.w	r3, r1, r3
   981b2:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   981b4:	bf00      	nop
				

	}
	
	return 0;
   981b6:	2300      	movs	r3, #0
}
   981b8:	4618      	mov	r0, r3
   981ba:	370c      	adds	r7, #12
   981bc:	46bd      	mov	sp, r7
   981be:	bc80      	pop	{r7}
   981c0:	4770      	bx	lr
   981c2:	bf00      	nop
   981c4:	400e0e00 	.word	0x400e0e00
   981c8:	400e1000 	.word	0x400e1000
   981cc:	400e1200 	.word	0x400e1200
   981d0:	400e1400 	.word	0x400e1400

000981d4 <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   981d4:	b480      	push	{r7}
   981d6:	b083      	sub	sp, #12
   981d8:	af00      	add	r7, sp, #0
   981da:	6078      	str	r0, [r7, #4]
   981dc:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   981de:	687b      	ldr	r3, [r7, #4]
   981e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   981e4:	d014      	beq.n	98210 <DD_RESET_PIO+0x3c>
   981e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   981ea:	d803      	bhi.n	981f4 <DD_RESET_PIO+0x20>
   981ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   981f0:	d007      	beq.n	98202 <DD_RESET_PIO+0x2e>
   981f2:	e022      	b.n	9823a <DD_RESET_PIO+0x66>
   981f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   981f8:	d011      	beq.n	9821e <DD_RESET_PIO+0x4a>
   981fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   981fe:	d015      	beq.n	9822c <DD_RESET_PIO+0x58>
   98200:	e01b      	b.n	9823a <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   98202:	4a11      	ldr	r2, [pc, #68]	; (98248 <DD_RESET_PIO+0x74>)
   98204:	2101      	movs	r1, #1
   98206:	683b      	ldr	r3, [r7, #0]
   98208:	fa01 f303 	lsl.w	r3, r1, r3
   9820c:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9820e:	e014      	b.n	9823a <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   98210:	4a0e      	ldr	r2, [pc, #56]	; (9824c <DD_RESET_PIO+0x78>)
   98212:	2101      	movs	r1, #1
   98214:	683b      	ldr	r3, [r7, #0]
   98216:	fa01 f303 	lsl.w	r3, r1, r3
   9821a:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9821c:	e00d      	b.n	9823a <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   9821e:	4a0c      	ldr	r2, [pc, #48]	; (98250 <DD_RESET_PIO+0x7c>)
   98220:	2101      	movs	r1, #1
   98222:	683b      	ldr	r3, [r7, #0]
   98224:	fa01 f303 	lsl.w	r3, r1, r3
   98228:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9822a:	e006      	b.n	9823a <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   9822c:	4a09      	ldr	r2, [pc, #36]	; (98254 <DD_RESET_PIO+0x80>)
   9822e:	2101      	movs	r1, #1
   98230:	683b      	ldr	r3, [r7, #0]
   98232:	fa01 f303 	lsl.w	r3, r1, r3
   98236:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   98238:	bf00      	nop
		  		

	  }
	  
	  return 0;
   9823a:	2300      	movs	r3, #0
  }
   9823c:	4618      	mov	r0, r3
   9823e:	370c      	adds	r7, #12
   98240:	46bd      	mov	sp, r7
   98242:	bc80      	pop	{r7}
   98244:	4770      	bx	lr
   98246:	bf00      	nop
   98248:	400e0e00 	.word	0x400e0e00
   9824c:	400e1000 	.word	0x400e1000
   98250:	400e1200 	.word	0x400e1200
   98254:	400e1400 	.word	0x400e1400

00098258 <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   98258:	b480      	push	{r7}
   9825a:	b085      	sub	sp, #20
   9825c:	af00      	add	r7, sp, #0
   9825e:	6078      	str	r0, [r7, #4]
   98260:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   98262:	2300      	movs	r3, #0
   98264:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   98266:	2300      	movs	r3, #0
   98268:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   9826a:	687b      	ldr	r3, [r7, #4]
   9826c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98270:	d01a      	beq.n	982a8 <DD_READ_PIO+0x50>
   98272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   98276:	d803      	bhi.n	98280 <DD_READ_PIO+0x28>
   98278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9827c:	d007      	beq.n	9828e <DD_READ_PIO+0x36>
   9827e:	e03c      	b.n	982fa <DD_READ_PIO+0xa2>
   98280:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   98284:	d01d      	beq.n	982c2 <DD_READ_PIO+0x6a>
   98286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9828a:	d029      	beq.n	982e0 <DD_READ_PIO+0x88>
   9828c:	e035      	b.n	982fa <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   9828e:	4b1d      	ldr	r3, [pc, #116]	; (98304 <DD_READ_PIO+0xac>)
   98290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   98292:	2101      	movs	r1, #1
   98294:	683a      	ldr	r2, [r7, #0]
   98296:	fa01 f202 	lsl.w	r2, r1, r2
   9829a:	4013      	ands	r3, r2
   9829c:	2b00      	cmp	r3, #0
   9829e:	d101      	bne.n	982a4 <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   982a0:	2300      	movs	r3, #0
   982a2:	e02a      	b.n	982fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   982a4:	2301      	movs	r3, #1
   982a6:	e028      	b.n	982fa <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   982a8:	4b17      	ldr	r3, [pc, #92]	; (98308 <DD_READ_PIO+0xb0>)
   982aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   982ac:	2101      	movs	r1, #1
   982ae:	683a      	ldr	r2, [r7, #0]
   982b0:	fa01 f202 	lsl.w	r2, r1, r2
   982b4:	4013      	ands	r3, r2
   982b6:	2b00      	cmp	r3, #0
   982b8:	d101      	bne.n	982be <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   982ba:	2300      	movs	r3, #0
   982bc:	e01d      	b.n	982fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   982be:	2301      	movs	r3, #1
   982c0:	e01b      	b.n	982fa <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   982c2:	4b12      	ldr	r3, [pc, #72]	; (9830c <DD_READ_PIO+0xb4>)
   982c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   982c6:	2101      	movs	r1, #1
   982c8:	683a      	ldr	r2, [r7, #0]
   982ca:	fa01 f202 	lsl.w	r2, r1, r2
   982ce:	4013      	ands	r3, r2
   982d0:	2b00      	cmp	r3, #0
   982d2:	d101      	bne.n	982d8 <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   982d4:	2300      	movs	r3, #0
   982d6:	e010      	b.n	982fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   982d8:	2301      	movs	r3, #1
   982da:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   982dc:	897b      	ldrh	r3, [r7, #10]
   982de:	e00c      	b.n	982fa <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   982e0:	4b0b      	ldr	r3, [pc, #44]	; (98310 <DD_READ_PIO+0xb8>)
   982e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   982e4:	2101      	movs	r1, #1
   982e6:	683a      	ldr	r2, [r7, #0]
   982e8:	fa01 f202 	lsl.w	r2, r1, r2
   982ec:	4013      	ands	r3, r2
   982ee:	2b00      	cmp	r3, #0
   982f0:	d101      	bne.n	982f6 <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   982f2:	2300      	movs	r3, #0
   982f4:	e001      	b.n	982fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   982f6:	2301      	movs	r3, #1
   982f8:	e7ff      	b.n	982fa <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   982fa:	4618      	mov	r0, r3
   982fc:	3714      	adds	r7, #20
   982fe:	46bd      	mov	sp, r7
   98300:	bc80      	pop	{r7}
   98302:	4770      	bx	lr
   98304:	400e0e00 	.word	0x400e0e00
   98308:	400e1000 	.word	0x400e1000
   9830c:	400e1200 	.word	0x400e1200
   98310:	400e1400 	.word	0x400e1400

00098314 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   98314:	b480      	push	{r7}
   98316:	b083      	sub	sp, #12
   98318:	af00      	add	r7, sp, #0
   9831a:	4603      	mov	r3, r0
   9831c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   9831e:	4909      	ldr	r1, [pc, #36]	; (98344 <NVIC_ClearPendingIRQ+0x30>)
   98320:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98324:	095b      	lsrs	r3, r3, #5
   98326:	79fa      	ldrb	r2, [r7, #7]
   98328:	f002 021f 	and.w	r2, r2, #31
   9832c:	2001      	movs	r0, #1
   9832e:	fa00 f202 	lsl.w	r2, r0, r2
   98332:	3360      	adds	r3, #96	; 0x60
   98334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   98338:	bf00      	nop
   9833a:	370c      	adds	r7, #12
   9833c:	46bd      	mov	sp, r7
   9833e:	bc80      	pop	{r7}
   98340:	4770      	bx	lr
   98342:	bf00      	nop
   98344:	e000e100 	.word	0xe000e100

00098348 <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   98348:	b580      	push	{r7, lr}
   9834a:	b084      	sub	sp, #16
   9834c:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   9834e:	4b0b      	ldr	r3, [pc, #44]	; (9837c <UART_Handler+0x34>)
   98350:	695b      	ldr	r3, [r3, #20]
   98352:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   98354:	4b09      	ldr	r3, [pc, #36]	; (9837c <UART_Handler+0x34>)
   98356:	699b      	ldr	r3, [r3, #24]
   98358:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   9835a:	79fb      	ldrb	r3, [r7, #7]
   9835c:	4618      	mov	r0, r3
   9835e:	4b08      	ldr	r3, [pc, #32]	; (98380 <UART_Handler+0x38>)
   98360:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   98362:	2300      	movs	r3, #0
   98364:	60fb      	str	r3, [r7, #12]
   98366:	e002      	b.n	9836e <UART_Handler+0x26>
   98368:	68fb      	ldr	r3, [r7, #12]
   9836a:	3301      	adds	r3, #1
   9836c:	60fb      	str	r3, [r7, #12]
   9836e:	68fb      	ldr	r3, [r7, #12]
   98370:	2bfe      	cmp	r3, #254	; 0xfe
   98372:	d9f9      	bls.n	98368 <UART_Handler+0x20>
		{
			;
		}
	}

}
   98374:	bf00      	nop
   98376:	3710      	adds	r7, #16
   98378:	46bd      	mov	sp, r7
   9837a:	bd80      	pop	{r7, pc}
   9837c:	400e0800 	.word	0x400e0800
   98380:	00099d89 	.word	0x00099d89

00098384 <TC0_Handler>:


void TC0_Handler()
{
   98384:	b580      	push	{r7, lr}
   98386:	b082      	sub	sp, #8
   98388:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   9838a:	2100      	movs	r1, #0
   9838c:	4807      	ldr	r0, [pc, #28]	; (983ac <TC0_Handler+0x28>)
   9838e:	4b08      	ldr	r3, [pc, #32]	; (983b0 <TC0_Handler+0x2c>)
   98390:	4798      	blx	r3
   98392:	4603      	mov	r3, r0
   98394:	f003 0310 	and.w	r3, r3, #16
   98398:	2b00      	cmp	r3, #0
   9839a:	d003      	beq.n	983a4 <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   9839c:	4b05      	ldr	r3, [pc, #20]	; (983b4 <TC0_Handler+0x30>)
   9839e:	4798      	blx	r3
   983a0:	4603      	mov	r3, r0
   983a2:	71fb      	strb	r3, [r7, #7]
	}
}
   983a4:	bf00      	nop
   983a6:	3708      	adds	r7, #8
   983a8:	46bd      	mov	sp, r7
   983aa:	bd80      	pop	{r7, pc}
   983ac:	40080000 	.word	0x40080000
   983b0:	0009c0c1 	.word	0x0009c0c1
   983b4:	000939c5 	.word	0x000939c5

000983b8 <TC6_Handler>:

void TC6_Handler()
{
   983b8:	b580      	push	{r7, lr}
   983ba:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   983bc:	2021      	movs	r0, #33	; 0x21
   983be:	4b04      	ldr	r3, [pc, #16]	; (983d0 <TC6_Handler+0x18>)
   983c0:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   983c2:	2100      	movs	r1, #0
   983c4:	4803      	ldr	r0, [pc, #12]	; (983d4 <TC6_Handler+0x1c>)
   983c6:	4b04      	ldr	r3, [pc, #16]	; (983d8 <TC6_Handler+0x20>)
   983c8:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   983ca:	bf00      	nop
   983cc:	bd80      	pop	{r7, pc}
   983ce:	bf00      	nop
   983d0:	00098315 	.word	0x00098315
   983d4:	40088000 	.word	0x40088000
   983d8:	0009c0c1 	.word	0x0009c0c1

000983dc <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   983dc:	b580      	push	{r7, lr}
   983de:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   983e0:	201e      	movs	r0, #30
   983e2:	4b04      	ldr	r3, [pc, #16]	; (983f4 <TC3_Handler+0x18>)
   983e4:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   983e6:	2100      	movs	r1, #0
   983e8:	4803      	ldr	r0, [pc, #12]	; (983f8 <TC3_Handler+0x1c>)
   983ea:	4b04      	ldr	r3, [pc, #16]	; (983fc <TC3_Handler+0x20>)
   983ec:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   983ee:	bf00      	nop
   983f0:	bd80      	pop	{r7, pc}
   983f2:	bf00      	nop
   983f4:	00098315 	.word	0x00098315
   983f8:	40084000 	.word	0x40084000
   983fc:	0009c0c1 	.word	0x0009c0c1

00098400 <SysTick_Handler>:

void SysTick_Handler(void)
{
   98400:	b580      	push	{r7, lr}
   98402:	b082      	sub	sp, #8
   98404:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   98406:	4b04      	ldr	r3, [pc, #16]	; (98418 <SysTick_Handler+0x18>)
   98408:	4798      	blx	r3
   9840a:	4603      	mov	r3, r0
   9840c:	71fb      	strb	r3, [r7, #7]
   9840e:	bf00      	nop
   98410:	3708      	adds	r7, #8
   98412:	46bd      	mov	sp, r7
   98414:	bd80      	pop	{r7, pc}
   98416:	bf00      	nop
   98418:	00093ec5 	.word	0x00093ec5

0009841c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   9841c:	b480      	push	{r7}
   9841e:	b083      	sub	sp, #12
   98420:	af00      	add	r7, sp, #0
   98422:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   98424:	687b      	ldr	r3, [r7, #4]
   98426:	2b07      	cmp	r3, #7
   98428:	d825      	bhi.n	98476 <osc_get_rate+0x5a>
   9842a:	a201      	add	r2, pc, #4	; (adr r2, 98430 <osc_get_rate+0x14>)
   9842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98430:	00098451 	.word	0x00098451
   98434:	00098457 	.word	0x00098457
   98438:	0009845d 	.word	0x0009845d
   9843c:	00098463 	.word	0x00098463
   98440:	00098467 	.word	0x00098467
   98444:	0009846b 	.word	0x0009846b
   98448:	0009846f 	.word	0x0009846f
   9844c:	00098473 	.word	0x00098473
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   98450:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   98454:	e010      	b.n	98478 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   98456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9845a:	e00d      	b.n	98478 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9845c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   98460:	e00a      	b.n	98478 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   98462:	4b08      	ldr	r3, [pc, #32]	; (98484 <osc_get_rate+0x68>)
   98464:	e008      	b.n	98478 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   98466:	4b08      	ldr	r3, [pc, #32]	; (98488 <osc_get_rate+0x6c>)
   98468:	e006      	b.n	98478 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9846a:	4b08      	ldr	r3, [pc, #32]	; (9848c <osc_get_rate+0x70>)
   9846c:	e004      	b.n	98478 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9846e:	4b07      	ldr	r3, [pc, #28]	; (9848c <osc_get_rate+0x70>)
   98470:	e002      	b.n	98478 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   98472:	4b06      	ldr	r3, [pc, #24]	; (9848c <osc_get_rate+0x70>)
   98474:	e000      	b.n	98478 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   98476:	2300      	movs	r3, #0
}
   98478:	4618      	mov	r0, r3
   9847a:	370c      	adds	r7, #12
   9847c:	46bd      	mov	sp, r7
   9847e:	bc80      	pop	{r7}
   98480:	4770      	bx	lr
   98482:	bf00      	nop
   98484:	003d0900 	.word	0x003d0900
   98488:	007a1200 	.word	0x007a1200
   9848c:	00b71b00 	.word	0x00b71b00

00098490 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   98490:	b580      	push	{r7, lr}
   98492:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   98494:	2006      	movs	r0, #6
   98496:	4b04      	ldr	r3, [pc, #16]	; (984a8 <sysclk_get_main_hz+0x18>)
   98498:	4798      	blx	r3
   9849a:	4602      	mov	r2, r0
   9849c:	4613      	mov	r3, r2
   9849e:	00db      	lsls	r3, r3, #3
   984a0:	1a9b      	subs	r3, r3, r2
   984a2:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   984a4:	4618      	mov	r0, r3
   984a6:	bd80      	pop	{r7, pc}
   984a8:	0009841d 	.word	0x0009841d

000984ac <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   984ac:	b580      	push	{r7, lr}
   984ae:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   984b0:	4b02      	ldr	r3, [pc, #8]	; (984bc <sysclk_get_cpu_hz+0x10>)
   984b2:	4798      	blx	r3
   984b4:	4603      	mov	r3, r0
   984b6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   984b8:	4618      	mov	r0, r3
   984ba:	bd80      	pop	{r7, pc}
   984bc:	00098491 	.word	0x00098491

000984c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   984c0:	b580      	push	{r7, lr}
   984c2:	b082      	sub	sp, #8
   984c4:	af00      	add	r7, sp, #0
   984c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   984c8:	6878      	ldr	r0, [r7, #4]
   984ca:	4b03      	ldr	r3, [pc, #12]	; (984d8 <sysclk_enable_peripheral_clock+0x18>)
   984cc:	4798      	blx	r3
}
   984ce:	bf00      	nop
   984d0:	3708      	adds	r7, #8
   984d2:	46bd      	mov	sp, r7
   984d4:	bd80      	pop	{r7, pc}
   984d6:	bf00      	nop
   984d8:	0009bf9d 	.word	0x0009bf9d

000984dc <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   984dc:	b580      	push	{r7, lr}
   984de:	b082      	sub	sp, #8
   984e0:	af00      	add	r7, sp, #0
   984e2:	6078      	str	r0, [r7, #4]
   984e4:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   984e6:	4b10      	ldr	r3, [pc, #64]	; (98528 <twi_master_setup+0x4c>)
   984e8:	4798      	blx	r3
   984ea:	4602      	mov	r2, r0
   984ec:	683b      	ldr	r3, [r7, #0]
   984ee:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   984f0:	683b      	ldr	r3, [r7, #0]
   984f2:	2200      	movs	r2, #0
   984f4:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   984f6:	687b      	ldr	r3, [r7, #4]
   984f8:	4a0c      	ldr	r2, [pc, #48]	; (9852c <twi_master_setup+0x50>)
   984fa:	4293      	cmp	r3, r2
   984fc:	d103      	bne.n	98506 <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   984fe:	2016      	movs	r0, #22
   98500:	4b0b      	ldr	r3, [pc, #44]	; (98530 <twi_master_setup+0x54>)
   98502:	4798      	blx	r3
   98504:	e006      	b.n	98514 <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   98506:	687b      	ldr	r3, [r7, #4]
   98508:	4a0a      	ldr	r2, [pc, #40]	; (98534 <twi_master_setup+0x58>)
   9850a:	4293      	cmp	r3, r2
   9850c:	d102      	bne.n	98514 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   9850e:	2017      	movs	r0, #23
   98510:	4b07      	ldr	r3, [pc, #28]	; (98530 <twi_master_setup+0x54>)
   98512:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   98514:	6839      	ldr	r1, [r7, #0]
   98516:	6878      	ldr	r0, [r7, #4]
   98518:	4b07      	ldr	r3, [pc, #28]	; (98538 <twi_master_setup+0x5c>)
   9851a:	4798      	blx	r3
   9851c:	4603      	mov	r3, r0
}
   9851e:	4618      	mov	r0, r3
   98520:	3708      	adds	r7, #8
   98522:	46bd      	mov	sp, r7
   98524:	bd80      	pop	{r7, pc}
   98526:	bf00      	nop
   98528:	000984ad 	.word	0x000984ad
   9852c:	4008c000 	.word	0x4008c000
   98530:	000984c1 	.word	0x000984c1
   98534:	40090000 	.word	0x40090000
   98538:	00080629 	.word	0x00080629

0009853c <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   9853c:	b580      	push	{r7, lr}
   9853e:	b086      	sub	sp, #24
   98540:	af00      	add	r7, sp, #0
   98542:	6078      	str	r0, [r7, #4]
   98544:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   98546:	4b63      	ldr	r3, [pc, #396]	; (986d4 <twi_master_write1+0x198>)
   98548:	2200      	movs	r2, #0
   9854a:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   9854c:	4b62      	ldr	r3, [pc, #392]	; (986d8 <twi_master_write1+0x19c>)
   9854e:	681b      	ldr	r3, [r3, #0]
   98550:	3301      	adds	r3, #1
   98552:	4a61      	ldr	r2, [pc, #388]	; (986d8 <twi_master_write1+0x19c>)
   98554:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   98556:	4b60      	ldr	r3, [pc, #384]	; (986d8 <twi_master_write1+0x19c>)
   98558:	681b      	ldr	r3, [r3, #0]
   9855a:	2b01      	cmp	r3, #1
   9855c:	dd04      	ble.n	98568 <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   9855e:	2200      	movs	r2, #0
   98560:	2100      	movs	r1, #0
   98562:	203d      	movs	r0, #61	; 0x3d
   98564:	4b5d      	ldr	r3, [pc, #372]	; (986dc <twi_master_write1+0x1a0>)
   98566:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   98568:	495d      	ldr	r1, [pc, #372]	; (986e0 <twi_master_write1+0x1a4>)
   9856a:	485e      	ldr	r0, [pc, #376]	; (986e4 <twi_master_write1+0x1a8>)
   9856c:	4b5e      	ldr	r3, [pc, #376]	; (986e8 <twi_master_write1+0x1ac>)
   9856e:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   98570:	683b      	ldr	r3, [r7, #0]
   98572:	68db      	ldr	r3, [r3, #12]
   98574:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   98576:	683b      	ldr	r3, [r7, #0]
   98578:	689b      	ldr	r3, [r3, #8]
   9857a:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   9857c:	4b5b      	ldr	r3, [pc, #364]	; (986ec <twi_master_write1+0x1b0>)
   9857e:	2200      	movs	r2, #0
   98580:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   98582:	697b      	ldr	r3, [r7, #20]
   98584:	2b00      	cmp	r3, #0
   98586:	d104      	bne.n	98592 <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   98588:	4b53      	ldr	r3, [pc, #332]	; (986d8 <twi_master_write1+0x19c>)
   9858a:	2200      	movs	r2, #0
   9858c:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   9858e:	2301      	movs	r3, #1
   98590:	e09c      	b.n	986cc <twi_master_write1+0x190>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   98592:	687b      	ldr	r3, [r7, #4]
   98594:	2200      	movs	r2, #0
   98596:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   98598:	683b      	ldr	r3, [r7, #0]
   9859a:	7c1b      	ldrb	r3, [r3, #16]
   9859c:	041b      	lsls	r3, r3, #16
   9859e:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   985a2:	683b      	ldr	r3, [r7, #0]
   985a4:	685b      	ldr	r3, [r3, #4]
   985a6:	021b      	lsls	r3, r3, #8
   985a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   985ac:	431a      	orrs	r2, r3
   985ae:	687b      	ldr	r3, [r7, #4]
   985b0:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   985b2:	687b      	ldr	r3, [r7, #4]
   985b4:	2200      	movs	r2, #0
   985b6:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   985b8:	683a      	ldr	r2, [r7, #0]
   985ba:	683b      	ldr	r3, [r7, #0]
   985bc:	685b      	ldr	r3, [r3, #4]
   985be:	4619      	mov	r1, r3
   985c0:	4610      	mov	r0, r2
   985c2:	4b4b      	ldr	r3, [pc, #300]	; (986f0 <twi_master_write1+0x1b4>)
   985c4:	4798      	blx	r3
   985c6:	4602      	mov	r2, r0
   985c8:	687b      	ldr	r3, [r7, #4]
   985ca:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   985cc:	e033      	b.n	98636 <twi_master_write1+0xfa>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   985ce:	687b      	ldr	r3, [r7, #4]
   985d0:	6a1b      	ldr	r3, [r3, #32]
   985d2:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   985d4:	68fb      	ldr	r3, [r7, #12]
   985d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   985da:	2b00      	cmp	r3, #0
   985dc:	d007      	beq.n	985ee <twi_master_write1+0xb2>
			iic_nack = true;
   985de:	4b43      	ldr	r3, [pc, #268]	; (986ec <twi_master_write1+0x1b0>)
   985e0:	2201      	movs	r2, #1
   985e2:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   985e4:	4b3c      	ldr	r3, [pc, #240]	; (986d8 <twi_master_write1+0x19c>)
   985e6:	2200      	movs	r2, #0
   985e8:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   985ea:	2305      	movs	r3, #5
   985ec:	e06e      	b.n	986cc <twi_master_write1+0x190>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   985ee:	68fb      	ldr	r3, [r7, #12]
   985f0:	f003 0304 	and.w	r3, r3, #4
   985f4:	2b00      	cmp	r3, #0
   985f6:	d114      	bne.n	98622 <twi_master_write1+0xe6>
			if(func_timer > 3)
   985f8:	4b36      	ldr	r3, [pc, #216]	; (986d4 <twi_master_write1+0x198>)
   985fa:	681b      	ldr	r3, [r3, #0]
   985fc:	2b03      	cmp	r3, #3
   985fe:	dd1a      	ble.n	98636 <twi_master_write1+0xfa>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   98600:	4b34      	ldr	r3, [pc, #208]	; (986d4 <twi_master_write1+0x198>)
   98602:	2200      	movs	r2, #0
   98604:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   98606:	687b      	ldr	r3, [r7, #4]
   98608:	2280      	movs	r2, #128	; 0x80
   9860a:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   9860c:	4b39      	ldr	r3, [pc, #228]	; (986f4 <twi_master_write1+0x1b8>)
   9860e:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   98610:	4933      	ldr	r1, [pc, #204]	; (986e0 <twi_master_write1+0x1a4>)
   98612:	4834      	ldr	r0, [pc, #208]	; (986e4 <twi_master_write1+0x1a8>)
   98614:	4b34      	ldr	r3, [pc, #208]	; (986e8 <twi_master_write1+0x1ac>)
   98616:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   98618:	4b2f      	ldr	r3, [pc, #188]	; (986d8 <twi_master_write1+0x19c>)
   9861a:	2200      	movs	r2, #0
   9861c:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   9861e:	2308      	movs	r3, #8
   98620:	e054      	b.n	986cc <twi_master_write1+0x190>
			{
				continue;
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   98622:	693b      	ldr	r3, [r7, #16]
   98624:	1c5a      	adds	r2, r3, #1
   98626:	613a      	str	r2, [r7, #16]
   98628:	781b      	ldrb	r3, [r3, #0]
   9862a:	461a      	mov	r2, r3
   9862c:	687b      	ldr	r3, [r7, #4]
   9862e:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   98630:	697b      	ldr	r3, [r7, #20]
   98632:	3b01      	subs	r3, #1
   98634:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   98636:	697b      	ldr	r3, [r7, #20]
   98638:	2b00      	cmp	r3, #0
   9863a:	d1c8      	bne.n	985ce <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   9863c:	687b      	ldr	r3, [r7, #4]
   9863e:	6a1b      	ldr	r3, [r3, #32]
   98640:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   98642:	68fb      	ldr	r3, [r7, #12]
   98644:	f403 7380 	and.w	r3, r3, #256	; 0x100
   98648:	2b00      	cmp	r3, #0
   9864a:	d004      	beq.n	98656 <twi_master_write1+0x11a>
			FUNC_ENTRY = 0;
   9864c:	4b22      	ldr	r3, [pc, #136]	; (986d8 <twi_master_write1+0x19c>)
   9864e:	2200      	movs	r2, #0
   98650:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   98652:	2305      	movs	r3, #5
   98654:	e03a      	b.n	986cc <twi_master_write1+0x190>
		}

		if (status & TWI_SR_TXRDY) {
   98656:	68fb      	ldr	r3, [r7, #12]
   98658:	f003 0304 	and.w	r3, r3, #4
   9865c:	2b00      	cmp	r3, #0
   9865e:	d111      	bne.n	98684 <twi_master_write1+0x148>
			break;
		}
		
		if(func_timer > 3)
   98660:	4b1c      	ldr	r3, [pc, #112]	; (986d4 <twi_master_write1+0x198>)
   98662:	681b      	ldr	r3, [r3, #0]
   98664:	2b03      	cmp	r3, #3
   98666:	dde9      	ble.n	9863c <twi_master_write1+0x100>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   98668:	687b      	ldr	r3, [r7, #4]
   9866a:	2280      	movs	r2, #128	; 0x80
   9866c:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   9866e:	4b21      	ldr	r3, [pc, #132]	; (986f4 <twi_master_write1+0x1b8>)
   98670:	4798      	blx	r3
			FUNC_ENTRY = 0;
   98672:	4b19      	ldr	r3, [pc, #100]	; (986d8 <twi_master_write1+0x19c>)
   98674:	2200      	movs	r2, #0
   98676:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   98678:	4919      	ldr	r1, [pc, #100]	; (986e0 <twi_master_write1+0x1a4>)
   9867a:	481a      	ldr	r0, [pc, #104]	; (986e4 <twi_master_write1+0x1a8>)
   9867c:	4b1a      	ldr	r3, [pc, #104]	; (986e8 <twi_master_write1+0x1ac>)
   9867e:	4798      	blx	r3
			return(TWI_BUSY);
   98680:	2308      	movs	r3, #8
   98682:	e023      	b.n	986cc <twi_master_write1+0x190>
			FUNC_ENTRY = 0;
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
   98684:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   98686:	687b      	ldr	r3, [r7, #4]
   98688:	2202      	movs	r2, #2
   9868a:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   9868c:	e014      	b.n	986b8 <twi_master_write1+0x17c>
					if(func_timer > 3)
   9868e:	4b11      	ldr	r3, [pc, #68]	; (986d4 <twi_master_write1+0x198>)
   98690:	681b      	ldr	r3, [r3, #0]
   98692:	2b03      	cmp	r3, #3
   98694:	dd10      	ble.n	986b8 <twi_master_write1+0x17c>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   98696:	4b0f      	ldr	r3, [pc, #60]	; (986d4 <twi_master_write1+0x198>)
   98698:	2200      	movs	r2, #0
   9869a:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   9869c:	4b15      	ldr	r3, [pc, #84]	; (986f4 <twi_master_write1+0x1b8>)
   9869e:	4798      	blx	r3
			FUNC_ENTRY = 0;
   986a0:	4b0d      	ldr	r3, [pc, #52]	; (986d8 <twi_master_write1+0x19c>)
   986a2:	2200      	movs	r2, #0
   986a4:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   986a6:	490e      	ldr	r1, [pc, #56]	; (986e0 <twi_master_write1+0x1a4>)
   986a8:	480e      	ldr	r0, [pc, #56]	; (986e4 <twi_master_write1+0x1a8>)
   986aa:	4b0f      	ldr	r3, [pc, #60]	; (986e8 <twi_master_write1+0x1ac>)
   986ac:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   986ae:	687b      	ldr	r3, [r7, #4]
   986b0:	2280      	movs	r2, #128	; 0x80
   986b2:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   986b4:	2308      	movs	r3, #8
   986b6:	e009      	b.n	986cc <twi_master_write1+0x190>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   986b8:	687b      	ldr	r3, [r7, #4]
   986ba:	6a1b      	ldr	r3, [r3, #32]
   986bc:	f003 0301 	and.w	r3, r3, #1
   986c0:	2b00      	cmp	r3, #0
   986c2:	d0e4      	beq.n	9868e <twi_master_write1+0x152>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   986c4:	4b04      	ldr	r3, [pc, #16]	; (986d8 <twi_master_write1+0x19c>)
   986c6:	2200      	movs	r2, #0
   986c8:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   986ca:	2300      	movs	r3, #0
}
   986cc:	4618      	mov	r0, r3
   986ce:	3718      	adds	r7, #24
   986d0:	46bd      	mov	sp, r7
   986d2:	bd80      	pop	{r7, pc}
   986d4:	20071954 	.word	0x20071954
   986d8:	20071a30 	.word	0x20071a30
   986dc:	0009cbd5 	.word	0x0009cbd5
   986e0:	20070aa8 	.word	0x20070aa8
   986e4:	4008c000 	.word	0x4008c000
   986e8:	000984dd 	.word	0x000984dd
   986ec:	2007194b 	.word	0x2007194b
   986f0:	000986f9 	.word	0x000986f9
   986f4:	00098811 	.word	0x00098811

000986f8 <twi_mk_addr>:
	return TWI_SUCCESS;
}


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   986f8:	b480      	push	{r7}
   986fa:	b085      	sub	sp, #20
   986fc:	af00      	add	r7, sp, #0
   986fe:	6078      	str	r0, [r7, #4]
   98700:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   98702:	683b      	ldr	r3, [r7, #0]
   98704:	2b00      	cmp	r3, #0
   98706:	d101      	bne.n	9870c <twi_mk_addr+0x14>
	return 0;
   98708:	2300      	movs	r3, #0
   9870a:	e01d      	b.n	98748 <twi_mk_addr+0x50>

	val = addr[0];
   9870c:	687b      	ldr	r3, [r7, #4]
   9870e:	781b      	ldrb	r3, [r3, #0]
   98710:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   98712:	683b      	ldr	r3, [r7, #0]
   98714:	2b01      	cmp	r3, #1
   98716:	dd09      	ble.n	9872c <twi_mk_addr+0x34>
		val <<= 8;
   98718:	68fb      	ldr	r3, [r7, #12]
   9871a:	021b      	lsls	r3, r3, #8
   9871c:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   9871e:	687b      	ldr	r3, [r7, #4]
   98720:	3301      	adds	r3, #1
   98722:	781b      	ldrb	r3, [r3, #0]
   98724:	461a      	mov	r2, r3
   98726:	68fb      	ldr	r3, [r7, #12]
   98728:	4313      	orrs	r3, r2
   9872a:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   9872c:	683b      	ldr	r3, [r7, #0]
   9872e:	2b02      	cmp	r3, #2
   98730:	dd09      	ble.n	98746 <twi_mk_addr+0x4e>
		val <<= 8;
   98732:	68fb      	ldr	r3, [r7, #12]
   98734:	021b      	lsls	r3, r3, #8
   98736:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   98738:	687b      	ldr	r3, [r7, #4]
   9873a:	3302      	adds	r3, #2
   9873c:	781b      	ldrb	r3, [r3, #0]
   9873e:	461a      	mov	r2, r3
   98740:	68fb      	ldr	r3, [r7, #12]
   98742:	4313      	orrs	r3, r2
   98744:	60fb      	str	r3, [r7, #12]
	}
	return val;
   98746:	68fb      	ldr	r3, [r7, #12]
}
   98748:	4618      	mov	r0, r3
   9874a:	3714      	adds	r7, #20
   9874c:	46bd      	mov	sp, r7
   9874e:	bc80      	pop	{r7}
   98750:	4770      	bx	lr
   98752:	bf00      	nop

00098754 <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   98754:	b580      	push	{r7, lr}
   98756:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   98758:	4b06      	ldr	r3, [pc, #24]	; (98774 <DD_INIT_IIC+0x20>)
   9875a:	4a07      	ldr	r2, [pc, #28]	; (98778 <DD_INIT_IIC+0x24>)
   9875c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   98760:	4b04      	ldr	r3, [pc, #16]	; (98774 <DD_INIT_IIC+0x20>)
   98762:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   98766:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
	//	PIOA->PIO_ABSR = 0x00090000;
		twi_master_setup(TWI0, &opt);
   98768:	4904      	ldr	r1, [pc, #16]	; (9877c <DD_INIT_IIC+0x28>)
   9876a:	4805      	ldr	r0, [pc, #20]	; (98780 <DD_INIT_IIC+0x2c>)
   9876c:	4b05      	ldr	r3, [pc, #20]	; (98784 <DD_INIT_IIC+0x30>)
   9876e:	4798      	blx	r3
		
			
	
}
   98770:	bf00      	nop
   98772:	bd80      	pop	{r7, pc}
   98774:	400e0e00 	.word	0x400e0e00
   98778:	50494f00 	.word	0x50494f00
   9877c:	20070aa8 	.word	0x20070aa8
   98780:	4008c000 	.word	0x4008c000
   98784:	000984dd 	.word	0x000984dd

00098788 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   98788:	b580      	push	{r7, lr}
   9878a:	b088      	sub	sp, #32
   9878c:	af00      	add	r7, sp, #0
   9878e:	4603      	mov	r3, r0
   98790:	460a      	mov	r2, r1
   98792:	71fb      	strb	r3, [r7, #7]
   98794:	4613      	mov	r3, r2
   98796:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   98798:	4a1a      	ldr	r2, [pc, #104]	; (98804 <DD_IIC_SET_POT+0x7c>)
   9879a:	f107 031c 	add.w	r3, r7, #28
   9879e:	6810      	ldr	r0, [r2, #0]
   987a0:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   987a2:	f107 0308 	add.w	r3, r7, #8
   987a6:	2200      	movs	r2, #0
   987a8:	601a      	str	r2, [r3, #0]
   987aa:	605a      	str	r2, [r3, #4]
   987ac:	609a      	str	r2, [r3, #8]
   987ae:	60da      	str	r2, [r3, #12]
   987b0:	611a      	str	r2, [r3, #16]
   987b2:	f107 031c 	add.w	r3, r7, #28
   987b6:	613b      	str	r3, [r7, #16]
   987b8:	2304      	movs	r3, #4
   987ba:	617b      	str	r3, [r7, #20]
   987bc:	79fb      	ldrb	r3, [r7, #7]
   987be:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   987c0:	88bb      	ldrh	r3, [r7, #4]
   987c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   987c6:	d818      	bhi.n	987fa <DD_IIC_SET_POT+0x72>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   987c8:	88bb      	ldrh	r3, [r7, #4]
   987ca:	b2db      	uxtb	r3, r3
   987cc:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   987ce:	88bb      	ldrh	r3, [r7, #4]
   987d0:	0a1b      	lsrs	r3, r3, #8
   987d2:	b29b      	uxth	r3, r3
   987d4:	b25b      	sxtb	r3, r3
   987d6:	f003 0303 	and.w	r3, r3, #3
   987da:	b25b      	sxtb	r3, r3
   987dc:	f043 0304 	orr.w	r3, r3, #4
   987e0:	b25b      	sxtb	r3, r3
   987e2:	b2db      	uxtb	r3, r3
   987e4:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   987e6:	f107 031c 	add.w	r3, r7, #28
   987ea:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   987ec:	f107 0308 	add.w	r3, r7, #8
   987f0:	4619      	mov	r1, r3
   987f2:	4805      	ldr	r0, [pc, #20]	; (98808 <DD_IIC_SET_POT+0x80>)
   987f4:	4b05      	ldr	r3, [pc, #20]	; (9880c <DD_IIC_SET_POT+0x84>)
   987f6:	4798      	blx	r3
   987f8:	e000      	b.n	987fc <DD_IIC_SET_POT+0x74>
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
		 {
			 return;
   987fa:	bf00      	nop

			 iic_packet.buffer =  (void *)test_pattern_inc;
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
		 }

}
   987fc:	3720      	adds	r7, #32
   987fe:	46bd      	mov	sp, r7
   98800:	bd80      	pop	{r7, pc}
   98802:	bf00      	nop
   98804:	000aa374 	.word	0x000aa374
   98808:	4008c000 	.word	0x4008c000
   9880c:	0009853d 	.word	0x0009853d

00098810 <clock_it>:
			
}


void clock_it(void)
{
   98810:	b480      	push	{r7}
   98812:	af00      	add	r7, sp, #0
	return;
   98814:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   98816:	46bd      	mov	sp, r7
   98818:	bc80      	pop	{r7}
   9881a:	4770      	bx	lr

0009881c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   9881c:	b480      	push	{r7}
   9881e:	b083      	sub	sp, #12
   98820:	af00      	add	r7, sp, #0
   98822:	4603      	mov	r3, r0
   98824:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   98826:	4908      	ldr	r1, [pc, #32]	; (98848 <NVIC_EnableIRQ+0x2c>)
   98828:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9882c:	095b      	lsrs	r3, r3, #5
   9882e:	79fa      	ldrb	r2, [r7, #7]
   98830:	f002 021f 	and.w	r2, r2, #31
   98834:	2001      	movs	r0, #1
   98836:	fa00 f202 	lsl.w	r2, r0, r2
   9883a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   9883e:	bf00      	nop
   98840:	370c      	adds	r7, #12
   98842:	46bd      	mov	sp, r7
   98844:	bc80      	pop	{r7}
   98846:	4770      	bx	lr
   98848:	e000e100 	.word	0xe000e100

0009884c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   9884c:	b480      	push	{r7}
   9884e:	b083      	sub	sp, #12
   98850:	af00      	add	r7, sp, #0
   98852:	4603      	mov	r3, r0
   98854:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   98856:	4909      	ldr	r1, [pc, #36]	; (9887c <NVIC_DisableIRQ+0x30>)
   98858:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9885c:	095b      	lsrs	r3, r3, #5
   9885e:	79fa      	ldrb	r2, [r7, #7]
   98860:	f002 021f 	and.w	r2, r2, #31
   98864:	2001      	movs	r0, #1
   98866:	fa00 f202 	lsl.w	r2, r0, r2
   9886a:	3320      	adds	r3, #32
   9886c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   98870:	bf00      	nop
   98872:	370c      	adds	r7, #12
   98874:	46bd      	mov	sp, r7
   98876:	bc80      	pop	{r7}
   98878:	4770      	bx	lr
   9887a:	bf00      	nop
   9887c:	e000e100 	.word	0xe000e100

00098880 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   98880:	b480      	push	{r7}
   98882:	b083      	sub	sp, #12
   98884:	af00      	add	r7, sp, #0
   98886:	4603      	mov	r3, r0
   98888:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   9888a:	4909      	ldr	r1, [pc, #36]	; (988b0 <NVIC_ClearPendingIRQ+0x30>)
   9888c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   98890:	095b      	lsrs	r3, r3, #5
   98892:	79fa      	ldrb	r2, [r7, #7]
   98894:	f002 021f 	and.w	r2, r2, #31
   98898:	2001      	movs	r0, #1
   9889a:	fa00 f202 	lsl.w	r2, r0, r2
   9889e:	3360      	adds	r3, #96	; 0x60
   988a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   988a4:	bf00      	nop
   988a6:	370c      	adds	r7, #12
   988a8:	46bd      	mov	sp, r7
   988aa:	bc80      	pop	{r7}
   988ac:	4770      	bx	lr
   988ae:	bf00      	nop
   988b0:	e000e100 	.word	0xe000e100

000988b4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   988b4:	b480      	push	{r7}
   988b6:	b083      	sub	sp, #12
   988b8:	af00      	add	r7, sp, #0
   988ba:	4603      	mov	r3, r0
   988bc:	6039      	str	r1, [r7, #0]
   988be:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   988c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   988c4:	2b00      	cmp	r3, #0
   988c6:	da0b      	bge.n	988e0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   988c8:	490d      	ldr	r1, [pc, #52]	; (98900 <NVIC_SetPriority+0x4c>)
   988ca:	79fb      	ldrb	r3, [r7, #7]
   988cc:	f003 030f 	and.w	r3, r3, #15
   988d0:	3b04      	subs	r3, #4
   988d2:	683a      	ldr	r2, [r7, #0]
   988d4:	b2d2      	uxtb	r2, r2
   988d6:	0112      	lsls	r2, r2, #4
   988d8:	b2d2      	uxtb	r2, r2
   988da:	440b      	add	r3, r1
   988dc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   988de:	e009      	b.n	988f4 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   988e0:	4908      	ldr	r1, [pc, #32]	; (98904 <NVIC_SetPriority+0x50>)
   988e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   988e6:	683a      	ldr	r2, [r7, #0]
   988e8:	b2d2      	uxtb	r2, r2
   988ea:	0112      	lsls	r2, r2, #4
   988ec:	b2d2      	uxtb	r2, r2
   988ee:	440b      	add	r3, r1
   988f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   988f4:	bf00      	nop
   988f6:	370c      	adds	r7, #12
   988f8:	46bd      	mov	sp, r7
   988fa:	bc80      	pop	{r7}
   988fc:	4770      	bx	lr
   988fe:	bf00      	nop
   98900:	e000ed00 	.word	0xe000ed00
   98904:	e000e100 	.word	0xe000e100

00098908 <DD_INIT_INT>:

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;


void DD_INIT_INT()
{
   98908:	b580      	push	{r7, lr}
   9890a:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   9890c:	2008      	movs	r0, #8
   9890e:	4b2e      	ldr	r3, [pc, #184]	; (989c8 <DD_INIT_INT+0xc0>)
   98910:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   98912:	2008      	movs	r0, #8
   98914:	4b2d      	ldr	r3, [pc, #180]	; (989cc <DD_INIT_INT+0xc4>)
   98916:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   98918:	2100      	movs	r1, #0
   9891a:	2008      	movs	r0, #8
   9891c:	4b2c      	ldr	r3, [pc, #176]	; (989d0 <DD_INIT_INT+0xc8>)
   9891e:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   98920:	2008      	movs	r0, #8
   98922:	4b2c      	ldr	r3, [pc, #176]	; (989d4 <DD_INIT_INT+0xcc>)
   98924:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   98926:	2101      	movs	r1, #1
   98928:	482b      	ldr	r0, [pc, #172]	; (989d8 <DD_INIT_INT+0xd0>)
   9892a:	4b2c      	ldr	r3, [pc, #176]	; (989dc <DD_INIT_INT+0xd4>)
   9892c:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   9892e:	201b      	movs	r0, #27
   98930:	4b25      	ldr	r3, [pc, #148]	; (989c8 <DD_INIT_INT+0xc0>)
   98932:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   98934:	201b      	movs	r0, #27
   98936:	4b25      	ldr	r3, [pc, #148]	; (989cc <DD_INIT_INT+0xc4>)
   98938:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   9893a:	2100      	movs	r1, #0
   9893c:	201b      	movs	r0, #27
   9893e:	4b24      	ldr	r3, [pc, #144]	; (989d0 <DD_INIT_INT+0xc8>)
   98940:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   98942:	201b      	movs	r0, #27
   98944:	4b23      	ldr	r3, [pc, #140]	; (989d4 <DD_INIT_INT+0xcc>)
   98946:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   98948:	201e      	movs	r0, #30
   9894a:	4b1f      	ldr	r3, [pc, #124]	; (989c8 <DD_INIT_INT+0xc0>)
   9894c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   9894e:	201e      	movs	r0, #30
   98950:	4b1e      	ldr	r3, [pc, #120]	; (989cc <DD_INIT_INT+0xc4>)
   98952:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   98954:	2100      	movs	r1, #0
   98956:	201e      	movs	r0, #30
   98958:	4b1d      	ldr	r3, [pc, #116]	; (989d0 <DD_INIT_INT+0xc8>)
   9895a:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   9895c:	201e      	movs	r0, #30
   9895e:	4b1d      	ldr	r3, [pc, #116]	; (989d4 <DD_INIT_INT+0xcc>)
   98960:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   98962:	2021      	movs	r0, #33	; 0x21
   98964:	4b18      	ldr	r3, [pc, #96]	; (989c8 <DD_INIT_INT+0xc0>)
   98966:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   98968:	2021      	movs	r0, #33	; 0x21
   9896a:	4b18      	ldr	r3, [pc, #96]	; (989cc <DD_INIT_INT+0xc4>)
   9896c:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   9896e:	2100      	movs	r1, #0
   98970:	2021      	movs	r0, #33	; 0x21
   98972:	4b17      	ldr	r3, [pc, #92]	; (989d0 <DD_INIT_INT+0xc8>)
   98974:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   98976:	2021      	movs	r0, #33	; 0x21
   98978:	4b16      	ldr	r3, [pc, #88]	; (989d4 <DD_INIT_INT+0xcc>)
   9897a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   9897c:	4b18      	ldr	r3, [pc, #96]	; (989e0 <DD_INIT_INT+0xd8>)
   9897e:	f04f 32ff 	mov.w	r2, #4294967295
   98982:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   98986:	4b16      	ldr	r3, [pc, #88]	; (989e0 <DD_INIT_INT+0xd8>)
   98988:	f04f 32ff 	mov.w	r2, #4294967295
   9898c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   98990:	2100      	movs	r1, #0
   98992:	2021      	movs	r0, #33	; 0x21
   98994:	4b0e      	ldr	r3, [pc, #56]	; (989d0 <DD_INIT_INT+0xc8>)
   98996:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   98998:	4b11      	ldr	r3, [pc, #68]	; (989e0 <DD_INIT_INT+0xd8>)
   9899a:	f04f 32ff 	mov.w	r2, #4294967295
   9899e:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   989a0:	4b0f      	ldr	r3, [pc, #60]	; (989e0 <DD_INIT_INT+0xd8>)
   989a2:	f04f 32ff 	mov.w	r2, #4294967295
   989a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   989aa:	4b0d      	ldr	r3, [pc, #52]	; (989e0 <DD_INIT_INT+0xd8>)
   989ac:	f04f 32ff 	mov.w	r2, #4294967295
   989b0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   989b4:	2100      	movs	r1, #0
   989b6:	201e      	movs	r0, #30
   989b8:	4b05      	ldr	r3, [pc, #20]	; (989d0 <DD_INIT_INT+0xc8>)
   989ba:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   989bc:	4b08      	ldr	r3, [pc, #32]	; (989e0 <DD_INIT_INT+0xd8>)
   989be:	f04f 32ff 	mov.w	r2, #4294967295
   989c2:	60da      	str	r2, [r3, #12]
// 		NVIC_SetPriority(PIOB_IRQn, 15);
//  		NVIC_EnableIRQ(PIOB_IRQn);
		
		

}
   989c4:	bf00      	nop
   989c6:	bd80      	pop	{r7, pc}
   989c8:	0009884d 	.word	0x0009884d
   989cc:	00098881 	.word	0x00098881
   989d0:	000988b5 	.word	0x000988b5
   989d4:	0009881d 	.word	0x0009881d
   989d8:	400e0800 	.word	0x400e0800
   989dc:	0009c18d 	.word	0x0009c18d
   989e0:	e000e100 	.word	0xe000e100

000989e4 <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   989e4:	b590      	push	{r4, r7, lr}
   989e6:	b0c7      	sub	sp, #284	; 0x11c
   989e8:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   989ea:	4b4b      	ldr	r3, [pc, #300]	; (98b18 <DD_INIT_NVM+0x134>)
   989ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   989f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   989f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   989f8:	2300      	movs	r3, #0
   989fa:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   989fe:	2106      	movs	r1, #6
   98a00:	2000      	movs	r0, #0
   98a02:	4b46      	ldr	r3, [pc, #280]	; (98b1c <DD_INIT_NVM+0x138>)
   98a04:	4798      	blx	r3
   98a06:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   98a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   98a0e:	2b00      	cmp	r3, #0
   98a10:	d176      	bne.n	98b00 <DD_INIT_NVM+0x11c>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   98a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   98a16:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   98a1a:	2300      	movs	r3, #0
   98a1c:	2200      	movs	r2, #0
   98a1e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   98a22:	4c3f      	ldr	r4, [pc, #252]	; (98b20 <DD_INIT_NVM+0x13c>)
   98a24:	47a0      	blx	r4
   98a26:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   98a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   98a2e:	2b00      	cmp	r3, #0
   98a30:	d168      	bne.n	98b04 <DD_INIT_NVM+0x120>
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   98a32:	2300      	movs	r3, #0
   98a34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   98a38:	e010      	b.n	98a5c <DD_INIT_NVM+0x78>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   98a3a:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   98a3e:	463b      	mov	r3, r7
   98a40:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   98a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   98a48:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   98a4c:	3301      	adds	r3, #1
   98a4e:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   98a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   98a56:	3301      	adds	r3, #1
   98a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   98a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   98a60:	2b3f      	cmp	r3, #63	; 0x3f
   98a62:	d9ea      	bls.n	98a3a <DD_INIT_NVM+0x56>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   98a64:	2300      	movs	r3, #0
   98a66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   98a6a:	e012      	b.n	98a92 <DD_INIT_NVM+0xae>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   98a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   98a70:	009b      	lsls	r3, r3, #2
   98a72:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   98a76:	4413      	add	r3, r2
   98a78:	681a      	ldr	r2, [r3, #0]
   98a7a:	463b      	mov	r3, r7
   98a7c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   98a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   98a84:	429a      	cmp	r2, r3
   98a86:	d13f      	bne.n	98b08 <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   98a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   98a8c:	3301      	adds	r3, #1
   98a8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   98a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   98a96:	2b3f      	cmp	r3, #63	; 0x3f
   98a98:	d9e8      	bls.n	98a6c <DD_INIT_NVM+0x88>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   98a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   98a9e:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   98aa2:	2300      	movs	r3, #0
   98aa4:	2200      	movs	r2, #0
   98aa6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   98aaa:	4c1e      	ldr	r4, [pc, #120]	; (98b24 <DD_INIT_NVM+0x140>)
   98aac:	47a0      	blx	r4
   98aae:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   98ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   98ab6:	2b00      	cmp	r3, #0
   98ab8:	d128      	bne.n	98b0c <DD_INIT_NVM+0x128>
			return 0;
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   98aba:	4639      	mov	r1, r7
   98abc:	2301      	movs	r3, #1
   98abe:	f44f 7280 	mov.w	r2, #256	; 0x100
   98ac2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   98ac6:	4c18      	ldr	r4, [pc, #96]	; (98b28 <DD_INIT_NVM+0x144>)
   98ac8:	47a0      	blx	r4
   98aca:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   98ace:	bf00      	nop
   98ad0:	f207 1303 	addw	r3, r7, #259	; 0x103
   98ad4:	4619      	mov	r1, r3
   98ad6:	4815      	ldr	r0, [pc, #84]	; (98b2c <DD_INIT_NVM+0x148>)
   98ad8:	4b15      	ldr	r3, [pc, #84]	; (98b30 <DD_INIT_NVM+0x14c>)
   98ada:	4798      	blx	r3
   98adc:	4603      	mov	r3, r0
   98ade:	2b00      	cmp	r3, #0
   98ae0:	d1f6      	bne.n	98ad0 <DD_INIT_NVM+0xec>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   98ae2:	bf00      	nop
   98ae4:	f207 1303 	addw	r3, r7, #259	; 0x103
   98ae8:	4619      	mov	r1, r3
   98aea:	4810      	ldr	r0, [pc, #64]	; (98b2c <DD_INIT_NVM+0x148>)
   98aec:	4b10      	ldr	r3, [pc, #64]	; (98b30 <DD_INIT_NVM+0x14c>)
   98aee:	4798      	blx	r3
   98af0:	4603      	mov	r3, r0
   98af2:	2b00      	cmp	r3, #0
   98af4:	d1f6      	bne.n	98ae4 <DD_INIT_NVM+0x100>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   98af6:	4b0f      	ldr	r3, [pc, #60]	; (98b34 <DD_INIT_NVM+0x150>)
   98af8:	4798      	blx	r3
   98afa:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   98afe:	e006      	b.n	98b0e <DD_INIT_NVM+0x12a>
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
	if (ul_rc != FLASH_RC_OK)
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   98b00:	bf00      	nop
   98b02:	e004      	b.n	98b0e <DD_INIT_NVM+0x12a>
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   98b04:	bf00      	nop
   98b06:	e002      	b.n	98b0e <DD_INIT_NVM+0x12a>
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			//printf("\n\r-F- data error\n\r");
			return 0;
   98b08:	bf00      	nop
   98b0a:	e000      	b.n	98b0e <DD_INIT_NVM+0x12a>
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   98b0c:	bf00      	nop

		//printf("-I- All tests done\n\r");



}
   98b0e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   98b12:	46bd      	mov	sp, r7
   98b14:	bd90      	pop	{r4, r7, pc}
   98b16:	bf00      	nop
   98b18:	000fff00 	.word	0x000fff00
   98b1c:	0008083d 	.word	0x0008083d
   98b20:	00080a61 	.word	0x00080a61
   98b24:	000809c5 	.word	0x000809c5
   98b28:	00080871 	.word	0x00080871
   98b2c:	400e0800 	.word	0x400e0800
   98b30:	0009c1ed 	.word	0x0009c1ed
   98b34:	00080ba5 	.word	0x00080ba5

00098b38 <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   98b38:	b480      	push	{r7}
   98b3a:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   98b3c:	4b2b      	ldr	r3, [pc, #172]	; (98bec <DD_INIT_PWM+0xb4>)
   98b3e:	4a2c      	ldr	r2, [pc, #176]	; (98bf0 <DD_INIT_PWM+0xb8>)
   98b40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   98b44:	4b29      	ldr	r3, [pc, #164]	; (98bec <DD_INIT_PWM+0xb4>)
   98b46:	4a2b      	ldr	r2, [pc, #172]	; (98bf4 <DD_INIT_PWM+0xbc>)
   98b48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   98b4c:	4b27      	ldr	r3, [pc, #156]	; (98bec <DD_INIT_PWM+0xb4>)
   98b4e:	4a29      	ldr	r2, [pc, #164]	; (98bf4 <DD_INIT_PWM+0xbc>)
   98b50:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   98b54:	4b25      	ldr	r3, [pc, #148]	; (98bec <DD_INIT_PWM+0xb4>)
   98b56:	4a27      	ldr	r2, [pc, #156]	; (98bf4 <DD_INIT_PWM+0xbc>)
   98b58:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_16|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   98b5c:	4b23      	ldr	r3, [pc, #140]	; (98bec <DD_INIT_PWM+0xb4>)
   98b5e:	4a26      	ldr	r2, [pc, #152]	; (98bf8 <DD_INIT_PWM+0xc0>)
   98b60:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   98b64:	4b21      	ldr	r3, [pc, #132]	; (98bec <DD_INIT_PWM+0xb4>)
   98b66:	22ff      	movs	r2, #255	; 0xff
   98b68:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A05;
   98b6a:	4b20      	ldr	r3, [pc, #128]	; (98bec <DD_INIT_PWM+0xb4>)
   98b6c:	f640 2205 	movw	r2, #2565	; 0xa05
   98b70:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   98b72:	4b1e      	ldr	r3, [pc, #120]	; (98bec <DD_INIT_PWM+0xb4>)
   98b74:	220b      	movs	r2, #11
   98b76:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   98b7a:	4b1c      	ldr	r3, [pc, #112]	; (98bec <DD_INIT_PWM+0xb4>)
   98b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   98b80:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   98b84:	4b19      	ldr	r3, [pc, #100]	; (98bec <DD_INIT_PWM+0xb4>)
   98b86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   98b8a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   98b8e:	4b17      	ldr	r3, [pc, #92]	; (98bec <DD_INIT_PWM+0xb4>)
   98b90:	f646 5260 	movw	r2, #28000	; 0x6d60
   98b94:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   98b98:	4b14      	ldr	r3, [pc, #80]	; (98bec <DD_INIT_PWM+0xb4>)
   98b9a:	f640 325a 	movw	r2, #2906	; 0xb5a
   98b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   98ba2:	4b12      	ldr	r3, [pc, #72]	; (98bec <DD_INIT_PWM+0xb4>)
   98ba4:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   98ba8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   98bac:	4b0f      	ldr	r3, [pc, #60]	; (98bec <DD_INIT_PWM+0xb4>)
   98bae:	f44f 7248 	mov.w	r2, #800	; 0x320
   98bb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   98bb6:	4b0d      	ldr	r3, [pc, #52]	; (98bec <DD_INIT_PWM+0xb4>)
   98bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   98bbc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   98bc0:	4b0a      	ldr	r3, [pc, #40]	; (98bec <DD_INIT_PWM+0xb4>)
   98bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   98bc6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   98bca:	4b08      	ldr	r3, [pc, #32]	; (98bec <DD_INIT_PWM+0xb4>)
   98bcc:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   98bd0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   98bd4:	4b05      	ldr	r3, [pc, #20]	; (98bec <DD_INIT_PWM+0xb4>)
   98bd6:	f44f 7248 	mov.w	r2, #800	; 0x320
   98bda:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   98bde:	4b03      	ldr	r3, [pc, #12]	; (98bec <DD_INIT_PWM+0xb4>)
   98be0:	2237      	movs	r2, #55	; 0x37
   98be2:	605a      	str	r2, [r3, #4]


	
	
}
   98be4:	bf00      	nop
   98be6:	46bd      	mov	sp, r7
   98be8:	bc80      	pop	{r7}
   98bea:	4770      	bx	lr
   98bec:	40094000 	.word	0x40094000
   98bf0:	50574d00 	.word	0x50574d00
   98bf4:	00070605 	.word	0x00070605
   98bf8:	00070604 	.word	0x00070604

00098bfc <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   98bfc:	b480      	push	{r7}
   98bfe:	b083      	sub	sp, #12
   98c00:	af00      	add	r7, sp, #0
   98c02:	4603      	mov	r3, r0
   98c04:	6039      	str	r1, [r7, #0]
   98c06:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   98c08:	4a06      	ldr	r2, [pc, #24]	; (98c24 <DD_SET_DUTY+0x28>)
   98c0a:	79fb      	ldrb	r3, [r7, #7]
   98c0c:	3310      	adds	r3, #16
   98c0e:	015b      	lsls	r3, r3, #5
   98c10:	4413      	add	r3, r2
   98c12:	3304      	adds	r3, #4
   98c14:	683a      	ldr	r2, [r7, #0]
   98c16:	601a      	str	r2, [r3, #0]
	 
	 return 0;
   98c18:	2300      	movs	r3, #0
 }
   98c1a:	4618      	mov	r0, r3
   98c1c:	370c      	adds	r7, #12
   98c1e:	46bd      	mov	sp, r7
   98c20:	bc80      	pop	{r7}
   98c22:	4770      	bx	lr
   98c24:	40094000 	.word	0x40094000

00098c28 <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   98c28:	b480      	push	{r7}
   98c2a:	b083      	sub	sp, #12
   98c2c:	af00      	add	r7, sp, #0
   98c2e:	4603      	mov	r3, r0
   98c30:	6039      	str	r1, [r7, #0]
   98c32:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   98c34:	4a06      	ldr	r2, [pc, #24]	; (98c50 <DD_SET_PRDY+0x28>)
   98c36:	79fb      	ldrb	r3, [r7, #7]
   98c38:	015b      	lsls	r3, r3, #5
   98c3a:	4413      	add	r3, r2
   98c3c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   98c40:	683a      	ldr	r2, [r7, #0]
   98c42:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   98c44:	2300      	movs	r3, #0
 }
   98c46:	4618      	mov	r0, r3
   98c48:	370c      	adds	r7, #12
   98c4a:	46bd      	mov	sp, r7
   98c4c:	bc80      	pop	{r7}
   98c4e:	4770      	bx	lr
   98c50:	40094000 	.word	0x40094000

00098c54 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   98c54:	b490      	push	{r4, r7}
   98c56:	b082      	sub	sp, #8
   98c58:	af00      	add	r7, sp, #0
   98c5a:	4603      	mov	r3, r0
   98c5c:	80fb      	strh	r3, [r7, #6]
   98c5e:	460b      	mov	r3, r1
   98c60:	717b      	strb	r3, [r7, #5]
   98c62:	4613      	mov	r3, r2
   98c64:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   98c66:	4911      	ldr	r1, [pc, #68]	; (98cac <dd_spi_set_transfer_delay+0x58>)
   98c68:	88fb      	ldrh	r3, [r7, #6]
   98c6a:	4810      	ldr	r0, [pc, #64]	; (98cac <dd_spi_set_transfer_delay+0x58>)
   98c6c:	88fa      	ldrh	r2, [r7, #6]
   98c6e:	320c      	adds	r2, #12
   98c70:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98c74:	b292      	uxth	r2, r2
   98c76:	330c      	adds	r3, #12
   98c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   98c7c:	4c0b      	ldr	r4, [pc, #44]	; (98cac <dd_spi_set_transfer_delay+0x58>)
   98c7e:	88fb      	ldrh	r3, [r7, #6]
   98c80:	490a      	ldr	r1, [pc, #40]	; (98cac <dd_spi_set_transfer_delay+0x58>)
   98c82:	88fa      	ldrh	r2, [r7, #6]
   98c84:	320c      	adds	r2, #12
   98c86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   98c8a:	797a      	ldrb	r2, [r7, #5]
   98c8c:	0412      	lsls	r2, r2, #16
   98c8e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   98c92:	7938      	ldrb	r0, [r7, #4]
   98c94:	0600      	lsls	r0, r0, #24
   98c96:	4302      	orrs	r2, r0
   98c98:	430a      	orrs	r2, r1
   98c9a:	330c      	adds	r3, #12
   98c9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   98ca0:	bf00      	nop
   98ca2:	3708      	adds	r7, #8
   98ca4:	46bd      	mov	sp, r7
   98ca6:	bc90      	pop	{r4, r7}
   98ca8:	4770      	bx	lr
   98caa:	bf00      	nop
   98cac:	40008000 	.word	0x40008000

00098cb0 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   98cb0:	b480      	push	{r7}
   98cb2:	b083      	sub	sp, #12
   98cb4:	af00      	add	r7, sp, #0
   98cb6:	4603      	mov	r3, r0
   98cb8:	6039      	str	r1, [r7, #0]
   98cba:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   98cbc:	490e      	ldr	r1, [pc, #56]	; (98cf8 <dd_spi_set_bits_per_transfer+0x48>)
   98cbe:	88fb      	ldrh	r3, [r7, #6]
   98cc0:	480d      	ldr	r0, [pc, #52]	; (98cf8 <dd_spi_set_bits_per_transfer+0x48>)
   98cc2:	88fa      	ldrh	r2, [r7, #6]
   98cc4:	320c      	adds	r2, #12
   98cc6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98cca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   98cce:	330c      	adds	r3, #12
   98cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   98cd4:	4808      	ldr	r0, [pc, #32]	; (98cf8 <dd_spi_set_bits_per_transfer+0x48>)
   98cd6:	88fb      	ldrh	r3, [r7, #6]
   98cd8:	4907      	ldr	r1, [pc, #28]	; (98cf8 <dd_spi_set_bits_per_transfer+0x48>)
   98cda:	88fa      	ldrh	r2, [r7, #6]
   98cdc:	320c      	adds	r2, #12
   98cde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   98ce2:	683a      	ldr	r2, [r7, #0]
   98ce4:	430a      	orrs	r2, r1
   98ce6:	330c      	adds	r3, #12
   98ce8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   98cec:	bf00      	nop
   98cee:	370c      	adds	r7, #12
   98cf0:	46bd      	mov	sp, r7
   98cf2:	bc80      	pop	{r7}
   98cf4:	4770      	bx	lr
   98cf6:	bf00      	nop
   98cf8:	40008000 	.word	0x40008000

00098cfc <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   98cfc:	b480      	push	{r7}
   98cfe:	b083      	sub	sp, #12
   98d00:	af00      	add	r7, sp, #0
   98d02:	4603      	mov	r3, r0
   98d04:	6039      	str	r1, [r7, #0]
   98d06:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   98d08:	683b      	ldr	r3, [r7, #0]
   98d0a:	2b00      	cmp	r3, #0
   98d0c:	d00c      	beq.n	98d28 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   98d0e:	490f      	ldr	r1, [pc, #60]	; (98d4c <dd_spi_set_clock_polarity+0x50>)
   98d10:	88fb      	ldrh	r3, [r7, #6]
   98d12:	480e      	ldr	r0, [pc, #56]	; (98d4c <dd_spi_set_clock_polarity+0x50>)
   98d14:	88fa      	ldrh	r2, [r7, #6]
   98d16:	320c      	adds	r2, #12
   98d18:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98d1c:	f042 0201 	orr.w	r2, r2, #1
   98d20:	330c      	adds	r3, #12
   98d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   98d26:	e00b      	b.n	98d40 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   98d28:	4908      	ldr	r1, [pc, #32]	; (98d4c <dd_spi_set_clock_polarity+0x50>)
   98d2a:	88fb      	ldrh	r3, [r7, #6]
   98d2c:	4807      	ldr	r0, [pc, #28]	; (98d4c <dd_spi_set_clock_polarity+0x50>)
   98d2e:	88fa      	ldrh	r2, [r7, #6]
   98d30:	320c      	adds	r2, #12
   98d32:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98d36:	f022 0201 	bic.w	r2, r2, #1
   98d3a:	330c      	adds	r3, #12
   98d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   98d40:	bf00      	nop
   98d42:	370c      	adds	r7, #12
   98d44:	46bd      	mov	sp, r7
   98d46:	bc80      	pop	{r7}
   98d48:	4770      	bx	lr
   98d4a:	bf00      	nop
   98d4c:	40008000 	.word	0x40008000

00098d50 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   98d50:	b480      	push	{r7}
   98d52:	b083      	sub	sp, #12
   98d54:	af00      	add	r7, sp, #0
   98d56:	4603      	mov	r3, r0
   98d58:	6039      	str	r1, [r7, #0]
   98d5a:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   98d5c:	683b      	ldr	r3, [r7, #0]
   98d5e:	2b00      	cmp	r3, #0
   98d60:	d00c      	beq.n	98d7c <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   98d62:	490f      	ldr	r1, [pc, #60]	; (98da0 <dd_spi_set_clock_phase+0x50>)
   98d64:	88fb      	ldrh	r3, [r7, #6]
   98d66:	480e      	ldr	r0, [pc, #56]	; (98da0 <dd_spi_set_clock_phase+0x50>)
   98d68:	88fa      	ldrh	r2, [r7, #6]
   98d6a:	320c      	adds	r2, #12
   98d6c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98d70:	f042 0202 	orr.w	r2, r2, #2
   98d74:	330c      	adds	r3, #12
   98d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   98d7a:	e00b      	b.n	98d94 <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   98d7c:	4908      	ldr	r1, [pc, #32]	; (98da0 <dd_spi_set_clock_phase+0x50>)
   98d7e:	88fb      	ldrh	r3, [r7, #6]
   98d80:	4807      	ldr	r0, [pc, #28]	; (98da0 <dd_spi_set_clock_phase+0x50>)
   98d82:	88fa      	ldrh	r2, [r7, #6]
   98d84:	320c      	adds	r2, #12
   98d86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98d8a:	f022 0202 	bic.w	r2, r2, #2
   98d8e:	330c      	adds	r3, #12
   98d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   98d94:	bf00      	nop
   98d96:	370c      	adds	r7, #12
   98d98:	46bd      	mov	sp, r7
   98d9a:	bc80      	pop	{r7}
   98d9c:	4770      	bx	lr
   98d9e:	bf00      	nop
   98da0:	40008000 	.word	0x40008000

00098da4 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   98da4:	b480      	push	{r7}
   98da6:	b083      	sub	sp, #12
   98da8:	af00      	add	r7, sp, #0
   98daa:	4603      	mov	r3, r0
   98dac:	460a      	mov	r2, r1
   98dae:	80fb      	strh	r3, [r7, #6]
   98db0:	4613      	mov	r3, r2
   98db2:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   98db4:	797b      	ldrb	r3, [r7, #5]
   98db6:	2b00      	cmp	r3, #0
   98db8:	d102      	bne.n	98dc0 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   98dba:	f04f 33ff 	mov.w	r3, #4294967295
   98dbe:	e01a      	b.n	98df6 <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   98dc0:	490f      	ldr	r1, [pc, #60]	; (98e00 <dd_spi_set_baudrate_div+0x5c>)
   98dc2:	88fb      	ldrh	r3, [r7, #6]
   98dc4:	480e      	ldr	r0, [pc, #56]	; (98e00 <dd_spi_set_baudrate_div+0x5c>)
   98dc6:	88fa      	ldrh	r2, [r7, #6]
   98dc8:	320c      	adds	r2, #12
   98dca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   98dce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   98dd2:	330c      	adds	r3, #12
   98dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   98dd8:	4809      	ldr	r0, [pc, #36]	; (98e00 <dd_spi_set_baudrate_div+0x5c>)
   98dda:	88fb      	ldrh	r3, [r7, #6]
   98ddc:	4908      	ldr	r1, [pc, #32]	; (98e00 <dd_spi_set_baudrate_div+0x5c>)
   98dde:	88fa      	ldrh	r2, [r7, #6]
   98de0:	320c      	adds	r2, #12
   98de2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   98de6:	797a      	ldrb	r2, [r7, #5]
   98de8:	0212      	lsls	r2, r2, #8
   98dea:	b292      	uxth	r2, r2
   98dec:	430a      	orrs	r2, r1
   98dee:	330c      	adds	r3, #12
   98df0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   98df4:	2300      	movs	r3, #0
}
   98df6:	4618      	mov	r0, r3
   98df8:	370c      	adds	r7, #12
   98dfa:	46bd      	mov	sp, r7
   98dfc:	bc80      	pop	{r7}
   98dfe:	4770      	bx	lr
   98e00:	40008000 	.word	0x40008000

00098e04 <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   98e04:	b580      	push	{r7, lr}
   98e06:	b086      	sub	sp, #24
   98e08:	af00      	add	r7, sp, #0
   98e0a:	6078      	str	r0, [r7, #4]
   98e0c:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   98e0e:	687b      	ldr	r3, [r7, #4]
   98e10:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   98e12:	2300      	movs	r3, #0
   98e14:	617b      	str	r3, [r7, #20]
   98e16:	e029      	b.n	98e6c <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   98e18:	697b      	ldr	r3, [r7, #20]
   98e1a:	005b      	lsls	r3, r3, #1
   98e1c:	68fa      	ldr	r2, [r7, #12]
   98e1e:	4413      	add	r3, r2
   98e20:	881b      	ldrh	r3, [r3, #0]
   98e22:	4618      	mov	r0, r3
   98e24:	4b15      	ldr	r3, [pc, #84]	; (98e7c <DD_SPI_SET_POT+0x78>)
   98e26:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   98e28:	2300      	movs	r3, #0
   98e2a:	613b      	str	r3, [r7, #16]
   98e2c:	e002      	b.n	98e34 <DD_SPI_SET_POT+0x30>
   98e2e:	693b      	ldr	r3, [r7, #16]
   98e30:	3301      	adds	r3, #1
   98e32:	613b      	str	r3, [r7, #16]
   98e34:	693b      	ldr	r3, [r7, #16]
   98e36:	f242 720f 	movw	r2, #9999	; 0x270f
   98e3a:	4293      	cmp	r3, r2
   98e3c:	d9f7      	bls.n	98e2e <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   98e3e:	bf00      	nop
   98e40:	4b0f      	ldr	r3, [pc, #60]	; (98e80 <DD_SPI_SET_POT+0x7c>)
   98e42:	691b      	ldr	r3, [r3, #16]
   98e44:	f003 0301 	and.w	r3, r3, #1
   98e48:	2b00      	cmp	r3, #0
   98e4a:	d0f9      	beq.n	98e40 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   98e4c:	f107 030b 	add.w	r3, r7, #11
   98e50:	4619      	mov	r1, r3
   98e52:	480c      	ldr	r0, [pc, #48]	; (98e84 <DD_SPI_SET_POT+0x80>)
   98e54:	4b0c      	ldr	r3, [pc, #48]	; (98e88 <DD_SPI_SET_POT+0x84>)
   98e56:	4798      	blx	r3
		p_buffer[i] = data;
   98e58:	697b      	ldr	r3, [r7, #20]
   98e5a:	005b      	lsls	r3, r3, #1
   98e5c:	68fa      	ldr	r2, [r7, #12]
   98e5e:	4413      	add	r3, r2
   98e60:	4a08      	ldr	r2, [pc, #32]	; (98e84 <DD_SPI_SET_POT+0x80>)
   98e62:	8812      	ldrh	r2, [r2, #0]
   98e64:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   98e66:	697b      	ldr	r3, [r7, #20]
   98e68:	3301      	adds	r3, #1
   98e6a:	617b      	str	r3, [r7, #20]
   98e6c:	697a      	ldr	r2, [r7, #20]
   98e6e:	683b      	ldr	r3, [r7, #0]
   98e70:	429a      	cmp	r2, r3
   98e72:	d3d1      	bcc.n	98e18 <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   98e74:	bf00      	nop
   98e76:	3718      	adds	r7, #24
   98e78:	46bd      	mov	sp, r7
   98e7a:	bd80      	pop	{r7, pc}
   98e7c:	00098efd 	.word	0x00098efd
   98e80:	40008000 	.word	0x40008000
   98e84:	20071a36 	.word	0x20071a36
   98e88:	00098e8d 	.word	0x00098e8d

00098e8c <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   98e8c:	b480      	push	{r7}
   98e8e:	b085      	sub	sp, #20
   98e90:	af00      	add	r7, sp, #0
   98e92:	6078      	str	r0, [r7, #4]
   98e94:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   98e96:	f643 2398 	movw	r3, #15000	; 0x3a98
   98e9a:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   98e9c:	e006      	b.n	98eac <dd_spi_read+0x20>
		if (!timeout--) {
   98e9e:	68fb      	ldr	r3, [r7, #12]
   98ea0:	1e5a      	subs	r2, r3, #1
   98ea2:	60fa      	str	r2, [r7, #12]
   98ea4:	2b00      	cmp	r3, #0
   98ea6:	d101      	bne.n	98eac <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   98ea8:	2301      	movs	r3, #1
   98eaa:	e01e      	b.n	98eea <dd_spi_read+0x5e>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   98eac:	4b11      	ldr	r3, [pc, #68]	; (98ef4 <dd_spi_read+0x68>)
   98eae:	691b      	ldr	r3, [r3, #16]
   98eb0:	f003 0301 	and.w	r3, r3, #1
   98eb4:	2b00      	cmp	r3, #0
   98eb6:	d0f2      	beq.n	98e9e <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   98eb8:	4b0e      	ldr	r3, [pc, #56]	; (98ef4 <dd_spi_read+0x68>)
   98eba:	689b      	ldr	r3, [r3, #8]
   98ebc:	4a0e      	ldr	r2, [pc, #56]	; (98ef8 <dd_spi_read+0x6c>)
   98ebe:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   98ec0:	4b0c      	ldr	r3, [pc, #48]	; (98ef4 <dd_spi_read+0x68>)
   98ec2:	685b      	ldr	r3, [r3, #4]
   98ec4:	f003 0302 	and.w	r3, r3, #2
   98ec8:	2b00      	cmp	r3, #0
   98eca:	d008      	beq.n	98ede <dd_spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   98ecc:	4b0a      	ldr	r3, [pc, #40]	; (98ef8 <dd_spi_read+0x6c>)
   98ece:	681b      	ldr	r3, [r3, #0]
   98ed0:	0c1b      	lsrs	r3, r3, #16
   98ed2:	b2db      	uxtb	r3, r3
   98ed4:	f003 030f 	and.w	r3, r3, #15
   98ed8:	b2da      	uxtb	r2, r3
   98eda:	683b      	ldr	r3, [r7, #0]
   98edc:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   98ede:	4b06      	ldr	r3, [pc, #24]	; (98ef8 <dd_spi_read+0x6c>)
   98ee0:	681b      	ldr	r3, [r3, #0]
   98ee2:	b29a      	uxth	r2, r3
   98ee4:	687b      	ldr	r3, [r7, #4]
   98ee6:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   98ee8:	2300      	movs	r3, #0
}
   98eea:	4618      	mov	r0, r3
   98eec:	3714      	adds	r7, #20
   98eee:	46bd      	mov	sp, r7
   98ef0:	bc80      	pop	{r7}
   98ef2:	4770      	bx	lr
   98ef4:	40008000 	.word	0x40008000
   98ef8:	20071a38 	.word	0x20071a38

00098efc <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   98efc:	b480      	push	{r7}
   98efe:	b085      	sub	sp, #20
   98f00:	af00      	add	r7, sp, #0
   98f02:	4603      	mov	r3, r0
   98f04:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   98f06:	f643 2398 	movw	r3, #15000	; 0x3a98
   98f0a:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   98f0c:	e006      	b.n	98f1c <dd_spi_write+0x20>
		if (!timeout--) {
   98f0e:	68fb      	ldr	r3, [r7, #12]
   98f10:	1e5a      	subs	r2, r3, #1
   98f12:	60fa      	str	r2, [r7, #12]
   98f14:	2b00      	cmp	r3, #0
   98f16:	d101      	bne.n	98f1c <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   98f18:	2301      	movs	r3, #1
   98f1a:	e00b      	b.n	98f34 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   98f1c:	4b08      	ldr	r3, [pc, #32]	; (98f40 <dd_spi_write+0x44>)
   98f1e:	691b      	ldr	r3, [r3, #16]
   98f20:	f003 0302 	and.w	r3, r3, #2
   98f24:	2b00      	cmp	r3, #0
   98f26:	d0f2      	beq.n	98f0e <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   98f28:	88fb      	ldrh	r3, [r7, #6]
   98f2a:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   98f2c:	4a04      	ldr	r2, [pc, #16]	; (98f40 <dd_spi_write+0x44>)
   98f2e:	68bb      	ldr	r3, [r7, #8]
   98f30:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   98f32:	2300      	movs	r3, #0
}
   98f34:	4618      	mov	r0, r3
   98f36:	3714      	adds	r7, #20
   98f38:	46bd      	mov	sp, r7
   98f3a:	bc80      	pop	{r7}
   98f3c:	4770      	bx	lr
   98f3e:	bf00      	nop
   98f40:	40008000 	.word	0x40008000

00098f44 <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   98f44:	b580      	push	{r7, lr}
   98f46:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   98f48:	4b38      	ldr	r3, [pc, #224]	; (9902c <DD_INIT_SPI+0xe8>)
   98f4a:	4a39      	ldr	r2, [pc, #228]	; (99030 <DD_INIT_SPI+0xec>)
   98f4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   98f50:	4b36      	ldr	r3, [pc, #216]	; (9902c <DD_INIT_SPI+0xe8>)
   98f52:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   98f56:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   98f58:	4b36      	ldr	r3, [pc, #216]	; (99034 <DD_INIT_SPI+0xf0>)
   98f5a:	4a37      	ldr	r2, [pc, #220]	; (99038 <DD_INIT_SPI+0xf4>)
   98f5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   98f60:	4b36      	ldr	r3, [pc, #216]	; (9903c <DD_INIT_SPI+0xf8>)
   98f62:	4a37      	ldr	r2, [pc, #220]	; (99040 <DD_INIT_SPI+0xfc>)
   98f64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   98f68:	4832      	ldr	r0, [pc, #200]	; (99034 <DD_INIT_SPI+0xf0>)
   98f6a:	4b36      	ldr	r3, [pc, #216]	; (99044 <DD_INIT_SPI+0x100>)
   98f6c:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   98f6e:	4b31      	ldr	r3, [pc, #196]	; (99034 <DD_INIT_SPI+0xf0>)
   98f70:	2202      	movs	r2, #2
   98f72:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   98f74:	4b2f      	ldr	r3, [pc, #188]	; (99034 <DD_INIT_SPI+0xf0>)
   98f76:	2280      	movs	r2, #128	; 0x80
   98f78:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   98f7a:	4b2e      	ldr	r3, [pc, #184]	; (99034 <DD_INIT_SPI+0xf0>)
   98f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   98f80:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   98f82:	4a2c      	ldr	r2, [pc, #176]	; (99034 <DD_INIT_SPI+0xf0>)
   98f84:	4b2b      	ldr	r3, [pc, #172]	; (99034 <DD_INIT_SPI+0xf0>)
   98f86:	685b      	ldr	r3, [r3, #4]
   98f88:	f043 0301 	orr.w	r3, r3, #1
   98f8c:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   98f8e:	4a29      	ldr	r2, [pc, #164]	; (99034 <DD_INIT_SPI+0xf0>)
   98f90:	4b28      	ldr	r3, [pc, #160]	; (99034 <DD_INIT_SPI+0xf0>)
   98f92:	685b      	ldr	r3, [r3, #4]
   98f94:	f043 0310 	orr.w	r3, r3, #16
   98f98:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   98f9a:	4a26      	ldr	r2, [pc, #152]	; (99034 <DD_INIT_SPI+0xf0>)
   98f9c:	4b25      	ldr	r3, [pc, #148]	; (99034 <DD_INIT_SPI+0xf0>)
   98f9e:	685b      	ldr	r3, [r3, #4]
   98fa0:	f023 0302 	bic.w	r3, r3, #2
   98fa4:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   98fa6:	4a23      	ldr	r2, [pc, #140]	; (99034 <DD_INIT_SPI+0xf0>)
   98fa8:	4b22      	ldr	r3, [pc, #136]	; (99034 <DD_INIT_SPI+0xf0>)
   98faa:	685b      	ldr	r3, [r3, #4]
   98fac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   98fb0:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   98fb2:	4a20      	ldr	r2, [pc, #128]	; (99034 <DD_INIT_SPI+0xf0>)
   98fb4:	4b1f      	ldr	r3, [pc, #124]	; (99034 <DD_INIT_SPI+0xf0>)
   98fb6:	685b      	ldr	r3, [r3, #4]
   98fb8:	f023 0304 	bic.w	r3, r3, #4
   98fbc:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   98fbe:	491d      	ldr	r1, [pc, #116]	; (99034 <DD_INIT_SPI+0xf0>)
   98fc0:	4b1c      	ldr	r3, [pc, #112]	; (99034 <DD_INIT_SPI+0xf0>)
   98fc2:	685a      	ldr	r2, [r3, #4]
   98fc4:	4b20      	ldr	r3, [pc, #128]	; (99048 <DD_INIT_SPI+0x104>)
   98fc6:	781b      	ldrb	r3, [r3, #0]
   98fc8:	4618      	mov	r0, r3
   98fca:	2301      	movs	r3, #1
   98fcc:	4083      	lsls	r3, r0
   98fce:	43db      	mvns	r3, r3
   98fd0:	041b      	lsls	r3, r3, #16
   98fd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   98fd6:	4313      	orrs	r3, r2
   98fd8:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   98fda:	4b1b      	ldr	r3, [pc, #108]	; (99048 <DD_INIT_SPI+0x104>)
   98fdc:	781b      	ldrb	r3, [r3, #0]
   98fde:	b29b      	uxth	r3, r3
   98fe0:	2100      	movs	r1, #0
   98fe2:	4618      	mov	r0, r3
   98fe4:	4b19      	ldr	r3, [pc, #100]	; (9904c <DD_INIT_SPI+0x108>)
   98fe6:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   98fe8:	4b17      	ldr	r3, [pc, #92]	; (99048 <DD_INIT_SPI+0x104>)
   98fea:	781b      	ldrb	r3, [r3, #0]
   98fec:	b29b      	uxth	r3, r3
   98fee:	2100      	movs	r1, #0
   98ff0:	4618      	mov	r0, r3
   98ff2:	4b17      	ldr	r3, [pc, #92]	; (99050 <DD_INIT_SPI+0x10c>)
   98ff4:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   98ff6:	4b14      	ldr	r3, [pc, #80]	; (99048 <DD_INIT_SPI+0x104>)
   98ff8:	781b      	ldrb	r3, [r3, #0]
   98ffa:	b29b      	uxth	r3, r3
   98ffc:	2180      	movs	r1, #128	; 0x80
   98ffe:	4618      	mov	r0, r3
   99000:	4b14      	ldr	r3, [pc, #80]	; (99054 <DD_INIT_SPI+0x110>)
   99002:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   99004:	4b10      	ldr	r3, [pc, #64]	; (99048 <DD_INIT_SPI+0x104>)
   99006:	781b      	ldrb	r3, [r3, #0]
   99008:	b29b      	uxth	r3, r3
   9900a:	21ff      	movs	r1, #255	; 0xff
   9900c:	4618      	mov	r0, r3
   9900e:	4b12      	ldr	r3, [pc, #72]	; (99058 <DD_INIT_SPI+0x114>)
   99010:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   99012:	4b0d      	ldr	r3, [pc, #52]	; (99048 <DD_INIT_SPI+0x104>)
   99014:	781b      	ldrb	r3, [r3, #0]
   99016:	b29b      	uxth	r3, r3
   99018:	2210      	movs	r2, #16
   9901a:	2180      	movs	r1, #128	; 0x80
   9901c:	4618      	mov	r0, r3
   9901e:	4b0f      	ldr	r3, [pc, #60]	; (9905c <DD_INIT_SPI+0x118>)
   99020:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   99022:	4b04      	ldr	r3, [pc, #16]	; (99034 <DD_INIT_SPI+0xf0>)
   99024:	2201      	movs	r2, #1
   99026:	601a      	str	r2, [r3, #0]
}
   99028:	bf00      	nop
   9902a:	bd80      	pop	{r7, pc}
   9902c:	400e0e00 	.word	0x400e0e00
   99030:	50494f00 	.word	0x50494f00
   99034:	40008000 	.word	0x40008000
   99038:	53504900 	.word	0x53504900
   9903c:	400e0600 	.word	0x400e0600
   99040:	504d4300 	.word	0x504d4300
   99044:	000805dd 	.word	0x000805dd
   99048:	20071a34 	.word	0x20071a34
   9904c:	00098cfd 	.word	0x00098cfd
   99050:	00098d51 	.word	0x00098d51
   99054:	00098cb1 	.word	0x00098cb1
   99058:	00098da5 	.word	0x00098da5
   9905c:	00098c55 	.word	0x00098c55

00099060 <DD_ENABLE_BYPASS>:
//void BC_Switch1(void);
//void BC_Switch2(void);


uint8_t DD_ENABLE_BYPASS()
{
   99060:	b580      	push	{r7, lr}
   99062:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   99064:	200f      	movs	r0, #15
   99066:	4b07      	ldr	r3, [pc, #28]	; (99084 <DD_ENABLE_BYPASS+0x24>)
   99068:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   9906a:	200d      	movs	r0, #13
   9906c:	4b06      	ldr	r3, [pc, #24]	; (99088 <DD_ENABLE_BYPASS+0x28>)
   9906e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   99070:	200e      	movs	r0, #14
   99072:	4b05      	ldr	r3, [pc, #20]	; (99088 <DD_ENABLE_BYPASS+0x28>)
   99074:	4798      	blx	r3
				ByPass = true;
   99076:	4b05      	ldr	r3, [pc, #20]	; (9908c <DD_ENABLE_BYPASS+0x2c>)
   99078:	2201      	movs	r2, #1
   9907a:	701a      	strb	r2, [r3, #0]
	
	return 0;
   9907c:	2300      	movs	r3, #0
}
   9907e:	4618      	mov	r0, r3
   99080:	bd80      	pop	{r7, pc}
   99082:	bf00      	nop
   99084:	00099629 	.word	0x00099629
   99088:	000996e9 	.word	0x000996e9
   9908c:	20071a40 	.word	0x20071a40

00099090 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   99090:	b580      	push	{r7, lr}
   99092:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   99094:	200f      	movs	r0, #15
   99096:	4b07      	ldr	r3, [pc, #28]	; (990b4 <DD_DISABLE_BYPASS+0x24>)
   99098:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   9909a:	200d      	movs	r0, #13
   9909c:	4b06      	ldr	r3, [pc, #24]	; (990b8 <DD_DISABLE_BYPASS+0x28>)
   9909e:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   990a0:	200e      	movs	r0, #14
   990a2:	4b05      	ldr	r3, [pc, #20]	; (990b8 <DD_DISABLE_BYPASS+0x28>)
   990a4:	4798      	blx	r3
				ByPass = false;
   990a6:	4b05      	ldr	r3, [pc, #20]	; (990bc <DD_DISABLE_BYPASS+0x2c>)
   990a8:	2200      	movs	r2, #0
   990aa:	701a      	strb	r2, [r3, #0]
	
	return 0;
   990ac:	2300      	movs	r3, #0
}
   990ae:	4618      	mov	r0, r3
   990b0:	bd80      	pop	{r7, pc}
   990b2:	bf00      	nop
   990b4:	000996e9 	.word	0x000996e9
   990b8:	00099629 	.word	0x00099629
   990bc:	20071a40 	.word	0x20071a40

000990c0 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   990c0:	b580      	push	{r7, lr}
   990c2:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   990c4:	4b05      	ldr	r3, [pc, #20]	; (990dc <DD_ENABLE_LOOPBACK+0x1c>)
   990c6:	2201      	movs	r2, #1
   990c8:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   990ca:	2010      	movs	r0, #16
   990cc:	4b04      	ldr	r3, [pc, #16]	; (990e0 <DD_ENABLE_LOOPBACK+0x20>)
   990ce:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   990d0:	2012      	movs	r0, #18
   990d2:	4b04      	ldr	r3, [pc, #16]	; (990e4 <DD_ENABLE_LOOPBACK+0x24>)
   990d4:	4798      	blx	r3
				
	return 0;
   990d6:	2300      	movs	r3, #0
}
   990d8:	4618      	mov	r0, r3
   990da:	bd80      	pop	{r7, pc}
   990dc:	20071a41 	.word	0x20071a41
   990e0:	00099629 	.word	0x00099629
   990e4:	000996e9 	.word	0x000996e9

000990e8 <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   990e8:	b580      	push	{r7, lr}
   990ea:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   990ec:	4b05      	ldr	r3, [pc, #20]	; (99104 <DD_DISABLE_LOOPBACK+0x1c>)
   990ee:	2200      	movs	r2, #0
   990f0:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   990f2:	2010      	movs	r0, #16
   990f4:	4b04      	ldr	r3, [pc, #16]	; (99108 <DD_DISABLE_LOOPBACK+0x20>)
   990f6:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   990f8:	2012      	movs	r0, #18
   990fa:	4b04      	ldr	r3, [pc, #16]	; (9910c <DD_DISABLE_LOOPBACK+0x24>)
   990fc:	4798      	blx	r3
	return 0;
   990fe:	2300      	movs	r3, #0
}
   99100:	4618      	mov	r0, r3
   99102:	bd80      	pop	{r7, pc}
   99104:	20071a41 	.word	0x20071a41
   99108:	000996e9 	.word	0x000996e9
   9910c:	00099629 	.word	0x00099629

00099110 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   99110:	b580      	push	{r7, lr}
   99112:	b084      	sub	sp, #16
   99114:	af00      	add	r7, sp, #0
   99116:	4603      	mov	r3, r0
   99118:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   9911a:	79fb      	ldrb	r3, [r7, #7]
   9911c:	3b01      	subs	r3, #1
   9911e:	2b04      	cmp	r3, #4
   99120:	d858      	bhi.n	991d4 <DD_SET_PUMP+0xc4>
   99122:	a201      	add	r2, pc, #4	; (adr r2, 99128 <DD_SET_PUMP+0x18>)
   99124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99128:	0009913d 	.word	0x0009913d
   9912c:	00099161 	.word	0x00099161
   99130:	000991d5 	.word	0x000991d5
   99134:	00099185 	.word	0x00099185
   99138:	000991bb 	.word	0x000991bb
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   9913c:	2314      	movs	r3, #20
   9913e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99140:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99144:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   99146:	4b26      	ldr	r3, [pc, #152]	; (991e0 <DD_SET_PUMP+0xd0>)
   99148:	2204      	movs	r2, #4
   9914a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   9914c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   99150:	2014      	movs	r0, #20
   99152:	4b24      	ldr	r3, [pc, #144]	; (991e4 <DD_SET_PUMP+0xd4>)
   99154:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   99156:	68f9      	ldr	r1, [r7, #12]
   99158:	68b8      	ldr	r0, [r7, #8]
   9915a:	4b23      	ldr	r3, [pc, #140]	; (991e8 <DD_SET_PUMP+0xd8>)
   9915c:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   9915e:	e039      	b.n	991d4 <DD_SET_PUMP+0xc4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   99160:	2315      	movs	r3, #21
   99162:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99168:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   9916a:	4b1d      	ldr	r3, [pc, #116]	; (991e0 <DD_SET_PUMP+0xd0>)
   9916c:	2201      	movs	r2, #1
   9916e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   99170:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   99174:	2015      	movs	r0, #21
   99176:	4b1b      	ldr	r3, [pc, #108]	; (991e4 <DD_SET_PUMP+0xd4>)
   99178:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9917a:	68f9      	ldr	r1, [r7, #12]
   9917c:	68b8      	ldr	r0, [r7, #8]
   9917e:	4b1a      	ldr	r3, [pc, #104]	; (991e8 <DD_SET_PUMP+0xd8>)
   99180:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   99182:	e027      	b.n	991d4 <DD_SET_PUMP+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   99184:	2316      	movs	r3, #22
   99186:	60fb      	str	r3, [r7, #12]
		peri = PC;
   99188:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9918c:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   9918e:	68f9      	ldr	r1, [r7, #12]
   99190:	68b8      	ldr	r0, [r7, #8]
   99192:	4b16      	ldr	r3, [pc, #88]	; (991ec <DD_SET_PUMP+0xdc>)
   99194:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   99196:	4b12      	ldr	r3, [pc, #72]	; (991e0 <DD_SET_PUMP+0xd0>)
   99198:	2220      	movs	r2, #32
   9919a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   9919c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   991a0:	2056      	movs	r0, #86	; 0x56
   991a2:	4b10      	ldr	r3, [pc, #64]	; (991e4 <DD_SET_PUMP+0xd4>)
   991a4:	4798      	blx	r3
		
		p_io = 15;
   991a6:	230f      	movs	r3, #15
   991a8:	60fb      	str	r3, [r7, #12]
		peri = PA;
   991aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   991ae:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   991b0:	68f9      	ldr	r1, [r7, #12]
   991b2:	68b8      	ldr	r0, [r7, #8]
   991b4:	4b0d      	ldr	r3, [pc, #52]	; (991ec <DD_SET_PUMP+0xdc>)
   991b6:	4798      	blx	r3
		break;
   991b8:	e00c      	b.n	991d4 <DD_SET_PUMP+0xc4>
		
		case HEPARINPUMP: // HEPARIN PUMP

		PWM->PWM_ENA =0x00000010;
   991ba:	4b09      	ldr	r3, [pc, #36]	; (991e0 <DD_SET_PUMP+0xd0>)
   991bc:	2210      	movs	r2, #16
   991be:	605a      	str	r2, [r3, #4]
//		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		p_io = 2;
   991c0:	2302      	movs	r3, #2
   991c2:	60fb      	str	r3, [r7, #12]
		peri = PD;
   991c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   991c8:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   991ca:	68f9      	ldr	r1, [r7, #12]
   991cc:	68b8      	ldr	r0, [r7, #8]
   991ce:	4b07      	ldr	r3, [pc, #28]	; (991ec <DD_SET_PUMP+0xdc>)
   991d0:	4798      	blx	r3

		break;
   991d2:	bf00      	nop
				
	}
	
	
	
	return 0;
   991d4:	2300      	movs	r3, #0
}
   991d6:	4618      	mov	r0, r3
   991d8:	3710      	adds	r7, #16
   991da:	46bd      	mov	sp, r7
   991dc:	bd80      	pop	{r7, pc}
   991de:	bf00      	nop
   991e0:	40094000 	.word	0x40094000
   991e4:	0009ba1d 	.word	0x0009ba1d
   991e8:	000980cd 	.word	0x000980cd
   991ec:	000981d5 	.word	0x000981d5

000991f0 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   991f0:	b580      	push	{r7, lr}
   991f2:	b082      	sub	sp, #8
   991f4:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	p_io = 28;
   991f6:	231c      	movs	r3, #28
   991f8:	607b      	str	r3, [r7, #4]
	peri = PC;                               // tURN ON SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   991fa:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   991fe:	603b      	str	r3, [r7, #0]
	DD_SET_PIO(peri,p_io);
   99200:	6879      	ldr	r1, [r7, #4]
   99202:	6838      	ldr	r0, [r7, #0]
   99204:	4b0d      	ldr	r3, [pc, #52]	; (9923c <DD_SET_HEATER+0x4c>)
   99206:	4798      	blx	r3
	cl_wait(100);
   99208:	2064      	movs	r0, #100	; 0x64
   9920a:	4b0d      	ldr	r3, [pc, #52]	; (99240 <DD_SET_HEATER+0x50>)
   9920c:	4798      	blx	r3
	
	PWM->PWM_ENA =0x00000002;
   9920e:	4b0d      	ldr	r3, [pc, #52]	; (99244 <DD_SET_HEATER+0x54>)
   99210:	2202      	movs	r2, #2
   99212:	605a      	str	r2, [r3, #4]
	p_io = 12;
   99214:	230c      	movs	r3, #12
   99216:	607b      	str	r3, [r7, #4]
	peri = PA;
   99218:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9921c:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;            // TURN ON pwm ( TRIAC) AFTER 100ms DELAY
	PIOA->PIO_PDR = 1<<p_io;
   9921e:	4a0a      	ldr	r2, [pc, #40]	; (99248 <DD_SET_HEATER+0x58>)
   99220:	2101      	movs	r1, #1
   99222:	687b      	ldr	r3, [r7, #4]
   99224:	fa01 f303 	lsl.w	r3, r1, r3
   99228:	6053      	str	r3, [r2, #4]
	DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9922a:	6879      	ldr	r1, [r7, #4]
   9922c:	6838      	ldr	r0, [r7, #0]
   9922e:	4b07      	ldr	r3, [pc, #28]	; (9924c <DD_SET_HEATER+0x5c>)
   99230:	4798      	blx	r3
	
	
	
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   99232:	2300      	movs	r3, #0
}
   99234:	4618      	mov	r0, r3
   99236:	3708      	adds	r7, #8
   99238:	46bd      	mov	sp, r7
   9923a:	bd80      	pop	{r7, pc}
   9923c:	00098151 	.word	0x00098151
   99240:	00093ea9 	.word	0x00093ea9
   99244:	40094000 	.word	0x40094000
   99248:	400e0e00 	.word	0x400e0e00
   9924c:	000980cd 	.word	0x000980cd

00099250 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   99250:	b580      	push	{r7, lr}
   99252:	b082      	sub	sp, #8
   99254:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	PWM->PWM_DIS =0x00000002;
   99256:	4b11      	ldr	r3, [pc, #68]	; (9929c <DD_RESET_HEATER+0x4c>)
   99258:	2202      	movs	r2, #2
   9925a:	609a      	str	r2, [r3, #8]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	
	p_io = 12;
   9925c:	230c      	movs	r3, #12
   9925e:	607b      	str	r3, [r7, #4]
	peri = PA;                                        // TURN OFF pwm ( TRIAC) AFTER 100ms DELAY
   99260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99264:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;
	PIOA->PIO_PDR = 1<<p_io;
   99266:	4a0e      	ldr	r2, [pc, #56]	; (992a0 <DD_RESET_HEATER+0x50>)
   99268:	2101      	movs	r1, #1
   9926a:	687b      	ldr	r3, [r7, #4]
   9926c:	fa01 f303 	lsl.w	r3, r1, r3
   99270:	6053      	str	r3, [r2, #4]
	DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   99272:	6879      	ldr	r1, [r7, #4]
   99274:	6838      	ldr	r0, [r7, #0]
   99276:	4b0b      	ldr	r3, [pc, #44]	; (992a4 <DD_RESET_HEATER+0x54>)
   99278:	4798      	blx	r3
	
	cl_wait(100);
   9927a:	2064      	movs	r0, #100	; 0x64
   9927c:	4b0a      	ldr	r3, [pc, #40]	; (992a8 <DD_RESET_HEATER+0x58>)
   9927e:	4798      	blx	r3
	p_io = 28;
   99280:	231c      	movs	r3, #28
   99282:	607b      	str	r3, [r7, #4]
	peri = PC;                                    // tURN OFF SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   99284:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99288:	603b      	str	r3, [r7, #0]
	DD_RESET_PIO(peri,p_io);
   9928a:	6879      	ldr	r1, [r7, #4]
   9928c:	6838      	ldr	r0, [r7, #0]
   9928e:	4b07      	ldr	r3, [pc, #28]	; (992ac <DD_RESET_HEATER+0x5c>)
   99290:	4798      	blx	r3
	return 0;
   99292:	2300      	movs	r3, #0
}
   99294:	4618      	mov	r0, r3
   99296:	3708      	adds	r7, #8
   99298:	46bd      	mov	sp, r7
   9929a:	bd80      	pop	{r7, pc}
   9929c:	40094000 	.word	0x40094000
   992a0:	400e0e00 	.word	0x400e0e00
   992a4:	00098019 	.word	0x00098019
   992a8:	00093ea9 	.word	0x00093ea9
   992ac:	000981d5 	.word	0x000981d5

000992b0 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   992b0:	b580      	push	{r7, lr}
   992b2:	b084      	sub	sp, #16
   992b4:	af00      	add	r7, sp, #0
   992b6:	4603      	mov	r3, r0
   992b8:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   992ba:	79fb      	ldrb	r3, [r7, #7]
   992bc:	3b01      	subs	r3, #1
   992be:	2b04      	cmp	r3, #4
   992c0:	d85b      	bhi.n	9937a <DD_RESET_PUMP+0xca>
   992c2:	a201      	add	r2, pc, #4	; (adr r2, 992c8 <DD_RESET_PUMP+0x18>)
   992c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   992c8:	000992dd 	.word	0x000992dd
   992cc:	00099309 	.word	0x00099309
   992d0:	0009937b 	.word	0x0009937b
   992d4:	00099335 	.word	0x00099335
   992d8:	00099361 	.word	0x00099361
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   992dc:	2314      	movs	r3, #20
   992de:	60fb      	str	r3, [r7, #12]
		peri = PA;
   992e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   992e4:	60bb      	str	r3, [r7, #8]
		//DD_SET_DUTY(2,0);
		
		
		PWM->PWM_DIS =0x00000004;
   992e6:	4b27      	ldr	r3, [pc, #156]	; (99384 <DD_RESET_PUMP+0xd4>)
   992e8:	2204      	movs	r2, #4
   992ea:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   992ec:	4b26      	ldr	r3, [pc, #152]	; (99388 <DD_RESET_PUMP+0xd8>)
   992ee:	4a27      	ldr	r2, [pc, #156]	; (9938c <DD_RESET_PUMP+0xdc>)
   992f0:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   992f2:	4a25      	ldr	r2, [pc, #148]	; (99388 <DD_RESET_PUMP+0xd8>)
   992f4:	2101      	movs	r1, #1
   992f6:	68fb      	ldr	r3, [r7, #12]
   992f8:	fa01 f303 	lsl.w	r3, r1, r3
   992fc:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   992fe:	68f9      	ldr	r1, [r7, #12]
   99300:	68b8      	ldr	r0, [r7, #8]
   99302:	4b23      	ldr	r3, [pc, #140]	; (99390 <DD_RESET_PUMP+0xe0>)
   99304:	4798      	blx	r3
		
		//DD_RESET_PIO(peri,p_io);
		
		break;
   99306:	e038      	b.n	9937a <DD_RESET_PUMP+0xca>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   99308:	2315      	movs	r3, #21
   9930a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   9930c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99310:	60bb      	str	r3, [r7, #8]
	//	DD_SET_DUTY(0,0);
		
		PWM->PWM_DIS =0x00000001;
   99312:	4b1c      	ldr	r3, [pc, #112]	; (99384 <DD_RESET_PUMP+0xd4>)
   99314:	2201      	movs	r2, #1
   99316:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   99318:	4b1b      	ldr	r3, [pc, #108]	; (99388 <DD_RESET_PUMP+0xd8>)
   9931a:	4a1c      	ldr	r2, [pc, #112]	; (9938c <DD_RESET_PUMP+0xdc>)
   9931c:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   9931e:	4a1a      	ldr	r2, [pc, #104]	; (99388 <DD_RESET_PUMP+0xd8>)
   99320:	2101      	movs	r1, #1
   99322:	68fb      	ldr	r3, [r7, #12]
   99324:	fa01 f303 	lsl.w	r3, r1, r3
   99328:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9932a:	68f9      	ldr	r1, [r7, #12]
   9932c:	68b8      	ldr	r0, [r7, #8]
   9932e:	4b18      	ldr	r3, [pc, #96]	; (99390 <DD_RESET_PUMP+0xe0>)
   99330:	4798      	blx	r3
		
	//	DD_RESET_PIO(peri,p_io);
		
		break;
   99332:	e022      	b.n	9937a <DD_RESET_PUMP+0xca>
		case BLOODPUMP: //BLOOD PUMP

		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   99334:	2316      	movs	r3, #22
   99336:	60fb      	str	r3, [r7, #12]
		peri = PC;
   99338:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9933c:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9933e:	68f9      	ldr	r1, [r7, #12]
   99340:	68b8      	ldr	r0, [r7, #8]
   99342:	4b13      	ldr	r3, [pc, #76]	; (99390 <DD_RESET_PUMP+0xe0>)
   99344:	4798      	blx	r3
	//	DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000020;
   99346:	4b0f      	ldr	r3, [pc, #60]	; (99384 <DD_RESET_PUMP+0xd4>)
   99348:	2220      	movs	r2, #32
   9934a:	609a      	str	r2, [r3, #8]
		
		p_io = 15;
   9934c:	230f      	movs	r3, #15
   9934e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   99350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99354:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   99356:	68f9      	ldr	r1, [r7, #12]
   99358:	68b8      	ldr	r0, [r7, #8]
   9935a:	4b0e      	ldr	r3, [pc, #56]	; (99394 <DD_RESET_PUMP+0xe4>)
   9935c:	4798      	blx	r3
		break;
   9935e:	e00c      	b.n	9937a <DD_RESET_PUMP+0xca>
		
		case HEPARINPUMP: // HEPARIN PUMP
	
		p_io = 2;
   99360:	2302      	movs	r3, #2
   99362:	60fb      	str	r3, [r7, #12]
		peri = PD;
   99364:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99368:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   9936a:	68f9      	ldr	r1, [r7, #12]
   9936c:	68b8      	ldr	r0, [r7, #8]
   9936e:	4b09      	ldr	r3, [pc, #36]	; (99394 <DD_RESET_PUMP+0xe4>)
   99370:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_DUTY(4,0);
		PWM->PWM_DIS =0x00000010;
   99372:	4b04      	ldr	r3, [pc, #16]	; (99384 <DD_RESET_PUMP+0xd4>)
   99374:	2210      	movs	r2, #16
   99376:	609a      	str	r2, [r3, #8]
		break;
   99378:	bf00      	nop
	
	}
	
	
	
	return 0;
   9937a:	2300      	movs	r3, #0
	
}
   9937c:	4618      	mov	r0, r3
   9937e:	3710      	adds	r7, #16
   99380:	46bd      	mov	sp, r7
   99382:	bd80      	pop	{r7, pc}
   99384:	40094000 	.word	0x40094000
   99388:	400e0e00 	.word	0x400e0e00
   9938c:	00391000 	.word	0x00391000
   99390:	00098019 	.word	0x00098019
   99394:	00098151 	.word	0x00098151

00099398 <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   99398:	b580      	push	{r7, lr}
   9939a:	b086      	sub	sp, #24
   9939c:	af00      	add	r7, sp, #0
   9939e:	4603      	mov	r3, r0
   993a0:	6039      	str	r1, [r7, #0]
   993a2:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   993a4:	79fb      	ldrb	r3, [r7, #7]
   993a6:	3b01      	subs	r3, #1
   993a8:	2b04      	cmp	r3, #4
   993aa:	f200 8082 	bhi.w	994b2 <DD_SET_SPEED+0x11a>
   993ae:	a201      	add	r2, pc, #4	; (adr r2, 993b4 <DD_SET_SPEED+0x1c>)
   993b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   993b4:	000993c9 	.word	0x000993c9
   993b8:	000993dd 	.word	0x000993dd
   993bc:	000993f1 	.word	0x000993f1
   993c0:	00099473 	.word	0x00099473
   993c4:	00099493 	.word	0x00099493
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   993c8:	2302      	movs	r3, #2
   993ca:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   993cc:	683b      	ldr	r3, [r7, #0]
   993ce:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   993d0:	7bfb      	ldrb	r3, [r7, #15]
   993d2:	6939      	ldr	r1, [r7, #16]
   993d4:	4618      	mov	r0, r3
   993d6:	4b39      	ldr	r3, [pc, #228]	; (994bc <DD_SET_SPEED+0x124>)
   993d8:	4798      	blx	r3
		break;
   993da:	e06a      	b.n	994b2 <DD_SET_SPEED+0x11a>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   993dc:	2300      	movs	r3, #0
   993de:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   993e0:	683b      	ldr	r3, [r7, #0]
   993e2:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   993e4:	7bfb      	ldrb	r3, [r7, #15]
   993e6:	6939      	ldr	r1, [r7, #16]
   993e8:	4618      	mov	r0, r3
   993ea:	4b34      	ldr	r3, [pc, #208]	; (994bc <DD_SET_SPEED+0x124>)
   993ec:	4798      	blx	r3
		break;
   993ee:	e060      	b.n	994b2 <DD_SET_SPEED+0x11a>
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   993f0:	683b      	ldr	r3, [r7, #0]
   993f2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   993f6:	d01c      	beq.n	99432 <DD_SET_SPEED+0x9a>
   993f8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   993fc:	d804      	bhi.n	99408 <DD_SET_SPEED+0x70>
   993fe:	2bc8      	cmp	r3, #200	; 0xc8
   99400:	d009      	beq.n	99416 <DD_SET_SPEED+0x7e>
   99402:	2bf0      	cmp	r3, #240	; 0xf0
   99404:	d00e      	beq.n	99424 <DD_SET_SPEED+0x8c>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   99406:	e029      	b.n	9945c <DD_SET_SPEED+0xc4>
		DD_SET_DUTY(pwm_ch_no,dty_val);
		break;
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   99408:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   9940c:	d018      	beq.n	99440 <DD_SET_SPEED+0xa8>
   9940e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   99412:	d01c      	beq.n	9944e <DD_SET_SPEED+0xb6>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   99414:	e022      	b.n	9945c <DD_SET_SPEED+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   99416:	f44f 73b8 	mov.w	r3, #368	; 0x170
   9941a:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   9941c:	f240 3375 	movw	r3, #885	; 0x375
   99420:	617b      	str	r3, [r7, #20]
			break;
   99422:	e01b      	b.n	9945c <DD_SET_SPEED+0xc4>
			case 240:
			dty_val = 0x00000150;
   99424:	f44f 73a8 	mov.w	r3, #336	; 0x150
   99428:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   9942a:	f44f 7340 	mov.w	r3, #768	; 0x300
   9942e:	617b      	str	r3, [r7, #20]
			break;
   99430:	e014      	b.n	9945c <DD_SET_SPEED+0xc4>
			case 280:
			dty_val = 0x00000130;
   99432:	f44f 7398 	mov.w	r3, #304	; 0x130
   99436:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   99438:	f44f 7320 	mov.w	r3, #640	; 0x280
   9943c:	617b      	str	r3, [r7, #20]
			break;
   9943e:	e00d      	b.n	9945c <DD_SET_SPEED+0xc4>
			case 320:
			dty_val = 0x00000120;
   99440:	f44f 7390 	mov.w	r3, #288	; 0x120
   99444:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   99446:	f44f 7314 	mov.w	r3, #592	; 0x250
   9944a:	617b      	str	r3, [r7, #20]
			break;
   9944c:	e006      	b.n	9945c <DD_SET_SPEED+0xc4>
			case 360:
			dty_val = 0x00000110;
   9944e:	f44f 7388 	mov.w	r3, #272	; 0x110
   99452:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   99454:	f44f 7304 	mov.w	r3, #528	; 0x210
   99458:	617b      	str	r3, [r7, #20]
			break;
   9945a:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   9945c:	7bfb      	ldrb	r3, [r7, #15]
   9945e:	6939      	ldr	r1, [r7, #16]
   99460:	4618      	mov	r0, r3
   99462:	4b16      	ldr	r3, [pc, #88]	; (994bc <DD_SET_SPEED+0x124>)
   99464:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   99466:	7bfb      	ldrb	r3, [r7, #15]
   99468:	6979      	ldr	r1, [r7, #20]
   9946a:	4618      	mov	r0, r3
   9946c:	4b14      	ldr	r3, [pc, #80]	; (994c0 <DD_SET_SPEED+0x128>)
   9946e:	4798      	blx	r3
		break;
   99470:	e01f      	b.n	994b2 <DD_SET_SPEED+0x11a>
		
		case UFPUMP: // UF PUMP
		pwm_ch_no = 5;
   99472:	2305      	movs	r3, #5
   99474:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   99476:	683b      	ldr	r3, [r7, #0]
   99478:	085b      	lsrs	r3, r3, #1
   9947a:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   9947c:	7bfb      	ldrb	r3, [r7, #15]
   9947e:	6939      	ldr	r1, [r7, #16]
   99480:	4618      	mov	r0, r3
   99482:	4b0e      	ldr	r3, [pc, #56]	; (994bc <DD_SET_SPEED+0x124>)
   99484:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   99486:	7bfb      	ldrb	r3, [r7, #15]
   99488:	6839      	ldr	r1, [r7, #0]
   9948a:	4618      	mov	r0, r3
   9948c:	4b0c      	ldr	r3, [pc, #48]	; (994c0 <DD_SET_SPEED+0x128>)
   9948e:	4798      	blx	r3
		break;
   99490:	e00f      	b.n	994b2 <DD_SET_SPEED+0x11a>
		
		case HEPARINPUMP: // HEPARIN PUMP
		pwm_ch_no = 4;
   99492:	2304      	movs	r3, #4
   99494:	73fb      	strb	r3, [r7, #15]
		// convert into duty count
		dty_val = speed/2;
   99496:	683b      	ldr	r3, [r7, #0]
   99498:	085b      	lsrs	r3, r3, #1
   9949a:	613b      	str	r3, [r7, #16]
		
		DD_SET_DUTY(pwm_ch_no,dty_val);
   9949c:	7bfb      	ldrb	r3, [r7, #15]
   9949e:	6939      	ldr	r1, [r7, #16]
   994a0:	4618      	mov	r0, r3
   994a2:	4b06      	ldr	r3, [pc, #24]	; (994bc <DD_SET_SPEED+0x124>)
   994a4:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   994a6:	7bfb      	ldrb	r3, [r7, #15]
   994a8:	6839      	ldr	r1, [r7, #0]
   994aa:	4618      	mov	r0, r3
   994ac:	4b04      	ldr	r3, [pc, #16]	; (994c0 <DD_SET_SPEED+0x128>)
   994ae:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		break;
   994b0:	bf00      	nop
	}
	
	return 0;
   994b2:	2300      	movs	r3, #0
}
   994b4:	4618      	mov	r0, r3
   994b6:	3718      	adds	r7, #24
   994b8:	46bd      	mov	sp, r7
   994ba:	bd80      	pop	{r7, pc}
   994bc:	00098bfd 	.word	0x00098bfd
   994c0:	00098c29 	.word	0x00098c29

000994c4 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   994c4:	b580      	push	{r7, lr}
   994c6:	b084      	sub	sp, #16
   994c8:	af00      	add	r7, sp, #0
   994ca:	4603      	mov	r3, r0
   994cc:	6039      	str	r1, [r7, #0]
   994ce:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   994d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   994d4:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   994d6:	683b      	ldr	r3, [r7, #0]
   994d8:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   994da:	79fb      	ldrb	r3, [r7, #7]
   994dc:	2b01      	cmp	r3, #1
   994de:	d002      	beq.n	994e6 <DD_SET_PUMPFREQ+0x22>
   994e0:	2b02      	cmp	r3, #2
   994e2:	d008      	beq.n	994f6 <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   994e4:	e00f      	b.n	99506 <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   994e6:	2302      	movs	r3, #2
   994e8:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   994ea:	7afb      	ldrb	r3, [r7, #11]
   994ec:	68f9      	ldr	r1, [r7, #12]
   994ee:	4618      	mov	r0, r3
   994f0:	4b07      	ldr	r3, [pc, #28]	; (99510 <DD_SET_PUMPFREQ+0x4c>)
   994f2:	4798      	blx	r3
								
				break;
   994f4:	e007      	b.n	99506 <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   994f6:	2300      	movs	r3, #0
   994f8:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   994fa:	7afb      	ldrb	r3, [r7, #11]
   994fc:	68f9      	ldr	r1, [r7, #12]
   994fe:	4618      	mov	r0, r3
   99500:	4b03      	ldr	r3, [pc, #12]	; (99510 <DD_SET_PUMPFREQ+0x4c>)
   99502:	4798      	blx	r3
							
				
				break;
   99504:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   99506:	2300      	movs	r3, #0
}
   99508:	4618      	mov	r0, r3
   9950a:	3710      	adds	r7, #16
   9950c:	46bd      	mov	sp, r7
   9950e:	bd80      	pop	{r7, pc}
   99510:	00098c29 	.word	0x00098c29

00099514 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   99514:	b580      	push	{r7, lr}
   99516:	b084      	sub	sp, #16
   99518:	af00      	add	r7, sp, #0
   9951a:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   9951c:	2301      	movs	r3, #1
   9951e:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   99520:	7bfb      	ldrb	r3, [r7, #15]
   99522:	6879      	ldr	r1, [r7, #4]
   99524:	4618      	mov	r0, r3
   99526:	4b03      	ldr	r3, [pc, #12]	; (99534 <DD_CHNG_HTR+0x20>)
   99528:	4798      	blx	r3
	
	return 0;
   9952a:	2300      	movs	r3, #0
}
   9952c:	4618      	mov	r0, r3
   9952e:	3710      	adds	r7, #16
   99530:	46bd      	mov	sp, r7
   99532:	bd80      	pop	{r7, pc}
   99534:	00098bfd 	.word	0x00098bfd

00099538 <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   99538:	b580      	push	{r7, lr}
   9953a:	b082      	sub	sp, #8
   9953c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   9953e:	2301      	movs	r3, #1
   99540:	607b      	str	r3, [r7, #4]
	peri = PD;
   99542:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99546:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   99548:	6879      	ldr	r1, [r7, #4]
   9954a:	6838      	ldr	r0, [r7, #0]
   9954c:	4b03      	ldr	r3, [pc, #12]	; (9955c <DD_SET_DIR+0x24>)
   9954e:	4798      	blx	r3
	
	return 0;
   99550:	2300      	movs	r3, #0
}
   99552:	4618      	mov	r0, r3
   99554:	3708      	adds	r7, #8
   99556:	46bd      	mov	sp, r7
   99558:	bd80      	pop	{r7, pc}
   9955a:	bf00      	nop
   9955c:	00098151 	.word	0x00098151

00099560 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   99560:	b580      	push	{r7, lr}
   99562:	b082      	sub	sp, #8
   99564:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   99566:	2301      	movs	r3, #1
   99568:	607b      	str	r3, [r7, #4]
	peri = PD;
   9956a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9956e:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   99570:	6879      	ldr	r1, [r7, #4]
   99572:	6838      	ldr	r0, [r7, #0]
   99574:	4b03      	ldr	r3, [pc, #12]	; (99584 <DD_RESET_DIR+0x24>)
   99576:	4798      	blx	r3
	
	return 0;
   99578:	2300      	movs	r3, #0
}
   9957a:	4618      	mov	r0, r3
   9957c:	3708      	adds	r7, #8
   9957e:	46bd      	mov	sp, r7
   99580:	bd80      	pop	{r7, pc}
   99582:	bf00      	nop
   99584:	000981d5 	.word	0x000981d5

00099588 <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   99588:	b580      	push	{r7, lr}
   9958a:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_RED);
   9958c:	201e      	movs	r0, #30
   9958e:	4b02      	ldr	r3, [pc, #8]	; (99598 <DD_SET_RED+0x10>)
   99590:	4798      	blx	r3
	return 0;
   99592:	2300      	movs	r3, #0
}
   99594:	4618      	mov	r0, r3
   99596:	bd80      	pop	{r7, pc}
   99598:	00099629 	.word	0x00099629

0009959c <DD_SET_GREEN>:
uint8_t DD_SET_GREEN()               // GREEN
{
   9959c:	b580      	push	{r7, lr}
   9959e:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_GREEN);
   995a0:	2020      	movs	r0, #32
   995a2:	4b02      	ldr	r3, [pc, #8]	; (995ac <DD_SET_GREEN+0x10>)
   995a4:	4798      	blx	r3
	return 0;
   995a6:	2300      	movs	r3, #0
}
   995a8:	4618      	mov	r0, r3
   995aa:	bd80      	pop	{r7, pc}
   995ac:	00099629 	.word	0x00099629

000995b0 <DD_SET_YELLOW>:
uint8_t DD_SET_YELLOW()               // YELLOW
{
   995b0:	b580      	push	{r7, lr}
   995b2:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_AMBER);
   995b4:	201f      	movs	r0, #31
   995b6:	4b02      	ldr	r3, [pc, #8]	; (995c0 <DD_SET_YELLOW+0x10>)
   995b8:	4798      	blx	r3
	return 0;
   995ba:	2300      	movs	r3, #0
}
   995bc:	4618      	mov	r0, r3
   995be:	bd80      	pop	{r7, pc}
   995c0:	00099629 	.word	0x00099629

000995c4 <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   995c4:	b580      	push	{r7, lr}
   995c6:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_BUZZER);
   995c8:	201d      	movs	r0, #29
   995ca:	4b02      	ldr	r3, [pc, #8]	; (995d4 <DD_SET_BUZZER+0x10>)
   995cc:	4798      	blx	r3
	return 0;
   995ce:	2300      	movs	r3, #0
}
   995d0:	4618      	mov	r0, r3
   995d2:	bd80      	pop	{r7, pc}
   995d4:	00099629 	.word	0x00099629

000995d8 <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   995d8:	b580      	push	{r7, lr}
   995da:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_RED);
   995dc:	201e      	movs	r0, #30
   995de:	4b02      	ldr	r3, [pc, #8]	; (995e8 <DD_RESET_RED+0x10>)
   995e0:	4798      	blx	r3
	return 0;
   995e2:	2300      	movs	r3, #0
}
   995e4:	4618      	mov	r0, r3
   995e6:	bd80      	pop	{r7, pc}
   995e8:	000996e9 	.word	0x000996e9

000995ec <DD_RESET_GREEN>:
uint8_t DD_RESET_GREEN()               // GREEN
{
   995ec:	b580      	push	{r7, lr}
   995ee:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_GREEN);
   995f0:	2020      	movs	r0, #32
   995f2:	4b02      	ldr	r3, [pc, #8]	; (995fc <DD_RESET_GREEN+0x10>)
   995f4:	4798      	blx	r3
	return 0;
   995f6:	2300      	movs	r3, #0
}
   995f8:	4618      	mov	r0, r3
   995fa:	bd80      	pop	{r7, pc}
   995fc:	000996e9 	.word	0x000996e9

00099600 <DD_RESET_YELLOW>:
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   99600:	b580      	push	{r7, lr}
   99602:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_AMBER);
   99604:	201f      	movs	r0, #31
   99606:	4b02      	ldr	r3, [pc, #8]	; (99610 <DD_RESET_YELLOW+0x10>)
   99608:	4798      	blx	r3
	return 0;
   9960a:	2300      	movs	r3, #0
}
   9960c:	4618      	mov	r0, r3
   9960e:	bd80      	pop	{r7, pc}
   99610:	000996e9 	.word	0x000996e9

00099614 <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   99614:	b580      	push	{r7, lr}
   99616:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_BUZZER);
   99618:	201d      	movs	r0, #29
   9961a:	4b02      	ldr	r3, [pc, #8]	; (99624 <DD_RESET_BUZZER+0x10>)
   9961c:	4798      	blx	r3
	return 0;
   9961e:	2300      	movs	r3, #0
}
   99620:	4618      	mov	r0, r3
   99622:	bd80      	pop	{r7, pc}
   99624:	000996e9 	.word	0x000996e9

00099628 <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   99628:	b580      	push	{r7, lr}
   9962a:	b082      	sub	sp, #8
   9962c:	af00      	add	r7, sp, #0
   9962e:	4603      	mov	r3, r0
   99630:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

     if((id_valve >=1) && (id_valve <= 16))
   99632:	79fb      	ldrb	r3, [r7, #7]
   99634:	2b00      	cmp	r3, #0
   99636:	d015      	beq.n	99664 <DD_SET_VALVE+0x3c>
   99638:	79fb      	ldrb	r3, [r7, #7]
   9963a:	2b10      	cmp	r3, #16
   9963c:	d812      	bhi.n	99664 <DD_SET_VALVE+0x3c>
	
		{
	
		dd_valve_port_1_16 |= 1 << id_valve - 1;
   9963e:	79fb      	ldrb	r3, [r7, #7]
   99640:	3b01      	subs	r3, #1
   99642:	2201      	movs	r2, #1
   99644:	fa02 f303 	lsl.w	r3, r2, r3
   99648:	b21a      	sxth	r2, r3
   9964a:	4b21      	ldr	r3, [pc, #132]	; (996d0 <DD_SET_VALVE+0xa8>)
   9964c:	881b      	ldrh	r3, [r3, #0]
   9964e:	b21b      	sxth	r3, r3
   99650:	4313      	orrs	r3, r2
   99652:	b21b      	sxth	r3, r3
   99654:	b29a      	uxth	r2, r3
   99656:	4b1e      	ldr	r3, [pc, #120]	; (996d0 <DD_SET_VALVE+0xa8>)
   99658:	801a      	strh	r2, [r3, #0]

		DD_SET_VALVE_1_16_IO();
   9965a:	4b1e      	ldr	r3, [pc, #120]	; (996d4 <DD_SET_VALVE+0xac>)
   9965c:	4798      	blx	r3

		DD_LATCH_STROBE_X1_X16();
   9965e:	4b1e      	ldr	r3, [pc, #120]	; (996d8 <DD_SET_VALVE+0xb0>)
   99660:	4798      	blx	r3
   99662:	e030      	b.n	996c6 <DD_SET_VALVE+0x9e>
		
		}

	   else	if((id_valve >=17) && (id_valve <= VALVE_MAX))
   99664:	79fb      	ldrb	r3, [r7, #7]
   99666:	2b10      	cmp	r3, #16
   99668:	d915      	bls.n	99696 <DD_SET_VALVE+0x6e>
   9966a:	79fb      	ldrb	r3, [r7, #7]
   9966c:	2b16      	cmp	r3, #22
   9966e:	d812      	bhi.n	99696 <DD_SET_VALVE+0x6e>
		{

					dd_valve_port_17_20 |= 1 << id_valve - 17;         // Earlier 6
   99670:	79fb      	ldrb	r3, [r7, #7]
   99672:	3b11      	subs	r3, #17
   99674:	2201      	movs	r2, #1
   99676:	fa02 f303 	lsl.w	r3, r2, r3
   9967a:	b21a      	sxth	r2, r3
   9967c:	4b17      	ldr	r3, [pc, #92]	; (996dc <DD_SET_VALVE+0xb4>)
   9967e:	881b      	ldrh	r3, [r3, #0]
   99680:	b21b      	sxth	r3, r3
   99682:	4313      	orrs	r3, r2
   99684:	b21b      	sxth	r3, r3
   99686:	b29a      	uxth	r2, r3
   99688:	4b14      	ldr	r3, [pc, #80]	; (996dc <DD_SET_VALVE+0xb4>)
   9968a:	801a      	strh	r2, [r3, #0]

					DD_SET_VALVE_17_20_IO();
   9968c:	4b14      	ldr	r3, [pc, #80]	; (996e0 <DD_SET_VALVE+0xb8>)
   9968e:	4798      	blx	r3

			        DD_LATCH_STROBE_X17_X20();
   99690:	4b14      	ldr	r3, [pc, #80]	; (996e4 <DD_SET_VALVE+0xbc>)
   99692:	4798      	blx	r3
   99694:	e017      	b.n	996c6 <DD_SET_VALVE+0x9e>
		}
		
		else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   99696:	79fb      	ldrb	r3, [r7, #7]
   99698:	2b1c      	cmp	r3, #28
   9969a:	d914      	bls.n	996c6 <DD_SET_VALVE+0x9e>
   9969c:	79fb      	ldrb	r3, [r7, #7]
   9969e:	2b20      	cmp	r3, #32
   996a0:	d811      	bhi.n	996c6 <DD_SET_VALVE+0x9e>
		{
			dd_valve_port_17_20 |= 1 << id_valve - 17;
   996a2:	79fb      	ldrb	r3, [r7, #7]
   996a4:	3b11      	subs	r3, #17
   996a6:	2201      	movs	r2, #1
   996a8:	fa02 f303 	lsl.w	r3, r2, r3
   996ac:	b21a      	sxth	r2, r3
   996ae:	4b0b      	ldr	r3, [pc, #44]	; (996dc <DD_SET_VALVE+0xb4>)
   996b0:	881b      	ldrh	r3, [r3, #0]
   996b2:	b21b      	sxth	r3, r3
   996b4:	4313      	orrs	r3, r2
   996b6:	b21b      	sxth	r3, r3
   996b8:	b29a      	uxth	r2, r3
   996ba:	4b08      	ldr	r3, [pc, #32]	; (996dc <DD_SET_VALVE+0xb4>)
   996bc:	801a      	strh	r2, [r3, #0]
//			DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   996be:	4b08      	ldr	r3, [pc, #32]	; (996e0 <DD_SET_VALVE+0xb8>)
   996c0:	4798      	blx	r3
			DD_LATCH_STROBE_X17_X20();
   996c2:	4b08      	ldr	r3, [pc, #32]	; (996e4 <DD_SET_VALVE+0xbc>)
   996c4:	4798      	blx	r3
		}
				
	

	return 0;
   996c6:	2300      	movs	r3, #0
}
   996c8:	4618      	mov	r0, r3
   996ca:	3708      	adds	r7, #8
   996cc:	46bd      	mov	sp, r7
   996ce:	bd80      	pop	{r7, pc}
   996d0:	20071a3c 	.word	0x20071a3c
   996d4:	000997e5 	.word	0x000997e5
   996d8:	0009a4c9 	.word	0x0009a4c9
   996dc:	20071a3e 	.word	0x20071a3e
   996e0:	00099971 	.word	0x00099971
   996e4:	0009a511 	.word	0x0009a511

000996e8 <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   996e8:	b580      	push	{r7, lr}
   996ea:	b082      	sub	sp, #8
   996ec:	af00      	add	r7, sp, #0
   996ee:	4603      	mov	r3, r0
   996f0:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

	if(id_valve == VALVE_ID1)
   996f2:	79fb      	ldrb	r3, [r7, #7]
   996f4:	2b01      	cmp	r3, #1
   996f6:	d104      	bne.n	99702 <DD_RESET_VALVE+0x1a>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
   996f8:	2206      	movs	r2, #6
   996fa:	4932      	ldr	r1, [pc, #200]	; (997c4 <DD_RESET_VALVE+0xdc>)
   996fc:	2018      	movs	r0, #24
   996fe:	4b32      	ldr	r3, [pc, #200]	; (997c8 <DD_RESET_VALVE+0xe0>)
   99700:	4798      	blx	r3
	}
	
	if((id_valve >=1) && (id_valve <= 16))
   99702:	79fb      	ldrb	r3, [r7, #7]
   99704:	2b00      	cmp	r3, #0
   99706:	d01b      	beq.n	99740 <DD_RESET_VALVE+0x58>
   99708:	79fb      	ldrb	r3, [r7, #7]
   9970a:	2b10      	cmp	r3, #16
   9970c:	d818      	bhi.n	99740 <DD_RESET_VALVE+0x58>
	{
	
		dd_valve_port_1_16 = dd_valve_port_1_16 &= ~(1 << id_valve - 1);
   9970e:	79fb      	ldrb	r3, [r7, #7]
   99710:	3b01      	subs	r3, #1
   99712:	2201      	movs	r2, #1
   99714:	fa02 f303 	lsl.w	r3, r2, r3
   99718:	b21b      	sxth	r3, r3
   9971a:	43db      	mvns	r3, r3
   9971c:	b21a      	sxth	r2, r3
   9971e:	4b2b      	ldr	r3, [pc, #172]	; (997cc <DD_RESET_VALVE+0xe4>)
   99720:	881b      	ldrh	r3, [r3, #0]
   99722:	b21b      	sxth	r3, r3
   99724:	4013      	ands	r3, r2
   99726:	b21b      	sxth	r3, r3
   99728:	b29a      	uxth	r2, r3
   9972a:	4b28      	ldr	r3, [pc, #160]	; (997cc <DD_RESET_VALVE+0xe4>)
   9972c:	801a      	strh	r2, [r3, #0]
   9972e:	4b27      	ldr	r3, [pc, #156]	; (997cc <DD_RESET_VALVE+0xe4>)
   99730:	881a      	ldrh	r2, [r3, #0]
   99732:	4b26      	ldr	r3, [pc, #152]	; (997cc <DD_RESET_VALVE+0xe4>)
   99734:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_1_16_IO();
   99736:	4b26      	ldr	r3, [pc, #152]	; (997d0 <DD_RESET_VALVE+0xe8>)
   99738:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X16();
   9973a:	4b26      	ldr	r3, [pc, #152]	; (997d4 <DD_RESET_VALVE+0xec>)
   9973c:	4798      	blx	r3
   9973e:	e03c      	b.n	997ba <DD_RESET_VALVE+0xd2>
		
	}

	else if((id_valve >=17) && (id_valve <= VALVE_MAX))
   99740:	79fb      	ldrb	r3, [r7, #7]
   99742:	2b10      	cmp	r3, #16
   99744:	d91b      	bls.n	9977e <DD_RESET_VALVE+0x96>
   99746:	79fb      	ldrb	r3, [r7, #7]
   99748:	2b16      	cmp	r3, #22
   9974a:	d818      	bhi.n	9977e <DD_RESET_VALVE+0x96>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   9974c:	79fb      	ldrb	r3, [r7, #7]
   9974e:	3b11      	subs	r3, #17
   99750:	2201      	movs	r2, #1
   99752:	fa02 f303 	lsl.w	r3, r2, r3
   99756:	b21b      	sxth	r3, r3
   99758:	43db      	mvns	r3, r3
   9975a:	b21a      	sxth	r2, r3
   9975c:	4b1e      	ldr	r3, [pc, #120]	; (997d8 <DD_RESET_VALVE+0xf0>)
   9975e:	881b      	ldrh	r3, [r3, #0]
   99760:	b21b      	sxth	r3, r3
   99762:	4013      	ands	r3, r2
   99764:	b21b      	sxth	r3, r3
   99766:	b29a      	uxth	r2, r3
   99768:	4b1b      	ldr	r3, [pc, #108]	; (997d8 <DD_RESET_VALVE+0xf0>)
   9976a:	801a      	strh	r2, [r3, #0]
   9976c:	4b1a      	ldr	r3, [pc, #104]	; (997d8 <DD_RESET_VALVE+0xf0>)
   9976e:	881a      	ldrh	r2, [r3, #0]
   99770:	4b19      	ldr	r3, [pc, #100]	; (997d8 <DD_RESET_VALVE+0xf0>)
   99772:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   99774:	4b19      	ldr	r3, [pc, #100]	; (997dc <DD_RESET_VALVE+0xf4>)
   99776:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   99778:	4b19      	ldr	r3, [pc, #100]	; (997e0 <DD_RESET_VALVE+0xf8>)
   9977a:	4798      	blx	r3
   9977c:	e01d      	b.n	997ba <DD_RESET_VALVE+0xd2>
		
	}
	
	else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   9977e:	79fb      	ldrb	r3, [r7, #7]
   99780:	2b1c      	cmp	r3, #28
   99782:	d91a      	bls.n	997ba <DD_RESET_VALVE+0xd2>
   99784:	79fb      	ldrb	r3, [r7, #7]
   99786:	2b20      	cmp	r3, #32
   99788:	d817      	bhi.n	997ba <DD_RESET_VALVE+0xd2>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   9978a:	79fb      	ldrb	r3, [r7, #7]
   9978c:	3b11      	subs	r3, #17
   9978e:	2201      	movs	r2, #1
   99790:	fa02 f303 	lsl.w	r3, r2, r3
   99794:	b21b      	sxth	r3, r3
   99796:	43db      	mvns	r3, r3
   99798:	b21a      	sxth	r2, r3
   9979a:	4b0f      	ldr	r3, [pc, #60]	; (997d8 <DD_RESET_VALVE+0xf0>)
   9979c:	881b      	ldrh	r3, [r3, #0]
   9979e:	b21b      	sxth	r3, r3
   997a0:	4013      	ands	r3, r2
   997a2:	b21b      	sxth	r3, r3
   997a4:	b29a      	uxth	r2, r3
   997a6:	4b0c      	ldr	r3, [pc, #48]	; (997d8 <DD_RESET_VALVE+0xf0>)
   997a8:	801a      	strh	r2, [r3, #0]
   997aa:	4b0b      	ldr	r3, [pc, #44]	; (997d8 <DD_RESET_VALVE+0xf0>)
   997ac:	881a      	ldrh	r2, [r3, #0]
   997ae:	4b0a      	ldr	r3, [pc, #40]	; (997d8 <DD_RESET_VALVE+0xf0>)
   997b0:	801a      	strh	r2, [r3, #0]
//		DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   997b2:	4b0a      	ldr	r3, [pc, #40]	; (997dc <DD_RESET_VALVE+0xf4>)
   997b4:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   997b6:	4b0a      	ldr	r3, [pc, #40]	; (997e0 <DD_RESET_VALVE+0xf8>)
   997b8:	4798      	blx	r3
	}

	
	return 0;
   997ba:	2300      	movs	r3, #0
}
   997bc:	4618      	mov	r0, r3
   997be:	3708      	adds	r7, #8
   997c0:	46bd      	mov	sp, r7
   997c2:	bd80      	pop	{r7, pc}
   997c4:	000aa378 	.word	0x000aa378
   997c8:	0009cbd5 	.word	0x0009cbd5
   997cc:	20071a3c 	.word	0x20071a3c
   997d0:	000997e5 	.word	0x000997e5
   997d4:	0009a4c9 	.word	0x0009a4c9
   997d8:	20071a3e 	.word	0x20071a3e
   997dc:	00099971 	.word	0x00099971
   997e0:	0009a511 	.word	0x0009a511

000997e4 <DD_SET_VALVE_1_16_IO>:

uint8_t DD_SET_VALVE_1_16_IO()

{
   997e4:	b580      	push	{r7, lr}
   997e6:	b084      	sub	sp, #16
   997e8:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   997ea:	2301      	movs	r3, #1
   997ec:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 16)
   997ee:	e0af      	b.n	99950 <DD_SET_VALVE_1_16_IO+0x16c>
	 {
			switch (count)
   997f0:	7bfb      	ldrb	r3, [r7, #15]
   997f2:	3b01      	subs	r3, #1
   997f4:	2b0f      	cmp	r3, #15
   997f6:	f200 8083 	bhi.w	99900 <DD_SET_VALVE_1_16_IO+0x11c>
   997fa:	a201      	add	r2, pc, #4	; (adr r2, 99800 <DD_SET_VALVE_1_16_IO+0x1c>)
   997fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99800:	00099841 	.word	0x00099841
   99804:	0009984d 	.word	0x0009984d
   99808:	00099859 	.word	0x00099859
   9980c:	00099865 	.word	0x00099865
   99810:	00099871 	.word	0x00099871
   99814:	0009987d 	.word	0x0009987d
   99818:	00099889 	.word	0x00099889
   9981c:	00099895 	.word	0x00099895
   99820:	000998a1 	.word	0x000998a1
   99824:	000998ad 	.word	0x000998ad
   99828:	000998b9 	.word	0x000998b9
   9982c:	000998c5 	.word	0x000998c5
   99830:	000998d1 	.word	0x000998d1
   99834:	000998dd 	.word	0x000998dd
   99838:	000998e9 	.word	0x000998e9
   9983c:	000998f5 	.word	0x000998f5
			{	
			
			case VALVE_ID1:
			p_io = 10;
   99840:	230a      	movs	r3, #10
   99842:	60bb      	str	r3, [r7, #8]
			peri = PB;
   99844:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99848:	607b      	str	r3, [r7, #4]
			break;
   9984a:	e05a      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID2:
			p_io = 2;
   9984c:	2302      	movs	r3, #2
   9984e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99850:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99854:	607b      	str	r3, [r7, #4]
			break;
   99856:	e054      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID3:
			p_io = 3;
   99858:	2303      	movs	r3, #3
   9985a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9985c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99860:	607b      	str	r3, [r7, #4]
			break;
   99862:	e04e      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID4:
			p_io = 4;
   99864:	2304      	movs	r3, #4
   99866:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99868:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9986c:	607b      	str	r3, [r7, #4]
			break;
   9986e:	e048      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID5:
			p_io = 5;
   99870:	2305      	movs	r3, #5
   99872:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99874:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99878:	607b      	str	r3, [r7, #4]
			break;
   9987a:	e042      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
	        case VALVE_ID6:
			p_io = 6;
   9987c:	2306      	movs	r3, #6
   9987e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99880:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99884:	607b      	str	r3, [r7, #4]
			break;
   99886:	e03c      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID7:
			p_io = 7;
   99888:	2307      	movs	r3, #7
   9988a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9988c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99890:	607b      	str	r3, [r7, #4]
			break;
   99892:	e036      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
			case VALVE_ID8:
			p_io = 8;
   99894:	2308      	movs	r3, #8
   99896:	60bb      	str	r3, [r7, #8]
			peri = PC;
   99898:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9989c:	607b      	str	r3, [r7, #4]
			break;
   9989e:	e030      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID9:
			p_io = 9;
   998a0:	2309      	movs	r3, #9
   998a2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998a4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998a8:	607b      	str	r3, [r7, #4]
			break;
   998aa:	e02a      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID10:
			p_io = 10;
   998ac:	230a      	movs	r3, #10
   998ae:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998b0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998b4:	607b      	str	r3, [r7, #4]
			break;
   998b6:	e024      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
							
			case VALVE_ID11:
			p_io = 11;
   998b8:	230b      	movs	r3, #11
   998ba:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998bc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998c0:	607b      	str	r3, [r7, #4]
			break;
   998c2:	e01e      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID12:
			p_io = 12;
   998c4:	230c      	movs	r3, #12
   998c6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998c8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998cc:	607b      	str	r3, [r7, #4]
			break;
   998ce:	e018      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID13:
			p_io = 13;
   998d0:	230d      	movs	r3, #13
   998d2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998d4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998d8:	607b      	str	r3, [r7, #4]
			break;
   998da:	e012      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID14:
			p_io = 14;
   998dc:	230e      	movs	r3, #14
   998de:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998e0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998e4:	607b      	str	r3, [r7, #4]
			break;
   998e6:	e00c      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID15:
			p_io = 15;
   998e8:	230f      	movs	r3, #15
   998ea:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998f0:	607b      	str	r3, [r7, #4]
			break;
   998f2:	e006      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
		
			case VALVE_ID16:
			p_io = 16;
   998f4:	2310      	movs	r3, #16
   998f6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   998f8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   998fc:	607b      	str	r3, [r7, #4]
			break;
   998fe:	e000      	b.n	99902 <DD_SET_VALVE_1_16_IO+0x11e>
					
			default:
			break;
   99900:	bf00      	nop
				}
		if (dd_valve_port_1_16 & 1<< count-1 )
   99902:	4b18      	ldr	r3, [pc, #96]	; (99964 <DD_SET_VALVE_1_16_IO+0x180>)
   99904:	881b      	ldrh	r3, [r3, #0]
   99906:	461a      	mov	r2, r3
   99908:	7bfb      	ldrb	r3, [r7, #15]
   9990a:	3b01      	subs	r3, #1
   9990c:	fa42 f303 	asr.w	r3, r2, r3
   99910:	f003 0301 	and.w	r3, r3, #1
   99914:	2b00      	cmp	r3, #0
   99916:	d00c      	beq.n	99932 <DD_SET_VALVE_1_16_IO+0x14e>
						{
							if (count == VALVE_ID1 )
   99918:	7bfb      	ldrb	r3, [r7, #15]
   9991a:	2b01      	cmp	r3, #1
   9991c:	d104      	bne.n	99928 <DD_SET_VALVE_1_16_IO+0x144>
							{
								DD_SET_PIO(peri,p_io);
   9991e:	68b9      	ldr	r1, [r7, #8]
   99920:	6878      	ldr	r0, [r7, #4]
   99922:	4b11      	ldr	r3, [pc, #68]	; (99968 <DD_SET_VALVE_1_16_IO+0x184>)
   99924:	4798      	blx	r3
   99926:	e010      	b.n	9994a <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_RESET_PIO(peri,p_io);
   99928:	68b9      	ldr	r1, [r7, #8]
   9992a:	6878      	ldr	r0, [r7, #4]
   9992c:	4b0f      	ldr	r3, [pc, #60]	; (9996c <DD_SET_VALVE_1_16_IO+0x188>)
   9992e:	4798      	blx	r3
   99930:	e00b      	b.n	9994a <DD_SET_VALVE_1_16_IO+0x166>
						}
						else
						{
							if (count == VALVE_ID1 )
   99932:	7bfb      	ldrb	r3, [r7, #15]
   99934:	2b01      	cmp	r3, #1
   99936:	d104      	bne.n	99942 <DD_SET_VALVE_1_16_IO+0x15e>
							{
								DD_RESET_PIO(peri,p_io);
   99938:	68b9      	ldr	r1, [r7, #8]
   9993a:	6878      	ldr	r0, [r7, #4]
   9993c:	4b0b      	ldr	r3, [pc, #44]	; (9996c <DD_SET_VALVE_1_16_IO+0x188>)
   9993e:	4798      	blx	r3
   99940:	e003      	b.n	9994a <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_SET_PIO(peri,p_io);
   99942:	68b9      	ldr	r1, [r7, #8]
   99944:	6878      	ldr	r0, [r7, #4]
   99946:	4b08      	ldr	r3, [pc, #32]	; (99968 <DD_SET_VALVE_1_16_IO+0x184>)
   99948:	4798      	blx	r3
						}
			count++;
   9994a:	7bfb      	ldrb	r3, [r7, #15]
   9994c:	3301      	adds	r3, #1
   9994e:	73fb      	strb	r3, [r7, #15]
uint8_t DD_SET_VALVE_1_16_IO()

{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 16)
   99950:	7bfb      	ldrb	r3, [r7, #15]
   99952:	2b10      	cmp	r3, #16
   99954:	f67f af4c 	bls.w	997f0 <DD_SET_VALVE_1_16_IO+0xc>
							else
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
	return 0;
   99958:	2300      	movs	r3, #0
}
   9995a:	4618      	mov	r0, r3
   9995c:	3710      	adds	r7, #16
   9995e:	46bd      	mov	sp, r7
   99960:	bd80      	pop	{r7, pc}
   99962:	bf00      	nop
   99964:	20071a3c 	.word	0x20071a3c
   99968:	00098151 	.word	0x00098151
   9996c:	000981d5 	.word	0x000981d5

00099970 <DD_SET_VALVE_17_20_IO>:

uint8_t DD_SET_VALVE_17_20_IO()
{
   99970:	b580      	push	{r7, lr}
   99972:	b084      	sub	sp, #16
   99974:	af00      	add	r7, sp, #0
		uint8_t count = 17;
   99976:	2311      	movs	r3, #17
   99978:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   9997a:	e074      	b.n	99a66 <DD_SET_VALVE_17_20_IO+0xf6>
		{
			switch (count)
   9997c:	7bfb      	ldrb	r3, [r7, #15]
   9997e:	3b11      	subs	r3, #17
   99980:	2b0f      	cmp	r3, #15
   99982:	d853      	bhi.n	99a2c <DD_SET_VALVE_17_20_IO+0xbc>
   99984:	a201      	add	r2, pc, #4	; (adr r2, 9998c <DD_SET_VALVE_17_20_IO+0x1c>)
   99986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9998a:	bf00      	nop
   9998c:	000999cd 	.word	0x000999cd
   99990:	000999d9 	.word	0x000999d9
   99994:	000999e5 	.word	0x000999e5
   99998:	000999f1 	.word	0x000999f1
   9999c:	00099a2d 	.word	0x00099a2d
   999a0:	00099a2d 	.word	0x00099a2d
   999a4:	00099a2d 	.word	0x00099a2d
   999a8:	00099a2d 	.word	0x00099a2d
   999ac:	00099a2d 	.word	0x00099a2d
   999b0:	00099a2d 	.word	0x00099a2d
   999b4:	00099a2d 	.word	0x00099a2d
   999b8:	00099a2d 	.word	0x00099a2d
   999bc:	000999fd 	.word	0x000999fd
   999c0:	00099a09 	.word	0x00099a09
   999c4:	00099a15 	.word	0x00099a15
   999c8:	00099a21 	.word	0x00099a21
			{
				
					case VALVE_ID17:
					p_io = 1;
   999cc:	2301      	movs	r3, #1
   999ce:	60bb      	str	r3, [r7, #8]
					peri = PC;
   999d0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   999d4:	607b      	str	r3, [r7, #4]
					break;
   999d6:	e02a      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID18:
					p_io = 2;
   999d8:	2302      	movs	r3, #2
   999da:	60bb      	str	r3, [r7, #8]
					peri = PC;
   999dc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   999e0:	607b      	str	r3, [r7, #4]
					break;
   999e2:	e024      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID19:
					p_io = 3;
   999e4:	2303      	movs	r3, #3
   999e6:	60bb      	str	r3, [r7, #8]
					peri = PC;
   999e8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   999ec:	607b      	str	r3, [r7, #4]
					break;
   999ee:	e01e      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID20:
					p_io = 4;
   999f0:	2304      	movs	r3, #4
   999f2:	60bb      	str	r3, [r7, #8]
					peri = PC;
   999f4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   999f8:	607b      	str	r3, [r7, #4]
					break;
   999fa:	e018      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_BUZZER:
					p_io = 13;
   999fc:	230d      	movs	r3, #13
   999fe:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99a00:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99a04:	607b      	str	r3, [r7, #4]
					break;
   99a06:	e012      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_RED:
					p_io = 14;
   99a08:	230e      	movs	r3, #14
   99a0a:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99a0c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99a10:	607b      	str	r3, [r7, #4]
					break;
   99a12:	e00c      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_AMBER:
					p_io = 15;
   99a14:	230f      	movs	r3, #15
   99a16:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99a18:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99a1c:	607b      	str	r3, [r7, #4]
					break;
   99a1e:	e006      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_GREEN:
					p_io = 16;
   99a20:	2310      	movs	r3, #16
   99a22:	60bb      	str	r3, [r7, #8]
					peri = PC;
   99a24:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99a28:	607b      	str	r3, [r7, #4]
					break;
   99a2a:	e000      	b.n	99a2e <DD_SET_VALVE_17_20_IO+0xbe>
				
					default:
					break;
   99a2c:	bf00      	nop
			}
					if (dd_valve_port_17_20 & 1<< count-17 )
   99a2e:	4b12      	ldr	r3, [pc, #72]	; (99a78 <DD_SET_VALVE_17_20_IO+0x108>)
   99a30:	881b      	ldrh	r3, [r3, #0]
   99a32:	461a      	mov	r2, r3
   99a34:	7bfb      	ldrb	r3, [r7, #15]
   99a36:	3b11      	subs	r3, #17
   99a38:	fa42 f303 	asr.w	r3, r2, r3
   99a3c:	f003 0301 	and.w	r3, r3, #1
   99a40:	2b00      	cmp	r3, #0
   99a42:	d004      	beq.n	99a4e <DD_SET_VALVE_17_20_IO+0xde>
	
					{

						DD_RESET_PIO(peri,p_io);
   99a44:	68b9      	ldr	r1, [r7, #8]
   99a46:	6878      	ldr	r0, [r7, #4]
   99a48:	4b0c      	ldr	r3, [pc, #48]	; (99a7c <DD_SET_VALVE_17_20_IO+0x10c>)
   99a4a:	4798      	blx	r3
   99a4c:	e003      	b.n	99a56 <DD_SET_VALVE_17_20_IO+0xe6>
					}
			else
			{
			DD_SET_PIO(peri,p_io);
   99a4e:	68b9      	ldr	r1, [r7, #8]
   99a50:	6878      	ldr	r0, [r7, #4]
   99a52:	4b0b      	ldr	r3, [pc, #44]	; (99a80 <DD_SET_VALVE_17_20_IO+0x110>)
   99a54:	4798      	blx	r3
			}
				
		count++;
   99a56:	7bfb      	ldrb	r3, [r7, #15]
   99a58:	3301      	adds	r3, #1
   99a5a:	73fb      	strb	r3, [r7, #15]
		if (count == 21)
   99a5c:	7bfb      	ldrb	r3, [r7, #15]
   99a5e:	2b15      	cmp	r3, #21
   99a60:	d101      	bne.n	99a66 <DD_SET_VALVE_17_20_IO+0xf6>
		{
			count = 29;
   99a62:	231d      	movs	r3, #29
   99a64:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_17_20_IO()
{
		uint8_t count = 17;
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   99a66:	7bfb      	ldrb	r3, [r7, #15]
   99a68:	2b20      	cmp	r3, #32
   99a6a:	d987      	bls.n	9997c <DD_SET_VALVE_17_20_IO+0xc>
		{
			count = 29;
		}
	}
	
	return 0;
   99a6c:	2300      	movs	r3, #0
}
   99a6e:	4618      	mov	r0, r3
   99a70:	3710      	adds	r7, #16
   99a72:	46bd      	mov	sp, r7
   99a74:	bd80      	pop	{r7, pc}
   99a76:	bf00      	nop
   99a78:	20071a3e 	.word	0x20071a3e
   99a7c:	000981d5 	.word	0x000981d5
   99a80:	00098151 	.word	0x00098151

00099a84 <DD_SET_CLAMP>:




uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   99a84:	b580      	push	{r7, lr}
   99a86:	b082      	sub	sp, #8
   99a88:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   99a8a:	231b      	movs	r3, #27
   99a8c:	607b      	str	r3, [r7, #4]
	peri = PC;
   99a8e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99a92:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   99a94:	6879      	ldr	r1, [r7, #4]
   99a96:	6838      	ldr	r0, [r7, #0]
   99a98:	4b03      	ldr	r3, [pc, #12]	; (99aa8 <DD_SET_CLAMP+0x24>)
   99a9a:	4798      	blx	r3
	
	return 0;
   99a9c:	2300      	movs	r3, #0
}
   99a9e:	4618      	mov	r0, r3
   99aa0:	3708      	adds	r7, #8
   99aa2:	46bd      	mov	sp, r7
   99aa4:	bd80      	pop	{r7, pc}
   99aa6:	bf00      	nop
   99aa8:	00098151 	.word	0x00098151

00099aac <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   99aac:	b580      	push	{r7, lr}
   99aae:	b082      	sub	sp, #8
   99ab0:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   99ab2:	231b      	movs	r3, #27
   99ab4:	607b      	str	r3, [r7, #4]
	peri = PC;
   99ab6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99aba:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   99abc:	6879      	ldr	r1, [r7, #4]
   99abe:	6838      	ldr	r0, [r7, #0]
   99ac0:	4b03      	ldr	r3, [pc, #12]	; (99ad0 <DD_RESET_CLAMP+0x24>)
   99ac2:	4798      	blx	r3
	
	return 0;
   99ac4:	2300      	movs	r3, #0
}
   99ac6:	4618      	mov	r0, r3
   99ac8:	3708      	adds	r7, #8
   99aca:	46bd      	mov	sp, r7
   99acc:	bd80      	pop	{r7, pc}
   99ace:	bf00      	nop
   99ad0:	000981d5 	.word	0x000981d5

00099ad4 <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   99ad4:	b580      	push	{r7, lr}
   99ad6:	b086      	sub	sp, #24
   99ad8:	af00      	add	r7, sp, #0
   99ada:	4603      	mov	r3, r0
   99adc:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   99ade:	2300      	movs	r3, #0
   99ae0:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   99ae2:	79fb      	ldrb	r3, [r7, #7]
   99ae4:	3b01      	subs	r3, #1
   99ae6:	2b24      	cmp	r3, #36	; 0x24
   99ae8:	f200 812c 	bhi.w	99d44 <DD_RD_SENSIN+0x270>
   99aec:	a201      	add	r2, pc, #4	; (adr r2, 99af4 <DD_RD_SENSIN+0x20>)
   99aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99af2:	bf00      	nop
   99af4:	00099b89 	.word	0x00099b89
   99af8:	00099b95 	.word	0x00099b95
   99afc:	00099ba1 	.word	0x00099ba1
   99b00:	00099bad 	.word	0x00099bad
   99b04:	00099bb9 	.word	0x00099bb9
   99b08:	00099bc5 	.word	0x00099bc5
   99b0c:	00099bd1 	.word	0x00099bd1
   99b10:	00099bdd 	.word	0x00099bdd
   99b14:	00099be9 	.word	0x00099be9
   99b18:	00099bf5 	.word	0x00099bf5
   99b1c:	00099c01 	.word	0x00099c01
   99b20:	00099c0d 	.word	0x00099c0d
   99b24:	00099c19 	.word	0x00099c19
   99b28:	00099c25 	.word	0x00099c25
   99b2c:	00099c31 	.word	0x00099c31
   99b30:	00099c3d 	.word	0x00099c3d
   99b34:	00099c49 	.word	0x00099c49
   99b38:	00099c55 	.word	0x00099c55
   99b3c:	00099c61 	.word	0x00099c61
   99b40:	00099c6d 	.word	0x00099c6d
   99b44:	00099c79 	.word	0x00099c79
   99b48:	00099c85 	.word	0x00099c85
   99b4c:	00099c91 	.word	0x00099c91
   99b50:	00099c9d 	.word	0x00099c9d
   99b54:	00099ca9 	.word	0x00099ca9
   99b58:	00099cb5 	.word	0x00099cb5
   99b5c:	00099cc1 	.word	0x00099cc1
   99b60:	00099ccd 	.word	0x00099ccd
   99b64:	00099cd9 	.word	0x00099cd9
   99b68:	00099ce5 	.word	0x00099ce5
   99b6c:	00099cf1 	.word	0x00099cf1
   99b70:	00099cfd 	.word	0x00099cfd
   99b74:	00099d09 	.word	0x00099d09
   99b78:	00099d15 	.word	0x00099d15
   99b7c:	00099d21 	.word	0x00099d21
   99b80:	00099d2d 	.word	0x00099d2d
   99b84:	00099d39 	.word	0x00099d39
	{
		case SV_SENSIN_ID1:
	
		p_io = 7;               // lvl
   99b88:	2307      	movs	r3, #7
   99b8a:	617b      	str	r3, [r7, #20]
		peri = PA;
   99b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99b90:	613b      	str	r3, [r7, #16]
		break;
   99b92:	e0d8      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID2:					// dgpfeedback
		p_io = 25;
   99b94:	2319      	movs	r3, #25
   99b96:	617b      	str	r3, [r7, #20]
		peri = PC;
   99b98:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99b9c:	613b      	str	r3, [r7, #16]
		break;
   99b9e:	e0d2      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID3:					// fpcurrentsens
		p_io = 12;
   99ba0:	230c      	movs	r3, #12
   99ba2:	617b      	str	r3, [r7, #20]
		peri = PB;
   99ba4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99ba8:	613b      	str	r3, [r7, #16]
		break;
   99baa:	e0cc      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID4:					// uf_feeddback
		
		p_io = 0;
   99bac:	2300      	movs	r3, #0
   99bae:	617b      	str	r3, [r7, #20]
		peri = PD;
   99bb0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99bb4:	613b      	str	r3, [r7, #16]
		break;
   99bb6:	e0c6      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID5:					// BP_feedback
		
		p_io = 30;
   99bb8:	231e      	movs	r3, #30
   99bba:	617b      	str	r3, [r7, #20]
		peri = PC;
   99bbc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99bc0:	613b      	str	r3, [r7, #16]
		break;
   99bc2:	e0c0      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   99bc4:	2306      	movs	r3, #6
   99bc6:	617b      	str	r3, [r7, #20]
		peri = PD;
   99bc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99bcc:	613b      	str	r3, [r7, #16]
		break;
   99bce:	e0ba      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   99bd0:	2309      	movs	r3, #9
   99bd2:	617b      	str	r3, [r7, #20]
		peri = PD;
   99bd4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99bd8:	613b      	str	r3, [r7, #16]
		break;
   99bda:	e0b4      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   99bdc:	2305      	movs	r3, #5
   99bde:	617b      	str	r3, [r7, #20]
		peri = PD;
   99be0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99be4:	613b      	str	r3, [r7, #16]
		break;
   99be6:	e0ae      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   99be8:	2308      	movs	r3, #8
   99bea:	617b      	str	r3, [r7, #20]
		peri = PB;
   99bec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99bf0:	613b      	str	r3, [r7, #16]
		break;
   99bf2:	e0a8      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 18;
   99bf4:	2312      	movs	r3, #18
   99bf6:	617b      	str	r3, [r7, #20]
		peri = PB;
   99bf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99bfc:	613b      	str	r3, [r7, #16]
		break;
   99bfe:	e0a2      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID11:					//fpfeedback
		p_io = 26;
   99c00:	231a      	movs	r3, #26
   99c02:	617b      	str	r3, [r7, #20]
		peri = PC;
   99c04:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99c08:	613b      	str	r3, [r7, #16]
		break;
   99c0a:	e09c      	b.n	99d46 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID12:		//flow_switch
		p_io =19;
   99c0c:	2313      	movs	r3, #19
   99c0e:	617b      	str	r3, [r7, #20]
		peri =PA;
   99c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99c14:	613b      	str	r3, [r7, #16]
		break;
   99c16:	e096      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID13: //heparin_feedback
		p_io =3;
   99c18:	2303      	movs	r3, #3
   99c1a:	617b      	str	r3, [r7, #20]
		peri =PD;
   99c1c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99c20:	613b      	str	r3, [r7, #16]
		break;
   99c22:	e090      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID14: //bloodpump_door
		p_io =16;
   99c24:	2310      	movs	r3, #16
   99c26:	617b      	str	r3, [r7, #20]
		peri =PB;
   99c28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c2c:	613b      	str	r3, [r7, #16]
		break;
   99c2e:	e08a      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID15: // bp_inc
		p_io =18;
   99c30:	2312      	movs	r3, #18
   99c32:	617b      	str	r3, [r7, #20]
		peri =PC;
   99c34:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99c38:	613b      	str	r3, [r7, #16]
		break;
   99c3a:	e084      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID16: // bp_dec
		p_io =4;
   99c3c:	2304      	movs	r3, #4
   99c3e:	617b      	str	r3, [r7, #20]
		peri =PD;
   99c40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99c44:	613b      	str	r3, [r7, #16]
		break;
   99c46:	e07e      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID17: //venous_clamp_feedback
		p_io =22;
   99c48:	2316      	movs	r3, #22
   99c4a:	617b      	str	r3, [r7, #20]
		peri =PB;
   99c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c50:	613b      	str	r3, [r7, #16]
		break;
   99c52:	e078      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID18: //venous_clamp_door
		p_io =10;
   99c54:	230a      	movs	r3, #10
   99c56:	617b      	str	r3, [r7, #20]
		peri =PD;
   99c58:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   99c5c:	613b      	str	r3, [r7, #16]
		break;
   99c5e:	e072      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID19:
 		p_io =23;					//B_PROPO_I/F3
   99c60:	2317      	movs	r3, #23
   99c62:	617b      	str	r3, [r7, #20]
 		peri =PB;
   99c64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c68:	613b      	str	r3, [r7, #16]
		break;
   99c6a:	e06c      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID20:  // acid in
		p_io =9;
   99c6c:	2309      	movs	r3, #9
   99c6e:	617b      	str	r3, [r7, #20]
		peri =PB;
   99c70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c74:	613b      	str	r3, [r7, #16]
		
		break;
   99c76:	e066      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =25;
   99c78:	2319      	movs	r3, #25
   99c7a:	617b      	str	r3, [r7, #20]
		peri =PB;
   99c7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c80:	613b      	str	r3, [r7, #16]
		break;
   99c82:	e060      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID22:		//cpu2_interrupt
		p_io =24;
   99c84:	2318      	movs	r3, #24
   99c86:	617b      	str	r3, [r7, #20]
		peri =PB;
   99c88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c8c:	613b      	str	r3, [r7, #16]
		break;
   99c8e:	e05a      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID23:		//cpu3_interrupt
			p_io =27;
   99c90:	231b      	movs	r3, #27
   99c92:	617b      	str	r3, [r7, #20]
			peri =PB;
   99c94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99c98:	613b      	str	r3, [r7, #16]
		break;
   99c9a:	e054      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID24:		//redundancy_irq
			p_io =24;
   99c9c:	2318      	movs	r3, #24
   99c9e:	617b      	str	r3, [r7, #20]
			peri =PC;
   99ca0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ca4:	613b      	str	r3, [r7, #16]
		break;
   99ca6:	e04e      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID25:			//Blood pump manual on off
		p_io =14;
   99ca8:	230e      	movs	r3, #14
   99caa:	617b      	str	r3, [r7, #20]
		peri =PA;
   99cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99cb0:	613b      	str	r3, [r7, #16]
		break;
   99cb2:	e048      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID26:				//blood detector
			p_io =15;
   99cb4:	230f      	movs	r3, #15
   99cb6:	617b      	str	r3, [r7, #20]
			peri =PB;
   99cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99cbc:	613b      	str	r3, [r7, #16]
		break;
   99cbe:	e042      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID27:			//blood_leak_detector
		p_io =29;
   99cc0:	231d      	movs	r3, #29
   99cc2:	617b      	str	r3, [r7, #20]
		peri =PC;
   99cc4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99cc8:	613b      	str	r3, [r7, #16]
		break;
   99cca:	e03c      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID28:			//ufpump_ic_fault
		p_io =20;
   99ccc:	2314      	movs	r3, #20
   99cce:	617b      	str	r3, [r7, #20]
		peri =PC;
   99cd0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99cd4:	613b      	str	r3, [r7, #16]
		break;
   99cd6:	e036      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID29:			//ufpump_home
		p_io =17;
   99cd8:	2311      	movs	r3, #17
   99cda:	617b      	str	r3, [r7, #20]
		peri =PC;
   99cdc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99ce0:	613b      	str	r3, [r7, #16]
		break;
   99ce2:	e030      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID30:			//disinfectant_fdbck
		p_io =19;
   99ce4:	2313      	movs	r3, #19
   99ce6:	617b      	str	r3, [r7, #20]
		peri =PC;
   99ce8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   99cec:	613b      	str	r3, [r7, #16]
		break;
   99cee:	e02a      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID31:			//b_hemo_f4
		p_io =16;
   99cf0:	2310      	movs	r3, #16
   99cf2:	617b      	str	r3, [r7, #20]
		peri =PA;
   99cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99cf8:	613b      	str	r3, [r7, #16]
		break;
   99cfa:	e024      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID32:			//b_hemo_f3
		p_io =24;
   99cfc:	2318      	movs	r3, #24
   99cfe:	617b      	str	r3, [r7, #20]
		peri =PA;
   99d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99d04:	613b      	str	r3, [r7, #16]
		break;
   99d06:	e01e      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID33:			//B_PROPO_I/F4
		p_io =21;
   99d08:	2315      	movs	r3, #21
   99d0a:	617b      	str	r3, [r7, #20]
		peri =PB;
   99d0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99d10:	613b      	str	r3, [r7, #16]
		break;
   99d12:	e018      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID34:			//Calibration
		p_io =10;
   99d14:	230a      	movs	r3, #10
   99d16:	617b      	str	r3, [r7, #20]
		peri =PA;
   99d18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99d1c:	613b      	str	r3, [r7, #16]
		break;
   99d1e:	e012      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID35:			//BATTERY_LOAD_CURRENT
		p_io =2;
   99d20:	2302      	movs	r3, #2
   99d22:	617b      	str	r3, [r7, #20]
		peri =PA;
   99d24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99d28:	613b      	str	r3, [r7, #16]
		break;
   99d2a:	e00c      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID36:			//POWER_FAILURE_INDICATION
		p_io =26;
   99d2c:	231a      	movs	r3, #26
   99d2e:	617b      	str	r3, [r7, #20]
		peri =PB;
   99d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   99d34:	613b      	str	r3, [r7, #16]
		break;
   99d36:	e006      	b.n	99d46 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID37:			//SYSTEM_SHUT_DOWN
		p_io =4;
   99d38:	2304      	movs	r3, #4
   99d3a:	617b      	str	r3, [r7, #20]
			peri =PA;
   99d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   99d40:	613b      	str	r3, [r7, #16]
		break;
   99d42:	e000      	b.n	99d46 <DD_RD_SENSIN+0x272>
		default:
		break;
   99d44:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   99d46:	6979      	ldr	r1, [r7, #20]
   99d48:	6938      	ldr	r0, [r7, #16]
   99d4a:	4b04      	ldr	r3, [pc, #16]	; (99d5c <DD_RD_SENSIN+0x288>)
   99d4c:	4798      	blx	r3
   99d4e:	4603      	mov	r3, r0
   99d50:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   99d52:	7bfb      	ldrb	r3, [r7, #15]
	
}
   99d54:	4618      	mov	r0, r3
   99d56:	3718      	adds	r7, #24
   99d58:	46bd      	mov	sp, r7
   99d5a:	bd80      	pop	{r7, pc}
   99d5c:	00098259 	.word	0x00098259

00099d60 <DD_CONSOLE_TX>:



uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   99d60:	b580      	push	{r7, lr}
   99d62:	b084      	sub	sp, #16
   99d64:	af00      	add	r7, sp, #0
   99d66:	4603      	mov	r3, r0
   99d68:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   99d6a:	2301      	movs	r3, #1
   99d6c:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   99d6e:	79fb      	ldrb	r3, [r7, #7]
   99d70:	4618      	mov	r0, r3
   99d72:	4b04      	ldr	r3, [pc, #16]	; (99d84 <DD_CONSOLE_TX+0x24>)
   99d74:	4798      	blx	r3
   99d76:	4603      	mov	r3, r0
   99d78:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   99d7a:	7bfb      	ldrb	r3, [r7, #15]
}
   99d7c:	4618      	mov	r0, r3
   99d7e:	3710      	adds	r7, #16
   99d80:	46bd      	mov	sp, r7
   99d82:	bd80      	pop	{r7, pc}
   99d84:	0009ac0d 	.word	0x0009ac0d

00099d88 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   99d88:	b580      	push	{r7, lr}
   99d8a:	b084      	sub	sp, #16
   99d8c:	af00      	add	r7, sp, #0
   99d8e:	4603      	mov	r3, r0
   99d90:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   99d92:	79fb      	ldrb	r3, [r7, #7]
   99d94:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   99d96:	7bfb      	ldrb	r3, [r7, #15]
   99d98:	4618      	mov	r0, r3
   99d9a:	4b03      	ldr	r3, [pc, #12]	; (99da8 <DD_CONSOLE_RX+0x20>)
   99d9c:	4798      	blx	r3
	
	
	return 1;
   99d9e:	2301      	movs	r3, #1
}
   99da0:	4618      	mov	r0, r3
   99da2:	3710      	adds	r7, #16
   99da4:	46bd      	mov	sp, r7
   99da6:	bd80      	pop	{r7, pc}
   99da8:	0009b131 	.word	0x0009b131

00099dac <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   99dac:	b590      	push	{r4, r7, lr}
   99dae:	b089      	sub	sp, #36	; 0x24
   99db0:	af00      	add	r7, sp, #0
   99db2:	4603      	mov	r3, r0
   99db4:	460a      	mov	r2, r1
   99db6:	71fb      	strb	r3, [r7, #7]
   99db8:	4613      	mov	r3, r2
   99dba:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   99dbc:	2300      	movs	r3, #0
   99dbe:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   99dc0:	79bb      	ldrb	r3, [r7, #6]
   99dc2:	2201      	movs	r2, #1
   99dc4:	fb92 f3f3 	sdiv	r3, r2, r3
   99dc8:	01db      	lsls	r3, r3, #7
   99dca:	4a1b      	ldr	r2, [pc, #108]	; (99e38 <DD_CONFIG_TIMER+0x8c>)
   99dcc:	fb92 f3f3 	sdiv	r3, r2, r3
   99dd0:	1e5a      	subs	r2, r3, #1
   99dd2:	4b1a      	ldr	r3, [pc, #104]	; (99e3c <DD_CONFIG_TIMER+0x90>)
   99dd4:	4610      	mov	r0, r2
   99dd6:	4798      	blx	r3
   99dd8:	4603      	mov	r3, r0
   99dda:	460c      	mov	r4, r1
   99ddc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   99de0:	4b17      	ldr	r3, [pc, #92]	; (99e40 <DD_CONFIG_TIMER+0x94>)
   99de2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   99de6:	4798      	blx	r3
   99de8:	4603      	mov	r3, r0
   99dea:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   99dec:	79fb      	ldrb	r3, [r7, #7]
   99dee:	2b01      	cmp	r3, #1
   99df0:	d00a      	beq.n	99e08 <DD_CONFIG_TIMER+0x5c>
   99df2:	2b02      	cmp	r3, #2
   99df4:	d011      	beq.n	99e1a <DD_CONFIG_TIMER+0x6e>
   99df6:	2b00      	cmp	r3, #0
   99df8:	d118      	bne.n	99e2c <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   99dfa:	68fb      	ldr	r3, [r7, #12]
   99dfc:	221b      	movs	r2, #27
   99dfe:	69f9      	ldr	r1, [r7, #28]
   99e00:	4810      	ldr	r0, [pc, #64]	; (99e44 <DD_CONFIG_TIMER+0x98>)
   99e02:	4c11      	ldr	r4, [pc, #68]	; (99e48 <DD_CONFIG_TIMER+0x9c>)
   99e04:	47a0      	blx	r4
		break;
   99e06:	e011      	b.n	99e2c <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   99e08:	4b10      	ldr	r3, [pc, #64]	; (99e4c <DD_CONFIG_TIMER+0xa0>)
   99e0a:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   99e0c:	68fb      	ldr	r3, [r7, #12]
   99e0e:	221e      	movs	r2, #30
   99e10:	69f9      	ldr	r1, [r7, #28]
   99e12:	480f      	ldr	r0, [pc, #60]	; (99e50 <DD_CONFIG_TIMER+0xa4>)
   99e14:	4c0c      	ldr	r4, [pc, #48]	; (99e48 <DD_CONFIG_TIMER+0x9c>)
   99e16:	47a0      	blx	r4
		break;
   99e18:	e008      	b.n	99e2c <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   99e1a:	4b0e      	ldr	r3, [pc, #56]	; (99e54 <DD_CONFIG_TIMER+0xa8>)
   99e1c:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   99e1e:	68fb      	ldr	r3, [r7, #12]
   99e20:	2221      	movs	r2, #33	; 0x21
   99e22:	69f9      	ldr	r1, [r7, #28]
   99e24:	480c      	ldr	r0, [pc, #48]	; (99e58 <DD_CONFIG_TIMER+0xac>)
   99e26:	4c08      	ldr	r4, [pc, #32]	; (99e48 <DD_CONFIG_TIMER+0x9c>)
   99e28:	47a0      	blx	r4
		
		break;
   99e2a:	bf00      	nop
		
	}
}
   99e2c:	bf00      	nop
   99e2e:	4618      	mov	r0, r3
   99e30:	3724      	adds	r7, #36	; 0x24
   99e32:	46bd      	mov	sp, r7
   99e34:	bd90      	pop	{r4, r7, pc}
   99e36:	bf00      	nop
   99e38:	0501bd00 	.word	0x0501bd00
   99e3c:	000a765d 	.word	0x000a765d
   99e40:	000a7cad 	.word	0x000a7cad
   99e44:	40080000 	.word	0x40080000
   99e48:	0009a709 	.word	0x0009a709
   99e4c:	00321161 	.word	0x00321161
   99e50:	40084000 	.word	0x40084000
   99e54:	001e0a6d 	.word	0x001e0a6d
   99e58:	40088000 	.word	0x40088000

00099e5c <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   99e5c:	b580      	push	{r7, lr}
   99e5e:	b082      	sub	sp, #8
   99e60:	af00      	add	r7, sp, #0
   99e62:	4603      	mov	r3, r0
   99e64:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   99e66:	79fb      	ldrb	r3, [r7, #7]
   99e68:	3b01      	subs	r3, #1
   99e6a:	2b14      	cmp	r3, #20
   99e6c:	f200 831d 	bhi.w	9a4aa <DD_SET_FLOW_PATH+0x64e>
   99e70:	a201      	add	r2, pc, #4	; (adr r2, 99e78 <DD_SET_FLOW_PATH+0x1c>)
   99e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99e76:	bf00      	nop
   99e78:	00099f7f 	.word	0x00099f7f
   99e7c:	00099ff9 	.word	0x00099ff9
   99e80:	0009a073 	.word	0x0009a073
   99e84:	0009a0cf 	.word	0x0009a0cf
   99e88:	0009a141 	.word	0x0009a141
   99e8c:	0009a1f9 	.word	0x0009a1f9
   99e90:	0009a2b1 	.word	0x0009a2b1
   99e94:	0009a4ab 	.word	0x0009a4ab
   99e98:	0009a4ab 	.word	0x0009a4ab
   99e9c:	0009a395 	.word	0x0009a395
   99ea0:	0009a3df 	.word	0x0009a3df
   99ea4:	0009a4ab 	.word	0x0009a4ab
   99ea8:	0009a4ab 	.word	0x0009a4ab
   99eac:	0009a4ab 	.word	0x0009a4ab
   99eb0:	0009a4ab 	.word	0x0009a4ab
   99eb4:	0009a4ab 	.word	0x0009a4ab
   99eb8:	00099eff 	.word	0x00099eff
   99ebc:	0009a429 	.word	0x0009a429
   99ec0:	00099ecd 	.word	0x00099ecd
   99ec4:	0009a4ab 	.word	0x0009a4ab
   99ec8:	0009a319 	.word	0x0009a319
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   99ecc:	2005      	movs	r0, #5
   99ece:	4b97      	ldr	r3, [pc, #604]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99ed0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   99ed2:	2006      	movs	r0, #6
   99ed4:	4b95      	ldr	r3, [pc, #596]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99ed6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   99ed8:	2007      	movs	r0, #7
   99eda:	4b94      	ldr	r3, [pc, #592]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99edc:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   99ede:	2008      	movs	r0, #8
   99ee0:	4b92      	ldr	r3, [pc, #584]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99ee2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   99ee4:	2009      	movs	r0, #9
   99ee6:	4b91      	ldr	r3, [pc, #580]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99ee8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   99eea:	200a      	movs	r0, #10
   99eec:	4b8f      	ldr	r3, [pc, #572]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99eee:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   99ef0:	200b      	movs	r0, #11
   99ef2:	4b8e      	ldr	r3, [pc, #568]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99ef4:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   99ef6:	200c      	movs	r0, #12
   99ef8:	4b8c      	ldr	r3, [pc, #560]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99efa:	4798      	blx	r3
		break;
   99efc:	e2d5      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   99efe:	2001      	movs	r0, #1
   99f00:	4b8a      	ldr	r3, [pc, #552]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f02:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID2);
   99f04:	2002      	movs	r0, #2
   99f06:	4b89      	ldr	r3, [pc, #548]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f08:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID3);
   99f0a:	2003      	movs	r0, #3
   99f0c:	4b87      	ldr	r3, [pc, #540]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f0e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   99f10:	2004      	movs	r0, #4
   99f12:	4b86      	ldr	r3, [pc, #536]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f14:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   99f16:	2005      	movs	r0, #5
   99f18:	4b84      	ldr	r3, [pc, #528]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f1a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   99f1c:	2006      	movs	r0, #6
   99f1e:	4b83      	ldr	r3, [pc, #524]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f20:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   99f22:	2007      	movs	r0, #7
   99f24:	4b81      	ldr	r3, [pc, #516]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f26:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   99f28:	2008      	movs	r0, #8
   99f2a:	4b80      	ldr	r3, [pc, #512]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f2c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   99f2e:	2009      	movs	r0, #9
   99f30:	4b7e      	ldr	r3, [pc, #504]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f32:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   99f34:	200a      	movs	r0, #10
   99f36:	4b7d      	ldr	r3, [pc, #500]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f38:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   99f3a:	200b      	movs	r0, #11
   99f3c:	4b7b      	ldr	r3, [pc, #492]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f3e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   99f40:	200c      	movs	r0, #12
   99f42:	4b7a      	ldr	r3, [pc, #488]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f44:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   99f46:	200d      	movs	r0, #13
   99f48:	4b78      	ldr	r3, [pc, #480]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f4a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   99f4c:	200e      	movs	r0, #14
   99f4e:	4b77      	ldr	r3, [pc, #476]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f50:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   99f52:	200f      	movs	r0, #15
   99f54:	4b75      	ldr	r3, [pc, #468]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f56:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   99f58:	2010      	movs	r0, #16
   99f5a:	4b74      	ldr	r3, [pc, #464]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f5c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   99f5e:	2011      	movs	r0, #17
   99f60:	4b72      	ldr	r3, [pc, #456]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f62:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   99f64:	2012      	movs	r0, #18
   99f66:	4b71      	ldr	r3, [pc, #452]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f68:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   99f6a:	2013      	movs	r0, #19
   99f6c:	4b6f      	ldr	r3, [pc, #444]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f6e:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   99f70:	2002      	movs	r0, #2
   99f72:	4b6f      	ldr	r3, [pc, #444]	; (9a130 <DD_SET_FLOW_PATH+0x2d4>)
   99f74:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   99f76:	2001      	movs	r0, #1
   99f78:	4b6d      	ldr	r3, [pc, #436]	; (9a130 <DD_SET_FLOW_PATH+0x2d4>)
   99f7a:	4798      	blx	r3
				
				
		break;
   99f7c:	e295      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   99f7e:	2001      	movs	r0, #1
   99f80:	4b6c      	ldr	r3, [pc, #432]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   99f82:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   99f84:	2003      	movs	r0, #3
   99f86:	4b69      	ldr	r3, [pc, #420]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f88:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   99f8a:	2004      	movs	r0, #4
   99f8c:	4b67      	ldr	r3, [pc, #412]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f8e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   99f90:	2005      	movs	r0, #5
   99f92:	4b66      	ldr	r3, [pc, #408]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f94:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   99f96:	2006      	movs	r0, #6
   99f98:	4b64      	ldr	r3, [pc, #400]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99f9a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   99f9c:	2007      	movs	r0, #7
   99f9e:	4b63      	ldr	r3, [pc, #396]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fa0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   99fa2:	2008      	movs	r0, #8
   99fa4:	4b61      	ldr	r3, [pc, #388]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fa6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   99fa8:	2009      	movs	r0, #9
   99faa:	4b60      	ldr	r3, [pc, #384]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fac:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   99fae:	200a      	movs	r0, #10
   99fb0:	4b5e      	ldr	r3, [pc, #376]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fb2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   99fb4:	200b      	movs	r0, #11
   99fb6:	4b5d      	ldr	r3, [pc, #372]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fb8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   99fba:	200c      	movs	r0, #12
   99fbc:	4b5b      	ldr	r3, [pc, #364]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fbe:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   99fc0:	200d      	movs	r0, #13
   99fc2:	4b5a      	ldr	r3, [pc, #360]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fc4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   99fc6:	200e      	movs	r0, #14
   99fc8:	4b58      	ldr	r3, [pc, #352]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fca:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   99fcc:	200f      	movs	r0, #15
   99fce:	4b59      	ldr	r3, [pc, #356]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   99fd0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   99fd2:	2010      	movs	r0, #16
   99fd4:	4b55      	ldr	r3, [pc, #340]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fd6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   99fd8:	2011      	movs	r0, #17
   99fda:	4b54      	ldr	r3, [pc, #336]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fdc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   99fde:	2012      	movs	r0, #18
   99fe0:	4b54      	ldr	r3, [pc, #336]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   99fe2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   99fe4:	2013      	movs	r0, #19
   99fe6:	4b51      	ldr	r3, [pc, #324]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   99fe8:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   99fea:	2002      	movs	r0, #2
   99fec:	4b50      	ldr	r3, [pc, #320]	; (9a130 <DD_SET_FLOW_PATH+0x2d4>)
   99fee:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   99ff0:	2001      	movs	r0, #1
   99ff2:	4b4f      	ldr	r3, [pc, #316]	; (9a130 <DD_SET_FLOW_PATH+0x2d4>)
   99ff4:	4798      	blx	r3
		
		
		break;
   99ff6:	e258      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   99ff8:	2001      	movs	r0, #1
   99ffa:	4b4e      	ldr	r3, [pc, #312]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   99ffc:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   99ffe:	2003      	movs	r0, #3
   9a000:	4b4a      	ldr	r3, [pc, #296]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a002:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   9a004:	2004      	movs	r0, #4
   9a006:	4b49      	ldr	r3, [pc, #292]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a008:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9a00a:	2005      	movs	r0, #5
   9a00c:	4b47      	ldr	r3, [pc, #284]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a00e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a010:	2006      	movs	r0, #6
   9a012:	4b46      	ldr	r3, [pc, #280]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a014:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a016:	2007      	movs	r0, #7
   9a018:	4b44      	ldr	r3, [pc, #272]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a01a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a01c:	2008      	movs	r0, #8
   9a01e:	4b43      	ldr	r3, [pc, #268]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a020:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a022:	2009      	movs	r0, #9
   9a024:	4b41      	ldr	r3, [pc, #260]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a026:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a028:	200a      	movs	r0, #10
   9a02a:	4b40      	ldr	r3, [pc, #256]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a02c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a02e:	200b      	movs	r0, #11
   9a030:	4b3e      	ldr	r3, [pc, #248]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a032:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a034:	200c      	movs	r0, #12
   9a036:	4b3d      	ldr	r3, [pc, #244]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a038:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   9a03a:	200d      	movs	r0, #13
   9a03c:	4b3b      	ldr	r3, [pc, #236]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a03e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9a040:	200e      	movs	r0, #14
   9a042:	4b3a      	ldr	r3, [pc, #232]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a044:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   9a046:	200f      	movs	r0, #15
   9a048:	4b38      	ldr	r3, [pc, #224]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a04a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a04c:	2010      	movs	r0, #16
   9a04e:	4b37      	ldr	r3, [pc, #220]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a050:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   9a052:	2011      	movs	r0, #17
   9a054:	4b35      	ldr	r3, [pc, #212]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a056:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a058:	2012      	movs	r0, #18
   9a05a:	4b36      	ldr	r3, [pc, #216]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a05c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   9a05e:	2013      	movs	r0, #19
   9a060:	4b32      	ldr	r3, [pc, #200]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a062:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   9a064:	2001      	movs	r0, #1
   9a066:	4b34      	ldr	r3, [pc, #208]	; (9a138 <DD_SET_FLOW_PATH+0x2dc>)
   9a068:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   9a06a:	2002      	movs	r0, #2
   9a06c:	4b30      	ldr	r3, [pc, #192]	; (9a130 <DD_SET_FLOW_PATH+0x2d4>)
   9a06e:	4798      	blx	r3
		
		break;
   9a070:	e21b      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   9a072:	2005      	movs	r0, #5
   9a074:	4b2d      	ldr	r3, [pc, #180]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a076:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   9a078:	2008      	movs	r0, #8
   9a07a:	4b2c      	ldr	r3, [pc, #176]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a07c:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   9a07e:	200a      	movs	r0, #10
   9a080:	4b2a      	ldr	r3, [pc, #168]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a082:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   9a084:	200b      	movs	r0, #11
   9a086:	4b29      	ldr	r3, [pc, #164]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a088:	4798      	blx	r3
				cl_wait(50);
   9a08a:	2032      	movs	r0, #50	; 0x32
   9a08c:	4b2b      	ldr	r3, [pc, #172]	; (9a13c <DD_SET_FLOW_PATH+0x2e0>)
   9a08e:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   9a090:	2006      	movs	r0, #6
   9a092:	4b28      	ldr	r3, [pc, #160]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a094:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   9a096:	2007      	movs	r0, #7
   9a098:	4b26      	ldr	r3, [pc, #152]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a09a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   9a09c:	2009      	movs	r0, #9
   9a09e:	4b25      	ldr	r3, [pc, #148]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0a0:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   9a0a2:	200c      	movs	r0, #12
   9a0a4:	4b23      	ldr	r3, [pc, #140]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0a6:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   9a0a8:	200d      	movs	r0, #13
   9a0aa:	4b20      	ldr	r3, [pc, #128]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0ac:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   9a0ae:	200e      	movs	r0, #14
   9a0b0:	4b1e      	ldr	r3, [pc, #120]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0b2:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   9a0b4:	200f      	movs	r0, #15
   9a0b6:	4b1f      	ldr	r3, [pc, #124]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0b8:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   9a0ba:	2010      	movs	r0, #16
   9a0bc:	4b1b      	ldr	r3, [pc, #108]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0be:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   9a0c0:	2011      	movs	r0, #17
   9a0c2:	4b1c      	ldr	r3, [pc, #112]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0c4:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   9a0c6:	2012      	movs	r0, #18
   9a0c8:	4b1a      	ldr	r3, [pc, #104]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0ca:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   9a0cc:	e1ed      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   9a0ce:	2006      	movs	r0, #6
   9a0d0:	4b16      	ldr	r3, [pc, #88]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0d2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a0d4:	2007      	movs	r0, #7
   9a0d6:	4b15      	ldr	r3, [pc, #84]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0d8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a0da:	2009      	movs	r0, #9
   9a0dc:	4b13      	ldr	r3, [pc, #76]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0de:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a0e0:	200c      	movs	r0, #12
   9a0e2:	4b12      	ldr	r3, [pc, #72]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a0e4:	4798      	blx	r3
		cl_wait(50);
   9a0e6:	2032      	movs	r0, #50	; 0x32
   9a0e8:	4b14      	ldr	r3, [pc, #80]	; (9a13c <DD_SET_FLOW_PATH+0x2e0>)
   9a0ea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a0ec:	2005      	movs	r0, #5
   9a0ee:	4b11      	ldr	r3, [pc, #68]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0f0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9a0f2:	2008      	movs	r0, #8
   9a0f4:	4b0f      	ldr	r3, [pc, #60]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0f6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a0f8:	200a      	movs	r0, #10
   9a0fa:	4b0e      	ldr	r3, [pc, #56]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a0fc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a0fe:	200b      	movs	r0, #11
   9a100:	4b0c      	ldr	r3, [pc, #48]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a102:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   9a104:	200d      	movs	r0, #13
   9a106:	4b09      	ldr	r3, [pc, #36]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a108:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   9a10a:	200e      	movs	r0, #14
   9a10c:	4b07      	ldr	r3, [pc, #28]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a10e:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   9a110:	200f      	movs	r0, #15
   9a112:	4b08      	ldr	r3, [pc, #32]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a114:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a116:	2010      	movs	r0, #16
   9a118:	4b04      	ldr	r3, [pc, #16]	; (9a12c <DD_SET_FLOW_PATH+0x2d0>)
   9a11a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9a11c:	2011      	movs	r0, #17
   9a11e:	4b05      	ldr	r3, [pc, #20]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a120:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a122:	2012      	movs	r0, #18
   9a124:	4b03      	ldr	r3, [pc, #12]	; (9a134 <DD_SET_FLOW_PATH+0x2d8>)
   9a126:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   9a128:	e1bf      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
   9a12a:	bf00      	nop
   9a12c:	000996e9 	.word	0x000996e9
   9a130:	000992b1 	.word	0x000992b1
   9a134:	00099629 	.word	0x00099629
   9a138:	00099111 	.word	0x00099111
   9a13c:	00093ea9 	.word	0x00093ea9
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	DD_RESET_VALVE (VALVE_ID20);
   9a140:	2014      	movs	r0, #20
   9a142:	4b8e      	ldr	r3, [pc, #568]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a144:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   9a146:	2005      	movs	r0, #5
   9a148:	4b8c      	ldr	r3, [pc, #560]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a14a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a14c:	2008      	movs	r0, #8
   9a14e:	4b8b      	ldr	r3, [pc, #556]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a150:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a152:	200a      	movs	r0, #10
   9a154:	4b89      	ldr	r3, [pc, #548]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a156:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a158:	200b      	movs	r0, #11
   9a15a:	4b88      	ldr	r3, [pc, #544]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a15c:	4798      	blx	r3
		cl_wait(100);		
   9a15e:	2064      	movs	r0, #100	; 0x64
   9a160:	4b87      	ldr	r3, [pc, #540]	; (9a380 <DD_SET_FLOW_PATH+0x524>)
   9a162:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a164:	2006      	movs	r0, #6
   9a166:	4b87      	ldr	r3, [pc, #540]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a168:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a16a:	2007      	movs	r0, #7
   9a16c:	4b85      	ldr	r3, [pc, #532]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a16e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a170:	2009      	movs	r0, #9
   9a172:	4b84      	ldr	r3, [pc, #528]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a174:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a176:	200c      	movs	r0, #12
   9a178:	4b82      	ldr	r3, [pc, #520]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a17a:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   9a17c:	4b82      	ldr	r3, [pc, #520]	; (9a388 <DD_SET_FLOW_PATH+0x52c>)
   9a17e:	781b      	ldrb	r3, [r3, #0]
   9a180:	2b00      	cmp	r3, #0
   9a182:	d010      	beq.n	9a1a6 <DD_SET_FLOW_PATH+0x34a>
   9a184:	4b81      	ldr	r3, [pc, #516]	; (9a38c <DD_SET_FLOW_PATH+0x530>)
   9a186:	781b      	ldrb	r3, [r3, #0]
   9a188:	f083 0301 	eor.w	r3, r3, #1
   9a18c:	b2db      	uxtb	r3, r3
   9a18e:	2b00      	cmp	r3, #0
   9a190:	d009      	beq.n	9a1a6 <DD_SET_FLOW_PATH+0x34a>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a192:	200f      	movs	r0, #15
   9a194:	4b7b      	ldr	r3, [pc, #492]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a196:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a198:	200d      	movs	r0, #13
   9a19a:	4b78      	ldr	r3, [pc, #480]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a19c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9a19e:	200e      	movs	r0, #14
   9a1a0:	4b76      	ldr	r3, [pc, #472]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a1a2:	4798      	blx	r3
   9a1a4:	e016      	b.n	9a1d4 <DD_SET_FLOW_PATH+0x378>
		}
		else if (isouf)
   9a1a6:	4b79      	ldr	r3, [pc, #484]	; (9a38c <DD_SET_FLOW_PATH+0x530>)
   9a1a8:	781b      	ldrb	r3, [r3, #0]
   9a1aa:	2b00      	cmp	r3, #0
   9a1ac:	d009      	beq.n	9a1c2 <DD_SET_FLOW_PATH+0x366>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a1ae:	200f      	movs	r0, #15
   9a1b0:	4b74      	ldr	r3, [pc, #464]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a1b2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a1b4:	200d      	movs	r0, #13
   9a1b6:	4b71      	ldr	r3, [pc, #452]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a1b8:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a1ba:	200e      	movs	r0, #14
   9a1bc:	4b71      	ldr	r3, [pc, #452]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a1be:	4798      	blx	r3
   9a1c0:	e008      	b.n	9a1d4 <DD_SET_FLOW_PATH+0x378>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   9a1c2:	200f      	movs	r0, #15
   9a1c4:	4b6d      	ldr	r3, [pc, #436]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a1c6:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9a1c8:	200d      	movs	r0, #13
   9a1ca:	4b6e      	ldr	r3, [pc, #440]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a1cc:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a1ce:	200e      	movs	r0, #14
   9a1d0:	4b6c      	ldr	r3, [pc, #432]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a1d2:	4798      	blx	r3
		}
		
		
		if( LoopBack)
   9a1d4:	4b6e      	ldr	r3, [pc, #440]	; (9a390 <DD_SET_FLOW_PATH+0x534>)
   9a1d6:	781b      	ldrb	r3, [r3, #0]
   9a1d8:	2b00      	cmp	r3, #0
   9a1da:	d006      	beq.n	9a1ea <DD_SET_FLOW_PATH+0x38e>
		{
			DD_SET_VALVE (VALVE_ID16);	
   9a1dc:	2010      	movs	r0, #16
   9a1de:	4b69      	ldr	r3, [pc, #420]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a1e0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   9a1e2:	2012      	movs	r0, #18
   9a1e4:	4b65      	ldr	r3, [pc, #404]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a1e6:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a1e8:	e15f      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
			DD_SET_VALVE (VALVE_ID16);	
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   9a1ea:	2010      	movs	r0, #16
   9a1ec:	4b63      	ldr	r3, [pc, #396]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a1ee:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   9a1f0:	2012      	movs	r0, #18
   9a1f2:	4b64      	ldr	r3, [pc, #400]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a1f4:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a1f6:	e158      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	DD_RESET_VALVE (VALVE_ID20);
   9a1f8:	2014      	movs	r0, #20
   9a1fa:	4b60      	ldr	r3, [pc, #384]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a1fc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a1fe:	2006      	movs	r0, #6
   9a200:	4b5e      	ldr	r3, [pc, #376]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a202:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a204:	2007      	movs	r0, #7
   9a206:	4b5d      	ldr	r3, [pc, #372]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a208:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a20a:	2009      	movs	r0, #9
   9a20c:	4b5b      	ldr	r3, [pc, #364]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a20e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a210:	200c      	movs	r0, #12
   9a212:	4b5a      	ldr	r3, [pc, #360]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a214:	4798      	blx	r3
		cl_wait(100);				
   9a216:	2064      	movs	r0, #100	; 0x64
   9a218:	4b59      	ldr	r3, [pc, #356]	; (9a380 <DD_SET_FLOW_PATH+0x524>)
   9a21a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a21c:	2005      	movs	r0, #5
   9a21e:	4b59      	ldr	r3, [pc, #356]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a220:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   9a222:	2008      	movs	r0, #8
   9a224:	4b57      	ldr	r3, [pc, #348]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a226:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a228:	200a      	movs	r0, #10
   9a22a:	4b56      	ldr	r3, [pc, #344]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a22c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a22e:	200b      	movs	r0, #11
   9a230:	4b54      	ldr	r3, [pc, #336]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a232:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   9a234:	4b54      	ldr	r3, [pc, #336]	; (9a388 <DD_SET_FLOW_PATH+0x52c>)
   9a236:	781b      	ldrb	r3, [r3, #0]
   9a238:	2b00      	cmp	r3, #0
   9a23a:	d010      	beq.n	9a25e <DD_SET_FLOW_PATH+0x402>
   9a23c:	4b53      	ldr	r3, [pc, #332]	; (9a38c <DD_SET_FLOW_PATH+0x530>)
   9a23e:	781b      	ldrb	r3, [r3, #0]
   9a240:	f083 0301 	eor.w	r3, r3, #1
   9a244:	b2db      	uxtb	r3, r3
   9a246:	2b00      	cmp	r3, #0
   9a248:	d009      	beq.n	9a25e <DD_SET_FLOW_PATH+0x402>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a24a:	200f      	movs	r0, #15
   9a24c:	4b4d      	ldr	r3, [pc, #308]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a24e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a250:	200d      	movs	r0, #13
   9a252:	4b4a      	ldr	r3, [pc, #296]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a254:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9a256:	200e      	movs	r0, #14
   9a258:	4b48      	ldr	r3, [pc, #288]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a25a:	4798      	blx	r3
   9a25c:	e016      	b.n	9a28c <DD_SET_FLOW_PATH+0x430>
		}
		else if (isouf)
   9a25e:	4b4b      	ldr	r3, [pc, #300]	; (9a38c <DD_SET_FLOW_PATH+0x530>)
   9a260:	781b      	ldrb	r3, [r3, #0]
   9a262:	2b00      	cmp	r3, #0
   9a264:	d009      	beq.n	9a27a <DD_SET_FLOW_PATH+0x41e>
		{
			DD_SET_VALVE (VALVE_ID15);	
   9a266:	200f      	movs	r0, #15
   9a268:	4b46      	ldr	r3, [pc, #280]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a26a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a26c:	200d      	movs	r0, #13
   9a26e:	4b43      	ldr	r3, [pc, #268]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a270:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a272:	200e      	movs	r0, #14
   9a274:	4b43      	ldr	r3, [pc, #268]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a276:	4798      	blx	r3
   9a278:	e008      	b.n	9a28c <DD_SET_FLOW_PATH+0x430>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   9a27a:	200f      	movs	r0, #15
   9a27c:	4b3f      	ldr	r3, [pc, #252]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a27e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9a280:	200d      	movs	r0, #13
   9a282:	4b40      	ldr	r3, [pc, #256]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a284:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a286:	200e      	movs	r0, #14
   9a288:	4b3e      	ldr	r3, [pc, #248]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a28a:	4798      	blx	r3
		}
		
		if( LoopBack)
   9a28c:	4b40      	ldr	r3, [pc, #256]	; (9a390 <DD_SET_FLOW_PATH+0x534>)
   9a28e:	781b      	ldrb	r3, [r3, #0]
   9a290:	2b00      	cmp	r3, #0
   9a292:	d006      	beq.n	9a2a2 <DD_SET_FLOW_PATH+0x446>
		{
			DD_SET_VALVE (VALVE_ID16);
   9a294:	2010      	movs	r0, #16
   9a296:	4b3b      	ldr	r3, [pc, #236]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a298:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   9a29a:	2012      	movs	r0, #18
   9a29c:	4b37      	ldr	r3, [pc, #220]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a29e:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a2a0:	e103      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   9a2a2:	2012      	movs	r0, #18
   9a2a4:	4b37      	ldr	r3, [pc, #220]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2a6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   9a2a8:	2010      	movs	r0, #16
   9a2aa:	4b34      	ldr	r3, [pc, #208]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a2ac:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a2ae:	e0fc      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   9a2b0:	2004      	movs	r0, #4
   9a2b2:	4b32      	ldr	r3, [pc, #200]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a2b4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a2b6:	2005      	movs	r0, #5
   9a2b8:	4b32      	ldr	r3, [pc, #200]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2ba:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a2bc:	2006      	movs	r0, #6
   9a2be:	4b31      	ldr	r3, [pc, #196]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2c0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a2c2:	2007      	movs	r0, #7
   9a2c4:	4b2f      	ldr	r3, [pc, #188]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2c6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9a2c8:	2008      	movs	r0, #8
   9a2ca:	4b2e      	ldr	r3, [pc, #184]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2cc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a2ce:	2009      	movs	r0, #9
   9a2d0:	4b2c      	ldr	r3, [pc, #176]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2d2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a2d4:	200a      	movs	r0, #10
   9a2d6:	4b2b      	ldr	r3, [pc, #172]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2d8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a2da:	200b      	movs	r0, #11
   9a2dc:	4b29      	ldr	r3, [pc, #164]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2de:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a2e0:	200c      	movs	r0, #12
   9a2e2:	4b28      	ldr	r3, [pc, #160]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2e4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   9a2e6:	200d      	movs	r0, #13
   9a2e8:	4b26      	ldr	r3, [pc, #152]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2ea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   9a2ec:	200e      	movs	r0, #14
   9a2ee:	4b25      	ldr	r3, [pc, #148]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2f0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   9a2f2:	200f      	movs	r0, #15
   9a2f4:	4b23      	ldr	r3, [pc, #140]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a2f6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   9a2f8:	2010      	movs	r0, #16
   9a2fa:	4b20      	ldr	r3, [pc, #128]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a2fc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9a2fe:	2011      	movs	r0, #17
   9a300:	4b20      	ldr	r3, [pc, #128]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a302:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9a304:	2012      	movs	r0, #18
   9a306:	4b1f      	ldr	r3, [pc, #124]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a308:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   9a30a:	2013      	movs	r0, #19
   9a30c:	4b1d      	ldr	r3, [pc, #116]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a30e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID20);		
   9a310:	2014      	movs	r0, #20
   9a312:	4b1c      	ldr	r3, [pc, #112]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a314:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   9a316:	e0c8      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		case  BC_FLUSH_OPEN_DIS:
		
		//	DD_SET_VALVE(VALVE_ID1);
		//	DD_RESET_VALVE (VALVE_ID2);
		//	DD_RESET_VALVE (VALVE_ID3);
		DD_SET_VALVE (VALVE_ID4);
   9a318:	2004      	movs	r0, #4
   9a31a:	4b1a      	ldr	r3, [pc, #104]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a31c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a31e:	2005      	movs	r0, #5
   9a320:	4b18      	ldr	r3, [pc, #96]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a322:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a324:	2006      	movs	r0, #6
   9a326:	4b17      	ldr	r3, [pc, #92]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a328:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a32a:	2007      	movs	r0, #7
   9a32c:	4b15      	ldr	r3, [pc, #84]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a32e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   9a330:	2008      	movs	r0, #8
   9a332:	4b14      	ldr	r3, [pc, #80]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a334:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a336:	2009      	movs	r0, #9
   9a338:	4b12      	ldr	r3, [pc, #72]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a33a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a33c:	200a      	movs	r0, #10
   9a33e:	4b11      	ldr	r3, [pc, #68]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a340:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a342:	200b      	movs	r0, #11
   9a344:	4b0f      	ldr	r3, [pc, #60]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a346:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a348:	200c      	movs	r0, #12
   9a34a:	4b0e      	ldr	r3, [pc, #56]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a34c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   9a34e:	200d      	movs	r0, #13
   9a350:	4b0c      	ldr	r3, [pc, #48]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a352:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   9a354:	200e      	movs	r0, #14
   9a356:	4b0b      	ldr	r3, [pc, #44]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a358:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   9a35a:	200f      	movs	r0, #15
   9a35c:	4b09      	ldr	r3, [pc, #36]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a35e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   9a360:	2010      	movs	r0, #16
   9a362:	4b08      	ldr	r3, [pc, #32]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a364:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9a366:	2011      	movs	r0, #17
   9a368:	4b06      	ldr	r3, [pc, #24]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a36a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   9a36c:	2012      	movs	r0, #18
   9a36e:	4b03      	ldr	r3, [pc, #12]	; (9a37c <DD_SET_FLOW_PATH+0x520>)
   9a370:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   9a372:	2013      	movs	r0, #19
   9a374:	4b03      	ldr	r3, [pc, #12]	; (9a384 <DD_SET_FLOW_PATH+0x528>)
   9a376:	4798      	blx	r3
		//	DD_SET_PUMP(DCMOTOR1);
		//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   9a378:	e097      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
   9a37a:	bf00      	nop
   9a37c:	000996e9 	.word	0x000996e9
   9a380:	00093ea9 	.word	0x00093ea9
   9a384:	00099629 	.word	0x00099629
   9a388:	20071a40 	.word	0x20071a40
   9a38c:	200719e4 	.word	0x200719e4
   9a390:	20071a41 	.word	0x20071a41
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   9a394:	2005      	movs	r0, #5
   9a396:	4b47      	ldr	r3, [pc, #284]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a398:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a39a:	2008      	movs	r0, #8
   9a39c:	4b45      	ldr	r3, [pc, #276]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a39e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a3a0:	200a      	movs	r0, #10
   9a3a2:	4b44      	ldr	r3, [pc, #272]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3a4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a3a6:	200b      	movs	r0, #11
   9a3a8:	4b42      	ldr	r3, [pc, #264]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3aa:	4798      	blx	r3
		cl_wait(100);		
   9a3ac:	2064      	movs	r0, #100	; 0x64
   9a3ae:	4b42      	ldr	r3, [pc, #264]	; (9a4b8 <DD_SET_FLOW_PATH+0x65c>)
   9a3b0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9a3b2:	2006      	movs	r0, #6
   9a3b4:	4b41      	ldr	r3, [pc, #260]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a3b6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9a3b8:	2007      	movs	r0, #7
   9a3ba:	4b40      	ldr	r3, [pc, #256]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a3bc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   9a3be:	2009      	movs	r0, #9
   9a3c0:	4b3e      	ldr	r3, [pc, #248]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a3c2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9a3c4:	200c      	movs	r0, #12
   9a3c6:	4b3d      	ldr	r3, [pc, #244]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a3c8:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   9a3ca:	2010      	movs	r0, #16
   9a3cc:	4b3b      	ldr	r3, [pc, #236]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a3ce:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   9a3d0:	200f      	movs	r0, #15
   9a3d2:	4b38      	ldr	r3, [pc, #224]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3d4:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   9a3d6:	2012      	movs	r0, #18
   9a3d8:	4b36      	ldr	r3, [pc, #216]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3da:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a3dc:	e065      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   9a3de:	2006      	movs	r0, #6
   9a3e0:	4b34      	ldr	r3, [pc, #208]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3e2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a3e4:	2007      	movs	r0, #7
   9a3e6:	4b33      	ldr	r3, [pc, #204]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3e8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a3ea:	2009      	movs	r0, #9
   9a3ec:	4b31      	ldr	r3, [pc, #196]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3ee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a3f0:	200c      	movs	r0, #12
   9a3f2:	4b30      	ldr	r3, [pc, #192]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a3f4:	4798      	blx	r3
		cl_wait(100);				
   9a3f6:	2064      	movs	r0, #100	; 0x64
   9a3f8:	4b2f      	ldr	r3, [pc, #188]	; (9a4b8 <DD_SET_FLOW_PATH+0x65c>)
   9a3fa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9a3fc:	2005      	movs	r0, #5
   9a3fe:	4b2f      	ldr	r3, [pc, #188]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a400:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   9a402:	2008      	movs	r0, #8
   9a404:	4b2d      	ldr	r3, [pc, #180]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a406:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9a408:	200a      	movs	r0, #10
   9a40a:	4b2c      	ldr	r3, [pc, #176]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a40c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9a40e:	200b      	movs	r0, #11
   9a410:	4b2a      	ldr	r3, [pc, #168]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a412:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   9a414:	200f      	movs	r0, #15
   9a416:	4b27      	ldr	r3, [pc, #156]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a418:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   9a41a:	2010      	movs	r0, #16
   9a41c:	4b27      	ldr	r3, [pc, #156]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a41e:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   9a420:	2012      	movs	r0, #18
   9a422:	4b24      	ldr	r3, [pc, #144]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a424:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   9a426:	e040      	b.n	9a4aa <DD_SET_FLOW_PATH+0x64e>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   9a428:	2005      	movs	r0, #5
   9a42a:	4b22      	ldr	r3, [pc, #136]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a42c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9a42e:	2006      	movs	r0, #6
   9a430:	4b20      	ldr	r3, [pc, #128]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a432:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   9a434:	2007      	movs	r0, #7
   9a436:	4b1f      	ldr	r3, [pc, #124]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a438:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9a43a:	2008      	movs	r0, #8
   9a43c:	4b1d      	ldr	r3, [pc, #116]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a43e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9a440:	2009      	movs	r0, #9
   9a442:	4b1c      	ldr	r3, [pc, #112]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a444:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9a446:	200a      	movs	r0, #10
   9a448:	4b1a      	ldr	r3, [pc, #104]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a44a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9a44c:	200b      	movs	r0, #11
   9a44e:	4b19      	ldr	r3, [pc, #100]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a450:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9a452:	200c      	movs	r0, #12
   9a454:	4b17      	ldr	r3, [pc, #92]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a456:	4798      	blx	r3

		if( ByPass)
   9a458:	4b19      	ldr	r3, [pc, #100]	; (9a4c0 <DD_SET_FLOW_PATH+0x664>)
   9a45a:	781b      	ldrb	r3, [r3, #0]
   9a45c:	2b00      	cmp	r3, #0
   9a45e:	d009      	beq.n	9a474 <DD_SET_FLOW_PATH+0x618>
		{
			DD_SET_VALVE (VALVE_ID15);
   9a460:	200f      	movs	r0, #15
   9a462:	4b16      	ldr	r3, [pc, #88]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a464:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9a466:	200d      	movs	r0, #13
   9a468:	4b12      	ldr	r3, [pc, #72]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a46a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9a46c:	200e      	movs	r0, #14
   9a46e:	4b11      	ldr	r3, [pc, #68]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a470:	4798      	blx	r3
   9a472:	e008      	b.n	9a486 <DD_SET_FLOW_PATH+0x62a>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   9a474:	200f      	movs	r0, #15
   9a476:	4b0f      	ldr	r3, [pc, #60]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a478:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9a47a:	200d      	movs	r0, #13
   9a47c:	4b0f      	ldr	r3, [pc, #60]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a47e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   9a480:	200e      	movs	r0, #14
   9a482:	4b0e      	ldr	r3, [pc, #56]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a484:	4798      	blx	r3
		}
		if( LoopBack)
   9a486:	4b0f      	ldr	r3, [pc, #60]	; (9a4c4 <DD_SET_FLOW_PATH+0x668>)
   9a488:	781b      	ldrb	r3, [r3, #0]
   9a48a:	2b00      	cmp	r3, #0
   9a48c:	d006      	beq.n	9a49c <DD_SET_FLOW_PATH+0x640>
		{
			DD_SET_VALVE (VALVE_ID16);
   9a48e:	2010      	movs	r0, #16
   9a490:	4b0a      	ldr	r3, [pc, #40]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a492:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   9a494:	2012      	movs	r0, #18
   9a496:	4b07      	ldr	r3, [pc, #28]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a498:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   9a49a:	e005      	b.n	9a4a8 <DD_SET_FLOW_PATH+0x64c>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   9a49c:	2010      	movs	r0, #16
   9a49e:	4b05      	ldr	r3, [pc, #20]	; (9a4b4 <DD_SET_FLOW_PATH+0x658>)
   9a4a0:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   9a4a2:	2012      	movs	r0, #18
   9a4a4:	4b05      	ldr	r3, [pc, #20]	; (9a4bc <DD_SET_FLOW_PATH+0x660>)
   9a4a6:	4798      	blx	r3
		}
		break;
   9a4a8:	bf00      	nop
	}
	
	return 0;
   9a4aa:	2300      	movs	r3, #0
	
}
   9a4ac:	4618      	mov	r0, r3
   9a4ae:	3708      	adds	r7, #8
   9a4b0:	46bd      	mov	sp, r7
   9a4b2:	bd80      	pop	{r7, pc}
   9a4b4:	000996e9 	.word	0x000996e9
   9a4b8:	00093ea9 	.word	0x00093ea9
   9a4bc:	00099629 	.word	0x00099629
   9a4c0:	20071a40 	.word	0x20071a40
   9a4c4:	20071a41 	.word	0x20071a41

0009a4c8 <DD_LATCH_STROBE_X1_X16>:

//uint8_t DD_LATCH_STROBE_X1_X5(void)
uint8_t DD_LATCH_STROBE_X1_X16(void)
{
   9a4c8:	b580      	push	{r7, lr}
   9a4ca:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   9a4cc:	210d      	movs	r1, #13
   9a4ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9a4d2:	4b0c      	ldr	r3, [pc, #48]	; (9a504 <DD_LATCH_STROBE_X1_X16+0x3c>)
   9a4d4:	4798      	blx	r3
	cl_wait(2);
   9a4d6:	2002      	movs	r0, #2
   9a4d8:	4b0b      	ldr	r3, [pc, #44]	; (9a508 <DD_LATCH_STROBE_X1_X16+0x40>)
   9a4da:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   9a4dc:	210d      	movs	r1, #13
   9a4de:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9a4e2:	4b0a      	ldr	r3, [pc, #40]	; (9a50c <DD_LATCH_STROBE_X1_X16+0x44>)
   9a4e4:	4798      	blx	r3
	cl_wait(2);
   9a4e6:	2002      	movs	r0, #2
   9a4e8:	4b07      	ldr	r3, [pc, #28]	; (9a508 <DD_LATCH_STROBE_X1_X16+0x40>)
   9a4ea:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   9a4ec:	210d      	movs	r1, #13
   9a4ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9a4f2:	4b04      	ldr	r3, [pc, #16]	; (9a504 <DD_LATCH_STROBE_X1_X16+0x3c>)
   9a4f4:	4798      	blx	r3
	cl_wait(2);
   9a4f6:	2002      	movs	r0, #2
   9a4f8:	4b03      	ldr	r3, [pc, #12]	; (9a508 <DD_LATCH_STROBE_X1_X16+0x40>)
   9a4fa:	4798      	blx	r3
	
	return 0;
   9a4fc:	2300      	movs	r3, #0
}
   9a4fe:	4618      	mov	r0, r3
   9a500:	bd80      	pop	{r7, pc}
   9a502:	bf00      	nop
   9a504:	000981d5 	.word	0x000981d5
   9a508:	00093ea9 	.word	0x00093ea9
   9a50c:	00098151 	.word	0x00098151

0009a510 <DD_LATCH_STROBE_X17_X20>:

uint8_t DD_LATCH_STROBE_X17_X20(void)
{
   9a510:	b580      	push	{r7, lr}
   9a512:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   9a514:	210b      	movs	r1, #11
   9a516:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9a51a:	4b0c      	ldr	r3, [pc, #48]	; (9a54c <DD_LATCH_STROBE_X17_X20+0x3c>)
   9a51c:	4798      	blx	r3
	cl_wait(2);
   9a51e:	2002      	movs	r0, #2
   9a520:	4b0b      	ldr	r3, [pc, #44]	; (9a550 <DD_LATCH_STROBE_X17_X20+0x40>)
   9a522:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   9a524:	210b      	movs	r1, #11
   9a526:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9a52a:	4b0a      	ldr	r3, [pc, #40]	; (9a554 <DD_LATCH_STROBE_X17_X20+0x44>)
   9a52c:	4798      	blx	r3
	cl_wait(2);
   9a52e:	2002      	movs	r0, #2
   9a530:	4b07      	ldr	r3, [pc, #28]	; (9a550 <DD_LATCH_STROBE_X17_X20+0x40>)
   9a532:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   9a534:	210b      	movs	r1, #11
   9a536:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9a53a:	4b04      	ldr	r3, [pc, #16]	; (9a54c <DD_LATCH_STROBE_X17_X20+0x3c>)
   9a53c:	4798      	blx	r3
	cl_wait(2);
   9a53e:	2002      	movs	r0, #2
   9a540:	4b03      	ldr	r3, [pc, #12]	; (9a550 <DD_LATCH_STROBE_X17_X20+0x40>)
   9a542:	4798      	blx	r3
	
	return 0;
   9a544:	2300      	movs	r3, #0
}
   9a546:	4618      	mov	r0, r3
   9a548:	bd80      	pop	{r7, pc}
   9a54a:	bf00      	nop
   9a54c:	000981d5 	.word	0x000981d5
   9a550:	00093ea9 	.word	0x00093ea9
   9a554:	00098151 	.word	0x00098151

0009a558 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   9a558:	b480      	push	{r7}
   9a55a:	b083      	sub	sp, #12
   9a55c:	af00      	add	r7, sp, #0
   9a55e:	4603      	mov	r3, r0
   9a560:	6039      	str	r1, [r7, #0]
   9a562:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   9a564:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9a568:	2b00      	cmp	r3, #0
   9a56a:	da0b      	bge.n	9a584 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   9a56c:	490d      	ldr	r1, [pc, #52]	; (9a5a4 <NVIC_SetPriority+0x4c>)
   9a56e:	79fb      	ldrb	r3, [r7, #7]
   9a570:	f003 030f 	and.w	r3, r3, #15
   9a574:	3b04      	subs	r3, #4
   9a576:	683a      	ldr	r2, [r7, #0]
   9a578:	b2d2      	uxtb	r2, r2
   9a57a:	0112      	lsls	r2, r2, #4
   9a57c:	b2d2      	uxtb	r2, r2
   9a57e:	440b      	add	r3, r1
   9a580:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   9a582:	e009      	b.n	9a598 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   9a584:	4908      	ldr	r1, [pc, #32]	; (9a5a8 <NVIC_SetPriority+0x50>)
   9a586:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9a58a:	683a      	ldr	r2, [r7, #0]
   9a58c:	b2d2      	uxtb	r2, r2
   9a58e:	0112      	lsls	r2, r2, #4
   9a590:	b2d2      	uxtb	r2, r2
   9a592:	440b      	add	r3, r1
   9a594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   9a598:	bf00      	nop
   9a59a:	370c      	adds	r7, #12
   9a59c:	46bd      	mov	sp, r7
   9a59e:	bc80      	pop	{r7}
   9a5a0:	4770      	bx	lr
   9a5a2:	bf00      	nop
   9a5a4:	e000ed00 	.word	0xe000ed00
   9a5a8:	e000e100 	.word	0xe000e100

0009a5ac <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   9a5ac:	b580      	push	{r7, lr}
   9a5ae:	b082      	sub	sp, #8
   9a5b0:	af00      	add	r7, sp, #0
   9a5b2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   9a5b4:	687b      	ldr	r3, [r7, #4]
   9a5b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   9a5ba:	d301      	bcc.n	9a5c0 <SysTick_Config+0x14>
   9a5bc:	2301      	movs	r3, #1
   9a5be:	e011      	b.n	9a5e4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   9a5c0:	4a0a      	ldr	r2, [pc, #40]	; (9a5ec <SysTick_Config+0x40>)
   9a5c2:	687b      	ldr	r3, [r7, #4]
   9a5c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   9a5c8:	3b01      	subs	r3, #1
   9a5ca:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   9a5cc:	210f      	movs	r1, #15
   9a5ce:	f04f 30ff 	mov.w	r0, #4294967295
   9a5d2:	4b07      	ldr	r3, [pc, #28]	; (9a5f0 <SysTick_Config+0x44>)
   9a5d4:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   9a5d6:	4b05      	ldr	r3, [pc, #20]	; (9a5ec <SysTick_Config+0x40>)
   9a5d8:	2200      	movs	r2, #0
   9a5da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   9a5dc:	4b03      	ldr	r3, [pc, #12]	; (9a5ec <SysTick_Config+0x40>)
   9a5de:	2207      	movs	r2, #7
   9a5e0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   9a5e2:	2300      	movs	r3, #0
}
   9a5e4:	4618      	mov	r0, r3
   9a5e6:	3708      	adds	r7, #8
   9a5e8:	46bd      	mov	sp, r7
   9a5ea:	bd80      	pop	{r7, pc}
   9a5ec:	e000e010 	.word	0xe000e010
   9a5f0:	0009a559 	.word	0x0009a559

0009a5f4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   9a5f4:	b480      	push	{r7}
   9a5f6:	b083      	sub	sp, #12
   9a5f8:	af00      	add	r7, sp, #0
   9a5fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9a5fc:	687b      	ldr	r3, [r7, #4]
   9a5fe:	2b07      	cmp	r3, #7
   9a600:	d825      	bhi.n	9a64e <osc_get_rate+0x5a>
   9a602:	a201      	add	r2, pc, #4	; (adr r2, 9a608 <osc_get_rate+0x14>)
   9a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a608:	0009a629 	.word	0x0009a629
   9a60c:	0009a62f 	.word	0x0009a62f
   9a610:	0009a635 	.word	0x0009a635
   9a614:	0009a63b 	.word	0x0009a63b
   9a618:	0009a63f 	.word	0x0009a63f
   9a61c:	0009a643 	.word	0x0009a643
   9a620:	0009a647 	.word	0x0009a647
   9a624:	0009a64b 	.word	0x0009a64b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9a628:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9a62c:	e010      	b.n	9a650 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9a62e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9a632:	e00d      	b.n	9a650 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9a634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9a638:	e00a      	b.n	9a650 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9a63a:	4b08      	ldr	r3, [pc, #32]	; (9a65c <osc_get_rate+0x68>)
   9a63c:	e008      	b.n	9a650 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9a63e:	4b08      	ldr	r3, [pc, #32]	; (9a660 <osc_get_rate+0x6c>)
   9a640:	e006      	b.n	9a650 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9a642:	4b08      	ldr	r3, [pc, #32]	; (9a664 <osc_get_rate+0x70>)
   9a644:	e004      	b.n	9a650 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9a646:	4b07      	ldr	r3, [pc, #28]	; (9a664 <osc_get_rate+0x70>)
   9a648:	e002      	b.n	9a650 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9a64a:	4b06      	ldr	r3, [pc, #24]	; (9a664 <osc_get_rate+0x70>)
   9a64c:	e000      	b.n	9a650 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9a64e:	2300      	movs	r3, #0
}
   9a650:	4618      	mov	r0, r3
   9a652:	370c      	adds	r7, #12
   9a654:	46bd      	mov	sp, r7
   9a656:	bc80      	pop	{r7}
   9a658:	4770      	bx	lr
   9a65a:	bf00      	nop
   9a65c:	003d0900 	.word	0x003d0900
   9a660:	007a1200 	.word	0x007a1200
   9a664:	00b71b00 	.word	0x00b71b00

0009a668 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   9a668:	b580      	push	{r7, lr}
   9a66a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9a66c:	2006      	movs	r0, #6
   9a66e:	4b04      	ldr	r3, [pc, #16]	; (9a680 <sysclk_get_main_hz+0x18>)
   9a670:	4798      	blx	r3
   9a672:	4602      	mov	r2, r0
   9a674:	4613      	mov	r3, r2
   9a676:	00db      	lsls	r3, r3, #3
   9a678:	1a9b      	subs	r3, r3, r2
   9a67a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9a67c:	4618      	mov	r0, r3
   9a67e:	bd80      	pop	{r7, pc}
   9a680:	0009a5f5 	.word	0x0009a5f5

0009a684 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   9a684:	b580      	push	{r7, lr}
   9a686:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   9a688:	4b02      	ldr	r3, [pc, #8]	; (9a694 <sysclk_get_cpu_hz+0x10>)
   9a68a:	4798      	blx	r3
   9a68c:	4603      	mov	r3, r0
   9a68e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   9a690:	4618      	mov	r0, r3
   9a692:	bd80      	pop	{r7, pc}
   9a694:	0009a669 	.word	0x0009a669

0009a698 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   9a698:	b580      	push	{r7, lr}
   9a69a:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   9a69c:	4b15      	ldr	r3, [pc, #84]	; (9a6f4 <DD_INIT_TIMER+0x5c>)
   9a69e:	4a16      	ldr	r2, [pc, #88]	; (9a6f8 <DD_INIT_TIMER+0x60>)
   9a6a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   9a6a4:	4b15      	ldr	r3, [pc, #84]	; (9a6fc <DD_INIT_TIMER+0x64>)
   9a6a6:	4a14      	ldr	r2, [pc, #80]	; (9a6f8 <DD_INIT_TIMER+0x60>)
   9a6a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   9a6ac:	4b14      	ldr	r3, [pc, #80]	; (9a700 <DD_INIT_TIMER+0x68>)
   9a6ae:	4a12      	ldr	r2, [pc, #72]	; (9a6f8 <DD_INIT_TIMER+0x60>)
   9a6b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   9a6b4:	201b      	movs	r0, #27
   9a6b6:	4b13      	ldr	r3, [pc, #76]	; (9a704 <DD_INIT_TIMER+0x6c>)
   9a6b8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   9a6ba:	201c      	movs	r0, #28
   9a6bc:	4b11      	ldr	r3, [pc, #68]	; (9a704 <DD_INIT_TIMER+0x6c>)
   9a6be:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   9a6c0:	201d      	movs	r0, #29
   9a6c2:	4b10      	ldr	r3, [pc, #64]	; (9a704 <DD_INIT_TIMER+0x6c>)
   9a6c4:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9a6c6:	4b0b      	ldr	r3, [pc, #44]	; (9a6f4 <DD_INIT_TIMER+0x5c>)
   9a6c8:	f24c 0203 	movw	r2, #49155	; 0xc003
   9a6cc:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9a6ce:	4b0b      	ldr	r3, [pc, #44]	; (9a6fc <DD_INIT_TIMER+0x64>)
   9a6d0:	f24c 0203 	movw	r2, #49155	; 0xc003
   9a6d4:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9a6d6:	4b0a      	ldr	r3, [pc, #40]	; (9a700 <DD_INIT_TIMER+0x68>)
   9a6d8:	f24c 0203 	movw	r2, #49155	; 0xc003
   9a6dc:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9a6de:	4b05      	ldr	r3, [pc, #20]	; (9a6f4 <DD_INIT_TIMER+0x5c>)
   9a6e0:	2210      	movs	r2, #16
   9a6e2:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9a6e4:	4b05      	ldr	r3, [pc, #20]	; (9a6fc <DD_INIT_TIMER+0x64>)
   9a6e6:	2210      	movs	r2, #16
   9a6e8:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   9a6ea:	4b05      	ldr	r3, [pc, #20]	; (9a700 <DD_INIT_TIMER+0x68>)
   9a6ec:	2210      	movs	r2, #16
   9a6ee:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   9a6f0:	bf00      	nop
   9a6f2:	bd80      	pop	{r7, pc}
   9a6f4:	40080000 	.word	0x40080000
   9a6f8:	54494d00 	.word	0x54494d00
   9a6fc:	40084000 	.word	0x40084000
   9a700:	40088000 	.word	0x40088000
   9a704:	0009bf9d 	.word	0x0009bf9d

0009a708 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   9a708:	b580      	push	{r7, lr}
   9a70a:	b084      	sub	sp, #16
   9a70c:	af00      	add	r7, sp, #0
   9a70e:	60f8      	str	r0, [r7, #12]
   9a710:	60b9      	str	r1, [r7, #8]
   9a712:	603b      	str	r3, [r7, #0]
   9a714:	4613      	mov	r3, r2
   9a716:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   9a718:	2000      	movs	r0, #0
   9a71a:	4b16      	ldr	r3, [pc, #88]	; (9a774 <DD_SET_TIMER+0x6c>)
   9a71c:	4798      	blx	r3
	channel=0;
   9a71e:	2300      	movs	r3, #0
   9a720:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9a722:	4b15      	ldr	r3, [pc, #84]	; (9a778 <DD_SET_TIMER+0x70>)
   9a724:	f24c 0203 	movw	r2, #49155	; 0xc003
   9a728:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   9a72a:	683a      	ldr	r2, [r7, #0]
   9a72c:	68b9      	ldr	r1, [r7, #8]
   9a72e:	68f8      	ldr	r0, [r7, #12]
   9a730:	4b12      	ldr	r3, [pc, #72]	; (9a77c <DD_SET_TIMER+0x74>)
   9a732:	4798      	blx	r3
	tc_start(tc, channel);
   9a734:	68b9      	ldr	r1, [r7, #8]
   9a736:	68f8      	ldr	r0, [r7, #12]
   9a738:	4b11      	ldr	r3, [pc, #68]	; (9a780 <DD_SET_TIMER+0x78>)
   9a73a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   9a73c:	2210      	movs	r2, #16
   9a73e:	68b9      	ldr	r1, [r7, #8]
   9a740:	68f8      	ldr	r0, [r7, #12]
   9a742:	4b10      	ldr	r3, [pc, #64]	; (9a784 <DD_SET_TIMER+0x7c>)
   9a744:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   9a746:	4b10      	ldr	r3, [pc, #64]	; (9a788 <DD_SET_TIMER+0x80>)
   9a748:	4798      	blx	r3
   9a74a:	4602      	mov	r2, r0
   9a74c:	4b0f      	ldr	r3, [pc, #60]	; (9a78c <DD_SET_TIMER+0x84>)
   9a74e:	fba3 2302 	umull	r2, r3, r3, r2
   9a752:	099b      	lsrs	r3, r3, #6
   9a754:	4618      	mov	r0, r3
   9a756:	4b0e      	ldr	r3, [pc, #56]	; (9a790 <DD_SET_TIMER+0x88>)
   9a758:	4798      	blx	r3
   9a75a:	4603      	mov	r3, r0
   9a75c:	2b00      	cmp	r3, #0
   9a75e:	d003      	beq.n	9a768 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   9a760:	480c      	ldr	r0, [pc, #48]	; (9a794 <DD_SET_TIMER+0x8c>)
   9a762:	4b0d      	ldr	r3, [pc, #52]	; (9a798 <DD_SET_TIMER+0x90>)
   9a764:	4798      	blx	r3
		while (1);
   9a766:	e7fe      	b.n	9a766 <DD_SET_TIMER+0x5e>
	}
	
}
   9a768:	bf00      	nop
   9a76a:	4618      	mov	r0, r3
   9a76c:	3710      	adds	r7, #16
   9a76e:	46bd      	mov	sp, r7
   9a770:	bd80      	pop	{r7, pc}
   9a772:	bf00      	nop
   9a774:	0009c01d 	.word	0x0009c01d
   9a778:	40088000 	.word	0x40088000
   9a77c:	0009c075 	.word	0x0009c075
   9a780:	0009c055 	.word	0x0009c055
   9a784:	0009c099 	.word	0x0009c099
   9a788:	0009a685 	.word	0x0009a685
   9a78c:	10624dd3 	.word	0x10624dd3
   9a790:	0009a5ad 	.word	0x0009a5ad
   9a794:	000aa380 	.word	0x000aa380
   9a798:	000a8601 	.word	0x000a8601

0009a79c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   9a79c:	b480      	push	{r7}
   9a79e:	b083      	sub	sp, #12
   9a7a0:	af00      	add	r7, sp, #0
   9a7a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9a7a4:	687b      	ldr	r3, [r7, #4]
   9a7a6:	2b07      	cmp	r3, #7
   9a7a8:	d825      	bhi.n	9a7f6 <osc_get_rate+0x5a>
   9a7aa:	a201      	add	r2, pc, #4	; (adr r2, 9a7b0 <osc_get_rate+0x14>)
   9a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9a7b0:	0009a7d1 	.word	0x0009a7d1
   9a7b4:	0009a7d7 	.word	0x0009a7d7
   9a7b8:	0009a7dd 	.word	0x0009a7dd
   9a7bc:	0009a7e3 	.word	0x0009a7e3
   9a7c0:	0009a7e7 	.word	0x0009a7e7
   9a7c4:	0009a7eb 	.word	0x0009a7eb
   9a7c8:	0009a7ef 	.word	0x0009a7ef
   9a7cc:	0009a7f3 	.word	0x0009a7f3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   9a7d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9a7d4:	e010      	b.n	9a7f8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9a7d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9a7da:	e00d      	b.n	9a7f8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   9a7dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   9a7e0:	e00a      	b.n	9a7f8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9a7e2:	4b08      	ldr	r3, [pc, #32]	; (9a804 <osc_get_rate+0x68>)
   9a7e4:	e008      	b.n	9a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9a7e6:	4b08      	ldr	r3, [pc, #32]	; (9a808 <osc_get_rate+0x6c>)
   9a7e8:	e006      	b.n	9a7f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9a7ea:	4b08      	ldr	r3, [pc, #32]	; (9a80c <osc_get_rate+0x70>)
   9a7ec:	e004      	b.n	9a7f8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9a7ee:	4b07      	ldr	r3, [pc, #28]	; (9a80c <osc_get_rate+0x70>)
   9a7f0:	e002      	b.n	9a7f8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9a7f2:	4b06      	ldr	r3, [pc, #24]	; (9a80c <osc_get_rate+0x70>)
   9a7f4:	e000      	b.n	9a7f8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9a7f6:	2300      	movs	r3, #0
}
   9a7f8:	4618      	mov	r0, r3
   9a7fa:	370c      	adds	r7, #12
   9a7fc:	46bd      	mov	sp, r7
   9a7fe:	bc80      	pop	{r7}
   9a800:	4770      	bx	lr
   9a802:	bf00      	nop
   9a804:	003d0900 	.word	0x003d0900
   9a808:	007a1200 	.word	0x007a1200
   9a80c:	00b71b00 	.word	0x00b71b00

0009a810 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   9a810:	b580      	push	{r7, lr}
   9a812:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9a814:	2006      	movs	r0, #6
   9a816:	4b04      	ldr	r3, [pc, #16]	; (9a828 <sysclk_get_main_hz+0x18>)
   9a818:	4798      	blx	r3
   9a81a:	4602      	mov	r2, r0
   9a81c:	4613      	mov	r3, r2
   9a81e:	00db      	lsls	r3, r3, #3
   9a820:	1a9b      	subs	r3, r3, r2
   9a822:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9a824:	4618      	mov	r0, r3
   9a826:	bd80      	pop	{r7, pc}
   9a828:	0009a79d 	.word	0x0009a79d

0009a82c <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   9a82c:	b580      	push	{r7, lr}
   9a82e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   9a830:	4b02      	ldr	r3, [pc, #8]	; (9a83c <sysclk_get_peripheral_hz+0x10>)
   9a832:	4798      	blx	r3
   9a834:	4603      	mov	r3, r0
   9a836:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   9a838:	4618      	mov	r0, r3
   9a83a:	bd80      	pop	{r7, pc}
   9a83c:	0009a811 	.word	0x0009a811

0009a840 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   9a840:	b580      	push	{r7, lr}
   9a842:	b082      	sub	sp, #8
   9a844:	af00      	add	r7, sp, #0
   9a846:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   9a848:	6878      	ldr	r0, [r7, #4]
   9a84a:	4b03      	ldr	r3, [pc, #12]	; (9a858 <sysclk_enable_peripheral_clock+0x18>)
   9a84c:	4798      	blx	r3
}
   9a84e:	bf00      	nop
   9a850:	3708      	adds	r7, #8
   9a852:	46bd      	mov	sp, r7
   9a854:	bd80      	pop	{r7, pc}
   9a856:	bf00      	nop
   9a858:	0009bf9d 	.word	0x0009bf9d

0009a85c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   9a85c:	b580      	push	{r7, lr}
   9a85e:	b08c      	sub	sp, #48	; 0x30
   9a860:	af00      	add	r7, sp, #0
   9a862:	6078      	str	r0, [r7, #4]
   9a864:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   9a866:	4b40      	ldr	r3, [pc, #256]	; (9a968 <usart_serial_init+0x10c>)
   9a868:	4798      	blx	r3
   9a86a:	4603      	mov	r3, r0
   9a86c:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   9a86e:	683b      	ldr	r3, [r7, #0]
   9a870:	681b      	ldr	r3, [r3, #0]
   9a872:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   9a874:	683b      	ldr	r3, [r7, #0]
   9a876:	689b      	ldr	r3, [r3, #8]
   9a878:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   9a87a:	683b      	ldr	r3, [r7, #0]
   9a87c:	681b      	ldr	r3, [r3, #0]
   9a87e:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   9a880:	683b      	ldr	r3, [r7, #0]
   9a882:	685b      	ldr	r3, [r3, #4]
   9a884:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   9a886:	683b      	ldr	r3, [r7, #0]
   9a888:	689b      	ldr	r3, [r3, #8]
   9a88a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   9a88c:	683b      	ldr	r3, [r7, #0]
   9a88e:	7b1b      	ldrb	r3, [r3, #12]
   9a890:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9a892:	2300      	movs	r3, #0
   9a894:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9a896:	687b      	ldr	r3, [r7, #4]
   9a898:	4a34      	ldr	r2, [pc, #208]	; (9a96c <usart_serial_init+0x110>)
   9a89a:	4293      	cmp	r3, r2
   9a89c:	d108      	bne.n	9a8b0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   9a89e:	2008      	movs	r0, #8
   9a8a0:	4b33      	ldr	r3, [pc, #204]	; (9a970 <usart_serial_init+0x114>)
   9a8a2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   9a8a4:	f107 0320 	add.w	r3, r7, #32
   9a8a8:	4619      	mov	r1, r3
   9a8aa:	6878      	ldr	r0, [r7, #4]
   9a8ac:	4b31      	ldr	r3, [pc, #196]	; (9a974 <usart_serial_init+0x118>)
   9a8ae:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9a8b0:	687b      	ldr	r3, [r7, #4]
   9a8b2:	4a31      	ldr	r2, [pc, #196]	; (9a978 <usart_serial_init+0x11c>)
   9a8b4:	4293      	cmp	r3, r2
   9a8b6:	d111      	bne.n	9a8dc <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   9a8b8:	2011      	movs	r0, #17
   9a8ba:	4b2d      	ldr	r3, [pc, #180]	; (9a970 <usart_serial_init+0x114>)
   9a8bc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9a8be:	4b2a      	ldr	r3, [pc, #168]	; (9a968 <usart_serial_init+0x10c>)
   9a8c0:	4798      	blx	r3
   9a8c2:	4602      	mov	r2, r0
   9a8c4:	f107 0308 	add.w	r3, r7, #8
   9a8c8:	4619      	mov	r1, r3
   9a8ca:	6878      	ldr	r0, [r7, #4]
   9a8cc:	4b2b      	ldr	r3, [pc, #172]	; (9a97c <usart_serial_init+0x120>)
   9a8ce:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9a8d0:	6878      	ldr	r0, [r7, #4]
   9a8d2:	4b2b      	ldr	r3, [pc, #172]	; (9a980 <usart_serial_init+0x124>)
   9a8d4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9a8d6:	6878      	ldr	r0, [r7, #4]
   9a8d8:	4b2a      	ldr	r3, [pc, #168]	; (9a984 <usart_serial_init+0x128>)
   9a8da:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9a8dc:	687b      	ldr	r3, [r7, #4]
   9a8de:	4a2a      	ldr	r2, [pc, #168]	; (9a988 <usart_serial_init+0x12c>)
   9a8e0:	4293      	cmp	r3, r2
   9a8e2:	d111      	bne.n	9a908 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   9a8e4:	2012      	movs	r0, #18
   9a8e6:	4b22      	ldr	r3, [pc, #136]	; (9a970 <usart_serial_init+0x114>)
   9a8e8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9a8ea:	4b1f      	ldr	r3, [pc, #124]	; (9a968 <usart_serial_init+0x10c>)
   9a8ec:	4798      	blx	r3
   9a8ee:	4602      	mov	r2, r0
   9a8f0:	f107 0308 	add.w	r3, r7, #8
   9a8f4:	4619      	mov	r1, r3
   9a8f6:	6878      	ldr	r0, [r7, #4]
   9a8f8:	4b20      	ldr	r3, [pc, #128]	; (9a97c <usart_serial_init+0x120>)
   9a8fa:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9a8fc:	6878      	ldr	r0, [r7, #4]
   9a8fe:	4b20      	ldr	r3, [pc, #128]	; (9a980 <usart_serial_init+0x124>)
   9a900:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9a902:	6878      	ldr	r0, [r7, #4]
   9a904:	4b1f      	ldr	r3, [pc, #124]	; (9a984 <usart_serial_init+0x128>)
   9a906:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9a908:	687b      	ldr	r3, [r7, #4]
   9a90a:	4a20      	ldr	r2, [pc, #128]	; (9a98c <usart_serial_init+0x130>)
   9a90c:	4293      	cmp	r3, r2
   9a90e:	d111      	bne.n	9a934 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   9a910:	2013      	movs	r0, #19
   9a912:	4b17      	ldr	r3, [pc, #92]	; (9a970 <usart_serial_init+0x114>)
   9a914:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9a916:	4b14      	ldr	r3, [pc, #80]	; (9a968 <usart_serial_init+0x10c>)
   9a918:	4798      	blx	r3
   9a91a:	4602      	mov	r2, r0
   9a91c:	f107 0308 	add.w	r3, r7, #8
   9a920:	4619      	mov	r1, r3
   9a922:	6878      	ldr	r0, [r7, #4]
   9a924:	4b15      	ldr	r3, [pc, #84]	; (9a97c <usart_serial_init+0x120>)
   9a926:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9a928:	6878      	ldr	r0, [r7, #4]
   9a92a:	4b15      	ldr	r3, [pc, #84]	; (9a980 <usart_serial_init+0x124>)
   9a92c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9a92e:	6878      	ldr	r0, [r7, #4]
   9a930:	4b14      	ldr	r3, [pc, #80]	; (9a984 <usart_serial_init+0x128>)
   9a932:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9a934:	687b      	ldr	r3, [r7, #4]
   9a936:	4a16      	ldr	r2, [pc, #88]	; (9a990 <usart_serial_init+0x134>)
   9a938:	4293      	cmp	r3, r2
   9a93a:	d111      	bne.n	9a960 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   9a93c:	2014      	movs	r0, #20
   9a93e:	4b0c      	ldr	r3, [pc, #48]	; (9a970 <usart_serial_init+0x114>)
   9a940:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9a942:	4b09      	ldr	r3, [pc, #36]	; (9a968 <usart_serial_init+0x10c>)
   9a944:	4798      	blx	r3
   9a946:	4602      	mov	r2, r0
   9a948:	f107 0308 	add.w	r3, r7, #8
   9a94c:	4619      	mov	r1, r3
   9a94e:	6878      	ldr	r0, [r7, #4]
   9a950:	4b0a      	ldr	r3, [pc, #40]	; (9a97c <usart_serial_init+0x120>)
   9a952:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9a954:	6878      	ldr	r0, [r7, #4]
   9a956:	4b0a      	ldr	r3, [pc, #40]	; (9a980 <usart_serial_init+0x124>)
   9a958:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9a95a:	6878      	ldr	r0, [r7, #4]
   9a95c:	4b09      	ldr	r3, [pc, #36]	; (9a984 <usart_serial_init+0x128>)
   9a95e:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   9a960:	bf00      	nop
   9a962:	3730      	adds	r7, #48	; 0x30
   9a964:	46bd      	mov	sp, r7
   9a966:	bd80      	pop	{r7, pc}
   9a968:	0009a82d 	.word	0x0009a82d
   9a96c:	400e0800 	.word	0x400e0800
   9a970:	0009a841 	.word	0x0009a841
   9a974:	0009c0e5 	.word	0x0009c0e5
   9a978:	40098000 	.word	0x40098000
   9a97c:	0009c2f9 	.word	0x0009c2f9
   9a980:	0009c37d 	.word	0x0009c37d
   9a984:	0009c3ad 	.word	0x0009c3ad
   9a988:	4009c000 	.word	0x4009c000
   9a98c:	400a0000 	.word	0x400a0000
   9a990:	400a4000 	.word	0x400a4000

0009a994 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   9a994:	b580      	push	{r7, lr}
   9a996:	b082      	sub	sp, #8
   9a998:	af00      	add	r7, sp, #0
   9a99a:	6078      	str	r0, [r7, #4]
   9a99c:	460b      	mov	r3, r1
   9a99e:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9a9a0:	687b      	ldr	r3, [r7, #4]
   9a9a2:	4a27      	ldr	r2, [pc, #156]	; (9aa40 <usart_serial_putchar+0xac>)
   9a9a4:	4293      	cmp	r3, r2
   9a9a6:	d10a      	bne.n	9a9be <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   9a9a8:	bf00      	nop
   9a9aa:	78fb      	ldrb	r3, [r7, #3]
   9a9ac:	4619      	mov	r1, r3
   9a9ae:	6878      	ldr	r0, [r7, #4]
   9a9b0:	4b24      	ldr	r3, [pc, #144]	; (9aa44 <usart_serial_putchar+0xb0>)
   9a9b2:	4798      	blx	r3
   9a9b4:	4603      	mov	r3, r0
   9a9b6:	2b00      	cmp	r3, #0
   9a9b8:	d1f7      	bne.n	9a9aa <usart_serial_putchar+0x16>
		return 1;
   9a9ba:	2301      	movs	r3, #1
   9a9bc:	e03c      	b.n	9aa38 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9a9be:	687b      	ldr	r3, [r7, #4]
   9a9c0:	4a21      	ldr	r2, [pc, #132]	; (9aa48 <usart_serial_putchar+0xb4>)
   9a9c2:	4293      	cmp	r3, r2
   9a9c4:	d10a      	bne.n	9a9dc <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   9a9c6:	bf00      	nop
   9a9c8:	78fb      	ldrb	r3, [r7, #3]
   9a9ca:	4619      	mov	r1, r3
   9a9cc:	6878      	ldr	r0, [r7, #4]
   9a9ce:	4b1f      	ldr	r3, [pc, #124]	; (9aa4c <usart_serial_putchar+0xb8>)
   9a9d0:	4798      	blx	r3
   9a9d2:	4603      	mov	r3, r0
   9a9d4:	2b00      	cmp	r3, #0
   9a9d6:	d1f7      	bne.n	9a9c8 <usart_serial_putchar+0x34>
		return 1;
   9a9d8:	2301      	movs	r3, #1
   9a9da:	e02d      	b.n	9aa38 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9a9dc:	687b      	ldr	r3, [r7, #4]
   9a9de:	4a1c      	ldr	r2, [pc, #112]	; (9aa50 <usart_serial_putchar+0xbc>)
   9a9e0:	4293      	cmp	r3, r2
   9a9e2:	d10a      	bne.n	9a9fa <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   9a9e4:	bf00      	nop
   9a9e6:	78fb      	ldrb	r3, [r7, #3]
   9a9e8:	4619      	mov	r1, r3
   9a9ea:	6878      	ldr	r0, [r7, #4]
   9a9ec:	4b17      	ldr	r3, [pc, #92]	; (9aa4c <usart_serial_putchar+0xb8>)
   9a9ee:	4798      	blx	r3
   9a9f0:	4603      	mov	r3, r0
   9a9f2:	2b00      	cmp	r3, #0
   9a9f4:	d1f7      	bne.n	9a9e6 <usart_serial_putchar+0x52>
		return 1;
   9a9f6:	2301      	movs	r3, #1
   9a9f8:	e01e      	b.n	9aa38 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9a9fa:	687b      	ldr	r3, [r7, #4]
   9a9fc:	4a15      	ldr	r2, [pc, #84]	; (9aa54 <usart_serial_putchar+0xc0>)
   9a9fe:	4293      	cmp	r3, r2
   9aa00:	d10a      	bne.n	9aa18 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   9aa02:	bf00      	nop
   9aa04:	78fb      	ldrb	r3, [r7, #3]
   9aa06:	4619      	mov	r1, r3
   9aa08:	6878      	ldr	r0, [r7, #4]
   9aa0a:	4b10      	ldr	r3, [pc, #64]	; (9aa4c <usart_serial_putchar+0xb8>)
   9aa0c:	4798      	blx	r3
   9aa0e:	4603      	mov	r3, r0
   9aa10:	2b00      	cmp	r3, #0
   9aa12:	d1f7      	bne.n	9aa04 <usart_serial_putchar+0x70>
		return 1;
   9aa14:	2301      	movs	r3, #1
   9aa16:	e00f      	b.n	9aa38 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9aa18:	687b      	ldr	r3, [r7, #4]
   9aa1a:	4a0f      	ldr	r2, [pc, #60]	; (9aa58 <usart_serial_putchar+0xc4>)
   9aa1c:	4293      	cmp	r3, r2
   9aa1e:	d10a      	bne.n	9aa36 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   9aa20:	bf00      	nop
   9aa22:	78fb      	ldrb	r3, [r7, #3]
   9aa24:	4619      	mov	r1, r3
   9aa26:	6878      	ldr	r0, [r7, #4]
   9aa28:	4b08      	ldr	r3, [pc, #32]	; (9aa4c <usart_serial_putchar+0xb8>)
   9aa2a:	4798      	blx	r3
   9aa2c:	4603      	mov	r3, r0
   9aa2e:	2b00      	cmp	r3, #0
   9aa30:	d1f7      	bne.n	9aa22 <usart_serial_putchar+0x8e>
		return 1;
   9aa32:	2301      	movs	r3, #1
   9aa34:	e000      	b.n	9aa38 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   9aa36:	2300      	movs	r3, #0
}
   9aa38:	4618      	mov	r0, r3
   9aa3a:	3708      	adds	r7, #8
   9aa3c:	46bd      	mov	sp, r7
   9aa3e:	bd80      	pop	{r7, pc}
   9aa40:	400e0800 	.word	0x400e0800
   9aa44:	0009c1a9 	.word	0x0009c1a9
   9aa48:	40098000 	.word	0x40098000
   9aa4c:	0009c415 	.word	0x0009c415
   9aa50:	4009c000 	.word	0x4009c000
   9aa54:	400a0000 	.word	0x400a0000
   9aa58:	400a4000 	.word	0x400a4000

0009aa5c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   9aa5c:	b580      	push	{r7, lr}
   9aa5e:	b084      	sub	sp, #16
   9aa60:	af00      	add	r7, sp, #0
   9aa62:	6078      	str	r0, [r7, #4]
   9aa64:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   9aa66:	2300      	movs	r3, #0
   9aa68:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   9aa6a:	687b      	ldr	r3, [r7, #4]
   9aa6c:	4a2b      	ldr	r2, [pc, #172]	; (9ab1c <usart_serial_getchar+0xc0>)
   9aa6e:	4293      	cmp	r3, r2
   9aa70:	d107      	bne.n	9aa82 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   9aa72:	bf00      	nop
   9aa74:	6839      	ldr	r1, [r7, #0]
   9aa76:	6878      	ldr	r0, [r7, #4]
   9aa78:	4b29      	ldr	r3, [pc, #164]	; (9ab20 <usart_serial_getchar+0xc4>)
   9aa7a:	4798      	blx	r3
   9aa7c:	4603      	mov	r3, r0
   9aa7e:	2b00      	cmp	r3, #0
   9aa80:	d1f8      	bne.n	9aa74 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9aa82:	687b      	ldr	r3, [r7, #4]
   9aa84:	4a27      	ldr	r2, [pc, #156]	; (9ab24 <usart_serial_getchar+0xc8>)
   9aa86:	4293      	cmp	r3, r2
   9aa88:	d10d      	bne.n	9aaa6 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   9aa8a:	bf00      	nop
   9aa8c:	f107 030c 	add.w	r3, r7, #12
   9aa90:	4619      	mov	r1, r3
   9aa92:	6878      	ldr	r0, [r7, #4]
   9aa94:	4b24      	ldr	r3, [pc, #144]	; (9ab28 <usart_serial_getchar+0xcc>)
   9aa96:	4798      	blx	r3
   9aa98:	4603      	mov	r3, r0
   9aa9a:	2b00      	cmp	r3, #0
   9aa9c:	d1f6      	bne.n	9aa8c <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   9aa9e:	68fb      	ldr	r3, [r7, #12]
   9aaa0:	b2da      	uxtb	r2, r3
   9aaa2:	683b      	ldr	r3, [r7, #0]
   9aaa4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9aaa6:	687b      	ldr	r3, [r7, #4]
   9aaa8:	4a20      	ldr	r2, [pc, #128]	; (9ab2c <usart_serial_getchar+0xd0>)
   9aaaa:	4293      	cmp	r3, r2
   9aaac:	d10d      	bne.n	9aaca <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   9aaae:	bf00      	nop
   9aab0:	f107 030c 	add.w	r3, r7, #12
   9aab4:	4619      	mov	r1, r3
   9aab6:	6878      	ldr	r0, [r7, #4]
   9aab8:	4b1b      	ldr	r3, [pc, #108]	; (9ab28 <usart_serial_getchar+0xcc>)
   9aaba:	4798      	blx	r3
   9aabc:	4603      	mov	r3, r0
   9aabe:	2b00      	cmp	r3, #0
   9aac0:	d1f6      	bne.n	9aab0 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   9aac2:	68fb      	ldr	r3, [r7, #12]
   9aac4:	b2da      	uxtb	r2, r3
   9aac6:	683b      	ldr	r3, [r7, #0]
   9aac8:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   9aaca:	687b      	ldr	r3, [r7, #4]
   9aacc:	4a18      	ldr	r2, [pc, #96]	; (9ab30 <usart_serial_getchar+0xd4>)
   9aace:	4293      	cmp	r3, r2
   9aad0:	d10d      	bne.n	9aaee <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   9aad2:	bf00      	nop
   9aad4:	f107 030c 	add.w	r3, r7, #12
   9aad8:	4619      	mov	r1, r3
   9aada:	6878      	ldr	r0, [r7, #4]
   9aadc:	4b12      	ldr	r3, [pc, #72]	; (9ab28 <usart_serial_getchar+0xcc>)
   9aade:	4798      	blx	r3
   9aae0:	4603      	mov	r3, r0
   9aae2:	2b00      	cmp	r3, #0
   9aae4:	d1f6      	bne.n	9aad4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   9aae6:	68fb      	ldr	r3, [r7, #12]
   9aae8:	b2da      	uxtb	r2, r3
   9aaea:	683b      	ldr	r3, [r7, #0]
   9aaec:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9aaee:	687b      	ldr	r3, [r7, #4]
   9aaf0:	4a10      	ldr	r2, [pc, #64]	; (9ab34 <usart_serial_getchar+0xd8>)
   9aaf2:	4293      	cmp	r3, r2
   9aaf4:	d10d      	bne.n	9ab12 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   9aaf6:	bf00      	nop
   9aaf8:	f107 030c 	add.w	r3, r7, #12
   9aafc:	4619      	mov	r1, r3
   9aafe:	6878      	ldr	r0, [r7, #4]
   9ab00:	4b09      	ldr	r3, [pc, #36]	; (9ab28 <usart_serial_getchar+0xcc>)
   9ab02:	4798      	blx	r3
   9ab04:	4603      	mov	r3, r0
   9ab06:	2b00      	cmp	r3, #0
   9ab08:	d1f6      	bne.n	9aaf8 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   9ab0a:	68fb      	ldr	r3, [r7, #12]
   9ab0c:	b2da      	uxtb	r2, r3
   9ab0e:	683b      	ldr	r3, [r7, #0]
   9ab10:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   9ab12:	bf00      	nop
   9ab14:	3710      	adds	r7, #16
   9ab16:	46bd      	mov	sp, r7
   9ab18:	bd80      	pop	{r7, pc}
   9ab1a:	bf00      	nop
   9ab1c:	400e0800 	.word	0x400e0800
   9ab20:	0009c1ed 	.word	0x0009c1ed
   9ab24:	40098000 	.word	0x40098000
   9ab28:	0009c445 	.word	0x0009c445
   9ab2c:	4009c000 	.word	0x4009c000
   9ab30:	400a0000 	.word	0x400a0000
   9ab34:	400a4000 	.word	0x400a4000

0009ab38 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   9ab38:	b580      	push	{r7, lr}
   9ab3a:	b082      	sub	sp, #8
   9ab3c:	af00      	add	r7, sp, #0
   9ab3e:	6078      	str	r0, [r7, #4]
   9ab40:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   9ab42:	4a0f      	ldr	r2, [pc, #60]	; (9ab80 <stdio_serial_init+0x48>)
   9ab44:	687b      	ldr	r3, [r7, #4]
   9ab46:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   9ab48:	4b0e      	ldr	r3, [pc, #56]	; (9ab84 <stdio_serial_init+0x4c>)
   9ab4a:	4a0f      	ldr	r2, [pc, #60]	; (9ab88 <stdio_serial_init+0x50>)
   9ab4c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   9ab4e:	4b0f      	ldr	r3, [pc, #60]	; (9ab8c <stdio_serial_init+0x54>)
   9ab50:	4a0f      	ldr	r2, [pc, #60]	; (9ab90 <stdio_serial_init+0x58>)
   9ab52:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   9ab54:	6839      	ldr	r1, [r7, #0]
   9ab56:	6878      	ldr	r0, [r7, #4]
   9ab58:	4b0e      	ldr	r3, [pc, #56]	; (9ab94 <stdio_serial_init+0x5c>)
   9ab5a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   9ab5c:	4b0e      	ldr	r3, [pc, #56]	; (9ab98 <stdio_serial_init+0x60>)
   9ab5e:	681b      	ldr	r3, [r3, #0]
   9ab60:	689b      	ldr	r3, [r3, #8]
   9ab62:	2100      	movs	r1, #0
   9ab64:	4618      	mov	r0, r3
   9ab66:	4b0d      	ldr	r3, [pc, #52]	; (9ab9c <stdio_serial_init+0x64>)
   9ab68:	4798      	blx	r3
	setbuf(stdin, NULL);
   9ab6a:	4b0b      	ldr	r3, [pc, #44]	; (9ab98 <stdio_serial_init+0x60>)
   9ab6c:	681b      	ldr	r3, [r3, #0]
   9ab6e:	685b      	ldr	r3, [r3, #4]
   9ab70:	2100      	movs	r1, #0
   9ab72:	4618      	mov	r0, r3
   9ab74:	4b09      	ldr	r3, [pc, #36]	; (9ab9c <stdio_serial_init+0x64>)
   9ab76:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   9ab78:	bf00      	nop
   9ab7a:	3708      	adds	r7, #8
   9ab7c:	46bd      	mov	sp, r7
   9ab7e:	bd80      	pop	{r7, pc}
   9ab80:	200727d0 	.word	0x200727d0
   9ab84:	200727cc 	.word	0x200727cc
   9ab88:	0009a995 	.word	0x0009a995
   9ab8c:	200727c8 	.word	0x200727c8
   9ab90:	0009aa5d 	.word	0x0009aa5d
   9ab94:	0009a85d 	.word	0x0009a85d
   9ab98:	20071190 	.word	0x20071190
   9ab9c:	000a8611 	.word	0x000a8611

0009aba0 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   9aba0:	b580      	push	{r7, lr}
   9aba2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   9aba4:	2008      	movs	r0, #8
   9aba6:	4b11      	ldr	r3, [pc, #68]	; (9abec <DD_INIT_UART+0x4c>)
   9aba8:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   9abaa:	4b11      	ldr	r3, [pc, #68]	; (9abf0 <DD_INIT_UART+0x50>)
   9abac:	2250      	movs	r2, #80	; 0x50
   9abae:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   9abb0:	4b0f      	ldr	r3, [pc, #60]	; (9abf0 <DD_INIT_UART+0x50>)
   9abb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9abb6:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   9abb8:	4b0d      	ldr	r3, [pc, #52]	; (9abf0 <DD_INIT_UART+0x50>)
   9abba:	2246      	movs	r2, #70	; 0x46
   9abbc:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   9abbe:	490d      	ldr	r1, [pc, #52]	; (9abf4 <DD_INIT_UART+0x54>)
   9abc0:	480b      	ldr	r0, [pc, #44]	; (9abf0 <DD_INIT_UART+0x50>)
   9abc2:	4b0d      	ldr	r3, [pc, #52]	; (9abf8 <DD_INIT_UART+0x58>)
   9abc4:	4798      	blx	r3
	uart_enable(UART);
   9abc6:	480a      	ldr	r0, [pc, #40]	; (9abf0 <DD_INIT_UART+0x50>)
   9abc8:	4b0c      	ldr	r3, [pc, #48]	; (9abfc <DD_INIT_UART+0x5c>)
   9abca:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   9abcc:	2101      	movs	r1, #1
   9abce:	4808      	ldr	r0, [pc, #32]	; (9abf0 <DD_INIT_UART+0x50>)
   9abd0:	4b0b      	ldr	r3, [pc, #44]	; (9ac00 <DD_INIT_UART+0x60>)
   9abd2:	4798      	blx	r3
	uart_enable(UART);
   9abd4:	4806      	ldr	r0, [pc, #24]	; (9abf0 <DD_INIT_UART+0x50>)
   9abd6:	4b09      	ldr	r3, [pc, #36]	; (9abfc <DD_INIT_UART+0x5c>)
   9abd8:	4798      	blx	r3
	uart_enable_rx(UART);
   9abda:	4805      	ldr	r0, [pc, #20]	; (9abf0 <DD_INIT_UART+0x50>)
   9abdc:	4b09      	ldr	r3, [pc, #36]	; (9ac04 <DD_INIT_UART+0x64>)
   9abde:	4798      	blx	r3
	uart_enable_tx(UART);
   9abe0:	4803      	ldr	r0, [pc, #12]	; (9abf0 <DD_INIT_UART+0x50>)
   9abe2:	4b09      	ldr	r3, [pc, #36]	; (9ac08 <DD_INIT_UART+0x68>)
   9abe4:	4798      	blx	r3
	
	
}
   9abe6:	bf00      	nop
   9abe8:	bd80      	pop	{r7, pc}
   9abea:	bf00      	nop
   9abec:	0009a841 	.word	0x0009a841
   9abf0:	400e0800 	.word	0x400e0800
   9abf4:	000aa3a4 	.word	0x000aa3a4
   9abf8:	0009ab39 	.word	0x0009ab39
   9abfc:	0009c175 	.word	0x0009c175
   9ac00:	0009c18d 	.word	0x0009c18d
   9ac04:	0009c15d 	.word	0x0009c15d
   9ac08:	0009c145 	.word	0x0009c145

0009ac0c <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   9ac0c:	b580      	push	{r7, lr}
   9ac0e:	b084      	sub	sp, #16
   9ac10:	af00      	add	r7, sp, #0
   9ac12:	4603      	mov	r3, r0
   9ac14:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   9ac16:	79fb      	ldrb	r3, [r7, #7]
   9ac18:	4619      	mov	r1, r3
   9ac1a:	4804      	ldr	r0, [pc, #16]	; (9ac2c <DD_TX_UART+0x20>)
   9ac1c:	4b04      	ldr	r3, [pc, #16]	; (9ac30 <DD_TX_UART+0x24>)
   9ac1e:	4798      	blx	r3
   9ac20:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   9ac22:	68fb      	ldr	r3, [r7, #12]
}
   9ac24:	4618      	mov	r0, r3
   9ac26:	3710      	adds	r7, #16
   9ac28:	46bd      	mov	sp, r7
   9ac2a:	bd80      	pop	{r7, pc}
   9ac2c:	400e0800 	.word	0x400e0800
   9ac30:	0009c1a9 	.word	0x0009c1a9

0009ac34 <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t propo_cmd, uint16_t data)

{
   9ac34:	b580      	push	{r7, lr}
   9ac36:	b082      	sub	sp, #8
   9ac38:	af00      	add	r7, sp, #0
   9ac3a:	4603      	mov	r3, r0
   9ac3c:	460a      	mov	r2, r1
   9ac3e:	80fb      	strh	r3, [r7, #6]
   9ac40:	4613      	mov	r3, r2
   9ac42:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(propo_cmd, data);							// Gopal: command to send Acid Rc, Bicarb Rc and the user set Conductivity value
   9ac44:	88ba      	ldrh	r2, [r7, #4]
   9ac46:	88fb      	ldrh	r3, [r7, #6]
   9ac48:	4611      	mov	r1, r2
   9ac4a:	4618      	mov	r0, r3
   9ac4c:	4b02      	ldr	r3, [pc, #8]	; (9ac58 <SV_CAN_WRITE_PROPO+0x24>)
   9ac4e:	4798      	blx	r3
	
}
   9ac50:	bf00      	nop
   9ac52:	3708      	adds	r7, #8
   9ac54:	46bd      	mov	sp, r7
   9ac56:	bd80      	pop	{r7, pc}
   9ac58:	00097b15 	.word	0x00097b15

0009ac5c <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   9ac5c:	b580      	push	{r7, lr}
   9ac5e:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   9ac60:	4b02      	ldr	r3, [pc, #8]	; (9ac6c <SV_CAN_READ_HEMO+0x10>)
   9ac62:	4798      	blx	r3
	return 0;
   9ac64:	2300      	movs	r3, #0
}
   9ac66:	4618      	mov	r0, r3
   9ac68:	bd80      	pop	{r7, pc}
   9ac6a:	bf00      	nop
   9ac6c:	00097bd9 	.word	0x00097bd9

0009ac70 <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   9ac70:	b580      	push	{r7, lr}
   9ac72:	b082      	sub	sp, #8
   9ac74:	af00      	add	r7, sp, #0
   9ac76:	4603      	mov	r3, r0
   9ac78:	6039      	str	r1, [r7, #0]
   9ac7a:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   9ac7c:	683b      	ldr	r3, [r7, #0]
   9ac7e:	b29b      	uxth	r3, r3
   9ac80:	4618      	mov	r0, r3
   9ac82:	4b03      	ldr	r3, [pc, #12]	; (9ac90 <SV_CAN_WRITE_SENSOR+0x20>)
   9ac84:	4798      	blx	r3
	
}
   9ac86:	bf00      	nop
   9ac88:	3708      	adds	r7, #8
   9ac8a:	46bd      	mov	sp, r7
   9ac8c:	bd80      	pop	{r7, pc}
   9ac8e:	bf00      	nop
   9ac90:	00097b95 	.word	0x00097b95

0009ac94 <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   9ac94:	b580      	push	{r7, lr}
   9ac96:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   9ac98:	4b23      	ldr	r3, [pc, #140]	; (9ad28 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   9ac9a:	681b      	ldr	r3, [r3, #0]
   9ac9c:	4a23      	ldr	r2, [pc, #140]	; (9ad2c <SV_CAN_REQUEST_SENSORDATA+0x98>)
   9ac9e:	6013      	str	r3, [r2, #0]
	delay = 0;	
   9aca0:	4b23      	ldr	r3, [pc, #140]	; (9ad30 <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   9aca2:	2200      	movs	r2, #0
   9aca4:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   9aca6:	200a      	movs	r0, #10
   9aca8:	4b22      	ldr	r3, [pc, #136]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9acaa:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   9acac:	2141      	movs	r1, #65	; 0x41
   9acae:	2003      	movs	r0, #3
   9acb0:	4b21      	ldr	r3, [pc, #132]	; (9ad38 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9acb2:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   9acb4:	4b21      	ldr	r3, [pc, #132]	; (9ad3c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9acb6:	2200      	movs	r2, #0
   9acb8:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   9acba:	200a      	movs	r0, #10
   9acbc:	4b1d      	ldr	r3, [pc, #116]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9acbe:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   9acc0:	2142      	movs	r1, #66	; 0x42
   9acc2:	2003      	movs	r0, #3
   9acc4:	4b1c      	ldr	r3, [pc, #112]	; (9ad38 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9acc6:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   9acc8:	4b1c      	ldr	r3, [pc, #112]	; (9ad3c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9acca:	2200      	movs	r2, #0
   9accc:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   9acce:	200a      	movs	r0, #10
   9acd0:	4b18      	ldr	r3, [pc, #96]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9acd2:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   9acd4:	2143      	movs	r1, #67	; 0x43
   9acd6:	2003      	movs	r0, #3
   9acd8:	4b17      	ldr	r3, [pc, #92]	; (9ad38 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9acda:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   9acdc:	4b17      	ldr	r3, [pc, #92]	; (9ad3c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9acde:	2200      	movs	r2, #0
   9ace0:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   9ace2:	200a      	movs	r0, #10
   9ace4:	4b13      	ldr	r3, [pc, #76]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9ace6:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   9ace8:	2144      	movs	r1, #68	; 0x44
   9acea:	2003      	movs	r0, #3
   9acec:	4b12      	ldr	r3, [pc, #72]	; (9ad38 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9acee:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   9acf0:	4b12      	ldr	r3, [pc, #72]	; (9ad3c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9acf2:	2200      	movs	r2, #0
   9acf4:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   9acf6:	200a      	movs	r0, #10
   9acf8:	4b0e      	ldr	r3, [pc, #56]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9acfa:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   9acfc:	2145      	movs	r1, #69	; 0x45
   9acfe:	2003      	movs	r0, #3
   9ad00:	4b0d      	ldr	r3, [pc, #52]	; (9ad38 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9ad02:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   9ad04:	4b0d      	ldr	r3, [pc, #52]	; (9ad3c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9ad06:	2200      	movs	r2, #0
   9ad08:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   9ad0a:	200a      	movs	r0, #10
   9ad0c:	4b09      	ldr	r3, [pc, #36]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9ad0e:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   9ad10:	2146      	movs	r1, #70	; 0x46
   9ad12:	2003      	movs	r0, #3
   9ad14:	4b08      	ldr	r3, [pc, #32]	; (9ad38 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9ad16:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   9ad18:	200a      	movs	r0, #10
   9ad1a:	4b06      	ldr	r3, [pc, #24]	; (9ad34 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9ad1c:	4798      	blx	r3
	array1[6]	= 0;
   9ad1e:	4b07      	ldr	r3, [pc, #28]	; (9ad3c <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9ad20:	2200      	movs	r2, #0
   9ad22:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   9ad24:	bf00      	nop
   9ad26:	bd80      	pop	{r7, pc}
   9ad28:	20071980 	.word	0x20071980
   9ad2c:	20071a50 	.word	0x20071a50
   9ad30:	20071a54 	.word	0x20071a54
   9ad34:	00093ea9 	.word	0x00093ea9
   9ad38:	0009ac71 	.word	0x0009ac71
   9ad3c:	20071a44 	.word	0x20071a44

0009ad40 <sv_cntrl_activatepump>:
{
	uint8_t byte[4] ;
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   9ad40:	b580      	push	{r7, lr}
   9ad42:	b084      	sub	sp, #16
   9ad44:	af00      	add	r7, sp, #0
   9ad46:	4603      	mov	r3, r0
   9ad48:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	bloodpumpcmd.data =0;
   9ad4a:	2300      	movs	r3, #0
   9ad4c:	60fb      	str	r3, [r7, #12]
	
	if(sv_pump_id != BLOODPUMP)
   9ad4e:	79fb      	ldrb	r3, [r7, #7]
   9ad50:	2b03      	cmp	r3, #3
   9ad52:	d004      	beq.n	9ad5e <sv_cntrl_activatepump+0x1e>
	{
		DD_SET_PUMP(sv_pump_id);
   9ad54:	79fb      	ldrb	r3, [r7, #7]
   9ad56:	4618      	mov	r0, r3
   9ad58:	4b06      	ldr	r3, [pc, #24]	; (9ad74 <sv_cntrl_activatepump+0x34>)
   9ad5a:	4798      	blx	r3
   9ad5c:	e005      	b.n	9ad6a <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   9ad5e:	2301      	movs	r3, #1
   9ad60:	733b      	strb	r3, [r7, #12]
//		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
		DD_CAN_WRITE_HEMO(BP_START_BLOOD_PUMP,0);
   9ad62:	2100      	movs	r1, #0
   9ad64:	2020      	movs	r0, #32
   9ad66:	4b04      	ldr	r3, [pc, #16]	; (9ad78 <sv_cntrl_activatepump+0x38>)
   9ad68:	4798      	blx	r3
	}
	
	return 0;
   9ad6a:	2300      	movs	r3, #0
}
   9ad6c:	4618      	mov	r0, r3
   9ad6e:	3710      	adds	r7, #16
   9ad70:	46bd      	mov	sp, r7
   9ad72:	bd80      	pop	{r7, pc}
   9ad74:	00099111 	.word	0x00099111
   9ad78:	00097b4d 	.word	0x00097b4d

0009ad7c <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   9ad7c:	b580      	push	{r7, lr}
   9ad7e:	b084      	sub	sp, #16
   9ad80:	af00      	add	r7, sp, #0
   9ad82:	4603      	mov	r3, r0
   9ad84:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	bloodpumpcmd.data =0;
   9ad86:	2300      	movs	r3, #0
   9ad88:	60fb      	str	r3, [r7, #12]
	//uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   9ad8a:	79fb      	ldrb	r3, [r7, #7]
   9ad8c:	2b03      	cmp	r3, #3
   9ad8e:	d004      	beq.n	9ad9a <sv_cntrl_deactivatepump+0x1e>
	{
		DD_RESET_PUMP(sv_pump_id);
   9ad90:	79fb      	ldrb	r3, [r7, #7]
   9ad92:	4618      	mov	r0, r3
   9ad94:	4b06      	ldr	r3, [pc, #24]	; (9adb0 <sv_cntrl_deactivatepump+0x34>)
   9ad96:	4798      	blx	r3
   9ad98:	e005      	b.n	9ada6 <sv_cntrl_deactivatepump+0x2a>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   9ad9a:	2302      	movs	r3, #2
   9ad9c:	733b      	strb	r3, [r7, #12]
	//	DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
	DD_CAN_WRITE_HEMO(BP_STOP_PUMP,0);
   9ad9e:	2100      	movs	r1, #0
   9ada0:	2021      	movs	r0, #33	; 0x21
   9ada2:	4b04      	ldr	r3, [pc, #16]	; (9adb4 <sv_cntrl_deactivatepump+0x38>)
   9ada4:	4798      	blx	r3
	}
	
	
	return 0;
   9ada6:	2300      	movs	r3, #0
}
   9ada8:	4618      	mov	r0, r3
   9adaa:	3710      	adds	r7, #16
   9adac:	46bd      	mov	sp, r7
   9adae:	bd80      	pop	{r7, pc}
   9adb0:	000992b1 	.word	0x000992b1
   9adb4:	00097b4d 	.word	0x00097b4d

0009adb8 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   9adb8:	b580      	push	{r7, lr}
   9adba:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   9adbc:	4b02      	ldr	r3, [pc, #8]	; (9adc8 <sv_cntrl_poweronheater+0x10>)
   9adbe:	4798      	blx	r3
	 return 0;
   9adc0:	2300      	movs	r3, #0
}
   9adc2:	4618      	mov	r0, r3
   9adc4:	bd80      	pop	{r7, pc}
   9adc6:	bf00      	nop
   9adc8:	000991f1 	.word	0x000991f1

0009adcc <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   9adcc:	b580      	push	{r7, lr}
   9adce:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   9add0:	4b02      	ldr	r3, [pc, #8]	; (9addc <sv_cntrl_poweroffheater+0x10>)
   9add2:	4798      	blx	r3
	return 0;
   9add4:	2300      	movs	r3, #0
}
   9add6:	4618      	mov	r0, r3
   9add8:	bd80      	pop	{r7, pc}
   9adda:	bf00      	nop
   9addc:	00099251 	.word	0x00099251

0009ade0 <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   9ade0:	b580      	push	{r7, lr}
   9ade2:	b082      	sub	sp, #8
   9ade4:	af00      	add	r7, sp, #0
   9ade6:	4603      	mov	r3, r0
   9ade8:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   9adea:	79fb      	ldrb	r3, [r7, #7]
   9adec:	4618      	mov	r0, r3
   9adee:	4b03      	ldr	r3, [pc, #12]	; (9adfc <sv_cntrl_activate_valve+0x1c>)
   9adf0:	4798      	blx	r3
	}
	
	
	return 0;
   9adf2:	2300      	movs	r3, #0
}
   9adf4:	4618      	mov	r0, r3
   9adf6:	3708      	adds	r7, #8
   9adf8:	46bd      	mov	sp, r7
   9adfa:	bd80      	pop	{r7, pc}
   9adfc:	00099629 	.word	0x00099629

0009ae00 <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   9ae00:	b580      	push	{r7, lr}
   9ae02:	b082      	sub	sp, #8
   9ae04:	af00      	add	r7, sp, #0
   9ae06:	4603      	mov	r3, r0
   9ae08:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   9ae0a:	79fb      	ldrb	r3, [r7, #7]
   9ae0c:	2b10      	cmp	r3, #16
   9ae0e:	d101      	bne.n	9ae14 <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   9ae10:	4b05      	ldr	r3, [pc, #20]	; (9ae28 <sv_cntrl_deactivate_valve+0x28>)
   9ae12:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   9ae14:	79fb      	ldrb	r3, [r7, #7]
   9ae16:	4618      	mov	r0, r3
   9ae18:	4b04      	ldr	r3, [pc, #16]	; (9ae2c <sv_cntrl_deactivate_valve+0x2c>)
   9ae1a:	4798      	blx	r3
	
	return 0;
   9ae1c:	2300      	movs	r3, #0
}
   9ae1e:	4618      	mov	r0, r3
   9ae20:	3708      	adds	r7, #8
   9ae22:	46bd      	mov	sp, r7
   9ae24:	bd80      	pop	{r7, pc}
   9ae26:	bf00      	nop
   9ae28:	00099251 	.word	0x00099251
   9ae2c:	000996e9 	.word	0x000996e9

0009ae30 <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   9ae30:	b580      	push	{r7, lr}
   9ae32:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   9ae34:	4b02      	ldr	r3, [pc, #8]	; (9ae40 <sv_cntrl_setHepa_dir+0x10>)
   9ae36:	4798      	blx	r3
	
	return 0;
   9ae38:	2300      	movs	r3, #0
}
   9ae3a:	4618      	mov	r0, r3
   9ae3c:	bd80      	pop	{r7, pc}
   9ae3e:	bf00      	nop
   9ae40:	00099539 	.word	0x00099539

0009ae44 <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   9ae44:	b580      	push	{r7, lr}
   9ae46:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   9ae48:	4b02      	ldr	r3, [pc, #8]	; (9ae54 <sv_cntrl_resetHepa_dir+0x10>)
   9ae4a:	4798      	blx	r3
	
	return 0;	
   9ae4c:	2300      	movs	r3, #0
}
   9ae4e:	4618      	mov	r0, r3
   9ae50:	bd80      	pop	{r7, pc}
   9ae52:	bf00      	nop
   9ae54:	00099561 	.word	0x00099561

0009ae58 <sv_cntrl_setpumpspeed>:
	}
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   9ae58:	b580      	push	{r7, lr}
   9ae5a:	b084      	sub	sp, #16
   9ae5c:	af00      	add	r7, sp, #0
   9ae5e:	4603      	mov	r3, r0
   9ae60:	6039      	str	r1, [r7, #0]
   9ae62:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	bloodpumpspeed.data =0;
   9ae64:	2300      	movs	r3, #0
   9ae66:	60fb      	str	r3, [r7, #12]
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   9ae68:	2304      	movs	r3, #4
   9ae6a:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   9ae6c:	683b      	ldr	r3, [r7, #0]
   9ae6e:	b2db      	uxtb	r3, r3
   9ae70:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   9ae72:	683b      	ldr	r3, [r7, #0]
   9ae74:	0a1b      	lsrs	r3, r3, #8
   9ae76:	b2db      	uxtb	r3, r3
   9ae78:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   9ae7a:	79fb      	ldrb	r3, [r7, #7]
   9ae7c:	2b03      	cmp	r3, #3
   9ae7e:	d005      	beq.n	9ae8c <sv_cntrl_setpumpspeed+0x34>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   9ae80:	79fb      	ldrb	r3, [r7, #7]
   9ae82:	6839      	ldr	r1, [r7, #0]
   9ae84:	4618      	mov	r0, r3
   9ae86:	4b07      	ldr	r3, [pc, #28]	; (9aea4 <sv_cntrl_setpumpspeed+0x4c>)
   9ae88:	4798      	blx	r3
   9ae8a:	e005      	b.n	9ae98 <sv_cntrl_setpumpspeed+0x40>
		
		{
			

		//	   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
		DD_CAN_WRITE_HEMO(BP_SPEED_CHANGE, speed);
   9ae8c:	683b      	ldr	r3, [r7, #0]
   9ae8e:	b29b      	uxth	r3, r3
   9ae90:	4619      	mov	r1, r3
   9ae92:	2023      	movs	r0, #35	; 0x23
   9ae94:	4b04      	ldr	r3, [pc, #16]	; (9aea8 <sv_cntrl_setpumpspeed+0x50>)
   9ae96:	4798      	blx	r3
		}
		
	
	return 0;
   9ae98:	2300      	movs	r3, #0
}
   9ae9a:	4618      	mov	r0, r3
   9ae9c:	3710      	adds	r7, #16
   9ae9e:	46bd      	mov	sp, r7
   9aea0:	bd80      	pop	{r7, pc}
   9aea2:	bf00      	nop
   9aea4:	00099399 	.word	0x00099399
   9aea8:	00097b4d 	.word	0x00097b4d

0009aeac <sv_spi_blood_read_temp>:
void sv_spi_blood_read_temp(uint16_t* pdata)
{
   9aeac:	b480      	push	{r7}
   9aeae:	b083      	sub	sp, #12
   9aeb0:	af00      	add	r7, sp, #0
   9aeb2:	6078      	str	r0, [r7, #4]
//	DD_IIC_READ_BLDPMP( BLOODPUMP_IIC_ADR,8,pdata);
	
}
   9aeb4:	bf00      	nop
   9aeb6:	370c      	adds	r7, #12
   9aeb8:	46bd      	mov	sp, r7
   9aeba:	bc80      	pop	{r7}
   9aebc:	4770      	bx	lr
   9aebe:	bf00      	nop

0009aec0 <sv_cntrl_incheater>:

uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   9aec0:	b580      	push	{r7, lr}
   9aec2:	b082      	sub	sp, #8
   9aec4:	af00      	add	r7, sp, #0
   9aec6:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   9aec8:	4b0c      	ldr	r3, [pc, #48]	; (9aefc <sv_cntrl_incheater+0x3c>)
   9aeca:	6878      	ldr	r0, [r7, #4]
   9aecc:	4798      	blx	r3
   9aece:	4602      	mov	r2, r0
   9aed0:	4b0b      	ldr	r3, [pc, #44]	; (9af00 <sv_cntrl_incheater+0x40>)
   9aed2:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 7500)
   9aed4:	687b      	ldr	r3, [r7, #4]
   9aed6:	f641 524c 	movw	r2, #7500	; 0x1d4c
   9aeda:	4293      	cmp	r3, r2
   9aedc:	dd02      	ble.n	9aee4 <sv_cntrl_incheater+0x24>
	{
		dty_val = 7500;
   9aede:	f641 534c 	movw	r3, #7500	; 0x1d4c
   9aee2:	607b      	str	r3, [r7, #4]
	}
	// dty_val = dty_val * 0.66;
	 
	 if ( dty_val > 0)
   9aee4:	687b      	ldr	r3, [r7, #4]
   9aee6:	2b00      	cmp	r3, #0
   9aee8:	dd03      	ble.n	9aef2 <sv_cntrl_incheater+0x32>
	 {
		 DD_CHNG_HTR(dty_val);
   9aeea:	687b      	ldr	r3, [r7, #4]
   9aeec:	4618      	mov	r0, r3
   9aeee:	4b05      	ldr	r3, [pc, #20]	; (9af04 <sv_cntrl_incheater+0x44>)
   9aef0:	4798      	blx	r3
	 }
	
	
	return 0;
   9aef2:	2300      	movs	r3, #0
}
   9aef4:	4618      	mov	r0, r3
   9aef6:	3708      	adds	r7, #8
   9aef8:	46bd      	mov	sp, r7
   9aefa:	bd80      	pop	{r7, pc}
   9aefc:	000a7f01 	.word	0x000a7f01
   9af00:	200720d4 	.word	0x200720d4
   9af04:	00099515 	.word	0x00099515

0009af08 <sv_cntrl_decheater>:


uint8_t sv_cntrl_decheater(int32_t dty_val)
{
   9af08:	b580      	push	{r7, lr}
   9af0a:	b082      	sub	sp, #8
   9af0c:	af00      	add	r7, sp, #0
   9af0e:	6078      	str	r0, [r7, #4]
		 if ( dty_val > 0)
   9af10:	687b      	ldr	r3, [r7, #4]
   9af12:	2b00      	cmp	r3, #0
   9af14:	dd03      	ble.n	9af1e <sv_cntrl_decheater+0x16>
	 {
		 DD_CHNG_HTR(dty_val);
   9af16:	687b      	ldr	r3, [r7, #4]
   9af18:	4618      	mov	r0, r3
   9af1a:	4b03      	ldr	r3, [pc, #12]	; (9af28 <sv_cntrl_decheater+0x20>)
   9af1c:	4798      	blx	r3
	 }
	
	
	return 0;
   9af1e:	2300      	movs	r3, #0
}
   9af20:	4618      	mov	r0, r3
   9af22:	3708      	adds	r7, #8
   9af24:	46bd      	mov	sp, r7
   9af26:	bd80      	pop	{r7, pc}
   9af28:	00099515 	.word	0x00099515

0009af2c <sv_cntrl_activatevenousclamp>:

uint8_t sv_cntrl_activatevenousclamp(void)
{
   9af2c:	b580      	push	{r7, lr}
   9af2e:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   9af30:	4b02      	ldr	r3, [pc, #8]	; (9af3c <sv_cntrl_activatevenousclamp+0x10>)
   9af32:	4798      	blx	r3
	
	return 0;
   9af34:	2300      	movs	r3, #0
}
   9af36:	4618      	mov	r0, r3
   9af38:	bd80      	pop	{r7, pc}
   9af3a:	bf00      	nop
   9af3c:	00099a85 	.word	0x00099a85

0009af40 <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   9af40:	b580      	push	{r7, lr}
   9af42:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   9af44:	4b02      	ldr	r3, [pc, #8]	; (9af50 <sv_cntrl_deactivatevenousclamp+0x10>)
   9af46:	4798      	blx	r3
	
	return 0;
   9af48:	2300      	movs	r3, #0
}
   9af4a:	4618      	mov	r0, r3
   9af4c:	bd80      	pop	{r7, pc}
   9af4e:	bf00      	nop
   9af50:	00099aad 	.word	0x00099aad

0009af54 <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   9af54:	b580      	push	{r7, lr}
   9af56:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   9af58:	4b03      	ldr	r3, [pc, #12]	; (9af68 <sv_cntrl_enable_loopback+0x14>)
   9af5a:	4798      	blx	r3
	Loopbackstatus = true;
   9af5c:	4b03      	ldr	r3, [pc, #12]	; (9af6c <sv_cntrl_enable_loopback+0x18>)
   9af5e:	2201      	movs	r2, #1
   9af60:	701a      	strb	r2, [r3, #0]
	return 0;
   9af62:	2300      	movs	r3, #0

}
   9af64:	4618      	mov	r0, r3
   9af66:	bd80      	pop	{r7, pc}
   9af68:	000990c1 	.word	0x000990c1
   9af6c:	20072567 	.word	0x20072567

0009af70 <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   9af70:	b580      	push	{r7, lr}
   9af72:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   9af74:	4b03      	ldr	r3, [pc, #12]	; (9af84 <sv_cntrl_disable_loopback+0x14>)
   9af76:	4798      	blx	r3
	Loopbackstatus = false;
   9af78:	4b03      	ldr	r3, [pc, #12]	; (9af88 <sv_cntrl_disable_loopback+0x18>)
   9af7a:	2200      	movs	r2, #0
   9af7c:	701a      	strb	r2, [r3, #0]
	return 0;
   9af7e:	2300      	movs	r3, #0

}
   9af80:	4618      	mov	r0, r3
   9af82:	bd80      	pop	{r7, pc}
   9af84:	000990e9 	.word	0x000990e9
   9af88:	20072567 	.word	0x20072567

0009af8c <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   9af8c:	b580      	push	{r7, lr}
   9af8e:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   9af90:	4b03      	ldr	r3, [pc, #12]	; (9afa0 <sv_cntrl_enable_bypass+0x14>)
   9af92:	4798      	blx	r3
	//sv_cntrl_deactivatepump(UFPUMP);
	Bypassstatus = true;
   9af94:	4b03      	ldr	r3, [pc, #12]	; (9afa4 <sv_cntrl_enable_bypass+0x18>)
   9af96:	2201      	movs	r2, #1
   9af98:	701a      	strb	r2, [r3, #0]
	return 0;
   9af9a:	2300      	movs	r3, #0

}
   9af9c:	4618      	mov	r0, r3
   9af9e:	bd80      	pop	{r7, pc}
   9afa0:	00099061 	.word	0x00099061
   9afa4:	2007260d 	.word	0x2007260d

0009afa8 <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   9afa8:	b580      	push	{r7, lr}
   9afaa:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   9afac:	4b03      	ldr	r3, [pc, #12]	; (9afbc <sv_cntrl_disable_bypass+0x14>)
   9afae:	4798      	blx	r3
	Bypassstatus = false;
   9afb0:	4b03      	ldr	r3, [pc, #12]	; (9afc0 <sv_cntrl_disable_bypass+0x18>)
   9afb2:	2200      	movs	r2, #0
   9afb4:	701a      	strb	r2, [r3, #0]
	return 0;
   9afb6:	2300      	movs	r3, #0

}
   9afb8:	4618      	mov	r0, r3
   9afba:	bd80      	pop	{r7, pc}
   9afbc:	00099091 	.word	0x00099091
   9afc0:	2007260d 	.word	0x2007260d

0009afc4 <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   9afc4:	b580      	push	{r7, lr}
   9afc6:	b082      	sub	sp, #8
   9afc8:	af00      	add	r7, sp, #0
   9afca:	4603      	mov	r3, r0
   9afcc:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   9afce:	4b0a      	ldr	r3, [pc, #40]	; (9aff8 <sv_cntrl_setflowpath+0x34>)
   9afd0:	681a      	ldr	r2, [r3, #0]
   9afd2:	4b0a      	ldr	r3, [pc, #40]	; (9affc <sv_cntrl_setflowpath+0x38>)
   9afd4:	681b      	ldr	r3, [r3, #0]
   9afd6:	1ad3      	subs	r3, r2, r3
   9afd8:	4a09      	ldr	r2, [pc, #36]	; (9b000 <sv_cntrl_setflowpath+0x3c>)
   9afda:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   9afdc:	4b06      	ldr	r3, [pc, #24]	; (9aff8 <sv_cntrl_setflowpath+0x34>)
   9afde:	681b      	ldr	r3, [r3, #0]
   9afe0:	4a06      	ldr	r2, [pc, #24]	; (9affc <sv_cntrl_setflowpath+0x38>)
   9afe2:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   9afe4:	79fb      	ldrb	r3, [r7, #7]
   9afe6:	4618      	mov	r0, r3
   9afe8:	4b06      	ldr	r3, [pc, #24]	; (9b004 <sv_cntrl_setflowpath+0x40>)
   9afea:	4798      	blx	r3
	
	return 0;
   9afec:	2300      	movs	r3, #0

}
   9afee:	4618      	mov	r0, r3
   9aff0:	3708      	adds	r7, #8
   9aff2:	46bd      	mov	sp, r7
   9aff4:	bd80      	pop	{r7, pc}
   9aff6:	bf00      	nop
   9aff8:	20071980 	.word	0x20071980
   9affc:	200722cc 	.word	0x200722cc
   9b000:	20072448 	.word	0x20072448
   9b004:	00099e5d 	.word	0x00099e5d

0009b008 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   9b008:	b580      	push	{r7, lr}
   9b00a:	b082      	sub	sp, #8
   9b00c:	af00      	add	r7, sp, #0
   9b00e:	4603      	mov	r3, r0
   9b010:	6039      	str	r1, [r7, #0]
   9b012:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   9b014:	79fb      	ldrb	r3, [r7, #7]
   9b016:	6839      	ldr	r1, [r7, #0]
   9b018:	4618      	mov	r0, r3
   9b01a:	4b03      	ldr	r3, [pc, #12]	; (9b028 <sv_cntrl_setpumpfreq+0x20>)
   9b01c:	4798      	blx	r3
	return 0;
   9b01e:	2300      	movs	r3, #0
}
   9b020:	4618      	mov	r0, r3
   9b022:	3708      	adds	r7, #8
   9b024:	46bd      	mov	sp, r7
   9b026:	bd80      	pop	{r7, pc}
   9b028:	000994c5 	.word	0x000994c5

0009b02c <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   9b02c:	b580      	push	{r7, lr}
   9b02e:	af00      	add	r7, sp, #0
	DD_SET_RED();
   9b030:	4b02      	ldr	r3, [pc, #8]	; (9b03c <sv_cntrl_setredalarm+0x10>)
   9b032:	4798      	blx	r3
	return 0;
   9b034:	2300      	movs	r3, #0
}
   9b036:	4618      	mov	r0, r3
   9b038:	bd80      	pop	{r7, pc}
   9b03a:	bf00      	nop
   9b03c:	00099589 	.word	0x00099589

0009b040 <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   9b040:	b580      	push	{r7, lr}
   9b042:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   9b044:	4b02      	ldr	r3, [pc, #8]	; (9b050 <sv_cntrl_setyellowalarm+0x10>)
   9b046:	4798      	blx	r3
	return 0;
   9b048:	2300      	movs	r3, #0
}
   9b04a:	4618      	mov	r0, r3
   9b04c:	bd80      	pop	{r7, pc}
   9b04e:	bf00      	nop
   9b050:	000995b1 	.word	0x000995b1

0009b054 <sv_cntrl_setgreenalarm>:
uint8_t sv_cntrl_setgreenalarm()
{
   9b054:	b580      	push	{r7, lr}
   9b056:	af00      	add	r7, sp, #0
	DD_SET_GREEN();
   9b058:	4b02      	ldr	r3, [pc, #8]	; (9b064 <sv_cntrl_setgreenalarm+0x10>)
   9b05a:	4798      	blx	r3
	return 0;
   9b05c:	2300      	movs	r3, #0
}
   9b05e:	4618      	mov	r0, r3
   9b060:	bd80      	pop	{r7, pc}
   9b062:	bf00      	nop
   9b064:	0009959d 	.word	0x0009959d

0009b068 <sv_cntrl_buzzer>:
uint8_t sv_cntrl_buzzer()
{
   9b068:	b580      	push	{r7, lr}
   9b06a:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   9b06c:	4b02      	ldr	r3, [pc, #8]	; (9b078 <sv_cntrl_buzzer+0x10>)
   9b06e:	4798      	blx	r3
	return 0;
   9b070:	2300      	movs	r3, #0
}
   9b072:	4618      	mov	r0, r3
   9b074:	bd80      	pop	{r7, pc}
   9b076:	bf00      	nop
   9b078:	000995c5 	.word	0x000995c5

0009b07c <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   9b07c:	b580      	push	{r7, lr}
   9b07e:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   9b080:	4b02      	ldr	r3, [pc, #8]	; (9b08c <sv_cntrl_resetredalarm+0x10>)
   9b082:	4798      	blx	r3
	return 0;
   9b084:	2300      	movs	r3, #0
}
   9b086:	4618      	mov	r0, r3
   9b088:	bd80      	pop	{r7, pc}
   9b08a:	bf00      	nop
   9b08c:	000995d9 	.word	0x000995d9

0009b090 <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   9b090:	b580      	push	{r7, lr}
   9b092:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   9b094:	4b02      	ldr	r3, [pc, #8]	; (9b0a0 <sv_cntrl_resetyellowalarm+0x10>)
   9b096:	4798      	blx	r3
	return 0;
   9b098:	2300      	movs	r3, #0
}
   9b09a:	4618      	mov	r0, r3
   9b09c:	bd80      	pop	{r7, pc}
   9b09e:	bf00      	nop
   9b0a0:	00099601 	.word	0x00099601

0009b0a4 <sv_cntrl_resetgreenalarm>:
uint8_t sv_cntrl_resetgreenalarm()
{
   9b0a4:	b580      	push	{r7, lr}
   9b0a6:	af00      	add	r7, sp, #0
	DD_RESET_GREEN();
   9b0a8:	4b02      	ldr	r3, [pc, #8]	; (9b0b4 <sv_cntrl_resetgreenalarm+0x10>)
   9b0aa:	4798      	blx	r3
	return 0;
   9b0ac:	2300      	movs	r3, #0
}
   9b0ae:	4618      	mov	r0, r3
   9b0b0:	bd80      	pop	{r7, pc}
   9b0b2:	bf00      	nop
   9b0b4:	000995ed 	.word	0x000995ed

0009b0b8 <sv_cntrl_nobuzzer>:
uint8_t sv_cntrl_nobuzzer()
{
   9b0b8:	b580      	push	{r7, lr}
   9b0ba:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   9b0bc:	4b02      	ldr	r3, [pc, #8]	; (9b0c8 <sv_cntrl_nobuzzer+0x10>)
   9b0be:	4798      	blx	r3
	return 0;
   9b0c0:	2300      	movs	r3, #0
}
   9b0c2:	4618      	mov	r0, r3
   9b0c4:	bd80      	pop	{r7, pc}
   9b0c6:	bf00      	nop
   9b0c8:	00099615 	.word	0x00099615

0009b0cc <sv_cntrl_setoutput>:
uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri)
{
   9b0cc:	b580      	push	{r7, lr}
   9b0ce:	b082      	sub	sp, #8
   9b0d0:	af00      	add	r7, sp, #0
   9b0d2:	6078      	str	r0, [r7, #4]
   9b0d4:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_SET_PIO(peri,p_io);
   9b0d6:	6879      	ldr	r1, [r7, #4]
   9b0d8:	6838      	ldr	r0, [r7, #0]
   9b0da:	4b03      	ldr	r3, [pc, #12]	; (9b0e8 <sv_cntrl_setoutput+0x1c>)
   9b0dc:	4798      	blx	r3
	return 0;
   9b0de:	2300      	movs	r3, #0
}
   9b0e0:	4618      	mov	r0, r3
   9b0e2:	3708      	adds	r7, #8
   9b0e4:	46bd      	mov	sp, r7
   9b0e6:	bd80      	pop	{r7, pc}
   9b0e8:	00098151 	.word	0x00098151

0009b0ec <sv_cntrl_resetoutput>:

uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri)
{
   9b0ec:	b580      	push	{r7, lr}
   9b0ee:	b082      	sub	sp, #8
   9b0f0:	af00      	add	r7, sp, #0
   9b0f2:	6078      	str	r0, [r7, #4]
   9b0f4:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_RESET_PIO(peri,p_io);
   9b0f6:	6879      	ldr	r1, [r7, #4]
   9b0f8:	6838      	ldr	r0, [r7, #0]
   9b0fa:	4b03      	ldr	r3, [pc, #12]	; (9b108 <sv_cntrl_resetoutput+0x1c>)
   9b0fc:	4798      	blx	r3
	
	return 0;
   9b0fe:	2300      	movs	r3, #0
   9b100:	4618      	mov	r0, r3
   9b102:	3708      	adds	r7, #8
   9b104:	46bd      	mov	sp, r7
   9b106:	bd80      	pop	{r7, pc}
   9b108:	000981d5 	.word	0x000981d5

0009b10c <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   9b10c:	b580      	push	{r7, lr}
   9b10e:	b084      	sub	sp, #16
   9b110:	af00      	add	r7, sp, #0
   9b112:	4603      	mov	r3, r0
   9b114:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   9b116:	79fb      	ldrb	r3, [r7, #7]
   9b118:	4618      	mov	r0, r3
   9b11a:	4b04      	ldr	r3, [pc, #16]	; (9b12c <sv_console_bytedatawrite+0x20>)
   9b11c:	4798      	blx	r3
   9b11e:	4603      	mov	r3, r0
   9b120:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   9b122:	68fb      	ldr	r3, [r7, #12]
	
}
   9b124:	4618      	mov	r0, r3
   9b126:	3710      	adds	r7, #16
   9b128:	46bd      	mov	sp, r7
   9b12a:	bd80      	pop	{r7, pc}
   9b12c:	00099d61 	.word	0x00099d61

0009b130 <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   9b130:	b580      	push	{r7, lr}
   9b132:	b082      	sub	sp, #8
   9b134:	af00      	add	r7, sp, #0
   9b136:	4603      	mov	r3, r0
   9b138:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   9b13a:	79fb      	ldrb	r3, [r7, #7]
   9b13c:	4618      	mov	r0, r3
   9b13e:	4b03      	ldr	r3, [pc, #12]	; (9b14c <sv_console_receivedbyte+0x1c>)
   9b140:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   9b142:	2300      	movs	r3, #0
	
}
   9b144:	4618      	mov	r0, r3
   9b146:	3708      	adds	r7, #8
   9b148:	46bd      	mov	sp, r7
   9b14a:	bd80      	pop	{r7, pc}
   9b14c:	0009d1a9 	.word	0x0009d1a9

0009b150 <sv_prop_startpropeo_aligning>:
uint16_t count = 0;

extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

void sv_prop_startpropeo_aligning(void)
{
   9b150:	b590      	push	{r4, r7, lr}
   9b152:	b085      	sub	sp, #20
   9b154:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   9b156:	4b07      	ldr	r3, [pc, #28]	; (9b174 <sv_prop_startpropeo_aligning+0x24>)
   9b158:	463c      	mov	r4, r7
   9b15a:	6818      	ldr	r0, [r3, #0]
   9b15c:	6859      	ldr	r1, [r3, #4]
   9b15e:	689a      	ldr	r2, [r3, #8]
   9b160:	68db      	ldr	r3, [r3, #12]
   9b162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);
		 SV_CAN_WRITE_PROPO( PROP_START_ALIGMENT,0);
   9b164:	2100      	movs	r1, #0
   9b166:	2001      	movs	r0, #1
   9b168:	4b03      	ldr	r3, [pc, #12]	; (9b178 <sv_prop_startpropeo_aligning+0x28>)
   9b16a:	4798      	blx	r3

}
   9b16c:	bf00      	nop
   9b16e:	3714      	adds	r7, #20
   9b170:	46bd      	mov	sp, r7
   9b172:	bd90      	pop	{r4, r7, pc}
   9b174:	000aa3b4 	.word	0x000aa3b4
   9b178:	0009ac35 	.word	0x0009ac35

0009b17c <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   9b17c:	b580      	push	{r7, lr}
   9b17e:	af00      	add	r7, sp, #0
	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	
		SV_CAN_WRITE_PROPO( PROP_START_MIXING,Treatdata[ID_setcond]);
   9b180:	4b04      	ldr	r3, [pc, #16]	; (9b194 <sv_prop_startmixing+0x18>)
   9b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   9b184:	b29b      	uxth	r3, r3
   9b186:	4619      	mov	r1, r3
   9b188:	2002      	movs	r0, #2
   9b18a:	4b03      	ldr	r3, [pc, #12]	; (9b198 <sv_prop_startmixing+0x1c>)
   9b18c:	4798      	blx	r3
	
	}
	
}
   9b18e:	bf00      	nop
   9b190:	bd80      	pop	{r7, pc}
   9b192:	bf00      	nop
   9b194:	20072614 	.word	0x20072614
   9b198:	0009ac35 	.word	0x0009ac35

0009b19c <sv_prop_bicarb_selftest_f_b>:
{
	SV_CAN_WRITE_PROPO( prop_BICAR_FEED_BACK,0);
}

void sv_prop_bicarb_selftest_f_b()
{
   9b19c:	b580      	push	{r7, lr}
   9b19e:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( prop_BICAR_FEED_BACK_STATUS,0);
   9b1a0:	2100      	movs	r1, #0
   9b1a2:	2013      	movs	r0, #19
   9b1a4:	4b01      	ldr	r3, [pc, #4]	; (9b1ac <sv_prop_bicarb_selftest_f_b+0x10>)
   9b1a6:	4798      	blx	r3
}
   9b1a8:	bf00      	nop
   9b1aa:	bd80      	pop	{r7, pc}
   9b1ac:	0009ac35 	.word	0x0009ac35

0009b1b0 <sv_prop_startacidpump>:




void sv_prop_startacidpump()
{
   9b1b0:	b580      	push	{r7, lr}
   9b1b2:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( PROP_START_ACID_PUMP,0);
   9b1b4:	2100      	movs	r1, #0
   9b1b6:	200c      	movs	r0, #12
   9b1b8:	4b01      	ldr	r3, [pc, #4]	; (9b1c0 <sv_prop_startacidpump+0x10>)
   9b1ba:	4798      	blx	r3
			
}
   9b1bc:	bf00      	nop
   9b1be:	bd80      	pop	{r7, pc}
   9b1c0:	0009ac35 	.word	0x0009ac35

0009b1c4 <sv_prop_set_propo_ACIDrc>:
	
}


void sv_prop_set_propo_ACIDrc(uint16_t data)
{
   9b1c4:	b580      	push	{r7, lr}
   9b1c6:	b084      	sub	sp, #16
   9b1c8:	af00      	add	r7, sp, #0
   9b1ca:	4603      	mov	r3, r0
   9b1cc:	80fb      	strh	r3, [r7, #6]
	
	uint16_t rc_count = data;
   9b1ce:	88fb      	ldrh	r3, [r7, #6]
   9b1d0:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_UPDATE_ACID_RC,data);                 // Gopal: Send Acid RC (speed) to Propo CPU via Can
   9b1d2:	88fb      	ldrh	r3, [r7, #6]
   9b1d4:	4619      	mov	r1, r3
   9b1d6:	200e      	movs	r0, #14
   9b1d8:	4b02      	ldr	r3, [pc, #8]	; (9b1e4 <sv_prop_set_propo_ACIDrc+0x20>)
   9b1da:	4798      	blx	r3
}
   9b1dc:	bf00      	nop
   9b1de:	3710      	adds	r7, #16
   9b1e0:	46bd      	mov	sp, r7
   9b1e2:	bd80      	pop	{r7, pc}
   9b1e4:	0009ac35 	.word	0x0009ac35

0009b1e8 <sv_prop_propo_CONDUCTIVITY>:
	uint16_t rc_count = data;
	SV_CAN_WRITE_PROPO( PROP_UPDATE_BICARB_RC,data);                // Gopal: Send Bicarb RC (speed) to Propo CPU via Can
}

void sv_prop_propo_CONDUCTIVITY(uint16_t data)
{
   9b1e8:	b580      	push	{r7, lr}
   9b1ea:	b084      	sub	sp, #16
   9b1ec:	af00      	add	r7, sp, #0
   9b1ee:	4603      	mov	r3, r0
   9b1f0:	80fb      	strh	r3, [r7, #6]
	uint16_t conductivity = data;
   9b1f2:	88fb      	ldrh	r3, [r7, #6]
   9b1f4:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_CONDUCTIVITY,conductivity);      // Gopal: Send  conducivity value to Propo CPU via Can
   9b1f6:	89fb      	ldrh	r3, [r7, #14]
   9b1f8:	4619      	mov	r1, r3
   9b1fa:	2010      	movs	r0, #16
   9b1fc:	4b02      	ldr	r3, [pc, #8]	; (9b208 <sv_prop_propo_CONDUCTIVITY+0x20>)
   9b1fe:	4798      	blx	r3
}
   9b200:	bf00      	nop
   9b202:	3710      	adds	r7, #16
   9b204:	46bd      	mov	sp, r7
   9b206:	bd80      	pop	{r7, pc}
   9b208:	0009ac35 	.word	0x0009ac35

0009b20c <sv_prop_stopmixing>:
void sv_prop_stopmixing()
{
   9b20c:	b580      	push	{r7, lr}
   9b20e:	af00      	add	r7, sp, #0
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,0);
   9b210:	2100      	movs	r1, #0
   9b212:	2003      	movs	r0, #3
   9b214:	4b01      	ldr	r3, [pc, #4]	; (9b21c <sv_prop_stopmixing+0x10>)
   9b216:	4798      	blx	r3
}
   9b218:	bf00      	nop
   9b21a:	bd80      	pop	{r7, pc}
   9b21c:	0009ac35 	.word	0x0009ac35

0009b220 <sv_prop_start_disinfect_intake>:


void sv_prop_start_disinfect_intake(void)
{
   9b220:	b580      	push	{r7, lr}
   9b222:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
		SV_CAN_WRITE_PROPO( PROP_START_DISINFECTION,0);
   9b224:	2100      	movs	r1, #0
   9b226:	2004      	movs	r0, #4
   9b228:	4b01      	ldr	r3, [pc, #4]	; (9b230 <sv_prop_start_disinfect_intake+0x10>)
   9b22a:	4798      	blx	r3

	}
	
}
   9b22c:	bf00      	nop
   9b22e:	bd80      	pop	{r7, pc}
   9b230:	0009ac35 	.word	0x0009ac35

0009b234 <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   9b234:	b580      	push	{r7, lr}
   9b236:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
		SV_CAN_WRITE_PROPO( PROP_STOP_DISINFECTION,0);
   9b238:	2100      	movs	r1, #0
   9b23a:	2005      	movs	r0, #5
   9b23c:	4b01      	ldr	r3, [pc, #4]	; (9b244 <sv_prop_stop_disinfect_intake+0x10>)
   9b23e:	4798      	blx	r3

	}
	
}
   9b240:	bf00      	nop
   9b242:	bd80      	pop	{r7, pc}
   9b244:	0009ac35 	.word	0x0009ac35

0009b248 <sv_prop_start_citricdisinfect_intake>:
void sv_prop_start_citricdisinfect_intake(void)
{
   9b248:	b580      	push	{r7, lr}
   9b24a:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 8);
		SV_CAN_WRITE_PROPO( PROP_START_CITRIC_DISINFECTION,0);
   9b24c:	2100      	movs	r1, #0
   9b24e:	2006      	movs	r0, #6
   9b250:	4b01      	ldr	r3, [pc, #4]	; (9b258 <sv_prop_start_citricdisinfect_intake+0x10>)
   9b252:	4798      	blx	r3


	}
	
}
   9b254:	bf00      	nop
   9b256:	bd80      	pop	{r7, pc}
   9b258:	0009ac35 	.word	0x0009ac35

0009b25c <sv_prop_stop_citricdisinfect_intake>:
void sv_prop_stop_citricdisinfect_intake(void)
{
   9b25c:	b580      	push	{r7, lr}
   9b25e:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 9);
		SV_CAN_WRITE_PROPO( PROP_STOP_CITRIC_DISINFECTION,0);
   9b260:	2100      	movs	r1, #0
   9b262:	2007      	movs	r0, #7
   9b264:	4b01      	ldr	r3, [pc, #4]	; (9b26c <sv_prop_stop_citricdisinfect_intake+0x10>)
   9b266:	4798      	blx	r3


	}
	
}
   9b268:	bf00      	nop
   9b26a:	bd80      	pop	{r7, pc}
   9b26c:	0009ac35 	.word	0x0009ac35

0009b270 <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   9b270:	b580      	push	{r7, lr}
   9b272:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   9b274:	2206      	movs	r2, #6
   9b276:	4905      	ldr	r1, [pc, #20]	; (9b28c <sv_prop_startopenfill+0x1c>)
   9b278:	2018      	movs	r0, #24
   9b27a:	4b05      	ldr	r3, [pc, #20]	; (9b290 <sv_prop_startopenfill+0x20>)
   9b27c:	4798      	blx	r3
//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
	SV_CAN_WRITE_PROPO( PROP_START_OPENFILL,0);
   9b27e:	2100      	movs	r1, #0
   9b280:	2008      	movs	r0, #8
   9b282:	4b04      	ldr	r3, [pc, #16]	; (9b294 <sv_prop_startopenfill+0x24>)
   9b284:	4798      	blx	r3
}
   9b286:	bf00      	nop
   9b288:	bd80      	pop	{r7, pc}
   9b28a:	bf00      	nop
   9b28c:	000aa3c4 	.word	0x000aa3c4
   9b290:	0009cbd5 	.word	0x0009cbd5
   9b294:	0009ac35 	.word	0x0009ac35

0009b298 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   9b298:	b580      	push	{r7, lr}
   9b29a:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   9b29c:	2206      	movs	r2, #6
   9b29e:	4905      	ldr	r1, [pc, #20]	; (9b2b4 <sv_prop_stopopenfill+0x1c>)
   9b2a0:	2018      	movs	r0, #24
   9b2a2:	4b05      	ldr	r3, [pc, #20]	; (9b2b8 <sv_prop_stopopenfill+0x20>)
   9b2a4:	4798      	blx	r3
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
	SV_CAN_WRITE_PROPO( PROP_STOP_OPENFILL,0);
   9b2a6:	2100      	movs	r1, #0
   9b2a8:	2009      	movs	r0, #9
   9b2aa:	4b04      	ldr	r3, [pc, #16]	; (9b2bc <sv_prop_stopopenfill+0x24>)
   9b2ac:	4798      	blx	r3
}
   9b2ae:	bf00      	nop
   9b2b0:	bd80      	pop	{r7, pc}
   9b2b2:	bf00      	nop
   9b2b4:	000aa3cc 	.word	0x000aa3cc
   9b2b8:	0009cbd5 	.word	0x0009cbd5
   9b2bc:	0009ac35 	.word	0x0009ac35

0009b2c0 <sv_cs_setpotvalue>:
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);

uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   9b2c0:	b580      	push	{r7, lr}
   9b2c2:	b082      	sub	sp, #8
   9b2c4:	af00      	add	r7, sp, #0
   9b2c6:	4603      	mov	r3, r0
   9b2c8:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
	//	DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
		
		SV_CS_SET_POT(resistance);
   9b2ca:	88fb      	ldrh	r3, [r7, #6]
   9b2cc:	4618      	mov	r0, r3
   9b2ce:	4b03      	ldr	r3, [pc, #12]	; (9b2dc <sv_cs_setpotvalue+0x1c>)
   9b2d0:	4798      	blx	r3
		
		}
   9b2d2:	bf00      	nop
   9b2d4:	4618      	mov	r0, r3
   9b2d6:	3708      	adds	r7, #8
   9b2d8:	46bd      	mov	sp, r7
   9b2da:	bd80      	pop	{r7, pc}
   9b2dc:	0009b305 	.word	0x0009b305

0009b2e0 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   9b2e0:	b580      	push	{r7, lr}
   9b2e2:	b082      	sub	sp, #8
   9b2e4:	af00      	add	r7, sp, #0
   9b2e6:	4603      	mov	r3, r0
   9b2e8:	80fb      	strh	r3, [r7, #6]
	uint8_t iic_address;
	uint16_t data;

	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   9b2ea:	88fb      	ldrh	r3, [r7, #6]
   9b2ec:	4619      	mov	r1, r3
   9b2ee:	202f      	movs	r0, #47	; 0x2f
   9b2f0:	4b03      	ldr	r3, [pc, #12]	; (9b300 <sv_cs_setcondpotvalue+0x20>)
   9b2f2:	4798      	blx	r3
	
}
   9b2f4:	bf00      	nop
   9b2f6:	4618      	mov	r0, r3
   9b2f8:	3708      	adds	r7, #8
   9b2fa:	46bd      	mov	sp, r7
   9b2fc:	bd80      	pop	{r7, pc}
   9b2fe:	bf00      	nop
   9b300:	00098789 	.word	0x00098789

0009b304 <SV_CS_SET_POT>:
		*resistance = data;
	
}

void SV_CS_SET_POT(uint16_t* resistance)
{
   9b304:	b580      	push	{r7, lr}
   9b306:	b084      	sub	sp, #16
   9b308:	af00      	add	r7, sp, #0
   9b30a:	6078      	str	r0, [r7, #4]
	uint16_t data = resistance;
   9b30c:	687b      	ldr	r3, [r7, #4]
   9b30e:	81fb      	strh	r3, [r7, #14]
	data = data & 0x3ff;
   9b310:	89fb      	ldrh	r3, [r7, #14]
   9b312:	f3c3 0309 	ubfx	r3, r3, #0, #10
   9b316:	81fb      	strh	r3, [r7, #14]
	command_data_array[0] = AD5174_COMMAND(AD5174_WRITE_SERIAL_REG_TO_CONTRL_REG) | 0x02; //tempreg.temp_8bit[1] ;
   9b318:	4b08      	ldr	r3, [pc, #32]	; (9b33c <SV_CS_SET_POT+0x38>)
   9b31a:	f641 4202 	movw	r2, #7170	; 0x1c02
   9b31e:	801a      	strh	r2, [r3, #0]
	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC) | data;
   9b320:	89fb      	ldrh	r3, [r7, #14]
   9b322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   9b326:	b29a      	uxth	r2, r3
   9b328:	4b04      	ldr	r3, [pc, #16]	; (9b33c <SV_CS_SET_POT+0x38>)
   9b32a:	805a      	strh	r2, [r3, #2]
//	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC)|(0x3ff & *resistance);
	//command_data_array[1]  = 0x04c2;
	
	DD_SPI_SET_POT(&command_data_array, 2);
   9b32c:	2102      	movs	r1, #2
   9b32e:	4803      	ldr	r0, [pc, #12]	; (9b33c <SV_CS_SET_POT+0x38>)
   9b330:	4b03      	ldr	r3, [pc, #12]	; (9b340 <SV_CS_SET_POT+0x3c>)
   9b332:	4798      	blx	r3
   9b334:	bf00      	nop
   9b336:	3710      	adds	r7, #16
   9b338:	46bd      	mov	sp, r7
   9b33a:	bd80      	pop	{r7, pc}
   9b33c:	200727c0 	.word	0x200727c0
   9b340:	00098e05 	.word	0x00098e05

0009b344 <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   9b344:	b580      	push	{r7, lr}
   9b346:	b09a      	sub	sp, #104	; 0x68
   9b348:	af00      	add	r7, sp, #0
   9b34a:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   9b34c:	2300      	movs	r3, #0
   9b34e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	sensor_struct1.FPcurrentstatus	= 1;
   9b352:	2301      	movs	r3, #1
   9b354:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.DGPstatus = 1;
   9b356:	2301      	movs	r3, #1
   9b358:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	//sv_sensor = SV_SENSOR_ID1;
	
	sensor_struct1.ps1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID1);
   9b35c:	2001      	movs	r0, #1
   9b35e:	4ba4      	ldr	r3, [pc, #656]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b360:	4798      	blx	r3
   9b362:	4603      	mov	r3, r0
   9b364:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.ps2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID2);
   9b366:	2002      	movs	r0, #2
   9b368:	4ba1      	ldr	r3, [pc, #644]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b36a:	4798      	blx	r3
   9b36c:	4603      	mov	r3, r0
   9b36e:	857b      	strh	r3, [r7, #42]	; 0x2a
	sensor_struct1.ps3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID3);
   9b370:	2003      	movs	r0, #3
   9b372:	4b9f      	ldr	r3, [pc, #636]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b374:	4798      	blx	r3
   9b376:	4603      	mov	r3, r0
   9b378:	85bb      	strh	r3, [r7, #44]	; 0x2c

	
	sensor_struct1.Temp1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID5);
   9b37a:	2005      	movs	r0, #5
   9b37c:	4b9c      	ldr	r3, [pc, #624]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b37e:	4798      	blx	r3
   9b380:	4603      	mov	r3, r0
   9b382:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sensor_struct1.Temp2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID6);
   9b384:	2006      	movs	r0, #6
   9b386:	4b9a      	ldr	r3, [pc, #616]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b388:	4798      	blx	r3
   9b38a:	4603      	mov	r3, r0
   9b38c:	863b      	strh	r3, [r7, #48]	; 0x30
	sensor_struct1.Temp3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID7);
   9b38e:	2007      	movs	r0, #7
   9b390:	4b97      	ldr	r3, [pc, #604]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b392:	4798      	blx	r3
   9b394:	4603      	mov	r3, r0
   9b396:	867b      	strh	r3, [r7, #50]	; 0x32
	sensor_struct1.CS1_Tempstatus		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID8);
   9b398:	2008      	movs	r0, #8
   9b39a:	4b95      	ldr	r3, [pc, #596]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b39c:	4798      	blx	r3
   9b39e:	4603      	mov	r3, r0
   9b3a0:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensor_struct1.CS2_Tempstatus		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID9);
   9b3a2:	2009      	movs	r0, #9
   9b3a4:	4b92      	ldr	r3, [pc, #584]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3a6:	4798      	blx	r3
   9b3a8:	4603      	mov	r3, r0
   9b3aa:	873b      	strh	r3, [r7, #56]	; 0x38
	sensor_struct1.CS3_Tempstatus		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID10);
   9b3ac:	200a      	movs	r0, #10
   9b3ae:	4b90      	ldr	r3, [pc, #576]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3b0:	4798      	blx	r3
   9b3b2:	4603      	mov	r3, r0
   9b3b4:	877b      	strh	r3, [r7, #58]	; 0x3a
	
	
//	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
	
	sensor_struct1.cond_status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID13);
   9b3b6:	200d      	movs	r0, #13
   9b3b8:	4b8d      	ldr	r3, [pc, #564]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3ba:	4798      	blx	r3
   9b3bc:	4603      	mov	r3, r0
   9b3be:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sensor_struct1.cond_status_dac		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID14);
   9b3c0:	200e      	movs	r0, #14
   9b3c2:	4b8b      	ldr	r3, [pc, #556]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3c4:	4798      	blx	r3
   9b3c6:	4603      	mov	r3, r0
   9b3c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	sensor_struct1.cond_acid			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID11);
   9b3ca:	200b      	movs	r0, #11
   9b3cc:	4b88      	ldr	r3, [pc, #544]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3ce:	4798      	blx	r3
   9b3d0:	4603      	mov	r3, r0
   9b3d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	sensor_struct1.cond_bicarb			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);  // Gopal: getting CS2 in place of DAB  //DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);
   9b3d6:	200c      	movs	r0, #12
   9b3d8:	4b85      	ldr	r3, [pc, #532]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3da:	4798      	blx	r3
   9b3dc:	4603      	mov	r3, r0
   9b3de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
//	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
	
	sensor_struct1.aptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID19);
   9b3e2:	2013      	movs	r0, #19
   9b3e4:	4b82      	ldr	r3, [pc, #520]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3e6:	4798      	blx	r3
   9b3e8:	4603      	mov	r3, r0
   9b3ea:	833b      	strh	r3, [r7, #24]
	sensor_struct1.vptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID20);
   9b3ec:	2014      	movs	r0, #20
   9b3ee:	4b80      	ldr	r3, [pc, #512]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3f0:	4798      	blx	r3
   9b3f2:	4603      	mov	r3, r0
   9b3f4:	837b      	strh	r3, [r7, #26]
	
	sensor_struct1.acid_fd_back         = DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID21);
   9b3f6:	2015      	movs	r0, #21
   9b3f8:	4b7d      	ldr	r3, [pc, #500]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b3fa:	4798      	blx	r3
   9b3fc:	4603      	mov	r3, r0
   9b3fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	sensor_struct1.bicarb_fd_back       = DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID22);
   9b402:	2016      	movs	r0, #22
   9b404:	4b7a      	ldr	r3, [pc, #488]	; (9b5f0 <sv_status_getsystemstatus+0x2ac>)
   9b406:	4798      	blx	r3
   9b408:	4603      	mov	r3, r0
   9b40a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   9b40e:	200e      	movs	r0, #14
   9b410:	4b78      	ldr	r3, [pc, #480]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b412:	4798      	blx	r3
   9b414:	4603      	mov	r3, r0
   9b416:	723b      	strb	r3, [r7, #8]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   9b418:	2005      	movs	r0, #5
   9b41a:	4b76      	ldr	r3, [pc, #472]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b41c:	4798      	blx	r3
   9b41e:	4603      	mov	r3, r0
   9b420:	b29b      	uxth	r3, r3
   9b422:	817b      	strh	r3, [r7, #10]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   9b424:	200f      	movs	r0, #15
   9b426:	4b73      	ldr	r3, [pc, #460]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b428:	4798      	blx	r3
   9b42a:	4603      	mov	r3, r0
   9b42c:	b29b      	uxth	r3, r3
   9b42e:	81bb      	strh	r3, [r7, #12]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   9b430:	2010      	movs	r0, #16
   9b432:	4b70      	ldr	r3, [pc, #448]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b434:	4798      	blx	r3
   9b436:	4603      	mov	r3, r0
   9b438:	b29b      	uxth	r3, r3
   9b43a:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   9b43c:	200d      	movs	r0, #13
   9b43e:	4b6d      	ldr	r3, [pc, #436]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b440:	4798      	blx	r3
   9b442:	4603      	mov	r3, r0
   9b444:	b29b      	uxth	r3, r3
   9b446:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   9b448:	2006      	movs	r0, #6
   9b44a:	4b6a      	ldr	r3, [pc, #424]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b44c:	4798      	blx	r3
   9b44e:	4603      	mov	r3, r0
   9b450:	b29b      	uxth	r3, r3
   9b452:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   9b454:	2007      	movs	r0, #7
   9b456:	4b67      	ldr	r3, [pc, #412]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b458:	4798      	blx	r3
   9b45a:	4603      	mov	r3, r0
   9b45c:	b29b      	uxth	r3, r3
   9b45e:	82fb      	strh	r3, [r7, #22]

	
	sensor_struct1.VC_status			= DD_RD_SENSIN(SV_SENSIN_ID17);
   9b460:	2011      	movs	r0, #17
   9b462:	4b64      	ldr	r3, [pc, #400]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b464:	4798      	blx	r3
   9b466:	4603      	mov	r3, r0
   9b468:	b29b      	uxth	r3, r3
   9b46a:	83bb      	strh	r3, [r7, #28]
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   9b46c:	201a      	movs	r0, #26
   9b46e:	4b61      	ldr	r3, [pc, #388]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b470:	4798      	blx	r3
   9b472:	4603      	mov	r3, r0
   9b474:	b29b      	uxth	r3, r3
   9b476:	843b      	strh	r3, [r7, #32]
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   9b478:	2008      	movs	r0, #8
   9b47a:	4b5e      	ldr	r3, [pc, #376]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b47c:	4798      	blx	r3
   9b47e:	4603      	mov	r3, r0
   9b480:	b29b      	uxth	r3, r3
   9b482:	847b      	strh	r3, [r7, #34]	; 0x22
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   9b484:	2003      	movs	r0, #3
   9b486:	4b5b      	ldr	r3, [pc, #364]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b488:	4798      	blx	r3
   9b48a:	4603      	mov	r3, r0
   9b48c:	b29b      	uxth	r3, r3
   9b48e:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   9b490:	2004      	movs	r0, #4
   9b492:	4b58      	ldr	r3, [pc, #352]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b494:	4798      	blx	r3
   9b496:	4603      	mov	r3, r0
   9b498:	b29b      	uxth	r3, r3
   9b49a:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   9b49c:	2001      	movs	r0, #1
   9b49e:	4b55      	ldr	r3, [pc, #340]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4a0:	4798      	blx	r3
   9b4a2:	4603      	mov	r3, r0
   9b4a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   9b4a8:	200c      	movs	r0, #12
   9b4aa:	4b52      	ldr	r3, [pc, #328]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4ac:	4798      	blx	r3
   9b4ae:	4603      	mov	r3, r0
   9b4b0:	b29b      	uxth	r3, r3
   9b4b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   9b4b6:	201b      	movs	r0, #27
   9b4b8:	4b4e      	ldr	r3, [pc, #312]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4ba:	4798      	blx	r3
   9b4bc:	4603      	mov	r3, r0
   9b4be:	b29b      	uxth	r3, r3
   9b4c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	
	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   9b4c4:	2009      	movs	r0, #9
   9b4c6:	4b4b      	ldr	r3, [pc, #300]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4c8:	4798      	blx	r3
   9b4ca:	4603      	mov	r3, r0
   9b4cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   9b4d0:	200a      	movs	r0, #10
   9b4d2:	4b48      	ldr	r3, [pc, #288]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4d4:	4798      	blx	r3
   9b4d6:	4603      	mov	r3, r0
   9b4d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   9b4dc:	2013      	movs	r0, #19
   9b4de:	4b45      	ldr	r3, [pc, #276]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4e0:	4798      	blx	r3
   9b4e2:	4603      	mov	r3, r0
   9b4e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);   // manav03 20
   9b4e8:	2015      	movs	r0, #21
   9b4ea:	4b42      	ldr	r3, [pc, #264]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4ec:	4798      	blx	r3
   9b4ee:	4603      	mov	r3, r0
   9b4f0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);   // manav03 21
   9b4f4:	2014      	movs	r0, #20
   9b4f6:	4b3f      	ldr	r3, [pc, #252]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b4f8:	4798      	blx	r3
   9b4fa:	4603      	mov	r3, r0
   9b4fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   9b500:	2016      	movs	r0, #22
   9b502:	4b3c      	ldr	r3, [pc, #240]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b504:	4798      	blx	r3
   9b506:	4603      	mov	r3, r0
   9b508:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   9b50c:	2017      	movs	r0, #23
   9b50e:	4b39      	ldr	r3, [pc, #228]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b510:	4798      	blx	r3
   9b512:	4603      	mov	r3, r0
   9b514:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   9b518:	2018      	movs	r0, #24
   9b51a:	4b36      	ldr	r3, [pc, #216]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b51c:	4798      	blx	r3
   9b51e:	4603      	mov	r3, r0
   9b520:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		
	sensor_struct1.DGPstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   9b524:	2002      	movs	r0, #2
   9b526:	4b33      	ldr	r3, [pc, #204]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b528:	4798      	blx	r3
   9b52a:	4603      	mov	r3, r0
   9b52c:	b29b      	uxth	r3, r3
   9b52e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	sensor_struct1.PowerFailure		= DD_RD_SENSIN(SV_SENSIN_ID36);
   9b532:	2024      	movs	r0, #36	; 0x24
   9b534:	4b2f      	ldr	r3, [pc, #188]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b536:	4798      	blx	r3
   9b538:	4603      	mov	r3, r0
   9b53a:	b29b      	uxth	r3, r3
   9b53c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	
	
	sensor_struct1.BP_ON_OFF = DD_RD_SENSIN(SV_SENSIN_ID25);
   9b540:	2019      	movs	r0, #25
   9b542:	4b2c      	ldr	r3, [pc, #176]	; (9b5f4 <sv_status_getsystemstatus+0x2b0>)
   9b544:	4798      	blx	r3
   9b546:	4603      	mov	r3, r0
   9b548:	b29b      	uxth	r3, r3
   9b54a:	823b      	strh	r3, [r7, #16]
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   9b54c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   9b54e:	687b      	ldr	r3, [r7, #4]
   9b550:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   9b552:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   9b554:	687b      	ldr	r3, [r7, #4]
   9b556:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   9b558:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   9b55a:	687b      	ldr	r3, [r7, #4]
   9b55c:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   9b55e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   9b560:	687b      	ldr	r3, [r7, #4]
   9b562:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   9b564:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   9b566:	687b      	ldr	r3, [r7, #4]
   9b568:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   9b56a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   9b56e:	687b      	ldr	r3, [r7, #4]
   9b570:	871a      	strh	r2, [r3, #56]	; 0x38
	sensor_struct->cond_acid			= sensor_struct1.cond_acid;
   9b572:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   9b576:	687b      	ldr	r3, [r7, #4]
   9b578:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor_struct->cond_bicarb			= sensor_struct1.cond_bicarb;
   9b57a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   9b57e:	687b      	ldr	r3, [r7, #4]
   9b580:	879a      	strh	r2, [r3, #60]	; 0x3c
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   9b582:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   9b584:	687b      	ldr	r3, [r7, #4]
   9b586:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   9b588:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   9b58a:	687b      	ldr	r3, [r7, #4]
   9b58c:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   9b58e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9b590:	687b      	ldr	r3, [r7, #4]
   9b592:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   9b594:	8b3a      	ldrh	r2, [r7, #24]
   9b596:	687b      	ldr	r3, [r7, #4]
   9b598:	821a      	strh	r2, [r3, #16]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   9b59a:	8b7a      	ldrh	r2, [r7, #26]
   9b59c:	687b      	ldr	r3, [r7, #4]
   9b59e:	825a      	strh	r2, [r3, #18]
	sensor_struct->acid_fd_back			= sensor_struct1.acid_fd_back;
   9b5a0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
   9b5a4:	687b      	ldr	r3, [r7, #4]
   9b5a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	sensor_struct->bicarb_fd_back       = sensor_struct1.bicarb_fd_back; 
   9b5aa:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
   9b5ae:	687b      	ldr	r3, [r7, #4]
   9b5b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   9b5b4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   9b5b8:	687b      	ldr	r3, [r7, #4]
   9b5ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   9b5be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   9b5c0:	687b      	ldr	r3, [r7, #4]
   9b5c2:	839a      	strh	r2, [r3, #28]
	sensor_struct->DGPstatus		= sensor_struct1.DGPstatus;
   9b5c4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   9b5c8:	687b      	ldr	r3, [r7, #4]
   9b5ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   9b5ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9b5d0:	687b      	ldr	r3, [r7, #4]
   9b5d2:	83da      	strh	r2, [r3, #30]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   9b5d4:	897a      	ldrh	r2, [r7, #10]
   9b5d6:	687b      	ldr	r3, [r7, #4]
   9b5d8:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   9b5da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
   9b5de:	687b      	ldr	r3, [r7, #4]
   9b5e0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   9b5e4:	8c3a      	ldrh	r2, [r7, #32]
   9b5e6:	687b      	ldr	r3, [r7, #4]
   9b5e8:	831a      	strh	r2, [r3, #24]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   9b5ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9b5ec:	e004      	b.n	9b5f8 <sv_status_getsystemstatus+0x2b4>
   9b5ee:	bf00      	nop
   9b5f0:	00097d5d 	.word	0x00097d5d
   9b5f4:	00099ad5 	.word	0x00099ad5
   9b5f8:	687b      	ldr	r3, [r7, #4]
   9b5fa:	835a      	strh	r2, [r3, #26]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   9b5fc:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
   9b600:	687b      	ldr	r3, [r7, #4]
   9b602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   9b606:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
   9b60a:	687b      	ldr	r3, [r7, #4]
   9b60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   9b610:	7a3a      	ldrb	r2, [r7, #8]
   9b612:	687b      	ldr	r3, [r7, #4]
   9b614:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   9b616:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
   9b61a:	687b      	ldr	r3, [r7, #4]
   9b61c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   9b620:	8aba      	ldrh	r2, [r7, #20]
   9b622:	687b      	ldr	r3, [r7, #4]
   9b624:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   9b626:	8afa      	ldrh	r2, [r7, #22]
   9b628:	687b      	ldr	r3, [r7, #4]
   9b62a:	81da      	strh	r2, [r3, #14]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   9b62c:	8a7a      	ldrh	r2, [r7, #18]
   9b62e:	687b      	ldr	r3, [r7, #4]
   9b630:	815a      	strh	r2, [r3, #10]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   9b632:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
   9b636:	687b      	ldr	r3, [r7, #4]
   9b638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   9b63c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   9b640:	687b      	ldr	r3, [r7, #4]
   9b642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sensor_struct->VC_status = sensor_struct1.VC_status;
   9b646:	8bba      	ldrh	r2, [r7, #28]
   9b648:	687b      	ldr	r3, [r7, #4]
   9b64a:	829a      	strh	r2, [r3, #20]
	sensor_struct->BP_DEC =sensor_struct1.BP_DEC;
   9b64c:	89fa      	ldrh	r2, [r7, #14]
   9b64e:	687b      	ldr	r3, [r7, #4]
   9b650:	80da      	strh	r2, [r3, #6]
	sensor_struct->BP_INC = sensor_struct1. BP_INC; 
   9b652:	89ba      	ldrh	r2, [r7, #12]
   9b654:	687b      	ldr	r3, [r7, #4]
   9b656:	809a      	strh	r2, [r3, #4]
	sensor_struct->BP_ON_OFF = sensor_struct1. BP_ON_OFF; 
   9b658:	8a3a      	ldrh	r2, [r7, #16]
   9b65a:	687b      	ldr	r3, [r7, #4]
   9b65c:	811a      	strh	r2, [r3, #8]
	sensor_struct->PowerFailure = sensor_struct1.PowerFailure; 
   9b65e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
   9b662:	687b      	ldr	r3, [r7, #4]
   9b664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	
	return 0;
   9b668:	2300      	movs	r3, #0

}
   9b66a:	4618      	mov	r0, r3
   9b66c:	3768      	adds	r7, #104	; 0x68
   9b66e:	46bd      	mov	sp, r7
   9b670:	bd80      	pop	{r7, pc}
   9b672:	bf00      	nop

0009b674 <SV_SYSTEM_INIT>:
extern void DD_INIT_IIC(void);
extern Cl_Uint8Type sum[11];
extern Cl_Uint8Type checksum_all[11];

void SV_SYSTEM_INIT()
{
   9b674:	b580      	push	{r7, lr}
   9b676:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   9b678:	4b0c      	ldr	r3, [pc, #48]	; (9b6ac <SV_SYSTEM_INIT+0x38>)
   9b67a:	4798      	blx	r3
	DD_INIT_PIO();
   9b67c:	4b0c      	ldr	r3, [pc, #48]	; (9b6b0 <SV_SYSTEM_INIT+0x3c>)
   9b67e:	4798      	blx	r3
	DD_INIT_UART();
   9b680:	4b0c      	ldr	r3, [pc, #48]	; (9b6b4 <SV_SYSTEM_INIT+0x40>)
   9b682:	4798      	blx	r3
	DD_INIT_TIMER();
   9b684:	4b0c      	ldr	r3, [pc, #48]	; (9b6b8 <SV_SYSTEM_INIT+0x44>)
   9b686:	4798      	blx	r3
//	DD_INIT_ADC();
	DD_INIT_PWM();
   9b688:	4b0c      	ldr	r3, [pc, #48]	; (9b6bc <SV_SYSTEM_INIT+0x48>)
   9b68a:	4798      	blx	r3
	DD_INIT_NVM();
   9b68c:	4b0c      	ldr	r3, [pc, #48]	; (9b6c0 <SV_SYSTEM_INIT+0x4c>)
   9b68e:	4798      	blx	r3
	DD_INIT_INT();
   9b690:	4b0c      	ldr	r3, [pc, #48]	; (9b6c4 <SV_SYSTEM_INIT+0x50>)
   9b692:	4798      	blx	r3
	DD_INIT_IIC();
   9b694:	4b0c      	ldr	r3, [pc, #48]	; (9b6c8 <SV_SYSTEM_INIT+0x54>)
   9b696:	4798      	blx	r3
	DD_INIT_SPI();
   9b698:	4b0c      	ldr	r3, [pc, #48]	; (9b6cc <SV_SYSTEM_INIT+0x58>)
   9b69a:	4798      	blx	r3

    DD_INIT_CAN();
   9b69c:	4b0c      	ldr	r3, [pc, #48]	; (9b6d0 <SV_SYSTEM_INIT+0x5c>)
   9b69e:	4798      	blx	r3
// 		{
// 			//printf("error\n");
// 		}
// 	}
	
	SV_START_TIMER(0,1);
   9b6a0:	2101      	movs	r1, #1
   9b6a2:	2000      	movs	r0, #0
   9b6a4:	4b0b      	ldr	r3, [pc, #44]	; (9b6d4 <SV_SYSTEM_INIT+0x60>)
   9b6a6:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   9b6a8:	bf00      	nop
   9b6aa:	bd80      	pop	{r7, pc}
   9b6ac:	00097e95 	.word	0x00097e95
   9b6b0:	00097ec9 	.word	0x00097ec9
   9b6b4:	0009aba1 	.word	0x0009aba1
   9b6b8:	0009a699 	.word	0x0009a699
   9b6bc:	00098b39 	.word	0x00098b39
   9b6c0:	000989e5 	.word	0x000989e5
   9b6c4:	00098909 	.word	0x00098909
   9b6c8:	00098755 	.word	0x00098755
   9b6cc:	00098f45 	.word	0x00098f45
   9b6d0:	00097bed 	.word	0x00097bed
   9b6d4:	0009b6d9 	.word	0x0009b6d9

0009b6d8 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   9b6d8:	b580      	push	{r7, lr}
   9b6da:	b082      	sub	sp, #8
   9b6dc:	af00      	add	r7, sp, #0
   9b6de:	4603      	mov	r3, r0
   9b6e0:	6039      	str	r1, [r7, #0]
   9b6e2:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   9b6e4:	683b      	ldr	r3, [r7, #0]
   9b6e6:	b2da      	uxtb	r2, r3
   9b6e8:	79fb      	ldrb	r3, [r7, #7]
   9b6ea:	4611      	mov	r1, r2
   9b6ec:	4618      	mov	r0, r3
   9b6ee:	4b03      	ldr	r3, [pc, #12]	; (9b6fc <SV_START_TIMER+0x24>)
   9b6f0:	4798      	blx	r3
	
	return 0;
   9b6f2:	2300      	movs	r3, #0
}
   9b6f4:	4618      	mov	r0, r3
   9b6f6:	3708      	adds	r7, #8
   9b6f8:	46bd      	mov	sp, r7
   9b6fa:	bd80      	pop	{r7, pc}
   9b6fc:	00099dad 	.word	0x00099dad

0009b700 <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   9b700:	b480      	push	{r7}
   9b702:	b085      	sub	sp, #20
   9b704:	af00      	add	r7, sp, #0
   9b706:	4603      	mov	r3, r0
   9b708:	6039      	str	r1, [r7, #0]
   9b70a:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   9b70c:	79fb      	ldrb	r3, [r7, #7]
   9b70e:	3b01      	subs	r3, #1
   9b710:	4a08      	ldr	r2, [pc, #32]	; (9b734 <sv_nvmgetdata+0x34>)
   9b712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   9b716:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   9b718:	7b3a      	ldrb	r2, [r7, #12]
   9b71a:	683b      	ldr	r3, [r7, #0]
   9b71c:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   9b71e:	683b      	ldr	r3, [r7, #0]
   9b720:	3301      	adds	r3, #1
   9b722:	7b7a      	ldrb	r2, [r7, #13]
   9b724:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   9b726:	2300      	movs	r3, #0
}
   9b728:	4618      	mov	r0, r3
   9b72a:	3714      	adds	r7, #20
   9b72c:	46bd      	mov	sp, r7
   9b72e:	bc80      	pop	{r7}
   9b730:	4770      	bx	lr
   9b732:	bf00      	nop
   9b734:	20070ab4 	.word	0x20070ab4

0009b738 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   9b738:	b480      	push	{r7}
   9b73a:	b083      	sub	sp, #12
   9b73c:	af00      	add	r7, sp, #0
   9b73e:	4603      	mov	r3, r0
   9b740:	6039      	str	r1, [r7, #0]
   9b742:	71fb      	strb	r3, [r7, #7]
   9b744:	4613      	mov	r3, r2
   9b746:	71bb      	strb	r3, [r7, #6]
// 	
// 			temp.byte[0] = pdata[0];
// 			temp.byte[1] = pdata[1];
// 			nvmarray[dataItemId-1] = temp.twobyte;
			
		return SV_OK;
   9b748:	2300      	movs	r3, #0
   9b74a:	4618      	mov	r0, r3
   9b74c:	370c      	adds	r7, #12
   9b74e:	46bd      	mov	sp, r7
   9b750:	bc80      	pop	{r7}
   9b752:	4770      	bx	lr

0009b754 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   9b754:	b580      	push	{r7, lr}
   9b756:	b086      	sub	sp, #24
   9b758:	af00      	add	r7, sp, #0
   9b75a:	60f8      	str	r0, [r7, #12]
   9b75c:	60b9      	str	r1, [r7, #8]
   9b75e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9b760:	2300      	movs	r3, #0
   9b762:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   9b764:	68fb      	ldr	r3, [r7, #12]
   9b766:	2b00      	cmp	r3, #0
   9b768:	d012      	beq.n	9b790 <_read+0x3c>
		return -1;
   9b76a:	f04f 33ff 	mov.w	r3, #4294967295
   9b76e:	e013      	b.n	9b798 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   9b770:	4b0b      	ldr	r3, [pc, #44]	; (9b7a0 <_read+0x4c>)
   9b772:	681b      	ldr	r3, [r3, #0]
   9b774:	4a0b      	ldr	r2, [pc, #44]	; (9b7a4 <_read+0x50>)
   9b776:	6812      	ldr	r2, [r2, #0]
   9b778:	68b9      	ldr	r1, [r7, #8]
   9b77a:	4610      	mov	r0, r2
   9b77c:	4798      	blx	r3
		ptr++;
   9b77e:	68bb      	ldr	r3, [r7, #8]
   9b780:	3301      	adds	r3, #1
   9b782:	60bb      	str	r3, [r7, #8]
		nChars++;
   9b784:	697b      	ldr	r3, [r7, #20]
   9b786:	3301      	adds	r3, #1
   9b788:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   9b78a:	687b      	ldr	r3, [r7, #4]
   9b78c:	3b01      	subs	r3, #1
   9b78e:	607b      	str	r3, [r7, #4]
   9b790:	687b      	ldr	r3, [r7, #4]
   9b792:	2b00      	cmp	r3, #0
   9b794:	dcec      	bgt.n	9b770 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   9b796:	697b      	ldr	r3, [r7, #20]
}
   9b798:	4618      	mov	r0, r3
   9b79a:	3718      	adds	r7, #24
   9b79c:	46bd      	mov	sp, r7
   9b79e:	bd80      	pop	{r7, pc}
   9b7a0:	200727c8 	.word	0x200727c8
   9b7a4:	200727d0 	.word	0x200727d0

0009b7a8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   9b7a8:	b580      	push	{r7, lr}
   9b7aa:	b086      	sub	sp, #24
   9b7ac:	af00      	add	r7, sp, #0
   9b7ae:	60f8      	str	r0, [r7, #12]
   9b7b0:	60b9      	str	r1, [r7, #8]
   9b7b2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9b7b4:	2300      	movs	r3, #0
   9b7b6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   9b7b8:	68fb      	ldr	r3, [r7, #12]
   9b7ba:	2b01      	cmp	r3, #1
   9b7bc:	d01e      	beq.n	9b7fc <_write+0x54>
   9b7be:	68fb      	ldr	r3, [r7, #12]
   9b7c0:	2b02      	cmp	r3, #2
   9b7c2:	d01b      	beq.n	9b7fc <_write+0x54>
   9b7c4:	68fb      	ldr	r3, [r7, #12]
   9b7c6:	2b03      	cmp	r3, #3
   9b7c8:	d018      	beq.n	9b7fc <_write+0x54>
		return -1;
   9b7ca:	f04f 33ff 	mov.w	r3, #4294967295
   9b7ce:	e019      	b.n	9b804 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   9b7d0:	4b0e      	ldr	r3, [pc, #56]	; (9b80c <_write+0x64>)
   9b7d2:	681a      	ldr	r2, [r3, #0]
   9b7d4:	4b0e      	ldr	r3, [pc, #56]	; (9b810 <_write+0x68>)
   9b7d6:	6818      	ldr	r0, [r3, #0]
   9b7d8:	68bb      	ldr	r3, [r7, #8]
   9b7da:	1c59      	adds	r1, r3, #1
   9b7dc:	60b9      	str	r1, [r7, #8]
   9b7de:	781b      	ldrb	r3, [r3, #0]
   9b7e0:	4619      	mov	r1, r3
   9b7e2:	4790      	blx	r2
   9b7e4:	4603      	mov	r3, r0
   9b7e6:	2b00      	cmp	r3, #0
   9b7e8:	da02      	bge.n	9b7f0 <_write+0x48>
			return -1;
   9b7ea:	f04f 33ff 	mov.w	r3, #4294967295
   9b7ee:	e009      	b.n	9b804 <_write+0x5c>
		}
		++nChars;
   9b7f0:	697b      	ldr	r3, [r7, #20]
   9b7f2:	3301      	adds	r3, #1
   9b7f4:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   9b7f6:	687b      	ldr	r3, [r7, #4]
   9b7f8:	3b01      	subs	r3, #1
   9b7fa:	607b      	str	r3, [r7, #4]
   9b7fc:	687b      	ldr	r3, [r7, #4]
   9b7fe:	2b00      	cmp	r3, #0
   9b800:	d1e6      	bne.n	9b7d0 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   9b802:	697b      	ldr	r3, [r7, #20]
}
   9b804:	4618      	mov	r0, r3
   9b806:	3718      	adds	r7, #24
   9b808:	46bd      	mov	sp, r7
   9b80a:	bd80      	pop	{r7, pc}
   9b80c:	200727cc 	.word	0x200727cc
   9b810:	200727d0 	.word	0x200727d0

0009b814 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   9b814:	b580      	push	{r7, lr}
   9b816:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   9b818:	4b05      	ldr	r3, [pc, #20]	; (9b830 <board_init+0x1c>)
   9b81a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9b81e:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   9b820:	4a04      	ldr	r2, [pc, #16]	; (9b834 <board_init+0x20>)
   9b822:	f44f 7140 	mov.w	r1, #768	; 0x300
   9b826:	4804      	ldr	r0, [pc, #16]	; (9b838 <board_init+0x24>)
   9b828:	4b04      	ldr	r3, [pc, #16]	; (9b83c <board_init+0x28>)
   9b82a:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   9b82c:	bf00      	nop
   9b82e:	bd80      	pop	{r7, pc}
   9b830:	400e1a50 	.word	0x400e1a50
   9b834:	08000001 	.word	0x08000001
   9b838:	400e0e00 	.word	0x400e0e00
   9b83c:	0009bb59 	.word	0x0009bb59

0009b840 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   9b840:	b480      	push	{r7}
   9b842:	b085      	sub	sp, #20
   9b844:	af00      	add	r7, sp, #0
   9b846:	60f8      	str	r0, [r7, #12]
   9b848:	60b9      	str	r1, [r7, #8]
   9b84a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   9b84c:	687b      	ldr	r3, [r7, #4]
   9b84e:	2b00      	cmp	r3, #0
   9b850:	d003      	beq.n	9b85a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   9b852:	68fb      	ldr	r3, [r7, #12]
   9b854:	68ba      	ldr	r2, [r7, #8]
   9b856:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   9b858:	e002      	b.n	9b860 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   9b85a:	68fb      	ldr	r3, [r7, #12]
   9b85c:	68ba      	ldr	r2, [r7, #8]
   9b85e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   9b860:	bf00      	nop
   9b862:	3714      	adds	r7, #20
   9b864:	46bd      	mov	sp, r7
   9b866:	bc80      	pop	{r7}
   9b868:	4770      	bx	lr
   9b86a:	bf00      	nop

0009b86c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   9b86c:	b480      	push	{r7}
   9b86e:	b087      	sub	sp, #28
   9b870:	af00      	add	r7, sp, #0
   9b872:	60f8      	str	r0, [r7, #12]
   9b874:	60b9      	str	r1, [r7, #8]
   9b876:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   9b878:	68fb      	ldr	r3, [r7, #12]
   9b87a:	687a      	ldr	r2, [r7, #4]
   9b87c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   9b87e:	68bb      	ldr	r3, [r7, #8]
   9b880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9b884:	d01f      	beq.n	9b8c6 <pio_set_peripheral+0x5a>
   9b886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9b88a:	d805      	bhi.n	9b898 <pio_set_peripheral+0x2c>
   9b88c:	2b00      	cmp	r3, #0
   9b88e:	d027      	beq.n	9b8e0 <pio_set_peripheral+0x74>
   9b890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9b894:	d00a      	beq.n	9b8ac <pio_set_peripheral+0x40>
   9b896:	e01f      	b.n	9b8d8 <pio_set_peripheral+0x6c>
   9b898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9b89c:	d020      	beq.n	9b8e0 <pio_set_peripheral+0x74>
   9b89e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9b8a2:	d01d      	beq.n	9b8e0 <pio_set_peripheral+0x74>
   9b8a4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9b8a8:	d01a      	beq.n	9b8e0 <pio_set_peripheral+0x74>
   9b8aa:	e015      	b.n	9b8d8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   9b8ac:	68fb      	ldr	r3, [r7, #12]
   9b8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9b8b0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   9b8b2:	68fb      	ldr	r3, [r7, #12]
   9b8b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   9b8b6:	687b      	ldr	r3, [r7, #4]
   9b8b8:	43d9      	mvns	r1, r3
   9b8ba:	697b      	ldr	r3, [r7, #20]
   9b8bc:	400b      	ands	r3, r1
   9b8be:	401a      	ands	r2, r3
   9b8c0:	68fb      	ldr	r3, [r7, #12]
   9b8c2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9b8c4:	e008      	b.n	9b8d8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   9b8c6:	68fb      	ldr	r3, [r7, #12]
   9b8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9b8ca:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9b8cc:	687a      	ldr	r2, [r7, #4]
   9b8ce:	697b      	ldr	r3, [r7, #20]
   9b8d0:	431a      	orrs	r2, r3
   9b8d2:	68fb      	ldr	r3, [r7, #12]
   9b8d4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9b8d6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   9b8d8:	68fb      	ldr	r3, [r7, #12]
   9b8da:	687a      	ldr	r2, [r7, #4]
   9b8dc:	605a      	str	r2, [r3, #4]
   9b8de:	e000      	b.n	9b8e2 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   9b8e0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   9b8e2:	371c      	adds	r7, #28
   9b8e4:	46bd      	mov	sp, r7
   9b8e6:	bc80      	pop	{r7}
   9b8e8:	4770      	bx	lr
   9b8ea:	bf00      	nop

0009b8ec <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   9b8ec:	b580      	push	{r7, lr}
   9b8ee:	b084      	sub	sp, #16
   9b8f0:	af00      	add	r7, sp, #0
   9b8f2:	60f8      	str	r0, [r7, #12]
   9b8f4:	60b9      	str	r1, [r7, #8]
   9b8f6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   9b8f8:	68b9      	ldr	r1, [r7, #8]
   9b8fa:	68f8      	ldr	r0, [r7, #12]
   9b8fc:	4b19      	ldr	r3, [pc, #100]	; (9b964 <pio_set_input+0x78>)
   9b8fe:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   9b900:	687b      	ldr	r3, [r7, #4]
   9b902:	f003 0301 	and.w	r3, r3, #1
   9b906:	461a      	mov	r2, r3
   9b908:	68b9      	ldr	r1, [r7, #8]
   9b90a:	68f8      	ldr	r0, [r7, #12]
   9b90c:	4b16      	ldr	r3, [pc, #88]	; (9b968 <pio_set_input+0x7c>)
   9b90e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   9b910:	687b      	ldr	r3, [r7, #4]
   9b912:	f003 030a 	and.w	r3, r3, #10
   9b916:	2b00      	cmp	r3, #0
   9b918:	d003      	beq.n	9b922 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   9b91a:	68fb      	ldr	r3, [r7, #12]
   9b91c:	68ba      	ldr	r2, [r7, #8]
   9b91e:	621a      	str	r2, [r3, #32]
   9b920:	e002      	b.n	9b928 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   9b922:	68fb      	ldr	r3, [r7, #12]
   9b924:	68ba      	ldr	r2, [r7, #8]
   9b926:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   9b928:	687b      	ldr	r3, [r7, #4]
   9b92a:	f003 0302 	and.w	r3, r3, #2
   9b92e:	2b00      	cmp	r3, #0
   9b930:	d004      	beq.n	9b93c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   9b932:	68fb      	ldr	r3, [r7, #12]
   9b934:	68ba      	ldr	r2, [r7, #8]
   9b936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   9b93a:	e008      	b.n	9b94e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   9b93c:	687b      	ldr	r3, [r7, #4]
   9b93e:	f003 0308 	and.w	r3, r3, #8
   9b942:	2b00      	cmp	r3, #0
   9b944:	d003      	beq.n	9b94e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   9b946:	68fb      	ldr	r3, [r7, #12]
   9b948:	68ba      	ldr	r2, [r7, #8]
   9b94a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   9b94e:	68fb      	ldr	r3, [r7, #12]
   9b950:	68ba      	ldr	r2, [r7, #8]
   9b952:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9b954:	68fb      	ldr	r3, [r7, #12]
   9b956:	68ba      	ldr	r2, [r7, #8]
   9b958:	601a      	str	r2, [r3, #0]
}
   9b95a:	bf00      	nop
   9b95c:	3710      	adds	r7, #16
   9b95e:	46bd      	mov	sp, r7
   9b960:	bd80      	pop	{r7, pc}
   9b962:	bf00      	nop
   9b964:	0009b9d1 	.word	0x0009b9d1
   9b968:	0009b841 	.word	0x0009b841

0009b96c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   9b96c:	b580      	push	{r7, lr}
   9b96e:	b084      	sub	sp, #16
   9b970:	af00      	add	r7, sp, #0
   9b972:	60f8      	str	r0, [r7, #12]
   9b974:	60b9      	str	r1, [r7, #8]
   9b976:	607a      	str	r2, [r7, #4]
   9b978:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   9b97a:	68b9      	ldr	r1, [r7, #8]
   9b97c:	68f8      	ldr	r0, [r7, #12]
   9b97e:	4b12      	ldr	r3, [pc, #72]	; (9b9c8 <pio_set_output+0x5c>)
   9b980:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9b982:	69ba      	ldr	r2, [r7, #24]
   9b984:	68b9      	ldr	r1, [r7, #8]
   9b986:	68f8      	ldr	r0, [r7, #12]
   9b988:	4b10      	ldr	r3, [pc, #64]	; (9b9cc <pio_set_output+0x60>)
   9b98a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   9b98c:	683b      	ldr	r3, [r7, #0]
   9b98e:	2b00      	cmp	r3, #0
   9b990:	d003      	beq.n	9b99a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9b992:	68fb      	ldr	r3, [r7, #12]
   9b994:	68ba      	ldr	r2, [r7, #8]
   9b996:	651a      	str	r2, [r3, #80]	; 0x50
   9b998:	e002      	b.n	9b9a0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   9b99a:	68fb      	ldr	r3, [r7, #12]
   9b99c:	68ba      	ldr	r2, [r7, #8]
   9b99e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   9b9a0:	687b      	ldr	r3, [r7, #4]
   9b9a2:	2b00      	cmp	r3, #0
   9b9a4:	d003      	beq.n	9b9ae <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   9b9a6:	68fb      	ldr	r3, [r7, #12]
   9b9a8:	68ba      	ldr	r2, [r7, #8]
   9b9aa:	631a      	str	r2, [r3, #48]	; 0x30
   9b9ac:	e002      	b.n	9b9b4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   9b9ae:	68fb      	ldr	r3, [r7, #12]
   9b9b0:	68ba      	ldr	r2, [r7, #8]
   9b9b2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   9b9b4:	68fb      	ldr	r3, [r7, #12]
   9b9b6:	68ba      	ldr	r2, [r7, #8]
   9b9b8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   9b9ba:	68fb      	ldr	r3, [r7, #12]
   9b9bc:	68ba      	ldr	r2, [r7, #8]
   9b9be:	601a      	str	r2, [r3, #0]
}
   9b9c0:	bf00      	nop
   9b9c2:	3710      	adds	r7, #16
   9b9c4:	46bd      	mov	sp, r7
   9b9c6:	bd80      	pop	{r7, pc}
   9b9c8:	0009b9d1 	.word	0x0009b9d1
   9b9cc:	0009b841 	.word	0x0009b841

0009b9d0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   9b9d0:	b480      	push	{r7}
   9b9d2:	b083      	sub	sp, #12
   9b9d4:	af00      	add	r7, sp, #0
   9b9d6:	6078      	str	r0, [r7, #4]
   9b9d8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   9b9da:	687b      	ldr	r3, [r7, #4]
   9b9dc:	683a      	ldr	r2, [r7, #0]
   9b9de:	645a      	str	r2, [r3, #68]	; 0x44
}
   9b9e0:	bf00      	nop
   9b9e2:	370c      	adds	r7, #12
   9b9e4:	46bd      	mov	sp, r7
   9b9e6:	bc80      	pop	{r7}
   9b9e8:	4770      	bx	lr
   9b9ea:	bf00      	nop

0009b9ec <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   9b9ec:	b480      	push	{r7}
   9b9ee:	b083      	sub	sp, #12
   9b9f0:	af00      	add	r7, sp, #0
   9b9f2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   9b9f4:	687b      	ldr	r3, [r7, #4]
   9b9f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   9b9f8:	4618      	mov	r0, r3
   9b9fa:	370c      	adds	r7, #12
   9b9fc:	46bd      	mov	sp, r7
   9b9fe:	bc80      	pop	{r7}
   9ba00:	4770      	bx	lr
   9ba02:	bf00      	nop

0009ba04 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   9ba04:	b480      	push	{r7}
   9ba06:	b083      	sub	sp, #12
   9ba08:	af00      	add	r7, sp, #0
   9ba0a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   9ba0c:	687b      	ldr	r3, [r7, #4]
   9ba0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   9ba10:	4618      	mov	r0, r3
   9ba12:	370c      	adds	r7, #12
   9ba14:	46bd      	mov	sp, r7
   9ba16:	bc80      	pop	{r7}
   9ba18:	4770      	bx	lr
   9ba1a:	bf00      	nop

0009ba1c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   9ba1c:	b590      	push	{r4, r7, lr}
   9ba1e:	b087      	sub	sp, #28
   9ba20:	af02      	add	r7, sp, #8
   9ba22:	6078      	str	r0, [r7, #4]
   9ba24:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9ba26:	687b      	ldr	r3, [r7, #4]
   9ba28:	095b      	lsrs	r3, r3, #5
   9ba2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9ba2e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9ba32:	025b      	lsls	r3, r3, #9
   9ba34:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9ba36:	683b      	ldr	r3, [r7, #0]
   9ba38:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9ba3c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9ba40:	d046      	beq.n	9bad0 <pio_configure_pin+0xb4>
   9ba42:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9ba46:	d806      	bhi.n	9ba56 <pio_configure_pin+0x3a>
   9ba48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9ba4c:	d00a      	beq.n	9ba64 <pio_configure_pin+0x48>
   9ba4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9ba52:	d022      	beq.n	9ba9a <pio_configure_pin+0x7e>
   9ba54:	e070      	b.n	9bb38 <pio_configure_pin+0x11c>
   9ba56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9ba5a:	d045      	beq.n	9bae8 <pio_configure_pin+0xcc>
   9ba5c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9ba60:	d042      	beq.n	9bae8 <pio_configure_pin+0xcc>
   9ba62:	e069      	b.n	9bb38 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   9ba64:	687b      	ldr	r3, [r7, #4]
   9ba66:	f003 031f 	and.w	r3, r3, #31
   9ba6a:	2201      	movs	r2, #1
   9ba6c:	fa02 f303 	lsl.w	r3, r2, r3
   9ba70:	461a      	mov	r2, r3
   9ba72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9ba76:	68f8      	ldr	r0, [r7, #12]
   9ba78:	4b33      	ldr	r3, [pc, #204]	; (9bb48 <pio_configure_pin+0x12c>)
   9ba7a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9ba7c:	687b      	ldr	r3, [r7, #4]
   9ba7e:	f003 031f 	and.w	r3, r3, #31
   9ba82:	2201      	movs	r2, #1
   9ba84:	fa02 f303 	lsl.w	r3, r2, r3
   9ba88:	4619      	mov	r1, r3
   9ba8a:	683b      	ldr	r3, [r7, #0]
   9ba8c:	f003 0301 	and.w	r3, r3, #1
   9ba90:	461a      	mov	r2, r3
   9ba92:	68f8      	ldr	r0, [r7, #12]
   9ba94:	4b2d      	ldr	r3, [pc, #180]	; (9bb4c <pio_configure_pin+0x130>)
   9ba96:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9ba98:	e050      	b.n	9bb3c <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   9ba9a:	687b      	ldr	r3, [r7, #4]
   9ba9c:	f003 031f 	and.w	r3, r3, #31
   9baa0:	2201      	movs	r2, #1
   9baa2:	fa02 f303 	lsl.w	r3, r2, r3
   9baa6:	461a      	mov	r2, r3
   9baa8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9baac:	68f8      	ldr	r0, [r7, #12]
   9baae:	4b26      	ldr	r3, [pc, #152]	; (9bb48 <pio_configure_pin+0x12c>)
   9bab0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9bab2:	687b      	ldr	r3, [r7, #4]
   9bab4:	f003 031f 	and.w	r3, r3, #31
   9bab8:	2201      	movs	r2, #1
   9baba:	fa02 f303 	lsl.w	r3, r2, r3
   9babe:	4619      	mov	r1, r3
   9bac0:	683b      	ldr	r3, [r7, #0]
   9bac2:	f003 0301 	and.w	r3, r3, #1
   9bac6:	461a      	mov	r2, r3
   9bac8:	68f8      	ldr	r0, [r7, #12]
   9baca:	4b20      	ldr	r3, [pc, #128]	; (9bb4c <pio_configure_pin+0x130>)
   9bacc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9bace:	e035      	b.n	9bb3c <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   9bad0:	687b      	ldr	r3, [r7, #4]
   9bad2:	f003 031f 	and.w	r3, r3, #31
   9bad6:	2201      	movs	r2, #1
   9bad8:	fa02 f303 	lsl.w	r3, r2, r3
   9badc:	683a      	ldr	r2, [r7, #0]
   9bade:	4619      	mov	r1, r3
   9bae0:	68f8      	ldr	r0, [r7, #12]
   9bae2:	4b1b      	ldr	r3, [pc, #108]	; (9bb50 <pio_configure_pin+0x134>)
   9bae4:	4798      	blx	r3
		break;
   9bae6:	e029      	b.n	9bb3c <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9bae8:	687b      	ldr	r3, [r7, #4]
   9baea:	f003 031f 	and.w	r3, r3, #31
   9baee:	2201      	movs	r2, #1
   9baf0:	fa02 f303 	lsl.w	r3, r2, r3
   9baf4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9baf6:	683b      	ldr	r3, [r7, #0]
   9baf8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9bafc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9bb00:	bf0c      	ite	eq
   9bb02:	2301      	moveq	r3, #1
   9bb04:	2300      	movne	r3, #0
   9bb06:	b2db      	uxtb	r3, r3
   9bb08:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9bb0a:	683b      	ldr	r3, [r7, #0]
   9bb0c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9bb10:	2b00      	cmp	r3, #0
   9bb12:	bf14      	ite	ne
   9bb14:	2301      	movne	r3, #1
   9bb16:	2300      	moveq	r3, #0
   9bb18:	b2db      	uxtb	r3, r3
   9bb1a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9bb1c:	683b      	ldr	r3, [r7, #0]
   9bb1e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9bb22:	2b00      	cmp	r3, #0
   9bb24:	bf14      	ite	ne
   9bb26:	2301      	movne	r3, #1
   9bb28:	2300      	moveq	r3, #0
   9bb2a:	b2db      	uxtb	r3, r3
   9bb2c:	9300      	str	r3, [sp, #0]
   9bb2e:	4603      	mov	r3, r0
   9bb30:	68f8      	ldr	r0, [r7, #12]
   9bb32:	4c08      	ldr	r4, [pc, #32]	; (9bb54 <pio_configure_pin+0x138>)
   9bb34:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9bb36:	e001      	b.n	9bb3c <pio_configure_pin+0x120>

	default:
		return 0;
   9bb38:	2300      	movs	r3, #0
   9bb3a:	e000      	b.n	9bb3e <pio_configure_pin+0x122>
	}

	return 1;
   9bb3c:	2301      	movs	r3, #1
}
   9bb3e:	4618      	mov	r0, r3
   9bb40:	3714      	adds	r7, #20
   9bb42:	46bd      	mov	sp, r7
   9bb44:	bd90      	pop	{r4, r7, pc}
   9bb46:	bf00      	nop
   9bb48:	0009b86d 	.word	0x0009b86d
   9bb4c:	0009b841 	.word	0x0009b841
   9bb50:	0009b8ed 	.word	0x0009b8ed
   9bb54:	0009b96d 	.word	0x0009b96d

0009bb58 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   9bb58:	b590      	push	{r4, r7, lr}
   9bb5a:	b087      	sub	sp, #28
   9bb5c:	af02      	add	r7, sp, #8
   9bb5e:	60f8      	str	r0, [r7, #12]
   9bb60:	60b9      	str	r1, [r7, #8]
   9bb62:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9bb64:	687b      	ldr	r3, [r7, #4]
   9bb66:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9bb6a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9bb6e:	d026      	beq.n	9bbbe <pio_configure_pin_group+0x66>
   9bb70:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9bb74:	d806      	bhi.n	9bb84 <pio_configure_pin_group+0x2c>
   9bb76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9bb7a:	d00a      	beq.n	9bb92 <pio_configure_pin_group+0x3a>
   9bb7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9bb80:	d00e      	beq.n	9bba0 <pio_configure_pin_group+0x48>
   9bb82:	e044      	b.n	9bc0e <pio_configure_pin_group+0xb6>
   9bb84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9bb88:	d01f      	beq.n	9bbca <pio_configure_pin_group+0x72>
   9bb8a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9bb8e:	d01c      	beq.n	9bbca <pio_configure_pin_group+0x72>
   9bb90:	e03d      	b.n	9bc0e <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   9bb92:	68ba      	ldr	r2, [r7, #8]
   9bb94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9bb98:	68f8      	ldr	r0, [r7, #12]
   9bb9a:	4b20      	ldr	r3, [pc, #128]	; (9bc1c <pio_configure_pin_group+0xc4>)
   9bb9c:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   9bb9e:	e038      	b.n	9bc12 <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   9bba0:	68ba      	ldr	r2, [r7, #8]
   9bba2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9bba6:	68f8      	ldr	r0, [r7, #12]
   9bba8:	4b1c      	ldr	r3, [pc, #112]	; (9bc1c <pio_configure_pin_group+0xc4>)
   9bbaa:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   9bbac:	687b      	ldr	r3, [r7, #4]
   9bbae:	f003 0301 	and.w	r3, r3, #1
   9bbb2:	461a      	mov	r2, r3
   9bbb4:	68b9      	ldr	r1, [r7, #8]
   9bbb6:	68f8      	ldr	r0, [r7, #12]
   9bbb8:	4b19      	ldr	r3, [pc, #100]	; (9bc20 <pio_configure_pin_group+0xc8>)
   9bbba:	4798      	blx	r3
		break;
   9bbbc:	e029      	b.n	9bc12 <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   9bbbe:	687a      	ldr	r2, [r7, #4]
   9bbc0:	68b9      	ldr	r1, [r7, #8]
   9bbc2:	68f8      	ldr	r0, [r7, #12]
   9bbc4:	4b17      	ldr	r3, [pc, #92]	; (9bc24 <pio_configure_pin_group+0xcc>)
   9bbc6:	4798      	blx	r3
		break;
   9bbc8:	e023      	b.n	9bc12 <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9bbca:	687b      	ldr	r3, [r7, #4]
   9bbcc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9bbd0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9bbd4:	bf0c      	ite	eq
   9bbd6:	2301      	moveq	r3, #1
   9bbd8:	2300      	movne	r3, #0
   9bbda:	b2db      	uxtb	r3, r3
   9bbdc:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9bbde:	687b      	ldr	r3, [r7, #4]
   9bbe0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9bbe4:	2b00      	cmp	r3, #0
   9bbe6:	bf14      	ite	ne
   9bbe8:	2301      	movne	r3, #1
   9bbea:	2300      	moveq	r3, #0
   9bbec:	b2db      	uxtb	r3, r3
   9bbee:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9bbf0:	687b      	ldr	r3, [r7, #4]
   9bbf2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9bbf6:	2b00      	cmp	r3, #0
   9bbf8:	bf14      	ite	ne
   9bbfa:	2301      	movne	r3, #1
   9bbfc:	2300      	moveq	r3, #0
   9bbfe:	b2db      	uxtb	r3, r3
   9bc00:	9300      	str	r3, [sp, #0]
   9bc02:	460b      	mov	r3, r1
   9bc04:	68b9      	ldr	r1, [r7, #8]
   9bc06:	68f8      	ldr	r0, [r7, #12]
   9bc08:	4c07      	ldr	r4, [pc, #28]	; (9bc28 <pio_configure_pin_group+0xd0>)
   9bc0a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9bc0c:	e001      	b.n	9bc12 <pio_configure_pin_group+0xba>

	default:
		return 0;
   9bc0e:	2300      	movs	r3, #0
   9bc10:	e000      	b.n	9bc14 <pio_configure_pin_group+0xbc>
	}

	return 1;
   9bc12:	2301      	movs	r3, #1
}
   9bc14:	4618      	mov	r0, r3
   9bc16:	3714      	adds	r7, #20
   9bc18:	46bd      	mov	sp, r7
   9bc1a:	bd90      	pop	{r4, r7, pc}
   9bc1c:	0009b86d 	.word	0x0009b86d
   9bc20:	0009b841 	.word	0x0009b841
   9bc24:	0009b8ed 	.word	0x0009b8ed
   9bc28:	0009b96d 	.word	0x0009b96d

0009bc2c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   9bc2c:	b580      	push	{r7, lr}
   9bc2e:	b084      	sub	sp, #16
   9bc30:	af00      	add	r7, sp, #0
   9bc32:	6078      	str	r0, [r7, #4]
   9bc34:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   9bc36:	6878      	ldr	r0, [r7, #4]
   9bc38:	4b24      	ldr	r3, [pc, #144]	; (9bccc <pio_handler_process+0xa0>)
   9bc3a:	4798      	blx	r3
   9bc3c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   9bc3e:	6878      	ldr	r0, [r7, #4]
   9bc40:	4b23      	ldr	r3, [pc, #140]	; (9bcd0 <pio_handler_process+0xa4>)
   9bc42:	4798      	blx	r3
   9bc44:	4602      	mov	r2, r0
   9bc46:	68fb      	ldr	r3, [r7, #12]
   9bc48:	4013      	ands	r3, r2
   9bc4a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   9bc4c:	68fb      	ldr	r3, [r7, #12]
   9bc4e:	2b00      	cmp	r3, #0
   9bc50:	d037      	beq.n	9bcc2 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   9bc52:	2300      	movs	r3, #0
   9bc54:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   9bc56:	e031      	b.n	9bcbc <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   9bc58:	4a1e      	ldr	r2, [pc, #120]	; (9bcd4 <pio_handler_process+0xa8>)
   9bc5a:	68bb      	ldr	r3, [r7, #8]
   9bc5c:	011b      	lsls	r3, r3, #4
   9bc5e:	4413      	add	r3, r2
   9bc60:	681a      	ldr	r2, [r3, #0]
   9bc62:	683b      	ldr	r3, [r7, #0]
   9bc64:	429a      	cmp	r2, r3
   9bc66:	d126      	bne.n	9bcb6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9bc68:	4a1a      	ldr	r2, [pc, #104]	; (9bcd4 <pio_handler_process+0xa8>)
   9bc6a:	68bb      	ldr	r3, [r7, #8]
   9bc6c:	011b      	lsls	r3, r3, #4
   9bc6e:	4413      	add	r3, r2
   9bc70:	3304      	adds	r3, #4
   9bc72:	681a      	ldr	r2, [r3, #0]
   9bc74:	68fb      	ldr	r3, [r7, #12]
   9bc76:	4013      	ands	r3, r2
   9bc78:	2b00      	cmp	r3, #0
   9bc7a:	d01c      	beq.n	9bcb6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9bc7c:	4a15      	ldr	r2, [pc, #84]	; (9bcd4 <pio_handler_process+0xa8>)
   9bc7e:	68bb      	ldr	r3, [r7, #8]
   9bc80:	011b      	lsls	r3, r3, #4
   9bc82:	4413      	add	r3, r2
   9bc84:	330c      	adds	r3, #12
   9bc86:	681b      	ldr	r3, [r3, #0]
   9bc88:	4912      	ldr	r1, [pc, #72]	; (9bcd4 <pio_handler_process+0xa8>)
   9bc8a:	68ba      	ldr	r2, [r7, #8]
   9bc8c:	0112      	lsls	r2, r2, #4
   9bc8e:	440a      	add	r2, r1
   9bc90:	6810      	ldr	r0, [r2, #0]
   9bc92:	4910      	ldr	r1, [pc, #64]	; (9bcd4 <pio_handler_process+0xa8>)
   9bc94:	68ba      	ldr	r2, [r7, #8]
   9bc96:	0112      	lsls	r2, r2, #4
   9bc98:	440a      	add	r2, r1
   9bc9a:	3204      	adds	r2, #4
   9bc9c:	6812      	ldr	r2, [r2, #0]
   9bc9e:	4611      	mov	r1, r2
   9bca0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9bca2:	4a0c      	ldr	r2, [pc, #48]	; (9bcd4 <pio_handler_process+0xa8>)
   9bca4:	68bb      	ldr	r3, [r7, #8]
   9bca6:	011b      	lsls	r3, r3, #4
   9bca8:	4413      	add	r3, r2
   9bcaa:	3304      	adds	r3, #4
   9bcac:	681b      	ldr	r3, [r3, #0]
   9bcae:	43db      	mvns	r3, r3
   9bcb0:	68fa      	ldr	r2, [r7, #12]
   9bcb2:	4013      	ands	r3, r2
   9bcb4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   9bcb6:	68bb      	ldr	r3, [r7, #8]
   9bcb8:	3301      	adds	r3, #1
   9bcba:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   9bcbc:	68fb      	ldr	r3, [r7, #12]
   9bcbe:	2b00      	cmp	r3, #0
   9bcc0:	d1ca      	bne.n	9bc58 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9bcc2:	bf00      	nop
   9bcc4:	3710      	adds	r7, #16
   9bcc6:	46bd      	mov	sp, r7
   9bcc8:	bd80      	pop	{r7, pc}
   9bcca:	bf00      	nop
   9bccc:	0009b9ed 	.word	0x0009b9ed
   9bcd0:	0009ba05 	.word	0x0009ba05
   9bcd4:	20071a58 	.word	0x20071a58

0009bcd8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   9bcd8:	b580      	push	{r7, lr}
   9bcda:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   9bcdc:	210b      	movs	r1, #11
   9bcde:	4802      	ldr	r0, [pc, #8]	; (9bce8 <PIOA_Handler+0x10>)
   9bce0:	4b02      	ldr	r3, [pc, #8]	; (9bcec <PIOA_Handler+0x14>)
   9bce2:	4798      	blx	r3
}
   9bce4:	bf00      	nop
   9bce6:	bd80      	pop	{r7, pc}
   9bce8:	400e0e00 	.word	0x400e0e00
   9bcec:	0009bc2d 	.word	0x0009bc2d

0009bcf0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   9bcf0:	b580      	push	{r7, lr}
   9bcf2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9bcf4:	210c      	movs	r1, #12
   9bcf6:	4802      	ldr	r0, [pc, #8]	; (9bd00 <PIOB_Handler+0x10>)
   9bcf8:	4b02      	ldr	r3, [pc, #8]	; (9bd04 <PIOB_Handler+0x14>)
   9bcfa:	4798      	blx	r3
}
   9bcfc:	bf00      	nop
   9bcfe:	bd80      	pop	{r7, pc}
   9bd00:	400e1000 	.word	0x400e1000
   9bd04:	0009bc2d 	.word	0x0009bc2d

0009bd08 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   9bd08:	b580      	push	{r7, lr}
   9bd0a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   9bd0c:	210d      	movs	r1, #13
   9bd0e:	4802      	ldr	r0, [pc, #8]	; (9bd18 <PIOC_Handler+0x10>)
   9bd10:	4b02      	ldr	r3, [pc, #8]	; (9bd1c <PIOC_Handler+0x14>)
   9bd12:	4798      	blx	r3
}
   9bd14:	bf00      	nop
   9bd16:	bd80      	pop	{r7, pc}
   9bd18:	400e1200 	.word	0x400e1200
   9bd1c:	0009bc2d 	.word	0x0009bc2d

0009bd20 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   9bd20:	b580      	push	{r7, lr}
   9bd22:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   9bd24:	210e      	movs	r1, #14
   9bd26:	4802      	ldr	r0, [pc, #8]	; (9bd30 <PIOD_Handler+0x10>)
   9bd28:	4b02      	ldr	r3, [pc, #8]	; (9bd34 <PIOD_Handler+0x14>)
   9bd2a:	4798      	blx	r3
}
   9bd2c:	bf00      	nop
   9bd2e:	bd80      	pop	{r7, pc}
   9bd30:	400e1400 	.word	0x400e1400
   9bd34:	0009bc2d 	.word	0x0009bc2d

0009bd38 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   9bd38:	b480      	push	{r7}
   9bd3a:	b085      	sub	sp, #20
   9bd3c:	af00      	add	r7, sp, #0
   9bd3e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   9bd40:	491c      	ldr	r1, [pc, #112]	; (9bdb4 <pmc_switch_mck_to_pllack+0x7c>)
   9bd42:	4b1c      	ldr	r3, [pc, #112]	; (9bdb4 <pmc_switch_mck_to_pllack+0x7c>)
   9bd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9bd46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   9bd4a:	687b      	ldr	r3, [r7, #4]
   9bd4c:	4313      	orrs	r3, r2
   9bd4e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bd50:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9bd54:	60fb      	str	r3, [r7, #12]
   9bd56:	e007      	b.n	9bd68 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9bd58:	68fb      	ldr	r3, [r7, #12]
   9bd5a:	2b00      	cmp	r3, #0
   9bd5c:	d101      	bne.n	9bd62 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   9bd5e:	2301      	movs	r3, #1
   9bd60:	e023      	b.n	9bdaa <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9bd62:	68fb      	ldr	r3, [r7, #12]
   9bd64:	3b01      	subs	r3, #1
   9bd66:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bd68:	4b12      	ldr	r3, [pc, #72]	; (9bdb4 <pmc_switch_mck_to_pllack+0x7c>)
   9bd6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9bd6c:	f003 0308 	and.w	r3, r3, #8
   9bd70:	2b00      	cmp	r3, #0
   9bd72:	d0f1      	beq.n	9bd58 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9bd74:	4a0f      	ldr	r2, [pc, #60]	; (9bdb4 <pmc_switch_mck_to_pllack+0x7c>)
   9bd76:	4b0f      	ldr	r3, [pc, #60]	; (9bdb4 <pmc_switch_mck_to_pllack+0x7c>)
   9bd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9bd7a:	f023 0303 	bic.w	r3, r3, #3
   9bd7e:	f043 0302 	orr.w	r3, r3, #2
   9bd82:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bd84:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9bd88:	60fb      	str	r3, [r7, #12]
   9bd8a:	e007      	b.n	9bd9c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9bd8c:	68fb      	ldr	r3, [r7, #12]
   9bd8e:	2b00      	cmp	r3, #0
   9bd90:	d101      	bne.n	9bd96 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9bd92:	2301      	movs	r3, #1
   9bd94:	e009      	b.n	9bdaa <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9bd96:	68fb      	ldr	r3, [r7, #12]
   9bd98:	3b01      	subs	r3, #1
   9bd9a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9bd9c:	4b05      	ldr	r3, [pc, #20]	; (9bdb4 <pmc_switch_mck_to_pllack+0x7c>)
   9bd9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9bda0:	f003 0308 	and.w	r3, r3, #8
   9bda4:	2b00      	cmp	r3, #0
   9bda6:	d0f1      	beq.n	9bd8c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   9bda8:	2300      	movs	r3, #0
}
   9bdaa:	4618      	mov	r0, r3
   9bdac:	3714      	adds	r7, #20
   9bdae:	46bd      	mov	sp, r7
   9bdb0:	bc80      	pop	{r7}
   9bdb2:	4770      	bx	lr
   9bdb4:	400e0600 	.word	0x400e0600

0009bdb8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   9bdb8:	b480      	push	{r7}
   9bdba:	b083      	sub	sp, #12
   9bdbc:	af00      	add	r7, sp, #0
   9bdbe:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   9bdc0:	687b      	ldr	r3, [r7, #4]
   9bdc2:	2b01      	cmp	r3, #1
   9bdc4:	d107      	bne.n	9bdd6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   9bdc6:	4a08      	ldr	r2, [pc, #32]	; (9bde8 <pmc_switch_sclk_to_32kxtal+0x30>)
   9bdc8:	4b07      	ldr	r3, [pc, #28]	; (9bde8 <pmc_switch_sclk_to_32kxtal+0x30>)
   9bdca:	689b      	ldr	r3, [r3, #8]
   9bdcc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   9bdd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9bdd4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   9bdd6:	4b04      	ldr	r3, [pc, #16]	; (9bde8 <pmc_switch_sclk_to_32kxtal+0x30>)
   9bdd8:	4a04      	ldr	r2, [pc, #16]	; (9bdec <pmc_switch_sclk_to_32kxtal+0x34>)
   9bdda:	601a      	str	r2, [r3, #0]
}
   9bddc:	bf00      	nop
   9bdde:	370c      	adds	r7, #12
   9bde0:	46bd      	mov	sp, r7
   9bde2:	bc80      	pop	{r7}
   9bde4:	4770      	bx	lr
   9bde6:	bf00      	nop
   9bde8:	400e1a10 	.word	0x400e1a10
   9bdec:	a5000008 	.word	0xa5000008

0009bdf0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   9bdf0:	b480      	push	{r7}
   9bdf2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   9bdf4:	4b09      	ldr	r3, [pc, #36]	; (9be1c <pmc_osc_is_ready_32kxtal+0x2c>)
   9bdf6:	695b      	ldr	r3, [r3, #20]
   9bdf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   9bdfc:	2b00      	cmp	r3, #0
   9bdfe:	d007      	beq.n	9be10 <pmc_osc_is_ready_32kxtal+0x20>
   9be00:	4b07      	ldr	r3, [pc, #28]	; (9be20 <pmc_osc_is_ready_32kxtal+0x30>)
   9be02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9be04:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9be08:	2b00      	cmp	r3, #0
   9be0a:	d001      	beq.n	9be10 <pmc_osc_is_ready_32kxtal+0x20>
   9be0c:	2301      	movs	r3, #1
   9be0e:	e000      	b.n	9be12 <pmc_osc_is_ready_32kxtal+0x22>
   9be10:	2300      	movs	r3, #0
}
   9be12:	4618      	mov	r0, r3
   9be14:	46bd      	mov	sp, r7
   9be16:	bc80      	pop	{r7}
   9be18:	4770      	bx	lr
   9be1a:	bf00      	nop
   9be1c:	400e1a10 	.word	0x400e1a10
   9be20:	400e0600 	.word	0x400e0600

0009be24 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   9be24:	b480      	push	{r7}
   9be26:	b085      	sub	sp, #20
   9be28:	af00      	add	r7, sp, #0
   9be2a:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   9be2c:	2300      	movs	r3, #0
   9be2e:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   9be30:	4b21      	ldr	r3, [pc, #132]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be32:	6a1b      	ldr	r3, [r3, #32]
   9be34:	f003 0301 	and.w	r3, r3, #1
   9be38:	2b00      	cmp	r3, #0
   9be3a:	d00e      	beq.n	9be5a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9be3c:	491e      	ldr	r1, [pc, #120]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be3e:	4b1e      	ldr	r3, [pc, #120]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be40:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   9be42:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9be46:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   9be4a:	687a      	ldr	r2, [r7, #4]
   9be4c:	4313      	orrs	r3, r2
   9be4e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9be52:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9be56:	620b      	str	r3, [r1, #32]
   9be58:	e00b      	b.n	9be72 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   9be5a:	2301      	movs	r3, #1
   9be5c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9be5e:	4916      	ldr	r1, [pc, #88]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be60:	4b15      	ldr	r3, [pc, #84]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be62:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   9be64:	4b15      	ldr	r3, [pc, #84]	; (9bebc <pmc_switch_mainck_to_fastrc+0x98>)
   9be66:	4013      	ands	r3, r2
   9be68:	687a      	ldr	r2, [r7, #4]
   9be6a:	431a      	orrs	r2, r3
   9be6c:	4b14      	ldr	r3, [pc, #80]	; (9bec0 <pmc_switch_mainck_to_fastrc+0x9c>)
   9be6e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9be70:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9be72:	bf00      	nop
   9be74:	4b10      	ldr	r3, [pc, #64]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9be78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   9be7c:	2b00      	cmp	r3, #0
   9be7e:	d0f9      	beq.n	9be74 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   9be80:	4a0d      	ldr	r2, [pc, #52]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be82:	4b0d      	ldr	r3, [pc, #52]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be84:	6a1b      	ldr	r3, [r3, #32]
   9be86:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   9be8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   9be8e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9be92:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   9be94:	68fb      	ldr	r3, [r7, #12]
   9be96:	2b00      	cmp	r3, #0
   9be98:	d009      	beq.n	9beae <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9be9a:	4a07      	ldr	r2, [pc, #28]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be9c:	4b06      	ldr	r3, [pc, #24]	; (9beb8 <pmc_switch_mainck_to_fastrc+0x94>)
   9be9e:	6a1b      	ldr	r3, [r3, #32]
   9bea0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9bea4:	f023 0301 	bic.w	r3, r3, #1
   9bea8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9beac:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   9beae:	bf00      	nop
   9beb0:	3714      	adds	r7, #20
   9beb2:	46bd      	mov	sp, r7
   9beb4:	bc80      	pop	{r7}
   9beb6:	4770      	bx	lr
   9beb8:	400e0600 	.word	0x400e0600
   9bebc:	ffc80086 	.word	0xffc80086
   9bec0:	0037ff09 	.word	0x0037ff09

0009bec4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   9bec4:	b480      	push	{r7}
   9bec6:	b083      	sub	sp, #12
   9bec8:	af00      	add	r7, sp, #0
   9beca:	6078      	str	r0, [r7, #4]
   9becc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   9bece:	687b      	ldr	r3, [r7, #4]
   9bed0:	2b00      	cmp	r3, #0
   9bed2:	d008      	beq.n	9bee6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9bed4:	4916      	ldr	r1, [pc, #88]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9bed6:	4b16      	ldr	r3, [pc, #88]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9bed8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   9beda:	4a16      	ldr	r2, [pc, #88]	; (9bf34 <pmc_switch_mainck_to_xtal+0x70>)
   9bedc:	401a      	ands	r2, r3
   9bede:	4b16      	ldr	r3, [pc, #88]	; (9bf38 <pmc_switch_mainck_to_xtal+0x74>)
   9bee0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9bee2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   9bee4:	e01e      	b.n	9bf24 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9bee6:	4912      	ldr	r1, [pc, #72]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9bee8:	4b11      	ldr	r3, [pc, #68]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9beea:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9beec:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9bef0:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9bef4:	683a      	ldr	r2, [r7, #0]
   9bef6:	0212      	lsls	r2, r2, #8
   9bef8:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9befa:	4313      	orrs	r3, r2
   9befc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9bf00:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9bf04:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9bf06:	bf00      	nop
   9bf08:	4b09      	ldr	r3, [pc, #36]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9bf0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9bf0c:	f003 0301 	and.w	r3, r3, #1
   9bf10:	2b00      	cmp	r3, #0
   9bf12:	d0f9      	beq.n	9bf08 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   9bf14:	4a06      	ldr	r2, [pc, #24]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9bf16:	4b06      	ldr	r3, [pc, #24]	; (9bf30 <pmc_switch_mainck_to_xtal+0x6c>)
   9bf18:	6a1b      	ldr	r3, [r3, #32]
   9bf1a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   9bf1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   9bf22:	6213      	str	r3, [r2, #32]
	}
}
   9bf24:	bf00      	nop
   9bf26:	370c      	adds	r7, #12
   9bf28:	46bd      	mov	sp, r7
   9bf2a:	bc80      	pop	{r7}
   9bf2c:	4770      	bx	lr
   9bf2e:	bf00      	nop
   9bf30:	400e0600 	.word	0x400e0600
   9bf34:	fec8fffc 	.word	0xfec8fffc
   9bf38:	01370002 	.word	0x01370002

0009bf3c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   9bf3c:	b480      	push	{r7}
   9bf3e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   9bf40:	4b03      	ldr	r3, [pc, #12]	; (9bf50 <pmc_osc_is_ready_mainck+0x14>)
   9bf42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9bf44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   9bf48:	4618      	mov	r0, r3
   9bf4a:	46bd      	mov	sp, r7
   9bf4c:	bc80      	pop	{r7}
   9bf4e:	4770      	bx	lr
   9bf50:	400e0600 	.word	0x400e0600

0009bf54 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   9bf54:	b480      	push	{r7}
   9bf56:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   9bf58:	4b03      	ldr	r3, [pc, #12]	; (9bf68 <pmc_disable_pllack+0x14>)
   9bf5a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9bf5e:	629a      	str	r2, [r3, #40]	; 0x28
}
   9bf60:	bf00      	nop
   9bf62:	46bd      	mov	sp, r7
   9bf64:	bc80      	pop	{r7}
   9bf66:	4770      	bx	lr
   9bf68:	400e0600 	.word	0x400e0600

0009bf6c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   9bf6c:	b480      	push	{r7}
   9bf6e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   9bf70:	4b03      	ldr	r3, [pc, #12]	; (9bf80 <pmc_is_locked_pllack+0x14>)
   9bf72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9bf74:	f003 0302 	and.w	r3, r3, #2
}
   9bf78:	4618      	mov	r0, r3
   9bf7a:	46bd      	mov	sp, r7
   9bf7c:	bc80      	pop	{r7}
   9bf7e:	4770      	bx	lr
   9bf80:	400e0600 	.word	0x400e0600

0009bf84 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   9bf84:	b480      	push	{r7}
   9bf86:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   9bf88:	4b03      	ldr	r3, [pc, #12]	; (9bf98 <pmc_is_locked_upll+0x14>)
   9bf8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9bf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   9bf90:	4618      	mov	r0, r3
   9bf92:	46bd      	mov	sp, r7
   9bf94:	bc80      	pop	{r7}
   9bf96:	4770      	bx	lr
   9bf98:	400e0600 	.word	0x400e0600

0009bf9c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   9bf9c:	b480      	push	{r7}
   9bf9e:	b083      	sub	sp, #12
   9bfa0:	af00      	add	r7, sp, #0
   9bfa2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   9bfa4:	687b      	ldr	r3, [r7, #4]
   9bfa6:	2b2c      	cmp	r3, #44	; 0x2c
   9bfa8:	d901      	bls.n	9bfae <pmc_enable_periph_clk+0x12>
		return 1;
   9bfaa:	2301      	movs	r3, #1
   9bfac:	e02f      	b.n	9c00e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   9bfae:	687b      	ldr	r3, [r7, #4]
   9bfb0:	2b1f      	cmp	r3, #31
   9bfb2:	d813      	bhi.n	9bfdc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   9bfb4:	4b18      	ldr	r3, [pc, #96]	; (9c018 <pmc_enable_periph_clk+0x7c>)
   9bfb6:	699a      	ldr	r2, [r3, #24]
   9bfb8:	2101      	movs	r1, #1
   9bfba:	687b      	ldr	r3, [r7, #4]
   9bfbc:	fa01 f303 	lsl.w	r3, r1, r3
   9bfc0:	401a      	ands	r2, r3
   9bfc2:	2101      	movs	r1, #1
   9bfc4:	687b      	ldr	r3, [r7, #4]
   9bfc6:	fa01 f303 	lsl.w	r3, r1, r3
   9bfca:	429a      	cmp	r2, r3
   9bfcc:	d01e      	beq.n	9c00c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   9bfce:	4a12      	ldr	r2, [pc, #72]	; (9c018 <pmc_enable_periph_clk+0x7c>)
   9bfd0:	2101      	movs	r1, #1
   9bfd2:	687b      	ldr	r3, [r7, #4]
   9bfd4:	fa01 f303 	lsl.w	r3, r1, r3
   9bfd8:	6113      	str	r3, [r2, #16]
   9bfda:	e017      	b.n	9c00c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   9bfdc:	687b      	ldr	r3, [r7, #4]
   9bfde:	3b20      	subs	r3, #32
   9bfe0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   9bfe2:	4b0d      	ldr	r3, [pc, #52]	; (9c018 <pmc_enable_periph_clk+0x7c>)
   9bfe4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   9bfe8:	2101      	movs	r1, #1
   9bfea:	687b      	ldr	r3, [r7, #4]
   9bfec:	fa01 f303 	lsl.w	r3, r1, r3
   9bff0:	401a      	ands	r2, r3
   9bff2:	2101      	movs	r1, #1
   9bff4:	687b      	ldr	r3, [r7, #4]
   9bff6:	fa01 f303 	lsl.w	r3, r1, r3
   9bffa:	429a      	cmp	r2, r3
   9bffc:	d006      	beq.n	9c00c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   9bffe:	4a06      	ldr	r2, [pc, #24]	; (9c018 <pmc_enable_periph_clk+0x7c>)
   9c000:	2101      	movs	r1, #1
   9c002:	687b      	ldr	r3, [r7, #4]
   9c004:	fa01 f303 	lsl.w	r3, r1, r3
   9c008:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   9c00c:	2300      	movs	r3, #0
}
   9c00e:	4618      	mov	r0, r3
   9c010:	370c      	adds	r7, #12
   9c012:	46bd      	mov	sp, r7
   9c014:	bc80      	pop	{r7}
   9c016:	4770      	bx	lr
   9c018:	400e0600 	.word	0x400e0600

0009c01c <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   9c01c:	b480      	push	{r7}
   9c01e:	b083      	sub	sp, #12
   9c020:	af00      	add	r7, sp, #0
   9c022:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   9c024:	687b      	ldr	r3, [r7, #4]
   9c026:	2b00      	cmp	r3, #0
   9c028:	d004      	beq.n	9c034 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   9c02a:	4b07      	ldr	r3, [pc, #28]	; (9c048 <pmc_set_writeprotect+0x2c>)
   9c02c:	4a07      	ldr	r2, [pc, #28]	; (9c04c <pmc_set_writeprotect+0x30>)
   9c02e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   9c032:	e003      	b.n	9c03c <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   9c034:	4b04      	ldr	r3, [pc, #16]	; (9c048 <pmc_set_writeprotect+0x2c>)
   9c036:	4a06      	ldr	r2, [pc, #24]	; (9c050 <pmc_set_writeprotect+0x34>)
   9c038:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   9c03c:	bf00      	nop
   9c03e:	370c      	adds	r7, #12
   9c040:	46bd      	mov	sp, r7
   9c042:	bc80      	pop	{r7}
   9c044:	4770      	bx	lr
   9c046:	bf00      	nop
   9c048:	400e0600 	.word	0x400e0600
   9c04c:	504d4301 	.word	0x504d4301
   9c050:	504d4300 	.word	0x504d4300

0009c054 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   9c054:	b480      	push	{r7}
   9c056:	b083      	sub	sp, #12
   9c058:	af00      	add	r7, sp, #0
   9c05a:	6078      	str	r0, [r7, #4]
   9c05c:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   9c05e:	687a      	ldr	r2, [r7, #4]
   9c060:	683b      	ldr	r3, [r7, #0]
   9c062:	019b      	lsls	r3, r3, #6
   9c064:	4413      	add	r3, r2
   9c066:	2205      	movs	r2, #5
   9c068:	601a      	str	r2, [r3, #0]
}
   9c06a:	bf00      	nop
   9c06c:	370c      	adds	r7, #12
   9c06e:	46bd      	mov	sp, r7
   9c070:	bc80      	pop	{r7}
   9c072:	4770      	bx	lr

0009c074 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   9c074:	b480      	push	{r7}
   9c076:	b085      	sub	sp, #20
   9c078:	af00      	add	r7, sp, #0
   9c07a:	60f8      	str	r0, [r7, #12]
   9c07c:	60b9      	str	r1, [r7, #8]
   9c07e:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   9c080:	68fa      	ldr	r2, [r7, #12]
   9c082:	68bb      	ldr	r3, [r7, #8]
   9c084:	019b      	lsls	r3, r3, #6
   9c086:	4413      	add	r3, r2
   9c088:	331c      	adds	r3, #28
   9c08a:	687a      	ldr	r2, [r7, #4]
   9c08c:	601a      	str	r2, [r3, #0]
}
   9c08e:	bf00      	nop
   9c090:	3714      	adds	r7, #20
   9c092:	46bd      	mov	sp, r7
   9c094:	bc80      	pop	{r7}
   9c096:	4770      	bx	lr

0009c098 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   9c098:	b480      	push	{r7}
   9c09a:	b087      	sub	sp, #28
   9c09c:	af00      	add	r7, sp, #0
   9c09e:	60f8      	str	r0, [r7, #12]
   9c0a0:	60b9      	str	r1, [r7, #8]
   9c0a2:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9c0a4:	68fa      	ldr	r2, [r7, #12]
   9c0a6:	68bb      	ldr	r3, [r7, #8]
   9c0a8:	019b      	lsls	r3, r3, #6
   9c0aa:	4413      	add	r3, r2
   9c0ac:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   9c0ae:	697b      	ldr	r3, [r7, #20]
   9c0b0:	687a      	ldr	r2, [r7, #4]
   9c0b2:	625a      	str	r2, [r3, #36]	; 0x24
}
   9c0b4:	bf00      	nop
   9c0b6:	371c      	adds	r7, #28
   9c0b8:	46bd      	mov	sp, r7
   9c0ba:	bc80      	pop	{r7}
   9c0bc:	4770      	bx	lr
   9c0be:	bf00      	nop

0009c0c0 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   9c0c0:	b480      	push	{r7}
   9c0c2:	b085      	sub	sp, #20
   9c0c4:	af00      	add	r7, sp, #0
   9c0c6:	6078      	str	r0, [r7, #4]
   9c0c8:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9c0ca:	687a      	ldr	r2, [r7, #4]
   9c0cc:	683b      	ldr	r3, [r7, #0]
   9c0ce:	019b      	lsls	r3, r3, #6
   9c0d0:	4413      	add	r3, r2
   9c0d2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   9c0d4:	68fb      	ldr	r3, [r7, #12]
   9c0d6:	6a1b      	ldr	r3, [r3, #32]
}
   9c0d8:	4618      	mov	r0, r3
   9c0da:	3714      	adds	r7, #20
   9c0dc:	46bd      	mov	sp, r7
   9c0de:	bc80      	pop	{r7}
   9c0e0:	4770      	bx	lr
   9c0e2:	bf00      	nop

0009c0e4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   9c0e4:	b480      	push	{r7}
   9c0e6:	b085      	sub	sp, #20
   9c0e8:	af00      	add	r7, sp, #0
   9c0ea:	6078      	str	r0, [r7, #4]
   9c0ec:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   9c0ee:	2300      	movs	r3, #0
   9c0f0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   9c0f2:	687b      	ldr	r3, [r7, #4]
   9c0f4:	22ac      	movs	r2, #172	; 0xac
   9c0f6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   9c0f8:	683b      	ldr	r3, [r7, #0]
   9c0fa:	681a      	ldr	r2, [r3, #0]
   9c0fc:	683b      	ldr	r3, [r7, #0]
   9c0fe:	685b      	ldr	r3, [r3, #4]
   9c100:	fbb2 f3f3 	udiv	r3, r2, r3
   9c104:	091b      	lsrs	r3, r3, #4
   9c106:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   9c108:	68fb      	ldr	r3, [r7, #12]
   9c10a:	2b00      	cmp	r3, #0
   9c10c:	d003      	beq.n	9c116 <uart_init+0x32>
   9c10e:	68fb      	ldr	r3, [r7, #12]
   9c110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9c114:	d301      	bcc.n	9c11a <uart_init+0x36>
		return 1;
   9c116:	2301      	movs	r3, #1
   9c118:	e00f      	b.n	9c13a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   9c11a:	687b      	ldr	r3, [r7, #4]
   9c11c:	68fa      	ldr	r2, [r7, #12]
   9c11e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   9c120:	683b      	ldr	r3, [r7, #0]
   9c122:	689a      	ldr	r2, [r3, #8]
   9c124:	687b      	ldr	r3, [r7, #4]
   9c126:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   9c128:	687b      	ldr	r3, [r7, #4]
   9c12a:	f240 2202 	movw	r2, #514	; 0x202
   9c12e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9c132:	687b      	ldr	r3, [r7, #4]
   9c134:	2250      	movs	r2, #80	; 0x50
   9c136:	601a      	str	r2, [r3, #0]

	return 0;
   9c138:	2300      	movs	r3, #0
}
   9c13a:	4618      	mov	r0, r3
   9c13c:	3714      	adds	r7, #20
   9c13e:	46bd      	mov	sp, r7
   9c140:	bc80      	pop	{r7}
   9c142:	4770      	bx	lr

0009c144 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   9c144:	b480      	push	{r7}
   9c146:	b083      	sub	sp, #12
   9c148:	af00      	add	r7, sp, #0
   9c14a:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   9c14c:	687b      	ldr	r3, [r7, #4]
   9c14e:	2240      	movs	r2, #64	; 0x40
   9c150:	601a      	str	r2, [r3, #0]
}
   9c152:	bf00      	nop
   9c154:	370c      	adds	r7, #12
   9c156:	46bd      	mov	sp, r7
   9c158:	bc80      	pop	{r7}
   9c15a:	4770      	bx	lr

0009c15c <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   9c15c:	b480      	push	{r7}
   9c15e:	b083      	sub	sp, #12
   9c160:	af00      	add	r7, sp, #0
   9c162:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   9c164:	687b      	ldr	r3, [r7, #4]
   9c166:	2210      	movs	r2, #16
   9c168:	601a      	str	r2, [r3, #0]
}
   9c16a:	bf00      	nop
   9c16c:	370c      	adds	r7, #12
   9c16e:	46bd      	mov	sp, r7
   9c170:	bc80      	pop	{r7}
   9c172:	4770      	bx	lr

0009c174 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   9c174:	b480      	push	{r7}
   9c176:	b083      	sub	sp, #12
   9c178:	af00      	add	r7, sp, #0
   9c17a:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9c17c:	687b      	ldr	r3, [r7, #4]
   9c17e:	2250      	movs	r2, #80	; 0x50
   9c180:	601a      	str	r2, [r3, #0]
}
   9c182:	bf00      	nop
   9c184:	370c      	adds	r7, #12
   9c186:	46bd      	mov	sp, r7
   9c188:	bc80      	pop	{r7}
   9c18a:	4770      	bx	lr

0009c18c <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   9c18c:	b480      	push	{r7}
   9c18e:	b083      	sub	sp, #12
   9c190:	af00      	add	r7, sp, #0
   9c192:	6078      	str	r0, [r7, #4]
   9c194:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   9c196:	687b      	ldr	r3, [r7, #4]
   9c198:	683a      	ldr	r2, [r7, #0]
   9c19a:	609a      	str	r2, [r3, #8]
}
   9c19c:	bf00      	nop
   9c19e:	370c      	adds	r7, #12
   9c1a0:	46bd      	mov	sp, r7
   9c1a2:	bc80      	pop	{r7}
   9c1a4:	4770      	bx	lr
   9c1a6:	bf00      	nop

0009c1a8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   9c1a8:	b480      	push	{r7}
   9c1aa:	b083      	sub	sp, #12
   9c1ac:	af00      	add	r7, sp, #0
   9c1ae:	6078      	str	r0, [r7, #4]
   9c1b0:	460b      	mov	r3, r1
   9c1b2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   9c1b4:	687b      	ldr	r3, [r7, #4]
   9c1b6:	695b      	ldr	r3, [r3, #20]
   9c1b8:	f003 0302 	and.w	r3, r3, #2
   9c1bc:	2b00      	cmp	r3, #0
   9c1be:	d101      	bne.n	9c1c4 <uart_write+0x1c>
		return 1;
   9c1c0:	2301      	movs	r3, #1
   9c1c2:	e00c      	b.n	9c1de <uart_write+0x36>
if(cl_console_sync != true)
   9c1c4:	4b08      	ldr	r3, [pc, #32]	; (9c1e8 <uart_write+0x40>)
   9c1c6:	781b      	ldrb	r3, [r3, #0]
   9c1c8:	f083 0301 	eor.w	r3, r3, #1
   9c1cc:	b2db      	uxtb	r3, r3
   9c1ce:	2b00      	cmp	r3, #0
   9c1d0:	d001      	beq.n	9c1d6 <uart_write+0x2e>
	return 1;
   9c1d2:	2301      	movs	r3, #1
   9c1d4:	e003      	b.n	9c1de <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   9c1d6:	78fa      	ldrb	r2, [r7, #3]
   9c1d8:	687b      	ldr	r3, [r7, #4]
   9c1da:	61da      	str	r2, [r3, #28]
	return 0;
   9c1dc:	2300      	movs	r3, #0
}
   9c1de:	4618      	mov	r0, r3
   9c1e0:	370c      	adds	r7, #12
   9c1e2:	46bd      	mov	sp, r7
   9c1e4:	bc80      	pop	{r7}
   9c1e6:	4770      	bx	lr
   9c1e8:	20071ad5 	.word	0x20071ad5

0009c1ec <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   9c1ec:	b480      	push	{r7}
   9c1ee:	b083      	sub	sp, #12
   9c1f0:	af00      	add	r7, sp, #0
   9c1f2:	6078      	str	r0, [r7, #4]
   9c1f4:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   9c1f6:	687b      	ldr	r3, [r7, #4]
   9c1f8:	695b      	ldr	r3, [r3, #20]
   9c1fa:	f003 0301 	and.w	r3, r3, #1
   9c1fe:	2b00      	cmp	r3, #0
   9c200:	d101      	bne.n	9c206 <uart_read+0x1a>
		return 1;
   9c202:	2301      	movs	r3, #1
   9c204:	e005      	b.n	9c212 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   9c206:	687b      	ldr	r3, [r7, #4]
   9c208:	699b      	ldr	r3, [r3, #24]
   9c20a:	b2da      	uxtb	r2, r3
   9c20c:	683b      	ldr	r3, [r7, #0]
   9c20e:	701a      	strb	r2, [r3, #0]
	return 0;
   9c210:	2300      	movs	r3, #0
}
   9c212:	4618      	mov	r0, r3
   9c214:	370c      	adds	r7, #12
   9c216:	46bd      	mov	sp, r7
   9c218:	bc80      	pop	{r7}
   9c21a:	4770      	bx	lr

0009c21c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   9c21c:	b480      	push	{r7}
   9c21e:	b089      	sub	sp, #36	; 0x24
   9c220:	af00      	add	r7, sp, #0
   9c222:	60f8      	str	r0, [r7, #12]
   9c224:	60b9      	str	r1, [r7, #8]
   9c226:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   9c228:	68bb      	ldr	r3, [r7, #8]
   9c22a:	011a      	lsls	r2, r3, #4
   9c22c:	687b      	ldr	r3, [r7, #4]
   9c22e:	429a      	cmp	r2, r3
   9c230:	d802      	bhi.n	9c238 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   9c232:	2310      	movs	r3, #16
   9c234:	61fb      	str	r3, [r7, #28]
   9c236:	e001      	b.n	9c23c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   9c238:	2308      	movs	r3, #8
   9c23a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   9c23c:	687b      	ldr	r3, [r7, #4]
   9c23e:	00da      	lsls	r2, r3, #3
   9c240:	69fb      	ldr	r3, [r7, #28]
   9c242:	68b9      	ldr	r1, [r7, #8]
   9c244:	fb01 f303 	mul.w	r3, r1, r3
   9c248:	085b      	lsrs	r3, r3, #1
   9c24a:	441a      	add	r2, r3
   9c24c:	69fb      	ldr	r3, [r7, #28]
   9c24e:	68b9      	ldr	r1, [r7, #8]
   9c250:	fb01 f303 	mul.w	r3, r1, r3
   9c254:	fbb2 f3f3 	udiv	r3, r2, r3
   9c258:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   9c25a:	69bb      	ldr	r3, [r7, #24]
   9c25c:	08db      	lsrs	r3, r3, #3
   9c25e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   9c260:	69bb      	ldr	r3, [r7, #24]
   9c262:	f003 0307 	and.w	r3, r3, #7
   9c266:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   9c268:	697b      	ldr	r3, [r7, #20]
   9c26a:	2b00      	cmp	r3, #0
   9c26c:	d003      	beq.n	9c276 <usart_set_async_baudrate+0x5a>
   9c26e:	697b      	ldr	r3, [r7, #20]
   9c270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9c274:	d301      	bcc.n	9c27a <usart_set_async_baudrate+0x5e>
		return 1;
   9c276:	2301      	movs	r3, #1
   9c278:	e00f      	b.n	9c29a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   9c27a:	69fb      	ldr	r3, [r7, #28]
   9c27c:	2b08      	cmp	r3, #8
   9c27e:	d105      	bne.n	9c28c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   9c280:	68fb      	ldr	r3, [r7, #12]
   9c282:	685b      	ldr	r3, [r3, #4]
   9c284:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   9c288:	68fb      	ldr	r3, [r7, #12]
   9c28a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   9c28c:	693b      	ldr	r3, [r7, #16]
   9c28e:	041a      	lsls	r2, r3, #16
   9c290:	697b      	ldr	r3, [r7, #20]
   9c292:	431a      	orrs	r2, r3
   9c294:	68fb      	ldr	r3, [r7, #12]
   9c296:	621a      	str	r2, [r3, #32]

	return 0;
   9c298:	2300      	movs	r3, #0
}
   9c29a:	4618      	mov	r0, r3
   9c29c:	3724      	adds	r7, #36	; 0x24
   9c29e:	46bd      	mov	sp, r7
   9c2a0:	bc80      	pop	{r7}
   9c2a2:	4770      	bx	lr

0009c2a4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   9c2a4:	b580      	push	{r7, lr}
   9c2a6:	b082      	sub	sp, #8
   9c2a8:	af00      	add	r7, sp, #0
   9c2aa:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   9c2ac:	6878      	ldr	r0, [r7, #4]
   9c2ae:	4b0d      	ldr	r3, [pc, #52]	; (9c2e4 <usart_reset+0x40>)
   9c2b0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   9c2b2:	687b      	ldr	r3, [r7, #4]
   9c2b4:	2200      	movs	r2, #0
   9c2b6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   9c2b8:	687b      	ldr	r3, [r7, #4]
   9c2ba:	2200      	movs	r2, #0
   9c2bc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   9c2be:	687b      	ldr	r3, [r7, #4]
   9c2c0:	2200      	movs	r2, #0
   9c2c2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   9c2c4:	6878      	ldr	r0, [r7, #4]
   9c2c6:	4b08      	ldr	r3, [pc, #32]	; (9c2e8 <usart_reset+0x44>)
   9c2c8:	4798      	blx	r3
	usart_reset_rx(p_usart);
   9c2ca:	6878      	ldr	r0, [r7, #4]
   9c2cc:	4b07      	ldr	r3, [pc, #28]	; (9c2ec <usart_reset+0x48>)
   9c2ce:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   9c2d0:	6878      	ldr	r0, [r7, #4]
   9c2d2:	4b07      	ldr	r3, [pc, #28]	; (9c2f0 <usart_reset+0x4c>)
   9c2d4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   9c2d6:	6878      	ldr	r0, [r7, #4]
   9c2d8:	4b06      	ldr	r3, [pc, #24]	; (9c2f4 <usart_reset+0x50>)
   9c2da:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   9c2dc:	bf00      	nop
   9c2de:	3708      	adds	r7, #8
   9c2e0:	46bd      	mov	sp, r7
   9c2e2:	bd80      	pop	{r7, pc}
   9c2e4:	0009c479 	.word	0x0009c479
   9c2e8:	0009c395 	.word	0x0009c395
   9c2ec:	0009c3c5 	.word	0x0009c3c5
   9c2f0:	0009c3dd 	.word	0x0009c3dd
   9c2f4:	0009c3f9 	.word	0x0009c3f9

0009c2f8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   9c2f8:	b580      	push	{r7, lr}
   9c2fa:	b084      	sub	sp, #16
   9c2fc:	af00      	add	r7, sp, #0
   9c2fe:	60f8      	str	r0, [r7, #12]
   9c300:	60b9      	str	r1, [r7, #8]
   9c302:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   9c304:	68f8      	ldr	r0, [r7, #12]
   9c306:	4b1a      	ldr	r3, [pc, #104]	; (9c370 <usart_init_rs232+0x78>)
   9c308:	4798      	blx	r3

	ul_reg_val = 0;
   9c30a:	4b1a      	ldr	r3, [pc, #104]	; (9c374 <usart_init_rs232+0x7c>)
   9c30c:	2200      	movs	r2, #0
   9c30e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   9c310:	68bb      	ldr	r3, [r7, #8]
   9c312:	2b00      	cmp	r3, #0
   9c314:	d009      	beq.n	9c32a <usart_init_rs232+0x32>
   9c316:	68bb      	ldr	r3, [r7, #8]
   9c318:	681b      	ldr	r3, [r3, #0]
   9c31a:	687a      	ldr	r2, [r7, #4]
   9c31c:	4619      	mov	r1, r3
   9c31e:	68f8      	ldr	r0, [r7, #12]
   9c320:	4b15      	ldr	r3, [pc, #84]	; (9c378 <usart_init_rs232+0x80>)
   9c322:	4798      	blx	r3
   9c324:	4603      	mov	r3, r0
   9c326:	2b00      	cmp	r3, #0
   9c328:	d001      	beq.n	9c32e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   9c32a:	2301      	movs	r3, #1
   9c32c:	e01b      	b.n	9c366 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9c32e:	68bb      	ldr	r3, [r7, #8]
   9c330:	685a      	ldr	r2, [r3, #4]
   9c332:	68bb      	ldr	r3, [r7, #8]
   9c334:	689b      	ldr	r3, [r3, #8]
   9c336:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9c338:	68bb      	ldr	r3, [r7, #8]
   9c33a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9c33c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9c33e:	68bb      	ldr	r3, [r7, #8]
   9c340:	68db      	ldr	r3, [r3, #12]
   9c342:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9c344:	4b0b      	ldr	r3, [pc, #44]	; (9c374 <usart_init_rs232+0x7c>)
   9c346:	681b      	ldr	r3, [r3, #0]
   9c348:	4313      	orrs	r3, r2
   9c34a:	4a0a      	ldr	r2, [pc, #40]	; (9c374 <usart_init_rs232+0x7c>)
   9c34c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   9c34e:	4b09      	ldr	r3, [pc, #36]	; (9c374 <usart_init_rs232+0x7c>)
   9c350:	681b      	ldr	r3, [r3, #0]
   9c352:	4a08      	ldr	r2, [pc, #32]	; (9c374 <usart_init_rs232+0x7c>)
   9c354:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   9c356:	68fb      	ldr	r3, [r7, #12]
   9c358:	685a      	ldr	r2, [r3, #4]
   9c35a:	4b06      	ldr	r3, [pc, #24]	; (9c374 <usart_init_rs232+0x7c>)
   9c35c:	681b      	ldr	r3, [r3, #0]
   9c35e:	431a      	orrs	r2, r3
   9c360:	68fb      	ldr	r3, [r7, #12]
   9c362:	605a      	str	r2, [r3, #4]

	return 0;
   9c364:	2300      	movs	r3, #0
}
   9c366:	4618      	mov	r0, r3
   9c368:	3710      	adds	r7, #16
   9c36a:	46bd      	mov	sp, r7
   9c36c:	bd80      	pop	{r7, pc}
   9c36e:	bf00      	nop
   9c370:	0009c2a5 	.word	0x0009c2a5
   9c374:	20071ac8 	.word	0x20071ac8
   9c378:	0009c21d 	.word	0x0009c21d

0009c37c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   9c37c:	b480      	push	{r7}
   9c37e:	b083      	sub	sp, #12
   9c380:	af00      	add	r7, sp, #0
   9c382:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   9c384:	687b      	ldr	r3, [r7, #4]
   9c386:	2240      	movs	r2, #64	; 0x40
   9c388:	601a      	str	r2, [r3, #0]
}
   9c38a:	bf00      	nop
   9c38c:	370c      	adds	r7, #12
   9c38e:	46bd      	mov	sp, r7
   9c390:	bc80      	pop	{r7}
   9c392:	4770      	bx	lr

0009c394 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   9c394:	b480      	push	{r7}
   9c396:	b083      	sub	sp, #12
   9c398:	af00      	add	r7, sp, #0
   9c39a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   9c39c:	687b      	ldr	r3, [r7, #4]
   9c39e:	2288      	movs	r2, #136	; 0x88
   9c3a0:	601a      	str	r2, [r3, #0]
}
   9c3a2:	bf00      	nop
   9c3a4:	370c      	adds	r7, #12
   9c3a6:	46bd      	mov	sp, r7
   9c3a8:	bc80      	pop	{r7}
   9c3aa:	4770      	bx	lr

0009c3ac <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   9c3ac:	b480      	push	{r7}
   9c3ae:	b083      	sub	sp, #12
   9c3b0:	af00      	add	r7, sp, #0
   9c3b2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   9c3b4:	687b      	ldr	r3, [r7, #4]
   9c3b6:	2210      	movs	r2, #16
   9c3b8:	601a      	str	r2, [r3, #0]
}
   9c3ba:	bf00      	nop
   9c3bc:	370c      	adds	r7, #12
   9c3be:	46bd      	mov	sp, r7
   9c3c0:	bc80      	pop	{r7}
   9c3c2:	4770      	bx	lr

0009c3c4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   9c3c4:	b480      	push	{r7}
   9c3c6:	b083      	sub	sp, #12
   9c3c8:	af00      	add	r7, sp, #0
   9c3ca:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   9c3cc:	687b      	ldr	r3, [r7, #4]
   9c3ce:	2224      	movs	r2, #36	; 0x24
   9c3d0:	601a      	str	r2, [r3, #0]
}
   9c3d2:	bf00      	nop
   9c3d4:	370c      	adds	r7, #12
   9c3d6:	46bd      	mov	sp, r7
   9c3d8:	bc80      	pop	{r7}
   9c3da:	4770      	bx	lr

0009c3dc <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   9c3dc:	b480      	push	{r7}
   9c3de:	b083      	sub	sp, #12
   9c3e0:	af00      	add	r7, sp, #0
   9c3e2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   9c3e4:	687b      	ldr	r3, [r7, #4]
   9c3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   9c3ea:	601a      	str	r2, [r3, #0]
}
   9c3ec:	bf00      	nop
   9c3ee:	370c      	adds	r7, #12
   9c3f0:	46bd      	mov	sp, r7
   9c3f2:	bc80      	pop	{r7}
   9c3f4:	4770      	bx	lr
   9c3f6:	bf00      	nop

0009c3f8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   9c3f8:	b480      	push	{r7}
   9c3fa:	b083      	sub	sp, #12
   9c3fc:	af00      	add	r7, sp, #0
   9c3fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   9c400:	687b      	ldr	r3, [r7, #4]
   9c402:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   9c406:	601a      	str	r2, [r3, #0]
}
   9c408:	bf00      	nop
   9c40a:	370c      	adds	r7, #12
   9c40c:	46bd      	mov	sp, r7
   9c40e:	bc80      	pop	{r7}
   9c410:	4770      	bx	lr
   9c412:	bf00      	nop

0009c414 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   9c414:	b480      	push	{r7}
   9c416:	b083      	sub	sp, #12
   9c418:	af00      	add	r7, sp, #0
   9c41a:	6078      	str	r0, [r7, #4]
   9c41c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   9c41e:	687b      	ldr	r3, [r7, #4]
   9c420:	695b      	ldr	r3, [r3, #20]
   9c422:	f003 0302 	and.w	r3, r3, #2
   9c426:	2b00      	cmp	r3, #0
   9c428:	d101      	bne.n	9c42e <usart_write+0x1a>
		return 1;
   9c42a:	2301      	movs	r3, #1
   9c42c:	e005      	b.n	9c43a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   9c42e:	683b      	ldr	r3, [r7, #0]
   9c430:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9c434:	687b      	ldr	r3, [r7, #4]
   9c436:	61da      	str	r2, [r3, #28]
	return 0;
   9c438:	2300      	movs	r3, #0
}
   9c43a:	4618      	mov	r0, r3
   9c43c:	370c      	adds	r7, #12
   9c43e:	46bd      	mov	sp, r7
   9c440:	bc80      	pop	{r7}
   9c442:	4770      	bx	lr

0009c444 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   9c444:	b480      	push	{r7}
   9c446:	b083      	sub	sp, #12
   9c448:	af00      	add	r7, sp, #0
   9c44a:	6078      	str	r0, [r7, #4]
   9c44c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   9c44e:	687b      	ldr	r3, [r7, #4]
   9c450:	695b      	ldr	r3, [r3, #20]
   9c452:	f003 0301 	and.w	r3, r3, #1
   9c456:	2b00      	cmp	r3, #0
   9c458:	d101      	bne.n	9c45e <usart_read+0x1a>
		return 1;
   9c45a:	2301      	movs	r3, #1
   9c45c:	e006      	b.n	9c46c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   9c45e:	687b      	ldr	r3, [r7, #4]
   9c460:	699b      	ldr	r3, [r3, #24]
   9c462:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9c466:	683b      	ldr	r3, [r7, #0]
   9c468:	601a      	str	r2, [r3, #0]

	return 0;
   9c46a:	2300      	movs	r3, #0
}
   9c46c:	4618      	mov	r0, r3
   9c46e:	370c      	adds	r7, #12
   9c470:	46bd      	mov	sp, r7
   9c472:	bc80      	pop	{r7}
   9c474:	4770      	bx	lr
   9c476:	bf00      	nop

0009c478 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   9c478:	b480      	push	{r7}
   9c47a:	b083      	sub	sp, #12
   9c47c:	af00      	add	r7, sp, #0
   9c47e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   9c480:	687b      	ldr	r3, [r7, #4]
   9c482:	4a04      	ldr	r2, [pc, #16]	; (9c494 <usart_disable_writeprotect+0x1c>)
   9c484:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   9c488:	bf00      	nop
   9c48a:	370c      	adds	r7, #12
   9c48c:	46bd      	mov	sp, r7
   9c48e:	bc80      	pop	{r7}
   9c490:	4770      	bx	lr
   9c492:	bf00      	nop
   9c494:	55534100 	.word	0x55534100

0009c498 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   9c498:	b480      	push	{r7}
   9c49a:	af00      	add	r7, sp, #0
	while (1) {
	}
   9c49c:	e7fe      	b.n	9c49c <Dummy_Handler+0x4>
   9c49e:	bf00      	nop

0009c4a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   9c4a0:	b580      	push	{r7, lr}
   9c4a2:	b082      	sub	sp, #8
   9c4a4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   9c4a6:	4b1e      	ldr	r3, [pc, #120]	; (9c520 <Reset_Handler+0x80>)
   9c4a8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   9c4aa:	4b1e      	ldr	r3, [pc, #120]	; (9c524 <Reset_Handler+0x84>)
   9c4ac:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   9c4ae:	687a      	ldr	r2, [r7, #4]
   9c4b0:	683b      	ldr	r3, [r7, #0]
   9c4b2:	429a      	cmp	r2, r3
   9c4b4:	d00c      	beq.n	9c4d0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   9c4b6:	e007      	b.n	9c4c8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   9c4b8:	683b      	ldr	r3, [r7, #0]
   9c4ba:	1d1a      	adds	r2, r3, #4
   9c4bc:	603a      	str	r2, [r7, #0]
   9c4be:	687a      	ldr	r2, [r7, #4]
   9c4c0:	1d11      	adds	r1, r2, #4
   9c4c2:	6079      	str	r1, [r7, #4]
   9c4c4:	6812      	ldr	r2, [r2, #0]
   9c4c6:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   9c4c8:	683b      	ldr	r3, [r7, #0]
   9c4ca:	4a17      	ldr	r2, [pc, #92]	; (9c528 <Reset_Handler+0x88>)
   9c4cc:	4293      	cmp	r3, r2
   9c4ce:	d3f3      	bcc.n	9c4b8 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9c4d0:	4b16      	ldr	r3, [pc, #88]	; (9c52c <Reset_Handler+0x8c>)
   9c4d2:	603b      	str	r3, [r7, #0]
   9c4d4:	e004      	b.n	9c4e0 <Reset_Handler+0x40>
		*pDest++ = 0;
   9c4d6:	683b      	ldr	r3, [r7, #0]
   9c4d8:	1d1a      	adds	r2, r3, #4
   9c4da:	603a      	str	r2, [r7, #0]
   9c4dc:	2200      	movs	r2, #0
   9c4de:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9c4e0:	683b      	ldr	r3, [r7, #0]
   9c4e2:	4a13      	ldr	r2, [pc, #76]	; (9c530 <Reset_Handler+0x90>)
   9c4e4:	4293      	cmp	r3, r2
   9c4e6:	d3f6      	bcc.n	9c4d6 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   9c4e8:	4b12      	ldr	r3, [pc, #72]	; (9c534 <Reset_Handler+0x94>)
   9c4ea:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9c4ec:	4a12      	ldr	r2, [pc, #72]	; (9c538 <Reset_Handler+0x98>)
   9c4ee:	687b      	ldr	r3, [r7, #4]
   9c4f0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   9c4f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   9c4f8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9c4fa:	687b      	ldr	r3, [r7, #4]
   9c4fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9c500:	d309      	bcc.n	9c516 <Reset_Handler+0x76>
   9c502:	687b      	ldr	r3, [r7, #4]
   9c504:	4a0d      	ldr	r2, [pc, #52]	; (9c53c <Reset_Handler+0x9c>)
   9c506:	4293      	cmp	r3, r2
   9c508:	d805      	bhi.n	9c516 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   9c50a:	4a0b      	ldr	r2, [pc, #44]	; (9c538 <Reset_Handler+0x98>)
   9c50c:	4b0a      	ldr	r3, [pc, #40]	; (9c538 <Reset_Handler+0x98>)
   9c50e:	689b      	ldr	r3, [r3, #8]
   9c510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   9c514:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   9c516:	4b0a      	ldr	r3, [pc, #40]	; (9c540 <Reset_Handler+0xa0>)
   9c518:	4798      	blx	r3

	/* Branch to main function */
	main();
   9c51a:	4b0a      	ldr	r3, [pc, #40]	; (9c544 <Reset_Handler+0xa4>)
   9c51c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   9c51e:	e7fe      	b.n	9c51e <Reset_Handler+0x7e>
   9c520:	000aa49c 	.word	0x000aa49c
   9c524:	20070000 	.word	0x20070000
   9c528:	200715a4 	.word	0x200715a4
   9c52c:	200715a4 	.word	0x200715a4
   9c530:	200727f4 	.word	0x200727f4
   9c534:	00080000 	.word	0x00080000
   9c538:	e000ed00 	.word	0xe000ed00
   9c53c:	200fffff 	.word	0x200fffff
   9c540:	000a83c1 	.word	0x000a83c1
   9c544:	0008b75d 	.word	0x0008b75d

0009c548 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   9c548:	b480      	push	{r7}
   9c54a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   9c54c:	4b57      	ldr	r3, [pc, #348]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9c550:	f003 0303 	and.w	r3, r3, #3
   9c554:	2b03      	cmp	r3, #3
   9c556:	f200 808a 	bhi.w	9c66e <SystemCoreClockUpdate+0x126>
   9c55a:	a201      	add	r2, pc, #4	; (adr r2, 9c560 <SystemCoreClockUpdate+0x18>)
   9c55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c560:	0009c571 	.word	0x0009c571
   9c564:	0009c591 	.word	0x0009c591
   9c568:	0009c5e1 	.word	0x0009c5e1
   9c56c:	0009c5e1 	.word	0x0009c5e1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   9c570:	4b4f      	ldr	r3, [pc, #316]	; (9c6b0 <SystemCoreClockUpdate+0x168>)
   9c572:	695b      	ldr	r3, [r3, #20]
   9c574:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9c578:	2b00      	cmp	r3, #0
   9c57a:	d004      	beq.n	9c586 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   9c57c:	4b4d      	ldr	r3, [pc, #308]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c57e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9c582:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   9c584:	e073      	b.n	9c66e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   9c586:	4b4b      	ldr	r3, [pc, #300]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c588:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   9c58c:	601a      	str	r2, [r3, #0]
		}
		break;
   9c58e:	e06e      	b.n	9c66e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9c590:	4b46      	ldr	r3, [pc, #280]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c592:	6a1b      	ldr	r3, [r3, #32]
   9c594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9c598:	2b00      	cmp	r3, #0
   9c59a:	d003      	beq.n	9c5a4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9c59c:	4b45      	ldr	r3, [pc, #276]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c59e:	4a46      	ldr	r2, [pc, #280]	; (9c6b8 <SystemCoreClockUpdate+0x170>)
   9c5a0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   9c5a2:	e064      	b.n	9c66e <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9c5a4:	4b43      	ldr	r3, [pc, #268]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5a6:	4a45      	ldr	r2, [pc, #276]	; (9c6bc <SystemCoreClockUpdate+0x174>)
   9c5a8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9c5aa:	4b40      	ldr	r3, [pc, #256]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c5ac:	6a1b      	ldr	r3, [r3, #32]
   9c5ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9c5b2:	2b10      	cmp	r3, #16
   9c5b4:	d004      	beq.n	9c5c0 <SystemCoreClockUpdate+0x78>
   9c5b6:	2b20      	cmp	r3, #32
   9c5b8:	d008      	beq.n	9c5cc <SystemCoreClockUpdate+0x84>
   9c5ba:	2b00      	cmp	r3, #0
   9c5bc:	d00e      	beq.n	9c5dc <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9c5be:	e00e      	b.n	9c5de <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9c5c0:	4b3c      	ldr	r3, [pc, #240]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5c2:	681b      	ldr	r3, [r3, #0]
   9c5c4:	005b      	lsls	r3, r3, #1
   9c5c6:	4a3b      	ldr	r2, [pc, #236]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5c8:	6013      	str	r3, [r2, #0]
				break;
   9c5ca:	e008      	b.n	9c5de <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9c5cc:	4b39      	ldr	r3, [pc, #228]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5ce:	681a      	ldr	r2, [r3, #0]
   9c5d0:	4613      	mov	r3, r2
   9c5d2:	005b      	lsls	r3, r3, #1
   9c5d4:	4413      	add	r3, r2
   9c5d6:	4a37      	ldr	r2, [pc, #220]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5d8:	6013      	str	r3, [r2, #0]
				break;
   9c5da:	e000      	b.n	9c5de <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9c5dc:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   9c5de:	e046      	b.n	9c66e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9c5e0:	4b32      	ldr	r3, [pc, #200]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c5e2:	6a1b      	ldr	r3, [r3, #32]
   9c5e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9c5e8:	2b00      	cmp	r3, #0
   9c5ea:	d003      	beq.n	9c5f4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9c5ec:	4b31      	ldr	r3, [pc, #196]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5ee:	4a32      	ldr	r2, [pc, #200]	; (9c6b8 <SystemCoreClockUpdate+0x170>)
   9c5f0:	601a      	str	r2, [r3, #0]
   9c5f2:	e01c      	b.n	9c62e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9c5f4:	4b2f      	ldr	r3, [pc, #188]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c5f6:	4a31      	ldr	r2, [pc, #196]	; (9c6bc <SystemCoreClockUpdate+0x174>)
   9c5f8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9c5fa:	4b2c      	ldr	r3, [pc, #176]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c5fc:	6a1b      	ldr	r3, [r3, #32]
   9c5fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9c602:	2b10      	cmp	r3, #16
   9c604:	d004      	beq.n	9c610 <SystemCoreClockUpdate+0xc8>
   9c606:	2b20      	cmp	r3, #32
   9c608:	d008      	beq.n	9c61c <SystemCoreClockUpdate+0xd4>
   9c60a:	2b00      	cmp	r3, #0
   9c60c:	d00e      	beq.n	9c62c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9c60e:	e00e      	b.n	9c62e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9c610:	4b28      	ldr	r3, [pc, #160]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c612:	681b      	ldr	r3, [r3, #0]
   9c614:	005b      	lsls	r3, r3, #1
   9c616:	4a27      	ldr	r2, [pc, #156]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c618:	6013      	str	r3, [r2, #0]
				break;
   9c61a:	e008      	b.n	9c62e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9c61c:	4b25      	ldr	r3, [pc, #148]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c61e:	681a      	ldr	r2, [r3, #0]
   9c620:	4613      	mov	r3, r2
   9c622:	005b      	lsls	r3, r3, #1
   9c624:	4413      	add	r3, r2
   9c626:	4a23      	ldr	r2, [pc, #140]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c628:	6013      	str	r3, [r2, #0]
				break;
   9c62a:	e000      	b.n	9c62e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9c62c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   9c62e:	4b1f      	ldr	r3, [pc, #124]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9c632:	f003 0303 	and.w	r3, r3, #3
   9c636:	2b02      	cmp	r3, #2
   9c638:	d115      	bne.n	9c666 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9c63a:	4b1c      	ldr	r3, [pc, #112]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   9c63e:	4b20      	ldr	r3, [pc, #128]	; (9c6c0 <SystemCoreClockUpdate+0x178>)
   9c640:	4013      	ands	r3, r2
   9c642:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   9c644:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9c646:	4a1b      	ldr	r2, [pc, #108]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c648:	6812      	ldr	r2, [r2, #0]
   9c64a:	fb02 f303 	mul.w	r3, r2, r3
   9c64e:	4a19      	ldr	r2, [pc, #100]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c650:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9c652:	4b16      	ldr	r3, [pc, #88]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   9c656:	b2db      	uxtb	r3, r3
   9c658:	4a16      	ldr	r2, [pc, #88]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c65a:	6812      	ldr	r2, [r2, #0]
   9c65c:	fbb2 f3f3 	udiv	r3, r2, r3
   9c660:	4a14      	ldr	r2, [pc, #80]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c662:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   9c664:	e002      	b.n	9c66c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   9c666:	4b13      	ldr	r3, [pc, #76]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c668:	4a16      	ldr	r2, [pc, #88]	; (9c6c4 <SystemCoreClockUpdate+0x17c>)
   9c66a:	601a      	str	r2, [r3, #0]
		}
		break;
   9c66c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9c66e:	4b0f      	ldr	r3, [pc, #60]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9c672:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9c676:	2b70      	cmp	r3, #112	; 0x70
   9c678:	d108      	bne.n	9c68c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   9c67a:	4b0e      	ldr	r3, [pc, #56]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c67c:	681b      	ldr	r3, [r3, #0]
   9c67e:	4a12      	ldr	r2, [pc, #72]	; (9c6c8 <SystemCoreClockUpdate+0x180>)
   9c680:	fba2 2303 	umull	r2, r3, r2, r3
   9c684:	085b      	lsrs	r3, r3, #1
   9c686:	4a0b      	ldr	r2, [pc, #44]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c688:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   9c68a:	e00a      	b.n	9c6a2 <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   9c68c:	4b07      	ldr	r3, [pc, #28]	; (9c6ac <SystemCoreClockUpdate+0x164>)
   9c68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9c690:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9c694:	091b      	lsrs	r3, r3, #4
   9c696:	4a07      	ldr	r2, [pc, #28]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c698:	6812      	ldr	r2, [r2, #0]
   9c69a:	fa22 f303 	lsr.w	r3, r2, r3
   9c69e:	4a05      	ldr	r2, [pc, #20]	; (9c6b4 <SystemCoreClockUpdate+0x16c>)
   9c6a0:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   9c6a2:	bf00      	nop
   9c6a4:	46bd      	mov	sp, r7
   9c6a6:	bc80      	pop	{r7}
   9c6a8:	4770      	bx	lr
   9c6aa:	bf00      	nop
   9c6ac:	400e0600 	.word	0x400e0600
   9c6b0:	400e1a10 	.word	0x400e1a10
   9c6b4:	20070b08 	.word	0x20070b08
   9c6b8:	00b71b00 	.word	0x00b71b00
   9c6bc:	003d0900 	.word	0x003d0900
   9c6c0:	07ff0000 	.word	0x07ff0000
   9c6c4:	0e4e1c00 	.word	0x0e4e1c00
   9c6c8:	aaaaaaab 	.word	0xaaaaaaab

0009c6cc <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   9c6cc:	b480      	push	{r7}
   9c6ce:	b083      	sub	sp, #12
   9c6d0:	af00      	add	r7, sp, #0
   9c6d2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   9c6d4:	687b      	ldr	r3, [r7, #4]
   9c6d6:	4a25      	ldr	r2, [pc, #148]	; (9c76c <system_init_flash+0xa0>)
   9c6d8:	4293      	cmp	r3, r2
   9c6da:	d806      	bhi.n	9c6ea <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   9c6dc:	4b24      	ldr	r3, [pc, #144]	; (9c770 <system_init_flash+0xa4>)
   9c6de:	2200      	movs	r2, #0
   9c6e0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   9c6e2:	4b24      	ldr	r3, [pc, #144]	; (9c774 <system_init_flash+0xa8>)
   9c6e4:	2200      	movs	r2, #0
   9c6e6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9c6e8:	e03b      	b.n	9c762 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   9c6ea:	687b      	ldr	r3, [r7, #4]
   9c6ec:	4a22      	ldr	r2, [pc, #136]	; (9c778 <system_init_flash+0xac>)
   9c6ee:	4293      	cmp	r3, r2
   9c6f0:	d808      	bhi.n	9c704 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   9c6f2:	4b1f      	ldr	r3, [pc, #124]	; (9c770 <system_init_flash+0xa4>)
   9c6f4:	f44f 7280 	mov.w	r2, #256	; 0x100
   9c6f8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   9c6fa:	4b1e      	ldr	r3, [pc, #120]	; (9c774 <system_init_flash+0xa8>)
   9c6fc:	f44f 7280 	mov.w	r2, #256	; 0x100
   9c700:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9c702:	e02e      	b.n	9c762 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   9c704:	687b      	ldr	r3, [r7, #4]
   9c706:	4a1d      	ldr	r2, [pc, #116]	; (9c77c <system_init_flash+0xb0>)
   9c708:	4293      	cmp	r3, r2
   9c70a:	d808      	bhi.n	9c71e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   9c70c:	4b18      	ldr	r3, [pc, #96]	; (9c770 <system_init_flash+0xa4>)
   9c70e:	f44f 7200 	mov.w	r2, #512	; 0x200
   9c712:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   9c714:	4b17      	ldr	r3, [pc, #92]	; (9c774 <system_init_flash+0xa8>)
   9c716:	f44f 7200 	mov.w	r2, #512	; 0x200
   9c71a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9c71c:	e021      	b.n	9c762 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   9c71e:	687b      	ldr	r3, [r7, #4]
   9c720:	4a17      	ldr	r2, [pc, #92]	; (9c780 <system_init_flash+0xb4>)
   9c722:	4293      	cmp	r3, r2
   9c724:	d808      	bhi.n	9c738 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   9c726:	4b12      	ldr	r3, [pc, #72]	; (9c770 <system_init_flash+0xa4>)
   9c728:	f44f 7240 	mov.w	r2, #768	; 0x300
   9c72c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   9c72e:	4b11      	ldr	r3, [pc, #68]	; (9c774 <system_init_flash+0xa8>)
   9c730:	f44f 7240 	mov.w	r2, #768	; 0x300
   9c734:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9c736:	e014      	b.n	9c762 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   9c738:	687b      	ldr	r3, [r7, #4]
   9c73a:	4a12      	ldr	r2, [pc, #72]	; (9c784 <system_init_flash+0xb8>)
   9c73c:	4293      	cmp	r3, r2
   9c73e:	d808      	bhi.n	9c752 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   9c740:	4b0b      	ldr	r3, [pc, #44]	; (9c770 <system_init_flash+0xa4>)
   9c742:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9c746:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   9c748:	4b0a      	ldr	r3, [pc, #40]	; (9c774 <system_init_flash+0xa8>)
   9c74a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9c74e:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9c750:	e007      	b.n	9c762 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   9c752:	4b07      	ldr	r3, [pc, #28]	; (9c770 <system_init_flash+0xa4>)
   9c754:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9c758:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   9c75a:	4b06      	ldr	r3, [pc, #24]	; (9c774 <system_init_flash+0xa8>)
   9c75c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9c760:	601a      	str	r2, [r3, #0]
	}
}
   9c762:	bf00      	nop
   9c764:	370c      	adds	r7, #12
   9c766:	46bd      	mov	sp, r7
   9c768:	bc80      	pop	{r7}
   9c76a:	4770      	bx	lr
   9c76c:	0121eabf 	.word	0x0121eabf
   9c770:	400e0a00 	.word	0x400e0a00
   9c774:	400e0c00 	.word	0x400e0c00
   9c778:	02faf07f 	.word	0x02faf07f
   9c77c:	03d08fff 	.word	0x03d08fff
   9c780:	04c4b3ff 	.word	0x04c4b3ff
   9c784:	055d4a7f 	.word	0x055d4a7f

0009c788 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   9c788:	b480      	push	{r7}
   9c78a:	b085      	sub	sp, #20
   9c78c:	af00      	add	r7, sp, #0
   9c78e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   9c790:	4b0a      	ldr	r3, [pc, #40]	; (9c7bc <_sbrk+0x34>)
   9c792:	681b      	ldr	r3, [r3, #0]
   9c794:	2b00      	cmp	r3, #0
   9c796:	d102      	bne.n	9c79e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   9c798:	4b08      	ldr	r3, [pc, #32]	; (9c7bc <_sbrk+0x34>)
   9c79a:	4a09      	ldr	r2, [pc, #36]	; (9c7c0 <_sbrk+0x38>)
   9c79c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   9c79e:	4b07      	ldr	r3, [pc, #28]	; (9c7bc <_sbrk+0x34>)
   9c7a0:	681b      	ldr	r3, [r3, #0]
   9c7a2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   9c7a4:	4b05      	ldr	r3, [pc, #20]	; (9c7bc <_sbrk+0x34>)
   9c7a6:	681a      	ldr	r2, [r3, #0]
   9c7a8:	687b      	ldr	r3, [r7, #4]
   9c7aa:	4413      	add	r3, r2
   9c7ac:	4a03      	ldr	r2, [pc, #12]	; (9c7bc <_sbrk+0x34>)
   9c7ae:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   9c7b0:	68fb      	ldr	r3, [r7, #12]
}
   9c7b2:	4618      	mov	r0, r3
   9c7b4:	3714      	adds	r7, #20
   9c7b6:	46bd      	mov	sp, r7
   9c7b8:	bc80      	pop	{r7}
   9c7ba:	4770      	bx	lr
   9c7bc:	20071acc 	.word	0x20071acc
   9c7c0:	200747f8 	.word	0x200747f8

0009c7c4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   9c7c4:	b480      	push	{r7}
   9c7c6:	b083      	sub	sp, #12
   9c7c8:	af00      	add	r7, sp, #0
   9c7ca:	6078      	str	r0, [r7, #4]
	return -1;
   9c7cc:	f04f 33ff 	mov.w	r3, #4294967295
}
   9c7d0:	4618      	mov	r0, r3
   9c7d2:	370c      	adds	r7, #12
   9c7d4:	46bd      	mov	sp, r7
   9c7d6:	bc80      	pop	{r7}
   9c7d8:	4770      	bx	lr
   9c7da:	bf00      	nop

0009c7dc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   9c7dc:	b480      	push	{r7}
   9c7de:	b083      	sub	sp, #12
   9c7e0:	af00      	add	r7, sp, #0
   9c7e2:	6078      	str	r0, [r7, #4]
   9c7e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9c7e6:	683b      	ldr	r3, [r7, #0]
   9c7e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   9c7ec:	605a      	str	r2, [r3, #4]

	return 0;
   9c7ee:	2300      	movs	r3, #0
}
   9c7f0:	4618      	mov	r0, r3
   9c7f2:	370c      	adds	r7, #12
   9c7f4:	46bd      	mov	sp, r7
   9c7f6:	bc80      	pop	{r7}
   9c7f8:	4770      	bx	lr
   9c7fa:	bf00      	nop

0009c7fc <_isatty>:

extern int _isatty(int file)
{
   9c7fc:	b480      	push	{r7}
   9c7fe:	b083      	sub	sp, #12
   9c800:	af00      	add	r7, sp, #0
   9c802:	6078      	str	r0, [r7, #4]
	return 1;
   9c804:	2301      	movs	r3, #1
}
   9c806:	4618      	mov	r0, r3
   9c808:	370c      	adds	r7, #12
   9c80a:	46bd      	mov	sp, r7
   9c80c:	bc80      	pop	{r7}
   9c80e:	4770      	bx	lr

0009c810 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   9c810:	b480      	push	{r7}
   9c812:	b085      	sub	sp, #20
   9c814:	af00      	add	r7, sp, #0
   9c816:	60f8      	str	r0, [r7, #12]
   9c818:	60b9      	str	r1, [r7, #8]
   9c81a:	607a      	str	r2, [r7, #4]
	return 0;
   9c81c:	2300      	movs	r3, #0
}
   9c81e:	4618      	mov	r0, r3
   9c820:	3714      	adds	r7, #20
   9c822:	46bd      	mov	sp, r7
   9c824:	bc80      	pop	{r7}
   9c826:	4770      	bx	lr

0009c828 <Cl_Console_Read_ConsoleMessage_Status>:
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType Cl_Console_Read_ConsoleMessage_Status(void)
{
   9c828:	b480      	push	{r7}
   9c82a:	b083      	sub	sp, #12
   9c82c:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   9c82e:	2304      	movs	r3, #4
   9c830:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   9c832:	4b0b      	ldr	r3, [pc, #44]	; (9c860 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   9c834:	7e1b      	ldrb	r3, [r3, #24]
   9c836:	2b00      	cmp	r3, #0
   9c838:	d002      	beq.n	9c840 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   9c83a:	2300      	movs	r3, #0
   9c83c:	71fb      	strb	r3, [r7, #7]
   9c83e:	e008      	b.n	9c852 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   9c840:	4b08      	ldr	r3, [pc, #32]	; (9c864 <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   9c842:	7e1b      	ldrb	r3, [r3, #24]
   9c844:	2b00      	cmp	r3, #0
   9c846:	d002      	beq.n	9c84e <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   9c848:	2300      	movs	r3, #0
   9c84a:	71fb      	strb	r3, [r7, #7]
   9c84c:	e001      	b.n	9c852 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   9c84e:	2301      	movs	r3, #1
   9c850:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   9c852:	79fb      	ldrb	r3, [r7, #7]
}
   9c854:	4618      	mov	r0, r3
   9c856:	370c      	adds	r7, #12
   9c858:	46bd      	mov	sp, r7
   9c85a:	bc80      	pop	{r7}
   9c85c:	4770      	bx	lr
   9c85e:	bf00      	nop
   9c860:	2007236c 	.word	0x2007236c
   9c864:	200721cc 	.word	0x200721cc

0009c868 <Cl_Console_Read_Message_Ready_Status>:
 * \void function 
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_msgbuffer
 */
Cl_ReturnCodeType  Cl_Console_Read_Message_Ready_Status(void)
{
   9c868:	b480      	push	{r7}
   9c86a:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   9c86c:	4b05      	ldr	r3, [pc, #20]	; (9c884 <Cl_Console_Read_Message_Ready_Status+0x1c>)
   9c86e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   9c872:	2b00      	cmp	r3, #0
   9c874:	d001      	beq.n	9c87a <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   9c876:	2300      	movs	r3, #0
   9c878:	e000      	b.n	9c87c <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   9c87a:	2301      	movs	r3, #1
	}
	
}
   9c87c:	4618      	mov	r0, r3
   9c87e:	46bd      	mov	sp, r7
   9c880:	bc80      	pop	{r7}
   9c882:	4770      	bx	lr
   9c884:	2007213c 	.word	0x2007213c

0009c888 <Cl_Console_Read_Message_Console>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType		Cl_Console_Read_Message_Console()
{
   9c888:	b480      	push	{r7}
   9c88a:	b083      	sub	sp, #12
   9c88c:	af00      	add	r7, sp, #0

	static Cl_Uint8Type tempcount=0;
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   9c88e:	4b54      	ldr	r3, [pc, #336]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c890:	7e1b      	ldrb	r3, [r3, #24]
   9c892:	2b00      	cmp	r3, #0
   9c894:	d03c      	beq.n	9c910 <Cl_Console_Read_Message_Console+0x88>
   9c896:	4b52      	ldr	r3, [pc, #328]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c898:	7e5b      	ldrb	r3, [r3, #25]
   9c89a:	f083 0301 	eor.w	r3, r3, #1
   9c89e:	b2db      	uxtb	r3, r3
   9c8a0:	2b00      	cmp	r3, #0
   9c8a2:	d035      	beq.n	9c910 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9c8a4:	4b4f      	ldr	r3, [pc, #316]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c8a6:	2200      	movs	r2, #0
   9c8a8:	701a      	strb	r2, [r3, #0]
   9c8aa:	2300      	movs	r3, #0
   9c8ac:	71fb      	strb	r3, [r7, #7]
   9c8ae:	e010      	b.n	9c8d2 <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   9c8b0:	4b4c      	ldr	r3, [pc, #304]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c8b2:	781b      	ldrb	r3, [r3, #0]
   9c8b4:	4619      	mov	r1, r3
   9c8b6:	79fb      	ldrb	r3, [r7, #7]
   9c8b8:	4a49      	ldr	r2, [pc, #292]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c8ba:	5cd2      	ldrb	r2, [r2, r3]
   9c8bc:	4b4a      	ldr	r3, [pc, #296]	; (9c9e8 <Cl_Console_Read_Message_Console+0x160>)
   9c8be:	545a      	strb	r2, [r3, r1]
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9c8c0:	4b48      	ldr	r3, [pc, #288]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c8c2:	781b      	ldrb	r3, [r3, #0]
   9c8c4:	3301      	adds	r3, #1
   9c8c6:	b2da      	uxtb	r2, r3
   9c8c8:	4b46      	ldr	r3, [pc, #280]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c8ca:	701a      	strb	r2, [r3, #0]
   9c8cc:	79fb      	ldrb	r3, [r7, #7]
   9c8ce:	3301      	adds	r3, #1
   9c8d0:	71fb      	strb	r3, [r7, #7]
   9c8d2:	4b43      	ldr	r3, [pc, #268]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c8d4:	7d1b      	ldrb	r3, [r3, #20]
   9c8d6:	79fa      	ldrb	r2, [r7, #7]
   9c8d8:	429a      	cmp	r2, r3
   9c8da:	d3e9      	bcc.n	9c8b0 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   9c8dc:	4b40      	ldr	r3, [pc, #256]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c8de:	7f5b      	ldrb	r3, [r3, #29]
   9c8e0:	f083 0301 	eor.w	r3, r3, #1
   9c8e4:	b2db      	uxtb	r3, r3
   9c8e6:	2b00      	cmp	r3, #0
   9c8e8:	d003      	beq.n	9c8f2 <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9c8ea:	4b3f      	ldr	r3, [pc, #252]	; (9c9e8 <Cl_Console_Read_Message_Console+0x160>)
   9c8ec:	2201      	movs	r2, #1
   9c8ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9c8f2:	4b3b      	ldr	r3, [pc, #236]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c8f4:	2201      	movs	r2, #1
   9c8f6:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9c8f8:	4b39      	ldr	r3, [pc, #228]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c8fa:	2200      	movs	r2, #0
   9c8fc:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer1.StartSequenceDetected = false;
   9c8fe:	4b38      	ldr	r3, [pc, #224]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c900:	2200      	movs	r2, #0
   9c902:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9c904:	4b36      	ldr	r3, [pc, #216]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c906:	2200      	movs	r2, #0
   9c908:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   9c90a:	4b35      	ldr	r3, [pc, #212]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c90c:	2201      	movs	r2, #1
   9c90e:	771a      	strb	r2, [r3, #28]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   9c910:	4b36      	ldr	r3, [pc, #216]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c912:	7e1b      	ldrb	r3, [r3, #24]
   9c914:	2b00      	cmp	r3, #0
   9c916:	d05c      	beq.n	9c9d2 <Cl_Console_Read_Message_Console+0x14a>
   9c918:	4b34      	ldr	r3, [pc, #208]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c91a:	7e5b      	ldrb	r3, [r3, #25]
   9c91c:	f083 0301 	eor.w	r3, r3, #1
   9c920:	b2db      	uxtb	r3, r3
   9c922:	2b00      	cmp	r3, #0
   9c924:	d055      	beq.n	9c9d2 <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   9c926:	4b2e      	ldr	r3, [pc, #184]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c928:	7f5b      	ldrb	r3, [r3, #29]
   9c92a:	f083 0301 	eor.w	r3, r3, #1
   9c92e:	b2db      	uxtb	r3, r3
   9c930:	2b00      	cmp	r3, #0
   9c932:	d002      	beq.n	9c93a <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   9c934:	4b2b      	ldr	r3, [pc, #172]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c936:	2200      	movs	r2, #0
   9c938:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9c93a:	2300      	movs	r3, #0
   9c93c:	71fb      	strb	r3, [r7, #7]
   9c93e:	e010      	b.n	9c962 <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   9c940:	4b28      	ldr	r3, [pc, #160]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c942:	781b      	ldrb	r3, [r3, #0]
   9c944:	4619      	mov	r1, r3
   9c946:	79fb      	ldrb	r3, [r7, #7]
   9c948:	4a28      	ldr	r2, [pc, #160]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c94a:	5cd2      	ldrb	r2, [r2, r3]
   9c94c:	4b26      	ldr	r3, [pc, #152]	; (9c9e8 <Cl_Console_Read_Message_Console+0x160>)
   9c94e:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9c950:	4b24      	ldr	r3, [pc, #144]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c952:	781b      	ldrb	r3, [r3, #0]
   9c954:	3301      	adds	r3, #1
   9c956:	b2da      	uxtb	r2, r3
   9c958:	4b22      	ldr	r3, [pc, #136]	; (9c9e4 <Cl_Console_Read_Message_Console+0x15c>)
   9c95a:	701a      	strb	r2, [r3, #0]
   9c95c:	79fb      	ldrb	r3, [r7, #7]
   9c95e:	3301      	adds	r3, #1
   9c960:	71fb      	strb	r3, [r7, #7]
   9c962:	4b22      	ldr	r3, [pc, #136]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c964:	7d1b      	ldrb	r3, [r3, #20]
   9c966:	79fa      	ldrb	r2, [r7, #7]
   9c968:	429a      	cmp	r2, r3
   9c96a:	d3e9      	bcc.n	9c940 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   9c96c:	4b1f      	ldr	r3, [pc, #124]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c96e:	7f5b      	ldrb	r3, [r3, #29]
   9c970:	f083 0301 	eor.w	r3, r3, #1
   9c974:	b2db      	uxtb	r3, r3
   9c976:	2b00      	cmp	r3, #0
   9c978:	d003      	beq.n	9c982 <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9c97a:	4b1b      	ldr	r3, [pc, #108]	; (9c9e8 <Cl_Console_Read_Message_Console+0x160>)
   9c97c:	2201      	movs	r2, #1
   9c97e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   9c982:	4b1a      	ldr	r3, [pc, #104]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c984:	2201      	movs	r2, #1
   9c986:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   9c988:	4b18      	ldr	r3, [pc, #96]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c98a:	2200      	movs	r2, #0
   9c98c:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   9c98e:	4b17      	ldr	r3, [pc, #92]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c990:	2200      	movs	r2, #0
   9c992:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   9c994:	4b15      	ldr	r3, [pc, #84]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c996:	2200      	movs	r2, #0
   9c998:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer2.BufferEmpty = true;
   9c99a:	4b14      	ldr	r3, [pc, #80]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c99c:	2201      	movs	r2, #1
   9c99e:	771a      	strb	r2, [r3, #28]
			if(Cl_Console_buffer1.Data_incomplete)
   9c9a0:	4b0f      	ldr	r3, [pc, #60]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9a2:	7f5b      	ldrb	r3, [r3, #29]
   9c9a4:	2b00      	cmp	r3, #0
   9c9a6:	d014      	beq.n	9c9d2 <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9c9a8:	4b0d      	ldr	r3, [pc, #52]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9aa:	2201      	movs	r2, #1
   9c9ac:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9c9ae:	4b0c      	ldr	r3, [pc, #48]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9b0:	2200      	movs	r2, #0
   9c9b2:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.StartSequenceDetected = false;
   9c9b4:	4b0a      	ldr	r3, [pc, #40]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9b6:	2200      	movs	r2, #0
   9c9b8:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer1.Data_incomplete = false;
   9c9ba:	4b09      	ldr	r3, [pc, #36]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9bc:	2200      	movs	r2, #0
   9c9be:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer2.Data_incomplete = false;
   9c9c0:	4b0a      	ldr	r3, [pc, #40]	; (9c9ec <Cl_Console_Read_Message_Console+0x164>)
   9c9c2:	2200      	movs	r2, #0
   9c9c4:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9c9c6:	4b06      	ldr	r3, [pc, #24]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9c8:	2200      	movs	r2, #0
   9c9ca:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   9c9cc:	4b04      	ldr	r3, [pc, #16]	; (9c9e0 <Cl_Console_Read_Message_Console+0x158>)
   9c9ce:	2201      	movs	r2, #1
   9c9d0:	771a      	strb	r2, [r3, #28]
			}
}


	return CL_OK;
   9c9d2:	2300      	movs	r3, #0
}
   9c9d4:	4618      	mov	r0, r3
   9c9d6:	370c      	adds	r7, #12
   9c9d8:	46bd      	mov	sp, r7
   9c9da:	bc80      	pop	{r7}
   9c9dc:	4770      	bx	lr
   9c9de:	bf00      	nop
   9c9e0:	2007236c 	.word	0x2007236c
   9c9e4:	20071ad6 	.word	0x20071ad6
   9c9e8:	2007213c 	.word	0x2007213c
   9c9ec:	200721cc 	.word	0x200721cc

0009c9f0 <Cl_Mac_Create_ConsoleEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType	 Cl_Mac_Create_ConsoleEvent(void)
{
   9c9f0:	b580      	push	{r7, lr}
   9c9f2:	b084      	sub	sp, #16
   9c9f4:	af00      	add	r7, sp, #0
//	Cl_Uint8Type start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static Cl_Uint8Type* Cl_cmdptr;
	Cl_Uint8Type tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9c9f6:	2300      	movs	r3, #0
   9c9f8:	70fb      	strb	r3, [r7, #3]
   9c9fa:	2300      	movs	r3, #0
   9c9fc:	60bb      	str	r3, [r7, #8]
   9c9fe:	2300      	movs	r3, #0
   9ca00:	607b      	str	r3, [r7, #4]
	Cl_Mac_EventsType MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (Cl_Uint8Type*)&Cl_Console_msgbuffer.Console_databuffer;
   9ca02:	4b46      	ldr	r3, [pc, #280]	; (9cb1c <Cl_Mac_Create_ConsoleEvent+0x12c>)
   9ca04:	4a46      	ldr	r2, [pc, #280]	; (9cb20 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9ca06:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9ca08:	4b45      	ldr	r3, [pc, #276]	; (9cb20 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9ca0a:	781a      	ldrb	r2, [r3, #0]
   9ca0c:	4b45      	ldr	r3, [pc, #276]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca0e:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9ca10:	4b43      	ldr	r3, [pc, #268]	; (9cb20 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9ca12:	785a      	ldrb	r2, [r3, #1]
   9ca14:	4b43      	ldr	r3, [pc, #268]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca16:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9ca18:	4b43      	ldr	r3, [pc, #268]	; (9cb28 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9ca1a:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   9ca1c:	4b43      	ldr	r3, [pc, #268]	; (9cb2c <Cl_Mac_Create_ConsoleEvent+0x13c>)
   9ca1e:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9ca20:	2300      	movs	r3, #0
   9ca22:	73fb      	strb	r3, [r7, #15]
   9ca24:	e00c      	b.n	9ca40 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   9ca26:	687b      	ldr	r3, [r7, #4]
   9ca28:	781a      	ldrb	r2, [r3, #0]
   9ca2a:	68bb      	ldr	r3, [r7, #8]
   9ca2c:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   9ca2e:	68bb      	ldr	r3, [r7, #8]
   9ca30:	3301      	adds	r3, #1
   9ca32:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   9ca34:	687b      	ldr	r3, [r7, #4]
   9ca36:	3301      	adds	r3, #1
   9ca38:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9ca3a:	7bfb      	ldrb	r3, [r7, #15]
   9ca3c:	3301      	adds	r3, #1
   9ca3e:	73fb      	strb	r3, [r7, #15]
   9ca40:	4b38      	ldr	r3, [pc, #224]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca42:	78db      	ldrb	r3, [r3, #3]
   9ca44:	7bfa      	ldrb	r2, [r7, #15]
   9ca46:	429a      	cmp	r2, r3
   9ca48:	d3ed      	bcc.n	9ca26 <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   9ca4a:	4b36      	ldr	r3, [pc, #216]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca4c:	789b      	ldrb	r3, [r3, #2]
   9ca4e:	2b04      	cmp	r3, #4
   9ca50:	d00f      	beq.n	9ca72 <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   9ca52:	4b37      	ldr	r3, [pc, #220]	; (9cb30 <Cl_Mac_Create_ConsoleEvent+0x140>)
   9ca54:	4798      	blx	r3
				test_counter++;
   9ca56:	4b37      	ldr	r3, [pc, #220]	; (9cb34 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9ca58:	881b      	ldrh	r3, [r3, #0]
   9ca5a:	3301      	adds	r3, #1
   9ca5c:	b29a      	uxth	r2, r3
   9ca5e:	4b35      	ldr	r3, [pc, #212]	; (9cb34 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9ca60:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   9ca62:	4b34      	ldr	r3, [pc, #208]	; (9cb34 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9ca64:	881b      	ldrh	r3, [r3, #0]
   9ca66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9ca6a:	d302      	bcc.n	9ca72 <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   9ca6c:	4b31      	ldr	r3, [pc, #196]	; (9cb34 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9ca6e:	2200      	movs	r2, #0
   9ca70:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   9ca72:	4b2c      	ldr	r3, [pc, #176]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca74:	789b      	ldrb	r3, [r3, #2]
   9ca76:	2b17      	cmp	r3, #23
   9ca78:	d103      	bne.n	9ca82 <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   9ca7a:	482a      	ldr	r0, [pc, #168]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca7c:	4b2e      	ldr	r3, [pc, #184]	; (9cb38 <Cl_Mac_Create_ConsoleEvent+0x148>)
   9ca7e:	4798      	blx	r3
   9ca80:	e046      	b.n	9cb10 <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   9ca82:	4b28      	ldr	r3, [pc, #160]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca84:	2201      	movs	r2, #1
   9ca86:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9ca88:	4b25      	ldr	r3, [pc, #148]	; (9cb20 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9ca8a:	2200      	movs	r2, #0
   9ca8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   9ca90:	4b24      	ldr	r3, [pc, #144]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9ca92:	789b      	ldrb	r3, [r3, #2]
   9ca94:	1cba      	adds	r2, r7, #2
   9ca96:	4611      	mov	r1, r2
   9ca98:	4618      	mov	r0, r3
   9ca9a:	4b28      	ldr	r3, [pc, #160]	; (9cb3c <Cl_Mac_Create_ConsoleEvent+0x14c>)
   9ca9c:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   9ca9e:	78ba      	ldrb	r2, [r7, #2]
   9caa0:	4b27      	ldr	r3, [pc, #156]	; (9cb40 <Cl_Mac_Create_ConsoleEvent+0x150>)
   9caa2:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   9caa4:	4b27      	ldr	r3, [pc, #156]	; (9cb44 <Cl_Mac_Create_ConsoleEvent+0x154>)
   9caa6:	2201      	movs	r2, #1
   9caa8:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9caaa:	4b27      	ldr	r3, [pc, #156]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9caac:	781b      	ldrb	r3, [r3, #0]
   9caae:	2b0a      	cmp	r3, #10
   9cab0:	d82e      	bhi.n	9cb10 <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = MacEvent ;
   9cab2:	4b25      	ldr	r3, [pc, #148]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cab4:	781b      	ldrb	r3, [r3, #0]
   9cab6:	4619      	mov	r1, r3
   9cab8:	78ba      	ldrb	r2, [r7, #2]
   9caba:	4b23      	ldr	r3, [pc, #140]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cabc:	440b      	add	r3, r1
   9cabe:	709a      	strb	r2, [r3, #2]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9cac0:	4b21      	ldr	r3, [pc, #132]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cac2:	2201      	movs	r2, #1
   9cac4:	705a      	strb	r2, [r3, #1]
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9cac6:	4b20      	ldr	r3, [pc, #128]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cac8:	781b      	ldrb	r3, [r3, #0]
   9caca:	3301      	adds	r3, #1
   9cacc:	b2da      	uxtb	r2, r3
   9cace:	4b1e      	ldr	r3, [pc, #120]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cad0:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9cad2:	4b15      	ldr	r3, [pc, #84]	; (9cb28 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9cad4:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
   9cad6:	4b1c      	ldr	r3, [pc, #112]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cad8:	781b      	ldrb	r3, [r3, #0]
   9cada:	3301      	adds	r3, #1
   9cadc:	00db      	lsls	r3, r3, #3
   9cade:	4a1a      	ldr	r2, [pc, #104]	; (9cb48 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9cae0:	4413      	add	r3, r2
   9cae2:	3304      	adds	r3, #4
   9cae4:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9cae6:	2300      	movs	r3, #0
   9cae8:	73fb      	strb	r3, [r7, #15]
   9caea:	e00c      	b.n	9cb06 <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   9caec:	687b      	ldr	r3, [r7, #4]
   9caee:	781a      	ldrb	r2, [r3, #0]
   9caf0:	68bb      	ldr	r3, [r7, #8]
   9caf2:	701a      	strb	r2, [r3, #0]
					dataptr++;
   9caf4:	68bb      	ldr	r3, [r7, #8]
   9caf6:	3301      	adds	r3, #1
   9caf8:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   9cafa:	687b      	ldr	r3, [r7, #4]
   9cafc:	3301      	adds	r3, #1
   9cafe:	607b      	str	r3, [r7, #4]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9cb00:	7bfb      	ldrb	r3, [r7, #15]
   9cb02:	3301      	adds	r3, #1
   9cb04:	73fb      	strb	r3, [r7, #15]
   9cb06:	4b07      	ldr	r3, [pc, #28]	; (9cb24 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9cb08:	78db      	ldrb	r3, [r3, #3]
   9cb0a:	7bfa      	ldrb	r2, [r7, #15]
   9cb0c:	429a      	cmp	r2, r3
   9cb0e:	d3ed      	bcc.n	9caec <Cl_Mac_Create_ConsoleEvent+0xfc>
			}
	#endif
			 		
	}
		
		return CL_OK;
   9cb10:	2300      	movs	r3, #0
}
   9cb12:	4618      	mov	r0, r3
   9cb14:	3710      	adds	r7, #16
   9cb16:	46bd      	mov	sp, r7
   9cb18:	bd80      	pop	{r7, pc}
   9cb1a:	bf00      	nop
   9cb1c:	20071ad8 	.word	0x20071ad8
   9cb20:	2007213c 	.word	0x2007213c
   9cb24:	20072350 	.word	0x20072350
   9cb28:	2007213e 	.word	0x2007213e
   9cb2c:	20072354 	.word	0x20072354
   9cb30:	0009cb4d 	.word	0x0009cb4d
   9cb34:	20071ad2 	.word	0x20071ad2
   9cb38:	00090f81 	.word	0x00090f81
   9cb3c:	0009cd41 	.word	0x0009cd41
   9cb40:	200718bf 	.word	0x200718bf
   9cb44:	200718c1 	.word	0x200718c1
   9cb48:	2007238c 	.word	0x2007238c

0009cb4c <Cl_Cosnsole_MsgAcknlowledge>:



Cl_ReturnCodeType Cl_Cosnsole_MsgAcknlowledge()
   
	{
   9cb4c:	b580      	push	{r7, lr}
   9cb4e:	b082      	sub	sp, #8
   9cb50:	af00      	add	r7, sp, #0
		Cl_Uint8Type temp;

		cl_wait(1);
   9cb52:	2001      	movs	r0, #1
   9cb54:	4b19      	ldr	r3, [pc, #100]	; (9cbbc <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   9cb56:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   9cb58:	4b19      	ldr	r3, [pc, #100]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb5a:	22cc      	movs	r2, #204	; 0xcc
   9cb5c:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   9cb5e:	4b18      	ldr	r3, [pc, #96]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb60:	22dd      	movs	r2, #221	; 0xdd
   9cb62:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   9cb64:	4b16      	ldr	r3, [pc, #88]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb66:	2204      	movs	r2, #4
   9cb68:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   9cb6a:	4b15      	ldr	r3, [pc, #84]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb6c:	2201      	movs	r2, #1
   9cb6e:	70da      	strb	r2, [r3, #3]
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   9cb70:	4b14      	ldr	r3, [pc, #80]	; (9cbc4 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9cb72:	789a      	ldrb	r2, [r3, #2]
   9cb74:	4b12      	ldr	r3, [pc, #72]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb76:	711a      	strb	r2, [r3, #4]
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   9cb78:	4b11      	ldr	r3, [pc, #68]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb7a:	22ee      	movs	r2, #238	; 0xee
   9cb7c:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   9cb7e:	4b10      	ldr	r3, [pc, #64]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb80:	22bb      	movs	r2, #187	; 0xbb
   9cb82:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   9cb84:	2300      	movs	r3, #0
   9cb86:	71fb      	strb	r3, [r7, #7]
   9cb88:	e00f      	b.n	9cbaa <Cl_Cosnsole_MsgAcknlowledge+0x5e>
		{
				cl_console_sync = 1;
   9cb8a:	4b0f      	ldr	r3, [pc, #60]	; (9cbc8 <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   9cb8c:	2201      	movs	r2, #1
   9cb8e:	701a      	strb	r2, [r3, #0]
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   9cb90:	79fb      	ldrb	r3, [r7, #7]
   9cb92:	4a0b      	ldr	r2, [pc, #44]	; (9cbc0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9cb94:	5cd3      	ldrb	r3, [r2, r3]
   9cb96:	4619      	mov	r1, r3
   9cb98:	480c      	ldr	r0, [pc, #48]	; (9cbcc <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   9cb9a:	4b0d      	ldr	r3, [pc, #52]	; (9cbd0 <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   9cb9c:	4798      	blx	r3
   9cb9e:	4603      	mov	r3, r0
   9cba0:	2b00      	cmp	r3, #0
   9cba2:	d102      	bne.n	9cbaa <Cl_Cosnsole_MsgAcknlowledge+0x5e>
			{
				temp++;				
   9cba4:	79fb      	ldrb	r3, [r7, #7]
   9cba6:	3301      	adds	r3, #1
   9cba8:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
		Cl_ConsoleTxMsg[3] = 1; //size of data
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   9cbaa:	79fb      	ldrb	r3, [r7, #7]
   9cbac:	2b06      	cmp	r3, #6
   9cbae:	d9ec      	bls.n	9cb8a <Cl_Cosnsole_MsgAcknlowledge+0x3e>
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
			{
				temp++;				
			}
		}
	return CL_OK;
   9cbb0:	2300      	movs	r3, #0
}
   9cbb2:	4618      	mov	r0, r3
   9cbb4:	3708      	adds	r7, #8
   9cbb6:	46bd      	mov	sp, r7
   9cbb8:	bd80      	pop	{r7, pc}
   9cbba:	bf00      	nop
   9cbbc:	00093ea9 	.word	0x00093ea9
   9cbc0:	200721ec 	.word	0x200721ec
   9cbc4:	20072350 	.word	0x20072350
   9cbc8:	20071ad5 	.word	0x20071ad5
   9cbcc:	400e0800 	.word	0x400e0800
   9cbd0:	0009c1a9 	.word	0x0009c1a9

0009cbd4 <Cl_SendDatatoconsole>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, Cl_Uint8Type* data,Cl_Uint8Type datasize)
{
   9cbd4:	b580      	push	{r7, lr}
   9cbd6:	b086      	sub	sp, #24
   9cbd8:	af00      	add	r7, sp, #0
   9cbda:	4603      	mov	r3, r0
   9cbdc:	6039      	str	r1, [r7, #0]
   9cbde:	71fb      	strb	r3, [r7, #7]
   9cbe0:	4613      	mov	r3, r2
   9cbe2:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount=0 , temp =4 ;
   9cbe4:	2300      	movs	r3, #0
   9cbe6:	75fb      	strb	r3, [r7, #23]
   9cbe8:	2304      	movs	r3, #4
   9cbea:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type packet_size = 0;
   9cbec:	2300      	movs	r3, #0
   9cbee:	757b      	strb	r3, [r7, #21]
	Cl_Uint8Type *dataptr=NULL, *msgdataptr =NULL;
   9cbf0:	2300      	movs	r3, #0
   9cbf2:	613b      	str	r3, [r7, #16]
   9cbf4:	2300      	movs	r3, #0
   9cbf6:	60fb      	str	r3, [r7, #12]
	static Cl_Uint8Type testcnt =0;
	


		
			if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) )// || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT))
   9cbf8:	79fb      	ldrb	r3, [r7, #7]
   9cbfa:	2b37      	cmp	r3, #55	; 0x37
   9cbfc:	f000 8085 	beq.w	9cd0a <Cl_SendDatatoconsole+0x136>
   9cc00:	79fb      	ldrb	r3, [r7, #7]
   9cc02:	2b19      	cmp	r3, #25
   9cc04:	f000 8081 	beq.w	9cd0a <Cl_SendDatatoconsole+0x136>
   9cc08:	79fb      	ldrb	r3, [r7, #7]
   9cc0a:	2b18      	cmp	r3, #24
   9cc0c:	d07d      	beq.n	9cd0a <Cl_SendDatatoconsole+0x136>
		}
		
		
	}
	
	cur_command = command;
   9cc0e:	4a42      	ldr	r2, [pc, #264]	; (9cd18 <Cl_SendDatatoconsole+0x144>)
   9cc10:	79fb      	ldrb	r3, [r7, #7]
   9cc12:	7013      	strb	r3, [r2, #0]
	cur_data = data;
   9cc14:	683b      	ldr	r3, [r7, #0]
   9cc16:	b2da      	uxtb	r2, r3
   9cc18:	4b40      	ldr	r3, [pc, #256]	; (9cd1c <Cl_SendDatatoconsole+0x148>)
   9cc1a:	701a      	strb	r2, [r3, #0]
	cur_datasize = datasize;
   9cc1c:	4a40      	ldr	r2, [pc, #256]	; (9cd20 <Cl_SendDatatoconsole+0x14c>)
   9cc1e:	79bb      	ldrb	r3, [r7, #6]
   9cc20:	7013      	strb	r3, [r2, #0]
	
	
	if (CONT_TX_COMMAND_BLOODPUMP_OFF == command)
   9cc22:	79fb      	ldrb	r3, [r7, #7]
   9cc24:	2b36      	cmp	r3, #54	; 0x36
   9cc26:	d102      	bne.n	9cc2e <Cl_SendDatatoconsole+0x5a>
	{
		syncdone = true;
   9cc28:	4b3e      	ldr	r3, [pc, #248]	; (9cd24 <Cl_SendDatatoconsole+0x150>)
   9cc2a:	2201      	movs	r2, #1
   9cc2c:	701a      	strb	r2, [r3, #0]
	}

	if(datasize>0)
   9cc2e:	79bb      	ldrb	r3, [r7, #6]
   9cc30:	2b00      	cmp	r3, #0
   9cc32:	d004      	beq.n	9cc3e <Cl_SendDatatoconsole+0x6a>
	{
		if(data != NULL)
   9cc34:	683b      	ldr	r3, [r7, #0]
   9cc36:	2b00      	cmp	r3, #0
   9cc38:	d001      	beq.n	9cc3e <Cl_SendDatatoconsole+0x6a>
		{
			dataptr = data;	
   9cc3a:	683b      	ldr	r3, [r7, #0]
   9cc3c:	613b      	str	r3, [r7, #16]
		}
			
	}
	
	packet_size = datasize + 6;
   9cc3e:	79bb      	ldrb	r3, [r7, #6]
   9cc40:	3306      	adds	r3, #6
   9cc42:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   9cc44:	4b38      	ldr	r3, [pc, #224]	; (9cd28 <Cl_SendDatatoconsole+0x154>)
   9cc46:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
   9cc48:	4b38      	ldr	r3, [pc, #224]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cc4a:	22cc      	movs	r2, #204	; 0xcc
   9cc4c:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
   9cc4e:	4b37      	ldr	r3, [pc, #220]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cc50:	22dd      	movs	r2, #221	; 0xdd
   9cc52:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   9cc54:	4a35      	ldr	r2, [pc, #212]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cc56:	79fb      	ldrb	r3, [r7, #7]
   9cc58:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   9cc5a:	4a34      	ldr	r2, [pc, #208]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cc5c:	79bb      	ldrb	r3, [r7, #6]
   9cc5e:	70d3      	strb	r3, [r2, #3]
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9cc60:	2300      	movs	r3, #0
   9cc62:	75fb      	strb	r3, [r7, #23]
   9cc64:	e00c      	b.n	9cc80 <Cl_SendDatatoconsole+0xac>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   9cc66:	7dbb      	ldrb	r3, [r7, #22]
   9cc68:	7dfa      	ldrb	r2, [r7, #23]
   9cc6a:	6839      	ldr	r1, [r7, #0]
   9cc6c:	440a      	add	r2, r1
   9cc6e:	7811      	ldrb	r1, [r2, #0]
   9cc70:	4a2e      	ldr	r2, [pc, #184]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cc72:	54d1      	strb	r1, [r2, r3]
		temp++;
   9cc74:	7dbb      	ldrb	r3, [r7, #22]
   9cc76:	3301      	adds	r3, #1
   9cc78:	75bb      	strb	r3, [r7, #22]
	msgdataptr = &Cl_ConsoleTxMsg[4];
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9cc7a:	7dfb      	ldrb	r3, [r7, #23]
   9cc7c:	3301      	adds	r3, #1
   9cc7e:	75fb      	strb	r3, [r7, #23]
   9cc80:	7dfa      	ldrb	r2, [r7, #23]
   9cc82:	79bb      	ldrb	r3, [r7, #6]
   9cc84:	429a      	cmp	r2, r3
   9cc86:	d3ee      	bcc.n	9cc66 <Cl_SendDatatoconsole+0x92>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (Cl_Uint8Type)'D';
   9cc88:	7dbb      	ldrb	r3, [r7, #22]
   9cc8a:	1c5a      	adds	r2, r3, #1
   9cc8c:	75ba      	strb	r2, [r7, #22]
   9cc8e:	461a      	mov	r2, r3
   9cc90:	4b26      	ldr	r3, [pc, #152]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cc92:	21ee      	movs	r1, #238	; 0xee
   9cc94:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (Cl_Uint8Type)'F';
   9cc96:	7dbb      	ldrb	r3, [r7, #22]
   9cc98:	1c5a      	adds	r2, r3, #1
   9cc9a:	75ba      	strb	r2, [r7, #22]
   9cc9c:	461a      	mov	r2, r3
   9cc9e:	4b23      	ldr	r3, [pc, #140]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cca0:	21bb      	movs	r1, #187	; 0xbb
   9cca2:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   9cca4:	4b1f      	ldr	r3, [pc, #124]	; (9cd24 <Cl_SendDatatoconsole+0x150>)
   9cca6:	781b      	ldrb	r3, [r3, #0]
   9cca8:	2b00      	cmp	r3, #0
   9ccaa:	d013      	beq.n	9ccd4 <Cl_SendDatatoconsole+0x100>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   9ccac:	4b20      	ldr	r3, [pc, #128]	; (9cd30 <Cl_SendDatatoconsole+0x15c>)
   9ccae:	22aa      	movs	r2, #170	; 0xaa
   9ccb0:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9ccb2:	2300      	movs	r3, #0
   9ccb4:	75fb      	strb	r3, [r7, #23]
   9ccb6:	e009      	b.n	9cccc <Cl_SendDatatoconsole+0xf8>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   9ccb8:	7dfb      	ldrb	r3, [r7, #23]
   9ccba:	3301      	adds	r3, #1
   9ccbc:	7dfa      	ldrb	r2, [r7, #23]
   9ccbe:	491b      	ldr	r1, [pc, #108]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9ccc0:	5c89      	ldrb	r1, [r1, r2]
   9ccc2:	4a1b      	ldr	r2, [pc, #108]	; (9cd30 <Cl_SendDatatoconsole+0x15c>)
   9ccc4:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9ccc6:	7dfb      	ldrb	r3, [r7, #23]
   9ccc8:	3301      	adds	r3, #1
   9ccca:	75fb      	strb	r3, [r7, #23]
   9cccc:	7dfa      	ldrb	r2, [r7, #23]
   9ccce:	7d7b      	ldrb	r3, [r7, #21]
   9ccd0:	429a      	cmp	r2, r3
   9ccd2:	d3f1      	bcc.n	9ccb8 <Cl_SendDatatoconsole+0xe4>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9ccd4:	2300      	movs	r3, #0
   9ccd6:	75fb      	strb	r3, [r7, #23]
   9ccd8:	e00e      	b.n	9ccf8 <Cl_SendDatatoconsole+0x124>
	//	else if (tempcount == ( packet_size - 1 ))
	//	{
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	cl_console_sync = 1;
   9ccda:	4b16      	ldr	r3, [pc, #88]	; (9cd34 <Cl_SendDatatoconsole+0x160>)
   9ccdc:	2201      	movs	r2, #1
   9ccde:	701a      	strb	r2, [r3, #0]
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   9cce0:	7dfb      	ldrb	r3, [r7, #23]
   9cce2:	4a12      	ldr	r2, [pc, #72]	; (9cd2c <Cl_SendDatatoconsole+0x158>)
   9cce4:	5cd3      	ldrb	r3, [r2, r3]
   9cce6:	4618      	mov	r0, r3
   9cce8:	4b13      	ldr	r3, [pc, #76]	; (9cd38 <Cl_SendDatatoconsole+0x164>)
   9ccea:	4798      	blx	r3
   9ccec:	4603      	mov	r3, r0
   9ccee:	2b00      	cmp	r3, #0
   9ccf0:	d102      	bne.n	9ccf8 <Cl_SendDatatoconsole+0x124>
	
		{
			tempcount++;
   9ccf2:	7dfb      	ldrb	r3, [r7, #23]
   9ccf4:	3301      	adds	r3, #1
   9ccf6:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9ccf8:	7dfa      	ldrb	r2, [r7, #23]
   9ccfa:	7d7b      	ldrb	r3, [r7, #21]
   9ccfc:	429a      	cmp	r2, r3
   9ccfe:	d3ec      	bcc.n	9ccda <Cl_SendDatatoconsole+0x106>
		//	printf("%s",Cl_ConsoleTxMsg);
		//printf("\n");
		
	}
	
ackCommand = command;	
   9cd00:	4a0e      	ldr	r2, [pc, #56]	; (9cd3c <Cl_SendDatatoconsole+0x168>)
   9cd02:	79fb      	ldrb	r3, [r7, #7]
   9cd04:	7013      	strb	r3, [r2, #0]

//	printf("\n");
//cl_wait(5);                     // check if needed 21082017
	return CL_OK;
   9cd06:	2300      	movs	r3, #0
   9cd08:	e001      	b.n	9cd0e <Cl_SendDatatoconsole+0x13a>
			if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) )// || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT))
		//	if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) ||(command == CON_TX_COMMAND_COMMAND_SYSTEM_STATE )  || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT) || (command == CON_TX_COMMAND_ALARM))
		
		//	if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) ) //|| (command == CON_TX_COMMAND_ALARM)
			{
				return;  /**************  To be returned for proper working with tablet ******/////  comment return to work with script
   9cd0a:	bf00      	nop
   9cd0c:	bf00      	nop
ackCommand = command;	

//	printf("\n");
//cl_wait(5);                     // check if needed 21082017
	return CL_OK;
}
   9cd0e:	4618      	mov	r0, r3
   9cd10:	3718      	adds	r7, #24
   9cd12:	46bd      	mov	sp, r7
   9cd14:	bd80      	pop	{r7, pc}
   9cd16:	bf00      	nop
   9cd18:	200727d5 	.word	0x200727d5
   9cd1c:	200727d6 	.word	0x200727d6
   9cd20:	200727d4 	.word	0x200727d4
   9cd24:	20071ad0 	.word	0x20071ad0
   9cd28:	200721f0 	.word	0x200721f0
   9cd2c:	200721ec 	.word	0x200721ec
   9cd30:	200724a8 	.word	0x200724a8
   9cd34:	20071ad5 	.word	0x20071ad5
   9cd38:	0009b10d 	.word	0x0009b10d
   9cd3c:	200727d7 	.word	0x200727d7

0009cd40 <Cl_Console_ConvertConsoleEvent_toMacEvent>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
{
   9cd40:	b480      	push	{r7}
   9cd42:	b083      	sub	sp, #12
   9cd44:	af00      	add	r7, sp, #0
   9cd46:	4603      	mov	r3, r0
   9cd48:	6039      	str	r1, [r7, #0]
   9cd4a:	71fb      	strb	r3, [r7, #7]

	switch(command)
   9cd4c:	79fb      	ldrb	r3, [r7, #7]
   9cd4e:	3b03      	subs	r3, #3
   9cd50:	2b39      	cmp	r3, #57	; 0x39
   9cd52:	f200 814b 	bhi.w	9cfec <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ac>
   9cd56:	a201      	add	r2, pc, #4	; (adr r2, 9cd5c <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   9cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cd5c:	0009ce45 	.word	0x0009ce45
   9cd60:	0009ce55 	.word	0x0009ce55
   9cd64:	0009ce5d 	.word	0x0009ce5d
   9cd68:	0009cfed 	.word	0x0009cfed
   9cd6c:	0009cf4d 	.word	0x0009cf4d
   9cd70:	0009cee5 	.word	0x0009cee5
   9cd74:	0009ce95 	.word	0x0009ce95
   9cd78:	0009ce9d 	.word	0x0009ce9d
   9cd7c:	0009ce75 	.word	0x0009ce75
   9cd80:	0009ce7d 	.word	0x0009ce7d
   9cd84:	0009ce85 	.word	0x0009ce85
   9cd88:	0009cea5 	.word	0x0009cea5
   9cd8c:	0009ceb5 	.word	0x0009ceb5
   9cd90:	0009cec5 	.word	0x0009cec5
   9cd94:	0009cef5 	.word	0x0009cef5
   9cd98:	0009cefd 	.word	0x0009cefd
   9cd9c:	0009cf2d 	.word	0x0009cf2d
   9cda0:	0009cf35 	.word	0x0009cf35
   9cda4:	0009ce4d 	.word	0x0009ce4d
   9cda8:	0009cfd5 	.word	0x0009cfd5
   9cdac:	0009cfed 	.word	0x0009cfed
   9cdb0:	0009ce8d 	.word	0x0009ce8d
   9cdb4:	0009cead 	.word	0x0009cead
   9cdb8:	0009cf55 	.word	0x0009cf55
   9cdbc:	0009cf5d 	.word	0x0009cf5d
   9cdc0:	0009cf65 	.word	0x0009cf65
   9cdc4:	0009cf6d 	.word	0x0009cf6d
   9cdc8:	0009ceed 	.word	0x0009ceed
   9cdcc:	0009cf75 	.word	0x0009cf75
   9cdd0:	0009cebd 	.word	0x0009cebd
   9cdd4:	0009cf7d 	.word	0x0009cf7d
   9cdd8:	0009cf85 	.word	0x0009cf85
   9cddc:	0009cf8d 	.word	0x0009cf8d
   9cde0:	0009cf95 	.word	0x0009cf95
   9cde4:	0009cfa5 	.word	0x0009cfa5
   9cde8:	0009cfad 	.word	0x0009cfad
   9cdec:	0009cf3d 	.word	0x0009cf3d
   9cdf0:	0009cf45 	.word	0x0009cf45
   9cdf4:	0009cfb5 	.word	0x0009cfb5
   9cdf8:	0009cfbd 	.word	0x0009cfbd
   9cdfc:	0009cf9d 	.word	0x0009cf9d
   9ce00:	0009ce65 	.word	0x0009ce65
   9ce04:	0009cfed 	.word	0x0009cfed
   9ce08:	0009cfed 	.word	0x0009cfed
   9ce0c:	0009ce6d 	.word	0x0009ce6d
   9ce10:	0009cfed 	.word	0x0009cfed
   9ce14:	0009cecd 	.word	0x0009cecd
   9ce18:	0009ced5 	.word	0x0009ced5
   9ce1c:	0009cedd 	.word	0x0009cedd
   9ce20:	0009cfc5 	.word	0x0009cfc5
   9ce24:	0009cfcd 	.word	0x0009cfcd
   9ce28:	0009cfdd 	.word	0x0009cfdd
   9ce2c:	0009cfe5 	.word	0x0009cfe5
   9ce30:	0009cf05 	.word	0x0009cf05
   9ce34:	0009cf0d 	.word	0x0009cf0d
   9ce38:	0009cf15 	.word	0x0009cf15
   9ce3c:	0009cf1d 	.word	0x0009cf1d
   9ce40:	0009cf25 	.word	0x0009cf25
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   9ce44:	683b      	ldr	r3, [r7, #0]
   9ce46:	2201      	movs	r2, #1
   9ce48:	701a      	strb	r2, [r3, #0]
		break;
   9ce4a:	e0d0      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_CLR_ALARM:
		*MacEvent = EVT_CONSOLE_COMMAND_CLR_ALARM;
   9ce4c:	683b      	ldr	r3, [r7, #0]
   9ce4e:	2229      	movs	r2, #41	; 0x29
   9ce50:	701a      	strb	r2, [r3, #0]
		break;
   9ce52:	e0cc      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   9ce54:	683b      	ldr	r3, [r7, #0]
   9ce56:	2202      	movs	r2, #2
   9ce58:	701a      	strb	r2, [r3, #0]
		break;
   9ce5a:	e0c8      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   9ce5c:	683b      	ldr	r3, [r7, #0]
   9ce5e:	2207      	movs	r2, #7
   9ce60:	701a      	strb	r2, [r3, #0]
		break;
   9ce62:	e0c4      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   9ce64:	683b      	ldr	r3, [r7, #0]
   9ce66:	223f      	movs	r2, #63	; 0x3f
   9ce68:	701a      	strb	r2, [r3, #0]
		break;
   9ce6a:	e0c0      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   9ce6c:	683b      	ldr	r3, [r7, #0]
   9ce6e:	2240      	movs	r2, #64	; 0x40
   9ce70:	701a      	strb	r2, [r3, #0]
		break;
   9ce72:	e0bc      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   9ce74:	683b      	ldr	r3, [r7, #0]
   9ce76:	220a      	movs	r2, #10
   9ce78:	701a      	strb	r2, [r3, #0]
		break;
   9ce7a:	e0b8      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   9ce7c:	683b      	ldr	r3, [r7, #0]
   9ce7e:	220b      	movs	r2, #11
   9ce80:	701a      	strb	r2, [r3, #0]
		break;
   9ce82:	e0b4      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   9ce84:	683b      	ldr	r3, [r7, #0]
   9ce86:	220c      	movs	r2, #12
   9ce88:	701a      	strb	r2, [r3, #0]
		break;
   9ce8a:	e0b0      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   9ce8c:	683b      	ldr	r3, [r7, #0]
   9ce8e:	2211      	movs	r2, #17
   9ce90:	701a      	strb	r2, [r3, #0]
		break;
   9ce92:	e0ac      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   9ce94:	683b      	ldr	r3, [r7, #0]
   9ce96:	220d      	movs	r2, #13
   9ce98:	701a      	strb	r2, [r3, #0]
		break;
   9ce9a:	e0a8      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   9ce9c:	683b      	ldr	r3, [r7, #0]
   9ce9e:	220e      	movs	r2, #14
   9cea0:	701a      	strb	r2, [r3, #0]
		break;
   9cea2:	e0a4      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   9cea4:	683b      	ldr	r3, [r7, #0]
   9cea6:	220f      	movs	r2, #15
   9cea8:	701a      	strb	r2, [r3, #0]
		break;
   9ceaa:	e0a0      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   9ceac:	683b      	ldr	r3, [r7, #0]
   9ceae:	2210      	movs	r2, #16
   9ceb0:	701a      	strb	r2, [r3, #0]
		break;
   9ceb2:	e09c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   9ceb4:	683b      	ldr	r3, [r7, #0]
   9ceb6:	2213      	movs	r2, #19
   9ceb8:	701a      	strb	r2, [r3, #0]
		break;
   9ceba:	e098      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   9cebc:	683b      	ldr	r3, [r7, #0]
   9cebe:	2214      	movs	r2, #20
   9cec0:	701a      	strb	r2, [r3, #0]
		break;
   9cec2:	e094      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEP_PMP_RATE:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_RATE;
   9cec4:	683b      	ldr	r3, [r7, #0]
   9cec6:	2215      	movs	r2, #21
   9cec8:	701a      	strb	r2, [r3, #0]
		break;
   9ceca:	e090      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEPARIN_BOLUS:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_BOLUS;
   9cecc:	683b      	ldr	r3, [r7, #0]
   9cece:	2226      	movs	r2, #38	; 0x26
   9ced0:	701a      	strb	r2, [r3, #0]
		break;
   9ced2:	e08c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEPARIN_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_START;
   9ced4:	683b      	ldr	r3, [r7, #0]
   9ced6:	2227      	movs	r2, #39	; 0x27
   9ced8:	701a      	strb	r2, [r3, #0]
		break;
   9ceda:	e088      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_HEPARIN_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_STOP;
   9cedc:	683b      	ldr	r3, [r7, #0]
   9cede:	2228      	movs	r2, #40	; 0x28
   9cee0:	701a      	strb	r2, [r3, #0]
		break;
   9cee2:	e084      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   9cee4:	683b      	ldr	r3, [r7, #0]
   9cee6:	2209      	movs	r2, #9
   9cee8:	701a      	strb	r2, [r3, #0]
		break;
   9ceea:	e080      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   9ceec:	683b      	ldr	r3, [r7, #0]
   9ceee:	2212      	movs	r2, #18
   9cef0:	701a      	strb	r2, [r3, #0]
		break;
   9cef2:	e07c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   9cef4:	683b      	ldr	r3, [r7, #0]
   9cef6:	2216      	movs	r2, #22
   9cef8:	701a      	strb	r2, [r3, #0]
		break;
   9cefa:	e078      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   9cefc:	683b      	ldr	r3, [r7, #0]
   9cefe:	2217      	movs	r2, #23
   9cf00:	701a      	strb	r2, [r3, #0]
		break;
   9cf02:	e074      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_COMMAND_SELFTEST_START:        //for selftest
		     *MacEvent = EVT_CONSOLE_COMMAND_SELFTEST_START;
   9cf04:	683b      	ldr	r3, [r7, #0]
   9cf06:	2262      	movs	r2, #98	; 0x62
   9cf08:	701a      	strb	r2, [r3, #0]
			 break;
   9cf0a:	e070      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
			 
			case CON_RX_COMMAND_SELFTEST_ALARM_OK:
			*MacEvent = EVT_COSOLE_COMMAND_SELFTEST_ALARM_PAAS;
   9cf0c:	683b      	ldr	r3, [r7, #0]
   9cf0e:	2263      	movs	r2, #99	; 0x63
   9cf10:	701a      	strb	r2, [r3, #0]
			 break;
   9cf12:	e06c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
			 	case CON_RX_COMMAND_SELFTEST_ALARM_FAIL:
			 	*MacEvent = EVT_COSOLE_COMMAND_SELFTEST_ALARM_FAIL;
   9cf14:	683b      	ldr	r3, [r7, #0]
   9cf16:	2264      	movs	r2, #100	; 0x64
   9cf18:	701a      	strb	r2, [r3, #0]
			 	break;
   9cf1a:	e068      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SELFTEST_STOP:        //for selftest
		*MacEvent = EVT_CONSOLE_COMMAND_SELFTEST_STOP;
   9cf1c:	683b      	ldr	r3, [r7, #0]
   9cf1e:	2266      	movs	r2, #102	; 0x66
   9cf20:	701a      	strb	r2, [r3, #0]
		break;
   9cf22:	e064      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_SYNCCONFIMED:
		*MacEvent = EVT_CONSOLE_COMMAND_SYNCCONFIRMED;
   9cf24:	683b      	ldr	r3, [r7, #0]
   9cf26:	2267      	movs	r2, #103	; 0x67
   9cf28:	701a      	strb	r2, [r3, #0]
		
		break;
   9cf2a:	e060      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   9cf2c:	683b      	ldr	r3, [r7, #0]
   9cf2e:	2218      	movs	r2, #24
   9cf30:	701a      	strb	r2, [r3, #0]
		break;
   9cf32:	e05c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   9cf34:	683b      	ldr	r3, [r7, #0]
   9cf36:	2219      	movs	r2, #25
   9cf38:	701a      	strb	r2, [r3, #0]
		break;
   9cf3a:	e058      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   9cf3c:	683b      	ldr	r3, [r7, #0]
   9cf3e:	221a      	movs	r2, #26
   9cf40:	701a      	strb	r2, [r3, #0]
		break;
   9cf42:	e054      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   9cf44:	683b      	ldr	r3, [r7, #0]
   9cf46:	221b      	movs	r2, #27
   9cf48:	701a      	strb	r2, [r3, #0]
		break;
   9cf4a:	e050      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   9cf4c:	683b      	ldr	r3, [r7, #0]
   9cf4e:	2208      	movs	r2, #8
   9cf50:	701a      	strb	r2, [r3, #0]
		break;
   9cf52:	e04c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   9cf54:	683b      	ldr	r3, [r7, #0]
   9cf56:	2203      	movs	r2, #3
   9cf58:	701a      	strb	r2, [r3, #0]
		break;
   9cf5a:	e048      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   9cf5c:	683b      	ldr	r3, [r7, #0]
   9cf5e:	2204      	movs	r2, #4
   9cf60:	701a      	strb	r2, [r3, #0]
		break;
   9cf62:	e044      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   9cf64:	683b      	ldr	r3, [r7, #0]
   9cf66:	2205      	movs	r2, #5
   9cf68:	701a      	strb	r2, [r3, #0]
		break;
   9cf6a:	e040      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   9cf6c:	683b      	ldr	r3, [r7, #0]
   9cf6e:	2206      	movs	r2, #6
   9cf70:	701a      	strb	r2, [r3, #0]
		break;
   9cf72:	e03c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   9cf74:	683b      	ldr	r3, [r7, #0]
   9cf76:	221c      	movs	r2, #28
   9cf78:	701a      	strb	r2, [r3, #0]
		break;
   9cf7a:	e038      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   9cf7c:	683b      	ldr	r3, [r7, #0]
   9cf7e:	221d      	movs	r2, #29
   9cf80:	701a      	strb	r2, [r3, #0]
		break;
   9cf82:	e034      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   9cf84:	683b      	ldr	r3, [r7, #0]
   9cf86:	221e      	movs	r2, #30
   9cf88:	701a      	strb	r2, [r3, #0]
		break;
   9cf8a:	e030      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   9cf8c:	683b      	ldr	r3, [r7, #0]
   9cf8e:	221f      	movs	r2, #31
   9cf90:	701a      	strb	r2, [r3, #0]
		break;
   9cf92:	e02c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   9cf94:	683b      	ldr	r3, [r7, #0]
   9cf96:	2220      	movs	r2, #32
   9cf98:	701a      	strb	r2, [r3, #0]
		break;
   9cf9a:	e028      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   9cf9c:	683b      	ldr	r3, [r7, #0]
   9cf9e:	2221      	movs	r2, #33	; 0x21
   9cfa0:	701a      	strb	r2, [r3, #0]
		break;
   9cfa2:	e024      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   9cfa4:	683b      	ldr	r3, [r7, #0]
   9cfa6:	2222      	movs	r2, #34	; 0x22
   9cfa8:	701a      	strb	r2, [r3, #0]
		break;
   9cfaa:	e020      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   9cfac:	683b      	ldr	r3, [r7, #0]
   9cfae:	2223      	movs	r2, #35	; 0x23
   9cfb0:	701a      	strb	r2, [r3, #0]
		break;			
   9cfb2:	e01c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   9cfb4:	683b      	ldr	r3, [r7, #0]
   9cfb6:	2224      	movs	r2, #36	; 0x24
   9cfb8:	701a      	strb	r2, [r3, #0]
		break;
   9cfba:	e018      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   9cfbc:	683b      	ldr	r3, [r7, #0]
   9cfbe:	2225      	movs	r2, #37	; 0x25
   9cfc0:	701a      	strb	r2, [r3, #0]
		break;
   9cfc2:	e014      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_ISOUF_START:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_START;
   9cfc4:	683b      	ldr	r3, [r7, #0]
   9cfc6:	2258      	movs	r2, #88	; 0x58
   9cfc8:	701a      	strb	r2, [r3, #0]
		break;
   9cfca:	e010      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_ISOUF_STOP:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_STOP;
   9cfcc:	683b      	ldr	r3, [r7, #0]
   9cfce:	2259      	movs	r2, #89	; 0x59
   9cfd0:	701a      	strb	r2, [r3, #0]
		break;
   9cfd2:	e00c      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_COMMAND_MUTE:
		*MacEvent = EVT_CONSOLE_COMMAND_MUTE_ALARM;
   9cfd4:	683b      	ldr	r3, [r7, #0]
   9cfd6:	225f      	movs	r2, #95	; 0x5f
   9cfd8:	701a      	strb	r2, [r3, #0]
		break;
   9cfda:	e008      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_DLSIS_ISOUF_ON :
		*MacEvent =EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_ON;
   9cfdc:	683b      	ldr	r3, [r7, #0]
   9cfde:	2260      	movs	r2, #96	; 0x60
   9cfe0:	701a      	strb	r2, [r3, #0]
		break;
   9cfe2:	e004      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		case CON_RX_EVT_COMMAND_DLSIS_ISOUF_OFF:
		*MacEvent =EVT_CONSOLE_COMMAND_DIALYSIS_ISOUF_OFF;
   9cfe4:	683b      	ldr	r3, [r7, #0]
   9cfe6:	2261      	movs	r2, #97	; 0x61
   9cfe8:	701a      	strb	r2, [r3, #0]
		break;
   9cfea:	e000      	b.n	9cfee <Cl_Console_ConvertConsoleEvent_toMacEvent+0x2ae>
		default:
		break;
   9cfec:	bf00      	nop
	}
	return CL_OK;
   9cfee:	2300      	movs	r3, #0
}
   9cff0:	4618      	mov	r0, r3
   9cff2:	370c      	adds	r7, #12
   9cff4:	46bd      	mov	sp, r7
   9cff6:	bc80      	pop	{r7}
   9cff8:	4770      	bx	lr
   9cffa:	bf00      	nop

0009cffc <Cl_Console_Console_Sync>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Console_Console_Sync(void)
{
   9cffc:	b580      	push	{r7, lr}
   9cffe:	b082      	sub	sp, #8
   9d000:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval = CL_ERROR;
   9d002:	2304      	movs	r3, #4
   9d004:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   9d006:	2300      	movs	r3, #0
   9d008:	71bb      	strb	r3, [r7, #6]
	
	Cl_Uint8Type CmdData =0;
   9d00a:	2300      	movs	r3, #0
   9d00c:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9d00e:	e07f      	b.n	9d110 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   9d010:	79bb      	ldrb	r3, [r7, #6]
   9d012:	2b03      	cmp	r3, #3
   9d014:	d87b      	bhi.n	9d10e <Cl_Console_Console_Sync+0x112>
   9d016:	a201      	add	r2, pc, #4	; (adr r2, 9d01c <Cl_Console_Console_Sync+0x20>)
   9d018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d01c:	0009d02d 	.word	0x0009d02d
   9d020:	0009d067 	.word	0x0009d067
   9d024:	0009d083 	.word	0x0009d083
   9d028:	0009d103 	.word	0x0009d103
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9d02c:	4b3d      	ldr	r3, [pc, #244]	; (9d124 <Cl_Console_Console_Sync+0x128>)
   9d02e:	4798      	blx	r3
   9d030:	4603      	mov	r3, r0
   9d032:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   9d034:	79fb      	ldrb	r3, [r7, #7]
   9d036:	2b00      	cmp	r3, #0
   9d038:	d112      	bne.n	9d060 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9d03a:	4b3b      	ldr	r3, [pc, #236]	; (9d128 <Cl_Console_Console_Sync+0x12c>)
   9d03c:	781a      	ldrb	r2, [r3, #0]
   9d03e:	4b3b      	ldr	r3, [pc, #236]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d040:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   9d042:	4b3a      	ldr	r3, [pc, #232]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d044:	789b      	ldrb	r3, [r3, #2]
   9d046:	2b03      	cmp	r3, #3
   9d048:	d10a      	bne.n	9d060 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   9d04a:	4b39      	ldr	r3, [pc, #228]	; (9d130 <Cl_Console_Console_Sync+0x134>)
   9d04c:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   9d04e:	4b37      	ldr	r3, [pc, #220]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d050:	2201      	movs	r2, #1
   9d052:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9d054:	4b34      	ldr	r3, [pc, #208]	; (9d128 <Cl_Console_Console_Sync+0x12c>)
   9d056:	2200      	movs	r2, #0
   9d058:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   9d05c:	2301      	movs	r3, #1
   9d05e:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   9d060:	2301      	movs	r3, #1
   9d062:	71fb      	strb	r3, [r7, #7]
								
			break;
   9d064:	e054      	b.n	9d110 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   9d066:	200a      	movs	r0, #10
   9d068:	4b32      	ldr	r3, [pc, #200]	; (9d134 <Cl_Console_Console_Sync+0x138>)
   9d06a:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   9d06c:	1d7b      	adds	r3, r7, #5
   9d06e:	2200      	movs	r2, #0
   9d070:	4619      	mov	r1, r3
   9d072:	2003      	movs	r0, #3
   9d074:	4b30      	ldr	r3, [pc, #192]	; (9d138 <Cl_Console_Console_Sync+0x13c>)
   9d076:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   9d078:	2302      	movs	r3, #2
   9d07a:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   9d07c:	2301      	movs	r3, #1
   9d07e:	71fb      	strb	r3, [r7, #7]
				break;
   9d080:	e046      	b.n	9d110 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9d082:	4b28      	ldr	r3, [pc, #160]	; (9d124 <Cl_Console_Console_Sync+0x128>)
   9d084:	4798      	blx	r3
   9d086:	4603      	mov	r3, r0
   9d088:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   9d08a:	79fb      	ldrb	r3, [r7, #7]
   9d08c:	2b00      	cmp	r3, #0
   9d08e:	d13f      	bne.n	9d110 <Cl_Console_Console_Sync+0x114>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9d090:	4b25      	ldr	r3, [pc, #148]	; (9d128 <Cl_Console_Console_Sync+0x12c>)
   9d092:	781a      	ldrb	r2, [r3, #0]
   9d094:	4b25      	ldr	r3, [pc, #148]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d096:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9d098:	4b23      	ldr	r3, [pc, #140]	; (9d128 <Cl_Console_Console_Sync+0x12c>)
   9d09a:	785a      	ldrb	r2, [r3, #1]
   9d09c:	4b23      	ldr	r3, [pc, #140]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d09e:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   9d0a0:	4b21      	ldr	r3, [pc, #132]	; (9d128 <Cl_Console_Console_Sync+0x12c>)
   9d0a2:	789a      	ldrb	r2, [r3, #2]
   9d0a4:	4b21      	ldr	r3, [pc, #132]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d0a6:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   9d0a8:	4b20      	ldr	r3, [pc, #128]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d0aa:	789b      	ldrb	r3, [r3, #2]
   9d0ac:	2b04      	cmp	r3, #4
   9d0ae:	d125      	bne.n	9d0fc <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   9d0b0:	4b1e      	ldr	r3, [pc, #120]	; (9d12c <Cl_Console_Console_Sync+0x130>)
   9d0b2:	791b      	ldrb	r3, [r3, #4]
   9d0b4:	2b03      	cmp	r3, #3
   9d0b6:	d12b      	bne.n	9d110 <Cl_Console_Console_Sync+0x114>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   9d0b8:	2303      	movs	r3, #3
   9d0ba:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9d0bc:	4b1f      	ldr	r3, [pc, #124]	; (9d13c <Cl_Console_Console_Sync+0x140>)
   9d0be:	781b      	ldrb	r3, [r3, #0]
   9d0c0:	2b0a      	cmp	r3, #10
   9d0c2:	d80f      	bhi.n	9d0e4 <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   9d0c4:	4b1d      	ldr	r3, [pc, #116]	; (9d13c <Cl_Console_Console_Sync+0x140>)
   9d0c6:	781b      	ldrb	r3, [r3, #0]
   9d0c8:	461a      	mov	r2, r3
   9d0ca:	4b1c      	ldr	r3, [pc, #112]	; (9d13c <Cl_Console_Console_Sync+0x140>)
   9d0cc:	4413      	add	r3, r2
   9d0ce:	222a      	movs	r2, #42	; 0x2a
   9d0d0:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9d0d2:	4b1a      	ldr	r3, [pc, #104]	; (9d13c <Cl_Console_Console_Sync+0x140>)
   9d0d4:	2201      	movs	r2, #1
   9d0d6:	705a      	strb	r2, [r3, #1]
								 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9d0d8:	4b18      	ldr	r3, [pc, #96]	; (9d13c <Cl_Console_Console_Sync+0x140>)
   9d0da:	781b      	ldrb	r3, [r3, #0]
   9d0dc:	3301      	adds	r3, #1
   9d0de:	b2da      	uxtb	r2, r3
   9d0e0:	4b16      	ldr	r3, [pc, #88]	; (9d13c <Cl_Console_Console_Sync+0x140>)
   9d0e2:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   9d0e4:	4b16      	ldr	r3, [pc, #88]	; (9d140 <Cl_Console_Console_Sync+0x144>)
   9d0e6:	2201      	movs	r2, #1
   9d0e8:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   9d0ea:	4b16      	ldr	r3, [pc, #88]	; (9d144 <Cl_Console_Console_Sync+0x148>)
   9d0ec:	2202      	movs	r2, #2
   9d0ee:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   9d0f0:	2300      	movs	r3, #0
   9d0f2:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   9d0f4:	4b14      	ldr	r3, [pc, #80]	; (9d148 <Cl_Console_Console_Sync+0x14c>)
   9d0f6:	2200      	movs	r2, #0
   9d0f8:	701a      	strb	r2, [r3, #0]
   9d0fa:	e009      	b.n	9d110 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   9d0fc:	2301      	movs	r3, #1
   9d0fe:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   9d100:	e006      	b.n	9d110 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   9d102:	4b10      	ldr	r3, [pc, #64]	; (9d144 <Cl_Console_Console_Sync+0x148>)
   9d104:	2202      	movs	r2, #2
   9d106:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   9d108:	2300      	movs	r3, #0
   9d10a:	71fb      	strb	r3, [r7, #7]
			break;
   9d10c:	e000      	b.n	9d110 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   9d10e:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	Cl_Uint8Type CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9d110:	4b0c      	ldr	r3, [pc, #48]	; (9d144 <Cl_Console_Console_Sync+0x148>)
   9d112:	781b      	ldrb	r3, [r3, #0]
   9d114:	2b01      	cmp	r3, #1
   9d116:	f43f af7b 	beq.w	9d010 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   9d11a:	79fb      	ldrb	r3, [r7, #7]
 }
   9d11c:	4618      	mov	r0, r3
   9d11e:	3708      	adds	r7, #8
   9d120:	46bd      	mov	sp, r7
   9d122:	bd80      	pop	{r7, pc}
   9d124:	0009d165 	.word	0x0009d165
   9d128:	2007213c 	.word	0x2007213c
   9d12c:	20072350 	.word	0x20072350
   9d130:	0009cb4d 	.word	0x0009cb4d
   9d134:	00093ea9 	.word	0x00093ea9
   9d138:	0009cbd5 	.word	0x0009cbd5
   9d13c:	2007238c 	.word	0x2007238c
   9d140:	20071ad0 	.word	0x20071ad0
   9d144:	20070b0c 	.word	0x20070b0c
   9d148:	20071ad4 	.word	0x20071ad4

0009d14c <Cl_Console_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
 
 Cl_ReturnCodeType Cl_Console_init(void)
 {
   9d14c:	b480      	push	{r7}
   9d14e:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   9d150:	4b03      	ldr	r3, [pc, #12]	; (9d160 <Cl_Console_init+0x14>)
   9d152:	2201      	movs	r2, #1
   9d154:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   9d156:	2300      	movs	r3, #0
 }
   9d158:	4618      	mov	r0, r3
   9d15a:	46bd      	mov	sp, r7
   9d15c:	bc80      	pop	{r7}
   9d15e:	4770      	bx	lr
   9d160:	20070b0c 	.word	0x20070b0c

0009d164 <Cl_Console_SyncGetMessage>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
  Cl_ReturnCodeType Cl_Console_SyncGetMessage()
  {
   9d164:	b580      	push	{r7, lr}
   9d166:	b082      	sub	sp, #8
   9d168:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType  Cl_ConsoleRetval1 = CL_WAIT;
   9d16a:	2301      	movs	r3, #1
   9d16c:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9d16e:	4b0b      	ldr	r3, [pc, #44]	; (9d19c <Cl_Console_SyncGetMessage+0x38>)
   9d170:	4798      	blx	r3
   9d172:	4603      	mov	r3, r0
   9d174:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   9d176:	79fb      	ldrb	r3, [r7, #7]
   9d178:	2b00      	cmp	r3, #0
   9d17a:	d10a      	bne.n	9d192 <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   9d17c:	4b08      	ldr	r3, [pc, #32]	; (9d1a0 <Cl_Console_SyncGetMessage+0x3c>)
   9d17e:	4798      	blx	r3
   9d180:	4603      	mov	r3, r0
   9d182:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   9d184:	79fb      	ldrb	r3, [r7, #7]
   9d186:	2b00      	cmp	r3, #0
   9d188:	d103      	bne.n	9d192 <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9d18a:	4b06      	ldr	r3, [pc, #24]	; (9d1a4 <Cl_Console_SyncGetMessage+0x40>)
   9d18c:	4798      	blx	r3
   9d18e:	4603      	mov	r3, r0
   9d190:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   9d192:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   9d194:	4618      	mov	r0, r3
   9d196:	3708      	adds	r7, #8
   9d198:	46bd      	mov	sp, r7
   9d19a:	bd80      	pop	{r7, pc}
   9d19c:	0009c829 	.word	0x0009c829
   9d1a0:	0009c889 	.word	0x0009c889
   9d1a4:	0009c869 	.word	0x0009c869

0009d1a8 <cl_console_receivedbyte>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */
Cl_ReturnCodeType  cl_console_receivedbyte(Cl_Uint8Type console_databyte)
{
   9d1a8:	b480      	push	{r7}
   9d1aa:	b083      	sub	sp, #12
   9d1ac:	af00      	add	r7, sp, #0
   9d1ae:	4603      	mov	r3, r0
   9d1b0:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint8Type prev_databyte =0 ;
	static unsigned int temp = 0;

	if(Cl_Console_buffer1.BufferEmpty)
   9d1b2:	4b61      	ldr	r3, [pc, #388]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d1b4:	7f1b      	ldrb	r3, [r3, #28]
   9d1b6:	2b00      	cmp	r3, #0
   9d1b8:	d009      	beq.n	9d1ce <cl_console_receivedbyte+0x26>
	{
		if(Cl_Console_buffer2.BufferEmpty)
   9d1ba:	4b60      	ldr	r3, [pc, #384]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d1bc:	7f1b      	ldrb	r3, [r3, #28]
   9d1be:	2b00      	cmp	r3, #0
   9d1c0:	d005      	beq.n	9d1ce <cl_console_receivedbyte+0x26>
			{
				Cl_Console_buffer1.CurreltyActive = true;
   9d1c2:	4b5d      	ldr	r3, [pc, #372]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d1c4:	2201      	movs	r2, #1
   9d1c6:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;					
   9d1c8:	4b5c      	ldr	r3, [pc, #368]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d1ca:	2200      	movs	r2, #0
   9d1cc:	769a      	strb	r2, [r3, #26]
			}
		
	}
	if(Cl_Console_buffer1.CurreltyActive == true )
   9d1ce:	4b5a      	ldr	r3, [pc, #360]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d1d0:	7e9b      	ldrb	r3, [r3, #26]
   9d1d2:	2b00      	cmp	r3, #0
   9d1d4:	d04e      	beq.n	9d274 <cl_console_receivedbyte+0xcc>
	{				
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   9d1d6:	4b58      	ldr	r3, [pc, #352]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d1d8:	7edb      	ldrb	r3, [r3, #27]
   9d1da:	f083 0301 	eor.w	r3, r3, #1
   9d1de:	b2db      	uxtb	r3, r3
   9d1e0:	2b00      	cmp	r3, #0
   9d1e2:	d00a      	beq.n	9d1fa <cl_console_receivedbyte+0x52>
				{
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9d1e4:	4b56      	ldr	r3, [pc, #344]	; (9d340 <cl_console_receivedbyte+0x198>)
   9d1e6:	781b      	ldrb	r3, [r3, #0]
   9d1e8:	2bcc      	cmp	r3, #204	; 0xcc
   9d1ea:	d12e      	bne.n	9d24a <cl_console_receivedbyte+0xa2>
   9d1ec:	79fb      	ldrb	r3, [r7, #7]
   9d1ee:	2bdd      	cmp	r3, #221	; 0xdd
   9d1f0:	d12b      	bne.n	9d24a <cl_console_receivedbyte+0xa2>
						{
							Cl_Console_buffer1.StartSequenceDetected = true;
   9d1f2:	4b51      	ldr	r3, [pc, #324]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d1f4:	2201      	movs	r2, #1
   9d1f6:	76da      	strb	r2, [r3, #27]
   9d1f8:	e027      	b.n	9d24a <cl_console_receivedbyte+0xa2>
						}
				}
				else
				{
					Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   9d1fa:	4b4f      	ldr	r3, [pc, #316]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d1fc:	7d1b      	ldrb	r3, [r3, #20]
   9d1fe:	4619      	mov	r1, r3
   9d200:	4a4d      	ldr	r2, [pc, #308]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d202:	79fb      	ldrb	r3, [r7, #7]
   9d204:	5453      	strb	r3, [r2, r1]
					Cl_Console_buffer1.ConsoleNewData = true;
   9d206:	4b4c      	ldr	r3, [pc, #304]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d208:	2201      	movs	r2, #1
   9d20a:	75da      	strb	r2, [r3, #23]
					Cl_Console_buffer1.BufferEmpty = false;
   9d20c:	4b4a      	ldr	r3, [pc, #296]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d20e:	2200      	movs	r2, #0
   9d210:	771a      	strb	r2, [r3, #28]
					if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9d212:	4b4b      	ldr	r3, [pc, #300]	; (9d340 <cl_console_receivedbyte+0x198>)
   9d214:	781b      	ldrb	r3, [r3, #0]
   9d216:	2bee      	cmp	r3, #238	; 0xee
   9d218:	d111      	bne.n	9d23e <cl_console_receivedbyte+0x96>
   9d21a:	79fb      	ldrb	r3, [r7, #7]
   9d21c:	2bbb      	cmp	r3, #187	; 0xbb
   9d21e:	d10e      	bne.n	9d23e <cl_console_receivedbyte+0x96>
						{
							Cl_Console_buffer1.ConsoleDatabufferReady = true;
   9d220:	4b45      	ldr	r3, [pc, #276]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d222:	2201      	movs	r2, #1
   9d224:	761a      	strb	r2, [r3, #24]
							Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9d226:	4b44      	ldr	r3, [pc, #272]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d228:	2200      	movs	r2, #0
   9d22a:	765a      	strb	r2, [r3, #25]
							Cl_Console_buffer1.Data_incomplete = false;
   9d22c:	4b42      	ldr	r3, [pc, #264]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d22e:	2200      	movs	r2, #0
   9d230:	775a      	strb	r2, [r3, #29]
							Cl_Console_buffer1.CurreltyActive = false;
   9d232:	4b41      	ldr	r3, [pc, #260]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d234:	2200      	movs	r2, #0
   9d236:	769a      	strb	r2, [r3, #26]
							Cl_Console_buffer2.CurreltyActive =true;
   9d238:	4b40      	ldr	r3, [pc, #256]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d23a:	2201      	movs	r2, #1
   9d23c:	769a      	strb	r2, [r3, #26]
						}
					
					Cl_Console_buffer1.Console_databuffer_write_idx++;
   9d23e:	4b3e      	ldr	r3, [pc, #248]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d240:	7d1b      	ldrb	r3, [r3, #20]
   9d242:	3301      	adds	r3, #1
   9d244:	b2da      	uxtb	r2, r3
   9d246:	4b3c      	ldr	r3, [pc, #240]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d248:	751a      	strb	r2, [r3, #20]
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   9d24a:	4b3b      	ldr	r3, [pc, #236]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d24c:	7d1b      	ldrb	r3, [r3, #20]
   9d24e:	2b13      	cmp	r3, #19
   9d250:	d90b      	bls.n	9d26a <cl_console_receivedbyte+0xc2>
					{
						Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   9d252:	4b39      	ldr	r3, [pc, #228]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d254:	2201      	movs	r2, #1
   9d256:	761a      	strb	r2, [r3, #24]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9d258:	4b37      	ldr	r3, [pc, #220]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d25a:	2200      	movs	r2, #0
   9d25c:	765a      	strb	r2, [r3, #25]
						Cl_Console_buffer1.CurreltyActive = false;
   9d25e:	4b36      	ldr	r3, [pc, #216]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d260:	2200      	movs	r2, #0
   9d262:	769a      	strb	r2, [r3, #26]
						Cl_Console_buffer1.Data_incomplete = true;
   9d264:	4b34      	ldr	r3, [pc, #208]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d266:	2201      	movs	r2, #1
   9d268:	775a      	strb	r2, [r3, #29]
						
					}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9d26a:	4a35      	ldr	r2, [pc, #212]	; (9d340 <cl_console_receivedbyte+0x198>)
   9d26c:	79fb      	ldrb	r3, [r7, #7]
   9d26e:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   9d270:	2302      	movs	r3, #2
   9d272:	e05b      	b.n	9d32c <cl_console_receivedbyte+0x184>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   9d274:	4b31      	ldr	r3, [pc, #196]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d276:	7e9b      	ldrb	r3, [r3, #26]
   9d278:	2b00      	cmp	r3, #0
   9d27a:	d056      	beq.n	9d32a <cl_console_receivedbyte+0x182>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   9d27c:	4b2e      	ldr	r3, [pc, #184]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d27e:	7f5b      	ldrb	r3, [r3, #29]
   9d280:	2b00      	cmp	r3, #0
   9d282:	d002      	beq.n	9d28a <cl_console_receivedbyte+0xe2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   9d284:	4b2d      	ldr	r3, [pc, #180]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d286:	2201      	movs	r2, #1
   9d288:	76da      	strb	r2, [r3, #27]
		}
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   9d28a:	4b2c      	ldr	r3, [pc, #176]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d28c:	7edb      	ldrb	r3, [r3, #27]
   9d28e:	f083 0301 	eor.w	r3, r3, #1
   9d292:	b2db      	uxtb	r3, r3
   9d294:	2b00      	cmp	r3, #0
   9d296:	d00d      	beq.n	9d2b4 <cl_console_receivedbyte+0x10c>
		{
			
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9d298:	4b29      	ldr	r3, [pc, #164]	; (9d340 <cl_console_receivedbyte+0x198>)
   9d29a:	781b      	ldrb	r3, [r3, #0]
   9d29c:	2bcc      	cmp	r3, #204	; 0xcc
   9d29e:	d12e      	bne.n	9d2fe <cl_console_receivedbyte+0x156>
   9d2a0:	79fb      	ldrb	r3, [r7, #7]
   9d2a2:	2bdd      	cmp	r3, #221	; 0xdd
   9d2a4:	d12b      	bne.n	9d2fe <cl_console_receivedbyte+0x156>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   9d2a6:	4b25      	ldr	r3, [pc, #148]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2a8:	2201      	movs	r2, #1
   9d2aa:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   9d2ac:	4b23      	ldr	r3, [pc, #140]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2ae:	2200      	movs	r2, #0
   9d2b0:	751a      	strb	r2, [r3, #20]
   9d2b2:	e024      	b.n	9d2fe <cl_console_receivedbyte+0x156>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   9d2b4:	4b21      	ldr	r3, [pc, #132]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2b6:	7d1b      	ldrb	r3, [r3, #20]
   9d2b8:	4619      	mov	r1, r3
   9d2ba:	4a20      	ldr	r2, [pc, #128]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2bc:	79fb      	ldrb	r3, [r7, #7]
   9d2be:	5453      	strb	r3, [r2, r1]
			Cl_Console_buffer2.ConsoleNewData = true;
   9d2c0:	4b1e      	ldr	r3, [pc, #120]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2c2:	2201      	movs	r2, #1
   9d2c4:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.BufferEmpty = false;
   9d2c6:	4b1d      	ldr	r3, [pc, #116]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2c8:	2200      	movs	r2, #0
   9d2ca:	771a      	strb	r2, [r3, #28]
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9d2cc:	4b1c      	ldr	r3, [pc, #112]	; (9d340 <cl_console_receivedbyte+0x198>)
   9d2ce:	781b      	ldrb	r3, [r3, #0]
   9d2d0:	2bee      	cmp	r3, #238	; 0xee
   9d2d2:	d10e      	bne.n	9d2f2 <cl_console_receivedbyte+0x14a>
   9d2d4:	79fb      	ldrb	r3, [r7, #7]
   9d2d6:	2bbb      	cmp	r3, #187	; 0xbb
   9d2d8:	d10b      	bne.n	9d2f2 <cl_console_receivedbyte+0x14a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   9d2da:	4b18      	ldr	r3, [pc, #96]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2dc:	2201      	movs	r2, #1
   9d2de:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   9d2e0:	4b16      	ldr	r3, [pc, #88]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2e2:	2200      	movs	r2, #0
   9d2e4:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.CurreltyActive = true;
   9d2e6:	4b14      	ldr	r3, [pc, #80]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d2e8:	2201      	movs	r2, #1
   9d2ea:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;
   9d2ec:	4b13      	ldr	r3, [pc, #76]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2ee:	2200      	movs	r2, #0
   9d2f0:	769a      	strb	r2, [r3, #26]
			}
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   9d2f2:	4b12      	ldr	r3, [pc, #72]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2f4:	7d1b      	ldrb	r3, [r3, #20]
   9d2f6:	3301      	adds	r3, #1
   9d2f8:	b2da      	uxtb	r2, r3
   9d2fa:	4b10      	ldr	r3, [pc, #64]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d2fc:	751a      	strb	r2, [r3, #20]
				
		}
					
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   9d2fe:	4b0f      	ldr	r3, [pc, #60]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d300:	7d1b      	ldrb	r3, [r3, #20]
   9d302:	2b14      	cmp	r3, #20
   9d304:	d90b      	bls.n	9d31e <cl_console_receivedbyte+0x176>
		{
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   9d306:	4b0d      	ldr	r3, [pc, #52]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d308:	2201      	movs	r2, #1
   9d30a:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.CurreltyActive = false;
   9d30c:	4b0b      	ldr	r3, [pc, #44]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d30e:	2200      	movs	r2, #0
   9d310:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.Data_incomplete = true;
   9d312:	4b0a      	ldr	r3, [pc, #40]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d314:	2201      	movs	r2, #1
   9d316:	775a      	strb	r2, [r3, #29]
			Cl_Console_buffer1.Data_incomplete = false;
   9d318:	4b07      	ldr	r3, [pc, #28]	; (9d338 <cl_console_receivedbyte+0x190>)
   9d31a:	2200      	movs	r2, #0
   9d31c:	775a      	strb	r2, [r3, #29]
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   9d31e:	4b07      	ldr	r3, [pc, #28]	; (9d33c <cl_console_receivedbyte+0x194>)
   9d320:	7f5b      	ldrb	r3, [r3, #29]
   9d322:	2b00      	cmp	r3, #0
	{
		//printf("buffer overflow\n");
	}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9d324:	4a06      	ldr	r2, [pc, #24]	; (9d340 <cl_console_receivedbyte+0x198>)
   9d326:	79fb      	ldrb	r3, [r7, #7]
   9d328:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   9d32a:	2302      	movs	r3, #2
}
   9d32c:	4618      	mov	r0, r3
   9d32e:	370c      	adds	r7, #12
   9d330:	46bd      	mov	sp, r7
   9d332:	bc80      	pop	{r7}
   9d334:	4770      	bx	lr
   9d336:	bf00      	nop
   9d338:	2007236c 	.word	0x2007236c
   9d33c:	200721cc 	.word	0x200721cc
   9d340:	20071adc 	.word	0x20071adc

0009d344 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   9d344:	b480      	push	{r7}
   9d346:	b08b      	sub	sp, #44	; 0x2c
   9d348:	af00      	add	r7, sp, #0
   9d34a:	6078      	str	r0, [r7, #4]
   9d34c:	687b      	ldr	r3, [r7, #4]
   9d34e:	627b      	str	r3, [r7, #36]	; 0x24
   9d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9d352:	623b      	str	r3, [r7, #32]
   9d354:	6a3b      	ldr	r3, [r7, #32]
   9d356:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   9d358:	69fb      	ldr	r3, [r7, #28]
   9d35a:	095b      	lsrs	r3, r3, #5
   9d35c:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   9d35e:	69bb      	ldr	r3, [r7, #24]
   9d360:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9d364:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9d368:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   9d36a:	617b      	str	r3, [r7, #20]
   9d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9d36e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9d370:	693b      	ldr	r3, [r7, #16]
   9d372:	f003 031f 	and.w	r3, r3, #31
   9d376:	2201      	movs	r2, #1
   9d378:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   9d37c:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9d37e:	697b      	ldr	r3, [r7, #20]
   9d380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   9d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9d384:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9d386:	68bb      	ldr	r3, [r7, #8]
   9d388:	f003 031f 	and.w	r3, r3, #31
   9d38c:	2101      	movs	r1, #1
   9d38e:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9d392:	4013      	ands	r3, r2
   9d394:	2b00      	cmp	r3, #0
   9d396:	d003      	beq.n	9d3a0 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   9d398:	697b      	ldr	r3, [r7, #20]
   9d39a:	68fa      	ldr	r2, [r7, #12]
   9d39c:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
   9d39e:	e002      	b.n	9d3a6 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   9d3a0:	697b      	ldr	r3, [r7, #20]
   9d3a2:	68fa      	ldr	r2, [r7, #12]
   9d3a4:	631a      	str	r2, [r3, #48]	; 0x30
   9d3a6:	bf00      	nop
   9d3a8:	372c      	adds	r7, #44	; 0x2c
   9d3aa:	46bd      	mov	sp, r7
   9d3ac:	bc80      	pop	{r7}
   9d3ae:	4770      	bx	lr

0009d3b0 <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   9d3b0:	b580      	push	{r7, lr}
   9d3b2:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   9d3b4:	4b04      	ldr	r3, [pc, #16]	; (9d3c8 <TC1_Handler+0x18>)
   9d3b6:	781b      	ldrb	r3, [r3, #0]
   9d3b8:	b2db      	uxtb	r3, r3
   9d3ba:	2b00      	cmp	r3, #0
   9d3bc:	d002      	beq.n	9d3c4 <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   9d3be:	203b      	movs	r0, #59	; 0x3b
   9d3c0:	4b02      	ldr	r3, [pc, #8]	; (9d3cc <TC1_Handler+0x1c>)
   9d3c2:	4798      	blx	r3
		}
		#endif
}
   9d3c4:	bf00      	nop
   9d3c6:	bd80      	pop	{r7, pc}
   9d3c8:	20070b0d 	.word	0x20070b0d
   9d3cc:	0009d345 	.word	0x0009d345

0009d3d0 <Cl_disinf_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

 Cl_ReturnCodeType Cl_disinf_init(void)
 {
   9d3d0:	b480      	push	{r7}
   9d3d2:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType cl_disinf_retval;
	
	 return CL_OK;
   9d3d4:	2300      	movs	r3, #0
 }
   9d3d6:	4618      	mov	r0, r3
   9d3d8:	46bd      	mov	sp, r7
   9d3da:	bc80      	pop	{r7}
   9d3dc:	4770      	bx	lr
   9d3de:	bf00      	nop

0009d3e0 <Cl_disinf_controller>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : cl_disinfstate,Cl_ConsoleRxMsg
 */
Cl_ReturnCodeType Cl_disinf_controller(Cl_Mac_EventsType Cl_MacDisinfEvent)
{
   9d3e0:	b590      	push	{r4, r7, lr}
   9d3e2:	b08d      	sub	sp, #52	; 0x34
   9d3e4:	af02      	add	r7, sp, #8
   9d3e6:	4603      	mov	r3, r0
   9d3e8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9d3ea:	2300      	movs	r3, #0
   9d3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   9d3f0:	2300      	movs	r3, #0
   9d3f2:	76fb      	strb	r3, [r7, #27]
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d3f4:	2359      	movs	r3, #89	; 0x59
   9d3f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9d3fa:	2300      	movs	r3, #0
   9d3fc:	617b      	str	r3, [r7, #20]
		Cl_Uint8Type data = 0;
   9d3fe:	2300      	movs	r3, #0
   9d400:	74fb      	strb	r3, [r7, #19]
		Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9d402:	2300      	movs	r3, #0
   9d404:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9d408:	2300      	movs	r3, #0
   9d40a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   9d40e:	2300      	movs	r3, #0
   9d410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   9d414:	2300      	movs	r3, #0
   9d416:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   9d41a:	f107 021b 	add.w	r2, r7, #27
   9d41e:	79fb      	ldrb	r3, [r7, #7]
   9d420:	4611      	mov	r1, r2
   9d422:	4618      	mov	r0, r3
   9d424:	4bb9      	ldr	r3, [pc, #740]	; (9d70c <Cl_disinf_controller+0x32c>)
   9d426:	4798      	blx	r3
   9d428:	4603      	mov	r3, r0
   9d42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		
		
		switch(cl_disinfstate)
   9d42e:	4bb8      	ldr	r3, [pc, #736]	; (9d710 <Cl_disinf_controller+0x330>)
   9d430:	781b      	ldrb	r3, [r3, #0]
   9d432:	2b11      	cmp	r3, #17
   9d434:	f201 8205 	bhi.w	9e842 <Cl_disinf_controller+0x1462>
   9d438:	a201      	add	r2, pc, #4	; (adr r2, 9d440 <Cl_disinf_controller+0x60>)
   9d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d43e:	bf00      	nop
   9d440:	0009d489 	.word	0x0009d489
   9d444:	0009e843 	.word	0x0009e843
   9d448:	0009e843 	.word	0x0009e843
   9d44c:	0009d5a5 	.word	0x0009d5a5
   9d450:	0009d6b5 	.word	0x0009d6b5
   9d454:	0009dacf 	.word	0x0009dacf
   9d458:	0009dbdf 	.word	0x0009dbdf
   9d45c:	0009de73 	.word	0x0009de73
   9d460:	0009e0e1 	.word	0x0009e0e1
   9d464:	0009e373 	.word	0x0009e373
   9d468:	0009e3c1 	.word	0x0009e3c1
   9d46c:	0009e843 	.word	0x0009e843
   9d470:	0009e5eb 	.word	0x0009e5eb
   9d474:	0009e843 	.word	0x0009e843
   9d478:	0009e843 	.word	0x0009e843
   9d47c:	0009e565 	.word	0x0009e565
   9d480:	0009d893 	.word	0x0009d893
   9d484:	0009dfdf 	.word	0x0009dfdf
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   9d488:	7efb      	ldrb	r3, [r7, #27]
   9d48a:	2b03      	cmp	r3, #3
   9d48c:	d046      	beq.n	9d51c <Cl_disinf_controller+0x13c>
   9d48e:	2b14      	cmp	r3, #20
   9d490:	d002      	beq.n	9d498 <Cl_disinf_controller+0xb8>
   9d492:	2b01      	cmp	r3, #1
   9d494:	d045      	beq.n	9d522 <Cl_disinf_controller+0x142>
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
				break;
				
				default:
				break;
   9d496:	e083      	b.n	9d5a0 <Cl_disinf_controller+0x1c0>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9d498:	4b9e      	ldr	r3, [pc, #632]	; (9d714 <Cl_disinf_controller+0x334>)
   9d49a:	7e1b      	ldrb	r3, [r3, #24]
   9d49c:	2b00      	cmp	r3, #0
   9d49e:	d07e      	beq.n	9d59e <Cl_disinf_controller+0x1be>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9d4a0:	4b9c      	ldr	r3, [pc, #624]	; (9d714 <Cl_disinf_controller+0x334>)
   9d4a2:	791b      	ldrb	r3, [r3, #4]
   9d4a4:	2b02      	cmp	r3, #2
   9d4a6:	d01d      	beq.n	9d4e4 <Cl_disinf_controller+0x104>
   9d4a8:	2b21      	cmp	r3, #33	; 0x21
   9d4aa:	d000      	beq.n	9d4ae <Cl_disinf_controller+0xce>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   9d4ac:	e034      	b.n	9d518 <Cl_disinf_controller+0x138>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9d4ae:	2316      	movs	r3, #22
   9d4b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9d4b4:	2323      	movs	r3, #35	; 0x23
   9d4b6:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9d4b8:	f107 0314 	add.w	r3, r7, #20
   9d4bc:	3301      	adds	r3, #1
   9d4be:	4619      	mov	r1, r3
   9d4c0:	2028      	movs	r0, #40	; 0x28
   9d4c2:	4b95      	ldr	r3, [pc, #596]	; (9d718 <Cl_disinf_controller+0x338>)
   9d4c4:	4798      	blx	r3
   9d4c6:	4603      	mov	r3, r0
   9d4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9d4cc:	f107 0114 	add.w	r1, r7, #20
   9d4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d4d4:	2202      	movs	r2, #2
   9d4d6:	4618      	mov	r0, r3
   9d4d8:	4b90      	ldr	r3, [pc, #576]	; (9d71c <Cl_disinf_controller+0x33c>)
   9d4da:	4798      	blx	r3
   9d4dc:	4603      	mov	r3, r0
   9d4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						break;
   9d4e2:	e01a      	b.n	9d51a <Cl_disinf_controller+0x13a>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9d4e4:	2316      	movs	r3, #22
   9d4e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9d4ea:	2302      	movs	r3, #2
   9d4ec:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9d4ee:	f107 0314 	add.w	r3, r7, #20
   9d4f2:	3301      	adds	r3, #1
   9d4f4:	4619      	mov	r1, r3
   9d4f6:	2002      	movs	r0, #2
   9d4f8:	4b87      	ldr	r3, [pc, #540]	; (9d718 <Cl_disinf_controller+0x338>)
   9d4fa:	4798      	blx	r3
   9d4fc:	4603      	mov	r3, r0
   9d4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9d502:	f107 0114 	add.w	r1, r7, #20
   9d506:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d50a:	2202      	movs	r2, #2
   9d50c:	4618      	mov	r0, r3
   9d50e:	4b83      	ldr	r3, [pc, #524]	; (9d71c <Cl_disinf_controller+0x33c>)
   9d510:	4798      	blx	r3
   9d512:	4603      	mov	r3, r0
   9d514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						default:
						break;
   9d518:	bf00      	nop
					}
				}
				break;
   9d51a:	e040      	b.n	9d59e <Cl_disinf_controller+0x1be>
				
				case EVENT_STOP_DISINF:
				Cl_Disinf_StopDisinf();
   9d51c:	4b80      	ldr	r3, [pc, #512]	; (9d720 <Cl_disinf_controller+0x340>)
   9d51e:	4798      	blx	r3
				break;
   9d520:	e03e      	b.n	9d5a0 <Cl_disinf_controller+0x1c0>
				
				case EVENT_START_DISINF:
				
				cl_wait(20);
   9d522:	2014      	movs	r0, #20
   9d524:	4b7f      	ldr	r3, [pc, #508]	; (9d724 <Cl_disinf_controller+0x344>)
   9d526:	4798      	blx	r3
				if(Cl_ConsoleRxMsg.msgready == true)
   9d528:	4b7a      	ldr	r3, [pc, #488]	; (9d714 <Cl_disinf_controller+0x334>)
   9d52a:	7e1b      	ldrb	r3, [r3, #24]
   9d52c:	2b00      	cmp	r3, #0
   9d52e:	d01a      	beq.n	9d566 <Cl_disinf_controller+0x186>
				{
					
 					cl_temp_diinftype.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9d530:	4b78      	ldr	r3, [pc, #480]	; (9d714 <Cl_disinf_controller+0x334>)
   9d532:	791a      	ldrb	r2, [r3, #4]
   9d534:	4b7c      	ldr	r3, [pc, #496]	; (9d728 <Cl_disinf_controller+0x348>)
   9d536:	701a      	strb	r2, [r3, #0]
 					if (cl_temp_diinftype.bytearray[0] == 4)
   9d538:	4b7b      	ldr	r3, [pc, #492]	; (9d728 <Cl_disinf_controller+0x348>)
   9d53a:	781b      	ldrb	r3, [r3, #0]
   9d53c:	2b04      	cmp	r3, #4
   9d53e:	d103      	bne.n	9d548 <Cl_disinf_controller+0x168>
 					{
 						flag_hotcitric = 1;
   9d540:	4b7a      	ldr	r3, [pc, #488]	; (9d72c <Cl_disinf_controller+0x34c>)
   9d542:	2201      	movs	r2, #1
   9d544:	701a      	strb	r2, [r3, #0]
   9d546:	e00e      	b.n	9d566 <Cl_disinf_controller+0x186>
 					}
 					else if (cl_temp_diinftype.bytearray[0] == 3)
   9d548:	4b77      	ldr	r3, [pc, #476]	; (9d728 <Cl_disinf_controller+0x348>)
   9d54a:	781b      	ldrb	r3, [r3, #0]
   9d54c:	2b03      	cmp	r3, #3
   9d54e:	d103      	bne.n	9d558 <Cl_disinf_controller+0x178>
 					{
 						flag_na = 1;
   9d550:	4b77      	ldr	r3, [pc, #476]	; (9d730 <Cl_disinf_controller+0x350>)
   9d552:	2201      	movs	r2, #1
   9d554:	701a      	strb	r2, [r3, #0]
   9d556:	e006      	b.n	9d566 <Cl_disinf_controller+0x186>
 					}
 					else if(cl_temp_diinftype.bytearray[0] == 5){
   9d558:	4b73      	ldr	r3, [pc, #460]	; (9d728 <Cl_disinf_controller+0x348>)
   9d55a:	781b      	ldrb	r3, [r3, #0]
   9d55c:	2b05      	cmp	r3, #5
   9d55e:	d102      	bne.n	9d566 <Cl_disinf_controller+0x186>
 						
 						flag_citric = 1;
   9d560:	4b74      	ldr	r3, [pc, #464]	; (9d734 <Cl_disinf_controller+0x354>)
   9d562:	2201      	movs	r2, #1
   9d564:	701a      	strb	r2, [r3, #0]
 					}
 					
				}
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   9d566:	233c      	movs	r3, #60	; 0x3c
   9d568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9d56c:	2301      	movs	r3, #1
   9d56e:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d570:	f107 0113 	add.w	r1, r7, #19
   9d574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d578:	2201      	movs	r2, #1
   9d57a:	4618      	mov	r0, r3
   9d57c:	4b67      	ldr	r3, [pc, #412]	; (9d71c <Cl_disinf_controller+0x33c>)
   9d57e:	4798      	blx	r3
   9d580:	4603      	mov	r3, r0
   9d582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Cl_Disinf_UpdateTimeInfo();
   9d586:	4b6c      	ldr	r3, [pc, #432]	; (9d738 <Cl_disinf_controller+0x358>)
   9d588:	4798      	blx	r3
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9d58a:	2044      	movs	r0, #68	; 0x44
   9d58c:	4b6b      	ldr	r3, [pc, #428]	; (9d73c <Cl_disinf_controller+0x35c>)
   9d58e:	4798      	blx	r3
   9d590:	4603      	mov	r3, r0
   9d592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9d596:	4b5e      	ldr	r3, [pc, #376]	; (9d710 <Cl_disinf_controller+0x330>)
   9d598:	2203      	movs	r2, #3
   9d59a:	701a      	strb	r2, [r3, #0]
				break;
   9d59c:	e000      	b.n	9d5a0 <Cl_disinf_controller+0x1c0>
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
					}
				}
				break;
   9d59e:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   9d5a0:	f001 b956 	b.w	9e850 <Cl_disinf_controller+0x1470>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   9d5a4:	7efb      	ldrb	r3, [r7, #27]
   9d5a6:	3b03      	subs	r3, #3
   9d5a8:	2b1f      	cmp	r3, #31
   9d5aa:	d87d      	bhi.n	9d6a8 <Cl_disinf_controller+0x2c8>
   9d5ac:	a201      	add	r2, pc, #4	; (adr r2, 9d5b4 <Cl_disinf_controller+0x1d4>)
   9d5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d5b2:	bf00      	nop
   9d5b4:	0009d635 	.word	0x0009d635
   9d5b8:	0009d6a9 	.word	0x0009d6a9
   9d5bc:	0009d6a9 	.word	0x0009d6a9
   9d5c0:	0009d6a9 	.word	0x0009d6a9
   9d5c4:	0009d6a9 	.word	0x0009d6a9
   9d5c8:	0009d6a9 	.word	0x0009d6a9
   9d5cc:	0009d6a9 	.word	0x0009d6a9
   9d5d0:	0009d6a9 	.word	0x0009d6a9
   9d5d4:	0009d6a9 	.word	0x0009d6a9
   9d5d8:	0009d6a9 	.word	0x0009d6a9
   9d5dc:	0009d6a9 	.word	0x0009d6a9
   9d5e0:	0009d6a9 	.word	0x0009d6a9
   9d5e4:	0009d68d 	.word	0x0009d68d
   9d5e8:	0009d6a9 	.word	0x0009d6a9
   9d5ec:	0009d6a9 	.word	0x0009d6a9
   9d5f0:	0009d6a9 	.word	0x0009d6a9
   9d5f4:	0009d641 	.word	0x0009d641
   9d5f8:	0009d6a9 	.word	0x0009d6a9
   9d5fc:	0009d6a9 	.word	0x0009d6a9
   9d600:	0009d6a9 	.word	0x0009d6a9
   9d604:	0009d6a9 	.word	0x0009d6a9
   9d608:	0009d6a9 	.word	0x0009d6a9
   9d60c:	0009d6a9 	.word	0x0009d6a9
   9d610:	0009d6a9 	.word	0x0009d6a9
   9d614:	0009d6a9 	.word	0x0009d6a9
   9d618:	0009d6a9 	.word	0x0009d6a9
   9d61c:	0009d6a9 	.word	0x0009d6a9
   9d620:	0009d6a9 	.word	0x0009d6a9
   9d624:	0009d6a9 	.word	0x0009d6a9
   9d628:	0009d6a9 	.word	0x0009d6a9
   9d62c:	0009d6a9 	.word	0x0009d6a9
   9d630:	0009d64d 	.word	0x0009d64d
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9d634:	4b3a      	ldr	r3, [pc, #232]	; (9d720 <Cl_disinf_controller+0x340>)
   9d636:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9d638:	4b35      	ldr	r3, [pc, #212]	; (9d710 <Cl_disinf_controller+0x330>)
   9d63a:	2200      	movs	r2, #0
   9d63c:	701a      	strb	r2, [r3, #0]
					break;
   9d63e:	e037      	b.n	9d6b0 <Cl_disinf_controller+0x2d0>
					
					
					case EVENT_DISINF_ALARM:
					
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9d640:	4b3f      	ldr	r3, [pc, #252]	; (9d740 <Cl_disinf_controller+0x360>)
   9d642:	4798      	blx	r3
   9d644:	4603      	mov	r3, r0
   9d646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9d64a:	e031      	b.n	9d6b0 <Cl_disinf_controller+0x2d0>
					
					
					
					
					//Send Pause
					CSeventcount = 0;
   9d64c:	4b3d      	ldr	r3, [pc, #244]	; (9d744 <Cl_disinf_controller+0x364>)
   9d64e:	2200      	movs	r2, #0
   9d650:	601a      	str	r2, [r3, #0]
					 IntakeReadyFlag = true;
   9d652:	4b3d      	ldr	r3, [pc, #244]	; (9d748 <Cl_disinf_controller+0x368>)
   9d654:	2201      	movs	r2, #1
   9d656:	701a      	strb	r2, [r3, #0]
					 sv_cntrl_deactivate_valve(VALVE_ID1);
   9d658:	2001      	movs	r0, #1
   9d65a:	4b3c      	ldr	r3, [pc, #240]	; (9d74c <Cl_disinf_controller+0x36c>)
   9d65c:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9d65e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9d662:	2002      	movs	r0, #2
   9d664:	4b3a      	ldr	r3, [pc, #232]	; (9d750 <Cl_disinf_controller+0x370>)
   9d666:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9d668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9d66c:	2001      	movs	r0, #1
   9d66e:	4b38      	ldr	r3, [pc, #224]	; (9d750 <Cl_disinf_controller+0x370>)
   9d670:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR1);
   9d672:	2001      	movs	r0, #1
   9d674:	4b37      	ldr	r3, [pc, #220]	; (9d754 <Cl_disinf_controller+0x374>)
   9d676:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR2);
   9d678:	2002      	movs	r0, #2
   9d67a:	4b36      	ldr	r3, [pc, #216]	; (9d754 <Cl_disinf_controller+0x374>)
   9d67c:	4798      	blx	r3
					 
					 Cl_bc_controller(BC_EVENT_DISINF_INTAKE);
   9d67e:	200f      	movs	r0, #15
   9d680:	4b35      	ldr	r3, [pc, #212]	; (9d758 <Cl_disinf_controller+0x378>)
   9d682:	4798      	blx	r3
					 
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   9d684:	4b22      	ldr	r3, [pc, #136]	; (9d710 <Cl_disinf_controller+0x330>)
   9d686:	2204      	movs	r2, #4
   9d688:	701a      	strb	r2, [r3, #0]
					
					break;
   9d68a:	e011      	b.n	9d6b0 <Cl_disinf_controller+0x2d0>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   9d68c:	4b33      	ldr	r3, [pc, #204]	; (9d75c <Cl_disinf_controller+0x37c>)
   9d68e:	681b      	ldr	r3, [r3, #0]
   9d690:	3301      	adds	r3, #1
   9d692:	4a32      	ldr	r2, [pc, #200]	; (9d75c <Cl_disinf_controller+0x37c>)
   9d694:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   9d696:	4b32      	ldr	r3, [pc, #200]	; (9d760 <Cl_disinf_controller+0x380>)
   9d698:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   9d69a:	4b30      	ldr	r3, [pc, #192]	; (9d75c <Cl_disinf_controller+0x37c>)
   9d69c:	681b      	ldr	r3, [r3, #0]
   9d69e:	2b3c      	cmp	r3, #60	; 0x3c
   9d6a0:	d105      	bne.n	9d6ae <Cl_disinf_controller+0x2ce>
					{
	
						UpdateDisinfMinuteTick();
   9d6a2:	4b30      	ldr	r3, [pc, #192]	; (9d764 <Cl_disinf_controller+0x384>)
   9d6a4:	4798      	blx	r3
						
							
					}

					break;
   9d6a6:	e002      	b.n	9d6ae <Cl_disinf_controller+0x2ce>
					
					default:break;
   9d6a8:	bf00      	nop
   9d6aa:	f001 b8d1 	b.w	9e850 <Cl_disinf_controller+0x1470>
						UpdateDisinfMinuteTick();
						
							
					}

					break;
   9d6ae:	bf00      	nop
					
					default:break;
				}
				
			break;
   9d6b0:	f001 b8ce 	b.w	9e850 <Cl_disinf_controller+0x1470>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   9d6b4:	7efb      	ldrb	r3, [r7, #27]
   9d6b6:	3b02      	subs	r3, #2
   9d6b8:	2b11      	cmp	r3, #17
   9d6ba:	f200 80e4 	bhi.w	9d886 <Cl_disinf_controller+0x4a6>
   9d6be:	a201      	add	r2, pc, #4	; (adr r2, 9d6c4 <Cl_disinf_controller+0x2e4>)
   9d6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d6c4:	0009d7d3 	.word	0x0009d7d3
   9d6c8:	0009d7c7 	.word	0x0009d7c7
   9d6cc:	0009d887 	.word	0x0009d887
   9d6d0:	0009d887 	.word	0x0009d887
   9d6d4:	0009d887 	.word	0x0009d887
   9d6d8:	0009d887 	.word	0x0009d887
   9d6dc:	0009d887 	.word	0x0009d887
   9d6e0:	0009d887 	.word	0x0009d887
   9d6e4:	0009d887 	.word	0x0009d887
   9d6e8:	0009d887 	.word	0x0009d887
   9d6ec:	0009d887 	.word	0x0009d887
   9d6f0:	0009d887 	.word	0x0009d887
   9d6f4:	0009d769 	.word	0x0009d769
   9d6f8:	0009d887 	.word	0x0009d887
   9d6fc:	0009d887 	.word	0x0009d887
   9d700:	0009d887 	.word	0x0009d887
   9d704:	0009d887 	.word	0x0009d887
   9d708:	0009d87b 	.word	0x0009d87b
   9d70c:	0009e861 	.word	0x0009e861
   9d710:	20071adf 	.word	0x20071adf
   9d714:	20072350 	.word	0x20072350
   9d718:	0009b701 	.word	0x0009b701
   9d71c:	0009cbd5 	.word	0x0009cbd5
   9d720:	0009ebe5 	.word	0x0009ebe5
   9d724:	00093ea9 	.word	0x00093ea9
   9d728:	200727d8 	.word	0x200727d8
   9d72c:	20071937 	.word	0x20071937
   9d730:	20071939 	.word	0x20071939
   9d734:	2007193a 	.word	0x2007193a
   9d738:	0009ed91 	.word	0x0009ed91
   9d73c:	0008b715 	.word	0x0008b715
   9d740:	0009eee5 	.word	0x0009eee5
   9d744:	2007171c 	.word	0x2007171c
   9d748:	20071b10 	.word	0x20071b10
   9d74c:	0009ae01 	.word	0x0009ae01
   9d750:	0009ae59 	.word	0x0009ae59
   9d754:	0009ad41 	.word	0x0009ad41
   9d758:	00082ea5 	.word	0x00082ea5
   9d75c:	20071ae0 	.word	0x20071ae0
   9d760:	0009f211 	.word	0x0009f211
   9d764:	0009f5d9 	.word	0x0009f5d9
				{ 
					case EVENT_DISINF_TICK_500MS :
					if(CSeventcount > 2){
   9d768:	4b9e      	ldr	r3, [pc, #632]	; (9d9e4 <Cl_disinf_controller+0x604>)
   9d76a:	681b      	ldr	r3, [r3, #0]
   9d76c:	2b02      	cmp	r3, #2
   9d76e:	f340 808d 	ble.w	9d88c <Cl_disinf_controller+0x4ac>
						
						Cl_bc_controller(BC_EVENT_STOP);
   9d772:	2005      	movs	r0, #5
   9d774:	4b9c      	ldr	r3, [pc, #624]	; (9d9e8 <Cl_disinf_controller+0x608>)
   9d776:	4798      	blx	r3
						command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9d778:	2339      	movs	r3, #57	; 0x39
   9d77a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)1;
   9d77e:	2301      	movs	r3, #1
   9d780:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d782:	f107 0113 	add.w	r1, r7, #19
   9d786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d78a:	2201      	movs	r2, #1
   9d78c:	4618      	mov	r0, r3
   9d78e:	4b97      	ldr	r3, [pc, #604]	; (9d9ec <Cl_disinf_controller+0x60c>)
   9d790:	4798      	blx	r3
   9d792:	4603      	mov	r3, r0
   9d794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						cl_wait(10);
   9d798:	200a      	movs	r0, #10
   9d79a:	4b95      	ldr	r3, [pc, #596]	; (9d9f0 <Cl_disinf_controller+0x610>)
   9d79c:	4798      	blx	r3

						command = CON_TX_COMMAND_DISINF_PAUSED;
   9d79e:	2338      	movs	r3, #56	; 0x38
   9d7a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)0;
   9d7a4:	2300      	movs	r3, #0
   9d7a6:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9d7a8:	f107 0113 	add.w	r1, r7, #19
   9d7ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d7b0:	2200      	movs	r2, #0
   9d7b2:	4618      	mov	r0, r3
   9d7b4:	4b8d      	ldr	r3, [pc, #564]	; (9d9ec <Cl_disinf_controller+0x60c>)
   9d7b6:	4798      	blx	r3
   9d7b8:	4603      	mov	r3, r0
   9d7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						//cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
						CSeventcount = 0;
   9d7be:	4b89      	ldr	r3, [pc, #548]	; (9d9e4 <Cl_disinf_controller+0x604>)
   9d7c0:	2200      	movs	r2, #0
   9d7c2:	601a      	str	r2, [r3, #0]
						
					}
					
					break;
   9d7c4:	e062      	b.n	9d88c <Cl_disinf_controller+0x4ac>
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9d7c6:	4b8b      	ldr	r3, [pc, #556]	; (9d9f4 <Cl_disinf_controller+0x614>)
   9d7c8:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9d7ca:	4b8b      	ldr	r3, [pc, #556]	; (9d9f8 <Cl_disinf_controller+0x618>)
   9d7cc:	2200      	movs	r2, #0
   9d7ce:	701a      	strb	r2, [r3, #0]
					break;
   9d7d0:	e05d      	b.n	9d88e <Cl_disinf_controller+0x4ae>
					
									
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   9d7d2:	4b8a      	ldr	r3, [pc, #552]	; (9d9fc <Cl_disinf_controller+0x61c>)
   9d7d4:	4798      	blx	r3
					 if (flag_hotcitric == 1 || flag_citric == 1)
   9d7d6:	4b8a      	ldr	r3, [pc, #552]	; (9da00 <Cl_disinf_controller+0x620>)
   9d7d8:	781b      	ldrb	r3, [r3, #0]
   9d7da:	2b01      	cmp	r3, #1
   9d7dc:	d003      	beq.n	9d7e6 <Cl_disinf_controller+0x406>
   9d7de:	4b89      	ldr	r3, [pc, #548]	; (9da04 <Cl_disinf_controller+0x624>)
   9d7e0:	781b      	ldrb	r3, [r3, #0]
   9d7e2:	2b01      	cmp	r3, #1
   9d7e4:	d114      	bne.n	9d810 <Cl_disinf_controller+0x430>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_HIGH,0,0,0);
   9d7e6:	2300      	movs	r3, #0
   9d7e8:	9300      	str	r3, [sp, #0]
   9d7ea:	f04f 0300 	mov.w	r3, #0
   9d7ee:	f04f 0200 	mov.w	r2, #0
   9d7f2:	2101      	movs	r1, #1
   9d7f4:	202b      	movs	r0, #43	; 0x2b
   9d7f6:	4c84      	ldr	r4, [pc, #528]	; (9da08 <Cl_disinf_controller+0x628>)
   9d7f8:	47a0      	blx	r4
   9d7fa:	4603      	mov	r3, r0
   9d7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						 Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   9d800:	2101      	movs	r1, #1
   9d802:	202b      	movs	r0, #43	; 0x2b
   9d804:	4b81      	ldr	r3, [pc, #516]	; (9da0c <Cl_disinf_controller+0x62c>)
   9d806:	4798      	blx	r3
   9d808:	4603      	mov	r3, r0
   9d80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9d80e:	e017      	b.n	9d840 <Cl_disinf_controller+0x460>
					 }
					 else if (flag_na == 1)
   9d810:	4b7f      	ldr	r3, [pc, #508]	; (9da10 <Cl_disinf_controller+0x630>)
   9d812:	781b      	ldrb	r3, [r3, #0]
   9d814:	2b01      	cmp	r3, #1
   9d816:	d113      	bne.n	9d840 <Cl_disinf_controller+0x460>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_HIGH,0,0,0);
   9d818:	2300      	movs	r3, #0
   9d81a:	9300      	str	r3, [sp, #0]
   9d81c:	f04f 0300 	mov.w	r3, #0
   9d820:	f04f 0200 	mov.w	r2, #0
   9d824:	2101      	movs	r1, #1
   9d826:	2029      	movs	r0, #41	; 0x29
   9d828:	4c77      	ldr	r4, [pc, #476]	; (9da08 <Cl_disinf_controller+0x628>)
   9d82a:	47a0      	blx	r4
   9d82c:	4603      	mov	r3, r0
   9d82e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   9d832:	2101      	movs	r1, #1
   9d834:	2029      	movs	r0, #41	; 0x29
   9d836:	4b75      	ldr	r3, [pc, #468]	; (9da0c <Cl_disinf_controller+0x62c>)
   9d838:	4798      	blx	r3
   9d83a:	4603      	mov	r3, r0
   9d83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					// cl_disinfstate = CL_DISINF_STATE_INTER;
			//		 command = CON_TX_COMMAND_DISINF_PAUSED;
			//		  data = (Cl_Uint8Type)0;
			//		  Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					
 					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9d840:	233b      	movs	r3, #59	; 0x3b
   9d842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 					 data = (Cl_Uint8Type)0;
   9d846:	2300      	movs	r3, #0
   9d848:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9d84a:	f107 0113 	add.w	r1, r7, #19
   9d84e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d852:	2200      	movs	r2, #0
   9d854:	4618      	mov	r0, r3
   9d856:	4b65      	ldr	r3, [pc, #404]	; (9d9ec <Cl_disinf_controller+0x60c>)
   9d858:	4798      	blx	r3
   9d85a:	4603      	mov	r3, r0
   9d85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 					cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9d860:	4b65      	ldr	r3, [pc, #404]	; (9d9f8 <Cl_disinf_controller+0x618>)
   9d862:	2205      	movs	r2, #5
   9d864:	701a      	strb	r2, [r3, #0]
 					sv_cntrl_activate_valve(VALVE_ID16);
   9d866:	2010      	movs	r0, #16
   9d868:	4b6a      	ldr	r3, [pc, #424]	; (9da14 <Cl_disinf_controller+0x634>)
   9d86a:	4798      	blx	r3
 					sv_cntrl_deactivate_valve(VALVE_ID18);
   9d86c:	2012      	movs	r0, #18
   9d86e:	4b6a      	ldr	r3, [pc, #424]	; (9da18 <Cl_disinf_controller+0x638>)
   9d870:	4798      	blx	r3

					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9d872:	4b61      	ldr	r3, [pc, #388]	; (9d9f8 <Cl_disinf_controller+0x618>)
   9d874:	2205      	movs	r2, #5
   9d876:	701a      	strb	r2, [r3, #0]
// 					 command = CON_TX_COMMAND_DISINF_RESUMED;
// 					 data = (Cl_Uint8Type)0;
// 					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
   9d878:	e009      	b.n	9d88e <Cl_disinf_controller+0x4ae>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9d87a:	4b68      	ldr	r3, [pc, #416]	; (9da1c <Cl_disinf_controller+0x63c>)
   9d87c:	4798      	blx	r3
   9d87e:	4603      	mov	r3, r0
   9d880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9d884:	e003      	b.n	9d88e <Cl_disinf_controller+0x4ae>
					
					
					default:break;
   9d886:	bf00      	nop
   9d888:	f000 bfe2 	b.w	9e850 <Cl_disinf_controller+0x1470>
						//cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
						CSeventcount = 0;
						
					}
					
					break;
   9d88c:	bf00      	nop
					default:break;
					
							
				}
			
			break;
   9d88e:	f000 bfdf 	b.w	9e850 <Cl_disinf_controller+0x1470>
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
   9d892:	7efb      	ldrb	r3, [r7, #27]
   9d894:	3b03      	subs	r3, #3
   9d896:	2b22      	cmp	r3, #34	; 0x22
   9d898:	f200 87d5 	bhi.w	9e846 <Cl_disinf_controller+0x1466>
   9d89c:	a201      	add	r2, pc, #4	; (adr r2, 9d8a4 <Cl_disinf_controller+0x4c4>)
   9d89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d8a2:	bf00      	nop
   9d8a4:	0009d931 	.word	0x0009d931
   9d8a8:	0009e847 	.word	0x0009e847
   9d8ac:	0009e847 	.word	0x0009e847
   9d8b0:	0009e847 	.word	0x0009e847
   9d8b4:	0009e847 	.word	0x0009e847
   9d8b8:	0009e847 	.word	0x0009e847
   9d8bc:	0009e847 	.word	0x0009e847
   9d8c0:	0009e847 	.word	0x0009e847
   9d8c4:	0009e847 	.word	0x0009e847
   9d8c8:	0009e847 	.word	0x0009e847
   9d8cc:	0009e847 	.word	0x0009e847
   9d8d0:	0009e847 	.word	0x0009e847
   9d8d4:	0009d96f 	.word	0x0009d96f
   9d8d8:	0009e847 	.word	0x0009e847
   9d8dc:	0009e847 	.word	0x0009e847
   9d8e0:	0009e847 	.word	0x0009e847
   9d8e4:	0009d93d 	.word	0x0009d93d
   9d8e8:	0009e847 	.word	0x0009e847
   9d8ec:	0009e847 	.word	0x0009e847
   9d8f0:	0009e847 	.word	0x0009e847
   9d8f4:	0009e847 	.word	0x0009e847
   9d8f8:	0009e847 	.word	0x0009e847
   9d8fc:	0009e847 	.word	0x0009e847
   9d900:	0009e847 	.word	0x0009e847
   9d904:	0009e847 	.word	0x0009e847
   9d908:	0009e847 	.word	0x0009e847
   9d90c:	0009e847 	.word	0x0009e847
   9d910:	0009e847 	.word	0x0009e847
   9d914:	0009e847 	.word	0x0009e847
   9d918:	0009e847 	.word	0x0009e847
   9d91c:	0009e847 	.word	0x0009e847
   9d920:	0009e847 	.word	0x0009e847
   9d924:	0009e847 	.word	0x0009e847
   9d928:	0009e847 	.word	0x0009e847
   9d92c:	0009d949 	.word	0x0009d949
				{
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9d930:	4b30      	ldr	r3, [pc, #192]	; (9d9f4 <Cl_disinf_controller+0x614>)
   9d932:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9d934:	4b30      	ldr	r3, [pc, #192]	; (9d9f8 <Cl_disinf_controller+0x618>)
   9d936:	2200      	movs	r2, #0
   9d938:	701a      	strb	r2, [r3, #0]
					break;
   9d93a:	e0c6      	b.n	9daca <Cl_disinf_controller+0x6ea>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9d93c:	4b37      	ldr	r3, [pc, #220]	; (9da1c <Cl_disinf_controller+0x63c>)
   9d93e:	4798      	blx	r3
   9d940:	4603      	mov	r3, r0
   9d942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9d946:	e0c0      	b.n	9daca <Cl_disinf_controller+0x6ea>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9d948:	4b35      	ldr	r3, [pc, #212]	; (9da20 <Cl_disinf_controller+0x640>)
   9d94a:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9d94c:	4b35      	ldr	r3, [pc, #212]	; (9da24 <Cl_disinf_controller+0x644>)
   9d94e:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9d950:	4b35      	ldr	r3, [pc, #212]	; (9da28 <Cl_disinf_controller+0x648>)
   9d952:	4798      	blx	r3
					if (alarm_flag == 1)
   9d954:	4b35      	ldr	r3, [pc, #212]	; (9da2c <Cl_disinf_controller+0x64c>)
   9d956:	781b      	ldrb	r3, [r3, #0]
   9d958:	b2db      	uxtb	r3, r3
   9d95a:	2b01      	cmp	r3, #1
   9d95c:	f040 80b4 	bne.w	9dac8 <Cl_disinf_controller+0x6e8>
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9d960:	4b25      	ldr	r3, [pc, #148]	; (9d9f8 <Cl_disinf_controller+0x618>)
   9d962:	2205      	movs	r2, #5
   9d964:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9d966:	4b31      	ldr	r3, [pc, #196]	; (9da2c <Cl_disinf_controller+0x64c>)
   9d968:	2200      	movs	r2, #0
   9d96a:	701a      	strb	r2, [r3, #0]
					}
					break;
   9d96c:	e0ac      	b.n	9dac8 <Cl_disinf_controller+0x6e8>
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d96e:	4b30      	ldr	r3, [pc, #192]	; (9da30 <Cl_disinf_controller+0x650>)
   9d970:	2200      	movs	r2, #0
   9d972:	801a      	strh	r2, [r3, #0]
   9d974:	e0a2      	b.n	9dabc <Cl_disinf_controller+0x6dc>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
							Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9d976:	4b2e      	ldr	r3, [pc, #184]	; (9da30 <Cl_disinf_controller+0x650>)
   9d978:	881b      	ldrh	r3, [r3, #0]
   9d97a:	4619      	mov	r1, r3
   9d97c:	4a2d      	ldr	r2, [pc, #180]	; (9da34 <Cl_disinf_controller+0x654>)
   9d97e:	460b      	mov	r3, r1
   9d980:	00db      	lsls	r3, r3, #3
   9d982:	1a5b      	subs	r3, r3, r1
   9d984:	4413      	add	r3, r2
   9d986:	7818      	ldrb	r0, [r3, #0]
   9d988:	4b29      	ldr	r3, [pc, #164]	; (9da30 <Cl_disinf_controller+0x650>)
   9d98a:	881b      	ldrh	r3, [r3, #0]
   9d98c:	461a      	mov	r2, r3
   9d98e:	4613      	mov	r3, r2
   9d990:	00db      	lsls	r3, r3, #3
   9d992:	1a9b      	subs	r3, r3, r2
   9d994:	4a27      	ldr	r2, [pc, #156]	; (9da34 <Cl_disinf_controller+0x654>)
   9d996:	4413      	add	r3, r2
   9d998:	3302      	adds	r3, #2
   9d99a:	4619      	mov	r1, r3
   9d99c:	4b26      	ldr	r3, [pc, #152]	; (9da38 <Cl_disinf_controller+0x658>)
   9d99e:	4798      	blx	r3
					 
							if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9d9a0:	4b23      	ldr	r3, [pc, #140]	; (9da30 <Cl_disinf_controller+0x650>)
   9d9a2:	881b      	ldrh	r3, [r3, #0]
   9d9a4:	4619      	mov	r1, r3
   9d9a6:	4a23      	ldr	r2, [pc, #140]	; (9da34 <Cl_disinf_controller+0x654>)
   9d9a8:	460b      	mov	r3, r1
   9d9aa:	00db      	lsls	r3, r3, #3
   9d9ac:	1a5b      	subs	r3, r3, r1
   9d9ae:	4413      	add	r3, r2
   9d9b0:	3302      	adds	r3, #2
   9d9b2:	781b      	ldrb	r3, [r3, #0]
   9d9b4:	2b00      	cmp	r3, #0
   9d9b6:	d049      	beq.n	9da4c <Cl_disinf_controller+0x66c>
							{
								sv_cntrl_setredalarm();
   9d9b8:	4b20      	ldr	r3, [pc, #128]	; (9da3c <Cl_disinf_controller+0x65c>)
   9d9ba:	4798      	blx	r3
								sv_cntrl_buzzer();
   9d9bc:	4b20      	ldr	r3, [pc, #128]	; (9da40 <Cl_disinf_controller+0x660>)
   9d9be:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9d9c0:	2208      	movs	r2, #8
   9d9c2:	4920      	ldr	r1, [pc, #128]	; (9da44 <Cl_disinf_controller+0x664>)
   9d9c4:	2018      	movs	r0, #24
   9d9c6:	4b09      	ldr	r3, [pc, #36]	; (9d9ec <Cl_disinf_controller+0x60c>)
   9d9c8:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9d9ca:	4b0a      	ldr	r3, [pc, #40]	; (9d9f4 <Cl_disinf_controller+0x614>)
   9d9cc:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_INTER;
   9d9ce:	4b0a      	ldr	r3, [pc, #40]	; (9d9f8 <Cl_disinf_controller+0x618>)
   9d9d0:	2210      	movs	r2, #16
   9d9d2:	701a      	strb	r2, [r3, #0]
								alarm_flag1 = 1;
   9d9d4:	4b1c      	ldr	r3, [pc, #112]	; (9da48 <Cl_disinf_controller+0x668>)
   9d9d6:	2201      	movs	r2, #1
   9d9d8:	701a      	strb	r2, [r3, #0]
								tempcount=0;
   9d9da:	4b15      	ldr	r3, [pc, #84]	; (9da30 <Cl_disinf_controller+0x650>)
   9d9dc:	2200      	movs	r2, #0
   9d9de:	801a      	strh	r2, [r3, #0]
								break;
   9d9e0:	bf00      	nop
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9d9e2:	e072      	b.n	9daca <Cl_disinf_controller+0x6ea>
   9d9e4:	2007171c 	.word	0x2007171c
   9d9e8:	00082ea5 	.word	0x00082ea5
   9d9ec:	0009cbd5 	.word	0x0009cbd5
   9d9f0:	00093ea9 	.word	0x00093ea9
   9d9f4:	0009ebe5 	.word	0x0009ebe5
   9d9f8:	20071adf 	.word	0x20071adf
   9d9fc:	0009ea95 	.word	0x0009ea95
   9da00:	20071937 	.word	0x20071937
   9da04:	2007193a 	.word	0x2007193a
   9da08:	00082989 	.word	0x00082989
   9da0c:	000829e5 	.word	0x000829e5
   9da10:	20071939 	.word	0x20071939
   9da14:	0009ade1 	.word	0x0009ade1
   9da18:	0009ae01 	.word	0x0009ae01
   9da1c:	0009eee5 	.word	0x0009eee5
   9da20:	0009b07d 	.word	0x0009b07d
   9da24:	0009b0b9 	.word	0x0009b0b9
   9da28:	0009ecdd 	.word	0x0009ecdd
   9da2c:	20071add 	.word	0x20071add
   9da30:	200727dc 	.word	0x200727dc
   9da34:	20070b10 	.word	0x20070b10
   9da38:	00082bc1 	.word	0x00082bc1
   9da3c:	0009b02d 	.word	0x0009b02d
   9da40:	0009b069 	.word	0x0009b069
   9da44:	000aa3d4 	.word	0x000aa3d4
   9da48:	20071ade 	.word	0x20071ade
								alarm_flag1 = 1;
								tempcount=0;
								break;
							}
					 
							else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9da4c:	4b7c      	ldr	r3, [pc, #496]	; (9dc40 <Cl_disinf_controller+0x860>)
   9da4e:	881b      	ldrh	r3, [r3, #0]
   9da50:	2b0b      	cmp	r3, #11
   9da52:	d12d      	bne.n	9dab0 <Cl_disinf_controller+0x6d0>
							{
								if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9da54:	4b7a      	ldr	r3, [pc, #488]	; (9dc40 <Cl_disinf_controller+0x860>)
   9da56:	881b      	ldrh	r3, [r3, #0]
   9da58:	4619      	mov	r1, r3
   9da5a:	4a7a      	ldr	r2, [pc, #488]	; (9dc44 <Cl_disinf_controller+0x864>)
   9da5c:	460b      	mov	r3, r1
   9da5e:	00db      	lsls	r3, r3, #3
   9da60:	1a5b      	subs	r3, r3, r1
   9da62:	4413      	add	r3, r2
   9da64:	3302      	adds	r3, #2
   9da66:	781b      	ldrb	r3, [r3, #0]
   9da68:	f083 0301 	eor.w	r3, r3, #1
   9da6c:	b2db      	uxtb	r3, r3
   9da6e:	2b00      	cmp	r3, #0
   9da70:	d01e      	beq.n	9dab0 <Cl_disinf_controller+0x6d0>
								{
									sv_cntrl_resetredalarm();
   9da72:	4b75      	ldr	r3, [pc, #468]	; (9dc48 <Cl_disinf_controller+0x868>)
   9da74:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   9da76:	4b75      	ldr	r3, [pc, #468]	; (9dc4c <Cl_disinf_controller+0x86c>)
   9da78:	4798      	blx	r3
									alarm_flag = 1;
   9da7a:	4b75      	ldr	r3, [pc, #468]	; (9dc50 <Cl_disinf_controller+0x870>)
   9da7c:	2201      	movs	r2, #1
   9da7e:	701a      	strb	r2, [r3, #0]
									if (alarm_flag1 == 0)
   9da80:	4b74      	ldr	r3, [pc, #464]	; (9dc54 <Cl_disinf_controller+0x874>)
   9da82:	781b      	ldrb	r3, [r3, #0]
   9da84:	b2db      	uxtb	r3, r3
   9da86:	2b00      	cmp	r3, #0
   9da88:	d112      	bne.n	9dab0 <Cl_disinf_controller+0x6d0>
									{
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9da8a:	233b      	movs	r3, #59	; 0x3b
   9da8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					 data = (Cl_Uint8Type)0;
   9da90:	2300      	movs	r3, #0
   9da92:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9da94:	f107 0113 	add.w	r1, r7, #19
   9da98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9da9c:	2200      	movs	r2, #0
   9da9e:	4618      	mov	r0, r3
   9daa0:	4b6d      	ldr	r3, [pc, #436]	; (9dc58 <Cl_disinf_controller+0x878>)
   9daa2:	4798      	blx	r3
   9daa4:	4603      	mov	r3, r0
   9daa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9daaa:	4b6c      	ldr	r3, [pc, #432]	; (9dc5c <Cl_disinf_controller+0x87c>)
   9daac:	2205      	movs	r2, #5
   9daae:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9dab0:	4b63      	ldr	r3, [pc, #396]	; (9dc40 <Cl_disinf_controller+0x860>)
   9dab2:	881b      	ldrh	r3, [r3, #0]
   9dab4:	3301      	adds	r3, #1
   9dab6:	b29a      	uxth	r2, r3
   9dab8:	4b61      	ldr	r3, [pc, #388]	; (9dc40 <Cl_disinf_controller+0x860>)
   9daba:	801a      	strh	r2, [r3, #0]
   9dabc:	4b60      	ldr	r3, [pc, #384]	; (9dc40 <Cl_disinf_controller+0x860>)
   9dabe:	881b      	ldrh	r3, [r3, #0]
   9dac0:	2b0b      	cmp	r3, #11
   9dac2:	f67f af58 	bls.w	9d976 <Cl_disinf_controller+0x596>
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9dac6:	e000      	b.n	9daca <Cl_disinf_controller+0x6ea>
					if (alarm_flag == 1)
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
						alarm_flag = 0;
					}
					break;
   9dac8:	bf00      	nop
							}
						}
					break;
							
				}
			break;
   9daca:	f000 bebc 	b.w	9e846 <Cl_disinf_controller+0x1466>
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   9dace:	7efb      	ldrb	r3, [r7, #27]
   9dad0:	3b03      	subs	r3, #3
   9dad2:	2b10      	cmp	r3, #16
   9dad4:	d87d      	bhi.n	9dbd2 <Cl_disinf_controller+0x7f2>
   9dad6:	a201      	add	r2, pc, #4	; (adr r2, 9dadc <Cl_disinf_controller+0x6fc>)
   9dad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dadc:	0009db21 	.word	0x0009db21
   9dae0:	0009dbd3 	.word	0x0009dbd3
   9dae4:	0009dbd3 	.word	0x0009dbd3
   9dae8:	0009dbd3 	.word	0x0009dbd3
   9daec:	0009dbd3 	.word	0x0009dbd3
   9daf0:	0009dbd3 	.word	0x0009dbd3
   9daf4:	0009dbd3 	.word	0x0009dbd3
   9daf8:	0009dbd3 	.word	0x0009dbd3
   9dafc:	0009dbd3 	.word	0x0009dbd3
   9db00:	0009dbd3 	.word	0x0009dbd3
   9db04:	0009dbd3 	.word	0x0009dbd3
   9db08:	0009dbd3 	.word	0x0009dbd3
   9db0c:	0009db2d 	.word	0x0009db2d
   9db10:	0009dbd3 	.word	0x0009dbd3
   9db14:	0009dbd3 	.word	0x0009dbd3
   9db18:	0009dbd3 	.word	0x0009dbd3
   9db1c:	0009dbc7 	.word	0x0009dbc7
						{

							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9db20:	4b4f      	ldr	r3, [pc, #316]	; (9dc60 <Cl_disinf_controller+0x880>)
   9db22:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9db24:	4b4d      	ldr	r3, [pc, #308]	; (9dc5c <Cl_disinf_controller+0x87c>)
   9db26:	2200      	movs	r2, #0
   9db28:	701a      	strb	r2, [r3, #0]
							break;
   9db2a:	e056      	b.n	9dbda <Cl_disinf_controller+0x7fa>
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   9db2c:	4b4d      	ldr	r3, [pc, #308]	; (9dc64 <Cl_disinf_controller+0x884>)
   9db2e:	881b      	ldrh	r3, [r3, #0]
   9db30:	3301      	adds	r3, #1
   9db32:	b29a      	uxth	r2, r3
   9db34:	4b4b      	ldr	r3, [pc, #300]	; (9dc64 <Cl_disinf_controller+0x884>)
   9db36:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   9db38:	4b4a      	ldr	r3, [pc, #296]	; (9dc64 <Cl_disinf_controller+0x884>)
   9db3a:	881b      	ldrh	r3, [r3, #0]
   9db3c:	2b03      	cmp	r3, #3
   9db3e:	d902      	bls.n	9db46 <Cl_disinf_controller+0x766>
							{
								Cl_disinfOpenFillTimeOut = true;
   9db40:	4b49      	ldr	r3, [pc, #292]	; (9dc68 <Cl_disinf_controller+0x888>)
   9db42:	2201      	movs	r2, #1
   9db44:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   9db46:	4b48      	ldr	r3, [pc, #288]	; (9dc68 <Cl_disinf_controller+0x888>)
   9db48:	781b      	ldrb	r3, [r3, #0]
   9db4a:	2b00      	cmp	r3, #0
   9db4c:	d044      	beq.n	9dbd8 <Cl_disinf_controller+0x7f8>
							{
								if (flag_hotcitric == 1 || flag_citric == 1 )
   9db4e:	4b47      	ldr	r3, [pc, #284]	; (9dc6c <Cl_disinf_controller+0x88c>)
   9db50:	781b      	ldrb	r3, [r3, #0]
   9db52:	2b01      	cmp	r3, #1
   9db54:	d003      	beq.n	9db5e <Cl_disinf_controller+0x77e>
   9db56:	4b46      	ldr	r3, [pc, #280]	; (9dc70 <Cl_disinf_controller+0x890>)
   9db58:	781b      	ldrb	r3, [r3, #0]
   9db5a:	2b01      	cmp	r3, #1
   9db5c:	d119      	bne.n	9db92 <Cl_disinf_controller+0x7b2>
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9db5e:	2001      	movs	r0, #1
   9db60:	4b44      	ldr	r3, [pc, #272]	; (9dc74 <Cl_disinf_controller+0x894>)
   9db62:	4798      	blx	r3
   9db64:	4603      	mov	r3, r0
   9db66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9db6a:	2002      	movs	r0, #2
   9db6c:	4b41      	ldr	r3, [pc, #260]	; (9dc74 <Cl_disinf_controller+0x894>)
   9db6e:	4798      	blx	r3
   9db70:	4603      	mov	r3, r0
   9db72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9db76:	2203      	movs	r2, #3
   9db78:	493f      	ldr	r1, [pc, #252]	; (9dc78 <Cl_disinf_controller+0x898>)
   9db7a:	2018      	movs	r0, #24
   9db7c:	4b36      	ldr	r3, [pc, #216]	; (9dc58 <Cl_disinf_controller+0x878>)
   9db7e:	4798      	blx	r3
								sv_prop_start_citricdisinfect_intake();
   9db80:	4b3e      	ldr	r3, [pc, #248]	; (9dc7c <Cl_disinf_controller+0x89c>)
   9db82:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9db84:	4b35      	ldr	r3, [pc, #212]	; (9dc5c <Cl_disinf_controller+0x87c>)
   9db86:	2206      	movs	r2, #6
   9db88:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9db8a:	4b36      	ldr	r3, [pc, #216]	; (9dc64 <Cl_disinf_controller+0x884>)
   9db8c:	2200      	movs	r2, #0
   9db8e:	801a      	strh	r2, [r3, #0]
								
							}

					
							
							break;
   9db90:	e022      	b.n	9dbd8 <Cl_disinf_controller+0x7f8>
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
								sec_count =0;
								}
								else
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9db92:	2001      	movs	r0, #1
   9db94:	4b37      	ldr	r3, [pc, #220]	; (9dc74 <Cl_disinf_controller+0x894>)
   9db96:	4798      	blx	r3
   9db98:	4603      	mov	r3, r0
   9db9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9db9e:	2002      	movs	r0, #2
   9dba0:	4b34      	ldr	r3, [pc, #208]	; (9dc74 <Cl_disinf_controller+0x894>)
   9dba2:	4798      	blx	r3
   9dba4:	4603      	mov	r3, r0
   9dba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9dbaa:	2203      	movs	r2, #3
   9dbac:	4932      	ldr	r1, [pc, #200]	; (9dc78 <Cl_disinf_controller+0x898>)
   9dbae:	2018      	movs	r0, #24
   9dbb0:	4b29      	ldr	r3, [pc, #164]	; (9dc58 <Cl_disinf_controller+0x878>)
   9dbb2:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   9dbb4:	4b32      	ldr	r3, [pc, #200]	; (9dc80 <Cl_disinf_controller+0x8a0>)
   9dbb6:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9dbb8:	4b28      	ldr	r3, [pc, #160]	; (9dc5c <Cl_disinf_controller+0x87c>)
   9dbba:	2206      	movs	r2, #6
   9dbbc:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9dbbe:	4b29      	ldr	r3, [pc, #164]	; (9dc64 <Cl_disinf_controller+0x884>)
   9dbc0:	2200      	movs	r2, #0
   9dbc2:	801a      	strh	r2, [r3, #0]
								
							}

					
							
							break;
   9dbc4:	e008      	b.n	9dbd8 <Cl_disinf_controller+0x7f8>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9dbc6:	4b2f      	ldr	r3, [pc, #188]	; (9dc84 <Cl_disinf_controller+0x8a4>)
   9dbc8:	4798      	blx	r3
   9dbca:	4603      	mov	r3, r0
   9dbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9dbd0:	e003      	b.n	9dbda <Cl_disinf_controller+0x7fa>
							default:break;
   9dbd2:	bf00      	nop
   9dbd4:	f000 be3c 	b.w	9e850 <Cl_disinf_controller+0x1470>
								
							}

					
							
							break;
   9dbd8:	bf00      	nop
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
							break;
							default:break;
						}
			break;
   9dbda:	f000 be39 	b.w	9e850 <Cl_disinf_controller+0x1470>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   9dbde:	7efb      	ldrb	r3, [r7, #27]
   9dbe0:	3b03      	subs	r3, #3
   9dbe2:	2b10      	cmp	r3, #16
   9dbe4:	f200 813f 	bhi.w	9de66 <Cl_disinf_controller+0xa86>
   9dbe8:	a201      	add	r2, pc, #4	; (adr r2, 9dbf0 <Cl_disinf_controller+0x810>)
   9dbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dbee:	bf00      	nop
   9dbf0:	0009dc35 	.word	0x0009dc35
   9dbf4:	0009de67 	.word	0x0009de67
   9dbf8:	0009de67 	.word	0x0009de67
   9dbfc:	0009de67 	.word	0x0009de67
   9dc00:	0009de67 	.word	0x0009de67
   9dc04:	0009de67 	.word	0x0009de67
   9dc08:	0009de67 	.word	0x0009de67
   9dc0c:	0009de67 	.word	0x0009de67
   9dc10:	0009de67 	.word	0x0009de67
   9dc14:	0009de67 	.word	0x0009de67
   9dc18:	0009de67 	.word	0x0009de67
   9dc1c:	0009de67 	.word	0x0009de67
   9dc20:	0009dc89 	.word	0x0009dc89
   9dc24:	0009de67 	.word	0x0009de67
   9dc28:	0009de67 	.word	0x0009de67
   9dc2c:	0009de67 	.word	0x0009de67
   9dc30:	0009de5b 	.word	0x0009de5b
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9dc34:	4b0a      	ldr	r3, [pc, #40]	; (9dc60 <Cl_disinf_controller+0x880>)
   9dc36:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9dc38:	4b08      	ldr	r3, [pc, #32]	; (9dc5c <Cl_disinf_controller+0x87c>)
   9dc3a:	2200      	movs	r2, #0
   9dc3c:	701a      	strb	r2, [r3, #0]
							break;
   9dc3e:	e116      	b.n	9de6e <Cl_disinf_controller+0xa8e>
   9dc40:	200727dc 	.word	0x200727dc
   9dc44:	20070b10 	.word	0x20070b10
   9dc48:	0009b07d 	.word	0x0009b07d
   9dc4c:	0009b0b9 	.word	0x0009b0b9
   9dc50:	20071add 	.word	0x20071add
   9dc54:	20071ade 	.word	0x20071ade
   9dc58:	0009cbd5 	.word	0x0009cbd5
   9dc5c:	20071adf 	.word	0x20071adf
   9dc60:	0009ebe5 	.word	0x0009ebe5
   9dc64:	20071b08 	.word	0x20071b08
   9dc68:	20070b0e 	.word	0x20070b0e
   9dc6c:	20071937 	.word	0x20071937
   9dc70:	2007193a 	.word	0x2007193a
   9dc74:	0009ad7d 	.word	0x0009ad7d
   9dc78:	000aa3dc 	.word	0x000aa3dc
   9dc7c:	0009b249 	.word	0x0009b249
   9dc80:	0009b221 	.word	0x0009b221
   9dc84:	0009eee5 	.word	0x0009eee5
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   9dc88:	4b81      	ldr	r3, [pc, #516]	; (9de90 <Cl_disinf_controller+0xab0>)
   9dc8a:	681b      	ldr	r3, [r3, #0]
   9dc8c:	3301      	adds	r3, #1
   9dc8e:	4a80      	ldr	r2, [pc, #512]	; (9de90 <Cl_disinf_controller+0xab0>)
   9dc90:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9dc92:	4b80      	ldr	r3, [pc, #512]	; (9de94 <Cl_disinf_controller+0xab4>)
   9dc94:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9dc96:	4b7e      	ldr	r3, [pc, #504]	; (9de90 <Cl_disinf_controller+0xab0>)
   9dc98:	681b      	ldr	r3, [r3, #0]
   9dc9a:	2b3c      	cmp	r3, #60	; 0x3c
   9dc9c:	d101      	bne.n	9dca2 <Cl_disinf_controller+0x8c2>
							{
						
								UpdateDisinfMinuteTick();
   9dc9e:	4b7e      	ldr	r3, [pc, #504]	; (9de98 <Cl_disinf_controller+0xab8>)
   9dca0:	4798      	blx	r3
						
						
							}
							sec_count ++;
   9dca2:	4b7e      	ldr	r3, [pc, #504]	; (9de9c <Cl_disinf_controller+0xabc>)
   9dca4:	881b      	ldrh	r3, [r3, #0]
   9dca6:	3301      	adds	r3, #1
   9dca8:	b29a      	uxth	r2, r3
   9dcaa:	4b7c      	ldr	r3, [pc, #496]	; (9de9c <Cl_disinf_controller+0xabc>)
   9dcac:	801a      	strh	r2, [r3, #0]
							if (flag_hotcitric == 1 )
   9dcae:	4b7c      	ldr	r3, [pc, #496]	; (9dea0 <Cl_disinf_controller+0xac0>)
   9dcb0:	781b      	ldrb	r3, [r3, #0]
   9dcb2:	2b01      	cmp	r3, #1
   9dcb4:	d142      	bne.n	9dd3c <Cl_disinf_controller+0x95c>
							{
								if(sec_count > 90)
   9dcb6:	4b79      	ldr	r3, [pc, #484]	; (9de9c <Cl_disinf_controller+0xabc>)
   9dcb8:	881b      	ldrh	r3, [r3, #0]
   9dcba:	2b5a      	cmp	r3, #90	; 0x5a
   9dcbc:	d93e      	bls.n	9dd3c <Cl_disinf_controller+0x95c>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9dcbe:	2203      	movs	r2, #3
   9dcc0:	4978      	ldr	r1, [pc, #480]	; (9dea4 <Cl_disinf_controller+0xac4>)
   9dcc2:	2018      	movs	r0, #24
   9dcc4:	4b78      	ldr	r3, [pc, #480]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9dcc6:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9dcc8:	4b78      	ldr	r3, [pc, #480]	; (9deac <Cl_disinf_controller+0xacc>)
   9dcca:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9dccc:	2002      	movs	r0, #2
   9dcce:	4b78      	ldr	r3, [pc, #480]	; (9deb0 <Cl_disinf_controller+0xad0>)
   9dcd0:	4798      	blx	r3
   9dcd2:	4603      	mov	r3, r0
   9dcd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9dcd8:	2001      	movs	r0, #1
   9dcda:	4b75      	ldr	r3, [pc, #468]	; (9deb0 <Cl_disinf_controller+0xad0>)
   9dcdc:	4798      	blx	r3
   9dcde:	4603      	mov	r3, r0
   9dce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9dce4:	2005      	movs	r0, #5
   9dce6:	4b73      	ldr	r3, [pc, #460]	; (9deb4 <Cl_disinf_controller+0xad4>)
   9dce8:	4798      	blx	r3
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9dcea:	2339      	movs	r3, #57	; 0x39
   9dcec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9dcf0:	2302      	movs	r3, #2
   9dcf2:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9dcf4:	f107 0113 	add.w	r1, r7, #19
   9dcf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9dcfc:	2201      	movs	r2, #1
   9dcfe:	4618      	mov	r0, r3
   9dd00:	4b69      	ldr	r3, [pc, #420]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9dd02:	4798      	blx	r3
   9dd04:	4603      	mov	r3, r0
   9dd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									IntakeReadyFlag = false;
   9dd0a:	4b6b      	ldr	r3, [pc, #428]	; (9deb8 <Cl_disinf_controller+0xad8>)
   9dd0c:	2200      	movs	r2, #0
   9dd0e:	701a      	strb	r2, [r3, #0]
									
									cl_wait(20);
   9dd10:	2014      	movs	r0, #20
   9dd12:	4b6a      	ldr	r3, [pc, #424]	; (9debc <Cl_disinf_controller+0xadc>)
   9dd14:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9dd16:	2338      	movs	r3, #56	; 0x38
   9dd18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9dd1c:	2300      	movs	r3, #0
   9dd1e:	74fb      	strb	r3, [r7, #19]
						//			cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
							
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9dd20:	f107 0113 	add.w	r1, r7, #19
   9dd24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9dd28:	2200      	movs	r2, #0
   9dd2a:	4618      	mov	r0, r3
   9dd2c:	4b5e      	ldr	r3, [pc, #376]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9dd2e:	4798      	blx	r3
   9dd30:	4603      	mov	r3, r0
   9dd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9dd36:	4b62      	ldr	r3, [pc, #392]	; (9dec0 <Cl_disinf_controller+0xae0>)
   9dd38:	2207      	movs	r2, #7
   9dd3a:	701a      	strb	r2, [r3, #0]

								}
							}
							
							if (flag_citric == 1 )
   9dd3c:	4b61      	ldr	r3, [pc, #388]	; (9dec4 <Cl_disinf_controller+0xae4>)
   9dd3e:	781b      	ldrb	r3, [r3, #0]
   9dd40:	2b01      	cmp	r3, #1
   9dd42:	d144      	bne.n	9ddce <Cl_disinf_controller+0x9ee>
							{
								if(sec_count > 90)
   9dd44:	4b55      	ldr	r3, [pc, #340]	; (9de9c <Cl_disinf_controller+0xabc>)
   9dd46:	881b      	ldrh	r3, [r3, #0]
   9dd48:	2b5a      	cmp	r3, #90	; 0x5a
   9dd4a:	f240 808f 	bls.w	9de6c <Cl_disinf_controller+0xa8c>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9dd4e:	2203      	movs	r2, #3
   9dd50:	4954      	ldr	r1, [pc, #336]	; (9dea4 <Cl_disinf_controller+0xac4>)
   9dd52:	2018      	movs	r0, #24
   9dd54:	4b54      	ldr	r3, [pc, #336]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9dd56:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9dd58:	4b54      	ldr	r3, [pc, #336]	; (9deac <Cl_disinf_controller+0xacc>)
   9dd5a:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9dd5c:	2002      	movs	r0, #2
   9dd5e:	4b54      	ldr	r3, [pc, #336]	; (9deb0 <Cl_disinf_controller+0xad0>)
   9dd60:	4798      	blx	r3
   9dd62:	4603      	mov	r3, r0
   9dd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9dd68:	2001      	movs	r0, #1
   9dd6a:	4b51      	ldr	r3, [pc, #324]	; (9deb0 <Cl_disinf_controller+0xad0>)
   9dd6c:	4798      	blx	r3
   9dd6e:	4603      	mov	r3, r0
   9dd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9dd74:	2005      	movs	r0, #5
   9dd76:	4b4f      	ldr	r3, [pc, #316]	; (9deb4 <Cl_disinf_controller+0xad4>)
   9dd78:	4798      	blx	r3
								
								IntakeReadyFlag = false;
   9dd7a:	4b4f      	ldr	r3, [pc, #316]	; (9deb8 <Cl_disinf_controller+0xad8>)
   9dd7c:	2200      	movs	r2, #0
   9dd7e:	701a      	strb	r2, [r3, #0]
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9dd80:	2339      	movs	r3, #57	; 0x39
   9dd82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9dd86:	2302      	movs	r3, #2
   9dd88:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9dd8a:	f107 0113 	add.w	r1, r7, #19
   9dd8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9dd92:	2201      	movs	r2, #1
   9dd94:	4618      	mov	r0, r3
   9dd96:	4b44      	ldr	r3, [pc, #272]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9dd98:	4798      	blx	r3
   9dd9a:	4603      	mov	r3, r0
   9dd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									cl_wait(20);
   9dda0:	2014      	movs	r0, #20
   9dda2:	4b46      	ldr	r3, [pc, #280]	; (9debc <Cl_disinf_controller+0xadc>)
   9dda4:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9dda6:	2338      	movs	r3, #56	; 0x38
   9dda8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9ddac:	2300      	movs	r3, #0
   9ddae:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9ddb0:	f107 0113 	add.w	r1, r7, #19
   9ddb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9ddb8:	2200      	movs	r2, #0
   9ddba:	4618      	mov	r0, r3
   9ddbc:	4b3a      	ldr	r3, [pc, #232]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9ddbe:	4798      	blx	r3
   9ddc0:	4603      	mov	r3, r0
   9ddc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9ddc6:	4b3e      	ldr	r3, [pc, #248]	; (9dec0 <Cl_disinf_controller+0xae0>)
   9ddc8:	2207      	movs	r2, #7
   9ddca:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9ddcc:	e04e      	b.n	9de6c <Cl_disinf_controller+0xa8c>
								

								}
							}
							
							else if(sec_count > 80)
   9ddce:	4b33      	ldr	r3, [pc, #204]	; (9de9c <Cl_disinf_controller+0xabc>)
   9ddd0:	881b      	ldrh	r3, [r3, #0]
   9ddd2:	2b50      	cmp	r3, #80	; 0x50
   9ddd4:	d94a      	bls.n	9de6c <Cl_disinf_controller+0xa8c>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9ddd6:	2203      	movs	r2, #3
   9ddd8:	4932      	ldr	r1, [pc, #200]	; (9dea4 <Cl_disinf_controller+0xac4>)
   9ddda:	2018      	movs	r0, #24
   9dddc:	4b32      	ldr	r3, [pc, #200]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9ddde:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   9dde0:	4b39      	ldr	r3, [pc, #228]	; (9dec8 <Cl_disinf_controller+0xae8>)
   9dde2:	4798      	blx	r3
								sv_prop_stop_citricdisinfect_intake();
   9dde4:	4b31      	ldr	r3, [pc, #196]	; (9deac <Cl_disinf_controller+0xacc>)
   9dde6:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9dde8:	2002      	movs	r0, #2
   9ddea:	4b31      	ldr	r3, [pc, #196]	; (9deb0 <Cl_disinf_controller+0xad0>)
   9ddec:	4798      	blx	r3
   9ddee:	4603      	mov	r3, r0
   9ddf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9ddf4:	2001      	movs	r0, #1
   9ddf6:	4b2e      	ldr	r3, [pc, #184]	; (9deb0 <Cl_disinf_controller+0xad0>)
   9ddf8:	4798      	blx	r3
   9ddfa:	4603      	mov	r3, r0
   9ddfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9de00:	2005      	movs	r0, #5
   9de02:	4b2c      	ldr	r3, [pc, #176]	; (9deb4 <Cl_disinf_controller+0xad4>)
   9de04:	4798      	blx	r3
								//flag_hotrinse = 0;
								//Cl_AlarmActivateAlarms(ACID_IN,false);
								//Cl_AlarmActivateAlarms(BICARB_IN,false);
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9de06:	2339      	movs	r3, #57	; 0x39
   9de08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)2;
   9de0c:	2302      	movs	r3, #2
   9de0e:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9de10:	f107 0113 	add.w	r1, r7, #19
   9de14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9de18:	2201      	movs	r2, #1
   9de1a:	4618      	mov	r0, r3
   9de1c:	4b22      	ldr	r3, [pc, #136]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9de1e:	4798      	blx	r3
   9de20:	4603      	mov	r3, r0
   9de22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								IntakeReadyFlag = false;
   9de26:	4b24      	ldr	r3, [pc, #144]	; (9deb8 <Cl_disinf_controller+0xad8>)
   9de28:	2200      	movs	r2, #0
   9de2a:	701a      	strb	r2, [r3, #0]
								
								cl_wait(20);
   9de2c:	2014      	movs	r0, #20
   9de2e:	4b23      	ldr	r3, [pc, #140]	; (9debc <Cl_disinf_controller+0xadc>)
   9de30:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   9de32:	2338      	movs	r3, #56	; 0x38
   9de34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)0;
   9de38:	2300      	movs	r3, #0
   9de3a:	74fb      	strb	r3, [r7, #19]
							//	cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9de3c:	f107 0113 	add.w	r1, r7, #19
   9de40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9de44:	2200      	movs	r2, #0
   9de46:	4618      	mov	r0, r3
   9de48:	4b17      	ldr	r3, [pc, #92]	; (9dea8 <Cl_disinf_controller+0xac8>)
   9de4a:	4798      	blx	r3
   9de4c:	4603      	mov	r3, r0
   9de4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9de52:	4b1b      	ldr	r3, [pc, #108]	; (9dec0 <Cl_disinf_controller+0xae0>)
   9de54:	2207      	movs	r2, #7
   9de56:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   9de58:	e008      	b.n	9de6c <Cl_disinf_controller+0xa8c>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9de5a:	4b1c      	ldr	r3, [pc, #112]	; (9decc <Cl_disinf_controller+0xaec>)
   9de5c:	4798      	blx	r3
   9de5e:	4603      	mov	r3, r0
   9de60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9de64:	e003      	b.n	9de6e <Cl_disinf_controller+0xa8e>
							default:break;
   9de66:	bf00      	nop
   9de68:	f000 bcf2 	b.w	9e850 <Cl_disinf_controller+0x1470>
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9de6c:	bf00      	nop
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
							break;
							default:break;
						}
			
			break;
   9de6e:	f000 bcef 	b.w	9e850 <Cl_disinf_controller+0x1470>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   9de72:	7efb      	ldrb	r3, [r7, #27]
   9de74:	2b03      	cmp	r3, #3
   9de76:	d005      	beq.n	9de84 <Cl_disinf_controller+0xaa4>
   9de78:	2b13      	cmp	r3, #19
   9de7a:	f000 80a8 	beq.w	9dfce <Cl_disinf_controller+0xbee>
   9de7e:	2b02      	cmp	r3, #2
   9de80:	d028      	beq.n	9ded4 <Cl_disinf_controller+0xaf4>

								break;
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
								break;
								default:break;
   9de82:	e0aa      	b.n	9dfda <Cl_disinf_controller+0xbfa>
			
						switch (cl_disinfevent)
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9de84:	4b12      	ldr	r3, [pc, #72]	; (9ded0 <Cl_disinf_controller+0xaf0>)
   9de86:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9de88:	4b0d      	ldr	r3, [pc, #52]	; (9dec0 <Cl_disinf_controller+0xae0>)
   9de8a:	2200      	movs	r2, #0
   9de8c:	701a      	strb	r2, [r3, #0]
							break;
   9de8e:	e0a4      	b.n	9dfda <Cl_disinf_controller+0xbfa>
   9de90:	20071ae0 	.word	0x20071ae0
   9de94:	0009f211 	.word	0x0009f211
   9de98:	0009f5d9 	.word	0x0009f5d9
   9de9c:	20071b08 	.word	0x20071b08
   9dea0:	20071937 	.word	0x20071937
   9dea4:	000aa3e0 	.word	0x000aa3e0
   9dea8:	0009cbd5 	.word	0x0009cbd5
   9deac:	0009b25d 	.word	0x0009b25d
   9deb0:	0009ad7d 	.word	0x0009ad7d
   9deb4:	00082ea5 	.word	0x00082ea5
   9deb8:	20071b10 	.word	0x20071b10
   9debc:	00093ea9 	.word	0x00093ea9
   9dec0:	20071adf 	.word	0x20071adf
   9dec4:	2007193a 	.word	0x2007193a
   9dec8:	0009b235 	.word	0x0009b235
   9decc:	0009eee5 	.word	0x0009eee5
   9ded0:	0009ebe5 	.word	0x0009ebe5
							
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9ded4:	2002      	movs	r0, #2
   9ded6:	4b9a      	ldr	r3, [pc, #616]	; (9e140 <Cl_disinf_controller+0xd60>)
   9ded8:	4798      	blx	r3
   9deda:	4603      	mov	r3, r0
   9dedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9dee0:	2001      	movs	r0, #1
   9dee2:	4b97      	ldr	r3, [pc, #604]	; (9e140 <Cl_disinf_controller+0xd60>)
   9dee4:	4798      	blx	r3
   9dee6:	4603      	mov	r3, r0
   9dee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9deec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9def0:	2002      	movs	r0, #2
   9def2:	4b94      	ldr	r3, [pc, #592]	; (9e144 <Cl_disinf_controller+0xd64>)
   9def4:	4798      	blx	r3
   9def6:	4603      	mov	r3, r0
   9def8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9defc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9df00:	2001      	movs	r0, #1
   9df02:	4b90      	ldr	r3, [pc, #576]	; (9e144 <Cl_disinf_controller+0xd64>)
   9df04:	4798      	blx	r3
   9df06:	4603      	mov	r3, r0
   9df08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								openfill_flag = 1;
   9df0c:	4b8e      	ldr	r3, [pc, #568]	; (9e148 <Cl_disinf_controller+0xd68>)
   9df0e:	2201      	movs	r2, #1
   9df10:	701a      	strb	r2, [r3, #0]
								Cl_Uint16Type potvalue = 0;
   9df12:	2300      	movs	r3, #0
   9df14:	843b      	strh	r3, [r7, #32]
								potvalue = (850 * 1024)/10000;                                 // 600
   9df16:	2357      	movs	r3, #87	; 0x57
   9df18:	843b      	strh	r3, [r7, #32]
								sv_cs_setpotvalue(potvalue);
   9df1a:	8c3b      	ldrh	r3, [r7, #32]
   9df1c:	4618      	mov	r0, r3
   9df1e:	4b8b      	ldr	r3, [pc, #556]	; (9e14c <Cl_disinf_controller+0xd6c>)
   9df20:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9df22:	4b8b      	ldr	r3, [pc, #556]	; (9e150 <Cl_disinf_controller+0xd70>)
   9df24:	781b      	ldrb	r3, [r3, #0]
   9df26:	2b01      	cmp	r3, #1
   9df28:	d102      	bne.n	9df30 <Cl_disinf_controller+0xb50>
 								{
 								hotrinse_flag = 1;
   9df2a:	4b8a      	ldr	r3, [pc, #552]	; (9e154 <Cl_disinf_controller+0xd74>)
   9df2c:	2201      	movs	r2, #1
   9df2e:	701a      	strb	r2, [r3, #0]
 								}
								
								Cl_bc_controller(BC_EVENT_START);
   9df30:	2004      	movs	r0, #4
   9df32:	4b89      	ldr	r3, [pc, #548]	; (9e158 <Cl_disinf_controller+0xd78>)
   9df34:	4798      	blx	r3
								Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );     // manav02 added no ts1 alarm during loopback
   9df36:	2100      	movs	r1, #0
   9df38:	2010      	movs	r0, #16
   9df3a:	4b88      	ldr	r3, [pc, #544]	; (9e15c <Cl_disinf_controller+0xd7c>)
   9df3c:	4798      	blx	r3
								Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9df3e:	2100      	movs	r1, #0
   9df40:	200f      	movs	r0, #15
   9df42:	4b86      	ldr	r3, [pc, #536]	; (9e15c <Cl_disinf_controller+0xd7c>)
   9df44:	4798      	blx	r3

								sv_cntrl_enable_loopback();
   9df46:	4b86      	ldr	r3, [pc, #536]	; (9e160 <Cl_disinf_controller+0xd80>)
   9df48:	4798      	blx	r3
// 								if (flag_hotcitric == 1)
// 								{
// 									sv_cntrl_poweronheater();
// 									sv_cntrl_incheater(3500);
// 								}
								sv_cntrl_activate_valve(VALVE_ID2);
   9df4a:	2002      	movs	r0, #2
   9df4c:	4b85      	ldr	r3, [pc, #532]	; (9e164 <Cl_disinf_controller+0xd84>)
   9df4e:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID3);
   9df50:	2003      	movs	r0, #3
   9df52:	4b84      	ldr	r3, [pc, #528]	; (9e164 <Cl_disinf_controller+0xd84>)
   9df54:	4798      	blx	r3
							//	sv_prop_startmixing();     // manav03 commented
								sv_prop_startopenfill();   // manav02 added to run piston pumps during disinfect open fill
   9df56:	4b84      	ldr	r3, [pc, #528]	; (9e168 <Cl_disinf_controller+0xd88>)
   9df58:	4798      	blx	r3
								sv_cntrl_activatepump(UFPUMP);
   9df5a:	2004      	movs	r0, #4
   9df5c:	4b78      	ldr	r3, [pc, #480]	; (9e140 <Cl_disinf_controller+0xd60>)
   9df5e:	4798      	blx	r3
								sec_count =0;
   9df60:	4b82      	ldr	r3, [pc, #520]	; (9e16c <Cl_disinf_controller+0xd8c>)
   9df62:	2200      	movs	r2, #0
   9df64:	801a      	strh	r2, [r3, #0]
								command = CON_TX_COMMAND_DISINF_RESUMED;
   9df66:	233b      	movs	r3, #59	; 0x3b
   9df68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9df6c:	f107 0113 	add.w	r1, r7, #19
   9df70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9df74:	2200      	movs	r2, #0
   9df76:	4618      	mov	r0, r3
   9df78:	4b7d      	ldr	r3, [pc, #500]	; (9e170 <Cl_disinf_controller+0xd90>)
   9df7a:	4798      	blx	r3
   9df7c:	4603      	mov	r3, r0
   9df7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9df82:	4b7c      	ldr	r3, [pc, #496]	; (9e174 <Cl_disinf_controller+0xd94>)
   9df84:	2208      	movs	r2, #8
   9df86:	701a      	strb	r2, [r3, #0]
							//	cl_disinfstate = CL_DISINF_STATE_INTER_1;
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9df88:	2300      	movs	r3, #0
   9df8a:	9300      	str	r3, [sp, #0]
   9df8c:	f04f 0300 	mov.w	r3, #0
   9df90:	f04f 0200 	mov.w	r2, #0
   9df94:	2100      	movs	r1, #0
   9df96:	2029      	movs	r0, #41	; 0x29
   9df98:	4c77      	ldr	r4, [pc, #476]	; (9e178 <Cl_disinf_controller+0xd98>)
   9df9a:	47a0      	blx	r4
   9df9c:	4603      	mov	r3, r0
   9df9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9dfa2:	2300      	movs	r3, #0
   9dfa4:	9300      	str	r3, [sp, #0]
   9dfa6:	f04f 0300 	mov.w	r3, #0
   9dfaa:	f04f 0200 	mov.w	r2, #0
   9dfae:	2100      	movs	r1, #0
   9dfb0:	202b      	movs	r0, #43	; 0x2b
   9dfb2:	4c71      	ldr	r4, [pc, #452]	; (9e178 <Cl_disinf_controller+0xd98>)
   9dfb4:	47a0      	blx	r4
   9dfb6:	4603      	mov	r3, r0
   9dfb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_AlarmActivateAlarms(ACID_IN_OPEN,true);
   9dfbc:	2101      	movs	r1, #1
   9dfbe:	2029      	movs	r0, #41	; 0x29
   9dfc0:	4b66      	ldr	r3, [pc, #408]	; (9e15c <Cl_disinf_controller+0xd7c>)
   9dfc2:	4798      	blx	r3
								Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true);
   9dfc4:	2101      	movs	r1, #1
   9dfc6:	202b      	movs	r0, #43	; 0x2b
   9dfc8:	4b64      	ldr	r3, [pc, #400]	; (9e15c <Cl_disinf_controller+0xd7c>)
   9dfca:	4798      	blx	r3
									data = (Cl_Uint8Type)3;
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
   9dfcc:	e005      	b.n	9dfda <Cl_disinf_controller+0xbfa>
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9dfce:	4b6b      	ldr	r3, [pc, #428]	; (9e17c <Cl_disinf_controller+0xd9c>)
   9dfd0:	4798      	blx	r3
   9dfd2:	4603      	mov	r3, r0
   9dfd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;
   9dfd8:	bf00      	nop
								default:break;
						}
			
			break;
   9dfda:	f000 bc39 	b.w	9e850 <Cl_disinf_controller+0x1470>
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
   9dfde:	7efb      	ldrb	r3, [r7, #27]
   9dfe0:	3b03      	subs	r3, #3
   9dfe2:	2b22      	cmp	r3, #34	; 0x22
   9dfe4:	f200 8431 	bhi.w	9e84a <Cl_disinf_controller+0x146a>
   9dfe8:	a201      	add	r2, pc, #4	; (adr r2, 9dff0 <Cl_disinf_controller+0xc10>)
   9dfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dfee:	bf00      	nop
   9dff0:	0009e07d 	.word	0x0009e07d
   9dff4:	0009e84b 	.word	0x0009e84b
   9dff8:	0009e84b 	.word	0x0009e84b
   9dffc:	0009e84b 	.word	0x0009e84b
   9e000:	0009e84b 	.word	0x0009e84b
   9e004:	0009e84b 	.word	0x0009e84b
   9e008:	0009e84b 	.word	0x0009e84b
   9e00c:	0009e84b 	.word	0x0009e84b
   9e010:	0009e84b 	.word	0x0009e84b
   9e014:	0009e84b 	.word	0x0009e84b
   9e018:	0009e84b 	.word	0x0009e84b
   9e01c:	0009e84b 	.word	0x0009e84b
   9e020:	0009e0b9 	.word	0x0009e0b9
   9e024:	0009e84b 	.word	0x0009e84b
   9e028:	0009e84b 	.word	0x0009e84b
   9e02c:	0009e84b 	.word	0x0009e84b
   9e030:	0009e089 	.word	0x0009e089
   9e034:	0009e84b 	.word	0x0009e84b
   9e038:	0009e84b 	.word	0x0009e84b
   9e03c:	0009e84b 	.word	0x0009e84b
   9e040:	0009e84b 	.word	0x0009e84b
   9e044:	0009e84b 	.word	0x0009e84b
   9e048:	0009e84b 	.word	0x0009e84b
   9e04c:	0009e84b 	.word	0x0009e84b
   9e050:	0009e84b 	.word	0x0009e84b
   9e054:	0009e84b 	.word	0x0009e84b
   9e058:	0009e84b 	.word	0x0009e84b
   9e05c:	0009e84b 	.word	0x0009e84b
   9e060:	0009e84b 	.word	0x0009e84b
   9e064:	0009e84b 	.word	0x0009e84b
   9e068:	0009e84b 	.word	0x0009e84b
   9e06c:	0009e84b 	.word	0x0009e84b
   9e070:	0009e84b 	.word	0x0009e84b
   9e074:	0009e84b 	.word	0x0009e84b
   9e078:	0009e095 	.word	0x0009e095
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9e07c:	4b40      	ldr	r3, [pc, #256]	; (9e180 <Cl_disinf_controller+0xda0>)
   9e07e:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e080:	4b3c      	ldr	r3, [pc, #240]	; (9e174 <Cl_disinf_controller+0xd94>)
   9e082:	2200      	movs	r2, #0
   9e084:	701a      	strb	r2, [r3, #0]
					break;
   9e086:	e02a      	b.n	9e0de <Cl_disinf_controller+0xcfe>
					
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9e088:	4b3c      	ldr	r3, [pc, #240]	; (9e17c <Cl_disinf_controller+0xd9c>)
   9e08a:	4798      	blx	r3
   9e08c:	4603      	mov	r3, r0
   9e08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9e092:	e024      	b.n	9e0de <Cl_disinf_controller+0xcfe>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9e094:	4b3b      	ldr	r3, [pc, #236]	; (9e184 <Cl_disinf_controller+0xda4>)
   9e096:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9e098:	4b3b      	ldr	r3, [pc, #236]	; (9e188 <Cl_disinf_controller+0xda8>)
   9e09a:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9e09c:	4b3b      	ldr	r3, [pc, #236]	; (9e18c <Cl_disinf_controller+0xdac>)
   9e09e:	4798      	blx	r3
					if (alarm_flag == 1)
   9e0a0:	4b3b      	ldr	r3, [pc, #236]	; (9e190 <Cl_disinf_controller+0xdb0>)
   9e0a2:	781b      	ldrb	r3, [r3, #0]
   9e0a4:	b2db      	uxtb	r3, r3
   9e0a6:	2b01      	cmp	r3, #1
   9e0a8:	d118      	bne.n	9e0dc <Cl_disinf_controller+0xcfc>
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9e0aa:	4b32      	ldr	r3, [pc, #200]	; (9e174 <Cl_disinf_controller+0xd94>)
   9e0ac:	2208      	movs	r2, #8
   9e0ae:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9e0b0:	4b37      	ldr	r3, [pc, #220]	; (9e190 <Cl_disinf_controller+0xdb0>)
   9e0b2:	2200      	movs	r2, #0
   9e0b4:	701a      	strb	r2, [r3, #0]
					}
					break;
   9e0b6:	e011      	b.n	9e0dc <Cl_disinf_controller+0xcfc>
								 
					case EVENT_DISINF_TICK_SECOND:
					
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9e0b8:	233b      	movs	r3, #59	; 0x3b
   9e0ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e0be:	f107 0113 	add.w	r1, r7, #19
   9e0c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e0c6:	2200      	movs	r2, #0
   9e0c8:	4618      	mov	r0, r3
   9e0ca:	4b29      	ldr	r3, [pc, #164]	; (9e170 <Cl_disinf_controller+0xd90>)
   9e0cc:	4798      	blx	r3
   9e0ce:	4603      	mov	r3, r0
   9e0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9e0d4:	4b27      	ldr	r3, [pc, #156]	; (9e174 <Cl_disinf_controller+0xd94>)
   9e0d6:	2208      	movs	r2, #8
   9e0d8:	701a      	strb	r2, [r3, #0]
// 								//Cl_Disinf_UpdateTimeInfo();
// 								
// 							}
// 						}
//					}
								break;
   9e0da:	e000      	b.n	9e0de <Cl_disinf_controller+0xcfe>
					if (alarm_flag == 1)
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
						alarm_flag = 0;
					}
					break;
   9e0dc:	bf00      	nop
// 						}
//					}
								break;
					
						}
			break;
   9e0de:	e3b4      	b.n	9e84a <Cl_disinf_controller+0x146a>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   9e0e0:	7efb      	ldrb	r3, [r7, #27]
   9e0e2:	3b03      	subs	r3, #3
   9e0e4:	2b10      	cmp	r3, #16
   9e0e6:	f200 8140 	bhi.w	9e36a <Cl_disinf_controller+0xf8a>
   9e0ea:	a201      	add	r2, pc, #4	; (adr r2, 9e0f0 <Cl_disinf_controller+0xd10>)
   9e0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e0f0:	0009e135 	.word	0x0009e135
   9e0f4:	0009e36b 	.word	0x0009e36b
   9e0f8:	0009e36b 	.word	0x0009e36b
   9e0fc:	0009e36b 	.word	0x0009e36b
   9e100:	0009e36b 	.word	0x0009e36b
   9e104:	0009e36b 	.word	0x0009e36b
   9e108:	0009e36b 	.word	0x0009e36b
   9e10c:	0009e36b 	.word	0x0009e36b
   9e110:	0009e36b 	.word	0x0009e36b
   9e114:	0009e36b 	.word	0x0009e36b
   9e118:	0009e36b 	.word	0x0009e36b
   9e11c:	0009e36b 	.word	0x0009e36b
   9e120:	0009e195 	.word	0x0009e195
   9e124:	0009e36b 	.word	0x0009e36b
   9e128:	0009e36b 	.word	0x0009e36b
   9e12c:	0009e36b 	.word	0x0009e36b
   9e130:	0009e35f 	.word	0x0009e35f
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e134:	4b12      	ldr	r3, [pc, #72]	; (9e180 <Cl_disinf_controller+0xda0>)
   9e136:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e138:	4b0e      	ldr	r3, [pc, #56]	; (9e174 <Cl_disinf_controller+0xd94>)
   9e13a:	2200      	movs	r2, #0
   9e13c:	701a      	strb	r2, [r3, #0]
							break;
   9e13e:	e117      	b.n	9e370 <Cl_disinf_controller+0xf90>
   9e140:	0009ad41 	.word	0x0009ad41
   9e144:	0009ae59 	.word	0x0009ae59
   9e148:	20071b0a 	.word	0x20071b0a
   9e14c:	0009b2c1 	.word	0x0009b2c1
   9e150:	20071937 	.word	0x20071937
   9e154:	20071bb5 	.word	0x20071bb5
   9e158:	00082ea5 	.word	0x00082ea5
   9e15c:	000829e5 	.word	0x000829e5
   9e160:	0009af55 	.word	0x0009af55
   9e164:	0009ade1 	.word	0x0009ade1
   9e168:	0009b271 	.word	0x0009b271
   9e16c:	20071b08 	.word	0x20071b08
   9e170:	0009cbd5 	.word	0x0009cbd5
   9e174:	20071adf 	.word	0x20071adf
   9e178:	00082989 	.word	0x00082989
   9e17c:	0009eee5 	.word	0x0009eee5
   9e180:	0009ebe5 	.word	0x0009ebe5
   9e184:	0009b07d 	.word	0x0009b07d
   9e188:	0009b0b9 	.word	0x0009b0b9
   9e18c:	0009ecdd 	.word	0x0009ecdd
   9e190:	20071add 	.word	0x20071add
								{
				//					
								}
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinf_ResetAlertsforReassertion();
   9e194:	4bb6      	ldr	r3, [pc, #728]	; (9e470 <Cl_disinf_controller+0x1090>)
   9e196:	4798      	blx	r3
							Cl_Uint16Type temp;
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   9e198:	f107 0310 	add.w	r3, r7, #16
   9e19c:	4619      	mov	r1, r3
   9e19e:	2013      	movs	r0, #19
   9e1a0:	4bb4      	ldr	r3, [pc, #720]	; (9e474 <Cl_disinf_controller+0x1094>)
   9e1a2:	4798      	blx	r3
	
									{
		
											float ftemp,temp1;
										
											res_temp_lookuptable((402 *100* temp)/(2*32768));									// temperature from look up table in 4 digits
   9e1a4:	8a3b      	ldrh	r3, [r7, #16]
   9e1a6:	461a      	mov	r2, r3
   9e1a8:	f649 5308 	movw	r3, #40200	; 0x9d08
   9e1ac:	fb03 f302 	mul.w	r3, r3, r2
   9e1b0:	2b00      	cmp	r3, #0
   9e1b2:	da02      	bge.n	9e1ba <Cl_disinf_controller+0xdda>
   9e1b4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9e1b8:	33ff      	adds	r3, #255	; 0xff
   9e1ba:	141b      	asrs	r3, r3, #16
   9e1bc:	4618      	mov	r0, r3
   9e1be:	4bae      	ldr	r3, [pc, #696]	; (9e478 <Cl_disinf_controller+0x1098>)
   9e1c0:	4798      	blx	r3
											temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
   9e1c2:	4bae      	ldr	r3, [pc, #696]	; (9e47c <Cl_disinf_controller+0x109c>)
   9e1c4:	681a      	ldr	r2, [r3, #0]
   9e1c6:	4bae      	ldr	r3, [pc, #696]	; (9e480 <Cl_disinf_controller+0x10a0>)
   9e1c8:	49ae      	ldr	r1, [pc, #696]	; (9e484 <Cl_disinf_controller+0x10a4>)
   9e1ca:	4610      	mov	r0, r2
   9e1cc:	4798      	blx	r3
   9e1ce:	4603      	mov	r3, r0
   9e1d0:	61fb      	str	r3, [r7, #28]
											temp1 = temp1 - 3.1 + 1.4 + 1.2;										// sensor offset
   9e1d2:	4bad      	ldr	r3, [pc, #692]	; (9e488 <Cl_disinf_controller+0x10a8>)
   9e1d4:	69f8      	ldr	r0, [r7, #28]
   9e1d6:	4798      	blx	r3
   9e1d8:	4cac      	ldr	r4, [pc, #688]	; (9e48c <Cl_disinf_controller+0x10ac>)
   9e1da:	a3a1      	add	r3, pc, #644	; (adr r3, 9e460 <Cl_disinf_controller+0x1080>)
   9e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e1e0:	47a0      	blx	r4
   9e1e2:	4603      	mov	r3, r0
   9e1e4:	460c      	mov	r4, r1
   9e1e6:	4618      	mov	r0, r3
   9e1e8:	4621      	mov	r1, r4
   9e1ea:	4ca9      	ldr	r4, [pc, #676]	; (9e490 <Cl_disinf_controller+0x10b0>)
   9e1ec:	a39e      	add	r3, pc, #632	; (adr r3, 9e468 <Cl_disinf_controller+0x1088>)
   9e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e1f2:	47a0      	blx	r4
   9e1f4:	4603      	mov	r3, r0
   9e1f6:	460c      	mov	r4, r1
   9e1f8:	4618      	mov	r0, r3
   9e1fa:	4621      	mov	r1, r4
   9e1fc:	4ca4      	ldr	r4, [pc, #656]	; (9e490 <Cl_disinf_controller+0x10b0>)
   9e1fe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   9e202:	4ba4      	ldr	r3, [pc, #656]	; (9e494 <Cl_disinf_controller+0x10b4>)
   9e204:	47a0      	blx	r4
   9e206:	4603      	mov	r3, r0
   9e208:	460c      	mov	r4, r1
   9e20a:	4619      	mov	r1, r3
   9e20c:	4622      	mov	r2, r4
   9e20e:	4ba2      	ldr	r3, [pc, #648]	; (9e498 <Cl_disinf_controller+0x10b8>)
   9e210:	4608      	mov	r0, r1
   9e212:	4611      	mov	r1, r2
   9e214:	4798      	blx	r3
   9e216:	4603      	mov	r3, r0
   9e218:	61fb      	str	r3, [r7, #28]
											heatcutavgtmp2 =(heatcutavgtmp2*5 + temp1)/6;
   9e21a:	4ba0      	ldr	r3, [pc, #640]	; (9e49c <Cl_disinf_controller+0x10bc>)
   9e21c:	681a      	ldr	r2, [r3, #0]
   9e21e:	4ba0      	ldr	r3, [pc, #640]	; (9e4a0 <Cl_disinf_controller+0x10c0>)
   9e220:	49a0      	ldr	r1, [pc, #640]	; (9e4a4 <Cl_disinf_controller+0x10c4>)
   9e222:	4610      	mov	r0, r2
   9e224:	4798      	blx	r3
   9e226:	4603      	mov	r3, r0
   9e228:	461a      	mov	r2, r3
   9e22a:	4b9f      	ldr	r3, [pc, #636]	; (9e4a8 <Cl_disinf_controller+0x10c8>)
   9e22c:	69f9      	ldr	r1, [r7, #28]
   9e22e:	4610      	mov	r0, r2
   9e230:	4798      	blx	r3
   9e232:	4603      	mov	r3, r0
   9e234:	461a      	mov	r2, r3
   9e236:	4b92      	ldr	r3, [pc, #584]	; (9e480 <Cl_disinf_controller+0x10a0>)
   9e238:	499c      	ldr	r1, [pc, #624]	; (9e4ac <Cl_disinf_controller+0x10cc>)
   9e23a:	4610      	mov	r0, r2
   9e23c:	4798      	blx	r3
   9e23e:	4603      	mov	r3, r0
   9e240:	461a      	mov	r2, r3
   9e242:	4b96      	ldr	r3, [pc, #600]	; (9e49c <Cl_disinf_controller+0x10bc>)
   9e244:	601a      	str	r2, [r3, #0]
// 								sv_cntrl_poweroffheater();
// 								
// 								SetHeaterState(CL_HEATER_STATE_OFF);
// 							}
							
							Cl_disinfsecondscounter++;
   9e246:	4b9a      	ldr	r3, [pc, #616]	; (9e4b0 <Cl_disinf_controller+0x10d0>)
   9e248:	681b      	ldr	r3, [r3, #0]
   9e24a:	3301      	adds	r3, #1
   9e24c:	4a98      	ldr	r2, [pc, #608]	; (9e4b0 <Cl_disinf_controller+0x10d0>)
   9e24e:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9e250:	4b98      	ldr	r3, [pc, #608]	; (9e4b4 <Cl_disinf_controller+0x10d4>)
   9e252:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9e254:	4b96      	ldr	r3, [pc, #600]	; (9e4b0 <Cl_disinf_controller+0x10d0>)
   9e256:	681b      	ldr	r3, [r3, #0]
   9e258:	2b3c      	cmp	r3, #60	; 0x3c
   9e25a:	d101      	bne.n	9e260 <Cl_disinf_controller+0xe80>
							{
								UpdateDisinfMinuteTick();	
   9e25c:	4b96      	ldr	r3, [pc, #600]	; (9e4b8 <Cl_disinf_controller+0x10d8>)
   9e25e:	4798      	blx	r3
								//Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true);
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   9e260:	4b96      	ldr	r3, [pc, #600]	; (9e4bc <Cl_disinf_controller+0x10dc>)
   9e262:	681b      	ldr	r3, [r3, #0]
   9e264:	2b23      	cmp	r3, #35	; 0x23
   9e266:	f340 8082 	ble.w	9e36e <Cl_disinf_controller+0xf8e>
							{
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9e26a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9e26e:	2002      	movs	r0, #2
   9e270:	4b93      	ldr	r3, [pc, #588]	; (9e4c0 <Cl_disinf_controller+0x10e0>)
   9e272:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9e274:	4b93      	ldr	r3, [pc, #588]	; (9e4c4 <Cl_disinf_controller+0x10e4>)
   9e276:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9e278:	2002      	movs	r0, #2
   9e27a:	4b93      	ldr	r3, [pc, #588]	; (9e4c8 <Cl_disinf_controller+0x10e8>)
   9e27c:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9e27e:	2003      	movs	r0, #3
   9e280:	4b91      	ldr	r3, [pc, #580]	; (9e4c8 <Cl_disinf_controller+0x10e8>)
   9e282:	4798      	blx	r3
								sv_cntrl_poweroffheater();
   9e284:	4b91      	ldr	r3, [pc, #580]	; (9e4cc <Cl_disinf_controller+0x10ec>)
   9e286:	4798      	blx	r3
								sv_prop_stopmixing();
   9e288:	4b91      	ldr	r3, [pc, #580]	; (9e4d0 <Cl_disinf_controller+0x10f0>)
   9e28a:	4798      	blx	r3
								sv_cntrl_deactivatepump(UFPUMP);
   9e28c:	2004      	movs	r0, #4
   9e28e:	4b91      	ldr	r3, [pc, #580]	; (9e4d4 <Cl_disinf_controller+0x10f4>)
   9e290:	4798      	blx	r3
								flag_hotrinse = 0;
   9e292:	4b91      	ldr	r3, [pc, #580]	; (9e4d8 <Cl_disinf_controller+0x10f8>)
   9e294:	2200      	movs	r2, #0
   9e296:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9e298:	2002      	movs	r0, #2
   9e29a:	4b8e      	ldr	r3, [pc, #568]	; (9e4d4 <Cl_disinf_controller+0x10f4>)
   9e29c:	4798      	blx	r3
   9e29e:	4603      	mov	r3, r0
   9e2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9e2a4:	2001      	movs	r0, #1
   9e2a6:	4b8b      	ldr	r3, [pc, #556]	; (9e4d4 <Cl_disinf_controller+0x10f4>)
   9e2a8:	4798      	blx	r3
   9e2aa:	4603      	mov	r3, r0
   9e2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9e2b0:	2005      	movs	r0, #5
   9e2b2:	4b8a      	ldr	r3, [pc, #552]	; (9e4dc <Cl_disinf_controller+0x10fc>)
   9e2b4:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9e2b6:	4b8a      	ldr	r3, [pc, #552]	; (9e4e0 <Cl_disinf_controller+0x1100>)
   9e2b8:	781b      	ldrb	r3, [r3, #0]
   9e2ba:	2b01      	cmp	r3, #1
   9e2bc:	d110      	bne.n	9e2e0 <Cl_disinf_controller+0xf00>
								{
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e2be:	2339      	movs	r3, #57	; 0x39
   9e2c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)4;
   9e2c4:	2304      	movs	r3, #4
   9e2c6:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e2c8:	f107 0113 	add.w	r1, r7, #19
   9e2cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e2d0:	2201      	movs	r2, #1
   9e2d2:	4618      	mov	r0, r3
   9e2d4:	4b83      	ldr	r3, [pc, #524]	; (9e4e4 <Cl_disinf_controller+0x1104>)
   9e2d6:	4798      	blx	r3
   9e2d8:	4603      	mov	r3, r0
   9e2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9e2de:	e028      	b.n	9e332 <Cl_disinf_controller+0xf52>
								}
								else if (flag_citric == 1)
   9e2e0:	4b81      	ldr	r3, [pc, #516]	; (9e4e8 <Cl_disinf_controller+0x1108>)
   9e2e2:	781b      	ldrb	r3, [r3, #0]
   9e2e4:	2b01      	cmp	r3, #1
   9e2e6:	d110      	bne.n	9e30a <Cl_disinf_controller+0xf2a>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e2e8:	2339      	movs	r3, #57	; 0x39
   9e2ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)5;
   9e2ee:	2305      	movs	r3, #5
   9e2f0:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e2f2:	f107 0113 	add.w	r1, r7, #19
   9e2f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e2fa:	2201      	movs	r2, #1
   9e2fc:	4618      	mov	r0, r3
   9e2fe:	4b79      	ldr	r3, [pc, #484]	; (9e4e4 <Cl_disinf_controller+0x1104>)
   9e300:	4798      	blx	r3
   9e302:	4603      	mov	r3, r0
   9e304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9e308:	e013      	b.n	9e332 <Cl_disinf_controller+0xf52>
								}
								else if (flag_na == 1)
   9e30a:	4b78      	ldr	r3, [pc, #480]	; (9e4ec <Cl_disinf_controller+0x110c>)
   9e30c:	781b      	ldrb	r3, [r3, #0]
   9e30e:	2b01      	cmp	r3, #1
   9e310:	d10f      	bne.n	9e332 <Cl_disinf_controller+0xf52>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9e312:	2339      	movs	r3, #57	; 0x39
   9e314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)3;
   9e318:	2303      	movs	r3, #3
   9e31a:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e31c:	f107 0113 	add.w	r1, r7, #19
   9e320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e324:	2201      	movs	r2, #1
   9e326:	4618      	mov	r0, r3
   9e328:	4b6e      	ldr	r3, [pc, #440]	; (9e4e4 <Cl_disinf_controller+0x1104>)
   9e32a:	4798      	blx	r3
   9e32c:	4603      	mov	r3, r0
   9e32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								flag_hotcitric = 0;
   9e332:	4b6b      	ldr	r3, [pc, #428]	; (9e4e0 <Cl_disinf_controller+0x1100>)
   9e334:	2200      	movs	r2, #0
   9e336:	701a      	strb	r2, [r3, #0]
								flag_citric = 0;
   9e338:	4b6b      	ldr	r3, [pc, #428]	; (9e4e8 <Cl_disinf_controller+0x1108>)
   9e33a:	2200      	movs	r2, #0
   9e33c:	701a      	strb	r2, [r3, #0]
								flag_na = 0;
   9e33e:	4b6b      	ldr	r3, [pc, #428]	; (9e4ec <Cl_disinf_controller+0x110c>)
   9e340:	2200      	movs	r2, #0
   9e342:	701a      	strb	r2, [r3, #0]
								openfill_flag = 0;
   9e344:	4b6a      	ldr	r3, [pc, #424]	; (9e4f0 <Cl_disinf_controller+0x1110>)
   9e346:	2200      	movs	r2, #0
   9e348:	701a      	strb	r2, [r3, #0]
	
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (Cl_Uint8Type)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9e34a:	2045      	movs	r0, #69	; 0x45
   9e34c:	4b69      	ldr	r3, [pc, #420]	; (9e4f4 <Cl_disinf_controller+0x1114>)
   9e34e:	4798      	blx	r3
   9e350:	4603      	mov	r3, r0
   9e352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9e356:	4b68      	ldr	r3, [pc, #416]	; (9e4f8 <Cl_disinf_controller+0x1118>)
   9e358:	220a      	movs	r2, #10
   9e35a:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   9e35c:	e007      	b.n	9e36e <Cl_disinf_controller+0xf8e>
							case EVENT_DISINF_TICK_MINUTE:
								//Cl_disinf_ResetAlertsforReassertion();
							break;
							case EVENT_DISINF_ALARM:
							
							Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9e35e:	4b67      	ldr	r3, [pc, #412]	; (9e4fc <Cl_disinf_controller+0x111c>)
   9e360:	4798      	blx	r3
   9e362:	4603      	mov	r3, r0
   9e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9e368:	e002      	b.n	9e370 <Cl_disinf_controller+0xf90>
							command = CON_TX_COMMAND_DISINF_PAUSED;
							data = (Cl_Uint8Type)0;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
   9e36a:	bf00      	nop
   9e36c:	e270      	b.n	9e850 <Cl_disinf_controller+0x1470>
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
					 
							}
							break;
   9e36e:	bf00      	nop
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
						}
						
				break;
   9e370:	e26e      	b.n	9e850 <Cl_disinf_controller+0x1470>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   9e372:	7efb      	ldrb	r3, [r7, #27]
   9e374:	2b02      	cmp	r3, #2
   9e376:	d008      	beq.n	9e38a <Cl_disinf_controller+0xfaa>
   9e378:	2b03      	cmp	r3, #3
   9e37a:	d000      	beq.n	9e37e <Cl_disinf_controller+0xf9e>
					 
							 //Send resumed
					 

							break;
							default:break;
   9e37c:	e01f      	b.n	9e3be <Cl_disinf_controller+0xfde>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9e37e:	4b51      	ldr	r3, [pc, #324]	; (9e4c4 <Cl_disinf_controller+0x10e4>)
   9e380:	4798      	blx	r3
							cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e382:	4b5d      	ldr	r3, [pc, #372]	; (9e4f8 <Cl_disinf_controller+0x1118>)
   9e384:	2200      	movs	r2, #0
   9e386:	701a      	strb	r2, [r3, #0]
							break;
   9e388:	e019      	b.n	9e3be <Cl_disinf_controller+0xfde>
							
							
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9e38a:	2045      	movs	r0, #69	; 0x45
   9e38c:	4b59      	ldr	r3, [pc, #356]	; (9e4f4 <Cl_disinf_controller+0x1114>)
   9e38e:	4798      	blx	r3
   9e390:	4603      	mov	r3, r0
   9e392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   9e396:	233b      	movs	r3, #59	; 0x3b
   9e398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9e39c:	2300      	movs	r3, #0
   9e39e:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e3a0:	f107 0113 	add.w	r1, r7, #19
   9e3a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e3a8:	2200      	movs	r2, #0
   9e3aa:	4618      	mov	r0, r3
   9e3ac:	4b4d      	ldr	r3, [pc, #308]	; (9e4e4 <Cl_disinf_controller+0x1104>)
   9e3ae:	4798      	blx	r3
   9e3b0:	4603      	mov	r3, r0
   9e3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9e3b6:	4b50      	ldr	r3, [pc, #320]	; (9e4f8 <Cl_disinf_controller+0x1118>)
   9e3b8:	220a      	movs	r2, #10
   9e3ba:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   9e3bc:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   9e3be:	e247      	b.n	9e850 <Cl_disinf_controller+0x1470>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   9e3c0:	7efb      	ldrb	r3, [r7, #27]
   9e3c2:	3b03      	subs	r3, #3
   9e3c4:	2b20      	cmp	r3, #32
   9e3c6:	f200 80c9 	bhi.w	9e55c <Cl_disinf_controller+0x117c>
   9e3ca:	a201      	add	r2, pc, #4	; (adr r2, 9e3d0 <Cl_disinf_controller+0xff0>)
   9e3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e3d0:	0009e455 	.word	0x0009e455
   9e3d4:	0009e55d 	.word	0x0009e55d
   9e3d8:	0009e55d 	.word	0x0009e55d
   9e3dc:	0009e55d 	.word	0x0009e55d
   9e3e0:	0009e55d 	.word	0x0009e55d
   9e3e4:	0009e55d 	.word	0x0009e55d
   9e3e8:	0009e55d 	.word	0x0009e55d
   9e3ec:	0009e55d 	.word	0x0009e55d
   9e3f0:	0009e55d 	.word	0x0009e55d
   9e3f4:	0009e55d 	.word	0x0009e55d
   9e3f8:	0009e55d 	.word	0x0009e55d
   9e3fc:	0009e55d 	.word	0x0009e55d
   9e400:	0009e535 	.word	0x0009e535
   9e404:	0009e55d 	.word	0x0009e55d
   9e408:	0009e55d 	.word	0x0009e55d
   9e40c:	0009e55d 	.word	0x0009e55d
   9e410:	0009e551 	.word	0x0009e551
   9e414:	0009e55d 	.word	0x0009e55d
   9e418:	0009e55d 	.word	0x0009e55d
   9e41c:	0009e55d 	.word	0x0009e55d
   9e420:	0009e55d 	.word	0x0009e55d
   9e424:	0009e55d 	.word	0x0009e55d
   9e428:	0009e55d 	.word	0x0009e55d
   9e42c:	0009e55d 	.word	0x0009e55d
   9e430:	0009e55d 	.word	0x0009e55d
   9e434:	0009e55d 	.word	0x0009e55d
   9e438:	0009e55d 	.word	0x0009e55d
   9e43c:	0009e55d 	.word	0x0009e55d
   9e440:	0009e55d 	.word	0x0009e55d
   9e444:	0009e55d 	.word	0x0009e55d
   9e448:	0009e55d 	.word	0x0009e55d
   9e44c:	0009e55d 	.word	0x0009e55d
   9e450:	0009e501 	.word	0x0009e501
								{
									
									case EVENT_STOP_DISINF:
									Cl_Disinf_StopDisinf();
   9e454:	4b1b      	ldr	r3, [pc, #108]	; (9e4c4 <Cl_disinf_controller+0x10e4>)
   9e456:	4798      	blx	r3
									cl_disinfstate = CL_DISINF_STATE_IDLE;
   9e458:	4b27      	ldr	r3, [pc, #156]	; (9e4f8 <Cl_disinf_controller+0x1118>)
   9e45a:	2200      	movs	r2, #0
   9e45c:	701a      	strb	r2, [r3, #0]
									break;
   9e45e:	e080      	b.n	9e562 <Cl_disinf_controller+0x1182>
   9e460:	cccccccd 	.word	0xcccccccd
   9e464:	4008cccc 	.word	0x4008cccc
   9e468:	66666666 	.word	0x66666666
   9e46c:	3ff66666 	.word	0x3ff66666
   9e470:	0009f145 	.word	0x0009f145
   9e474:	0008fa01 	.word	0x0008fa01
   9e478:	00090ad1 	.word	0x00090ad1
   9e47c:	20071930 	.word	0x20071930
   9e480:	000a8111 	.word	0x000a8111
   9e484:	42c80000 	.word	0x42c80000
   9e488:	000a7681 	.word	0x000a7681
   9e48c:	000a73c1 	.word	0x000a73c1
   9e490:	000a73c5 	.word	0x000a73c5
   9e494:	3ff33333 	.word	0x3ff33333
   9e498:	000a7ced 	.word	0x000a7ced
   9e49c:	20071b0c 	.word	0x20071b0c
   9e4a0:	000a7fa9 	.word	0x000a7fa9
   9e4a4:	40a00000 	.word	0x40a00000
   9e4a8:	000a7d99 	.word	0x000a7d99
   9e4ac:	40c00000 	.word	0x40c00000
   9e4b0:	20071ae0 	.word	0x20071ae0
   9e4b4:	0009f211 	.word	0x0009f211
   9e4b8:	0009f5d9 	.word	0x0009f5d9
   9e4bc:	20071ae4 	.word	0x20071ae4
   9e4c0:	0009ae59 	.word	0x0009ae59
   9e4c4:	0009ebe5 	.word	0x0009ebe5
   9e4c8:	0009ae01 	.word	0x0009ae01
   9e4cc:	0009adcd 	.word	0x0009adcd
   9e4d0:	0009b20d 	.word	0x0009b20d
   9e4d4:	0009ad7d 	.word	0x0009ad7d
   9e4d8:	20071938 	.word	0x20071938
   9e4dc:	00082ea5 	.word	0x00082ea5
   9e4e0:	20071937 	.word	0x20071937
   9e4e4:	0009cbd5 	.word	0x0009cbd5
   9e4e8:	2007193a 	.word	0x2007193a
   9e4ec:	20071939 	.word	0x20071939
   9e4f0:	20071b0a 	.word	0x20071b0a
   9e4f4:	0008b715 	.word	0x0008b715
   9e4f8:	20071adf 	.word	0x20071adf
   9e4fc:	0009eee5 	.word	0x0009eee5
									
									
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   9e500:	233a      	movs	r3, #58	; 0x3a
   9e502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									 data = (Cl_Uint8Type)0;
   9e506:	2300      	movs	r3, #0
   9e508:	74fb      	strb	r3, [r7, #19]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9e50a:	f107 0113 	add.w	r1, r7, #19
   9e50e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e512:	2200      	movs	r2, #0
   9e514:	4618      	mov	r0, r3
   9e516:	4bb1      	ldr	r3, [pc, #708]	; (9e7dc <Cl_disinf_controller+0x13fc>)
   9e518:	4798      	blx	r3
   9e51a:	4603      	mov	r3, r0
   9e51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9e520:	2054      	movs	r0, #84	; 0x54
   9e522:	4baf      	ldr	r3, [pc, #700]	; (9e7e0 <Cl_disinf_controller+0x1400>)
   9e524:	4798      	blx	r3
   9e526:	4603      	mov	r3, r0
   9e528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   9e52c:	4bad      	ldr	r3, [pc, #692]	; (9e7e4 <Cl_disinf_controller+0x1404>)
   9e52e:	220f      	movs	r2, #15
   9e530:	701a      	strb	r2, [r3, #0]
									 
									break;
   9e532:	e016      	b.n	9e562 <Cl_disinf_controller+0x1182>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   9e534:	4bac      	ldr	r3, [pc, #688]	; (9e7e8 <Cl_disinf_controller+0x1408>)
   9e536:	681b      	ldr	r3, [r3, #0]
   9e538:	3301      	adds	r3, #1
   9e53a:	4aab      	ldr	r2, [pc, #684]	; (9e7e8 <Cl_disinf_controller+0x1408>)
   9e53c:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   9e53e:	4bab      	ldr	r3, [pc, #684]	; (9e7ec <Cl_disinf_controller+0x140c>)
   9e540:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   9e542:	4ba9      	ldr	r3, [pc, #676]	; (9e7e8 <Cl_disinf_controller+0x1408>)
   9e544:	681b      	ldr	r3, [r3, #0]
   9e546:	2b3c      	cmp	r3, #60	; 0x3c
   9e548:	d10a      	bne.n	9e560 <Cl_disinf_controller+0x1180>
									{
										UpdateDisinfMinuteTick();
   9e54a:	4ba9      	ldr	r3, [pc, #676]	; (9e7f0 <Cl_disinf_controller+0x1410>)
   9e54c:	4798      	blx	r3
									}
									break;
   9e54e:	e007      	b.n	9e560 <Cl_disinf_controller+0x1180>
									case EVENT_DISINF_ALARM:
									Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9e550:	4ba8      	ldr	r3, [pc, #672]	; (9e7f4 <Cl_disinf_controller+0x1414>)
   9e552:	4798      	blx	r3
   9e554:	4603      	mov	r3, r0
   9e556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									break;
   9e55a:	e002      	b.n	9e562 <Cl_disinf_controller+0x1182>
									default:break;
   9e55c:	bf00      	nop
   9e55e:	e177      	b.n	9e850 <Cl_disinf_controller+0x1470>
									Cl_Disinf_SendDisinfStateData();
									if(Cl_disinfsecondscounter == 60)
									{
										UpdateDisinfMinuteTick();
									}
									break;
   9e560:	bf00      	nop
									break;
									default:break;
								}
				
				
				break;
   9e562:	e175      	b.n	9e850 <Cl_disinf_controller+0x1470>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
   9e564:	7efb      	ldrb	r3, [r7, #27]
   9e566:	2b01      	cmp	r3, #1
   9e568:	d009      	beq.n	9e57e <Cl_disinf_controller+0x119e>
   9e56a:	2b24      	cmp	r3, #36	; 0x24
   9e56c:	d000      	beq.n	9e570 <Cl_disinf_controller+0x1190>
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
						break;
					}
				break;
   9e56e:	e16f      	b.n	9e850 <Cl_disinf_controller+0x1470>
				break;
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
					{
						case EVENT_DISINF_START_RINSE:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9e570:	2045      	movs	r0, #69	; 0x45
   9e572:	4b9b      	ldr	r3, [pc, #620]	; (9e7e0 <Cl_disinf_controller+0x1400>)
   9e574:	4798      	blx	r3
   9e576:	4603      	mov	r3, r0
   9e578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   9e57c:	e034      	b.n	9e5e8 <Cl_disinf_controller+0x1208>
						case EVENT_START_DISINF:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9e57e:	2044      	movs	r0, #68	; 0x44
   9e580:	4b97      	ldr	r3, [pc, #604]	; (9e7e0 <Cl_disinf_controller+0x1400>)
   9e582:	4798      	blx	r3
   9e584:	4603      	mov	r3, r0
   9e586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if(Cl_ConsoleRxMsg.msgready == true)
   9e58a:	4b9b      	ldr	r3, [pc, #620]	; (9e7f8 <Cl_disinf_controller+0x1418>)
   9e58c:	7e1b      	ldrb	r3, [r3, #24]
   9e58e:	2b00      	cmp	r3, #0
   9e590:	d016      	beq.n	9e5c0 <Cl_disinf_controller+0x11e0>
							{
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e592:	4b99      	ldr	r3, [pc, #612]	; (9e7f8 <Cl_disinf_controller+0x1418>)
   9e594:	791b      	ldrb	r3, [r3, #4]
   9e596:	733b      	strb	r3, [r7, #12]
								if (cl_temp.bytearray[0] == 4)
   9e598:	7b3b      	ldrb	r3, [r7, #12]
   9e59a:	2b04      	cmp	r3, #4
   9e59c:	d103      	bne.n	9e5a6 <Cl_disinf_controller+0x11c6>
								{
										flag_hotcitric = 1;
   9e59e:	4b97      	ldr	r3, [pc, #604]	; (9e7fc <Cl_disinf_controller+0x141c>)
   9e5a0:	2201      	movs	r2, #1
   9e5a2:	701a      	strb	r2, [r3, #0]
   9e5a4:	e00c      	b.n	9e5c0 <Cl_disinf_controller+0x11e0>
								}
								else if (cl_temp.bytearray[0] == 3)
   9e5a6:	7b3b      	ldrb	r3, [r7, #12]
   9e5a8:	2b03      	cmp	r3, #3
   9e5aa:	d103      	bne.n	9e5b4 <Cl_disinf_controller+0x11d4>
								{
										flag_na = 1;
   9e5ac:	4b94      	ldr	r3, [pc, #592]	; (9e800 <Cl_disinf_controller+0x1420>)
   9e5ae:	2201      	movs	r2, #1
   9e5b0:	701a      	strb	r2, [r3, #0]
   9e5b2:	e005      	b.n	9e5c0 <Cl_disinf_controller+0x11e0>
								}
								else if (cl_temp.bytearray[0] == 5)
   9e5b4:	7b3b      	ldrb	r3, [r7, #12]
   9e5b6:	2b05      	cmp	r3, #5
   9e5b8:	d102      	bne.n	9e5c0 <Cl_disinf_controller+0x11e0>
								{
									flag_citric = 1;
   9e5ba:	4b92      	ldr	r3, [pc, #584]	; (9e804 <Cl_disinf_controller+0x1424>)
   9e5bc:	2201      	movs	r2, #1
   9e5be:	701a      	strb	r2, [r3, #0]
								}
				
							}
							command = CON_TX_COMMAND_DISINF_STARTED;
   9e5c0:	233c      	movs	r3, #60	; 0x3c
   9e5c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9e5c6:	2301      	movs	r3, #1
   9e5c8:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
   9e5ca:	f107 0113 	add.w	r1, r7, #19
   9e5ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e5d2:	2201      	movs	r2, #1
   9e5d4:	4618      	mov	r0, r3
   9e5d6:	4b81      	ldr	r3, [pc, #516]	; (9e7dc <Cl_disinf_controller+0x13fc>)
   9e5d8:	4798      	blx	r3
   9e5da:	4603      	mov	r3, r0
   9e5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9e5e0:	4b80      	ldr	r3, [pc, #512]	; (9e7e4 <Cl_disinf_controller+0x1404>)
   9e5e2:	2203      	movs	r2, #3
   9e5e4:	701a      	strb	r2, [r3, #0]
						break;
   9e5e6:	bf00      	nop
					}
				break;
   9e5e8:	e132      	b.n	9e850 <Cl_disinf_controller+0x1470>
			break;
			case CL_DISINF_STATE_CRITICAL_ALARM:
			switch (cl_disinfevent)
   9e5ea:	7efb      	ldrb	r3, [r7, #27]
   9e5ec:	3b01      	subs	r3, #1
   9e5ee:	2b24      	cmp	r3, #36	; 0x24
   9e5f0:	f200 812d 	bhi.w	9e84e <Cl_disinf_controller+0x146e>
   9e5f4:	a201      	add	r2, pc, #4	; (adr r2, 9e5fc <Cl_disinf_controller+0x121c>)
   9e5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e5fa:	bf00      	nop
   9e5fc:	0009e691 	.word	0x0009e691
   9e600:	0009e84f 	.word	0x0009e84f
   9e604:	0009e84f 	.word	0x0009e84f
   9e608:	0009e84f 	.word	0x0009e84f
   9e60c:	0009e84f 	.word	0x0009e84f
   9e610:	0009e84f 	.word	0x0009e84f
   9e614:	0009e84f 	.word	0x0009e84f
   9e618:	0009e84f 	.word	0x0009e84f
   9e61c:	0009e84f 	.word	0x0009e84f
   9e620:	0009e84f 	.word	0x0009e84f
   9e624:	0009e84f 	.word	0x0009e84f
   9e628:	0009e84f 	.word	0x0009e84f
   9e62c:	0009e84f 	.word	0x0009e84f
   9e630:	0009e84f 	.word	0x0009e84f
   9e634:	0009e707 	.word	0x0009e707
   9e638:	0009e835 	.word	0x0009e835
   9e63c:	0009e84f 	.word	0x0009e84f
   9e640:	0009e84f 	.word	0x0009e84f
   9e644:	0009e6fb 	.word	0x0009e6fb
   9e648:	0009e84f 	.word	0x0009e84f
   9e64c:	0009e84f 	.word	0x0009e84f
   9e650:	0009e84f 	.word	0x0009e84f
   9e654:	0009e84f 	.word	0x0009e84f
   9e658:	0009e84f 	.word	0x0009e84f
   9e65c:	0009e84f 	.word	0x0009e84f
   9e660:	0009e84f 	.word	0x0009e84f
   9e664:	0009e84f 	.word	0x0009e84f
   9e668:	0009e84f 	.word	0x0009e84f
   9e66c:	0009e84f 	.word	0x0009e84f
   9e670:	0009e84f 	.word	0x0009e84f
   9e674:	0009e84f 	.word	0x0009e84f
   9e678:	0009e84f 	.word	0x0009e84f
   9e67c:	0009e84f 	.word	0x0009e84f
   9e680:	0009e84f 	.word	0x0009e84f
   9e684:	0009e84f 	.word	0x0009e84f
   9e688:	0009e84f 	.word	0x0009e84f
   9e68c:	0009e7c5 	.word	0x0009e7c5
			{
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9e690:	2044      	movs	r0, #68	; 0x44
   9e692:	4b53      	ldr	r3, [pc, #332]	; (9e7e0 <Cl_disinf_controller+0x1400>)
   9e694:	4798      	blx	r3
   9e696:	4603      	mov	r3, r0
   9e698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   9e69c:	4b56      	ldr	r3, [pc, #344]	; (9e7f8 <Cl_disinf_controller+0x1418>)
   9e69e:	7e1b      	ldrb	r3, [r3, #24]
   9e6a0:	2b00      	cmp	r3, #0
   9e6a2:	d016      	beq.n	9e6d2 <Cl_disinf_controller+0x12f2>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e6a4:	4b54      	ldr	r3, [pc, #336]	; (9e7f8 <Cl_disinf_controller+0x1418>)
   9e6a6:	791b      	ldrb	r3, [r3, #4]
   9e6a8:	723b      	strb	r3, [r7, #8]
					if (cl_temp.bytearray[0] == 4)
   9e6aa:	7a3b      	ldrb	r3, [r7, #8]
   9e6ac:	2b04      	cmp	r3, #4
   9e6ae:	d103      	bne.n	9e6b8 <Cl_disinf_controller+0x12d8>
					{
						flag_hotcitric = 1;
   9e6b0:	4b52      	ldr	r3, [pc, #328]	; (9e7fc <Cl_disinf_controller+0x141c>)
   9e6b2:	2201      	movs	r2, #1
   9e6b4:	701a      	strb	r2, [r3, #0]
   9e6b6:	e00c      	b.n	9e6d2 <Cl_disinf_controller+0x12f2>
					}
					else if (cl_temp.bytearray[0] == 3)
   9e6b8:	7a3b      	ldrb	r3, [r7, #8]
   9e6ba:	2b03      	cmp	r3, #3
   9e6bc:	d103      	bne.n	9e6c6 <Cl_disinf_controller+0x12e6>
					{
						flag_na = 1;
   9e6be:	4b50      	ldr	r3, [pc, #320]	; (9e800 <Cl_disinf_controller+0x1420>)
   9e6c0:	2201      	movs	r2, #1
   9e6c2:	701a      	strb	r2, [r3, #0]
   9e6c4:	e005      	b.n	9e6d2 <Cl_disinf_controller+0x12f2>
					}
					else if (cl_temp.bytearray[0] == 5)
   9e6c6:	7a3b      	ldrb	r3, [r7, #8]
   9e6c8:	2b05      	cmp	r3, #5
   9e6ca:	d102      	bne.n	9e6d2 <Cl_disinf_controller+0x12f2>
					{
						flag_citric = 1;
   9e6cc:	4b4d      	ldr	r3, [pc, #308]	; (9e804 <Cl_disinf_controller+0x1424>)
   9e6ce:	2201      	movs	r2, #1
   9e6d0:	701a      	strb	r2, [r3, #0]
					}
				}
				command = CON_TX_COMMAND_DISINF_STARTED;
   9e6d2:	233c      	movs	r3, #60	; 0x3c
   9e6d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9e6d8:	2301      	movs	r3, #1
   9e6da:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9e6dc:	f107 0113 	add.w	r1, r7, #19
   9e6e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9e6e4:	2201      	movs	r2, #1
   9e6e6:	4618      	mov	r0, r3
   9e6e8:	4b3c      	ldr	r3, [pc, #240]	; (9e7dc <Cl_disinf_controller+0x13fc>)
   9e6ea:	4798      	blx	r3
   9e6ec:	4603      	mov	r3, r0
   9e6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9e6f2:	4b3c      	ldr	r3, [pc, #240]	; (9e7e4 <Cl_disinf_controller+0x1404>)
   9e6f4:	2203      	movs	r2, #3
   9e6f6:	701a      	strb	r2, [r3, #0]
				break;
   9e6f8:	e0a2      	b.n	9e840 <Cl_disinf_controller+0x1460>
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9e6fa:	4b3e      	ldr	r3, [pc, #248]	; (9e7f4 <Cl_disinf_controller+0x1414>)
   9e6fc:	4798      	blx	r3
   9e6fe:	4603      	mov	r3, r0
   9e700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break; 
   9e704:	e09c      	b.n	9e840 <Cl_disinf_controller+0x1460>
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9e706:	4b40      	ldr	r3, [pc, #256]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e708:	2200      	movs	r2, #0
   9e70a:	801a      	strh	r2, [r3, #0]
   9e70c:	e055      	b.n	9e7ba <Cl_disinf_controller+0x13da>
				{
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
					Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9e70e:	4b3e      	ldr	r3, [pc, #248]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e710:	881b      	ldrh	r3, [r3, #0]
   9e712:	4619      	mov	r1, r3
   9e714:	4a3d      	ldr	r2, [pc, #244]	; (9e80c <Cl_disinf_controller+0x142c>)
   9e716:	460b      	mov	r3, r1
   9e718:	00db      	lsls	r3, r3, #3
   9e71a:	1a5b      	subs	r3, r3, r1
   9e71c:	4413      	add	r3, r2
   9e71e:	7818      	ldrb	r0, [r3, #0]
   9e720:	4b39      	ldr	r3, [pc, #228]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e722:	881b      	ldrh	r3, [r3, #0]
   9e724:	461a      	mov	r2, r3
   9e726:	4613      	mov	r3, r2
   9e728:	00db      	lsls	r3, r3, #3
   9e72a:	1a9b      	subs	r3, r3, r2
   9e72c:	4a37      	ldr	r2, [pc, #220]	; (9e80c <Cl_disinf_controller+0x142c>)
   9e72e:	4413      	add	r3, r2
   9e730:	3302      	adds	r3, #2
   9e732:	4619      	mov	r1, r3
   9e734:	4b36      	ldr	r3, [pc, #216]	; (9e810 <Cl_disinf_controller+0x1430>)
   9e736:	4798      	blx	r3
					
					if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9e738:	4b33      	ldr	r3, [pc, #204]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e73a:	881b      	ldrh	r3, [r3, #0]
   9e73c:	4619      	mov	r1, r3
   9e73e:	4a33      	ldr	r2, [pc, #204]	; (9e80c <Cl_disinf_controller+0x142c>)
   9e740:	460b      	mov	r3, r1
   9e742:	00db      	lsls	r3, r3, #3
   9e744:	1a5b      	subs	r3, r3, r1
   9e746:	4413      	add	r3, r2
   9e748:	3302      	adds	r3, #2
   9e74a:	781b      	ldrb	r3, [r3, #0]
   9e74c:	2b00      	cmp	r3, #0
   9e74e:	d00e      	beq.n	9e76e <Cl_disinf_controller+0x138e>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9e750:	2208      	movs	r2, #8
   9e752:	4930      	ldr	r1, [pc, #192]	; (9e814 <Cl_disinf_controller+0x1434>)
   9e754:	2018      	movs	r0, #24
   9e756:	4b21      	ldr	r3, [pc, #132]	; (9e7dc <Cl_disinf_controller+0x13fc>)
   9e758:	4798      	blx	r3
						Cl_Disinf_StopDisinf();
   9e75a:	4b2f      	ldr	r3, [pc, #188]	; (9e818 <Cl_disinf_controller+0x1438>)
   9e75c:	4798      	blx	r3
						
							
						
						cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9e75e:	4b21      	ldr	r3, [pc, #132]	; (9e7e4 <Cl_disinf_controller+0x1404>)
   9e760:	220c      	movs	r2, #12
   9e762:	701a      	strb	r2, [r3, #0]
						//alarm_flag = 1;
						tempcount=0;
   9e764:	4b28      	ldr	r3, [pc, #160]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e766:	2200      	movs	r2, #0
   9e768:	801a      	strh	r2, [r3, #0]
						break;
   9e76a:	bf00      	nop
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9e76c:	e068      	b.n	9e840 <Cl_disinf_controller+0x1460>
						//alarm_flag = 1;
						tempcount=0;
						break;
					}
					
					else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9e76e:	4b26      	ldr	r3, [pc, #152]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e770:	881b      	ldrh	r3, [r3, #0]
   9e772:	2b0b      	cmp	r3, #11
   9e774:	d11b      	bne.n	9e7ae <Cl_disinf_controller+0x13ce>
					{
						if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9e776:	4b24      	ldr	r3, [pc, #144]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e778:	881b      	ldrh	r3, [r3, #0]
   9e77a:	4619      	mov	r1, r3
   9e77c:	4a23      	ldr	r2, [pc, #140]	; (9e80c <Cl_disinf_controller+0x142c>)
   9e77e:	460b      	mov	r3, r1
   9e780:	00db      	lsls	r3, r3, #3
   9e782:	1a5b      	subs	r3, r3, r1
   9e784:	4413      	add	r3, r2
   9e786:	3302      	adds	r3, #2
   9e788:	781b      	ldrb	r3, [r3, #0]
   9e78a:	f083 0301 	eor.w	r3, r3, #1
   9e78e:	b2db      	uxtb	r3, r3
   9e790:	2b00      	cmp	r3, #0
   9e792:	d00c      	beq.n	9e7ae <Cl_disinf_controller+0x13ce>
						{
							sv_cntrl_resetredalarm();
   9e794:	4b21      	ldr	r3, [pc, #132]	; (9e81c <Cl_disinf_controller+0x143c>)
   9e796:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   9e798:	4b21      	ldr	r3, [pc, #132]	; (9e820 <Cl_disinf_controller+0x1440>)
   9e79a:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   9e79c:	4b21      	ldr	r3, [pc, #132]	; (9e824 <Cl_disinf_controller+0x1444>)
   9e79e:	4798      	blx	r3
							//Cl_Disinf_resumeDisinf();
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9e7a0:	2208      	movs	r2, #8
   9e7a2:	4921      	ldr	r1, [pc, #132]	; (9e828 <Cl_disinf_controller+0x1448>)
   9e7a4:	2018      	movs	r0, #24
   9e7a6:	4b0d      	ldr	r3, [pc, #52]	; (9e7dc <Cl_disinf_controller+0x13fc>)
   9e7a8:	4798      	blx	r3
							Cl_disinf_ResetAlertsforReassertion();
   9e7aa:	4b20      	ldr	r3, [pc, #128]	; (9e82c <Cl_disinf_controller+0x144c>)
   9e7ac:	4798      	blx	r3
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
				break; 
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9e7ae:	4b16      	ldr	r3, [pc, #88]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e7b0:	881b      	ldrh	r3, [r3, #0]
   9e7b2:	3301      	adds	r3, #1
   9e7b4:	b29a      	uxth	r2, r3
   9e7b6:	4b14      	ldr	r3, [pc, #80]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e7b8:	801a      	strh	r2, [r3, #0]
   9e7ba:	4b13      	ldr	r3, [pc, #76]	; (9e808 <Cl_disinf_controller+0x1428>)
   9e7bc:	881b      	ldrh	r3, [r3, #0]
   9e7be:	2b0b      	cmp	r3, #11
   9e7c0:	d9a5      	bls.n	9e70e <Cl_disinf_controller+0x132e>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9e7c2:	e03d      	b.n	9e840 <Cl_disinf_controller+0x1460>
				
				
				case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9e7c4:	4b15      	ldr	r3, [pc, #84]	; (9e81c <Cl_disinf_controller+0x143c>)
   9e7c6:	4798      	blx	r3
					sv_cntrl_resetyellowalarm();
   9e7c8:	4b15      	ldr	r3, [pc, #84]	; (9e820 <Cl_disinf_controller+0x1440>)
   9e7ca:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9e7cc:	4b15      	ldr	r3, [pc, #84]	; (9e824 <Cl_disinf_controller+0x1444>)
   9e7ce:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9e7d0:	4b17      	ldr	r3, [pc, #92]	; (9e830 <Cl_disinf_controller+0x1450>)
   9e7d2:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9e7d4:	4b03      	ldr	r3, [pc, #12]	; (9e7e4 <Cl_disinf_controller+0x1404>)
   9e7d6:	2208      	movs	r2, #8
   9e7d8:	701a      	strb	r2, [r3, #0]
				break;
   9e7da:	e031      	b.n	9e840 <Cl_disinf_controller+0x1460>
   9e7dc:	0009cbd5 	.word	0x0009cbd5
   9e7e0:	0008b715 	.word	0x0008b715
   9e7e4:	20071adf 	.word	0x20071adf
   9e7e8:	20071ae0 	.word	0x20071ae0
   9e7ec:	0009f211 	.word	0x0009f211
   9e7f0:	0009f5d9 	.word	0x0009f5d9
   9e7f4:	0009eee5 	.word	0x0009eee5
   9e7f8:	20072350 	.word	0x20072350
   9e7fc:	20071937 	.word	0x20071937
   9e800:	20071939 	.word	0x20071939
   9e804:	2007193a 	.word	0x2007193a
   9e808:	200727dc 	.word	0x200727dc
   9e80c:	20070b10 	.word	0x20070b10
   9e810:	00082bc1 	.word	0x00082bc1
   9e814:	000aa3d4 	.word	0x000aa3d4
   9e818:	0009ebe5 	.word	0x0009ebe5
   9e81c:	0009b07d 	.word	0x0009b07d
   9e820:	0009b091 	.word	0x0009b091
   9e824:	0009b0b9 	.word	0x0009b0b9
   9e828:	000aa3e4 	.word	0x000aa3e4
   9e82c:	0009f145 	.word	0x0009f145
   9e830:	0009ecdd 	.word	0x0009ecdd
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   9e834:	4b09      	ldr	r3, [pc, #36]	; (9e85c <Cl_disinf_controller+0x147c>)
   9e836:	4798      	blx	r3
   9e838:	4603      	mov	r3, r0
   9e83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   9e83e:	bf00      	nop
				
			}
			break;
   9e840:	e005      	b.n	9e84e <Cl_disinf_controller+0x146e>
			default:break;
   9e842:	bf00      	nop
   9e844:	e004      	b.n	9e850 <Cl_disinf_controller+0x1470>
							}
						}
					break;
							
				}
			break;
   9e846:	bf00      	nop
   9e848:	e002      	b.n	9e850 <Cl_disinf_controller+0x1470>
// 						}
//					}
								break;
					
						}
			break;
   9e84a:	bf00      	nop
   9e84c:	e000      	b.n	9e850 <Cl_disinf_controller+0x1470>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
				break;
				
			}
			break;
   9e84e:	bf00      	nop
			default:break;
			
		}
		

	return CL_OK;
   9e850:	2300      	movs	r3, #0
}
   9e852:	4618      	mov	r0, r3
   9e854:	372c      	adds	r7, #44	; 0x2c
   9e856:	46bd      	mov	sp, r7
   9e858:	bd90      	pop	{r4, r7, pc}
   9e85a:	bf00      	nop
   9e85c:	0009f145 	.word	0x0009f145

0009e860 <cl_disinf_translatemacevent>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType  cl_disinf_translatemacevent(Cl_Mac_EventsType Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   9e860:	b480      	push	{r7}
   9e862:	b083      	sub	sp, #12
   9e864:	af00      	add	r7, sp, #0
   9e866:	4603      	mov	r3, r0
   9e868:	6039      	str	r1, [r7, #0]
   9e86a:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   9e86c:	79fb      	ldrb	r3, [r7, #7]
   9e86e:	3b07      	subs	r3, #7
   9e870:	2b4d      	cmp	r3, #77	; 0x4d
   9e872:	f200 8107 	bhi.w	9ea84 <cl_disinf_translatemacevent+0x224>
   9e876:	a201      	add	r2, pc, #4	; (adr r2, 9e87c <cl_disinf_translatemacevent+0x1c>)
   9e878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e87c:	0009ea3d 	.word	0x0009ea3d
   9e880:	0009ea85 	.word	0x0009ea85
   9e884:	0009ea85 	.word	0x0009ea85
   9e888:	0009ea6d 	.word	0x0009ea6d
   9e88c:	0009ea75 	.word	0x0009ea75
   9e890:	0009ea7d 	.word	0x0009ea7d
   9e894:	0009ea35 	.word	0x0009ea35
   9e898:	0009ea45 	.word	0x0009ea45
   9e89c:	0009ea4d 	.word	0x0009ea4d
   9e8a0:	0009ea55 	.word	0x0009ea55
   9e8a4:	0009ea85 	.word	0x0009ea85
   9e8a8:	0009ea85 	.word	0x0009ea85
   9e8ac:	0009ea85 	.word	0x0009ea85
   9e8b0:	0009ea85 	.word	0x0009ea85
   9e8b4:	0009ea85 	.word	0x0009ea85
   9e8b8:	0009ea85 	.word	0x0009ea85
   9e8bc:	0009ea85 	.word	0x0009ea85
   9e8c0:	0009ea85 	.word	0x0009ea85
   9e8c4:	0009ea85 	.word	0x0009ea85
   9e8c8:	0009ea85 	.word	0x0009ea85
   9e8cc:	0009ea85 	.word	0x0009ea85
   9e8d0:	0009ea85 	.word	0x0009ea85
   9e8d4:	0009ea85 	.word	0x0009ea85
   9e8d8:	0009ea85 	.word	0x0009ea85
   9e8dc:	0009ea5d 	.word	0x0009ea5d
   9e8e0:	0009ea65 	.word	0x0009ea65
   9e8e4:	0009ea85 	.word	0x0009ea85
   9e8e8:	0009ea85 	.word	0x0009ea85
   9e8ec:	0009ea85 	.word	0x0009ea85
   9e8f0:	0009ea85 	.word	0x0009ea85
   9e8f4:	0009ea85 	.word	0x0009ea85
   9e8f8:	0009ea85 	.word	0x0009ea85
   9e8fc:	0009ea85 	.word	0x0009ea85
   9e900:	0009ea85 	.word	0x0009ea85
   9e904:	0009e9bd 	.word	0x0009e9bd
   9e908:	0009ea85 	.word	0x0009ea85
   9e90c:	0009ea85 	.word	0x0009ea85
   9e910:	0009ea85 	.word	0x0009ea85
   9e914:	0009ea2d 	.word	0x0009ea2d
   9e918:	0009ea25 	.word	0x0009ea25
   9e91c:	0009ea85 	.word	0x0009ea85
   9e920:	0009ea85 	.word	0x0009ea85
   9e924:	0009ea85 	.word	0x0009ea85
   9e928:	0009ea85 	.word	0x0009ea85
   9e92c:	0009ea85 	.word	0x0009ea85
   9e930:	0009ea85 	.word	0x0009ea85
   9e934:	0009ea85 	.word	0x0009ea85
   9e938:	0009ea85 	.word	0x0009ea85
   9e93c:	0009ea85 	.word	0x0009ea85
   9e940:	0009e9f5 	.word	0x0009e9f5
   9e944:	0009e9fd 	.word	0x0009e9fd
   9e948:	0009ea05 	.word	0x0009ea05
   9e94c:	0009ea0d 	.word	0x0009ea0d
   9e950:	0009ea15 	.word	0x0009ea15
   9e954:	0009ea1d 	.word	0x0009ea1d
   9e958:	0009ea85 	.word	0x0009ea85
   9e95c:	0009e9b5 	.word	0x0009e9b5
   9e960:	0009e9c5 	.word	0x0009e9c5
   9e964:	0009e9cd 	.word	0x0009e9cd
   9e968:	0009ea85 	.word	0x0009ea85
   9e96c:	0009ea85 	.word	0x0009ea85
   9e970:	0009ea85 	.word	0x0009ea85
   9e974:	0009ea85 	.word	0x0009ea85
   9e978:	0009ea85 	.word	0x0009ea85
   9e97c:	0009ea85 	.word	0x0009ea85
   9e980:	0009ea85 	.word	0x0009ea85
   9e984:	0009ea85 	.word	0x0009ea85
   9e988:	0009ea85 	.word	0x0009ea85
   9e98c:	0009ea85 	.word	0x0009ea85
   9e990:	0009ea85 	.word	0x0009ea85
   9e994:	0009ea85 	.word	0x0009ea85
   9e998:	0009ea85 	.word	0x0009ea85
   9e99c:	0009ea85 	.word	0x0009ea85
   9e9a0:	0009ea85 	.word	0x0009ea85
   9e9a4:	0009e9ed 	.word	0x0009e9ed
   9e9a8:	0009e9d5 	.word	0x0009e9d5
   9e9ac:	0009e9dd 	.word	0x0009e9dd
   9e9b0:	0009e9e5 	.word	0x0009e9e5
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		*cl_disinf_event= EVENT_START_DISINF;
   9e9b4:	683b      	ldr	r3, [r7, #0]
   9e9b6:	2201      	movs	r2, #1
   9e9b8:	701a      	strb	r2, [r3, #0]
		break;
   9e9ba:	e064      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_disinf_event= EVENT_DISINF_CLR_ALARM;
   9e9bc:	683b      	ldr	r3, [r7, #0]
   9e9be:	2225      	movs	r2, #37	; 0x25
   9e9c0:	701a      	strb	r2, [r3, #0]
		break;
   9e9c2:	e060      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   9e9c4:	683b      	ldr	r3, [r7, #0]
   9e9c6:	2202      	movs	r2, #2
   9e9c8:	701a      	strb	r2, [r3, #0]
		break;
   9e9ca:	e05c      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   9e9cc:	683b      	ldr	r3, [r7, #0]
   9e9ce:	2203      	movs	r2, #3
   9e9d0:	701a      	strb	r2, [r3, #0]
		break;
   9e9d2:	e058      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   9e9d4:	683b      	ldr	r3, [r7, #0]
   9e9d6:	2222      	movs	r2, #34	; 0x22
   9e9d8:	701a      	strb	r2, [r3, #0]
		break;
   9e9da:	e054      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   9e9dc:	683b      	ldr	r3, [r7, #0]
   9e9de:	2223      	movs	r2, #35	; 0x23
   9e9e0:	701a      	strb	r2, [r3, #0]
		break;
   9e9e2:	e050      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   9e9e4:	683b      	ldr	r3, [r7, #0]
   9e9e6:	2216      	movs	r2, #22
   9e9e8:	701a      	strb	r2, [r3, #0]
		break;
   9e9ea:	e04c      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   9e9ec:	683b      	ldr	r3, [r7, #0]
   9e9ee:	2221      	movs	r2, #33	; 0x21
   9e9f0:	701a      	strb	r2, [r3, #0]
		break;
   9e9f2:	e048      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   9e9f4:	683b      	ldr	r3, [r7, #0]
   9e9f6:	220c      	movs	r2, #12
   9e9f8:	701a      	strb	r2, [r3, #0]
		break;
   9e9fa:	e044      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   9e9fc:	683b      	ldr	r3, [r7, #0]
   9e9fe:	220d      	movs	r2, #13
   9ea00:	701a      	strb	r2, [r3, #0]
		break;
   9ea02:	e040      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   9ea04:	683b      	ldr	r3, [r7, #0]
   9ea06:	220e      	movs	r2, #14
   9ea08:	701a      	strb	r2, [r3, #0]
		break;
   9ea0a:	e03c      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   9ea0c:	683b      	ldr	r3, [r7, #0]
   9ea0e:	220f      	movs	r2, #15
   9ea10:	701a      	strb	r2, [r3, #0]
		break;
   9ea12:	e038      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   9ea14:	683b      	ldr	r3, [r7, #0]
   9ea16:	2210      	movs	r2, #16
   9ea18:	701a      	strb	r2, [r3, #0]
		break;
   9ea1a:	e034      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   9ea1c:	683b      	ldr	r3, [r7, #0]
   9ea1e:	2211      	movs	r2, #17
   9ea20:	701a      	strb	r2, [r3, #0]
		break;
   9ea22:	e030      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   9ea24:	683b      	ldr	r3, [r7, #0]
   9ea26:	2213      	movs	r2, #19
   9ea28:	701a      	strb	r2, [r3, #0]
		break;
   9ea2a:	e02c      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   9ea2c:	683b      	ldr	r3, [r7, #0]
   9ea2e:	2212      	movs	r2, #18
   9ea30:	701a      	strb	r2, [r3, #0]
		break;
   9ea32:	e028      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   9ea34:	683b      	ldr	r3, [r7, #0]
   9ea36:	2215      	movs	r2, #21
   9ea38:	701a      	strb	r2, [r3, #0]
		break;
   9ea3a:	e024      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_disinf_event= EVENT_DISINF_START_RINSE;
   9ea3c:	683b      	ldr	r3, [r7, #0]
   9ea3e:	2224      	movs	r2, #36	; 0x24
   9ea40:	701a      	strb	r2, [r3, #0]
		break;
   9ea42:	e020      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   9ea44:	683b      	ldr	r3, [r7, #0]
   9ea46:	2214      	movs	r2, #20
   9ea48:	701a      	strb	r2, [r3, #0]
		break;
   9ea4a:	e01c      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   9ea4c:	683b      	ldr	r3, [r7, #0]
   9ea4e:	2217      	movs	r2, #23
   9ea50:	701a      	strb	r2, [r3, #0]
		break;
   9ea52:	e018      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   9ea54:	683b      	ldr	r3, [r7, #0]
   9ea56:	2218      	movs	r2, #24
   9ea58:	701a      	strb	r2, [r3, #0]
		break;
   9ea5a:	e014      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   9ea5c:	683b      	ldr	r3, [r7, #0]
   9ea5e:	221c      	movs	r2, #28
   9ea60:	701a      	strb	r2, [r3, #0]
		break;
   9ea62:	e010      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   9ea64:	683b      	ldr	r3, [r7, #0]
   9ea66:	221d      	movs	r2, #29
   9ea68:	701a      	strb	r2, [r3, #0]
		break;
   9ea6a:	e00c      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   9ea6c:	683b      	ldr	r3, [r7, #0]
   9ea6e:	221e      	movs	r2, #30
   9ea70:	701a      	strb	r2, [r3, #0]
		break;
   9ea72:	e008      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   9ea74:	683b      	ldr	r3, [r7, #0]
   9ea76:	221f      	movs	r2, #31
   9ea78:	701a      	strb	r2, [r3, #0]
		break;
   9ea7a:	e004      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   9ea7c:	683b      	ldr	r3, [r7, #0]
   9ea7e:	2220      	movs	r2, #32
   9ea80:	701a      	strb	r2, [r3, #0]
		break;
   9ea82:	e000      	b.n	9ea86 <cl_disinf_translatemacevent+0x226>
		
		default:
		break;
   9ea84:	bf00      	nop
	}
	return CL_OK;
   9ea86:	2300      	movs	r3, #0
}
   9ea88:	4618      	mov	r0, r3
   9ea8a:	370c      	adds	r7, #12
   9ea8c:	46bd      	mov	sp, r7
   9ea8e:	bc80      	pop	{r7}
   9ea90:	4770      	bx	lr
   9ea92:	bf00      	nop

0009ea94 <Cl_Disinf_StartDisinf>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType Cl_Disinf_StartDisinf(void)
{
   9ea94:	b590      	push	{r4, r7, lr}
   9ea96:	b085      	sub	sp, #20
   9ea98:	af02      	add	r7, sp, #8
	Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9ea9a:	2300      	movs	r3, #0
   9ea9c:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ea9e:	2359      	movs	r3, #89	; 0x59
   9eaa0:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9eaa2:	2300      	movs	r3, #0
   9eaa4:	603b      	str	r3, [r7, #0]
	Cl_Uint8Type data = 0;
   9eaa6:	2300      	movs	r3, #0
   9eaa8:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9eaaa:	2001      	movs	r0, #1
   9eaac:	4b42      	ldr	r3, [pc, #264]	; (9ebb8 <Cl_Disinf_StartDisinf+0x124>)
   9eaae:	4798      	blx	r3
	sv_cs_setpotvalue(600);
   9eab0:	f44f 7016 	mov.w	r0, #600	; 0x258
   9eab4:	4b41      	ldr	r3, [pc, #260]	; (9ebbc <Cl_Disinf_StartDisinf+0x128>)
   9eab6:	4798      	blx	r3
	
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9eab8:	2001      	movs	r0, #1
   9eaba:	4b41      	ldr	r3, [pc, #260]	; (9ebc0 <Cl_Disinf_StartDisinf+0x12c>)
   9eabc:	4798      	blx	r3
   9eabe:	4603      	mov	r3, r0
   9eac0:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   9eac2:	f44f 7116 	mov.w	r1, #600	; 0x258
   9eac6:	2001      	movs	r0, #1
   9eac8:	4b3e      	ldr	r3, [pc, #248]	; (9ebc4 <Cl_Disinf_StartDisinf+0x130>)
   9eaca:	4798      	blx	r3
   9eacc:	4603      	mov	r3, r0
   9eace:	71fb      	strb	r3, [r7, #7]
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   9ead0:	2004      	movs	r0, #4
   9ead2:	4b3d      	ldr	r3, [pc, #244]	; (9ebc8 <Cl_Disinf_StartDisinf+0x134>)
   9ead4:	4798      	blx	r3
   9ead6:	4603      	mov	r3, r0
   9ead8:	71fb      	strb	r3, [r7, #7]
	
	if(Cl_disinfretcode == CL_OK)
   9eada:	79fb      	ldrb	r3, [r7, #7]
   9eadc:	2b00      	cmp	r3, #0
   9eade:	d165      	bne.n	9ebac <Cl_Disinf_StartDisinf+0x118>
	{
		Cl_disinfOpenFillTimeOut = false;
   9eae0:	4b3a      	ldr	r3, [pc, #232]	; (9ebcc <Cl_Disinf_StartDisinf+0x138>)
   9eae2:	2200      	movs	r2, #0
   9eae4:	701a      	strb	r2, [r3, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9eae6:	4b3a      	ldr	r3, [pc, #232]	; (9ebd0 <Cl_Disinf_StartDisinf+0x13c>)
   9eae8:	4798      	blx	r3
   9eaea:	4603      	mov	r3, r0
   9eaec:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9eaee:	2001      	movs	r0, #1
   9eaf0:	4b38      	ldr	r3, [pc, #224]	; (9ebd4 <Cl_Disinf_StartDisinf+0x140>)
   9eaf2:	4798      	blx	r3
   9eaf4:	4603      	mov	r3, r0
   9eaf6:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   9eaf8:	4b37      	ldr	r3, [pc, #220]	; (9ebd8 <Cl_Disinf_StartDisinf+0x144>)
   9eafa:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9eafc:	2300      	movs	r3, #0
   9eafe:	9300      	str	r3, [sp, #0]
   9eb00:	f04f 0300 	mov.w	r3, #0
   9eb04:	f04f 0200 	mov.w	r2, #0
   9eb08:	2100      	movs	r1, #0
   9eb0a:	2029      	movs	r0, #41	; 0x29
   9eb0c:	4c33      	ldr	r4, [pc, #204]	; (9ebdc <Cl_Disinf_StartDisinf+0x148>)
   9eb0e:	47a0      	blx	r4
   9eb10:	4603      	mov	r3, r0
   9eb12:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9eb14:	2300      	movs	r3, #0
   9eb16:	9300      	str	r3, [sp, #0]
   9eb18:	f04f 0300 	mov.w	r3, #0
   9eb1c:	f04f 0200 	mov.w	r2, #0
   9eb20:	2100      	movs	r1, #0
   9eb22:	202b      	movs	r0, #43	; 0x2b
   9eb24:	4c2d      	ldr	r4, [pc, #180]	; (9ebdc <Cl_Disinf_StartDisinf+0x148>)
   9eb26:	47a0      	blx	r4
   9eb28:	4603      	mov	r3, r0
   9eb2a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9eb2c:	2300      	movs	r3, #0
   9eb2e:	9300      	str	r3, [sp, #0]
   9eb30:	f04f 0300 	mov.w	r3, #0
   9eb34:	f04f 0200 	mov.w	r2, #0
   9eb38:	2101      	movs	r1, #1
   9eb3a:	2003      	movs	r0, #3
   9eb3c:	4c27      	ldr	r4, [pc, #156]	; (9ebdc <Cl_Disinf_StartDisinf+0x148>)
   9eb3e:	47a0      	blx	r4
   9eb40:	4603      	mov	r3, r0
   9eb42:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9eb44:	2300      	movs	r3, #0
   9eb46:	9300      	str	r3, [sp, #0]
   9eb48:	f04f 0300 	mov.w	r3, #0
   9eb4c:	f04f 0200 	mov.w	r2, #0
   9eb50:	2101      	movs	r1, #1
   9eb52:	2004      	movs	r0, #4
   9eb54:	4c21      	ldr	r4, [pc, #132]	; (9ebdc <Cl_Disinf_StartDisinf+0x148>)
   9eb56:	47a0      	blx	r4
   9eb58:	4603      	mov	r3, r0
   9eb5a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9eb5c:	2300      	movs	r3, #0
   9eb5e:	9300      	str	r3, [sp, #0]
   9eb60:	f04f 0300 	mov.w	r3, #0
   9eb64:	f04f 0200 	mov.w	r2, #0
   9eb68:	2100      	movs	r1, #0
   9eb6a:	203d      	movs	r0, #61	; 0x3d
   9eb6c:	4c1b      	ldr	r4, [pc, #108]	; (9ebdc <Cl_Disinf_StartDisinf+0x148>)
   9eb6e:	47a0      	blx	r4
   9eb70:	4603      	mov	r3, r0
   9eb72:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9eb74:	2300      	movs	r3, #0
   9eb76:	9300      	str	r3, [sp, #0]
   9eb78:	f04f 0300 	mov.w	r3, #0
   9eb7c:	f04f 0200 	mov.w	r2, #0
   9eb80:	2101      	movs	r1, #1
   9eb82:	203e      	movs	r0, #62	; 0x3e
   9eb84:	4c15      	ldr	r4, [pc, #84]	; (9ebdc <Cl_Disinf_StartDisinf+0x148>)
   9eb86:	47a0      	blx	r4
   9eb88:	4603      	mov	r3, r0
   9eb8a:	71fb      	strb	r3, [r7, #7]
		
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true);*/
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true);
   9eb8c:	2101      	movs	r1, #1
   9eb8e:	203d      	movs	r0, #61	; 0x3d
   9eb90:	4b13      	ldr	r3, [pc, #76]	; (9ebe0 <Cl_Disinf_StartDisinf+0x14c>)
   9eb92:	4798      	blx	r3
   9eb94:	4603      	mov	r3, r0
   9eb96:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true);
   9eb98:	2101      	movs	r1, #1
   9eb9a:	203e      	movs	r0, #62	; 0x3e
   9eb9c:	4b10      	ldr	r3, [pc, #64]	; (9ebe0 <Cl_Disinf_StartDisinf+0x14c>)
   9eb9e:	4798      	blx	r3
   9eba0:	4603      	mov	r3, r0
   9eba2:	71fb      	strb	r3, [r7, #7]
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true);*/
		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();	
   9eba4:	4b0c      	ldr	r3, [pc, #48]	; (9ebd8 <Cl_Disinf_StartDisinf+0x144>)
   9eba6:	4798      	blx	r3
   9eba8:	4603      	mov	r3, r0
   9ebaa:	71fb      	strb	r3, [r7, #7]
	}
return CL_OK;
   9ebac:	2300      	movs	r3, #0
}
   9ebae:	4618      	mov	r0, r3
   9ebb0:	370c      	adds	r7, #12
   9ebb2:	46bd      	mov	sp, r7
   9ebb4:	bd90      	pop	{r4, r7, pc}
   9ebb6:	bf00      	nop
   9ebb8:	0009ae01 	.word	0x0009ae01
   9ebbc:	0009b2c1 	.word	0x0009b2c1
   9ebc0:	0009ad41 	.word	0x0009ad41
   9ebc4:	0009ae59 	.word	0x0009ae59
   9ebc8:	00082ea5 	.word	0x00082ea5
   9ebcc:	20070b0e 	.word	0x20070b0e
   9ebd0:	0009ed91 	.word	0x0009ed91
   9ebd4:	0009449d 	.word	0x0009449d
   9ebd8:	0009f145 	.word	0x0009f145
   9ebdc:	00082989 	.word	0x00082989
   9ebe0:	000829e5 	.word	0x000829e5

0009ebe4 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodeType Cl_Disinf_StopDisinf(void)
{
   9ebe4:	b580      	push	{r7, lr}
   9ebe6:	b082      	sub	sp, #8
   9ebe8:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	//Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
	sv_prop_stopmixing();
   9ebea:	4b28      	ldr	r3, [pc, #160]	; (9ec8c <Cl_Disinf_StopDisinf+0xa8>)
   9ebec:	4798      	blx	r3
 	sv_cntrl_deactivatepump(UFPUMP);              // manav02 added
   9ebee:	2004      	movs	r0, #4
   9ebf0:	4b27      	ldr	r3, [pc, #156]	; (9ec90 <Cl_Disinf_StopDisinf+0xac>)
   9ebf2:	4798      	blx	r3
	flag_hotrinse = 0;							// manav02 added	
   9ebf4:	4b27      	ldr	r3, [pc, #156]	; (9ec94 <Cl_Disinf_StopDisinf+0xb0>)
   9ebf6:	2200      	movs	r2, #0
   9ebf8:	701a      	strb	r2, [r3, #0]
	sv_cntrl_deactivatepump(DCMOTOR2);			// manav02 added	
   9ebfa:	2002      	movs	r0, #2
   9ebfc:	4b24      	ldr	r3, [pc, #144]	; (9ec90 <Cl_Disinf_StopDisinf+0xac>)
   9ebfe:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR1);			// manav02 added
   9ec00:	2001      	movs	r0, #1
   9ec02:	4b23      	ldr	r3, [pc, #140]	; (9ec90 <Cl_Disinf_StopDisinf+0xac>)
   9ec04:	4798      	blx	r3
	Cl_bc_controller(BC_EVENT_STOP);			// manav02 added
   9ec06:	2005      	movs	r0, #5
   9ec08:	4b23      	ldr	r3, [pc, #140]	; (9ec98 <Cl_Disinf_StopDisinf+0xb4>)
   9ec0a:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );     // manav02 added ts1 alarm during loopback off
   9ec0c:	2101      	movs	r1, #1
   9ec0e:	2010      	movs	r0, #16
   9ec10:	4b22      	ldr	r3, [pc, #136]	; (9ec9c <Cl_Disinf_StopDisinf+0xb8>)
   9ec12:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   9ec14:	2101      	movs	r1, #1
   9ec16:	200f      	movs	r0, #15
   9ec18:	4b20      	ldr	r3, [pc, #128]	; (9ec9c <Cl_Disinf_StopDisinf+0xb8>)
   9ec1a:	4798      	blx	r3

	sv_cntrl_disable_loopback();
   9ec1c:	4b20      	ldr	r3, [pc, #128]	; (9eca0 <Cl_Disinf_StopDisinf+0xbc>)
   9ec1e:	4798      	blx	r3
	sv_cntrl_poweroffheater();
   9ec20:	4b20      	ldr	r3, [pc, #128]	; (9eca4 <Cl_Disinf_StopDisinf+0xc0>)
   9ec22:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9ec24:	4b20      	ldr	r3, [pc, #128]	; (9eca8 <Cl_Disinf_StopDisinf+0xc4>)
   9ec26:	220c      	movs	r2, #12
   9ec28:	701a      	strb	r2, [r3, #0]
	Cl_disinfsecondscounter_1 = Cl_disinfsecondscounter;
   9ec2a:	4b20      	ldr	r3, [pc, #128]	; (9ecac <Cl_Disinf_StopDisinf+0xc8>)
   9ec2c:	681b      	ldr	r3, [r3, #0]
   9ec2e:	4a20      	ldr	r2, [pc, #128]	; (9ecb0 <Cl_Disinf_StopDisinf+0xcc>)
   9ec30:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter_1 = Cl_disinfshourscounter;
   9ec32:	4b20      	ldr	r3, [pc, #128]	; (9ecb4 <Cl_Disinf_StopDisinf+0xd0>)
   9ec34:	681b      	ldr	r3, [r3, #0]
   9ec36:	4a20      	ldr	r2, [pc, #128]	; (9ecb8 <Cl_Disinf_StopDisinf+0xd4>)
   9ec38:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter_1 = Cl_disinfMinutescounter;
   9ec3a:	4b20      	ldr	r3, [pc, #128]	; (9ecbc <Cl_Disinf_StopDisinf+0xd8>)
   9ec3c:	681b      	ldr	r3, [r3, #0]
   9ec3e:	4a20      	ldr	r2, [pc, #128]	; (9ecc0 <Cl_Disinf_StopDisinf+0xdc>)
   9ec40:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter_1 = Cl_disinfTotalMinutescounter;
   9ec42:	4b20      	ldr	r3, [pc, #128]	; (9ecc4 <Cl_Disinf_StopDisinf+0xe0>)
   9ec44:	681b      	ldr	r3, [r3, #0]
   9ec46:	4a20      	ldr	r2, [pc, #128]	; (9ecc8 <Cl_Disinf_StopDisinf+0xe4>)
   9ec48:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter_1 =Cl_disinfsTotalhourscounter;
   9ec4a:	4b20      	ldr	r3, [pc, #128]	; (9eccc <Cl_Disinf_StopDisinf+0xe8>)
   9ec4c:	681b      	ldr	r3, [r3, #0]
   9ec4e:	4a20      	ldr	r2, [pc, #128]	; (9ecd0 <Cl_Disinf_StopDisinf+0xec>)
   9ec50:	6013      	str	r3, [r2, #0]
	Cl_disinfsecondscounter=0;
   9ec52:	4b16      	ldr	r3, [pc, #88]	; (9ecac <Cl_Disinf_StopDisinf+0xc8>)
   9ec54:	2200      	movs	r2, #0
   9ec56:	601a      	str	r2, [r3, #0]
	Cl_disinfshourscounter = 0;
   9ec58:	4b16      	ldr	r3, [pc, #88]	; (9ecb4 <Cl_Disinf_StopDisinf+0xd0>)
   9ec5a:	2200      	movs	r2, #0
   9ec5c:	601a      	str	r2, [r3, #0]
	Cl_disinfMinutescounter = 0;
   9ec5e:	4b17      	ldr	r3, [pc, #92]	; (9ecbc <Cl_Disinf_StopDisinf+0xd8>)
   9ec60:	2200      	movs	r2, #0
   9ec62:	601a      	str	r2, [r3, #0]
	Cl_disinfTotalMinutescounter = 0;
   9ec64:	4b17      	ldr	r3, [pc, #92]	; (9ecc4 <Cl_Disinf_StopDisinf+0xe0>)
   9ec66:	2200      	movs	r2, #0
   9ec68:	601a      	str	r2, [r3, #0]
	Cl_disinfsTotalhourscounter = 0;
   9ec6a:	4b18      	ldr	r3, [pc, #96]	; (9eccc <Cl_Disinf_StopDisinf+0xe8>)
   9ec6c:	2200      	movs	r2, #0
   9ec6e:	601a      	str	r2, [r3, #0]
	hotrinse_flag = 0;
   9ec70:	4b18      	ldr	r3, [pc, #96]	; (9ecd4 <Cl_Disinf_StopDisinf+0xf0>)
   9ec72:	2200      	movs	r2, #0
   9ec74:	701a      	strb	r2, [r3, #0]
	Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_STOPPED,&data,0);
   9ec76:	1dfb      	adds	r3, r7, #7
   9ec78:	2200      	movs	r2, #0
   9ec7a:	4619      	mov	r1, r3
   9ec7c:	2050      	movs	r0, #80	; 0x50
   9ec7e:	4b16      	ldr	r3, [pc, #88]	; (9ecd8 <Cl_Disinf_StopDisinf+0xf4>)
   9ec80:	4798      	blx	r3
	//Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_PAUSED,&data,0);
	return CL_OK;
   9ec82:	2300      	movs	r3, #0
}
   9ec84:	4618      	mov	r0, r3
   9ec86:	3708      	adds	r7, #8
   9ec88:	46bd      	mov	sp, r7
   9ec8a:	bd80      	pop	{r7, pc}
   9ec8c:	0009b20d 	.word	0x0009b20d
   9ec90:	0009ad7d 	.word	0x0009ad7d
   9ec94:	20071938 	.word	0x20071938
   9ec98:	00082ea5 	.word	0x00082ea5
   9ec9c:	000829e5 	.word	0x000829e5
   9eca0:	0009af71 	.word	0x0009af71
   9eca4:	0009adcd 	.word	0x0009adcd
   9eca8:	20071adf 	.word	0x20071adf
   9ecac:	20071ae0 	.word	0x20071ae0
   9ecb0:	20071aec 	.word	0x20071aec
   9ecb4:	20071ae8 	.word	0x20071ae8
   9ecb8:	20071af4 	.word	0x20071af4
   9ecbc:	20071ae4 	.word	0x20071ae4
   9ecc0:	20071af0 	.word	0x20071af0
   9ecc4:	20071af8 	.word	0x20071af8
   9ecc8:	20071b00 	.word	0x20071b00
   9eccc:	20071afc 	.word	0x20071afc
   9ecd0:	20071b04 	.word	0x20071b04
   9ecd4:	20071bb5 	.word	0x20071bb5
   9ecd8:	0009cbd5 	.word	0x0009cbd5

0009ecdc <Cl_Disinf_resumeDisinf>:

Cl_ReturnCodeType Cl_Disinf_resumeDisinf(void)
{
   9ecdc:	b580      	push	{r7, lr}
   9ecde:	b082      	sub	sp, #8
   9ece0:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
   9ece2:	2300      	movs	r3, #0
   9ece4:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_enable_loopback();
   9ece6:	4b1a      	ldr	r3, [pc, #104]	; (9ed50 <Cl_Disinf_resumeDisinf+0x74>)
   9ece8:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );     // manav02 added no ts1 alarm during loopback
   9ecea:	2100      	movs	r1, #0
   9ecec:	2010      	movs	r0, #16
   9ecee:	4b19      	ldr	r3, [pc, #100]	; (9ed54 <Cl_Disinf_resumeDisinf+0x78>)
   9ecf0:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9ecf2:	2100      	movs	r1, #0
   9ecf4:	200f      	movs	r0, #15
   9ecf6:	4b17      	ldr	r3, [pc, #92]	; (9ed54 <Cl_Disinf_resumeDisinf+0x78>)
   9ecf8:	4798      	blx	r3

	cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9ecfa:	4b17      	ldr	r3, [pc, #92]	; (9ed58 <Cl_Disinf_resumeDisinf+0x7c>)
   9ecfc:	2208      	movs	r2, #8
   9ecfe:	701a      	strb	r2, [r3, #0]
	if (flag_hotcitric == 1)
   9ed00:	4b16      	ldr	r3, [pc, #88]	; (9ed5c <Cl_Disinf_resumeDisinf+0x80>)
   9ed02:	781b      	ldrb	r3, [r3, #0]
   9ed04:	2b01      	cmp	r3, #1
   9ed06:	d101      	bne.n	9ed0c <Cl_Disinf_resumeDisinf+0x30>
	{
		sv_cntrl_poweronheater();
   9ed08:	4b15      	ldr	r3, [pc, #84]	; (9ed60 <Cl_Disinf_resumeDisinf+0x84>)
   9ed0a:	4798      	blx	r3
	}
	Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_RESUMED,&data,0);
   9ed0c:	1dbb      	adds	r3, r7, #6
   9ed0e:	2200      	movs	r2, #0
   9ed10:	4619      	mov	r1, r3
   9ed12:	203b      	movs	r0, #59	; 0x3b
   9ed14:	4b13      	ldr	r3, [pc, #76]	; (9ed64 <Cl_Disinf_resumeDisinf+0x88>)
   9ed16:	4798      	blx	r3
   9ed18:	4603      	mov	r3, r0
   9ed1a:	71fb      	strb	r3, [r7, #7]
	Cl_disinfsecondscounter = Cl_disinfsecondscounter_1;
   9ed1c:	4b12      	ldr	r3, [pc, #72]	; (9ed68 <Cl_Disinf_resumeDisinf+0x8c>)
   9ed1e:	681b      	ldr	r3, [r3, #0]
   9ed20:	4a12      	ldr	r2, [pc, #72]	; (9ed6c <Cl_Disinf_resumeDisinf+0x90>)
   9ed22:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter = Cl_disinfshourscounter_1;
   9ed24:	4b12      	ldr	r3, [pc, #72]	; (9ed70 <Cl_Disinf_resumeDisinf+0x94>)
   9ed26:	681b      	ldr	r3, [r3, #0]
   9ed28:	4a12      	ldr	r2, [pc, #72]	; (9ed74 <Cl_Disinf_resumeDisinf+0x98>)
   9ed2a:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter = Cl_disinfMinutescounter_1;
   9ed2c:	4b12      	ldr	r3, [pc, #72]	; (9ed78 <Cl_Disinf_resumeDisinf+0x9c>)
   9ed2e:	681b      	ldr	r3, [r3, #0]
   9ed30:	4a12      	ldr	r2, [pc, #72]	; (9ed7c <Cl_Disinf_resumeDisinf+0xa0>)
   9ed32:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter = Cl_disinfTotalMinutescounter_1;
   9ed34:	4b12      	ldr	r3, [pc, #72]	; (9ed80 <Cl_Disinf_resumeDisinf+0xa4>)
   9ed36:	681b      	ldr	r3, [r3, #0]
   9ed38:	4a12      	ldr	r2, [pc, #72]	; (9ed84 <Cl_Disinf_resumeDisinf+0xa8>)
   9ed3a:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter = Cl_disinfsTotalhourscounter_1;
   9ed3c:	4b12      	ldr	r3, [pc, #72]	; (9ed88 <Cl_Disinf_resumeDisinf+0xac>)
   9ed3e:	681b      	ldr	r3, [r3, #0]
   9ed40:	4a12      	ldr	r2, [pc, #72]	; (9ed8c <Cl_Disinf_resumeDisinf+0xb0>)
   9ed42:	6013      	str	r3, [r2, #0]
	//Cl_Disinf_UpdateTimeInfo();
	
	return CL_OK;
   9ed44:	2300      	movs	r3, #0
}
   9ed46:	4618      	mov	r0, r3
   9ed48:	3708      	adds	r7, #8
   9ed4a:	46bd      	mov	sp, r7
   9ed4c:	bd80      	pop	{r7, pc}
   9ed4e:	bf00      	nop
   9ed50:	0009af55 	.word	0x0009af55
   9ed54:	000829e5 	.word	0x000829e5
   9ed58:	20071adf 	.word	0x20071adf
   9ed5c:	20071937 	.word	0x20071937
   9ed60:	0009adb9 	.word	0x0009adb9
   9ed64:	0009cbd5 	.word	0x0009cbd5
   9ed68:	20071aec 	.word	0x20071aec
   9ed6c:	20071ae0 	.word	0x20071ae0
   9ed70:	20071af4 	.word	0x20071af4
   9ed74:	20071ae8 	.word	0x20071ae8
   9ed78:	20071af0 	.word	0x20071af0
   9ed7c:	20071ae4 	.word	0x20071ae4
   9ed80:	20071b00 	.word	0x20071b00
   9ed84:	20071af8 	.word	0x20071af8
   9ed88:	20071b04 	.word	0x20071b04
   9ed8c:	20071afc 	.word	0x20071afc

0009ed90 <Cl_Disinf_UpdateTimeInfo>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_UpdateTimeInfo(void)
{
   9ed90:	b580      	push	{r7, lr}
   9ed92:	b084      	sub	sp, #16
   9ed94:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_disinfretcode = CL_ERROR;
   9ed96:	2304      	movs	r3, #4
   9ed98:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ed9a:	2359      	movs	r3, #89	; 0x59
   9ed9c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9ed9e:	1d3b      	adds	r3, r7, #4
   9eda0:	2200      	movs	r2, #0
   9eda2:	601a      	str	r2, [r3, #0]
   9eda4:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   9eda8:	230a      	movs	r3, #10
   9edaa:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)DISINF_STATE;
   9edac:	230b      	movs	r3, #11
   9edae:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_disinfTotalMinutescounter;
   9edb0:	4b08      	ldr	r3, [pc, #32]	; (9edd4 <Cl_Disinf_UpdateTimeInfo+0x44>)
   9edb2:	681b      	ldr	r3, [r3, #0]
   9edb4:	b2db      	uxtb	r3, r3
   9edb6:	717b      	strb	r3, [r7, #5]
	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   9edb8:	1d39      	adds	r1, r7, #4
   9edba:	7bbb      	ldrb	r3, [r7, #14]
   9edbc:	2202      	movs	r2, #2
   9edbe:	4618      	mov	r0, r3
   9edc0:	4b05      	ldr	r3, [pc, #20]	; (9edd8 <Cl_Disinf_UpdateTimeInfo+0x48>)
   9edc2:	4798      	blx	r3
   9edc4:	4603      	mov	r3, r0
   9edc6:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   9edc8:	2300      	movs	r3, #0
	
}
   9edca:	4618      	mov	r0, r3
   9edcc:	3710      	adds	r7, #16
   9edce:	46bd      	mov	sp, r7
   9edd0:	bd80      	pop	{r7, pc}
   9edd2:	bf00      	nop
   9edd4:	20071af8 	.word	0x20071af8
   9edd8:	0009cbd5 	.word	0x0009cbd5

0009eddc <Cl_Disinf_UpdateAlarmTable>:
Cl_ReturnCodeType Cl_Disinf_UpdateAlarmTable(CldisinfAlarmIdType* CldisinfAlarmId )
{
   9eddc:	b580      	push	{r7, lr}
   9edde:	b086      	sub	sp, #24
   9ede0:	af00      	add	r7, sp, #0
   9ede2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9ede4:	2300      	movs	r3, #0
   9ede6:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9ede8:	2300      	movs	r3, #0
   9edea:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9edec:	f107 030c 	add.w	r3, r7, #12
   9edf0:	2100      	movs	r1, #0
   9edf2:	460a      	mov	r2, r1
   9edf4:	801a      	strh	r2, [r3, #0]
   9edf6:	460a      	mov	r2, r1
   9edf8:	709a      	strb	r2, [r3, #2]
   9edfa:	2300      	movs	r3, #0
   9edfc:	613b      	str	r3, [r7, #16]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9edfe:	2359      	movs	r3, #89	; 0x59
   9ee00:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9ee02:	2300      	movs	r3, #0
   9ee04:	75bb      	strb	r3, [r7, #22]
   9ee06:	e05f      	b.n	9eec8 <Cl_Disinf_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9ee08:	7dba      	ldrb	r2, [r7, #22]
   9ee0a:	4933      	ldr	r1, [pc, #204]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee0c:	4613      	mov	r3, r2
   9ee0e:	00db      	lsls	r3, r3, #3
   9ee10:	1a9b      	subs	r3, r3, r2
   9ee12:	440b      	add	r3, r1
   9ee14:	7818      	ldrb	r0, [r3, #0]
   9ee16:	7dba      	ldrb	r2, [r7, #22]
   9ee18:	4613      	mov	r3, r2
   9ee1a:	00db      	lsls	r3, r3, #3
   9ee1c:	1a9b      	subs	r3, r3, r2
   9ee1e:	4a2e      	ldr	r2, [pc, #184]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee20:	4413      	add	r3, r2
   9ee22:	3302      	adds	r3, #2
   9ee24:	4619      	mov	r1, r3
   9ee26:	4b2d      	ldr	r3, [pc, #180]	; (9eedc <Cl_Disinf_UpdateAlarmTable+0x100>)
   9ee28:	4798      	blx	r3

	
			if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9ee2a:	7dba      	ldrb	r2, [r7, #22]
   9ee2c:	492a      	ldr	r1, [pc, #168]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee2e:	4613      	mov	r3, r2
   9ee30:	00db      	lsls	r3, r3, #3
   9ee32:	1a9b      	subs	r3, r3, r2
   9ee34:	440b      	add	r3, r1
   9ee36:	3302      	adds	r3, #2
   9ee38:	781b      	ldrb	r3, [r3, #0]
   9ee3a:	2b00      	cmp	r3, #0
   9ee3c:	d022      	beq.n	9ee84 <Cl_Disinf_UpdateAlarmTable+0xa8>
			{
				if(!Cl_DisinfAlarmTable[tempcount].IsRaised)
   9ee3e:	7dba      	ldrb	r2, [r7, #22]
   9ee40:	4925      	ldr	r1, [pc, #148]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee42:	4613      	mov	r3, r2
   9ee44:	00db      	lsls	r3, r3, #3
   9ee46:	1a9b      	subs	r3, r3, r2
   9ee48:	440b      	add	r3, r1
   9ee4a:	3303      	adds	r3, #3
   9ee4c:	781b      	ldrb	r3, [r3, #0]
   9ee4e:	f083 0301 	eor.w	r3, r3, #1
   9ee52:	b2db      	uxtb	r3, r3
   9ee54:	2b00      	cmp	r3, #0
   9ee56:	d034      	beq.n	9eec2 <Cl_Disinf_UpdateAlarmTable+0xe6>
					{
	
						Cl_DisinfAlarmTable[tempcount].IsRaised = true;
   9ee58:	7dba      	ldrb	r2, [r7, #22]
   9ee5a:	491f      	ldr	r1, [pc, #124]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee5c:	4613      	mov	r3, r2
   9ee5e:	00db      	lsls	r3, r3, #3
   9ee60:	1a9b      	subs	r3, r3, r2
   9ee62:	440b      	add	r3, r1
   9ee64:	3303      	adds	r3, #3
   9ee66:	2201      	movs	r2, #1
   9ee68:	701a      	strb	r2, [r3, #0]
	
						Cl_disinfretcode = CL_DisinfAlarmActon(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9ee6a:	7dba      	ldrb	r2, [r7, #22]
   9ee6c:	491a      	ldr	r1, [pc, #104]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee6e:	4613      	mov	r3, r2
   9ee70:	00db      	lsls	r3, r3, #3
   9ee72:	1a9b      	subs	r3, r3, r2
   9ee74:	440b      	add	r3, r1
   9ee76:	781b      	ldrb	r3, [r3, #0]
   9ee78:	4618      	mov	r0, r3
   9ee7a:	4b19      	ldr	r3, [pc, #100]	; (9eee0 <Cl_Disinf_UpdateAlarmTable+0x104>)
   9ee7c:	4798      	blx	r3
   9ee7e:	4603      	mov	r3, r0
   9ee80:	75fb      	strb	r3, [r7, #23]
   9ee82:	e01e      	b.n	9eec2 <Cl_Disinf_UpdateAlarmTable+0xe6>
	
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DisinfAlarmTable[tempcount].IsRaised == true)
   9ee84:	7dba      	ldrb	r2, [r7, #22]
   9ee86:	4914      	ldr	r1, [pc, #80]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee88:	4613      	mov	r3, r2
   9ee8a:	00db      	lsls	r3, r3, #3
   9ee8c:	1a9b      	subs	r3, r3, r2
   9ee8e:	440b      	add	r3, r1
   9ee90:	3303      	adds	r3, #3
   9ee92:	781b      	ldrb	r3, [r3, #0]
   9ee94:	2b00      	cmp	r3, #0
   9ee96:	d014      	beq.n	9eec2 <Cl_Disinf_UpdateAlarmTable+0xe6>
				{
					Cl_DisinfAlarmTable[tempcount].IsRaised = false;
   9ee98:	7dba      	ldrb	r2, [r7, #22]
   9ee9a:	490f      	ldr	r1, [pc, #60]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9ee9c:	4613      	mov	r3, r2
   9ee9e:	00db      	lsls	r3, r3, #3
   9eea0:	1a9b      	subs	r3, r3, r2
   9eea2:	440b      	add	r3, r1
   9eea4:	3303      	adds	r3, #3
   9eea6:	2200      	movs	r2, #0
   9eea8:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9eeaa:	2307      	movs	r3, #7
   9eeac:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9eeae:	7dba      	ldrb	r2, [r7, #22]
   9eeb0:	4909      	ldr	r1, [pc, #36]	; (9eed8 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9eeb2:	4613      	mov	r3, r2
   9eeb4:	00db      	lsls	r3, r3, #3
   9eeb6:	1a9b      	subs	r3, r3, r2
   9eeb8:	440b      	add	r3, r1
   9eeba:	781b      	ldrb	r3, [r3, #0]
   9eebc:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   9eebe:	2300      	movs	r3, #0
   9eec0:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9eec2:	7dbb      	ldrb	r3, [r7, #22]
   9eec4:	3301      	adds	r3, #1
   9eec6:	75bb      	strb	r3, [r7, #22]
   9eec8:	7dbb      	ldrb	r3, [r7, #22]
   9eeca:	2b0b      	cmp	r3, #11
   9eecc:	d99c      	bls.n	9ee08 <Cl_Disinf_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_disinfretcode );
   9eece:	7dfb      	ldrb	r3, [r7, #23]
}
   9eed0:	4618      	mov	r0, r3
   9eed2:	3718      	adds	r7, #24
   9eed4:	46bd      	mov	sp, r7
   9eed6:	bd80      	pop	{r7, pc}
   9eed8:	20070b10 	.word	0x20070b10
   9eedc:	00082bc1 	.word	0x00082bc1
   9eee0:	0009ef0d 	.word	0x0009ef0d

0009eee4 <Cl_disinf_ProcessAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType  Cl_disinf_ProcessAlarms(void)
{
   9eee4:	b580      	push	{r7, lr}
   9eee6:	b082      	sub	sp, #8
   9eee8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9eeea:	2300      	movs	r3, #0
   9eeec:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9eeee:	2359      	movs	r3, #89	; 0x59
   9eef0:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	Cl_disinfretcode = Cl_Disinf_UpdateAlarmTable(&CldisinfAlarmId);
   9eef2:	1d7b      	adds	r3, r7, #5
   9eef4:	4618      	mov	r0, r3
   9eef6:	4b04      	ldr	r3, [pc, #16]	; (9ef08 <Cl_disinf_ProcessAlarms+0x24>)
   9eef8:	4798      	blx	r3
   9eefa:	4603      	mov	r3, r0
   9eefc:	71fb      	strb	r3, [r7, #7]
	return (Cl_disinfretcode);
   9eefe:	79fb      	ldrb	r3, [r7, #7]
}
   9ef00:	4618      	mov	r0, r3
   9ef02:	3708      	adds	r7, #8
   9ef04:	46bd      	mov	sp, r7
   9ef06:	bd80      	pop	{r7, pc}
   9ef08:	0009eddd 	.word	0x0009eddd

0009ef0c <CL_DisinfAlarmActon>:

Cl_ReturnCodeType  CL_DisinfAlarmActon(Cl_NewAlarmIdType cl_disinfalarmid)
{
   9ef0c:	b580      	push	{r7, lr}
   9ef0e:	b086      	sub	sp, #24
   9ef10:	af00      	add	r7, sp, #0
   9ef12:	4603      	mov	r3, r0
   9ef14:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9ef16:	2300      	movs	r3, #0
   9ef18:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9ef1a:	f107 0308 	add.w	r3, r7, #8
   9ef1e:	2100      	movs	r1, #0
   9ef20:	460a      	mov	r2, r1
   9ef22:	801a      	strh	r2, [r3, #0]
   9ef24:	460a      	mov	r2, r1
   9ef26:	709a      	strb	r2, [r3, #2]
   9ef28:	2300      	movs	r3, #0
   9ef2a:	613b      	str	r3, [r7, #16]
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ef2c:	2359      	movs	r3, #89	; 0x59
   9ef2e:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9ef30:	2300      	movs	r3, #0
   9ef32:	73bb      	strb	r3, [r7, #14]
		float temp;
		//Cl_Uint16Type var=0
							
		switch(cl_disinfalarmid)
   9ef34:	79fb      	ldrb	r3, [r7, #7]
   9ef36:	3b03      	subs	r3, #3
   9ef38:	2b28      	cmp	r3, #40	; 0x28
   9ef3a:	f200 80d5 	bhi.w	9f0e8 <CL_DisinfAlarmActon+0x1dc>
   9ef3e:	a201      	add	r2, pc, #4	; (adr r2, 9ef44 <CL_DisinfAlarmActon+0x38>)
   9ef40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ef44:	0009f049 	.word	0x0009f049
   9ef48:	0009f05d 	.word	0x0009f05d
   9ef4c:	0009f0e9 	.word	0x0009f0e9
   9ef50:	0009f0e9 	.word	0x0009f0e9
   9ef54:	0009f0e9 	.word	0x0009f0e9
   9ef58:	0009f0d5 	.word	0x0009f0d5
   9ef5c:	0009f0e9 	.word	0x0009f0e9
   9ef60:	0009f0e9 	.word	0x0009f0e9
   9ef64:	0009f0e9 	.word	0x0009f0e9
   9ef68:	0009f0e9 	.word	0x0009f0e9
   9ef6c:	0009f0e9 	.word	0x0009f0e9
   9ef70:	0009f0e9 	.word	0x0009f0e9
   9ef74:	0009f0e9 	.word	0x0009f0e9
   9ef78:	0009f0e9 	.word	0x0009f0e9
   9ef7c:	0009f0e9 	.word	0x0009f0e9
   9ef80:	0009f0e9 	.word	0x0009f0e9
   9ef84:	0009f071 	.word	0x0009f071
   9ef88:	0009f085 	.word	0x0009f085
   9ef8c:	0009f099 	.word	0x0009f099
   9ef90:	0009f099 	.word	0x0009f099
   9ef94:	0009f0ad 	.word	0x0009f0ad
   9ef98:	0009f0ad 	.word	0x0009f0ad
   9ef9c:	0009f0e9 	.word	0x0009f0e9
   9efa0:	0009f0e9 	.word	0x0009f0e9
   9efa4:	0009f0e9 	.word	0x0009f0e9
   9efa8:	0009f0e9 	.word	0x0009f0e9
   9efac:	0009f0ad 	.word	0x0009f0ad
   9efb0:	0009f0e9 	.word	0x0009f0e9
   9efb4:	0009f0e9 	.word	0x0009f0e9
   9efb8:	0009f0e9 	.word	0x0009f0e9
   9efbc:	0009f0e9 	.word	0x0009f0e9
   9efc0:	0009f0e9 	.word	0x0009f0e9
   9efc4:	0009f0e9 	.word	0x0009f0e9
   9efc8:	0009f0e9 	.word	0x0009f0e9
   9efcc:	0009f0e9 	.word	0x0009f0e9
   9efd0:	0009f0e9 	.word	0x0009f0e9
   9efd4:	0009f0c1 	.word	0x0009f0c1
   9efd8:	0009f0c1 	.word	0x0009f0c1
   9efdc:	0009efe9 	.word	0x0009efe9
   9efe0:	0009f0e9 	.word	0x0009f0e9
   9efe4:	0009f035 	.word	0x0009f035
		{
			case ACID_IN_OPEN:
			if ((cl_disinfstate == CL_DISINF_STATE_INTER))
   9efe8:	4b4f      	ldr	r3, [pc, #316]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9efea:	781b      	ldrb	r3, [r3, #0]
   9efec:	2b10      	cmp	r3, #16
   9efee:	d10b      	bne.n	9f008 <CL_DisinfAlarmActon+0xfc>
			{
				sv_cntrl_setredalarm();
   9eff0:	4b4e      	ldr	r3, [pc, #312]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9eff2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9eff4:	4b4e      	ldr	r3, [pc, #312]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9eff6:	4798      	blx	r3
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
   9eff8:	4b4b      	ldr	r3, [pc, #300]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9effa:	781b      	ldrb	r3, [r3, #0]
   9effc:	2b10      	cmp	r3, #16
   9effe:	d175      	bne.n	9f0ec <CL_DisinfAlarmActon+0x1e0>
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
   9f000:	4b49      	ldr	r3, [pc, #292]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f002:	2210      	movs	r2, #16
   9f004:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9f006:	e071      	b.n	9f0ec <CL_DisinfAlarmActon+0x1e0>
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
				}
			}
			else if ((cl_disinfstate == CL_DISINF_STATE_INTER_1))
   9f008:	4b47      	ldr	r3, [pc, #284]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f00a:	781b      	ldrb	r3, [r3, #0]
   9f00c:	2b11      	cmp	r3, #17
   9f00e:	d107      	bne.n	9f020 <CL_DisinfAlarmActon+0x114>
			{
				sv_cntrl_setredalarm();
   9f010:	4b46      	ldr	r3, [pc, #280]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9f012:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f014:	4b46      	ldr	r3, [pc, #280]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f016:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9f018:	4b43      	ldr	r3, [pc, #268]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f01a:	2211      	movs	r2, #17
   9f01c:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9f01e:	e065      	b.n	9f0ec <CL_DisinfAlarmActon+0x1e0>
				sv_cntrl_buzzer();
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
			}
			else
			{
				sv_cntrl_setredalarm();
   9f020:	4b42      	ldr	r3, [pc, #264]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9f022:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f024:	4b42      	ldr	r3, [pc, #264]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f026:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f028:	4b42      	ldr	r3, [pc, #264]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f02a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f02c:	4b3e      	ldr	r3, [pc, #248]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f02e:	220c      	movs	r2, #12
   9f030:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9f032:	e05b      	b.n	9f0ec <CL_DisinfAlarmActon+0x1e0>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setredalarm();
   9f034:	4b3d      	ldr	r3, [pc, #244]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9f036:	4798      	blx	r3
			sv_cntrl_buzzer();
   9f038:	4b3d      	ldr	r3, [pc, #244]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f03a:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9f03c:	4b3d      	ldr	r3, [pc, #244]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f03e:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f040:	4b39      	ldr	r3, [pc, #228]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f042:	220c      	movs	r2, #12
   9f044:	701a      	strb	r2, [r3, #0]
			break;
   9f046:	e052      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9f048:	4b38      	ldr	r3, [pc, #224]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9f04a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f04c:	4b38      	ldr	r3, [pc, #224]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f04e:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f050:	4b38      	ldr	r3, [pc, #224]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f052:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f054:	4b34      	ldr	r3, [pc, #208]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f056:	220c      	movs	r2, #12
   9f058:	701a      	strb	r2, [r3, #0]
			break;
   9f05a:	e048      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9f05c:	4b33      	ldr	r3, [pc, #204]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9f05e:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f060:	4b33      	ldr	r3, [pc, #204]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f062:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f064:	4b33      	ldr	r3, [pc, #204]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f066:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f068:	4b2f      	ldr	r3, [pc, #188]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f06a:	220c      	movs	r2, #12
   9f06c:	701a      	strb	r2, [r3, #0]
			break;
   9f06e:	e03e      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   9f070:	4b31      	ldr	r3, [pc, #196]	; (9f138 <CL_DisinfAlarmActon+0x22c>)
   9f072:	4798      	blx	r3
					sv_cntrl_buzzer();
   9f074:	4b2e      	ldr	r3, [pc, #184]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f076:	4798      	blx	r3
					Cl_Disinf_StopDisinf();
   9f078:	4b2e      	ldr	r3, [pc, #184]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f07a:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f07c:	4b2a      	ldr	r3, [pc, #168]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f07e:	220c      	movs	r2, #12
   9f080:	701a      	strb	r2, [r3, #0]
			break;
   9f082:	e034      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9f084:	4b2c      	ldr	r3, [pc, #176]	; (9f138 <CL_DisinfAlarmActon+0x22c>)
   9f086:	4798      	blx	r3
			sv_cntrl_buzzer();
   9f088:	4b29      	ldr	r3, [pc, #164]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f08a:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9f08c:	4b29      	ldr	r3, [pc, #164]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f08e:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f090:	4b25      	ldr	r3, [pc, #148]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f092:	220c      	movs	r2, #12
   9f094:	701a      	strb	r2, [r3, #0]
			break;
   9f096:	e02a      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9f098:	4b27      	ldr	r3, [pc, #156]	; (9f138 <CL_DisinfAlarmActon+0x22c>)
   9f09a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f09c:	4b24      	ldr	r3, [pc, #144]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f09e:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f0a0:	4b24      	ldr	r3, [pc, #144]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f0a2:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f0a4:	4b20      	ldr	r3, [pc, #128]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f0a6:	220c      	movs	r2, #12
   9f0a8:	701a      	strb	r2, [r3, #0]
			break;
   9f0aa:	e020      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			case	POWER_FAILURE:            // manav02 added
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   9f0ac:	4b1f      	ldr	r3, [pc, #124]	; (9f12c <CL_DisinfAlarmActon+0x220>)
   9f0ae:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f0b0:	4b1f      	ldr	r3, [pc, #124]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f0b2:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f0b4:	4b1f      	ldr	r3, [pc, #124]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f0b6:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f0b8:	4b1b      	ldr	r3, [pc, #108]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f0ba:	220c      	movs	r2, #12
   9f0bc:	701a      	strb	r2, [r3, #0]
			break;
   9f0be:	e016      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9f0c0:	4b1d      	ldr	r3, [pc, #116]	; (9f138 <CL_DisinfAlarmActon+0x22c>)
   9f0c2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f0c4:	4b1a      	ldr	r3, [pc, #104]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f0c6:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f0c8:	4b1a      	ldr	r3, [pc, #104]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f0ca:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f0cc:	4b16      	ldr	r3, [pc, #88]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f0ce:	220c      	movs	r2, #12
   9f0d0:	701a      	strb	r2, [r3, #0]
			break;
   9f0d2:	e00c      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9f0d4:	4b18      	ldr	r3, [pc, #96]	; (9f138 <CL_DisinfAlarmActon+0x22c>)
   9f0d6:	4798      	blx	r3
				sv_cntrl_buzzer();
   9f0d8:	4b15      	ldr	r3, [pc, #84]	; (9f130 <CL_DisinfAlarmActon+0x224>)
   9f0da:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9f0dc:	4b15      	ldr	r3, [pc, #84]	; (9f134 <CL_DisinfAlarmActon+0x228>)
   9f0de:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9f0e0:	4b11      	ldr	r3, [pc, #68]	; (9f128 <CL_DisinfAlarmActon+0x21c>)
   9f0e2:	220c      	movs	r2, #12
   9f0e4:	701a      	strb	r2, [r3, #0]
			break;
   9f0e6:	e002      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
			
			default:
			break;
   9f0e8:	bf00      	nop
   9f0ea:	e000      	b.n	9f0ee <CL_DisinfAlarmActon+0x1e2>
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9f0ec:	bf00      	nop
			
			default:
			break;

		}
		 if(cl_disinfalarmid != _NO_ALARM)
   9f0ee:	79fb      	ldrb	r3, [r7, #7]
   9f0f0:	2b00      	cmp	r3, #0
   9f0f2:	d013      	beq.n	9f11c <CL_DisinfAlarmActon+0x210>
		 {
 
				  data[0] = (Cl_Uint8Type)cl_disinfalarmid;
   9f0f4:	79fb      	ldrb	r3, [r7, #7]
   9f0f6:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9f0f8:	2301      	movs	r3, #1
   9f0fa:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9f0fc:	2302      	movs	r3, #2
   9f0fe:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   9f100:	2307      	movs	r3, #7
   9f102:	73fb      	strb	r3, [r7, #15]
			 			
			Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,3);
   9f104:	f107 0108 	add.w	r1, r7, #8
   9f108:	7bfb      	ldrb	r3, [r7, #15]
   9f10a:	2203      	movs	r2, #3
   9f10c:	4618      	mov	r0, r3
   9f10e:	4b0b      	ldr	r3, [pc, #44]	; (9f13c <CL_DisinfAlarmActon+0x230>)
   9f110:	4798      	blx	r3
   9f112:	4603      	mov	r3, r0
   9f114:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   9f116:	200a      	movs	r0, #10
   9f118:	4b09      	ldr	r3, [pc, #36]	; (9f140 <CL_DisinfAlarmActon+0x234>)
   9f11a:	4798      	blx	r3
		 }
	return CL_OK;		
   9f11c:	2300      	movs	r3, #0
}
   9f11e:	4618      	mov	r0, r3
   9f120:	3718      	adds	r7, #24
   9f122:	46bd      	mov	sp, r7
   9f124:	bd80      	pop	{r7, pc}
   9f126:	bf00      	nop
   9f128:	20071adf 	.word	0x20071adf
   9f12c:	0009b02d 	.word	0x0009b02d
   9f130:	0009b069 	.word	0x0009b069
   9f134:	0009ebe5 	.word	0x0009ebe5
   9f138:	0009b041 	.word	0x0009b041
   9f13c:	0009cbd5 	.word	0x0009cbd5
   9f140:	00093ea9 	.word	0x00093ea9

0009f144 <Cl_disinf_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_disinf_ResetAlertsforReassertion(void )
{
   9f144:	b580      	push	{r7, lr}
   9f146:	b082      	sub	sp, #8
   9f148:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9f14a:	2300      	movs	r3, #0
   9f14c:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f14e:	2359      	movs	r3, #89	; 0x59
   9f150:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_ACIDIN].IsRaised = false;
   9f152:	4b2d      	ldr	r3, [pc, #180]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f154:	2200      	movs	r2, #0
   9f156:	70da      	strb	r2, [r3, #3]
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BICARBIN].IsRaised = false;
   9f158:	4b2b      	ldr	r3, [pc, #172]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f15a:	2200      	movs	r2, #0
   9f15c:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   9f15e:	2029      	movs	r0, #41	; 0x29
   9f160:	4b2a      	ldr	r3, [pc, #168]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f162:	4798      	blx	r3
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   9f164:	202b      	movs	r0, #43	; 0x2b
   9f166:	4b29      	ldr	r3, [pc, #164]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f168:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9f16a:	4b27      	ldr	r3, [pc, #156]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f16c:	2200      	movs	r2, #0
   9f16e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9f172:	2008      	movs	r0, #8
   9f174:	4b25      	ldr	r3, [pc, #148]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f176:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9f178:	4b23      	ldr	r3, [pc, #140]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f17a:	2200      	movs	r2, #0
   9f17c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9f180:	4b21      	ldr	r3, [pc, #132]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f182:	2200      	movs	r2, #0
   9f184:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9f188:	2015      	movs	r0, #21
   9f18a:	4b20      	ldr	r3, [pc, #128]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f18c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9f18e:	2016      	movs	r0, #22
   9f190:	4b1e      	ldr	r3, [pc, #120]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f192:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9f194:	4b1c      	ldr	r3, [pc, #112]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f196:	2200      	movs	r2, #0
   9f198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9f19c:	4b1a      	ldr	r3, [pc, #104]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f19e:	2200      	movs	r2, #0
   9f1a0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9f1a4:	2017      	movs	r0, #23
   9f1a6:	4b19      	ldr	r3, [pc, #100]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1a8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9f1aa:	2018      	movs	r0, #24
   9f1ac:	4b17      	ldr	r3, [pc, #92]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1ae:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9f1b0:	4b15      	ldr	r3, [pc, #84]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f1b2:	2200      	movs	r2, #0
   9f1b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9f1b8:	4b13      	ldr	r3, [pc, #76]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f1ba:	2200      	movs	r2, #0
   9f1bc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9f1c0:	2028      	movs	r0, #40	; 0x28
   9f1c2:	4b12      	ldr	r3, [pc, #72]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1c4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9f1c6:	2027      	movs	r0, #39	; 0x27
   9f1c8:	4b10      	ldr	r3, [pc, #64]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1ca:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9f1cc:	4b0e      	ldr	r3, [pc, #56]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f1ce:	2200      	movs	r2, #0
   9f1d0:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9f1d2:	2011      	movs	r0, #17
   9f1d4:	4b0d      	ldr	r3, [pc, #52]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1d6:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9f1d8:	4b0b      	ldr	r3, [pc, #44]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f1da:	2200      	movs	r2, #0
   9f1dc:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9f1de:	2003      	movs	r0, #3
   9f1e0:	4b0a      	ldr	r3, [pc, #40]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1e2:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9f1e4:	2005      	movs	r0, #5
   9f1e6:	4b09      	ldr	r3, [pc, #36]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1e8:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9f1ea:	4b07      	ldr	r3, [pc, #28]	; (9f208 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9f1ec:	2200      	movs	r2, #0
   9f1ee:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9f1f0:	2004      	movs	r0, #4
   9f1f2:	4b06      	ldr	r3, [pc, #24]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1f4:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9f1f6:	2006      	movs	r0, #6
   9f1f8:	4b04      	ldr	r3, [pc, #16]	; (9f20c <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9f1fa:	4798      	blx	r3
	
	
	return (Cl_disinfretcode);
   9f1fc:	79fb      	ldrb	r3, [r7, #7]
}
   9f1fe:	4618      	mov	r0, r3
   9f200:	3708      	adds	r7, #8
   9f202:	46bd      	mov	sp, r7
   9f204:	bd80      	pop	{r7, pc}
   9f206:	bf00      	nop
   9f208:	20070b10 	.word	0x20070b10
   9f20c:	00082ad9 	.word	0x00082ad9

0009f210 <Cl_Disinf_SendDisinfStateData>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_SendDisinfStateData(void)
{
   9f210:	b5f0      	push	{r4, r5, r6, r7, lr}
   9f212:	b08b      	sub	sp, #44	; 0x2c
   9f214:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9f216:	2300      	movs	r3, #0
   9f218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cl_DlsInfDatatype data;
	Cl_Uint8Type count=0;
   9f21c:	2300      	movs	r3, #0
   9f21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp,temp1 ,temp2;
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9f222:	463b      	mov	r3, r7
   9f224:	2200      	movs	r2, #0
   9f226:	601a      	str	r2, [r3, #0]
   9f228:	605a      	str	r2, [r3, #4]
   9f22a:	609a      	str	r2, [r3, #8]
	static Cl_Uint32Type timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9f22c:	4b70      	ldr	r3, [pc, #448]	; (9f3f0 <Cl_Disinf_SendDisinfStateData+0x1e0>)
   9f22e:	681b      	ldr	r3, [r3, #0]
   9f230:	3301      	adds	r3, #1
   9f232:	4a6f      	ldr	r2, [pc, #444]	; (9f3f0 <Cl_Disinf_SendDisinfStateData+0x1e0>)
   9f234:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9f236:	4b6e      	ldr	r3, [pc, #440]	; (9f3f0 <Cl_Disinf_SendDisinfStateData+0x1e0>)
   9f238:	681b      	ldr	r3, [r3, #0]
   9f23a:	2b04      	cmp	r3, #4
   9f23c:	f240 81b8 	bls.w	9f5b0 <Cl_Disinf_SendDisinfStateData+0x3a0>
	{
		return;
	}
	else
	{
		timecount = 0;
   9f240:	4b6b      	ldr	r3, [pc, #428]	; (9f3f0 <Cl_Disinf_SendDisinfStateData+0x1e0>)
   9f242:	2200      	movs	r2, #0
   9f244:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   9f246:	230b      	movs	r3, #11
   9f248:	703b      	strb	r3, [r7, #0]
	count++;
   9f24a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f24e:	3301      	adds	r3, #1
   9f250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9f254:	f107 030e 	add.w	r3, r7, #14
   9f258:	4619      	mov	r1, r3
   9f25a:	2014      	movs	r0, #20
   9f25c:	4b65      	ldr	r3, [pc, #404]	; (9f3f4 <Cl_Disinf_SendDisinfStateData+0x1e4>)
   9f25e:	4798      	blx	r3
	
	{
		
		float ftemp,temp1;
		data.word = 0;
   9f260:	2300      	movs	r3, #0
   9f262:	613b      	str	r3, [r7, #16]
// 			temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
// //			temp1 = temp1 - 3.1 + 1.4;										// sensor offset
// //			temp1 = temp1 - 3.1 -2 ;										// sensor offset
// //			avgtmp3 =(avgtmp3*5 + temp1)/6;
// 			avgtmp3 = (res_temp_value- 0.4)/10;
			temp1 = (float)temp/100;
   9f264:	89fa      	ldrh	r2, [r7, #14]
   9f266:	4b64      	ldr	r3, [pc, #400]	; (9f3f8 <Cl_Disinf_SendDisinfStateData+0x1e8>)
   9f268:	4610      	mov	r0, r2
   9f26a:	4798      	blx	r3
   9f26c:	4602      	mov	r2, r0
   9f26e:	4b63      	ldr	r3, [pc, #396]	; (9f3fc <Cl_Disinf_SendDisinfStateData+0x1ec>)
   9f270:	4963      	ldr	r1, [pc, #396]	; (9f400 <Cl_Disinf_SendDisinfStateData+0x1f0>)
   9f272:	4610      	mov	r0, r2
   9f274:	4798      	blx	r3
   9f276:	4603      	mov	r3, r0
   9f278:	623b      	str	r3, [r7, #32]
			avgtmp3 = temp1;
   9f27a:	4a62      	ldr	r2, [pc, #392]	; (9f404 <Cl_Disinf_SendDisinfStateData+0x1f4>)
   9f27c:	6a3b      	ldr	r3, [r7, #32]
   9f27e:	6013      	str	r3, [r2, #0]
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9f280:	f107 030e 	add.w	r3, r7, #14
   9f284:	4619      	mov	r1, r3
   9f286:	2007      	movs	r0, #7
   9f288:	4b5a      	ldr	r3, [pc, #360]	; (9f3f4 <Cl_Disinf_SendDisinfStateData+0x1e4>)
   9f28a:	4798      	blx	r3
	{
		
		float cond_comp=0;
   9f28c:	f04f 0300 	mov.w	r3, #0
   9f290:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   9f292:	f04f 0300 	mov.w	r3, #0
   9f296:	61bb      	str	r3, [r7, #24]
		temp2 = temp * 0.8036;
   9f298:	89fb      	ldrh	r3, [r7, #14]
   9f29a:	461a      	mov	r2, r3
   9f29c:	4b5a      	ldr	r3, [pc, #360]	; (9f408 <Cl_Disinf_SendDisinfStateData+0x1f8>)
   9f29e:	4610      	mov	r0, r2
   9f2a0:	4798      	blx	r3
   9f2a2:	4c5a      	ldr	r4, [pc, #360]	; (9f40c <Cl_Disinf_SendDisinfStateData+0x1fc>)
   9f2a4:	a34e      	add	r3, pc, #312	; (adr r3, 9f3e0 <Cl_Disinf_SendDisinfStateData+0x1d0>)
   9f2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   9f2aa:	47a0      	blx	r4
   9f2ac:	4603      	mov	r3, r0
   9f2ae:	460c      	mov	r4, r1
   9f2b0:	4619      	mov	r1, r3
   9f2b2:	4622      	mov	r2, r4
   9f2b4:	4b56      	ldr	r3, [pc, #344]	; (9f410 <Cl_Disinf_SendDisinfStateData+0x200>)
   9f2b6:	4608      	mov	r0, r1
   9f2b8:	4611      	mov	r1, r2
   9f2ba:	4798      	blx	r3
   9f2bc:	4603      	mov	r3, r0
   9f2be:	61bb      	str	r3, [r7, #24]
		if (temp2 > 600)
   9f2c0:	4b54      	ldr	r3, [pc, #336]	; (9f414 <Cl_Disinf_SendDisinfStateData+0x204>)
   9f2c2:	4955      	ldr	r1, [pc, #340]	; (9f418 <Cl_Disinf_SendDisinfStateData+0x208>)
   9f2c4:	69b8      	ldr	r0, [r7, #24]
   9f2c6:	4798      	blx	r3
   9f2c8:	4603      	mov	r3, r0
   9f2ca:	2b00      	cmp	r3, #0
   9f2cc:	f000 80c4 	beq.w	9f458 <Cl_Disinf_SendDisinfStateData+0x248>
					{
			calibration_cond(temp2);
   9f2d0:	69b8      	ldr	r0, [r7, #24]
   9f2d2:	4b52      	ldr	r3, [pc, #328]	; (9f41c <Cl_Disinf_SendDisinfStateData+0x20c>)
   9f2d4:	4798      	blx	r3
			cond =(cond*5 + cond_final_cs3)/6;
   9f2d6:	4b52      	ldr	r3, [pc, #328]	; (9f420 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f2d8:	681a      	ldr	r2, [r3, #0]
   9f2da:	4b52      	ldr	r3, [pc, #328]	; (9f424 <Cl_Disinf_SendDisinfStateData+0x214>)
   9f2dc:	4952      	ldr	r1, [pc, #328]	; (9f428 <Cl_Disinf_SendDisinfStateData+0x218>)
   9f2de:	4610      	mov	r0, r2
   9f2e0:	4798      	blx	r3
   9f2e2:	4603      	mov	r3, r0
   9f2e4:	4618      	mov	r0, r3
   9f2e6:	4b51      	ldr	r3, [pc, #324]	; (9f42c <Cl_Disinf_SendDisinfStateData+0x21c>)
   9f2e8:	681a      	ldr	r2, [r3, #0]
   9f2ea:	4b51      	ldr	r3, [pc, #324]	; (9f430 <Cl_Disinf_SendDisinfStateData+0x220>)
   9f2ec:	4611      	mov	r1, r2
   9f2ee:	4798      	blx	r3
   9f2f0:	4603      	mov	r3, r0
   9f2f2:	461a      	mov	r2, r3
   9f2f4:	4b41      	ldr	r3, [pc, #260]	; (9f3fc <Cl_Disinf_SendDisinfStateData+0x1ec>)
   9f2f6:	494f      	ldr	r1, [pc, #316]	; (9f434 <Cl_Disinf_SendDisinfStateData+0x224>)
   9f2f8:	4610      	mov	r0, r2
   9f2fa:	4798      	blx	r3
   9f2fc:	4603      	mov	r3, r0
   9f2fe:	461a      	mov	r2, r3
   9f300:	4b47      	ldr	r3, [pc, #284]	; (9f420 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f302:	601a      	str	r2, [r3, #0]
			cond_comp= cond/(1+(avgtmp3-25.0)*0.020);
   9f304:	4b46      	ldr	r3, [pc, #280]	; (9f420 <Cl_Disinf_SendDisinfStateData+0x210>)
   9f306:	681a      	ldr	r2, [r3, #0]
   9f308:	4b4b      	ldr	r3, [pc, #300]	; (9f438 <Cl_Disinf_SendDisinfStateData+0x228>)
   9f30a:	4610      	mov	r0, r2
   9f30c:	4798      	blx	r3
   9f30e:	4605      	mov	r5, r0
   9f310:	460e      	mov	r6, r1
   9f312:	4b3c      	ldr	r3, [pc, #240]	; (9f404 <Cl_Disinf_SendDisinfStateData+0x1f4>)
   9f314:	681a      	ldr	r2, [r3, #0]
   9f316:	4b48      	ldr	r3, [pc, #288]	; (9f438 <Cl_Disinf_SendDisinfStateData+0x228>)
   9f318:	4610      	mov	r0, r2
   9f31a:	4798      	blx	r3
   9f31c:	4c47      	ldr	r4, [pc, #284]	; (9f43c <Cl_Disinf_SendDisinfStateData+0x22c>)
   9f31e:	f04f 0200 	mov.w	r2, #0
   9f322:	4b47      	ldr	r3, [pc, #284]	; (9f440 <Cl_Disinf_SendDisinfStateData+0x230>)
   9f324:	47a0      	blx	r4
   9f326:	4603      	mov	r3, r0
   9f328:	460c      	mov	r4, r1
   9f32a:	4618      	mov	r0, r3
   9f32c:	4621      	mov	r1, r4
   9f32e:	4c37      	ldr	r4, [pc, #220]	; (9f40c <Cl_Disinf_SendDisinfStateData+0x1fc>)
   9f330:	a32d      	add	r3, pc, #180	; (adr r3, 9f3e8 <Cl_Disinf_SendDisinfStateData+0x1d8>)
   9f332:	e9d3 2300 	ldrd	r2, r3, [r3]
   9f336:	47a0      	blx	r4
   9f338:	4603      	mov	r3, r0
   9f33a:	460c      	mov	r4, r1
   9f33c:	4618      	mov	r0, r3
   9f33e:	4621      	mov	r1, r4
   9f340:	4c40      	ldr	r4, [pc, #256]	; (9f444 <Cl_Disinf_SendDisinfStateData+0x234>)
   9f342:	f04f 0200 	mov.w	r2, #0
   9f346:	4b40      	ldr	r3, [pc, #256]	; (9f448 <Cl_Disinf_SendDisinfStateData+0x238>)
   9f348:	47a0      	blx	r4
   9f34a:	4603      	mov	r3, r0
   9f34c:	460c      	mov	r4, r1
   9f34e:	461a      	mov	r2, r3
   9f350:	4623      	mov	r3, r4
   9f352:	4c3e      	ldr	r4, [pc, #248]	; (9f44c <Cl_Disinf_SendDisinfStateData+0x23c>)
   9f354:	4628      	mov	r0, r5
   9f356:	4631      	mov	r1, r6
   9f358:	47a0      	blx	r4
   9f35a:	4603      	mov	r3, r0
   9f35c:	460c      	mov	r4, r1
   9f35e:	4619      	mov	r1, r3
   9f360:	4622      	mov	r2, r4
   9f362:	4b2b      	ldr	r3, [pc, #172]	; (9f410 <Cl_Disinf_SendDisinfStateData+0x200>)
   9f364:	4608      	mov	r0, r1
   9f366:	4611      	mov	r1, r2
   9f368:	4798      	blx	r3
   9f36a:	4603      	mov	r3, r0
   9f36c:	61fb      	str	r3, [r7, #28]
			data.Twobyte = (cond_comp/10);
   9f36e:	4b23      	ldr	r3, [pc, #140]	; (9f3fc <Cl_Disinf_SendDisinfStateData+0x1ec>)
   9f370:	4937      	ldr	r1, [pc, #220]	; (9f450 <Cl_Disinf_SendDisinfStateData+0x240>)
   9f372:	69f8      	ldr	r0, [r7, #28]
   9f374:	4798      	blx	r3
   9f376:	4603      	mov	r3, r0
   9f378:	461a      	mov	r2, r3
   9f37a:	4b36      	ldr	r3, [pc, #216]	; (9f454 <Cl_Disinf_SendDisinfStateData+0x244>)
   9f37c:	4610      	mov	r0, r2
   9f37e:	4798      	blx	r3
   9f380:	4603      	mov	r3, r0
   9f382:	b29b      	uxth	r3, r3
   9f384:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9f386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f38a:	1c5a      	adds	r2, r3, #1
   9f38c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f390:	7c3a      	ldrb	r2, [r7, #16]
   9f392:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f396:	440b      	add	r3, r1
   9f398:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9f39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f3a0:	1c5a      	adds	r2, r3, #1
   9f3a2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f3a6:	7c7a      	ldrb	r2, [r7, #17]
   9f3a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f3ac:	440b      	add	r3, r1
   9f3ae:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9f3b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f3b6:	1c5a      	adds	r2, r3, #1
   9f3b8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f3bc:	7cba      	ldrb	r2, [r7, #18]
   9f3be:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f3c2:	440b      	add	r3, r1
   9f3c4:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9f3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f3cc:	1c5a      	adds	r2, r3, #1
   9f3ce:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f3d2:	7cfa      	ldrb	r2, [r7, #19]
   9f3d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f3d8:	440b      	add	r3, r1
   9f3da:	f803 2c28 	strb.w	r2, [r3, #-40]
   9f3de:	e069      	b.n	9f4b4 <Cl_Disinf_SendDisinfStateData+0x2a4>
   9f3e0:	58e21965 	.word	0x58e21965
   9f3e4:	3fe9b717 	.word	0x3fe9b717
   9f3e8:	47ae147b 	.word	0x47ae147b
   9f3ec:	3f947ae1 	.word	0x3f947ae1
   9f3f0:	20071b14 	.word	0x20071b14
   9f3f4:	0008fa01 	.word	0x0008fa01
   9f3f8:	000a7ef9 	.word	0x000a7ef9
   9f3fc:	000a8111 	.word	0x000a8111
   9f400:	42c80000 	.word	0x42c80000
   9f404:	20071b18 	.word	0x20071b18
   9f408:	000a765d 	.word	0x000a765d
   9f40c:	000a7729 	.word	0x000a7729
   9f410:	000a7ced 	.word	0x000a7ced
   9f414:	000a8321 	.word	0x000a8321
   9f418:	44160000 	.word	0x44160000
   9f41c:	000841b1 	.word	0x000841b1
   9f420:	20071b1c 	.word	0x20071b1c
   9f424:	000a7fa9 	.word	0x000a7fa9
   9f428:	40a00000 	.word	0x40a00000
   9f42c:	20071744 	.word	0x20071744
   9f430:	000a7d99 	.word	0x000a7d99
   9f434:	40c00000 	.word	0x40c00000
   9f438:	000a7681 	.word	0x000a7681
   9f43c:	000a73c1 	.word	0x000a73c1
   9f440:	40390000 	.word	0x40390000
   9f444:	000a73c5 	.word	0x000a73c5
   9f448:	3ff00000 	.word	0x3ff00000
   9f44c:	000a797d 	.word	0x000a797d
   9f450:	41200000 	.word	0x41200000
   9f454:	000a8381 	.word	0x000a8381
					}
		else
					{
			data.Twobyte = 0;
   9f458:	2300      	movs	r3, #0
   9f45a:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9f45c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f460:	1c5a      	adds	r2, r3, #1
   9f462:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f466:	7c3a      	ldrb	r2, [r7, #16]
   9f468:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f46c:	440b      	add	r3, r1
   9f46e:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9f472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f476:	1c5a      	adds	r2, r3, #1
   9f478:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f47c:	7c7a      	ldrb	r2, [r7, #17]
   9f47e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f482:	440b      	add	r3, r1
   9f484:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9f488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f48c:	1c5a      	adds	r2, r3, #1
   9f48e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f492:	7cba      	ldrb	r2, [r7, #18]
   9f494:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f498:	440b      	add	r3, r1
   9f49a:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9f49e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f4a2:	1c5a      	adds	r2, r3, #1
   9f4a4:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f4a8:	7cfa      	ldrb	r2, [r7, #19]
   9f4aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f4ae:	440b      	add	r3, r1
   9f4b0:	f803 2c28 	strb.w	r2, [r3, #-40]
						}
						
		
					}
					{
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   9f4b4:	4b41      	ldr	r3, [pc, #260]	; (9f5bc <Cl_Disinf_SendDisinfStateData+0x3ac>)
   9f4b6:	681a      	ldr	r2, [r3, #0]
   9f4b8:	4b41      	ldr	r3, [pc, #260]	; (9f5c0 <Cl_Disinf_SendDisinfStateData+0x3b0>)
   9f4ba:	4942      	ldr	r1, [pc, #264]	; (9f5c4 <Cl_Disinf_SendDisinfStateData+0x3b4>)
   9f4bc:	4610      	mov	r0, r2
   9f4be:	4798      	blx	r3
   9f4c0:	4603      	mov	r3, r0
   9f4c2:	461a      	mov	r2, r3
   9f4c4:	4b40      	ldr	r3, [pc, #256]	; (9f5c8 <Cl_Disinf_SendDisinfStateData+0x3b8>)
   9f4c6:	4610      	mov	r0, r2
   9f4c8:	4798      	blx	r3
   9f4ca:	4603      	mov	r3, r0
   9f4cc:	b29b      	uxth	r3, r3
   9f4ce:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9f4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f4d4:	1c5a      	adds	r2, r3, #1
   9f4d6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f4da:	7c3a      	ldrb	r2, [r7, #16]
   9f4dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f4e0:	440b      	add	r3, r1
   9f4e2:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9f4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f4ea:	1c5a      	adds	r2, r3, #1
   9f4ec:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f4f0:	7c7a      	ldrb	r2, [r7, #17]
   9f4f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f4f6:	440b      	add	r3, r1
   9f4f8:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9f4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f500:	1c5a      	adds	r2, r3, #1
   9f502:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f506:	7cba      	ldrb	r2, [r7, #18]
   9f508:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f50c:	440b      	add	r3, r1
   9f50e:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9f512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f516:	1c5a      	adds	r2, r3, #1
   9f518:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f51c:	7cfa      	ldrb	r2, [r7, #19]
   9f51e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f522:	440b      	add	r3, r1
   9f524:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	// manav02 added
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2);
   9f528:	f107 030c 	add.w	r3, r7, #12
   9f52c:	4619      	mov	r1, r3
   9f52e:	2013      	movs	r0, #19
   9f530:	4b26      	ldr	r3, [pc, #152]	; (9f5cc <Cl_Disinf_SendDisinfStateData+0x3bc>)
   9f532:	4798      	blx	r3
	{
		
		data.Twobyte = (uint16_t)temp2/10 ;
   9f534:	89bb      	ldrh	r3, [r7, #12]
   9f536:	4a26      	ldr	r2, [pc, #152]	; (9f5d0 <Cl_Disinf_SendDisinfStateData+0x3c0>)
   9f538:	fba2 2303 	umull	r2, r3, r2, r3
   9f53c:	08db      	lsrs	r3, r3, #3
   9f53e:	b29b      	uxth	r3, r3
   9f540:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9f542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f546:	1c5a      	adds	r2, r3, #1
   9f548:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f54c:	7c3a      	ldrb	r2, [r7, #16]
   9f54e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f552:	440b      	add	r3, r1
   9f554:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9f558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f55c:	1c5a      	adds	r2, r3, #1
   9f55e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f562:	7c7a      	ldrb	r2, [r7, #17]
   9f564:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f568:	440b      	add	r3, r1
   9f56a:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9f56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f572:	1c5a      	adds	r2, r3, #1
   9f574:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f578:	7cba      	ldrb	r2, [r7, #18]
   9f57a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f57e:	440b      	add	r3, r1
   9f580:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9f584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9f588:	1c5a      	adds	r2, r3, #1
   9f58a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9f58e:	7cfa      	ldrb	r2, [r7, #19]
   9f590:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9f594:	440b      	add	r3, r1
   9f596:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   9f59a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   9f59e:	463b      	mov	r3, r7
   9f5a0:	4619      	mov	r1, r3
   9f5a2:	202a      	movs	r0, #42	; 0x2a
   9f5a4:	4b0b      	ldr	r3, [pc, #44]	; (9f5d4 <Cl_Disinf_SendDisinfStateData+0x3c4>)
   9f5a6:	4798      	blx	r3
   9f5a8:	4603      	mov	r3, r0
   9f5aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9f5ae:	e000      	b.n	9f5b2 <Cl_Disinf_SendDisinfStateData+0x3a2>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   9f5b0:	bf00      	nop

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
	
	
	}
   9f5b2:	4618      	mov	r0, r3
   9f5b4:	372c      	adds	r7, #44	; 0x2c
   9f5b6:	46bd      	mov	sp, r7
   9f5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9f5ba:	bf00      	nop
   9f5bc:	20071b18 	.word	0x20071b18
   9f5c0:	000a7fa9 	.word	0x000a7fa9
   9f5c4:	41200000 	.word	0x41200000
   9f5c8:	000a8381 	.word	0x000a8381
   9f5cc:	0008fa01 	.word	0x0008fa01
   9f5d0:	cccccccd 	.word	0xcccccccd
   9f5d4:	0009cbd5 	.word	0x0009cbd5

0009f5d8 <UpdateDisinfMinuteTick>:
 * \return CL_OK on success. 
 * \Globals used :
 */ 
	  
	Cl_ReturnCodeType UpdateDisinfMinuteTick(void)
	{
   9f5d8:	b580      	push	{r7, lr}
   9f5da:	b082      	sub	sp, #8
   9f5dc:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9f5de:	2300      	movs	r3, #0
   9f5e0:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   9f5e2:	4b0b      	ldr	r3, [pc, #44]	; (9f610 <UpdateDisinfMinuteTick+0x38>)
   9f5e4:	2200      	movs	r2, #0
   9f5e6:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   9f5e8:	4b0a      	ldr	r3, [pc, #40]	; (9f614 <UpdateDisinfMinuteTick+0x3c>)
   9f5ea:	681b      	ldr	r3, [r3, #0]
   9f5ec:	3301      	adds	r3, #1
   9f5ee:	4a09      	ldr	r2, [pc, #36]	; (9f614 <UpdateDisinfMinuteTick+0x3c>)
   9f5f0:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   9f5f2:	4b09      	ldr	r3, [pc, #36]	; (9f618 <UpdateDisinfMinuteTick+0x40>)
   9f5f4:	681b      	ldr	r3, [r3, #0]
   9f5f6:	3301      	adds	r3, #1
   9f5f8:	4a07      	ldr	r2, [pc, #28]	; (9f618 <UpdateDisinfMinuteTick+0x40>)
   9f5fa:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9f5fc:	4b07      	ldr	r3, [pc, #28]	; (9f61c <UpdateDisinfMinuteTick+0x44>)
   9f5fe:	4798      	blx	r3
   9f600:	4603      	mov	r3, r0
   9f602:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   9f604:	79fb      	ldrb	r3, [r7, #7]
	}
   9f606:	4618      	mov	r0, r3
   9f608:	3708      	adds	r7, #8
   9f60a:	46bd      	mov	sp, r7
   9f60c:	bd80      	pop	{r7, pc}
   9f60e:	bf00      	nop
   9f610:	20071ae0 	.word	0x20071ae0
   9f614:	20071ae4 	.word	0x20071ae4
   9f618:	20071af8 	.word	0x20071af8
   9f61c:	0009ed91 	.word	0x0009ed91

0009f620 <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9f620:	b580      	push	{r7, lr}
   9f622:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9f624:	4b31      	ldr	r3, [pc, #196]	; (9f6ec <Cl_dprep_init+0xcc>)
   9f626:	2200      	movs	r2, #0
   9f628:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9f62a:	4b31      	ldr	r3, [pc, #196]	; (9f6f0 <Cl_dprep_init+0xd0>)
   9f62c:	2200      	movs	r2, #0
   9f62e:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9f630:	4b30      	ldr	r3, [pc, #192]	; (9f6f4 <Cl_dprep_init+0xd4>)
   9f632:	2200      	movs	r2, #0
   9f634:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9f636:	4b30      	ldr	r3, [pc, #192]	; (9f6f8 <Cl_dprep_init+0xd8>)
   9f638:	2200      	movs	r2, #0
   9f63a:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9f63c:	4b2f      	ldr	r3, [pc, #188]	; (9f6fc <Cl_dprep_init+0xdc>)
   9f63e:	2200      	movs	r2, #0
   9f640:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9f642:	4b2f      	ldr	r3, [pc, #188]	; (9f700 <Cl_dprep_init+0xe0>)
   9f644:	2200      	movs	r2, #0
   9f646:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9f648:	4b2e      	ldr	r3, [pc, #184]	; (9f704 <Cl_dprep_init+0xe4>)
   9f64a:	2200      	movs	r2, #0
   9f64c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9f64e:	4b2e      	ldr	r3, [pc, #184]	; (9f708 <Cl_dprep_init+0xe8>)
   9f650:	2200      	movs	r2, #0
   9f652:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9f654:	4b2d      	ldr	r3, [pc, #180]	; (9f70c <Cl_dprep_init+0xec>)
   9f656:	2200      	movs	r2, #0
   9f658:	801a      	strh	r2, [r3, #0]
powerFailureFlag = 0;
   9f65a:	4b2d      	ldr	r3, [pc, #180]	; (9f710 <Cl_dprep_init+0xf0>)
   9f65c:	2200      	movs	r2, #0
   9f65e:	601a      	str	r2, [r3, #0]
	Cl_Dprep_Prime_secondscounter = 0;
   9f660:	4b2c      	ldr	r3, [pc, #176]	; (9f714 <Cl_dprep_init+0xf4>)
   9f662:	2200      	movs	r2, #0
   9f664:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9f666:	4b2c      	ldr	r3, [pc, #176]	; (9f718 <Cl_dprep_init+0xf8>)
   9f668:	2200      	movs	r2, #0
   9f66a:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9f66c:	4b2b      	ldr	r3, [pc, #172]	; (9f71c <Cl_dprep_init+0xfc>)
   9f66e:	2200      	movs	r2, #0
   9f670:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9f672:	4b2b      	ldr	r3, [pc, #172]	; (9f720 <Cl_dprep_init+0x100>)
   9f674:	2200      	movs	r2, #0
   9f676:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9f678:	4b2a      	ldr	r3, [pc, #168]	; (9f724 <Cl_dprep_init+0x104>)
   9f67a:	2200      	movs	r2, #0
   9f67c:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9f67e:	4b2a      	ldr	r3, [pc, #168]	; (9f728 <Cl_dprep_init+0x108>)
   9f680:	2200      	movs	r2, #0
   9f682:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9f684:	4b29      	ldr	r3, [pc, #164]	; (9f72c <Cl_dprep_init+0x10c>)
   9f686:	2200      	movs	r2, #0
   9f688:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9f68a:	4b29      	ldr	r3, [pc, #164]	; (9f730 <Cl_dprep_init+0x110>)
   9f68c:	2200      	movs	r2, #0
   9f68e:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9f690:	4b28      	ldr	r3, [pc, #160]	; (9f734 <Cl_dprep_init+0x114>)
   9f692:	f04f 0200 	mov.w	r2, #0
   9f696:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9f698:	4b27      	ldr	r3, [pc, #156]	; (9f738 <Cl_dprep_init+0x118>)
   9f69a:	2200      	movs	r2, #0
   9f69c:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9f69e:	4b27      	ldr	r3, [pc, #156]	; (9f73c <Cl_dprep_init+0x11c>)
   9f6a0:	2200      	movs	r2, #0
   9f6a2:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9f6a4:	4b26      	ldr	r3, [pc, #152]	; (9f740 <Cl_dprep_init+0x120>)
   9f6a6:	2200      	movs	r2, #0
   9f6a8:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9f6aa:	4b26      	ldr	r3, [pc, #152]	; (9f744 <Cl_dprep_init+0x124>)
   9f6ac:	2200      	movs	r2, #0
   9f6ae:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9f6b0:	4b25      	ldr	r3, [pc, #148]	; (9f748 <Cl_dprep_init+0x128>)
   9f6b2:	2200      	movs	r2, #0
   9f6b4:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9f6b6:	4b25      	ldr	r3, [pc, #148]	; (9f74c <Cl_dprep_init+0x12c>)
   9f6b8:	2200      	movs	r2, #0
   9f6ba:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9f6bc:	4b24      	ldr	r3, [pc, #144]	; (9f750 <Cl_dprep_init+0x130>)
   9f6be:	2200      	movs	r2, #0
   9f6c0:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9f6c2:	4b24      	ldr	r3, [pc, #144]	; (9f754 <Cl_dprep_init+0x134>)
   9f6c4:	2200      	movs	r2, #0
   9f6c6:	701a      	strb	r2, [r3, #0]
	dprep_heater_stable_status = false;
   9f6c8:	4b23      	ldr	r3, [pc, #140]	; (9f758 <Cl_dprep_init+0x138>)
   9f6ca:	2200      	movs	r2, #0
   9f6cc:	701a      	strb	r2, [r3, #0]
	 stability_counter = 0;
   9f6ce:	4b23      	ldr	r3, [pc, #140]	; (9f75c <Cl_dprep_init+0x13c>)
   9f6d0:	2200      	movs	r2, #0
   9f6d2:	601a      	str	r2, [r3, #0]
	  wait_timeout_counter = 0;
   9f6d4:	4b22      	ldr	r3, [pc, #136]	; (9f760 <Cl_dprep_init+0x140>)
   9f6d6:	2200      	movs	r2, #0
   9f6d8:	601a      	str	r2, [r3, #0]
	  state_counter = 0;
   9f6da:	4b22      	ldr	r3, [pc, #136]	; (9f764 <Cl_dprep_init+0x144>)
   9f6dc:	2200      	movs	r2, #0
   9f6de:	601a      	str	r2, [r3, #0]
	cl_dprep_primeInit();
   9f6e0:	4b21      	ldr	r3, [pc, #132]	; (9f768 <Cl_dprep_init+0x148>)
   9f6e2:	4798      	blx	r3

	 return CL_OK;
   9f6e4:	2300      	movs	r3, #0
 }
   9f6e6:	4618      	mov	r0, r3
   9f6e8:	bd80      	pop	{r7, pc}
   9f6ea:	bf00      	nop
   9f6ec:	20071b38 	.word	0x20071b38
   9f6f0:	20071b3c 	.word	0x20071b3c
   9f6f4:	20071b40 	.word	0x20071b40
   9f6f8:	20071b44 	.word	0x20071b44
   9f6fc:	20071b48 	.word	0x20071b48
   9f700:	20071b4c 	.word	0x20071b4c
   9f704:	20071b4e 	.word	0x20071b4e
   9f708:	20071b50 	.word	0x20071b50
   9f70c:	20071b52 	.word	0x20071b52
   9f710:	20071b24 	.word	0x20071b24
   9f714:	20071b54 	.word	0x20071b54
   9f718:	20071b56 	.word	0x20071b56
   9f71c:	20071b58 	.word	0x20071b58
   9f720:	20071b5a 	.word	0x20071b5a
   9f724:	20071b5c 	.word	0x20071b5c
   9f728:	20071b5e 	.word	0x20071b5e
   9f72c:	20071b60 	.word	0x20071b60
   9f730:	20071b62 	.word	0x20071b62
   9f734:	20071b64 	.word	0x20071b64
   9f738:	20071b68 	.word	0x20071b68
   9f73c:	20071b69 	.word	0x20071b69
   9f740:	20071b6a 	.word	0x20071b6a
   9f744:	20071b6b 	.word	0x20071b6b
   9f748:	20071b6c 	.word	0x20071b6c
   9f74c:	20071b6e 	.word	0x20071b6e
   9f750:	20071b6f 	.word	0x20071b6f
   9f754:	20071b71 	.word	0x20071b71
   9f758:	20071b21 	.word	0x20071b21
   9f75c:	20071b2c 	.word	0x20071b2c
   9f760:	20071b30 	.word	0x20071b30
   9f764:	20071b34 	.word	0x20071b34
   9f768:	00087fcd 	.word	0x00087fcd
   9f76c:	00000000 	.word	0x00000000

0009f770 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9f770:	b590      	push	{r4, r7, lr}
   9f772:	b0a9      	sub	sp, #164	; 0xa4
   9f774:	af00      	add	r7, sp, #0
   9f776:	4603      	mov	r3, r0
   9f778:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9f77a:	2300      	movs	r3, #0
   9f77c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9f780:	2300      	movs	r3, #0
   9f782:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9f786:	2359      	movs	r3, #89	; 0x59
   9f788:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	Cl_Uint8Type data = 0;
   9f78c:	2300      	movs	r3, #0
   9f78e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	Cl_Uint8Type datasize = 0;
   9f792:	2300      	movs	r3, #0
   9f794:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9f798:	2300      	movs	r3, #0
   9f79a:	673b      	str	r3, [r7, #112]	; 0x70
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9f79c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   9f7a0:	2228      	movs	r2, #40	; 0x28
   9f7a2:	2100      	movs	r1, #0
   9f7a4:	4618      	mov	r0, r3
   9f7a6:	4bbd      	ldr	r3, [pc, #756]	; (9fa9c <Cl_dprep_controller+0x32c>)
   9f7a8:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9f7aa:	2300      	movs	r3, #0
   9f7ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   9f7b0:	2300      	movs	r3, #0
   9f7b2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
   9f7b6:	2300      	movs	r3, #0
   9f7b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   9f7bc:	2300      	movs	r3, #0
   9f7be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9f7c2:	f04f 0300 	mov.w	r3, #0
   9f7c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	Cl_Uint16Type temp = 0;
   9f7ca:	2300      	movs	r3, #0
   9f7cc:	863b      	strh	r3, [r7, #48]	; 0x30
	Cl_Uint16Type tempcount;
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   9f7ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9f7d2:	2200      	movs	r2, #0
   9f7d4:	601a      	str	r2, [r3, #0]
   9f7d6:	711a      	strb	r2, [r3, #4]
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9f7d8:	f107 0278 	add.w	r2, r7, #120	; 0x78
   9f7dc:	79fb      	ldrb	r3, [r7, #7]
   9f7de:	4611      	mov	r1, r2
   9f7e0:	4618      	mov	r0, r3
   9f7e2:	4baf      	ldr	r3, [pc, #700]	; (9faa0 <Cl_dprep_controller+0x330>)
   9f7e4:	4798      	blx	r3
	
	
	switch(cl_dprepevent)
   9f7e6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f7ea:	3b05      	subs	r3, #5
   9f7ec:	2b57      	cmp	r3, #87	; 0x57
   9f7ee:	f200 81c6 	bhi.w	9fb7e <Cl_dprep_controller+0x40e>
   9f7f2:	a201      	add	r2, pc, #4	; (adr r2, 9f7f8 <Cl_dprep_controller+0x88>)
   9f7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f7f8:	0009f963 	.word	0x0009f963
   9f7fc:	0009f97b 	.word	0x0009f97b
   9f800:	0009f9b3 	.word	0x0009f9b3
   9f804:	0009fb7f 	.word	0x0009fb7f
   9f808:	0009fb7f 	.word	0x0009fb7f
   9f80c:	0009fb7f 	.word	0x0009fb7f
   9f810:	0009fb7f 	.word	0x0009fb7f
   9f814:	0009fb7f 	.word	0x0009fb7f
   9f818:	0009fb7f 	.word	0x0009fb7f
   9f81c:	0009fb7f 	.word	0x0009fb7f
   9f820:	0009fa63 	.word	0x0009fa63
   9f824:	0009fb7f 	.word	0x0009fb7f
   9f828:	0009fb7f 	.word	0x0009fb7f
   9f82c:	0009fb7f 	.word	0x0009fb7f
   9f830:	0009fb7f 	.word	0x0009fb7f
   9f834:	0009fb7f 	.word	0x0009fb7f
   9f838:	0009fb7f 	.word	0x0009fb7f
   9f83c:	0009f959 	.word	0x0009f959
   9f840:	0009fb7f 	.word	0x0009fb7f
   9f844:	0009fb7f 	.word	0x0009fb7f
   9f848:	0009fb7f 	.word	0x0009fb7f
   9f84c:	0009fb7f 	.word	0x0009fb7f
   9f850:	0009fb7f 	.word	0x0009fb7f
   9f854:	0009fb7f 	.word	0x0009fb7f
   9f858:	0009fb7f 	.word	0x0009fb7f
   9f85c:	0009fb7f 	.word	0x0009fb7f
   9f860:	0009fb7f 	.word	0x0009fb7f
   9f864:	0009fb7f 	.word	0x0009fb7f
   9f868:	0009fa59 	.word	0x0009fa59
   9f86c:	0009f9f1 	.word	0x0009f9f1
   9f870:	0009fa4f 	.word	0x0009fa4f
   9f874:	0009f9ad 	.word	0x0009f9ad
   9f878:	0009fb7f 	.word	0x0009fb7f
   9f87c:	0009fb7f 	.word	0x0009fb7f
   9f880:	0009fb7f 	.word	0x0009fb7f
   9f884:	0009fb7f 	.word	0x0009fb7f
   9f888:	0009fb7f 	.word	0x0009fb7f
   9f88c:	0009fb7f 	.word	0x0009fb7f
   9f890:	0009fb7f 	.word	0x0009fb7f
   9f894:	0009fb7f 	.word	0x0009fb7f
   9f898:	0009fb7f 	.word	0x0009fb7f
   9f89c:	0009fb7f 	.word	0x0009fb7f
   9f8a0:	0009fb7f 	.word	0x0009fb7f
   9f8a4:	0009fb7f 	.word	0x0009fb7f
   9f8a8:	0009fb7f 	.word	0x0009fb7f
   9f8ac:	0009fb7f 	.word	0x0009fb7f
   9f8b0:	0009fb7f 	.word	0x0009fb7f
   9f8b4:	0009fb7f 	.word	0x0009fb7f
   9f8b8:	0009fb7f 	.word	0x0009fb7f
   9f8bc:	0009fb7f 	.word	0x0009fb7f
   9f8c0:	0009fb7f 	.word	0x0009fb7f
   9f8c4:	0009fb7f 	.word	0x0009fb7f
   9f8c8:	0009fb7f 	.word	0x0009fb7f
   9f8cc:	0009fb7f 	.word	0x0009fb7f
   9f8d0:	0009fb7f 	.word	0x0009fb7f
   9f8d4:	0009fb7f 	.word	0x0009fb7f
   9f8d8:	0009fb7f 	.word	0x0009fb7f
   9f8dc:	0009fb7f 	.word	0x0009fb7f
   9f8e0:	0009fb7f 	.word	0x0009fb7f
   9f8e4:	0009fb7f 	.word	0x0009fb7f
   9f8e8:	0009fb7f 	.word	0x0009fb7f
   9f8ec:	0009fb7f 	.word	0x0009fb7f
   9f8f0:	0009fb7f 	.word	0x0009fb7f
   9f8f4:	0009fb7f 	.word	0x0009fb7f
   9f8f8:	0009fb7f 	.word	0x0009fb7f
   9f8fc:	0009fb7f 	.word	0x0009fb7f
   9f900:	0009fb7f 	.word	0x0009fb7f
   9f904:	0009fb7f 	.word	0x0009fb7f
   9f908:	0009fb7f 	.word	0x0009fb7f
   9f90c:	0009fb7f 	.word	0x0009fb7f
   9f910:	0009fb7f 	.word	0x0009fb7f
   9f914:	0009fb7f 	.word	0x0009fb7f
   9f918:	0009fb7f 	.word	0x0009fb7f
   9f91c:	0009fb7f 	.word	0x0009fb7f
   9f920:	0009fb7f 	.word	0x0009fb7f
   9f924:	0009fb7f 	.word	0x0009fb7f
   9f928:	0009fb7f 	.word	0x0009fb7f
   9f92c:	0009fb7f 	.word	0x0009fb7f
   9f930:	0009fb7f 	.word	0x0009fb7f
   9f934:	0009fb7f 	.word	0x0009fb7f
   9f938:	0009fb7f 	.word	0x0009fb7f
   9f93c:	0009fb7f 	.word	0x0009fb7f
   9f940:	0009fb7f 	.word	0x0009fb7f
   9f944:	0009fb7f 	.word	0x0009fb7f
   9f948:	0009fb7f 	.word	0x0009fb7f
   9f94c:	0009fb7f 	.word	0x0009fb7f
   9f950:	0009fac9 	.word	0x0009fac9
   9f954:	0009fb25 	.word	0x0009fb25
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9f958:	4b52      	ldr	r3, [pc, #328]	; (9faa4 <Cl_dprep_controller+0x334>)
   9f95a:	781a      	ldrb	r2, [r3, #0]
   9f95c:	4b52      	ldr	r3, [pc, #328]	; (9faa8 <Cl_dprep_controller+0x338>)
   9f95e:	701a      	strb	r2, [r3, #0]
		break;
   9f960:	e11a      	b.n	9fb98 <Cl_dprep_controller+0x428>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9f962:	2101      	movs	r1, #1
   9f964:	2001      	movs	r0, #1
   9f966:	4b51      	ldr	r3, [pc, #324]	; (9faac <Cl_dprep_controller+0x33c>)
   9f968:	4798      	blx	r3
   9f96a:	4603      	mov	r3, r0
   9f96c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_START,1);
   9f970:	2101      	movs	r1, #1
   9f972:	2002      	movs	r0, #2
   9f974:	4b4e      	ldr	r3, [pc, #312]	; (9fab0 <Cl_dprep_controller+0x340>)
   9f976:	4798      	blx	r3
		break;
   9f978:	e10e      	b.n	9fb98 <Cl_dprep_controller+0x428>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9f97a:	2100      	movs	r1, #0
   9f97c:	2001      	movs	r0, #1
   9f97e:	4b4b      	ldr	r3, [pc, #300]	; (9faac <Cl_dprep_controller+0x33c>)
   9f980:	4798      	blx	r3
   9f982:	4603      	mov	r3, r0
   9f984:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9f988:	2101      	movs	r1, #1
   9f98a:	2004      	movs	r0, #4
   9f98c:	4b48      	ldr	r3, [pc, #288]	; (9fab0 <Cl_dprep_controller+0x340>)
   9f98e:	4798      	blx	r3
		if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME || cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME_STOPPED){
   9f990:	4b44      	ldr	r3, [pc, #272]	; (9faa4 <Cl_dprep_controller+0x334>)
   9f992:	781b      	ldrb	r3, [r3, #0]
   9f994:	2b06      	cmp	r3, #6
   9f996:	d004      	beq.n	9f9a2 <Cl_dprep_controller+0x232>
   9f998:	4b42      	ldr	r3, [pc, #264]	; (9faa4 <Cl_dprep_controller+0x334>)
   9f99a:	781b      	ldrb	r3, [r3, #0]
   9f99c:	2b07      	cmp	r3, #7
   9f99e:	f040 80f0 	bne.w	9fb82 <Cl_dprep_controller+0x412>
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);	
   9f9a2:	2101      	movs	r1, #1
   9f9a4:	203f      	movs	r0, #63	; 0x3f
   9f9a6:	4b43      	ldr	r3, [pc, #268]	; (9fab4 <Cl_dprep_controller+0x344>)
   9f9a8:	4798      	blx	r3
		}
		
		
		
		break;
   9f9aa:	e0ea      	b.n	9fb82 <Cl_dprep_controller+0x412>
		
		case EVENT_DPREP_MUTE :
		sv_cntrl_nobuzzer();
   9f9ac:	4b42      	ldr	r3, [pc, #264]	; (9fab8 <Cl_dprep_controller+0x348>)
   9f9ae:	4798      	blx	r3
		break;
   9f9b0:	e0f2      	b.n	9fb98 <Cl_dprep_controller+0x428>
		
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9f9b2:	4b42      	ldr	r3, [pc, #264]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9b4:	7e1b      	ldrb	r3, [r3, #24]
   9f9b6:	2b00      	cmp	r3, #0
   9f9b8:	f000 80e5 	beq.w	9fb86 <Cl_dprep_controller+0x416>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f9bc:	4b3f      	ldr	r3, [pc, #252]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9be:	791b      	ldrb	r3, [r3, #4]
   9f9c0:	f887 3020 	strb.w	r3, [r7, #32]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9f9c4:	4b3d      	ldr	r3, [pc, #244]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9c6:	795b      	ldrb	r3, [r3, #5]
   9f9c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9f9cc:	4b3b      	ldr	r3, [pc, #236]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9ce:	799b      	ldrb	r3, [r3, #6]
   9f9d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9f9d4:	4b39      	ldr	r3, [pc, #228]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9d6:	79db      	ldrb	r3, [r3, #7]
   9f9d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9f9dc:	8c3b      	ldrh	r3, [r7, #32]
   9f9de:	4619      	mov	r1, r3
   9f9e0:	2001      	movs	r0, #1
   9f9e2:	4b33      	ldr	r3, [pc, #204]	; (9fab0 <Cl_dprep_controller+0x340>)
   9f9e4:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9f9e6:	8c3b      	ldrh	r3, [r7, #32]
   9f9e8:	461a      	mov	r2, r3
   9f9ea:	4b35      	ldr	r3, [pc, #212]	; (9fac0 <Cl_dprep_controller+0x350>)
   9f9ec:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9f9ee:	e0ca      	b.n	9fb86 <Cl_dprep_controller+0x416>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9f9f0:	4b32      	ldr	r3, [pc, #200]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9f2:	7e1b      	ldrb	r3, [r3, #24]
   9f9f4:	2b00      	cmp	r3, #0
   9f9f6:	f000 80c8 	beq.w	9fb8a <Cl_dprep_controller+0x41a>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9f9fa:	4b30      	ldr	r3, [pc, #192]	; (9fabc <Cl_dprep_controller+0x34c>)
   9f9fc:	795b      	ldrb	r3, [r3, #5]
   9f9fe:	773b      	strb	r3, [r7, #28]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9fa00:	4b2e      	ldr	r3, [pc, #184]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa02:	799b      	ldrb	r3, [r3, #6]
   9fa04:	777b      	strb	r3, [r7, #29]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9fa06:	4b2d      	ldr	r3, [pc, #180]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa08:	79db      	ldrb	r3, [r3, #7]
   9fa0a:	77bb      	strb	r3, [r7, #30]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9fa0c:	4b2b      	ldr	r3, [pc, #172]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa0e:	7a1b      	ldrb	r3, [r3, #8]
   9fa10:	77fb      	strb	r3, [r7, #31]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9fa12:	4b2a      	ldr	r3, [pc, #168]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa14:	791b      	ldrb	r3, [r3, #4]
   9fa16:	2b01      	cmp	r3, #1
   9fa18:	d104      	bne.n	9fa24 <Cl_dprep_controller+0x2b4>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9fa1a:	2100      	movs	r1, #0
   9fa1c:	2001      	movs	r0, #1
   9fa1e:	4b29      	ldr	r3, [pc, #164]	; (9fac4 <Cl_dprep_controller+0x354>)
   9fa20:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9fa22:	e0b2      	b.n	9fb8a <Cl_dprep_controller+0x41a>
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9fa24:	4b25      	ldr	r3, [pc, #148]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa26:	791b      	ldrb	r3, [r3, #4]
   9fa28:	2b02      	cmp	r3, #2
   9fa2a:	d104      	bne.n	9fa36 <Cl_dprep_controller+0x2c6>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9fa2c:	2100      	movs	r1, #0
   9fa2e:	2004      	movs	r0, #4
   9fa30:	4b24      	ldr	r3, [pc, #144]	; (9fac4 <Cl_dprep_controller+0x354>)
   9fa32:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9fa34:	e0a9      	b.n	9fb8a <Cl_dprep_controller+0x41a>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9fa36:	4b21      	ldr	r3, [pc, #132]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa38:	791b      	ldrb	r3, [r3, #4]
   9fa3a:	2b00      	cmp	r3, #0
   9fa3c:	f040 80a5 	bne.w	9fb8a <Cl_dprep_controller+0x41a>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   9fa40:	4b1f      	ldr	r3, [pc, #124]	; (9fac0 <Cl_dprep_controller+0x350>)
   9fa42:	69db      	ldr	r3, [r3, #28]
   9fa44:	4619      	mov	r1, r3
   9fa46:	200b      	movs	r0, #11
   9fa48:	4b1e      	ldr	r3, [pc, #120]	; (9fac4 <Cl_dprep_controller+0x354>)
   9fa4a:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9fa4c:	e09d      	b.n	9fb8a <Cl_dprep_controller+0x41a>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9fa4e:	2100      	movs	r1, #0
   9fa50:	2009      	movs	r0, #9
   9fa52:	4b1c      	ldr	r3, [pc, #112]	; (9fac4 <Cl_dprep_controller+0x354>)
   9fa54:	4798      	blx	r3
			break;
   9fa56:	e09f      	b.n	9fb98 <Cl_dprep_controller+0x428>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9fa58:	2100      	movs	r1, #0
   9fa5a:	2007      	movs	r0, #7
   9fa5c:	4b19      	ldr	r3, [pc, #100]	; (9fac4 <Cl_dprep_controller+0x354>)
   9fa5e:	4798      	blx	r3
			break;
   9fa60:	e09a      	b.n	9fb98 <Cl_dprep_controller+0x428>
// 		break;
// 		case EVENT_HEAPARIN_BOLUS:
// 		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   9fa62:	4b16      	ldr	r3, [pc, #88]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa64:	7e1b      	ldrb	r3, [r3, #24]
   9fa66:	2b00      	cmp	r3, #0
   9fa68:	f000 8091 	beq.w	9fb8e <Cl_dprep_controller+0x41e>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9fa6c:	4b13      	ldr	r3, [pc, #76]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa6e:	791b      	ldrb	r3, [r3, #4]
   9fa70:	763b      	strb	r3, [r7, #24]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9fa72:	4b12      	ldr	r3, [pc, #72]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa74:	795b      	ldrb	r3, [r3, #5]
   9fa76:	767b      	strb	r3, [r7, #25]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9fa78:	4b10      	ldr	r3, [pc, #64]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa7a:	799b      	ldrb	r3, [r3, #6]
   9fa7c:	76bb      	strb	r3, [r7, #26]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9fa7e:	4b0f      	ldr	r3, [pc, #60]	; (9fabc <Cl_dprep_controller+0x34c>)
   9fa80:	79db      	ldrb	r3, [r3, #7]
   9fa82:	76fb      	strb	r3, [r7, #27]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   9fa84:	8b3b      	ldrh	r3, [r7, #24]
   9fa86:	461a      	mov	r2, r3
   9fa88:	4b0d      	ldr	r3, [pc, #52]	; (9fac0 <Cl_dprep_controller+0x350>)
   9fa8a:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   9fa8c:	4b0c      	ldr	r3, [pc, #48]	; (9fac0 <Cl_dprep_controller+0x350>)
   9fa8e:	69db      	ldr	r3, [r3, #28]
   9fa90:	4619      	mov	r1, r3
   9fa92:	2006      	movs	r0, #6
   9fa94:	4b0b      	ldr	r3, [pc, #44]	; (9fac4 <Cl_dprep_controller+0x354>)
   9fa96:	4798      	blx	r3
		}
		
		break;
   9fa98:	e079      	b.n	9fb8e <Cl_dprep_controller+0x41e>
   9fa9a:	bf00      	nop
   9fa9c:	000a84fd 	.word	0x000a84fd
   9faa0:	000a138d 	.word	0x000a138d
   9faa4:	20071b6f 	.word	0x20071b6f
   9faa8:	2007260f 	.word	0x2007260f
   9faac:	000829e5 	.word	0x000829e5
   9fab0:	00093f5d 	.word	0x00093f5d
   9fab4:	00082c31 	.word	0x00082c31
   9fab8:	0009b0b9 	.word	0x0009b0b9
   9fabc:	20072350 	.word	0x20072350
   9fac0:	20072614 	.word	0x20072614
   9fac4:	00094729 	.word	0x00094729
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   9fac8:	4bc1      	ldr	r3, [pc, #772]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9faca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9facc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   9fad0:	d85f      	bhi.n	9fb92 <Cl_dprep_controller+0x422>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   9fad2:	4bbf      	ldr	r3, [pc, #764]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9fad6:	330a      	adds	r3, #10
   9fad8:	4abd      	ldr	r2, [pc, #756]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fada:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9fadc:	4bbc      	ldr	r3, [pc, #752]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9fae0:	4619      	mov	r1, r3
   9fae2:	2001      	movs	r0, #1
   9fae4:	4bbb      	ldr	r3, [pc, #748]	; (9fdd4 <Cl_dprep_controller+0x664>)
   9fae6:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9fae8:	230f      	movs	r3, #15
   9faea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9faee:	4bb8      	ldr	r3, [pc, #736]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9faf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9faf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9faf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9faf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9fafc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9fb00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9fb04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9fb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9fb0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9fb10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9fb14:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9fb18:	2205      	movs	r2, #5
   9fb1a:	4619      	mov	r1, r3
   9fb1c:	202a      	movs	r0, #42	; 0x2a
   9fb1e:	4bae      	ldr	r3, [pc, #696]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fb20:	4798      	blx	r3
			
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9fb22:	e036      	b.n	9fb92 <Cl_dprep_controller+0x422>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   9fb24:	4baa      	ldr	r3, [pc, #680]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fb26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9fb28:	2b63      	cmp	r3, #99	; 0x63
   9fb2a:	d934      	bls.n	9fb96 <Cl_dprep_controller+0x426>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   9fb2c:	4ba8      	ldr	r3, [pc, #672]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9fb30:	3b0a      	subs	r3, #10
   9fb32:	4aa7      	ldr	r2, [pc, #668]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fb34:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9fb36:	4ba6      	ldr	r3, [pc, #664]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9fb3a:	4619      	mov	r1, r3
   9fb3c:	2001      	movs	r0, #1
   9fb3e:	4ba5      	ldr	r3, [pc, #660]	; (9fdd4 <Cl_dprep_controller+0x664>)
   9fb40:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9fb42:	230f      	movs	r3, #15
   9fb44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9fb48:	4ba1      	ldr	r3, [pc, #644]	; (9fdd0 <Cl_dprep_controller+0x660>)
   9fb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9fb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9fb4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9fb52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9fb56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9fb5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9fb5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9fb62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9fb66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9fb6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9fb6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9fb72:	2205      	movs	r2, #5
   9fb74:	4619      	mov	r1, r3
   9fb76:	202a      	movs	r0, #42	; 0x2a
   9fb78:	4b97      	ldr	r3, [pc, #604]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fb7a:	4798      	blx	r3
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9fb7c:	e00b      	b.n	9fb96 <Cl_dprep_controller+0x426>
		

		default:break;
   9fb7e:	bf00      	nop
   9fb80:	e00a      	b.n	9fb98 <Cl_dprep_controller+0x428>
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);	
		}
		
		
		
		break;
   9fb82:	bf00      	nop
   9fb84:	e008      	b.n	9fb98 <Cl_dprep_controller+0x428>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		
		break;
   9fb86:	bf00      	nop
   9fb88:	e006      	b.n	9fb98 <Cl_dprep_controller+0x428>
				}
				
			}
			
			
			break;
   9fb8a:	bf00      	nop
   9fb8c:	e004      	b.n	9fb98 <Cl_dprep_controller+0x428>
			Treatdata[ID_heprate] = cl_temp.Twobyte;
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
		}
		
		break;
   9fb8e:	bf00      	nop
   9fb90:	e002      	b.n	9fb98 <Cl_dprep_controller+0x428>
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9fb92:	bf00      	nop
   9fb94:	e000      	b.n	9fb98 <Cl_dprep_controller+0x428>
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9fb96:	bf00      	nop
		

		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   9fb98:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9fb9c:	2b16      	cmp	r3, #22
   9fb9e:	d105      	bne.n	9fbac <Cl_dprep_controller+0x43c>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   9fba0:	200c      	movs	r0, #12
   9fba2:	4b8e      	ldr	r3, [pc, #568]	; (9fddc <Cl_dprep_controller+0x66c>)
   9fba4:	4798      	blx	r3
   9fba6:	4603      	mov	r3, r0
   9fba8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   9fbac:	4b8c      	ldr	r3, [pc, #560]	; (9fde0 <Cl_dprep_controller+0x670>)
   9fbae:	781b      	ldrb	r3, [r3, #0]
   9fbb0:	2b0e      	cmp	r3, #14
   9fbb2:	f201 83bf 	bhi.w	a1334 <Cl_dprep_controller+0x1bc4>
   9fbb6:	a201      	add	r2, pc, #4	; (adr r2, 9fbbc <Cl_dprep_controller+0x44c>)
   9fbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fbbc:	0009fbf9 	.word	0x0009fbf9
   9fbc0:	000a1335 	.word	0x000a1335
   9fbc4:	0009fe91 	.word	0x0009fe91
   9fbc8:	000a05e5 	.word	0x000a05e5
   9fbcc:	000a1335 	.word	0x000a1335
   9fbd0:	000a0a09 	.word	0x000a0a09
   9fbd4:	000a0ce9 	.word	0x000a0ce9
   9fbd8:	000a0f2d 	.word	0x000a0f2d
   9fbdc:	000a0fc1 	.word	0x000a0fc1
   9fbe0:	000a118b 	.word	0x000a118b
   9fbe4:	000a1335 	.word	0x000a1335
   9fbe8:	0009fbf9 	.word	0x0009fbf9
   9fbec:	000a0475 	.word	0x000a0475
   9fbf0:	000a0385 	.word	0x000a0385
   9fbf4:	000a080d 	.word	0x000a080d

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   9fbf8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9fbfc:	3b01      	subs	r3, #1
   9fbfe:	2b1e      	cmp	r3, #30
   9fc00:	f200 8131 	bhi.w	9fe66 <Cl_dprep_controller+0x6f6>
   9fc04:	a201      	add	r2, pc, #4	; (adr r2, 9fc0c <Cl_dprep_controller+0x49c>)
   9fc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fc0a:	bf00      	nop
   9fc0c:	0009fc89 	.word	0x0009fc89
   9fc10:	0009fdb7 	.word	0x0009fdb7
   9fc14:	0009fe67 	.word	0x0009fe67
   9fc18:	0009fd2d 	.word	0x0009fd2d
   9fc1c:	0009fe67 	.word	0x0009fe67
   9fc20:	0009fe67 	.word	0x0009fe67
   9fc24:	0009fe67 	.word	0x0009fe67
   9fc28:	0009fe67 	.word	0x0009fe67
   9fc2c:	0009fe67 	.word	0x0009fe67
   9fc30:	0009fe41 	.word	0x0009fe41
   9fc34:	0009fe67 	.word	0x0009fe67
   9fc38:	0009fe67 	.word	0x0009fe67
   9fc3c:	0009fe67 	.word	0x0009fe67
   9fc40:	0009fe67 	.word	0x0009fe67
   9fc44:	0009fe67 	.word	0x0009fe67
   9fc48:	0009fe67 	.word	0x0009fe67
   9fc4c:	0009fe67 	.word	0x0009fe67
   9fc50:	0009fe67 	.word	0x0009fe67
   9fc54:	0009fe67 	.word	0x0009fe67
   9fc58:	0009fe67 	.word	0x0009fe67
   9fc5c:	0009fe67 	.word	0x0009fe67
   9fc60:	0009fe67 	.word	0x0009fe67
   9fc64:	0009fe67 	.word	0x0009fe67
   9fc68:	0009fe67 	.word	0x0009fe67
   9fc6c:	0009fe35 	.word	0x0009fe35
   9fc70:	0009fe67 	.word	0x0009fe67
   9fc74:	0009fe67 	.word	0x0009fe67
   9fc78:	0009fe67 	.word	0x0009fe67
   9fc7c:	0009fe1d 	.word	0x0009fe1d
   9fc80:	0009fe67 	.word	0x0009fe67
   9fc84:	0009fcf9 	.word	0x0009fcf9
		{
			
				case EVENT_DPREP_CLR_ALARM:             // manav03 added
								
								if(powerFailureFlag == 1){
   9fc88:	4b56      	ldr	r3, [pc, #344]	; (9fde4 <Cl_dprep_controller+0x674>)
   9fc8a:	681b      	ldr	r3, [r3, #0]
   9fc8c:	2b01      	cmp	r3, #1
   9fc8e:	d11f      	bne.n	9fcd0 <Cl_dprep_controller+0x560>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   9fc90:	4955      	ldr	r1, [pc, #340]	; (9fde8 <Cl_dprep_controller+0x678>)
   9fc92:	2024      	movs	r0, #36	; 0x24
   9fc94:	4b55      	ldr	r3, [pc, #340]	; (9fdec <Cl_dprep_controller+0x67c>)
   9fc96:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   9fc98:	4b53      	ldr	r3, [pc, #332]	; (9fde8 <Cl_dprep_controller+0x678>)
   9fc9a:	881b      	ldrh	r3, [r3, #0]
   9fc9c:	2b00      	cmp	r3, #0
   9fc9e:	f040 80e5 	bne.w	9fe6c <Cl_dprep_controller+0x6fc>
						
						powerFailureFlag = 0;
   9fca2:	4b50      	ldr	r3, [pc, #320]	; (9fde4 <Cl_dprep_controller+0x674>)
   9fca4:	2200      	movs	r2, #0
   9fca6:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   9fca8:	2351      	movs	r3, #81	; 0x51
   9fcaa:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   9fcae:	f107 0177 	add.w	r1, r7, #119	; 0x77
   9fcb2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9fcb6:	2200      	movs	r2, #0
   9fcb8:	4618      	mov	r0, r3
   9fcba:	4b47      	ldr	r3, [pc, #284]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fcbc:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   9fcbe:	4b4c      	ldr	r3, [pc, #304]	; (9fdf0 <Cl_dprep_controller+0x680>)
   9fcc0:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   9fcc2:	4b4c      	ldr	r3, [pc, #304]	; (9fdf4 <Cl_dprep_controller+0x684>)
   9fcc4:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   9fcc6:	4b4c      	ldr	r3, [pc, #304]	; (9fdf8 <Cl_dprep_controller+0x688>)
   9fcc8:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   9fcca:	4b4c      	ldr	r3, [pc, #304]	; (9fdfc <Cl_dprep_controller+0x68c>)
   9fccc:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;
   9fcce:	e0cd      	b.n	9fe6c <Cl_dprep_controller+0x6fc>
							Cl_Dprep_ResetAlertsforReassertion();
					}
					}
					else{			
								
								command = CON_TX_COMMAND_ALARM_CLEARED;
   9fcd0:	2351      	movs	r3, #81	; 0x51
   9fcd2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							    Cl_SendDatatoconsole(command,&data,0);
   9fcd6:	f107 0177 	add.w	r1, r7, #119	; 0x77
   9fcda:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9fcde:	2200      	movs	r2, #0
   9fce0:	4618      	mov	r0, r3
   9fce2:	4b3d      	ldr	r3, [pc, #244]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fce4:	4798      	blx	r3
							
					
										sv_cntrl_resetyellowalarm();
   9fce6:	4b42      	ldr	r3, [pc, #264]	; (9fdf0 <Cl_dprep_controller+0x680>)
   9fce8:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   9fcea:	4b42      	ldr	r3, [pc, #264]	; (9fdf4 <Cl_dprep_controller+0x684>)
   9fcec:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   9fcee:	4b42      	ldr	r3, [pc, #264]	; (9fdf8 <Cl_dprep_controller+0x688>)
   9fcf0:	4798      	blx	r3
										Cl_Dprep_ResetAlertsforReassertion();
   9fcf2:	4b42      	ldr	r3, [pc, #264]	; (9fdfc <Cl_dprep_controller+0x68c>)
   9fcf4:	4798      	blx	r3
					}
								break;
   9fcf6:	e0b9      	b.n	9fe6c <Cl_dprep_controller+0x6fc>
			
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9fcf8:	4b41      	ldr	r3, [pc, #260]	; (9fe00 <Cl_dprep_controller+0x690>)
   9fcfa:	781b      	ldrb	r3, [r3, #0]
   9fcfc:	2b01      	cmp	r3, #1
   9fcfe:	d108      	bne.n	9fd12 <Cl_dprep_controller+0x5a2>
   9fd00:	4b3f      	ldr	r3, [pc, #252]	; (9fe00 <Cl_dprep_controller+0x690>)
   9fd02:	781b      	ldrb	r3, [r3, #0]
   9fd04:	2b05      	cmp	r3, #5
   9fd06:	d104      	bne.n	9fd12 <Cl_dprep_controller+0x5a2>
   9fd08:	4b3d      	ldr	r3, [pc, #244]	; (9fe00 <Cl_dprep_controller+0x690>)
   9fd0a:	781b      	ldrb	r3, [r3, #0]
   9fd0c:	2b09      	cmp	r3, #9
   9fd0e:	f000 80b0 	beq.w	9fe72 <Cl_dprep_controller+0x702>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9fd12:	2206      	movs	r2, #6
   9fd14:	493b      	ldr	r1, [pc, #236]	; (9fe04 <Cl_dprep_controller+0x694>)
   9fd16:	2018      	movs	r0, #24
   9fd18:	4b2f      	ldr	r3, [pc, #188]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fd1a:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9fd1c:	2100      	movs	r1, #0
   9fd1e:	2005      	movs	r0, #5
   9fd20:	4b39      	ldr	r3, [pc, #228]	; (9fe08 <Cl_dprep_controller+0x698>)
   9fd22:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9fd24:	4b39      	ldr	r3, [pc, #228]	; (9fe0c <Cl_dprep_controller+0x69c>)
   9fd26:	2200      	movs	r2, #0
   9fd28:	70da      	strb	r2, [r3, #3]
						}
				break;
   9fd2a:	e0a2      	b.n	9fe72 <Cl_dprep_controller+0x702>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9fd2c:	4b38      	ldr	r3, [pc, #224]	; (9fe10 <Cl_dprep_controller+0x6a0>)
   9fd2e:	7e1b      	ldrb	r3, [r3, #24]
   9fd30:	2b00      	cmp	r3, #0
   9fd32:	f000 80a1 	beq.w	9fe78 <Cl_dprep_controller+0x708>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9fd36:	4b36      	ldr	r3, [pc, #216]	; (9fe10 <Cl_dprep_controller+0x6a0>)
   9fd38:	791b      	ldrb	r3, [r3, #4]
   9fd3a:	2b02      	cmp	r3, #2
   9fd3c:	d002      	beq.n	9fd44 <Cl_dprep_controller+0x5d4>
   9fd3e:	2b04      	cmp	r3, #4
   9fd40:	d01c      	beq.n	9fd7c <Cl_dprep_controller+0x60c>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9fd42:	e037      	b.n	9fdb4 <Cl_dprep_controller+0x644>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9fd44:	2316      	movs	r3, #22
   9fd46:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9fd4a:	2302      	movs	r3, #2
   9fd4c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9fd50:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fd54:	3301      	adds	r3, #1
   9fd56:	4619      	mov	r1, r3
   9fd58:	2002      	movs	r0, #2
   9fd5a:	4b2e      	ldr	r3, [pc, #184]	; (9fe14 <Cl_dprep_controller+0x6a4>)
   9fd5c:	4798      	blx	r3
   9fd5e:	4603      	mov	r3, r0
   9fd60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fd64:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9fd68:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9fd6c:	2202      	movs	r2, #2
   9fd6e:	4618      	mov	r0, r3
   9fd70:	4b19      	ldr	r3, [pc, #100]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fd72:	4798      	blx	r3
   9fd74:	4603      	mov	r3, r0
   9fd76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9fd7a:	e01b      	b.n	9fdb4 <Cl_dprep_controller+0x644>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9fd7c:	2316      	movs	r3, #22
   9fd7e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9fd82:	2304      	movs	r3, #4
   9fd84:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9fd88:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fd8c:	3301      	adds	r3, #1
   9fd8e:	4619      	mov	r1, r3
   9fd90:	2004      	movs	r0, #4
   9fd92:	4b20      	ldr	r3, [pc, #128]	; (9fe14 <Cl_dprep_controller+0x6a4>)
   9fd94:	4798      	blx	r3
   9fd96:	4603      	mov	r3, r0
   9fd98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fd9c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9fda0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9fda4:	2202      	movs	r2, #2
   9fda6:	4618      	mov	r0, r3
   9fda8:	4b0b      	ldr	r3, [pc, #44]	; (9fdd8 <Cl_dprep_controller+0x668>)
   9fdaa:	4798      	blx	r3
   9fdac:	4603      	mov	r3, r0
   9fdae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9fdb2:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9fdb4:	e060      	b.n	9fe78 <Cl_dprep_controller+0x708>
						
	
			break;   */
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9fdb6:	4b18      	ldr	r3, [pc, #96]	; (9fe18 <Cl_dprep_controller+0x6a8>)
   9fdb8:	4798      	blx	r3
   9fdba:	4603      	mov	r3, r0
   9fdbc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9fdc0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9fdc4:	2b03      	cmp	r3, #3
   9fdc6:	d15a      	bne.n	9fe7e <Cl_dprep_controller+0x70e>
			{
				return CL_OK;//Cl_dprepretcode;   // manav03 added
   9fdc8:	2300      	movs	r3, #0
   9fdca:	f001 bab5 	b.w	a1338 <Cl_dprep_controller+0x1bc8>
   9fdce:	bf00      	nop
   9fdd0:	20072614 	.word	0x20072614
   9fdd4:	00093f5d 	.word	0x00093f5d
   9fdd8:	0009cbd5 	.word	0x0009cbd5
   9fddc:	00082ad9 	.word	0x00082ad9
   9fde0:	20071b6f 	.word	0x20071b6f
   9fde4:	20071b24 	.word	0x20071b24
   9fde8:	20071b28 	.word	0x20071b28
   9fdec:	0008fa01 	.word	0x0008fa01
   9fdf0:	0009b091 	.word	0x0009b091
   9fdf4:	0009b07d 	.word	0x0009b07d
   9fdf8:	0009b0b9 	.word	0x0009b0b9
   9fdfc:	000a2369 	.word	0x000a2369
   9fe00:	20071866 	.word	0x20071866
   9fe04:	000aa3ec 	.word	0x000aa3ec
   9fe08:	00088019 	.word	0x00088019
   9fe0c:	20070b64 	.word	0x20070b64
   9fe10:	20072350 	.word	0x20072350
   9fe14:	0009b701 	.word	0x0009b701
   9fe18:	000a2f35 	.word	0x000a2f35
			}
			break;
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9fe1c:	4bae      	ldr	r3, [pc, #696]	; (a00d8 <Cl_dprep_controller+0x968>)
   9fe1e:	4798      	blx	r3
   9fe20:	4603      	mov	r3, r0
   9fe22:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9fe26:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9fe2a:	2b03      	cmp	r3, #3
   9fe2c:	d12a      	bne.n	9fe84 <Cl_dprep_controller+0x714>
			{
				return CL_OK;//Cl_dprepretcode;   // // manav03 added
   9fe2e:	2300      	movs	r3, #0
   9fe30:	f001 ba82 	b.w	a1338 <Cl_dprep_controller+0x1bc8>
			}
			break;
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9fe34:	4ba9      	ldr	r3, [pc, #676]	; (a00dc <Cl_dprep_controller+0x96c>)
   9fe36:	4798      	blx	r3
   9fe38:	4603      	mov	r3, r0
   9fe3a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9fe3e:	e025      	b.n	9fe8c <Cl_dprep_controller+0x71c>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9fe40:	4ba7      	ldr	r3, [pc, #668]	; (a00e0 <Cl_dprep_controller+0x970>)
   9fe42:	781b      	ldrb	r3, [r3, #0]
   9fe44:	2b01      	cmp	r3, #1
   9fe46:	d020      	beq.n	9fe8a <Cl_dprep_controller+0x71a>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9fe48:	2206      	movs	r2, #6
   9fe4a:	49a6      	ldr	r1, [pc, #664]	; (a00e4 <Cl_dprep_controller+0x974>)
   9fe4c:	2018      	movs	r0, #24
   9fe4e:	4ba6      	ldr	r3, [pc, #664]	; (a00e8 <Cl_dprep_controller+0x978>)
   9fe50:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   9fe52:	4ba6      	ldr	r3, [pc, #664]	; (a00ec <Cl_dprep_controller+0x97c>)
   9fe54:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9fe56:	2100      	movs	r1, #0
   9fe58:	2001      	movs	r0, #1
   9fe5a:	4ba5      	ldr	r3, [pc, #660]	; (a00f0 <Cl_dprep_controller+0x980>)
   9fe5c:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9fe5e:	4ba5      	ldr	r3, [pc, #660]	; (a00f4 <Cl_dprep_controller+0x984>)
   9fe60:	2200      	movs	r2, #0
   9fe62:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9fe64:	e011      	b.n	9fe8a <Cl_dprep_controller+0x71a>
			default:
			break;
   9fe66:	bf00      	nop
   9fe68:	f001 ba64 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
										sv_cntrl_resetyellowalarm();
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;
   9fe6c:	bf00      	nop
   9fe6e:	f001 ba61 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
				break;
   9fe72:	bf00      	nop
   9fe74:	f001 ba5e 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
						break;
						default:
						break;
					}
				}
			break;
   9fe78:	bf00      	nop
   9fe7a:	f001 ba5b 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return CL_OK;//Cl_dprepretcode;   // manav03 added
			}
			break;
   9fe7e:	bf00      	nop
   9fe80:	f001 ba58 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return CL_OK;//Cl_dprepretcode;   // // manav03 added
			}
			break;
   9fe84:	bf00      	nop
   9fe86:	f001 ba55 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
				cl_dprep_activate_prime_related_alarms();
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9fe8a:	bf00      	nop
			default:
			break;
		}
		break;
   9fe8c:	f001 ba52 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   9fe90:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9fe94:	3b01      	subs	r3, #1
   9fe96:	2b22      	cmp	r3, #34	; 0x22
   9fe98:	f201 8245 	bhi.w	a1326 <Cl_dprep_controller+0x1bb6>
   9fe9c:	a201      	add	r2, pc, #4	; (adr r2, 9fea4 <Cl_dprep_controller+0x734>)
   9fe9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fea2:	bf00      	nop
   9fea4:	000a02e1 	.word	0x000a02e1
   9fea8:	000a1327 	.word	0x000a1327
   9feac:	000a005d 	.word	0x000a005d
   9feb0:	0009ffd3 	.word	0x0009ffd3
   9feb4:	000a1327 	.word	0x000a1327
   9feb8:	000a1327 	.word	0x000a1327
   9febc:	000a1327 	.word	0x000a1327
   9fec0:	000a1327 	.word	0x000a1327
   9fec4:	000a0273 	.word	0x000a0273
   9fec8:	000a02bf 	.word	0x000a02bf
   9fecc:	000a1327 	.word	0x000a1327
   9fed0:	000a1327 	.word	0x000a1327
   9fed4:	000a1327 	.word	0x000a1327
   9fed8:	000a1327 	.word	0x000a1327
   9fedc:	000a1327 	.word	0x000a1327
   9fee0:	000a1327 	.word	0x000a1327
   9fee4:	000a1327 	.word	0x000a1327
   9fee8:	000a1327 	.word	0x000a1327
   9feec:	000a00bb 	.word	0x000a00bb
   9fef0:	000a1327 	.word	0x000a1327
   9fef4:	000a034f 	.word	0x000a034f
   9fef8:	000a0197 	.word	0x000a0197
   9fefc:	000a0111 	.word	0x000a0111
   9ff00:	000a1327 	.word	0x000a1327
   9ff04:	000a027f 	.word	0x000a027f
   9ff08:	000a028b 	.word	0x000a028b
   9ff0c:	000a1327 	.word	0x000a1327
   9ff10:	000a1327 	.word	0x000a1327
   9ff14:	000a1327 	.word	0x000a1327
   9ff18:	000a0273 	.word	0x000a0273
   9ff1c:	0009ff9f 	.word	0x0009ff9f
   9ff20:	000a1327 	.word	0x000a1327
   9ff24:	0009ff95 	.word	0x0009ff95
   9ff28:	0009ff31 	.word	0x0009ff31
   9ff2c:	0009ff8b 	.word	0x0009ff8b
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   9ff30:	4b71      	ldr	r3, [pc, #452]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff32:	7e1b      	ldrb	r3, [r3, #24]
   9ff34:	2b00      	cmp	r3, #0
   9ff36:	f000 820d 	beq.w	a0354 <Cl_dprep_controller+0xbe4>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9ff3a:	4b6f      	ldr	r3, [pc, #444]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff3c:	795b      	ldrb	r3, [r3, #5]
   9ff3e:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9ff40:	4b6d      	ldr	r3, [pc, #436]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff42:	799b      	ldrb	r3, [r3, #6]
   9ff44:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9ff46:	4b6c      	ldr	r3, [pc, #432]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff48:	79db      	ldrb	r3, [r3, #7]
   9ff4a:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9ff4c:	4b6a      	ldr	r3, [pc, #424]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff4e:	7a1b      	ldrb	r3, [r3, #8]
   9ff50:	75fb      	strb	r3, [r7, #23]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9ff52:	4b69      	ldr	r3, [pc, #420]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff54:	791b      	ldrb	r3, [r3, #4]
   9ff56:	2b01      	cmp	r3, #1
   9ff58:	d104      	bne.n	9ff64 <Cl_dprep_controller+0x7f4>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9ff5a:	2100      	movs	r1, #0
   9ff5c:	2001      	movs	r0, #1
   9ff5e:	4b67      	ldr	r3, [pc, #412]	; (a00fc <Cl_dprep_controller+0x98c>)
   9ff60:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9ff62:	e1f7      	b.n	a0354 <Cl_dprep_controller+0xbe4>
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9ff64:	4b64      	ldr	r3, [pc, #400]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff66:	791b      	ldrb	r3, [r3, #4]
   9ff68:	2b02      	cmp	r3, #2
   9ff6a:	d104      	bne.n	9ff76 <Cl_dprep_controller+0x806>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   9ff6c:	2100      	movs	r1, #0
   9ff6e:	2004      	movs	r0, #4
   9ff70:	4b62      	ldr	r3, [pc, #392]	; (a00fc <Cl_dprep_controller+0x98c>)
   9ff72:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9ff74:	e1ee      	b.n	a0354 <Cl_dprep_controller+0xbe4>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9ff76:	4b60      	ldr	r3, [pc, #384]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ff78:	791b      	ldrb	r3, [r3, #4]
   9ff7a:	2b00      	cmp	r3, #0
   9ff7c:	f040 81ea 	bne.w	a0354 <Cl_dprep_controller+0xbe4>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   9ff80:	2100      	movs	r1, #0
   9ff82:	200b      	movs	r0, #11
   9ff84:	4b5d      	ldr	r3, [pc, #372]	; (a00fc <Cl_dprep_controller+0x98c>)
   9ff86:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9ff88:	e1e4      	b.n	a0354 <Cl_dprep_controller+0xbe4>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9ff8a:	2100      	movs	r1, #0
   9ff8c:	200d      	movs	r0, #13
   9ff8e:	4b5b      	ldr	r3, [pc, #364]	; (a00fc <Cl_dprep_controller+0x98c>)
   9ff90:	4798      	blx	r3
			break;
   9ff92:	e1f5      	b.n	a0380 <Cl_dprep_controller+0xc10>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9ff94:	2100      	movs	r1, #0
   9ff96:	2007      	movs	r0, #7
   9ff98:	4b58      	ldr	r3, [pc, #352]	; (a00fc <Cl_dprep_controller+0x98c>)
   9ff9a:	4798      	blx	r3
			break;
   9ff9c:	e1f0      	b.n	a0380 <Cl_dprep_controller+0xc10>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9ff9e:	4b50      	ldr	r3, [pc, #320]	; (a00e0 <Cl_dprep_controller+0x970>)
   9ffa0:	781b      	ldrb	r3, [r3, #0]
   9ffa2:	2b01      	cmp	r3, #1
   9ffa4:	d108      	bne.n	9ffb8 <Cl_dprep_controller+0x848>
   9ffa6:	4b4e      	ldr	r3, [pc, #312]	; (a00e0 <Cl_dprep_controller+0x970>)
   9ffa8:	781b      	ldrb	r3, [r3, #0]
   9ffaa:	2b05      	cmp	r3, #5
   9ffac:	d104      	bne.n	9ffb8 <Cl_dprep_controller+0x848>
   9ffae:	4b4c      	ldr	r3, [pc, #304]	; (a00e0 <Cl_dprep_controller+0x970>)
   9ffb0:	781b      	ldrb	r3, [r3, #0]
   9ffb2:	2b09      	cmp	r3, #9
   9ffb4:	f000 81d1 	beq.w	a035a <Cl_dprep_controller+0xbea>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9ffb8:	2206      	movs	r2, #6
   9ffba:	4951      	ldr	r1, [pc, #324]	; (a0100 <Cl_dprep_controller+0x990>)
   9ffbc:	2018      	movs	r0, #24
   9ffbe:	4b4a      	ldr	r3, [pc, #296]	; (a00e8 <Cl_dprep_controller+0x978>)
   9ffc0:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9ffc2:	2100      	movs	r1, #0
   9ffc4:	2005      	movs	r0, #5
   9ffc6:	4b4a      	ldr	r3, [pc, #296]	; (a00f0 <Cl_dprep_controller+0x980>)
   9ffc8:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9ffca:	4b4a      	ldr	r3, [pc, #296]	; (a00f4 <Cl_dprep_controller+0x984>)
   9ffcc:	2200      	movs	r2, #0
   9ffce:	70da      	strb	r2, [r3, #3]
						}
			break;
   9ffd0:	e1c3      	b.n	a035a <Cl_dprep_controller+0xbea>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9ffd2:	4b49      	ldr	r3, [pc, #292]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ffd4:	7e1b      	ldrb	r3, [r3, #24]
   9ffd6:	2b00      	cmp	r3, #0
   9ffd8:	f000 81c2 	beq.w	a0360 <Cl_dprep_controller+0xbf0>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ffdc:	4b46      	ldr	r3, [pc, #280]	; (a00f8 <Cl_dprep_controller+0x988>)
   9ffde:	791b      	ldrb	r3, [r3, #4]
   9ffe0:	2b02      	cmp	r3, #2
   9ffe2:	d002      	beq.n	9ffea <Cl_dprep_controller+0x87a>
   9ffe4:	2b04      	cmp	r3, #4
   9ffe6:	d01c      	beq.n	a0022 <Cl_dprep_controller+0x8b2>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9ffe8:	e037      	b.n	a005a <Cl_dprep_controller+0x8ea>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ffea:	2316      	movs	r3, #22
   9ffec:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9fff0:	2302      	movs	r3, #2
   9fff2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9fff6:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fffa:	3301      	adds	r3, #1
   9fffc:	4619      	mov	r1, r3
   9fffe:	2002      	movs	r0, #2
   a0000:	4b40      	ldr	r3, [pc, #256]	; (a0104 <Cl_dprep_controller+0x994>)
   a0002:	4798      	blx	r3
   a0004:	4603      	mov	r3, r0
   a0006:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a000a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a000e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0012:	2202      	movs	r2, #2
   a0014:	4618      	mov	r0, r3
   a0016:	4b34      	ldr	r3, [pc, #208]	; (a00e8 <Cl_dprep_controller+0x978>)
   a0018:	4798      	blx	r3
   a001a:	4603      	mov	r3, r0
   a001c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a0020:	e01b      	b.n	a005a <Cl_dprep_controller+0x8ea>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   a0022:	2316      	movs	r3, #22
   a0024:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a0028:	2304      	movs	r3, #4
   a002a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a002e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0032:	3301      	adds	r3, #1
   a0034:	4619      	mov	r1, r3
   a0036:	2004      	movs	r0, #4
   a0038:	4b32      	ldr	r3, [pc, #200]	; (a0104 <Cl_dprep_controller+0x994>)
   a003a:	4798      	blx	r3
   a003c:	4603      	mov	r3, r0
   a003e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0042:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a0046:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a004a:	2202      	movs	r2, #2
   a004c:	4618      	mov	r0, r3
   a004e:	4b26      	ldr	r3, [pc, #152]	; (a00e8 <Cl_dprep_controller+0x978>)
   a0050:	4798      	blx	r3
   a0052:	4603      	mov	r3, r0
   a0054:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a0058:	bf00      	nop
						default:
						break;
					}
				}
			break;
   a005a:	e181      	b.n	a0360 <Cl_dprep_controller+0xbf0>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   a005c:	4b26      	ldr	r3, [pc, #152]	; (a00f8 <Cl_dprep_controller+0x988>)
   a005e:	7e1b      	ldrb	r3, [r3, #24]
   a0060:	2b00      	cmp	r3, #0
   a0062:	f000 8180 	beq.w	a0366 <Cl_dprep_controller+0xbf6>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   a0066:	4b24      	ldr	r3, [pc, #144]	; (a00f8 <Cl_dprep_controller+0x988>)
   a0068:	791b      	ldrb	r3, [r3, #4]
   a006a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a006e:	2300      	movs	r3, #0
   a0070:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   a0074:	e011      	b.n	a009a <Cl_dprep_controller+0x92a>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   a0076:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   a007a:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   a007e:	3201      	adds	r2, #1
   a0080:	491d      	ldr	r1, [pc, #116]	; (a00f8 <Cl_dprep_controller+0x988>)
   a0082:	440a      	add	r2, r1
   a0084:	7912      	ldrb	r2, [r2, #4]
   a0086:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   a008a:	440b      	add	r3, r1
   a008c:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a0090:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   a0094:	3301      	adds	r3, #1
   a0096:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   a009a:	4b17      	ldr	r3, [pc, #92]	; (a00f8 <Cl_dprep_controller+0x988>)
   a009c:	78db      	ldrb	r3, [r3, #3]
   a009e:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   a00a2:	429a      	cmp	r2, r3
   a00a4:	d3e7      	bcc.n	a0076 <Cl_dprep_controller+0x906>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   a00a6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   a00aa:	f897 0093 	ldrb.w	r0, [r7, #147]	; 0x93
   a00ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
   a00b2:	ca06      	ldmia	r2, {r1, r2}
   a00b4:	4c14      	ldr	r4, [pc, #80]	; (a0108 <Cl_dprep_controller+0x998>)
   a00b6:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   a00b8:	e155      	b.n	a0366 <Cl_dprep_controller+0xbf6>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   a00ba:	4b14      	ldr	r3, [pc, #80]	; (a010c <Cl_dprep_controller+0x99c>)
   a00bc:	881b      	ldrh	r3, [r3, #0]
   a00be:	3301      	adds	r3, #1
   a00c0:	b29a      	uxth	r2, r3
   a00c2:	4b12      	ldr	r3, [pc, #72]	; (a010c <Cl_dprep_controller+0x99c>)
   a00c4:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   a00c6:	4b11      	ldr	r3, [pc, #68]	; (a010c <Cl_dprep_controller+0x99c>)
   a00c8:	881b      	ldrh	r3, [r3, #0]
   a00ca:	2b02      	cmp	r3, #2
   a00cc:	f040 814e 	bne.w	a036c <Cl_dprep_controller+0xbfc>
			{
				cl_50ms_timer =0;
   a00d0:	4b0e      	ldr	r3, [pc, #56]	; (a010c <Cl_dprep_controller+0x99c>)
   a00d2:	2200      	movs	r2, #0
   a00d4:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   a00d6:	e149      	b.n	a036c <Cl_dprep_controller+0xbfc>
   a00d8:	000a2f35 	.word	0x000a2f35
   a00dc:	000a16b9 	.word	0x000a16b9
   a00e0:	20071866 	.word	0x20071866
   a00e4:	000aa3f4 	.word	0x000aa3f4
   a00e8:	0009cbd5 	.word	0x0009cbd5
   a00ec:	00088a91 	.word	0x00088a91
   a00f0:	00088019 	.word	0x00088019
   a00f4:	20070b64 	.word	0x20070b64
   a00f8:	20072350 	.word	0x20072350
   a00fc:	00094729 	.word	0x00094729
   a0100:	000aa3ec 	.word	0x000aa3ec
   a0104:	0009b701 	.word	0x0009b701
   a0108:	000a252d 	.word	0x000a252d
   a010c:	20071b6c 	.word	0x20071b6c
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   a0110:	4bad      	ldr	r3, [pc, #692]	; (a03c8 <Cl_dprep_controller+0xc58>)
   a0112:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   a0114:	f107 0332 	add.w	r3, r7, #50	; 0x32
   a0118:	4619      	mov	r1, r3
   a011a:	2014      	movs	r0, #20
   a011c:	4bab      	ldr	r3, [pc, #684]	; (a03cc <Cl_dprep_controller+0xc5c>)
   a011e:	4798      	blx	r3
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
// 				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 				temp_temp3 = temp_temp3- 0.4;										// sensor offset
				temp3_cel = (float)temp_temp3/100;
   a0120:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   a0122:	4bab      	ldr	r3, [pc, #684]	; (a03d0 <Cl_dprep_controller+0xc60>)
   a0124:	4610      	mov	r0, r2
   a0126:	4798      	blx	r3
   a0128:	4602      	mov	r2, r0
   a012a:	4baa      	ldr	r3, [pc, #680]	; (a03d4 <Cl_dprep_controller+0xc64>)
   a012c:	49aa      	ldr	r1, [pc, #680]	; (a03d8 <Cl_dprep_controller+0xc68>)
   a012e:	4610      	mov	r0, r2
   a0130:	4798      	blx	r3
   a0132:	4603      	mov	r3, r0
   a0134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
// 						temp3_cel = temp_temp3;
// 					}
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   a0138:	4ba8      	ldr	r3, [pc, #672]	; (a03dc <Cl_dprep_controller+0xc6c>)
   a013a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   a013e:	4798      	blx	r3
   a0140:	4ca7      	ldr	r4, [pc, #668]	; (a03e0 <Cl_dprep_controller+0xc70>)
   a0142:	a39d      	add	r3, pc, #628	; (adr r3, a03b8 <Cl_dprep_controller+0xc48>)
   a0144:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0148:	47a0      	blx	r4
   a014a:	4603      	mov	r3, r0
   a014c:	2b00      	cmp	r3, #0
   a014e:	d01a      	beq.n	a0186 <Cl_dprep_controller+0xa16>
   a0150:	4ba2      	ldr	r3, [pc, #648]	; (a03dc <Cl_dprep_controller+0xc6c>)
   a0152:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   a0156:	4798      	blx	r3
   a0158:	4ca2      	ldr	r4, [pc, #648]	; (a03e4 <Cl_dprep_controller+0xc74>)
   a015a:	a399      	add	r3, pc, #612	; (adr r3, a03c0 <Cl_dprep_controller+0xc50>)
   a015c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0160:	47a0      	blx	r4
   a0162:	4603      	mov	r3, r0
   a0164:	2b00      	cmp	r3, #0
   a0166:	d00e      	beq.n	a0186 <Cl_dprep_controller+0xa16>
				{
					if( cl_temp3_37stable == true) 
   a0168:	4b9f      	ldr	r3, [pc, #636]	; (a03e8 <Cl_dprep_controller+0xc78>)
   a016a:	781b      	ldrb	r3, [r3, #0]
   a016c:	2b00      	cmp	r3, #0
   a016e:	d003      	beq.n	a0178 <Cl_dprep_controller+0xa08>
					{
					 cl_temp3_stable_confirm = true;	
   a0170:	4b9e      	ldr	r3, [pc, #632]	; (a03ec <Cl_dprep_controller+0xc7c>)
   a0172:	2201      	movs	r2, #1
   a0174:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   a0176:	e00d      	b.n	a0194 <Cl_dprep_controller+0xa24>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   a0178:	4b9b      	ldr	r3, [pc, #620]	; (a03e8 <Cl_dprep_controller+0xc78>)
   a017a:	2201      	movs	r2, #1
   a017c:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   a017e:	4b9b      	ldr	r3, [pc, #620]	; (a03ec <Cl_dprep_controller+0xc7c>)
   a0180:	2200      	movs	r2, #0
   a0182:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   a0184:	e006      	b.n	a0194 <Cl_dprep_controller+0xa24>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   a0186:	4b98      	ldr	r3, [pc, #608]	; (a03e8 <Cl_dprep_controller+0xc78>)
   a0188:	2200      	movs	r2, #0
   a018a:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   a018c:	4b97      	ldr	r3, [pc, #604]	; (a03ec <Cl_dprep_controller+0xc7c>)
   a018e:	2200      	movs	r2, #0
   a0190:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   a0192:	e0f5      	b.n	a0380 <Cl_dprep_controller+0xc10>
   a0194:	e0f4      	b.n	a0380 <Cl_dprep_controller+0xc10>
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   a0196:	4b96      	ldr	r3, [pc, #600]	; (a03f0 <Cl_dprep_controller+0xc80>)
   a0198:	f9b3 3000 	ldrsh.w	r3, [r3]
   a019c:	b29b      	uxth	r3, r3
   a019e:	3301      	adds	r3, #1
   a01a0:	b29b      	uxth	r3, r3
   a01a2:	b21a      	sxth	r2, r3
   a01a4:	4b92      	ldr	r3, [pc, #584]	; (a03f0 <Cl_dprep_controller+0xc80>)
   a01a6:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   a01a8:	4b91      	ldr	r3, [pc, #580]	; (a03f0 <Cl_dprep_controller+0xc80>)
   a01aa:	f9b3 3000 	ldrsh.w	r3, [r3]
   a01ae:	2b3c      	cmp	r3, #60	; 0x3c
   a01b0:	d101      	bne.n	a01b6 <Cl_dprep_controller+0xa46>
					{
						UpdateDprepFillingMinuteTick();
   a01b2:	4b90      	ldr	r3, [pc, #576]	; (a03f4 <Cl_dprep_controller+0xc84>)
   a01b4:	4798      	blx	r3
					}
					
					if(Cl_Dprep_filling_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   a01b6:	4b8e      	ldr	r3, [pc, #568]	; (a03f0 <Cl_dprep_controller+0xc80>)
   a01b8:	f9b3 3000 	ldrsh.w	r3, [r3]
   a01bc:	2b1e      	cmp	r3, #30
   a01be:	d114      	bne.n	a01ea <Cl_dprep_controller+0xa7a>
						
						
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a01c0:	2101      	movs	r1, #1
   a01c2:	200c      	movs	r0, #12
   a01c4:	4b8c      	ldr	r3, [pc, #560]	; (a03f8 <Cl_dprep_controller+0xc88>)
   a01c6:	4798      	blx	r3
   a01c8:	4603      	mov	r3, r0
   a01ca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a01ce:	2101      	movs	r1, #1
   a01d0:	200d      	movs	r0, #13
   a01d2:	4b89      	ldr	r3, [pc, #548]	; (a03f8 <Cl_dprep_controller+0xc88>)
   a01d4:	4798      	blx	r3
   a01d6:	4603      	mov	r3, r0
   a01d8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a01dc:	2101      	movs	r1, #1
   a01de:	200e      	movs	r0, #14
   a01e0:	4b85      	ldr	r3, [pc, #532]	; (a03f8 <Cl_dprep_controller+0xc88>)
   a01e2:	4798      	blx	r3
   a01e4:	4603      	mov	r3, r0
   a01e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						
						
					}
					
					
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   a01ea:	2004      	movs	r0, #4
   a01ec:	4b83      	ldr	r3, [pc, #524]	; (a03fc <Cl_dprep_controller+0xc8c>)
   a01ee:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
				//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   a01f0:	4b83      	ldr	r3, [pc, #524]	; (a0400 <Cl_dprep_controller+0xc90>)
   a01f2:	4798      	blx	r3
   a01f4:	4603      	mov	r3, r0
   a01f6:	2b00      	cmp	r3, #0
   a01f8:	f040 80bb 	bne.w	a0372 <Cl_dprep_controller+0xc02>
					{
						sv_cntrl_setgreenalarm();
   a01fc:	4b81      	ldr	r3, [pc, #516]	; (a0404 <Cl_dprep_controller+0xc94>)
   a01fe:	4798      	blx	r3
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   a0200:	4b81      	ldr	r3, [pc, #516]	; (a0408 <Cl_dprep_controller+0xc98>)
   a0202:	695b      	ldr	r3, [r3, #20]
   a0204:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						Cl_Uint16Type potvalue = 0;
   a0208:	2300      	movs	r3, #0
   a020a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   a020e:	4b7f      	ldr	r3, [pc, #508]	; (a040c <Cl_dprep_controller+0xc9c>)
   a0210:	781b      	ldrb	r3, [r3, #0]
   a0212:	2b08      	cmp	r3, #8
   a0214:	d108      	bne.n	a0228 <Cl_dprep_controller+0xab8>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							 sv_cntrl_enable_bypass();
   a0216:	4b7e      	ldr	r3, [pc, #504]	; (a0410 <Cl_dprep_controller+0xca0>)
   a0218:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a021a:	4b7e      	ldr	r3, [pc, #504]	; (a0414 <Cl_dprep_controller+0xca4>)
   a021c:	2201      	movs	r2, #1
   a021e:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   a0220:	4b7d      	ldr	r3, [pc, #500]	; (a0418 <Cl_dprep_controller+0xca8>)
   a0222:	2205      	movs	r2, #5
   a0224:	701a      	strb	r2, [r3, #0]
   a0226:	e007      	b.n	a0238 <Cl_dprep_controller+0xac8>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							sv_cntrl_enable_bypass();
   a0228:	4b79      	ldr	r3, [pc, #484]	; (a0410 <Cl_dprep_controller+0xca0>)
   a022a:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a022c:	4b79      	ldr	r3, [pc, #484]	; (a0414 <Cl_dprep_controller+0xca4>)
   a022e:	2201      	movs	r2, #1
   a0230:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   a0232:	4b79      	ldr	r3, [pc, #484]	; (a0418 <Cl_dprep_controller+0xca8>)
   a0234:	2203      	movs	r2, #3
   a0236:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   a0238:	231f      	movs	r3, #31
   a023a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a023e:	2301      	movs	r3, #1
   a0240:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						Cl_Dprep_filling_secondscounter = 0;
   a0244:	4b6a      	ldr	r3, [pc, #424]	; (a03f0 <Cl_dprep_controller+0xc80>)
   a0246:	2200      	movs	r2, #0
   a0248:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   a024a:	4b74      	ldr	r3, [pc, #464]	; (a041c <Cl_dprep_controller+0xcac>)
   a024c:	2200      	movs	r2, #0
   a024e:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   a0250:	4b73      	ldr	r3, [pc, #460]	; (a0420 <Cl_dprep_controller+0xcb0>)
   a0252:	2200      	movs	r2, #0
   a0254:	801a      	strh	r2, [r3, #0]

						Cl_deactivate_prep_alarms();
   a0256:	4b73      	ldr	r3, [pc, #460]	; (a0424 <Cl_dprep_controller+0xcb4>)
   a0258:	4798      	blx	r3

					//	Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
						// Appy treatment cond alarm and temerature alarm  limits here
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   a025a:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a025e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0262:	2201      	movs	r2, #1
   a0264:	4618      	mov	r0, r3
   a0266:	4b70      	ldr	r3, [pc, #448]	; (a0428 <Cl_dprep_controller+0xcb8>)
   a0268:	4798      	blx	r3
   a026a:	4603      	mov	r3, r0
   a026c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
					
			break;
   a0270:	e07f      	b.n	a0372 <Cl_dprep_controller+0xc02>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   a0272:	4b6e      	ldr	r3, [pc, #440]	; (a042c <Cl_dprep_controller+0xcbc>)
   a0274:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   a0276:	4b68      	ldr	r3, [pc, #416]	; (a0418 <Cl_dprep_controller+0xca8>)
   a0278:	220b      	movs	r2, #11
   a027a:	701a      	strb	r2, [r3, #0]
			break;
   a027c:	e080      	b.n	a0380 <Cl_dprep_controller+0xc10>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a027e:	4b6c      	ldr	r3, [pc, #432]	; (a0430 <Cl_dprep_controller+0xcc0>)
   a0280:	4798      	blx	r3
   a0282:	4603      	mov	r3, r0
   a0284:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   a0288:	e07a      	b.n	a0380 <Cl_dprep_controller+0xc10>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a028a:	f107 0337 	add.w	r3, r7, #55	; 0x37
   a028e:	4619      	mov	r1, r3
   a0290:	203c      	movs	r0, #60	; 0x3c
   a0292:	4b68      	ldr	r3, [pc, #416]	; (a0434 <Cl_dprep_controller+0xcc4>)
   a0294:	4798      	blx	r3
					if(alarmstatus1)
   a0296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a029a:	2b00      	cmp	r3, #0
   a029c:	d002      	beq.n	a02a4 <Cl_dprep_controller+0xb34>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   a029e:	4b66      	ldr	r3, [pc, #408]	; (a0438 <Cl_dprep_controller+0xcc8>)
   a02a0:	2201      	movs	r2, #1
   a02a2:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   a02a4:	f107 0336 	add.w	r3, r7, #54	; 0x36
   a02a8:	4619      	mov	r1, r3
   a02aa:	2011      	movs	r0, #17
   a02ac:	4b61      	ldr	r3, [pc, #388]	; (a0434 <Cl_dprep_controller+0xcc4>)
   a02ae:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a02b0:	f107 0335 	add.w	r3, r7, #53	; 0x35
   a02b4:	4619      	mov	r1, r3
   a02b6:	200c      	movs	r0, #12
   a02b8:	4b5e      	ldr	r3, [pc, #376]	; (a0434 <Cl_dprep_controller+0xcc4>)
   a02ba:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   a02bc:	e060      	b.n	a0380 <Cl_dprep_controller+0xc10>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a02be:	4b53      	ldr	r3, [pc, #332]	; (a040c <Cl_dprep_controller+0xc9c>)
   a02c0:	781b      	ldrb	r3, [r3, #0]
   a02c2:	2b01      	cmp	r3, #1
   a02c4:	d058      	beq.n	a0378 <Cl_dprep_controller+0xc08>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a02c6:	2206      	movs	r2, #6
   a02c8:	495c      	ldr	r1, [pc, #368]	; (a043c <Cl_dprep_controller+0xccc>)
   a02ca:	2018      	movs	r0, #24
   a02cc:	4b56      	ldr	r3, [pc, #344]	; (a0428 <Cl_dprep_controller+0xcb8>)
   a02ce:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a02d0:	2100      	movs	r1, #0
   a02d2:	2001      	movs	r0, #1
   a02d4:	4b5a      	ldr	r3, [pc, #360]	; (a0440 <Cl_dprep_controller+0xcd0>)
   a02d6:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a02d8:	4b5a      	ldr	r3, [pc, #360]	; (a0444 <Cl_dprep_controller+0xcd4>)
   a02da:	2200      	movs	r2, #0
   a02dc:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   a02de:	e04b      	b.n	a0378 <Cl_dprep_controller+0xc08>
			
				case EVENT_DPREP_CLR_ALARM:             // manav03 added
								
											if(powerFailureFlag == 1){
   a02e0:	4b59      	ldr	r3, [pc, #356]	; (a0448 <Cl_dprep_controller+0xcd8>)
   a02e2:	681b      	ldr	r3, [r3, #0]
   a02e4:	2b01      	cmp	r3, #1
   a02e6:	d11e      	bne.n	a0326 <Cl_dprep_controller+0xbb6>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a02e8:	4958      	ldr	r1, [pc, #352]	; (a044c <Cl_dprep_controller+0xcdc>)
   a02ea:	2024      	movs	r0, #36	; 0x24
   a02ec:	4b37      	ldr	r3, [pc, #220]	; (a03cc <Cl_dprep_controller+0xc5c>)
   a02ee:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a02f0:	4b56      	ldr	r3, [pc, #344]	; (a044c <Cl_dprep_controller+0xcdc>)
   a02f2:	881b      	ldrh	r3, [r3, #0]
   a02f4:	2b00      	cmp	r3, #0
   a02f6:	d142      	bne.n	a037e <Cl_dprep_controller+0xc0e>
						
						powerFailureFlag = 0;
   a02f8:	4b53      	ldr	r3, [pc, #332]	; (a0448 <Cl_dprep_controller+0xcd8>)
   a02fa:	2200      	movs	r2, #0
   a02fc:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a02fe:	2351      	movs	r3, #81	; 0x51
   a0300:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a0304:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0308:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a030c:	2200      	movs	r2, #0
   a030e:	4618      	mov	r0, r3
   a0310:	4b45      	ldr	r3, [pc, #276]	; (a0428 <Cl_dprep_controller+0xcb8>)
   a0312:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a0314:	4b4e      	ldr	r3, [pc, #312]	; (a0450 <Cl_dprep_controller+0xce0>)
   a0316:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a0318:	4b4e      	ldr	r3, [pc, #312]	; (a0454 <Cl_dprep_controller+0xce4>)
   a031a:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a031c:	4b4e      	ldr	r3, [pc, #312]	; (a0458 <Cl_dprep_controller+0xce8>)
   a031e:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a0320:	4b29      	ldr	r3, [pc, #164]	; (a03c8 <Cl_dprep_controller+0xc58>)
   a0322:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;
   a0324:	e02b      	b.n	a037e <Cl_dprep_controller+0xc0e>
					}
					}
					else{			
					
								
								command = CON_TX_COMMAND_ALARM_CLEARED;
   a0326:	2351      	movs	r3, #81	; 0x51
   a0328:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							    Cl_SendDatatoconsole(command,&data,0);
   a032c:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0330:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0334:	2200      	movs	r2, #0
   a0336:	4618      	mov	r0, r3
   a0338:	4b3b      	ldr	r3, [pc, #236]	; (a0428 <Cl_dprep_controller+0xcb8>)
   a033a:	4798      	blx	r3
							
					
										sv_cntrl_resetyellowalarm();
   a033c:	4b44      	ldr	r3, [pc, #272]	; (a0450 <Cl_dprep_controller+0xce0>)
   a033e:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a0340:	4b44      	ldr	r3, [pc, #272]	; (a0454 <Cl_dprep_controller+0xce4>)
   a0342:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a0344:	4b44      	ldr	r3, [pc, #272]	; (a0458 <Cl_dprep_controller+0xce8>)
   a0346:	4798      	blx	r3
										Cl_Dprep_ResetAlertsforReassertion();
   a0348:	4b1f      	ldr	r3, [pc, #124]	; (a03c8 <Cl_dprep_controller+0xc58>)
   a034a:	4798      	blx	r3
					}
								break;
   a034c:	e017      	b.n	a037e <Cl_dprep_controller+0xc0e>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   a034e:	bf00      	nop
   a0350:	f000 bfe9 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
							}
								
						}
				
			
			break;
   a0354:	bf00      	nop
   a0356:	f000 bfe6 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
			break;
   a035a:	bf00      	nop
   a035c:	f000 bfe3 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
						break;
						default:
						break;
					}
				}
			break;
   a0360:	bf00      	nop
   a0362:	f000 bfe0 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
						 
						 
						 
					 }
	
			break;
   a0366:	bf00      	nop
   a0368:	f000 bfdd 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
			{
				cl_50ms_timer =0;
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   a036c:	bf00      	nop
   a036e:	f000 bfda 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
					}
					
			break;
   a0372:	bf00      	nop
   a0374:	f000 bfd7 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   a0378:	bf00      	nop
   a037a:	f000 bfd4 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
										sv_cntrl_resetyellowalarm();
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;
   a037e:	bf00      	nop

		}
		break;
   a0380:	f000 bfd1 	b.w	a1326 <Cl_dprep_controller+0x1bb6>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   a0384:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a0388:	2b17      	cmp	r3, #23
   a038a:	d00c      	beq.n	a03a6 <Cl_dprep_controller+0xc36>
   a038c:	2b19      	cmp	r3, #25
   a038e:	d069      	beq.n	a0464 <Cl_dprep_controller+0xcf4>
   a0390:	2b0d      	cmp	r3, #13
   a0392:	d000      	beq.n	a0396 <Cl_dprep_controller+0xc26>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   a0394:	e06c      	b.n	a0470 <Cl_dprep_controller+0xd00>
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   a0396:	4b31      	ldr	r3, [pc, #196]	; (a045c <Cl_dprep_controller+0xcec>)
   a0398:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   a039a:	4b31      	ldr	r3, [pc, #196]	; (a0460 <Cl_dprep_controller+0xcf0>)
   a039c:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   a039e:	4b1e      	ldr	r3, [pc, #120]	; (a0418 <Cl_dprep_controller+0xca8>)
   a03a0:	2206      	movs	r2, #6
   a03a2:	701a      	strb	r2, [r3, #0]
								 
						break;
   a03a4:	e064      	b.n	a0470 <Cl_dprep_controller+0xd00>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   a03a6:	4b08      	ldr	r3, [pc, #32]	; (a03c8 <Cl_dprep_controller+0xc58>)
   a03a8:	4798      	blx	r3
   a03aa:	4603      	mov	r3, r0
   a03ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a03b0:	e05e      	b.n	a0470 <Cl_dprep_controller+0xd00>
   a03b2:	bf00      	nop
   a03b4:	f3af 8000 	nop.w
   a03b8:	66666666 	.word	0x66666666
   a03bc:	40426666 	.word	0x40426666
   a03c0:	9999999a 	.word	0x9999999a
   a03c4:	40429999 	.word	0x40429999
   a03c8:	000a2369 	.word	0x000a2369
   a03cc:	0008fa01 	.word	0x0008fa01
   a03d0:	000a7ef9 	.word	0x000a7ef9
   a03d4:	000a8111 	.word	0x000a8111
   a03d8:	42c80000 	.word	0x42c80000
   a03dc:	000a7681 	.word	0x000a7681
   a03e0:	000a7c49 	.word	0x000a7c49
   a03e4:	000a7c0d 	.word	0x000a7c0d
   a03e8:	20071b6b 	.word	0x20071b6b
   a03ec:	20071b68 	.word	0x20071b68
   a03f0:	20071b4e 	.word	0x20071b4e
   a03f4:	000a1e09 	.word	0x000a1e09
   a03f8:	000829e5 	.word	0x000829e5
   a03fc:	000a1ead 	.word	0x000a1ead
   a0400:	000a1bb1 	.word	0x000a1bb1
   a0404:	0009b055 	.word	0x0009b055
   a0408:	20072614 	.word	0x20072614
   a040c:	20071866 	.word	0x20071866
   a0410:	0009af8d 	.word	0x0009af8d
   a0414:	20071b70 	.word	0x20071b70
   a0418:	20071b6f 	.word	0x20071b6f
   a041c:	20071b50 	.word	0x20071b50
   a0420:	20071b52 	.word	0x20071b52
   a0424:	000a38d9 	.word	0x000a38d9
   a0428:	0009cbd5 	.word	0x0009cbd5
   a042c:	000a3829 	.word	0x000a3829
   a0430:	000a16b9 	.word	0x000a16b9
   a0434:	00082bc1 	.word	0x00082bc1
   a0438:	20071b6c 	.word	0x20071b6c
   a043c:	000aa3f4 	.word	0x000aa3f4
   a0440:	00088019 	.word	0x00088019
   a0444:	20070b64 	.word	0x20070b64
   a0448:	20071b24 	.word	0x20071b24
   a044c:	20071b28 	.word	0x20071b28
   a0450:	0009b091 	.word	0x0009b091
   a0454:	0009b07d 	.word	0x0009b07d
   a0458:	0009b0b9 	.word	0x0009b0b9
   a045c:	0009af71 	.word	0x0009af71
   a0460:	0009afa9 	.word	0x0009afa9
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0464:	4bbc      	ldr	r3, [pc, #752]	; (a0758 <Cl_dprep_controller+0xfe8>)
   a0466:	4798      	blx	r3
   a0468:	4603      	mov	r3, r0
   a046a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a046e:	bf00      	nop
						default:break;
					}
		break;
   a0470:	f000 bf60 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   a0474:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a0478:	3b01      	subs	r3, #1
   a047a:	2b1c      	cmp	r3, #28
   a047c:	f200 80a6 	bhi.w	a05cc <Cl_dprep_controller+0xe5c>
   a0480:	a201      	add	r2, pc, #4	; (adr r2, a0488 <Cl_dprep_controller+0xd18>)
   a0482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0486:	bf00      	nop
   a0488:	000a0557 	.word	0x000a0557
   a048c:	000a04fd 	.word	0x000a04fd
   a0490:	000a05cd 	.word	0x000a05cd
   a0494:	000a05cd 	.word	0x000a05cd
   a0498:	000a05cd 	.word	0x000a05cd
   a049c:	000a05cd 	.word	0x000a05cd
   a04a0:	000a05cd 	.word	0x000a05cd
   a04a4:	000a05cd 	.word	0x000a05cd
   a04a8:	000a05cd 	.word	0x000a05cd
   a04ac:	000a05cd 	.word	0x000a05cd
   a04b0:	000a05cd 	.word	0x000a05cd
   a04b4:	000a05cd 	.word	0x000a05cd
   a04b8:	000a050d 	.word	0x000a050d
   a04bc:	000a05cd 	.word	0x000a05cd
   a04c0:	000a05cd 	.word	0x000a05cd
   a04c4:	000a05cd 	.word	0x000a05cd
   a04c8:	000a05cd 	.word	0x000a05cd
   a04cc:	000a05cd 	.word	0x000a05cd
   a04d0:	000a05cd 	.word	0x000a05cd
   a04d4:	000a05cd 	.word	0x000a05cd
   a04d8:	000a05cd 	.word	0x000a05cd
   a04dc:	000a05cd 	.word	0x000a05cd
   a04e0:	000a053f 	.word	0x000a053f
   a04e4:	000a05cd 	.word	0x000a05cd
   a04e8:	000a054b 	.word	0x000a054b
   a04ec:	000a05cd 	.word	0x000a05cd
   a04f0:	000a05cd 	.word	0x000a05cd
   a04f4:	000a05cd 	.word	0x000a05cd
   a04f8:	000a0525 	.word	0x000a0525
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   a04fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   a0500:	2b03      	cmp	r3, #3
   a0502:	d166      	bne.n	a05d2 <Cl_dprep_controller+0xe62>
							{
								return Cl_dprepretcode;
   a0504:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   a0508:	f000 bf16 	b.w	a1338 <Cl_dprep_controller+0x1bc8>
							}
						break;
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
							sv_prop_startmixing();
   a050c:	4b93      	ldr	r3, [pc, #588]	; (a075c <Cl_dprep_controller+0xfec>)
   a050e:	4798      	blx	r3
							Cl_bc_controller(BC_EVENT_RESUME);
   a0510:	200b      	movs	r0, #11
   a0512:	4b93      	ldr	r3, [pc, #588]	; (a0760 <Cl_dprep_controller+0xff0>)
   a0514:	4798      	blx	r3
								Cl_Dprep_StartDialyserPrime();
   a0516:	4b93      	ldr	r3, [pc, #588]	; (a0764 <Cl_dprep_controller+0xff4>)
   a0518:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a051a:	4b93      	ldr	r3, [pc, #588]	; (a0768 <Cl_dprep_controller+0xff8>)
   a051c:	4798      	blx	r3
								 sv_prop_startmixing();
   a051e:	4b8f      	ldr	r3, [pc, #572]	; (a075c <Cl_dprep_controller+0xfec>)
   a0520:	4798      	blx	r3
						break;
   a0522:	e05d      	b.n	a05e0 <Cl_dprep_controller+0xe70>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   a0524:	4b91      	ldr	r3, [pc, #580]	; (a076c <Cl_dprep_controller+0xffc>)
   a0526:	4798      	blx	r3
   a0528:	4603      	mov	r3, r0
   a052a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if(Cl_dprepretcode == CL_REJECTED)
   a052e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   a0532:	2b03      	cmp	r3, #3
   a0534:	d150      	bne.n	a05d8 <Cl_dprep_controller+0xe68>
							{
								return Cl_dprepretcode;
   a0536:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   a053a:	f000 befd 	b.w	a1338 <Cl_dprep_controller+0x1bc8>
							}
						break;
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   a053e:	4b8c      	ldr	r3, [pc, #560]	; (a0770 <Cl_dprep_controller+0x1000>)
   a0540:	4798      	blx	r3
   a0542:	4603      	mov	r3, r0
   a0544:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a0548:	e04a      	b.n	a05e0 <Cl_dprep_controller+0xe70>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a054a:	4b83      	ldr	r3, [pc, #524]	; (a0758 <Cl_dprep_controller+0xfe8>)
   a054c:	4798      	blx	r3
   a054e:	4603      	mov	r3, r0
   a0550:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a0554:	e044      	b.n	a05e0 <Cl_dprep_controller+0xe70>
						case EVENT_DPREP_CLR_ALARM:
					
					if(powerFailureFlag == 1){
   a0556:	4b87      	ldr	r3, [pc, #540]	; (a0774 <Cl_dprep_controller+0x1004>)
   a0558:	681b      	ldr	r3, [r3, #0]
   a055a:	2b01      	cmp	r3, #1
   a055c:	d120      	bne.n	a05a0 <Cl_dprep_controller+0xe30>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a055e:	4986      	ldr	r1, [pc, #536]	; (a0778 <Cl_dprep_controller+0x1008>)
   a0560:	2024      	movs	r0, #36	; 0x24
   a0562:	4b86      	ldr	r3, [pc, #536]	; (a077c <Cl_dprep_controller+0x100c>)
   a0564:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0566:	4b84      	ldr	r3, [pc, #528]	; (a0778 <Cl_dprep_controller+0x1008>)
   a0568:	881b      	ldrh	r3, [r3, #0]
   a056a:	2b00      	cmp	r3, #0
   a056c:	d137      	bne.n	a05de <Cl_dprep_controller+0xe6e>
						
						powerFailureFlag = 0;
   a056e:	4b81      	ldr	r3, [pc, #516]	; (a0774 <Cl_dprep_controller+0x1004>)
   a0570:	2200      	movs	r2, #0
   a0572:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0574:	2351      	movs	r3, #81	; 0x51
   a0576:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a057a:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a057e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0582:	2200      	movs	r2, #0
   a0584:	4618      	mov	r0, r3
   a0586:	4b7e      	ldr	r3, [pc, #504]	; (a0780 <Cl_dprep_controller+0x1010>)
   a0588:	4798      	blx	r3
						sv_cntrl_resetyellowalarm();
   a058a:	4b7e      	ldr	r3, [pc, #504]	; (a0784 <Cl_dprep_controller+0x1014>)
   a058c:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a058e:	4b7e      	ldr	r3, [pc, #504]	; (a0788 <Cl_dprep_controller+0x1018>)
   a0590:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a0592:	4b7e      	ldr	r3, [pc, #504]	; (a078c <Cl_dprep_controller+0x101c>)
   a0594:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a0596:	4b76      	ldr	r3, [pc, #472]	; (a0770 <Cl_dprep_controller+0x1000>)
   a0598:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   a059a:	4b7d      	ldr	r3, [pc, #500]	; (a0790 <Cl_dprep_controller+0x1020>)
   a059c:	4798      	blx	r3
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
					}
						
						break;						
   a059e:	e01e      	b.n	a05de <Cl_dprep_controller+0xe6e>
						sv_cntrl_disable_bypass();
					}
					}
					else{
						
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a05a0:	2351      	movs	r3, #81	; 0x51
   a05a2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a05a6:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a05aa:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a05ae:	2200      	movs	r2, #0
   a05b0:	4618      	mov	r0, r3
   a05b2:	4b73      	ldr	r3, [pc, #460]	; (a0780 <Cl_dprep_controller+0x1010>)
   a05b4:	4798      	blx	r3
						sv_cntrl_resetyellowalarm();
   a05b6:	4b73      	ldr	r3, [pc, #460]	; (a0784 <Cl_dprep_controller+0x1014>)
   a05b8:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a05ba:	4b73      	ldr	r3, [pc, #460]	; (a0788 <Cl_dprep_controller+0x1018>)
   a05bc:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a05be:	4b73      	ldr	r3, [pc, #460]	; (a078c <Cl_dprep_controller+0x101c>)
   a05c0:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a05c2:	4b6b      	ldr	r3, [pc, #428]	; (a0770 <Cl_dprep_controller+0x1000>)
   a05c4:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   a05c6:	4b72      	ldr	r3, [pc, #456]	; (a0790 <Cl_dprep_controller+0x1020>)
   a05c8:	4798      	blx	r3
					}
						
						break;						
   a05ca:	e008      	b.n	a05de <Cl_dprep_controller+0xe6e>
// 
// 								}
// 							}
// 						}
						break;
						default:break;
   a05cc:	bf00      	nop
   a05ce:	f000 beb1 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   a05d2:	bf00      	nop
   a05d4:	f000 beae 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   a05d8:	bf00      	nop
   a05da:	f000 beab 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
					}
						
						break;						
   a05de:	bf00      	nop
// 							}
// 						}
						break;
						default:break;
					}
		break;
   a05e0:	f000 bea8 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   a05e4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a05e8:	3b04      	subs	r3, #4
   a05ea:	2b1b      	cmp	r3, #27
   a05ec:	f200 80ff 	bhi.w	a07ee <Cl_dprep_controller+0x107e>
   a05f0:	a201      	add	r2, pc, #4	; (adr r2, a05f8 <Cl_dprep_controller+0xe88>)
   a05f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a05f6:	bf00      	nop
   a05f8:	000a070b 	.word	0x000a070b
   a05fc:	000a07ef 	.word	0x000a07ef
   a0600:	000a07ef 	.word	0x000a07ef
   a0604:	000a07ef 	.word	0x000a07ef
   a0608:	000a07ef 	.word	0x000a07ef
   a060c:	000a07ef 	.word	0x000a07ef
   a0610:	000a06ad 	.word	0x000a06ad
   a0614:	000a07ef 	.word	0x000a07ef
   a0618:	000a06f5 	.word	0x000a06f5
   a061c:	000a0669 	.word	0x000a0669
   a0620:	000a07ef 	.word	0x000a07ef
   a0624:	000a07ef 	.word	0x000a07ef
   a0628:	000a07ef 	.word	0x000a07ef
   a062c:	000a07ef 	.word	0x000a07ef
   a0630:	000a07ef 	.word	0x000a07ef
   a0634:	000a07ef 	.word	0x000a07ef
   a0638:	000a07ef 	.word	0x000a07ef
   a063c:	000a07ef 	.word	0x000a07ef
   a0640:	000a06d7 	.word	0x000a06d7
   a0644:	000a06d1 	.word	0x000a06d1
   a0648:	000a07ef 	.word	0x000a07ef
   a064c:	000a06e9 	.word	0x000a06e9
   a0650:	000a07ef 	.word	0x000a07ef
   a0654:	000a07ef 	.word	0x000a07ef
   a0658:	000a07ef 	.word	0x000a07ef
   a065c:	000a07ef 	.word	0x000a07ef
   a0660:	000a07ef 	.word	0x000a07ef
   a0664:	000a0679 	.word	0x000a0679
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
						//sv_prop_startmixing();
								Cl_Dprep_StartDialyserPrime();
   a0668:	4b3e      	ldr	r3, [pc, #248]	; (a0764 <Cl_dprep_controller+0xff4>)
   a066a:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a066c:	4b3e      	ldr	r3, [pc, #248]	; (a0768 <Cl_dprep_controller+0xff8>)
   a066e:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   a0670:	4b48      	ldr	r3, [pc, #288]	; (a0794 <Cl_dprep_controller+0x1024>)
   a0672:	2206      	movs	r2, #6
   a0674:	701a      	strb	r2, [r3, #0]
						break;
   a0676:	e0c7      	b.n	a0808 <Cl_dprep_controller+0x1098>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   a0678:	4b47      	ldr	r3, [pc, #284]	; (a0798 <Cl_dprep_controller+0x1028>)
   a067a:	781b      	ldrb	r3, [r3, #0]
   a067c:	2b01      	cmp	r3, #1
   a067e:	d108      	bne.n	a0692 <Cl_dprep_controller+0xf22>
   a0680:	4b45      	ldr	r3, [pc, #276]	; (a0798 <Cl_dprep_controller+0x1028>)
   a0682:	781b      	ldrb	r3, [r3, #0]
   a0684:	2b05      	cmp	r3, #5
   a0686:	d104      	bne.n	a0692 <Cl_dprep_controller+0xf22>
   a0688:	4b43      	ldr	r3, [pc, #268]	; (a0798 <Cl_dprep_controller+0x1028>)
   a068a:	781b      	ldrb	r3, [r3, #0]
   a068c:	2b09      	cmp	r3, #9
   a068e:	f000 80b1 	beq.w	a07f4 <Cl_dprep_controller+0x1084>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a0692:	2206      	movs	r2, #6
   a0694:	4941      	ldr	r1, [pc, #260]	; (a079c <Cl_dprep_controller+0x102c>)
   a0696:	2018      	movs	r0, #24
   a0698:	4b39      	ldr	r3, [pc, #228]	; (a0780 <Cl_dprep_controller+0x1010>)
   a069a:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a069c:	2100      	movs	r1, #0
   a069e:	2005      	movs	r0, #5
   a06a0:	4b3f      	ldr	r3, [pc, #252]	; (a07a0 <Cl_dprep_controller+0x1030>)
   a06a2:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a06a4:	4b3f      	ldr	r3, [pc, #252]	; (a07a4 <Cl_dprep_controller+0x1034>)
   a06a6:	2200      	movs	r2, #0
   a06a8:	70da      	strb	r2, [r3, #3]
									}
						break;
   a06aa:	e0a3      	b.n	a07f4 <Cl_dprep_controller+0x1084>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a06ac:	4b3a      	ldr	r3, [pc, #232]	; (a0798 <Cl_dprep_controller+0x1028>)
   a06ae:	781b      	ldrb	r3, [r3, #0]
   a06b0:	2b01      	cmp	r3, #1
   a06b2:	f000 80a2 	beq.w	a07fa <Cl_dprep_controller+0x108a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a06b6:	2206      	movs	r2, #6
   a06b8:	493b      	ldr	r1, [pc, #236]	; (a07a8 <Cl_dprep_controller+0x1038>)
   a06ba:	2018      	movs	r0, #24
   a06bc:	4b30      	ldr	r3, [pc, #192]	; (a0780 <Cl_dprep_controller+0x1010>)
   a06be:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a06c0:	2100      	movs	r1, #0
   a06c2:	2001      	movs	r0, #1
   a06c4:	4b36      	ldr	r3, [pc, #216]	; (a07a0 <Cl_dprep_controller+0x1030>)
   a06c6:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a06c8:	4b36      	ldr	r3, [pc, #216]	; (a07a4 <Cl_dprep_controller+0x1034>)
   a06ca:	2200      	movs	r2, #0
   a06cc:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a06ce:	e094      	b.n	a07fa <Cl_dprep_controller+0x108a>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   a06d0:	4b27      	ldr	r3, [pc, #156]	; (a0770 <Cl_dprep_controller+0x1000>)
   a06d2:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   a06d4:	e098      	b.n	a0808 <Cl_dprep_controller+0x1098>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   a06d6:	4b30      	ldr	r3, [pc, #192]	; (a0798 <Cl_dprep_controller+0x1028>)
   a06d8:	781b      	ldrb	r3, [r3, #0]
   a06da:	2b08      	cmp	r3, #8
   a06dc:	f040 8090 	bne.w	a0800 <Cl_dprep_controller+0x1090>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   a06e0:	4b2c      	ldr	r3, [pc, #176]	; (a0794 <Cl_dprep_controller+0x1024>)
   a06e2:	2205      	movs	r2, #5
   a06e4:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   a06e6:	e08b      	b.n	a0800 <Cl_dprep_controller+0x1090>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a06e8:	4b1b      	ldr	r3, [pc, #108]	; (a0758 <Cl_dprep_controller+0xfe8>)
   a06ea:	4798      	blx	r3
   a06ec:	4603      	mov	r3, r0
   a06ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a06f2:	e089      	b.n	a0808 <Cl_dprep_controller+0x1098>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   a06f4:	f107 0377 	add.w	r3, r7, #119	; 0x77
   a06f8:	2200      	movs	r2, #0
   a06fa:	4619      	mov	r1, r3
   a06fc:	2025      	movs	r0, #37	; 0x25
   a06fe:	4b20      	ldr	r3, [pc, #128]	; (a0780 <Cl_dprep_controller+0x1010>)
   a0700:	4798      	blx	r3
   a0702:	4603      	mov	r3, r0
   a0704:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   a0708:	e07e      	b.n	a0808 <Cl_dprep_controller+0x1098>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   a070a:	4b28      	ldr	r3, [pc, #160]	; (a07ac <Cl_dprep_controller+0x103c>)
   a070c:	7e1b      	ldrb	r3, [r3, #24]
   a070e:	2b00      	cmp	r3, #0
   a0710:	d079      	beq.n	a0806 <Cl_dprep_controller+0x1096>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   a0712:	4b26      	ldr	r3, [pc, #152]	; (a07ac <Cl_dprep_controller+0x103c>)
   a0714:	791b      	ldrb	r3, [r3, #4]
   a0716:	2b02      	cmp	r3, #2
   a0718:	d002      	beq.n	a0720 <Cl_dprep_controller+0xfb0>
   a071a:	2b04      	cmp	r3, #4
   a071c:	d04a      	beq.n	a07b4 <Cl_dprep_controller+0x1044>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   a071e:	e065      	b.n	a07ec <Cl_dprep_controller+0x107c>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a0720:	2316      	movs	r3, #22
   a0722:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a0726:	2302      	movs	r3, #2
   a0728:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a072c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0730:	3301      	adds	r3, #1
   a0732:	4619      	mov	r1, r3
   a0734:	2002      	movs	r0, #2
   a0736:	4b1e      	ldr	r3, [pc, #120]	; (a07b0 <Cl_dprep_controller+0x1040>)
   a0738:	4798      	blx	r3
   a073a:	4603      	mov	r3, r0
   a073c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0740:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a0744:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0748:	2202      	movs	r2, #2
   a074a:	4618      	mov	r0, r3
   a074c:	4b0c      	ldr	r3, [pc, #48]	; (a0780 <Cl_dprep_controller+0x1010>)
   a074e:	4798      	blx	r3
   a0750:	4603      	mov	r3, r0
   a0752:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   a0756:	e049      	b.n	a07ec <Cl_dprep_controller+0x107c>
   a0758:	000a16b9 	.word	0x000a16b9
   a075c:	0009b17d 	.word	0x0009b17d
   a0760:	00082ea5 	.word	0x00082ea5
   a0764:	000a33b1 	.word	0x000a33b1
   a0768:	0009af71 	.word	0x0009af71
   a076c:	000a2f35 	.word	0x000a2f35
   a0770:	000a2369 	.word	0x000a2369
   a0774:	20071b24 	.word	0x20071b24
   a0778:	20071b28 	.word	0x20071b28
   a077c:	0008fa01 	.word	0x0008fa01
   a0780:	0009cbd5 	.word	0x0009cbd5
   a0784:	0009b091 	.word	0x0009b091
   a0788:	0009b07d 	.word	0x0009b07d
   a078c:	0009b0b9 	.word	0x0009b0b9
   a0790:	0009afa9 	.word	0x0009afa9
   a0794:	20071b6f 	.word	0x20071b6f
   a0798:	20071866 	.word	0x20071866
   a079c:	000aa3ec 	.word	0x000aa3ec
   a07a0:	00088019 	.word	0x00088019
   a07a4:	20070b64 	.word	0x20070b64
   a07a8:	000aa3f4 	.word	0x000aa3f4
   a07ac:	20072350 	.word	0x20072350
   a07b0:	0009b701 	.word	0x0009b701
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a07b4:	2316      	movs	r3, #22
   a07b6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a07ba:	2304      	movs	r3, #4
   a07bc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a07c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a07c4:	3301      	adds	r3, #1
   a07c6:	4619      	mov	r1, r3
   a07c8:	2004      	movs	r0, #4
   a07ca:	4bb4      	ldr	r3, [pc, #720]	; (a0a9c <Cl_dprep_controller+0x132c>)
   a07cc:	4798      	blx	r3
   a07ce:	4603      	mov	r3, r0
   a07d0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a07d4:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a07d8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a07dc:	2202      	movs	r2, #2
   a07de:	4618      	mov	r0, r3
   a07e0:	4baf      	ldr	r3, [pc, #700]	; (a0aa0 <Cl_dprep_controller+0x1330>)
   a07e2:	4798      	blx	r3
   a07e4:	4603      	mov	r3, r0
   a07e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   a07ea:	bf00      	nop
									default:
									break;
								}
							}
						break;
   a07ec:	e00b      	b.n	a0806 <Cl_dprep_controller+0x1096>
						default:break;
   a07ee:	bf00      	nop
   a07f0:	f000 bda0 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
									}
						break;
   a07f4:	bf00      	nop
   a07f6:	f000 bd9d 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   a07fa:	bf00      	nop
   a07fc:	f000 bd9a 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
									 
						}
						break;
   a0800:	bf00      	nop
   a0802:	f000 bd97 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
									break;
									default:
									break;
								}
							}
						break;
   a0806:	bf00      	nop
						default:break;
					}

		break;
   a0808:	f000 bd94 	b.w	a1334 <Cl_dprep_controller+0x1bc4>
		
		case CL_DPREP_STATE_DPRIME_WAIT_STABILITY:
		
		 
		 Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false ); // manav02 added
   a080c:	2100      	movs	r1, #0
   a080e:	2008      	movs	r0, #8
   a0810:	4ba4      	ldr	r3, [pc, #656]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a0812:	4798      	blx	r3
		 Cl_AlarmActivateAlarms(COND_STATUS_LOW,false ); // manav02 added
   a0814:	2100      	movs	r1, #0
   a0816:	2007      	movs	r0, #7
   a0818:	4ba2      	ldr	r3, [pc, #648]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a081a:	4798      	blx	r3
		 Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false ); // manav02 added
   a081c:	2100      	movs	r1, #0
   a081e:	2013      	movs	r0, #19
   a0820:	4ba0      	ldr	r3, [pc, #640]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a0822:	4798      	blx	r3
		 Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false ); // manav02 added
   a0824:	2100      	movs	r1, #0
   a0826:	2014      	movs	r0, #20
   a0828:	4b9e      	ldr	r3, [pc, #632]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a082a:	4798      	blx	r3
		 
		 wait_timeout_counter = 0;
   a082c:	4b9e      	ldr	r3, [pc, #632]	; (a0aa8 <Cl_dprep_controller+0x1338>)
   a082e:	2200      	movs	r2, #0
   a0830:	601a      	str	r2, [r3, #0]
		 
		 if(state_counter > 3){
   a0832:	4b9e      	ldr	r3, [pc, #632]	; (a0aac <Cl_dprep_controller+0x133c>)
   a0834:	681b      	ldr	r3, [r3, #0]
   a0836:	2b03      	cmp	r3, #3
   a0838:	dd15      	ble.n	a0866 <Cl_dprep_controller+0x10f6>
// 			 sv_cntrl_enable_bypass();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
// 			 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
// 			 Cl_dprep_StopMixing();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
			Cl_Dprep_Priming_Stop();
   a083a:	4b9d      	ldr	r3, [pc, #628]	; (a0ab0 <Cl_dprep_controller+0x1340>)
   a083c:	4798      	blx	r3
			
		//	Cl_dprep_StopMixing();
			cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a083e:	2100      	movs	r1, #0
   a0840:	2009      	movs	r0, #9
   a0842:	4b9c      	ldr	r3, [pc, #624]	; (a0ab4 <Cl_dprep_controller+0x1344>)
   a0844:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a0846:	4b9c      	ldr	r3, [pc, #624]	; (a0ab8 <Cl_dprep_controller+0x1348>)
   a0848:	2207      	movs	r2, #7
   a084a:	701a      	strb	r2, [r3, #0]
			Cl_deactivate_prep_alarms();
   a084c:	4b9b      	ldr	r3, [pc, #620]	; (a0abc <Cl_dprep_controller+0x134c>)
   a084e:	4798      	blx	r3
			
			 state_counter = 0;
   a0850:	4b96      	ldr	r3, [pc, #600]	; (a0aac <Cl_dprep_controller+0x133c>)
   a0852:	2200      	movs	r2, #0
   a0854:	601a      	str	r2, [r3, #0]
			 stability_counter = 0;
   a0856:	4b9a      	ldr	r3, [pc, #616]	; (a0ac0 <Cl_dprep_controller+0x1350>)
   a0858:	2200      	movs	r2, #0
   a085a:	601a      	str	r2, [r3, #0]
			 wait_timeout_counter = 0;
   a085c:	4b92      	ldr	r3, [pc, #584]	; (a0aa8 <Cl_dprep_controller+0x1338>)
   a085e:	2200      	movs	r2, #0
   a0860:	601a      	str	r2, [r3, #0]
			
		
		}
		}
		
		break;
   a0862:	f000 bd62 	b.w	a132a <Cl_dprep_controller+0x1bba>
			 wait_timeout_counter = 0;
		 }
		 else{
			 
		 
		switch(cl_dprepevent){
   a0866:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a086a:	3b01      	subs	r3, #1
   a086c:	2b18      	cmp	r3, #24
   a086e:	f200 855c 	bhi.w	a132a <Cl_dprep_controller+0x1bba>
   a0872:	a201      	add	r2, pc, #4	; (adr r2, a0878 <Cl_dprep_controller+0x1108>)
   a0874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0878:	000a098f 	.word	0x000a098f
   a087c:	000a132b 	.word	0x000a132b
   a0880:	000a132b 	.word	0x000a132b
   a0884:	000a132b 	.word	0x000a132b
   a0888:	000a132b 	.word	0x000a132b
   a088c:	000a132b 	.word	0x000a132b
   a0890:	000a132b 	.word	0x000a132b
   a0894:	000a132b 	.word	0x000a132b
   a0898:	000a132b 	.word	0x000a132b
   a089c:	000a132b 	.word	0x000a132b
   a08a0:	000a132b 	.word	0x000a132b
   a08a4:	000a132b 	.word	0x000a132b
   a08a8:	000a132b 	.word	0x000a132b
   a08ac:	000a0977 	.word	0x000a0977
   a08b0:	000a132b 	.word	0x000a132b
   a08b4:	000a132b 	.word	0x000a132b
   a08b8:	000a132b 	.word	0x000a132b
   a08bc:	000a132b 	.word	0x000a132b
   a08c0:	000a132b 	.word	0x000a132b
   a08c4:	000a132b 	.word	0x000a132b
   a08c8:	000a132b 	.word	0x000a132b
   a08cc:	000a08dd 	.word	0x000a08dd
   a08d0:	000a132b 	.word	0x000a132b
   a08d4:	000a132b 	.word	0x000a132b
   a08d8:	000a096b 	.word	0x000a096b
		
		case EVENT_DPREP_TICK_SECOND:
		
		wait_timeout_counter++;
   a08dc:	4b72      	ldr	r3, [pc, #456]	; (a0aa8 <Cl_dprep_controller+0x1338>)
   a08de:	681b      	ldr	r3, [r3, #0]
   a08e0:	3301      	adds	r3, #1
   a08e2:	4a71      	ldr	r2, [pc, #452]	; (a0aa8 <Cl_dprep_controller+0x1338>)
   a08e4:	6013      	str	r3, [r2, #0]
		// disable cond and temp alarm
		// if 3 times it comes then stop the dialyzer priming
		// send data to console to wait for stability
		
		
		Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   a08e6:	2003      	movs	r0, #3
   a08e8:	4b76      	ldr	r3, [pc, #472]	; (a0ac4 <Cl_dprep_controller+0x1354>)
   a08ea:	4798      	blx	r3
		if(Cl_Check_Temp_Cond_Stability() == CL_OK){
   a08ec:	4b76      	ldr	r3, [pc, #472]	; (a0ac8 <Cl_dprep_controller+0x1358>)
   a08ee:	4798      	blx	r3
   a08f0:	4603      	mov	r3, r0
   a08f2:	2b00      	cmp	r3, #0
   a08f4:	d104      	bne.n	a0900 <Cl_dprep_controller+0x1190>
			
			stability_counter++ ;
   a08f6:	4b72      	ldr	r3, [pc, #456]	; (a0ac0 <Cl_dprep_controller+0x1350>)
   a08f8:	681b      	ldr	r3, [r3, #0]
   a08fa:	3301      	adds	r3, #1
   a08fc:	4a70      	ldr	r2, [pc, #448]	; (a0ac0 <Cl_dprep_controller+0x1350>)
   a08fe:	6013      	str	r3, [r2, #0]
		}
		
		if(stability_counter == 10){
   a0900:	4b6f      	ldr	r3, [pc, #444]	; (a0ac0 <Cl_dprep_controller+0x1350>)
   a0902:	681b      	ldr	r3, [r3, #0]
   a0904:	2b0a      	cmp	r3, #10
   a0906:	d120      	bne.n	a094a <Cl_dprep_controller+0x11da>
		
		Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true ); // true manav02 changed 
   a0908:	2101      	movs	r1, #1
   a090a:	2008      	movs	r0, #8
   a090c:	4b65      	ldr	r3, [pc, #404]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a090e:	4798      	blx	r3
		Cl_AlarmActivateAlarms(COND_STATUS_LOW,true ); // true manav02 changed 
   a0910:	2101      	movs	r1, #1
   a0912:	2007      	movs	r0, #7
   a0914:	4b63      	ldr	r3, [pc, #396]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a0916:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true ); // true manav02 changed 
   a0918:	2101      	movs	r1, #1
   a091a:	2013      	movs	r0, #19
   a091c:	4b61      	ldr	r3, [pc, #388]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a091e:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true ); //true manav02 changed 
   a0920:	2101      	movs	r1, #1
   a0922:	2014      	movs	r0, #20
   a0924:	4b5f      	ldr	r3, [pc, #380]	; (a0aa4 <Cl_dprep_controller+0x1334>)
   a0926:	4798      	blx	r3
		
		stability_counter = 0;	
   a0928:	4b65      	ldr	r3, [pc, #404]	; (a0ac0 <Cl_dprep_controller+0x1350>)
   a092a:	2200      	movs	r2, #0
   a092c:	601a      	str	r2, [r3, #0]
		wait_timeout_counter = 0;
   a092e:	4b5e      	ldr	r3, [pc, #376]	; (a0aa8 <Cl_dprep_controller+0x1338>)
   a0930:	2200      	movs	r2, #0
   a0932:	601a      	str	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_disable_bypass();
   a0934:	4b65      	ldr	r3, [pc, #404]	; (a0acc <Cl_dprep_controller+0x135c>)
   a0936:	4798      	blx	r3
   a0938:	4603      	mov	r3, r0
   a093a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   a093e:	4b64      	ldr	r3, [pc, #400]	; (a0ad0 <Cl_dprep_controller+0x1360>)
   a0940:	2202      	movs	r2, #2
   a0942:	701a      	strb	r2, [r3, #0]
				cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   a0944:	4b5c      	ldr	r3, [pc, #368]	; (a0ab8 <Cl_dprep_controller+0x1348>)
   a0946:	2206      	movs	r2, #6
   a0948:	701a      	strb	r2, [r3, #0]
						
			}
		
		if(wait_timeout_counter > 15){
   a094a:	4b57      	ldr	r3, [pc, #348]	; (a0aa8 <Cl_dprep_controller+0x1338>)
   a094c:	681b      	ldr	r3, [r3, #0]
   a094e:	2b0f      	cmp	r3, #15
   a0950:	dd54      	ble.n	a09fc <Cl_dprep_controller+0x128c>
			
			// stop preparation
			Cl_Dprep_Priming_Stop();
   a0952:	4b57      	ldr	r3, [pc, #348]	; (a0ab0 <Cl_dprep_controller+0x1340>)
   a0954:	4798      	blx	r3
			//Cl_dprep_StopMixing();
			cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a0956:	2100      	movs	r1, #0
   a0958:	2009      	movs	r0, #9
   a095a:	4b56      	ldr	r3, [pc, #344]	; (a0ab4 <Cl_dprep_controller+0x1344>)
   a095c:	4798      	blx	r3
			cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a095e:	4b56      	ldr	r3, [pc, #344]	; (a0ab8 <Cl_dprep_controller+0x1348>)
   a0960:	2207      	movs	r2, #7
   a0962:	701a      	strb	r2, [r3, #0]
			Cl_deactivate_prep_alarms();
   a0964:	4b55      	ldr	r3, [pc, #340]	; (a0abc <Cl_dprep_controller+0x134c>)
   a0966:	4798      	blx	r3
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   a0968:	e048      	b.n	a09fc <Cl_dprep_controller+0x128c>
		
		case EVENT_DPREP_ALARM:
		Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a096a:	4b5a      	ldr	r3, [pc, #360]	; (a0ad4 <Cl_dprep_controller+0x1364>)
   a096c:	4798      	blx	r3
   a096e:	4603      	mov	r3, r0
   a0970:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		break;
   a0974:	e046      	b.n	a0a04 <Cl_dprep_controller+0x1294>
		
		case EVENT_DPREP_STOP_DIALYSER_PRIME:
		
		Cl_dprep_StopMixing();
   a0976:	4b58      	ldr	r3, [pc, #352]	; (a0ad8 <Cl_dprep_controller+0x1368>)
   a0978:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a097a:	2100      	movs	r1, #0
   a097c:	2009      	movs	r0, #9
   a097e:	4b4d      	ldr	r3, [pc, #308]	; (a0ab4 <Cl_dprep_controller+0x1344>)
   a0980:	4798      	blx	r3
		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a0982:	4b4d      	ldr	r3, [pc, #308]	; (a0ab8 <Cl_dprep_controller+0x1348>)
   a0984:	2207      	movs	r2, #7
   a0986:	701a      	strb	r2, [r3, #0]
		Cl_deactivate_prep_alarms();
   a0988:	4b4c      	ldr	r3, [pc, #304]	; (a0abc <Cl_dprep_controller+0x134c>)
   a098a:	4798      	blx	r3
	//	Cl_Dprep_Priming_Stop();
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
		break;
   a098c:	e03a      	b.n	a0a04 <Cl_dprep_controller+0x1294>
		
		case EVENT_DPREP_CLR_ALARM:
		
					if(powerFailureFlag == 1){
   a098e:	4b53      	ldr	r3, [pc, #332]	; (a0adc <Cl_dprep_controller+0x136c>)
   a0990:	681b      	ldr	r3, [r3, #0]
   a0992:	2b01      	cmp	r3, #1
   a0994:	d11e      	bne.n	a09d4 <Cl_dprep_controller+0x1264>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0996:	4952      	ldr	r1, [pc, #328]	; (a0ae0 <Cl_dprep_controller+0x1370>)
   a0998:	2024      	movs	r0, #36	; 0x24
   a099a:	4b52      	ldr	r3, [pc, #328]	; (a0ae4 <Cl_dprep_controller+0x1374>)
   a099c:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a099e:	4b50      	ldr	r3, [pc, #320]	; (a0ae0 <Cl_dprep_controller+0x1370>)
   a09a0:	881b      	ldrh	r3, [r3, #0]
   a09a2:	2b00      	cmp	r3, #0
   a09a4:	d12d      	bne.n	a0a02 <Cl_dprep_controller+0x1292>
						
						powerFailureFlag = 0;
   a09a6:	4b4d      	ldr	r3, [pc, #308]	; (a0adc <Cl_dprep_controller+0x136c>)
   a09a8:	2200      	movs	r2, #0
   a09aa:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a09ac:	2351      	movs	r3, #81	; 0x51
   a09ae:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a09b2:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a09b6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a09ba:	2200      	movs	r2, #0
   a09bc:	4618      	mov	r0, r3
   a09be:	4b38      	ldr	r3, [pc, #224]	; (a0aa0 <Cl_dprep_controller+0x1330>)
   a09c0:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a09c2:	4b49      	ldr	r3, [pc, #292]	; (a0ae8 <Cl_dprep_controller+0x1378>)
   a09c4:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a09c6:	4b49      	ldr	r3, [pc, #292]	; (a0aec <Cl_dprep_controller+0x137c>)
   a09c8:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a09ca:	4b49      	ldr	r3, [pc, #292]	; (a0af0 <Cl_dprep_controller+0x1380>)
   a09cc:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a09ce:	4b49      	ldr	r3, [pc, #292]	; (a0af4 <Cl_dprep_controller+0x1384>)
   a09d0:	4798      	blx	r3
		sv_cntrl_resetredalarm();
		sv_cntrl_nobuzzer();
		Cl_Dprep_ResetAlertsforReassertion();
		//sv_cntrl_disable_bypass();
					}
		break;
   a09d2:	e016      	b.n	a0a02 <Cl_dprep_controller+0x1292>
					}
					}
					else{			
					
		
			command = CON_TX_COMMAND_ALARM_CLEARED;
   a09d4:	2351      	movs	r3, #81	; 0x51
   a09d6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			Cl_SendDatatoconsole(command,&data,0);
   a09da:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a09de:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a09e2:	2200      	movs	r2, #0
   a09e4:	4618      	mov	r0, r3
   a09e6:	4b2e      	ldr	r3, [pc, #184]	; (a0aa0 <Cl_dprep_controller+0x1330>)
   a09e8:	4798      	blx	r3
						
		sv_cntrl_resetyellowalarm();
   a09ea:	4b3f      	ldr	r3, [pc, #252]	; (a0ae8 <Cl_dprep_controller+0x1378>)
   a09ec:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   a09ee:	4b3f      	ldr	r3, [pc, #252]	; (a0aec <Cl_dprep_controller+0x137c>)
   a09f0:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   a09f2:	4b3f      	ldr	r3, [pc, #252]	; (a0af0 <Cl_dprep_controller+0x1380>)
   a09f4:	4798      	blx	r3
		Cl_Dprep_ResetAlertsforReassertion();
   a09f6:	4b3f      	ldr	r3, [pc, #252]	; (a0af4 <Cl_dprep_controller+0x1384>)
   a09f8:	4798      	blx	r3
		//sv_cntrl_disable_bypass();
					}
		break;
   a09fa:	e002      	b.n	a0a02 <Cl_dprep_controller+0x1292>
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   a09fc:	bf00      	nop
   a09fe:	f000 bc94 	b.w	a132a <Cl_dprep_controller+0x1bba>
		sv_cntrl_resetredalarm();
		sv_cntrl_nobuzzer();
		Cl_Dprep_ResetAlertsforReassertion();
		//sv_cntrl_disable_bypass();
					}
		break;
   a0a02:	bf00      	nop
			
		
		}
		}
		
		break;
   a0a04:	f000 bc91 	b.w	a132a <Cl_dprep_controller+0x1bba>
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   a0a08:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a0a0c:	3b01      	subs	r3, #1
   a0a0e:	2b19      	cmp	r3, #25
   a0a10:	f200 8160 	bhi.w	a0cd4 <Cl_dprep_controller+0x1564>
   a0a14:	a201      	add	r2, pc, #4	; (adr r2, a0a1c <Cl_dprep_controller+0x12ac>)
   a0a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0a1a:	bf00      	nop
   a0a1c:	000a0c27 	.word	0x000a0c27
   a0a20:	000a0cd5 	.word	0x000a0cd5
   a0a24:	000a0b61 	.word	0x000a0b61
   a0a28:	000a0a85 	.word	0x000a0a85
   a0a2c:	000a0cd5 	.word	0x000a0cd5
   a0a30:	000a0cd5 	.word	0x000a0cd5
   a0a34:	000a0bf9 	.word	0x000a0bf9
   a0a38:	000a0cd5 	.word	0x000a0cd5
   a0a3c:	000a0cd5 	.word	0x000a0cd5
   a0a40:	000a0cd5 	.word	0x000a0cd5
   a0a44:	000a0cd5 	.word	0x000a0cd5
   a0a48:	000a0bbf 	.word	0x000a0bbf
   a0a4c:	000a0bd5 	.word	0x000a0bd5
   a0a50:	000a0cd5 	.word	0x000a0cd5
   a0a54:	000a0cd5 	.word	0x000a0cd5
   a0a58:	000a0cd5 	.word	0x000a0cd5
   a0a5c:	000a0cd5 	.word	0x000a0cd5
   a0a60:	000a0cd5 	.word	0x000a0cd5
   a0a64:	000a0cd5 	.word	0x000a0cd5
   a0a68:	000a0cd5 	.word	0x000a0cd5
   a0a6c:	000a0cd5 	.word	0x000a0cd5
   a0a70:	000a0cd5 	.word	0x000a0cd5
   a0a74:	000a0c95 	.word	0x000a0c95
   a0a78:	000a0cd5 	.word	0x000a0cd5
   a0a7c:	000a0bed 	.word	0x000a0bed
   a0a80:	000a0bdf 	.word	0x000a0bdf
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   a0a84:	4b1c      	ldr	r3, [pc, #112]	; (a0af8 <Cl_dprep_controller+0x1388>)
   a0a86:	7e1b      	ldrb	r3, [r3, #24]
   a0a88:	2b00      	cmp	r3, #0
   a0a8a:	f000 8125 	beq.w	a0cd8 <Cl_dprep_controller+0x1568>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   a0a8e:	4b1a      	ldr	r3, [pc, #104]	; (a0af8 <Cl_dprep_controller+0x1388>)
   a0a90:	791b      	ldrb	r3, [r3, #4]
   a0a92:	2b03      	cmp	r3, #3
   a0a94:	d032      	beq.n	a0afc <Cl_dprep_controller+0x138c>
   a0a96:	2b04      	cmp	r3, #4
   a0a98:	d045      	beq.n	a0b26 <Cl_dprep_controller+0x13b6>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   a0a9a:	e060      	b.n	a0b5e <Cl_dprep_controller+0x13ee>
   a0a9c:	0009b701 	.word	0x0009b701
   a0aa0:	0009cbd5 	.word	0x0009cbd5
   a0aa4:	000829e5 	.word	0x000829e5
   a0aa8:	20071b30 	.word	0x20071b30
   a0aac:	20071b34 	.word	0x20071b34
   a0ab0:	000a375d 	.word	0x000a375d
   a0ab4:	00088019 	.word	0x00088019
   a0ab8:	20071b6f 	.word	0x20071b6f
   a0abc:	000a38d9 	.word	0x000a38d9
   a0ac0:	20071b2c 	.word	0x20071b2c
   a0ac4:	000a1ead 	.word	0x000a1ead
   a0ac8:	000a3795 	.word	0x000a3795
   a0acc:	0009afa9 	.word	0x0009afa9
   a0ad0:	20071b70 	.word	0x20071b70
   a0ad4:	000a16b9 	.word	0x000a16b9
   a0ad8:	000a3829 	.word	0x000a3829
   a0adc:	20071b24 	.word	0x20071b24
   a0ae0:	20071b28 	.word	0x20071b28
   a0ae4:	0008fa01 	.word	0x0008fa01
   a0ae8:	0009b091 	.word	0x0009b091
   a0aec:	0009b07d 	.word	0x0009b07d
   a0af0:	0009b0b9 	.word	0x0009b0b9
   a0af4:	000a2369 	.word	0x000a2369
   a0af8:	20072350 	.word	0x20072350
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a0afc:	2316      	movs	r3, #22
   a0afe:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   a0b02:	2303      	movs	r3, #3
   a0b04:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									dataarray[1] = 0;									
   a0b08:	2300      	movs	r3, #0
   a0b0a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0b0e:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a0b12:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0b16:	2202      	movs	r2, #2
   a0b18:	4618      	mov	r0, r3
   a0b1a:	4b94      	ldr	r3, [pc, #592]	; (a0d6c <Cl_dprep_controller+0x15fc>)
   a0b1c:	4798      	blx	r3
   a0b1e:	4603      	mov	r3, r0
   a0b20:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   a0b24:	e01b      	b.n	a0b5e <Cl_dprep_controller+0x13ee>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a0b26:	2316      	movs	r3, #22
   a0b28:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a0b2c:	2304      	movs	r3, #4
   a0b2e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a0b32:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a0b36:	3301      	adds	r3, #1
   a0b38:	4619      	mov	r1, r3
   a0b3a:	2004      	movs	r0, #4
   a0b3c:	4b8c      	ldr	r3, [pc, #560]	; (a0d70 <Cl_dprep_controller+0x1600>)
   a0b3e:	4798      	blx	r3
   a0b40:	4603      	mov	r3, r0
   a0b42:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a0b46:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a0b4a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0b4e:	2202      	movs	r2, #2
   a0b50:	4618      	mov	r0, r3
   a0b52:	4b86      	ldr	r3, [pc, #536]	; (a0d6c <Cl_dprep_controller+0x15fc>)
   a0b54:	4798      	blx	r3
   a0b56:	4603      	mov	r3, r0
   a0b58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   a0b5c:	bf00      	nop
									default:break;
								}
							}
						break;
   a0b5e:	e0bb      	b.n	a0cd8 <Cl_dprep_controller+0x1568>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   a0b60:	4b84      	ldr	r3, [pc, #528]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0b62:	7e1b      	ldrb	r3, [r3, #24]
   a0b64:	2b00      	cmp	r3, #0
   a0b66:	f000 80b9 	beq.w	a0cdc <Cl_dprep_controller+0x156c>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   a0b6a:	4b82      	ldr	r3, [pc, #520]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0b6c:	791b      	ldrb	r3, [r3, #4]
   a0b6e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a0b72:	2300      	movs	r3, #0
   a0b74:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   a0b78:	e011      	b.n	a0b9e <Cl_dprep_controller+0x142e>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   a0b7a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   a0b7e:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   a0b82:	3201      	adds	r2, #1
   a0b84:	497b      	ldr	r1, [pc, #492]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0b86:	440a      	add	r2, r1
   a0b88:	7912      	ldrb	r2, [r2, #4]
   a0b8a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   a0b8e:	440b      	add	r3, r1
   a0b90:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a0b94:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   a0b98:	3301      	adds	r3, #1
   a0b9a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   a0b9e:	4b75      	ldr	r3, [pc, #468]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0ba0:	78db      	ldrb	r3, [r3, #3]
   a0ba2:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   a0ba6:	429a      	cmp	r2, r3
   a0ba8:	d3e7      	bcc.n	a0b7a <Cl_dprep_controller+0x140a>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   a0baa:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   a0bae:	f897 0089 	ldrb.w	r0, [r7, #137]	; 0x89
   a0bb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
   a0bb6:	ca06      	ldmia	r2, {r1, r2}
   a0bb8:	4c6f      	ldr	r4, [pc, #444]	; (a0d78 <Cl_dprep_controller+0x1608>)
   a0bba:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   a0bbc:	e08e      	b.n	a0cdc <Cl_dprep_controller+0x156c>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   a0bbe:	f107 0377 	add.w	r3, r7, #119	; 0x77
   a0bc2:	2200      	movs	r2, #0
   a0bc4:	4619      	mov	r1, r3
   a0bc6:	2025      	movs	r0, #37	; 0x25
   a0bc8:	4b68      	ldr	r3, [pc, #416]	; (a0d6c <Cl_dprep_controller+0x15fc>)
   a0bca:	4798      	blx	r3
   a0bcc:	4603      	mov	r3, r0
   a0bce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   a0bd2:	e088      	b.n	a0ce6 <Cl_dprep_controller+0x1576>
						case EVENT_DPREP_START_DIALISER_PRIME:
				//		sv_prop_startmixing();
				//		Cl_bc_controller(BC_EVENT_RESUME);
								Cl_Dprep_StartDialyserPrime();
   a0bd4:	4b69      	ldr	r3, [pc, #420]	; (a0d7c <Cl_dprep_controller+0x160c>)
   a0bd6:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a0bd8:	4b69      	ldr	r3, [pc, #420]	; (a0d80 <Cl_dprep_controller+0x1610>)
   a0bda:	4798      	blx	r3
								 //sv_prop_startmixing();
						break;
   a0bdc:	e083      	b.n	a0ce6 <Cl_dprep_controller+0x1576>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a0bde:	f107 0337 	add.w	r3, r7, #55	; 0x37
   a0be2:	4619      	mov	r1, r3
   a0be4:	203c      	movs	r0, #60	; 0x3c
   a0be6:	4b67      	ldr	r3, [pc, #412]	; (a0d84 <Cl_dprep_controller+0x1614>)
   a0be8:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   a0bea:	e07c      	b.n	a0ce6 <Cl_dprep_controller+0x1576>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0bec:	4b66      	ldr	r3, [pc, #408]	; (a0d88 <Cl_dprep_controller+0x1618>)
   a0bee:	4798      	blx	r3
   a0bf0:	4603      	mov	r3, r0
   a0bf2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a0bf6:	e076      	b.n	a0ce6 <Cl_dprep_controller+0x1576>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   a0bf8:	4b5e      	ldr	r3, [pc, #376]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0bfa:	7e1b      	ldrb	r3, [r3, #24]
   a0bfc:	2b00      	cmp	r3, #0
   a0bfe:	d06f      	beq.n	a0ce0 <Cl_dprep_controller+0x1570>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a0c00:	4b5c      	ldr	r3, [pc, #368]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0c02:	791b      	ldrb	r3, [r3, #4]
   a0c04:	743b      	strb	r3, [r7, #16]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a0c06:	4b5b      	ldr	r3, [pc, #364]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0c08:	791b      	ldrb	r3, [r3, #4]
   a0c0a:	747b      	strb	r3, [r7, #17]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a0c0c:	4b59      	ldr	r3, [pc, #356]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0c0e:	791b      	ldrb	r3, [r3, #4]
   a0c10:	74bb      	strb	r3, [r7, #18]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a0c12:	4b58      	ldr	r3, [pc, #352]	; (a0d74 <Cl_dprep_controller+0x1604>)
   a0c14:	791b      	ldrb	r3, [r3, #4]
   a0c16:	74fb      	strb	r3, [r7, #19]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a0c18:	8a3b      	ldrh	r3, [r7, #16]
   a0c1a:	b21b      	sxth	r3, r3
   a0c1c:	4619      	mov	r1, r3
   a0c1e:	200e      	movs	r0, #14
   a0c20:	4b5a      	ldr	r3, [pc, #360]	; (a0d8c <Cl_dprep_controller+0x161c>)
   a0c22:	4798      	blx	r3
											}
						break;
   a0c24:	e05c      	b.n	a0ce0 <Cl_dprep_controller+0x1570>
						
						case EVENT_DPREP_CLR_ALARM:
						
									if(powerFailureFlag == 1){
   a0c26:	4b5a      	ldr	r3, [pc, #360]	; (a0d90 <Cl_dprep_controller+0x1620>)
   a0c28:	681b      	ldr	r3, [r3, #0]
   a0c2a:	2b01      	cmp	r3, #1
   a0c2c:	d11e      	bne.n	a0c6c <Cl_dprep_controller+0x14fc>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0c2e:	4959      	ldr	r1, [pc, #356]	; (a0d94 <Cl_dprep_controller+0x1624>)
   a0c30:	2024      	movs	r0, #36	; 0x24
   a0c32:	4b59      	ldr	r3, [pc, #356]	; (a0d98 <Cl_dprep_controller+0x1628>)
   a0c34:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0c36:	4b57      	ldr	r3, [pc, #348]	; (a0d94 <Cl_dprep_controller+0x1624>)
   a0c38:	881b      	ldrh	r3, [r3, #0]
   a0c3a:	2b00      	cmp	r3, #0
   a0c3c:	d152      	bne.n	a0ce4 <Cl_dprep_controller+0x1574>
						
						powerFailureFlag = 0;
   a0c3e:	4b54      	ldr	r3, [pc, #336]	; (a0d90 <Cl_dprep_controller+0x1620>)
   a0c40:	2200      	movs	r2, #0
   a0c42:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0c44:	2351      	movs	r3, #81	; 0x51
   a0c46:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a0c4a:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0c4e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0c52:	2200      	movs	r2, #0
   a0c54:	4618      	mov	r0, r3
   a0c56:	4b45      	ldr	r3, [pc, #276]	; (a0d6c <Cl_dprep_controller+0x15fc>)
   a0c58:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a0c5a:	4b50      	ldr	r3, [pc, #320]	; (a0d9c <Cl_dprep_controller+0x162c>)
   a0c5c:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a0c5e:	4b50      	ldr	r3, [pc, #320]	; (a0da0 <Cl_dprep_controller+0x1630>)
   a0c60:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a0c62:	4b50      	ldr	r3, [pc, #320]	; (a0da4 <Cl_dprep_controller+0x1634>)
   a0c64:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a0c66:	4b50      	ldr	r3, [pc, #320]	; (a0da8 <Cl_dprep_controller+0x1638>)
   a0c68:	4798      	blx	r3
						sv_cntrl_resetredalarm();
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						//sv_cntrl_disable_bypass();
					}
						break;
   a0c6a:	e03b      	b.n	a0ce4 <Cl_dprep_controller+0x1574>
					}
					else{			
					
						
						
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a0c6c:	2351      	movs	r3, #81	; 0x51
   a0c6e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a0c72:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0c76:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0c7a:	2200      	movs	r2, #0
   a0c7c:	4618      	mov	r0, r3
   a0c7e:	4b3b      	ldr	r3, [pc, #236]	; (a0d6c <Cl_dprep_controller+0x15fc>)
   a0c80:	4798      	blx	r3
						
						sv_cntrl_resetyellowalarm();
   a0c82:	4b46      	ldr	r3, [pc, #280]	; (a0d9c <Cl_dprep_controller+0x162c>)
   a0c84:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a0c86:	4b46      	ldr	r3, [pc, #280]	; (a0da0 <Cl_dprep_controller+0x1630>)
   a0c88:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a0c8a:	4b46      	ldr	r3, [pc, #280]	; (a0da4 <Cl_dprep_controller+0x1634>)
   a0c8c:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a0c8e:	4b46      	ldr	r3, [pc, #280]	; (a0da8 <Cl_dprep_controller+0x1638>)
   a0c90:	4798      	blx	r3
						//sv_cntrl_disable_bypass();
					}
						break;
   a0c92:	e027      	b.n	a0ce4 <Cl_dprep_controller+0x1574>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   a0c94:	f04f 0300 	mov.w	r3, #0
   a0c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   a0c9c:	f107 0332 	add.w	r3, r7, #50	; 0x32
   a0ca0:	4619      	mov	r1, r3
   a0ca2:	2014      	movs	r0, #20
   a0ca4:	4b3c      	ldr	r3, [pc, #240]	; (a0d98 <Cl_dprep_controller+0x1628>)
   a0ca6:	4798      	blx	r3
// 							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// 	//						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 							temp_temp3 = temp_temp3 - 0.4;										// sensor offset
							temp3_cel = (float)temp_temp3 /100;
   a0ca8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   a0caa:	4b40      	ldr	r3, [pc, #256]	; (a0dac <Cl_dprep_controller+0x163c>)
   a0cac:	4610      	mov	r0, r2
   a0cae:	4798      	blx	r3
   a0cb0:	4602      	mov	r2, r0
   a0cb2:	4b3f      	ldr	r3, [pc, #252]	; (a0db0 <Cl_dprep_controller+0x1640>)
   a0cb4:	493f      	ldr	r1, [pc, #252]	; (a0db4 <Cl_dprep_controller+0x1644>)
   a0cb6:	4610      	mov	r0, r2
   a0cb8:	4798      	blx	r3
   a0cba:	4603      	mov	r3, r0
   a0cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
							Cl_Dprep_filling_secondscounter++;
   a0cc0:	4b3d      	ldr	r3, [pc, #244]	; (a0db8 <Cl_dprep_controller+0x1648>)
   a0cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0cc6:	b29b      	uxth	r3, r3
   a0cc8:	3301      	adds	r3, #1
   a0cca:	b29b      	uxth	r3, r3
   a0ccc:	b21a      	sxth	r2, r3
   a0cce:	4b3a      	ldr	r3, [pc, #232]	; (a0db8 <Cl_dprep_controller+0x1648>)
   a0cd0:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   a0cd2:	e008      	b.n	a0ce6 <Cl_dprep_controller+0x1576>
						default:
						break;
   a0cd4:	bf00      	nop
   a0cd6:	e32d      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
								}
							}
						break;
   a0cd8:	bf00      	nop
   a0cda:	e32b      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
						 
						 
						 
								 }
	
						break;
   a0cdc:	bf00      	nop
   a0cde:	e329      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
											}
						break;
   a0ce0:	bf00      	nop
   a0ce2:	e327      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
						sv_cntrl_resetredalarm();
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						//sv_cntrl_disable_bypass();
					}
						break;
   a0ce4:	bf00      	nop
					#endif
						break;
						default:
						break;
					}
		break;
   a0ce6:	e325      	b.n	a1334 <Cl_dprep_controller+0x1bc4>

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   a0ce8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a0cec:	3b01      	subs	r3, #1
   a0cee:	2b19      	cmp	r3, #25
   a0cf0:	f200 831d 	bhi.w	a132e <Cl_dprep_controller+0x1bbe>
   a0cf4:	a201      	add	r2, pc, #4	; (adr r2, a0cfc <Cl_dprep_controller+0x158c>)
   a0cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0cfa:	bf00      	nop
   a0cfc:	000a0eab 	.word	0x000a0eab
   a0d00:	000a132f 	.word	0x000a132f
   a0d04:	000a132f 	.word	0x000a132f
   a0d08:	000a132f 	.word	0x000a132f
   a0d0c:	000a132f 	.word	0x000a132f
   a0d10:	000a132f 	.word	0x000a132f
   a0d14:	000a132f 	.word	0x000a132f
   a0d18:	000a132f 	.word	0x000a132f
   a0d1c:	000a132f 	.word	0x000a132f
   a0d20:	000a132f 	.word	0x000a132f
   a0d24:	000a132f 	.word	0x000a132f
   a0d28:	000a132f 	.word	0x000a132f
   a0d2c:	000a132f 	.word	0x000a132f
   a0d30:	000a0e8b 	.word	0x000a0e8b
   a0d34:	000a132f 	.word	0x000a132f
   a0d38:	000a132f 	.word	0x000a132f
   a0d3c:	000a132f 	.word	0x000a132f
   a0d40:	000a132f 	.word	0x000a132f
   a0d44:	000a0f21 	.word	0x000a0f21
   a0d48:	000a132f 	.word	0x000a132f
   a0d4c:	000a0f21 	.word	0x000a0f21
   a0d50:	000a0dbd 	.word	0x000a0dbd
   a0d54:	000a0d65 	.word	0x000a0d65
   a0d58:	000a132f 	.word	0x000a132f
   a0d5c:	000a0e91 	.word	0x000a0e91
   a0d60:	000a0e9d 	.word	0x000a0e9d
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   a0d64:	4b10      	ldr	r3, [pc, #64]	; (a0da8 <Cl_dprep_controller+0x1638>)
   a0d66:	4798      	blx	r3
						break;
   a0d68:	e0df      	b.n	a0f2a <Cl_dprep_controller+0x17ba>
   a0d6a:	bf00      	nop
   a0d6c:	0009cbd5 	.word	0x0009cbd5
   a0d70:	0009b701 	.word	0x0009b701
   a0d74:	20072350 	.word	0x20072350
   a0d78:	000a252d 	.word	0x000a252d
   a0d7c:	000a33b1 	.word	0x000a33b1
   a0d80:	0009af71 	.word	0x0009af71
   a0d84:	00082bc1 	.word	0x00082bc1
   a0d88:	000a16b9 	.word	0x000a16b9
   a0d8c:	00088019 	.word	0x00088019
   a0d90:	20071b24 	.word	0x20071b24
   a0d94:	20071b28 	.word	0x20071b28
   a0d98:	0008fa01 	.word	0x0008fa01
   a0d9c:	0009b091 	.word	0x0009b091
   a0da0:	0009b07d 	.word	0x0009b07d
   a0da4:	0009b0b9 	.word	0x0009b0b9
   a0da8:	000a2369 	.word	0x000a2369
   a0dac:	000a7ef9 	.word	0x000a7ef9
   a0db0:	000a8111 	.word	0x000a8111
   a0db4:	42c80000 	.word	0x42c80000
   a0db8:	20071b4e 	.word	0x20071b4e
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   a0dbc:	f04f 0300 	mov.w	r3, #0
   a0dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   a0dc4:	f107 0332 	add.w	r3, r7, #50	; 0x32
   a0dc8:	4619      	mov	r1, r3
   a0dca:	2014      	movs	r0, #20
   a0dcc:	4b9c      	ldr	r3, [pc, #624]	; (a1040 <Cl_dprep_controller+0x18d0>)
   a0dce:	4798      	blx	r3
// 						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// //						temp_temp3 = temp_temp3 - 3.1 - 2;										// sensor offset
						temp3_cel = (float)temp_temp3;
   a0dd0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   a0dd2:	4b9c      	ldr	r3, [pc, #624]	; (a1044 <Cl_dprep_controller+0x18d4>)
   a0dd4:	4610      	mov	r0, r2
   a0dd6:	4798      	blx	r3
   a0dd8:	4603      	mov	r3, r0
   a0dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						
							Cl_Dprep_filling_secondscounter++;
   a0dde:	4b9a      	ldr	r3, [pc, #616]	; (a1048 <Cl_dprep_controller+0x18d8>)
   a0de0:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0de4:	b29b      	uxth	r3, r3
   a0de6:	3301      	adds	r3, #1
   a0de8:	b29b      	uxth	r3, r3
   a0dea:	b21a      	sxth	r2, r3
   a0dec:	4b96      	ldr	r3, [pc, #600]	; (a1048 <Cl_dprep_controller+0x18d8>)
   a0dee:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   a0df0:	4b96      	ldr	r3, [pc, #600]	; (a104c <Cl_dprep_controller+0x18dc>)
   a0df2:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0df6:	b29b      	uxth	r3, r3
   a0df8:	3301      	adds	r3, #1
   a0dfa:	b29b      	uxth	r3, r3
   a0dfc:	b21a      	sxth	r2, r3
   a0dfe:	4b93      	ldr	r3, [pc, #588]	; (a104c <Cl_dprep_controller+0x18dc>)
   a0e00:	801a      	strh	r2, [r3, #0]
							
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   a0e02:	4b92      	ldr	r3, [pc, #584]	; (a104c <Cl_dprep_controller+0x18dc>)
   a0e04:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0e08:	2b1e      	cmp	r3, #30
   a0e0a:	d114      	bne.n	a0e36 <Cl_dprep_controller+0x16c6>
								
								
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a0e0c:	2101      	movs	r1, #1
   a0e0e:	200c      	movs	r0, #12
   a0e10:	4b8f      	ldr	r3, [pc, #572]	; (a1050 <Cl_dprep_controller+0x18e0>)
   a0e12:	4798      	blx	r3
   a0e14:	4603      	mov	r3, r0
   a0e16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a0e1a:	2101      	movs	r1, #1
   a0e1c:	200d      	movs	r0, #13
   a0e1e:	4b8c      	ldr	r3, [pc, #560]	; (a1050 <Cl_dprep_controller+0x18e0>)
   a0e20:	4798      	blx	r3
   a0e22:	4603      	mov	r3, r0
   a0e24:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a0e28:	2101      	movs	r1, #1
   a0e2a:	200e      	movs	r0, #14
   a0e2c:	4b88      	ldr	r3, [pc, #544]	; (a1050 <Cl_dprep_controller+0x18e0>)
   a0e2e:	4798      	blx	r3
   a0e30:	4603      	mov	r3, r0
   a0e32:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								
								
							}
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   a0e36:	4b85      	ldr	r3, [pc, #532]	; (a104c <Cl_dprep_controller+0x18dc>)
   a0e38:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0e3c:	2b3c      	cmp	r3, #60	; 0x3c
   a0e3e:	d101      	bne.n	a0e44 <Cl_dprep_controller+0x16d4>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   a0e40:	4b84      	ldr	r3, [pc, #528]	; (a1054 <Cl_dprep_controller+0x18e4>)
   a0e42:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   a0e44:	2003      	movs	r0, #3
   a0e46:	4b84      	ldr	r3, [pc, #528]	; (a1058 <Cl_dprep_controller+0x18e8>)
   a0e48:	4798      	blx	r3
						//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   a0e4a:	4b84      	ldr	r3, [pc, #528]	; (a105c <Cl_dprep_controller+0x18ec>)
   a0e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0e50:	2b04      	cmp	r3, #4
   a0e52:	dd67      	ble.n	a0f24 <Cl_dprep_controller+0x17b4>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   a0e54:	4b81      	ldr	r3, [pc, #516]	; (a105c <Cl_dprep_controller+0x18ec>)
   a0e56:	2200      	movs	r2, #0
   a0e58:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   a0e5a:	2101      	movs	r1, #1
   a0e5c:	2009      	movs	r0, #9
   a0e5e:	4b80      	ldr	r3, [pc, #512]	; (a1060 <Cl_dprep_controller+0x18f0>)
   a0e60:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   a0e62:	4b80      	ldr	r3, [pc, #512]	; (a1064 <Cl_dprep_controller+0x18f4>)
   a0e64:	695b      	ldr	r3, [r3, #20]
   a0e66:	67fb      	str	r3, [r7, #124]	; 0x7c
								 Cl_Uint16Type potvalue=0;
   a0e68:	2300      	movs	r3, #0
   a0e6a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
// 									 break;
// 									 
// 									 default:
// 									 break;
// 								 }
								sv_cntrl_enable_bypass();
   a0e6e:	4b7e      	ldr	r3, [pc, #504]	; (a1068 <Cl_dprep_controller+0x18f8>)
   a0e70:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   a0e72:	4b7e      	ldr	r3, [pc, #504]	; (a106c <Cl_dprep_controller+0x18fc>)
   a0e74:	4798      	blx	r3
   a0e76:	4603      	mov	r3, r0
   a0e78:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a0e7c:	4b7c      	ldr	r3, [pc, #496]	; (a1070 <Cl_dprep_controller+0x1900>)
   a0e7e:	2201      	movs	r2, #1
   a0e80:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   a0e82:	4b7c      	ldr	r3, [pc, #496]	; (a1074 <Cl_dprep_controller+0x1904>)
   a0e84:	2208      	movs	r2, #8
   a0e86:	701a      	strb	r2, [r3, #0]
							}
						break;
   a0e88:	e04c      	b.n	a0f24 <Cl_dprep_controller+0x17b4>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//Cl_Stop_Dialyzer_Prime();
						Cl_Dprep_Priming_Stop();
   a0e8a:	4b7b      	ldr	r3, [pc, #492]	; (a1078 <Cl_dprep_controller+0x1908>)
   a0e8c:	4798      	blx	r3
					//	Cl_dprep_StopMixing();
					//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
					//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
						break;
   a0e8e:	e04c      	b.n	a0f2a <Cl_dprep_controller+0x17ba>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0e90:	4b7a      	ldr	r3, [pc, #488]	; (a107c <Cl_dprep_controller+0x190c>)
   a0e92:	4798      	blx	r3
   a0e94:	4603      	mov	r3, r0
   a0e96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a0e9a:	e046      	b.n	a0f2a <Cl_dprep_controller+0x17ba>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a0e9c:	f107 0337 	add.w	r3, r7, #55	; 0x37
   a0ea0:	4619      	mov	r1, r3
   a0ea2:	203c      	movs	r0, #60	; 0x3c
   a0ea4:	4b76      	ldr	r3, [pc, #472]	; (a1080 <Cl_dprep_controller+0x1910>)
   a0ea6:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   a0ea8:	e03f      	b.n	a0f2a <Cl_dprep_controller+0x17ba>
						
						case EVENT_DPREP_CLR_ALARM:
						
									if(powerFailureFlag == 1){
   a0eaa:	4b76      	ldr	r3, [pc, #472]	; (a1084 <Cl_dprep_controller+0x1914>)
   a0eac:	681b      	ldr	r3, [r3, #0]
   a0eae:	2b01      	cmp	r3, #1
   a0eb0:	d120      	bne.n	a0ef4 <Cl_dprep_controller+0x1784>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0eb2:	4975      	ldr	r1, [pc, #468]	; (a1088 <Cl_dprep_controller+0x1918>)
   a0eb4:	2024      	movs	r0, #36	; 0x24
   a0eb6:	4b62      	ldr	r3, [pc, #392]	; (a1040 <Cl_dprep_controller+0x18d0>)
   a0eb8:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0eba:	4b73      	ldr	r3, [pc, #460]	; (a1088 <Cl_dprep_controller+0x1918>)
   a0ebc:	881b      	ldrh	r3, [r3, #0]
   a0ebe:	2b00      	cmp	r3, #0
   a0ec0:	d132      	bne.n	a0f28 <Cl_dprep_controller+0x17b8>
						
						powerFailureFlag = 0;
   a0ec2:	4b70      	ldr	r3, [pc, #448]	; (a1084 <Cl_dprep_controller+0x1914>)
   a0ec4:	2200      	movs	r2, #0
   a0ec6:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0ec8:	2351      	movs	r3, #81	; 0x51
   a0eca:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a0ece:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0ed2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0ed6:	2200      	movs	r2, #0
   a0ed8:	4618      	mov	r0, r3
   a0eda:	4b6c      	ldr	r3, [pc, #432]	; (a108c <Cl_dprep_controller+0x191c>)
   a0edc:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a0ede:	4b6c      	ldr	r3, [pc, #432]	; (a1090 <Cl_dprep_controller+0x1920>)
   a0ee0:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a0ee2:	4b6c      	ldr	r3, [pc, #432]	; (a1094 <Cl_dprep_controller+0x1924>)
   a0ee4:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a0ee6:	4b6c      	ldr	r3, [pc, #432]	; (a1098 <Cl_dprep_controller+0x1928>)
   a0ee8:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a0eea:	4b6c      	ldr	r3, [pc, #432]	; (a109c <Cl_dprep_controller+0x192c>)
   a0eec:	4798      	blx	r3
							sv_cntrl_disable_bypass();
   a0eee:	4b6c      	ldr	r3, [pc, #432]	; (a10a0 <Cl_dprep_controller+0x1930>)
   a0ef0:	4798      	blx	r3
						sv_cntrl_resetredalarm();
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
					}
						break;
   a0ef2:	e019      	b.n	a0f28 <Cl_dprep_controller+0x17b8>
									}
					else{			
					
						
						
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a0ef4:	2351      	movs	r3, #81	; 0x51
   a0ef6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a0efa:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0efe:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0f02:	2200      	movs	r2, #0
   a0f04:	4618      	mov	r0, r3
   a0f06:	4b61      	ldr	r3, [pc, #388]	; (a108c <Cl_dprep_controller+0x191c>)
   a0f08:	4798      	blx	r3
						
						sv_cntrl_resetyellowalarm();
   a0f0a:	4b61      	ldr	r3, [pc, #388]	; (a1090 <Cl_dprep_controller+0x1920>)
   a0f0c:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   a0f0e:	4b61      	ldr	r3, [pc, #388]	; (a1094 <Cl_dprep_controller+0x1924>)
   a0f10:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   a0f12:	4b61      	ldr	r3, [pc, #388]	; (a1098 <Cl_dprep_controller+0x1928>)
   a0f14:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   a0f16:	4b61      	ldr	r3, [pc, #388]	; (a109c <Cl_dprep_controller+0x192c>)
   a0f18:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   a0f1a:	4b61      	ldr	r3, [pc, #388]	; (a10a0 <Cl_dprep_controller+0x1930>)
   a0f1c:	4798      	blx	r3
					}
						break;
   a0f1e:	e003      	b.n	a0f28 <Cl_dprep_controller+0x17b8>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   a0f20:	bf00      	nop
   a0f22:	e204      	b.n	a132e <Cl_dprep_controller+0x1bbe>
								sv_cntrl_enable_bypass();
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
   a0f24:	bf00      	nop
   a0f26:	e202      	b.n	a132e <Cl_dprep_controller+0x1bbe>
						sv_cntrl_resetredalarm();
						sv_cntrl_nobuzzer();
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
					}
						break;
   a0f28:	bf00      	nop
						
					}
					
					
		break;
   a0f2a:	e200      	b.n	a132e <Cl_dprep_controller+0x1bbe>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   a0f2c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a0f30:	2b01      	cmp	r3, #1
   a0f32:	d002      	beq.n	a0f3a <Cl_dprep_controller+0x17ca>
   a0f34:	2b0d      	cmp	r3, #13
   a0f36:	d037      	beq.n	a0fa8 <Cl_dprep_controller+0x1838>
								Cl_bc_controller(BC_EVENT_RESUME);
								Cl_Dprep_StartDialyserPrime();
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
   a0f38:	e041      	b.n	a0fbe <Cl_dprep_controller+0x184e>
						switch(cl_dprepevent)
							{
								
								case EVENT_DPREP_CLR_ALARM:
								
												if(powerFailureFlag == 1){
   a0f3a:	4b52      	ldr	r3, [pc, #328]	; (a1084 <Cl_dprep_controller+0x1914>)
   a0f3c:	681b      	ldr	r3, [r3, #0]
   a0f3e:	2b01      	cmp	r3, #1
   a0f40:	d11e      	bne.n	a0f80 <Cl_dprep_controller+0x1810>
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&dprep_powerFailSensorData);
   a0f42:	4951      	ldr	r1, [pc, #324]	; (a1088 <Cl_dprep_controller+0x1918>)
   a0f44:	2024      	movs	r0, #36	; 0x24
   a0f46:	4b3e      	ldr	r3, [pc, #248]	; (a1040 <Cl_dprep_controller+0x18d0>)
   a0f48:	4798      	blx	r3
					
								if(dprep_powerFailSensorData == 0){
   a0f4a:	4b4f      	ldr	r3, [pc, #316]	; (a1088 <Cl_dprep_controller+0x1918>)
   a0f4c:	881b      	ldrh	r3, [r3, #0]
   a0f4e:	2b00      	cmp	r3, #0
   a0f50:	d134      	bne.n	a0fbc <Cl_dprep_controller+0x184c>
						
						powerFailureFlag = 0;
   a0f52:	4b4c      	ldr	r3, [pc, #304]	; (a1084 <Cl_dprep_controller+0x1914>)
   a0f54:	2200      	movs	r2, #0
   a0f56:	601a      	str	r2, [r3, #0]
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a0f58:	2351      	movs	r3, #81	; 0x51
   a0f5a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							Cl_SendDatatoconsole(command,&data,0);
   a0f5e:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0f62:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0f66:	2200      	movs	r2, #0
   a0f68:	4618      	mov	r0, r3
   a0f6a:	4b48      	ldr	r3, [pc, #288]	; (a108c <Cl_dprep_controller+0x191c>)
   a0f6c:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   a0f6e:	4b48      	ldr	r3, [pc, #288]	; (a1090 <Cl_dprep_controller+0x1920>)
   a0f70:	4798      	blx	r3
							sv_cntrl_resetredalarm();
   a0f72:	4b48      	ldr	r3, [pc, #288]	; (a1094 <Cl_dprep_controller+0x1924>)
   a0f74:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   a0f76:	4b48      	ldr	r3, [pc, #288]	; (a1098 <Cl_dprep_controller+0x1928>)
   a0f78:	4798      	blx	r3
							Cl_Dprep_ResetAlertsforReassertion();
   a0f7a:	4b48      	ldr	r3, [pc, #288]	; (a109c <Cl_dprep_controller+0x192c>)
   a0f7c:	4798      	blx	r3
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
												
								break;
   a0f7e:	e01d      	b.n	a0fbc <Cl_dprep_controller+0x184c>
					}
												}
					else{			
					
								
								command = CON_TX_COMMAND_ALARM_CLEARED;
   a0f80:	2351      	movs	r3, #81	; 0x51
   a0f82:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
							    Cl_SendDatatoconsole(command,&data,0);
   a0f86:	f107 0177 	add.w	r1, r7, #119	; 0x77
   a0f8a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a0f8e:	2200      	movs	r2, #0
   a0f90:	4618      	mov	r0, r3
   a0f92:	4b3e      	ldr	r3, [pc, #248]	; (a108c <Cl_dprep_controller+0x191c>)
   a0f94:	4798      	blx	r3
							
					
										sv_cntrl_resetyellowalarm();
   a0f96:	4b3e      	ldr	r3, [pc, #248]	; (a1090 <Cl_dprep_controller+0x1920>)
   a0f98:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a0f9a:	4b3e      	ldr	r3, [pc, #248]	; (a1094 <Cl_dprep_controller+0x1924>)
   a0f9c:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a0f9e:	4b3e      	ldr	r3, [pc, #248]	; (a1098 <Cl_dprep_controller+0x1928>)
   a0fa0:	4798      	blx	r3
										Cl_Dprep_ResetAlertsforReassertion();
   a0fa2:	4b3e      	ldr	r3, [pc, #248]	; (a109c <Cl_dprep_controller+0x192c>)
   a0fa4:	4798      	blx	r3
					}
												
								break;
   a0fa6:	e009      	b.n	a0fbc <Cl_dprep_controller+0x184c>
								
								
								case EVENT_DPREP_START_DIALISER_PRIME:
								//sv_prop_startmixing();
								Cl_bc_controller(BC_EVENT_RESUME);
   a0fa8:	200b      	movs	r0, #11
   a0faa:	4b3e      	ldr	r3, [pc, #248]	; (a10a4 <Cl_dprep_controller+0x1934>)
   a0fac:	4798      	blx	r3
								Cl_Dprep_StartDialyserPrime();
   a0fae:	4b3e      	ldr	r3, [pc, #248]	; (a10a8 <Cl_dprep_controller+0x1938>)
   a0fb0:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a0fb2:	4b3e      	ldr	r3, [pc, #248]	; (a10ac <Cl_dprep_controller+0x193c>)
   a0fb4:	4798      	blx	r3
								sv_prop_startmixing();
   a0fb6:	4b3e      	ldr	r3, [pc, #248]	; (a10b0 <Cl_dprep_controller+0x1940>)
   a0fb8:	4798      	blx	r3
								 break;
   a0fba:	e000      	b.n	a0fbe <Cl_dprep_controller+0x184e>
										sv_cntrl_resetredalarm();
										sv_cntrl_nobuzzer();
										Cl_Dprep_ResetAlertsforReassertion();
					}
												
								break;
   a0fbc:	bf00      	nop
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
							}
		break;
   a0fbe:	e1b9      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   a0fc0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a0fc4:	3b16      	subs	r3, #22
   a0fc6:	2b06      	cmp	r3, #6
   a0fc8:	f200 81b3 	bhi.w	a1332 <Cl_dprep_controller+0x1bc2>
   a0fcc:	a201      	add	r2, pc, #4	; (adr r2, a0fd4 <Cl_dprep_controller+0x1864>)
   a0fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0fd2:	bf00      	nop
   a0fd4:	000a10c1 	.word	0x000a10c1
   a0fd8:	000a1039 	.word	0x000a1039
   a0fdc:	000a1333 	.word	0x000a1333
   a0fe0:	000a0fff 	.word	0x000a0fff
   a0fe4:	000a0ff1 	.word	0x000a0ff1
   a0fe8:	000a101b 	.word	0x000a101b
   a0fec:	000a100b 	.word	0x000a100b
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a0ff0:	f107 0337 	add.w	r3, r7, #55	; 0x37
   a0ff4:	4619      	mov	r1, r3
   a0ff6:	203c      	movs	r0, #60	; 0x3c
   a0ff8:	4b21      	ldr	r3, [pc, #132]	; (a1080 <Cl_dprep_controller+0x1910>)
   a0ffa:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   a0ffc:	e0c4      	b.n	a1188 <Cl_dprep_controller+0x1a18>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a0ffe:	4b1f      	ldr	r3, [pc, #124]	; (a107c <Cl_dprep_controller+0x190c>)
   a1000:	4798      	blx	r3
   a1002:	4603      	mov	r3, r0
   a1004:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				break;
   a1008:	e0be      	b.n	a1188 <Cl_dprep_controller+0x1a18>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   a100a:	2100      	movs	r1, #0
   a100c:	2004      	movs	r0, #4
   a100e:	4b29      	ldr	r3, [pc, #164]	; (a10b4 <Cl_dprep_controller+0x1944>)
   a1010:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   a1012:	4b29      	ldr	r3, [pc, #164]	; (a10b8 <Cl_dprep_controller+0x1948>)
   a1014:	2201      	movs	r2, #1
   a1016:	701a      	strb	r2, [r3, #0]
				break;
   a1018:	e0b6      	b.n	a1188 <Cl_dprep_controller+0x1a18>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   a101a:	4b27      	ldr	r3, [pc, #156]	; (a10b8 <Cl_dprep_controller+0x1948>)
   a101c:	781b      	ldrb	r3, [r3, #0]
   a101e:	2b02      	cmp	r3, #2
   a1020:	f040 80af 	bne.w	a1182 <Cl_dprep_controller+0x1a12>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   a1024:	204c      	movs	r0, #76	; 0x4c
   a1026:	4b25      	ldr	r3, [pc, #148]	; (a10bc <Cl_dprep_controller+0x194c>)
   a1028:	4798      	blx	r3
   a102a:	4603      	mov	r3, r0
   a102c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   a1030:	4b10      	ldr	r3, [pc, #64]	; (a1074 <Cl_dprep_controller+0x1904>)
   a1032:	2209      	movs	r2, #9
   a1034:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   a1036:	e0a4      	b.n	a1182 <Cl_dprep_controller+0x1a12>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   a1038:	4b18      	ldr	r3, [pc, #96]	; (a109c <Cl_dprep_controller+0x192c>)
   a103a:	4798      	blx	r3
				break;
   a103c:	e0a4      	b.n	a1188 <Cl_dprep_controller+0x1a18>
   a103e:	bf00      	nop
   a1040:	0008fa01 	.word	0x0008fa01
   a1044:	000a7ef9 	.word	0x000a7ef9
   a1048:	20071b4e 	.word	0x20071b4e
   a104c:	20071b5a 	.word	0x20071b5a
   a1050:	000829e5 	.word	0x000829e5
   a1054:	000a1e55 	.word	0x000a1e55
   a1058:	000a1ead 	.word	0x000a1ead
   a105c:	20071b5c 	.word	0x20071b5c
   a1060:	00088019 	.word	0x00088019
   a1064:	20072614 	.word	0x20072614
   a1068:	0009af8d 	.word	0x0009af8d
   a106c:	000a1635 	.word	0x000a1635
   a1070:	20071b70 	.word	0x20071b70
   a1074:	20071b6f 	.word	0x20071b6f
   a1078:	000a375d 	.word	0x000a375d
   a107c:	000a16b9 	.word	0x000a16b9
   a1080:	00082bc1 	.word	0x00082bc1
   a1084:	20071b24 	.word	0x20071b24
   a1088:	20071b28 	.word	0x20071b28
   a108c:	0009cbd5 	.word	0x0009cbd5
   a1090:	0009b091 	.word	0x0009b091
   a1094:	0009b07d 	.word	0x0009b07d
   a1098:	0009b0b9 	.word	0x0009b0b9
   a109c:	000a2369 	.word	0x000a2369
   a10a0:	0009afa9 	.word	0x0009afa9
   a10a4:	00082ea5 	.word	0x00082ea5
   a10a8:	000a33b1 	.word	0x000a33b1
   a10ac:	0009af71 	.word	0x0009af71
   a10b0:	0009b17d 	.word	0x0009b17d
   a10b4:	00093f5d 	.word	0x00093f5d
   a10b8:	20071b6e 	.word	0x20071b6e
   a10bc:	0008b715 	.word	0x0008b715
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   a10c0:	4b9f      	ldr	r3, [pc, #636]	; (a1340 <Cl_dprep_controller+0x1bd0>)
   a10c2:	781b      	ldrb	r3, [r3, #0]
   a10c4:	2b01      	cmp	r3, #1
   a10c6:	d13d      	bne.n	a1144 <Cl_dprep_controller+0x19d4>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   a10c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   a10cc:	4619      	mov	r1, r3
   a10ce:	200a      	movs	r0, #10
   a10d0:	4b9c      	ldr	r3, [pc, #624]	; (a1344 <Cl_dprep_controller+0x1bd4>)
   a10d2:	4798      	blx	r3
				
					if(temp == 1)        // manav02 changed to 1
   a10d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   a10d6:	2b01      	cmp	r3, #1
   a10d8:	d134      	bne.n	a1144 <Cl_dprep_controller+0x19d4>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   a10da:	2205      	movs	r2, #5
   a10dc:	499a      	ldr	r1, [pc, #616]	; (a1348 <Cl_dprep_controller+0x1bd8>)
   a10de:	2018      	movs	r0, #24
   a10e0:	4b9a      	ldr	r3, [pc, #616]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a10e2:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   a10e4:	2200      	movs	r2, #0
   a10e6:	2100      	movs	r1, #0
   a10e8:	2027      	movs	r0, #39	; 0x27
   a10ea:	4b98      	ldr	r3, [pc, #608]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a10ec:	4798      	blx	r3
   a10ee:	4603      	mov	r3, r0
   a10f0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   a10f4:	4b92      	ldr	r3, [pc, #584]	; (a1340 <Cl_dprep_controller+0x1bd0>)
   a10f6:	2202      	movs	r2, #2
   a10f8:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   a10fa:	4b95      	ldr	r3, [pc, #596]	; (a1350 <Cl_dprep_controller+0x1be0>)
   a10fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   a10fe:	60fb      	str	r3, [r7, #12]
										hep_calibration(temp);
   a1100:	68fb      	ldr	r3, [r7, #12]
   a1102:	4618      	mov	r0, r3
   a1104:	4b93      	ldr	r3, [pc, #588]	; (a1354 <Cl_dprep_controller+0x1be4>)
   a1106:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   a1108:	f107 030c 	add.w	r3, r7, #12
   a110c:	2202      	movs	r2, #2
   a110e:	4619      	mov	r1, r3
   a1110:	2019      	movs	r0, #25
   a1112:	4b8e      	ldr	r3, [pc, #568]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a1114:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   a1116:	2202      	movs	r2, #2
   a1118:	498f      	ldr	r1, [pc, #572]	; (a1358 <Cl_dprep_controller+0x1be8>)
   a111a:	2019      	movs	r0, #25
   a111c:	4b8b      	ldr	r3, [pc, #556]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a111e:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   a1120:	4b8d      	ldr	r3, [pc, #564]	; (a1358 <Cl_dprep_controller+0x1be8>)
   a1122:	681b      	ldr	r3, [r3, #0]
   a1124:	4619      	mov	r1, r3
   a1126:	2006      	movs	r0, #6
   a1128:	4b8c      	ldr	r3, [pc, #560]	; (a135c <Cl_dprep_controller+0x1bec>)
   a112a:	4798      	blx	r3
										cl_wait(100);
   a112c:	2064      	movs	r0, #100	; 0x64
   a112e:	4b8c      	ldr	r3, [pc, #560]	; (a1360 <Cl_dprep_controller+0x1bf0>)
   a1130:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   a1132:	2100      	movs	r1, #0
   a1134:	200b      	movs	r0, #11
   a1136:	4b89      	ldr	r3, [pc, #548]	; (a135c <Cl_dprep_controller+0x1bec>)
   a1138:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   a113a:	2207      	movs	r2, #7
   a113c:	4989      	ldr	r1, [pc, #548]	; (a1364 <Cl_dprep_controller+0x1bf4>)
   a113e:	2018      	movs	r0, #24
   a1140:	4b82      	ldr	r3, [pc, #520]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a1142:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   a1144:	4b7e      	ldr	r3, [pc, #504]	; (a1340 <Cl_dprep_controller+0x1bd0>)
   a1146:	781b      	ldrb	r3, [r3, #0]
   a1148:	2b02      	cmp	r3, #2
   a114a:	d11c      	bne.n	a1186 <Cl_dprep_controller+0x1a16>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   a114c:	4b86      	ldr	r3, [pc, #536]	; (a1368 <Cl_dprep_controller+0x1bf8>)
   a114e:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1152:	b29b      	uxth	r3, r3
   a1154:	3301      	adds	r3, #1
   a1156:	b29b      	uxth	r3, r3
   a1158:	b21a      	sxth	r2, r3
   a115a:	4b83      	ldr	r3, [pc, #524]	; (a1368 <Cl_dprep_controller+0x1bf8>)
   a115c:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   a115e:	4b82      	ldr	r3, [pc, #520]	; (a1368 <Cl_dprep_controller+0x1bf8>)
   a1160:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1164:	2b3c      	cmp	r3, #60	; 0x3c
   a1166:	d10e      	bne.n	a1186 <Cl_dprep_controller+0x1a16>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   a1168:	4b7f      	ldr	r3, [pc, #508]	; (a1368 <Cl_dprep_controller+0x1bf8>)
   a116a:	2200      	movs	r2, #0
   a116c:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   a116e:	2207      	movs	r2, #7
   a1170:	497e      	ldr	r1, [pc, #504]	; (a136c <Cl_dprep_controller+0x1bfc>)
   a1172:	2018      	movs	r0, #24
   a1174:	4b75      	ldr	r3, [pc, #468]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a1176:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   a1178:	2100      	movs	r1, #0
   a117a:	2009      	movs	r0, #9
   a117c:	4b77      	ldr	r3, [pc, #476]	; (a135c <Cl_dprep_controller+0x1bec>)
   a117e:	4798      	blx	r3
					}
					}
				break;
   a1180:	e001      	b.n	a1186 <Cl_dprep_controller+0x1a16>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
				}
				
				break;
   a1182:	bf00      	nop
   a1184:	e0d5      	b.n	a1332 <Cl_dprep_controller+0x1bc2>
						Cl_Dprep_hepbolus_secondscounter = 0;
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
					}
					}
				break;
   a1186:	bf00      	nop
			}
		
		break;
   a1188:	e0d3      	b.n	a1332 <Cl_dprep_controller+0x1bc2>
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   a118a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   a118e:	3b03      	subs	r3, #3
   a1190:	2b17      	cmp	r3, #23
   a1192:	f200 80c0 	bhi.w	a1316 <Cl_dprep_controller+0x1ba6>
   a1196:	a201      	add	r2, pc, #4	; (adr r2, a119c <Cl_dprep_controller+0x1a2c>)
   a1198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a119c:	000a12af 	.word	0x000a12af
   a11a0:	000a1235 	.word	0x000a1235
   a11a4:	000a1317 	.word	0x000a1317
   a11a8:	000a1317 	.word	0x000a1317
   a11ac:	000a1317 	.word	0x000a1317
   a11b0:	000a1317 	.word	0x000a1317
   a11b4:	000a1317 	.word	0x000a1317
   a11b8:	000a1317 	.word	0x000a1317
   a11bc:	000a1317 	.word	0x000a1317
   a11c0:	000a1317 	.word	0x000a1317
   a11c4:	000a1317 	.word	0x000a1317
   a11c8:	000a1317 	.word	0x000a1317
   a11cc:	000a1317 	.word	0x000a1317
   a11d0:	000a1317 	.word	0x000a1317
   a11d4:	000a1317 	.word	0x000a1317
   a11d8:	000a1317 	.word	0x000a1317
   a11dc:	000a1317 	.word	0x000a1317
   a11e0:	000a1317 	.word	0x000a1317
   a11e4:	000a1317 	.word	0x000a1317
   a11e8:	000a1211 	.word	0x000a1211
   a11ec:	000a120b 	.word	0x000a120b
   a11f0:	000a1317 	.word	0x000a1317
   a11f4:	000a130b 	.word	0x000a130b
   a11f8:	000a11fd 	.word	0x000a11fd
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a11fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
   a1200:	4619      	mov	r1, r3
   a1202:	203c      	movs	r0, #60	; 0x3c
   a1204:	4b5a      	ldr	r3, [pc, #360]	; (a1370 <Cl_dprep_controller+0x1c00>)
   a1206:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   a1208:	e08c      	b.n	a1324 <Cl_dprep_controller+0x1bb4>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   a120a:	4b5a      	ldr	r3, [pc, #360]	; (a1374 <Cl_dprep_controller+0x1c04>)
   a120c:	4798      	blx	r3
					break;
   a120e:	e089      	b.n	a1324 <Cl_dprep_controller+0x1bb4>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   a1210:	2004      	movs	r0, #4
   a1212:	4b59      	ldr	r3, [pc, #356]	; (a1378 <Cl_dprep_controller+0x1c08>)
   a1214:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   a1216:	f107 0330 	add.w	r3, r7, #48	; 0x30
   a121a:	4619      	mov	r1, r3
   a121c:	200a      	movs	r0, #10
   a121e:	4b49      	ldr	r3, [pc, #292]	; (a1344 <Cl_dprep_controller+0x1bd4>)
   a1220:	4798      	blx	r3
					if( temp == 0)
   a1222:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   a1224:	2b00      	cmp	r3, #0
   a1226:	d178      	bne.n	a131a <Cl_dprep_controller+0x1baa>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   a1228:	2205      	movs	r2, #5
   a122a:	4947      	ldr	r1, [pc, #284]	; (a1348 <Cl_dprep_controller+0x1bd8>)
   a122c:	2018      	movs	r0, #24
   a122e:	4b47      	ldr	r3, [pc, #284]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a1230:	4798      	blx	r3
					}
					break;
   a1232:	e072      	b.n	a131a <Cl_dprep_controller+0x1baa>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   a1234:	4b51      	ldr	r3, [pc, #324]	; (a137c <Cl_dprep_controller+0x1c0c>)
   a1236:	7e1b      	ldrb	r3, [r3, #24]
   a1238:	2b00      	cmp	r3, #0
   a123a:	d070      	beq.n	a131e <Cl_dprep_controller+0x1bae>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   a123c:	4b4f      	ldr	r3, [pc, #316]	; (a137c <Cl_dprep_controller+0x1c0c>)
   a123e:	791b      	ldrb	r3, [r3, #4]
   a1240:	2b03      	cmp	r3, #3
   a1242:	d002      	beq.n	a124a <Cl_dprep_controller+0x1ada>
   a1244:	2b04      	cmp	r3, #4
   a1246:	d015      	beq.n	a1274 <Cl_dprep_controller+0x1b04>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   a1248:	e030      	b.n	a12ac <Cl_dprep_controller+0x1b3c>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a124a:	2316      	movs	r3, #22
   a124c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   a1250:	2303      	movs	r3, #3
   a1252:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									dataarray[1] = 0;
   a1256:	2300      	movs	r3, #0
   a1258:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a125c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a1260:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a1264:	2202      	movs	r2, #2
   a1266:	4618      	mov	r0, r3
   a1268:	4b38      	ldr	r3, [pc, #224]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a126a:	4798      	blx	r3
   a126c:	4603      	mov	r3, r0
   a126e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   a1272:	e01b      	b.n	a12ac <Cl_dprep_controller+0x1b3c>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   a1274:	2316      	movs	r3, #22
   a1276:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   a127a:	2304      	movs	r3, #4
   a127c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   a1280:	f107 0370 	add.w	r3, r7, #112	; 0x70
   a1284:	3301      	adds	r3, #1
   a1286:	4619      	mov	r1, r3
   a1288:	2004      	movs	r0, #4
   a128a:	4b3d      	ldr	r3, [pc, #244]	; (a1380 <Cl_dprep_controller+0x1c10>)
   a128c:	4798      	blx	r3
   a128e:	4603      	mov	r3, r0
   a1290:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a1294:	f107 0170 	add.w	r1, r7, #112	; 0x70
   a1298:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   a129c:	2202      	movs	r2, #2
   a129e:	4618      	mov	r0, r3
   a12a0:	4b2a      	ldr	r3, [pc, #168]	; (a134c <Cl_dprep_controller+0x1bdc>)
   a12a2:	4798      	blx	r3
   a12a4:	4603      	mov	r3, r0
   a12a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   a12aa:	bf00      	nop
									default:break;
								}
							}
				
						break;
   a12ac:	e037      	b.n	a131e <Cl_dprep_controller+0x1bae>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   a12ae:	4b33      	ldr	r3, [pc, #204]	; (a137c <Cl_dprep_controller+0x1c0c>)
   a12b0:	7e1b      	ldrb	r3, [r3, #24]
   a12b2:	2b00      	cmp	r3, #0
   a12b4:	d035      	beq.n	a1322 <Cl_dprep_controller+0x1bb2>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   a12b6:	4b31      	ldr	r3, [pc, #196]	; (a137c <Cl_dprep_controller+0x1c0c>)
   a12b8:	791b      	ldrb	r3, [r3, #4]
   a12ba:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a12be:	2300      	movs	r3, #0
   a12c0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   a12c4:	e011      	b.n	a12ea <Cl_dprep_controller+0x1b7a>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   a12c6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   a12ca:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   a12ce:	3201      	adds	r2, #1
   a12d0:	492a      	ldr	r1, [pc, #168]	; (a137c <Cl_dprep_controller+0x1c0c>)
   a12d2:	440a      	add	r2, r1
   a12d4:	7912      	ldrb	r2, [r2, #4]
   a12d6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   a12da:	440b      	add	r3, r1
   a12dc:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   a12e0:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   a12e4:	3301      	adds	r3, #1
   a12e6:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   a12ea:	4b24      	ldr	r3, [pc, #144]	; (a137c <Cl_dprep_controller+0x1c0c>)
   a12ec:	78db      	ldrb	r3, [r3, #3]
   a12ee:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   a12f2:	429a      	cmp	r2, r3
   a12f4:	d3e7      	bcc.n	a12c6 <Cl_dprep_controller+0x1b56>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   a12f6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   a12fa:	f897 0079 	ldrb.w	r0, [r7, #121]	; 0x79
   a12fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
   a1302:	ca06      	ldmia	r2, {r1, r2}
   a1304:	4c1f      	ldr	r4, [pc, #124]	; (a1384 <Cl_dprep_controller+0x1c14>)
   a1306:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   a1308:	e00b      	b.n	a1322 <Cl_dprep_controller+0x1bb2>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   a130a:	4b1f      	ldr	r3, [pc, #124]	; (a1388 <Cl_dprep_controller+0x1c18>)
   a130c:	4798      	blx	r3
   a130e:	4603      	mov	r3, r0
   a1310:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   a1314:	e006      	b.n	a1324 <Cl_dprep_controller+0x1bb4>
					default:
					break;
   a1316:	bf00      	nop
   a1318:	e00c      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
					if( temp == 0)
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
					}
					break;
   a131a:	bf00      	nop
   a131c:	e00a      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
									break;
									default:break;
								}
							}
				
						break;
   a131e:	bf00      	nop
   a1320:	e008      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
						 
						 
						 
								 }
	
						break;
   a1322:	bf00      	nop
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
					default:
					break;
				}
		break;
   a1324:	e006      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
										Cl_Dprep_ResetAlertsforReassertion();
					}
								break;

		}
		break;
   a1326:	bf00      	nop
   a1328:	e004      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
			
		
		}
		}
		
		break;
   a132a:	bf00      	nop
   a132c:	e002      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
						break;
						
					}
					
					
		break;
   a132e:	bf00      	nop
   a1330:	e000      	b.n	a1334 <Cl_dprep_controller+0x1bc4>
					}
					}
				break;
			}
		
		break;
   a1332:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   a1334:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
   a1338:	4618      	mov	r0, r3
   a133a:	37a4      	adds	r7, #164	; 0xa4
   a133c:	46bd      	mov	sp, r7
   a133e:	bd90      	pop	{r4, r7, pc}
   a1340:	20071b6e 	.word	0x20071b6e
   a1344:	0008fa01 	.word	0x0008fa01
   a1348:	000aa3fc 	.word	0x000aa3fc
   a134c:	0009cbd5 	.word	0x0009cbd5
   a1350:	20072614 	.word	0x20072614
   a1354:	00083ba5 	.word	0x00083ba5
   a1358:	200720b4 	.word	0x200720b4
   a135c:	00094729 	.word	0x00094729
   a1360:	00093ea9 	.word	0x00093ea9
   a1364:	000aa404 	.word	0x000aa404
   a1368:	20071b4c 	.word	0x20071b4c
   a136c:	000aa40c 	.word	0x000aa40c
   a1370:	00082bc1 	.word	0x00082bc1
   a1374:	000a2369 	.word	0x000a2369
   a1378:	000a1ead 	.word	0x000a1ead
   a137c:	20072350 	.word	0x20072350
   a1380:	0009b701 	.word	0x0009b701
   a1384:	000a252d 	.word	0x000a252d
   a1388:	000a16b9 	.word	0x000a16b9

000a138c <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   a138c:	b480      	push	{r7}
   a138e:	b083      	sub	sp, #12
   a1390:	af00      	add	r7, sp, #0
   a1392:	4603      	mov	r3, r0
   a1394:	6039      	str	r1, [r7, #0]
   a1396:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   a1398:	79fb      	ldrb	r3, [r7, #7]
   a139a:	3b09      	subs	r3, #9
   a139c:	2b56      	cmp	r3, #86	; 0x56
   a139e:	f200 8141 	bhi.w	a1624 <cl_dprep_translatemacevent+0x298>
   a13a2:	a201      	add	r2, pc, #4	; (adr r2, a13a8 <cl_dprep_translatemacevent+0x1c>)
   a13a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a13a8:	000a150d 	.word	0x000a150d
   a13ac:	000a1515 	.word	0x000a1515
   a13b0:	000a151d 	.word	0x000a151d
   a13b4:	000a1525 	.word	0x000a1525
   a13b8:	000a152d 	.word	0x000a152d
   a13bc:	000a1535 	.word	0x000a1535
   a13c0:	000a1545 	.word	0x000a1545
   a13c4:	000a154d 	.word	0x000a154d
   a13c8:	000a153d 	.word	0x000a153d
   a13cc:	000a1555 	.word	0x000a1555
   a13d0:	000a155d 	.word	0x000a155d
   a13d4:	000a1565 	.word	0x000a1565
   a13d8:	000a1605 	.word	0x000a1605
   a13dc:	000a156d 	.word	0x000a156d
   a13e0:	000a1625 	.word	0x000a1625
   a13e4:	000a1625 	.word	0x000a1625
   a13e8:	000a1625 	.word	0x000a1625
   a13ec:	000a1625 	.word	0x000a1625
   a13f0:	000a1625 	.word	0x000a1625
   a13f4:	000a15c5 	.word	0x000a15c5
   a13f8:	000a15d5 	.word	0x000a15d5
   a13fc:	000a15dd 	.word	0x000a15dd
   a1400:	000a15e5 	.word	0x000a15e5
   a1404:	000a1625 	.word	0x000a1625
   a1408:	000a15cd 	.word	0x000a15cd
   a140c:	000a1625 	.word	0x000a1625
   a1410:	000a1625 	.word	0x000a1625
   a1414:	000a1625 	.word	0x000a1625
   a1418:	000a1625 	.word	0x000a1625
   a141c:	000a15ed 	.word	0x000a15ed
   a1420:	000a15f5 	.word	0x000a15f5
   a1424:	000a15fd 	.word	0x000a15fd
   a1428:	000a1505 	.word	0x000a1505
   a142c:	000a1625 	.word	0x000a1625
   a1430:	000a1625 	.word	0x000a1625
   a1434:	000a1625 	.word	0x000a1625
   a1438:	000a15bd 	.word	0x000a15bd
   a143c:	000a15b5 	.word	0x000a15b5
   a1440:	000a1625 	.word	0x000a1625
   a1444:	000a1625 	.word	0x000a1625
   a1448:	000a1625 	.word	0x000a1625
   a144c:	000a1625 	.word	0x000a1625
   a1450:	000a1625 	.word	0x000a1625
   a1454:	000a1625 	.word	0x000a1625
   a1458:	000a1625 	.word	0x000a1625
   a145c:	000a1625 	.word	0x000a1625
   a1460:	000a1625 	.word	0x000a1625
   a1464:	000a1575 	.word	0x000a1575
   a1468:	000a157d 	.word	0x000a157d
   a146c:	000a1585 	.word	0x000a1585
   a1470:	000a158d 	.word	0x000a158d
   a1474:	000a1595 	.word	0x000a1595
   a1478:	000a159d 	.word	0x000a159d
   a147c:	000a1625 	.word	0x000a1625
   a1480:	000a1625 	.word	0x000a1625
   a1484:	000a1625 	.word	0x000a1625
   a1488:	000a1625 	.word	0x000a1625
   a148c:	000a1625 	.word	0x000a1625
   a1490:	000a1625 	.word	0x000a1625
   a1494:	000a1625 	.word	0x000a1625
   a1498:	000a1625 	.word	0x000a1625
   a149c:	000a1625 	.word	0x000a1625
   a14a0:	000a1625 	.word	0x000a1625
   a14a4:	000a1625 	.word	0x000a1625
   a14a8:	000a15a5 	.word	0x000a15a5
   a14ac:	000a1625 	.word	0x000a1625
   a14b0:	000a1625 	.word	0x000a1625
   a14b4:	000a15ad 	.word	0x000a15ad
   a14b8:	000a1625 	.word	0x000a1625
   a14bc:	000a1625 	.word	0x000a1625
   a14c0:	000a1625 	.word	0x000a1625
   a14c4:	000a1625 	.word	0x000a1625
   a14c8:	000a1625 	.word	0x000a1625
   a14cc:	000a1625 	.word	0x000a1625
   a14d0:	000a1625 	.word	0x000a1625
   a14d4:	000a1625 	.word	0x000a1625
   a14d8:	000a1625 	.word	0x000a1625
   a14dc:	000a1625 	.word	0x000a1625
   a14e0:	000a1625 	.word	0x000a1625
   a14e4:	000a1625 	.word	0x000a1625
   a14e8:	000a1625 	.word	0x000a1625
   a14ec:	000a1625 	.word	0x000a1625
   a14f0:	000a160d 	.word	0x000a160d
   a14f4:	000a1615 	.word	0x000a1615
   a14f8:	000a1625 	.word	0x000a1625
   a14fc:	000a1625 	.word	0x000a1625
   a1500:	000a161d 	.word	0x000a161d
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   a1504:	683b      	ldr	r3, [r7, #0]
   a1506:	2201      	movs	r2, #1
   a1508:	701a      	strb	r2, [r3, #0]
		break;
   a150a:	e08c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   a150c:	683b      	ldr	r3, [r7, #0]
   a150e:	2202      	movs	r2, #2
   a1510:	701a      	strb	r2, [r3, #0]
		break;
   a1512:	e088      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   a1514:	683b      	ldr	r3, [r7, #0]
   a1516:	2205      	movs	r2, #5
   a1518:	701a      	strb	r2, [r3, #0]
		break;
   a151a:	e084      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   a151c:	683b      	ldr	r3, [r7, #0]
   a151e:	2206      	movs	r2, #6
   a1520:	701a      	strb	r2, [r3, #0]
		break;
   a1522:	e080      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   a1524:	683b      	ldr	r3, [r7, #0]
   a1526:	2207      	movs	r2, #7
   a1528:	701a      	strb	r2, [r3, #0]
		break;
   a152a:	e07c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   a152c:	683b      	ldr	r3, [r7, #0]
   a152e:	2203      	movs	r2, #3
   a1530:	701a      	strb	r2, [r3, #0]
		break;
   a1532:	e078      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   a1534:	683b      	ldr	r3, [r7, #0]
   a1536:	2204      	movs	r2, #4
   a1538:	701a      	strb	r2, [r3, #0]
		break;
   a153a:	e074      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   a153c:	683b      	ldr	r3, [r7, #0]
   a153e:	2208      	movs	r2, #8
   a1540:	701a      	strb	r2, [r3, #0]
				break;
   a1542:	e070      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   a1544:	683b      	ldr	r3, [r7, #0]
   a1546:	220a      	movs	r2, #10
   a1548:	701a      	strb	r2, [r3, #0]
		break;
   a154a:	e06c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   a154c:	683b      	ldr	r3, [r7, #0]
   a154e:	220b      	movs	r2, #11
   a1550:	701a      	strb	r2, [r3, #0]
		break;
   a1552:	e068      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   a1554:	683b      	ldr	r3, [r7, #0]
   a1556:	220c      	movs	r2, #12
   a1558:	701a      	strb	r2, [r3, #0]
		break;
   a155a:	e064      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   a155c:	683b      	ldr	r3, [r7, #0]
   a155e:	220d      	movs	r2, #13
   a1560:	701a      	strb	r2, [r3, #0]
		break;
   a1562:	e060      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   a1564:	683b      	ldr	r3, [r7, #0]
   a1566:	220e      	movs	r2, #14
   a1568:	701a      	strb	r2, [r3, #0]
		break;	
   a156a:	e05c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   a156c:	683b      	ldr	r3, [r7, #0]
   a156e:	2212      	movs	r2, #18
   a1570:	701a      	strb	r2, [r3, #0]
		break;
   a1572:	e058      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   a1574:	683b      	ldr	r3, [r7, #0]
   a1576:	2213      	movs	r2, #19
   a1578:	701a      	strb	r2, [r3, #0]
		break;
   a157a:	e054      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   a157c:	683b      	ldr	r3, [r7, #0]
   a157e:	2214      	movs	r2, #20
   a1580:	701a      	strb	r2, [r3, #0]
		break;
   a1582:	e050      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   a1584:	683b      	ldr	r3, [r7, #0]
   a1586:	2215      	movs	r2, #21
   a1588:	701a      	strb	r2, [r3, #0]
		break;
   a158a:	e04c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   a158c:	683b      	ldr	r3, [r7, #0]
   a158e:	2216      	movs	r2, #22
   a1590:	701a      	strb	r2, [r3, #0]
		break;
   a1592:	e048      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   a1594:	683b      	ldr	r3, [r7, #0]
   a1596:	2217      	movs	r2, #23
   a1598:	701a      	strb	r2, [r3, #0]
		break;			 
   a159a:	e044      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   a159c:	683b      	ldr	r3, [r7, #0]
   a159e:	2218      	movs	r2, #24
   a15a0:	701a      	strb	r2, [r3, #0]
		break;
   a15a2:	e040      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   a15a4:	683b      	ldr	r3, [r7, #0]
   a15a6:	2210      	movs	r2, #16
   a15a8:	701a      	strb	r2, [r3, #0]
		break;
   a15aa:	e03c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   a15ac:	683b      	ldr	r3, [r7, #0]
   a15ae:	2211      	movs	r2, #17
   a15b0:	701a      	strb	r2, [r3, #0]
		break;
   a15b2:	e038      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   a15b4:	683b      	ldr	r3, [r7, #0]
   a15b6:	2219      	movs	r2, #25
   a15b8:	701a      	strb	r2, [r3, #0]
		break;
   a15ba:	e034      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   a15bc:	683b      	ldr	r3, [r7, #0]
   a15be:	221a      	movs	r2, #26
   a15c0:	701a      	strb	r2, [r3, #0]
		break;
   a15c2:	e030      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   a15c4:	683b      	ldr	r3, [r7, #0]
   a15c6:	221b      	movs	r2, #27
   a15c8:	701a      	strb	r2, [r3, #0]
		break;
   a15ca:	e02c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   a15cc:	683b      	ldr	r3, [r7, #0]
   a15ce:	221c      	movs	r2, #28
   a15d0:	701a      	strb	r2, [r3, #0]
		break;
   a15d2:	e028      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   a15d4:	683b      	ldr	r3, [r7, #0]
   a15d6:	221d      	movs	r2, #29
   a15d8:	701a      	strb	r2, [r3, #0]
		break;
   a15da:	e024      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   a15dc:	683b      	ldr	r3, [r7, #0]
   a15de:	221e      	movs	r2, #30
   a15e0:	701a      	strb	r2, [r3, #0]
		break;
   a15e2:	e020      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   a15e4:	683b      	ldr	r3, [r7, #0]
   a15e6:	221f      	movs	r2, #31
   a15e8:	701a      	strb	r2, [r3, #0]
		break;
   a15ea:	e01c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   a15ec:	683b      	ldr	r3, [r7, #0]
   a15ee:	2221      	movs	r2, #33	; 0x21
   a15f0:	701a      	strb	r2, [r3, #0]
		break;
   a15f2:	e018      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   a15f4:	683b      	ldr	r3, [r7, #0]
   a15f6:	2222      	movs	r2, #34	; 0x22
   a15f8:	701a      	strb	r2, [r3, #0]
		break;
   a15fa:	e014      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   a15fc:	683b      	ldr	r3, [r7, #0]
   a15fe:	2223      	movs	r2, #35	; 0x23
   a1600:	701a      	strb	r2, [r3, #0]
		break;
   a1602:	e010      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   a1604:	683b      	ldr	r3, [r7, #0]
   a1606:	220f      	movs	r2, #15
   a1608:	701a      	strb	r2, [r3, #0]
		break;
   a160a:	e00c      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a160c:	683b      	ldr	r3, [r7, #0]
   a160e:	225b      	movs	r2, #91	; 0x5b
   a1610:	701a      	strb	r2, [r3, #0]
		break;
   a1612:	e008      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a1614:	683b      	ldr	r3, [r7, #0]
   a1616:	225c      	movs	r2, #92	; 0x5c
   a1618:	701a      	strb	r2, [r3, #0]
		break;
   a161a:	e004      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		case EVT_CONSOLE_COMMAND_MUTE_ALARM:
		*cl_dprepevent = EVENT_DPREP_MUTE;
   a161c:	683b      	ldr	r3, [r7, #0]
   a161e:	2224      	movs	r2, #36	; 0x24
   a1620:	701a      	strb	r2, [r3, #0]
		break;
   a1622:	e000      	b.n	a1626 <cl_dprep_translatemacevent+0x29a>
		default:
		break;
   a1624:	bf00      	nop
	}
		 return CL_OK;
   a1626:	2300      	movs	r3, #0
}
   a1628:	4618      	mov	r0, r3
   a162a:	370c      	adds	r7, #12
   a162c:	46bd      	mov	sp, r7
   a162e:	bc80      	pop	{r7}
   a1630:	4770      	bx	lr
   a1632:	bf00      	nop

000a1634 <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   a1634:	b580      	push	{r7, lr}
   a1636:	b082      	sub	sp, #8
   a1638:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a163a:	2300      	movs	r3, #0
   a163c:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   a163e:	2300      	movs	r3, #0
   a1640:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   a1642:	4b15      	ldr	r3, [pc, #84]	; (a1698 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   a1644:	2200      	movs	r2, #0
   a1646:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   a1648:	4b14      	ldr	r3, [pc, #80]	; (a169c <cl_dprep_notifydacandgotodpreptandby+0x68>)
   a164a:	2200      	movs	r2, #0
   a164c:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   a164e:	4b14      	ldr	r3, [pc, #80]	; (a16a0 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   a1650:	2200      	movs	r2, #0
   a1652:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   a1654:	4b13      	ldr	r3, [pc, #76]	; (a16a4 <cl_dprep_notifydacandgotodpreptandby+0x70>)
   a1656:	2200      	movs	r2, #0
   a1658:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   a165a:	4b13      	ldr	r3, [pc, #76]	; (a16a8 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   a165c:	2200      	movs	r2, #0
   a165e:	601a      	str	r2, [r3, #0]
		data = 1;
   a1660:	2301      	movs	r3, #1
   a1662:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   a1664:	1dbb      	adds	r3, r7, #6
   a1666:	2201      	movs	r2, #1
   a1668:	4619      	mov	r1, r3
   a166a:	2002      	movs	r0, #2
   a166c:	4b0f      	ldr	r3, [pc, #60]	; (a16ac <cl_dprep_notifydacandgotodpreptandby+0x78>)
   a166e:	4798      	blx	r3
   a1670:	4603      	mov	r3, r0
   a1672:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   a1674:	1dbb      	adds	r3, r7, #6
   a1676:	2200      	movs	r2, #0
   a1678:	4619      	mov	r1, r3
   a167a:	2010      	movs	r0, #16
   a167c:	4b0c      	ldr	r3, [pc, #48]	; (a16b0 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   a167e:	4798      	blx	r3
   a1680:	4603      	mov	r3, r0
   a1682:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   a1684:	204c      	movs	r0, #76	; 0x4c
   a1686:	4b0b      	ldr	r3, [pc, #44]	; (a16b4 <cl_dprep_notifydacandgotodpreptandby+0x80>)
   a1688:	4798      	blx	r3
   a168a:	4603      	mov	r3, r0
   a168c:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   a168e:	79fb      	ldrb	r3, [r7, #7]
	}
   a1690:	4618      	mov	r0, r3
   a1692:	3708      	adds	r7, #8
   a1694:	46bd      	mov	sp, r7
   a1696:	bd80      	pop	{r7, pc}
   a1698:	20071b74 	.word	0x20071b74
   a169c:	20071b78 	.word	0x20071b78
   a16a0:	20071b7c 	.word	0x20071b7c
   a16a4:	20071b80 	.word	0x20071b80
   a16a8:	20071b84 	.word	0x20071b84
   a16ac:	0009b739 	.word	0x0009b739
   a16b0:	0009cbd5 	.word	0x0009cbd5
   a16b4:	0008b715 	.word	0x0008b715

000a16b8 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   a16b8:	b580      	push	{r7, lr}
   a16ba:	b082      	sub	sp, #8
   a16bc:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a16be:	2300      	movs	r3, #0
   a16c0:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a16c2:	2359      	movs	r3, #89	; 0x59
   a16c4:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   a16c6:	4b04      	ldr	r3, [pc, #16]	; (a16d8 <Cl_Dprep_ProcessAlarms+0x20>)
   a16c8:	4798      	blx	r3
   a16ca:	4603      	mov	r3, r0
   a16cc:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   a16ce:	79fb      	ldrb	r3, [r7, #7]
	}
   a16d0:	4618      	mov	r0, r3
   a16d2:	3708      	adds	r7, #8
   a16d4:	46bd      	mov	sp, r7
   a16d6:	bd80      	pop	{r7, pc}
   a16d8:	000a16dd 	.word	0x000a16dd

000a16dc <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   a16dc:	b580      	push	{r7, lr}
   a16de:	b084      	sub	sp, #16
   a16e0:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a16e2:	2300      	movs	r3, #0
   a16e4:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   a16e6:	2300      	movs	r3, #0
   a16e8:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   a16ea:	2300      	movs	r3, #0
   a16ec:	713b      	strb	r3, [r7, #4]
   a16ee:	2300      	movs	r3, #0
   a16f0:	717b      	strb	r3, [r7, #5]
   a16f2:	2300      	movs	r3, #0
   a16f4:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a16f6:	2359      	movs	r3, #89	; 0x59
   a16f8:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   a16fa:	2300      	movs	r3, #0
   a16fc:	73bb      	strb	r3, [r7, #14]
   a16fe:	e068      	b.n	a17d2 <Cl_Dprep_UpdateAlarmTable+0xf6>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   a1700:	7bba      	ldrb	r2, [r7, #14]
   a1702:	4938      	ldr	r1, [pc, #224]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1704:	4613      	mov	r3, r2
   a1706:	00db      	lsls	r3, r3, #3
   a1708:	1a9b      	subs	r3, r3, r2
   a170a:	440b      	add	r3, r1
   a170c:	7818      	ldrb	r0, [r3, #0]
   a170e:	7bba      	ldrb	r2, [r7, #14]
   a1710:	4613      	mov	r3, r2
   a1712:	00db      	lsls	r3, r3, #3
   a1714:	1a9b      	subs	r3, r3, r2
   a1716:	4a33      	ldr	r2, [pc, #204]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1718:	4413      	add	r3, r2
   a171a:	3302      	adds	r3, #2
   a171c:	4619      	mov	r1, r3
   a171e:	4b32      	ldr	r3, [pc, #200]	; (a17e8 <Cl_Dprep_UpdateAlarmTable+0x10c>)
   a1720:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   a1722:	7bba      	ldrb	r2, [r7, #14]
   a1724:	492f      	ldr	r1, [pc, #188]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1726:	4613      	mov	r3, r2
   a1728:	00db      	lsls	r3, r3, #3
   a172a:	1a9b      	subs	r3, r3, r2
   a172c:	440b      	add	r3, r1
   a172e:	3302      	adds	r3, #2
   a1730:	781b      	ldrb	r3, [r3, #0]
   a1732:	2b00      	cmp	r3, #0
   a1734:	d022      	beq.n	a177c <Cl_Dprep_UpdateAlarmTable+0xa0>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   a1736:	7bba      	ldrb	r2, [r7, #14]
   a1738:	492a      	ldr	r1, [pc, #168]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a173a:	4613      	mov	r3, r2
   a173c:	00db      	lsls	r3, r3, #3
   a173e:	1a9b      	subs	r3, r3, r2
   a1740:	440b      	add	r3, r1
   a1742:	3303      	adds	r3, #3
   a1744:	781b      	ldrb	r3, [r3, #0]
   a1746:	f083 0301 	eor.w	r3, r3, #1
   a174a:	b2db      	uxtb	r3, r3
   a174c:	2b00      	cmp	r3, #0
   a174e:	d03d      	beq.n	a17cc <Cl_Dprep_UpdateAlarmTable+0xf0>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   a1750:	7bba      	ldrb	r2, [r7, #14]
   a1752:	4924      	ldr	r1, [pc, #144]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1754:	4613      	mov	r3, r2
   a1756:	00db      	lsls	r3, r3, #3
   a1758:	1a9b      	subs	r3, r3, r2
   a175a:	440b      	add	r3, r1
   a175c:	3303      	adds	r3, #3
   a175e:	2201      	movs	r2, #1
   a1760:	701a      	strb	r2, [r3, #0]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   a1762:	7bba      	ldrb	r2, [r7, #14]
   a1764:	491f      	ldr	r1, [pc, #124]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1766:	4613      	mov	r3, r2
   a1768:	00db      	lsls	r3, r3, #3
   a176a:	1a9b      	subs	r3, r3, r2
   a176c:	440b      	add	r3, r1
   a176e:	781b      	ldrb	r3, [r3, #0]
   a1770:	4618      	mov	r0, r3
   a1772:	4b1e      	ldr	r3, [pc, #120]	; (a17ec <Cl_Dprep_UpdateAlarmTable+0x110>)
   a1774:	4798      	blx	r3
   a1776:	4603      	mov	r3, r0
   a1778:	73fb      	strb	r3, [r7, #15]
   a177a:	e027      	b.n	a17cc <Cl_Dprep_UpdateAlarmTable+0xf0>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   a177c:	7bba      	ldrb	r2, [r7, #14]
   a177e:	4919      	ldr	r1, [pc, #100]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1780:	4613      	mov	r3, r2
   a1782:	00db      	lsls	r3, r3, #3
   a1784:	1a9b      	subs	r3, r3, r2
   a1786:	440b      	add	r3, r1
   a1788:	3303      	adds	r3, #3
   a178a:	781b      	ldrb	r3, [r3, #0]
   a178c:	2b00      	cmp	r3, #0
   a178e:	d014      	beq.n	a17ba <Cl_Dprep_UpdateAlarmTable+0xde>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   a1790:	7bba      	ldrb	r2, [r7, #14]
   a1792:	4914      	ldr	r1, [pc, #80]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a1794:	4613      	mov	r3, r2
   a1796:	00db      	lsls	r3, r3, #3
   a1798:	1a9b      	subs	r3, r3, r2
   a179a:	440b      	add	r3, r1
   a179c:	3303      	adds	r3, #3
   a179e:	2200      	movs	r2, #0
   a17a0:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   a17a2:	2307      	movs	r3, #7
   a17a4:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   a17a6:	7bba      	ldrb	r2, [r7, #14]
   a17a8:	490e      	ldr	r1, [pc, #56]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a17aa:	4613      	mov	r3, r2
   a17ac:	00db      	lsls	r3, r3, #3
   a17ae:	1a9b      	subs	r3, r3, r2
   a17b0:	440b      	add	r3, r1
   a17b2:	781b      	ldrb	r3, [r3, #0]
   a17b4:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   a17b6:	2300      	movs	r3, #0
   a17b8:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   a17ba:	7bba      	ldrb	r2, [r7, #14]
   a17bc:	4909      	ldr	r1, [pc, #36]	; (a17e4 <Cl_Dprep_UpdateAlarmTable+0x108>)
   a17be:	4613      	mov	r3, r2
   a17c0:	00db      	lsls	r3, r3, #3
   a17c2:	1a9b      	subs	r3, r3, r2
   a17c4:	440b      	add	r3, r1
   a17c6:	3302      	adds	r3, #2
   a17c8:	2201      	movs	r2, #1
   a17ca:	701a      	strb	r2, [r3, #0]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   a17cc:	7bbb      	ldrb	r3, [r7, #14]
   a17ce:	3301      	adds	r3, #1
   a17d0:	73bb      	strb	r3, [r7, #14]
   a17d2:	7bbb      	ldrb	r3, [r7, #14]
   a17d4:	2b24      	cmp	r3, #36	; 0x24
   a17d6:	d993      	bls.n	a1700 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   a17d8:	7bfb      	ldrb	r3, [r7, #15]
	}
   a17da:	4618      	mov	r0, r3
   a17dc:	3710      	adds	r7, #16
   a17de:	46bd      	mov	sp, r7
   a17e0:	bd80      	pop	{r7, pc}
   a17e2:	bf00      	nop
   a17e4:	20070b64 	.word	0x20070b64
   a17e8:	00082bc1 	.word	0x00082bc1
   a17ec:	000a17f1 	.word	0x000a17f1

000a17f0 <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   a17f0:	b580      	push	{r7, lr}
   a17f2:	b086      	sub	sp, #24
   a17f4:	af00      	add	r7, sp, #0
   a17f6:	4603      	mov	r3, r0
   a17f8:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a17fa:	2300      	movs	r3, #0
   a17fc:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   a17fe:	2300      	movs	r3, #0
   a1800:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   a1802:	2300      	movs	r3, #0
   a1804:	827b      	strh	r3, [r7, #18]
   a1806:	2300      	movs	r3, #0
   a1808:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   a180a:	f107 0308 	add.w	r3, r7, #8
   a180e:	2100      	movs	r1, #0
   a1810:	460a      	mov	r2, r1
   a1812:	801a      	strh	r2, [r3, #0]
   a1814:	460a      	mov	r2, r1
   a1816:	709a      	strb	r2, [r3, #2]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a1818:	2300      	movs	r3, #0
   a181a:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a181c:	2359      	movs	r3, #89	; 0x59
   a181e:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   a1820:	79fb      	ldrb	r3, [r7, #7]
   a1822:	3b01      	subs	r3, #1
   a1824:	2b3e      	cmp	r3, #62	; 0x3e
   a1826:	f200 8145 	bhi.w	a1ab4 <CL_DrepAlarmActon+0x2c4>
   a182a:	a201      	add	r2, pc, #4	; (adr r2, a1830 <CL_DrepAlarmActon+0x40>)
   a182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1830:	000a1997 	.word	0x000a1997
   a1834:	000a1ab5 	.word	0x000a1ab5
   a1838:	000a19cd 	.word	0x000a19cd
   a183c:	000a19cd 	.word	0x000a19cd
   a1840:	000a1a15 	.word	0x000a1a15
   a1844:	000a1a15 	.word	0x000a1a15
   a1848:	000a1a4d 	.word	0x000a1a4d
   a184c:	000a1a4d 	.word	0x000a1a4d
   a1850:	000a1ab5 	.word	0x000a1ab5
   a1854:	000a1ab5 	.word	0x000a1ab5
   a1858:	000a1ab5 	.word	0x000a1ab5
   a185c:	000a1965 	.word	0x000a1965
   a1860:	000a1965 	.word	0x000a1965
   a1864:	000a1965 	.word	0x000a1965
   a1868:	000a1965 	.word	0x000a1965
   a186c:	000a1965 	.word	0x000a1965
   a1870:	000a1965 	.word	0x000a1965
   a1874:	000a1965 	.word	0x000a1965
   a1878:	000a1a4d 	.word	0x000a1a4d
   a187c:	000a1a4d 	.word	0x000a1a4d
   a1880:	000a1965 	.word	0x000a1965
   a1884:	000a1965 	.word	0x000a1965
   a1888:	000a1965 	.word	0x000a1965
   a188c:	000a1965 	.word	0x000a1965
   a1890:	000a1ab5 	.word	0x000a1ab5
   a1894:	000a1965 	.word	0x000a1965
   a1898:	000a1ab5 	.word	0x000a1ab5
   a189c:	000a1ab5 	.word	0x000a1ab5
   a18a0:	000a192d 	.word	0x000a192d
   a18a4:	000a1ab5 	.word	0x000a1ab5
   a18a8:	000a1ab5 	.word	0x000a1ab5
   a18ac:	000a1ab5 	.word	0x000a1ab5
   a18b0:	000a1ab5 	.word	0x000a1ab5
   a18b4:	000a1ab5 	.word	0x000a1ab5
   a18b8:	000a1ab5 	.word	0x000a1ab5
   a18bc:	000a1ab5 	.word	0x000a1ab5
   a18c0:	000a1ab5 	.word	0x000a1ab5
   a18c4:	000a1ab5 	.word	0x000a1ab5
   a18c8:	000a1965 	.word	0x000a1965
   a18cc:	000a1965 	.word	0x000a1965
   a18d0:	000a19cd 	.word	0x000a19cd
   a18d4:	000a1a15 	.word	0x000a1a15
   a18d8:	000a19cd 	.word	0x000a19cd
   a18dc:	000a1a15 	.word	0x000a1a15
   a18e0:	000a1ab5 	.word	0x000a1ab5
   a18e4:	000a1ab5 	.word	0x000a1ab5
   a18e8:	000a1ab5 	.word	0x000a1ab5
   a18ec:	000a1ab5 	.word	0x000a1ab5
   a18f0:	000a1ab5 	.word	0x000a1ab5
   a18f4:	000a1ab5 	.word	0x000a1ab5
   a18f8:	000a1ab5 	.word	0x000a1ab5
   a18fc:	000a1ab5 	.word	0x000a1ab5
   a1900:	000a1ab5 	.word	0x000a1ab5
   a1904:	000a1ab5 	.word	0x000a1ab5
   a1908:	000a1ab5 	.word	0x000a1ab5
   a190c:	000a1ab5 	.word	0x000a1ab5
   a1910:	000a1ab5 	.word	0x000a1ab5
   a1914:	000a1ab5 	.word	0x000a1ab5
   a1918:	000a1ab5 	.word	0x000a1ab5
   a191c:	000a1ab5 	.word	0x000a1ab5
   a1920:	000a1abb 	.word	0x000a1abb
   a1924:	000a1abb 	.word	0x000a1abb
   a1928:	000a1965 	.word	0x000a1965
	{
		
		case POWER_FAILURE:
		
		powerFailureFlag = 1 ;
   a192c:	4b78      	ldr	r3, [pc, #480]	; (a1b10 <CL_DrepAlarmActon+0x320>)
   a192e:	2201      	movs	r2, #1
   a1930:	601a      	str	r2, [r3, #0]
			sv_cntrl_buzzer();	
   a1932:	4b78      	ldr	r3, [pc, #480]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a1934:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a1936:	4b78      	ldr	r3, [pc, #480]	; (a1b18 <CL_DrepAlarmActon+0x328>)
   a1938:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a193a:	4b78      	ldr	r3, [pc, #480]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a193c:	781b      	ldrb	r3, [r3, #0]
   a193e:	2b06      	cmp	r3, #6
   a1940:	d007      	beq.n	a1952 <CL_DrepAlarmActon+0x162>
   a1942:	4b76      	ldr	r3, [pc, #472]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1944:	781b      	ldrb	r3, [r3, #0]
   a1946:	2b0e      	cmp	r3, #14
   a1948:	d003      	beq.n	a1952 <CL_DrepAlarmActon+0x162>
   a194a:	4b74      	ldr	r3, [pc, #464]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a194c:	781b      	ldrb	r3, [r3, #0]
   a194e:	2b0d      	cmp	r3, #13
   a1950:	d102      	bne.n	a1958 <CL_DrepAlarmActon+0x168>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a1952:	4b73      	ldr	r3, [pc, #460]	; (a1b20 <CL_DrepAlarmActon+0x330>)
   a1954:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
			
		
		break;
   a1956:	e0b3      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			//		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
			//		Cl_deactivate_prep_alarms();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   a1958:	4b72      	ldr	r3, [pc, #456]	; (a1b24 <CL_DrepAlarmActon+0x334>)
   a195a:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a195c:	4b6f      	ldr	r3, [pc, #444]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a195e:	220c      	movs	r2, #12
   a1960:	701a      	strb	r2, [r3, #0]
				}
			
		
		break;
   a1962:	e0ad      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			case	PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				
				//sv_cntrl_setredalarm();
	        	sv_cntrl_buzzer();	
   a1964:	4b6b      	ldr	r3, [pc, #428]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a1966:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a1968:	4b6b      	ldr	r3, [pc, #428]	; (a1b18 <CL_DrepAlarmActon+0x328>)
   a196a:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a196c:	4b6b      	ldr	r3, [pc, #428]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a196e:	781b      	ldrb	r3, [r3, #0]
   a1970:	2b06      	cmp	r3, #6
   a1972:	d007      	beq.n	a1984 <CL_DrepAlarmActon+0x194>
   a1974:	4b69      	ldr	r3, [pc, #420]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1976:	781b      	ldrb	r3, [r3, #0]
   a1978:	2b0e      	cmp	r3, #14
   a197a:	d003      	beq.n	a1984 <CL_DrepAlarmActon+0x194>
   a197c:	4b67      	ldr	r3, [pc, #412]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a197e:	781b      	ldrb	r3, [r3, #0]
   a1980:	2b0d      	cmp	r3, #13
   a1982:	d102      	bne.n	a198a <CL_DrepAlarmActon+0x19a>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a1984:	4b66      	ldr	r3, [pc, #408]	; (a1b20 <CL_DrepAlarmActon+0x330>)
   a1986:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
				
			
			break;
   a1988:	e09a      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			//		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
			//		Cl_deactivate_prep_alarms();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   a198a:	4b66      	ldr	r3, [pc, #408]	; (a1b24 <CL_DrepAlarmActon+0x334>)
   a198c:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a198e:	4b63      	ldr	r3, [pc, #396]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1990:	220c      	movs	r2, #12
   a1992:	701a      	strb	r2, [r3, #0]
				}
				
			
			break;
   a1994:	e094      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a1996:	4b64      	ldr	r3, [pc, #400]	; (a1b28 <CL_DrepAlarmActon+0x338>)
   a1998:	4798      	blx	r3
				sv_cntrl_buzzer();
   a199a:	4b5e      	ldr	r3, [pc, #376]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a199c:	4798      	blx	r3
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   a199e:	2100      	movs	r1, #0
   a19a0:	2004      	movs	r0, #4
   a19a2:	4b62      	ldr	r3, [pc, #392]	; (a1b2c <CL_DrepAlarmActon+0x33c>)
   a19a4:	4798      	blx	r3
				
				sv_cntrl_buzzer();	
   a19a6:	4b5b      	ldr	r3, [pc, #364]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a19a8:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a19aa:	4b5b      	ldr	r3, [pc, #364]	; (a1b18 <CL_DrepAlarmActon+0x328>)
   a19ac:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a19ae:	4b5b      	ldr	r3, [pc, #364]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a19b0:	781b      	ldrb	r3, [r3, #0]
   a19b2:	2b06      	cmp	r3, #6
   a19b4:	d007      	beq.n	a19c6 <CL_DrepAlarmActon+0x1d6>
   a19b6:	4b59      	ldr	r3, [pc, #356]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a19b8:	781b      	ldrb	r3, [r3, #0]
   a19ba:	2b0e      	cmp	r3, #14
   a19bc:	d003      	beq.n	a19c6 <CL_DrepAlarmActon+0x1d6>
   a19be:	4b57      	ldr	r3, [pc, #348]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a19c0:	781b      	ldrb	r3, [r3, #0]
   a19c2:	2b0d      	cmp	r3, #13
   a19c4:	d17b      	bne.n	a1abe <CL_DrepAlarmActon+0x2ce>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a19c6:	4b56      	ldr	r3, [pc, #344]	; (a1b20 <CL_DrepAlarmActon+0x330>)
   a19c8:	4798      	blx	r3
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   a19ca:	e078      	b.n	a1abe <CL_DrepAlarmActon+0x2ce>
			case ACID_IN_OPEN:
			case BICARB_IN_OPEN:
			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				
				sv_cntrl_buzzer();
   a19cc:	4b51      	ldr	r3, [pc, #324]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a19ce:	4798      	blx	r3
				sv_cntrl_setgreenalarm();
   a19d0:	4b57      	ldr	r3, [pc, #348]	; (a1b30 <CL_DrepAlarmActon+0x340>)
   a19d2:	4798      	blx	r3
				sv_cntrl_setredalarm();
   a19d4:	4b50      	ldr	r3, [pc, #320]	; (a1b18 <CL_DrepAlarmActon+0x328>)
   a19d6:	4798      	blx	r3
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a19d8:	4b50      	ldr	r3, [pc, #320]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a19da:	781b      	ldrb	r3, [r3, #0]
   a19dc:	2b06      	cmp	r3, #6
   a19de:	d007      	beq.n	a19f0 <CL_DrepAlarmActon+0x200>
   a19e0:	4b4e      	ldr	r3, [pc, #312]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a19e2:	781b      	ldrb	r3, [r3, #0]
   a19e4:	2b0e      	cmp	r3, #14
   a19e6:	d003      	beq.n	a19f0 <CL_DrepAlarmActon+0x200>
   a19e8:	4b4c      	ldr	r3, [pc, #304]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a19ea:	781b      	ldrb	r3, [r3, #0]
   a19ec:	2b0d      	cmp	r3, #13
   a19ee:	d10b      	bne.n	a1a08 <CL_DrepAlarmActon+0x218>
				{
				sv_cntrl_setyellowalarm();
   a19f0:	4b4d      	ldr	r3, [pc, #308]	; (a1b28 <CL_DrepAlarmActon+0x338>)
   a19f2:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a19f4:	4b4f      	ldr	r3, [pc, #316]	; (a1b34 <CL_DrepAlarmActon+0x344>)
   a19f6:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a19f8:	2100      	movs	r1, #0
   a19fa:	2002      	movs	r0, #2
   a19fc:	4b4e      	ldr	r3, [pc, #312]	; (a1b38 <CL_DrepAlarmActon+0x348>)
   a19fe:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;	
   a1a00:	4b4e      	ldr	r3, [pc, #312]	; (a1b3c <CL_DrepAlarmActon+0x34c>)
   a1a02:	2201      	movs	r2, #1
   a1a04:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
				}
				
			break;
   a1a06:	e05b      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
				}
				else{
					
				//sv_cntrl_setredalarm();
				
				Cl_Dprep_Stoppreparation();
   a1a08:	4b46      	ldr	r3, [pc, #280]	; (a1b24 <CL_DrepAlarmActon+0x334>)
   a1a0a:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
   a1a0c:	4b43      	ldr	r3, [pc, #268]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a0e:	220c      	movs	r2, #12
   a1a10:	701a      	strb	r2, [r3, #0]
				}
				
			break;
   a1a12:	e055      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			case HOLDER2STATUS_CLOSED:
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
				
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a1a14:	4b3f      	ldr	r3, [pc, #252]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a1a16:	4798      	blx	r3
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME)||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1a18:	4b40      	ldr	r3, [pc, #256]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a1a:	781b      	ldrb	r3, [r3, #0]
   a1a1c:	2b06      	cmp	r3, #6
   a1a1e:	d007      	beq.n	a1a30 <CL_DrepAlarmActon+0x240>
   a1a20:	4b3e      	ldr	r3, [pc, #248]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a22:	781b      	ldrb	r3, [r3, #0]
   a1a24:	2b0e      	cmp	r3, #14
   a1a26:	d003      	beq.n	a1a30 <CL_DrepAlarmActon+0x240>
   a1a28:	4b3c      	ldr	r3, [pc, #240]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a2a:	781b      	ldrb	r3, [r3, #0]
   a1a2c:	2b0d      	cmp	r3, #13
   a1a2e:	d107      	bne.n	a1a40 <CL_DrepAlarmActon+0x250>
			{
				sv_cntrl_setyellowalarm();
   a1a30:	4b3d      	ldr	r3, [pc, #244]	; (a1b28 <CL_DrepAlarmActon+0x338>)
   a1a32:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a1a34:	4b3f      	ldr	r3, [pc, #252]	; (a1b34 <CL_DrepAlarmActon+0x344>)
   a1a36:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a1a38:	4b40      	ldr	r3, [pc, #256]	; (a1b3c <CL_DrepAlarmActon+0x34c>)
   a1a3a:	2201      	movs	r2, #1
   a1a3c:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			
			break;
   a1a3e:	e03f      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			//	cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   a1a40:	4b38      	ldr	r3, [pc, #224]	; (a1b24 <CL_DrepAlarmActon+0x334>)
   a1a42:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a1a44:	4b35      	ldr	r3, [pc, #212]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a46:	220c      	movs	r2, #12
   a1a48:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   a1a4a:	e039      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			case TEMP3_LOW_THRESHOLD:
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			
				
				sv_cntrl_buzzer();
   a1a4c:	4b31      	ldr	r3, [pc, #196]	; (a1b14 <CL_DrepAlarmActon+0x324>)
   a1a4e:	4798      	blx	r3
			
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a1a50:	4b32      	ldr	r3, [pc, #200]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a52:	781b      	ldrb	r3, [r3, #0]
   a1a54:	2b06      	cmp	r3, #6
   a1a56:	d007      	beq.n	a1a68 <CL_DrepAlarmActon+0x278>
   a1a58:	4b30      	ldr	r3, [pc, #192]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a5a:	781b      	ldrb	r3, [r3, #0]
   a1a5c:	2b0e      	cmp	r3, #14
   a1a5e:	d003      	beq.n	a1a68 <CL_DrepAlarmActon+0x278>
   a1a60:	4b2e      	ldr	r3, [pc, #184]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1a62:	781b      	ldrb	r3, [r3, #0]
   a1a64:	2b0d      	cmp	r3, #13
   a1a66:	d11f      	bne.n	a1aa8 <CL_DrepAlarmActon+0x2b8>
			{
				//Cl_Dprep_Stoppreparation();
				sv_cntrl_setyellowalarm();
   a1a68:	4b2f      	ldr	r3, [pc, #188]	; (a1b28 <CL_DrepAlarmActon+0x338>)
   a1a6a:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a1a6c:	4b31      	ldr	r3, [pc, #196]	; (a1b34 <CL_DrepAlarmActon+0x344>)
   a1a6e:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a1a70:	4b32      	ldr	r3, [pc, #200]	; (a1b3c <CL_DrepAlarmActon+0x34c>)
   a1a72:	2201      	movs	r2, #1
   a1a74:	701a      	strb	r2, [r3, #0]
				//cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
				state_counter++;
   a1a76:	4b32      	ldr	r3, [pc, #200]	; (a1b40 <CL_DrepAlarmActon+0x350>)
   a1a78:	681b      	ldr	r3, [r3, #0]
   a1a7a:	3301      	adds	r3, #1
   a1a7c:	4a30      	ldr	r2, [pc, #192]	; (a1b40 <CL_DrepAlarmActon+0x350>)
   a1a7e:	6013      	str	r3, [r2, #0]
				Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a1a80:	2100      	movs	r1, #0
   a1a82:	2008      	movs	r0, #8
   a1a84:	4b2f      	ldr	r3, [pc, #188]	; (a1b44 <CL_DrepAlarmActon+0x354>)
   a1a86:	4798      	blx	r3
				Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a1a88:	2100      	movs	r1, #0
   a1a8a:	2007      	movs	r0, #7
   a1a8c:	4b2d      	ldr	r3, [pc, #180]	; (a1b44 <CL_DrepAlarmActon+0x354>)
   a1a8e:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a1a90:	2100      	movs	r1, #0
   a1a92:	2013      	movs	r0, #19
   a1a94:	4b2b      	ldr	r3, [pc, #172]	; (a1b44 <CL_DrepAlarmActon+0x354>)
   a1a96:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a1a98:	2100      	movs	r1, #0
   a1a9a:	2014      	movs	r0, #20
   a1a9c:	4b29      	ldr	r3, [pc, #164]	; (a1b44 <CL_DrepAlarmActon+0x354>)
   a1a9e:	4798      	blx	r3
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a1aa0:	4b1e      	ldr	r3, [pc, #120]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1aa2:	220e      	movs	r2, #14
   a1aa4:	701a      	strb	r2, [r3, #0]
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			break;
   a1aa6:	e00b      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
			}
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
   a1aa8:	4b1e      	ldr	r3, [pc, #120]	; (a1b24 <CL_DrepAlarmActon+0x334>)
   a1aaa:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a1aac:	4b1b      	ldr	r3, [pc, #108]	; (a1b1c <CL_DrepAlarmActon+0x32c>)
   a1aae:	220c      	movs	r2, #12
   a1ab0:	701a      	strb	r2, [r3, #0]
			}
			break;
   a1ab2:	e005      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			
		
			default:
			cl_dprepalarmid = _NO_ALARM;
   a1ab4:	2300      	movs	r3, #0
   a1ab6:	71fb      	strb	r3, [r7, #7]
			break;
   a1ab8:	e002      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
			//		Cl_DprepFlowOff();
					//cl_gfillinprogress = false;		
					
				}
			}
			break;
   a1aba:	bf00      	nop
   a1abc:	e000      	b.n	a1ac0 <CL_DrepAlarmActon+0x2d0>
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   a1abe:	bf00      	nop
		
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   a1ac0:	79fb      	ldrb	r3, [r7, #7]
   a1ac2:	2b00      	cmp	r3, #0
   a1ac4:	d01f      	beq.n	a1b06 <CL_DrepAlarmActon+0x316>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   a1ac6:	79fb      	ldrb	r3, [r7, #7]
   a1ac8:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1aca:	2301      	movs	r3, #1
   a1acc:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a1ace:	2302      	movs	r3, #2
   a1ad0:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a1ad2:	2307      	movs	r3, #7
   a1ad4:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   a1ad6:	f107 0108 	add.w	r1, r7, #8
   a1ada:	7bbb      	ldrb	r3, [r7, #14]
   a1adc:	2203      	movs	r2, #3
   a1ade:	4618      	mov	r0, r3
   a1ae0:	4b19      	ldr	r3, [pc, #100]	; (a1b48 <CL_DrepAlarmActon+0x358>)
   a1ae2:	4798      	blx	r3
   a1ae4:	4603      	mov	r3, r0
   a1ae6:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   a1ae8:	232b      	movs	r3, #43	; 0x2b
   a1aea:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   a1aec:	2302      	movs	r3, #2
   a1aee:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   a1af0:	2300      	movs	r3, #0
   a1af2:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   a1af4:	f107 0108 	add.w	r1, r7, #8
   a1af8:	7bbb      	ldrb	r3, [r7, #14]
   a1afa:	2202      	movs	r2, #2
   a1afc:	4618      	mov	r0, r3
   a1afe:	4b12      	ldr	r3, [pc, #72]	; (a1b48 <CL_DrepAlarmActon+0x358>)
   a1b00:	4798      	blx	r3
   a1b02:	4603      	mov	r3, r0
   a1b04:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   a1b06:	2300      	movs	r3, #0
}
   a1b08:	4618      	mov	r0, r3
   a1b0a:	3718      	adds	r7, #24
   a1b0c:	46bd      	mov	sp, r7
   a1b0e:	bd80      	pop	{r7, pc}
   a1b10:	20071b24 	.word	0x20071b24
   a1b14:	0009b069 	.word	0x0009b069
   a1b18:	0009b02d 	.word	0x0009b02d
   a1b1c:	20071b6f 	.word	0x20071b6f
   a1b20:	000a375d 	.word	0x000a375d
   a1b24:	000a2209 	.word	0x000a2209
   a1b28:	0009b041 	.word	0x0009b041
   a1b2c:	00093f5d 	.word	0x00093f5d
   a1b30:	0009b055 	.word	0x0009b055
   a1b34:	0009af8d 	.word	0x0009af8d
   a1b38:	00088019 	.word	0x00088019
   a1b3c:	20071b70 	.word	0x20071b70
   a1b40:	20071b34 	.word	0x20071b34
   a1b44:	000829e5 	.word	0x000829e5
   a1b48:	0009cbd5 	.word	0x0009cbd5

000a1b4c <Cl_dprepSendAlarm>:
	
	

Cl_ReturnCodeType  Cl_dprepSendAlarm(Cl_NewAlarmIdType cl_dprepalarmId )
{
   a1b4c:	b580      	push	{r7, lr}
   a1b4e:	b086      	sub	sp, #24
   a1b50:	af00      	add	r7, sp, #0
   a1b52:	4603      	mov	r3, r0
   a1b54:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1b56:	2300      	movs	r3, #0
   a1b58:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a1b5a:	f107 030c 	add.w	r3, r7, #12
   a1b5e:	2100      	movs	r1, #0
   a1b60:	460a      	mov	r2, r1
   a1b62:	801a      	strh	r2, [r3, #0]
   a1b64:	460a      	mov	r2, r1
   a1b66:	709a      	strb	r2, [r3, #2]
   a1b68:	2300      	movs	r3, #0
   a1b6a:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1b6c:	2359      	movs	r3, #89	; 0x59
   a1b6e:	73fb      	strb	r3, [r7, #15]
			if(cl_dprepalarmId != _NO_ALARM)
   a1b70:	79fb      	ldrb	r3, [r7, #7]
   a1b72:	2b00      	cmp	r3, #0
   a1b74:	d013      	beq.n	a1b9e <Cl_dprepSendAlarm+0x52>
			 {
				data[0] = (Cl_Uint8Type)cl_dprepalarmId;
   a1b76:	79fb      	ldrb	r3, [r7, #7]
   a1b78:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a1b7a:	2301      	movs	r3, #1
   a1b7c:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a1b7e:	2302      	movs	r3, #2
   a1b80:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a1b82:	2307      	movs	r3, #7
   a1b84:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a1b86:	f107 010c 	add.w	r1, r7, #12
   a1b8a:	7bfb      	ldrb	r3, [r7, #15]
   a1b8c:	2203      	movs	r2, #3
   a1b8e:	4618      	mov	r0, r3
   a1b90:	4b05      	ldr	r3, [pc, #20]	; (a1ba8 <Cl_dprepSendAlarm+0x5c>)
   a1b92:	4798      	blx	r3
   a1b94:	4603      	mov	r3, r0
   a1b96:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a1b98:	200a      	movs	r0, #10
   a1b9a:	4b04      	ldr	r3, [pc, #16]	; (a1bac <Cl_dprepSendAlarm+0x60>)
   a1b9c:	4798      	blx	r3

			 }
}	
   a1b9e:	bf00      	nop
   a1ba0:	4618      	mov	r0, r3
   a1ba2:	3718      	adds	r7, #24
   a1ba4:	46bd      	mov	sp, r7
   a1ba6:	bd80      	pop	{r7, pc}
   a1ba8:	0009cbd5 	.word	0x0009cbd5
   a1bac:	00093ea9 	.word	0x00093ea9

000a1bb0 <Cl_Dprep_CheckforfillingCompletion>:
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   a1bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   a1bb2:	b087      	sub	sp, #28
   a1bb4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   a1bb6:	2304      	movs	r3, #4
   a1bb8:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   a1bba:	2202      	movs	r2, #2
   a1bbc:	4974      	ldr	r1, [pc, #464]	; (a1d90 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   a1bbe:	2019      	movs	r0, #25
   a1bc0:	4b74      	ldr	r3, [pc, #464]	; (a1d94 <Cl_Dprep_CheckforfillingCompletion+0x1e4>)
   a1bc2:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   a1bc4:	4b72      	ldr	r3, [pc, #456]	; (a1d90 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   a1bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1bca:	2b05      	cmp	r3, #5
   a1bcc:	f340 80c0 	ble.w	a1d50 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
		{
			
			//Cl_dprepretcode = CL_REJECTED;
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   a1bd0:	2300      	movs	r3, #0
   a1bd2:	75fb      	strb	r3, [r7, #23]
	//	}                                           // manav02 commented else statement , timeout has to be finished
	//	else
//		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   a1bd4:	1d3b      	adds	r3, r7, #4
   a1bd6:	4619      	mov	r1, r3
   a1bd8:	2014      	movs	r0, #20
   a1bda:	4b6f      	ldr	r3, [pc, #444]	; (a1d98 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   a1bdc:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   a1bde:	1dbb      	adds	r3, r7, #6
   a1be0:	4619      	mov	r1, r3
   a1be2:	2007      	movs	r0, #7
   a1be4:	4b6c      	ldr	r3, [pc, #432]	; (a1d98 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   a1be6:	4798      	blx	r3
// 			//temp3 = ((temp3* 4) +temp)/5;
// 			
// 							
// 			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;

		cl_temp3_cel = cl_temp3 /100;
   a1be8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   a1bec:	4a6b      	ldr	r2, [pc, #428]	; (a1d9c <Cl_Dprep_CheckforfillingCompletion+0x1ec>)
   a1bee:	fb82 1203 	smull	r1, r2, r2, r3
   a1bf2:	1152      	asrs	r2, r2, #5
   a1bf4:	17db      	asrs	r3, r3, #31
   a1bf6:	1ad3      	subs	r3, r2, r3
   a1bf8:	b21a      	sxth	r2, r3
   a1bfa:	4b69      	ldr	r3, [pc, #420]	; (a1da0 <Cl_Dprep_CheckforfillingCompletion+0x1f0>)
   a1bfc:	4610      	mov	r0, r2
   a1bfe:	4798      	blx	r3
   a1c00:	4603      	mov	r3, r0
   a1c02:	613b      	str	r3, [r7, #16]
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   a1c04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   a1c08:	4b66      	ldr	r3, [pc, #408]	; (a1da4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   a1c0a:	4610      	mov	r0, r2
   a1c0c:	4798      	blx	r3
   a1c0e:	4c66      	ldr	r4, [pc, #408]	; (a1da8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a1c10:	a353      	add	r3, pc, #332	; (adr r3, a1d60 <Cl_Dprep_CheckforfillingCompletion+0x1b0>)
   a1c12:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1c16:	47a0      	blx	r4
   a1c18:	4603      	mov	r3, r0
   a1c1a:	460c      	mov	r4, r1
   a1c1c:	461d      	mov	r5, r3
   a1c1e:	4626      	mov	r6, r4
   a1c20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   a1c24:	4b5f      	ldr	r3, [pc, #380]	; (a1da4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   a1c26:	4610      	mov	r0, r2
   a1c28:	4798      	blx	r3
   a1c2a:	4602      	mov	r2, r0
   a1c2c:	460b      	mov	r3, r1
   a1c2e:	4c5e      	ldr	r4, [pc, #376]	; (a1da8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a1c30:	4628      	mov	r0, r5
   a1c32:	4631      	mov	r1, r6
   a1c34:	47a0      	blx	r4
   a1c36:	4603      	mov	r3, r0
   a1c38:	460c      	mov	r4, r1
   a1c3a:	461d      	mov	r5, r3
   a1c3c:	4626      	mov	r6, r4
   a1c3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   a1c42:	4b58      	ldr	r3, [pc, #352]	; (a1da4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   a1c44:	4610      	mov	r0, r2
   a1c46:	4798      	blx	r3
   a1c48:	4c57      	ldr	r4, [pc, #348]	; (a1da8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a1c4a:	a347      	add	r3, pc, #284	; (adr r3, a1d68 <Cl_Dprep_CheckforfillingCompletion+0x1b8>)
   a1c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1c50:	47a0      	blx	r4
   a1c52:	4603      	mov	r3, r0
   a1c54:	460c      	mov	r4, r1
   a1c56:	461a      	mov	r2, r3
   a1c58:	4623      	mov	r3, r4
   a1c5a:	4c54      	ldr	r4, [pc, #336]	; (a1dac <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   a1c5c:	4628      	mov	r0, r5
   a1c5e:	4631      	mov	r1, r6
   a1c60:	47a0      	blx	r4
   a1c62:	4603      	mov	r3, r0
   a1c64:	460c      	mov	r4, r1
   a1c66:	4618      	mov	r0, r3
   a1c68:	4621      	mov	r1, r4
   a1c6a:	4c51      	ldr	r4, [pc, #324]	; (a1db0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a1c6c:	a340      	add	r3, pc, #256	; (adr r3, a1d70 <Cl_Dprep_CheckforfillingCompletion+0x1c0>)
   a1c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1c72:	47a0      	blx	r4
   a1c74:	4603      	mov	r3, r0
   a1c76:	460c      	mov	r4, r1
   a1c78:	4619      	mov	r1, r3
   a1c7a:	4622      	mov	r2, r4
   a1c7c:	4b4d      	ldr	r3, [pc, #308]	; (a1db4 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   a1c7e:	4608      	mov	r0, r1
   a1c80:	4611      	mov	r1, r2
   a1c82:	4798      	blx	r3
   a1c84:	4603      	mov	r3, r0
   a1c86:	60fb      	str	r3, [r7, #12]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   a1c88:	4b4b      	ldr	r3, [pc, #300]	; (a1db8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a1c8a:	68f8      	ldr	r0, [r7, #12]
   a1c8c:	4798      	blx	r3
   a1c8e:	4605      	mov	r5, r0
   a1c90:	460e      	mov	r6, r1
   a1c92:	4b49      	ldr	r3, [pc, #292]	; (a1db8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a1c94:	6938      	ldr	r0, [r7, #16]
   a1c96:	4798      	blx	r3
   a1c98:	4c45      	ldr	r4, [pc, #276]	; (a1db0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a1c9a:	f04f 0200 	mov.w	r2, #0
   a1c9e:	4b47      	ldr	r3, [pc, #284]	; (a1dbc <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a1ca0:	47a0      	blx	r4
   a1ca2:	4603      	mov	r3, r0
   a1ca4:	460c      	mov	r4, r1
   a1ca6:	4618      	mov	r0, r3
   a1ca8:	4621      	mov	r1, r4
   a1caa:	4c3f      	ldr	r4, [pc, #252]	; (a1da8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a1cac:	a332      	add	r3, pc, #200	; (adr r3, a1d78 <Cl_Dprep_CheckforfillingCompletion+0x1c8>)
   a1cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1cb2:	47a0      	blx	r4
   a1cb4:	4603      	mov	r3, r0
   a1cb6:	460c      	mov	r4, r1
   a1cb8:	4618      	mov	r0, r3
   a1cba:	4621      	mov	r1, r4
   a1cbc:	4c3b      	ldr	r4, [pc, #236]	; (a1dac <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   a1cbe:	f04f 0200 	mov.w	r2, #0
   a1cc2:	4b3f      	ldr	r3, [pc, #252]	; (a1dc0 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a1cc4:	47a0      	blx	r4
   a1cc6:	4603      	mov	r3, r0
   a1cc8:	460c      	mov	r4, r1
   a1cca:	461a      	mov	r2, r3
   a1ccc:	4623      	mov	r3, r4
   a1cce:	4c3d      	ldr	r4, [pc, #244]	; (a1dc4 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a1cd0:	4628      	mov	r0, r5
   a1cd2:	4631      	mov	r1, r6
   a1cd4:	47a0      	blx	r4
   a1cd6:	4603      	mov	r3, r0
   a1cd8:	460c      	mov	r4, r1
   a1cda:	4618      	mov	r0, r3
   a1cdc:	4621      	mov	r1, r4
   a1cde:	4c39      	ldr	r4, [pc, #228]	; (a1dc4 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a1ce0:	f04f 0200 	mov.w	r2, #0
   a1ce4:	4b38      	ldr	r3, [pc, #224]	; (a1dc8 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   a1ce6:	47a0      	blx	r4
   a1ce8:	4603      	mov	r3, r0
   a1cea:	460c      	mov	r4, r1
   a1cec:	4619      	mov	r1, r3
   a1cee:	4622      	mov	r2, r4
   a1cf0:	4b30      	ldr	r3, [pc, #192]	; (a1db4 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   a1cf2:	4608      	mov	r0, r1
   a1cf4:	4611      	mov	r1, r2
   a1cf6:	4798      	blx	r3
   a1cf8:	4603      	mov	r3, r0
   a1cfa:	60bb      	str	r3, [r7, #8]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   a1cfc:	4b2e      	ldr	r3, [pc, #184]	; (a1db8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a1cfe:	68b8      	ldr	r0, [r7, #8]
   a1d00:	4798      	blx	r3
   a1d02:	4c32      	ldr	r4, [pc, #200]	; (a1dcc <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   a1d04:	a31e      	add	r3, pc, #120	; (adr r3, a1d80 <Cl_Dprep_CheckforfillingCompletion+0x1d0>)
   a1d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1d0a:	47a0      	blx	r4
   a1d0c:	4603      	mov	r3, r0
   a1d0e:	2b00      	cmp	r3, #0
   a1d10:	d01e      	beq.n	a1d50 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
   a1d12:	4b29      	ldr	r3, [pc, #164]	; (a1db8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a1d14:	68b8      	ldr	r0, [r7, #8]
   a1d16:	4798      	blx	r3
   a1d18:	4c2d      	ldr	r4, [pc, #180]	; (a1dd0 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a1d1a:	a31b      	add	r3, pc, #108	; (adr r3, a1d88 <Cl_Dprep_CheckforfillingCompletion+0x1d8>)
   a1d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1d20:	47a0      	blx	r4
   a1d22:	4603      	mov	r3, r0
   a1d24:	2b00      	cmp	r3, #0
   a1d26:	d013      	beq.n	a1d50 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   a1d28:	4b2a      	ldr	r3, [pc, #168]	; (a1dd4 <Cl_Dprep_CheckforfillingCompletion+0x224>)
   a1d2a:	492b      	ldr	r1, [pc, #172]	; (a1dd8 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   a1d2c:	6938      	ldr	r0, [r7, #16]
   a1d2e:	4798      	blx	r3
   a1d30:	4603      	mov	r3, r0
   a1d32:	2b00      	cmp	r3, #0
   a1d34:	d00c      	beq.n	a1d50 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
   a1d36:	4b29      	ldr	r3, [pc, #164]	; (a1ddc <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   a1d38:	4929      	ldr	r1, [pc, #164]	; (a1de0 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   a1d3a:	6938      	ldr	r0, [r7, #16]
   a1d3c:	4798      	blx	r3
   a1d3e:	4603      	mov	r3, r0
   a1d40:	2b00      	cmp	r3, #0
   a1d42:	d005      	beq.n	a1d50 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
				{
					if(cl_temp3_stable_confirm == true)
   a1d44:	4b27      	ldr	r3, [pc, #156]	; (a1de4 <Cl_Dprep_CheckforfillingCompletion+0x234>)
   a1d46:	781b      	ldrb	r3, [r3, #0]
   a1d48:	2b00      	cmp	r3, #0
   a1d4a:	d001      	beq.n	a1d50 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
							Cl_dprepretcode = CL_OK;
   a1d4c:	2300      	movs	r3, #0
   a1d4e:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   a1d50:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   a1d52:	4618      	mov	r0, r3
   a1d54:	371c      	adds	r7, #28
   a1d56:	46bd      	mov	sp, r7
   a1d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a1d5a:	bf00      	nop
   a1d5c:	f3af 8000 	nop.w
   a1d60:	eb1c432d 	.word	0xeb1c432d
   a1d64:	bf1a36e2 	.word	0xbf1a36e2
   a1d68:	70a3d70a 	.word	0x70a3d70a
   a1d6c:	3fd70a3d 	.word	0x3fd70a3d
   a1d70:	851eb852 	.word	0x851eb852
   a1d74:	404331eb 	.word	0x404331eb
   a1d78:	47ae147b 	.word	0x47ae147b
   a1d7c:	3f947ae1 	.word	0x3f947ae1
   a1d80:	9999999a 	.word	0x9999999a
   a1d84:	402a9999 	.word	0x402a9999
   a1d88:	9999999a 	.word	0x9999999a
   a1d8c:	402b9999 	.word	0x402b9999
   a1d90:	20071b52 	.word	0x20071b52
   a1d94:	0009cbd5 	.word	0x0009cbd5
   a1d98:	0008fa01 	.word	0x0008fa01
   a1d9c:	51eb851f 	.word	0x51eb851f
   a1da0:	000a7f01 	.word	0x000a7f01
   a1da4:	000a765d 	.word	0x000a765d
   a1da8:	000a7729 	.word	0x000a7729
   a1dac:	000a73c5 	.word	0x000a73c5
   a1db0:	000a73c1 	.word	0x000a73c1
   a1db4:	000a7ced 	.word	0x000a7ced
   a1db8:	000a7681 	.word	0x000a7681
   a1dbc:	40390000 	.word	0x40390000
   a1dc0:	3ff00000 	.word	0x3ff00000
   a1dc4:	000a797d 	.word	0x000a797d
   a1dc8:	40240000 	.word	0x40240000
   a1dcc:	000a7c49 	.word	0x000a7c49
   a1dd0:	000a7c0d 	.word	0x000a7c0d
   a1dd4:	000a8321 	.word	0x000a8321
   a1dd8:	42120000 	.word	0x42120000
   a1ddc:	000a82e5 	.word	0x000a82e5
   a1de0:	42160000 	.word	0x42160000
   a1de4:	20071b68 	.word	0x20071b68

000a1de8 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   a1de8:	b580      	push	{r7, lr}
   a1dea:	b082      	sub	sp, #8
   a1dec:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a1dee:	2300      	movs	r3, #0
   a1df0:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   a1df2:	2012      	movs	r0, #18
   a1df4:	4b03      	ldr	r3, [pc, #12]	; (a1e04 <Cl_DprepSelectDialysateInlet+0x1c>)
   a1df6:	4798      	blx	r3
		return Cl_RetVal;
   a1df8:	79fb      	ldrb	r3, [r7, #7]
	}
   a1dfa:	4618      	mov	r0, r3
   a1dfc:	3708      	adds	r7, #8
   a1dfe:	46bd      	mov	sp, r7
   a1e00:	bd80      	pop	{r7, pc}
   a1e02:	bf00      	nop
   a1e04:	0009ade1 	.word	0x0009ade1

000a1e08 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   a1e08:	b480      	push	{r7}
   a1e0a:	b083      	sub	sp, #12
   a1e0c:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a1e0e:	2300      	movs	r3, #0
   a1e10:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   a1e12:	4b0d      	ldr	r3, [pc, #52]	; (a1e48 <UpdateDprepFillingMinuteTick+0x40>)
   a1e14:	2200      	movs	r2, #0
   a1e16:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   a1e18:	4b0c      	ldr	r3, [pc, #48]	; (a1e4c <UpdateDprepFillingMinuteTick+0x44>)
   a1e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1e1e:	b29b      	uxth	r3, r3
   a1e20:	3301      	adds	r3, #1
   a1e22:	b29b      	uxth	r3, r3
   a1e24:	b21a      	sxth	r2, r3
   a1e26:	4b09      	ldr	r3, [pc, #36]	; (a1e4c <UpdateDprepFillingMinuteTick+0x44>)
   a1e28:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   a1e2a:	4b09      	ldr	r3, [pc, #36]	; (a1e50 <UpdateDprepFillingMinuteTick+0x48>)
   a1e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1e30:	b29b      	uxth	r3, r3
   a1e32:	3301      	adds	r3, #1
   a1e34:	b29b      	uxth	r3, r3
   a1e36:	b21a      	sxth	r2, r3
   a1e38:	4b05      	ldr	r3, [pc, #20]	; (a1e50 <UpdateDprepFillingMinuteTick+0x48>)
   a1e3a:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   a1e3c:	79fb      	ldrb	r3, [r7, #7]
					

}
   a1e3e:	4618      	mov	r0, r3
   a1e40:	370c      	adds	r7, #12
   a1e42:	46bd      	mov	sp, r7
   a1e44:	bc80      	pop	{r7}
   a1e46:	4770      	bx	lr
   a1e48:	20071b4e 	.word	0x20071b4e
   a1e4c:	20071b50 	.word	0x20071b50
   a1e50:	20071b52 	.word	0x20071b52

000a1e54 <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   a1e54:	b580      	push	{r7, lr}
   a1e56:	b082      	sub	sp, #8
   a1e58:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a1e5a:	2300      	movs	r3, #0
   a1e5c:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   a1e5e:	4b0f      	ldr	r3, [pc, #60]	; (a1e9c <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   a1e60:	2200      	movs	r2, #0
   a1e62:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   a1e64:	4b0e      	ldr	r3, [pc, #56]	; (a1ea0 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a1e66:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1e6a:	b29b      	uxth	r3, r3
   a1e6c:	3301      	adds	r3, #1
   a1e6e:	b29b      	uxth	r3, r3
   a1e70:	b21a      	sxth	r2, r3
   a1e72:	4b0b      	ldr	r3, [pc, #44]	; (a1ea0 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a1e74:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   a1e76:	4b0b      	ldr	r3, [pc, #44]	; (a1ea4 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a1e78:	f9b3 3000 	ldrsh.w	r3, [r3]
   a1e7c:	b29b      	uxth	r3, r3
   a1e7e:	3301      	adds	r3, #1
   a1e80:	b29b      	uxth	r3, r3
   a1e82:	b21a      	sxth	r2, r3
   a1e84:	4b07      	ldr	r3, [pc, #28]	; (a1ea4 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a1e86:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   a1e88:	4b07      	ldr	r3, [pc, #28]	; (a1ea8 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   a1e8a:	4798      	blx	r3
   a1e8c:	4603      	mov	r3, r0
   a1e8e:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   a1e90:	79fb      	ldrb	r3, [r7, #7]
	

}
   a1e92:	4618      	mov	r0, r3
   a1e94:	3708      	adds	r7, #8
   a1e96:	46bd      	mov	sp, r7
   a1e98:	bd80      	pop	{r7, pc}
   a1e9a:	bf00      	nop
   a1e9c:	20071b5a 	.word	0x20071b5a
   a1ea0:	20071b5c 	.word	0x20071b5c
   a1ea4:	20071b5e 	.word	0x20071b5e
   a1ea8:	00088a15 	.word	0x00088a15

000a1eac <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   a1eac:	b580      	push	{r7, lr}
   a1eae:	b094      	sub	sp, #80	; 0x50
   a1eb0:	af00      	add	r7, sp, #0
   a1eb2:	4603      	mov	r3, r0
   a1eb4:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   a1eb6:	f107 031c 	add.w	r3, r7, #28
   a1eba:	2228      	movs	r2, #40	; 0x28
   a1ebc:	2100      	movs	r1, #0
   a1ebe:	4618      	mov	r0, r3
   a1ec0:	4bc7      	ldr	r3, [pc, #796]	; (a21e0 <Cl_Dprep_SendPrepStateData+0x334>)
   a1ec2:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0 , temp2 = 0 , temp2ui = 0 , apt=0,vpt=0,TMP =0;
   a1ec4:	2300      	movs	r3, #0
   a1ec6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   a1eca:	2300      	movs	r3, #0
   a1ecc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   a1ed0:	2300      	movs	r3, #0
   a1ed2:	827b      	strh	r3, [r7, #18]
   a1ed4:	2300      	movs	r3, #0
   a1ed6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   a1eda:	2300      	movs	r3, #0
   a1edc:	823b      	strh	r3, [r7, #16]
   a1ede:	2300      	movs	r3, #0
   a1ee0:	81fb      	strh	r3, [r7, #14]
   a1ee2:	2300      	movs	r3, #0
   a1ee4:	81bb      	strh	r3, [r7, #12]
   a1ee6:	2300      	movs	r3, #0
   a1ee8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a1eec:	2300      	movs	r3, #0
   a1eee:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	Cl_Uint8Type count = 0;
   a1ef2:	2300      	movs	r3, #0
   a1ef4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1ef8:	2359      	movs	r3, #89	; 0x59
   a1efa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	TMP,
	*/
	
	

					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   a1efe:	232a      	movs	r3, #42	; 0x2a
   a1f00:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					systemdataarray[0] = datatype;
   a1f04:	79fb      	ldrb	r3, [r7, #7]
   a1f06:	773b      	strb	r3, [r7, #28]
					count++;
   a1f08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1f0c:	3301      	adds	r3, #1
   a1f0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a1f12:	f107 0312 	add.w	r3, r7, #18
   a1f16:	4619      	mov	r1, r3
   a1f18:	2014      	movs	r0, #20
   a1f1a:	4bb2      	ldr	r3, [pc, #712]	; (a21e4 <Cl_Dprep_SendPrepStateData+0x338>)
   a1f1c:	4798      	blx	r3
// 							uint16_t temp = res_temp_value/10;
// //							temp = temp - 3.1 + 1.4;										// sensor offset 
// //							temp = temp - 3.1 -2;										// sensor offset 
// //							tmp3 =(tmp3*5 + temp)/6;
// 							tmp3 = temp - 0.4;
							tmp3 = (float)sensordata/10;
   a1f1e:	8a7a      	ldrh	r2, [r7, #18]
   a1f20:	4bb1      	ldr	r3, [pc, #708]	; (a21e8 <Cl_Dprep_SendPrepStateData+0x33c>)
   a1f22:	4610      	mov	r0, r2
   a1f24:	4798      	blx	r3
   a1f26:	4602      	mov	r2, r0
   a1f28:	4bb0      	ldr	r3, [pc, #704]	; (a21ec <Cl_Dprep_SendPrepStateData+0x340>)
   a1f2a:	49b1      	ldr	r1, [pc, #708]	; (a21f0 <Cl_Dprep_SendPrepStateData+0x344>)
   a1f2c:	4610      	mov	r0, r2
   a1f2e:	4798      	blx	r3
   a1f30:	4603      	mov	r3, r0
   a1f32:	461a      	mov	r2, r3
   a1f34:	4baf      	ldr	r3, [pc, #700]	; (a21f4 <Cl_Dprep_SendPrepStateData+0x348>)
   a1f36:	601a      	str	r2, [r3, #0]

							
						}
						// manav02 added
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   a1f38:	f107 0312 	add.w	r3, r7, #18
   a1f3c:	4619      	mov	r1, r3
   a1f3e:	2007      	movs	r0, #7
   a1f40:	4ba8      	ldr	r3, [pc, #672]	; (a21e4 <Cl_Dprep_SendPrepStateData+0x338>)
   a1f42:	4798      	blx	r3
					
								tempdata.word = (sensordata)/100;
   a1f44:	8a7b      	ldrh	r3, [r7, #18]
   a1f46:	4aac      	ldr	r2, [pc, #688]	; (a21f8 <Cl_Dprep_SendPrepStateData+0x34c>)
   a1f48:	fba2 2303 	umull	r2, r3, r2, r3
   a1f4c:	095b      	lsrs	r3, r3, #5
   a1f4e:	b29b      	uxth	r3, r3
   a1f50:	617b      	str	r3, [r7, #20]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   a1f52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1f56:	1c5a      	adds	r2, r3, #1
   a1f58:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1f5c:	7d3a      	ldrb	r2, [r7, #20]
   a1f5e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1f62:	440b      	add	r3, r1
   a1f64:	f803 2c34 	strb.w	r2, [r3, #-52]
								systemdataarray[count++] = tempdata.bytearray[1];
   a1f68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1f6c:	1c5a      	adds	r2, r3, #1
   a1f6e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1f72:	7d7a      	ldrb	r2, [r7, #21]
   a1f74:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1f78:	440b      	add	r3, r1
   a1f7a:	f803 2c34 	strb.w	r2, [r3, #-52]
								systemdataarray[count++] = tempdata.bytearray[2];
   a1f7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1f82:	1c5a      	adds	r2, r3, #1
   a1f84:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1f88:	7dba      	ldrb	r2, [r7, #22]
   a1f8a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1f8e:	440b      	add	r3, r1
   a1f90:	f803 2c34 	strb.w	r2, [r3, #-52]
								systemdataarray[count++] = tempdata.bytearray[3];
   a1f94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1f98:	1c5a      	adds	r2, r3, #1
   a1f9a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1f9e:	7dfa      	ldrb	r2, [r7, #23]
   a1fa0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1fa4:	440b      	add	r3, r1
   a1fa6:	f803 2c34 	strb.w	r2, [r3, #-52]
		
					} */
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   a1faa:	4b92      	ldr	r3, [pc, #584]	; (a21f4 <Cl_Dprep_SendPrepStateData+0x348>)
   a1fac:	681a      	ldr	r2, [r3, #0]
   a1fae:	4b93      	ldr	r3, [pc, #588]	; (a21fc <Cl_Dprep_SendPrepStateData+0x350>)
   a1fb0:	4610      	mov	r0, r2
   a1fb2:	4798      	blx	r3
   a1fb4:	4603      	mov	r3, r0
   a1fb6:	617b      	str	r3, [r7, #20]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   a1fb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1fbc:	1c5a      	adds	r2, r3, #1
   a1fbe:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1fc2:	7d3a      	ldrb	r2, [r7, #20]
   a1fc4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1fc8:	440b      	add	r3, r1
   a1fca:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1];
   a1fce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1fd2:	1c5a      	adds	r2, r3, #1
   a1fd4:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1fd8:	7d7a      	ldrb	r2, [r7, #21]
   a1fda:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1fde:	440b      	add	r3, r1
   a1fe0:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2];
   a1fe4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1fe8:	1c5a      	adds	r2, r3, #1
   a1fea:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a1fee:	7dba      	ldrb	r2, [r7, #22]
   a1ff0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a1ff4:	440b      	add	r3, r1
   a1ff6:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3];
   a1ffa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a1ffe:	1c5a      	adds	r2, r3, #1
   a2000:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2004:	7dfa      	ldrb	r2, [r7, #23]
   a2006:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a200a:	440b      	add	r3, r1
   a200c:	f803 2c34 	strb.w	r2, [r3, #-52]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&apt);     // manav03 changed from tempdata.Twobyte to apt
   a2010:	f107 030e 	add.w	r3, r7, #14
   a2014:	4619      	mov	r1, r3
   a2016:	200b      	movs	r0, #11
   a2018:	4b72      	ldr	r3, [pc, #456]	; (a21e4 <Cl_Dprep_SendPrepStateData+0x338>)
   a201a:	4798      	blx	r3
					{
						
						tempdata.word	 = apt;
   a201c:	89fb      	ldrh	r3, [r7, #14]
   a201e:	617b      	str	r3, [r7, #20]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a2020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2024:	1c5a      	adds	r2, r3, #1
   a2026:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a202a:	7d3a      	ldrb	r2, [r7, #20]
   a202c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2030:	440b      	add	r3, r1
   a2032:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a2036:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a203a:	1c5a      	adds	r2, r3, #1
   a203c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2040:	7d7a      	ldrb	r2, [r7, #21]
   a2042:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2046:	440b      	add	r3, r1
   a2048:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a204c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2050:	1c5a      	adds	r2, r3, #1
   a2052:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2056:	7dba      	ldrb	r2, [r7, #22]
   a2058:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a205c:	440b      	add	r3, r1
   a205e:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a2062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2066:	1c5a      	adds	r2, r3, #1
   a2068:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a206c:	7dfa      	ldrb	r2, [r7, #23]
   a206e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2072:	440b      	add	r3, r1
   a2074:	f803 2c34 	strb.w	r2, [r3, #-52]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&vpt);    // manav03 changed from tempdata.Twobyte to vpt
   a2078:	f107 030c 	add.w	r3, r7, #12
   a207c:	4619      	mov	r1, r3
   a207e:	200c      	movs	r0, #12
   a2080:	4b58      	ldr	r3, [pc, #352]	; (a21e4 <Cl_Dprep_SendPrepStateData+0x338>)
   a2082:	4798      	blx	r3
					{
						
						tempdata.word	 = vpt;
   a2084:	89bb      	ldrh	r3, [r7, #12]
   a2086:	617b      	str	r3, [r7, #20]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a2088:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a208c:	1c5a      	adds	r2, r3, #1
   a208e:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2092:	7d3a      	ldrb	r2, [r7, #20]
   a2094:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2098:	440b      	add	r3, r1
   a209a:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a209e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a20a2:	1c5a      	adds	r2, r3, #1
   a20a4:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a20a8:	7d7a      	ldrb	r2, [r7, #21]
   a20aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a20ae:	440b      	add	r3, r1
   a20b0:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a20b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a20b8:	1c5a      	adds	r2, r3, #1
   a20ba:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a20be:	7dba      	ldrb	r2, [r7, #22]
   a20c0:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a20c4:	440b      	add	r3, r1
   a20c6:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a20ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a20ce:	1c5a      	adds	r2, r3, #1
   a20d0:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a20d4:	7dfa      	ldrb	r2, [r7, #23]
   a20d6:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a20da:	440b      	add	r3, r1
   a20dc:	f803 2c34 	strb.w	r2, [r3, #-52]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   a20e0:	79fb      	ldrb	r3, [r7, #7]
   a20e2:	2b04      	cmp	r3, #4
   a20e4:	d132      	bne.n	a214c <Cl_Dprep_SendPrepStateData+0x2a0>
					{
						TMP = 5000;
   a20e6:	f241 3388 	movw	r3, #5000	; 0x1388
   a20ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
						tempdata.word	 = (TMP);
   a20ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
   a20f2:	617b      	str	r3, [r7, #20]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a20f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a20f8:	1c5a      	adds	r2, r3, #1
   a20fa:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a20fe:	7d3a      	ldrb	r2, [r7, #20]
   a2100:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2104:	440b      	add	r3, r1
   a2106:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a210a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a210e:	1c5a      	adds	r2, r3, #1
   a2110:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2114:	7d7a      	ldrb	r2, [r7, #21]
   a2116:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a211a:	440b      	add	r3, r1
   a211c:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a2120:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2124:	1c5a      	adds	r2, r3, #1
   a2126:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a212a:	7dba      	ldrb	r2, [r7, #22]
   a212c:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2130:	440b      	add	r3, r1
   a2132:	f803 2c34 	strb.w	r2, [r3, #-52]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a2136:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a213a:	1c5a      	adds	r2, r3, #1
   a213c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2140:	7dfa      	ldrb	r2, [r7, #23]
   a2142:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2146:	440b      	add	r3, r1
   a2148:	f803 2c34 	strb.w	r2, [r3, #-52]
					}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2ui);    // manav03 changed variable name
   a214c:	f107 0310 	add.w	r3, r7, #16
   a2150:	4619      	mov	r1, r3
   a2152:	2013      	movs	r0, #19
   a2154:	4b23      	ldr	r3, [pc, #140]	; (a21e4 <Cl_Dprep_SendPrepStateData+0x338>)
   a2156:	4798      	blx	r3
		{
			
			tempdata.word = temp2ui/10 ;
   a2158:	8a3b      	ldrh	r3, [r7, #16]
   a215a:	4a29      	ldr	r2, [pc, #164]	; (a2200 <Cl_Dprep_SendPrepStateData+0x354>)
   a215c:	fba2 2303 	umull	r2, r3, r2, r3
   a2160:	08db      	lsrs	r3, r3, #3
   a2162:	b29b      	uxth	r3, r3
   a2164:	617b      	str	r3, [r7, #20]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   a2166:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a216a:	1c5a      	adds	r2, r3, #1
   a216c:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2170:	7d3a      	ldrb	r2, [r7, #20]
   a2172:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a2176:	440b      	add	r3, r1
   a2178:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   a217c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2180:	1c5a      	adds	r2, r3, #1
   a2182:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a2186:	7d7a      	ldrb	r2, [r7, #21]
   a2188:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a218c:	440b      	add	r3, r1
   a218e:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   a2192:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a2196:	1c5a      	adds	r2, r3, #1
   a2198:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a219c:	7dba      	ldrb	r2, [r7, #22]
   a219e:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a21a2:	440b      	add	r3, r1
   a21a4:	f803 2c34 	strb.w	r2, [r3, #-52]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   a21a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   a21ac:	1c5a      	adds	r2, r3, #1
   a21ae:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
   a21b2:	7dfa      	ldrb	r2, [r7, #23]
   a21b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
   a21b8:	440b      	add	r3, r1
   a21ba:	f803 2c34 	strb.w	r2, [r3, #-52]
		}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   a21be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
   a21c2:	f107 031c 	add.w	r3, r7, #28
   a21c6:	4619      	mov	r1, r3
   a21c8:	202a      	movs	r0, #42	; 0x2a
   a21ca:	4b0e      	ldr	r3, [pc, #56]	; (a2204 <Cl_Dprep_SendPrepStateData+0x358>)
   a21cc:	4798      	blx	r3
   a21ce:	4603      	mov	r3, r0
   a21d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   a21d4:	2300      	movs	r3, #0
}
   a21d6:	4618      	mov	r0, r3
   a21d8:	3750      	adds	r7, #80	; 0x50
   a21da:	46bd      	mov	sp, r7
   a21dc:	bd80      	pop	{r7, pc}
   a21de:	bf00      	nop
   a21e0:	000a84fd 	.word	0x000a84fd
   a21e4:	0008fa01 	.word	0x0008fa01
   a21e8:	000a7ef9 	.word	0x000a7ef9
   a21ec:	000a8111 	.word	0x000a8111
   a21f0:	41200000 	.word	0x41200000
   a21f4:	20071b88 	.word	0x20071b88
   a21f8:	51eb851f 	.word	0x51eb851f
   a21fc:	000a8381 	.word	0x000a8381
   a2200:	cccccccd 	.word	0xcccccccd
   a2204:	0009cbd5 	.word	0x0009cbd5

000a2208 <Cl_Dprep_Stoppreparation>:
// 	return CL_OK;
// }


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   a2208:	b580      	push	{r7, lr}
   a220a:	b082      	sub	sp, #8
   a220c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a220e:	2300      	movs	r3, #0
   a2210:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	sv_cntrl_setredalarm();
   a2212:	4b3a      	ldr	r3, [pc, #232]	; (a22fc <Cl_Dprep_Stoppreparation+0xf4>)
   a2214:	4798      	blx	r3
//	sv_cntrl_nobuzzer(); // manav01 added
	// deactivate all alarms
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   a2216:	4b3a      	ldr	r3, [pc, #232]	; (a2300 <Cl_Dprep_Stoppreparation+0xf8>)
   a2218:	781b      	ldrb	r3, [r3, #0]
   a221a:	2b00      	cmp	r3, #0
   a221c:	d068      	beq.n	a22f0 <Cl_Dprep_Stoppreparation+0xe8>
   a221e:	4b38      	ldr	r3, [pc, #224]	; (a2300 <Cl_Dprep_Stoppreparation+0xf8>)
   a2220:	781b      	ldrb	r3, [r3, #0]
   a2222:	2b0b      	cmp	r3, #11
   a2224:	d064      	beq.n	a22f0 <Cl_Dprep_Stoppreparation+0xe8>
   a2226:	4b36      	ldr	r3, [pc, #216]	; (a2300 <Cl_Dprep_Stoppreparation+0xf8>)
   a2228:	781b      	ldrb	r3, [r3, #0]
   a222a:	2b0c      	cmp	r3, #12
   a222c:	d060      	beq.n	a22f0 <Cl_Dprep_Stoppreparation+0xe8>
				{
					
					stability_counter = 0;
   a222e:	4b35      	ldr	r3, [pc, #212]	; (a2304 <Cl_Dprep_Stoppreparation+0xfc>)
   a2230:	2200      	movs	r2, #0
   a2232:	601a      	str	r2, [r3, #0]
					wait_timeout_counter = 0;
   a2234:	4b34      	ldr	r3, [pc, #208]	; (a2308 <Cl_Dprep_Stoppreparation+0x100>)
   a2236:	2200      	movs	r2, #0
   a2238:	601a      	str	r2, [r3, #0]
					state_counter = 0;
   a223a:	4b34      	ldr	r3, [pc, #208]	; (a230c <Cl_Dprep_Stoppreparation+0x104>)
   a223c:	2200      	movs	r2, #0
   a223e:	601a      	str	r2, [r3, #0]
					 	Cl_Dprepsecondscounter = 0;
   a2240:	4b33      	ldr	r3, [pc, #204]	; (a2310 <Cl_Dprep_Stoppreparation+0x108>)
   a2242:	2200      	movs	r2, #0
   a2244:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   a2246:	4b33      	ldr	r3, [pc, #204]	; (a2314 <Cl_Dprep_Stoppreparation+0x10c>)
   a2248:	2200      	movs	r2, #0
   a224a:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   a224c:	4b32      	ldr	r3, [pc, #200]	; (a2318 <Cl_Dprep_Stoppreparation+0x110>)
   a224e:	2200      	movs	r2, #0
   a2250:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   a2252:	4b32      	ldr	r3, [pc, #200]	; (a231c <Cl_Dprep_Stoppreparation+0x114>)
   a2254:	2200      	movs	r2, #0
   a2256:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   a2258:	4b31      	ldr	r3, [pc, #196]	; (a2320 <Cl_Dprep_Stoppreparation+0x118>)
   a225a:	2200      	movs	r2, #0
   a225c:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   a225e:	4b31      	ldr	r3, [pc, #196]	; (a2324 <Cl_Dprep_Stoppreparation+0x11c>)
   a2260:	2200      	movs	r2, #0
   a2262:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   a2264:	4b30      	ldr	r3, [pc, #192]	; (a2328 <Cl_Dprep_Stoppreparation+0x120>)
   a2266:	2200      	movs	r2, #0
   a2268:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   a226a:	4b30      	ldr	r3, [pc, #192]	; (a232c <Cl_Dprep_Stoppreparation+0x124>)
   a226c:	2200      	movs	r2, #0
   a226e:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   a2270:	4b2f      	ldr	r3, [pc, #188]	; (a2330 <Cl_Dprep_Stoppreparation+0x128>)
   a2272:	2200      	movs	r2, #0
   a2274:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   a2276:	4b2f      	ldr	r3, [pc, #188]	; (a2334 <Cl_Dprep_Stoppreparation+0x12c>)
   a2278:	2200      	movs	r2, #0
   a227a:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   a227c:	4b2e      	ldr	r3, [pc, #184]	; (a2338 <Cl_Dprep_Stoppreparation+0x130>)
   a227e:	2200      	movs	r2, #0
   a2280:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   a2282:	4b2e      	ldr	r3, [pc, #184]	; (a233c <Cl_Dprep_Stoppreparation+0x134>)
   a2284:	2200      	movs	r2, #0
   a2286:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   a2288:	4b2d      	ldr	r3, [pc, #180]	; (a2340 <Cl_Dprep_Stoppreparation+0x138>)
   a228a:	2200      	movs	r2, #0
   a228c:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   a228e:	4b2d      	ldr	r3, [pc, #180]	; (a2344 <Cl_Dprep_Stoppreparation+0x13c>)
   a2290:	2200      	movs	r2, #0
   a2292:	801a      	strh	r2, [r3, #0]
						
					Cl_deactivate_prep_alarms();							
   a2294:	4b2c      	ldr	r3, [pc, #176]	; (a2348 <Cl_Dprep_Stoppreparation+0x140>)
   a2296:	4798      	blx	r3
							
							
							
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   a2298:	4b2c      	ldr	r3, [pc, #176]	; (a234c <Cl_Dprep_Stoppreparation+0x144>)
   a229a:	4798      	blx	r3
   a229c:	4603      	mov	r3, r0
   a229e:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   a22a0:	2011      	movs	r0, #17
   a22a2:	4b2b      	ldr	r3, [pc, #172]	; (a2350 <Cl_Dprep_Stoppreparation+0x148>)
   a22a4:	4798      	blx	r3
   a22a6:	4603      	mov	r3, r0
   a22a8:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a22aa:	4b2a      	ldr	r3, [pc, #168]	; (a2354 <Cl_Dprep_Stoppreparation+0x14c>)
   a22ac:	4798      	blx	r3
   a22ae:	4603      	mov	r3, r0
   a22b0:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a22b2:	2004      	movs	r0, #4
   a22b4:	4b28      	ldr	r3, [pc, #160]	; (a2358 <Cl_Dprep_Stoppreparation+0x150>)
   a22b6:	4798      	blx	r3
   a22b8:	4603      	mov	r3, r0
   a22ba:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a22bc:	2100      	movs	r1, #0
   a22be:	2002      	movs	r0, #2
   a22c0:	4b26      	ldr	r3, [pc, #152]	; (a235c <Cl_Dprep_Stoppreparation+0x154>)
   a22c2:	4798      	blx	r3
//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_PAUSE);
	Cl_dprep_StopMixing();			
   a22c4:	4b26      	ldr	r3, [pc, #152]	; (a2360 <Cl_Dprep_Stoppreparation+0x158>)
   a22c6:	4798      	blx	r3
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a22c8:	4b0d      	ldr	r3, [pc, #52]	; (a2300 <Cl_Dprep_Stoppreparation+0xf8>)
   a22ca:	781b      	ldrb	r3, [r3, #0]
   a22cc:	2b06      	cmp	r3, #6
   a22ce:	d104      	bne.n	a22da <Cl_Dprep_Stoppreparation+0xd2>
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a22d0:	2100      	movs	r1, #0
   a22d2:	2009      	movs	r0, #9
   a22d4:	4b21      	ldr	r3, [pc, #132]	; (a235c <Cl_Dprep_Stoppreparation+0x154>)
   a22d6:	4798      	blx	r3
   a22d8:	e007      	b.n	a22ea <Cl_Dprep_Stoppreparation+0xe2>
				}
				else{
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a22da:	1dbb      	adds	r3, r7, #6
   a22dc:	2200      	movs	r2, #0
   a22de:	4619      	mov	r1, r3
   a22e0:	202d      	movs	r0, #45	; 0x2d
   a22e2:	4b20      	ldr	r3, [pc, #128]	; (a2364 <Cl_Dprep_Stoppreparation+0x15c>)
   a22e4:	4798      	blx	r3
   a22e6:	4603      	mov	r3, r0
   a22e8:	71fb      	strb	r3, [r7, #7]
				}
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   a22ea:	4b05      	ldr	r3, [pc, #20]	; (a2300 <Cl_Dprep_Stoppreparation+0xf8>)
   a22ec:	2200      	movs	r2, #0
   a22ee:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
				
					
				}
		return CL_OK;
   a22f0:	2300      	movs	r3, #0
}
   a22f2:	4618      	mov	r0, r3
   a22f4:	3708      	adds	r7, #8
   a22f6:	46bd      	mov	sp, r7
   a22f8:	bd80      	pop	{r7, pc}
   a22fa:	bf00      	nop
   a22fc:	0009b02d 	.word	0x0009b02d
   a2300:	20071b6f 	.word	0x20071b6f
   a2304:	20071b2c 	.word	0x20071b2c
   a2308:	20071b30 	.word	0x20071b30
   a230c:	20071b34 	.word	0x20071b34
   a2310:	20071b38 	.word	0x20071b38
   a2314:	20071b3c 	.word	0x20071b3c
   a2318:	20071b40 	.word	0x20071b40
   a231c:	20071b44 	.word	0x20071b44
   a2320:	20071b48 	.word	0x20071b48
   a2324:	20071b4e 	.word	0x20071b4e
   a2328:	20071b50 	.word	0x20071b50
   a232c:	20071b52 	.word	0x20071b52
   a2330:	20071b54 	.word	0x20071b54
   a2334:	20071b56 	.word	0x20071b56
   a2338:	20071b58 	.word	0x20071b58
   a233c:	20071b5a 	.word	0x20071b5a
   a2340:	20071b5c 	.word	0x20071b5c
   a2344:	20071b5e 	.word	0x20071b5e
   a2348:	000a38d9 	.word	0x000a38d9
   a234c:	0009af41 	.word	0x0009af41
   a2350:	0009afc5 	.word	0x0009afc5
   a2354:	0009adcd 	.word	0x0009adcd
   a2358:	00089035 	.word	0x00089035
   a235c:	00088019 	.word	0x00088019
   a2360:	000a3829 	.word	0x000a3829
   a2364:	0009cbd5 	.word	0x0009cbd5

000a2368 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   a2368:	b580      	push	{r7, lr}
   a236a:	b082      	sub	sp, #8
   a236c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a236e:	2300      	movs	r3, #0
   a2370:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a2372:	2359      	movs	r3, #89	; 0x59
   a2374:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a2376:	4b6b      	ldr	r3, [pc, #428]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2378:	2200      	movs	r2, #0
   a237a:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   a237c:	2001      	movs	r0, #1
   a237e:	4b6a      	ldr	r3, [pc, #424]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2380:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   a2382:	4b68      	ldr	r3, [pc, #416]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2384:	2200      	movs	r2, #0
   a2386:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   a2388:	4b66      	ldr	r3, [pc, #408]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a238a:	2200      	movs	r2, #0
   a238c:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   a238e:	2005      	movs	r0, #5
   a2390:	4b65      	ldr	r3, [pc, #404]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2392:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   a2394:	2006      	movs	r0, #6
   a2396:	4b64      	ldr	r3, [pc, #400]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2398:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a239a:	4b62      	ldr	r3, [pc, #392]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a239c:	2200      	movs	r2, #0
   a239e:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a23a0:	4b60      	ldr	r3, [pc, #384]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23a2:	2200      	movs	r2, #0
   a23a4:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a23a6:	2003      	movs	r0, #3
   a23a8:	4b5f      	ldr	r3, [pc, #380]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a23aa:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a23ac:	2004      	movs	r0, #4
   a23ae:	4b5e      	ldr	r3, [pc, #376]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a23b0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   a23b2:	4b5c      	ldr	r3, [pc, #368]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23b4:	2200      	movs	r2, #0
   a23b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   a23ba:	202a      	movs	r0, #42	; 0x2a
   a23bc:	4b5a      	ldr	r3, [pc, #360]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a23be:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   a23c0:	4b58      	ldr	r3, [pc, #352]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23c2:	2200      	movs	r2, #0
   a23c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   a23c8:	202c      	movs	r0, #44	; 0x2c
   a23ca:	4b57      	ldr	r3, [pc, #348]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a23cc:	4798      	blx	r3
	
	
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   a23ce:	4b55      	ldr	r3, [pc, #340]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23d0:	2200      	movs	r2, #0
   a23d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a23d6:	4b53      	ldr	r3, [pc, #332]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23d8:	2200      	movs	r2, #0
   a23da:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a23de:	2008      	movs	r0, #8
   a23e0:	4b51      	ldr	r3, [pc, #324]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a23e2:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   a23e4:	2007      	movs	r0, #7
   a23e6:	4b50      	ldr	r3, [pc, #320]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a23e8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   a23ea:	4b4e      	ldr	r3, [pc, #312]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23ec:	2200      	movs	r2, #0
   a23ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   a23f2:	4b4c      	ldr	r3, [pc, #304]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23f4:	2200      	movs	r2, #0
   a23f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   a23fa:	4b4a      	ldr	r3, [pc, #296]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a23fc:	2200      	movs	r2, #0
   a23fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   a2402:	4b48      	ldr	r3, [pc, #288]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2404:	2200      	movs	r2, #0
   a2406:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   a240a:	4b46      	ldr	r3, [pc, #280]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a240c:	2200      	movs	r2, #0
   a240e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   a2412:	4b44      	ldr	r3, [pc, #272]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2414:	2200      	movs	r2, #0
   a2416:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   a241a:	4b42      	ldr	r3, [pc, #264]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a241c:	2200      	movs	r2, #0
   a241e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   a2422:	4b40      	ldr	r3, [pc, #256]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2424:	2200      	movs	r2, #0
   a2426:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a242a:	4b3e      	ldr	r3, [pc, #248]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a242c:	2200      	movs	r2, #0
   a242e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a2432:	4b3c      	ldr	r3, [pc, #240]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2434:	2200      	movs	r2, #0
   a2436:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a243a:	2015      	movs	r0, #21
   a243c:	4b3a      	ldr	r3, [pc, #232]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a243e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a2440:	2016      	movs	r0, #22
   a2442:	4b39      	ldr	r3, [pc, #228]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2444:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a2446:	4b37      	ldr	r3, [pc, #220]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2448:	2200      	movs	r2, #0
   a244a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a244e:	4b35      	ldr	r3, [pc, #212]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2450:	2200      	movs	r2, #0
   a2452:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a2456:	2017      	movs	r0, #23
   a2458:	4b33      	ldr	r3, [pc, #204]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a245a:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a245c:	2018      	movs	r0, #24
   a245e:	4b32      	ldr	r3, [pc, #200]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2460:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a2462:	4b30      	ldr	r3, [pc, #192]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2464:	2200      	movs	r2, #0
   a2466:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a246a:	4b2e      	ldr	r3, [pc, #184]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a246c:	2200      	movs	r2, #0
   a246e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a2472:	2027      	movs	r0, #39	; 0x27
   a2474:	4b2c      	ldr	r3, [pc, #176]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2476:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a2478:	2028      	movs	r0, #40	; 0x28
   a247a:	4b2b      	ldr	r3, [pc, #172]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a247c:	4798      	blx	r3
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a247e:	4b29      	ldr	r3, [pc, #164]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2480:	2200      	movs	r2, #0
   a2482:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a2486:	4b27      	ldr	r3, [pc, #156]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2488:	2200      	movs	r2, #0
   a248a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a248e:	4b25      	ldr	r3, [pc, #148]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a2490:	2200      	movs	r2, #0
   a2492:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   a2496:	200c      	movs	r0, #12
   a2498:	4b23      	ldr	r3, [pc, #140]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a249a:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_HIGH_FLOWRATE);
   a249c:	200e      	movs	r0, #14
   a249e:	4b22      	ldr	r3, [pc, #136]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24a0:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   a24a2:	200d      	movs	r0, #13
   a24a4:	4b20      	ldr	r3, [pc, #128]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24a6:	4798      	blx	r3
	
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a24a8:	4b1e      	ldr	r3, [pc, #120]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24aa:	2200      	movs	r2, #0
   a24ac:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a24b0:	4b1c      	ldr	r3, [pc, #112]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24b2:	2200      	movs	r2, #0
   a24b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a24b8:	200f      	movs	r0, #15
   a24ba:	4b1b      	ldr	r3, [pc, #108]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24bc:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a24be:	2010      	movs	r0, #16
   a24c0:	4b19      	ldr	r3, [pc, #100]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24c2:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a24c4:	4b17      	ldr	r3, [pc, #92]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24c6:	2200      	movs	r2, #0
   a24c8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   a24cc:	4b15      	ldr	r3, [pc, #84]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24ce:	2200      	movs	r2, #0
   a24d0:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a24d4:	2011      	movs	r0, #17
   a24d6:	4b14      	ldr	r3, [pc, #80]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24d8:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a24da:	2012      	movs	r0, #18
   a24dc:	4b12      	ldr	r3, [pc, #72]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24de:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a24e0:	4b10      	ldr	r3, [pc, #64]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24e2:	2200      	movs	r2, #0
   a24e4:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a24e8:	4b0e      	ldr	r3, [pc, #56]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24ea:	2200      	movs	r2, #0
   a24ec:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a24f0:	2013      	movs	r0, #19
   a24f2:	4b0d      	ldr	r3, [pc, #52]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24f4:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a24f6:	2014      	movs	r0, #20
   a24f8:	4b0b      	ldr	r3, [pc, #44]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a24fa:	4798      	blx	r3

Cl_DprepAlarmTable[CL_DPREP_ALARM_BP_STOPPED].IsRaised = false;
   a24fc:	4b09      	ldr	r3, [pc, #36]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a24fe:	2200      	movs	r2, #0
   a2500:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	Cl_AlarmResetAlarm(BP_STOPPED);
   a2504:	203f      	movs	r0, #63	; 0x3f
   a2506:	4b08      	ldr	r3, [pc, #32]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2508:	4798      	blx	r3

Cl_DprepAlarmTable[CL_DPREP_ALARM_BCALARM].IsRaised = false;
   a250a:	4b06      	ldr	r3, [pc, #24]	; (a2524 <Cl_Dprep_ResetAlertsforReassertion+0x1bc>)
   a250c:	2200      	movs	r2, #0
   a250e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
Cl_AlarmResetAlarm(BC_ALARM);
   a2512:	201a      	movs	r0, #26
   a2514:	4b04      	ldr	r3, [pc, #16]	; (a2528 <Cl_Dprep_ResetAlertsforReassertion+0x1c0>)
   a2516:	4798      	blx	r3

	return (Cl_dprepretcode);
   a2518:	79fb      	ldrb	r3, [r7, #7]
	
}
   a251a:	4618      	mov	r0, r3
   a251c:	3708      	adds	r7, #8
   a251e:	46bd      	mov	sp, r7
   a2520:	bd80      	pop	{r7, pc}
   a2522:	bf00      	nop
   a2524:	20070b64 	.word	0x20070b64
   a2528:	00082ad9 	.word	0x00082ad9

000a252c <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   a252c:	b590      	push	{r4, r7, lr}
   a252e:	b089      	sub	sp, #36	; 0x24
   a2530:	af00      	add	r7, sp, #0
   a2532:	4604      	mov	r4, r0
   a2534:	1d38      	adds	r0, r7, #4
   a2536:	e880 0006 	stmia.w	r0, {r1, r2}
   a253a:	461a      	mov	r2, r3
   a253c:	4623      	mov	r3, r4
   a253e:	73fb      	strb	r3, [r7, #15]
   a2540:	4613      	mov	r3, r2
   a2542:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a2544:	2300      	movs	r3, #0
   a2546:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a2548:	2359      	movs	r3, #89	; 0x59
   a254a:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   a254c:	f107 0314 	add.w	r3, r7, #20
   a2550:	2200      	movs	r2, #0
   a2552:	601a      	str	r2, [r3, #0]
   a2554:	605a      	str	r2, [r3, #4]
	Cl_Uint8Type  databytecnt = 0;
   a2556:	2300      	movs	r3, #0
   a2558:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   a255a:	7bfb      	ldrb	r3, [r7, #15]
   a255c:	3b05      	subs	r3, #5
   a255e:	2b18      	cmp	r3, #24
   a2560:	f200 837c 	bhi.w	a2c5c <Cl_Dprep_setdata+0x730>
   a2564:	a201      	add	r2, pc, #4	; (adr r2, a256c <Cl_Dprep_setdata+0x40>)
   a2566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a256a:	bf00      	nop
   a256c:	000a25d1 	.word	0x000a25d1
   a2570:	000a25fb 	.word	0x000a25fb
   a2574:	000a2625 	.word	0x000a2625
   a2578:	000a2679 	.word	0x000a2679
   a257c:	000a26a3 	.word	0x000a26a3
   a2580:	000a2c5d 	.word	0x000a2c5d
   a2584:	000a26cd 	.word	0x000a26cd
   a2588:	000a26f7 	.word	0x000a26f7
   a258c:	000a2721 	.word	0x000a2721
   a2590:	000a264f 	.word	0x000a264f
   a2594:	000a274b 	.word	0x000a274b
   a2598:	000a2c5d 	.word	0x000a2c5d
   a259c:	000a2c5d 	.word	0x000a2c5d
   a25a0:	000a2c5d 	.word	0x000a2c5d
   a25a4:	000a2779 	.word	0x000a2779
   a25a8:	000a27e9 	.word	0x000a27e9
   a25ac:	000a2859 	.word	0x000a2859
   a25b0:	000a28d5 	.word	0x000a28d5
   a25b4:	000a2945 	.word	0x000a2945
   a25b8:	000a29b5 	.word	0x000a29b5
   a25bc:	000a2a23 	.word	0x000a2a23
   a25c0:	000a2a93 	.word	0x000a2a93
   a25c4:	000a2b03 	.word	0x000a2b03
   a25c8:	000a2b73 	.word	0x000a2b73
   a25cc:	000a2bed 	.word	0x000a2bed
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a25d0:	4bbd      	ldr	r3, [pc, #756]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a25d2:	78da      	ldrb	r2, [r3, #3]
   a25d4:	1d3b      	adds	r3, r7, #4
   a25d6:	4619      	mov	r1, r3
   a25d8:	2005      	movs	r0, #5
   a25da:	4bbc      	ldr	r3, [pc, #752]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a25dc:	4798      	blx	r3
   a25de:	4603      	mov	r3, r0
   a25e0:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   a25e2:	2305      	movs	r3, #5
   a25e4:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   a25e6:	f107 0314 	add.w	r3, r7, #20
   a25ea:	3301      	adds	r3, #1
   a25ec:	4619      	mov	r1, r3
   a25ee:	2005      	movs	r0, #5
   a25f0:	4bb7      	ldr	r3, [pc, #732]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a25f2:	4798      	blx	r3
   a25f4:	4603      	mov	r3, r0
   a25f6:	77fb      	strb	r3, [r7, #31]
					
					 break;
   a25f8:	e331      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a25fa:	4bb3      	ldr	r3, [pc, #716]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a25fc:	78da      	ldrb	r2, [r3, #3]
   a25fe:	1d3b      	adds	r3, r7, #4
   a2600:	4619      	mov	r1, r3
   a2602:	2006      	movs	r0, #6
   a2604:	4bb1      	ldr	r3, [pc, #708]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2606:	4798      	blx	r3
   a2608:	4603      	mov	r3, r0
   a260a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   a260c:	2306      	movs	r3, #6
   a260e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a2610:	f107 0314 	add.w	r3, r7, #20
   a2614:	3301      	adds	r3, #1
   a2616:	4619      	mov	r1, r3
   a2618:	2006      	movs	r0, #6
   a261a:	4bad      	ldr	r3, [pc, #692]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a261c:	4798      	blx	r3
   a261e:	4603      	mov	r3, r0
   a2620:	77fb      	strb	r3, [r7, #31]

					 break;
   a2622:	e31c      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2624:	4ba8      	ldr	r3, [pc, #672]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a2626:	78da      	ldrb	r2, [r3, #3]
   a2628:	1d3b      	adds	r3, r7, #4
   a262a:	4619      	mov	r1, r3
   a262c:	200e      	movs	r0, #14
   a262e:	4ba7      	ldr	r3, [pc, #668]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2630:	4798      	blx	r3
   a2632:	4603      	mov	r3, r0
   a2634:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   a2636:	2307      	movs	r3, #7
   a2638:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a263a:	f107 0314 	add.w	r3, r7, #20
   a263e:	3301      	adds	r3, #1
   a2640:	4619      	mov	r1, r3
   a2642:	200e      	movs	r0, #14
   a2644:	4ba2      	ldr	r3, [pc, #648]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a2646:	4798      	blx	r3
   a2648:	4603      	mov	r3, r0
   a264a:	77fb      	strb	r3, [r7, #31]
					 break;
   a264c:	e307      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a264e:	4b9e      	ldr	r3, [pc, #632]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a2650:	78da      	ldrb	r2, [r3, #3]
   a2652:	1d3b      	adds	r3, r7, #4
   a2654:	4619      	mov	r1, r3
   a2656:	200f      	movs	r0, #15
   a2658:	4b9c      	ldr	r3, [pc, #624]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a265a:	4798      	blx	r3
   a265c:	4603      	mov	r3, r0
   a265e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   a2660:	230e      	movs	r3, #14
   a2662:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a2664:	f107 0314 	add.w	r3, r7, #20
   a2668:	3301      	adds	r3, #1
   a266a:	4619      	mov	r1, r3
   a266c:	200f      	movs	r0, #15
   a266e:	4b98      	ldr	r3, [pc, #608]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a2670:	4798      	blx	r3
   a2672:	4603      	mov	r3, r0
   a2674:	77fb      	strb	r3, [r7, #31]

					break;
   a2676:	e2f2      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2678:	4b93      	ldr	r3, [pc, #588]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a267a:	78da      	ldrb	r2, [r3, #3]
   a267c:	1d3b      	adds	r3, r7, #4
   a267e:	4619      	mov	r1, r3
   a2680:	2007      	movs	r0, #7
   a2682:	4b92      	ldr	r3, [pc, #584]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2684:	4798      	blx	r3
   a2686:	4603      	mov	r3, r0
   a2688:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   a268a:	2308      	movs	r3, #8
   a268c:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a268e:	f107 0314 	add.w	r3, r7, #20
   a2692:	3301      	adds	r3, #1
   a2694:	4619      	mov	r1, r3
   a2696:	2007      	movs	r0, #7
   a2698:	4b8d      	ldr	r3, [pc, #564]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a269a:	4798      	blx	r3
   a269c:	4603      	mov	r3, r0
   a269e:	77fb      	strb	r3, [r7, #31]

					 break;
   a26a0:	e2dd      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a26a2:	4b89      	ldr	r3, [pc, #548]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a26a4:	78da      	ldrb	r2, [r3, #3]
   a26a6:	1d3b      	adds	r3, r7, #4
   a26a8:	4619      	mov	r1, r3
   a26aa:	2008      	movs	r0, #8
   a26ac:	4b87      	ldr	r3, [pc, #540]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a26ae:	4798      	blx	r3
   a26b0:	4603      	mov	r3, r0
   a26b2:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   a26b4:	2309      	movs	r3, #9
   a26b6:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a26b8:	f107 0314 	add.w	r3, r7, #20
   a26bc:	3301      	adds	r3, #1
   a26be:	4619      	mov	r1, r3
   a26c0:	2008      	movs	r0, #8
   a26c2:	4b83      	ldr	r3, [pc, #524]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a26c4:	4798      	blx	r3
   a26c6:	4603      	mov	r3, r0
   a26c8:	77fb      	strb	r3, [r7, #31]

					 break;
   a26ca:	e2c8      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a26cc:	4b7e      	ldr	r3, [pc, #504]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a26ce:	78da      	ldrb	r2, [r3, #3]
   a26d0:	1d3b      	adds	r3, r7, #4
   a26d2:	4619      	mov	r1, r3
   a26d4:	200a      	movs	r0, #10
   a26d6:	4b7d      	ldr	r3, [pc, #500]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a26d8:	4798      	blx	r3
   a26da:	4603      	mov	r3, r0
   a26dc:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   a26de:	230b      	movs	r3, #11
   a26e0:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a26e2:	f107 0314 	add.w	r3, r7, #20
   a26e6:	3301      	adds	r3, #1
   a26e8:	4619      	mov	r1, r3
   a26ea:	200a      	movs	r0, #10
   a26ec:	4b78      	ldr	r3, [pc, #480]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a26ee:	4798      	blx	r3
   a26f0:	4603      	mov	r3, r0
   a26f2:	77fb      	strb	r3, [r7, #31]

					 break;
   a26f4:	e2b3      	b.n	a2c5e <Cl_Dprep_setdata+0x732>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a26f6:	4b74      	ldr	r3, [pc, #464]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a26f8:	78da      	ldrb	r2, [r3, #3]
   a26fa:	1d3b      	adds	r3, r7, #4
   a26fc:	4619      	mov	r1, r3
   a26fe:	200b      	movs	r0, #11
   a2700:	4b72      	ldr	r3, [pc, #456]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2702:	4798      	blx	r3
   a2704:	4603      	mov	r3, r0
   a2706:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   a2708:	230c      	movs	r3, #12
   a270a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a270c:	f107 0314 	add.w	r3, r7, #20
   a2710:	3301      	adds	r3, #1
   a2712:	4619      	mov	r1, r3
   a2714:	200b      	movs	r0, #11
   a2716:	4b6e      	ldr	r3, [pc, #440]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a2718:	4798      	blx	r3
   a271a:	4603      	mov	r3, r0
   a271c:	77fb      	strb	r3, [r7, #31]

					 break;
   a271e:	e29e      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a2720:	4b69      	ldr	r3, [pc, #420]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a2722:	78da      	ldrb	r2, [r3, #3]
   a2724:	1d3b      	adds	r3, r7, #4
   a2726:	4619      	mov	r1, r3
   a2728:	200c      	movs	r0, #12
   a272a:	4b68      	ldr	r3, [pc, #416]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a272c:	4798      	blx	r3
   a272e:	4603      	mov	r3, r0
   a2730:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   a2732:	230d      	movs	r3, #13
   a2734:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a2736:	f107 0314 	add.w	r3, r7, #20
   a273a:	3301      	adds	r3, #1
   a273c:	4619      	mov	r1, r3
   a273e:	200c      	movs	r0, #12
   a2740:	4b63      	ldr	r3, [pc, #396]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a2742:	4798      	blx	r3
   a2744:	4603      	mov	r3, r0
   a2746:	77fb      	strb	r3, [r7, #31]

					 break;
   a2748:	e289      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a274a:	4b5f      	ldr	r3, [pc, #380]	; (a28c8 <Cl_Dprep_setdata+0x39c>)
   a274c:	78da      	ldrb	r2, [r3, #3]
   a274e:	1d3b      	adds	r3, r7, #4
   a2750:	4619      	mov	r1, r3
   a2752:	200e      	movs	r0, #14
   a2754:	4b5d      	ldr	r3, [pc, #372]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2756:	4798      	blx	r3
   a2758:	4603      	mov	r3, r0
   a275a:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   a275c:	2316      	movs	r3, #22
   a275e:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   a2760:	230f      	movs	r3, #15
   a2762:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   a2764:	f107 0314 	add.w	r3, r7, #20
   a2768:	3301      	adds	r3, #1
   a276a:	4619      	mov	r1, r3
   a276c:	200d      	movs	r0, #13
   a276e:	4b58      	ldr	r3, [pc, #352]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a2770:	4798      	blx	r3
   a2772:	4603      	mov	r3, r0
   a2774:	77fb      	strb	r3, [r7, #31]
					 break;
   a2776:	e272      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   a2778:	1d3b      	adds	r3, r7, #4
   a277a:	2202      	movs	r2, #2
   a277c:	4619      	mov	r1, r3
   a277e:	2005      	movs	r0, #5
   a2780:	4b52      	ldr	r3, [pc, #328]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2782:	4798      	blx	r3
   a2784:	4603      	mov	r3, r0
   a2786:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2788:	1d3b      	adds	r3, r7, #4
   a278a:	3302      	adds	r3, #2
   a278c:	2202      	movs	r2, #2
   a278e:	4619      	mov	r1, r3
   a2790:	2012      	movs	r0, #18
   a2792:	4b4e      	ldr	r3, [pc, #312]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2794:	4798      	blx	r3
   a2796:	4603      	mov	r3, r0
   a2798:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a279a:	1d3b      	adds	r3, r7, #4
   a279c:	3304      	adds	r3, #4
   a279e:	2202      	movs	r2, #2
   a27a0:	4619      	mov	r1, r3
   a27a2:	2013      	movs	r0, #19
   a27a4:	4b49      	ldr	r3, [pc, #292]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a27a6:	4798      	blx	r3
   a27a8:	4603      	mov	r3, r0
   a27aa:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   a27ac:	2313      	movs	r3, #19
   a27ae:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   a27b0:	f107 0314 	add.w	r3, r7, #20
   a27b4:	3301      	adds	r3, #1
   a27b6:	4619      	mov	r1, r3
   a27b8:	2005      	movs	r0, #5
   a27ba:	4b45      	ldr	r3, [pc, #276]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a27bc:	4798      	blx	r3
   a27be:	4603      	mov	r3, r0
   a27c0:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   a27c2:	f107 0314 	add.w	r3, r7, #20
   a27c6:	3303      	adds	r3, #3
   a27c8:	4619      	mov	r1, r3
   a27ca:	2012      	movs	r0, #18
   a27cc:	4b40      	ldr	r3, [pc, #256]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a27ce:	4798      	blx	r3
   a27d0:	4603      	mov	r3, r0
   a27d2:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   a27d4:	f107 0314 	add.w	r3, r7, #20
   a27d8:	3305      	adds	r3, #5
   a27da:	4619      	mov	r1, r3
   a27dc:	2013      	movs	r0, #19
   a27de:	4b3c      	ldr	r3, [pc, #240]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a27e0:	4798      	blx	r3
   a27e2:	4603      	mov	r3, r0
   a27e4:	77fb      	strb	r3, [r7, #31]
							
					break;
   a27e6:	e23a      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   a27e8:	1d3b      	adds	r3, r7, #4
   a27ea:	2202      	movs	r2, #2
   a27ec:	4619      	mov	r1, r3
   a27ee:	2006      	movs	r0, #6
   a27f0:	4b36      	ldr	r3, [pc, #216]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a27f2:	4798      	blx	r3
   a27f4:	4603      	mov	r3, r0
   a27f6:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a27f8:	1d3b      	adds	r3, r7, #4
   a27fa:	3302      	adds	r3, #2
   a27fc:	2202      	movs	r2, #2
   a27fe:	4619      	mov	r1, r3
   a2800:	2014      	movs	r0, #20
   a2802:	4b32      	ldr	r3, [pc, #200]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2804:	4798      	blx	r3
   a2806:	4603      	mov	r3, r0
   a2808:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a280a:	1d3b      	adds	r3, r7, #4
   a280c:	3304      	adds	r3, #4
   a280e:	2202      	movs	r2, #2
   a2810:	4619      	mov	r1, r3
   a2812:	2015      	movs	r0, #21
   a2814:	4b2d      	ldr	r3, [pc, #180]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2816:	4798      	blx	r3
   a2818:	4603      	mov	r3, r0
   a281a:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   a281c:	2314      	movs	r3, #20
   a281e:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a2820:	f107 0314 	add.w	r3, r7, #20
   a2824:	3301      	adds	r3, #1
   a2826:	4619      	mov	r1, r3
   a2828:	2006      	movs	r0, #6
   a282a:	4b29      	ldr	r3, [pc, #164]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a282c:	4798      	blx	r3
   a282e:	4603      	mov	r3, r0
   a2830:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   a2832:	f107 0314 	add.w	r3, r7, #20
   a2836:	3303      	adds	r3, #3
   a2838:	4619      	mov	r1, r3
   a283a:	2014      	movs	r0, #20
   a283c:	4b24      	ldr	r3, [pc, #144]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a283e:	4798      	blx	r3
   a2840:	4603      	mov	r3, r0
   a2842:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   a2844:	f107 0314 	add.w	r3, r7, #20
   a2848:	3305      	adds	r3, #5
   a284a:	4619      	mov	r1, r3
   a284c:	2015      	movs	r0, #21
   a284e:	4b20      	ldr	r3, [pc, #128]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a2850:	4798      	blx	r3
   a2852:	4603      	mov	r3, r0
   a2854:	77fb      	strb	r3, [r7, #31]
					break;
   a2856:	e202      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   a2858:	1d3b      	adds	r3, r7, #4
   a285a:	2202      	movs	r2, #2
   a285c:	4619      	mov	r1, r3
   a285e:	200e      	movs	r0, #14
   a2860:	4b1a      	ldr	r3, [pc, #104]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2862:	4798      	blx	r3
   a2864:	4603      	mov	r3, r0
   a2866:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2868:	1d3b      	adds	r3, r7, #4
   a286a:	3302      	adds	r3, #2
   a286c:	2202      	movs	r2, #2
   a286e:	4619      	mov	r1, r3
   a2870:	2016      	movs	r0, #22
   a2872:	4b16      	ldr	r3, [pc, #88]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2874:	4798      	blx	r3
   a2876:	4603      	mov	r3, r0
   a2878:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a287a:	1d3b      	adds	r3, r7, #4
   a287c:	3304      	adds	r3, #4
   a287e:	2202      	movs	r2, #2
   a2880:	4619      	mov	r1, r3
   a2882:	2017      	movs	r0, #23
   a2884:	4b11      	ldr	r3, [pc, #68]	; (a28cc <Cl_Dprep_setdata+0x3a0>)
   a2886:	4798      	blx	r3
   a2888:	4603      	mov	r3, r0
   a288a:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   a288c:	2315      	movs	r3, #21
   a288e:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a2890:	f107 0314 	add.w	r3, r7, #20
   a2894:	3301      	adds	r3, #1
   a2896:	4619      	mov	r1, r3
   a2898:	200e      	movs	r0, #14
   a289a:	4b0d      	ldr	r3, [pc, #52]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a289c:	4798      	blx	r3
   a289e:	4603      	mov	r3, r0
   a28a0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   a28a2:	f107 0314 	add.w	r3, r7, #20
   a28a6:	3303      	adds	r3, #3
   a28a8:	4619      	mov	r1, r3
   a28aa:	2016      	movs	r0, #22
   a28ac:	4b08      	ldr	r3, [pc, #32]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a28ae:	4798      	blx	r3
   a28b0:	4603      	mov	r3, r0
   a28b2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   a28b4:	f107 0314 	add.w	r3, r7, #20
   a28b8:	3305      	adds	r3, #5
   a28ba:	4619      	mov	r1, r3
   a28bc:	2017      	movs	r0, #23
   a28be:	4b04      	ldr	r3, [pc, #16]	; (a28d0 <Cl_Dprep_setdata+0x3a4>)
   a28c0:	4798      	blx	r3
   a28c2:	4603      	mov	r3, r0
   a28c4:	77fb      	strb	r3, [r7, #31]
					break;
   a28c6:	e1ca      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
   a28c8:	20072350 	.word	0x20072350
   a28cc:	0009b739 	.word	0x0009b739
   a28d0:	0009b701 	.word	0x0009b701
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   a28d4:	1d3b      	adds	r3, r7, #4
   a28d6:	2202      	movs	r2, #2
   a28d8:	4619      	mov	r1, r3
   a28da:	2007      	movs	r0, #7
   a28dc:	4bc1      	ldr	r3, [pc, #772]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a28de:	4798      	blx	r3
   a28e0:	4603      	mov	r3, r0
   a28e2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a28e4:	1d3b      	adds	r3, r7, #4
   a28e6:	3302      	adds	r3, #2
   a28e8:	2202      	movs	r2, #2
   a28ea:	4619      	mov	r1, r3
   a28ec:	2018      	movs	r0, #24
   a28ee:	4bbd      	ldr	r3, [pc, #756]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a28f0:	4798      	blx	r3
   a28f2:	4603      	mov	r3, r0
   a28f4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a28f6:	1d3b      	adds	r3, r7, #4
   a28f8:	3304      	adds	r3, #4
   a28fa:	2202      	movs	r2, #2
   a28fc:	4619      	mov	r1, r3
   a28fe:	2019      	movs	r0, #25
   a2900:	4bb8      	ldr	r3, [pc, #736]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2902:	4798      	blx	r3
   a2904:	4603      	mov	r3, r0
   a2906:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   a2908:	2316      	movs	r3, #22
   a290a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a290c:	f107 0314 	add.w	r3, r7, #20
   a2910:	3301      	adds	r3, #1
   a2912:	4619      	mov	r1, r3
   a2914:	2007      	movs	r0, #7
   a2916:	4bb4      	ldr	r3, [pc, #720]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2918:	4798      	blx	r3
   a291a:	4603      	mov	r3, r0
   a291c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a291e:	f107 0314 	add.w	r3, r7, #20
   a2922:	3303      	adds	r3, #3
   a2924:	4619      	mov	r1, r3
   a2926:	2018      	movs	r0, #24
   a2928:	4baf      	ldr	r3, [pc, #700]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a292a:	4798      	blx	r3
   a292c:	4603      	mov	r3, r0
   a292e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2930:	f107 0314 	add.w	r3, r7, #20
   a2934:	3305      	adds	r3, #5
   a2936:	4619      	mov	r1, r3
   a2938:	2019      	movs	r0, #25
   a293a:	4bab      	ldr	r3, [pc, #684]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a293c:	4798      	blx	r3
   a293e:	4603      	mov	r3, r0
   a2940:	77fb      	strb	r3, [r7, #31]
					break;
   a2942:	e18c      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   a2944:	1d3b      	adds	r3, r7, #4
   a2946:	2202      	movs	r2, #2
   a2948:	4619      	mov	r1, r3
   a294a:	2008      	movs	r0, #8
   a294c:	4ba5      	ldr	r3, [pc, #660]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a294e:	4798      	blx	r3
   a2950:	4603      	mov	r3, r0
   a2952:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2954:	1d3b      	adds	r3, r7, #4
   a2956:	3302      	adds	r3, #2
   a2958:	2202      	movs	r2, #2
   a295a:	4619      	mov	r1, r3
   a295c:	201a      	movs	r0, #26
   a295e:	4ba1      	ldr	r3, [pc, #644]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2960:	4798      	blx	r3
   a2962:	4603      	mov	r3, r0
   a2964:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2966:	1d3b      	adds	r3, r7, #4
   a2968:	3304      	adds	r3, #4
   a296a:	2202      	movs	r2, #2
   a296c:	4619      	mov	r1, r3
   a296e:	201b      	movs	r0, #27
   a2970:	4b9c      	ldr	r3, [pc, #624]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2972:	4798      	blx	r3
   a2974:	4603      	mov	r3, r0
   a2976:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   a2978:	2317      	movs	r3, #23
   a297a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a297c:	f107 0314 	add.w	r3, r7, #20
   a2980:	3301      	adds	r3, #1
   a2982:	4619      	mov	r1, r3
   a2984:	2008      	movs	r0, #8
   a2986:	4b98      	ldr	r3, [pc, #608]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2988:	4798      	blx	r3
   a298a:	4603      	mov	r3, r0
   a298c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a298e:	f107 0314 	add.w	r3, r7, #20
   a2992:	3303      	adds	r3, #3
   a2994:	4619      	mov	r1, r3
   a2996:	201a      	movs	r0, #26
   a2998:	4b93      	ldr	r3, [pc, #588]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a299a:	4798      	blx	r3
   a299c:	4603      	mov	r3, r0
   a299e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a29a0:	f107 0314 	add.w	r3, r7, #20
   a29a4:	3305      	adds	r3, #5
   a29a6:	4619      	mov	r1, r3
   a29a8:	201b      	movs	r0, #27
   a29aa:	4b8f      	ldr	r3, [pc, #572]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a29ac:	4798      	blx	r3
   a29ae:	4603      	mov	r3, r0
   a29b0:	77fb      	strb	r3, [r7, #31]
					break;
   a29b2:	e154      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   a29b4:	1d3b      	adds	r3, r7, #4
   a29b6:	2202      	movs	r2, #2
   a29b8:	4619      	mov	r1, r3
   a29ba:	2009      	movs	r0, #9
   a29bc:	4b89      	ldr	r3, [pc, #548]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a29be:	4798      	blx	r3
   a29c0:	4603      	mov	r3, r0
   a29c2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   a29c4:	1d3b      	adds	r3, r7, #4
   a29c6:	2202      	movs	r2, #2
   a29c8:	4619      	mov	r1, r3
   a29ca:	201c      	movs	r0, #28
   a29cc:	4b85      	ldr	r3, [pc, #532]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a29ce:	4798      	blx	r3
   a29d0:	4603      	mov	r3, r0
   a29d2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a29d4:	1d3b      	adds	r3, r7, #4
   a29d6:	3304      	adds	r3, #4
   a29d8:	2202      	movs	r2, #2
   a29da:	4619      	mov	r1, r3
   a29dc:	201d      	movs	r0, #29
   a29de:	4b81      	ldr	r3, [pc, #516]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a29e0:	4798      	blx	r3
   a29e2:	4603      	mov	r3, r0
   a29e4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   a29e6:	2318      	movs	r3, #24
   a29e8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   a29ea:	f107 0314 	add.w	r3, r7, #20
   a29ee:	3301      	adds	r3, #1
   a29f0:	4619      	mov	r1, r3
   a29f2:	2009      	movs	r0, #9
   a29f4:	4b7c      	ldr	r3, [pc, #496]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a29f6:	4798      	blx	r3
   a29f8:	4603      	mov	r3, r0
   a29fa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   a29fc:	f107 0314 	add.w	r3, r7, #20
   a2a00:	3303      	adds	r3, #3
   a2a02:	4619      	mov	r1, r3
   a2a04:	201c      	movs	r0, #28
   a2a06:	4b78      	ldr	r3, [pc, #480]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2a08:	4798      	blx	r3
   a2a0a:	4603      	mov	r3, r0
   a2a0c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2a0e:	f107 0314 	add.w	r3, r7, #20
   a2a12:	3305      	adds	r3, #5
   a2a14:	4619      	mov	r1, r3
   a2a16:	201d      	movs	r0, #29
   a2a18:	4b73      	ldr	r3, [pc, #460]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2a1a:	4798      	blx	r3
   a2a1c:	4603      	mov	r3, r0
   a2a1e:	77fb      	strb	r3, [r7, #31]
					break;
   a2a20:	e11d      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   a2a22:	1d3b      	adds	r3, r7, #4
   a2a24:	2202      	movs	r2, #2
   a2a26:	4619      	mov	r1, r3
   a2a28:	200a      	movs	r0, #10
   a2a2a:	4b6e      	ldr	r3, [pc, #440]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2a2c:	4798      	blx	r3
   a2a2e:	4603      	mov	r3, r0
   a2a30:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2a32:	1d3b      	adds	r3, r7, #4
   a2a34:	3302      	adds	r3, #2
   a2a36:	2202      	movs	r2, #2
   a2a38:	4619      	mov	r1, r3
   a2a3a:	201e      	movs	r0, #30
   a2a3c:	4b69      	ldr	r3, [pc, #420]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2a3e:	4798      	blx	r3
   a2a40:	4603      	mov	r3, r0
   a2a42:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2a44:	1d3b      	adds	r3, r7, #4
   a2a46:	3304      	adds	r3, #4
   a2a48:	2202      	movs	r2, #2
   a2a4a:	4619      	mov	r1, r3
   a2a4c:	201f      	movs	r0, #31
   a2a4e:	4b65      	ldr	r3, [pc, #404]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2a50:	4798      	blx	r3
   a2a52:	4603      	mov	r3, r0
   a2a54:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   a2a56:	2319      	movs	r3, #25
   a2a58:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a2a5a:	f107 0314 	add.w	r3, r7, #20
   a2a5e:	3301      	adds	r3, #1
   a2a60:	4619      	mov	r1, r3
   a2a62:	200a      	movs	r0, #10
   a2a64:	4b60      	ldr	r3, [pc, #384]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2a66:	4798      	blx	r3
   a2a68:	4603      	mov	r3, r0
   a2a6a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   a2a6c:	f107 0314 	add.w	r3, r7, #20
   a2a70:	3303      	adds	r3, #3
   a2a72:	4619      	mov	r1, r3
   a2a74:	201e      	movs	r0, #30
   a2a76:	4b5c      	ldr	r3, [pc, #368]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2a78:	4798      	blx	r3
   a2a7a:	4603      	mov	r3, r0
   a2a7c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   a2a7e:	f107 0314 	add.w	r3, r7, #20
   a2a82:	3305      	adds	r3, #5
   a2a84:	4619      	mov	r1, r3
   a2a86:	201f      	movs	r0, #31
   a2a88:	4b57      	ldr	r3, [pc, #348]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2a8a:	4798      	blx	r3
   a2a8c:	4603      	mov	r3, r0
   a2a8e:	77fb      	strb	r3, [r7, #31]
					break;
   a2a90:	e0e5      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   a2a92:	1d3b      	adds	r3, r7, #4
   a2a94:	2202      	movs	r2, #2
   a2a96:	4619      	mov	r1, r3
   a2a98:	200b      	movs	r0, #11
   a2a9a:	4b52      	ldr	r3, [pc, #328]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2a9c:	4798      	blx	r3
   a2a9e:	4603      	mov	r3, r0
   a2aa0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2aa2:	1d3b      	adds	r3, r7, #4
   a2aa4:	3302      	adds	r3, #2
   a2aa6:	2202      	movs	r2, #2
   a2aa8:	4619      	mov	r1, r3
   a2aaa:	2020      	movs	r0, #32
   a2aac:	4b4d      	ldr	r3, [pc, #308]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2aae:	4798      	blx	r3
   a2ab0:	4603      	mov	r3, r0
   a2ab2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2ab4:	1d3b      	adds	r3, r7, #4
   a2ab6:	3304      	adds	r3, #4
   a2ab8:	2202      	movs	r2, #2
   a2aba:	4619      	mov	r1, r3
   a2abc:	2021      	movs	r0, #33	; 0x21
   a2abe:	4b49      	ldr	r3, [pc, #292]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2ac0:	4798      	blx	r3
   a2ac2:	4603      	mov	r3, r0
   a2ac4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   a2ac6:	231a      	movs	r3, #26
   a2ac8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a2aca:	f107 0314 	add.w	r3, r7, #20
   a2ace:	3301      	adds	r3, #1
   a2ad0:	4619      	mov	r1, r3
   a2ad2:	200b      	movs	r0, #11
   a2ad4:	4b44      	ldr	r3, [pc, #272]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2ad6:	4798      	blx	r3
   a2ad8:	4603      	mov	r3, r0
   a2ada:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   a2adc:	f107 0314 	add.w	r3, r7, #20
   a2ae0:	3303      	adds	r3, #3
   a2ae2:	4619      	mov	r1, r3
   a2ae4:	2020      	movs	r0, #32
   a2ae6:	4b40      	ldr	r3, [pc, #256]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2ae8:	4798      	blx	r3
   a2aea:	4603      	mov	r3, r0
   a2aec:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   a2aee:	f107 0314 	add.w	r3, r7, #20
   a2af2:	3305      	adds	r3, #5
   a2af4:	4619      	mov	r1, r3
   a2af6:	2021      	movs	r0, #33	; 0x21
   a2af8:	4b3b      	ldr	r3, [pc, #236]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2afa:	4798      	blx	r3
   a2afc:	4603      	mov	r3, r0
   a2afe:	77fb      	strb	r3, [r7, #31]
					break;
   a2b00:	e0ad      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   a2b02:	1d3b      	adds	r3, r7, #4
   a2b04:	2202      	movs	r2, #2
   a2b06:	4619      	mov	r1, r3
   a2b08:	200c      	movs	r0, #12
   a2b0a:	4b36      	ldr	r3, [pc, #216]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2b0c:	4798      	blx	r3
   a2b0e:	4603      	mov	r3, r0
   a2b10:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2b12:	1d3b      	adds	r3, r7, #4
   a2b14:	3302      	adds	r3, #2
   a2b16:	2202      	movs	r2, #2
   a2b18:	4619      	mov	r1, r3
   a2b1a:	2022      	movs	r0, #34	; 0x22
   a2b1c:	4b31      	ldr	r3, [pc, #196]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2b1e:	4798      	blx	r3
   a2b20:	4603      	mov	r3, r0
   a2b22:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2b24:	1d3b      	adds	r3, r7, #4
   a2b26:	3304      	adds	r3, #4
   a2b28:	2202      	movs	r2, #2
   a2b2a:	4619      	mov	r1, r3
   a2b2c:	2023      	movs	r0, #35	; 0x23
   a2b2e:	4b2d      	ldr	r3, [pc, #180]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2b30:	4798      	blx	r3
   a2b32:	4603      	mov	r3, r0
   a2b34:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   a2b36:	231b      	movs	r3, #27
   a2b38:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a2b3a:	f107 0314 	add.w	r3, r7, #20
   a2b3e:	3301      	adds	r3, #1
   a2b40:	4619      	mov	r1, r3
   a2b42:	200c      	movs	r0, #12
   a2b44:	4b28      	ldr	r3, [pc, #160]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2b46:	4798      	blx	r3
   a2b48:	4603      	mov	r3, r0
   a2b4a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   a2b4c:	f107 0314 	add.w	r3, r7, #20
   a2b50:	3303      	adds	r3, #3
   a2b52:	4619      	mov	r1, r3
   a2b54:	2022      	movs	r0, #34	; 0x22
   a2b56:	4b24      	ldr	r3, [pc, #144]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2b58:	4798      	blx	r3
   a2b5a:	4603      	mov	r3, r0
   a2b5c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   a2b5e:	f107 0314 	add.w	r3, r7, #20
   a2b62:	3305      	adds	r3, #5
   a2b64:	4619      	mov	r1, r3
   a2b66:	2023      	movs	r0, #35	; 0x23
   a2b68:	4b1f      	ldr	r3, [pc, #124]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2b6a:	4798      	blx	r3
   a2b6c:	4603      	mov	r3, r0
   a2b6e:	77fb      	strb	r3, [r7, #31]
					break;
   a2b70:	e075      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   a2b72:	1d3b      	adds	r3, r7, #4
   a2b74:	2202      	movs	r2, #2
   a2b76:	4619      	mov	r1, r3
   a2b78:	200f      	movs	r0, #15
   a2b7a:	4b1a      	ldr	r3, [pc, #104]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2b7c:	4798      	blx	r3
   a2b7e:	4603      	mov	r3, r0
   a2b80:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2b82:	1d3b      	adds	r3, r7, #4
   a2b84:	3302      	adds	r3, #2
   a2b86:	2202      	movs	r2, #2
   a2b88:	4619      	mov	r1, r3
   a2b8a:	2024      	movs	r0, #36	; 0x24
   a2b8c:	4b15      	ldr	r3, [pc, #84]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2b8e:	4798      	blx	r3
   a2b90:	4603      	mov	r3, r0
   a2b92:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2b94:	1d3b      	adds	r3, r7, #4
   a2b96:	3304      	adds	r3, #4
   a2b98:	2202      	movs	r2, #2
   a2b9a:	4619      	mov	r1, r3
   a2b9c:	2025      	movs	r0, #37	; 0x25
   a2b9e:	4b11      	ldr	r3, [pc, #68]	; (a2be4 <Cl_Dprep_setdata+0x6b8>)
   a2ba0:	4798      	blx	r3
   a2ba2:	4603      	mov	r3, r0
   a2ba4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   a2ba6:	231c      	movs	r3, #28
   a2ba8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a2baa:	f107 0314 	add.w	r3, r7, #20
   a2bae:	3301      	adds	r3, #1
   a2bb0:	4619      	mov	r1, r3
   a2bb2:	200f      	movs	r0, #15
   a2bb4:	4b0c      	ldr	r3, [pc, #48]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2bb6:	4798      	blx	r3
   a2bb8:	4603      	mov	r3, r0
   a2bba:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   a2bbc:	f107 0314 	add.w	r3, r7, #20
   a2bc0:	3303      	adds	r3, #3
   a2bc2:	4619      	mov	r1, r3
   a2bc4:	2024      	movs	r0, #36	; 0x24
   a2bc6:	4b08      	ldr	r3, [pc, #32]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2bc8:	4798      	blx	r3
   a2bca:	4603      	mov	r3, r0
   a2bcc:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   a2bce:	f107 0314 	add.w	r3, r7, #20
   a2bd2:	3305      	adds	r3, #5
   a2bd4:	4619      	mov	r1, r3
   a2bd6:	2025      	movs	r0, #37	; 0x25
   a2bd8:	4b03      	ldr	r3, [pc, #12]	; (a2be8 <Cl_Dprep_setdata+0x6bc>)
   a2bda:	4798      	blx	r3
   a2bdc:	4603      	mov	r3, r0
   a2bde:	77fb      	strb	r3, [r7, #31]
					break;
   a2be0:	e03d      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
   a2be2:	bf00      	nop
   a2be4:	0009b739 	.word	0x0009b739
   a2be8:	0009b701 	.word	0x0009b701
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   a2bec:	1d3b      	adds	r3, r7, #4
   a2bee:	2202      	movs	r2, #2
   a2bf0:	4619      	mov	r1, r3
   a2bf2:	200d      	movs	r0, #13
   a2bf4:	4b22      	ldr	r3, [pc, #136]	; (a2c80 <Cl_Dprep_setdata+0x754>)
   a2bf6:	4798      	blx	r3
   a2bf8:	4603      	mov	r3, r0
   a2bfa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a2bfc:	1d3b      	adds	r3, r7, #4
   a2bfe:	3302      	adds	r3, #2
   a2c00:	2202      	movs	r2, #2
   a2c02:	4619      	mov	r1, r3
   a2c04:	2026      	movs	r0, #38	; 0x26
   a2c06:	4b1e      	ldr	r3, [pc, #120]	; (a2c80 <Cl_Dprep_setdata+0x754>)
   a2c08:	4798      	blx	r3
   a2c0a:	4603      	mov	r3, r0
   a2c0c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a2c0e:	1d3b      	adds	r3, r7, #4
   a2c10:	3304      	adds	r3, #4
   a2c12:	2202      	movs	r2, #2
   a2c14:	4619      	mov	r1, r3
   a2c16:	2027      	movs	r0, #39	; 0x27
   a2c18:	4b19      	ldr	r3, [pc, #100]	; (a2c80 <Cl_Dprep_setdata+0x754>)
   a2c1a:	4798      	blx	r3
   a2c1c:	4603      	mov	r3, r0
   a2c1e:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   a2c20:	231d      	movs	r3, #29
   a2c22:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   a2c24:	f107 0314 	add.w	r3, r7, #20
   a2c28:	3301      	adds	r3, #1
   a2c2a:	4619      	mov	r1, r3
   a2c2c:	200d      	movs	r0, #13
   a2c2e:	4b15      	ldr	r3, [pc, #84]	; (a2c84 <Cl_Dprep_setdata+0x758>)
   a2c30:	4798      	blx	r3
   a2c32:	4603      	mov	r3, r0
   a2c34:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   a2c36:	f107 0314 	add.w	r3, r7, #20
   a2c3a:	3303      	adds	r3, #3
   a2c3c:	4619      	mov	r1, r3
   a2c3e:	2026      	movs	r0, #38	; 0x26
   a2c40:	4b10      	ldr	r3, [pc, #64]	; (a2c84 <Cl_Dprep_setdata+0x758>)
   a2c42:	4798      	blx	r3
   a2c44:	4603      	mov	r3, r0
   a2c46:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   a2c48:	f107 0314 	add.w	r3, r7, #20
   a2c4c:	3305      	adds	r3, #5
   a2c4e:	4619      	mov	r1, r3
   a2c50:	2027      	movs	r0, #39	; 0x27
   a2c52:	4b0c      	ldr	r3, [pc, #48]	; (a2c84 <Cl_Dprep_setdata+0x758>)
   a2c54:	4798      	blx	r3
   a2c56:	4603      	mov	r3, r0
   a2c58:	77fb      	strb	r3, [r7, #31]
					break;
   a2c5a:	e000      	b.n	a2c5e <Cl_Dprep_setdata+0x732>
					
					 default:
					 break;
   a2c5c:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   a2c5e:	2316      	movs	r3, #22
   a2c60:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   a2c62:	7bba      	ldrb	r2, [r7, #14]
   a2c64:	f107 0114 	add.w	r1, r7, #20
   a2c68:	7fbb      	ldrb	r3, [r7, #30]
   a2c6a:	4618      	mov	r0, r3
   a2c6c:	4b06      	ldr	r3, [pc, #24]	; (a2c88 <Cl_Dprep_setdata+0x75c>)
   a2c6e:	4798      	blx	r3
   a2c70:	4603      	mov	r3, r0
   a2c72:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   a2c74:	2300      	movs	r3, #0
}
   a2c76:	4618      	mov	r0, r3
   a2c78:	3724      	adds	r7, #36	; 0x24
   a2c7a:	46bd      	mov	sp, r7
   a2c7c:	bd90      	pop	{r4, r7, pc}
   a2c7e:	bf00      	nop
   a2c80:	0009b739 	.word	0x0009b739
   a2c84:	0009b701 	.word	0x0009b701
   a2c88:	0009cbd5 	.word	0x0009cbd5

000a2c8c <conf_activate_pressure_alarms>:

conf_activate_pressure_alarms(int dflow){
   a2c8c:	b590      	push	{r4, r7, lr}
   a2c8e:	b085      	sub	sp, #20
   a2c90:	af02      	add	r7, sp, #8
   a2c92:	6078      	str	r0, [r7, #4]
	
	switch(dflow){
   a2c94:	687b      	ldr	r3, [r7, #4]
   a2c96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a2c9a:	f000 80a5 	beq.w	a2de8 <conf_activate_pressure_alarms+0x15c>
   a2c9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a2ca2:	dc04      	bgt.n	a2cae <conf_activate_pressure_alarms+0x22>
   a2ca4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a2ca8:	f000 80e9 	beq.w	a2e7e <conf_activate_pressure_alarms+0x1f2>
   a2cac:	e132      	b.n	a2f14 <conf_activate_pressure_alarms+0x288>
   a2cae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a2cb2:	d04e      	beq.n	a2d52 <conf_activate_pressure_alarms+0xc6>
   a2cb4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a2cb8:	f040 812c 	bne.w	a2f14 <conf_activate_pressure_alarms+0x288>
		
		case 800 :
				Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2cbc:	2300      	movs	r3, #0
   a2cbe:	9300      	str	r3, [sp, #0]
   a2cc0:	f04f 0300 	mov.w	r3, #0
   a2cc4:	4a96      	ldr	r2, [pc, #600]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2cc6:	2102      	movs	r1, #2
   a2cc8:	2015      	movs	r0, #21
   a2cca:	4c96      	ldr	r4, [pc, #600]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2ccc:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2cce:	2300      	movs	r3, #0
   a2cd0:	9300      	str	r3, [sp, #0]
   a2cd2:	f04f 0300 	mov.w	r3, #0
   a2cd6:	4a92      	ldr	r2, [pc, #584]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2cd8:	2102      	movs	r1, #2
   a2cda:	2017      	movs	r0, #23
   a2cdc:	4c91      	ldr	r4, [pc, #580]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2cde:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a2ce0:	2300      	movs	r3, #0
   a2ce2:	9300      	str	r3, [sp, #0]
   a2ce4:	f04f 0300 	mov.w	r3, #0
   a2ce8:	4a8f      	ldr	r2, [pc, #572]	; (a2f28 <conf_activate_pressure_alarms+0x29c>)
   a2cea:	2102      	movs	r1, #2
   a2cec:	2027      	movs	r0, #39	; 0x27
   a2cee:	4c8d      	ldr	r4, [pc, #564]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2cf0:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,500,0);
   a2cf2:	2300      	movs	r3, #0
   a2cf4:	9300      	str	r3, [sp, #0]
   a2cf6:	4b8d      	ldr	r3, [pc, #564]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2cf8:	f04f 0200 	mov.w	r2, #0
   a2cfc:	2103      	movs	r1, #3
   a2cfe:	2016      	movs	r0, #22
   a2d00:	4c88      	ldr	r4, [pc, #544]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d02:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a2d04:	2300      	movs	r3, #0
   a2d06:	9300      	str	r3, [sp, #0]
   a2d08:	4b88      	ldr	r3, [pc, #544]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2d0a:	f04f 0200 	mov.w	r2, #0
   a2d0e:	2103      	movs	r1, #3
   a2d10:	2018      	movs	r0, #24
   a2d12:	4c84      	ldr	r4, [pc, #528]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d14:	47a0      	blx	r4
				Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a2d16:	2300      	movs	r3, #0
   a2d18:	9300      	str	r3, [sp, #0]
   a2d1a:	4b84      	ldr	r3, [pc, #528]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2d1c:	f04f 0200 	mov.w	r2, #0
   a2d20:	2103      	movs	r1, #3
   a2d22:	2028      	movs	r0, #40	; 0x28
   a2d24:	4c7f      	ldr	r4, [pc, #508]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d26:	47a0      	blx	r4
				
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a2d28:	2101      	movs	r1, #1
   a2d2a:	2015      	movs	r0, #21
   a2d2c:	4b80      	ldr	r3, [pc, #512]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2d2e:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a2d30:	2101      	movs	r1, #1
   a2d32:	2016      	movs	r0, #22
   a2d34:	4b7e      	ldr	r3, [pc, #504]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2d36:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a2d38:	2101      	movs	r1, #1
   a2d3a:	2017      	movs	r0, #23
   a2d3c:	4b7c      	ldr	r3, [pc, #496]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2d3e:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a2d40:	2101      	movs	r1, #1
   a2d42:	2018      	movs	r0, #24
   a2d44:	4b7a      	ldr	r3, [pc, #488]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2d46:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );	
   a2d48:	2101      	movs	r1, #1
   a2d4a:	2027      	movs	r0, #39	; 0x27
   a2d4c:	4b78      	ldr	r3, [pc, #480]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2d4e:	4798      	blx	r3
					
					break;
   a2d50:	e0e0      	b.n	a2f14 <conf_activate_pressure_alarms+0x288>
		case 700 :
		Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2d52:	2300      	movs	r3, #0
   a2d54:	9300      	str	r3, [sp, #0]
   a2d56:	f04f 0300 	mov.w	r3, #0
   a2d5a:	4a71      	ldr	r2, [pc, #452]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2d5c:	2102      	movs	r1, #2
   a2d5e:	2015      	movs	r0, #21
   a2d60:	4c70      	ldr	r4, [pc, #448]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d62:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2d64:	2300      	movs	r3, #0
   a2d66:	9300      	str	r3, [sp, #0]
   a2d68:	f04f 0300 	mov.w	r3, #0
   a2d6c:	4a6c      	ldr	r2, [pc, #432]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2d6e:	2102      	movs	r1, #2
   a2d70:	2017      	movs	r0, #23
   a2d72:	4c6c      	ldr	r4, [pc, #432]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d74:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a2d76:	2300      	movs	r3, #0
   a2d78:	9300      	str	r3, [sp, #0]
   a2d7a:	f04f 0300 	mov.w	r3, #0
   a2d7e:	4a6a      	ldr	r2, [pc, #424]	; (a2f28 <conf_activate_pressure_alarms+0x29c>)
   a2d80:	2102      	movs	r1, #2
   a2d82:	2027      	movs	r0, #39	; 0x27
   a2d84:	4c67      	ldr	r4, [pc, #412]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d86:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,500,0);
   a2d88:	2300      	movs	r3, #0
   a2d8a:	9300      	str	r3, [sp, #0]
   a2d8c:	4b67      	ldr	r3, [pc, #412]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2d8e:	f04f 0200 	mov.w	r2, #0
   a2d92:	2103      	movs	r1, #3
   a2d94:	2016      	movs	r0, #22
   a2d96:	4c63      	ldr	r4, [pc, #396]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2d98:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a2d9a:	2300      	movs	r3, #0
   a2d9c:	9300      	str	r3, [sp, #0]
   a2d9e:	4b63      	ldr	r3, [pc, #396]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2da0:	f04f 0200 	mov.w	r2, #0
   a2da4:	2103      	movs	r1, #3
   a2da6:	2018      	movs	r0, #24
   a2da8:	4c5e      	ldr	r4, [pc, #376]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2daa:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a2dac:	2300      	movs	r3, #0
   a2dae:	9300      	str	r3, [sp, #0]
   a2db0:	4b5e      	ldr	r3, [pc, #376]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2db2:	f04f 0200 	mov.w	r2, #0
   a2db6:	2103      	movs	r1, #3
   a2db8:	2028      	movs	r0, #40	; 0x28
   a2dba:	4c5a      	ldr	r4, [pc, #360]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2dbc:	47a0      	blx	r4
		
		
		Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a2dbe:	2101      	movs	r1, #1
   a2dc0:	2015      	movs	r0, #21
   a2dc2:	4b5b      	ldr	r3, [pc, #364]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2dc4:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a2dc6:	2101      	movs	r1, #1
   a2dc8:	2016      	movs	r0, #22
   a2dca:	4b59      	ldr	r3, [pc, #356]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2dcc:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a2dce:	2101      	movs	r1, #1
   a2dd0:	2017      	movs	r0, #23
   a2dd2:	4b57      	ldr	r3, [pc, #348]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2dd4:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a2dd6:	2101      	movs	r1, #1
   a2dd8:	2018      	movs	r0, #24
   a2dda:	4b55      	ldr	r3, [pc, #340]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2ddc:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a2dde:	2101      	movs	r1, #1
   a2de0:	2027      	movs	r0, #39	; 0x27
   a2de2:	4b53      	ldr	r3, [pc, #332]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2de4:	4798      	blx	r3
		
		break;
   a2de6:	e095      	b.n	a2f14 <conf_activate_pressure_alarms+0x288>
		
		case 500 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2de8:	2300      	movs	r3, #0
   a2dea:	9300      	str	r3, [sp, #0]
   a2dec:	f04f 0300 	mov.w	r3, #0
   a2df0:	4a4b      	ldr	r2, [pc, #300]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2df2:	2102      	movs	r1, #2
   a2df4:	2015      	movs	r0, #21
   a2df6:	4c4b      	ldr	r4, [pc, #300]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2df8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2dfa:	2300      	movs	r3, #0
   a2dfc:	9300      	str	r3, [sp, #0]
   a2dfe:	f04f 0300 	mov.w	r3, #0
   a2e02:	4a47      	ldr	r2, [pc, #284]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2e04:	2102      	movs	r1, #2
   a2e06:	2017      	movs	r0, #23
   a2e08:	4c46      	ldr	r4, [pc, #280]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2e0a:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a2e0c:	2300      	movs	r3, #0
   a2e0e:	9300      	str	r3, [sp, #0]
   a2e10:	f04f 0300 	mov.w	r3, #0
   a2e14:	4a44      	ldr	r2, [pc, #272]	; (a2f28 <conf_activate_pressure_alarms+0x29c>)
   a2e16:	2102      	movs	r1, #2
   a2e18:	2027      	movs	r0, #39	; 0x27
   a2e1a:	4c42      	ldr	r4, [pc, #264]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2e1c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,500,0);
   a2e1e:	2300      	movs	r3, #0
   a2e20:	9300      	str	r3, [sp, #0]
   a2e22:	4b42      	ldr	r3, [pc, #264]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2e24:	f04f 0200 	mov.w	r2, #0
   a2e28:	2103      	movs	r1, #3
   a2e2a:	2016      	movs	r0, #22
   a2e2c:	4c3d      	ldr	r4, [pc, #244]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2e2e:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a2e30:	2300      	movs	r3, #0
   a2e32:	9300      	str	r3, [sp, #0]
   a2e34:	4b3d      	ldr	r3, [pc, #244]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2e36:	f04f 0200 	mov.w	r2, #0
   a2e3a:	2103      	movs	r1, #3
   a2e3c:	2018      	movs	r0, #24
   a2e3e:	4c39      	ldr	r4, [pc, #228]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2e40:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a2e42:	2300      	movs	r3, #0
   a2e44:	9300      	str	r3, [sp, #0]
   a2e46:	4b39      	ldr	r3, [pc, #228]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2e48:	f04f 0200 	mov.w	r2, #0
   a2e4c:	2103      	movs	r1, #3
   a2e4e:	2028      	movs	r0, #40	; 0x28
   a2e50:	4c34      	ldr	r4, [pc, #208]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2e52:	47a0      	blx	r4
					
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a2e54:	2100      	movs	r1, #0
   a2e56:	2015      	movs	r0, #21
   a2e58:	4b35      	ldr	r3, [pc, #212]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2e5a:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a2e5c:	2100      	movs	r1, #0
   a2e5e:	2016      	movs	r0, #22
   a2e60:	4b33      	ldr	r3, [pc, #204]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2e62:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a2e64:	2100      	movs	r1, #0
   a2e66:	2017      	movs	r0, #23
   a2e68:	4b31      	ldr	r3, [pc, #196]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2e6a:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a2e6c:	2100      	movs	r1, #0
   a2e6e:	2018      	movs	r0, #24
   a2e70:	4b2f      	ldr	r3, [pc, #188]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2e72:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a2e74:	2100      	movs	r1, #0
   a2e76:	2027      	movs	r0, #39	; 0x27
   a2e78:	4b2d      	ldr	r3, [pc, #180]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2e7a:	4798      	blx	r3
					break;
   a2e7c:	e04a      	b.n	a2f14 <conf_activate_pressure_alarms+0x288>
		case 300 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2e7e:	2300      	movs	r3, #0
   a2e80:	9300      	str	r3, [sp, #0]
   a2e82:	f04f 0300 	mov.w	r3, #0
   a2e86:	4a26      	ldr	r2, [pc, #152]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2e88:	2102      	movs	r1, #2
   a2e8a:	2015      	movs	r0, #21
   a2e8c:	4c25      	ldr	r4, [pc, #148]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2e8e:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,1600,0,0);
   a2e90:	2300      	movs	r3, #0
   a2e92:	9300      	str	r3, [sp, #0]
   a2e94:	f04f 0300 	mov.w	r3, #0
   a2e98:	4a21      	ldr	r2, [pc, #132]	; (a2f20 <conf_activate_pressure_alarms+0x294>)
   a2e9a:	2102      	movs	r1, #2
   a2e9c:	2017      	movs	r0, #23
   a2e9e:	4c21      	ldr	r4, [pc, #132]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2ea0:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,3000,0,0);
   a2ea2:	2300      	movs	r3, #0
   a2ea4:	9300      	str	r3, [sp, #0]
   a2ea6:	f04f 0300 	mov.w	r3, #0
   a2eaa:	4a1f      	ldr	r2, [pc, #124]	; (a2f28 <conf_activate_pressure_alarms+0x29c>)
   a2eac:	2102      	movs	r1, #2
   a2eae:	2027      	movs	r0, #39	; 0x27
   a2eb0:	4c1c      	ldr	r4, [pc, #112]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2eb2:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,500,0);
   a2eb4:	2300      	movs	r3, #0
   a2eb6:	9300      	str	r3, [sp, #0]
   a2eb8:	4b1c      	ldr	r3, [pc, #112]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2eba:	f04f 0200 	mov.w	r2, #0
   a2ebe:	2103      	movs	r1, #3
   a2ec0:	2016      	movs	r0, #22
   a2ec2:	4c18      	ldr	r4, [pc, #96]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2ec4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,500,0);
   a2ec6:	2300      	movs	r3, #0
   a2ec8:	9300      	str	r3, [sp, #0]
   a2eca:	4b18      	ldr	r3, [pc, #96]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2ecc:	f04f 0200 	mov.w	r2, #0
   a2ed0:	2103      	movs	r1, #3
   a2ed2:	2018      	movs	r0, #24
   a2ed4:	4c13      	ldr	r4, [pc, #76]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2ed6:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,500,0);
   a2ed8:	2300      	movs	r3, #0
   a2eda:	9300      	str	r3, [sp, #0]
   a2edc:	4b13      	ldr	r3, [pc, #76]	; (a2f2c <conf_activate_pressure_alarms+0x2a0>)
   a2ede:	f04f 0200 	mov.w	r2, #0
   a2ee2:	2103      	movs	r1, #3
   a2ee4:	2028      	movs	r0, #40	; 0x28
   a2ee6:	4c0f      	ldr	r4, [pc, #60]	; (a2f24 <conf_activate_pressure_alarms+0x298>)
   a2ee8:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a2eea:	2101      	movs	r1, #1
   a2eec:	2015      	movs	r0, #21
   a2eee:	4b10      	ldr	r3, [pc, #64]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2ef0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a2ef2:	2101      	movs	r1, #1
   a2ef4:	2016      	movs	r0, #22
   a2ef6:	4b0e      	ldr	r3, [pc, #56]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2ef8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a2efa:	2101      	movs	r1, #1
   a2efc:	2017      	movs	r0, #23
   a2efe:	4b0c      	ldr	r3, [pc, #48]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2f00:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a2f02:	2101      	movs	r1, #1
   a2f04:	2018      	movs	r0, #24
   a2f06:	4b0a      	ldr	r3, [pc, #40]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2f08:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a2f0a:	2101      	movs	r1, #1
   a2f0c:	2027      	movs	r0, #39	; 0x27
   a2f0e:	4b08      	ldr	r3, [pc, #32]	; (a2f30 <conf_activate_pressure_alarms+0x2a4>)
   a2f10:	4798      	blx	r3
					break;
   a2f12:	bf00      	nop
		
		
		
	}
	
}
   a2f14:	bf00      	nop
   a2f16:	4618      	mov	r0, r3
   a2f18:	370c      	adds	r7, #12
   a2f1a:	46bd      	mov	sp, r7
   a2f1c:	bd90      	pop	{r4, r7, pc}
   a2f1e:	bf00      	nop
   a2f20:	44c80000 	.word	0x44c80000
   a2f24:	00082989 	.word	0x00082989
   a2f28:	453b8000 	.word	0x453b8000
   a2f2c:	43fa0000 	.word	0x43fa0000
   a2f30:	000829e5 	.word	0x000829e5

000a2f34 <Cl_Dprep_StartPreparation>:



Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   a2f34:	b590      	push	{r4, r7, lr}
   a2f36:	b089      	sub	sp, #36	; 0x24
   a2f38:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a2f3a:	2300      	movs	r3, #0
   a2f3c:	75bb      	strb	r3, [r7, #22]
			Cl_Uint8Type data =0;
   a2f3e:	2300      	movs	r3, #0
   a2f40:	737b      	strb	r3, [r7, #13]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   a2f42:	2300      	movs	r3, #0
   a2f44:	817b      	strh	r3, [r7, #10]
   a2f46:	2300      	movs	r3, #0
   a2f48:	813b      	strh	r3, [r7, #8]
   a2f4a:	2300      	movs	r3, #0
   a2f4c:	80fb      	strh	r3, [r7, #6]
   a2f4e:	2300      	movs	r3, #0
   a2f50:	80bb      	strh	r3, [r7, #4]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   a2f52:	2301      	movs	r3, #1
   a2f54:	75fb      	strb	r3, [r7, #23]
					
				//Check for  dprep readiness and alarm status
				
				//Cl_checkdprepReadyness();
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_dprep_acidstatus);
   a2f56:	f107 030a 	add.w	r3, r7, #10
   a2f5a:	4619      	mov	r1, r3
   a2f5c:	2020      	movs	r0, #32
   a2f5e:	4b1d      	ldr	r3, [pc, #116]	; (a2fd4 <Cl_Dprep_StartPreparation+0xa0>)
   a2f60:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_dprep_bicarbstatus);
   a2f62:	f107 0308 	add.w	r3, r7, #8
   a2f66:	4619      	mov	r1, r3
   a2f68:	2021      	movs	r0, #33	; 0x21
   a2f6a:	4b1a      	ldr	r3, [pc, #104]	; (a2fd4 <Cl_Dprep_StartPreparation+0xa0>)
   a2f6c:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_dprep_holder1status);
   a2f6e:	1dbb      	adds	r3, r7, #6
   a2f70:	4619      	mov	r1, r3
   a2f72:	2003      	movs	r0, #3
   a2f74:	4b17      	ldr	r3, [pc, #92]	; (a2fd4 <Cl_Dprep_StartPreparation+0xa0>)
   a2f76:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_dprep_holder2status);
   a2f78:	1d3b      	adds	r3, r7, #4
   a2f7a:	4619      	mov	r1, r3
   a2f7c:	2004      	movs	r0, #4
   a2f7e:	4b15      	ldr	r3, [pc, #84]	; (a2fd4 <Cl_Dprep_StartPreparation+0xa0>)
   a2f80:	4798      	blx	r3
 				 if(cl_dprep_acidstatus == ACID_INLET_CLOSED )   // manav03 commented to test
   a2f82:	897b      	ldrh	r3, [r7, #10]
   a2f84:	2b01      	cmp	r3, #1
   a2f86:	d104      	bne.n	a2f92 <Cl_Dprep_StartPreparation+0x5e>
 				 {
 					 Cl_dprepSendAlarm(ACID_IN_CLOSED);
   a2f88:	202a      	movs	r0, #42	; 0x2a
   a2f8a:	4b13      	ldr	r3, [pc, #76]	; (a2fd8 <Cl_Dprep_StartPreparation+0xa4>)
   a2f8c:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a2f8e:	2300      	movs	r3, #0
   a2f90:	75fb      	strb	r3, [r7, #23]
 				 } 
 				 if(cl_dprep_bicarbstatus == BICARB_INLET_CLOSED )
   a2f92:	893b      	ldrh	r3, [r7, #8]
   a2f94:	2b01      	cmp	r3, #1
   a2f96:	d104      	bne.n	a2fa2 <Cl_Dprep_StartPreparation+0x6e>
 				 {
 					  Cl_dprepSendAlarm(BICARB_IN_CLOSED);
   a2f98:	202c      	movs	r0, #44	; 0x2c
   a2f9a:	4b0f      	ldr	r3, [pc, #60]	; (a2fd8 <Cl_Dprep_StartPreparation+0xa4>)
   a2f9c:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a2f9e:	2300      	movs	r3, #0
   a2fa0:	75fb      	strb	r3, [r7, #23]
 				 }	
			//	 #if 0
				 if(cl_dprep_holder1status == CL_HOLDER1OPEN )
   a2fa2:	88fb      	ldrh	r3, [r7, #6]
   a2fa4:	2b01      	cmp	r3, #1
   a2fa6:	d104      	bne.n	a2fb2 <Cl_Dprep_StartPreparation+0x7e>
				 {
					 Cl_dprepSendAlarm(HOLDER1STATUS_OPEN);
   a2fa8:	2003      	movs	r0, #3
   a2faa:	4b0b      	ldr	r3, [pc, #44]	; (a2fd8 <Cl_Dprep_StartPreparation+0xa4>)
   a2fac:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a2fae:	2300      	movs	r3, #0
   a2fb0:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_dprep_holder2status == CL_HOLDER1OPEN )
   a2fb2:	88bb      	ldrh	r3, [r7, #4]
   a2fb4:	2b01      	cmp	r3, #1
   a2fb6:	d104      	bne.n	a2fc2 <Cl_Dprep_StartPreparation+0x8e>
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
   a2fb8:	2004      	movs	r0, #4
   a2fba:	4b07      	ldr	r3, [pc, #28]	; (a2fd8 <Cl_Dprep_StartPreparation+0xa4>)
   a2fbc:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a2fbe:	2300      	movs	r3, #0
   a2fc0:	75fb      	strb	r3, [r7, #23]
				 }		
			//	 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   a2fc2:	7dfb      	ldrb	r3, [r7, #23]
   a2fc4:	f083 0301 	eor.w	r3, r3, #1
   a2fc8:	b2db      	uxtb	r3, r3
   a2fca:	2b00      	cmp	r3, #0
   a2fcc:	d006      	beq.n	a2fdc <Cl_Dprep_StartPreparation+0xa8>
				 {
					 return CL_REJECTED;
   a2fce:	2303      	movs	r3, #3
   a2fd0:	e1d9      	b.n	a3386 <Cl_Dprep_StartPreparation+0x452>
   a2fd2:	bf00      	nop
   a2fd4:	0008fa01 	.word	0x0008fa01
   a2fd8:	000a1b4d 	.word	0x000a1b4d
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   a2fdc:	4baf      	ldr	r3, [pc, #700]	; (a329c <Cl_Dprep_StartPreparation+0x368>)
   a2fde:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a2fe0:	4baf      	ldr	r3, [pc, #700]	; (a32a0 <Cl_Dprep_StartPreparation+0x36c>)
   a2fe2:	4798      	blx	r3
   a2fe4:	4603      	mov	r3, r0
   a2fe6:	75bb      	strb	r3, [r7, #22]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   a2fe8:	4bae      	ldr	r3, [pc, #696]	; (a32a4 <Cl_Dprep_StartPreparation+0x370>)
   a2fea:	4798      	blx	r3
							data = 1;
   a2fec:	2301      	movs	r3, #1
   a2fee:	737b      	strb	r3, [r7, #13]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   a2ff0:	f107 030d 	add.w	r3, r7, #13
   a2ff4:	2200      	movs	r2, #0
   a2ff6:	4619      	mov	r1, r3
   a2ff8:	200c      	movs	r0, #12
   a2ffa:	4bab      	ldr	r3, [pc, #684]	; (a32a8 <Cl_Dprep_StartPreparation+0x374>)
   a2ffc:	4798      	blx	r3
   a2ffe:	4603      	mov	r3, r0
   a3000:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   a3002:	f107 030d 	add.w	r3, r7, #13
   a3006:	2200      	movs	r2, #0
   a3008:	4619      	mov	r1, r3
   a300a:	201e      	movs	r0, #30
   a300c:	4ba6      	ldr	r3, [pc, #664]	; (a32a8 <Cl_Dprep_StartPreparation+0x374>)
   a300e:	4798      	blx	r3
   a3010:	4603      	mov	r3, r0
   a3012:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a3014:	2001      	movs	r0, #1
   a3016:	4ba5      	ldr	r3, [pc, #660]	; (a32ac <Cl_Dprep_StartPreparation+0x378>)
   a3018:	4798      	blx	r3
   a301a:	4603      	mov	r3, r0
   a301c:	75bb      	strb	r3, [r7, #22]
				
				
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a301e:	2300      	movs	r3, #0
   a3020:	9300      	str	r3, [sp, #0]
   a3022:	f04f 0300 	mov.w	r3, #0
   a3026:	f04f 0200 	mov.w	r2, #0
   a302a:	2101      	movs	r1, #1
   a302c:	202a      	movs	r0, #42	; 0x2a
   a302e:	4ca0      	ldr	r4, [pc, #640]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3030:	47a0      	blx	r4
   a3032:	4603      	mov	r3, r0
   a3034:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a3036:	2300      	movs	r3, #0
   a3038:	9300      	str	r3, [sp, #0]
   a303a:	f04f 0300 	mov.w	r3, #0
   a303e:	f04f 0200 	mov.w	r2, #0
   a3042:	2101      	movs	r1, #1
   a3044:	202c      	movs	r0, #44	; 0x2c
   a3046:	4c9a      	ldr	r4, [pc, #616]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3048:	47a0      	blx	r4
   a304a:	4603      	mov	r3, r0
   a304c:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a304e:	2300      	movs	r3, #0
   a3050:	9300      	str	r3, [sp, #0]
   a3052:	f04f 0300 	mov.w	r3, #0
   a3056:	f04f 0200 	mov.w	r2, #0
   a305a:	2101      	movs	r1, #1
   a305c:	2004      	movs	r0, #4
   a305e:	4c94      	ldr	r4, [pc, #592]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3060:	47a0      	blx	r4
   a3062:	4603      	mov	r3, r0
   a3064:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a3066:	2300      	movs	r3, #0
   a3068:	9300      	str	r3, [sp, #0]
   a306a:	f04f 0300 	mov.w	r3, #0
   a306e:	f04f 0200 	mov.w	r2, #0
   a3072:	2101      	movs	r1, #1
   a3074:	2003      	movs	r0, #3
   a3076:	4c8e      	ldr	r4, [pc, #568]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3078:	47a0      	blx	r4
   a307a:	4603      	mov	r3, r0
   a307c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,140,0,0);
   a307e:	2300      	movs	r3, #0
   a3080:	9300      	str	r3, [sp, #0]
   a3082:	f04f 0300 	mov.w	r3, #0
   a3086:	4a8b      	ldr	r2, [pc, #556]	; (a32b4 <Cl_Dprep_StartPreparation+0x380>)
   a3088:	2102      	movs	r1, #2
   a308a:	2008      	movs	r0, #8
   a308c:	4c88      	ldr	r4, [pc, #544]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a308e:	47a0      	blx	r4
   a3090:	4603      	mov	r3, r0
   a3092:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,0,0,0);
   a3094:	2300      	movs	r3, #0
   a3096:	9300      	str	r3, [sp, #0]
   a3098:	f04f 0300 	mov.w	r3, #0
   a309c:	f04f 0200 	mov.w	r2, #0
   a30a0:	2103      	movs	r1, #3
   a30a2:	2007      	movs	r0, #7
   a30a4:	4c82      	ldr	r4, [pc, #520]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a30a6:	47a0      	blx	r4
   a30a8:	4603      	mov	r3, r0
   a30aa:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a30ac:	2300      	movs	r3, #0
   a30ae:	9300      	str	r3, [sp, #0]
   a30b0:	f04f 0300 	mov.w	r3, #0
   a30b4:	4a80      	ldr	r2, [pc, #512]	; (a32b8 <Cl_Dprep_StartPreparation+0x384>)
   a30b6:	2102      	movs	r1, #2
   a30b8:	200f      	movs	r0, #15
   a30ba:	4c7d      	ldr	r4, [pc, #500]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a30bc:	47a0      	blx	r4
   a30be:	4603      	mov	r3, r0
   a30c0:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,450,0,0);
   a30c2:	2300      	movs	r3, #0
   a30c4:	9300      	str	r3, [sp, #0]
   a30c6:	f04f 0300 	mov.w	r3, #0
   a30ca:	4a7c      	ldr	r2, [pc, #496]	; (a32bc <Cl_Dprep_StartPreparation+0x388>)
   a30cc:	2102      	movs	r1, #2
   a30ce:	2011      	movs	r0, #17
   a30d0:	4c77      	ldr	r4, [pc, #476]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a30d2:	47a0      	blx	r4
   a30d4:	4603      	mov	r3, r0
   a30d6:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,400,0,0);
   a30d8:	2300      	movs	r3, #0
   a30da:	9300      	str	r3, [sp, #0]
   a30dc:	f04f 0300 	mov.w	r3, #0
   a30e0:	4a75      	ldr	r2, [pc, #468]	; (a32b8 <Cl_Dprep_StartPreparation+0x384>)
   a30e2:	2102      	movs	r1, #2
   a30e4:	2013      	movs	r0, #19
   a30e6:	4c72      	ldr	r4, [pc, #456]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a30e8:	47a0      	blx	r4
   a30ea:	4603      	mov	r3, r0
   a30ec:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,BELOW,0,200,0);
   a30ee:	2300      	movs	r3, #0
   a30f0:	9300      	str	r3, [sp, #0]
   a30f2:	4b73      	ldr	r3, [pc, #460]	; (a32c0 <Cl_Dprep_StartPreparation+0x38c>)
   a30f4:	f04f 0200 	mov.w	r2, #0
   a30f8:	2103      	movs	r1, #3
   a30fa:	2010      	movs	r0, #16
   a30fc:	4c6c      	ldr	r4, [pc, #432]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a30fe:	47a0      	blx	r4
   a3100:	4603      	mov	r3, r0
   a3102:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,BELOW,0,200,0);
   a3104:	2300      	movs	r3, #0
   a3106:	9300      	str	r3, [sp, #0]
   a3108:	4b6d      	ldr	r3, [pc, #436]	; (a32c0 <Cl_Dprep_StartPreparation+0x38c>)
   a310a:	f04f 0200 	mov.w	r2, #0
   a310e:	2103      	movs	r1, #3
   a3110:	2012      	movs	r0, #18
   a3112:	4c67      	ldr	r4, [pc, #412]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3114:	47a0      	blx	r4
   a3116:	4603      	mov	r3, r0
   a3118:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_LOW_THRESHOLD,BELOW,0,0,0);
   a311a:	2300      	movs	r3, #0
   a311c:	9300      	str	r3, [sp, #0]
   a311e:	f04f 0300 	mov.w	r3, #0
   a3122:	f04f 0200 	mov.w	r2, #0
   a3126:	2103      	movs	r1, #3
   a3128:	2014      	movs	r0, #20
   a312a:	4c61      	ldr	r4, [pc, #388]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a312c:	47a0      	blx	r4
   a312e:	4603      	mov	r3, r0
   a3130:	75bb      	strb	r3, [r7, #22]
						
							
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a3132:	2300      	movs	r3, #0
   a3134:	9300      	str	r3, [sp, #0]
   a3136:	f04f 0300 	mov.w	r3, #0
   a313a:	f04f 0200 	mov.w	r2, #0
   a313e:	2100      	movs	r1, #0
   a3140:	200d      	movs	r0, #13
   a3142:	4c5b      	ldr	r4, [pc, #364]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3144:	47a0      	blx	r4
   a3146:	4603      	mov	r3, r0
   a3148:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a314a:	2300      	movs	r3, #0
   a314c:	9300      	str	r3, [sp, #0]
   a314e:	f04f 0300 	mov.w	r3, #0
   a3152:	f04f 0200 	mov.w	r2, #0
   a3156:	2100      	movs	r1, #0
   a3158:	200c      	movs	r0, #12
   a315a:	4c55      	ldr	r4, [pc, #340]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a315c:	47a0      	blx	r4
   a315e:	4603      	mov	r3, r0
   a3160:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a3162:	2300      	movs	r3, #0
   a3164:	9300      	str	r3, [sp, #0]
   a3166:	f04f 0300 	mov.w	r3, #0
   a316a:	4a56      	ldr	r2, [pc, #344]	; (a32c4 <Cl_Dprep_StartPreparation+0x390>)
   a316c:	2100      	movs	r1, #0
   a316e:	200e      	movs	r0, #14
   a3170:	4c4f      	ldr	r4, [pc, #316]	; (a32b0 <Cl_Dprep_StartPreparation+0x37c>)
   a3172:	47a0      	blx	r4
   a3174:	4603      	mov	r3, r0
   a3176:	75bb      	strb	r3, [r7, #22]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
							//Cl_dprepretcode =  sv_cntrl_activatevenousclamp(); // manav : ???
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );  // manav03 disabled for testing
   a3178:	2101      	movs	r1, #1
   a317a:	202a      	movs	r0, #42	; 0x2a
   a317c:	4b52      	ldr	r3, [pc, #328]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a317e:	4798      	blx	r3
   a3180:	4603      	mov	r3, r0
   a3182:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a3184:	2101      	movs	r1, #1
   a3186:	202c      	movs	r0, #44	; 0x2c
   a3188:	4b4f      	ldr	r3, [pc, #316]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a318a:	4798      	blx	r3
   a318c:	4603      	mov	r3, r0
   a318e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );    // manav03 alarm disabled for testing
   a3190:	2101      	movs	r1, #1
   a3192:	2003      	movs	r0, #3
   a3194:	4b4c      	ldr	r3, [pc, #304]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a3196:	4798      	blx	r3
   a3198:	4603      	mov	r3, r0
   a319a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );    // manav03 alarm disabled for testing
   a319c:	2101      	movs	r1, #1
   a319e:	2004      	movs	r0, #4
   a31a0:	4b49      	ldr	r3, [pc, #292]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31a2:	4798      	blx	r3
   a31a4:	4603      	mov	r3, r0
   a31a6:	75bb      	strb	r3, [r7, #22]
							
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
   a31a8:	2101      	movs	r1, #1
   a31aa:	200c      	movs	r0, #12
   a31ac:	4b46      	ldr	r3, [pc, #280]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31ae:	4798      	blx	r3
   a31b0:	4603      	mov	r3, r0
   a31b2:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a31b4:	2101      	movs	r1, #1
   a31b6:	200d      	movs	r0, #13
   a31b8:	4b43      	ldr	r3, [pc, #268]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31ba:	4798      	blx	r3
   a31bc:	4603      	mov	r3, r0
   a31be:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a31c0:	2101      	movs	r1, #1
   a31c2:	200e      	movs	r0, #14
   a31c4:	4b40      	ldr	r3, [pc, #256]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31c6:	4798      	blx	r3
   a31c8:	4603      	mov	r3, r0
   a31ca:	75bb      	strb	r3, [r7, #22]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a31cc:	2101      	movs	r1, #1
   a31ce:	200f      	movs	r0, #15
   a31d0:	4b3d      	ldr	r3, [pc, #244]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31d2:	4798      	blx	r3
   a31d4:	4603      	mov	r3, r0
   a31d6:	75bb      	strb	r3, [r7, #22]
							 Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   a31d8:	2101      	movs	r1, #1
   a31da:	2010      	movs	r0, #16
   a31dc:	4b3a      	ldr	r3, [pc, #232]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31de:	4798      	blx	r3
   a31e0:	4603      	mov	r3, r0
   a31e2:	75bb      	strb	r3, [r7, #22]
 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   a31e4:	2101      	movs	r1, #1
   a31e6:	2011      	movs	r0, #17
   a31e8:	4b37      	ldr	r3, [pc, #220]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31ea:	4798      	blx	r3
   a31ec:	4603      	mov	r3, r0
   a31ee:	75bb      	strb	r3, [r7, #22]
							 Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   a31f0:	2101      	movs	r1, #1
   a31f2:	2012      	movs	r0, #18
   a31f4:	4b34      	ldr	r3, [pc, #208]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a31f6:	4798      	blx	r3
   a31f8:	4603      	mov	r3, r0
   a31fa:	75bb      	strb	r3, [r7, #22]
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false );
   a31fc:	2100      	movs	r1, #0
   a31fe:	203f      	movs	r0, #63	; 0x3f
   a3200:	4b31      	ldr	r3, [pc, #196]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a3202:	4798      	blx	r3
   a3204:	4603      	mov	r3, r0
   a3206:	75bb      	strb	r3, [r7, #22]
							 Cl_AlarmActivateAlarms(BC_ALARM,true);
   a3208:	2101      	movs	r1, #1
   a320a:	201a      	movs	r0, #26
   a320c:	4b2e      	ldr	r3, [pc, #184]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a320e:	4798      	blx	r3

						
							if(Current_sense_trigger)
   a3210:	4b2e      	ldr	r3, [pc, #184]	; (a32cc <Cl_Dprep_StartPreparation+0x398>)
   a3212:	781b      	ldrb	r3, [r3, #0]
   a3214:	2b00      	cmp	r3, #0
   a3216:	d005      	beq.n	a3224 <Cl_Dprep_StartPreparation+0x2f0>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a3218:	2101      	movs	r1, #1
   a321a:	203c      	movs	r0, #60	; 0x3c
   a321c:	4b2a      	ldr	r3, [pc, #168]	; (a32c8 <Cl_Dprep_StartPreparation+0x394>)
   a321e:	4798      	blx	r3
   a3220:	4603      	mov	r3, r0
   a3222:	75bb      	strb	r3, [r7, #22]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a3224:	2001      	movs	r0, #1
   a3226:	4b2a      	ldr	r3, [pc, #168]	; (a32d0 <Cl_Dprep_StartPreparation+0x39c>)
   a3228:	4798      	blx	r3
   a322a:	4603      	mov	r3, r0
   a322c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a322e:	2002      	movs	r0, #2
   a3230:	4b27      	ldr	r3, [pc, #156]	; (a32d0 <Cl_Dprep_StartPreparation+0x39c>)
   a3232:	4798      	blx	r3
   a3234:	4603      	mov	r3, r0
   a3236:	75bb      	strb	r3, [r7, #22]
							sv_cntrl_enable_bypass();
   a3238:	4b26      	ldr	r3, [pc, #152]	; (a32d4 <Cl_Dprep_StartPreparation+0x3a0>)
   a323a:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a323c:	4b26      	ldr	r3, [pc, #152]	; (a32d8 <Cl_Dprep_StartPreparation+0x3a4>)
   a323e:	2201      	movs	r2, #1
   a3240:	701a      	strb	r2, [r3, #0]
						//	sv_cntrl_disable_bypass();
						//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   a3242:	200b      	movs	r0, #11
   a3244:	4b25      	ldr	r3, [pc, #148]	; (a32dc <Cl_Dprep_StartPreparation+0x3a8>)
   a3246:	4798      	blx	r3
   a3248:	4603      	mov	r3, r0
   a324a:	75bb      	strb	r3, [r7, #22]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   a324c:	4b24      	ldr	r3, [pc, #144]	; (a32e0 <Cl_Dprep_StartPreparation+0x3ac>)
   a324e:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   a3250:	4b24      	ldr	r3, [pc, #144]	; (a32e4 <Cl_Dprep_StartPreparation+0x3b0>)
   a3252:	695b      	ldr	r3, [r3, #20]
   a3254:	613b      	str	r3, [r7, #16]
							Cl_Uint16Type potvalue = 0;
   a3256:	2300      	movs	r3, #0
   a3258:	81fb      	strh	r3, [r7, #14]
							switch (temp)
   a325a:	693b      	ldr	r3, [r7, #16]
   a325c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a3260:	d048      	beq.n	a32f4 <Cl_Dprep_StartPreparation+0x3c0>
   a3262:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a3266:	d003      	beq.n	a3270 <Cl_Dprep_StartPreparation+0x33c>
   a3268:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a326c:	d05c      	beq.n	a3328 <Cl_Dprep_StartPreparation+0x3f4>
   a326e:	e070      	b.n	a3352 <Cl_Dprep_StartPreparation+0x41e>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a3270:	f44f 7161 	mov.w	r1, #900	; 0x384
   a3274:	2002      	movs	r0, #2
   a3276:	4b1c      	ldr	r3, [pc, #112]	; (a32e8 <Cl_Dprep_StartPreparation+0x3b4>)
   a3278:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,800);   //960
   a327a:	f44f 7148 	mov.w	r1, #800	; 0x320
   a327e:	2001      	movs	r0, #1
   a3280:	4b19      	ldr	r3, [pc, #100]	; (a32e8 <Cl_Dprep_StartPreparation+0x3b4>)
   a3282:	4798      	blx	r3
								potvalue = (2600 * 1024)/10000;
   a3284:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a3288:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a328a:	89fb      	ldrh	r3, [r7, #14]
   a328c:	4618      	mov	r0, r3
   a328e:	4b17      	ldr	r3, [pc, #92]	; (a32ec <Cl_Dprep_StartPreparation+0x3b8>)
   a3290:	4798      	blx	r3
								
								conf_activate_pressure_alarms(800);
   a3292:	f44f 7048 	mov.w	r0, #800	; 0x320
   a3296:	4b16      	ldr	r3, [pc, #88]	; (a32f0 <Cl_Dprep_StartPreparation+0x3bc>)
   a3298:	4798      	blx	r3
								
							
								
								break;
   a329a:	e06b      	b.n	a3374 <Cl_Dprep_StartPreparation+0x440>
   a329c:	0009b0a5 	.word	0x0009b0a5
   a32a0:	000a1de9 	.word	0x000a1de9
   a32a4:	000a2369 	.word	0x000a2369
   a32a8:	0009cbd5 	.word	0x0009cbd5
   a32ac:	0009449d 	.word	0x0009449d
   a32b0:	00082989 	.word	0x00082989
   a32b4:	430c0000 	.word	0x430c0000
   a32b8:	43c80000 	.word	0x43c80000
   a32bc:	43e10000 	.word	0x43e10000
   a32c0:	43480000 	.word	0x43480000
   a32c4:	44bb8000 	.word	0x44bb8000
   a32c8:	000829e5 	.word	0x000829e5
   a32cc:	200709ba 	.word	0x200709ba
   a32d0:	0009ad41 	.word	0x0009ad41
   a32d4:	0009af8d 	.word	0x0009af8d
   a32d8:	20071b70 	.word	0x20071b70
   a32dc:	00082ea5 	.word	0x00082ea5
   a32e0:	0009b17d 	.word	0x0009b17d
   a32e4:	20072614 	.word	0x20072614
   a32e8:	0009ae59 	.word	0x0009ae59
   a32ec:	0009b2c1 	.word	0x0009b2c1
   a32f0:	000a2c8d 	.word	0x000a2c8d
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a32f4:	2203      	movs	r2, #3
   a32f6:	4926      	ldr	r1, [pc, #152]	; (a3390 <Cl_Dprep_StartPreparation+0x45c>)
   a32f8:	2018      	movs	r0, #24
   a32fa:	4b26      	ldr	r3, [pc, #152]	; (a3394 <Cl_Dprep_StartPreparation+0x460>)
   a32fc:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a32fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3302:	2002      	movs	r0, #2
   a3304:	4b24      	ldr	r3, [pc, #144]	; (a3398 <Cl_Dprep_StartPreparation+0x464>)
   a3306:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a3308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a330c:	2001      	movs	r0, #1
   a330e:	4b22      	ldr	r3, [pc, #136]	; (a3398 <Cl_Dprep_StartPreparation+0x464>)
   a3310:	4798      	blx	r3
								potvalue = (690 * 1024)/10000;
   a3312:	2346      	movs	r3, #70	; 0x46
   a3314:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a3316:	89fb      	ldrh	r3, [r7, #14]
   a3318:	4618      	mov	r0, r3
   a331a:	4b20      	ldr	r3, [pc, #128]	; (a339c <Cl_Dprep_StartPreparation+0x468>)
   a331c:	4798      	blx	r3
								conf_activate_pressure_alarms(500);
   a331e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a3322:	4b1f      	ldr	r3, [pc, #124]	; (a33a0 <Cl_Dprep_StartPreparation+0x46c>)
   a3324:	4798      	blx	r3
								
								break;
   a3326:	e025      	b.n	a3374 <Cl_Dprep_StartPreparation+0x440>

								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a332c:	2002      	movs	r0, #2
   a332e:	4b1a      	ldr	r3, [pc, #104]	; (a3398 <Cl_Dprep_StartPreparation+0x464>)
   a3330:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a3332:	f44f 7116 	mov.w	r1, #600	; 0x258
   a3336:	2001      	movs	r0, #1
   a3338:	4b17      	ldr	r3, [pc, #92]	; (a3398 <Cl_Dprep_StartPreparation+0x464>)
   a333a:	4798      	blx	r3
								potvalue = (650 * 1024)/10000;
   a333c:	2342      	movs	r3, #66	; 0x42
   a333e:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a3340:	89fb      	ldrh	r3, [r7, #14]
   a3342:	4618      	mov	r0, r3
   a3344:	4b15      	ldr	r3, [pc, #84]	; (a339c <Cl_Dprep_StartPreparation+0x468>)
   a3346:	4798      	blx	r3
								conf_activate_pressure_alarms(300);
   a3348:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a334c:	4b14      	ldr	r3, [pc, #80]	; (a33a0 <Cl_Dprep_StartPreparation+0x46c>)
   a334e:	4798      	blx	r3
										
								break;
   a3350:	e010      	b.n	a3374 <Cl_Dprep_StartPreparation+0x440>
								
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3356:	2002      	movs	r0, #2
   a3358:	4b0f      	ldr	r3, [pc, #60]	; (a3398 <Cl_Dprep_StartPreparation+0x464>)
   a335a:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   a335c:	f240 414c 	movw	r1, #1100	; 0x44c
   a3360:	2001      	movs	r0, #1
   a3362:	4b0d      	ldr	r3, [pc, #52]	; (a3398 <Cl_Dprep_StartPreparation+0x464>)
   a3364:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   a3366:	2344      	movs	r3, #68	; 0x44
   a3368:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a336a:	89fb      	ldrh	r3, [r7, #14]
   a336c:	4618      	mov	r0, r3
   a336e:	4b0b      	ldr	r3, [pc, #44]	; (a339c <Cl_Dprep_StartPreparation+0x468>)
   a3370:	4798      	blx	r3
								
								break;
   a3372:	bf00      	nop
							}
						//	#if 0
						//    sv_cntrl_poweronheater();
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   a3374:	2001      	movs	r0, #1
   a3376:	4b0b      	ldr	r3, [pc, #44]	; (a33a4 <Cl_Dprep_StartPreparation+0x470>)
   a3378:	4798      	blx	r3
   a337a:	4603      	mov	r3, r0
   a337c:	75bb      	strb	r3, [r7, #22]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   a337e:	4b0a      	ldr	r3, [pc, #40]	; (a33a8 <Cl_Dprep_StartPreparation+0x474>)
   a3380:	2202      	movs	r2, #2
   a3382:	701a      	strb	r2, [r3, #0]
							
							return 0;
   a3384:	2300      	movs	r3, #0
				
	}
   a3386:	4618      	mov	r0, r3
   a3388:	371c      	adds	r7, #28
   a338a:	46bd      	mov	sp, r7
   a338c:	bd90      	pop	{r4, r7, pc}
   a338e:	bf00      	nop
   a3390:	000aa414 	.word	0x000aa414
   a3394:	0009cbd5 	.word	0x0009cbd5
   a3398:	0009ae59 	.word	0x0009ae59
   a339c:	0009b2c1 	.word	0x0009b2c1
   a33a0:	000a2c8d 	.word	0x000a2c8d
   a33a4:	00089035 	.word	0x00089035
   a33a8:	20071b6f 	.word	0x20071b6f
   a33ac:	00000000 	.word	0x00000000

000a33b0 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   a33b0:	b590      	push	{r4, r7, lr}
   a33b2:	b087      	sub	sp, #28
   a33b4:	af02      	add	r7, sp, #8
			sv_cntrl_resetgreenalarm();
   a33b6:	4bb0      	ldr	r3, [pc, #704]	; (a3678 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a33b8:	4798      	blx	r3
			dialyzerprime_flag =1;
   a33ba:	4bb0      	ldr	r3, [pc, #704]	; (a367c <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a33bc:	2201      	movs	r2, #1
   a33be:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a33c0:	2300      	movs	r3, #0
   a33c2:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   a33c4:	2300      	movs	r3, #0
   a33c6:	717b      	strb	r3, [r7, #5]
				
			Cl_dprepMinutescounter = 0;
   a33c8:	4bad      	ldr	r3, [pc, #692]	; (a3680 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a33ca:	2200      	movs	r2, #0
   a33cc:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   a33ce:	4bad      	ldr	r3, [pc, #692]	; (a3684 <Cl_Dprep_StartDialyserPrime+0x2d4>)
   a33d0:	2200      	movs	r2, #0
   a33d2:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   a33d4:	4bac      	ldr	r3, [pc, #688]	; (a3688 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a33d6:	4798      	blx	r3
			Cl_dprepretcode = sv_cntrl_poweronheater();
   a33d8:	4bac      	ldr	r3, [pc, #688]	; (a368c <Cl_Dprep_StartDialyserPrime+0x2dc>)
   a33da:	4798      	blx	r3
   a33dc:	4603      	mov	r3, r0
   a33de:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   a33e0:	2001      	movs	r0, #1
   a33e2:	4bab      	ldr	r3, [pc, #684]	; (a3690 <Cl_Dprep_StartDialyserPrime+0x2e0>)
   a33e4:	4798      	blx	r3
   a33e6:	4603      	mov	r3, r0
   a33e8:	73fb      	strb	r3, [r7, #15]
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a33ea:	4baa      	ldr	r3, [pc, #680]	; (a3694 <Cl_Dprep_StartDialyserPrime+0x2e4>)
   a33ec:	4798      	blx	r3
   a33ee:	4603      	mov	r3, r0
   a33f0:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a33f2:	2300      	movs	r3, #0
   a33f4:	9300      	str	r3, [sp, #0]
   a33f6:	f04f 0300 	mov.w	r3, #0
   a33fa:	f04f 0200 	mov.w	r2, #0
   a33fe:	2100      	movs	r1, #0
   a3400:	2005      	movs	r0, #5
   a3402:	4ca5      	ldr	r4, [pc, #660]	; (a3698 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a3404:	47a0      	blx	r4
   a3406:	4603      	mov	r3, r0
   a3408:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a340a:	2300      	movs	r3, #0
   a340c:	9300      	str	r3, [sp, #0]
   a340e:	f04f 0300 	mov.w	r3, #0
   a3412:	f04f 0200 	mov.w	r2, #0
   a3416:	2100      	movs	r1, #0
   a3418:	2006      	movs	r0, #6
   a341a:	4c9f      	ldr	r4, [pc, #636]	; (a3698 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a341c:	47a0      	blx	r4
   a341e:	4603      	mov	r3, r0
   a3420:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a3422:	2300      	movs	r3, #0
   a3424:	9300      	str	r3, [sp, #0]
   a3426:	f04f 0300 	mov.w	r3, #0
   a342a:	f04f 0200 	mov.w	r2, #0
   a342e:	2101      	movs	r1, #1
   a3430:	202a      	movs	r0, #42	; 0x2a
   a3432:	4c99      	ldr	r4, [pc, #612]	; (a3698 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a3434:	47a0      	blx	r4
   a3436:	4603      	mov	r3, r0
   a3438:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a343a:	2300      	movs	r3, #0
   a343c:	9300      	str	r3, [sp, #0]
   a343e:	f04f 0300 	mov.w	r3, #0
   a3442:	f04f 0200 	mov.w	r2, #0
   a3446:	2101      	movs	r1, #1
   a3448:	202c      	movs	r0, #44	; 0x2c
   a344a:	4c93      	ldr	r4, [pc, #588]	; (a3698 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a344c:	47a0      	blx	r4
   a344e:	4603      	mov	r3, r0
   a3450:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,(Treatdata[ID_setcond] - 0.2),0,0);
   a3452:	4b92      	ldr	r3, [pc, #584]	; (a369c <Cl_Dprep_StartDialyserPrime+0x2ec>)
   a3454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a3456:	4b92      	ldr	r3, [pc, #584]	; (a36a0 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3458:	4610      	mov	r0, r2
   a345a:	4798      	blx	r3
   a345c:	4c91      	ldr	r4, [pc, #580]	; (a36a4 <Cl_Dprep_StartDialyserPrime+0x2f4>)
   a345e:	a384      	add	r3, pc, #528	; (adr r3, a3670 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a3460:	e9d3 2300 	ldrd	r2, r3, [r3]
   a3464:	47a0      	blx	r4
   a3466:	4603      	mov	r3, r0
   a3468:	460c      	mov	r4, r1
   a346a:	4619      	mov	r1, r3
   a346c:	4622      	mov	r2, r4
   a346e:	4b8e      	ldr	r3, [pc, #568]	; (a36a8 <Cl_Dprep_StartDialyserPrime+0x2f8>)
   a3470:	4608      	mov	r0, r1
   a3472:	4611      	mov	r1, r2
   a3474:	4798      	blx	r3
   a3476:	4602      	mov	r2, r0
   a3478:	2300      	movs	r3, #0
   a347a:	9300      	str	r3, [sp, #0]
   a347c:	f04f 0300 	mov.w	r3, #0
   a3480:	2103      	movs	r1, #3
   a3482:	2007      	movs	r0, #7
   a3484:	4c84      	ldr	r4, [pc, #528]	; (a3698 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a3486:	47a0      	blx	r4
   a3488:	4603      	mov	r3, r0
   a348a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,BELOW,(Treatdata[ID_setcond] + 0.2),0,0);
   a348c:	4b83      	ldr	r3, [pc, #524]	; (a369c <Cl_Dprep_StartDialyserPrime+0x2ec>)
   a348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a3490:	4b83      	ldr	r3, [pc, #524]	; (a36a0 <Cl_Dprep_StartDialyserPrime+0x2f0>)
   a3492:	4610      	mov	r0, r2
   a3494:	4798      	blx	r3
   a3496:	4c85      	ldr	r4, [pc, #532]	; (a36ac <Cl_Dprep_StartDialyserPrime+0x2fc>)
   a3498:	a375      	add	r3, pc, #468	; (adr r3, a3670 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a349a:	e9d3 2300 	ldrd	r2, r3, [r3]
   a349e:	47a0      	blx	r4
   a34a0:	4603      	mov	r3, r0
   a34a2:	460c      	mov	r4, r1
   a34a4:	4619      	mov	r1, r3
   a34a6:	4622      	mov	r2, r4
   a34a8:	4b7f      	ldr	r3, [pc, #508]	; (a36a8 <Cl_Dprep_StartDialyserPrime+0x2f8>)
   a34aa:	4608      	mov	r0, r1
   a34ac:	4611      	mov	r1, r2
   a34ae:	4798      	blx	r3
   a34b0:	4602      	mov	r2, r0
   a34b2:	2300      	movs	r3, #0
   a34b4:	9300      	str	r3, [sp, #0]
   a34b6:	f04f 0300 	mov.w	r3, #0
   a34ba:	2103      	movs	r1, #3
   a34bc:	2008      	movs	r0, #8
   a34be:	4c76      	ldr	r4, [pc, #472]	; (a3698 <Cl_Dprep_StartDialyserPrime+0x2e8>)
   a34c0:	47a0      	blx	r4
   a34c2:	4603      	mov	r3, r0
   a34c4:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
// 	        Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a34c6:	2100      	movs	r1, #0
   a34c8:	2029      	movs	r0, #41	; 0x29
   a34ca:	4b79      	ldr	r3, [pc, #484]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a34cc:	4798      	blx	r3
   a34ce:	4603      	mov	r3, r0
   a34d0:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a34d2:	2100      	movs	r1, #0
   a34d4:	202b      	movs	r0, #43	; 0x2b
   a34d6:	4b76      	ldr	r3, [pc, #472]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a34d8:	4798      	blx	r3
   a34da:	4603      	mov	r3, r0
   a34dc:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a34de:	2100      	movs	r1, #0
   a34e0:	2003      	movs	r0, #3
   a34e2:	4b73      	ldr	r3, [pc, #460]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a34e4:	4798      	blx	r3
   a34e6:	4603      	mov	r3, r0
   a34e8:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a34ea:	2100      	movs	r1, #0
   a34ec:	2004      	movs	r0, #4
   a34ee:	4b70      	ldr	r3, [pc, #448]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a34f0:	4798      	blx	r3
   a34f2:	4603      	mov	r3, r0
   a34f4:	73fb      	strb	r3, [r7, #15]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   a34f6:	2101      	movs	r1, #1
   a34f8:	202a      	movs	r0, #42	; 0x2a
   a34fa:	4b6d      	ldr	r3, [pc, #436]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a34fc:	4798      	blx	r3
   a34fe:	4603      	mov	r3, r0
   a3500:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a3502:	2101      	movs	r1, #1
   a3504:	202c      	movs	r0, #44	; 0x2c
   a3506:	4b6a      	ldr	r3, [pc, #424]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3508:	4798      	blx	r3
   a350a:	4603      	mov	r3, r0
   a350c:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   a350e:	2101      	movs	r1, #1
   a3510:	2005      	movs	r0, #5
   a3512:	4b67      	ldr	r3, [pc, #412]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3514:	4798      	blx	r3
   a3516:	4603      	mov	r3, r0
   a3518:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   a351a:	2101      	movs	r1, #1
   a351c:	2006      	movs	r0, #6
   a351e:	4b64      	ldr	r3, [pc, #400]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3520:	4798      	blx	r3
   a3522:	4603      	mov	r3, r0
   a3524:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   a3526:	2101      	movs	r1, #1
   a3528:	203f      	movs	r0, #63	; 0x3f
   a352a:	4b61      	ldr	r3, [pc, #388]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a352c:	4798      	blx	r3
   a352e:	4603      	mov	r3, r0
   a3530:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a3532:	2101      	movs	r1, #1
   a3534:	200c      	movs	r0, #12
   a3536:	4b5e      	ldr	r3, [pc, #376]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3538:	4798      	blx	r3
   a353a:	4603      	mov	r3, r0
   a353c:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a353e:	2101      	movs	r1, #1
   a3540:	200d      	movs	r0, #13
   a3542:	4b5b      	ldr	r3, [pc, #364]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3544:	4798      	blx	r3
   a3546:	4603      	mov	r3, r0
   a3548:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a354a:	2101      	movs	r1, #1
   a354c:	200e      	movs	r0, #14
   a354e:	4b58      	ldr	r3, [pc, #352]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a3550:	4798      	blx	r3
   a3552:	4603      	mov	r3, r0
   a3554:	73fb      	strb	r3, [r7, #15]
			Cl_AlarmActivateAlarms(BC_ALARM,true);
   a3556:	2101      	movs	r1, #1
   a3558:	201a      	movs	r0, #26
   a355a:	4b55      	ldr	r3, [pc, #340]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a355c:	4798      	blx	r3
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
// 		
			if(Current_sense_trigger)
   a355e:	4b55      	ldr	r3, [pc, #340]	; (a36b4 <Cl_Dprep_StartDialyserPrime+0x304>)
   a3560:	781b      	ldrb	r3, [r3, #0]
   a3562:	2b00      	cmp	r3, #0
   a3564:	d005      	beq.n	a3572 <Cl_Dprep_StartDialyserPrime+0x1c2>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a3566:	2101      	movs	r1, #1
   a3568:	203c      	movs	r0, #60	; 0x3c
   a356a:	4b51      	ldr	r3, [pc, #324]	; (a36b0 <Cl_Dprep_StartDialyserPrime+0x300>)
   a356c:	4798      	blx	r3
   a356e:	4603      	mov	r3, r0
   a3570:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a3572:	2001      	movs	r0, #1
   a3574:	4b50      	ldr	r3, [pc, #320]	; (a36b8 <Cl_Dprep_StartDialyserPrime+0x308>)
   a3576:	4798      	blx	r3
   a3578:	4603      	mov	r3, r0
   a357a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a357c:	2002      	movs	r0, #2
   a357e:	4b4e      	ldr	r3, [pc, #312]	; (a36b8 <Cl_Dprep_StartDialyserPrime+0x308>)
   a3580:	4798      	blx	r3
   a3582:	4603      	mov	r3, r0
   a3584:	73fb      	strb	r3, [r7, #15]
			
			// wait for the cond and temperature to be stable then disable bypass and run it for 2 mins
		//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
		//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   a3586:	4b45      	ldr	r3, [pc, #276]	; (a369c <Cl_Dprep_StartDialyserPrime+0x2ec>)
   a3588:	695b      	ldr	r3, [r3, #20]
   a358a:	60bb      	str	r3, [r7, #8]
				flow_rate = temp;
   a358c:	4a4b      	ldr	r2, [pc, #300]	; (a36bc <Cl_Dprep_StartDialyserPrime+0x30c>)
   a358e:	68bb      	ldr	r3, [r7, #8]
   a3590:	6013      	str	r3, [r2, #0]
			Cl_Uint16Type potvalue = 0;
   a3592:	2300      	movs	r3, #0
   a3594:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   a3596:	68bb      	ldr	r3, [r7, #8]
   a3598:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a359c:	d038      	beq.n	a3610 <Cl_Dprep_StartDialyserPrime+0x260>
   a359e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a35a2:	d803      	bhi.n	a35ac <Cl_Dprep_StartDialyserPrime+0x1fc>
   a35a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a35a8:	d04c      	beq.n	a3644 <Cl_Dprep_StartDialyserPrime+0x294>
   a35aa:	e093      	b.n	a36d4 <Cl_Dprep_StartDialyserPrime+0x324>
   a35ac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a35b0:	d018      	beq.n	a35e4 <Cl_Dprep_StartDialyserPrime+0x234>
   a35b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a35b6:	f040 808d 	bne.w	a36d4 <Cl_Dprep_StartDialyserPrime+0x324>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a35ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a35be:	2002      	movs	r0, #2
   a35c0:	4b3f      	ldr	r3, [pc, #252]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a35c2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   a35c4:	f240 5173 	movw	r1, #1395	; 0x573
   a35c8:	2001      	movs	r0, #1
   a35ca:	4b3d      	ldr	r3, [pc, #244]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a35cc:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   a35ce:	233e      	movs	r3, #62	; 0x3e
   a35d0:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a35d2:	88fb      	ldrh	r3, [r7, #6]
   a35d4:	4618      	mov	r0, r3
   a35d6:	4b3b      	ldr	r3, [pc, #236]	; (a36c4 <Cl_Dprep_StartDialyserPrime+0x314>)
   a35d8:	4798      	blx	r3
				
				conf_activate_pressure_alarms(800);
   a35da:	f44f 7048 	mov.w	r0, #800	; 0x320
   a35de:	4b3a      	ldr	r3, [pc, #232]	; (a36c8 <Cl_Dprep_StartDialyserPrime+0x318>)
   a35e0:	4798      	blx	r3
				break;
   a35e2:	e08d      	b.n	a3700 <Cl_Dprep_StartDialyserPrime+0x350>
				
				case 700:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a35e4:	f44f 7161 	mov.w	r1, #900	; 0x384
   a35e8:	2002      	movs	r0, #2
   a35ea:	4b35      	ldr	r3, [pc, #212]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a35ec:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   a35ee:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   a35f2:	2001      	movs	r0, #1
   a35f4:	4b32      	ldr	r3, [pc, #200]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a35f6:	4798      	blx	r3
				potvalue = (2600 * 1024)/10000;
   a35f8:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a35fc:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a35fe:	88fb      	ldrh	r3, [r7, #6]
   a3600:	4618      	mov	r0, r3
   a3602:	4b30      	ldr	r3, [pc, #192]	; (a36c4 <Cl_Dprep_StartDialyserPrime+0x314>)
   a3604:	4798      	blx	r3
				
				conf_activate_pressure_alarms(700);
   a3606:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   a360a:	4b2f      	ldr	r3, [pc, #188]	; (a36c8 <Cl_Dprep_StartDialyserPrime+0x318>)
   a360c:	4798      	blx	r3
				break;
   a360e:	e077      	b.n	a3700 <Cl_Dprep_StartDialyserPrime+0x350>
				
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a3610:	2203      	movs	r2, #3
   a3612:	492e      	ldr	r1, [pc, #184]	; (a36cc <Cl_Dprep_StartDialyserPrime+0x31c>)
   a3614:	2018      	movs	r0, #24
   a3616:	4b2e      	ldr	r3, [pc, #184]	; (a36d0 <Cl_Dprep_StartDialyserPrime+0x320>)
   a3618:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a361a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a361e:	2002      	movs	r0, #2
   a3620:	4b27      	ldr	r3, [pc, #156]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a3622:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a3624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3628:	2001      	movs	r0, #1
   a362a:	4b25      	ldr	r3, [pc, #148]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a362c:	4798      	blx	r3
				potvalue = (690 * 1024)/10000;
   a362e:	2346      	movs	r3, #70	; 0x46
   a3630:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a3632:	88fb      	ldrh	r3, [r7, #6]
   a3634:	4618      	mov	r0, r3
   a3636:	4b23      	ldr	r3, [pc, #140]	; (a36c4 <Cl_Dprep_StartDialyserPrime+0x314>)
   a3638:	4798      	blx	r3
				
				conf_activate_pressure_alarms(500);
   a363a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a363e:	4b22      	ldr	r3, [pc, #136]	; (a36c8 <Cl_Dprep_StartDialyserPrime+0x318>)
   a3640:	4798      	blx	r3
				break;
   a3642:	e05d      	b.n	a3700 <Cl_Dprep_StartDialyserPrime+0x350>

				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a3644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a3648:	2002      	movs	r0, #2
   a364a:	4b1d      	ldr	r3, [pc, #116]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a364c:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a364e:	f44f 7116 	mov.w	r1, #600	; 0x258
   a3652:	2001      	movs	r0, #1
   a3654:	4b1a      	ldr	r3, [pc, #104]	; (a36c0 <Cl_Dprep_StartDialyserPrime+0x310>)
   a3656:	4798      	blx	r3
				potvalue = (650 * 1024)/10000;
   a3658:	2342      	movs	r3, #66	; 0x42
   a365a:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a365c:	88fb      	ldrh	r3, [r7, #6]
   a365e:	4618      	mov	r0, r3
   a3660:	4b18      	ldr	r3, [pc, #96]	; (a36c4 <Cl_Dprep_StartDialyserPrime+0x314>)
   a3662:	4798      	blx	r3
				
				conf_activate_pressure_alarms(300);
   a3664:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a3668:	4b17      	ldr	r3, [pc, #92]	; (a36c8 <Cl_Dprep_StartDialyserPrime+0x318>)
   a366a:	4798      	blx	r3
				
				break;
   a366c:	e048      	b.n	a3700 <Cl_Dprep_StartDialyserPrime+0x350>
   a366e:	bf00      	nop
   a3670:	9999999a 	.word	0x9999999a
   a3674:	3fc99999 	.word	0x3fc99999
   a3678:	0009b0a5 	.word	0x0009b0a5
   a367c:	20071b20 	.word	0x20071b20
   a3680:	20071b78 	.word	0x20071b78
   a3684:	20071b74 	.word	0x20071b74
   a3688:	000a2369 	.word	0x000a2369
   a368c:	0009adb9 	.word	0x0009adb9
   a3690:	00089035 	.word	0x00089035
   a3694:	000a1de9 	.word	0x000a1de9
   a3698:	00082989 	.word	0x00082989
   a369c:	20072614 	.word	0x20072614
   a36a0:	000a763d 	.word	0x000a763d
   a36a4:	000a73c1 	.word	0x000a73c1
   a36a8:	000a7ced 	.word	0x000a7ced
   a36ac:	000a73c5 	.word	0x000a73c5
   a36b0:	000829e5 	.word	0x000829e5
   a36b4:	200709ba 	.word	0x200709ba
   a36b8:	0009ad41 	.word	0x0009ad41
   a36bc:	20071834 	.word	0x20071834
   a36c0:	0009ae59 	.word	0x0009ae59
   a36c4:	0009b2c1 	.word	0x0009b2c1
   a36c8:	000a2c8d 	.word	0x000a2c8d
   a36cc:	000aa414 	.word	0x000aa414
   a36d0:	0009cbd5 	.word	0x0009cbd5
				
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a36d4:	2203      	movs	r2, #3
   a36d6:	4918      	ldr	r1, [pc, #96]	; (a3738 <Cl_Dprep_StartDialyserPrime+0x388>)
   a36d8:	2018      	movs	r0, #24
   a36da:	4b18      	ldr	r3, [pc, #96]	; (a373c <Cl_Dprep_StartDialyserPrime+0x38c>)
   a36dc:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a36de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a36e2:	2002      	movs	r0, #2
   a36e4:	4b16      	ldr	r3, [pc, #88]	; (a3740 <Cl_Dprep_StartDialyserPrime+0x390>)
   a36e6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   a36e8:	f240 414c 	movw	r1, #1100	; 0x44c
   a36ec:	2001      	movs	r0, #1
   a36ee:	4b14      	ldr	r3, [pc, #80]	; (a3740 <Cl_Dprep_StartDialyserPrime+0x390>)
   a36f0:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   a36f2:	2344      	movs	r3, #68	; 0x44
   a36f4:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a36f6:	88fb      	ldrh	r3, [r7, #6]
   a36f8:	4618      	mov	r0, r3
   a36fa:	4b12      	ldr	r3, [pc, #72]	; (a3744 <Cl_Dprep_StartDialyserPrime+0x394>)
   a36fc:	4798      	blx	r3
				break;
   a36fe:	bf00      	nop
			}
			
		//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
		//	{
				
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   a3700:	2100      	movs	r1, #0
   a3702:	2008      	movs	r0, #8
   a3704:	4b10      	ldr	r3, [pc, #64]	; (a3748 <Cl_Dprep_StartDialyserPrime+0x398>)
   a3706:	4798      	blx	r3
				 Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0); // manav01 added 29-8-17 removed from prime controller
   a3708:	1d7b      	adds	r3, r7, #5
   a370a:	2200      	movs	r2, #0
   a370c:	4619      	mov	r1, r3
   a370e:	2028      	movs	r0, #40	; 0x28
   a3710:	4b0a      	ldr	r3, [pc, #40]	; (a373c <Cl_Dprep_StartDialyserPrime+0x38c>)
   a3712:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3714:	4b0d      	ldr	r3, [pc, #52]	; (a374c <Cl_Dprep_StartDialyserPrime+0x39c>)
   a3716:	2200      	movs	r2, #0
   a3718:	70da      	strb	r2, [r3, #3]
		//	}
			
			
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   a371a:	4b0d      	ldr	r3, [pc, #52]	; (a3750 <Cl_Dprep_StartDialyserPrime+0x3a0>)
   a371c:	4798      	blx	r3
   a371e:	4603      	mov	r3, r0
   a3720:	73fb      	strb	r3, [r7, #15]
			//sv_prop_startmixing();                                 // manav03 removed
		//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);                      // manav01 commented 29-8-17
		//	Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);      // manav01 commented 29-8-17
			
			UpdateDprepFillingMinuteTick();
   a3722:	4b0c      	ldr	r3, [pc, #48]	; (a3754 <Cl_Dprep_StartDialyserPrime+0x3a4>)
   a3724:	4798      	blx	r3
	
			// change state to wait for stability to check for temp and cond stability if yes then change state to dializer prime and diable bypass
		//	Cl_Check_Temp_Cond_Stability();
			
			cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a3726:	4b0c      	ldr	r3, [pc, #48]	; (a3758 <Cl_Dprep_StartDialyserPrime+0x3a8>)
   a3728:	220e      	movs	r2, #14
   a372a:	701a      	strb	r2, [r3, #0]
			
		//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
		//
	//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
	//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;					
			return 0;
   a372c:	2300      	movs	r3, #0
	}
   a372e:	4618      	mov	r0, r3
   a3730:	3714      	adds	r7, #20
   a3732:	46bd      	mov	sp, r7
   a3734:	bd90      	pop	{r4, r7, pc}
   a3736:	bf00      	nop
   a3738:	000aa414 	.word	0x000aa414
   a373c:	0009cbd5 	.word	0x0009cbd5
   a3740:	0009ae59 	.word	0x0009ae59
   a3744:	0009b2c1 	.word	0x0009b2c1
   a3748:	00088019 	.word	0x00088019
   a374c:	20070b64 	.word	0x20070b64
   a3750:	0009af71 	.word	0x0009af71
   a3754:	000a1e09 	.word	0x000a1e09
   a3758:	20071b6f 	.word	0x20071b6f

000a375c <Cl_Dprep_Priming_Stop>:

Cl_ReturnCodeType Cl_Dprep_Priming_Stop(){
   a375c:	b580      	push	{r7, lr}
   a375e:	af00      	add	r7, sp, #0
	
	sv_cntrl_setredalarm();      //manav01 added
   a3760:	4b07      	ldr	r3, [pc, #28]	; (a3780 <Cl_Dprep_Priming_Stop+0x24>)
   a3762:	4798      	blx	r3
	//sv_cntrl_nobuzzer();        //manav01 added
	// Cl_mac_apprequesthandler(EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME);          // manav03 commented
// manav03 added
						Cl_dprep_StopMixing();
   a3764:	4b07      	ldr	r3, [pc, #28]	; (a3784 <Cl_Dprep_Priming_Stop+0x28>)
   a3766:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a3768:	2100      	movs	r1, #0
   a376a:	2009      	movs	r0, #9
   a376c:	4b06      	ldr	r3, [pc, #24]	; (a3788 <Cl_Dprep_Priming_Stop+0x2c>)
   a376e:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   a3770:	4b06      	ldr	r3, [pc, #24]	; (a378c <Cl_Dprep_Priming_Stop+0x30>)
   a3772:	2207      	movs	r2, #7
   a3774:	701a      	strb	r2, [r3, #0]

Cl_deactivate_prep_alarms();
   a3776:	4b06      	ldr	r3, [pc, #24]	; (a3790 <Cl_Dprep_Priming_Stop+0x34>)
   a3778:	4798      	blx	r3
// 		
// 		
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 	
}
   a377a:	bf00      	nop
   a377c:	4618      	mov	r0, r3
   a377e:	bd80      	pop	{r7, pc}
   a3780:	0009b02d 	.word	0x0009b02d
   a3784:	000a3829 	.word	0x000a3829
   a3788:	00088019 	.word	0x00088019
   a378c:	20071b6f 	.word	0x20071b6f
   a3790:	000a38d9 	.word	0x000a38d9

000a3794 <Cl_Check_Temp_Cond_Stability>:
	
	
	
Cl_ReturnCodeType Cl_Check_Temp_Cond_Stability(){
   a3794:	b590      	push	{r4, r7, lr}
   a3796:	b083      	sub	sp, #12
   a3798:	af00      	add	r7, sp, #0
	
	
	// manav02 changed
	
//	Cl_Heater_GetHeaterStableStatus(&dprep_heater_stable_status);
	Cl_Uint16Type temp = 0;
   a379a:	2300      	movs	r3, #0
   a379c:	80fb      	strh	r3, [r7, #6]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);
   a379e:	1dbb      	adds	r3, r7, #6
   a37a0:	4619      	mov	r1, r3
   a37a2:	2007      	movs	r0, #7
   a37a4:	4b1c      	ldr	r3, [pc, #112]	; (a3818 <Cl_Check_Temp_Cond_Stability+0x84>)
   a37a6:	4798      	blx	r3
	
	if(Cl_alarmThresholdTable.cond_low_threshold < temp < Cl_alarmThresholdTable.cond_high_threshold){
   a37a8:	4b1c      	ldr	r3, [pc, #112]	; (a381c <Cl_Check_Temp_Cond_Stability+0x88>)
   a37aa:	f9b3 3000 	ldrsh.w	r3, [r3]
   a37ae:	461a      	mov	r2, r3
   a37b0:	88fb      	ldrh	r3, [r7, #6]
   a37b2:	429a      	cmp	r2, r3
   a37b4:	bfb4      	ite	lt
   a37b6:	2301      	movlt	r3, #1
   a37b8:	2300      	movge	r3, #0
   a37ba:	b2db      	uxtb	r3, r3
   a37bc:	461a      	mov	r2, r3
   a37be:	4b17      	ldr	r3, [pc, #92]	; (a381c <Cl_Check_Temp_Cond_Stability+0x88>)
   a37c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   a37c4:	429a      	cmp	r2, r3
   a37c6:	da22      	bge.n	a380e <Cl_Check_Temp_Cond_Stability+0x7a>
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS , &temp);
   a37c8:	1dbb      	adds	r3, r7, #6
   a37ca:	4619      	mov	r1, r3
   a37cc:	2014      	movs	r0, #20
   a37ce:	4b12      	ldr	r3, [pc, #72]	; (a3818 <Cl_Check_Temp_Cond_Stability+0x84>)
   a37d0:	4798      	blx	r3
		
		if(Cl_alarmThresholdTable.temp3_low_threshold < temp < Cl_alarmThresholdTable.temp3_high_threshold){
   a37d2:	4b12      	ldr	r3, [pc, #72]	; (a381c <Cl_Check_Temp_Cond_Stability+0x88>)
   a37d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   a37d6:	88fb      	ldrh	r3, [r7, #6]
   a37d8:	461a      	mov	r2, r3
   a37da:	4b11      	ldr	r3, [pc, #68]	; (a3820 <Cl_Check_Temp_Cond_Stability+0x8c>)
   a37dc:	4610      	mov	r0, r2
   a37de:	4798      	blx	r3
   a37e0:	4602      	mov	r2, r0
   a37e2:	4b10      	ldr	r3, [pc, #64]	; (a3824 <Cl_Check_Temp_Cond_Stability+0x90>)
   a37e4:	4611      	mov	r1, r2
   a37e6:	4620      	mov	r0, r4
   a37e8:	4798      	blx	r3
   a37ea:	4603      	mov	r3, r0
   a37ec:	2b00      	cmp	r3, #0
   a37ee:	d002      	beq.n	a37f6 <Cl_Check_Temp_Cond_Stability+0x62>
   a37f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   a37f4:	e001      	b.n	a37fa <Cl_Check_Temp_Cond_Stability+0x66>
   a37f6:	f04f 0200 	mov.w	r2, #0
   a37fa:	4b08      	ldr	r3, [pc, #32]	; (a381c <Cl_Check_Temp_Cond_Stability+0x88>)
   a37fc:	6c99      	ldr	r1, [r3, #72]	; 0x48
   a37fe:	4b09      	ldr	r3, [pc, #36]	; (a3824 <Cl_Check_Temp_Cond_Stability+0x90>)
   a3800:	4610      	mov	r0, r2
   a3802:	4798      	blx	r3
   a3804:	4603      	mov	r3, r0
   a3806:	2b00      	cmp	r3, #0
   a3808:	d001      	beq.n	a380e <Cl_Check_Temp_Cond_Stability+0x7a>
		
		return CL_OK;	
   a380a:	2300      	movs	r3, #0
   a380c:	e000      	b.n	a3810 <Cl_Check_Temp_Cond_Stability+0x7c>
// 		}
// 		else{
// 			return CL_REJECTED;
// 		}

return CL_OK;	  // manav02 needs to be changed to cl_rejected
   a380e:	2300      	movs	r3, #0
}
   a3810:	4618      	mov	r0, r3
   a3812:	370c      	adds	r7, #12
   a3814:	46bd      	mov	sp, r7
   a3816:	bd90      	pop	{r4, r7, pc}
   a3818:	0008fa01 	.word	0x0008fa01
   a381c:	20072044 	.word	0x20072044
   a3820:	000a7f01 	.word	0x000a7f01
   a3824:	000a82e5 	.word	0x000a82e5

000a3828 <Cl_dprep_StopMixing>:
	
	
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   a3828:	b580      	push	{r7, lr}
   a382a:	b082      	sub	sp, #8
   a382c:	af00      	add	r7, sp, #0
	
	sv_cntrl_setredalarm();
   a382e:	4b21      	ldr	r3, [pc, #132]	; (a38b4 <Cl_dprep_StopMixing+0x8c>)
   a3830:	4798      	blx	r3
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a3832:	2300      	movs	r3, #0
   a3834:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   a3836:	4b20      	ldr	r3, [pc, #128]	; (a38b8 <Cl_dprep_StopMixing+0x90>)
   a3838:	781b      	ldrb	r3, [r3, #0]
   a383a:	2b02      	cmp	r3, #2
   a383c:	d11c      	bne.n	a3878 <Cl_dprep_StopMixing+0x50>
				{
					
				Cl_dprepMinutescounter = 0;
   a383e:	4b1f      	ldr	r3, [pc, #124]	; (a38bc <Cl_dprep_StopMixing+0x94>)
   a3840:	2200      	movs	r2, #0
   a3842:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   a3844:	4b1e      	ldr	r3, [pc, #120]	; (a38c0 <Cl_dprep_StopMixing+0x98>)
   a3846:	2200      	movs	r2, #0
   a3848:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a384a:	4b1e      	ldr	r3, [pc, #120]	; (a38c4 <Cl_dprep_StopMixing+0x9c>)
   a384c:	4798      	blx	r3
   a384e:	4603      	mov	r3, r0
   a3850:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a3852:	2004      	movs	r0, #4
   a3854:	4b1c      	ldr	r3, [pc, #112]	; (a38c8 <Cl_dprep_StopMixing+0xa0>)
   a3856:	4798      	blx	r3
   a3858:	4603      	mov	r3, r0
   a385a:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   a385c:	2005      	movs	r0, #5
   a385e:	4b1b      	ldr	r3, [pc, #108]	; (a38cc <Cl_dprep_StopMixing+0xa4>)
   a3860:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   a3862:	4b15      	ldr	r3, [pc, #84]	; (a38b8 <Cl_dprep_StopMixing+0x90>)
   a3864:	220b      	movs	r2, #11
   a3866:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a3868:	1dbb      	adds	r3, r7, #6
   a386a:	2200      	movs	r2, #0
   a386c:	4619      	mov	r1, r3
   a386e:	202d      	movs	r0, #45	; 0x2d
   a3870:	4b17      	ldr	r3, [pc, #92]	; (a38d0 <Cl_dprep_StopMixing+0xa8>)
   a3872:	4798      	blx	r3
   a3874:	4603      	mov	r3, r0
   a3876:	71fb      	strb	r3, [r7, #7]
				
					
				}
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a3878:	4b0f      	ldr	r3, [pc, #60]	; (a38b8 <Cl_dprep_StopMixing+0x90>)
   a387a:	781b      	ldrb	r3, [r3, #0]
   a387c:	2b06      	cmp	r3, #6
   a387e:	d111      	bne.n	a38a4 <Cl_dprep_StopMixing+0x7c>
					
					Cl_dprepMinutescounter = 0;
   a3880:	4b0e      	ldr	r3, [pc, #56]	; (a38bc <Cl_dprep_StopMixing+0x94>)
   a3882:	2200      	movs	r2, #0
   a3884:	601a      	str	r2, [r3, #0]
					Cl_dprepsecondscounter = 0;
   a3886:	4b0e      	ldr	r3, [pc, #56]	; (a38c0 <Cl_dprep_StopMixing+0x98>)
   a3888:	2200      	movs	r2, #0
   a388a:	601a      	str	r2, [r3, #0]
					
					Cl_dprepretcode = sv_cntrl_poweroffheater();
   a388c:	4b0d      	ldr	r3, [pc, #52]	; (a38c4 <Cl_dprep_StopMixing+0x9c>)
   a388e:	4798      	blx	r3
   a3890:	4603      	mov	r3, r0
   a3892:	71fb      	strb	r3, [r7, #7]
					Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a3894:	2004      	movs	r0, #4
   a3896:	4b0c      	ldr	r3, [pc, #48]	; (a38c8 <Cl_dprep_StopMixing+0xa0>)
   a3898:	4798      	blx	r3
   a389a:	4603      	mov	r3, r0
   a389c:	71fb      	strb	r3, [r7, #7]
					Cl_bc_controller(BC_EVENT_STOP);
   a389e:	2005      	movs	r0, #5
   a38a0:	4b0a      	ldr	r3, [pc, #40]	; (a38cc <Cl_dprep_StopMixing+0xa4>)
   a38a2:	4798      	blx	r3
					
					
				}

Cl_deactivate_prep_alarms();
   a38a4:	4b0b      	ldr	r3, [pc, #44]	; (a38d4 <Cl_dprep_StopMixing+0xac>)
   a38a6:	4798      	blx	r3
				return Cl_dprepretcode;
   a38a8:	79fb      	ldrb	r3, [r7, #7]
}
   a38aa:	4618      	mov	r0, r3
   a38ac:	3708      	adds	r7, #8
   a38ae:	46bd      	mov	sp, r7
   a38b0:	bd80      	pop	{r7, pc}
   a38b2:	bf00      	nop
   a38b4:	0009b02d 	.word	0x0009b02d
   a38b8:	20071b6f 	.word	0x20071b6f
   a38bc:	20071b78 	.word	0x20071b78
   a38c0:	20071b74 	.word	0x20071b74
   a38c4:	0009adcd 	.word	0x0009adcd
   a38c8:	00089035 	.word	0x00089035
   a38cc:	00082ea5 	.word	0x00082ea5
   a38d0:	0009cbd5 	.word	0x0009cbd5
   a38d4:	000a38d9 	.word	0x000a38d9

000a38d8 <Cl_deactivate_prep_alarms>:

Cl_ReturnCodeType Cl_deactivate_prep_alarms(){
   a38d8:	b580      	push	{r7, lr}
   a38da:	b082      	sub	sp, #8
   a38dc:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a38de:	2300      	movs	r3, #0
   a38e0:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,false );
   a38e2:	2100      	movs	r1, #0
   a38e4:	202a      	movs	r0, #42	; 0x2a
   a38e6:	4b51      	ldr	r3, [pc, #324]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a38e8:	4798      	blx	r3
   a38ea:	4603      	mov	r3, r0
   a38ec:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,false );
   a38ee:	2100      	movs	r1, #0
   a38f0:	202c      	movs	r0, #44	; 0x2c
   a38f2:	4b4e      	ldr	r3, [pc, #312]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a38f4:	4798      	blx	r3
   a38f6:	4603      	mov	r3, r0
   a38f8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,false );
   a38fa:	2100      	movs	r1, #0
   a38fc:	2005      	movs	r0, #5
   a38fe:	4b4b      	ldr	r3, [pc, #300]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3900:	4798      	blx	r3
   a3902:	4603      	mov	r3, r0
   a3904:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,false );
   a3906:	2100      	movs	r1, #0
   a3908:	2006      	movs	r0, #6
   a390a:	4b48      	ldr	r3, [pc, #288]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a390c:	4798      	blx	r3
   a390e:	4603      	mov	r3, r0
   a3910:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a3912:	2100      	movs	r1, #0
   a3914:	2029      	movs	r0, #41	; 0x29
   a3916:	4b45      	ldr	r3, [pc, #276]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3918:	4798      	blx	r3
   a391a:	4603      	mov	r3, r0
   a391c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a391e:	2100      	movs	r1, #0
   a3920:	202b      	movs	r0, #43	; 0x2b
   a3922:	4b42      	ldr	r3, [pc, #264]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3924:	4798      	blx	r3
   a3926:	4603      	mov	r3, r0
   a3928:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a392a:	2100      	movs	r1, #0
   a392c:	2003      	movs	r0, #3
   a392e:	4b3f      	ldr	r3, [pc, #252]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3930:	4798      	blx	r3
   a3932:	4603      	mov	r3, r0
   a3934:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a3936:	2100      	movs	r1, #0
   a3938:	2004      	movs	r0, #4
   a393a:	4b3c      	ldr	r3, [pc, #240]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a393c:	4798      	blx	r3
   a393e:	4603      	mov	r3, r0
   a3940:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a3942:	2100      	movs	r1, #0
   a3944:	2015      	movs	r0, #21
   a3946:	4b39      	ldr	r3, [pc, #228]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3948:	4798      	blx	r3
   a394a:	4603      	mov	r3, r0
   a394c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a394e:	2100      	movs	r1, #0
   a3950:	2016      	movs	r0, #22
   a3952:	4b36      	ldr	r3, [pc, #216]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3954:	4798      	blx	r3
   a3956:	4603      	mov	r3, r0
   a3958:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a395a:	2100      	movs	r1, #0
   a395c:	2017      	movs	r0, #23
   a395e:	4b33      	ldr	r3, [pc, #204]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3960:	4798      	blx	r3
   a3962:	4603      	mov	r3, r0
   a3964:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a3966:	2100      	movs	r1, #0
   a3968:	2018      	movs	r0, #24
   a396a:	4b30      	ldr	r3, [pc, #192]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a396c:	4798      	blx	r3
   a396e:	4603      	mov	r3, r0
   a3970:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a3972:	2100      	movs	r1, #0
   a3974:	2027      	movs	r0, #39	; 0x27
   a3976:	4b2d      	ldr	r3, [pc, #180]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3978:	4798      	blx	r3
   a397a:	4603      	mov	r3, r0
   a397c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   a397e:	2100      	movs	r1, #0
   a3980:	2028      	movs	r0, #40	; 0x28
   a3982:	4b2a      	ldr	r3, [pc, #168]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3984:	4798      	blx	r3
   a3986:	4603      	mov	r3, r0
   a3988:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   a398a:	2100      	movs	r1, #0
   a398c:	200f      	movs	r0, #15
   a398e:	4b27      	ldr	r3, [pc, #156]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3990:	4798      	blx	r3
   a3992:	4603      	mov	r3, r0
   a3994:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   a3996:	2100      	movs	r1, #0
   a3998:	2010      	movs	r0, #16
   a399a:	4b24      	ldr	r3, [pc, #144]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a399c:	4798      	blx	r3
   a399e:	4603      	mov	r3, r0
   a39a0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   a39a2:	2100      	movs	r1, #0
   a39a4:	2011      	movs	r0, #17
   a39a6:	4b21      	ldr	r3, [pc, #132]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39a8:	4798      	blx	r3
   a39aa:	4603      	mov	r3, r0
   a39ac:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   a39ae:	2100      	movs	r1, #0
   a39b0:	2012      	movs	r0, #18
   a39b2:	4b1e      	ldr	r3, [pc, #120]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39b4:	4798      	blx	r3
   a39b6:	4603      	mov	r3, r0
   a39b8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a39ba:	2100      	movs	r1, #0
   a39bc:	2013      	movs	r0, #19
   a39be:	4b1b      	ldr	r3, [pc, #108]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39c0:	4798      	blx	r3
   a39c2:	4603      	mov	r3, r0
   a39c4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a39c6:	2100      	movs	r1, #0
   a39c8:	2014      	movs	r0, #20
   a39ca:	4b18      	ldr	r3, [pc, #96]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39cc:	4798      	blx	r3
   a39ce:	4603      	mov	r3, r0
   a39d0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a39d2:	2100      	movs	r1, #0
   a39d4:	2008      	movs	r0, #8
   a39d6:	4b15      	ldr	r3, [pc, #84]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39d8:	4798      	blx	r3
   a39da:	4603      	mov	r3, r0
   a39dc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a39de:	2100      	movs	r1, #0
   a39e0:	2007      	movs	r0, #7
   a39e2:	4b12      	ldr	r3, [pc, #72]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39e4:	4798      	blx	r3
   a39e6:	4603      	mov	r3, r0
   a39e8:	71fb      	strb	r3, [r7, #7]
			Cl_AlarmActivateAlarms(BC_ALARM,false);
   a39ea:	2100      	movs	r1, #0
   a39ec:	201a      	movs	r0, #26
   a39ee:	4b0f      	ldr	r3, [pc, #60]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39f0:	4798      	blx	r3
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a39f2:	2100      	movs	r1, #0
   a39f4:	200c      	movs	r0, #12
   a39f6:	4b0d      	ldr	r3, [pc, #52]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a39f8:	4798      	blx	r3
   a39fa:	4603      	mov	r3, r0
   a39fc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a39fe:	2100      	movs	r1, #0
   a3a00:	200d      	movs	r0, #13
   a3a02:	4b0a      	ldr	r3, [pc, #40]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3a04:	4798      	blx	r3
   a3a06:	4603      	mov	r3, r0
   a3a08:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a3a0a:	2100      	movs	r1, #0
   a3a0c:	200e      	movs	r0, #14
   a3a0e:	4b07      	ldr	r3, [pc, #28]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3a10:	4798      	blx	r3
   a3a12:	4603      	mov	r3, r0
   a3a14:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,false );
   a3a16:	2100      	movs	r1, #0
   a3a18:	203f      	movs	r0, #63	; 0x3f
   a3a1a:	4b04      	ldr	r3, [pc, #16]	; (a3a2c <Cl_deactivate_prep_alarms+0x154>)
   a3a1c:	4798      	blx	r3
   a3a1e:	4603      	mov	r3, r0
   a3a20:	71fb      	strb	r3, [r7, #7]
	
	
	
}
   a3a22:	bf00      	nop
   a3a24:	4618      	mov	r0, r3
   a3a26:	3708      	adds	r7, #8
   a3a28:	46bd      	mov	sp, r7
   a3a2a:	bd80      	pop	{r7, pc}
   a3a2c:	000829e5 	.word	0x000829e5

000a3a30 <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false}                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   a3a30:	b580      	push	{r7, lr}
   a3a32:	b092      	sub	sp, #72	; 0x48
   a3a34:	af00      	add	r7, sp, #0
   a3a36:	4603      	mov	r3, r0
   a3a38:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a3a3a:	2300      	movs	r3, #0
   a3a3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   a3a40:	2300      	movs	r3, #0
   a3a42:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3a46:	2359      	movs	r3, #89	; 0x59
   a3a48:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a3a4c:	2300      	movs	r3, #0
   a3a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	Cl_Uint8Type data = 0;
   a3a50:	2300      	movs	r3, #0
   a3a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   a3a56:	2300      	movs	r3, #0
   a3a58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   a3a5c:	2300      	movs	r3, #0
   a3a5e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   a3a62:	2300      	movs	r3, #0
   a3a64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   a3a68:	2300      	movs	r3, #0
   a3a6a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a3a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a3a72:	2200      	movs	r2, #0
   a3a74:	601a      	str	r2, [r3, #0]
   a3a76:	711a      	strb	r2, [r3, #4]


cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   a3a78:	f107 0241 	add.w	r2, r7, #65	; 0x41
   a3a7c:	79fb      	ldrb	r3, [r7, #7]
   a3a7e:	4611      	mov	r1, r2
   a3a80:	4618      	mov	r0, r3
   a3a82:	4bb5      	ldr	r3, [pc, #724]	; (a3d58 <Cl_Rinse_Controller+0x328>)
   a3a84:	4798      	blx	r3

switch(cl_rinseevent)
   a3a86:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a3a8a:	3b21      	subs	r3, #33	; 0x21
   a3a8c:	2b3b      	cmp	r3, #59	; 0x3b
   a3a8e:	f200 8158 	bhi.w	a3d42 <Cl_Rinse_Controller+0x312>
   a3a92:	a201      	add	r2, pc, #4	; (adr r2, a3a98 <Cl_Rinse_Controller+0x68>)
   a3a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3a98:	000a3b89 	.word	0x000a3b89
   a3a9c:	000a3ba1 	.word	0x000a3ba1
   a3aa0:	000a3bdb 	.word	0x000a3bdb
   a3aa4:	000a3c19 	.word	0x000a3c19
   a3aa8:	000a3c79 	.word	0x000a3c79
   a3aac:	000a3c83 	.word	0x000a3c83
   a3ab0:	000a3d43 	.word	0x000a3d43
   a3ab4:	000a3bd5 	.word	0x000a3bd5
   a3ab8:	000a3d43 	.word	0x000a3d43
   a3abc:	000a3d43 	.word	0x000a3d43
   a3ac0:	000a3d43 	.word	0x000a3d43
   a3ac4:	000a3d43 	.word	0x000a3d43
   a3ac8:	000a3d43 	.word	0x000a3d43
   a3acc:	000a3d43 	.word	0x000a3d43
   a3ad0:	000a3d43 	.word	0x000a3d43
   a3ad4:	000a3d43 	.word	0x000a3d43
   a3ad8:	000a3d43 	.word	0x000a3d43
   a3adc:	000a3d43 	.word	0x000a3d43
   a3ae0:	000a3d43 	.word	0x000a3d43
   a3ae4:	000a3d43 	.word	0x000a3d43
   a3ae8:	000a3d43 	.word	0x000a3d43
   a3aec:	000a3d43 	.word	0x000a3d43
   a3af0:	000a3d43 	.word	0x000a3d43
   a3af4:	000a3d43 	.word	0x000a3d43
   a3af8:	000a3d43 	.word	0x000a3d43
   a3afc:	000a3d43 	.word	0x000a3d43
   a3b00:	000a3d43 	.word	0x000a3d43
   a3b04:	000a3d43 	.word	0x000a3d43
   a3b08:	000a3d43 	.word	0x000a3d43
   a3b0c:	000a3d43 	.word	0x000a3d43
   a3b10:	000a3d43 	.word	0x000a3d43
   a3b14:	000a3d43 	.word	0x000a3d43
   a3b18:	000a3d43 	.word	0x000a3d43
   a3b1c:	000a3d43 	.word	0x000a3d43
   a3b20:	000a3d43 	.word	0x000a3d43
   a3b24:	000a3d43 	.word	0x000a3d43
   a3b28:	000a3d43 	.word	0x000a3d43
   a3b2c:	000a3d43 	.word	0x000a3d43
   a3b30:	000a3d43 	.word	0x000a3d43
   a3b34:	000a3d43 	.word	0x000a3d43
   a3b38:	000a3d43 	.word	0x000a3d43
   a3b3c:	000a3d43 	.word	0x000a3d43
   a3b40:	000a3d43 	.word	0x000a3d43
   a3b44:	000a3d43 	.word	0x000a3d43
   a3b48:	000a3d43 	.word	0x000a3d43
   a3b4c:	000a3d43 	.word	0x000a3d43
   a3b50:	000a3d43 	.word	0x000a3d43
   a3b54:	000a3d43 	.word	0x000a3d43
   a3b58:	000a3d43 	.word	0x000a3d43
   a3b5c:	000a3d43 	.word	0x000a3d43
   a3b60:	000a3d43 	.word	0x000a3d43
   a3b64:	000a3d43 	.word	0x000a3d43
   a3b68:	000a3d43 	.word	0x000a3d43
   a3b6c:	000a3d43 	.word	0x000a3d43
   a3b70:	000a3d43 	.word	0x000a3d43
   a3b74:	000a3d43 	.word	0x000a3d43
   a3b78:	000a3d43 	.word	0x000a3d43
   a3b7c:	000a3d43 	.word	0x000a3d43
   a3b80:	000a3c8d 	.word	0x000a3c8d
   a3b84:	000a3ce9 	.word	0x000a3ce9
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   a3b88:	2101      	movs	r1, #1
   a3b8a:	2001      	movs	r0, #1
   a3b8c:	4b73      	ldr	r3, [pc, #460]	; (a3d5c <Cl_Rinse_Controller+0x32c>)
   a3b8e:	4798      	blx	r3
   a3b90:	4603      	mov	r3, r0
   a3b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
	cl_bp_controller(CL_BP_EVENT_START,0);
   a3b96:	2100      	movs	r1, #0
   a3b98:	2002      	movs	r0, #2
   a3b9a:	4b71      	ldr	r3, [pc, #452]	; (a3d60 <Cl_Rinse_Controller+0x330>)
   a3b9c:	4798      	blx	r3
	break;
   a3b9e:	e0f2      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   a3ba0:	2100      	movs	r1, #0
   a3ba2:	2001      	movs	r0, #1
   a3ba4:	4b6d      	ldr	r3, [pc, #436]	; (a3d5c <Cl_Rinse_Controller+0x32c>)
   a3ba6:	4798      	blx	r3
   a3ba8:	4603      	mov	r3, r0
   a3baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   a3bae:	2100      	movs	r1, #0
   a3bb0:	2004      	movs	r0, #4
   a3bb2:	4b6b      	ldr	r3, [pc, #428]	; (a3d60 <Cl_Rinse_Controller+0x330>)
   a3bb4:	4798      	blx	r3
	// manav02 added to stop saline priming if blood pump is stopped
	if(blood_flag == 1){
   a3bb6:	4b6b      	ldr	r3, [pc, #428]	; (a3d64 <Cl_Rinse_Controller+0x334>)
   a3bb8:	781b      	ldrb	r3, [r3, #0]
   a3bba:	b2db      	uxtb	r3, r3
   a3bbc:	2b01      	cmp	r3, #1
   a3bbe:	f040 80c2 	bne.w	a3d46 <Cl_Rinse_Controller+0x316>
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0); 
   a3bc2:	2100      	movs	r1, #0
   a3bc4:	2002      	movs	r0, #2
   a3bc6:	4b68      	ldr	r3, [pc, #416]	; (a3d68 <Cl_Rinse_Controller+0x338>)
   a3bc8:	4798      	blx	r3
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
   a3bca:	2101      	movs	r1, #1
   a3bcc:	203f      	movs	r0, #63	; 0x3f
   a3bce:	4b67      	ldr	r3, [pc, #412]	; (a3d6c <Cl_Rinse_Controller+0x33c>)
   a3bd0:	4798      	blx	r3
	}
		
	
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   a3bd2:	e0b8      	b.n	a3d46 <Cl_Rinse_Controller+0x316>
	
	case EVT_RINSE_MUTE :
	sv_cntrl_nobuzzer();
   a3bd4:	4b66      	ldr	r3, [pc, #408]	; (a3d70 <Cl_Rinse_Controller+0x340>)
   a3bd6:	4798      	blx	r3
	break;
   a3bd8:	e0d5      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
	
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   a3bda:	4b66      	ldr	r3, [pc, #408]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3bdc:	7e1b      	ldrb	r3, [r3, #24]
   a3bde:	2b00      	cmp	r3, #0
   a3be0:	f000 80b3 	beq.w	a3d4a <Cl_Rinse_Controller+0x31a>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a3be4:	4b63      	ldr	r3, [pc, #396]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3be6:	791b      	ldrb	r3, [r3, #4]
   a3be8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a3bec:	4b61      	ldr	r3, [pc, #388]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3bee:	795b      	ldrb	r3, [r3, #5]
   a3bf0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a3bf4:	4b5f      	ldr	r3, [pc, #380]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3bf6:	799b      	ldrb	r3, [r3, #6]
   a3bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a3bfc:	4b5d      	ldr	r3, [pc, #372]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3bfe:	79db      	ldrb	r3, [r3, #7]
   a3c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a3c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a3c06:	4619      	mov	r1, r3
   a3c08:	2001      	movs	r0, #1
   a3c0a:	4b55      	ldr	r3, [pc, #340]	; (a3d60 <Cl_Rinse_Controller+0x330>)
   a3c0c:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a3c0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a3c10:	461a      	mov	r2, r3
   a3c12:	4b59      	ldr	r3, [pc, #356]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3c14:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   a3c16:	e098      	b.n	a3d4a <Cl_Rinse_Controller+0x31a>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   a3c18:	4b56      	ldr	r3, [pc, #344]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c1a:	7e1b      	ldrb	r3, [r3, #24]
   a3c1c:	2b00      	cmp	r3, #0
   a3c1e:	f000 8096 	beq.w	a3d4e <Cl_Rinse_Controller+0x31e>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a3c22:	4b54      	ldr	r3, [pc, #336]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c24:	795b      	ldrb	r3, [r3, #5]
   a3c26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a3c2a:	4b52      	ldr	r3, [pc, #328]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c2c:	799b      	ldrb	r3, [r3, #6]
   a3c2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a3c32:	4b50      	ldr	r3, [pc, #320]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c34:	79db      	ldrb	r3, [r3, #7]
   a3c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a3c3a:	4b4e      	ldr	r3, [pc, #312]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c3c:	7a1b      	ldrb	r3, [r3, #8]
   a3c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   a3c42:	4b4c      	ldr	r3, [pc, #304]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c44:	791b      	ldrb	r3, [r3, #4]
   a3c46:	2b01      	cmp	r3, #1
   a3c48:	d104      	bne.n	a3c54 <Cl_Rinse_Controller+0x224>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   a3c4a:	2100      	movs	r1, #0
   a3c4c:	2001      	movs	r0, #1
   a3c4e:	4b4b      	ldr	r3, [pc, #300]	; (a3d7c <Cl_Rinse_Controller+0x34c>)
   a3c50:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a3c52:	e07c      	b.n	a3d4e <Cl_Rinse_Controller+0x31e>
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   a3c54:	4b47      	ldr	r3, [pc, #284]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c56:	791b      	ldrb	r3, [r3, #4]
   a3c58:	2b02      	cmp	r3, #2
   a3c5a:	d104      	bne.n	a3c66 <Cl_Rinse_Controller+0x236>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   a3c5c:	2100      	movs	r1, #0
   a3c5e:	2004      	movs	r0, #4
   a3c60:	4b46      	ldr	r3, [pc, #280]	; (a3d7c <Cl_Rinse_Controller+0x34c>)
   a3c62:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a3c64:	e073      	b.n	a3d4e <Cl_Rinse_Controller+0x31e>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   a3c66:	4b43      	ldr	r3, [pc, #268]	; (a3d74 <Cl_Rinse_Controller+0x344>)
   a3c68:	791b      	ldrb	r3, [r3, #4]
   a3c6a:	2b00      	cmp	r3, #0
   a3c6c:	d16f      	bne.n	a3d4e <Cl_Rinse_Controller+0x31e>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   a3c6e:	2100      	movs	r1, #0
   a3c70:	200b      	movs	r0, #11
   a3c72:	4b42      	ldr	r3, [pc, #264]	; (a3d7c <Cl_Rinse_Controller+0x34c>)
   a3c74:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a3c76:	e06a      	b.n	a3d4e <Cl_Rinse_Controller+0x31e>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   a3c78:	2100      	movs	r1, #0
   a3c7a:	200d      	movs	r0, #13
   a3c7c:	4b3f      	ldr	r3, [pc, #252]	; (a3d7c <Cl_Rinse_Controller+0x34c>)
   a3c7e:	4798      	blx	r3
	break;
   a3c80:	e081      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   a3c82:	2100      	movs	r1, #0
   a3c84:	2007      	movs	r0, #7
   a3c86:	4b3d      	ldr	r3, [pc, #244]	; (a3d7c <Cl_Rinse_Controller+0x34c>)
   a3c88:	4798      	blx	r3
	break;
   a3c8a:	e07c      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
	
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   a3c8c:	4b3a      	ldr	r3, [pc, #232]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3c90:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a3c94:	d85d      	bhi.n	a3d52 <Cl_Rinse_Controller+0x322>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a3c96:	4b38      	ldr	r3, [pc, #224]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3c9a:	330a      	adds	r3, #10
   a3c9c:	4a36      	ldr	r2, [pc, #216]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3c9e:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a3ca0:	4b35      	ldr	r3, [pc, #212]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3ca4:	4619      	mov	r1, r3
   a3ca6:	2001      	movs	r0, #1
   a3ca8:	4b2d      	ldr	r3, [pc, #180]	; (a3d60 <Cl_Rinse_Controller+0x330>)
   a3caa:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a3cac:	230f      	movs	r3, #15
   a3cae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a3cb2:	4b31      	ldr	r3, [pc, #196]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3cb6:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a3cb8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a3cbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a3cc0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a3cc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a3cc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a3ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a3cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a3cd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a3cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a3cdc:	2205      	movs	r2, #5
   a3cde:	4619      	mov	r1, r3
   a3ce0:	202a      	movs	r0, #42	; 0x2a
   a3ce2:	4b27      	ldr	r3, [pc, #156]	; (a3d80 <Cl_Rinse_Controller+0x350>)
   a3ce4:	4798      	blx	r3
			
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a3ce6:	e034      	b.n	a3d52 <Cl_Rinse_Controller+0x322>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   a3ce8:	4b23      	ldr	r3, [pc, #140]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3cec:	2b63      	cmp	r3, #99	; 0x63
   a3cee:	d949      	bls.n	a3d84 <Cl_Rinse_Controller+0x354>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a3cf0:	4b21      	ldr	r3, [pc, #132]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3cf4:	3b0a      	subs	r3, #10
   a3cf6:	4a20      	ldr	r2, [pc, #128]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3cf8:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a3cfa:	4b1f      	ldr	r3, [pc, #124]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3cfe:	4619      	mov	r1, r3
   a3d00:	2001      	movs	r0, #1
   a3d02:	4b17      	ldr	r3, [pc, #92]	; (a3d60 <Cl_Rinse_Controller+0x330>)
   a3d04:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a3d06:	230f      	movs	r3, #15
   a3d08:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a3d0c:	4b1a      	ldr	r3, [pc, #104]	; (a3d78 <Cl_Rinse_Controller+0x348>)
   a3d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a3d10:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a3d12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a3d16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a3d1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a3d1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a3d22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a3d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a3d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a3d2e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a3d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a3d36:	2205      	movs	r2, #5
   a3d38:	4619      	mov	r1, r3
   a3d3a:	202a      	movs	r0, #42	; 0x2a
   a3d3c:	4b10      	ldr	r3, [pc, #64]	; (a3d80 <Cl_Rinse_Controller+0x350>)
   a3d3e:	4798      	blx	r3
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a3d40:	e020      	b.n	a3d84 <Cl_Rinse_Controller+0x354>
		
	
	
	default:break;	
   a3d42:	bf00      	nop
   a3d44:	e01f      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
		Cl_Alarm_TriggerAlarm(BP_STOPPED,1);
	}
		
	
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   a3d46:	bf00      	nop
   a3d48:	e01d      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
	}
	break;
   a3d4a:	bf00      	nop
   a3d4c:	e01b      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
		}
				
	}
			
			
	break;
   a3d4e:	bf00      	nop
   a3d50:	e019      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a3d52:	bf00      	nop
   a3d54:	e017      	b.n	a3d86 <Cl_Rinse_Controller+0x356>
   a3d56:	bf00      	nop
   a3d58:	000a50c1 	.word	0x000a50c1
   a3d5c:	000829e5 	.word	0x000829e5
   a3d60:	00093f5d 	.word	0x00093f5d
   a3d64:	20071b8c 	.word	0x20071b8c
   a3d68:	00088019 	.word	0x00088019
   a3d6c:	00082c31 	.word	0x00082c31
   a3d70:	0009b0b9 	.word	0x0009b0b9
   a3d74:	20072350 	.word	0x20072350
   a3d78:	20072614 	.word	0x20072614
   a3d7c:	00094729 	.word	0x00094729
   a3d80:	0009cbd5 	.word	0x0009cbd5
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a3d84:	bf00      	nop
	
	
	default:break;	
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   a3d86:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a3d8a:	2b12      	cmp	r3, #18
   a3d8c:	d10f      	bne.n	a3dae <Cl_Rinse_Controller+0x37e>
{
	Rinsestatedummy = cl_rinsestate;
   a3d8e:	4bce      	ldr	r3, [pc, #824]	; (a40c8 <Cl_Rinse_Controller+0x698>)
   a3d90:	781a      	ldrb	r2, [r3, #0]
   a3d92:	4bce      	ldr	r3, [pc, #824]	; (a40cc <Cl_Rinse_Controller+0x69c>)
   a3d94:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   a3d96:	203d      	movs	r0, #61	; 0x3d
   a3d98:	4bcd      	ldr	r3, [pc, #820]	; (a40d0 <Cl_Rinse_Controller+0x6a0>)
   a3d9a:	4798      	blx	r3
   a3d9c:	4603      	mov	r3, r0
   a3d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   a3da2:	203e      	movs	r0, #62	; 0x3e
   a3da4:	4bca      	ldr	r3, [pc, #808]	; (a40d0 <Cl_Rinse_Controller+0x6a0>)
   a3da6:	4798      	blx	r3
   a3da8:	4603      	mov	r3, r0
   a3daa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


}


switch(cl_rinsestate)
   a3dae:	4bc6      	ldr	r3, [pc, #792]	; (a40c8 <Cl_Rinse_Controller+0x698>)
   a3db0:	781b      	ldrb	r3, [r3, #0]
   a3db2:	2b09      	cmp	r3, #9
   a3db4:	f201 80ca 	bhi.w	a4f4c <Cl_Rinse_Controller+0x151c>
   a3db8:	a201      	add	r2, pc, #4	; (adr r2, a3dc0 <Cl_Rinse_Controller+0x390>)
   a3dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3dbe:	bf00      	nop
   a3dc0:	000a3de9 	.word	0x000a3de9
   a3dc4:	000a505d 	.word	0x000a505d
   a3dc8:	000a4f4d 	.word	0x000a4f4d
   a3dcc:	000a401b 	.word	0x000a401b
   a3dd0:	000a401b 	.word	0x000a401b
   a3dd4:	000a401b 	.word	0x000a401b
   a3dd8:	000a475d 	.word	0x000a475d
   a3ddc:	000a4f4d 	.word	0x000a4f4d
   a3de0:	000a4f4d 	.word	0x000a4f4d
   a3de4:	000a4b31 	.word	0x000a4b31
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   a3de8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a3dec:	3b01      	subs	r3, #1
   a3dee:	2b16      	cmp	r3, #22
   a3df0:	f200 810d 	bhi.w	a400e <Cl_Rinse_Controller+0x5de>
   a3df4:	a201      	add	r2, pc, #4	; (adr r2, a3dfc <Cl_Rinse_Controller+0x3cc>)
   a3df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3dfa:	bf00      	nop
   a3dfc:	000a3fdb 	.word	0x000a3fdb
   a3e00:	000a3f1f 	.word	0x000a3f1f
   a3e04:	000a400f 	.word	0x000a400f
   a3e08:	000a3fab 	.word	0x000a3fab
   a3e0c:	000a3fbd 	.word	0x000a3fbd
   a3e10:	000a400f 	.word	0x000a400f
   a3e14:	000a400f 	.word	0x000a400f
   a3e18:	000a400f 	.word	0x000a400f
   a3e1c:	000a400f 	.word	0x000a400f
   a3e20:	000a400f 	.word	0x000a400f
   a3e24:	000a400f 	.word	0x000a400f
   a3e28:	000a400f 	.word	0x000a400f
   a3e2c:	000a400f 	.word	0x000a400f
   a3e30:	000a400f 	.word	0x000a400f
   a3e34:	000a400f 	.word	0x000a400f
   a3e38:	000a400f 	.word	0x000a400f
   a3e3c:	000a400f 	.word	0x000a400f
   a3e40:	000a400f 	.word	0x000a400f
   a3e44:	000a400f 	.word	0x000a400f
   a3e48:	000a400f 	.word	0x000a400f
   a3e4c:	000a400f 	.word	0x000a400f
   a3e50:	000a3fcf 	.word	0x000a3fcf
   a3e54:	000a3e59 	.word	0x000a3e59
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   a3e58:	4b9e      	ldr	r3, [pc, #632]	; (a40d4 <Cl_Rinse_Controller+0x6a4>)
   a3e5a:	7e1b      	ldrb	r3, [r3, #24]
   a3e5c:	2b00      	cmp	r3, #0
   a3e5e:	f000 80d9 	beq.w	a4014 <Cl_Rinse_Controller+0x5e4>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   a3e62:	4b9c      	ldr	r3, [pc, #624]	; (a40d4 <Cl_Rinse_Controller+0x6a4>)
   a3e64:	791b      	ldrb	r3, [r3, #4]
   a3e66:	2b02      	cmp	r3, #2
   a3e68:	d020      	beq.n	a3eac <Cl_Rinse_Controller+0x47c>
   a3e6a:	2b21      	cmp	r3, #33	; 0x21
   a3e6c:	d03a      	beq.n	a3ee4 <Cl_Rinse_Controller+0x4b4>
   a3e6e:	2b01      	cmp	r3, #1
   a3e70:	d000      	beq.n	a3e74 <Cl_Rinse_Controller+0x444>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   a3e72:	e053      	b.n	a3f1c <Cl_Rinse_Controller+0x4ec>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a3e74:	2316      	movs	r3, #22
   a3e76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a3e7a:	2301      	movs	r3, #1
   a3e7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a3e80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3e84:	3301      	adds	r3, #1
   a3e86:	4619      	mov	r1, r3
   a3e88:	2001      	movs	r0, #1
   a3e8a:	4b93      	ldr	r3, [pc, #588]	; (a40d8 <Cl_Rinse_Controller+0x6a8>)
   a3e8c:	4798      	blx	r3
   a3e8e:	4603      	mov	r3, r0
   a3e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a3e94:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3e98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3e9c:	2202      	movs	r2, #2
   a3e9e:	4618      	mov	r0, r3
   a3ea0:	4b8e      	ldr	r3, [pc, #568]	; (a40dc <Cl_Rinse_Controller+0x6ac>)
   a3ea2:	4798      	blx	r3
   a3ea4:	4603      	mov	r3, r0
   a3ea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								break;
   a3eaa:	e037      	b.n	a3f1c <Cl_Rinse_Controller+0x4ec>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a3eac:	2316      	movs	r3, #22
   a3eae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a3eb2:	2302      	movs	r3, #2
   a3eb4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a3eb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3ebc:	3301      	adds	r3, #1
   a3ebe:	4619      	mov	r1, r3
   a3ec0:	2002      	movs	r0, #2
   a3ec2:	4b85      	ldr	r3, [pc, #532]	; (a40d8 <Cl_Rinse_Controller+0x6a8>)
   a3ec4:	4798      	blx	r3
   a3ec6:	4603      	mov	r3, r0
   a3ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a3ecc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3ed0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3ed4:	2202      	movs	r2, #2
   a3ed6:	4618      	mov	r0, r3
   a3ed8:	4b80      	ldr	r3, [pc, #512]	; (a40dc <Cl_Rinse_Controller+0x6ac>)
   a3eda:	4798      	blx	r3
   a3edc:	4603      	mov	r3, r0
   a3ede:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;
   a3ee2:	e01b      	b.n	a3f1c <Cl_Rinse_Controller+0x4ec>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a3ee4:	2316      	movs	r3, #22
   a3ee6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a3eea:	2323      	movs	r3, #35	; 0x23
   a3eec:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a3ef0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3ef4:	3301      	adds	r3, #1
   a3ef6:	4619      	mov	r1, r3
   a3ef8:	2028      	movs	r0, #40	; 0x28
   a3efa:	4b77      	ldr	r3, [pc, #476]	; (a40d8 <Cl_Rinse_Controller+0x6a8>)
   a3efc:	4798      	blx	r3
   a3efe:	4603      	mov	r3, r0
   a3f00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a3f04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3f08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3f0c:	2202      	movs	r2, #2
   a3f0e:	4618      	mov	r0, r3
   a3f10:	4b72      	ldr	r3, [pc, #456]	; (a40dc <Cl_Rinse_Controller+0x6ac>)
   a3f12:	4798      	blx	r3
   a3f14:	4603      	mov	r3, r0
   a3f16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;							
   a3f1a:	bf00      	nop
								default:
								break;
							}
						}
				break;
   a3f1c:	e07a      	b.n	a4014 <Cl_Rinse_Controller+0x5e4>
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a3f1e:	4b6d      	ldr	r3, [pc, #436]	; (a40d4 <Cl_Rinse_Controller+0x6a4>)
   a3f20:	7e1b      	ldrb	r3, [r3, #24]
   a3f22:	2b00      	cmp	r3, #0
   a3f24:	d00e      	beq.n	a3f44 <Cl_Rinse_Controller+0x514>
					{
//						cl_Datastreamtype cl_temp  ;

						cl_local.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a3f26:	4b6b      	ldr	r3, [pc, #428]	; (a40d4 <Cl_Rinse_Controller+0x6a4>)
   a3f28:	791a      	ldrb	r2, [r3, #4]
   a3f2a:	4b6d      	ldr	r3, [pc, #436]	; (a40e0 <Cl_Rinse_Controller+0x6b0>)
   a3f2c:	701a      	strb	r2, [r3, #0]
						if (cl_local.bytearray[0] == 1)
   a3f2e:	4b6c      	ldr	r3, [pc, #432]	; (a40e0 <Cl_Rinse_Controller+0x6b0>)
   a3f30:	781b      	ldrb	r3, [r3, #0]
   a3f32:	2b01      	cmp	r3, #1
   a3f34:	d006      	beq.n	a3f44 <Cl_Rinse_Controller+0x514>
						{
						
						}
						else if (cl_local.bytearray[0] == 2)
   a3f36:	4b6a      	ldr	r3, [pc, #424]	; (a40e0 <Cl_Rinse_Controller+0x6b0>)
   a3f38:	781b      	ldrb	r3, [r3, #0]
   a3f3a:	2b02      	cmp	r3, #2
   a3f3c:	d102      	bne.n	a3f44 <Cl_Rinse_Controller+0x514>
						{
							hotrinse_flag = 1;
   a3f3e:	4b69      	ldr	r3, [pc, #420]	; (a40e4 <Cl_Rinse_Controller+0x6b4>)
   a3f40:	2201      	movs	r2, #1
   a3f42:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   a3f44:	4b68      	ldr	r3, [pc, #416]	; (a40e8 <Cl_Rinse_Controller+0x6b8>)
   a3f46:	4798      	blx	r3
   a3f48:	4603      	mov	r3, r0
   a3f4a:	2b00      	cmp	r3, #0
   a3f4c:	d12a      	bne.n	a3fa4 <Cl_Rinse_Controller+0x574>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   a3f4e:	2308      	movs	r3, #8
   a3f50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a3f54:	2301      	movs	r3, #1
   a3f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a3f5a:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a3f5e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3f62:	2201      	movs	r2, #1
   a3f64:	4618      	mov	r0, r3
   a3f66:	4b5d      	ldr	r3, [pc, #372]	; (a40dc <Cl_Rinse_Controller+0x6ac>)
   a3f68:	4798      	blx	r3
   a3f6a:	4603      	mov	r3, r0
   a3f6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						command = CON_TX_COMMAND_RINSE_STARTED;
   a3f70:	2309      	movs	r3, #9
   a3f72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a3f76:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a3f7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3f7e:	2200      	movs	r2, #0
   a3f80:	4618      	mov	r0, r3
   a3f82:	4b56      	ldr	r3, [pc, #344]	; (a40dc <Cl_Rinse_Controller+0x6ac>)
   a3f84:	4798      	blx	r3
   a3f86:	4603      	mov	r3, r0
   a3f88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a3f8c:	4b57      	ldr	r3, [pc, #348]	; (a40ec <Cl_Rinse_Controller+0x6bc>)
   a3f8e:	4798      	blx	r3
   a3f90:	4603      	mov	r3, r0
   a3f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a3f96:	4b4c      	ldr	r3, [pc, #304]	; (a40c8 <Cl_Rinse_Controller+0x698>)
   a3f98:	2203      	movs	r2, #3
   a3f9a:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3f9c:	4b54      	ldr	r3, [pc, #336]	; (a40f0 <Cl_Rinse_Controller+0x6c0>)
   a3f9e:	2201      	movs	r2, #1
   a3fa0:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   a3fa2:	e038      	b.n	a4016 <Cl_Rinse_Controller+0x5e6>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   a3fa4:	2303      	movs	r3, #3
   a3fa6:	f001 b85e 	b.w	a5066 <Cl_Rinse_Controller+0x1636>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   a3faa:	4b4f      	ldr	r3, [pc, #316]	; (a40e8 <Cl_Rinse_Controller+0x6b8>)
   a3fac:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a3fae:	4b46      	ldr	r3, [pc, #280]	; (a40c8 <Cl_Rinse_Controller+0x698>)
   a3fb0:	2204      	movs	r2, #4
   a3fb2:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3fb4:	4b4e      	ldr	r3, [pc, #312]	; (a40f0 <Cl_Rinse_Controller+0x6c0>)
   a3fb6:	2201      	movs	r2, #1
   a3fb8:	701a      	strb	r2, [r3, #0]
				break;
   a3fba:	e02c      	b.n	a4016 <Cl_Rinse_Controller+0x5e6>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a3fbc:	4b4a      	ldr	r3, [pc, #296]	; (a40e8 <Cl_Rinse_Controller+0x6b8>)
   a3fbe:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a3fc0:	4b41      	ldr	r3, [pc, #260]	; (a40c8 <Cl_Rinse_Controller+0x698>)
   a3fc2:	2205      	movs	r2, #5
   a3fc4:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3fc6:	4b4a      	ldr	r3, [pc, #296]	; (a40f0 <Cl_Rinse_Controller+0x6c0>)
   a3fc8:	2201      	movs	r2, #1
   a3fca:	701a      	strb	r2, [r3, #0]
				break;
   a3fcc:	e023      	b.n	a4016 <Cl_Rinse_Controller+0x5e6>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a3fce:	4b49      	ldr	r3, [pc, #292]	; (a40f4 <Cl_Rinse_Controller+0x6c4>)
   a3fd0:	4798      	blx	r3
   a3fd2:	4603      	mov	r3, r0
   a3fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   a3fd8:	e01d      	b.n	a4016 <Cl_Rinse_Controller+0x5e6>
				
					case EVENT_RINSE_CLR_ALARM:
						
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a3fda:	2351      	movs	r3, #81	; 0x51
   a3fdc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a3fe0:	2301      	movs	r3, #1
   a3fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a3fe6:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a3fea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3fee:	2200      	movs	r2, #0
   a3ff0:	4618      	mov	r0, r3
   a3ff2:	4b3a      	ldr	r3, [pc, #232]	; (a40dc <Cl_Rinse_Controller+0x6ac>)
   a3ff4:	4798      	blx	r3
   a3ff6:	4603      	mov	r3, r0
   a3ff8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
										sv_cntrl_resetyellowalarm();
   a3ffc:	4b3e      	ldr	r3, [pc, #248]	; (a40f8 <Cl_Rinse_Controller+0x6c8>)
   a3ffe:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a4000:	4b3e      	ldr	r3, [pc, #248]	; (a40fc <Cl_Rinse_Controller+0x6cc>)
   a4002:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a4004:	4b3e      	ldr	r3, [pc, #248]	; (a4100 <Cl_Rinse_Controller+0x6d0>)
   a4006:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a4008:	4b3e      	ldr	r3, [pc, #248]	; (a4104 <Cl_Rinse_Controller+0x6d4>)
   a400a:	4798      	blx	r3
										
						break;
   a400c:	e003      	b.n	a4016 <Cl_Rinse_Controller+0x5e6>
				
				default:
				break;
   a400e:	bf00      	nop
   a4010:	f001 b827 	b.w	a5062 <Cl_Rinse_Controller+0x1632>
								break;							
								default:
								break;
							}
						}
				break;
   a4014:	bf00      	nop
						break;
				
				default:
				break;
			}                                 	
		break;
   a4016:	f001 b824 	b.w	a5062 <Cl_Rinse_Controller+0x1632>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   a401a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a401e:	3b01      	subs	r3, #1
   a4020:	2b26      	cmp	r3, #38	; 0x26
   a4022:	f201 801d 	bhi.w	a5060 <Cl_Rinse_Controller+0x1630>
   a4026:	a201      	add	r2, pc, #4	; (adr r2, a402c <Cl_Rinse_Controller+0x5fc>)
   a4028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a402c:	000a467d 	.word	0x000a467d
   a4030:	000a5061 	.word	0x000a5061
   a4034:	000a5061 	.word	0x000a5061
   a4038:	000a5061 	.word	0x000a5061
   a403c:	000a5061 	.word	0x000a5061
   a4040:	000a44fd 	.word	0x000a44fd
   a4044:	000a5061 	.word	0x000a5061
   a4048:	000a5061 	.word	0x000a5061
   a404c:	000a5061 	.word	0x000a5061
   a4050:	000a5061 	.word	0x000a5061
   a4054:	000a5061 	.word	0x000a5061
   a4058:	000a5061 	.word	0x000a5061
   a405c:	000a5061 	.word	0x000a5061
   a4060:	000a5061 	.word	0x000a5061
   a4064:	000a4109 	.word	0x000a4109
   a4068:	000a5061 	.word	0x000a5061
   a406c:	000a4131 	.word	0x000a4131
   a4070:	000a41ad 	.word	0x000a41ad
   a4074:	000a43f9 	.word	0x000a43f9
   a4078:	000a44e7 	.word	0x000a44e7
   a407c:	000a450f 	.word	0x000a450f
   a4080:	000a4503 	.word	0x000a4503
   a4084:	000a5061 	.word	0x000a5061
   a4088:	000a5061 	.word	0x000a5061
   a408c:	000a45c5 	.word	0x000a45c5
   a4090:	000a4543 	.word	0x000a4543
   a4094:	000a455d 	.word	0x000a455d
   a4098:	000a4639 	.word	0x000a4639
   a409c:	000a4643 	.word	0x000a4643
   a40a0:	000a464d 	.word	0x000a464d
   a40a4:	000a456d 	.word	0x000a456d
   a40a8:	000a4591 	.word	0x000a4591
   a40ac:	000a45a5 	.word	0x000a45a5
   a40b0:	000a45b5 	.word	0x000a45b5
   a40b4:	000a5061 	.word	0x000a5061
   a40b8:	000a5061 	.word	0x000a5061
   a40bc:	000a5061 	.word	0x000a5061
   a40c0:	000a5061 	.word	0x000a5061
   a40c4:	000a4731 	.word	0x000a4731
   a40c8:	20071b92 	.word	0x20071b92
   a40cc:	20072568 	.word	0x20072568
   a40d0:	00082ad9 	.word	0x00082ad9
   a40d4:	20072350 	.word	0x20072350
   a40d8:	0009b701 	.word	0x0009b701
   a40dc:	0009cbd5 	.word	0x0009cbd5
   a40e0:	200727e8 	.word	0x200727e8
   a40e4:	20071bb5 	.word	0x20071bb5
   a40e8:	000a5ed9 	.word	0x000a5ed9
   a40ec:	000a545d 	.word	0x000a545d
   a40f0:	20071b93 	.word	0x20071b93
   a40f4:	000a5715 	.word	0x000a5715
   a40f8:	0009b091 	.word	0x0009b091
   a40fc:	0009b07d 	.word	0x0009b07d
   a4100:	0009b0b9 	.word	0x0009b0b9
   a4104:	000a573d 	.word	0x000a573d
// 										break;
// 									}
// 								}
// 						break;
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   a4108:	4b9b      	ldr	r3, [pc, #620]	; (a4378 <Cl_Rinse_Controller+0x948>)
   a410a:	781b      	ldrb	r3, [r3, #0]
   a410c:	2b02      	cmp	r3, #2
   a410e:	f040 8313 	bne.w	a4738 <Cl_Rinse_Controller+0xd08>
						{
									cl_50ms_timer++;
   a4112:	4b9a      	ldr	r3, [pc, #616]	; (a437c <Cl_Rinse_Controller+0x94c>)
   a4114:	881b      	ldrh	r3, [r3, #0]
   a4116:	3301      	adds	r3, #1
   a4118:	b29a      	uxth	r2, r3
   a411a:	4b98      	ldr	r3, [pc, #608]	; (a437c <Cl_Rinse_Controller+0x94c>)
   a411c:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   a411e:	4b97      	ldr	r3, [pc, #604]	; (a437c <Cl_Rinse_Controller+0x94c>)
   a4120:	881b      	ldrh	r3, [r3, #0]
   a4122:	2b02      	cmp	r3, #2
   a4124:	f040 8308 	bne.w	a4738 <Cl_Rinse_Controller+0xd08>
									{
										cl_50ms_timer =0;
   a4128:	4b94      	ldr	r3, [pc, #592]	; (a437c <Cl_Rinse_Controller+0x94c>)
   a412a:	2200      	movs	r2, #0
   a412c:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						} 
																	
						break;
   a412e:	e303      	b.n	a4738 <Cl_Rinse_Controller+0xd08>
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   a4130:	4b93      	ldr	r3, [pc, #588]	; (a4380 <Cl_Rinse_Controller+0x950>)
   a4132:	681a      	ldr	r2, [r3, #0]
   a4134:	4b93      	ldr	r3, [pc, #588]	; (a4384 <Cl_Rinse_Controller+0x954>)
   a4136:	4994      	ldr	r1, [pc, #592]	; (a4388 <Cl_Rinse_Controller+0x958>)
   a4138:	4610      	mov	r0, r2
   a413a:	4798      	blx	r3
   a413c:	4603      	mov	r3, r0
   a413e:	2b00      	cmp	r3, #0
   a4140:	d00d      	beq.n	a415e <Cl_Rinse_Controller+0x72e>
   a4142:	4b8f      	ldr	r3, [pc, #572]	; (a4380 <Cl_Rinse_Controller+0x950>)
   a4144:	681a      	ldr	r2, [r3, #0]
   a4146:	4b91      	ldr	r3, [pc, #580]	; (a438c <Cl_Rinse_Controller+0x95c>)
   a4148:	4991      	ldr	r1, [pc, #580]	; (a4390 <Cl_Rinse_Controller+0x960>)
   a414a:	4610      	mov	r0, r2
   a414c:	4798      	blx	r3
   a414e:	4603      	mov	r3, r0
   a4150:	2b00      	cmp	r3, #0
   a4152:	d004      	beq.n	a415e <Cl_Rinse_Controller+0x72e>
							{
								sv_cntrl_decheater(2200);
   a4154:	f640 0098 	movw	r0, #2200	; 0x898
   a4158:	4b8e      	ldr	r3, [pc, #568]	; (a4394 <Cl_Rinse_Controller+0x964>)
   a415a:	4798      	blx	r3
   a415c:	e025      	b.n	a41aa <Cl_Rinse_Controller+0x77a>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   a415e:	4b88      	ldr	r3, [pc, #544]	; (a4380 <Cl_Rinse_Controller+0x950>)
   a4160:	681a      	ldr	r2, [r3, #0]
   a4162:	4b88      	ldr	r3, [pc, #544]	; (a4384 <Cl_Rinse_Controller+0x954>)
   a4164:	498a      	ldr	r1, [pc, #552]	; (a4390 <Cl_Rinse_Controller+0x960>)
   a4166:	4610      	mov	r0, r2
   a4168:	4798      	blx	r3
   a416a:	4603      	mov	r3, r0
   a416c:	2b00      	cmp	r3, #0
   a416e:	d00d      	beq.n	a418c <Cl_Rinse_Controller+0x75c>
   a4170:	4b83      	ldr	r3, [pc, #524]	; (a4380 <Cl_Rinse_Controller+0x950>)
   a4172:	681a      	ldr	r2, [r3, #0]
   a4174:	4b85      	ldr	r3, [pc, #532]	; (a438c <Cl_Rinse_Controller+0x95c>)
   a4176:	4988      	ldr	r1, [pc, #544]	; (a4398 <Cl_Rinse_Controller+0x968>)
   a4178:	4610      	mov	r0, r2
   a417a:	4798      	blx	r3
   a417c:	4603      	mov	r3, r0
   a417e:	2b00      	cmp	r3, #0
   a4180:	d004      	beq.n	a418c <Cl_Rinse_Controller+0x75c>
							{
								sv_cntrl_decheater(2000);
   a4182:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   a4186:	4b83      	ldr	r3, [pc, #524]	; (a4394 <Cl_Rinse_Controller+0x964>)
   a4188:	4798      	blx	r3
   a418a:	e00e      	b.n	a41aa <Cl_Rinse_Controller+0x77a>
							}
							else if (avgtemp2_dummy > 77)
   a418c:	4b7c      	ldr	r3, [pc, #496]	; (a4380 <Cl_Rinse_Controller+0x950>)
   a418e:	681a      	ldr	r2, [r3, #0]
   a4190:	4b7c      	ldr	r3, [pc, #496]	; (a4384 <Cl_Rinse_Controller+0x954>)
   a4192:	4981      	ldr	r1, [pc, #516]	; (a4398 <Cl_Rinse_Controller+0x968>)
   a4194:	4610      	mov	r0, r2
   a4196:	4798      	blx	r3
   a4198:	4603      	mov	r3, r0
   a419a:	2b00      	cmp	r3, #0
   a419c:	d100      	bne.n	a41a0 <Cl_Rinse_Controller+0x770>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   a419e:	e2db      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   a41a0:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   a41a4:	4b7b      	ldr	r3, [pc, #492]	; (a4394 <Cl_Rinse_Controller+0x964>)
   a41a6:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   a41a8:	e2d6      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
   a41aa:	e2d5      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a41ac:	4b7b      	ldr	r3, [pc, #492]	; (a439c <Cl_Rinse_Controller+0x96c>)
   a41ae:	781b      	ldrb	r3, [r3, #0]
   a41b0:	2b03      	cmp	r3, #3
   a41b2:	d101      	bne.n	a41b8 <Cl_Rinse_Controller+0x788>
						{
							Cl_Rinse_SendRinseStateData();	
   a41b4:	4b7a      	ldr	r3, [pc, #488]	; (a43a0 <Cl_Rinse_Controller+0x970>)
   a41b6:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   a41b8:	4b7a      	ldr	r3, [pc, #488]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a41ba:	681b      	ldr	r3, [r3, #0]
   a41bc:	3301      	adds	r3, #1
   a41be:	4a79      	ldr	r2, [pc, #484]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a41c0:	6013      	str	r3, [r2, #0]
						
						
						if(Cl_Rinsesecondscounter == 60){ // activate flow alarms only after 60 seconds into rinse
   a41c2:	4b78      	ldr	r3, [pc, #480]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a41c4:	681b      	ldr	r3, [r3, #0]
   a41c6:	2b3c      	cmp	r3, #60	; 0x3c
   a41c8:	d114      	bne.n	a41f4 <Cl_Rinse_Controller+0x7c4>
							
							
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a41ca:	2101      	movs	r1, #1
   a41cc:	200c      	movs	r0, #12
   a41ce:	4b76      	ldr	r3, [pc, #472]	; (a43a8 <Cl_Rinse_Controller+0x978>)
   a41d0:	4798      	blx	r3
   a41d2:	4603      	mov	r3, r0
   a41d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a41d8:	2101      	movs	r1, #1
   a41da:	200d      	movs	r0, #13
   a41dc:	4b72      	ldr	r3, [pc, #456]	; (a43a8 <Cl_Rinse_Controller+0x978>)
   a41de:	4798      	blx	r3
   a41e0:	4603      	mov	r3, r0
   a41e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a41e6:	2101      	movs	r1, #1
   a41e8:	200e      	movs	r0, #14
   a41ea:	4b6f      	ldr	r3, [pc, #444]	; (a43a8 <Cl_Rinse_Controller+0x978>)
   a41ec:	4798      	blx	r3
   a41ee:	4603      	mov	r3, r0
   a41f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
							
						}
						
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   a41f4:	4b6b      	ldr	r3, [pc, #428]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a41f6:	681b      	ldr	r3, [r3, #0]
   a41f8:	2b0a      	cmp	r3, #10
   a41fa:	d118      	bne.n	a422e <Cl_Rinse_Controller+0x7fe>
   a41fc:	4b6b      	ldr	r3, [pc, #428]	; (a43ac <Cl_Rinse_Controller+0x97c>)
   a41fe:	781b      	ldrb	r3, [r3, #0]
   a4200:	b2db      	uxtb	r3, r3
   a4202:	2b01      	cmp	r3, #1
   a4204:	d113      	bne.n	a422e <Cl_Rinse_Controller+0x7fe>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   a4206:	2206      	movs	r2, #6
   a4208:	4969      	ldr	r1, [pc, #420]	; (a43b0 <Cl_Rinse_Controller+0x980>)
   a420a:	2018      	movs	r0, #24
   a420c:	4b69      	ldr	r3, [pc, #420]	; (a43b4 <Cl_Rinse_Controller+0x984>)
   a420e:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   a4210:	2004      	movs	r0, #4
   a4212:	4b69      	ldr	r3, [pc, #420]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a4214:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   a4216:	2001      	movs	r0, #1
   a4218:	4b68      	ldr	r3, [pc, #416]	; (a43bc <Cl_Rinse_Controller+0x98c>)
   a421a:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   a421c:	2013      	movs	r0, #19
   a421e:	4b68      	ldr	r3, [pc, #416]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a4220:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   a4222:	2014      	movs	r0, #20
   a4224:	4b66      	ldr	r3, [pc, #408]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a4226:	4798      	blx	r3
							rinse2=1;
   a4228:	4b66      	ldr	r3, [pc, #408]	; (a43c4 <Cl_Rinse_Controller+0x994>)
   a422a:	2201      	movs	r2, #1
   a422c:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   a422e:	4b5d      	ldr	r3, [pc, #372]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a4230:	681b      	ldr	r3, [r3, #0]
   a4232:	2b1e      	cmp	r3, #30
   a4234:	d129      	bne.n	a428a <Cl_Rinse_Controller+0x85a>
   a4236:	4b5d      	ldr	r3, [pc, #372]	; (a43ac <Cl_Rinse_Controller+0x97c>)
   a4238:	781b      	ldrb	r3, [r3, #0]
   a423a:	b2db      	uxtb	r3, r3
   a423c:	2b01      	cmp	r3, #1
   a423e:	d124      	bne.n	a428a <Cl_Rinse_Controller+0x85a>
   a4240:	4b60      	ldr	r3, [pc, #384]	; (a43c4 <Cl_Rinse_Controller+0x994>)
   a4242:	781b      	ldrb	r3, [r3, #0]
   a4244:	b2db      	uxtb	r3, r3
   a4246:	2b01      	cmp	r3, #1
   a4248:	d11f      	bne.n	a428a <Cl_Rinse_Controller+0x85a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   a424a:	2206      	movs	r2, #6
   a424c:	495e      	ldr	r1, [pc, #376]	; (a43c8 <Cl_Rinse_Controller+0x998>)
   a424e:	2018      	movs	r0, #24
   a4250:	4b58      	ldr	r3, [pc, #352]	; (a43b4 <Cl_Rinse_Controller+0x984>)
   a4252:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   a4254:	2002      	movs	r0, #2
   a4256:	4b59      	ldr	r3, [pc, #356]	; (a43bc <Cl_Rinse_Controller+0x98c>)
   a4258:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID19);
   a425a:	2013      	movs	r0, #19
   a425c:	4b56      	ldr	r3, [pc, #344]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a425e:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID20);
   a4260:	2014      	movs	r0, #20
   a4262:	4b55      	ldr	r3, [pc, #340]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a4264:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR1);
   a4266:	2001      	movs	r0, #1
   a4268:	4b58      	ldr	r3, [pc, #352]	; (a43cc <Cl_Rinse_Controller+0x99c>)
   a426a:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   a426c:	2002      	movs	r0, #2
   a426e:	4b57      	ldr	r3, [pc, #348]	; (a43cc <Cl_Rinse_Controller+0x99c>)
   a4270:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   a4272:	2006      	movs	r0, #6
   a4274:	4b52      	ldr	r3, [pc, #328]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a4276:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   a4278:	2008      	movs	r0, #8
   a427a:	4b51      	ldr	r3, [pc, #324]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a427c:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   a427e:	2011      	movs	r0, #17
   a4280:	4b4f      	ldr	r3, [pc, #316]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a4282:	4798      	blx	r3
							rinse3=1;
   a4284:	4b52      	ldr	r3, [pc, #328]	; (a43d0 <Cl_Rinse_Controller+0x9a0>)
   a4286:	2201      	movs	r2, #1
   a4288:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   a428a:	4b46      	ldr	r3, [pc, #280]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a428c:	681b      	ldr	r3, [r3, #0]
   a428e:	2b37      	cmp	r3, #55	; 0x37
   a4290:	d11c      	bne.n	a42cc <Cl_Rinse_Controller+0x89c>
   a4292:	4b46      	ldr	r3, [pc, #280]	; (a43ac <Cl_Rinse_Controller+0x97c>)
   a4294:	781b      	ldrb	r3, [r3, #0]
   a4296:	b2db      	uxtb	r3, r3
   a4298:	2b01      	cmp	r3, #1
   a429a:	d117      	bne.n	a42cc <Cl_Rinse_Controller+0x89c>
   a429c:	4b49      	ldr	r3, [pc, #292]	; (a43c4 <Cl_Rinse_Controller+0x994>)
   a429e:	781b      	ldrb	r3, [r3, #0]
   a42a0:	b2db      	uxtb	r3, r3
   a42a2:	2b01      	cmp	r3, #1
   a42a4:	d112      	bne.n	a42cc <Cl_Rinse_Controller+0x89c>
   a42a6:	4b4a      	ldr	r3, [pc, #296]	; (a43d0 <Cl_Rinse_Controller+0x9a0>)
   a42a8:	781b      	ldrb	r3, [r3, #0]
   a42aa:	b2db      	uxtb	r3, r3
   a42ac:	2b01      	cmp	r3, #1
   a42ae:	d10d      	bne.n	a42cc <Cl_Rinse_Controller+0x89c>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   a42b0:	2206      	movs	r2, #6
   a42b2:	4948      	ldr	r1, [pc, #288]	; (a43d4 <Cl_Rinse_Controller+0x9a4>)
   a42b4:	2018      	movs	r0, #24
   a42b6:	4b3f      	ldr	r3, [pc, #252]	; (a43b4 <Cl_Rinse_Controller+0x984>)
   a42b8:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   a42ba:	2004      	movs	r0, #4
   a42bc:	4b40      	ldr	r3, [pc, #256]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a42be:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   a42c0:	2011      	movs	r0, #17
   a42c2:	4b3d      	ldr	r3, [pc, #244]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a42c4:	4798      	blx	r3
							rinse4=1;
   a42c6:	4b44      	ldr	r3, [pc, #272]	; (a43d8 <Cl_Rinse_Controller+0x9a8>)
   a42c8:	2201      	movs	r2, #1
   a42ca:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   a42cc:	4b35      	ldr	r3, [pc, #212]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a42ce:	681b      	ldr	r3, [r3, #0]
   a42d0:	2b3c      	cmp	r3, #60	; 0x3c
   a42d2:	f040 8234 	bne.w	a473e <Cl_Rinse_Controller+0xd0e>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   a42d6:	2100      	movs	r1, #0
   a42d8:	2004      	movs	r0, #4
   a42da:	4b40      	ldr	r3, [pc, #256]	; (a43dc <Cl_Rinse_Controller+0x9ac>)
   a42dc:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   a42de:	4b31      	ldr	r3, [pc, #196]	; (a43a4 <Cl_Rinse_Controller+0x974>)
   a42e0:	2200      	movs	r2, #0
   a42e2:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   a42e4:	4b3e      	ldr	r3, [pc, #248]	; (a43e0 <Cl_Rinse_Controller+0x9b0>)
   a42e6:	681b      	ldr	r3, [r3, #0]
   a42e8:	3301      	adds	r3, #1
   a42ea:	4a3d      	ldr	r2, [pc, #244]	; (a43e0 <Cl_Rinse_Controller+0x9b0>)
   a42ec:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   a42ee:	4b3c      	ldr	r3, [pc, #240]	; (a43e0 <Cl_Rinse_Controller+0x9b0>)
   a42f0:	681b      	ldr	r3, [r3, #0]
   a42f2:	2b01      	cmp	r3, #1
   a42f4:	d10d      	bne.n	a4312 <Cl_Rinse_Controller+0x8e2>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   a42f6:	2206      	movs	r2, #6
   a42f8:	493a      	ldr	r1, [pc, #232]	; (a43e4 <Cl_Rinse_Controller+0x9b4>)
   a42fa:	2018      	movs	r0, #24
   a42fc:	4b2d      	ldr	r3, [pc, #180]	; (a43b4 <Cl_Rinse_Controller+0x984>)
   a42fe:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   a4300:	2004      	movs	r0, #4
   a4302:	4b2f      	ldr	r3, [pc, #188]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a4304:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   a4306:	2011      	movs	r0, #17
   a4308:	4b2b      	ldr	r3, [pc, #172]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a430a:	4798      	blx	r3
								rinse1=1;
   a430c:	4b27      	ldr	r3, [pc, #156]	; (a43ac <Cl_Rinse_Controller+0x97c>)
   a430e:	2201      	movs	r2, #1
   a4310:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == CL_BC_OPENFILL_TIMEOUT )  // earlier 2 min
   a4312:	4b33      	ldr	r3, [pc, #204]	; (a43e0 <Cl_Rinse_Controller+0x9b0>)
   a4314:	681b      	ldr	r3, [r3, #0]
   a4316:	2b05      	cmp	r3, #5
   a4318:	d11e      	bne.n	a4358 <Cl_Rinse_Controller+0x928>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   a431a:	2206      	movs	r2, #6
   a431c:	4932      	ldr	r1, [pc, #200]	; (a43e8 <Cl_Rinse_Controller+0x9b8>)
   a431e:	2018      	movs	r0, #24
   a4320:	4b24      	ldr	r3, [pc, #144]	; (a43b4 <Cl_Rinse_Controller+0x984>)
   a4322:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   a4324:	2004      	movs	r0, #4
   a4326:	4b24      	ldr	r3, [pc, #144]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a4328:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   a432a:	2011      	movs	r0, #17
   a432c:	4b24      	ldr	r3, [pc, #144]	; (a43c0 <Cl_Rinse_Controller+0x990>)
   a432e:	4798      	blx	r3
								sv_prop_stopopenfill();
   a4330:	4b2e      	ldr	r3, [pc, #184]	; (a43ec <Cl_Rinse_Controller+0x9bc>)
   a4332:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   a4334:	2002      	movs	r0, #2
   a4336:	4b20      	ldr	r3, [pc, #128]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a4338:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   a433a:	2003      	movs	r0, #3
   a433c:	4b1e      	ldr	r3, [pc, #120]	; (a43b8 <Cl_Rinse_Controller+0x988>)
   a433e:	4798      	blx	r3
								
								rinse1=0;
   a4340:	4b1a      	ldr	r3, [pc, #104]	; (a43ac <Cl_Rinse_Controller+0x97c>)
   a4342:	2200      	movs	r2, #0
   a4344:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   a4346:	4b1f      	ldr	r3, [pc, #124]	; (a43c4 <Cl_Rinse_Controller+0x994>)
   a4348:	2200      	movs	r2, #0
   a434a:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   a434c:	4b20      	ldr	r3, [pc, #128]	; (a43d0 <Cl_Rinse_Controller+0x9a0>)
   a434e:	2200      	movs	r2, #0
   a4350:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   a4352:	4b21      	ldr	r3, [pc, #132]	; (a43d8 <Cl_Rinse_Controller+0x9a8>)
   a4354:	2200      	movs	r2, #0
   a4356:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   a4358:	4b25      	ldr	r3, [pc, #148]	; (a43f0 <Cl_Rinse_Controller+0x9c0>)
   a435a:	681b      	ldr	r3, [r3, #0]
   a435c:	3301      	adds	r3, #1
   a435e:	4a24      	ldr	r2, [pc, #144]	; (a43f0 <Cl_Rinse_Controller+0x9c0>)
   a4360:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a4362:	4b0e      	ldr	r3, [pc, #56]	; (a439c <Cl_Rinse_Controller+0x96c>)
   a4364:	781b      	ldrb	r3, [r3, #0]
   a4366:	2b03      	cmp	r3, #3
   a4368:	f040 81e9 	bne.w	a473e <Cl_Rinse_Controller+0xd0e>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a436c:	4b21      	ldr	r3, [pc, #132]	; (a43f4 <Cl_Rinse_Controller+0x9c4>)
   a436e:	4798      	blx	r3
   a4370:	4603      	mov	r3, r0
   a4372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a4376:	e1e2      	b.n	a473e <Cl_Rinse_Controller+0xd0e>
   a4378:	20071b93 	.word	0x20071b93
   a437c:	20071bb2 	.word	0x20071bb2
   a4380:	200718f4 	.word	0x200718f4
   a4384:	000a8321 	.word	0x000a8321
   a4388:	42960000 	.word	0x42960000
   a438c:	000a82e5 	.word	0x000a82e5
   a4390:	42980000 	.word	0x42980000
   a4394:	0009af09 	.word	0x0009af09
   a4398:	429a0000 	.word	0x429a0000
   a439c:	20071b92 	.word	0x20071b92
   a43a0:	000a5cdd 	.word	0x000a5cdd
   a43a4:	20071b94 	.word	0x20071b94
   a43a8:	000829e5 	.word	0x000829e5
   a43ac:	20071b8e 	.word	0x20071b8e
   a43b0:	000aa418 	.word	0x000aa418
   a43b4:	0009cbd5 	.word	0x0009cbd5
   a43b8:	0009ae01 	.word	0x0009ae01
   a43bc:	0009ad7d 	.word	0x0009ad7d
   a43c0:	0009ade1 	.word	0x0009ade1
   a43c4:	20071b8f 	.word	0x20071b8f
   a43c8:	000aa420 	.word	0x000aa420
   a43cc:	0009ad41 	.word	0x0009ad41
   a43d0:	20071b90 	.word	0x20071b90
   a43d4:	000aa428 	.word	0x000aa428
   a43d8:	20071b91 	.word	0x20071b91
   a43dc:	00096ea9 	.word	0x00096ea9
   a43e0:	20071b98 	.word	0x20071b98
   a43e4:	000aa430 	.word	0x000aa430
   a43e8:	000aa438 	.word	0x000aa438
   a43ec:	0009b299 	.word	0x0009b299
   a43f0:	20071ba4 	.word	0x20071ba4
   a43f4:	000a545d 	.word	0x000a545d
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   a43f8:	4bad      	ldr	r3, [pc, #692]	; (a46b0 <Cl_Rinse_Controller+0xc80>)
   a43fa:	781b      	ldrb	r3, [r3, #0]
   a43fc:	b2db      	uxtb	r3, r3
   a43fe:	3301      	adds	r3, #1
   a4400:	b2da      	uxtb	r2, r3
   a4402:	4bab      	ldr	r3, [pc, #684]	; (a46b0 <Cl_Rinse_Controller+0xc80>)
   a4404:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   a4406:	4baa      	ldr	r3, [pc, #680]	; (a46b0 <Cl_Rinse_Controller+0xc80>)
   a4408:	781b      	ldrb	r3, [r3, #0]
   a440a:	b2db      	uxtb	r3, r3
   a440c:	2b1e      	cmp	r3, #30
   a440e:	d905      	bls.n	a441c <Cl_Rinse_Controller+0x9ec>
							{
								sv_cntrl_poweroffheater();
   a4410:	4ba8      	ldr	r3, [pc, #672]	; (a46b4 <Cl_Rinse_Controller+0xc84>)
   a4412:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a4414:	4ba8      	ldr	r3, [pc, #672]	; (a46b8 <Cl_Rinse_Controller+0xc88>)
   a4416:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   a4418:	4ba8      	ldr	r3, [pc, #672]	; (a46bc <Cl_Rinse_Controller+0xc8c>)
   a441a:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   a441c:	4ba8      	ldr	r3, [pc, #672]	; (a46c0 <Cl_Rinse_Controller+0xc90>)
   a441e:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   a4420:	4ba8      	ldr	r3, [pc, #672]	; (a46c4 <Cl_Rinse_Controller+0xc94>)
   a4422:	4798      	blx	r3
   a4424:	4603      	mov	r3, r0
   a4426:	2b00      	cmp	r3, #0
   a4428:	f040 818c 	bne.w	a4744 <Cl_Rinse_Controller+0xd14>
							{
								sv_cntrl_setgreenalarm();
   a442c:	4ba6      	ldr	r3, [pc, #664]	; (a46c8 <Cl_Rinse_Controller+0xc98>)
   a442e:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   a4430:	2001      	movs	r0, #1
   a4432:	4ba6      	ldr	r3, [pc, #664]	; (a46cc <Cl_Rinse_Controller+0xc9c>)
   a4434:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   a4436:	2002      	movs	r0, #2
   a4438:	4ba4      	ldr	r3, [pc, #656]	; (a46cc <Cl_Rinse_Controller+0xc9c>)
   a443a:	4798      	blx	r3
							//	sv_prop_stopopenfill();
							//	sv_prop_startpropeo_aligning();
							//	sv_cntrl_deactivate_valve(VALVE_ID2);
							//	sv_cntrl_deactivate_valve(VALVE_ID3);
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   a443c:	4ba4      	ldr	r3, [pc, #656]	; (a46d0 <Cl_Rinse_Controller+0xca0>)
   a443e:	4798      	blx	r3
   a4440:	4603      	mov	r3, r0
   a4442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

								
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a4446:	2100      	movs	r1, #0
   a4448:	200c      	movs	r0, #12
   a444a:	4ba2      	ldr	r3, [pc, #648]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a444c:	4798      	blx	r3
   a444e:	4603      	mov	r3, r0
   a4450:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4454:	2100      	movs	r1, #0
   a4456:	200d      	movs	r0, #13
   a4458:	4b9e      	ldr	r3, [pc, #632]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a445a:	4798      	blx	r3
   a445c:	4603      	mov	r3, r0
   a445e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a4462:	2100      	movs	r1, #0
   a4464:	200e      	movs	r0, #14
   a4466:	4b9b      	ldr	r3, [pc, #620]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a4468:	4798      	blx	r3
   a446a:	4603      	mov	r3, r0
   a446c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a4470:	2100      	movs	r1, #0
   a4472:	2029      	movs	r0, #41	; 0x29
   a4474:	4b97      	ldr	r3, [pc, #604]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a4476:	4798      	blx	r3
   a4478:	4603      	mov	r3, r0
   a447a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a447e:	2100      	movs	r1, #0
   a4480:	202b      	movs	r0, #43	; 0x2b
   a4482:	4b94      	ldr	r3, [pc, #592]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a4484:	4798      	blx	r3
   a4486:	4603      	mov	r3, r0
   a4488:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a448c:	2100      	movs	r1, #0
   a448e:	2003      	movs	r0, #3
   a4490:	4b90      	ldr	r3, [pc, #576]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a4492:	4798      	blx	r3
   a4494:	4603      	mov	r3, r0
   a4496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a449a:	2100      	movs	r1, #0
   a449c:	2004      	movs	r0, #4
   a449e:	4b8d      	ldr	r3, [pc, #564]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a44a0:	4798      	blx	r3
   a44a2:	4603      	mov	r3, r0
   a44a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a44a8:	4b8b      	ldr	r3, [pc, #556]	; (a46d8 <Cl_Rinse_Controller+0xca8>)
   a44aa:	2209      	movs	r2, #9
   a44ac:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   a44ae:	f107 0322 	add.w	r3, r7, #34	; 0x22
   a44b2:	4619      	mov	r1, r3
   a44b4:	2012      	movs	r0, #18
   a44b6:	4b89      	ldr	r3, [pc, #548]	; (a46dc <Cl_Rinse_Controller+0xcac>)
   a44b8:	4798      	blx	r3
// 												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 												res_temp_lookuptable(cal_data);
// 												 uint16_t temp = res_temp_value /10;
// 												
// 					//							temp = temp - 25 +12 + 2.5;
										uint16_t temp = sensordata /10;
   a44ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a44bc:	4a88      	ldr	r2, [pc, #544]	; (a46e0 <Cl_Rinse_Controller+0xcb0>)
   a44be:	fba2 2303 	umull	r2, r3, r2, r3
   a44c2:	08db      	lsrs	r3, r3, #3
   a44c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   a44c8:	2300      	movs	r3, #0
   a44ca:	61fb      	str	r3, [r7, #28]
										cl_tdata.Twobyte = temp;
   a44cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   a44d0:	83bb      	strh	r3, [r7, #28]
										cl_tdata.bytearray[2] = 11;
   a44d2:	230b      	movs	r3, #11
   a44d4:	77bb      	strb	r3, [r7, #30]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   a44d6:	f107 031c 	add.w	r3, r7, #28
   a44da:	2204      	movs	r2, #4
   a44dc:	4619      	mov	r1, r3
   a44de:	2037      	movs	r0, #55	; 0x37
   a44e0:	4b80      	ldr	r3, [pc, #512]	; (a46e4 <Cl_Rinse_Controller+0xcb4>)
   a44e2:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a44e4:	e12e      	b.n	a4744 <Cl_Rinse_Controller+0xd14>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   a44e6:	4b80      	ldr	r3, [pc, #512]	; (a46e8 <Cl_Rinse_Controller+0xcb8>)
   a44e8:	681b      	ldr	r3, [r3, #0]
   a44ea:	3301      	adds	r3, #1
   a44ec:	4a7e      	ldr	r2, [pc, #504]	; (a46e8 <Cl_Rinse_Controller+0xcb8>)
   a44ee:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   a44f0:	4b7e      	ldr	r3, [pc, #504]	; (a46ec <Cl_Rinse_Controller+0xcbc>)
   a44f2:	681b      	ldr	r3, [r3, #0]
   a44f4:	3301      	adds	r3, #1
   a44f6:	4a7d      	ldr	r2, [pc, #500]	; (a46ec <Cl_Rinse_Controller+0xcbc>)
   a44f8:	6013      	str	r3, [r2, #0]
						break;
   a44fa:	e12d      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   a44fc:	4b7c      	ldr	r3, [pc, #496]	; (a46f0 <Cl_Rinse_Controller+0xcc0>)
   a44fe:	4798      	blx	r3
						break;
   a4500:	e12a      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a4502:	4b7c      	ldr	r3, [pc, #496]	; (a46f4 <Cl_Rinse_Controller+0xcc4>)
   a4504:	4798      	blx	r3
   a4506:	4603      	mov	r3, r0
   a4508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   a450c:	e124      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a450e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   a4512:	4619      	mov	r1, r3
   a4514:	203c      	movs	r0, #60	; 0x3c
   a4516:	4b78      	ldr	r3, [pc, #480]	; (a46f8 <Cl_Rinse_Controller+0xcc8>)
   a4518:	4798      	blx	r3
							if(alarmstatus1)
   a451a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   a451e:	2b00      	cmp	r3, #0
   a4520:	d002      	beq.n	a4528 <Cl_Rinse_Controller+0xaf8>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   a4522:	4b76      	ldr	r3, [pc, #472]	; (a46fc <Cl_Rinse_Controller+0xccc>)
   a4524:	2201      	movs	r2, #1
   a4526:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   a4528:	f107 0339 	add.w	r3, r7, #57	; 0x39
   a452c:	4619      	mov	r1, r3
   a452e:	2013      	movs	r0, #19
   a4530:	4b71      	ldr	r3, [pc, #452]	; (a46f8 <Cl_Rinse_Controller+0xcc8>)
   a4532:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a4534:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a4538:	4619      	mov	r1, r3
   a453a:	200c      	movs	r0, #12
   a453c:	4b6e      	ldr	r3, [pc, #440]	; (a46f8 <Cl_Rinse_Controller+0xcc8>)
   a453e:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   a4540:	e10a      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   a4542:	4b6f      	ldr	r3, [pc, #444]	; (a4700 <Cl_Rinse_Controller+0xcd0>)
   a4544:	2201      	movs	r2, #1
   a4546:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   a4548:	4b6e      	ldr	r3, [pc, #440]	; (a4704 <Cl_Rinse_Controller+0xcd4>)
   a454a:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a454c:	4b6e      	ldr	r3, [pc, #440]	; (a4708 <Cl_Rinse_Controller+0xcd8>)
   a454e:	2200      	movs	r2, #0
   a4550:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a4552:	2100      	movs	r1, #0
   a4554:	2001      	movs	r0, #1
   a4556:	4b6d      	ldr	r3, [pc, #436]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a4558:	4798      	blx	r3
						}
						
						break;
   a455a:	e0fd      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   a455c:	4b68      	ldr	r3, [pc, #416]	; (a4700 <Cl_Rinse_Controller+0xcd0>)
   a455e:	2200      	movs	r2, #0
   a4560:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a4562:	2100      	movs	r1, #0
   a4564:	2002      	movs	r0, #2
   a4566:	4b69      	ldr	r3, [pc, #420]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a4568:	4798      	blx	r3
						break;
   a456a:	e0f5      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a456c:	4b68      	ldr	r3, [pc, #416]	; (a4710 <Cl_Rinse_Controller+0xce0>)
   a456e:	781b      	ldrb	r3, [r3, #0]
   a4570:	2b01      	cmp	r3, #1
   a4572:	f000 80ea 	beq.w	a474a <Cl_Rinse_Controller+0xd1a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a4576:	2206      	movs	r2, #6
   a4578:	4966      	ldr	r1, [pc, #408]	; (a4714 <Cl_Rinse_Controller+0xce4>)
   a457a:	2018      	movs	r0, #24
   a457c:	4b59      	ldr	r3, [pc, #356]	; (a46e4 <Cl_Rinse_Controller+0xcb4>)
   a457e:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a4580:	2100      	movs	r1, #0
   a4582:	2005      	movs	r0, #5
   a4584:	4b61      	ldr	r3, [pc, #388]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a4586:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a4588:	4b5f      	ldr	r3, [pc, #380]	; (a4708 <Cl_Rinse_Controller+0xcd8>)
   a458a:	2200      	movs	r2, #0
   a458c:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a458e:	e0dc      	b.n	a474a <Cl_Rinse_Controller+0xd1a>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a4590:	2206      	movs	r2, #6
   a4592:	4961      	ldr	r1, [pc, #388]	; (a4718 <Cl_Rinse_Controller+0xce8>)
   a4594:	2018      	movs	r0, #24
   a4596:	4b53      	ldr	r3, [pc, #332]	; (a46e4 <Cl_Rinse_Controller+0xcb4>)
   a4598:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a459a:	2100      	movs	r1, #0
   a459c:	2006      	movs	r0, #6
   a459e:	4b5b      	ldr	r3, [pc, #364]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a45a0:	4798      	blx	r3

						
						break;
   a45a2:	e0d9      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   a45a4:	2100      	movs	r1, #0
   a45a6:	2002      	movs	r0, #2
   a45a8:	4b5c      	ldr	r3, [pc, #368]	; (a471c <Cl_Rinse_Controller+0xcec>)
   a45aa:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   a45ac:	4b56      	ldr	r3, [pc, #344]	; (a4708 <Cl_Rinse_Controller+0xcd8>)
   a45ae:	2201      	movs	r2, #1
   a45b0:	709a      	strb	r2, [r3, #2]
						break;
   a45b2:	e0d1      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   a45b4:	2100      	movs	r1, #0
   a45b6:	2004      	movs	r0, #4
   a45b8:	4b58      	ldr	r3, [pc, #352]	; (a471c <Cl_Rinse_Controller+0xcec>)
   a45ba:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   a45bc:	4b52      	ldr	r3, [pc, #328]	; (a4708 <Cl_Rinse_Controller+0xcd8>)
   a45be:	2200      	movs	r2, #0
   a45c0:	709a      	strb	r2, [r3, #2]
						break;
   a45c2:	e0c9      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a45c4:	4b44      	ldr	r3, [pc, #272]	; (a46d8 <Cl_Rinse_Controller+0xca8>)
   a45c6:	781b      	ldrb	r3, [r3, #0]
   a45c8:	2b09      	cmp	r3, #9
   a45ca:	f000 80c1 	beq.w	a4750 <Cl_Rinse_Controller+0xd20>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a45ce:	2100      	movs	r1, #0
   a45d0:	200c      	movs	r0, #12
   a45d2:	4b40      	ldr	r3, [pc, #256]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a45d4:	4798      	blx	r3
   a45d6:	4603      	mov	r3, r0
   a45d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a45dc:	2100      	movs	r1, #0
   a45de:	200d      	movs	r0, #13
   a45e0:	4b3c      	ldr	r3, [pc, #240]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a45e2:	4798      	blx	r3
   a45e4:	4603      	mov	r3, r0
   a45e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a45ea:	2100      	movs	r1, #0
   a45ec:	200e      	movs	r0, #14
   a45ee:	4b39      	ldr	r3, [pc, #228]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a45f0:	4798      	blx	r3
   a45f2:	4603      	mov	r3, r0
   a45f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a45f8:	2100      	movs	r1, #0
   a45fa:	2029      	movs	r0, #41	; 0x29
   a45fc:	4b35      	ldr	r3, [pc, #212]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a45fe:	4798      	blx	r3
   a4600:	4603      	mov	r3, r0
   a4602:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a4606:	2100      	movs	r1, #0
   a4608:	202b      	movs	r0, #43	; 0x2b
   a460a:	4b32      	ldr	r3, [pc, #200]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a460c:	4798      	blx	r3
   a460e:	4603      	mov	r3, r0
   a4610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a4614:	2100      	movs	r1, #0
   a4616:	2003      	movs	r0, #3
   a4618:	4b2e      	ldr	r3, [pc, #184]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a461a:	4798      	blx	r3
   a461c:	4603      	mov	r3, r0
   a461e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a4622:	2100      	movs	r1, #0
   a4624:	2004      	movs	r0, #4
   a4626:	4b2b      	ldr	r3, [pc, #172]	; (a46d4 <Cl_Rinse_Controller+0xca4>)
   a4628:	4798      	blx	r3
   a462a:	4603      	mov	r3, r0
   a462c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a4630:	4b29      	ldr	r3, [pc, #164]	; (a46d8 <Cl_Rinse_Controller+0xca8>)
   a4632:	2209      	movs	r2, #9
   a4634:	701a      	strb	r2, [r3, #0]
						}
						break;
   a4636:	e08b      	b.n	a4750 <Cl_Rinse_Controller+0xd20>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   a4638:	2100      	movs	r1, #0
   a463a:	200c      	movs	r0, #12
   a463c:	4b33      	ldr	r3, [pc, #204]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a463e:	4798      	blx	r3
						break;
   a4640:	e08a      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   a4642:	2100      	movs	r1, #0
   a4644:	200d      	movs	r0, #13
   a4646:	4b31      	ldr	r3, [pc, #196]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a4648:	4798      	blx	r3
						break;
   a464a:	e085      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a464c:	4b34      	ldr	r3, [pc, #208]	; (a4720 <Cl_Rinse_Controller+0xcf0>)
   a464e:	7e1b      	ldrb	r3, [r3, #24]
   a4650:	2b00      	cmp	r3, #0
   a4652:	f000 8080 	beq.w	a4756 <Cl_Rinse_Controller+0xd26>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4656:	4b32      	ldr	r3, [pc, #200]	; (a4720 <Cl_Rinse_Controller+0xcf0>)
   a4658:	791b      	ldrb	r3, [r3, #4]
   a465a:	763b      	strb	r3, [r7, #24]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a465c:	4b30      	ldr	r3, [pc, #192]	; (a4720 <Cl_Rinse_Controller+0xcf0>)
   a465e:	791b      	ldrb	r3, [r3, #4]
   a4660:	767b      	strb	r3, [r7, #25]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a4662:	4b2f      	ldr	r3, [pc, #188]	; (a4720 <Cl_Rinse_Controller+0xcf0>)
   a4664:	791b      	ldrb	r3, [r3, #4]
   a4666:	76bb      	strb	r3, [r7, #26]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a4668:	4b2d      	ldr	r3, [pc, #180]	; (a4720 <Cl_Rinse_Controller+0xcf0>)
   a466a:	791b      	ldrb	r3, [r3, #4]
   a466c:	76fb      	strb	r3, [r7, #27]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a466e:	8b3b      	ldrh	r3, [r7, #24]
   a4670:	b21b      	sxth	r3, r3
   a4672:	4619      	mov	r1, r3
   a4674:	200e      	movs	r0, #14
   a4676:	4b25      	ldr	r3, [pc, #148]	; (a470c <Cl_Rinse_Controller+0xcdc>)
   a4678:	4798      	blx	r3
						}
						break;
   a467a:	e06c      	b.n	a4756 <Cl_Rinse_Controller+0xd26>
						case EVENT_RINSE_CLR_ALARM:
						
						command = CON_TX_COMMAND_ALARM_CLEARED;
   a467c:	2351      	movs	r3, #81	; 0x51
   a467e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4682:	2301      	movs	r3, #1
   a4684:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4688:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a468c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4690:	2200      	movs	r2, #0
   a4692:	4618      	mov	r0, r3
   a4694:	4b13      	ldr	r3, [pc, #76]	; (a46e4 <Cl_Rinse_Controller+0xcb4>)
   a4696:	4798      	blx	r3
   a4698:	4603      	mov	r3, r0
   a469a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
										sv_cntrl_resetyellowalarm();
   a469e:	4b21      	ldr	r3, [pc, #132]	; (a4724 <Cl_Rinse_Controller+0xcf4>)
   a46a0:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a46a2:	4b21      	ldr	r3, [pc, #132]	; (a4728 <Cl_Rinse_Controller+0xcf8>)
   a46a4:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a46a6:	4b21      	ldr	r3, [pc, #132]	; (a472c <Cl_Rinse_Controller+0xcfc>)
   a46a8:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a46aa:	4b05      	ldr	r3, [pc, #20]	; (a46c0 <Cl_Rinse_Controller+0xc90>)
   a46ac:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
										cl_rinsestate = CL_RINSE_STATE_RINSING;
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
								}		*/		
										
						break;
   a46ae:	e053      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
   a46b0:	20071bb6 	.word	0x20071bb6
   a46b4:	0009adcd 	.word	0x0009adcd
   a46b8:	0009af71 	.word	0x0009af71
   a46bc:	0009af8d 	.word	0x0009af8d
   a46c0:	000a573d 	.word	0x000a573d
   a46c4:	000a54a9 	.word	0x000a54a9
   a46c8:	0009b055 	.word	0x0009b055
   a46cc:	0009ad7d 	.word	0x0009ad7d
   a46d0:	000a5565 	.word	0x000a5565
   a46d4:	000829e5 	.word	0x000829e5
   a46d8:	20071b92 	.word	0x20071b92
   a46dc:	0008fa01 	.word	0x0008fa01
   a46e0:	cccccccd 	.word	0xcccccccd
   a46e4:	0009cbd5 	.word	0x0009cbd5
   a46e8:	20071b9c 	.word	0x20071b9c
   a46ec:	20071ba8 	.word	0x20071ba8
   a46f0:	000a637d 	.word	0x000a637d
   a46f4:	000a5715 	.word	0x000a5715
   a46f8:	00082bc1 	.word	0x00082bc1
   a46fc:	20071bb2 	.word	0x20071bb2
   a4700:	20071b8c 	.word	0x20071b8c
   a4704:	00088a91 	.word	0x00088a91
   a4708:	20070c68 	.word	0x20070c68
   a470c:	00088019 	.word	0x00088019
   a4710:	20071866 	.word	0x20071866
   a4714:	000aa440 	.word	0x000aa440
   a4718:	000aa448 	.word	0x000aa448
   a471c:	00093f5d 	.word	0x00093f5d
   a4720:	20072350 	.word	0x20072350
   a4724:	0009b091 	.word	0x0009b091
   a4728:	0009b07d 	.word	0x0009b07d
   a472c:	0009b0b9 	.word	0x0009b0b9
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   a4730:	4bab      	ldr	r3, [pc, #684]	; (a49e0 <Cl_Rinse_Controller+0xfb0>)
   a4732:	2202      	movs	r2, #2
   a4734:	701a      	strb	r2, [r3, #0]
						break;
   a4736:	e00f      	b.n	a4758 <Cl_Rinse_Controller+0xd28>
										cl_50ms_timer =0;
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						} 
																	
						break;
   a4738:	bf00      	nop
   a473a:	f000 bc91 	b.w	a5060 <Cl_Rinse_Controller+0x1630>
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a473e:	bf00      	nop
   a4740:	f000 bc8e 	b.w	a5060 <Cl_Rinse_Controller+0x1630>
										cl_tdata.bytearray[2] = 11;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a4744:	bf00      	nop
   a4746:	f000 bc8b 	b.w	a5060 <Cl_Rinse_Controller+0x1630>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   a474a:	bf00      	nop
   a474c:	f000 bc88 	b.w	a5060 <Cl_Rinse_Controller+0x1630>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
						}
						break;
   a4750:	bf00      	nop
   a4752:	f000 bc85 	b.w	a5060 <Cl_Rinse_Controller+0x1630>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
						break;
   a4756:	bf00      	nop
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a4758:	f000 bc82 	b.w	a5060 <Cl_Rinse_Controller+0x1630>
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   a475c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4760:	3b01      	subs	r3, #1
   a4762:	2b1d      	cmp	r3, #29
   a4764:	f200 81dc 	bhi.w	a4b20 <Cl_Rinse_Controller+0x10f0>
   a4768:	a201      	add	r2, pc, #4	; (adr r2, a4770 <Cl_Rinse_Controller+0xd40>)
   a476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a476e:	bf00      	nop
   a4770:	000a4999 	.word	0x000a4999
   a4774:	000a47e9 	.word	0x000a47e9
   a4778:	000a4b21 	.word	0x000a4b21
   a477c:	000a4843 	.word	0x000a4843
   a4780:	000a4855 	.word	0x000a4855
   a4784:	000a4867 	.word	0x000a4867
   a4788:	000a4b21 	.word	0x000a4b21
   a478c:	000a4b21 	.word	0x000a4b21
   a4790:	000a4b21 	.word	0x000a4b21
   a4794:	000a4b21 	.word	0x000a4b21
   a4798:	000a4b21 	.word	0x000a4b21
   a479c:	000a4b21 	.word	0x000a4b21
   a47a0:	000a4b21 	.word	0x000a4b21
   a47a4:	000a4b21 	.word	0x000a4b21
   a47a8:	000a4b21 	.word	0x000a4b21
   a47ac:	000a4b21 	.word	0x000a4b21
   a47b0:	000a4b21 	.word	0x000a4b21
   a47b4:	000a4903 	.word	0x000a4903
   a47b8:	000a4b21 	.word	0x000a4b21
   a47bc:	000a4b21 	.word	0x000a4b21
   a47c0:	000a4b21 	.word	0x000a4b21
   a47c4:	000a48f7 	.word	0x000a48f7
   a47c8:	000a486d 	.word	0x000a486d
   a47cc:	000a4b21 	.word	0x000a4b21
   a47d0:	000a4b21 	.word	0x000a4b21
   a47d4:	000a4b21 	.word	0x000a4b21
   a47d8:	000a4b21 	.word	0x000a4b21
   a47dc:	000a4b21 	.word	0x000a4b21
   a47e0:	000a4b21 	.word	0x000a4b21
   a47e4:	000a4af3 	.word	0x000a4af3
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   a47e8:	4b7e      	ldr	r3, [pc, #504]	; (a49e4 <Cl_Rinse_Controller+0xfb4>)
   a47ea:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a47ec:	2308      	movs	r3, #8
   a47ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a47f2:	2301      	movs	r3, #1
   a47f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a47f8:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a47fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4800:	2201      	movs	r2, #1
   a4802:	4618      	mov	r0, r3
   a4804:	4b78      	ldr	r3, [pc, #480]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a4806:	4798      	blx	r3
   a4808:	4603      	mov	r3, r0
   a480a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a480e:	2309      	movs	r3, #9
   a4810:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4814:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4818:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a481c:	2200      	movs	r2, #0
   a481e:	4618      	mov	r0, r3
   a4820:	4b71      	ldr	r3, [pc, #452]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a4822:	4798      	blx	r3
   a4824:	4603      	mov	r3, r0
   a4826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a482a:	4b70      	ldr	r3, [pc, #448]	; (a49ec <Cl_Rinse_Controller+0xfbc>)
   a482c:	4798      	blx	r3
   a482e:	4603      	mov	r3, r0
   a4830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a4834:	4b6e      	ldr	r3, [pc, #440]	; (a49f0 <Cl_Rinse_Controller+0xfc0>)
   a4836:	2203      	movs	r2, #3
   a4838:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a483a:	4b69      	ldr	r3, [pc, #420]	; (a49e0 <Cl_Rinse_Controller+0xfb0>)
   a483c:	2201      	movs	r2, #1
   a483e:	701a      	strb	r2, [r3, #0]
					break;
   a4840:	e175      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a4842:	4b68      	ldr	r3, [pc, #416]	; (a49e4 <Cl_Rinse_Controller+0xfb4>)
   a4844:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a4846:	4b6a      	ldr	r3, [pc, #424]	; (a49f0 <Cl_Rinse_Controller+0xfc0>)
   a4848:	2204      	movs	r2, #4
   a484a:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a484c:	4b64      	ldr	r3, [pc, #400]	; (a49e0 <Cl_Rinse_Controller+0xfb0>)
   a484e:	2201      	movs	r2, #1
   a4850:	701a      	strb	r2, [r3, #0]
					break;
   a4852:	e16c      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a4854:	4b63      	ldr	r3, [pc, #396]	; (a49e4 <Cl_Rinse_Controller+0xfb4>)
   a4856:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a4858:	4b65      	ldr	r3, [pc, #404]	; (a49f0 <Cl_Rinse_Controller+0xfc0>)
   a485a:	2205      	movs	r2, #5
   a485c:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a485e:	4b60      	ldr	r3, [pc, #384]	; (a49e0 <Cl_Rinse_Controller+0xfb0>)
   a4860:	2201      	movs	r2, #1
   a4862:	701a      	strb	r2, [r3, #0]
					break;
   a4864:	e163      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   a4866:	4b63      	ldr	r3, [pc, #396]	; (a49f4 <Cl_Rinse_Controller+0xfc4>)
   a4868:	4798      	blx	r3
					break;
   a486a:	e160      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a486c:	4b62      	ldr	r3, [pc, #392]	; (a49f8 <Cl_Rinse_Controller+0xfc8>)
   a486e:	7e1b      	ldrb	r3, [r3, #24]
   a4870:	2b00      	cmp	r3, #0
   a4872:	f000 8157 	beq.w	a4b24 <Cl_Rinse_Controller+0x10f4>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a4876:	4b60      	ldr	r3, [pc, #384]	; (a49f8 <Cl_Rinse_Controller+0xfc8>)
   a4878:	791b      	ldrb	r3, [r3, #4]
   a487a:	2b01      	cmp	r3, #1
   a487c:	d002      	beq.n	a4884 <Cl_Rinse_Controller+0xe54>
   a487e:	2b21      	cmp	r3, #33	; 0x21
   a4880:	d01c      	beq.n	a48bc <Cl_Rinse_Controller+0xe8c>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   a4882:	e037      	b.n	a48f4 <Cl_Rinse_Controller+0xec4>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a4884:	2316      	movs	r3, #22
   a4886:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a488a:	2301      	movs	r3, #1
   a488c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a4890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a4894:	3301      	adds	r3, #1
   a4896:	4619      	mov	r1, r3
   a4898:	2001      	movs	r0, #1
   a489a:	4b58      	ldr	r3, [pc, #352]	; (a49fc <Cl_Rinse_Controller+0xfcc>)
   a489c:	4798      	blx	r3
   a489e:	4603      	mov	r3, r0
   a48a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a48a4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a48a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a48ac:	2202      	movs	r2, #2
   a48ae:	4618      	mov	r0, r3
   a48b0:	4b4d      	ldr	r3, [pc, #308]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a48b2:	4798      	blx	r3
   a48b4:	4603      	mov	r3, r0
   a48b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
							break;
   a48ba:	e01b      	b.n	a48f4 <Cl_Rinse_Controller+0xec4>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a48bc:	2316      	movs	r3, #22
   a48be:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a48c2:	2323      	movs	r3, #35	; 0x23
   a48c4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a48c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a48cc:	3301      	adds	r3, #1
   a48ce:	4619      	mov	r1, r3
   a48d0:	2028      	movs	r0, #40	; 0x28
   a48d2:	4b4a      	ldr	r3, [pc, #296]	; (a49fc <Cl_Rinse_Controller+0xfcc>)
   a48d4:	4798      	blx	r3
   a48d6:	4603      	mov	r3, r0
   a48d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a48dc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a48e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a48e4:	2202      	movs	r2, #2
   a48e6:	4618      	mov	r0, r3
   a48e8:	4b3f      	ldr	r3, [pc, #252]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a48ea:	4798      	blx	r3
   a48ec:	4603      	mov	r3, r0
   a48ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a48f2:	bf00      	nop
							default:
							break;
						}
					}
					break;
   a48f4:	e116      	b.n	a4b24 <Cl_Rinse_Controller+0x10f4>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a48f6:	4b42      	ldr	r3, [pc, #264]	; (a4a00 <Cl_Rinse_Controller+0xfd0>)
   a48f8:	4798      	blx	r3
   a48fa:	4603      	mov	r3, r0
   a48fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a4900:	e115      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a4902:	4b40      	ldr	r3, [pc, #256]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a4904:	2200      	movs	r2, #0
   a4906:	801a      	strh	r2, [r3, #0]
   a4908:	e041      	b.n	a498e <Cl_Rinse_Controller+0xf5e>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a490a:	4b3e      	ldr	r3, [pc, #248]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a490c:	881b      	ldrh	r3, [r3, #0]
   a490e:	461a      	mov	r2, r3
   a4910:	4b3d      	ldr	r3, [pc, #244]	; (a4a08 <Cl_Rinse_Controller+0xfd8>)
   a4912:	f813 0032 	ldrb.w	r0, [r3, r2, lsl #3]
   a4916:	4b3b      	ldr	r3, [pc, #236]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a4918:	881b      	ldrh	r3, [r3, #0]
   a491a:	00db      	lsls	r3, r3, #3
   a491c:	4a3a      	ldr	r2, [pc, #232]	; (a4a08 <Cl_Rinse_Controller+0xfd8>)
   a491e:	4413      	add	r3, r2
   a4920:	3302      	adds	r3, #2
   a4922:	4619      	mov	r1, r3
   a4924:	4b39      	ldr	r3, [pc, #228]	; (a4a0c <Cl_Rinse_Controller+0xfdc>)
   a4926:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   a4928:	4b36      	ldr	r3, [pc, #216]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a492a:	881b      	ldrh	r3, [r3, #0]
   a492c:	4a36      	ldr	r2, [pc, #216]	; (a4a08 <Cl_Rinse_Controller+0xfd8>)
   a492e:	00db      	lsls	r3, r3, #3
   a4930:	4413      	add	r3, r2
   a4932:	789b      	ldrb	r3, [r3, #2]
   a4934:	2b00      	cmp	r3, #0
   a4936:	d00e      	beq.n	a4956 <Cl_Rinse_Controller+0xf26>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   a4938:	2208      	movs	r2, #8
   a493a:	4935      	ldr	r1, [pc, #212]	; (a4a10 <Cl_Rinse_Controller+0xfe0>)
   a493c:	2018      	movs	r0, #24
   a493e:	4b2a      	ldr	r3, [pc, #168]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a4940:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   a4942:	4b2c      	ldr	r3, [pc, #176]	; (a49f4 <Cl_Rinse_Controller+0xfc4>)
   a4944:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4946:	4b2a      	ldr	r3, [pc, #168]	; (a49f0 <Cl_Rinse_Controller+0xfc0>)
   a4948:	2206      	movs	r2, #6
   a494a:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   a494c:	4b2d      	ldr	r3, [pc, #180]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a494e:	2200      	movs	r2, #0
   a4950:	801a      	strh	r2, [r3, #0]
										break;	
   a4952:	bf00      	nop
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a4954:	e0eb      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
										Cl_Rinse_StopRinse();
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
										tempcount=0;
										break;	
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   a4956:	4b2b      	ldr	r3, [pc, #172]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a4958:	881b      	ldrh	r3, [r3, #0]
   a495a:	2b1a      	cmp	r3, #26
   a495c:	d111      	bne.n	a4982 <Cl_Rinse_Controller+0xf52>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   a495e:	4b29      	ldr	r3, [pc, #164]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a4960:	881b      	ldrh	r3, [r3, #0]
   a4962:	4a29      	ldr	r2, [pc, #164]	; (a4a08 <Cl_Rinse_Controller+0xfd8>)
   a4964:	00db      	lsls	r3, r3, #3
   a4966:	4413      	add	r3, r2
   a4968:	789b      	ldrb	r3, [r3, #2]
   a496a:	f083 0301 	eor.w	r3, r3, #1
   a496e:	b2db      	uxtb	r3, r3
   a4970:	2b00      	cmp	r3, #0
   a4972:	d006      	beq.n	a4982 <Cl_Rinse_Controller+0xf52>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   a4974:	2208      	movs	r2, #8
   a4976:	4927      	ldr	r1, [pc, #156]	; (a4a14 <Cl_Rinse_Controller+0xfe4>)
   a4978:	2018      	movs	r0, #24
   a497a:	4b1b      	ldr	r3, [pc, #108]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a497c:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   a497e:	4b26      	ldr	r3, [pc, #152]	; (a4a18 <Cl_Rinse_Controller+0xfe8>)
   a4980:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a4982:	4b20      	ldr	r3, [pc, #128]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a4984:	881b      	ldrh	r3, [r3, #0]
   a4986:	3301      	adds	r3, #1
   a4988:	b29a      	uxth	r2, r3
   a498a:	4b1e      	ldr	r3, [pc, #120]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a498c:	801a      	strh	r2, [r3, #0]
   a498e:	4b1d      	ldr	r3, [pc, #116]	; (a4a04 <Cl_Rinse_Controller+0xfd4>)
   a4990:	881b      	ldrh	r3, [r3, #0]
   a4992:	2b1a      	cmp	r3, #26
   a4994:	d9b9      	bls.n	a490a <Cl_Rinse_Controller+0xeda>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a4996:	e0ca      	b.n	a4b2e <Cl_Rinse_Controller+0x10fe>
					case EVENT_RINSE_CLR_ALARM:
					
							if(cl_rinse_powerFailureFlag == 1){
   a4998:	4b20      	ldr	r3, [pc, #128]	; (a4a1c <Cl_Rinse_Controller+0xfec>)
   a499a:	681b      	ldr	r3, [r3, #0]
   a499c:	2b01      	cmp	r3, #1
   a499e:	d149      	bne.n	a4a34 <Cl_Rinse_Controller+0x1004>
								
								Cl_SysStat_GetSensor_Status_Query(SENSOR_POWER_FAILURE,&powerFailSensorData);
   a49a0:	491f      	ldr	r1, [pc, #124]	; (a4a20 <Cl_Rinse_Controller+0xff0>)
   a49a2:	2024      	movs	r0, #36	; 0x24
   a49a4:	4b1f      	ldr	r3, [pc, #124]	; (a4a24 <Cl_Rinse_Controller+0xff4>)
   a49a6:	4798      	blx	r3
					
								if(powerFailSensorData == 0){
   a49a8:	4b1d      	ldr	r3, [pc, #116]	; (a4a20 <Cl_Rinse_Controller+0xff0>)
   a49aa:	881b      	ldrh	r3, [r3, #0]
   a49ac:	2b00      	cmp	r3, #0
   a49ae:	f040 80bb 	bne.w	a4b28 <Cl_Rinse_Controller+0x10f8>
									
									cl_rinse_powerFailureFlag = 0;
   a49b2:	4b1a      	ldr	r3, [pc, #104]	; (a4a1c <Cl_Rinse_Controller+0xfec>)
   a49b4:	2200      	movs	r2, #0
   a49b6:	601a      	str	r2, [r3, #0]
									command = CON_TX_COMMAND_ALARM_CLEARED;
   a49b8:	2351      	movs	r3, #81	; 0x51
   a49ba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
									Cl_SendDatatoconsole(command,&data,0);
   a49be:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a49c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a49c6:	2200      	movs	r2, #0
   a49c8:	4618      	mov	r0, r3
   a49ca:	4b07      	ldr	r3, [pc, #28]	; (a49e8 <Cl_Rinse_Controller+0xfb8>)
   a49cc:	4798      	blx	r3
									sv_cntrl_resetyellowalarm();
   a49ce:	4b16      	ldr	r3, [pc, #88]	; (a4a28 <Cl_Rinse_Controller+0xff8>)
   a49d0:	4798      	blx	r3
									sv_cntrl_resetredalarm();
   a49d2:	4b16      	ldr	r3, [pc, #88]	; (a4a2c <Cl_Rinse_Controller+0xffc>)
   a49d4:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   a49d6:	4b16      	ldr	r3, [pc, #88]	; (a4a30 <Cl_Rinse_Controller+0x1000>)
   a49d8:	4798      	blx	r3
									Cl_Rinse_ResetAlertsforReassertion();
   a49da:	4b0f      	ldr	r3, [pc, #60]	; (a4a18 <Cl_Rinse_Controller+0xfe8>)
   a49dc:	4798      	blx	r3
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
								}
				}
							}
						//alarm_flag = 1;
						break;
   a49de:	e0a3      	b.n	a4b28 <Cl_Rinse_Controller+0x10f8>
   a49e0:	20071b93 	.word	0x20071b93
   a49e4:	000a5ed9 	.word	0x000a5ed9
   a49e8:	0009cbd5 	.word	0x0009cbd5
   a49ec:	000a545d 	.word	0x000a545d
   a49f0:	20071b92 	.word	0x20071b92
   a49f4:	000a637d 	.word	0x000a637d
   a49f8:	20072350 	.word	0x20072350
   a49fc:	0009b701 	.word	0x0009b701
   a4a00:	000a5715 	.word	0x000a5715
   a4a04:	200727dc 	.word	0x200727dc
   a4a08:	20070c68 	.word	0x20070c68
   a4a0c:	00082bc1 	.word	0x00082bc1
   a4a10:	000aa454 	.word	0x000aa454
   a4a14:	000aa45c 	.word	0x000aa45c
   a4a18:	000a573d 	.word	0x000a573d
   a4a1c:	20071bbc 	.word	0x20071bbc
   a4a20:	20071bc0 	.word	0x20071bc0
   a4a24:	0008fa01 	.word	0x0008fa01
   a4a28:	0009b091 	.word	0x0009b091
   a4a2c:	0009b07d 	.word	0x0009b07d
   a4a30:	0009b0b9 	.word	0x0009b0b9
									Cl_Rinse_ResetAlertsforReassertion();
								}
							}
							else{
					
							command = CON_TX_COMMAND_ALARM_CLEARED;
   a4a34:	2351      	movs	r3, #81	; 0x51
   a4a36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4a3a:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4a3e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4a42:	2200      	movs	r2, #0
   a4a44:	4618      	mov	r0, r3
   a4a46:	4bc5      	ldr	r3, [pc, #788]	; (a4d5c <Cl_Rinse_Controller+0x132c>)
   a4a48:	4798      	blx	r3
   a4a4a:	4603      	mov	r3, r0
   a4a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
					
										sv_cntrl_resetyellowalarm();
   a4a50:	4bc3      	ldr	r3, [pc, #780]	; (a4d60 <Cl_Rinse_Controller+0x1330>)
   a4a52:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a4a54:	4bc3      	ldr	r3, [pc, #780]	; (a4d64 <Cl_Rinse_Controller+0x1334>)
   a4a56:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a4a58:	4bc3      	ldr	r3, [pc, #780]	; (a4d68 <Cl_Rinse_Controller+0x1338>)
   a4a5a:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a4a5c:	4bc3      	ldr	r3, [pc, #780]	; (a4d6c <Cl_Rinse_Controller+0x133c>)
   a4a5e:	4798      	blx	r3
										
								// manav02 added to clear saline prime alarm		
										if(prime_alarm_flag == 1){
   a4a60:	4bc3      	ldr	r3, [pc, #780]	; (a4d70 <Cl_Rinse_Controller+0x1340>)
   a4a62:	681b      	ldr	r3, [r3, #0]
   a4a64:	2b01      	cmp	r3, #1
   a4a66:	d10d      	bne.n	a4a84 <Cl_Rinse_Controller+0x1054>
											
										cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0); 	
   a4a68:	2100      	movs	r1, #0
   a4a6a:	2001      	movs	r0, #1
   a4a6c:	4bc1      	ldr	r3, [pc, #772]	; (a4d74 <Cl_Rinse_Controller+0x1344>)
   a4a6e:	4798      	blx	r3
											blood_flag = 1;
   a4a70:	4bc1      	ldr	r3, [pc, #772]	; (a4d78 <Cl_Rinse_Controller+0x1348>)
   a4a72:	2201      	movs	r2, #1
   a4a74:	701a      	strb	r2, [r3, #0]
											prime_alarm_flag = 0;
   a4a76:	4bbe      	ldr	r3, [pc, #760]	; (a4d70 <Cl_Rinse_Controller+0x1340>)
   a4a78:	2200      	movs	r2, #0
   a4a7a:	601a      	str	r2, [r3, #0]
											cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a4a7c:	4bbf      	ldr	r3, [pc, #764]	; (a4d7c <Cl_Rinse_Controller+0x134c>)
   a4a7e:	2209      	movs	r2, #9
   a4a80:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
								}
				}
							}
						//alarm_flag = 1;
						break;
   a4a82:	e051      	b.n	a4b28 <Cl_Rinse_Controller+0x10f8>
											prime_alarm_flag = 0;
											cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
										}
										else{
											
								Cl_rinseretcode = Cl_Rinse_StartRinse();
   a4a84:	4bbe      	ldr	r3, [pc, #760]	; (a4d80 <Cl_Rinse_Controller+0x1350>)
   a4a86:	4798      	blx	r3
   a4a88:	4603      	mov	r3, r0
   a4a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								if(Cl_rinseretcode == CL_OK){
   a4a8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   a4a92:	2b00      	cmp	r3, #0
   a4a94:	d148      	bne.n	a4b28 <Cl_Rinse_Controller+0x10f8>
									
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   a4a96:	2308      	movs	r3, #8
   a4a98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4a9c:	2301      	movs	r3, #1
   a4a9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   a4aa2:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4aa6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4aaa:	2201      	movs	r2, #1
   a4aac:	4618      	mov	r0, r3
   a4aae:	4bab      	ldr	r3, [pc, #684]	; (a4d5c <Cl_Rinse_Controller+0x132c>)
   a4ab0:	4798      	blx	r3
   a4ab2:	4603      	mov	r3, r0
   a4ab4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							command = CON_TX_COMMAND_RINSE_STARTED;
   a4ab8:	2309      	movs	r3, #9
   a4aba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4abe:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4ac2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4ac6:	2200      	movs	r2, #0
   a4ac8:	4618      	mov	r0, r3
   a4aca:	4ba4      	ldr	r3, [pc, #656]	; (a4d5c <Cl_Rinse_Controller+0x132c>)
   a4acc:	4798      	blx	r3
   a4ace:	4603      	mov	r3, r0
   a4ad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_wait(20);
   a4ad4:	2014      	movs	r0, #20
   a4ad6:	4bab      	ldr	r3, [pc, #684]	; (a4d84 <Cl_Rinse_Controller+0x1354>)
   a4ad8:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4ada:	4bab      	ldr	r3, [pc, #684]	; (a4d88 <Cl_Rinse_Controller+0x1358>)
   a4adc:	4798      	blx	r3
   a4ade:	4603      	mov	r3, r0
   a4ae0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   a4ae4:	4ba5      	ldr	r3, [pc, #660]	; (a4d7c <Cl_Rinse_Controller+0x134c>)
   a4ae6:	2203      	movs	r2, #3
   a4ae8:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
   a4aea:	4ba8      	ldr	r3, [pc, #672]	; (a4d8c <Cl_Rinse_Controller+0x135c>)
   a4aec:	2201      	movs	r2, #1
   a4aee:	701a      	strb	r2, [r3, #0]
								}
				}
							}
						//alarm_flag = 1;
						break;
   a4af0:	e01a      	b.n	a4b28 <Cl_Rinse_Controller+0x10f8>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a4af2:	4ba7      	ldr	r3, [pc, #668]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4af4:	7e1b      	ldrb	r3, [r3, #24]
   a4af6:	2b00      	cmp	r3, #0
   a4af8:	d018      	beq.n	a4b2c <Cl_Rinse_Controller+0x10fc>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4afa:	4ba5      	ldr	r3, [pc, #660]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4afc:	791b      	ldrb	r3, [r3, #4]
   a4afe:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a4b00:	4ba3      	ldr	r3, [pc, #652]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4b02:	791b      	ldrb	r3, [r3, #4]
   a4b04:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a4b06:	4ba2      	ldr	r3, [pc, #648]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4b08:	791b      	ldrb	r3, [r3, #4]
   a4b0a:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a4b0c:	4ba0      	ldr	r3, [pc, #640]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4b0e:	791b      	ldrb	r3, [r3, #4]
   a4b10:	75fb      	strb	r3, [r7, #23]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a4b12:	8abb      	ldrh	r3, [r7, #20]
   a4b14:	b21b      	sxth	r3, r3
   a4b16:	4619      	mov	r1, r3
   a4b18:	200e      	movs	r0, #14
   a4b1a:	4b96      	ldr	r3, [pc, #600]	; (a4d74 <Cl_Rinse_Controller+0x1344>)
   a4b1c:	4798      	blx	r3
						}
					break;
   a4b1e:	e005      	b.n	a4b2c <Cl_Rinse_Controller+0x10fc>
					default:break;
   a4b20:	bf00      	nop
   a4b22:	e29e      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
							break;
							default:
							break;
						}
					}
					break;
   a4b24:	bf00      	nop
   a4b26:	e29c      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;  
								}
				}
							}
						//alarm_flag = 1;
						break;
   a4b28:	bf00      	nop
   a4b2a:	e29a      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
					break;
   a4b2c:	bf00      	nop
					default:break;
				}
		break;
   a4b2e:	e298      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   a4b30:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4b34:	3b01      	subs	r3, #1
   a4b36:	2b1f      	cmp	r3, #31
   a4b38:	f200 81fe 	bhi.w	a4f38 <Cl_Rinse_Controller+0x1508>
   a4b3c:	a201      	add	r2, pc, #4	; (adr r2, a4b44 <Cl_Rinse_Controller+0x1114>)
   a4b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4b42:	bf00      	nop
   a4b44:	000a4edd 	.word	0x000a4edd
   a4b48:	000a4bd1 	.word	0x000a4bd1
   a4b4c:	000a4f39 	.word	0x000a4f39
   a4b50:	000a4c4b 	.word	0x000a4c4b
   a4b54:	000a4c67 	.word	0x000a4c67
   a4b58:	000a4f39 	.word	0x000a4f39
   a4b5c:	000a4f39 	.word	0x000a4f39
   a4b60:	000a4f39 	.word	0x000a4f39
   a4b64:	000a4f39 	.word	0x000a4f39
   a4b68:	000a4f39 	.word	0x000a4f39
   a4b6c:	000a4f39 	.word	0x000a4f39
   a4b70:	000a4f39 	.word	0x000a4f39
   a4b74:	000a4f39 	.word	0x000a4f39
   a4b78:	000a4f39 	.word	0x000a4f39
   a4b7c:	000a4f39 	.word	0x000a4f39
   a4b80:	000a4f39 	.word	0x000a4f39
   a4b84:	000a4f39 	.word	0x000a4f39
   a4b88:	000a4f39 	.word	0x000a4f39
   a4b8c:	000a4f39 	.word	0x000a4f39
   a4b90:	000a4f39 	.word	0x000a4f39
   a4b94:	000a4f39 	.word	0x000a4f39
   a4b98:	000a4bc5 	.word	0x000a4bc5
   a4b9c:	000a4c83 	.word	0x000a4c83
   a4ba0:	000a4f39 	.word	0x000a4f39
   a4ba4:	000a4ed9 	.word	0x000a4ed9
   a4ba8:	000a4e69 	.word	0x000a4e69
   a4bac:	000a4e99 	.word	0x000a4e99
   a4bb0:	000a4f39 	.word	0x000a4f39
   a4bb4:	000a4f39 	.word	0x000a4f39
   a4bb8:	000a4f0b 	.word	0x000a4f0b
   a4bbc:	000a4ea3 	.word	0x000a4ea3
   a4bc0:	000a4ec5 	.word	0x000a4ec5
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a4bc4:	4b73      	ldr	r3, [pc, #460]	; (a4d94 <Cl_Rinse_Controller+0x1364>)
   a4bc6:	4798      	blx	r3
   a4bc8:	4603      	mov	r3, r0
   a4bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a4bce:	e1bc      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					
					case EVENT_START_RINSE:
					
					if(Cl_ConsoleRxMsg.msgready == true)
   a4bd0:	4b6f      	ldr	r3, [pc, #444]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4bd2:	7e1b      	ldrb	r3, [r3, #24]
   a4bd4:	2b00      	cmp	r3, #0
   a4bd6:	d00b      	beq.n	a4bf0 <Cl_Rinse_Controller+0x11c0>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4bd8:	4b6d      	ldr	r3, [pc, #436]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4bda:	791b      	ldrb	r3, [r3, #4]
   a4bdc:	743b      	strb	r3, [r7, #16]
					if (cl_temp.bytearray[0] == 1)
   a4bde:	7c3b      	ldrb	r3, [r7, #16]
   a4be0:	2b01      	cmp	r3, #1
   a4be2:	d005      	beq.n	a4bf0 <Cl_Rinse_Controller+0x11c0>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   a4be4:	7c3b      	ldrb	r3, [r7, #16]
   a4be6:	2b02      	cmp	r3, #2
   a4be8:	d102      	bne.n	a4bf0 <Cl_Rinse_Controller+0x11c0>
					{
						hotrinse_flag = 1;
   a4bea:	4b6b      	ldr	r3, [pc, #428]	; (a4d98 <Cl_Rinse_Controller+0x1368>)
   a4bec:	2201      	movs	r2, #1
   a4bee:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   a4bf0:	4b63      	ldr	r3, [pc, #396]	; (a4d80 <Cl_Rinse_Controller+0x1350>)
   a4bf2:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a4bf4:	2308      	movs	r3, #8
   a4bf6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a4bfa:	2301      	movs	r3, #1
   a4bfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a4c00:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4c04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4c08:	2201      	movs	r2, #1
   a4c0a:	4618      	mov	r0, r3
   a4c0c:	4b53      	ldr	r3, [pc, #332]	; (a4d5c <Cl_Rinse_Controller+0x132c>)
   a4c0e:	4798      	blx	r3
   a4c10:	4603      	mov	r3, r0
   a4c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a4c16:	2309      	movs	r3, #9
   a4c18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4c1c:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4c20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4c24:	2200      	movs	r2, #0
   a4c26:	4618      	mov	r0, r3
   a4c28:	4b4c      	ldr	r3, [pc, #304]	; (a4d5c <Cl_Rinse_Controller+0x132c>)
   a4c2a:	4798      	blx	r3
   a4c2c:	4603      	mov	r3, r0
   a4c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4c32:	4b55      	ldr	r3, [pc, #340]	; (a4d88 <Cl_Rinse_Controller+0x1358>)
   a4c34:	4798      	blx	r3
   a4c36:	4603      	mov	r3, r0
   a4c38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a4c3c:	4b4f      	ldr	r3, [pc, #316]	; (a4d7c <Cl_Rinse_Controller+0x134c>)
   a4c3e:	2203      	movs	r2, #3
   a4c40:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a4c42:	4b52      	ldr	r3, [pc, #328]	; (a4d8c <Cl_Rinse_Controller+0x135c>)
   a4c44:	2201      	movs	r2, #1
   a4c46:	701a      	strb	r2, [r3, #0]
					break;
   a4c48:	e17f      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a4c4a:	4b4d      	ldr	r3, [pc, #308]	; (a4d80 <Cl_Rinse_Controller+0x1350>)
   a4c4c:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4c4e:	4b4e      	ldr	r3, [pc, #312]	; (a4d88 <Cl_Rinse_Controller+0x1358>)
   a4c50:	4798      	blx	r3
   a4c52:	4603      	mov	r3, r0
   a4c54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a4c58:	4b48      	ldr	r3, [pc, #288]	; (a4d7c <Cl_Rinse_Controller+0x134c>)
   a4c5a:	2204      	movs	r2, #4
   a4c5c:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a4c5e:	4b4b      	ldr	r3, [pc, #300]	; (a4d8c <Cl_Rinse_Controller+0x135c>)
   a4c60:	2201      	movs	r2, #1
   a4c62:	701a      	strb	r2, [r3, #0]
					break;
   a4c64:	e171      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a4c66:	4b46      	ldr	r3, [pc, #280]	; (a4d80 <Cl_Rinse_Controller+0x1350>)
   a4c68:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a4c6a:	4b47      	ldr	r3, [pc, #284]	; (a4d88 <Cl_Rinse_Controller+0x1358>)
   a4c6c:	4798      	blx	r3
   a4c6e:	4603      	mov	r3, r0
   a4c70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a4c74:	4b41      	ldr	r3, [pc, #260]	; (a4d7c <Cl_Rinse_Controller+0x134c>)
   a4c76:	2205      	movs	r2, #5
   a4c78:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a4c7a:	4b44      	ldr	r3, [pc, #272]	; (a4d8c <Cl_Rinse_Controller+0x135c>)
   a4c7c:	2201      	movs	r2, #1
   a4c7e:	701a      	strb	r2, [r3, #0]
					break;
   a4c80:	e163      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a4c82:	4b43      	ldr	r3, [pc, #268]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4c84:	7e1b      	ldrb	r3, [r3, #24]
   a4c86:	2b00      	cmp	r3, #0
   a4c88:	f000 8158 	beq.w	a4f3c <Cl_Rinse_Controller+0x150c>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a4c8c:	4b40      	ldr	r3, [pc, #256]	; (a4d90 <Cl_Rinse_Controller+0x1360>)
   a4c8e:	791b      	ldrb	r3, [r3, #4]
   a4c90:	3b01      	subs	r3, #1
   a4c92:	2b20      	cmp	r3, #32
   a4c94:	f200 80e6 	bhi.w	a4e64 <Cl_Rinse_Controller+0x1434>
   a4c98:	a201      	add	r2, pc, #4	; (adr r2, a4ca0 <Cl_Rinse_Controller+0x1270>)
   a4c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4c9e:	bf00      	nop
   a4ca0:	000a4d25 	.word	0x000a4d25
   a4ca4:	000a4da1 	.word	0x000a4da1
   a4ca8:	000a4e65 	.word	0x000a4e65
   a4cac:	000a4e65 	.word	0x000a4e65
   a4cb0:	000a4e65 	.word	0x000a4e65
   a4cb4:	000a4e65 	.word	0x000a4e65
   a4cb8:	000a4e65 	.word	0x000a4e65
   a4cbc:	000a4e65 	.word	0x000a4e65
   a4cc0:	000a4e65 	.word	0x000a4e65
   a4cc4:	000a4e65 	.word	0x000a4e65
   a4cc8:	000a4e65 	.word	0x000a4e65
   a4ccc:	000a4e65 	.word	0x000a4e65
   a4cd0:	000a4e65 	.word	0x000a4e65
   a4cd4:	000a4e65 	.word	0x000a4e65
   a4cd8:	000a4e65 	.word	0x000a4e65
   a4cdc:	000a4e65 	.word	0x000a4e65
   a4ce0:	000a4e65 	.word	0x000a4e65
   a4ce4:	000a4e65 	.word	0x000a4e65
   a4ce8:	000a4e65 	.word	0x000a4e65
   a4cec:	000a4e65 	.word	0x000a4e65
   a4cf0:	000a4e65 	.word	0x000a4e65
   a4cf4:	000a4e65 	.word	0x000a4e65
   a4cf8:	000a4e65 	.word	0x000a4e65
   a4cfc:	000a4e65 	.word	0x000a4e65
   a4d00:	000a4e65 	.word	0x000a4e65
   a4d04:	000a4e65 	.word	0x000a4e65
   a4d08:	000a4e65 	.word	0x000a4e65
   a4d0c:	000a4e65 	.word	0x000a4e65
   a4d10:	000a4e65 	.word	0x000a4e65
   a4d14:	000a4dd9 	.word	0x000a4dd9
   a4d18:	000a4e65 	.word	0x000a4e65
   a4d1c:	000a4e03 	.word	0x000a4e03
   a4d20:	000a4e2d 	.word	0x000a4e2d
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a4d24:	2316      	movs	r3, #22
   a4d26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a4d2a:	2301      	movs	r3, #1
   a4d2c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a4d30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a4d34:	3301      	adds	r3, #1
   a4d36:	4619      	mov	r1, r3
   a4d38:	2001      	movs	r0, #1
   a4d3a:	4b18      	ldr	r3, [pc, #96]	; (a4d9c <Cl_Rinse_Controller+0x136c>)
   a4d3c:	4798      	blx	r3
   a4d3e:	4603      	mov	r3, r0
   a4d40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a4d44:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a4d48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4d4c:	2202      	movs	r2, #2
   a4d4e:	4618      	mov	r0, r3
   a4d50:	4b02      	ldr	r3, [pc, #8]	; (a4d5c <Cl_Rinse_Controller+0x132c>)
   a4d52:	4798      	blx	r3
   a4d54:	4603      	mov	r3, r0
   a4d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a4d5a:	e084      	b.n	a4e66 <Cl_Rinse_Controller+0x1436>
   a4d5c:	0009cbd5 	.word	0x0009cbd5
   a4d60:	0009b091 	.word	0x0009b091
   a4d64:	0009b07d 	.word	0x0009b07d
   a4d68:	0009b0b9 	.word	0x0009b0b9
   a4d6c:	000a573d 	.word	0x000a573d
   a4d70:	20071bb8 	.word	0x20071bb8
   a4d74:	00088019 	.word	0x00088019
   a4d78:	20071b8c 	.word	0x20071b8c
   a4d7c:	20071b92 	.word	0x20071b92
   a4d80:	000a5ed9 	.word	0x000a5ed9
   a4d84:	00093ea9 	.word	0x00093ea9
   a4d88:	000a545d 	.word	0x000a545d
   a4d8c:	20071b93 	.word	0x20071b93
   a4d90:	20072350 	.word	0x20072350
   a4d94:	000a5715 	.word	0x000a5715
   a4d98:	20071bb5 	.word	0x20071bb5
   a4d9c:	0009b701 	.word	0x0009b701
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a4da0:	2316      	movs	r3, #22
   a4da2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a4da6:	2302      	movs	r3, #2
   a4da8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a4dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a4db0:	3301      	adds	r3, #1
   a4db2:	4619      	mov	r1, r3
   a4db4:	2002      	movs	r0, #2
   a4db6:	4bae      	ldr	r3, [pc, #696]	; (a5070 <Cl_Rinse_Controller+0x1640>)
   a4db8:	4798      	blx	r3
   a4dba:	4603      	mov	r3, r0
   a4dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a4dc0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a4dc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4dc8:	2202      	movs	r2, #2
   a4dca:	4618      	mov	r0, r3
   a4dcc:	4ba9      	ldr	r3, [pc, #676]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4dce:	4798      	blx	r3
   a4dd0:	4603      	mov	r3, r0
   a4dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a4dd6:	e046      	b.n	a4e66 <Cl_Rinse_Controller+0x1436>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a4dd8:	2316      	movs	r3, #22
   a4dda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   a4dde:	2320      	movs	r3, #32
   a4de0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a4de4:	2300      	movs	r3, #0
   a4de6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a4dea:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a4dee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4df2:	2202      	movs	r2, #2
   a4df4:	4618      	mov	r0, r3
   a4df6:	4b9f      	ldr	r3, [pc, #636]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4df8:	4798      	blx	r3
   a4dfa:	4603      	mov	r3, r0
   a4dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a4e00:	e031      	b.n	a4e66 <Cl_Rinse_Controller+0x1436>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a4e02:	2316      	movs	r3, #22
   a4e04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   a4e08:	2321      	movs	r3, #33	; 0x21
   a4e0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a4e0e:	2300      	movs	r3, #0
   a4e10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a4e14:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a4e18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4e1c:	2202      	movs	r2, #2
   a4e1e:	4618      	mov	r0, r3
   a4e20:	4b94      	ldr	r3, [pc, #592]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4e22:	4798      	blx	r3
   a4e24:	4603      	mov	r3, r0
   a4e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a4e2a:	e01c      	b.n	a4e66 <Cl_Rinse_Controller+0x1436>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a4e2c:	2316      	movs	r3, #22
   a4e2e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a4e32:	2323      	movs	r3, #35	; 0x23
   a4e34:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a4e38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a4e3c:	3301      	adds	r3, #1
   a4e3e:	4619      	mov	r1, r3
   a4e40:	2028      	movs	r0, #40	; 0x28
   a4e42:	4b8b      	ldr	r3, [pc, #556]	; (a5070 <Cl_Rinse_Controller+0x1640>)
   a4e44:	4798      	blx	r3
   a4e46:	4603      	mov	r3, r0
   a4e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a4e4c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a4e50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4e54:	2202      	movs	r2, #2
   a4e56:	4618      	mov	r0, r3
   a4e58:	4b86      	ldr	r3, [pc, #536]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4e5a:	4798      	blx	r3
   a4e5c:	4603      	mov	r3, r0
   a4e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a4e62:	e000      	b.n	a4e66 <Cl_Rinse_Controller+0x1436>
							
							default:
							break;
   a4e64:	bf00      	nop
						}
					}
					break;
   a4e66:	e069      	b.n	a4f3c <Cl_Rinse_Controller+0x150c>
					case EVT_RINSE_START_PRIME:
					
					sv_cntrl_resetgreenalarm();
   a4e68:	4b83      	ldr	r3, [pc, #524]	; (a5078 <Cl_Rinse_Controller+0x1648>)
   a4e6a:	4798      	blx	r3
						blood_flag = 1;
   a4e6c:	4b83      	ldr	r3, [pc, #524]	; (a507c <Cl_Rinse_Controller+0x164c>)
   a4e6e:	2201      	movs	r2, #1
   a4e70:	701a      	strb	r2, [r3, #0]
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a4e72:	4b83      	ldr	r3, [pc, #524]	; (a5080 <Cl_Rinse_Controller+0x1650>)
   a4e74:	781b      	ldrb	r3, [r3, #0]
   a4e76:	2b01      	cmp	r3, #1
   a4e78:	d062      	beq.n	a4f40 <Cl_Rinse_Controller+0x1510>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a4e7a:	2206      	movs	r2, #6
   a4e7c:	4981      	ldr	r1, [pc, #516]	; (a5084 <Cl_Rinse_Controller+0x1654>)
   a4e7e:	2018      	movs	r0, #24
   a4e80:	4b7c      	ldr	r3, [pc, #496]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4e82:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   a4e84:	4b80      	ldr	r3, [pc, #512]	; (a5088 <Cl_Rinse_Controller+0x1658>)
   a4e86:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a4e88:	4b80      	ldr	r3, [pc, #512]	; (a508c <Cl_Rinse_Controller+0x165c>)
   a4e8a:	2200      	movs	r2, #0
   a4e8c:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a4e8e:	2100      	movs	r1, #0
   a4e90:	2001      	movs	r0, #1
   a4e92:	4b7f      	ldr	r3, [pc, #508]	; (a5090 <Cl_Rinse_Controller+0x1660>)
   a4e94:	4798      	blx	r3
					}
						
					break;
   a4e96:	e053      	b.n	a4f40 <Cl_Rinse_Controller+0x1510>
					case EVT_RINSE_STOP_PRIME:
					//blood_flag = 0;
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a4e98:	2100      	movs	r1, #0
   a4e9a:	2002      	movs	r0, #2
   a4e9c:	4b7c      	ldr	r3, [pc, #496]	; (a5090 <Cl_Rinse_Controller+0x1660>)
   a4e9e:	4798      	blx	r3
					break;
   a4ea0:	e053      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a4ea2:	4b77      	ldr	r3, [pc, #476]	; (a5080 <Cl_Rinse_Controller+0x1650>)
   a4ea4:	781b      	ldrb	r3, [r3, #0]
   a4ea6:	2b01      	cmp	r3, #1
   a4ea8:	d04c      	beq.n	a4f44 <Cl_Rinse_Controller+0x1514>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a4eaa:	2206      	movs	r2, #6
   a4eac:	4979      	ldr	r1, [pc, #484]	; (a5094 <Cl_Rinse_Controller+0x1664>)
   a4eae:	2018      	movs	r0, #24
   a4eb0:	4b70      	ldr	r3, [pc, #448]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4eb2:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a4eb4:	2100      	movs	r1, #0
   a4eb6:	2005      	movs	r0, #5
   a4eb8:	4b75      	ldr	r3, [pc, #468]	; (a5090 <Cl_Rinse_Controller+0x1660>)
   a4eba:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a4ebc:	4b73      	ldr	r3, [pc, #460]	; (a508c <Cl_Rinse_Controller+0x165c>)
   a4ebe:	2200      	movs	r2, #0
   a4ec0:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   a4ec2:	e03f      	b.n	a4f44 <Cl_Rinse_Controller+0x1514>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a4ec4:	2206      	movs	r2, #6
   a4ec6:	4974      	ldr	r1, [pc, #464]	; (a5098 <Cl_Rinse_Controller+0x1668>)
   a4ec8:	2018      	movs	r0, #24
   a4eca:	4b6a      	ldr	r3, [pc, #424]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4ecc:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a4ece:	2100      	movs	r1, #0
   a4ed0:	2006      	movs	r0, #6
   a4ed2:	4b6f      	ldr	r3, [pc, #444]	; (a5090 <Cl_Rinse_Controller+0x1660>)
   a4ed4:	4798      	blx	r3

						
					break;
   a4ed6:	e038      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   a4ed8:	2300      	movs	r3, #0
   a4eda:	e0c4      	b.n	a5066 <Cl_Rinse_Controller+0x1636>
					break;
					
					case EVENT_RINSE_CLR_ALARM:
					
					command = CON_TX_COMMAND_ALARM_CLEARED;
   a4edc:	2351      	movs	r3, #81	; 0x51
   a4ede:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a4ee2:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a4ee6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a4eea:	2200      	movs	r2, #0
   a4eec:	4618      	mov	r0, r3
   a4eee:	4b61      	ldr	r3, [pc, #388]	; (a5074 <Cl_Rinse_Controller+0x1644>)
   a4ef0:	4798      	blx	r3
   a4ef2:	4603      	mov	r3, r0
   a4ef4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					
					
					sv_cntrl_resetyellowalarm();
   a4ef8:	4b68      	ldr	r3, [pc, #416]	; (a509c <Cl_Rinse_Controller+0x166c>)
   a4efa:	4798      	blx	r3
					sv_cntrl_resetredalarm();
   a4efc:	4b68      	ldr	r3, [pc, #416]	; (a50a0 <Cl_Rinse_Controller+0x1670>)
   a4efe:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   a4f00:	4b68      	ldr	r3, [pc, #416]	; (a50a4 <Cl_Rinse_Controller+0x1674>)
   a4f02:	4798      	blx	r3
					Cl_Rinse_ResetAlertsforReassertion();
   a4f04:	4b68      	ldr	r3, [pc, #416]	; (a50a8 <Cl_Rinse_Controller+0x1678>)
   a4f06:	4798      	blx	r3
					
					break;
   a4f08:	e01f      	b.n	a4f4a <Cl_Rinse_Controller+0x151a>
					
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a4f0a:	4b68      	ldr	r3, [pc, #416]	; (a50ac <Cl_Rinse_Controller+0x167c>)
   a4f0c:	7e1b      	ldrb	r3, [r3, #24]
   a4f0e:	2b00      	cmp	r3, #0
   a4f10:	d01a      	beq.n	a4f48 <Cl_Rinse_Controller+0x1518>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4f12:	4b66      	ldr	r3, [pc, #408]	; (a50ac <Cl_Rinse_Controller+0x167c>)
   a4f14:	791b      	ldrb	r3, [r3, #4]
   a4f16:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a4f18:	4b64      	ldr	r3, [pc, #400]	; (a50ac <Cl_Rinse_Controller+0x167c>)
   a4f1a:	791b      	ldrb	r3, [r3, #4]
   a4f1c:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a4f1e:	4b63      	ldr	r3, [pc, #396]	; (a50ac <Cl_Rinse_Controller+0x167c>)
   a4f20:	791b      	ldrb	r3, [r3, #4]
   a4f22:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a4f24:	4b61      	ldr	r3, [pc, #388]	; (a50ac <Cl_Rinse_Controller+0x167c>)
   a4f26:	791b      	ldrb	r3, [r3, #4]
   a4f28:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a4f2a:	89bb      	ldrh	r3, [r7, #12]
   a4f2c:	b21b      	sxth	r3, r3
   a4f2e:	4619      	mov	r1, r3
   a4f30:	200e      	movs	r0, #14
   a4f32:	4b57      	ldr	r3, [pc, #348]	; (a5090 <Cl_Rinse_Controller+0x1660>)
   a4f34:	4798      	blx	r3
					}
					break;
   a4f36:	e007      	b.n	a4f48 <Cl_Rinse_Controller+0x1518>
					default: 
					
					return(CL_REJECTED);
   a4f38:	2303      	movs	r3, #3
   a4f3a:	e094      	b.n	a5066 <Cl_Rinse_Controller+0x1636>
							
							default:
							break;
						}
					}
					break;
   a4f3c:	bf00      	nop
   a4f3e:	e090      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
						cl_dprep_activate_prime_related_alarms();
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
					}
						
					break;
   a4f40:	bf00      	nop
   a4f42:	e08e      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
					}
						
					break;
   a4f44:	bf00      	nop
   a4f46:	e08c      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
					}
					break;
   a4f48:	bf00      	nop
					
					return(CL_REJECTED);
					break;
				}
					
		break;
   a4f4a:	e08a      	b.n	a5062 <Cl_Rinse_Controller+0x1632>

	
	default:
			switch(cl_rinseevent)
   a4f4c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a4f50:	3b02      	subs	r3, #2
   a4f52:	2b17      	cmp	r3, #23
   a4f54:	d87c      	bhi.n	a5050 <Cl_Rinse_Controller+0x1620>
   a4f56:	a201      	add	r2, pc, #4	; (adr r2, a4f5c <Cl_Rinse_Controller+0x152c>)
   a4f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4f5c:	000a5051 	.word	0x000a5051
   a4f60:	000a5051 	.word	0x000a5051
   a4f64:	000a5051 	.word	0x000a5051
   a4f68:	000a5051 	.word	0x000a5051
   a4f6c:	000a4fbd 	.word	0x000a4fbd
   a4f70:	000a5051 	.word	0x000a5051
   a4f74:	000a5051 	.word	0x000a5051
   a4f78:	000a5051 	.word	0x000a5051
   a4f7c:	000a5051 	.word	0x000a5051
   a4f80:	000a5051 	.word	0x000a5051
   a4f84:	000a5051 	.word	0x000a5051
   a4f88:	000a5051 	.word	0x000a5051
   a4f8c:	000a5041 	.word	0x000a5041
   a4f90:	000a5051 	.word	0x000a5051
   a4f94:	000a5051 	.word	0x000a5051
   a4f98:	000a5051 	.word	0x000a5051
   a4f9c:	000a5051 	.word	0x000a5051
   a4fa0:	000a5051 	.word	0x000a5051
   a4fa4:	000a5051 	.word	0x000a5051
   a4fa8:	000a5051 	.word	0x000a5051
   a4fac:	000a4fc3 	.word	0x000a4fc3
   a4fb0:	000a5051 	.word	0x000a5051
   a4fb4:	000a5051 	.word	0x000a5051
   a4fb8:	000a4fcf 	.word	0x000a4fcf
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   a4fbc:	4b3c      	ldr	r3, [pc, #240]	; (a50b0 <Cl_Rinse_Controller+0x1680>)
   a4fbe:	4798      	blx	r3
				break;
   a4fc0:	e04b      	b.n	a505a <Cl_Rinse_Controller+0x162a>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a4fc2:	4b3c      	ldr	r3, [pc, #240]	; (a50b4 <Cl_Rinse_Controller+0x1684>)
   a4fc4:	4798      	blx	r3
   a4fc6:	4603      	mov	r3, r0
   a4fc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				
				break;
   a4fcc:	e045      	b.n	a505a <Cl_Rinse_Controller+0x162a>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a4fce:	4b3a      	ldr	r3, [pc, #232]	; (a50b8 <Cl_Rinse_Controller+0x1688>)
   a4fd0:	781b      	ldrb	r3, [r3, #0]
   a4fd2:	2b09      	cmp	r3, #9
   a4fd4:	d03e      	beq.n	a5054 <Cl_Rinse_Controller+0x1624>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a4fd6:	2100      	movs	r1, #0
   a4fd8:	200c      	movs	r0, #12
   a4fda:	4b38      	ldr	r3, [pc, #224]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a4fdc:	4798      	blx	r3
   a4fde:	4603      	mov	r3, r0
   a4fe0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4fe4:	2100      	movs	r1, #0
   a4fe6:	200d      	movs	r0, #13
   a4fe8:	4b34      	ldr	r3, [pc, #208]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a4fea:	4798      	blx	r3
   a4fec:	4603      	mov	r3, r0
   a4fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a4ff2:	2100      	movs	r1, #0
   a4ff4:	200e      	movs	r0, #14
   a4ff6:	4b31      	ldr	r3, [pc, #196]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a4ff8:	4798      	blx	r3
   a4ffa:	4603      	mov	r3, r0
   a4ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a5000:	2100      	movs	r1, #0
   a5002:	2029      	movs	r0, #41	; 0x29
   a5004:	4b2d      	ldr	r3, [pc, #180]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a5006:	4798      	blx	r3
   a5008:	4603      	mov	r3, r0
   a500a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a500e:	2100      	movs	r1, #0
   a5010:	202b      	movs	r0, #43	; 0x2b
   a5012:	4b2a      	ldr	r3, [pc, #168]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a5014:	4798      	blx	r3
   a5016:	4603      	mov	r3, r0
   a5018:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a501c:	2100      	movs	r1, #0
   a501e:	2003      	movs	r0, #3
   a5020:	4b26      	ldr	r3, [pc, #152]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a5022:	4798      	blx	r3
   a5024:	4603      	mov	r3, r0
   a5026:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a502a:	2100      	movs	r1, #0
   a502c:	2004      	movs	r0, #4
   a502e:	4b23      	ldr	r3, [pc, #140]	; (a50bc <Cl_Rinse_Controller+0x168c>)
   a5030:	4798      	blx	r3
   a5032:	4603      	mov	r3, r0
   a5034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a5038:	4b1f      	ldr	r3, [pc, #124]	; (a50b8 <Cl_Rinse_Controller+0x1688>)
   a503a:	2209      	movs	r2, #9
   a503c:	701a      	strb	r2, [r3, #0]
				}
				break;
   a503e:	e009      	b.n	a5054 <Cl_Rinse_Controller+0x1624>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   a5040:	4b1d      	ldr	r3, [pc, #116]	; (a50b8 <Cl_Rinse_Controller+0x1688>)
   a5042:	781b      	ldrb	r3, [r3, #0]
   a5044:	2b09      	cmp	r3, #9
   a5046:	d007      	beq.n	a5058 <Cl_Rinse_Controller+0x1628>
				{
					Cl_rinseretcode = CL_ERROR;
   a5048:	2304      	movs	r3, #4
   a504a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
   a504e:	e003      	b.n	a5058 <Cl_Rinse_Controller+0x1628>
				default:
				break;
   a5050:	bf00      	nop
   a5052:	e006      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
				}
				break;
   a5054:	bf00      	nop
   a5056:	e004      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
				{
					Cl_rinseretcode = CL_ERROR;
				}
				break;
   a5058:	bf00      	nop
				default:
				break;
			}
	break;
   a505a:	e002      	b.n	a5062 <Cl_Rinse_Controller+0x1632>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   a505c:	bf00      	nop
   a505e:	e000      	b.n	a5062 <Cl_Rinse_Controller+0x1632>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a5060:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   a5062:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
   a5066:	4618      	mov	r0, r3
   a5068:	3748      	adds	r7, #72	; 0x48
   a506a:	46bd      	mov	sp, r7
   a506c:	bd80      	pop	{r7, pc}
   a506e:	bf00      	nop
   a5070:	0009b701 	.word	0x0009b701
   a5074:	0009cbd5 	.word	0x0009cbd5
   a5078:	0009b0a5 	.word	0x0009b0a5
   a507c:	20071b8c 	.word	0x20071b8c
   a5080:	20071866 	.word	0x20071866
   a5084:	000aa464 	.word	0x000aa464
   a5088:	00088a91 	.word	0x00088a91
   a508c:	20070c68 	.word	0x20070c68
   a5090:	00088019 	.word	0x00088019
   a5094:	000aa440 	.word	0x000aa440
   a5098:	000aa448 	.word	0x000aa448
   a509c:	0009b091 	.word	0x0009b091
   a50a0:	0009b07d 	.word	0x0009b07d
   a50a4:	0009b0b9 	.word	0x0009b0b9
   a50a8:	000a573d 	.word	0x000a573d
   a50ac:	20072350 	.word	0x20072350
   a50b0:	000a637d 	.word	0x000a637d
   a50b4:	000a5715 	.word	0x000a5715
   a50b8:	20071b92 	.word	0x20071b92
   a50bc:	000829e5 	.word	0x000829e5

000a50c0 <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   a50c0:	b480      	push	{r7}
   a50c2:	b083      	sub	sp, #12
   a50c4:	af00      	add	r7, sp, #0
   a50c6:	4603      	mov	r3, r0
   a50c8:	6039      	str	r1, [r7, #0]
   a50ca:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   a50cc:	79fb      	ldrb	r3, [r7, #7]
   a50ce:	3b07      	subs	r3, #7
   a50d0:	2b58      	cmp	r3, #88	; 0x58
   a50d2:	f200 8131 	bhi.w	a5338 <cl_rinse_translatemacevent+0x278>
   a50d6:	a201      	add	r2, pc, #4	; (adr r2, a50dc <cl_rinse_translatemacevent+0x1c>)
   a50d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a50dc:	000a5261 	.word	0x000a5261
   a50e0:	000a5279 	.word	0x000a5279
   a50e4:	000a5291 	.word	0x000a5291
   a50e8:	000a5309 	.word	0x000a5309
   a50ec:	000a5311 	.word	0x000a5311
   a50f0:	000a5319 	.word	0x000a5319
   a50f4:	000a52d9 	.word	0x000a52d9
   a50f8:	000a52e1 	.word	0x000a52e1
   a50fc:	000a52e9 	.word	0x000a52e9
   a5100:	000a52f1 	.word	0x000a52f1
   a5104:	000a5339 	.word	0x000a5339
   a5108:	000a5339 	.word	0x000a5339
   a510c:	000a5339 	.word	0x000a5339
   a5110:	000a5339 	.word	0x000a5339
   a5114:	000a5339 	.word	0x000a5339
   a5118:	000a5339 	.word	0x000a5339
   a511c:	000a5339 	.word	0x000a5339
   a5120:	000a5339 	.word	0x000a5339
   a5124:	000a5339 	.word	0x000a5339
   a5128:	000a5339 	.word	0x000a5339
   a512c:	000a5339 	.word	0x000a5339
   a5130:	000a5339 	.word	0x000a5339
   a5134:	000a5339 	.word	0x000a5339
   a5138:	000a5339 	.word	0x000a5339
   a513c:	000a52f9 	.word	0x000a52f9
   a5140:	000a5301 	.word	0x000a5301
   a5144:	000a5339 	.word	0x000a5339
   a5148:	000a5339 	.word	0x000a5339
   a514c:	000a5339 	.word	0x000a5339
   a5150:	000a5339 	.word	0x000a5339
   a5154:	000a5339 	.word	0x000a5339
   a5158:	000a5251 	.word	0x000a5251
   a515c:	000a5241 	.word	0x000a5241
   a5160:	000a5249 	.word	0x000a5249
   a5164:	000a5259 	.word	0x000a5259
   a5168:	000a5339 	.word	0x000a5339
   a516c:	000a5339 	.word	0x000a5339
   a5170:	000a5339 	.word	0x000a5339
   a5174:	000a52d1 	.word	0x000a52d1
   a5178:	000a52c9 	.word	0x000a52c9
   a517c:	000a5339 	.word	0x000a5339
   a5180:	000a5339 	.word	0x000a5339
   a5184:	000a5339 	.word	0x000a5339
   a5188:	000a5339 	.word	0x000a5339
   a518c:	000a5339 	.word	0x000a5339
   a5190:	000a5339 	.word	0x000a5339
   a5194:	000a5339 	.word	0x000a5339
   a5198:	000a5339 	.word	0x000a5339
   a519c:	000a5339 	.word	0x000a5339
   a51a0:	000a5299 	.word	0x000a5299
   a51a4:	000a52a1 	.word	0x000a52a1
   a51a8:	000a52a9 	.word	0x000a52a9
   a51ac:	000a52b1 	.word	0x000a52b1
   a51b0:	000a52b9 	.word	0x000a52b9
   a51b4:	000a52c1 	.word	0x000a52c1
   a51b8:	000a5339 	.word	0x000a5339
   a51bc:	000a5339 	.word	0x000a5339
   a51c0:	000a5339 	.word	0x000a5339
   a51c4:	000a5339 	.word	0x000a5339
   a51c8:	000a5339 	.word	0x000a5339
   a51cc:	000a5339 	.word	0x000a5339
   a51d0:	000a5269 	.word	0x000a5269
   a51d4:	000a5271 	.word	0x000a5271
   a51d8:	000a5339 	.word	0x000a5339
   a51dc:	000a5339 	.word	0x000a5339
   a51e0:	000a5281 	.word	0x000a5281
   a51e4:	000a5339 	.word	0x000a5339
   a51e8:	000a5339 	.word	0x000a5339
   a51ec:	000a5339 	.word	0x000a5339
   a51f0:	000a5339 	.word	0x000a5339
   a51f4:	000a5339 	.word	0x000a5339
   a51f8:	000a5339 	.word	0x000a5339
   a51fc:	000a5339 	.word	0x000a5339
   a5200:	000a5339 	.word	0x000a5339
   a5204:	000a5289 	.word	0x000a5289
   a5208:	000a5339 	.word	0x000a5339
   a520c:	000a5339 	.word	0x000a5339
   a5210:	000a5339 	.word	0x000a5339
   a5214:	000a5339 	.word	0x000a5339
   a5218:	000a5339 	.word	0x000a5339
   a521c:	000a5339 	.word	0x000a5339
   a5220:	000a5339 	.word	0x000a5339
   a5224:	000a5339 	.word	0x000a5339
   a5228:	000a5339 	.word	0x000a5339
   a522c:	000a5321 	.word	0x000a5321
   a5230:	000a5329 	.word	0x000a5329
   a5234:	000a5339 	.word	0x000a5339
   a5238:	000a5339 	.word	0x000a5339
   a523c:	000a5331 	.word	0x000a5331
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   a5240:	683b      	ldr	r3, [r7, #0]
   a5242:	2224      	movs	r2, #36	; 0x24
   a5244:	701a      	strb	r2, [r3, #0]
		break;
   a5246:	e078      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   a5248:	683b      	ldr	r3, [r7, #0]
   a524a:	2225      	movs	r2, #37	; 0x25
   a524c:	701a      	strb	r2, [r3, #0]
		break;
   a524e:	e074      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   a5250:	683b      	ldr	r3, [r7, #0]
   a5252:	2226      	movs	r2, #38	; 0x26
   a5254:	701a      	strb	r2, [r3, #0]
		break;
   a5256:	e070      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   a5258:	683b      	ldr	r3, [r7, #0]
   a525a:	2201      	movs	r2, #1
   a525c:	701a      	strb	r2, [r3, #0]
		break;
   a525e:	e06c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   a5260:	683b      	ldr	r3, [r7, #0]
   a5262:	2202      	movs	r2, #2
   a5264:	701a      	strb	r2, [r3, #0]
		break;
   a5266:	e068      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   a5268:	683b      	ldr	r3, [r7, #0]
   a526a:	2204      	movs	r2, #4
   a526c:	701a      	strb	r2, [r3, #0]
		break;
   a526e:	e064      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   a5270:	683b      	ldr	r3, [r7, #0]
   a5272:	2205      	movs	r2, #5
   a5274:	701a      	strb	r2, [r3, #0]
		break;
   a5276:	e060      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   a5278:	683b      	ldr	r3, [r7, #0]
   a527a:	2206      	movs	r2, #6
   a527c:	701a      	strb	r2, [r3, #0]
		break;
   a527e:	e05c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   a5280:	683b      	ldr	r3, [r7, #0]
   a5282:	2219      	movs	r2, #25
   a5284:	701a      	strb	r2, [r3, #0]
		break;
   a5286:	e058      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   a5288:	683b      	ldr	r3, [r7, #0]
   a528a:	2227      	movs	r2, #39	; 0x27
   a528c:	701a      	strb	r2, [r3, #0]
		break;
   a528e:	e054      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   a5290:	683b      	ldr	r3, [r7, #0]
   a5292:	220e      	movs	r2, #14
   a5294:	701a      	strb	r2, [r3, #0]
		break; 
   a5296:	e050      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   a5298:	683b      	ldr	r3, [r7, #0]
   a529a:	220f      	movs	r2, #15
   a529c:	701a      	strb	r2, [r3, #0]
		break;
   a529e:	e04c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   a52a0:	683b      	ldr	r3, [r7, #0]
   a52a2:	2210      	movs	r2, #16
   a52a4:	701a      	strb	r2, [r3, #0]
		break;
   a52a6:	e048      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   a52a8:	683b      	ldr	r3, [r7, #0]
   a52aa:	2211      	movs	r2, #17
   a52ac:	701a      	strb	r2, [r3, #0]
		break;
   a52ae:	e044      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   a52b0:	683b      	ldr	r3, [r7, #0]
   a52b2:	2212      	movs	r2, #18
   a52b4:	701a      	strb	r2, [r3, #0]
		break;
   a52b6:	e040      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   a52b8:	683b      	ldr	r3, [r7, #0]
   a52ba:	2213      	movs	r2, #19
   a52bc:	701a      	strb	r2, [r3, #0]
		break;			 
   a52be:	e03c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   a52c0:	683b      	ldr	r3, [r7, #0]
   a52c2:	2214      	movs	r2, #20
   a52c4:	701a      	strb	r2, [r3, #0]
		break;
   a52c6:	e038      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   a52c8:	683b      	ldr	r3, [r7, #0]
   a52ca:	2216      	movs	r2, #22
   a52cc:	701a      	strb	r2, [r3, #0]
		break;
   a52ce:	e034      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   a52d0:	683b      	ldr	r3, [r7, #0]
   a52d2:	2215      	movs	r2, #21
   a52d4:	701a      	strb	r2, [r3, #0]
		break;
   a52d6:	e030      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   a52d8:	683b      	ldr	r3, [r7, #0]
   a52da:	2218      	movs	r2, #24
   a52dc:	701a      	strb	r2, [r3, #0]
		break;
   a52de:	e02c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   a52e0:	683b      	ldr	r3, [r7, #0]
   a52e2:	2217      	movs	r2, #23
   a52e4:	701a      	strb	r2, [r3, #0]
		break;
   a52e6:	e028      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   a52e8:	683b      	ldr	r3, [r7, #0]
   a52ea:	221a      	movs	r2, #26
   a52ec:	701a      	strb	r2, [r3, #0]
		break;
   a52ee:	e024      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   a52f0:	683b      	ldr	r3, [r7, #0]
   a52f2:	221b      	movs	r2, #27
   a52f4:	701a      	strb	r2, [r3, #0]
		break;
   a52f6:	e020      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   a52f8:	683b      	ldr	r3, [r7, #0]
   a52fa:	221f      	movs	r2, #31
   a52fc:	701a      	strb	r2, [r3, #0]
		break;
   a52fe:	e01c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   a5300:	683b      	ldr	r3, [r7, #0]
   a5302:	2220      	movs	r2, #32
   a5304:	701a      	strb	r2, [r3, #0]
		break;
   a5306:	e018      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   a5308:	683b      	ldr	r3, [r7, #0]
   a530a:	2221      	movs	r2, #33	; 0x21
   a530c:	701a      	strb	r2, [r3, #0]
		break;
   a530e:	e014      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   a5310:	683b      	ldr	r3, [r7, #0]
   a5312:	2222      	movs	r2, #34	; 0x22
   a5314:	701a      	strb	r2, [r3, #0]
		break;
   a5316:	e010      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   a5318:	683b      	ldr	r3, [r7, #0]
   a531a:	2223      	movs	r2, #35	; 0x23
   a531c:	701a      	strb	r2, [r3, #0]
		break;
   a531e:	e00c      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a5320:	683b      	ldr	r3, [r7, #0]
   a5322:	225b      	movs	r2, #91	; 0x5b
   a5324:	701a      	strb	r2, [r3, #0]
		break;
   a5326:	e008      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a5328:	683b      	ldr	r3, [r7, #0]
   a532a:	225c      	movs	r2, #92	; 0x5c
   a532c:	701a      	strb	r2, [r3, #0]
		break;
   a532e:	e004      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		case EVT_CONSOLE_COMMAND_MUTE_ALARM:
		*cl_rinse_event = EVT_RINSE_MUTE;
   a5330:	683b      	ldr	r3, [r7, #0]
   a5332:	2228      	movs	r2, #40	; 0x28
   a5334:	701a      	strb	r2, [r3, #0]
		break;
   a5336:	e000      	b.n	a533a <cl_rinse_translatemacevent+0x27a>
		
		default:
		break;
   a5338:	bf00      	nop
	}
		 return CL_OK;
   a533a:	2300      	movs	r3, #0
}
   a533c:	4618      	mov	r0, r3
   a533e:	370c      	adds	r7, #12
   a5340:	46bd      	mov	sp, r7
   a5342:	bc80      	pop	{r7}
   a5344:	4770      	bx	lr
   a5346:	bf00      	nop

000a5348 <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   a5348:	b480      	push	{r7}
   a534a:	af00      	add	r7, sp, #0
		tempcount = 0;
   a534c:	4b29      	ldr	r3, [pc, #164]	; (a53f4 <Cl_rinse_init+0xac>)
   a534e:	2200      	movs	r2, #0
   a5350:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   a5352:	4b29      	ldr	r3, [pc, #164]	; (a53f8 <Cl_rinse_init+0xb0>)
   a5354:	2200      	movs	r2, #0
   a5356:	701a      	strb	r2, [r3, #0]
	   var1=0;
   a5358:	4b28      	ldr	r3, [pc, #160]	; (a53fc <Cl_rinse_init+0xb4>)
   a535a:	2200      	movs	r2, #0
   a535c:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   a535e:	4b28      	ldr	r3, [pc, #160]	; (a5400 <Cl_rinse_init+0xb8>)
   a5360:	2200      	movs	r2, #0
   a5362:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   a5364:	4b27      	ldr	r3, [pc, #156]	; (a5404 <Cl_rinse_init+0xbc>)
   a5366:	2200      	movs	r2, #0
   a5368:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   a536a:	4b27      	ldr	r3, [pc, #156]	; (a5408 <Cl_rinse_init+0xc0>)
   a536c:	2200      	movs	r2, #0
   a536e:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   a5370:	4b26      	ldr	r3, [pc, #152]	; (a540c <Cl_rinse_init+0xc4>)
   a5372:	2200      	movs	r2, #0
   a5374:	701a      	strb	r2, [r3, #0]
	   prime_alarm_flag = 0;
   a5376:	4b26      	ldr	r3, [pc, #152]	; (a5410 <Cl_rinse_init+0xc8>)
   a5378:	2200      	movs	r2, #0
   a537a:	601a      	str	r2, [r3, #0]
	 cl_rinse_powerFailureFlag = 0;
   a537c:	4b25      	ldr	r3, [pc, #148]	; (a5414 <Cl_rinse_init+0xcc>)
   a537e:	2200      	movs	r2, #0
   a5380:	601a      	str	r2, [r3, #0]
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   a5382:	4b25      	ldr	r3, [pc, #148]	; (a5418 <Cl_rinse_init+0xd0>)
   a5384:	2200      	movs	r2, #0
   a5386:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   a5388:	4b24      	ldr	r3, [pc, #144]	; (a541c <Cl_rinse_init+0xd4>)
   a538a:	2200      	movs	r2, #0
   a538c:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   a538e:	4b24      	ldr	r3, [pc, #144]	; (a5420 <Cl_rinse_init+0xd8>)
   a5390:	2200      	movs	r2, #0
   a5392:	601a      	str	r2, [r3, #0]
   a5394:	4b23      	ldr	r3, [pc, #140]	; (a5424 <Cl_rinse_init+0xdc>)
   a5396:	2200      	movs	r2, #0
   a5398:	601a      	str	r2, [r3, #0]
   a539a:	4b23      	ldr	r3, [pc, #140]	; (a5428 <Cl_rinse_init+0xe0>)
   a539c:	2200      	movs	r2, #0
   a539e:	601a      	str	r2, [r3, #0]
   a53a0:	4b22      	ldr	r3, [pc, #136]	; (a542c <Cl_rinse_init+0xe4>)
   a53a2:	2200      	movs	r2, #0
   a53a4:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   a53a6:	4b22      	ldr	r3, [pc, #136]	; (a5430 <Cl_rinse_init+0xe8>)
   a53a8:	2200      	movs	r2, #0
   a53aa:	601a      	str	r2, [r3, #0]
   a53ac:	4b21      	ldr	r3, [pc, #132]	; (a5434 <Cl_rinse_init+0xec>)
   a53ae:	2200      	movs	r2, #0
   a53b0:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   a53b2:	4b21      	ldr	r3, [pc, #132]	; (a5438 <Cl_rinse_init+0xf0>)
   a53b4:	2200      	movs	r2, #0
   a53b6:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   a53b8:	4b20      	ldr	r3, [pc, #128]	; (a543c <Cl_rinse_init+0xf4>)
   a53ba:	2200      	movs	r2, #0
   a53bc:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   a53be:	4b20      	ldr	r3, [pc, #128]	; (a5440 <Cl_rinse_init+0xf8>)
   a53c0:	2200      	movs	r2, #0
   a53c2:	801a      	strh	r2, [r3, #0]
   a53c4:	4b1f      	ldr	r3, [pc, #124]	; (a5444 <Cl_rinse_init+0xfc>)
   a53c6:	2200      	movs	r2, #0
   a53c8:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   a53ca:	4b1f      	ldr	r3, [pc, #124]	; (a5448 <Cl_rinse_init+0x100>)
   a53cc:	2200      	movs	r2, #0
   a53ce:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   a53d0:	4b1e      	ldr	r3, [pc, #120]	; (a544c <Cl_rinse_init+0x104>)
   a53d2:	2200      	movs	r2, #0
   a53d4:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   a53d6:	4b1e      	ldr	r3, [pc, #120]	; (a5450 <Cl_rinse_init+0x108>)
   a53d8:	2200      	movs	r2, #0
   a53da:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   a53dc:	4b1d      	ldr	r3, [pc, #116]	; (a5454 <Cl_rinse_init+0x10c>)
   a53de:	2200      	movs	r2, #0
   a53e0:	701a      	strb	r2, [r3, #0]
   a53e2:	4b1d      	ldr	r3, [pc, #116]	; (a5458 <Cl_rinse_init+0x110>)
   a53e4:	2200      	movs	r2, #0
   a53e6:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   a53e8:	2300      	movs	r3, #0
 }
   a53ea:	4618      	mov	r0, r3
   a53ec:	46bd      	mov	sp, r7
   a53ee:	bc80      	pop	{r7}
   a53f0:	4770      	bx	lr
   a53f2:	bf00      	nop
   a53f4:	200727dc 	.word	0x200727dc
   a53f8:	20071b8c 	.word	0x20071b8c
   a53fc:	20071b8d 	.word	0x20071b8d
   a5400:	20071b8e 	.word	0x20071b8e
   a5404:	20071b8f 	.word	0x20071b8f
   a5408:	20071b90 	.word	0x20071b90
   a540c:	20071b91 	.word	0x20071b91
   a5410:	20071bb8 	.word	0x20071bb8
   a5414:	20071bbc 	.word	0x20071bbc
   a5418:	20071b92 	.word	0x20071b92
   a541c:	20071b93 	.word	0x20071b93
   a5420:	20071b94 	.word	0x20071b94
   a5424:	20071b98 	.word	0x20071b98
   a5428:	20071b9c 	.word	0x20071b9c
   a542c:	20071ba0 	.word	0x20071ba0
   a5430:	20071ba4 	.word	0x20071ba4
   a5434:	20071ba8 	.word	0x20071ba8
   a5438:	20071bac 	.word	0x20071bac
   a543c:	20071bad 	.word	0x20071bad
   a5440:	20071bae 	.word	0x20071bae
   a5444:	20071bb0 	.word	0x20071bb0
   a5448:	20071bb2 	.word	0x20071bb2
   a544c:	20071bb4 	.word	0x20071bb4
   a5450:	200727ed 	.word	0x200727ed
   a5454:	20071bb5 	.word	0x20071bb5
   a5458:	20071bb6 	.word	0x20071bb6

000a545c <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   a545c:	b580      	push	{r7, lr}
   a545e:	b084      	sub	sp, #16
   a5460:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a5462:	2304      	movs	r3, #4
   a5464:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5466:	2359      	movs	r3, #89	; 0x59
   a5468:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a546a:	1d3b      	adds	r3, r7, #4
   a546c:	2200      	movs	r2, #0
   a546e:	601a      	str	r2, [r3, #0]
   a5470:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a5474:	230a      	movs	r3, #10
   a5476:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   a5478:	2301      	movs	r3, #1
   a547a:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   a547c:	4b08      	ldr	r3, [pc, #32]	; (a54a0 <Cl_Rinse_UpdateTimeInfo+0x44>)
   a547e:	681b      	ldr	r3, [r3, #0]
   a5480:	b2db      	uxtb	r3, r3
   a5482:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   a5484:	1d39      	adds	r1, r7, #4
   a5486:	7bbb      	ldrb	r3, [r7, #14]
   a5488:	2202      	movs	r2, #2
   a548a:	4618      	mov	r0, r3
   a548c:	4b05      	ldr	r3, [pc, #20]	; (a54a4 <Cl_Rinse_UpdateTimeInfo+0x48>)
   a548e:	4798      	blx	r3
   a5490:	4603      	mov	r3, r0
   a5492:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   a5494:	2300      	movs	r3, #0
	
 }
   a5496:	4618      	mov	r0, r3
   a5498:	3710      	adds	r7, #16
   a549a:	46bd      	mov	sp, r7
   a549c:	bd80      	pop	{r7, pc}
   a549e:	bf00      	nop
   a54a0:	20071ba4 	.word	0x20071ba4
   a54a4:	0009cbd5 	.word	0x0009cbd5

000a54a8 <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   a54a8:	b580      	push	{r7, lr}
   a54aa:	b082      	sub	sp, #8
   a54ac:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a54ae:	2304      	movs	r3, #4
   a54b0:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   a54b2:	4b23      	ldr	r3, [pc, #140]	; (a5540 <Cl_Rinse_CheckforRinseCompletion+0x98>)
   a54b4:	781b      	ldrb	r3, [r3, #0]
   a54b6:	2b00      	cmp	r3, #0
   a54b8:	d007      	beq.n	a54ca <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   a54ba:	4b22      	ldr	r3, [pc, #136]	; (a5544 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a54bc:	681b      	ldr	r3, [r3, #0]
   a54be:	2b05      	cmp	r3, #5
   a54c0:	dd01      	ble.n	a54c6 <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   a54c2:	2300      	movs	r3, #0
   a54c4:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   a54c6:	79fb      	ldrb	r3, [r7, #7]
   a54c8:	e035      	b.n	a5536 <Cl_Rinse_CheckforRinseCompletion+0x8e>
	 }
	if (hotrinse_flag == 1)
   a54ca:	4b1f      	ldr	r3, [pc, #124]	; (a5548 <Cl_Rinse_CheckforRinseCompletion+0xa0>)
   a54cc:	781b      	ldrb	r3, [r3, #0]
   a54ce:	b2db      	uxtb	r3, r3
   a54d0:	2b01      	cmp	r3, #1
   a54d2:	d11f      	bne.n	a5514 <Cl_Rinse_CheckforRinseCompletion+0x6c>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN ) )
   a54d4:	4b1b      	ldr	r3, [pc, #108]	; (a5544 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a54d6:	681b      	ldr	r3, [r3, #0]
   a54d8:	2b18      	cmp	r3, #24
   a54da:	dd2b      	ble.n	a5534 <Cl_Rinse_CheckforRinseCompletion+0x8c>
		{
			sv_cntrl_poweroffheater();
   a54dc:	4b1b      	ldr	r3, [pc, #108]	; (a554c <Cl_Rinse_CheckforRinseCompletion+0xa4>)
   a54de:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   a54e0:	4b1b      	ldr	r3, [pc, #108]	; (a5550 <Cl_Rinse_CheckforRinseCompletion+0xa8>)
   a54e2:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );     // manav02 added no ts1 alarm even after hot rinse
   a54e4:	2100      	movs	r1, #0
   a54e6:	2010      	movs	r0, #16
   a54e8:	4b1a      	ldr	r3, [pc, #104]	; (a5554 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a54ea:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   a54ec:	2100      	movs	r1, #0
   a54ee:	200f      	movs	r0, #15
   a54f0:	4b18      	ldr	r3, [pc, #96]	; (a5554 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a54f2:	4798      	blx	r3

			SetHeaterState(CL_HEATER_STATE_OFF);
   a54f4:	2004      	movs	r0, #4
   a54f6:	4b18      	ldr	r3, [pc, #96]	; (a5558 <Cl_Rinse_CheckforRinseCompletion+0xb0>)
   a54f8:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_STOP);
   a54fa:	2005      	movs	r0, #5
   a54fc:	4b17      	ldr	r3, [pc, #92]	; (a555c <Cl_Rinse_CheckforRinseCompletion+0xb4>)
   a54fe:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_START);
   a5500:	2004      	movs	r0, #4
   a5502:	4b16      	ldr	r3, [pc, #88]	; (a555c <Cl_Rinse_CheckforRinseCompletion+0xb4>)
   a5504:	4798      	blx	r3
			Cl_RinseTotalMinutescounter = 0;	
   a5506:	4b0f      	ldr	r3, [pc, #60]	; (a5544 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a5508:	2200      	movs	r2, #0
   a550a:	601a      	str	r2, [r3, #0]
			//Cl_rinseretcode = CL_OK;
			hotrinse_flag = 0;
   a550c:	4b0e      	ldr	r3, [pc, #56]	; (a5548 <Cl_Rinse_CheckforRinseCompletion+0xa0>)
   a550e:	2200      	movs	r2, #0
   a5510:	701a      	strb	r2, [r3, #0]
   a5512:	e00f      	b.n	a5534 <Cl_Rinse_CheckforRinseCompletion+0x8c>
// 			Cl_rinseretcode = CL_OK;
// 			hotrinse_flag = 0;
// 			return Cl_rinseretcode;
// 		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   a5514:	4b0b      	ldr	r3, [pc, #44]	; (a5544 <Cl_Rinse_CheckforRinseCompletion+0x9c>)
   a5516:	681b      	ldr	r3, [r3, #0]
   a5518:	2b09      	cmp	r3, #9
   a551a:	dd0b      	ble.n	a5534 <Cl_Rinse_CheckforRinseCompletion+0x8c>
	{
		sv_cntrl_setgreenalarm();
   a551c:	4b10      	ldr	r3, [pc, #64]	; (a5560 <Cl_Rinse_CheckforRinseCompletion+0xb8>)
   a551e:	4798      	blx	r3
	
	//	sv_cntrl_buzzer();	
	
	Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );     // manav02 added ts1 alarm even after rinse
   a5520:	2101      	movs	r1, #1
   a5522:	2010      	movs	r0, #16
   a5524:	4b0b      	ldr	r3, [pc, #44]	; (a5554 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a5526:	4798      	blx	r3
	Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a5528:	2101      	movs	r1, #1
   a552a:	200f      	movs	r0, #15
   a552c:	4b09      	ldr	r3, [pc, #36]	; (a5554 <Cl_Rinse_CheckforRinseCompletion+0xac>)
   a552e:	4798      	blx	r3

		Cl_rinseretcode = CL_OK;
   a5530:	2300      	movs	r3, #0
   a5532:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   a5534:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   a5536:	4618      	mov	r0, r3
   a5538:	3708      	adds	r7, #8
   a553a:	46bd      	mov	sp, r7
   a553c:	bd80      	pop	{r7, pc}
   a553e:	bf00      	nop
   a5540:	2007194a 	.word	0x2007194a
   a5544:	20071ba4 	.word	0x20071ba4
   a5548:	20071bb5 	.word	0x20071bb5
   a554c:	0009adcd 	.word	0x0009adcd
   a5550:	0009af71 	.word	0x0009af71
   a5554:	000829e5 	.word	0x000829e5
   a5558:	00089035 	.word	0x00089035
   a555c:	00082ea5 	.word	0x00082ea5
   a5560:	0009b055 	.word	0x0009b055

000a5564 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   a5564:	b580      	push	{r7, lr}
   a5566:	b082      	sub	sp, #8
   a5568:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   a556a:	2300      	movs	r3, #0
   a556c:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   a556e:	2300      	movs	r3, #0
   a5570:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   a5572:	4b26      	ldr	r3, [pc, #152]	; (a560c <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   a5574:	4798      	blx	r3
	Cl_RinseFlowOff();
   a5576:	4b26      	ldr	r3, [pc, #152]	; (a5610 <cl_rinse_notifydacandgotorinsestandby+0xac>)
   a5578:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   a557a:	4b26      	ldr	r3, [pc, #152]	; (a5614 <cl_rinse_notifydacandgotorinsestandby+0xb0>)
   a557c:	2200      	movs	r2, #0
   a557e:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   a5580:	4b25      	ldr	r3, [pc, #148]	; (a5618 <cl_rinse_notifydacandgotorinsestandby+0xb4>)
   a5582:	2200      	movs	r2, #0
   a5584:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   a5586:	4b25      	ldr	r3, [pc, #148]	; (a561c <cl_rinse_notifydacandgotorinsestandby+0xb8>)
   a5588:	2200      	movs	r2, #0
   a558a:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   a558c:	4b24      	ldr	r3, [pc, #144]	; (a5620 <cl_rinse_notifydacandgotorinsestandby+0xbc>)
   a558e:	2200      	movs	r2, #0
   a5590:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   a5592:	4b24      	ldr	r3, [pc, #144]	; (a5624 <cl_rinse_notifydacandgotorinsestandby+0xc0>)
   a5594:	2200      	movs	r2, #0
   a5596:	601a      	str	r2, [r3, #0]
	
	data = 1;
   a5598:	2301      	movs	r3, #1
   a559a:	71bb      	strb	r3, [r7, #6]
	cl_wait(5);
   a559c:	2005      	movs	r0, #5
   a559e:	4b22      	ldr	r3, [pc, #136]	; (a5628 <cl_rinse_notifydacandgotorinsestandby+0xc4>)
   a55a0:	4798      	blx	r3
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   a55a2:	4b22      	ldr	r3, [pc, #136]	; (a562c <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a55a4:	781b      	ldrb	r3, [r3, #0]
   a55a6:	2b03      	cmp	r3, #3
   a55a8:	d114      	bne.n	a55d4 <cl_rinse_notifydacandgotorinsestandby+0x70>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   a55aa:	1dbb      	adds	r3, r7, #6
   a55ac:	2201      	movs	r2, #1
   a55ae:	4619      	mov	r1, r3
   a55b0:	2001      	movs	r0, #1
   a55b2:	4b1f      	ldr	r3, [pc, #124]	; (a5630 <cl_rinse_notifydacandgotorinsestandby+0xcc>)
   a55b4:	4798      	blx	r3
   a55b6:	4603      	mov	r3, r0
   a55b8:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   a55ba:	1dbb      	adds	r3, r7, #6
   a55bc:	2200      	movs	r2, #0
   a55be:	4619      	mov	r1, r3
   a55c0:	200b      	movs	r0, #11
   a55c2:	4b1c      	ldr	r3, [pc, #112]	; (a5634 <cl_rinse_notifydacandgotorinsestandby+0xd0>)
   a55c4:	4798      	blx	r3
   a55c6:	4603      	mov	r3, r0
   a55c8:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   a55ca:	2048      	movs	r0, #72	; 0x48
   a55cc:	4b1a      	ldr	r3, [pc, #104]	; (a5638 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a55ce:	4798      	blx	r3
   a55d0:	4603      	mov	r3, r0
   a55d2:	71fb      	strb	r3, [r7, #7]
		
	}
	if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   a55d4:	4b15      	ldr	r3, [pc, #84]	; (a562c <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a55d6:	781b      	ldrb	r3, [r3, #0]
   a55d8:	2b04      	cmp	r3, #4
   a55da:	d105      	bne.n	a55e8 <cl_rinse_notifydacandgotorinsestandby+0x84>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   a55dc:	2052      	movs	r0, #82	; 0x52
   a55de:	4b16      	ldr	r3, [pc, #88]	; (a5638 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a55e0:	4798      	blx	r3
   a55e2:	4603      	mov	r3, r0
   a55e4:	71fb      	strb	r3, [r7, #7]
   a55e6:	e008      	b.n	a55fa <cl_rinse_notifydacandgotorinsestandby+0x96>
	}
	else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   a55e8:	4b10      	ldr	r3, [pc, #64]	; (a562c <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a55ea:	781b      	ldrb	r3, [r3, #0]
   a55ec:	2b05      	cmp	r3, #5
   a55ee:	d104      	bne.n	a55fa <cl_rinse_notifydacandgotorinsestandby+0x96>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   a55f0:	2053      	movs	r0, #83	; 0x53
   a55f2:	4b11      	ldr	r3, [pc, #68]	; (a5638 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a55f4:	4798      	blx	r3
   a55f6:	4603      	mov	r3, r0
   a55f8:	71fb      	strb	r3, [r7, #7]
	}
	
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   a55fa:	2002      	movs	r0, #2
   a55fc:	4b0f      	ldr	r3, [pc, #60]	; (a563c <cl_rinse_notifydacandgotorinsestandby+0xd8>)
   a55fe:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   a5600:	79fb      	ldrb	r3, [r7, #7]
}
   a5602:	4618      	mov	r0, r3
   a5604:	3708      	adds	r7, #8
   a5606:	46bd      	mov	sp, r7
   a5608:	bd80      	pop	{r7, pc}
   a560a:	bf00      	nop
   a560c:	000a5cb5 	.word	0x000a5cb5
   a5610:	000a5c8d 	.word	0x000a5c8d
   a5614:	20071b94 	.word	0x20071b94
   a5618:	20071b98 	.word	0x20071b98
   a561c:	20071b9c 	.word	0x20071b9c
   a5620:	20071ba4 	.word	0x20071ba4
   a5624:	20071ba8 	.word	0x20071ba8
   a5628:	00093ea9 	.word	0x00093ea9
   a562c:	20071b92 	.word	0x20071b92
   a5630:	0009b739 	.word	0x0009b739
   a5634:	0009cbd5 	.word	0x0009cbd5
   a5638:	0008b715 	.word	0x0008b715
   a563c:	0009449d 	.word	0x0009449d

000a5640 <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   a5640:	b580      	push	{r7, lr}
   a5642:	b086      	sub	sp, #24
   a5644:	af00      	add	r7, sp, #0
   a5646:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a5648:	2300      	movs	r3, #0
   a564a:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   a564c:	2300      	movs	r3, #0
   a564e:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a5650:	f107 030c 	add.w	r3, r7, #12
   a5654:	2100      	movs	r1, #0
   a5656:	460a      	mov	r2, r1
   a5658:	801a      	strh	r2, [r3, #0]
   a565a:	460a      	mov	r2, r1
   a565c:	709a      	strb	r2, [r3, #2]
   a565e:	2300      	movs	r3, #0
   a5660:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5662:	2359      	movs	r3, #89	; 0x59
   a5664:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a5666:	2300      	movs	r3, #0
   a5668:	75bb      	strb	r3, [r7, #22]
   a566a:	e045      	b.n	a56f8 <Cl_Rinse_UpdateAlarmTable+0xb8>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a566c:	7dbb      	ldrb	r3, [r7, #22]
   a566e:	4a26      	ldr	r2, [pc, #152]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a5670:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   a5674:	7dbb      	ldrb	r3, [r7, #22]
   a5676:	00db      	lsls	r3, r3, #3
   a5678:	4a23      	ldr	r2, [pc, #140]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a567a:	4413      	add	r3, r2
   a567c:	3302      	adds	r3, #2
   a567e:	4619      	mov	r1, r3
   a5680:	4b22      	ldr	r3, [pc, #136]	; (a570c <Cl_Rinse_UpdateAlarmTable+0xcc>)
   a5682:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   a5684:	7dbb      	ldrb	r3, [r7, #22]
   a5686:	4a20      	ldr	r2, [pc, #128]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a5688:	00db      	lsls	r3, r3, #3
   a568a:	4413      	add	r3, r2
   a568c:	789b      	ldrb	r3, [r3, #2]
   a568e:	2b00      	cmp	r3, #0
   a5690:	d019      	beq.n	a56c6 <Cl_Rinse_UpdateAlarmTable+0x86>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   a5692:	7dbb      	ldrb	r3, [r7, #22]
   a5694:	4a1c      	ldr	r2, [pc, #112]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a5696:	00db      	lsls	r3, r3, #3
   a5698:	4413      	add	r3, r2
   a569a:	78db      	ldrb	r3, [r3, #3]
   a569c:	f083 0301 	eor.w	r3, r3, #1
   a56a0:	b2db      	uxtb	r3, r3
   a56a2:	2b00      	cmp	r3, #0
   a56a4:	d025      	beq.n	a56f2 <Cl_Rinse_UpdateAlarmTable+0xb2>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   a56a6:	7dbb      	ldrb	r3, [r7, #22]
   a56a8:	4a17      	ldr	r2, [pc, #92]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a56aa:	00db      	lsls	r3, r3, #3
   a56ac:	4413      	add	r3, r2
   a56ae:	2201      	movs	r2, #1
   a56b0:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a56b2:	7dbb      	ldrb	r3, [r7, #22]
   a56b4:	4a14      	ldr	r2, [pc, #80]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a56b6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a56ba:	4618      	mov	r0, r3
   a56bc:	4b14      	ldr	r3, [pc, #80]	; (a5710 <Cl_Rinse_UpdateAlarmTable+0xd0>)
   a56be:	4798      	blx	r3
   a56c0:	4603      	mov	r3, r0
   a56c2:	75fb      	strb	r3, [r7, #23]
   a56c4:	e015      	b.n	a56f2 <Cl_Rinse_UpdateAlarmTable+0xb2>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   a56c6:	7dbb      	ldrb	r3, [r7, #22]
   a56c8:	4a0f      	ldr	r2, [pc, #60]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a56ca:	00db      	lsls	r3, r3, #3
   a56cc:	4413      	add	r3, r2
   a56ce:	78db      	ldrb	r3, [r3, #3]
   a56d0:	2b00      	cmp	r3, #0
   a56d2:	d00e      	beq.n	a56f2 <Cl_Rinse_UpdateAlarmTable+0xb2>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a56d4:	7dbb      	ldrb	r3, [r7, #22]
   a56d6:	4a0c      	ldr	r2, [pc, #48]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a56d8:	00db      	lsls	r3, r3, #3
   a56da:	4413      	add	r3, r2
   a56dc:	2200      	movs	r2, #0
   a56de:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a56e0:	2307      	movs	r3, #7
   a56e2:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a56e4:	7dbb      	ldrb	r3, [r7, #22]
   a56e6:	4a08      	ldr	r2, [pc, #32]	; (a5708 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a56e8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a56ec:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a56ee:	2300      	movs	r3, #0
   a56f0:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a56f2:	7dbb      	ldrb	r3, [r7, #22]
   a56f4:	3301      	adds	r3, #1
   a56f6:	75bb      	strb	r3, [r7, #22]
   a56f8:	7dbb      	ldrb	r3, [r7, #22]
   a56fa:	2b1a      	cmp	r3, #26
   a56fc:	d9b6      	bls.n	a566c <Cl_Rinse_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_rinseretcode );
   a56fe:	7dfb      	ldrb	r3, [r7, #23]
}
   a5700:	4618      	mov	r0, r3
   a5702:	3718      	adds	r7, #24
   a5704:	46bd      	mov	sp, r7
   a5706:	bd80      	pop	{r7, pc}
   a5708:	20070c68 	.word	0x20070c68
   a570c:	00082bc1 	.word	0x00082bc1
   a5710:	000a5895 	.word	0x000a5895

000a5714 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a5714:	b580      	push	{r7, lr}
   a5716:	b082      	sub	sp, #8
   a5718:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a571a:	2300      	movs	r3, #0
   a571c:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a571e:	2359      	movs	r3, #89	; 0x59
   a5720:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a5722:	1d7b      	adds	r3, r7, #5
   a5724:	4618      	mov	r0, r3
   a5726:	4b04      	ldr	r3, [pc, #16]	; (a5738 <Cl_Rinse_ProcessAlarms+0x24>)
   a5728:	4798      	blx	r3
   a572a:	4603      	mov	r3, r0
   a572c:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a572e:	79fb      	ldrb	r3, [r7, #7]
}
   a5730:	4618      	mov	r0, r3
   a5732:	3708      	adds	r7, #8
   a5734:	46bd      	mov	sp, r7
   a5736:	bd80      	pop	{r7, pc}
   a5738:	000a5641 	.word	0x000a5641

000a573c <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a573c:	b580      	push	{r7, lr}
   a573e:	b082      	sub	sp, #8
   a5740:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a5742:	2300      	movs	r3, #0
   a5744:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5746:	2359      	movs	r3, #89	; 0x59
   a5748:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a574a:	4b50      	ldr	r3, [pc, #320]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a574c:	2200      	movs	r2, #0
   a574e:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a5750:	4b4e      	ldr	r3, [pc, #312]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5752:	781b      	ldrb	r3, [r3, #0]
   a5754:	4618      	mov	r0, r3
   a5756:	4b4e      	ldr	r3, [pc, #312]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5758:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a575a:	4b4c      	ldr	r3, [pc, #304]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a575c:	2200      	movs	r2, #0
   a575e:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a5760:	2029      	movs	r0, #41	; 0x29
   a5762:	4b4b      	ldr	r3, [pc, #300]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5764:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a5766:	4b49      	ldr	r3, [pc, #292]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5768:	2200      	movs	r2, #0
   a576a:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a576c:	202b      	movs	r0, #43	; 0x2b
   a576e:	4b48      	ldr	r3, [pc, #288]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5770:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a5772:	4b46      	ldr	r3, [pc, #280]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5774:	2200      	movs	r2, #0
   a5776:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a577a:	2008      	movs	r0, #8
   a577c:	4b44      	ldr	r3, [pc, #272]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a577e:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a5780:	4b42      	ldr	r3, [pc, #264]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5782:	2200      	movs	r2, #0
   a5784:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a5788:	4b40      	ldr	r3, [pc, #256]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a578a:	2200      	movs	r2, #0
   a578c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a5790:	2015      	movs	r0, #21
   a5792:	4b3f      	ldr	r3, [pc, #252]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5794:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a5796:	2016      	movs	r0, #22
   a5798:	4b3d      	ldr	r3, [pc, #244]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a579a:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a579c:	4b3b      	ldr	r3, [pc, #236]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a579e:	2200      	movs	r2, #0
   a57a0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a57a4:	4b39      	ldr	r3, [pc, #228]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a57a6:	2200      	movs	r2, #0
   a57a8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a57ac:	2017      	movs	r0, #23
   a57ae:	4b38      	ldr	r3, [pc, #224]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57b0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a57b2:	2018      	movs	r0, #24
   a57b4:	4b36      	ldr	r3, [pc, #216]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57b6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a57b8:	4b34      	ldr	r3, [pc, #208]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a57ba:	2200      	movs	r2, #0
   a57bc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a57c0:	4b32      	ldr	r3, [pc, #200]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a57c2:	2200      	movs	r2, #0
   a57c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a57c8:	2028      	movs	r0, #40	; 0x28
   a57ca:	4b31      	ldr	r3, [pc, #196]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57cc:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a57ce:	2027      	movs	r0, #39	; 0x27
   a57d0:	4b2f      	ldr	r3, [pc, #188]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57d2:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a57d4:	4b2d      	ldr	r3, [pc, #180]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a57d6:	2200      	movs	r2, #0
   a57d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a57dc:	2012      	movs	r0, #18
   a57de:	4b2c      	ldr	r3, [pc, #176]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57e0:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a57e2:	2011      	movs	r0, #17
   a57e4:	4b2a      	ldr	r3, [pc, #168]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57e6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a57e8:	4b28      	ldr	r3, [pc, #160]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a57ea:	2200      	movs	r2, #0
   a57ec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a57f0:	4b26      	ldr	r3, [pc, #152]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a57f2:	2200      	movs	r2, #0
   a57f4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a57f8:	2013      	movs	r0, #19
   a57fa:	4b25      	ldr	r3, [pc, #148]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a57fc:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a57fe:	2014      	movs	r0, #20
   a5800:	4b23      	ldr	r3, [pc, #140]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5802:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a5804:	4b21      	ldr	r3, [pc, #132]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5806:	2200      	movs	r2, #0
   a5808:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a580c:	2003      	movs	r0, #3
   a580e:	4b20      	ldr	r3, [pc, #128]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5810:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a5812:	4b1e      	ldr	r3, [pc, #120]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5814:	2200      	movs	r2, #0
   a5816:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a581a:	2004      	movs	r0, #4
   a581c:	4b1c      	ldr	r3, [pc, #112]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a581e:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_POWER_FAILURE].IsRaised = false;
   a5820:	4b1a      	ldr	r3, [pc, #104]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5822:	2200      	movs	r2, #0
   a5824:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	Cl_AlarmResetAlarm(POWER_FAILURE);
   a5828:	201d      	movs	r0, #29
   a582a:	4b19      	ldr	r3, [pc, #100]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a582c:	4798      	blx	r3
	
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a582e:	4b17      	ldr	r3, [pc, #92]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5830:	2200      	movs	r2, #0
   a5832:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a5836:	4b15      	ldr	r3, [pc, #84]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5838:	2200      	movs	r2, #0
   a583a:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a583e:	4b13      	ldr	r3, [pc, #76]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5840:	2200      	movs	r2, #0
   a5842:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	
	Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   a5846:	200c      	movs	r0, #12
   a5848:	4b11      	ldr	r3, [pc, #68]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a584a:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_HIGH_FLOWRATE);
   a584c:	200e      	movs	r0, #14
   a584e:	4b10      	ldr	r3, [pc, #64]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5850:	4798      	blx	r3
	Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   a5852:	200d      	movs	r0, #13
   a5854:	4b0e      	ldr	r3, [pc, #56]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5856:	4798      	blx	r3
	
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a5858:	4b0c      	ldr	r3, [pc, #48]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a585a:	2200      	movs	r2, #0
   a585c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a5860:	2010      	movs	r0, #16
   a5862:	4b0b      	ldr	r3, [pc, #44]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5864:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a5866:	4b09      	ldr	r3, [pc, #36]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5868:	2200      	movs	r2, #0
   a586a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a586e:	200f      	movs	r0, #15
   a5870:	4b07      	ldr	r3, [pc, #28]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5872:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BP_STOPPED].IsRaised = false;
   a5874:	4b05      	ldr	r3, [pc, #20]	; (a588c <Cl_Rinse_ResetAlertsforReassertion+0x150>)
   a5876:	2200      	movs	r2, #0
   a5878:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	Cl_AlarmResetAlarm(BP_STOPPED);
   a587c:	203f      	movs	r0, #63	; 0x3f
   a587e:	4b04      	ldr	r3, [pc, #16]	; (a5890 <Cl_Rinse_ResetAlertsforReassertion+0x154>)
   a5880:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a5882:	79fb      	ldrb	r3, [r7, #7]
}
   a5884:	4618      	mov	r0, r3
   a5886:	3708      	adds	r7, #8
   a5888:	46bd      	mov	sp, r7
   a588a:	bd80      	pop	{r7, pc}
   a588c:	20070c68 	.word	0x20070c68
   a5890:	00082ad9 	.word	0x00082ad9

000a5894 <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a5894:	b580      	push	{r7, lr}
   a5896:	b086      	sub	sp, #24
   a5898:	af00      	add	r7, sp, #0
   a589a:	4603      	mov	r3, r0
   a589c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a589e:	2300      	movs	r3, #0
   a58a0:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a58a2:	f107 0308 	add.w	r3, r7, #8
   a58a6:	2100      	movs	r1, #0
   a58a8:	460a      	mov	r2, r1
   a58aa:	801a      	strh	r2, [r3, #0]
   a58ac:	460a      	mov	r2, r1
   a58ae:	709a      	strb	r2, [r3, #2]
   a58b0:	2300      	movs	r3, #0
   a58b2:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a58b4:	2359      	movs	r3, #89	; 0x59
   a58b6:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a58b8:	2300      	movs	r3, #0
   a58ba:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a58bc:	2300      	movs	r3, #0
   a58be:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a58c0:	79fb      	ldrb	r3, [r7, #7]
   a58c2:	3b01      	subs	r3, #1
   a58c4:	2b3e      	cmp	r3, #62	; 0x3e
   a58c6:	f200 814a 	bhi.w	a5b5e <CL_RinseAlarmActon+0x2ca>
   a58ca:	a201      	add	r2, pc, #4	; (adr r2, a58d0 <CL_RinseAlarmActon+0x3c>)
   a58cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a58d0:	000a59f9 	.word	0x000a59f9
   a58d4:	000a5b5f 	.word	0x000a5b5f
   a58d8:	000a5a5f 	.word	0x000a5a5f
   a58dc:	000a5a6f 	.word	0x000a5a6f
   a58e0:	000a5b5f 	.word	0x000a5b5f
   a58e4:	000a5b5f 	.word	0x000a5b5f
   a58e8:	000a5b5f 	.word	0x000a5b5f
   a58ec:	000a5af3 	.word	0x000a5af3
   a58f0:	000a5b5f 	.word	0x000a5b5f
   a58f4:	000a5b5f 	.word	0x000a5b5f
   a58f8:	000a5b5f 	.word	0x000a5b5f
   a58fc:	000a5b03 	.word	0x000a5b03
   a5900:	000a5b13 	.word	0x000a5b13
   a5904:	000a5b23 	.word	0x000a5b23
   a5908:	000a5a7f 	.word	0x000a5a7f
   a590c:	000a5a7f 	.word	0x000a5a7f
   a5910:	000a5a8f 	.word	0x000a5a8f
   a5914:	000a5a8f 	.word	0x000a5a8f
   a5918:	000a5a9f 	.word	0x000a5a9f
   a591c:	000a5ab3 	.word	0x000a5ab3
   a5920:	000a5ac3 	.word	0x000a5ac3
   a5924:	000a5ac3 	.word	0x000a5ac3
   a5928:	000a5ad3 	.word	0x000a5ad3
   a592c:	000a5ad3 	.word	0x000a5ad3
   a5930:	000a5b5f 	.word	0x000a5b5f
   a5934:	000a5b53 	.word	0x000a5b53
   a5938:	000a5b65 	.word	0x000a5b65
   a593c:	000a5b65 	.word	0x000a5b65
   a5940:	000a59cd 	.word	0x000a59cd
   a5944:	000a5b5f 	.word	0x000a5b5f
   a5948:	000a5b65 	.word	0x000a5b65
   a594c:	000a5b5f 	.word	0x000a5b5f
   a5950:	000a5b5f 	.word	0x000a5b5f
   a5954:	000a5b5f 	.word	0x000a5b5f
   a5958:	000a5b5f 	.word	0x000a5b5f
   a595c:	000a5b5f 	.word	0x000a5b5f
   a5960:	000a5b5f 	.word	0x000a5b5f
   a5964:	000a5b5f 	.word	0x000a5b5f
   a5968:	000a5ae3 	.word	0x000a5ae3
   a596c:	000a5ae3 	.word	0x000a5ae3
   a5970:	000a5a3f 	.word	0x000a5a3f
   a5974:	000a5b5f 	.word	0x000a5b5f
   a5978:	000a5a4f 	.word	0x000a5a4f
   a597c:	000a5b5f 	.word	0x000a5b5f
   a5980:	000a5b65 	.word	0x000a5b65
   a5984:	000a5b65 	.word	0x000a5b65
   a5988:	000a5b5f 	.word	0x000a5b5f
   a598c:	000a5b5f 	.word	0x000a5b5f
   a5990:	000a5b5f 	.word	0x000a5b5f
   a5994:	000a5b33 	.word	0x000a5b33
   a5998:	000a5b33 	.word	0x000a5b33
   a599c:	000a5b5f 	.word	0x000a5b5f
   a59a0:	000a5b5f 	.word	0x000a5b5f
   a59a4:	000a5b5f 	.word	0x000a5b5f
   a59a8:	000a5b5f 	.word	0x000a5b5f
   a59ac:	000a5b5f 	.word	0x000a5b5f
   a59b0:	000a5b43 	.word	0x000a5b43
   a59b4:	000a5b43 	.word	0x000a5b43
   a59b8:	000a5b43 	.word	0x000a5b43
   a59bc:	000a5b5f 	.word	0x000a5b5f
   a59c0:	000a5b5f 	.word	0x000a5b5f
   a59c4:	000a5b5f 	.word	0x000a5b5f
   a59c8:	000a59e3 	.word	0x000a59e3
		{
			
			case POWER_FAILURE:
			
		//	sv_cntrl_setredalarm();
		cl_rinse_powerFailureFlag = 1 ;
   a59cc:	4b76      	ldr	r3, [pc, #472]	; (a5ba8 <CL_RinseAlarmActon+0x314>)
   a59ce:	2201      	movs	r2, #1
   a59d0:	601a      	str	r2, [r3, #0]
			sv_cntrl_buzzer();
   a59d2:	4b76      	ldr	r3, [pc, #472]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a59d4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a59d6:	4b76      	ldr	r3, [pc, #472]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a59d8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a59da:	4b76      	ldr	r3, [pc, #472]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a59dc:	2206      	movs	r2, #6
   a59de:	701a      	strb	r2, [r3, #0]
			break;
   a59e0:	e0c3      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case BP_STOPPED:
			prime_alarm_flag = 1;
   a59e2:	4b75      	ldr	r3, [pc, #468]	; (a5bb8 <CL_RinseAlarmActon+0x324>)
   a59e4:	2201      	movs	r2, #1
   a59e6:	601a      	str	r2, [r3, #0]
			sv_cntrl_setredalarm();
   a59e8:	4b74      	ldr	r3, [pc, #464]	; (a5bbc <CL_RinseAlarmActon+0x328>)
   a59ea:	4798      	blx	r3
			sv_cntrl_buzzer();
   a59ec:	4b6f      	ldr	r3, [pc, #444]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a59ee:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a59f0:	4b70      	ldr	r3, [pc, #448]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a59f2:	2206      	movs	r2, #6
   a59f4:	701a      	strb	r2, [r3, #0]
			break;
   a59f6:	e0b8      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case BLOODDOOR_STATUS_OPEN:
					sv_cntrl_setyellowalarm();
   a59f8:	4b71      	ldr	r3, [pc, #452]	; (a5bc0 <CL_RinseAlarmActon+0x32c>)
   a59fa:	4798      	blx	r3
					sv_cntrl_buzzer();
   a59fc:	4b6b      	ldr	r3, [pc, #428]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a59fe:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a5a00:	2100      	movs	r1, #0
   a5a02:	2004      	movs	r0, #4
   a5a04:	4b6f      	ldr	r3, [pc, #444]	; (a5bc4 <CL_RinseAlarmActon+0x330>)
   a5a06:	4798      	blx	r3
					Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   a5a08:	2100      	movs	r1, #0
   a5a0a:	2001      	movs	r0, #1
   a5a0c:	4b6e      	ldr	r3, [pc, #440]	; (a5bc8 <CL_RinseAlarmActon+0x334>)
   a5a0e:	4798      	blx	r3
					if(blood_flag == 1){
   a5a10:	4b6e      	ldr	r3, [pc, #440]	; (a5bcc <CL_RinseAlarmActon+0x338>)
   a5a12:	781b      	ldrb	r3, [r3, #0]
   a5a14:	b2db      	uxtb	r3, r3
   a5a16:	2b01      	cmp	r3, #1
   a5a18:	f040 80a6 	bne.w	a5b68 <CL_RinseAlarmActon+0x2d4>
						
						sv_cntrl_setredalarm();
   a5a1c:	4b67      	ldr	r3, [pc, #412]	; (a5bbc <CL_RinseAlarmActon+0x328>)
   a5a1e:	4798      	blx	r3
						sv_cntrl_resetyellowalarm();
   a5a20:	4b6b      	ldr	r3, [pc, #428]	; (a5bd0 <CL_RinseAlarmActon+0x33c>)
   a5a22:	4798      	blx	r3
						prime_alarm_flag = 1;
   a5a24:	4b64      	ldr	r3, [pc, #400]	; (a5bb8 <CL_RinseAlarmActon+0x324>)
   a5a26:	2201      	movs	r2, #1
   a5a28:	601a      	str	r2, [r3, #0]
						//blood_flag = 0;
						sv_cntrl_buzzer();
   a5a2a:	4b60      	ldr	r3, [pc, #384]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a2c:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a5a2e:	2100      	movs	r1, #0
   a5a30:	2002      	movs	r0, #2
   a5a32:	4b68      	ldr	r3, [pc, #416]	; (a5bd4 <CL_RinseAlarmActon+0x340>)
   a5a34:	4798      	blx	r3
						//Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);  // manav02 added for prime alarm
						cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;         // manav02 added
   a5a36:	4b5f      	ldr	r3, [pc, #380]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a38:	2206      	movs	r2, #6
   a5a3a:	701a      	strb	r2, [r3, #0]
					}
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a5a3c:	e094      	b.n	a5b68 <CL_RinseAlarmActon+0x2d4>
			
			case ACID_IN_OPEN:
	//		sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a5a3e:	4b5b      	ldr	r3, [pc, #364]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a40:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5a42:	4b5b      	ldr	r3, [pc, #364]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5a44:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5a46:	4b5b      	ldr	r3, [pc, #364]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a48:	2206      	movs	r2, #6
   a5a4a:	701a      	strb	r2, [r3, #0]
			break;
   a5a4c:	e08d      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case BICARB_IN_OPEN:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a5a4e:	4b57      	ldr	r3, [pc, #348]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a50:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5a52:	4b57      	ldr	r3, [pc, #348]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5a54:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5a56:	4b57      	ldr	r3, [pc, #348]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a58:	2206      	movs	r2, #6
   a5a5a:	701a      	strb	r2, [r3, #0]
			break;
   a5a5c:	e085      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case HOLDER1STATUS_OPEN:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5a5e:	4b53      	ldr	r3, [pc, #332]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a60:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5a62:	4b53      	ldr	r3, [pc, #332]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5a64:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5a66:	4b53      	ldr	r3, [pc, #332]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a68:	2206      	movs	r2, #6
   a5a6a:	701a      	strb	r2, [r3, #0]
			break;
   a5a6c:	e07d      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case HOLDER2STATUS_OPEN:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5a6e:	4b4f      	ldr	r3, [pc, #316]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a70:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5a72:	4b4f      	ldr	r3, [pc, #316]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5a74:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5a76:	4b4f      	ldr	r3, [pc, #316]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a78:	2206      	movs	r2, #6
   a5a7a:	701a      	strb	r2, [r3, #0]
			break;
   a5a7c:	e075      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5a7e:	4b4b      	ldr	r3, [pc, #300]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a80:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5a82:	4b4b      	ldr	r3, [pc, #300]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5a84:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5a86:	4b4b      	ldr	r3, [pc, #300]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a88:	2206      	movs	r2, #6
   a5a8a:	701a      	strb	r2, [r3, #0]
			break;
   a5a8c:	e06d      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
		//	cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
		//	break;
			
			case TEMP2_LOW_THRESHOLD:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a5a8e:	4b47      	ldr	r3, [pc, #284]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5a90:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5a92:	4b47      	ldr	r3, [pc, #284]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5a94:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5a96:	4b47      	ldr	r3, [pc, #284]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5a98:	2206      	movs	r2, #6
   a5a9a:	701a      	strb	r2, [r3, #0]
			break;
   a5a9c:	e065      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case TEMP3_HIGH_THRESHOLD:
			//		sv_cntrl_setyellowalarm();
					sv_cntrl_buzzer();
   a5a9e:	4b43      	ldr	r3, [pc, #268]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5aa0:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a5aa2:	4b43      	ldr	r3, [pc, #268]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5aa4:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a5aa6:	4b42      	ldr	r3, [pc, #264]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5aa8:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5aaa:	4b42      	ldr	r3, [pc, #264]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5aac:	2206      	movs	r2, #6
   a5aae:	701a      	strb	r2, [r3, #0]
			break;
   a5ab0:	e05b      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			case TEMP3_LOW_THRESHOLD:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a5ab2:	4b3e      	ldr	r3, [pc, #248]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5ab4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5ab6:	4b3e      	ldr	r3, [pc, #248]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5ab8:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5aba:	4b3e      	ldr	r3, [pc, #248]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5abc:	2206      	movs	r2, #6
   a5abe:	701a      	strb	r2, [r3, #0]
			break;
   a5ac0:	e053      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5ac2:	4b3a      	ldr	r3, [pc, #232]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5ac4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5ac6:	4b3a      	ldr	r3, [pc, #232]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5ac8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5aca:	4b3a      	ldr	r3, [pc, #232]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5acc:	2206      	movs	r2, #6
   a5ace:	701a      	strb	r2, [r3, #0]
			break;
   a5ad0:	e04b      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5ad2:	4b36      	ldr	r3, [pc, #216]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5ad4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5ad6:	4b36      	ldr	r3, [pc, #216]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5ad8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5ada:	4b36      	ldr	r3, [pc, #216]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5adc:	2206      	movs	r2, #6
   a5ade:	701a      	strb	r2, [r3, #0]
			break;
   a5ae0:	e043      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5ae2:	4b32      	ldr	r3, [pc, #200]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5ae4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5ae6:	4b32      	ldr	r3, [pc, #200]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5ae8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5aea:	4b32      	ldr	r3, [pc, #200]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5aec:	2206      	movs	r2, #6
   a5aee:	701a      	strb	r2, [r3, #0]
			break;
   a5af0:	e03b      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case COND_STATUS_HIGH:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a5af2:	4b2e      	ldr	r3, [pc, #184]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5af4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a5af6:	4b2e      	ldr	r3, [pc, #184]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5af8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5afa:	4b2e      	ldr	r3, [pc, #184]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5afc:	2206      	movs	r2, #6
   a5afe:	701a      	strb	r2, [r3, #0]
			break;
   a5b00:	e033      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case FLOW_NO_FLOW:
			sv_cntrl_buzzer();              // manav02 added
   a5b02:	4b2a      	ldr	r3, [pc, #168]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5b04:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5b06:	4b2a      	ldr	r3, [pc, #168]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5b08:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5b0a:	4b2a      	ldr	r3, [pc, #168]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5b0c:	2206      	movs	r2, #6
   a5b0e:	701a      	strb	r2, [r3, #0]
			break;
   a5b10:	e02b      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			sv_cntrl_buzzer();           // manav02 added
   a5b12:	4b26      	ldr	r3, [pc, #152]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5b14:	4798      	blx	r3
			Cl_Rinse_StopRinse();         
   a5b16:	4b26      	ldr	r3, [pc, #152]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5b18:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5b1a:	4b26      	ldr	r3, [pc, #152]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5b1c:	2206      	movs	r2, #6
   a5b1e:	701a      	strb	r2, [r3, #0]
			break;
   a5b20:	e023      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			sv_cntrl_buzzer();               // manav02 added
   a5b22:	4b22      	ldr	r3, [pc, #136]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5b24:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a5b26:	4b22      	ldr	r3, [pc, #136]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5b28:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5b2a:	4b22      	ldr	r3, [pc, #136]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5b2c:	2206      	movs	r2, #6
   a5b2e:	701a      	strb	r2, [r3, #0]
			break;
   a5b30:	e01b      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
				sv_cntrl_buzzer();               // manav02 added
   a5b32:	4b1e      	ldr	r3, [pc, #120]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5b34:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a5b36:	4b1e      	ldr	r3, [pc, #120]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5b38:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5b3a:	4b1e      	ldr	r3, [pc, #120]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5b3c:	2206      	movs	r2, #6
   a5b3e:	701a      	strb	r2, [r3, #0]
			break;
   a5b40:	e013      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
			//	sv_cntrl_setyellowalarm();                              // updated on 17.03.17
					sv_cntrl_buzzer();               // manav02 added
   a5b42:	4b1a      	ldr	r3, [pc, #104]	; (a5bac <CL_RinseAlarmActon+0x318>)
   a5b44:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a5b46:	4b1a      	ldr	r3, [pc, #104]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5b48:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5b4a:	4b1a      	ldr	r3, [pc, #104]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5b4c:	2206      	movs	r2, #6
   a5b4e:	701a      	strb	r2, [r3, #0]
			break;
   a5b50:	e00b      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			break;

			case BC_ALARM:
			
		//	sv_cntrl_setyellowalarm();                             
			Cl_Rinse_StopRinse();
   a5b52:	4b17      	ldr	r3, [pc, #92]	; (a5bb0 <CL_RinseAlarmActon+0x31c>)
   a5b54:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5b56:	4b17      	ldr	r3, [pc, #92]	; (a5bb4 <CL_RinseAlarmActon+0x320>)
   a5b58:	2206      	movs	r2, #6
   a5b5a:	701a      	strb	r2, [r3, #0]
			
			break;
   a5b5c:	e005      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a5b5e:	2300      	movs	r3, #0
   a5b60:	71fb      	strb	r3, [r7, #7]
			break;
   a5b62:	e002      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
// 					Cl_Rinse_StopRinse();
// 					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
// 			break;

			case DE_CHAMBER_LOW: //23
			break;
   a5b64:	bf00      	nop
   a5b66:	e000      	b.n	a5b6a <CL_RinseAlarmActon+0x2d6>
					}
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a5b68:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a5b6a:	79fb      	ldrb	r3, [r7, #7]
   a5b6c:	2b00      	cmp	r3, #0
   a5b6e:	d013      	beq.n	a5b98 <CL_RinseAlarmActon+0x304>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a5b70:	79fb      	ldrb	r3, [r7, #7]
   a5b72:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a5b74:	2301      	movs	r3, #1
   a5b76:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a5b78:	2302      	movs	r3, #2
   a5b7a:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a5b7c:	2307      	movs	r3, #7
   a5b7e:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a5b80:	f107 0108 	add.w	r1, r7, #8
   a5b84:	7bfb      	ldrb	r3, [r7, #15]
   a5b86:	2203      	movs	r2, #3
   a5b88:	4618      	mov	r0, r3
   a5b8a:	4b13      	ldr	r3, [pc, #76]	; (a5bd8 <CL_RinseAlarmActon+0x344>)
   a5b8c:	4798      	blx	r3
   a5b8e:	4603      	mov	r3, r0
   a5b90:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a5b92:	200a      	movs	r0, #10
   a5b94:	4b11      	ldr	r3, [pc, #68]	; (a5bdc <CL_RinseAlarmActon+0x348>)
   a5b96:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a5b98:	4a11      	ldr	r2, [pc, #68]	; (a5be0 <CL_RinseAlarmActon+0x34c>)
   a5b9a:	79fb      	ldrb	r3, [r7, #7]
   a5b9c:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a5b9e:	2300      	movs	r3, #0
}
   a5ba0:	4618      	mov	r0, r3
   a5ba2:	3718      	adds	r7, #24
   a5ba4:	46bd      	mov	sp, r7
   a5ba6:	bd80      	pop	{r7, pc}
   a5ba8:	20071bbc 	.word	0x20071bbc
   a5bac:	0009b069 	.word	0x0009b069
   a5bb0:	000a637d 	.word	0x000a637d
   a5bb4:	20071b92 	.word	0x20071b92
   a5bb8:	20071bb8 	.word	0x20071bb8
   a5bbc:	0009b02d 	.word	0x0009b02d
   a5bc0:	0009b041 	.word	0x0009b041
   a5bc4:	00093f5d 	.word	0x00093f5d
   a5bc8:	000829e5 	.word	0x000829e5
   a5bcc:	20071b8c 	.word	0x20071b8c
   a5bd0:	0009b091 	.word	0x0009b091
   a5bd4:	00088019 	.word	0x00088019
   a5bd8:	0009cbd5 	.word	0x0009cbd5
   a5bdc:	00093ea9 	.word	0x00093ea9
   a5be0:	20071bb4 	.word	0x20071bb4

000a5be4 <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a5be4:	b580      	push	{r7, lr}
   a5be6:	b086      	sub	sp, #24
   a5be8:	af00      	add	r7, sp, #0
   a5bea:	4603      	mov	r3, r0
   a5bec:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5bee:	2300      	movs	r3, #0
   a5bf0:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a5bf2:	f107 030c 	add.w	r3, r7, #12
   a5bf6:	2100      	movs	r1, #0
   a5bf8:	460a      	mov	r2, r1
   a5bfa:	801a      	strh	r2, [r3, #0]
   a5bfc:	460a      	mov	r2, r1
   a5bfe:	709a      	strb	r2, [r3, #2]
   a5c00:	2300      	movs	r3, #0
   a5c02:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5c04:	2359      	movs	r3, #89	; 0x59
   a5c06:	73fb      	strb	r3, [r7, #15]
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a5c08:	4b11      	ldr	r3, [pc, #68]	; (a5c50 <Cl_RinseSendAlarm+0x6c>)
   a5c0a:	2206      	movs	r2, #6
   a5c0c:	701a      	strb	r2, [r3, #0]
			sv_cntrl_setredalarm();
   a5c0e:	4b11      	ldr	r3, [pc, #68]	; (a5c54 <Cl_RinseSendAlarm+0x70>)
   a5c10:	4798      	blx	r3
			sv_cntrl_buzzer();
   a5c12:	4b11      	ldr	r3, [pc, #68]	; (a5c58 <Cl_RinseSendAlarm+0x74>)
   a5c14:	4798      	blx	r3
			if(cl_rinsealarmId != _NO_ALARM)
   a5c16:	79fb      	ldrb	r3, [r7, #7]
   a5c18:	2b00      	cmp	r3, #0
   a5c1a:	d013      	beq.n	a5c44 <Cl_RinseSendAlarm+0x60>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a5c1c:	79fb      	ldrb	r3, [r7, #7]
   a5c1e:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a5c20:	2301      	movs	r3, #1
   a5c22:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a5c24:	2302      	movs	r3, #2
   a5c26:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a5c28:	2307      	movs	r3, #7
   a5c2a:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a5c2c:	f107 010c 	add.w	r1, r7, #12
   a5c30:	7bfb      	ldrb	r3, [r7, #15]
   a5c32:	2203      	movs	r2, #3
   a5c34:	4618      	mov	r0, r3
   a5c36:	4b09      	ldr	r3, [pc, #36]	; (a5c5c <Cl_RinseSendAlarm+0x78>)
   a5c38:	4798      	blx	r3
   a5c3a:	4603      	mov	r3, r0
   a5c3c:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a5c3e:	200a      	movs	r0, #10
   a5c40:	4b07      	ldr	r3, [pc, #28]	; (a5c60 <Cl_RinseSendAlarm+0x7c>)
   a5c42:	4798      	blx	r3

			 }
}
   a5c44:	bf00      	nop
   a5c46:	4618      	mov	r0, r3
   a5c48:	3718      	adds	r7, #24
   a5c4a:	46bd      	mov	sp, r7
   a5c4c:	bd80      	pop	{r7, pc}
   a5c4e:	bf00      	nop
   a5c50:	20071b92 	.word	0x20071b92
   a5c54:	0009b02d 	.word	0x0009b02d
   a5c58:	0009b069 	.word	0x0009b069
   a5c5c:	0009cbd5 	.word	0x0009cbd5
   a5c60:	00093ea9 	.word	0x00093ea9

000a5c64 <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a5c64:	b580      	push	{r7, lr}
   a5c66:	b082      	sub	sp, #8
   a5c68:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5c6a:	2300      	movs	r3, #0
   a5c6c:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a5c6e:	2001      	movs	r0, #1
   a5c70:	4b04      	ldr	r3, [pc, #16]	; (a5c84 <Cl_RinseFlowOn+0x20>)
   a5c72:	4798      	blx	r3
	cl_gfillinprogress = true;
   a5c74:	4b04      	ldr	r3, [pc, #16]	; (a5c88 <Cl_RinseFlowOn+0x24>)
   a5c76:	2201      	movs	r2, #1
   a5c78:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a5c7a:	79fb      	ldrb	r3, [r7, #7]
	
}
   a5c7c:	4618      	mov	r0, r3
   a5c7e:	3708      	adds	r7, #8
   a5c80:	46bd      	mov	sp, r7
   a5c82:	bd80      	pop	{r7, pc}
   a5c84:	0009ade1 	.word	0x0009ade1
   a5c88:	20071bad 	.word	0x20071bad

000a5c8c <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a5c8c:	b580      	push	{r7, lr}
   a5c8e:	b082      	sub	sp, #8
   a5c90:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5c92:	2300      	movs	r3, #0
   a5c94:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a5c96:	2001      	movs	r0, #1
   a5c98:	4b04      	ldr	r3, [pc, #16]	; (a5cac <Cl_RinseFlowOff+0x20>)
   a5c9a:	4798      	blx	r3
	cl_gfillinprogress = false;
   a5c9c:	4b04      	ldr	r3, [pc, #16]	; (a5cb0 <Cl_RinseFlowOff+0x24>)
   a5c9e:	2200      	movs	r2, #0
   a5ca0:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a5ca2:	79fb      	ldrb	r3, [r7, #7]
	
}
   a5ca4:	4618      	mov	r0, r3
   a5ca6:	3708      	adds	r7, #8
   a5ca8:	46bd      	mov	sp, r7
   a5caa:	bd80      	pop	{r7, pc}
   a5cac:	0009ae01 	.word	0x0009ae01
   a5cb0:	20071bad 	.word	0x20071bad

000a5cb4 <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a5cb4:	b580      	push	{r7, lr}
   a5cb6:	b082      	sub	sp, #8
   a5cb8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a5cba:	2300      	movs	r3, #0
   a5cbc:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a5cbe:	2005      	movs	r0, #5
   a5cc0:	4b04      	ldr	r3, [pc, #16]	; (a5cd4 <Cl_RinseStop+0x20>)
   a5cc2:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a5cc4:	4b04      	ldr	r3, [pc, #16]	; (a5cd8 <Cl_RinseStop+0x24>)
   a5cc6:	4798      	blx	r3
	return Cl_RetVal;
   a5cc8:	79fb      	ldrb	r3, [r7, #7]
	
}
   a5cca:	4618      	mov	r0, r3
   a5ccc:	3708      	adds	r7, #8
   a5cce:	46bd      	mov	sp, r7
   a5cd0:	bd80      	pop	{r7, pc}
   a5cd2:	bf00      	nop
   a5cd4:	00082ea5 	.word	0x00082ea5
   a5cd8:	0009adcd 	.word	0x0009adcd

000a5cdc <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a5cdc:	b580      	push	{r7, lr}
   a5cde:	b088      	sub	sp, #32
   a5ce0:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a5ce2:	2300      	movs	r3, #0
   a5ce4:	77fb      	strb	r3, [r7, #31]
	StateDatatype data;
	Cl_Uint8Type count=0;
   a5ce6:	2300      	movs	r3, #0
   a5ce8:	77bb      	strb	r3, [r7, #30]
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0 , temp2 = 0;
   a5cea:	2300      	movs	r3, #0
   a5cec:	82fb      	strh	r3, [r7, #22]
   a5cee:	2300      	movs	r3, #0
   a5cf0:	83bb      	strh	r3, [r7, #28]
   a5cf2:	2300      	movs	r3, #0
   a5cf4:	82bb      	strh	r3, [r7, #20]
   a5cf6:	2300      	movs	r3, #0
   a5cf8:	827b      	strh	r3, [r7, #18]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a5cfa:	1d3b      	adds	r3, r7, #4
   a5cfc:	2200      	movs	r2, #0
   a5cfe:	601a      	str	r2, [r3, #0]
   a5d00:	605a      	str	r2, [r3, #4]
   a5d02:	609a      	str	r2, [r3, #8]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a5d04:	4b69      	ldr	r3, [pc, #420]	; (a5eac <Cl_Rinse_SendRinseStateData+0x1d0>)
   a5d06:	681b      	ldr	r3, [r3, #0]
   a5d08:	3301      	adds	r3, #1
   a5d0a:	4a68      	ldr	r2, [pc, #416]	; (a5eac <Cl_Rinse_SendRinseStateData+0x1d0>)
   a5d0c:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a5d0e:	4b67      	ldr	r3, [pc, #412]	; (a5eac <Cl_Rinse_SendRinseStateData+0x1d0>)
   a5d10:	681b      	ldr	r3, [r3, #0]
   a5d12:	2b04      	cmp	r3, #4
   a5d14:	f340 80c5 	ble.w	a5ea2 <Cl_Rinse_SendRinseStateData+0x1c6>
	{
		return;
	}
	else
	{
		timecount = 0;
   a5d18:	4b64      	ldr	r3, [pc, #400]	; (a5eac <Cl_Rinse_SendRinseStateData+0x1d0>)
   a5d1a:	2200      	movs	r2, #0
   a5d1c:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a5d1e:	2301      	movs	r3, #1
   a5d20:	713b      	strb	r3, [r7, #4]
	count++;
   a5d22:	7fbb      	ldrb	r3, [r7, #30]
   a5d24:	3301      	adds	r3, #1
   a5d26:	77bb      	strb	r3, [r7, #30]
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a5d28:	f107 0314 	add.w	r3, r7, #20
   a5d2c:	4619      	mov	r1, r3
   a5d2e:	2014      	movs	r0, #20
   a5d30:	4b5f      	ldr	r3, [pc, #380]	; (a5eb0 <Cl_Rinse_SendRinseStateData+0x1d4>)
   a5d32:	4798      	blx	r3
		{
			tmp3 = (float)sensordata /10;
   a5d34:	8aba      	ldrh	r2, [r7, #20]
   a5d36:	4b5f      	ldr	r3, [pc, #380]	; (a5eb4 <Cl_Rinse_SendRinseStateData+0x1d8>)
   a5d38:	4610      	mov	r0, r2
   a5d3a:	4798      	blx	r3
   a5d3c:	4602      	mov	r2, r0
   a5d3e:	4b5e      	ldr	r3, [pc, #376]	; (a5eb8 <Cl_Rinse_SendRinseStateData+0x1dc>)
   a5d40:	495e      	ldr	r1, [pc, #376]	; (a5ebc <Cl_Rinse_SendRinseStateData+0x1e0>)
   a5d42:	4610      	mov	r0, r2
   a5d44:	4798      	blx	r3
   a5d46:	4603      	mov	r3, r0
   a5d48:	461a      	mov	r2, r3
   a5d4a:	4b5d      	ldr	r3, [pc, #372]	; (a5ec0 <Cl_Rinse_SendRinseStateData+0x1e4>)
   a5d4c:	601a      	str	r2, [r3, #0]
		}

		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a5d4e:	f107 0316 	add.w	r3, r7, #22
   a5d52:	4619      	mov	r1, r3
   a5d54:	2007      	movs	r0, #7
   a5d56:	4b56      	ldr	r3, [pc, #344]	; (a5eb0 <Cl_Rinse_SendRinseStateData+0x1d4>)
   a5d58:	4798      	blx	r3
		{
			// manav03 changed
							data.fourbytedata = temp/100;
   a5d5a:	8afb      	ldrh	r3, [r7, #22]
   a5d5c:	4a59      	ldr	r2, [pc, #356]	; (a5ec4 <Cl_Rinse_SendRinseStateData+0x1e8>)
   a5d5e:	fba2 2303 	umull	r2, r3, r2, r3
   a5d62:	095b      	lsrs	r3, r3, #5
   a5d64:	b29b      	uxth	r3, r3
   a5d66:	61bb      	str	r3, [r7, #24]
			 				dataarray[count++] = data.bytedata[0];
   a5d68:	7fbb      	ldrb	r3, [r7, #30]
   a5d6a:	1c5a      	adds	r2, r3, #1
   a5d6c:	77ba      	strb	r2, [r7, #30]
   a5d6e:	7e3a      	ldrb	r2, [r7, #24]
   a5d70:	f107 0120 	add.w	r1, r7, #32
   a5d74:	440b      	add	r3, r1
   a5d76:	f803 2c1c 	strb.w	r2, [r3, #-28]
			 				dataarray[count++] = data.bytedata[1];
   a5d7a:	7fbb      	ldrb	r3, [r7, #30]
   a5d7c:	1c5a      	adds	r2, r3, #1
   a5d7e:	77ba      	strb	r2, [r7, #30]
   a5d80:	7e7a      	ldrb	r2, [r7, #25]
   a5d82:	f107 0120 	add.w	r1, r7, #32
   a5d86:	440b      	add	r3, r1
   a5d88:	f803 2c1c 	strb.w	r2, [r3, #-28]
			 				dataarray[count++] = data.bytedata[2];
   a5d8c:	7fbb      	ldrb	r3, [r7, #30]
   a5d8e:	1c5a      	adds	r2, r3, #1
   a5d90:	77ba      	strb	r2, [r7, #30]
   a5d92:	7eba      	ldrb	r2, [r7, #26]
   a5d94:	f107 0120 	add.w	r1, r7, #32
   a5d98:	440b      	add	r3, r1
   a5d9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			 				dataarray[count++] = data.bytedata[3];
   a5d9e:	7fbb      	ldrb	r3, [r7, #30]
   a5da0:	1c5a      	adds	r2, r3, #1
   a5da2:	77ba      	strb	r2, [r7, #30]
   a5da4:	7efa      	ldrb	r2, [r7, #27]
   a5da6:	f107 0120 	add.w	r1, r7, #32
   a5daa:	440b      	add	r3, r1
   a5dac:	f803 2c1c 	strb.w	r2, [r3, #-28]
// 				dataarray[count++] = data.bytedata[2];
// 				dataarray[count++] = data.bytedata[3];
// 			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a5db0:	f107 0314 	add.w	r3, r7, #20
   a5db4:	4619      	mov	r1, r3
   a5db6:	2014      	movs	r0, #20
   a5db8:	4b3d      	ldr	r3, [pc, #244]	; (a5eb0 <Cl_Rinse_SendRinseStateData+0x1d4>)
   a5dba:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;
				tmp3 = sensordata /10;
   a5dbc:	8abb      	ldrh	r3, [r7, #20]
   a5dbe:	4a42      	ldr	r2, [pc, #264]	; (a5ec8 <Cl_Rinse_SendRinseStateData+0x1ec>)
   a5dc0:	fba2 2303 	umull	r2, r3, r2, r3
   a5dc4:	08db      	lsrs	r3, r3, #3
   a5dc6:	b29b      	uxth	r3, r3
   a5dc8:	461a      	mov	r2, r3
   a5dca:	4b40      	ldr	r3, [pc, #256]	; (a5ecc <Cl_Rinse_SendRinseStateData+0x1f0>)
   a5dcc:	4610      	mov	r0, r2
   a5dce:	4798      	blx	r3
   a5dd0:	4602      	mov	r2, r0
   a5dd2:	4b3b      	ldr	r3, [pc, #236]	; (a5ec0 <Cl_Rinse_SendRinseStateData+0x1e4>)
   a5dd4:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a5dd6:	4b3a      	ldr	r3, [pc, #232]	; (a5ec0 <Cl_Rinse_SendRinseStateData+0x1e4>)
   a5dd8:	681a      	ldr	r2, [r3, #0]
   a5dda:	4b3d      	ldr	r3, [pc, #244]	; (a5ed0 <Cl_Rinse_SendRinseStateData+0x1f4>)
   a5ddc:	4610      	mov	r0, r2
   a5dde:	4798      	blx	r3
   a5de0:	4603      	mov	r3, r0
   a5de2:	b29b      	uxth	r3, r3
   a5de4:	61bb      	str	r3, [r7, #24]
				dataarray[count++] = data.bytedata[0];
   a5de6:	7fbb      	ldrb	r3, [r7, #30]
   a5de8:	1c5a      	adds	r2, r3, #1
   a5dea:	77ba      	strb	r2, [r7, #30]
   a5dec:	7e3a      	ldrb	r2, [r7, #24]
   a5dee:	f107 0120 	add.w	r1, r7, #32
   a5df2:	440b      	add	r3, r1
   a5df4:	f803 2c1c 	strb.w	r2, [r3, #-28]
				dataarray[count++] = data.bytedata[1];
   a5df8:	7fbb      	ldrb	r3, [r7, #30]
   a5dfa:	1c5a      	adds	r2, r3, #1
   a5dfc:	77ba      	strb	r2, [r7, #30]
   a5dfe:	7e7a      	ldrb	r2, [r7, #25]
   a5e00:	f107 0120 	add.w	r1, r7, #32
   a5e04:	440b      	add	r3, r1
   a5e06:	f803 2c1c 	strb.w	r2, [r3, #-28]
				dataarray[count++] = data.bytedata[2];
   a5e0a:	7fbb      	ldrb	r3, [r7, #30]
   a5e0c:	1c5a      	adds	r2, r3, #1
   a5e0e:	77ba      	strb	r2, [r7, #30]
   a5e10:	7eba      	ldrb	r2, [r7, #26]
   a5e12:	f107 0120 	add.w	r1, r7, #32
   a5e16:	440b      	add	r3, r1
   a5e18:	f803 2c1c 	strb.w	r2, [r3, #-28]
				dataarray[count++] = data.bytedata[3];
   a5e1c:	7fbb      	ldrb	r3, [r7, #30]
   a5e1e:	1c5a      	adds	r2, r3, #1
   a5e20:	77ba      	strb	r2, [r7, #30]
   a5e22:	7efa      	ldrb	r2, [r7, #27]
   a5e24:	f107 0120 	add.w	r1, r7, #32
   a5e28:	440b      	add	r3, r1
   a5e2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			}
		
		// manav02 added
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp2);
   a5e2e:	f107 0312 	add.w	r3, r7, #18
   a5e32:	4619      	mov	r1, r3
   a5e34:	2013      	movs	r0, #19
   a5e36:	4b1e      	ldr	r3, [pc, #120]	; (a5eb0 <Cl_Rinse_SendRinseStateData+0x1d4>)
   a5e38:	4798      	blx	r3
		{
			
			data.fourbytedata = (uint16_t)temp2/10 ;
   a5e3a:	8a7b      	ldrh	r3, [r7, #18]
   a5e3c:	4a22      	ldr	r2, [pc, #136]	; (a5ec8 <Cl_Rinse_SendRinseStateData+0x1ec>)
   a5e3e:	fba2 2303 	umull	r2, r3, r2, r3
   a5e42:	08db      	lsrs	r3, r3, #3
   a5e44:	b29b      	uxth	r3, r3
   a5e46:	61bb      	str	r3, [r7, #24]
			dataarray[count++] = data.bytedata[0];
   a5e48:	7fbb      	ldrb	r3, [r7, #30]
   a5e4a:	1c5a      	adds	r2, r3, #1
   a5e4c:	77ba      	strb	r2, [r7, #30]
   a5e4e:	7e3a      	ldrb	r2, [r7, #24]
   a5e50:	f107 0120 	add.w	r1, r7, #32
   a5e54:	440b      	add	r3, r1
   a5e56:	f803 2c1c 	strb.w	r2, [r3, #-28]
			dataarray[count++] = data.bytedata[1];
   a5e5a:	7fbb      	ldrb	r3, [r7, #30]
   a5e5c:	1c5a      	adds	r2, r3, #1
   a5e5e:	77ba      	strb	r2, [r7, #30]
   a5e60:	7e7a      	ldrb	r2, [r7, #25]
   a5e62:	f107 0120 	add.w	r1, r7, #32
   a5e66:	440b      	add	r3, r1
   a5e68:	f803 2c1c 	strb.w	r2, [r3, #-28]
			dataarray[count++] = data.bytedata[2];
   a5e6c:	7fbb      	ldrb	r3, [r7, #30]
   a5e6e:	1c5a      	adds	r2, r3, #1
   a5e70:	77ba      	strb	r2, [r7, #30]
   a5e72:	7eba      	ldrb	r2, [r7, #26]
   a5e74:	f107 0120 	add.w	r1, r7, #32
   a5e78:	440b      	add	r3, r1
   a5e7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			dataarray[count++] = data.bytedata[3];
   a5e7e:	7fbb      	ldrb	r3, [r7, #30]
   a5e80:	1c5a      	adds	r2, r3, #1
   a5e82:	77ba      	strb	r2, [r7, #30]
   a5e84:	7efa      	ldrb	r2, [r7, #27]
   a5e86:	f107 0120 	add.w	r1, r7, #32
   a5e8a:	440b      	add	r3, r1
   a5e8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a5e90:	7fba      	ldrb	r2, [r7, #30]
   a5e92:	1d3b      	adds	r3, r7, #4
   a5e94:	4619      	mov	r1, r3
   a5e96:	202a      	movs	r0, #42	; 0x2a
   a5e98:	4b0e      	ldr	r3, [pc, #56]	; (a5ed4 <Cl_Rinse_SendRinseStateData+0x1f8>)
   a5e9a:	4798      	blx	r3
   a5e9c:	4603      	mov	r3, r0
   a5e9e:	77fb      	strb	r3, [r7, #31]
   a5ea0:	e000      	b.n	a5ea4 <Cl_Rinse_SendRinseStateData+0x1c8>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   a5ea2:	bf00      	nop
		}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
		

}
   a5ea4:	4618      	mov	r0, r3
   a5ea6:	3720      	adds	r7, #32
   a5ea8:	46bd      	mov	sp, r7
   a5eaa:	bd80      	pop	{r7, pc}
   a5eac:	20071bc4 	.word	0x20071bc4
   a5eb0:	0008fa01 	.word	0x0008fa01
   a5eb4:	000a7ef9 	.word	0x000a7ef9
   a5eb8:	000a8111 	.word	0x000a8111
   a5ebc:	41200000 	.word	0x41200000
   a5ec0:	20071bc8 	.word	0x20071bc8
   a5ec4:	51eb851f 	.word	0x51eb851f
   a5ec8:	cccccccd 	.word	0xcccccccd
   a5ecc:	000a7f01 	.word	0x000a7f01
   a5ed0:	000a8381 	.word	0x000a8381
   a5ed4:	0009cbd5 	.word	0x0009cbd5

000a5ed8 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a5ed8:	b590      	push	{r4, r7, lr}
   a5eda:	b089      	sub	sp, #36	; 0x24
   a5edc:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a5ede:	2300      	movs	r3, #0
   a5ee0:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5ee2:	2359      	movs	r3, #89	; 0x59
   a5ee4:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a5ee6:	2300      	movs	r3, #0
   a5ee8:	60bb      	str	r3, [r7, #8]
				
				Cl_Uint8Type data = 0;
   a5eea:	2300      	movs	r3, #0
   a5eec:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a5eee:	2300      	movs	r3, #0
   a5ef0:	80fb      	strh	r3, [r7, #6]
   a5ef2:	2300      	movs	r3, #0
   a5ef4:	80bb      	strh	r3, [r7, #4]
   a5ef6:	2300      	movs	r3, #0
   a5ef8:	807b      	strh	r3, [r7, #2]
   a5efa:	2300      	movs	r3, #0
   a5efc:	803b      	strh	r3, [r7, #0]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a5efe:	2301      	movs	r3, #1
   a5f00:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();

                    Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a5f02:	2100      	movs	r1, #0
   a5f04:	200d      	movs	r0, #13
   a5f06:	4b29      	ldr	r3, [pc, #164]	; (a5fac <Cl_Rinse_StartRinse+0xd4>)
   a5f08:	4798      	blx	r3
   a5f0a:	4603      	mov	r3, r0
   a5f0c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a5f0e:	2100      	movs	r1, #0
   a5f10:	200c      	movs	r0, #12
   a5f12:	4b26      	ldr	r3, [pc, #152]	; (a5fac <Cl_Rinse_StartRinse+0xd4>)
   a5f14:	4798      	blx	r3
   a5f16:	4603      	mov	r3, r0
   a5f18:	75bb      	strb	r3, [r7, #22]
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );   // manav02 changed from low to high
   a5f1a:	2100      	movs	r1, #0
   a5f1c:	200e      	movs	r0, #14
   a5f1e:	4b23      	ldr	r3, [pc, #140]	; (a5fac <Cl_Rinse_StartRinse+0xd4>)
   a5f20:	4798      	blx	r3
   a5f22:	4603      	mov	r3, r0
   a5f24:	75bb      	strb	r3, [r7, #22]


				SetHeaterState(CL_HEATER_STATE_OFF);
   a5f26:	2004      	movs	r0, #4
   a5f28:	4b21      	ldr	r3, [pc, #132]	; (a5fb0 <Cl_Rinse_StartRinse+0xd8>)
   a5f2a:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a5f2c:	2001      	movs	r0, #1
   a5f2e:	4b21      	ldr	r3, [pc, #132]	; (a5fb4 <Cl_Rinse_StartRinse+0xdc>)
   a5f30:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a5f32:	1dbb      	adds	r3, r7, #6
   a5f34:	4619      	mov	r1, r3
   a5f36:	2020      	movs	r0, #32
   a5f38:	4b1f      	ldr	r3, [pc, #124]	; (a5fb8 <Cl_Rinse_StartRinse+0xe0>)
   a5f3a:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a5f3c:	1d3b      	adds	r3, r7, #4
   a5f3e:	4619      	mov	r1, r3
   a5f40:	2021      	movs	r0, #33	; 0x21
   a5f42:	4b1d      	ldr	r3, [pc, #116]	; (a5fb8 <Cl_Rinse_StartRinse+0xe0>)
   a5f44:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a5f46:	1cbb      	adds	r3, r7, #2
   a5f48:	4619      	mov	r1, r3
   a5f4a:	2003      	movs	r0, #3
   a5f4c:	4b1a      	ldr	r3, [pc, #104]	; (a5fb8 <Cl_Rinse_StartRinse+0xe0>)
   a5f4e:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a5f50:	463b      	mov	r3, r7
   a5f52:	4619      	mov	r1, r3
   a5f54:	2004      	movs	r0, #4
   a5f56:	4b18      	ldr	r3, [pc, #96]	; (a5fb8 <Cl_Rinse_StartRinse+0xe0>)
   a5f58:	4798      	blx	r3
				
				//DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
				
				// below commented for tuv testing holder alarms were present even after hoolders were connected
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )    // manav03 commented for testing
   a5f5a:	88fb      	ldrh	r3, [r7, #6]
   a5f5c:	2b00      	cmp	r3, #0
   a5f5e:	d104      	bne.n	a5f6a <Cl_Rinse_StartRinse+0x92>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a5f60:	2029      	movs	r0, #41	; 0x29
   a5f62:	4b16      	ldr	r3, [pc, #88]	; (a5fbc <Cl_Rinse_StartRinse+0xe4>)
   a5f64:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a5f66:	2300      	movs	r3, #0
   a5f68:	75fb      	strb	r3, [r7, #23]
				 } 
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a5f6a:	88bb      	ldrh	r3, [r7, #4]
   a5f6c:	2b00      	cmp	r3, #0
   a5f6e:	d104      	bne.n	a5f7a <Cl_Rinse_StartRinse+0xa2>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a5f70:	202b      	movs	r0, #43	; 0x2b
   a5f72:	4b12      	ldr	r3, [pc, #72]	; (a5fbc <Cl_Rinse_StartRinse+0xe4>)
   a5f74:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a5f76:	2300      	movs	r3, #0
   a5f78:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )  //CL_HOLDER1OPEN
   a5f7a:	887b      	ldrh	r3, [r7, #2]
   a5f7c:	2b01      	cmp	r3, #1
   a5f7e:	d104      	bne.n	a5f8a <Cl_Rinse_StartRinse+0xb2>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a5f80:	2003      	movs	r0, #3
   a5f82:	4b0e      	ldr	r3, [pc, #56]	; (a5fbc <Cl_Rinse_StartRinse+0xe4>)
   a5f84:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a5f86:	2300      	movs	r3, #0
   a5f88:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER2OPEN )// CL_HOLDER1OPEN
   a5f8a:	883b      	ldrh	r3, [r7, #0]
   a5f8c:	2b01      	cmp	r3, #1
   a5f8e:	d104      	bne.n	a5f9a <Cl_Rinse_StartRinse+0xc2>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a5f90:	2004      	movs	r0, #4
   a5f92:	4b0a      	ldr	r3, [pc, #40]	; (a5fbc <Cl_Rinse_StartRinse+0xe4>)
   a5f94:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a5f96:	2300      	movs	r3, #0
   a5f98:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a5f9a:	7dfb      	ldrb	r3, [r7, #23]
   a5f9c:	f083 0301 	eor.w	r3, r3, #1
   a5fa0:	b2db      	uxtb	r3, r3
   a5fa2:	2b00      	cmp	r3, #0
   a5fa4:	d00c      	beq.n	a5fc0 <Cl_Rinse_StartRinse+0xe8>
				 {
					// Cl_Rinsereaduinessflag = true;
					 return CL_REJECTED;
   a5fa6:	2303      	movs	r3, #3
   a5fa8:	e1de      	b.n	a6368 <Cl_Rinse_StartRinse+0x490>
   a5faa:	bf00      	nop
   a5fac:	000829e5 	.word	0x000829e5
   a5fb0:	00089035 	.word	0x00089035
   a5fb4:	0009449d 	.word	0x0009449d
   a5fb8:	0008fa01 	.word	0x0008fa01
   a5fbc:	000a5be5 	.word	0x000a5be5
				 }
				 
				sv_cntrl_resetgreenalarm();
   a5fc0:	4bb5      	ldr	r3, [pc, #724]	; (a6298 <Cl_Rinse_StartRinse+0x3c0>)
   a5fc2:	4798      	blx	r3
// 				sv_cntrl_resetyellowalarm();
// 				sv_cntrl_resetredalarm();
 				sv_cntrl_nobuzzer();
   a5fc4:	4bb5      	ldr	r3, [pc, #724]	; (a629c <Cl_Rinse_StartRinse+0x3c4>)
   a5fc6:	4798      	blx	r3
// 				

	sv_cntrl_resetredalarm();
   a5fc8:	4bb5      	ldr	r3, [pc, #724]	; (a62a0 <Cl_Rinse_StartRinse+0x3c8>)
   a5fca:	4798      	blx	r3
//	sv_cntrl_setgreenalarm();
				Cl_RinseFlowOn();
   a5fcc:	4bb5      	ldr	r3, [pc, #724]	; (a62a4 <Cl_Rinse_StartRinse+0x3cc>)
   a5fce:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a5fd0:	2002      	movs	r0, #2
   a5fd2:	4bb5      	ldr	r3, [pc, #724]	; (a62a8 <Cl_Rinse_StartRinse+0x3d0>)
   a5fd4:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a5fd6:	2003      	movs	r0, #3
   a5fd8:	4bb3      	ldr	r3, [pc, #716]	; (a62a8 <Cl_Rinse_StartRinse+0x3d0>)
   a5fda:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);   // 900
   a5fdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a5fe0:	2002      	movs	r0, #2
   a5fe2:	4bb2      	ldr	r3, [pc, #712]	; (a62ac <Cl_Rinse_StartRinse+0x3d4>)
   a5fe4:	4798      	blx	r3
   a5fe6:	4603      	mov	r3, r0
   a5fe8:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   a5fea:	f240 414c 	movw	r1, #1100	; 0x44c
   a5fee:	2001      	movs	r0, #1
   a5ff0:	4bae      	ldr	r3, [pc, #696]	; (a62ac <Cl_Rinse_StartRinse+0x3d4>)
   a5ff2:	4798      	blx	r3
   a5ff4:	4603      	mov	r3, r0
   a5ff6:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a5ff8:	2001      	movs	r0, #1
   a5ffa:	4bad      	ldr	r3, [pc, #692]	; (a62b0 <Cl_Rinse_StartRinse+0x3d8>)
   a5ffc:	4798      	blx	r3
   a5ffe:	4603      	mov	r3, r0
   a6000:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a6002:	2002      	movs	r0, #2
   a6004:	4baa      	ldr	r3, [pc, #680]	; (a62b0 <Cl_Rinse_StartRinse+0x3d8>)
   a6006:	4798      	blx	r3
   a6008:	4603      	mov	r3, r0
   a600a:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a600c:	2300      	movs	r3, #0
   a600e:	827b      	strh	r3, [r7, #18]
				potvalue = (900* 1024)/10000;                                 // 600
   a6010:	235c      	movs	r3, #92	; 0x5c
   a6012:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a6014:	8a7b      	ldrh	r3, [r7, #18]
   a6016:	4618      	mov	r0, r3
   a6018:	4ba6      	ldr	r3, [pc, #664]	; (a62b4 <Cl_Rinse_StartRinse+0x3dc>)
   a601a:	4798      	blx	r3
				
				Cl_Uint32Type temp = Treatdata[ID_dflow];
   a601c:	4ba6      	ldr	r3, [pc, #664]	; (a62b8 <Cl_Rinse_StartRinse+0x3e0>)
   a601e:	695b      	ldr	r3, [r3, #20]
   a6020:	60fb      	str	r3, [r7, #12]
				flow_rate = temp;
   a6022:	4aa6      	ldr	r2, [pc, #664]	; (a62bc <Cl_Rinse_StartRinse+0x3e4>)
   a6024:	68fb      	ldr	r3, [r7, #12]
   a6026:	6013      	str	r3, [r2, #0]
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   a6028:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   a602c:	2001      	movs	r0, #1
   a602e:	4ba4      	ldr	r3, [pc, #656]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a6030:	4798      	blx	r3
					cl_wait(100);
   a6032:	2064      	movs	r0, #100	; 0x64
   a6034:	4ba3      	ldr	r3, [pc, #652]	; (a62c4 <Cl_Rinse_StartRinse+0x3ec>)
   a6036:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_START,0);
   a6038:	2100      	movs	r1, #0
   a603a:	2002      	movs	r0, #2
   a603c:	4ba0      	ldr	r3, [pc, #640]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a603e:	4798      	blx	r3
					cl_ufpumpFeedback_start();
   a6040:	4ba1      	ldr	r3, [pc, #644]	; (a62c8 <Cl_Rinse_StartRinse+0x3f0>)
   a6042:	4798      	blx	r3
					cl_wait(100);
   a6044:	2064      	movs	r0, #100	; 0x64
   a6046:	4b9f      	ldr	r3, [pc, #636]	; (a62c4 <Cl_Rinse_StartRinse+0x3ec>)
   a6048:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,12000);
   a604a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   a604e:	2001      	movs	r0, #1
   a6050:	4b9b      	ldr	r3, [pc, #620]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a6052:	4798      	blx	r3
					cl_wait(100);
   a6054:	2064      	movs	r0, #100	; 0x64
   a6056:	4b9b      	ldr	r3, [pc, #620]	; (a62c4 <Cl_Rinse_StartRinse+0x3ec>)
   a6058:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   a605a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   a605e:	2001      	movs	r0, #1
   a6060:	4b97      	ldr	r3, [pc, #604]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a6062:	4798      	blx	r3
					cl_wait(100);
   a6064:	2064      	movs	r0, #100	; 0x64
   a6066:	4b97      	ldr	r3, [pc, #604]	; (a62c4 <Cl_Rinse_StartRinse+0x3ec>)
   a6068:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,6000);
   a606a:	f241 7170 	movw	r1, #6000	; 0x1770
   a606e:	2001      	movs	r0, #1
   a6070:	4b93      	ldr	r3, [pc, #588]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a6072:	4798      	blx	r3
					cl_wait(100);
   a6074:	2064      	movs	r0, #100	; 0x64
   a6076:	4b93      	ldr	r3, [pc, #588]	; (a62c4 <Cl_Rinse_StartRinse+0x3ec>)
   a6078:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   a607a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   a607e:	2001      	movs	r0, #1
   a6080:	4b8f      	ldr	r3, [pc, #572]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a6082:	4798      	blx	r3
					cl_wait(100);
   a6084:	2064      	movs	r0, #100	; 0x64
   a6086:	4b8f      	ldr	r3, [pc, #572]	; (a62c4 <Cl_Rinse_StartRinse+0x3ec>)
   a6088:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,500);
   a608a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   a608e:	2001      	movs	r0, #1
   a6090:	4b8b      	ldr	r3, [pc, #556]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a6092:	4798      	blx	r3
// 				sv_cntrl_setpumpspeed(UFPUMP,1000);
// 				cl_wait(100);
// 				sv_cntrl_setpumpspeed(UFPUMP,150);
// 				cl_wait(100);
// 				
				cl_uf_controller(CL_UF_EVENT_START,0);
   a6094:	2100      	movs	r1, #0
   a6096:	2002      	movs	r0, #2
   a6098:	4b89      	ldr	r3, [pc, #548]	; (a62c0 <Cl_Rinse_StartRinse+0x3e8>)
   a609a:	4798      	blx	r3
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a609c:	2000      	movs	r0, #0
   a609e:	4b8b      	ldr	r3, [pc, #556]	; (a62cc <Cl_Rinse_StartRinse+0x3f4>)
   a60a0:	4798      	blx	r3
   a60a2:	4603      	mov	r3, r0
   a60a4:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a60a6:	2004      	movs	r0, #4
   a60a8:	4b89      	ldr	r3, [pc, #548]	; (a62d0 <Cl_Rinse_StartRinse+0x3f8>)
   a60aa:	4798      	blx	r3
   a60ac:	4603      	mov	r3, r0
   a60ae:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill(); 
   a60b0:	4b88      	ldr	r3, [pc, #544]	; (a62d4 <Cl_Rinse_StartRinse+0x3fc>)
   a60b2:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a60b4:	7dbb      	ldrb	r3, [r7, #22]
   a60b6:	2b00      	cmp	r3, #0
   a60b8:	f040 8155 	bne.w	a6366 <Cl_Rinse_StartRinse+0x48e>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a60bc:	4b86      	ldr	r3, [pc, #536]	; (a62d8 <Cl_Rinse_StartRinse+0x400>)
   a60be:	2200      	movs	r2, #0
   a60c0:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a60c2:	4b86      	ldr	r3, [pc, #536]	; (a62dc <Cl_Rinse_StartRinse+0x404>)
   a60c4:	2200      	movs	r2, #0
   a60c6:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a60c8:	4b85      	ldr	r3, [pc, #532]	; (a62e0 <Cl_Rinse_StartRinse+0x408>)
   a60ca:	2200      	movs	r2, #0
   a60cc:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a60ce:	4b85      	ldr	r3, [pc, #532]	; (a62e4 <Cl_Rinse_StartRinse+0x40c>)
   a60d0:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a60d2:	2001      	movs	r0, #1
   a60d4:	4b84      	ldr	r3, [pc, #528]	; (a62e8 <Cl_Rinse_StartRinse+0x410>)
   a60d6:	4798      	blx	r3
   a60d8:	4603      	mov	r3, r0
   a60da:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a60dc:	2300      	movs	r3, #0
   a60de:	9300      	str	r3, [sp, #0]
   a60e0:	f04f 0300 	mov.w	r3, #0
   a60e4:	f04f 0200 	mov.w	r2, #0
   a60e8:	2101      	movs	r1, #1
   a60ea:	2001      	movs	r0, #1
   a60ec:	4c7f      	ldr	r4, [pc, #508]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a60ee:	47a0      	blx	r4
   a60f0:	4603      	mov	r3, r0
   a60f2:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a60f4:	2300      	movs	r3, #0
   a60f6:	9300      	str	r3, [sp, #0]
   a60f8:	f04f 0300 	mov.w	r3, #0
   a60fc:	f04f 0200 	mov.w	r2, #0
   a6100:	2100      	movs	r1, #0
   a6102:	2029      	movs	r0, #41	; 0x29
   a6104:	4c79      	ldr	r4, [pc, #484]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6106:	47a0      	blx	r4
   a6108:	4603      	mov	r3, r0
   a610a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a610c:	2300      	movs	r3, #0
   a610e:	9300      	str	r3, [sp, #0]
   a6110:	f04f 0300 	mov.w	r3, #0
   a6114:	f04f 0200 	mov.w	r2, #0
   a6118:	2100      	movs	r1, #0
   a611a:	202b      	movs	r0, #43	; 0x2b
   a611c:	4c73      	ldr	r4, [pc, #460]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a611e:	47a0      	blx	r4
   a6120:	4603      	mov	r3, r0
   a6122:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a6124:	2300      	movs	r3, #0
   a6126:	9300      	str	r3, [sp, #0]
   a6128:	f04f 0300 	mov.w	r3, #0
   a612c:	f04f 0200 	mov.w	r2, #0
   a6130:	2101      	movs	r1, #1
   a6132:	2003      	movs	r0, #3
   a6134:	4c6d      	ldr	r4, [pc, #436]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6136:	47a0      	blx	r4
   a6138:	4603      	mov	r3, r0
   a613a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a613c:	2300      	movs	r3, #0
   a613e:	9300      	str	r3, [sp, #0]
   a6140:	f04f 0300 	mov.w	r3, #0
   a6144:	f04f 0200 	mov.w	r2, #0
   a6148:	2101      	movs	r1, #1
   a614a:	2004      	movs	r0, #4
   a614c:	4c67      	ldr	r4, [pc, #412]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a614e:	47a0      	blx	r4
   a6150:	4603      	mov	r3, r0
   a6152:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a6154:	2300      	movs	r3, #0
   a6156:	9300      	str	r3, [sp, #0]
   a6158:	f04f 0300 	mov.w	r3, #0
   a615c:	f04f 0200 	mov.w	r2, #0
   a6160:	2100      	movs	r1, #0
   a6162:	203d      	movs	r0, #61	; 0x3d
   a6164:	4c61      	ldr	r4, [pc, #388]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6166:	47a0      	blx	r4
   a6168:	4603      	mov	r3, r0
   a616a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a616c:	2300      	movs	r3, #0
   a616e:	9300      	str	r3, [sp, #0]
   a6170:	f04f 0300 	mov.w	r3, #0
   a6174:	f04f 0200 	mov.w	r2, #0
   a6178:	2101      	movs	r1, #1
   a617a:	203e      	movs	r0, #62	; 0x3e
   a617c:	4c5b      	ldr	r4, [pc, #364]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a617e:	47a0      	blx	r4
   a6180:	4603      	mov	r3, r0
   a6182:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BC_ALARM,0,0,0,0);
   a6184:	2300      	movs	r3, #0
   a6186:	9300      	str	r3, [sp, #0]
   a6188:	f04f 0300 	mov.w	r3, #0
   a618c:	f04f 0200 	mov.w	r2, #0
   a6190:	2100      	movs	r1, #0
   a6192:	201a      	movs	r0, #26
   a6194:	4c55      	ldr	r4, [pc, #340]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6196:	47a0      	blx	r4
   a6198:	4603      	mov	r3, r0
   a619a:	75bb      	strb	r3, [r7, #22]
					
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(POWER_FAILURE,LOGIC_HIGH,0,0,0);
   a619c:	2300      	movs	r3, #0
   a619e:	9300      	str	r3, [sp, #0]
   a61a0:	f04f 0300 	mov.w	r3, #0
   a61a4:	f04f 0200 	mov.w	r2, #0
   a61a8:	2101      	movs	r1, #1
   a61aa:	201d      	movs	r0, #29
   a61ac:	4c4f      	ldr	r4, [pc, #316]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a61ae:	47a0      	blx	r4
   a61b0:	4603      	mov	r3, r0
   a61b2:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a61b4:	2300      	movs	r3, #0
   a61b6:	9300      	str	r3, [sp, #0]
   a61b8:	f04f 0300 	mov.w	r3, #0
   a61bc:	f04f 0200 	mov.w	r2, #0
   a61c0:	2100      	movs	r1, #0
   a61c2:	200d      	movs	r0, #13
   a61c4:	4c49      	ldr	r4, [pc, #292]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a61c6:	47a0      	blx	r4
   a61c8:	4603      	mov	r3, r0
   a61ca:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a61cc:	2300      	movs	r3, #0
   a61ce:	9300      	str	r3, [sp, #0]
   a61d0:	f04f 0300 	mov.w	r3, #0
   a61d4:	f04f 0200 	mov.w	r2, #0
   a61d8:	2100      	movs	r1, #0
   a61da:	200c      	movs	r0, #12
   a61dc:	4c43      	ldr	r4, [pc, #268]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a61de:	47a0      	blx	r4
   a61e0:	4603      	mov	r3, r0
   a61e2:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a61e4:	2300      	movs	r3, #0
   a61e6:	9300      	str	r3, [sp, #0]
   a61e8:	f04f 0300 	mov.w	r3, #0
   a61ec:	4a40      	ldr	r2, [pc, #256]	; (a62f0 <Cl_Rinse_StartRinse+0x418>)
   a61ee:	2100      	movs	r1, #0
   a61f0:	200e      	movs	r0, #14
   a61f2:	4c3e      	ldr	r4, [pc, #248]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a61f4:	47a0      	blx	r4
   a61f6:	4603      	mov	r3, r0
   a61f8:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,0,370,150,0);
   a61fa:	2300      	movs	r3, #0
   a61fc:	9300      	str	r3, [sp, #0]
   a61fe:	4b3d      	ldr	r3, [pc, #244]	; (a62f4 <Cl_Rinse_StartRinse+0x41c>)
   a6200:	4a3d      	ldr	r2, [pc, #244]	; (a62f8 <Cl_Rinse_StartRinse+0x420>)
   a6202:	2100      	movs	r1, #0
   a6204:	200f      	movs	r0, #15
   a6206:	4c39      	ldr	r4, [pc, #228]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6208:	47a0      	blx	r4
   a620a:	4603      	mov	r3, r0
   a620c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,0,150,150,0);
   a620e:	2300      	movs	r3, #0
   a6210:	9300      	str	r3, [sp, #0]
   a6212:	4b38      	ldr	r3, [pc, #224]	; (a62f4 <Cl_Rinse_StartRinse+0x41c>)
   a6214:	4a37      	ldr	r2, [pc, #220]	; (a62f4 <Cl_Rinse_StartRinse+0x41c>)
   a6216:	2100      	movs	r1, #0
   a6218:	2010      	movs	r0, #16
   a621a:	4c34      	ldr	r4, [pc, #208]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a621c:	47a0      	blx	r4
   a621e:	4603      	mov	r3, r0
   a6220:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,0,850,150,0);
   a6222:	2300      	movs	r3, #0
   a6224:	9300      	str	r3, [sp, #0]
   a6226:	4b33      	ldr	r3, [pc, #204]	; (a62f4 <Cl_Rinse_StartRinse+0x41c>)
   a6228:	4a34      	ldr	r2, [pc, #208]	; (a62fc <Cl_Rinse_StartRinse+0x424>)
   a622a:	2100      	movs	r1, #0
   a622c:	2011      	movs	r0, #17
   a622e:	4c2f      	ldr	r4, [pc, #188]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6230:	47a0      	blx	r4
   a6232:	4603      	mov	r3, r0
   a6234:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,0,150,150,0);
   a6236:	2300      	movs	r3, #0
   a6238:	9300      	str	r3, [sp, #0]
   a623a:	4b2e      	ldr	r3, [pc, #184]	; (a62f4 <Cl_Rinse_StartRinse+0x41c>)
   a623c:	4a2d      	ldr	r2, [pc, #180]	; (a62f4 <Cl_Rinse_StartRinse+0x41c>)
   a623e:	2100      	movs	r1, #0
   a6240:	2012      	movs	r0, #18
   a6242:	4c2a      	ldr	r4, [pc, #168]	; (a62ec <Cl_Rinse_StartRinse+0x414>)
   a6244:	47a0      	blx	r4
   a6246:	4603      	mov	r3, r0
   a6248:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				
				   Cl_rinseretcode =  Cl_AlarmActivateAlarms(POWER_FAILURE,true);          //manav03 disabled for testing
   a624a:	2101      	movs	r1, #1
   a624c:	201d      	movs	r0, #29
   a624e:	4b2c      	ldr	r3, [pc, #176]	; (a6300 <Cl_Rinse_StartRinse+0x428>)
   a6250:	4798      	blx	r3
   a6252:	4603      	mov	r3, r0
   a6254:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a6256:	2101      	movs	r1, #1
   a6258:	203d      	movs	r0, #61	; 0x3d
   a625a:	4b29      	ldr	r3, [pc, #164]	; (a6300 <Cl_Rinse_StartRinse+0x428>)
   a625c:	4798      	blx	r3
   a625e:	4603      	mov	r3, r0
   a6260:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a6262:	2101      	movs	r1, #1
   a6264:	203e      	movs	r0, #62	; 0x3e
   a6266:	4b26      	ldr	r3, [pc, #152]	; (a6300 <Cl_Rinse_StartRinse+0x428>)
   a6268:	4798      	blx	r3
   a626a:	4603      	mov	r3, r0
   a626c:	75bb      	strb	r3, [r7, #22]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );       // manav03 alarm removed for testing
   a626e:	2101      	movs	r1, #1
   a6270:	2029      	movs	r0, #41	; 0x29
   a6272:	4b23      	ldr	r3, [pc, #140]	; (a6300 <Cl_Rinse_StartRinse+0x428>)
   a6274:	4798      	blx	r3
   a6276:	4603      	mov	r3, r0
   a6278:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true ); 
   a627a:	2101      	movs	r1, #1
   a627c:	202b      	movs	r0, #43	; 0x2b
   a627e:	4b20      	ldr	r3, [pc, #128]	; (a6300 <Cl_Rinse_StartRinse+0x428>)
   a6280:	4798      	blx	r3
   a6282:	4603      	mov	r3, r0
   a6284:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true ); // manav03 alarm removed for testing
   a6286:	2101      	movs	r1, #1
   a6288:	2003      	movs	r0, #3
   a628a:	4b1d      	ldr	r3, [pc, #116]	; (a6300 <Cl_Rinse_StartRinse+0x428>)
   a628c:	4798      	blx	r3
   a628e:	4603      	mov	r3, r0
   a6290:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true ); // manav03 alarm removed for testing
   a6292:	2101      	movs	r1, #1
   a6294:	e036      	b.n	a6304 <Cl_Rinse_StartRinse+0x42c>
   a6296:	bf00      	nop
   a6298:	0009b0a5 	.word	0x0009b0a5
   a629c:	0009b0b9 	.word	0x0009b0b9
   a62a0:	0009b07d 	.word	0x0009b07d
   a62a4:	000a5c65 	.word	0x000a5c65
   a62a8:	0009ade1 	.word	0x0009ade1
   a62ac:	0009ae59 	.word	0x0009ae59
   a62b0:	0009ad41 	.word	0x0009ad41
   a62b4:	0009b2c1 	.word	0x0009b2c1
   a62b8:	20072614 	.word	0x20072614
   a62bc:	20071834 	.word	0x20071834
   a62c0:	00096ea9 	.word	0x00096ea9
   a62c4:	00093ea9 	.word	0x00093ea9
   a62c8:	00096c8d 	.word	0x00096c8d
   a62cc:	000943dd 	.word	0x000943dd
   a62d0:	00082ea5 	.word	0x00082ea5
   a62d4:	0009b271 	.word	0x0009b271
   a62d8:	20071b98 	.word	0x20071b98
   a62dc:	20071ba4 	.word	0x20071ba4
   a62e0:	20071bac 	.word	0x20071bac
   a62e4:	0009af2d 	.word	0x0009af2d
   a62e8:	0009449d 	.word	0x0009449d
   a62ec:	00082989 	.word	0x00082989
   a62f0:	44bb8000 	.word	0x44bb8000
   a62f4:	43160000 	.word	0x43160000
   a62f8:	43b90000 	.word	0x43b90000
   a62fc:	44548000 	.word	0x44548000
   a6300:	000829e5 	.word	0x000829e5
   a6304:	2004      	movs	r0, #4
   a6306:	4b1a      	ldr	r3, [pc, #104]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a6308:	4798      	blx	r3
   a630a:	4603      	mov	r3, r0
   a630c:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   a630e:	2101      	movs	r1, #1
   a6310:	2011      	movs	r0, #17
   a6312:	4b17      	ldr	r3, [pc, #92]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a6314:	4798      	blx	r3
   a6316:	4603      	mov	r3, r0
   a6318:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   a631a:	2101      	movs	r1, #1
   a631c:	2012      	movs	r0, #18
   a631e:	4b14      	ldr	r3, [pc, #80]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a6320:	4798      	blx	r3
   a6322:	4603      	mov	r3, r0
   a6324:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   a6326:	2101      	movs	r1, #1
   a6328:	2010      	movs	r0, #16
   a632a:	4b11      	ldr	r3, [pc, #68]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a632c:	4798      	blx	r3
   a632e:	4603      	mov	r3, r0
   a6330:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a6332:	2101      	movs	r1, #1
   a6334:	200f      	movs	r0, #15
   a6336:	4b0e      	ldr	r3, [pc, #56]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a6338:	4798      	blx	r3
   a633a:	4603      	mov	r3, r0
   a633c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BP_STOPPED,true );
   a633e:	2101      	movs	r1, #1
   a6340:	203f      	movs	r0, #63	; 0x3f
   a6342:	4b0b      	ldr	r3, [pc, #44]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a6344:	4798      	blx	r3
   a6346:	4603      	mov	r3, r0
   a6348:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a634a:	4b0a      	ldr	r3, [pc, #40]	; (a6374 <Cl_Rinse_StartRinse+0x49c>)
   a634c:	781b      	ldrb	r3, [r3, #0]
   a634e:	2b00      	cmp	r3, #0
   a6350:	d005      	beq.n	a635e <Cl_Rinse_StartRinse+0x486>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a6352:	2101      	movs	r1, #1
   a6354:	203c      	movs	r0, #60	; 0x3c
   a6356:	4b06      	ldr	r3, [pc, #24]	; (a6370 <Cl_Rinse_StartRinse+0x498>)
   a6358:	4798      	blx	r3
   a635a:	4603      	mov	r3, r0
   a635c:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a635e:	4b06      	ldr	r3, [pc, #24]	; (a6378 <Cl_Rinse_StartRinse+0x4a0>)
   a6360:	4798      	blx	r3
   a6362:	4603      	mov	r3, r0
   a6364:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a6366:	2300      	movs	r3, #0
}
   a6368:	4618      	mov	r0, r3
   a636a:	371c      	adds	r7, #28
   a636c:	46bd      	mov	sp, r7
   a636e:	bd90      	pop	{r4, r7, pc}
   a6370:	000829e5 	.word	0x000829e5
   a6374:	200709ba 	.word	0x200709ba
   a6378:	000a573d 	.word	0x000a573d

000a637c <Cl_Rinse_StopRinse>:
Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a637c:	b580      	push	{r7, lr}
   a637e:	b082      	sub	sp, #8
   a6380:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a6382:	2300      	movs	r3, #0
   a6384:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				
				sv_cntrl_setredalarm();
   a6386:	4b3e      	ldr	r3, [pc, #248]	; (a6480 <Cl_Rinse_StopRinse+0x104>)
   a6388:	4798      	blx	r3
				
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a638a:	2100      	movs	r1, #0
   a638c:	2001      	movs	r0, #1
   a638e:	4b3d      	ldr	r3, [pc, #244]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a6390:	4798      	blx	r3
   a6392:	4603      	mov	r3, r0
   a6394:	71fb      	strb	r3, [r7, #7]
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a6396:	2100      	movs	r1, #0
   a6398:	203d      	movs	r0, #61	; 0x3d
   a639a:	4b3a      	ldr	r3, [pc, #232]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a639c:	4798      	blx	r3
   a639e:	4603      	mov	r3, r0
   a63a0:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a63a2:	2100      	movs	r1, #0
   a63a4:	203e      	movs	r0, #62	; 0x3e
   a63a6:	4b37      	ldr	r3, [pc, #220]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63a8:	4798      	blx	r3
   a63aa:	4603      	mov	r3, r0
   a63ac:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a63ae:	2100      	movs	r1, #0
   a63b0:	200d      	movs	r0, #13
   a63b2:	4b34      	ldr	r3, [pc, #208]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63b4:	4798      	blx	r3
   a63b6:	4603      	mov	r3, r0
   a63b8:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a63ba:	2100      	movs	r1, #0
   a63bc:	200c      	movs	r0, #12
   a63be:	4b31      	ldr	r3, [pc, #196]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63c0:	4798      	blx	r3
   a63c2:	4603      	mov	r3, r0
   a63c4:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a63c6:	2100      	movs	r1, #0
   a63c8:	200d      	movs	r0, #13
   a63ca:	4b2e      	ldr	r3, [pc, #184]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63cc:	4798      	blx	r3
   a63ce:	4603      	mov	r3, r0
   a63d0:	71fb      	strb	r3, [r7, #7]
				// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a63d2:	2100      	movs	r1, #0
   a63d4:	2029      	movs	r0, #41	; 0x29
   a63d6:	4b2b      	ldr	r3, [pc, #172]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63d8:	4798      	blx	r3
   a63da:	4603      	mov	r3, r0
   a63dc:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a63de:	2100      	movs	r1, #0
   a63e0:	202b      	movs	r0, #43	; 0x2b
   a63e2:	4b28      	ldr	r3, [pc, #160]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63e4:	4798      	blx	r3
   a63e6:	4603      	mov	r3, r0
   a63e8:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a63ea:	2100      	movs	r1, #0
   a63ec:	2003      	movs	r0, #3
   a63ee:	4b25      	ldr	r3, [pc, #148]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63f0:	4798      	blx	r3
   a63f2:	4603      	mov	r3, r0
   a63f4:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a63f6:	2100      	movs	r1, #0
   a63f8:	2004      	movs	r0, #4
   a63fa:	4b22      	ldr	r3, [pc, #136]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a63fc:	4798      	blx	r3
   a63fe:	4603      	mov	r3, r0
   a6400:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a6402:	2100      	movs	r1, #0
   a6404:	201a      	movs	r0, #26
   a6406:	4b1f      	ldr	r3, [pc, #124]	; (a6484 <Cl_Rinse_StopRinse+0x108>)
   a6408:	4798      	blx	r3
   a640a:	4603      	mov	r3, r0
   a640c:	71fb      	strb	r3, [r7, #7]
				
				Cl_Rinse_ResetAlertsforReassertion();
   a640e:	4b1e      	ldr	r3, [pc, #120]	; (a6488 <Cl_Rinse_StopRinse+0x10c>)
   a6410:	4798      	blx	r3
				
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a6412:	4b1e      	ldr	r3, [pc, #120]	; (a648c <Cl_Rinse_StopRinse+0x110>)
   a6414:	781b      	ldrb	r3, [r3, #0]
   a6416:	2b00      	cmp	r3, #0
   a6418:	d02c      	beq.n	a6474 <Cl_Rinse_StopRinse+0xf8>
   a641a:	4b1c      	ldr	r3, [pc, #112]	; (a648c <Cl_Rinse_StopRinse+0x110>)
   a641c:	781b      	ldrb	r3, [r3, #0]
   a641e:	2b08      	cmp	r3, #8
   a6420:	d028      	beq.n	a6474 <Cl_Rinse_StopRinse+0xf8>
   a6422:	4b1a      	ldr	r3, [pc, #104]	; (a648c <Cl_Rinse_StopRinse+0x110>)
   a6424:	781b      	ldrb	r3, [r3, #0]
   a6426:	2b06      	cmp	r3, #6
   a6428:	d024      	beq.n	a6474 <Cl_Rinse_StopRinse+0xf8>
// 					}
// 					else{
// 						
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a642a:	4b19      	ldr	r3, [pc, #100]	; (a6490 <Cl_Rinse_StopRinse+0x114>)
   a642c:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a642e:	4b19      	ldr	r3, [pc, #100]	; (a6494 <Cl_Rinse_StopRinse+0x118>)
   a6430:	2200      	movs	r2, #0
   a6432:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a6434:	4b18      	ldr	r3, [pc, #96]	; (a6498 <Cl_Rinse_StopRinse+0x11c>)
   a6436:	2200      	movs	r2, #0
   a6438:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a643a:	4b18      	ldr	r3, [pc, #96]	; (a649c <Cl_Rinse_StopRinse+0x120>)
   a643c:	2200      	movs	r2, #0
   a643e:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a6440:	4b17      	ldr	r3, [pc, #92]	; (a64a0 <Cl_Rinse_StopRinse+0x124>)
   a6442:	2200      	movs	r2, #0
   a6444:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a6446:	2005      	movs	r0, #5
   a6448:	4b16      	ldr	r3, [pc, #88]	; (a64a4 <Cl_Rinse_StopRinse+0x128>)
   a644a:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a644c:	200d      	movs	r0, #13
   a644e:	4b15      	ldr	r3, [pc, #84]	; (a64a4 <Cl_Rinse_StopRinse+0x128>)
   a6450:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a6452:	2100      	movs	r1, #0
   a6454:	2004      	movs	r0, #4
   a6456:	4b14      	ldr	r3, [pc, #80]	; (a64a8 <Cl_Rinse_StopRinse+0x12c>)
   a6458:	4798      	blx	r3
				sv_prop_stopmixing();
   a645a:	4b14      	ldr	r3, [pc, #80]	; (a64ac <Cl_Rinse_StopRinse+0x130>)
   a645c:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a645e:	4b0b      	ldr	r3, [pc, #44]	; (a648c <Cl_Rinse_StopRinse+0x110>)
   a6460:	2200      	movs	r2, #0
   a6462:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a6464:	1dbb      	adds	r3, r7, #6
   a6466:	2200      	movs	r2, #0
   a6468:	4619      	mov	r1, r3
   a646a:	2022      	movs	r0, #34	; 0x22
   a646c:	4b10      	ldr	r3, [pc, #64]	; (a64b0 <Cl_Rinse_StopRinse+0x134>)
   a646e:	4798      	blx	r3
   a6470:	4603      	mov	r3, r0
   a6472:	71fb      	strb	r3, [r7, #7]
//					}
					
				}
			
				return Cl_rinseretcode;
   a6474:	79fb      	ldrb	r3, [r7, #7]
}
   a6476:	4618      	mov	r0, r3
   a6478:	3708      	adds	r7, #8
   a647a:	46bd      	mov	sp, r7
   a647c:	bd80      	pop	{r7, pc}
   a647e:	bf00      	nop
   a6480:	0009b02d 	.word	0x0009b02d
   a6484:	000829e5 	.word	0x000829e5
   a6488:	000a573d 	.word	0x000a573d
   a648c:	20071b92 	.word	0x20071b92
   a6490:	0009af2d 	.word	0x0009af2d
   a6494:	20071b94 	.word	0x20071b94
   a6498:	20071b98 	.word	0x20071b98
   a649c:	20071ba4 	.word	0x20071ba4
   a64a0:	20071ba8 	.word	0x20071ba8
   a64a4:	00082ea5 	.word	0x00082ea5
   a64a8:	00096ea9 	.word	0x00096ea9
   a64ac:	0009b20d 	.word	0x0009b20d
   a64b0:	0009cbd5 	.word	0x0009cbd5

000a64b4 <Cl_Standby_Controller>:
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

Cl_ReturnCodeType Cl_Standby_Controller(Cl_Mac_EventsType Cl_MacStandbyEvent)
{
   a64b4:	b580      	push	{r7, lr}
   a64b6:	b08a      	sub	sp, #40	; 0x28
   a64b8:	af00      	add	r7, sp, #0
   a64ba:	4603      	mov	r3, r0
   a64bc:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   a64be:	2359      	movs	r3, #89	; 0x59
   a64c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_Uint8Type data =0;
   a64c4:	2300      	movs	r3, #0
   a64c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		Cl_Uint8Type dataarray[4];
		ClStbyAlarmIdType ClstbyAlarmId;
						STBStateDatatype abfdata;
						Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a64ca:	f107 0310 	add.w	r3, r7, #16
   a64ce:	2200      	movs	r2, #0
   a64d0:	601a      	str	r2, [r3, #0]
   a64d2:	711a      	strb	r2, [r3, #4]

		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   a64d4:	f107 0225 	add.w	r2, r7, #37	; 0x25
   a64d8:	79fb      	ldrb	r3, [r7, #7]
   a64da:	4611      	mov	r1, r2
   a64dc:	4618      	mov	r0, r3
   a64de:	4ba8      	ldr	r3, [pc, #672]	; (a6780 <Cl_Standby_Controller+0x2cc>)
   a64e0:	4798      	blx	r3
   a64e2:	4603      	mov	r3, r0
   a64e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		switch(cl_stbystate)
   a64e8:	4ba6      	ldr	r3, [pc, #664]	; (a6784 <Cl_Standby_Controller+0x2d0>)
   a64ea:	781b      	ldrb	r3, [r3, #0]
   a64ec:	2b0a      	cmp	r3, #10
   a64ee:	f200 84b6 	bhi.w	a6e5e <Cl_Standby_Controller+0x9aa>
   a64f2:	a201      	add	r2, pc, #4	; (adr r2, a64f8 <Cl_Standby_Controller+0x44>)
   a64f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a64f8:	000a6e5f 	.word	0x000a6e5f
   a64fc:	000a6525 	.word	0x000a6525
   a6500:	000a6693 	.word	0x000a6693
   a6504:	000a6963 	.word	0x000a6963
   a6508:	000a6ad5 	.word	0x000a6ad5
   a650c:	000a6bd1 	.word	0x000a6bd1
   a6510:	000a6c6f 	.word	0x000a6c6f
   a6514:	000a6d0b 	.word	0x000a6d0b
   a6518:	000a6dc1 	.word	0x000a6dc1
   a651c:	000a6e5f 	.word	0x000a6e5f
   a6520:	000a6e5f 	.word	0x000a6e5f
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a6524:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6528:	2b10      	cmp	r3, #16
   a652a:	d049      	beq.n	a65c0 <Cl_Standby_Controller+0x10c>
   a652c:	2b10      	cmp	r3, #16
   a652e:	dc06      	bgt.n	a653e <Cl_Standby_Controller+0x8a>
   a6530:	2b0e      	cmp	r3, #14
   a6532:	d035      	beq.n	a65a0 <Cl_Standby_Controller+0xec>
   a6534:	2b0e      	cmp	r3, #14
   a6536:	dc3b      	bgt.n	a65b0 <Cl_Standby_Controller+0xfc>
   a6538:	2b01      	cmp	r3, #1
   a653a:	d01c      	beq.n	a6576 <Cl_Standby_Controller+0xc2>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a653c:	e0a8      	b.n	a6690 <Cl_Standby_Controller+0x1dc>
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a653e:	2b5b      	cmp	r3, #91	; 0x5b
   a6540:	d058      	beq.n	a65f4 <Cl_Standby_Controller+0x140>
   a6542:	2b5c      	cmp	r3, #92	; 0x5c
   a6544:	d07b      	beq.n	a663e <Cl_Standby_Controller+0x18a>
   a6546:	2b11      	cmp	r3, #17
   a6548:	d000      	beq.n	a654c <Cl_Standby_Controller+0x98>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a654a:	e0a1      	b.n	a6690 <Cl_Standby_Controller+0x1dc>
				{
					
					
				case EVENT_STBY_CLR_ALARM :
				
				con_command = CON_TX_COMMAND_ALARM_CLEARED;
   a654c:	2351      	movs	r3, #81	; 0x51
   a654e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a6552:	2301      	movs	r3, #1
   a6554:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						Cl_SendDatatoconsole(con_command,&data,0);
   a6558:	f107 0124 	add.w	r1, r7, #36	; 0x24
   a655c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6560:	2200      	movs	r2, #0
   a6562:	4618      	mov	r0, r3
   a6564:	4b88      	ldr	r3, [pc, #544]	; (a6788 <Cl_Standby_Controller+0x2d4>)
   a6566:	4798      	blx	r3
						
										sv_cntrl_resetyellowalarm();
   a6568:	4b88      	ldr	r3, [pc, #544]	; (a678c <Cl_Standby_Controller+0x2d8>)
   a656a:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a656c:	4b88      	ldr	r3, [pc, #544]	; (a6790 <Cl_Standby_Controller+0x2dc>)
   a656e:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a6570:	4b88      	ldr	r3, [pc, #544]	; (a6794 <Cl_Standby_Controller+0x2e0>)
   a6572:	4798      	blx	r3
										
				
				
				break;	
   a6574:	e08c      	b.n	a6690 <Cl_Standby_Controller+0x1dc>
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   a6576:	2316      	movs	r3, #22
   a6578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   a657c:	2311      	movs	r3, #17
   a657e:	f887 3020 	strb.w	r3, [r7, #32]
			//	cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   a6582:	230e      	movs	r3, #14
   a6584:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6588:	f107 0120 	add.w	r1, r7, #32
   a658c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6590:	2202      	movs	r2, #2
   a6592:	4618      	mov	r0, r3
   a6594:	4b7c      	ldr	r3, [pc, #496]	; (a6788 <Cl_Standby_Controller+0x2d4>)
   a6596:	4798      	blx	r3
   a6598:	4603      	mov	r3, r0
   a659a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
		//		cl_stbystate = CL_STBY_STATE_V1;
				break;
   a659e:	e077      	b.n	a6690 <Cl_Standby_Controller+0x1dc>
				case EVENT_STBY_SET_BLDPMP_ON:
				prev_bpstate = 1;
   a65a0:	4b7d      	ldr	r3, [pc, #500]	; (a6798 <Cl_Standby_Controller+0x2e4>)
   a65a2:	2201      	movs	r2, #1
   a65a4:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_START,0);
   a65a6:	2100      	movs	r1, #0
   a65a8:	2002      	movs	r0, #2
   a65aa:	4b7c      	ldr	r3, [pc, #496]	; (a679c <Cl_Standby_Controller+0x2e8>)
   a65ac:	4798      	blx	r3
				break;
   a65ae:	e06f      	b.n	a6690 <Cl_Standby_Controller+0x1dc>
				case EVENT_STBY_SET_BLDPMP_OFF:
				prev_bpstate = 0;
   a65b0:	4b79      	ldr	r3, [pc, #484]	; (a6798 <Cl_Standby_Controller+0x2e4>)
   a65b2:	2200      	movs	r2, #0
   a65b4:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a65b6:	2100      	movs	r1, #0
   a65b8:	2004      	movs	r0, #4
   a65ba:	4b78      	ldr	r3, [pc, #480]	; (a679c <Cl_Standby_Controller+0x2e8>)
   a65bc:	4798      	blx	r3
				break;
   a65be:	e067      	b.n	a6690 <Cl_Standby_Controller+0x1dc>
				case EVENT_STBY__SET_BP_RATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a65c0:	4b77      	ldr	r3, [pc, #476]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a65c2:	7e1b      	ldrb	r3, [r3, #24]
   a65c4:	2b00      	cmp	r3, #0
   a65c6:	d05e      	beq.n	a6686 <Cl_Standby_Controller+0x1d2>
					{
						
						
			
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a65c8:	4b75      	ldr	r3, [pc, #468]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a65ca:	791b      	ldrb	r3, [r3, #4]
   a65cc:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a65ce:	4b74      	ldr	r3, [pc, #464]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a65d0:	795b      	ldrb	r3, [r3, #5]
   a65d2:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a65d4:	4b72      	ldr	r3, [pc, #456]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a65d6:	799b      	ldrb	r3, [r3, #6]
   a65d8:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a65da:	4b71      	ldr	r3, [pc, #452]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a65dc:	79db      	ldrb	r3, [r3, #7]
   a65de:	73fb      	strb	r3, [r7, #15]
						
						Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a65e0:	89bb      	ldrh	r3, [r7, #12]
   a65e2:	461a      	mov	r2, r3
   a65e4:	4b6f      	ldr	r3, [pc, #444]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a65e6:	63da      	str	r2, [r3, #60]	; 0x3c
						
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a65e8:	89bb      	ldrh	r3, [r7, #12]
   a65ea:	4619      	mov	r1, r3
   a65ec:	2001      	movs	r0, #1
   a65ee:	4b6b      	ldr	r3, [pc, #428]	; (a679c <Cl_Standby_Controller+0x2e8>)
   a65f0:	4798      	blx	r3
						
						
					}
					cl_stdby_event == EVENT_STBY_NULL;
				break;
   a65f2:	e048      	b.n	a6686 <Cl_Standby_Controller+0x1d2>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
				
				if(Treatdata[ID_bloodrate] <= 450){
   a65f4:	4b6b      	ldr	r3, [pc, #428]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a65f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a65f8:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a65fc:	d845      	bhi.n	a668a <Cl_Standby_Controller+0x1d6>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a65fe:	4b69      	ldr	r3, [pc, #420]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a6600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6602:	330a      	adds	r3, #10
   a6604:	4a67      	ldr	r2, [pc, #412]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a6606:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a6608:	4b66      	ldr	r3, [pc, #408]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a660c:	4619      	mov	r1, r3
   a660e:	2001      	movs	r0, #1
   a6610:	4b62      	ldr	r3, [pc, #392]	; (a679c <Cl_Standby_Controller+0x2e8>)
   a6612:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a6614:	230f      	movs	r3, #15
   a6616:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a6618:	4b62      	ldr	r3, [pc, #392]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a661a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a661c:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a661e:	7e3b      	ldrb	r3, [r7, #24]
   a6620:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a6622:	7e7b      	ldrb	r3, [r7, #25]
   a6624:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a6626:	7ebb      	ldrb	r3, [r7, #26]
   a6628:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a662a:	7efb      	ldrb	r3, [r7, #27]
   a662c:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a662e:	f107 0310 	add.w	r3, r7, #16
   a6632:	2205      	movs	r2, #5
   a6634:	4619      	mov	r1, r3
   a6636:	202a      	movs	r0, #42	; 0x2a
   a6638:	4b53      	ldr	r3, [pc, #332]	; (a6788 <Cl_Standby_Controller+0x2d4>)
   a663a:	4798      	blx	r3
				
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a663c:	e025      	b.n	a668a <Cl_Standby_Controller+0x1d6>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
				
				if(Treatdata[ID_bloodrate] >= 100){
   a663e:	4b59      	ldr	r3, [pc, #356]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a6640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6642:	2b63      	cmp	r3, #99	; 0x63
   a6644:	d923      	bls.n	a668e <Cl_Standby_Controller+0x1da>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a6646:	4b57      	ldr	r3, [pc, #348]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a6648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a664a:	3b0a      	subs	r3, #10
   a664c:	4a55      	ldr	r2, [pc, #340]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a664e:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a6650:	4b54      	ldr	r3, [pc, #336]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a6652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6654:	4619      	mov	r1, r3
   a6656:	2001      	movs	r0, #1
   a6658:	4b50      	ldr	r3, [pc, #320]	; (a679c <Cl_Standby_Controller+0x2e8>)
   a665a:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a665c:	230f      	movs	r3, #15
   a665e:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a6660:	4b50      	ldr	r3, [pc, #320]	; (a67a4 <Cl_Standby_Controller+0x2f0>)
   a6662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a6664:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a6666:	7e3b      	ldrb	r3, [r7, #24]
   a6668:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a666a:	7e7b      	ldrb	r3, [r7, #25]
   a666c:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a666e:	7ebb      	ldrb	r3, [r7, #26]
   a6670:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a6672:	7efb      	ldrb	r3, [r7, #27]
   a6674:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a6676:	f107 0310 	add.w	r3, r7, #16
   a667a:	2205      	movs	r2, #5
   a667c:	4619      	mov	r1, r3
   a667e:	202a      	movs	r0, #42	; 0x2a
   a6680:	4b41      	ldr	r3, [pc, #260]	; (a6788 <Cl_Standby_Controller+0x2d4>)
   a6682:	4798      	blx	r3
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a6684:	e003      	b.n	a668e <Cl_Standby_Controller+0x1da>
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
						
						
					}
					cl_stdby_event == EVENT_STBY_NULL;
				break;
   a6686:	bf00      	nop
   a6688:	e3ea      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
				
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a668a:	bf00      	nop
   a668c:	e3e8      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a668e:	bf00      	nop
				default:
				break;	
				}


				break;
   a6690:	e3e6      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   a6692:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6696:	3b01      	subs	r3, #1
   a6698:	2b0c      	cmp	r3, #12
   a669a:	f200 815c 	bhi.w	a6956 <Cl_Standby_Controller+0x4a2>
   a669e:	a201      	add	r2, pc, #4	; (adr r2, a66a4 <Cl_Standby_Controller+0x1f0>)
   a66a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a66a4:	000a690d 	.word	0x000a690d
   a66a8:	000a6957 	.word	0x000a6957
   a66ac:	000a6957 	.word	0x000a6957
   a66b0:	000a6957 	.word	0x000a6957
   a66b4:	000a6957 	.word	0x000a6957
   a66b8:	000a6933 	.word	0x000a6933
   a66bc:	000a6949 	.word	0x000a6949
   a66c0:	000a6957 	.word	0x000a6957
   a66c4:	000a6915 	.word	0x000a6915
   a66c8:	000a66e1 	.word	0x000a66e1
   a66cc:	000a67ad 	.word	0x000a67ad
   a66d0:	000a66d9 	.word	0x000a66d9
   a66d4:	000a6957 	.word	0x000a6957
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   a66d8:	4b2a      	ldr	r3, [pc, #168]	; (a6784 <Cl_Standby_Controller+0x2d0>)
   a66da:	2201      	movs	r2, #1
   a66dc:	701a      	strb	r2, [r3, #0]
					break;
   a66de:	e13f      	b.n	a6960 <Cl_Standby_Controller+0x4ac>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a66e0:	4b2f      	ldr	r3, [pc, #188]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a66e2:	7e1b      	ldrb	r3, [r3, #24]
   a66e4:	2b00      	cmp	r3, #0
   a66e6:	f000 8138 	beq.w	a695a <Cl_Standby_Controller+0x4a6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a66ea:	4b2d      	ldr	r3, [pc, #180]	; (a67a0 <Cl_Standby_Controller+0x2ec>)
   a66ec:	791b      	ldrb	r3, [r3, #4]
   a66ee:	2b01      	cmp	r3, #1
   a66f0:	d002      	beq.n	a66f8 <Cl_Standby_Controller+0x244>
   a66f2:	2b21      	cmp	r3, #33	; 0x21
   a66f4:	d01c      	beq.n	a6730 <Cl_Standby_Controller+0x27c>
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   a66f6:	e041      	b.n	a677c <Cl_Standby_Controller+0x2c8>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   a66f8:	2316      	movs	r3, #22
   a66fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a66fe:	2301      	movs	r3, #1
   a6700:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6704:	f107 0320 	add.w	r3, r7, #32
   a6708:	3301      	adds	r3, #1
   a670a:	4619      	mov	r1, r3
   a670c:	2001      	movs	r0, #1
   a670e:	4b26      	ldr	r3, [pc, #152]	; (a67a8 <Cl_Standby_Controller+0x2f4>)
   a6710:	4798      	blx	r3
   a6712:	4603      	mov	r3, r0
   a6714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6718:	f107 0120 	add.w	r1, r7, #32
   a671c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6720:	2202      	movs	r2, #2
   a6722:	4618      	mov	r0, r3
   a6724:	4b18      	ldr	r3, [pc, #96]	; (a6788 <Cl_Standby_Controller+0x2d4>)
   a6726:	4798      	blx	r3
   a6728:	4603      	mov	r3, r0
   a672a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//cl_wait(100);
							break;
   a672e:	e025      	b.n	a677c <Cl_Standby_Controller+0x2c8>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   a6730:	2316      	movs	r3, #22
   a6732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a6736:	2323      	movs	r3, #35	; 0x23
   a6738:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   a673c:	f107 0320 	add.w	r3, r7, #32
   a6740:	3301      	adds	r3, #1
   a6742:	4619      	mov	r1, r3
   a6744:	2001      	movs	r0, #1
   a6746:	4b18      	ldr	r3, [pc, #96]	; (a67a8 <Cl_Standby_Controller+0x2f4>)
   a6748:	4798      	blx	r3
   a674a:	4603      	mov	r3, r0
   a674c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a6750:	f107 0320 	add.w	r3, r7, #32
   a6754:	3301      	adds	r3, #1
   a6756:	4619      	mov	r1, r3
   a6758:	2028      	movs	r0, #40	; 0x28
   a675a:	4b13      	ldr	r3, [pc, #76]	; (a67a8 <Cl_Standby_Controller+0x2f4>)
   a675c:	4798      	blx	r3
   a675e:	4603      	mov	r3, r0
   a6760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6764:	f107 0120 	add.w	r1, r7, #32
   a6768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a676c:	2202      	movs	r2, #2
   a676e:	4618      	mov	r0, r3
   a6770:	4b05      	ldr	r3, [pc, #20]	; (a6788 <Cl_Standby_Controller+0x2d4>)
   a6772:	4798      	blx	r3
   a6774:	4603      	mov	r3, r0
   a6776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

							break;
   a677a:	bf00      	nop
							break;
						}

					}
				}
				break;
   a677c:	e0ed      	b.n	a695a <Cl_Standby_Controller+0x4a6>
   a677e:	bf00      	nop
   a6780:	000a6e79 	.word	0x000a6e79
   a6784:	20070d64 	.word	0x20070d64
   a6788:	0009cbd5 	.word	0x0009cbd5
   a678c:	0009b091 	.word	0x0009b091
   a6790:	0009b07d 	.word	0x0009b07d
   a6794:	0009b0b9 	.word	0x0009b0b9
   a6798:	20071872 	.word	0x20071872
   a679c:	00093f5d 	.word	0x00093f5d
   a67a0:	20072350 	.word	0x20072350
   a67a4:	20072614 	.word	0x20072614
   a67a8:	0009b701 	.word	0x0009b701
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a67ac:	4bb3      	ldr	r3, [pc, #716]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a67ae:	7e1b      	ldrb	r3, [r3, #24]
   a67b0:	2b00      	cmp	r3, #0
   a67b2:	f000 80d4 	beq.w	a695e <Cl_Standby_Controller+0x4aa>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a67b6:	4bb1      	ldr	r3, [pc, #708]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a67b8:	795b      	ldrb	r3, [r3, #5]
   a67ba:	723b      	strb	r3, [r7, #8]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a67bc:	4baf      	ldr	r3, [pc, #700]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a67be:	799b      	ldrb	r3, [r3, #6]
   a67c0:	727b      	strb	r3, [r7, #9]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a67c2:	4bae      	ldr	r3, [pc, #696]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a67c4:	79db      	ldrb	r3, [r3, #7]
   a67c6:	72bb      	strb	r3, [r7, #10]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a67c8:	4bac      	ldr	r3, [pc, #688]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a67ca:	7a1b      	ldrb	r3, [r3, #8]
   a67cc:	72fb      	strb	r3, [r7, #11]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a67ce:	4bab      	ldr	r3, [pc, #684]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a67d0:	791b      	ldrb	r3, [r3, #4]
   a67d2:	3b05      	subs	r3, #5
   a67d4:	2b20      	cmp	r3, #32
   a67d6:	f200 8097 	bhi.w	a6908 <Cl_Standby_Controller+0x454>
   a67da:	a201      	add	r2, pc, #4	; (adr r2, a67e0 <Cl_Standby_Controller+0x32c>)
   a67dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a67e0:	000a6909 	.word	0x000a6909
   a67e4:	000a6909 	.word	0x000a6909
   a67e8:	000a6909 	.word	0x000a6909
   a67ec:	000a6909 	.word	0x000a6909
   a67f0:	000a6909 	.word	0x000a6909
   a67f4:	000a6909 	.word	0x000a6909
   a67f8:	000a6909 	.word	0x000a6909
   a67fc:	000a6909 	.word	0x000a6909
   a6800:	000a6909 	.word	0x000a6909
   a6804:	000a6909 	.word	0x000a6909
   a6808:	000a6909 	.word	0x000a6909
   a680c:	000a6909 	.word	0x000a6909
   a6810:	000a6909 	.word	0x000a6909
   a6814:	000a6909 	.word	0x000a6909
   a6818:	000a6909 	.word	0x000a6909
   a681c:	000a6909 	.word	0x000a6909
   a6820:	000a6909 	.word	0x000a6909
   a6824:	000a6909 	.word	0x000a6909
   a6828:	000a6909 	.word	0x000a6909
   a682c:	000a6865 	.word	0x000a6865
   a6830:	000a687d 	.word	0x000a687d
   a6834:	000a6895 	.word	0x000a6895
   a6838:	000a68a5 	.word	0x000a68a5
   a683c:	000a68b5 	.word	0x000a68b5
   a6840:	000a68c5 	.word	0x000a68c5
   a6844:	000a6909 	.word	0x000a6909
   a6848:	000a6909 	.word	0x000a6909
   a684c:	000a6909 	.word	0x000a6909
   a6850:	000a6909 	.word	0x000a6909
   a6854:	000a68d5 	.word	0x000a68d5
   a6858:	000a68df 	.word	0x000a68df
   a685c:	000a68e9 	.word	0x000a68e9
   a6860:	000a68f9 	.word	0x000a68f9
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a6864:	68bb      	ldr	r3, [r7, #8]
   a6866:	4a86      	ldr	r2, [pc, #536]	; (a6a80 <Cl_Standby_Controller+0x5cc>)
   a6868:	fba2 2303 	umull	r2, r3, r2, r3
   a686c:	08da      	lsrs	r2, r3, #3
   a686e:	4b85      	ldr	r3, [pc, #532]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a6870:	4610      	mov	r0, r2
   a6872:	4798      	blx	r3
   a6874:	4602      	mov	r2, r0
   a6876:	4b84      	ldr	r3, [pc, #528]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a6878:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   a687a:	e046      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a687c:	68bb      	ldr	r3, [r7, #8]
   a687e:	4a80      	ldr	r2, [pc, #512]	; (a6a80 <Cl_Standby_Controller+0x5cc>)
   a6880:	fba2 2303 	umull	r2, r3, r2, r3
   a6884:	08da      	lsrs	r2, r3, #3
   a6886:	4b7f      	ldr	r3, [pc, #508]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a6888:	4610      	mov	r0, r2
   a688a:	4798      	blx	r3
   a688c:	4602      	mov	r2, r0
   a688e:	4b7e      	ldr	r3, [pc, #504]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a6890:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   a6892:	e03a      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a6894:	68ba      	ldr	r2, [r7, #8]
   a6896:	4b7b      	ldr	r3, [pc, #492]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a6898:	4610      	mov	r0, r2
   a689a:	4798      	blx	r3
   a689c:	4602      	mov	r2, r0
   a689e:	4b7a      	ldr	r3, [pc, #488]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68a0:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   a68a2:	e032      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a68a4:	68ba      	ldr	r2, [r7, #8]
   a68a6:	4b77      	ldr	r3, [pc, #476]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a68a8:	4610      	mov	r0, r2
   a68aa:	4798      	blx	r3
   a68ac:	4602      	mov	r2, r0
   a68ae:	4b76      	ldr	r3, [pc, #472]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68b0:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   a68b2:	e02a      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a68b4:	68ba      	ldr	r2, [r7, #8]
   a68b6:	4b73      	ldr	r3, [pc, #460]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a68b8:	4610      	mov	r0, r2
   a68ba:	4798      	blx	r3
   a68bc:	4602      	mov	r2, r0
   a68be:	4b72      	ldr	r3, [pc, #456]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68c0:	615a      	str	r2, [r3, #20]
						break;
   a68c2:	e022      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a68c4:	68ba      	ldr	r2, [r7, #8]
   a68c6:	4b6f      	ldr	r3, [pc, #444]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a68c8:	4610      	mov	r0, r2
   a68ca:	4798      	blx	r3
   a68cc:	4602      	mov	r2, r0
   a68ce:	4b6e      	ldr	r3, [pc, #440]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68d0:	611a      	str	r2, [r3, #16]
						break;
   a68d2:	e01a      	b.n	a690a <Cl_Standby_Controller+0x456>
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a68d4:	68bb      	ldr	r3, [r7, #8]
   a68d6:	b21a      	sxth	r2, r3
   a68d8:	4b6b      	ldr	r3, [pc, #428]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68da:	801a      	strh	r2, [r3, #0]
						break;
   a68dc:	e015      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a68de:	68bb      	ldr	r3, [r7, #8]
   a68e0:	b21a      	sxth	r2, r3
   a68e2:	4b69      	ldr	r3, [pc, #420]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68e4:	805a      	strh	r2, [r3, #2]
						break;
   a68e6:	e010      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a68e8:	68ba      	ldr	r2, [r7, #8]
   a68ea:	4b66      	ldr	r3, [pc, #408]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a68ec:	4610      	mov	r0, r2
   a68ee:	4798      	blx	r3
   a68f0:	4602      	mov	r2, r0
   a68f2:	4b65      	ldr	r3, [pc, #404]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a68f4:	60da      	str	r2, [r3, #12]
						break;
   a68f6:	e008      	b.n	a690a <Cl_Standby_Controller+0x456>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a68f8:	68ba      	ldr	r2, [r7, #8]
   a68fa:	4b62      	ldr	r3, [pc, #392]	; (a6a84 <Cl_Standby_Controller+0x5d0>)
   a68fc:	4610      	mov	r0, r2
   a68fe:	4798      	blx	r3
   a6900:	4602      	mov	r2, r0
   a6902:	4b61      	ldr	r3, [pc, #388]	; (a6a88 <Cl_Standby_Controller+0x5d4>)
   a6904:	609a      	str	r2, [r3, #8]
						break;
   a6906:	e000      	b.n	a690a <Cl_Standby_Controller+0x456>

						default:break;
   a6908:	bf00      	nop
					}
				}
				break;
   a690a:	e028      	b.n	a695e <Cl_Standby_Controller+0x4aa>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_IDLE;
   a690c:	4b5f      	ldr	r3, [pc, #380]	; (a6a8c <Cl_Standby_Controller+0x5d8>)
   a690e:	2201      	movs	r2, #1
   a6910:	701a      	strb	r2, [r3, #0]

				break;
   a6912:	e025      	b.n	a6960 <Cl_Standby_Controller+0x4ac>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a6914:	2307      	movs	r3, #7
   a6916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a691a:	f107 0124 	add.w	r1, r7, #36	; 0x24
   a691e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6922:	2200      	movs	r2, #0
   a6924:	4618      	mov	r0, r3
   a6926:	4b5a      	ldr	r3, [pc, #360]	; (a6a90 <Cl_Standby_Controller+0x5dc>)
   a6928:	4798      	blx	r3
   a692a:	4603      	mov	r3, r0
   a692c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a6930:	e016      	b.n	a6960 <Cl_Standby_Controller+0x4ac>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a6932:	4b58      	ldr	r3, [pc, #352]	; (a6a94 <Cl_Standby_Controller+0x5e0>)
   a6934:	681b      	ldr	r3, [r3, #0]
   a6936:	3301      	adds	r3, #1
   a6938:	4a56      	ldr	r2, [pc, #344]	; (a6a94 <Cl_Standby_Controller+0x5e0>)
   a693a:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a693c:	4b56      	ldr	r3, [pc, #344]	; (a6a98 <Cl_Standby_Controller+0x5e4>)
   a693e:	4798      	blx	r3
   a6940:	4603      	mov	r3, r0
   a6942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a6946:	e00b      	b.n	a6960 <Cl_Standby_Controller+0x4ac>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a6948:	4b52      	ldr	r3, [pc, #328]	; (a6a94 <Cl_Standby_Controller+0x5e0>)
   a694a:	2200      	movs	r2, #0
   a694c:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_IDLE;
   a694e:	4b4f      	ldr	r3, [pc, #316]	; (a6a8c <Cl_Standby_Controller+0x5d8>)
   a6950:	2201      	movs	r2, #1
   a6952:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   a6954:	e004      	b.n	a6960 <Cl_Standby_Controller+0x4ac>
			//	printf("H");
				break;

				
				default:
				break;
   a6956:	bf00      	nop
   a6958:	e282      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
							break;
						}

					}
				}
				break;
   a695a:	bf00      	nop
   a695c:	e280      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
						break;

						default:break;
					}
				}
				break;
   a695e:	bf00      	nop

				
				default:
				break;
			}
			break;
   a6960:	e27e      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   a6962:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6966:	3b06      	subs	r3, #6
   a6968:	2b07      	cmp	r3, #7
   a696a:	f200 80ad 	bhi.w	a6ac8 <Cl_Standby_Controller+0x614>
   a696e:	a201      	add	r2, pc, #4	; (adr r2, a6974 <Cl_Standby_Controller+0x4c0>)
   a6970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6974:	000a6aa5 	.word	0x000a6aa5
   a6978:	000a6ac1 	.word	0x000a6ac1
   a697c:	000a6ac9 	.word	0x000a6ac9
   a6980:	000a6a6b 	.word	0x000a6a6b
   a6984:	000a6995 	.word	0x000a6995
   a6988:	000a6a1f 	.word	0x000a6a1f
   a698c:	000a6ac9 	.word	0x000a6ac9
   a6990:	000a6ac9 	.word	0x000a6ac9
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   a6994:	4b39      	ldr	r3, [pc, #228]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a6996:	7e1b      	ldrb	r3, [r3, #24]
   a6998:	2b00      	cmp	r3, #0
   a699a:	f000 8097 	beq.w	a6acc <Cl_Standby_Controller+0x618>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a699e:	4b37      	ldr	r3, [pc, #220]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a69a0:	791b      	ldrb	r3, [r3, #4]
   a69a2:	2b01      	cmp	r3, #1
   a69a4:	d002      	beq.n	a69ac <Cl_Standby_Controller+0x4f8>
   a69a6:	2b21      	cmp	r3, #33	; 0x21
   a69a8:	d01c      	beq.n	a69e4 <Cl_Standby_Controller+0x530>
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   a69aa:	e037      	b.n	a6a1c <Cl_Standby_Controller+0x568>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a69ac:	2316      	movs	r3, #22
   a69ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a69b2:	2301      	movs	r3, #1
   a69b4:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a69b8:	f107 0320 	add.w	r3, r7, #32
   a69bc:	3301      	adds	r3, #1
   a69be:	4619      	mov	r1, r3
   a69c0:	2001      	movs	r0, #1
   a69c2:	4b36      	ldr	r3, [pc, #216]	; (a6a9c <Cl_Standby_Controller+0x5e8>)
   a69c4:	4798      	blx	r3
   a69c6:	4603      	mov	r3, r0
   a69c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(Cl_Uint8Type)2);
   a69cc:	f107 0120 	add.w	r1, r7, #32
   a69d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a69d4:	2202      	movs	r2, #2
   a69d6:	4618      	mov	r0, r3
   a69d8:	4b2d      	ldr	r3, [pc, #180]	; (a6a90 <Cl_Standby_Controller+0x5dc>)
   a69da:	4798      	blx	r3
   a69dc:	4603      	mov	r3, r0
   a69de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//	cl_wait(
										break;
   a69e2:	e01b      	b.n	a6a1c <Cl_Standby_Controller+0x568>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a69e4:	2316      	movs	r3, #22
   a69e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a69ea:	2323      	movs	r3, #35	; 0x23
   a69ec:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a69f0:	f107 0320 	add.w	r3, r7, #32
   a69f4:	3301      	adds	r3, #1
   a69f6:	4619      	mov	r1, r3
   a69f8:	2001      	movs	r0, #1
   a69fa:	4b28      	ldr	r3, [pc, #160]	; (a6a9c <Cl_Standby_Controller+0x5e8>)
   a69fc:	4798      	blx	r3
   a69fe:	4603      	mov	r3, r0
   a6a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6a04:	f107 0120 	add.w	r1, r7, #32
   a6a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6a0c:	2202      	movs	r2, #2
   a6a0e:	4618      	mov	r0, r3
   a6a10:	4b1f      	ldr	r3, [pc, #124]	; (a6a90 <Cl_Standby_Controller+0x5dc>)
   a6a12:	4798      	blx	r3
   a6a14:	4603      	mov	r3, r0
   a6a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
						break;
   a6a1a:	bf00      	nop
										default:
										break;
									}
								}

				break;
   a6a1c:	e056      	b.n	a6acc <Cl_Standby_Controller+0x618>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a6a1e:	4b17      	ldr	r3, [pc, #92]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a6a20:	7e1b      	ldrb	r3, [r3, #24]
   a6a22:	2b00      	cmp	r3, #0
   a6a24:	d054      	beq.n	a6ad0 <Cl_Standby_Controller+0x61c>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a6a26:	4b15      	ldr	r3, [pc, #84]	; (a6a7c <Cl_Standby_Controller+0x5c8>)
   a6a28:	791b      	ldrb	r3, [r3, #4]
   a6a2a:	2b01      	cmp	r3, #1
   a6a2c:	d000      	beq.n	a6a30 <Cl_Standby_Controller+0x57c>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   a6a2e:	e01b      	b.n	a6a68 <Cl_Standby_Controller+0x5b4>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   a6a30:	2316      	movs	r3, #22
   a6a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6a36:	2301      	movs	r3, #1
   a6a38:	f887 3020 	strb.w	r3, [r7, #32]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6a3c:	f107 0320 	add.w	r3, r7, #32
   a6a40:	3301      	adds	r3, #1
   a6a42:	4619      	mov	r1, r3
   a6a44:	2001      	movs	r0, #1
   a6a46:	4b15      	ldr	r3, [pc, #84]	; (a6a9c <Cl_Standby_Controller+0x5e8>)
   a6a48:	4798      	blx	r3
   a6a4a:	4603      	mov	r3, r0
   a6a4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6a50:	f107 0120 	add.w	r1, r7, #32
   a6a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6a58:	2202      	movs	r2, #2
   a6a5a:	4618      	mov	r0, r3
   a6a5c:	4b0c      	ldr	r3, [pc, #48]	; (a6a90 <Cl_Standby_Controller+0x5dc>)
   a6a5e:	4798      	blx	r3
   a6a60:	4603      	mov	r3, r0
   a6a62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						//cl_wait(10);
						break;
   a6a66:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   a6a68:	e032      	b.n	a6ad0 <Cl_Standby_Controller+0x61c>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a6a6a:	2307      	movs	r3, #7
   a6a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   a6a70:	4b0b      	ldr	r3, [pc, #44]	; (a6aa0 <Cl_Standby_Controller+0x5ec>)
   a6a72:	4798      	blx	r3
   a6a74:	4603      	mov	r3, r0
   a6a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a6a7a:	e02a      	b.n	a6ad2 <Cl_Standby_Controller+0x61e>
   a6a7c:	20072350 	.word	0x20072350
   a6a80:	cccccccd 	.word	0xcccccccd
   a6a84:	000a7ef9 	.word	0x000a7ef9
   a6a88:	20072044 	.word	0x20072044
   a6a8c:	20070d64 	.word	0x20070d64
   a6a90:	0009cbd5 	.word	0x0009cbd5
   a6a94:	20071bcc 	.word	0x20071bcc
   a6a98:	000a710d 	.word	0x000a710d
   a6a9c:	0009b701 	.word	0x0009b701
   a6aa0:	000a7199 	.word	0x000a7199
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a6aa4:	4bc0      	ldr	r3, [pc, #768]	; (a6da8 <Cl_Standby_Controller+0x8f4>)
   a6aa6:	681b      	ldr	r3, [r3, #0]
   a6aa8:	3301      	adds	r3, #1
   a6aaa:	4abf      	ldr	r2, [pc, #764]	; (a6da8 <Cl_Standby_Controller+0x8f4>)
   a6aac:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   a6aae:	f107 031f 	add.w	r3, r7, #31
   a6ab2:	4618      	mov	r0, r3
   a6ab4:	4bbd      	ldr	r3, [pc, #756]	; (a6dac <Cl_Standby_Controller+0x8f8>)
   a6ab6:	4798      	blx	r3
   a6ab8:	4603      	mov	r3, r0
   a6aba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
				
				break;
   a6abe:	e008      	b.n	a6ad2 <Cl_Standby_Controller+0x61e>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a6ac0:	4bb9      	ldr	r3, [pc, #740]	; (a6da8 <Cl_Standby_Controller+0x8f4>)
   a6ac2:	2200      	movs	r2, #0
   a6ac4:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a6ac6:	e004      	b.n	a6ad2 <Cl_Standby_Controller+0x61e>
			//	printf("H");
				break;

				
				default:
				break;
   a6ac8:	bf00      	nop
   a6aca:	e1c9      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
										default:
										break;
									}
								}

				break;
   a6acc:	bf00      	nop
   a6ace:	e1c7      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
						default:
						break;
					}
					
				}
				break;
   a6ad0:	bf00      	nop

				
				default:
				break;
			}
			break;
   a6ad2:	e1c5      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   a6ad4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6ad8:	3b06      	subs	r3, #6
   a6ada:	2b07      	cmp	r3, #7
   a6adc:	d874      	bhi.n	a6bc8 <Cl_Standby_Controller+0x714>
   a6ade:	a201      	add	r2, pc, #4	; (adr r2, a6ae4 <Cl_Standby_Controller+0x630>)
   a6ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6ae4:	000a6bab 	.word	0x000a6bab
   a6ae8:	000a6bc1 	.word	0x000a6bc1
   a6aec:	000a6bc9 	.word	0x000a6bc9
   a6af0:	000a6b8d 	.word	0x000a6b8d
   a6af4:	000a6b05 	.word	0x000a6b05
   a6af8:	000a6bc9 	.word	0x000a6bc9
   a6afc:	000a6bc9 	.word	0x000a6bc9
   a6b00:	000a6bc9 	.word	0x000a6bc9
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a6b04:	4baa      	ldr	r3, [pc, #680]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6b06:	7e1b      	ldrb	r3, [r3, #24]
   a6b08:	2b00      	cmp	r3, #0
   a6b0a:	d05f      	beq.n	a6bcc <Cl_Standby_Controller+0x718>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6b0c:	4ba8      	ldr	r3, [pc, #672]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6b0e:	791b      	ldrb	r3, [r3, #4]
   a6b10:	2b01      	cmp	r3, #1
   a6b12:	d002      	beq.n	a6b1a <Cl_Standby_Controller+0x666>
   a6b14:	2b21      	cmp	r3, #33	; 0x21
   a6b16:	d01c      	beq.n	a6b52 <Cl_Standby_Controller+0x69e>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a6b18:	e037      	b.n	a6b8a <Cl_Standby_Controller+0x6d6>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6b1a:	2316      	movs	r3, #22
   a6b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6b20:	2301      	movs	r3, #1
   a6b22:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6b26:	f107 0320 	add.w	r3, r7, #32
   a6b2a:	3301      	adds	r3, #1
   a6b2c:	4619      	mov	r1, r3
   a6b2e:	2001      	movs	r0, #1
   a6b30:	4ba0      	ldr	r3, [pc, #640]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6b32:	4798      	blx	r3
   a6b34:	4603      	mov	r3, r0
   a6b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6b3a:	f107 0120 	add.w	r1, r7, #32
   a6b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6b42:	2202      	movs	r2, #2
   a6b44:	4618      	mov	r0, r3
   a6b46:	4b9c      	ldr	r3, [pc, #624]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6b48:	4798      	blx	r3
   a6b4a:	4603      	mov	r3, r0
   a6b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a6b50:	e01b      	b.n	a6b8a <Cl_Standby_Controller+0x6d6>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a6b52:	2316      	movs	r3, #22
   a6b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6b58:	2323      	movs	r3, #35	; 0x23
   a6b5a:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6b5e:	f107 0320 	add.w	r3, r7, #32
   a6b62:	3301      	adds	r3, #1
   a6b64:	4619      	mov	r1, r3
   a6b66:	2001      	movs	r0, #1
   a6b68:	4b92      	ldr	r3, [pc, #584]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6b6a:	4798      	blx	r3
   a6b6c:	4603      	mov	r3, r0
   a6b6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6b72:	f107 0120 	add.w	r1, r7, #32
   a6b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6b7a:	2202      	movs	r2, #2
   a6b7c:	4618      	mov	r0, r3
   a6b7e:	4b8e      	ldr	r3, [pc, #568]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6b80:	4798      	blx	r3
   a6b82:	4603      	mov	r3, r0
   a6b84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a6b88:	bf00      	nop
										default:
										break;
									}
								}
				break;
   a6b8a:	e01f      	b.n	a6bcc <Cl_Standby_Controller+0x718>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a6b8c:	2307      	movs	r3, #7
   a6b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a6b92:	f107 0124 	add.w	r1, r7, #36	; 0x24
   a6b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6b9a:	2200      	movs	r2, #0
   a6b9c:	4618      	mov	r0, r3
   a6b9e:	4b86      	ldr	r3, [pc, #536]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6ba0:	4798      	blx	r3
   a6ba2:	4603      	mov	r3, r0
   a6ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a6ba8:	e011      	b.n	a6bce <Cl_Standby_Controller+0x71a>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a6baa:	4b7f      	ldr	r3, [pc, #508]	; (a6da8 <Cl_Standby_Controller+0x8f4>)
   a6bac:	681b      	ldr	r3, [r3, #0]
   a6bae:	3301      	adds	r3, #1
   a6bb0:	4a7d      	ldr	r2, [pc, #500]	; (a6da8 <Cl_Standby_Controller+0x8f4>)
   a6bb2:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a6bb4:	4b81      	ldr	r3, [pc, #516]	; (a6dbc <Cl_Standby_Controller+0x908>)
   a6bb6:	4798      	blx	r3
   a6bb8:	4603      	mov	r3, r0
   a6bba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a6bbe:	e006      	b.n	a6bce <Cl_Standby_Controller+0x71a>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a6bc0:	4b79      	ldr	r3, [pc, #484]	; (a6da8 <Cl_Standby_Controller+0x8f4>)
   a6bc2:	2200      	movs	r2, #0
   a6bc4:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a6bc6:	e002      	b.n	a6bce <Cl_Standby_Controller+0x71a>
			//	printf("H");
				break;

				
				default:
				break;
   a6bc8:	bf00      	nop
   a6bca:	e149      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
										break;
										default:
										break;
									}
								}
				break;
   a6bcc:	bf00      	nop

				
				default:
				break;
			}
			break;
   a6bce:	e147      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   a6bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6bd4:	2b0a      	cmp	r3, #10
   a6bd6:	d002      	beq.n	a6bde <Cl_Standby_Controller+0x72a>
   a6bd8:	2b0d      	cmp	r3, #13
   a6bda:	d044      	beq.n	a6c66 <Cl_Standby_Controller+0x7b2>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a6bdc:	e046      	b.n	a6c6c <Cl_Standby_Controller+0x7b8>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   a6bde:	4b74      	ldr	r3, [pc, #464]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6be0:	7e1b      	ldrb	r3, [r3, #24]
   a6be2:	2b00      	cmp	r3, #0
   a6be4:	d041      	beq.n	a6c6a <Cl_Standby_Controller+0x7b6>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   a6be6:	4b72      	ldr	r3, [pc, #456]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6be8:	791b      	ldrb	r3, [r3, #4]
   a6bea:	2b01      	cmp	r3, #1
   a6bec:	d002      	beq.n	a6bf4 <Cl_Standby_Controller+0x740>
   a6bee:	2b21      	cmp	r3, #33	; 0x21
   a6bf0:	d01c      	beq.n	a6c2c <Cl_Standby_Controller+0x778>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   a6bf2:	e037      	b.n	a6c64 <Cl_Standby_Controller+0x7b0>
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   a6bf4:	2316      	movs	r3, #22
   a6bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6bfa:	2301      	movs	r3, #1
   a6bfc:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6c00:	f107 0320 	add.w	r3, r7, #32
   a6c04:	3301      	adds	r3, #1
   a6c06:	4619      	mov	r1, r3
   a6c08:	2001      	movs	r0, #1
   a6c0a:	4b6a      	ldr	r3, [pc, #424]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6c0c:	4798      	blx	r3
   a6c0e:	4603      	mov	r3, r0
   a6c10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6c14:	f107 0120 	add.w	r1, r7, #32
   a6c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6c1c:	2202      	movs	r2, #2
   a6c1e:	4618      	mov	r0, r3
   a6c20:	4b65      	ldr	r3, [pc, #404]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6c22:	4798      	blx	r3
   a6c24:	4603      	mov	r3, r0
   a6c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(10);
												break;
   a6c2a:	e01b      	b.n	a6c64 <Cl_Standby_Controller+0x7b0>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   a6c2c:	2316      	movs	r3, #22
   a6c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
														//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6c32:	2323      	movs	r3, #35	; 0x23
   a6c34:	f887 3020 	strb.w	r3, [r7, #32]
														cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6c38:	f107 0320 	add.w	r3, r7, #32
   a6c3c:	3301      	adds	r3, #1
   a6c3e:	4619      	mov	r1, r3
   a6c40:	2001      	movs	r0, #1
   a6c42:	4b5c      	ldr	r3, [pc, #368]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6c44:	4798      	blx	r3
   a6c46:	4603      	mov	r3, r0
   a6c48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6c4c:	f107 0120 	add.w	r1, r7, #32
   a6c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6c54:	2202      	movs	r2, #2
   a6c56:	4618      	mov	r0, r3
   a6c58:	4b57      	ldr	r3, [pc, #348]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6c5a:	4798      	blx	r3
   a6c5c:	4603      	mov	r3, r0
   a6c5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
														//cl_wait(100);
												break;
   a6c62:	bf00      	nop
												default:
												break;
											}
										}
							break;
   a6c64:	e001      	b.n	a6c6a <Cl_Standby_Controller+0x7b6>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a6c66:	bf00      	nop
   a6c68:	e0fa      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
												break;
												default:
												break;
											}
										}
							break;
   a6c6a:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a6c6c:	e0f8      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   a6c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6c72:	2b0a      	cmp	r3, #10
   a6c74:	d002      	beq.n	a6c7c <Cl_Standby_Controller+0x7c8>
   a6c76:	2b0d      	cmp	r3, #13
   a6c78:	d044      	beq.n	a6d04 <Cl_Standby_Controller+0x850>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a6c7a:	e046      	b.n	a6d0a <Cl_Standby_Controller+0x856>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a6c7c:	4b4c      	ldr	r3, [pc, #304]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6c7e:	7e1b      	ldrb	r3, [r3, #24]
   a6c80:	2b00      	cmp	r3, #0
   a6c82:	d041      	beq.n	a6d08 <Cl_Standby_Controller+0x854>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6c84:	4b4a      	ldr	r3, [pc, #296]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6c86:	791b      	ldrb	r3, [r3, #4]
   a6c88:	2b01      	cmp	r3, #1
   a6c8a:	d002      	beq.n	a6c92 <Cl_Standby_Controller+0x7de>
   a6c8c:	2b21      	cmp	r3, #33	; 0x21
   a6c8e:	d01c      	beq.n	a6cca <Cl_Standby_Controller+0x816>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a6c90:	e037      	b.n	a6d02 <Cl_Standby_Controller+0x84e>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6c92:	2316      	movs	r3, #22
   a6c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6c98:	2301      	movs	r3, #1
   a6c9a:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6c9e:	f107 0320 	add.w	r3, r7, #32
   a6ca2:	3301      	adds	r3, #1
   a6ca4:	4619      	mov	r1, r3
   a6ca6:	2001      	movs	r0, #1
   a6ca8:	4b42      	ldr	r3, [pc, #264]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6caa:	4798      	blx	r3
   a6cac:	4603      	mov	r3, r0
   a6cae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6cb2:	f107 0120 	add.w	r1, r7, #32
   a6cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6cba:	2202      	movs	r2, #2
   a6cbc:	4618      	mov	r0, r3
   a6cbe:	4b3e      	ldr	r3, [pc, #248]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6cc0:	4798      	blx	r3
   a6cc2:	4603      	mov	r3, r0
   a6cc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a6cc8:	e01b      	b.n	a6d02 <Cl_Standby_Controller+0x84e>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a6cca:	2316      	movs	r3, #22
   a6ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6cd0:	2323      	movs	r3, #35	; 0x23
   a6cd2:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6cd6:	f107 0320 	add.w	r3, r7, #32
   a6cda:	3301      	adds	r3, #1
   a6cdc:	4619      	mov	r1, r3
   a6cde:	2001      	movs	r0, #1
   a6ce0:	4b34      	ldr	r3, [pc, #208]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6ce2:	4798      	blx	r3
   a6ce4:	4603      	mov	r3, r0
   a6ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6cea:	f107 0120 	add.w	r1, r7, #32
   a6cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6cf2:	2202      	movs	r2, #2
   a6cf4:	4618      	mov	r0, r3
   a6cf6:	4b30      	ldr	r3, [pc, #192]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6cf8:	4798      	blx	r3
   a6cfa:	4603      	mov	r3, r0
   a6cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a6d00:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a6d02:	e001      	b.n	a6d08 <Cl_Standby_Controller+0x854>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a6d04:	bf00      	nop
   a6d06:	e000      	b.n	a6d0a <Cl_Standby_Controller+0x856>
										break;
										default:
										break;
									}
								}
							break;
   a6d08:	bf00      	nop
							break;
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   a6d0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6d0e:	2b0a      	cmp	r3, #10
   a6d10:	d002      	beq.n	a6d18 <Cl_Standby_Controller+0x864>
   a6d12:	2b0d      	cmp	r3, #13
   a6d14:	d044      	beq.n	a6da0 <Cl_Standby_Controller+0x8ec>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a6d16:	e046      	b.n	a6da6 <Cl_Standby_Controller+0x8f2>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a6d18:	4b25      	ldr	r3, [pc, #148]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6d1a:	7e1b      	ldrb	r3, [r3, #24]
   a6d1c:	2b00      	cmp	r3, #0
   a6d1e:	d041      	beq.n	a6da4 <Cl_Standby_Controller+0x8f0>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6d20:	4b23      	ldr	r3, [pc, #140]	; (a6db0 <Cl_Standby_Controller+0x8fc>)
   a6d22:	791b      	ldrb	r3, [r3, #4]
   a6d24:	2b01      	cmp	r3, #1
   a6d26:	d002      	beq.n	a6d2e <Cl_Standby_Controller+0x87a>
   a6d28:	2b21      	cmp	r3, #33	; 0x21
   a6d2a:	d01c      	beq.n	a6d66 <Cl_Standby_Controller+0x8b2>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a6d2c:	e037      	b.n	a6d9e <Cl_Standby_Controller+0x8ea>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6d2e:	2316      	movs	r3, #22
   a6d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6d34:	2301      	movs	r3, #1
   a6d36:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6d3a:	f107 0320 	add.w	r3, r7, #32
   a6d3e:	3301      	adds	r3, #1
   a6d40:	4619      	mov	r1, r3
   a6d42:	2001      	movs	r0, #1
   a6d44:	4b1b      	ldr	r3, [pc, #108]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6d46:	4798      	blx	r3
   a6d48:	4603      	mov	r3, r0
   a6d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6d4e:	f107 0120 	add.w	r1, r7, #32
   a6d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6d56:	2202      	movs	r2, #2
   a6d58:	4618      	mov	r0, r3
   a6d5a:	4b17      	ldr	r3, [pc, #92]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6d5c:	4798      	blx	r3
   a6d5e:	4603      	mov	r3, r0
   a6d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a6d64:	e01b      	b.n	a6d9e <Cl_Standby_Controller+0x8ea>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a6d66:	2316      	movs	r3, #22
   a6d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6d6c:	2323      	movs	r3, #35	; 0x23
   a6d6e:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6d72:	f107 0320 	add.w	r3, r7, #32
   a6d76:	3301      	adds	r3, #1
   a6d78:	4619      	mov	r1, r3
   a6d7a:	2001      	movs	r0, #1
   a6d7c:	4b0d      	ldr	r3, [pc, #52]	; (a6db4 <Cl_Standby_Controller+0x900>)
   a6d7e:	4798      	blx	r3
   a6d80:	4603      	mov	r3, r0
   a6d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6d86:	f107 0120 	add.w	r1, r7, #32
   a6d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6d8e:	2202      	movs	r2, #2
   a6d90:	4618      	mov	r0, r3
   a6d92:	4b09      	ldr	r3, [pc, #36]	; (a6db8 <Cl_Standby_Controller+0x904>)
   a6d94:	4798      	blx	r3
   a6d96:	4603      	mov	r3, r0
   a6d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a6d9c:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a6d9e:	e001      	b.n	a6da4 <Cl_Standby_Controller+0x8f0>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a6da0:	bf00      	nop
   a6da2:	e05d      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
										break;
										default:
										break;
									}
								}
							break;
   a6da4:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a6da6:	e05b      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
   a6da8:	20071bcc 	.word	0x20071bcc
   a6dac:	000a7205 	.word	0x000a7205
   a6db0:	20072350 	.word	0x20072350
   a6db4:	0009b701 	.word	0x0009b701
   a6db8:	0009cbd5 	.word	0x0009cbd5
   a6dbc:	000a710d 	.word	0x000a710d
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   a6dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a6dc4:	2b0a      	cmp	r3, #10
   a6dc6:	d002      	beq.n	a6dce <Cl_Standby_Controller+0x91a>
   a6dc8:	2b0d      	cmp	r3, #13
   a6dca:	d044      	beq.n	a6e56 <Cl_Standby_Controller+0x9a2>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a6dcc:	e046      	b.n	a6e5c <Cl_Standby_Controller+0x9a8>
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a6dce:	4b27      	ldr	r3, [pc, #156]	; (a6e6c <Cl_Standby_Controller+0x9b8>)
   a6dd0:	7e1b      	ldrb	r3, [r3, #24]
   a6dd2:	2b00      	cmp	r3, #0
   a6dd4:	d041      	beq.n	a6e5a <Cl_Standby_Controller+0x9a6>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a6dd6:	4b25      	ldr	r3, [pc, #148]	; (a6e6c <Cl_Standby_Controller+0x9b8>)
   a6dd8:	791b      	ldrb	r3, [r3, #4]
   a6dda:	2b01      	cmp	r3, #1
   a6ddc:	d002      	beq.n	a6de4 <Cl_Standby_Controller+0x930>
   a6dde:	2b21      	cmp	r3, #33	; 0x21
   a6de0:	d01c      	beq.n	a6e1c <Cl_Standby_Controller+0x968>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a6de2:	e037      	b.n	a6e54 <Cl_Standby_Controller+0x9a0>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a6de4:	2316      	movs	r3, #22
   a6de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a6dea:	2301      	movs	r3, #1
   a6dec:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6df0:	f107 0320 	add.w	r3, r7, #32
   a6df4:	3301      	adds	r3, #1
   a6df6:	4619      	mov	r1, r3
   a6df8:	2001      	movs	r0, #1
   a6dfa:	4b1d      	ldr	r3, [pc, #116]	; (a6e70 <Cl_Standby_Controller+0x9bc>)
   a6dfc:	4798      	blx	r3
   a6dfe:	4603      	mov	r3, r0
   a6e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6e04:	f107 0120 	add.w	r1, r7, #32
   a6e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6e0c:	2202      	movs	r2, #2
   a6e0e:	4618      	mov	r0, r3
   a6e10:	4b18      	ldr	r3, [pc, #96]	; (a6e74 <Cl_Standby_Controller+0x9c0>)
   a6e12:	4798      	blx	r3
   a6e14:	4603      	mov	r3, r0
   a6e16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a6e1a:	e01b      	b.n	a6e54 <Cl_Standby_Controller+0x9a0>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a6e1c:	2316      	movs	r3, #22
   a6e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a6e22:	2323      	movs	r3, #35	; 0x23
   a6e24:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a6e28:	f107 0320 	add.w	r3, r7, #32
   a6e2c:	3301      	adds	r3, #1
   a6e2e:	4619      	mov	r1, r3
   a6e30:	2001      	movs	r0, #1
   a6e32:	4b0f      	ldr	r3, [pc, #60]	; (a6e70 <Cl_Standby_Controller+0x9bc>)
   a6e34:	4798      	blx	r3
   a6e36:	4603      	mov	r3, r0
   a6e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a6e3c:	f107 0120 	add.w	r1, r7, #32
   a6e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a6e44:	2202      	movs	r2, #2
   a6e46:	4618      	mov	r0, r3
   a6e48:	4b0a      	ldr	r3, [pc, #40]	; (a6e74 <Cl_Standby_Controller+0x9c0>)
   a6e4a:	4798      	blx	r3
   a6e4c:	4603      	mov	r3, r0
   a6e4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a6e52:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a6e54:	e001      	b.n	a6e5a <Cl_Standby_Controller+0x9a6>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a6e56:	bf00      	nop
   a6e58:	e002      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
										break;
										default:
										break;
									}
								}
							break;
   a6e5a:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a6e5c:	e000      	b.n	a6e60 <Cl_Standby_Controller+0x9ac>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   a6e5e:	bf00      	nop
		}

	
return CL_OK;
   a6e60:	2300      	movs	r3, #0
}
   a6e62:	4618      	mov	r0, r3
   a6e64:	3728      	adds	r7, #40	; 0x28
   a6e66:	46bd      	mov	sp, r7
   a6e68:	bd80      	pop	{r7, pc}
   a6e6a:	bf00      	nop
   a6e6c:	20072350 	.word	0x20072350
   a6e70:	0009b701 	.word	0x0009b701
   a6e74:	0009cbd5 	.word	0x0009cbd5

000a6e78 <cl_stby_translatemacevent>:



Cl_ReturnCodeType  cl_stby_translatemacevent(Cl_Mac_EventsType Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   a6e78:	b480      	push	{r7}
   a6e7a:	b083      	sub	sp, #12
   a6e7c:	af00      	add	r7, sp, #0
   a6e7e:	4603      	mov	r3, r0
   a6e80:	6039      	str	r1, [r7, #0]
   a6e82:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   a6e84:	683b      	ldr	r3, [r7, #0]
   a6e86:	2200      	movs	r2, #0
   a6e88:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   a6e8a:	79fb      	ldrb	r3, [r7, #7]
   a6e8c:	3b07      	subs	r3, #7
   a6e8e:	2b55      	cmp	r3, #85	; 0x55
   a6e90:	f200 80ec 	bhi.w	a706c <cl_stby_translatemacevent+0x1f4>
   a6e94:	a201      	add	r2, pc, #4	; (adr r2, a6e9c <cl_stby_translatemacevent+0x24>)
   a6e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a6e9a:	bf00      	nop
   a6e9c:	000a7025 	.word	0x000a7025
   a6ea0:	000a706d 	.word	0x000a706d
   a6ea4:	000a702d 	.word	0x000a702d
   a6ea8:	000a7035 	.word	0x000a7035
   a6eac:	000a703d 	.word	0x000a703d
   a6eb0:	000a7045 	.word	0x000a7045
   a6eb4:	000a706d 	.word	0x000a706d
   a6eb8:	000a701d 	.word	0x000a701d
   a6ebc:	000a706d 	.word	0x000a706d
   a6ec0:	000a704d 	.word	0x000a704d
   a6ec4:	000a706d 	.word	0x000a706d
   a6ec8:	000a706d 	.word	0x000a706d
   a6ecc:	000a706d 	.word	0x000a706d
   a6ed0:	000a706d 	.word	0x000a706d
   a6ed4:	000a706d 	.word	0x000a706d
   a6ed8:	000a706d 	.word	0x000a706d
   a6edc:	000a706d 	.word	0x000a706d
   a6ee0:	000a706d 	.word	0x000a706d
   a6ee4:	000a706d 	.word	0x000a706d
   a6ee8:	000a706d 	.word	0x000a706d
   a6eec:	000a706d 	.word	0x000a706d
   a6ef0:	000a706d 	.word	0x000a706d
   a6ef4:	000a706d 	.word	0x000a706d
   a6ef8:	000a706d 	.word	0x000a706d
   a6efc:	000a706d 	.word	0x000a706d
   a6f00:	000a706d 	.word	0x000a706d
   a6f04:	000a706d 	.word	0x000a706d
   a6f08:	000a706d 	.word	0x000a706d
   a6f0c:	000a706d 	.word	0x000a706d
   a6f10:	000a706d 	.word	0x000a706d
   a6f14:	000a706d 	.word	0x000a706d
   a6f18:	000a706d 	.word	0x000a706d
   a6f1c:	000a706d 	.word	0x000a706d
   a6f20:	000a706d 	.word	0x000a706d
   a6f24:	000a7055 	.word	0x000a7055
   a6f28:	000a706d 	.word	0x000a706d
   a6f2c:	000a6ff5 	.word	0x000a6ff5
   a6f30:	000a706d 	.word	0x000a706d
   a6f34:	000a706d 	.word	0x000a706d
   a6f38:	000a7015 	.word	0x000a7015
   a6f3c:	000a706d 	.word	0x000a706d
   a6f40:	000a706d 	.word	0x000a706d
   a6f44:	000a706d 	.word	0x000a706d
   a6f48:	000a706d 	.word	0x000a706d
   a6f4c:	000a706d 	.word	0x000a706d
   a6f50:	000a706d 	.word	0x000a706d
   a6f54:	000a706d 	.word	0x000a706d
   a6f58:	000a706d 	.word	0x000a706d
   a6f5c:	000a706d 	.word	0x000a706d
   a6f60:	000a706d 	.word	0x000a706d
   a6f64:	000a6ffd 	.word	0x000a6ffd
   a6f68:	000a706d 	.word	0x000a706d
   a6f6c:	000a7005 	.word	0x000a7005
   a6f70:	000a700d 	.word	0x000a700d
   a6f74:	000a706d 	.word	0x000a706d
   a6f78:	000a706d 	.word	0x000a706d
   a6f7c:	000a706d 	.word	0x000a706d
   a6f80:	000a706d 	.word	0x000a706d
   a6f84:	000a706d 	.word	0x000a706d
   a6f88:	000a706d 	.word	0x000a706d
   a6f8c:	000a706d 	.word	0x000a706d
   a6f90:	000a706d 	.word	0x000a706d
   a6f94:	000a706d 	.word	0x000a706d
   a6f98:	000a706d 	.word	0x000a706d
   a6f9c:	000a706d 	.word	0x000a706d
   a6fa0:	000a706d 	.word	0x000a706d
   a6fa4:	000a706d 	.word	0x000a706d
   a6fa8:	000a706d 	.word	0x000a706d
   a6fac:	000a706d 	.word	0x000a706d
   a6fb0:	000a706d 	.word	0x000a706d
   a6fb4:	000a706d 	.word	0x000a706d
   a6fb8:	000a706d 	.word	0x000a706d
   a6fbc:	000a706d 	.word	0x000a706d
   a6fc0:	000a706d 	.word	0x000a706d
   a6fc4:	000a706d 	.word	0x000a706d
   a6fc8:	000a706d 	.word	0x000a706d
   a6fcc:	000a706d 	.word	0x000a706d
   a6fd0:	000a706d 	.word	0x000a706d
   a6fd4:	000a706d 	.word	0x000a706d
   a6fd8:	000a706d 	.word	0x000a706d
   a6fdc:	000a706d 	.word	0x000a706d
   a6fe0:	000a706d 	.word	0x000a706d
   a6fe4:	000a706d 	.word	0x000a706d
   a6fe8:	000a706d 	.word	0x000a706d
   a6fec:	000a705d 	.word	0x000a705d
   a6ff0:	000a7065 	.word	0x000a7065
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   a6ff4:	683b      	ldr	r3, [r7, #0]
   a6ff6:	2201      	movs	r2, #1
   a6ff8:	701a      	strb	r2, [r3, #0]
		break;
   a6ffa:	e038      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   a6ffc:	683b      	ldr	r3, [r7, #0]
   a6ffe:	2204      	movs	r2, #4
   a7000:	701a      	strb	r2, [r3, #0]
		break;
   a7002:	e034      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   a7004:	683b      	ldr	r3, [r7, #0]
   a7006:	2206      	movs	r2, #6
   a7008:	701a      	strb	r2, [r3, #0]
		break;
   a700a:	e030      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   a700c:	683b      	ldr	r3, [r7, #0]
   a700e:	2207      	movs	r2, #7
   a7010:	701a      	strb	r2, [r3, #0]
		break;
   a7012:	e02c      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   a7014:	683b      	ldr	r3, [r7, #0]
   a7016:	2209      	movs	r2, #9
   a7018:	701a      	strb	r2, [r3, #0]
		break;
   a701a:	e028      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   a701c:	683b      	ldr	r3, [r7, #0]
   a701e:	220a      	movs	r2, #10
   a7020:	701a      	strb	r2, [r3, #0]
		break;
   a7022:	e024      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   a7024:	683b      	ldr	r3, [r7, #0]
   a7026:	220c      	movs	r2, #12
   a7028:	701a      	strb	r2, [r3, #0]
		break;
   a702a:	e020      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   a702c:	683b      	ldr	r3, [r7, #0]
   a702e:	220d      	movs	r2, #13
   a7030:	701a      	strb	r2, [r3, #0]
		break; 
   a7032:	e01c      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_ON;
   a7034:	683b      	ldr	r3, [r7, #0]
   a7036:	220e      	movs	r2, #14
   a7038:	701a      	strb	r2, [r3, #0]
		break;
   a703a:	e018      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_OFF;
   a703c:	683b      	ldr	r3, [r7, #0]
   a703e:	220f      	movs	r2, #15
   a7040:	701a      	strb	r2, [r3, #0]
		break;
   a7042:	e014      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a7044:	683b      	ldr	r3, [r7, #0]
   a7046:	2210      	movs	r2, #16
   a7048:	701a      	strb	r2, [r3, #0]
		break;
   a704a:	e010      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		
		case EVENT_STBY__SET_BP_RATE:
			*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a704c:	683b      	ldr	r3, [r7, #0]
   a704e:	2210      	movs	r2, #16
   a7050:	701a      	strb	r2, [r3, #0]
		break;
   a7052:	e00c      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
			*cl_stdby_event = EVENT_STBY_CLR_ALARM ;
   a7054:	683b      	ldr	r3, [r7, #0]
   a7056:	2211      	movs	r2, #17
   a7058:	701a      	strb	r2, [r3, #0]
		break;
   a705a:	e008      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a705c:	683b      	ldr	r3, [r7, #0]
   a705e:	225b      	movs	r2, #91	; 0x5b
   a7060:	701a      	strb	r2, [r3, #0]
		break;
   a7062:	e004      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a7064:	683b      	ldr	r3, [r7, #0]
   a7066:	225c      	movs	r2, #92	; 0x5c
   a7068:	701a      	strb	r2, [r3, #0]
		break;
   a706a:	e000      	b.n	a706e <cl_stby_translatemacevent+0x1f6>
		default:
		break;
   a706c:	bf00      	nop
	}
	return CL_OK;
   a706e:	2300      	movs	r3, #0
}
   a7070:	4618      	mov	r0, r3
   a7072:	370c      	adds	r7, #12
   a7074:	46bd      	mov	sp, r7
   a7076:	bc80      	pop	{r7}
   a7078:	4770      	bx	lr
   a707a:	bf00      	nop

000a707c <Cl_stby_init>:

 Cl_ReturnCodeType Cl_stby_init(void)
 {
   a707c:	b580      	push	{r7, lr}
   a707e:	b082      	sub	sp, #8
   a7080:	af00      	add	r7, sp, #0
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a7082:	2304      	movs	r3, #4
   a7084:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a7086:	2301      	movs	r3, #1
   a7088:	80fb      	strh	r3, [r7, #6]
   a708a:	e00a      	b.n	a70a2 <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   a708c:	88fb      	ldrh	r3, [r7, #6]
   a708e:	b2db      	uxtb	r3, r3
   a7090:	4618      	mov	r0, r3
   a7092:	4b19      	ldr	r3, [pc, #100]	; (a70f8 <Cl_stby_init+0x7c>)
   a7094:	4798      	blx	r3
				cl_wait(10);
   a7096:	200a      	movs	r0, #10
   a7098:	4b18      	ldr	r3, [pc, #96]	; (a70fc <Cl_stby_init+0x80>)
   a709a:	4798      	blx	r3
 {
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a709c:	88fb      	ldrh	r3, [r7, #6]
   a709e:	3301      	adds	r3, #1
   a70a0:	80fb      	strh	r3, [r7, #6]
   a70a2:	88fb      	ldrh	r3, [r7, #6]
   a70a4:	2b14      	cmp	r3, #20
   a70a6:	d9f1      	bls.n	a708c <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   a70a8:	2001      	movs	r0, #1
   a70aa:	4b15      	ldr	r3, [pc, #84]	; (a7100 <Cl_stby_init+0x84>)
   a70ac:	4798      	blx	r3
   a70ae:	4603      	mov	r3, r0
   a70b0:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   a70b2:	2002      	movs	r0, #2
   a70b4:	4b12      	ldr	r3, [pc, #72]	; (a7100 <Cl_stby_init+0x84>)
   a70b6:	4798      	blx	r3
   a70b8:	4603      	mov	r3, r0
   a70ba:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   a70bc:	2004      	movs	r0, #4
   a70be:	4b10      	ldr	r3, [pc, #64]	; (a7100 <Cl_stby_init+0x84>)
   a70c0:	4798      	blx	r3
   a70c2:	4603      	mov	r3, r0
   a70c4:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   a70c6:	2005      	movs	r0, #5
   a70c8:	4b0d      	ldr	r3, [pc, #52]	; (a7100 <Cl_stby_init+0x84>)
   a70ca:	4798      	blx	r3
   a70cc:	4603      	mov	r3, r0
   a70ce:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   a70d0:	2006      	movs	r0, #6
   a70d2:	4b0b      	ldr	r3, [pc, #44]	; (a7100 <Cl_stby_init+0x84>)
   a70d4:	4798      	blx	r3
   a70d6:	4603      	mov	r3, r0
   a70d8:	717b      	strb	r3, [r7, #5]
	//	cl_stby_retval =  sv_cntrl_poweroffheater();

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   a70da:	20e1      	movs	r0, #225	; 0xe1
   a70dc:	4b09      	ldr	r3, [pc, #36]	; (a7104 <Cl_stby_init+0x88>)
   a70de:	4798      	blx	r3
   a70e0:	4603      	mov	r3, r0
   a70e2:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   a70e4:	2000      	movs	r0, #0
   a70e6:	4b08      	ldr	r3, [pc, #32]	; (a7108 <Cl_stby_init+0x8c>)
   a70e8:	4798      	blx	r3
   a70ea:	4603      	mov	r3, r0
   a70ec:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   a70ee:	2300      	movs	r3, #0
 }
   a70f0:	4618      	mov	r0, r3
   a70f2:	3708      	adds	r7, #8
   a70f4:	46bd      	mov	sp, r7
   a70f6:	bd80      	pop	{r7, pc}
   a70f8:	0009ae01 	.word	0x0009ae01
   a70fc:	00093ea9 	.word	0x00093ea9
   a7100:	0009ad7d 	.word	0x0009ad7d
   a7104:	0009b2c1 	.word	0x0009b2c1
   a7108:	000905f1 	.word	0x000905f1

000a710c <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodeType Cl_StabyRinse_UpdateTimeInfo(void)
 {
   a710c:	b580      	push	{r7, lr}
   a710e:	b084      	sub	sp, #16
   a7110:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a7112:	2304      	movs	r3, #4
   a7114:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a7116:	2359      	movs	r3, #89	; 0x59
   a7118:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a711a:	1d3b      	adds	r3, r7, #4
   a711c:	2200      	movs	r2, #0
   a711e:	601a      	str	r2, [r3, #0]
   a7120:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a7124:	230a      	movs	r3, #10
   a7126:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (Cl_Uint8Type)STANDBY_DATA;
   a7128:	2300      	movs	r3, #0
   a712a:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_StbRinseTotalhourscounter; 
   a712c:	4b16      	ldr	r3, [pc, #88]	; (a7188 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a712e:	681b      	ldr	r3, [r3, #0]
   a7130:	b2db      	uxtb	r3, r3
   a7132:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)Cl_StbRinseTotalMinutescounter;
   a7134:	4b15      	ldr	r3, [pc, #84]	; (a718c <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a7136:	681b      	ldr	r3, [r3, #0]
   a7138:	b2db      	uxtb	r3, r3
   a713a:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)Cl_StbRinsesecondscounter;
   a713c:	4b14      	ldr	r3, [pc, #80]	; (a7190 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a713e:	681b      	ldr	r3, [r3, #0]
   a7140:	b2db      	uxtb	r3, r3
   a7142:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   a7144:	4b10      	ldr	r3, [pc, #64]	; (a7188 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a7146:	681b      	ldr	r3, [r3, #0]
   a7148:	b2db      	uxtb	r3, r3
   a714a:	425b      	negs	r3, r3
   a714c:	b2db      	uxtb	r3, r3
   a714e:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   a7150:	4b0e      	ldr	r3, [pc, #56]	; (a718c <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a7152:	681b      	ldr	r3, [r3, #0]
   a7154:	b2db      	uxtb	r3, r3
   a7156:	f1c3 0308 	rsb	r3, r3, #8
   a715a:	b2db      	uxtb	r3, r3
   a715c:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - Cl_StbRinsesecondscounter );
   a715e:	4b0c      	ldr	r3, [pc, #48]	; (a7190 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a7160:	681b      	ldr	r3, [r3, #0]
   a7162:	b2db      	uxtb	r3, r3
   a7164:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a7168:	b2db      	uxtb	r3, r3
   a716a:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   a716c:	1d39      	adds	r1, r7, #4
   a716e:	7bbb      	ldrb	r3, [r7, #14]
   a7170:	2207      	movs	r2, #7
   a7172:	4618      	mov	r0, r3
   a7174:	4b07      	ldr	r3, [pc, #28]	; (a7194 <Cl_StabyRinse_UpdateTimeInfo+0x88>)
   a7176:	4798      	blx	r3
   a7178:	4603      	mov	r3, r0
   a717a:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   a717c:	2300      	movs	r3, #0
	
 }
   a717e:	4618      	mov	r0, r3
   a7180:	3710      	adds	r7, #16
   a7182:	46bd      	mov	sp, r7
   a7184:	bd80      	pop	{r7, pc}
   a7186:	bf00      	nop
   a7188:	20071bd4 	.word	0x20071bd4
   a718c:	20071bd0 	.word	0x20071bd0
   a7190:	20071bcc 	.word	0x20071bcc
   a7194:	0009cbd5 	.word	0x0009cbd5

000a7198 <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodeType Cl_standby_ProcessAlarms( void)
{
   a7198:	b580      	push	{r7, lr}
   a719a:	b082      	sub	sp, #8
   a719c:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a719e:	2300      	movs	r3, #0
   a71a0:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount = 0;
   a71a2:	2300      	movs	r3, #0
   a71a4:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a71a6:	2359      	movs	r3, #89	; 0x59
   a71a8:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a71aa:	2300      	movs	r3, #0
   a71ac:	71fb      	strb	r3, [r7, #7]
   a71ae:	e01c      	b.n	a71ea <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a71b0:	79fa      	ldrb	r2, [r7, #7]
   a71b2:	4912      	ldr	r1, [pc, #72]	; (a71fc <Cl_standby_ProcessAlarms+0x64>)
   a71b4:	4613      	mov	r3, r2
   a71b6:	00db      	lsls	r3, r3, #3
   a71b8:	4413      	add	r3, r2
   a71ba:	440b      	add	r3, r1
   a71bc:	7818      	ldrb	r0, [r3, #0]
   a71be:	79fa      	ldrb	r2, [r7, #7]
   a71c0:	4613      	mov	r3, r2
   a71c2:	00db      	lsls	r3, r3, #3
   a71c4:	4413      	add	r3, r2
   a71c6:	4a0d      	ldr	r2, [pc, #52]	; (a71fc <Cl_standby_ProcessAlarms+0x64>)
   a71c8:	4413      	add	r3, r2
   a71ca:	3304      	adds	r3, #4
   a71cc:	4619      	mov	r1, r3
   a71ce:	4b0c      	ldr	r3, [pc, #48]	; (a7200 <Cl_standby_ProcessAlarms+0x68>)
   a71d0:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a71d2:	79fa      	ldrb	r2, [r7, #7]
   a71d4:	4909      	ldr	r1, [pc, #36]	; (a71fc <Cl_standby_ProcessAlarms+0x64>)
   a71d6:	4613      	mov	r3, r2
   a71d8:	00db      	lsls	r3, r3, #3
   a71da:	4413      	add	r3, r2
   a71dc:	440b      	add	r3, r1
   a71de:	3304      	adds	r3, #4
   a71e0:	781b      	ldrb	r3, [r3, #0]
   a71e2:	2b00      	cmp	r3, #0
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a71e4:	79fb      	ldrb	r3, [r7, #7]
   a71e6:	3301      	adds	r3, #1
   a71e8:	71fb      	strb	r3, [r7, #7]
   a71ea:	79fb      	ldrb	r3, [r7, #7]
   a71ec:	2b03      	cmp	r3, #3
   a71ee:	d9df      	bls.n	a71b0 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   a71f0:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   a71f2:	4618      	mov	r0, r3
   a71f4:	3708      	adds	r7, #8
   a71f6:	46bd      	mov	sp, r7
   a71f8:	bd80      	pop	{r7, pc}
   a71fa:	bf00      	nop
   a71fc:	20070d40 	.word	0x20070d40
   a7200:	00082bc1 	.word	0x00082bc1

000a7204 <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   a7204:	b580      	push	{r7, lr}
   a7206:	b084      	sub	sp, #16
   a7208:	af00      	add	r7, sp, #0
   a720a:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a720c:	2300      	movs	r3, #0
   a720e:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
   a7210:	2300      	movs	r3, #0
   a7212:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a7214:	2359      	movs	r3, #89	; 0x59
   a7216:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a7218:	2300      	movs	r3, #0
   a721a:	73bb      	strb	r3, [r7, #14]
   a721c:	e0bc      	b.n	a7398 <Cl_standby_UpdateAlarmTable+0x194>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a721e:	7bba      	ldrb	r2, [r7, #14]
   a7220:	4962      	ldr	r1, [pc, #392]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7222:	4613      	mov	r3, r2
   a7224:	00db      	lsls	r3, r3, #3
   a7226:	4413      	add	r3, r2
   a7228:	440b      	add	r3, r1
   a722a:	7818      	ldrb	r0, [r3, #0]
   a722c:	7bba      	ldrb	r2, [r7, #14]
   a722e:	4613      	mov	r3, r2
   a7230:	00db      	lsls	r3, r3, #3
   a7232:	4413      	add	r3, r2
   a7234:	4a5d      	ldr	r2, [pc, #372]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7236:	4413      	add	r3, r2
   a7238:	3304      	adds	r3, #4
   a723a:	4619      	mov	r1, r3
   a723c:	4b5c      	ldr	r3, [pc, #368]	; (a73b0 <Cl_standby_UpdateAlarmTable+0x1ac>)
   a723e:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a7240:	7bba      	ldrb	r2, [r7, #14]
   a7242:	495a      	ldr	r1, [pc, #360]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7244:	4613      	mov	r3, r2
   a7246:	00db      	lsls	r3, r3, #3
   a7248:	4413      	add	r3, r2
   a724a:	440b      	add	r3, r1
   a724c:	3304      	adds	r3, #4
   a724e:	781b      	ldrb	r3, [r3, #0]
   a7250:	2b00      	cmp	r3, #0
   a7252:	d076      	beq.n	a7342 <Cl_standby_UpdateAlarmTable+0x13e>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   a7254:	7bba      	ldrb	r2, [r7, #14]
   a7256:	4955      	ldr	r1, [pc, #340]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7258:	4613      	mov	r3, r2
   a725a:	00db      	lsls	r3, r3, #3
   a725c:	4413      	add	r3, r2
   a725e:	440b      	add	r3, r1
   a7260:	3305      	adds	r3, #5
   a7262:	781b      	ldrb	r3, [r3, #0]
   a7264:	f083 0301 	eor.w	r3, r3, #1
   a7268:	b2db      	uxtb	r3, r3
   a726a:	2b00      	cmp	r3, #0
   a726c:	d01e      	beq.n	a72ac <Cl_standby_UpdateAlarmTable+0xa8>
				{
					data[0] = (Cl_Uint8Type)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   a726e:	7bba      	ldrb	r2, [r7, #14]
   a7270:	494e      	ldr	r1, [pc, #312]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7272:	4613      	mov	r3, r2
   a7274:	00db      	lsls	r3, r3, #3
   a7276:	4413      	add	r3, r2
   a7278:	440b      	add	r3, r1
   a727a:	781b      	ldrb	r3, [r3, #0]
   a727c:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   a727e:	2301      	movs	r3, #1
   a7280:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   a7282:	2307      	movs	r3, #7
   a7284:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a7286:	f107 0108 	add.w	r1, r7, #8
   a728a:	7b7b      	ldrb	r3, [r7, #13]
   a728c:	2202      	movs	r2, #2
   a728e:	4618      	mov	r0, r3
   a7290:	4b48      	ldr	r3, [pc, #288]	; (a73b4 <Cl_standby_UpdateAlarmTable+0x1b0>)
   a7292:	4798      	blx	r3
   a7294:	4603      	mov	r3, r0
   a7296:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   a7298:	7bba      	ldrb	r2, [r7, #14]
   a729a:	4944      	ldr	r1, [pc, #272]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a729c:	4613      	mov	r3, r2
   a729e:	00db      	lsls	r3, r3, #3
   a72a0:	4413      	add	r3, r2
   a72a2:	440b      	add	r3, r1
   a72a4:	3305      	adds	r3, #5
   a72a6:	2201      	movs	r2, #1
   a72a8:	701a      	strb	r2, [r3, #0]
   a72aa:	e072      	b.n	a7392 <Cl_standby_UpdateAlarmTable+0x18e>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   a72ac:	7bba      	ldrb	r2, [r7, #14]
   a72ae:	493f      	ldr	r1, [pc, #252]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a72b0:	4613      	mov	r3, r2
   a72b2:	00db      	lsls	r3, r3, #3
   a72b4:	4413      	add	r3, r2
   a72b6:	440b      	add	r3, r1
   a72b8:	3301      	adds	r3, #1
   a72ba:	781b      	ldrb	r3, [r3, #0]
   a72bc:	3301      	adds	r3, #1
   a72be:	b2d8      	uxtb	r0, r3
   a72c0:	493a      	ldr	r1, [pc, #232]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a72c2:	4613      	mov	r3, r2
   a72c4:	00db      	lsls	r3, r3, #3
   a72c6:	4413      	add	r3, r2
   a72c8:	440b      	add	r3, r1
   a72ca:	3301      	adds	r3, #1
   a72cc:	4602      	mov	r2, r0
   a72ce:	701a      	strb	r2, [r3, #0]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   a72d0:	7bba      	ldrb	r2, [r7, #14]
   a72d2:	4936      	ldr	r1, [pc, #216]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a72d4:	4613      	mov	r3, r2
   a72d6:	00db      	lsls	r3, r3, #3
   a72d8:	4413      	add	r3, r2
   a72da:	440b      	add	r3, r1
   a72dc:	3303      	adds	r3, #3
   a72de:	781b      	ldrb	r3, [r3, #0]
   a72e0:	3301      	adds	r3, #1
   a72e2:	b2d8      	uxtb	r0, r3
   a72e4:	4931      	ldr	r1, [pc, #196]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a72e6:	4613      	mov	r3, r2
   a72e8:	00db      	lsls	r3, r3, #3
   a72ea:	4413      	add	r3, r2
   a72ec:	440b      	add	r3, r1
   a72ee:	3303      	adds	r3, #3
   a72f0:	4602      	mov	r2, r0
   a72f2:	701a      	strb	r2, [r3, #0]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   a72f4:	7bba      	ldrb	r2, [r7, #14]
   a72f6:	492d      	ldr	r1, [pc, #180]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a72f8:	4613      	mov	r3, r2
   a72fa:	00db      	lsls	r3, r3, #3
   a72fc:	4413      	add	r3, r2
   a72fe:	440b      	add	r3, r1
   a7300:	3301      	adds	r3, #1
   a7302:	781b      	ldrb	r3, [r3, #0]
   a7304:	2b05      	cmp	r3, #5
   a7306:	d908      	bls.n	a731a <Cl_standby_UpdateAlarmTable+0x116>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   a7308:	7bba      	ldrb	r2, [r7, #14]
   a730a:	4928      	ldr	r1, [pc, #160]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a730c:	4613      	mov	r3, r2
   a730e:	00db      	lsls	r3, r3, #3
   a7310:	4413      	add	r3, r2
   a7312:	440b      	add	r3, r1
   a7314:	3303      	adds	r3, #3
   a7316:	2200      	movs	r2, #0
   a7318:	701a      	strb	r2, [r3, #0]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   a731a:	7bba      	ldrb	r2, [r7, #14]
   a731c:	4923      	ldr	r1, [pc, #140]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a731e:	4613      	mov	r3, r2
   a7320:	00db      	lsls	r3, r3, #3
   a7322:	4413      	add	r3, r2
   a7324:	440b      	add	r3, r1
   a7326:	3301      	adds	r3, #1
   a7328:	781b      	ldrb	r3, [r3, #0]
   a732a:	2b3b      	cmp	r3, #59	; 0x3b
   a732c:	d931      	bls.n	a7392 <Cl_standby_UpdateAlarmTable+0x18e>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   a732e:	7bba      	ldrb	r2, [r7, #14]
   a7330:	491e      	ldr	r1, [pc, #120]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7332:	4613      	mov	r3, r2
   a7334:	00db      	lsls	r3, r3, #3
   a7336:	4413      	add	r3, r2
   a7338:	440b      	add	r3, r1
   a733a:	3301      	adds	r3, #1
   a733c:	2200      	movs	r2, #0
   a733e:	701a      	strb	r2, [r3, #0]
   a7340:	e027      	b.n	a7392 <Cl_standby_UpdateAlarmTable+0x18e>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   a7342:	7bba      	ldrb	r2, [r7, #14]
   a7344:	4919      	ldr	r1, [pc, #100]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7346:	4613      	mov	r3, r2
   a7348:	00db      	lsls	r3, r3, #3
   a734a:	4413      	add	r3, r2
   a734c:	440b      	add	r3, r1
   a734e:	3305      	adds	r3, #5
   a7350:	781b      	ldrb	r3, [r3, #0]
   a7352:	2b00      	cmp	r3, #0
   a7354:	d01d      	beq.n	a7392 <Cl_standby_UpdateAlarmTable+0x18e>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   a7356:	7bba      	ldrb	r2, [r7, #14]
   a7358:	4914      	ldr	r1, [pc, #80]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a735a:	4613      	mov	r3, r2
   a735c:	00db      	lsls	r3, r3, #3
   a735e:	4413      	add	r3, r2
   a7360:	440b      	add	r3, r1
   a7362:	3305      	adds	r3, #5
   a7364:	2200      	movs	r2, #0
   a7366:	701a      	strb	r2, [r3, #0]
				command = CON_TX_COMMAND_ALARM;
   a7368:	2307      	movs	r3, #7
   a736a:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   a736c:	7bba      	ldrb	r2, [r7, #14]
   a736e:	490f      	ldr	r1, [pc, #60]	; (a73ac <Cl_standby_UpdateAlarmTable+0x1a8>)
   a7370:	4613      	mov	r3, r2
   a7372:	00db      	lsls	r3, r3, #3
   a7374:	4413      	add	r3, r2
   a7376:	440b      	add	r3, r1
   a7378:	781b      	ldrb	r3, [r3, #0]
   a737a:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   a737c:	2300      	movs	r3, #0
   a737e:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a7380:	f107 0108 	add.w	r1, r7, #8
   a7384:	7b7b      	ldrb	r3, [r7, #13]
   a7386:	2202      	movs	r2, #2
   a7388:	4618      	mov	r0, r3
   a738a:	4b0a      	ldr	r3, [pc, #40]	; (a73b4 <Cl_standby_UpdateAlarmTable+0x1b0>)
   a738c:	4798      	blx	r3
   a738e:	4603      	mov	r3, r0
   a7390:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a7392:	7bbb      	ldrb	r3, [r7, #14]
   a7394:	3301      	adds	r3, #1
   a7396:	73bb      	strb	r3, [r7, #14]
   a7398:	7bbb      	ldrb	r3, [r7, #14]
   a739a:	2b03      	cmp	r3, #3
   a739c:	f67f af3f 	bls.w	a721e <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   a73a0:	7bfb      	ldrb	r3, [r7, #15]
}
   a73a2:	4618      	mov	r0, r3
   a73a4:	3710      	adds	r7, #16
   a73a6:	46bd      	mov	sp, r7
   a73a8:	bd80      	pop	{r7, pc}
   a73aa:	bf00      	nop
   a73ac:	20070d40 	.word	0x20070d40
   a73b0:	00082bc1 	.word	0x00082bc1
   a73b4:	0009cbd5 	.word	0x0009cbd5

000a73b8 <__aeabi_drsub>:
   a73b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a73bc:	e002      	b.n	a73c4 <__adddf3>
   a73be:	bf00      	nop

000a73c0 <__aeabi_dsub>:
   a73c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a73c4 <__adddf3>:
   a73c4:	b530      	push	{r4, r5, lr}
   a73c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a73ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a73ce:	ea94 0f05 	teq	r4, r5
   a73d2:	bf08      	it	eq
   a73d4:	ea90 0f02 	teqeq	r0, r2
   a73d8:	bf1f      	itttt	ne
   a73da:	ea54 0c00 	orrsne.w	ip, r4, r0
   a73de:	ea55 0c02 	orrsne.w	ip, r5, r2
   a73e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a73e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a73ea:	f000 80e2 	beq.w	a75b2 <__adddf3+0x1ee>
   a73ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a73f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a73f6:	bfb8      	it	lt
   a73f8:	426d      	neglt	r5, r5
   a73fa:	dd0c      	ble.n	a7416 <__adddf3+0x52>
   a73fc:	442c      	add	r4, r5
   a73fe:	ea80 0202 	eor.w	r2, r0, r2
   a7402:	ea81 0303 	eor.w	r3, r1, r3
   a7406:	ea82 0000 	eor.w	r0, r2, r0
   a740a:	ea83 0101 	eor.w	r1, r3, r1
   a740e:	ea80 0202 	eor.w	r2, r0, r2
   a7412:	ea81 0303 	eor.w	r3, r1, r3
   a7416:	2d36      	cmp	r5, #54	; 0x36
   a7418:	bf88      	it	hi
   a741a:	bd30      	pophi	{r4, r5, pc}
   a741c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a7420:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a7424:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a7428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a742c:	d002      	beq.n	a7434 <__adddf3+0x70>
   a742e:	4240      	negs	r0, r0
   a7430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a7434:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a7438:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a743c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a7440:	d002      	beq.n	a7448 <__adddf3+0x84>
   a7442:	4252      	negs	r2, r2
   a7444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a7448:	ea94 0f05 	teq	r4, r5
   a744c:	f000 80a7 	beq.w	a759e <__adddf3+0x1da>
   a7450:	f1a4 0401 	sub.w	r4, r4, #1
   a7454:	f1d5 0e20 	rsbs	lr, r5, #32
   a7458:	db0d      	blt.n	a7476 <__adddf3+0xb2>
   a745a:	fa02 fc0e 	lsl.w	ip, r2, lr
   a745e:	fa22 f205 	lsr.w	r2, r2, r5
   a7462:	1880      	adds	r0, r0, r2
   a7464:	f141 0100 	adc.w	r1, r1, #0
   a7468:	fa03 f20e 	lsl.w	r2, r3, lr
   a746c:	1880      	adds	r0, r0, r2
   a746e:	fa43 f305 	asr.w	r3, r3, r5
   a7472:	4159      	adcs	r1, r3
   a7474:	e00e      	b.n	a7494 <__adddf3+0xd0>
   a7476:	f1a5 0520 	sub.w	r5, r5, #32
   a747a:	f10e 0e20 	add.w	lr, lr, #32
   a747e:	2a01      	cmp	r2, #1
   a7480:	fa03 fc0e 	lsl.w	ip, r3, lr
   a7484:	bf28      	it	cs
   a7486:	f04c 0c02 	orrcs.w	ip, ip, #2
   a748a:	fa43 f305 	asr.w	r3, r3, r5
   a748e:	18c0      	adds	r0, r0, r3
   a7490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a7494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a7498:	d507      	bpl.n	a74aa <__adddf3+0xe6>
   a749a:	f04f 0e00 	mov.w	lr, #0
   a749e:	f1dc 0c00 	rsbs	ip, ip, #0
   a74a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   a74a6:	eb6e 0101 	sbc.w	r1, lr, r1
   a74aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a74ae:	d31b      	bcc.n	a74e8 <__adddf3+0x124>
   a74b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a74b4:	d30c      	bcc.n	a74d0 <__adddf3+0x10c>
   a74b6:	0849      	lsrs	r1, r1, #1
   a74b8:	ea5f 0030 	movs.w	r0, r0, rrx
   a74bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a74c0:	f104 0401 	add.w	r4, r4, #1
   a74c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a74c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a74cc:	f080 809a 	bcs.w	a7604 <__adddf3+0x240>
   a74d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a74d4:	bf08      	it	eq
   a74d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a74da:	f150 0000 	adcs.w	r0, r0, #0
   a74de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a74e2:	ea41 0105 	orr.w	r1, r1, r5
   a74e6:	bd30      	pop	{r4, r5, pc}
   a74e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a74ec:	4140      	adcs	r0, r0
   a74ee:	eb41 0101 	adc.w	r1, r1, r1
   a74f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a74f6:	f1a4 0401 	sub.w	r4, r4, #1
   a74fa:	d1e9      	bne.n	a74d0 <__adddf3+0x10c>
   a74fc:	f091 0f00 	teq	r1, #0
   a7500:	bf04      	itt	eq
   a7502:	4601      	moveq	r1, r0
   a7504:	2000      	moveq	r0, #0
   a7506:	fab1 f381 	clz	r3, r1
   a750a:	bf08      	it	eq
   a750c:	3320      	addeq	r3, #32
   a750e:	f1a3 030b 	sub.w	r3, r3, #11
   a7512:	f1b3 0220 	subs.w	r2, r3, #32
   a7516:	da0c      	bge.n	a7532 <__adddf3+0x16e>
   a7518:	320c      	adds	r2, #12
   a751a:	dd08      	ble.n	a752e <__adddf3+0x16a>
   a751c:	f102 0c14 	add.w	ip, r2, #20
   a7520:	f1c2 020c 	rsb	r2, r2, #12
   a7524:	fa01 f00c 	lsl.w	r0, r1, ip
   a7528:	fa21 f102 	lsr.w	r1, r1, r2
   a752c:	e00c      	b.n	a7548 <__adddf3+0x184>
   a752e:	f102 0214 	add.w	r2, r2, #20
   a7532:	bfd8      	it	le
   a7534:	f1c2 0c20 	rsble	ip, r2, #32
   a7538:	fa01 f102 	lsl.w	r1, r1, r2
   a753c:	fa20 fc0c 	lsr.w	ip, r0, ip
   a7540:	bfdc      	itt	le
   a7542:	ea41 010c 	orrle.w	r1, r1, ip
   a7546:	4090      	lslle	r0, r2
   a7548:	1ae4      	subs	r4, r4, r3
   a754a:	bfa2      	ittt	ge
   a754c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a7550:	4329      	orrge	r1, r5
   a7552:	bd30      	popge	{r4, r5, pc}
   a7554:	ea6f 0404 	mvn.w	r4, r4
   a7558:	3c1f      	subs	r4, #31
   a755a:	da1c      	bge.n	a7596 <__adddf3+0x1d2>
   a755c:	340c      	adds	r4, #12
   a755e:	dc0e      	bgt.n	a757e <__adddf3+0x1ba>
   a7560:	f104 0414 	add.w	r4, r4, #20
   a7564:	f1c4 0220 	rsb	r2, r4, #32
   a7568:	fa20 f004 	lsr.w	r0, r0, r4
   a756c:	fa01 f302 	lsl.w	r3, r1, r2
   a7570:	ea40 0003 	orr.w	r0, r0, r3
   a7574:	fa21 f304 	lsr.w	r3, r1, r4
   a7578:	ea45 0103 	orr.w	r1, r5, r3
   a757c:	bd30      	pop	{r4, r5, pc}
   a757e:	f1c4 040c 	rsb	r4, r4, #12
   a7582:	f1c4 0220 	rsb	r2, r4, #32
   a7586:	fa20 f002 	lsr.w	r0, r0, r2
   a758a:	fa01 f304 	lsl.w	r3, r1, r4
   a758e:	ea40 0003 	orr.w	r0, r0, r3
   a7592:	4629      	mov	r1, r5
   a7594:	bd30      	pop	{r4, r5, pc}
   a7596:	fa21 f004 	lsr.w	r0, r1, r4
   a759a:	4629      	mov	r1, r5
   a759c:	bd30      	pop	{r4, r5, pc}
   a759e:	f094 0f00 	teq	r4, #0
   a75a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a75a6:	bf06      	itte	eq
   a75a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a75ac:	3401      	addeq	r4, #1
   a75ae:	3d01      	subne	r5, #1
   a75b0:	e74e      	b.n	a7450 <__adddf3+0x8c>
   a75b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a75b6:	bf18      	it	ne
   a75b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a75bc:	d029      	beq.n	a7612 <__adddf3+0x24e>
   a75be:	ea94 0f05 	teq	r4, r5
   a75c2:	bf08      	it	eq
   a75c4:	ea90 0f02 	teqeq	r0, r2
   a75c8:	d005      	beq.n	a75d6 <__adddf3+0x212>
   a75ca:	ea54 0c00 	orrs.w	ip, r4, r0
   a75ce:	bf04      	itt	eq
   a75d0:	4619      	moveq	r1, r3
   a75d2:	4610      	moveq	r0, r2
   a75d4:	bd30      	pop	{r4, r5, pc}
   a75d6:	ea91 0f03 	teq	r1, r3
   a75da:	bf1e      	ittt	ne
   a75dc:	2100      	movne	r1, #0
   a75de:	2000      	movne	r0, #0
   a75e0:	bd30      	popne	{r4, r5, pc}
   a75e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a75e6:	d105      	bne.n	a75f4 <__adddf3+0x230>
   a75e8:	0040      	lsls	r0, r0, #1
   a75ea:	4149      	adcs	r1, r1
   a75ec:	bf28      	it	cs
   a75ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a75f2:	bd30      	pop	{r4, r5, pc}
   a75f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a75f8:	bf3c      	itt	cc
   a75fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a75fe:	bd30      	popcc	{r4, r5, pc}
   a7600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a7604:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a7608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a760c:	f04f 0000 	mov.w	r0, #0
   a7610:	bd30      	pop	{r4, r5, pc}
   a7612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a7616:	bf1a      	itte	ne
   a7618:	4619      	movne	r1, r3
   a761a:	4610      	movne	r0, r2
   a761c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a7620:	bf1c      	itt	ne
   a7622:	460b      	movne	r3, r1
   a7624:	4602      	movne	r2, r0
   a7626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a762a:	bf06      	itte	eq
   a762c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a7630:	ea91 0f03 	teqeq	r1, r3
   a7634:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a7638:	bd30      	pop	{r4, r5, pc}
   a763a:	bf00      	nop

000a763c <__aeabi_ui2d>:
   a763c:	f090 0f00 	teq	r0, #0
   a7640:	bf04      	itt	eq
   a7642:	2100      	moveq	r1, #0
   a7644:	4770      	bxeq	lr
   a7646:	b530      	push	{r4, r5, lr}
   a7648:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a764c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a7650:	f04f 0500 	mov.w	r5, #0
   a7654:	f04f 0100 	mov.w	r1, #0
   a7658:	e750      	b.n	a74fc <__adddf3+0x138>
   a765a:	bf00      	nop

000a765c <__aeabi_i2d>:
   a765c:	f090 0f00 	teq	r0, #0
   a7660:	bf04      	itt	eq
   a7662:	2100      	moveq	r1, #0
   a7664:	4770      	bxeq	lr
   a7666:	b530      	push	{r4, r5, lr}
   a7668:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a766c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a7670:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a7674:	bf48      	it	mi
   a7676:	4240      	negmi	r0, r0
   a7678:	f04f 0100 	mov.w	r1, #0
   a767c:	e73e      	b.n	a74fc <__adddf3+0x138>
   a767e:	bf00      	nop

000a7680 <__aeabi_f2d>:
   a7680:	0042      	lsls	r2, r0, #1
   a7682:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a7686:	ea4f 0131 	mov.w	r1, r1, rrx
   a768a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a768e:	bf1f      	itttt	ne
   a7690:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a7694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a7698:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a769c:	4770      	bxne	lr
   a769e:	f092 0f00 	teq	r2, #0
   a76a2:	bf14      	ite	ne
   a76a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a76a8:	4770      	bxeq	lr
   a76aa:	b530      	push	{r4, r5, lr}
   a76ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   a76b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a76b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a76b8:	e720      	b.n	a74fc <__adddf3+0x138>
   a76ba:	bf00      	nop

000a76bc <__aeabi_ul2d>:
   a76bc:	ea50 0201 	orrs.w	r2, r0, r1
   a76c0:	bf08      	it	eq
   a76c2:	4770      	bxeq	lr
   a76c4:	b530      	push	{r4, r5, lr}
   a76c6:	f04f 0500 	mov.w	r5, #0
   a76ca:	e00a      	b.n	a76e2 <__aeabi_l2d+0x16>

000a76cc <__aeabi_l2d>:
   a76cc:	ea50 0201 	orrs.w	r2, r0, r1
   a76d0:	bf08      	it	eq
   a76d2:	4770      	bxeq	lr
   a76d4:	b530      	push	{r4, r5, lr}
   a76d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a76da:	d502      	bpl.n	a76e2 <__aeabi_l2d+0x16>
   a76dc:	4240      	negs	r0, r0
   a76de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a76e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a76e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a76ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a76ee:	f43f aedc 	beq.w	a74aa <__adddf3+0xe6>
   a76f2:	f04f 0203 	mov.w	r2, #3
   a76f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a76fa:	bf18      	it	ne
   a76fc:	3203      	addne	r2, #3
   a76fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a7702:	bf18      	it	ne
   a7704:	3203      	addne	r2, #3
   a7706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a770a:	f1c2 0320 	rsb	r3, r2, #32
   a770e:	fa00 fc03 	lsl.w	ip, r0, r3
   a7712:	fa20 f002 	lsr.w	r0, r0, r2
   a7716:	fa01 fe03 	lsl.w	lr, r1, r3
   a771a:	ea40 000e 	orr.w	r0, r0, lr
   a771e:	fa21 f102 	lsr.w	r1, r1, r2
   a7722:	4414      	add	r4, r2
   a7724:	e6c1      	b.n	a74aa <__adddf3+0xe6>
   a7726:	bf00      	nop

000a7728 <__aeabi_dmul>:
   a7728:	b570      	push	{r4, r5, r6, lr}
   a772a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a772e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a7732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a7736:	bf1d      	ittte	ne
   a7738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a773c:	ea94 0f0c 	teqne	r4, ip
   a7740:	ea95 0f0c 	teqne	r5, ip
   a7744:	f000 f8de 	bleq	a7904 <__aeabi_dmul+0x1dc>
   a7748:	442c      	add	r4, r5
   a774a:	ea81 0603 	eor.w	r6, r1, r3
   a774e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a7752:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a7756:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a775a:	bf18      	it	ne
   a775c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a7760:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a7768:	d038      	beq.n	a77dc <__aeabi_dmul+0xb4>
   a776a:	fba0 ce02 	umull	ip, lr, r0, r2
   a776e:	f04f 0500 	mov.w	r5, #0
   a7772:	fbe1 e502 	umlal	lr, r5, r1, r2
   a7776:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a777a:	fbe0 e503 	umlal	lr, r5, r0, r3
   a777e:	f04f 0600 	mov.w	r6, #0
   a7782:	fbe1 5603 	umlal	r5, r6, r1, r3
   a7786:	f09c 0f00 	teq	ip, #0
   a778a:	bf18      	it	ne
   a778c:	f04e 0e01 	orrne.w	lr, lr, #1
   a7790:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a7794:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a7798:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a779c:	d204      	bcs.n	a77a8 <__aeabi_dmul+0x80>
   a779e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a77a2:	416d      	adcs	r5, r5
   a77a4:	eb46 0606 	adc.w	r6, r6, r6
   a77a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a77ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a77b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a77b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a77b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a77bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a77c0:	bf88      	it	hi
   a77c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a77c6:	d81e      	bhi.n	a7806 <__aeabi_dmul+0xde>
   a77c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a77cc:	bf08      	it	eq
   a77ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a77d2:	f150 0000 	adcs.w	r0, r0, #0
   a77d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a77da:	bd70      	pop	{r4, r5, r6, pc}
   a77dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a77e0:	ea46 0101 	orr.w	r1, r6, r1
   a77e4:	ea40 0002 	orr.w	r0, r0, r2
   a77e8:	ea81 0103 	eor.w	r1, r1, r3
   a77ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a77f0:	bfc2      	ittt	gt
   a77f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   a77f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a77fa:	bd70      	popgt	{r4, r5, r6, pc}
   a77fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7800:	f04f 0e00 	mov.w	lr, #0
   a7804:	3c01      	subs	r4, #1
   a7806:	f300 80ab 	bgt.w	a7960 <__aeabi_dmul+0x238>
   a780a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a780e:	bfde      	ittt	le
   a7810:	2000      	movle	r0, #0
   a7812:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a7816:	bd70      	pople	{r4, r5, r6, pc}
   a7818:	f1c4 0400 	rsb	r4, r4, #0
   a781c:	3c20      	subs	r4, #32
   a781e:	da35      	bge.n	a788c <__aeabi_dmul+0x164>
   a7820:	340c      	adds	r4, #12
   a7822:	dc1b      	bgt.n	a785c <__aeabi_dmul+0x134>
   a7824:	f104 0414 	add.w	r4, r4, #20
   a7828:	f1c4 0520 	rsb	r5, r4, #32
   a782c:	fa00 f305 	lsl.w	r3, r0, r5
   a7830:	fa20 f004 	lsr.w	r0, r0, r4
   a7834:	fa01 f205 	lsl.w	r2, r1, r5
   a7838:	ea40 0002 	orr.w	r0, r0, r2
   a783c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a7840:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a7844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a7848:	fa21 f604 	lsr.w	r6, r1, r4
   a784c:	eb42 0106 	adc.w	r1, r2, r6
   a7850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a7854:	bf08      	it	eq
   a7856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a785a:	bd70      	pop	{r4, r5, r6, pc}
   a785c:	f1c4 040c 	rsb	r4, r4, #12
   a7860:	f1c4 0520 	rsb	r5, r4, #32
   a7864:	fa00 f304 	lsl.w	r3, r0, r4
   a7868:	fa20 f005 	lsr.w	r0, r0, r5
   a786c:	fa01 f204 	lsl.w	r2, r1, r4
   a7870:	ea40 0002 	orr.w	r0, r0, r2
   a7874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7878:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a787c:	f141 0100 	adc.w	r1, r1, #0
   a7880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a7884:	bf08      	it	eq
   a7886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a788a:	bd70      	pop	{r4, r5, r6, pc}
   a788c:	f1c4 0520 	rsb	r5, r4, #32
   a7890:	fa00 f205 	lsl.w	r2, r0, r5
   a7894:	ea4e 0e02 	orr.w	lr, lr, r2
   a7898:	fa20 f304 	lsr.w	r3, r0, r4
   a789c:	fa01 f205 	lsl.w	r2, r1, r5
   a78a0:	ea43 0302 	orr.w	r3, r3, r2
   a78a4:	fa21 f004 	lsr.w	r0, r1, r4
   a78a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a78ac:	fa21 f204 	lsr.w	r2, r1, r4
   a78b0:	ea20 0002 	bic.w	r0, r0, r2
   a78b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a78b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a78bc:	bf08      	it	eq
   a78be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a78c2:	bd70      	pop	{r4, r5, r6, pc}
   a78c4:	f094 0f00 	teq	r4, #0
   a78c8:	d10f      	bne.n	a78ea <__aeabi_dmul+0x1c2>
   a78ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a78ce:	0040      	lsls	r0, r0, #1
   a78d0:	eb41 0101 	adc.w	r1, r1, r1
   a78d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a78d8:	bf08      	it	eq
   a78da:	3c01      	subeq	r4, #1
   a78dc:	d0f7      	beq.n	a78ce <__aeabi_dmul+0x1a6>
   a78de:	ea41 0106 	orr.w	r1, r1, r6
   a78e2:	f095 0f00 	teq	r5, #0
   a78e6:	bf18      	it	ne
   a78e8:	4770      	bxne	lr
   a78ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a78ee:	0052      	lsls	r2, r2, #1
   a78f0:	eb43 0303 	adc.w	r3, r3, r3
   a78f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a78f8:	bf08      	it	eq
   a78fa:	3d01      	subeq	r5, #1
   a78fc:	d0f7      	beq.n	a78ee <__aeabi_dmul+0x1c6>
   a78fe:	ea43 0306 	orr.w	r3, r3, r6
   a7902:	4770      	bx	lr
   a7904:	ea94 0f0c 	teq	r4, ip
   a7908:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a790c:	bf18      	it	ne
   a790e:	ea95 0f0c 	teqne	r5, ip
   a7912:	d00c      	beq.n	a792e <__aeabi_dmul+0x206>
   a7914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a7918:	bf18      	it	ne
   a791a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a791e:	d1d1      	bne.n	a78c4 <__aeabi_dmul+0x19c>
   a7920:	ea81 0103 	eor.w	r1, r1, r3
   a7924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7928:	f04f 0000 	mov.w	r0, #0
   a792c:	bd70      	pop	{r4, r5, r6, pc}
   a792e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a7932:	bf06      	itte	eq
   a7934:	4610      	moveq	r0, r2
   a7936:	4619      	moveq	r1, r3
   a7938:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a793c:	d019      	beq.n	a7972 <__aeabi_dmul+0x24a>
   a793e:	ea94 0f0c 	teq	r4, ip
   a7942:	d102      	bne.n	a794a <__aeabi_dmul+0x222>
   a7944:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a7948:	d113      	bne.n	a7972 <__aeabi_dmul+0x24a>
   a794a:	ea95 0f0c 	teq	r5, ip
   a794e:	d105      	bne.n	a795c <__aeabi_dmul+0x234>
   a7950:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a7954:	bf1c      	itt	ne
   a7956:	4610      	movne	r0, r2
   a7958:	4619      	movne	r1, r3
   a795a:	d10a      	bne.n	a7972 <__aeabi_dmul+0x24a>
   a795c:	ea81 0103 	eor.w	r1, r1, r3
   a7960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a7964:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a7968:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a796c:	f04f 0000 	mov.w	r0, #0
   a7970:	bd70      	pop	{r4, r5, r6, pc}
   a7972:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a7976:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a797a:	bd70      	pop	{r4, r5, r6, pc}

000a797c <__aeabi_ddiv>:
   a797c:	b570      	push	{r4, r5, r6, lr}
   a797e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a7982:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a7986:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a798a:	bf1d      	ittte	ne
   a798c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a7990:	ea94 0f0c 	teqne	r4, ip
   a7994:	ea95 0f0c 	teqne	r5, ip
   a7998:	f000 f8a7 	bleq	a7aea <__aeabi_ddiv+0x16e>
   a799c:	eba4 0405 	sub.w	r4, r4, r5
   a79a0:	ea81 0e03 	eor.w	lr, r1, r3
   a79a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a79a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a79ac:	f000 8088 	beq.w	a7ac0 <__aeabi_ddiv+0x144>
   a79b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a79b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a79b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a79bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a79c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a79c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a79c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a79cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a79d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a79d4:	429d      	cmp	r5, r3
   a79d6:	bf08      	it	eq
   a79d8:	4296      	cmpeq	r6, r2
   a79da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a79de:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a79e2:	d202      	bcs.n	a79ea <__aeabi_ddiv+0x6e>
   a79e4:	085b      	lsrs	r3, r3, #1
   a79e6:	ea4f 0232 	mov.w	r2, r2, rrx
   a79ea:	1ab6      	subs	r6, r6, r2
   a79ec:	eb65 0503 	sbc.w	r5, r5, r3
   a79f0:	085b      	lsrs	r3, r3, #1
   a79f2:	ea4f 0232 	mov.w	r2, r2, rrx
   a79f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a79fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a79fe:	ebb6 0e02 	subs.w	lr, r6, r2
   a7a02:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7a06:	bf22      	ittt	cs
   a7a08:	1ab6      	subcs	r6, r6, r2
   a7a0a:	4675      	movcs	r5, lr
   a7a0c:	ea40 000c 	orrcs.w	r0, r0, ip
   a7a10:	085b      	lsrs	r3, r3, #1
   a7a12:	ea4f 0232 	mov.w	r2, r2, rrx
   a7a16:	ebb6 0e02 	subs.w	lr, r6, r2
   a7a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7a1e:	bf22      	ittt	cs
   a7a20:	1ab6      	subcs	r6, r6, r2
   a7a22:	4675      	movcs	r5, lr
   a7a24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a7a28:	085b      	lsrs	r3, r3, #1
   a7a2a:	ea4f 0232 	mov.w	r2, r2, rrx
   a7a2e:	ebb6 0e02 	subs.w	lr, r6, r2
   a7a32:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7a36:	bf22      	ittt	cs
   a7a38:	1ab6      	subcs	r6, r6, r2
   a7a3a:	4675      	movcs	r5, lr
   a7a3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a7a40:	085b      	lsrs	r3, r3, #1
   a7a42:	ea4f 0232 	mov.w	r2, r2, rrx
   a7a46:	ebb6 0e02 	subs.w	lr, r6, r2
   a7a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   a7a4e:	bf22      	ittt	cs
   a7a50:	1ab6      	subcs	r6, r6, r2
   a7a52:	4675      	movcs	r5, lr
   a7a54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a7a58:	ea55 0e06 	orrs.w	lr, r5, r6
   a7a5c:	d018      	beq.n	a7a90 <__aeabi_ddiv+0x114>
   a7a5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a7a62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a7a66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a7a6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a7a6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a7a72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a7a76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a7a7a:	d1c0      	bne.n	a79fe <__aeabi_ddiv+0x82>
   a7a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a7a80:	d10b      	bne.n	a7a9a <__aeabi_ddiv+0x11e>
   a7a82:	ea41 0100 	orr.w	r1, r1, r0
   a7a86:	f04f 0000 	mov.w	r0, #0
   a7a8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a7a8e:	e7b6      	b.n	a79fe <__aeabi_ddiv+0x82>
   a7a90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a7a94:	bf04      	itt	eq
   a7a96:	4301      	orreq	r1, r0
   a7a98:	2000      	moveq	r0, #0
   a7a9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a7a9e:	bf88      	it	hi
   a7aa0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a7aa4:	f63f aeaf 	bhi.w	a7806 <__aeabi_dmul+0xde>
   a7aa8:	ebb5 0c03 	subs.w	ip, r5, r3
   a7aac:	bf04      	itt	eq
   a7aae:	ebb6 0c02 	subseq.w	ip, r6, r2
   a7ab2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a7ab6:	f150 0000 	adcs.w	r0, r0, #0
   a7aba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a7abe:	bd70      	pop	{r4, r5, r6, pc}
   a7ac0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a7ac4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a7ac8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a7acc:	bfc2      	ittt	gt
   a7ace:	ebd4 050c 	rsbsgt	r5, r4, ip
   a7ad2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a7ad6:	bd70      	popgt	{r4, r5, r6, pc}
   a7ad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7adc:	f04f 0e00 	mov.w	lr, #0
   a7ae0:	3c01      	subs	r4, #1
   a7ae2:	e690      	b.n	a7806 <__aeabi_dmul+0xde>
   a7ae4:	ea45 0e06 	orr.w	lr, r5, r6
   a7ae8:	e68d      	b.n	a7806 <__aeabi_dmul+0xde>
   a7aea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a7aee:	ea94 0f0c 	teq	r4, ip
   a7af2:	bf08      	it	eq
   a7af4:	ea95 0f0c 	teqeq	r5, ip
   a7af8:	f43f af3b 	beq.w	a7972 <__aeabi_dmul+0x24a>
   a7afc:	ea94 0f0c 	teq	r4, ip
   a7b00:	d10a      	bne.n	a7b18 <__aeabi_ddiv+0x19c>
   a7b02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a7b06:	f47f af34 	bne.w	a7972 <__aeabi_dmul+0x24a>
   a7b0a:	ea95 0f0c 	teq	r5, ip
   a7b0e:	f47f af25 	bne.w	a795c <__aeabi_dmul+0x234>
   a7b12:	4610      	mov	r0, r2
   a7b14:	4619      	mov	r1, r3
   a7b16:	e72c      	b.n	a7972 <__aeabi_dmul+0x24a>
   a7b18:	ea95 0f0c 	teq	r5, ip
   a7b1c:	d106      	bne.n	a7b2c <__aeabi_ddiv+0x1b0>
   a7b1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a7b22:	f43f aefd 	beq.w	a7920 <__aeabi_dmul+0x1f8>
   a7b26:	4610      	mov	r0, r2
   a7b28:	4619      	mov	r1, r3
   a7b2a:	e722      	b.n	a7972 <__aeabi_dmul+0x24a>
   a7b2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a7b30:	bf18      	it	ne
   a7b32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a7b36:	f47f aec5 	bne.w	a78c4 <__aeabi_dmul+0x19c>
   a7b3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a7b3e:	f47f af0d 	bne.w	a795c <__aeabi_dmul+0x234>
   a7b42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a7b46:	f47f aeeb 	bne.w	a7920 <__aeabi_dmul+0x1f8>
   a7b4a:	e712      	b.n	a7972 <__aeabi_dmul+0x24a>

000a7b4c <__gedf2>:
   a7b4c:	f04f 3cff 	mov.w	ip, #4294967295
   a7b50:	e006      	b.n	a7b60 <__cmpdf2+0x4>
   a7b52:	bf00      	nop

000a7b54 <__ledf2>:
   a7b54:	f04f 0c01 	mov.w	ip, #1
   a7b58:	e002      	b.n	a7b60 <__cmpdf2+0x4>
   a7b5a:	bf00      	nop

000a7b5c <__cmpdf2>:
   a7b5c:	f04f 0c01 	mov.w	ip, #1
   a7b60:	f84d cd04 	str.w	ip, [sp, #-4]!
   a7b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a7b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a7b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a7b70:	bf18      	it	ne
   a7b72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a7b76:	d01b      	beq.n	a7bb0 <__cmpdf2+0x54>
   a7b78:	b001      	add	sp, #4
   a7b7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a7b7e:	bf0c      	ite	eq
   a7b80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a7b84:	ea91 0f03 	teqne	r1, r3
   a7b88:	bf02      	ittt	eq
   a7b8a:	ea90 0f02 	teqeq	r0, r2
   a7b8e:	2000      	moveq	r0, #0
   a7b90:	4770      	bxeq	lr
   a7b92:	f110 0f00 	cmn.w	r0, #0
   a7b96:	ea91 0f03 	teq	r1, r3
   a7b9a:	bf58      	it	pl
   a7b9c:	4299      	cmppl	r1, r3
   a7b9e:	bf08      	it	eq
   a7ba0:	4290      	cmpeq	r0, r2
   a7ba2:	bf2c      	ite	cs
   a7ba4:	17d8      	asrcs	r0, r3, #31
   a7ba6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a7baa:	f040 0001 	orr.w	r0, r0, #1
   a7bae:	4770      	bx	lr
   a7bb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a7bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a7bb8:	d102      	bne.n	a7bc0 <__cmpdf2+0x64>
   a7bba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a7bbe:	d107      	bne.n	a7bd0 <__cmpdf2+0x74>
   a7bc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a7bc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a7bc8:	d1d6      	bne.n	a7b78 <__cmpdf2+0x1c>
   a7bca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a7bce:	d0d3      	beq.n	a7b78 <__cmpdf2+0x1c>
   a7bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   a7bd4:	4770      	bx	lr
   a7bd6:	bf00      	nop

000a7bd8 <__aeabi_cdrcmple>:
   a7bd8:	4684      	mov	ip, r0
   a7bda:	4610      	mov	r0, r2
   a7bdc:	4662      	mov	r2, ip
   a7bde:	468c      	mov	ip, r1
   a7be0:	4619      	mov	r1, r3
   a7be2:	4663      	mov	r3, ip
   a7be4:	e000      	b.n	a7be8 <__aeabi_cdcmpeq>
   a7be6:	bf00      	nop

000a7be8 <__aeabi_cdcmpeq>:
   a7be8:	b501      	push	{r0, lr}
   a7bea:	f7ff ffb7 	bl	a7b5c <__cmpdf2>
   a7bee:	2800      	cmp	r0, #0
   a7bf0:	bf48      	it	mi
   a7bf2:	f110 0f00 	cmnmi.w	r0, #0
   a7bf6:	bd01      	pop	{r0, pc}

000a7bf8 <__aeabi_dcmpeq>:
   a7bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7bfc:	f7ff fff4 	bl	a7be8 <__aeabi_cdcmpeq>
   a7c00:	bf0c      	ite	eq
   a7c02:	2001      	moveq	r0, #1
   a7c04:	2000      	movne	r0, #0
   a7c06:	f85d fb08 	ldr.w	pc, [sp], #8
   a7c0a:	bf00      	nop

000a7c0c <__aeabi_dcmplt>:
   a7c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7c10:	f7ff ffea 	bl	a7be8 <__aeabi_cdcmpeq>
   a7c14:	bf34      	ite	cc
   a7c16:	2001      	movcc	r0, #1
   a7c18:	2000      	movcs	r0, #0
   a7c1a:	f85d fb08 	ldr.w	pc, [sp], #8
   a7c1e:	bf00      	nop

000a7c20 <__aeabi_dcmple>:
   a7c20:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7c24:	f7ff ffe0 	bl	a7be8 <__aeabi_cdcmpeq>
   a7c28:	bf94      	ite	ls
   a7c2a:	2001      	movls	r0, #1
   a7c2c:	2000      	movhi	r0, #0
   a7c2e:	f85d fb08 	ldr.w	pc, [sp], #8
   a7c32:	bf00      	nop

000a7c34 <__aeabi_dcmpge>:
   a7c34:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7c38:	f7ff ffce 	bl	a7bd8 <__aeabi_cdrcmple>
   a7c3c:	bf94      	ite	ls
   a7c3e:	2001      	movls	r0, #1
   a7c40:	2000      	movhi	r0, #0
   a7c42:	f85d fb08 	ldr.w	pc, [sp], #8
   a7c46:	bf00      	nop

000a7c48 <__aeabi_dcmpgt>:
   a7c48:	f84d ed08 	str.w	lr, [sp, #-8]!
   a7c4c:	f7ff ffc4 	bl	a7bd8 <__aeabi_cdrcmple>
   a7c50:	bf34      	ite	cc
   a7c52:	2001      	movcc	r0, #1
   a7c54:	2000      	movcs	r0, #0
   a7c56:	f85d fb08 	ldr.w	pc, [sp], #8
   a7c5a:	bf00      	nop

000a7c5c <__aeabi_d2iz>:
   a7c5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a7c60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a7c64:	d215      	bcs.n	a7c92 <__aeabi_d2iz+0x36>
   a7c66:	d511      	bpl.n	a7c8c <__aeabi_d2iz+0x30>
   a7c68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a7c6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a7c70:	d912      	bls.n	a7c98 <__aeabi_d2iz+0x3c>
   a7c72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a7c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a7c7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a7c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a7c82:	fa23 f002 	lsr.w	r0, r3, r2
   a7c86:	bf18      	it	ne
   a7c88:	4240      	negne	r0, r0
   a7c8a:	4770      	bx	lr
   a7c8c:	f04f 0000 	mov.w	r0, #0
   a7c90:	4770      	bx	lr
   a7c92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a7c96:	d105      	bne.n	a7ca4 <__aeabi_d2iz+0x48>
   a7c98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a7c9c:	bf08      	it	eq
   a7c9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a7ca2:	4770      	bx	lr
   a7ca4:	f04f 0000 	mov.w	r0, #0
   a7ca8:	4770      	bx	lr
   a7caa:	bf00      	nop

000a7cac <__aeabi_d2uiz>:
   a7cac:	004a      	lsls	r2, r1, #1
   a7cae:	d211      	bcs.n	a7cd4 <__aeabi_d2uiz+0x28>
   a7cb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a7cb4:	d211      	bcs.n	a7cda <__aeabi_d2uiz+0x2e>
   a7cb6:	d50d      	bpl.n	a7cd4 <__aeabi_d2uiz+0x28>
   a7cb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a7cbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a7cc0:	d40e      	bmi.n	a7ce0 <__aeabi_d2uiz+0x34>
   a7cc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a7cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a7cca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a7cce:	fa23 f002 	lsr.w	r0, r3, r2
   a7cd2:	4770      	bx	lr
   a7cd4:	f04f 0000 	mov.w	r0, #0
   a7cd8:	4770      	bx	lr
   a7cda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a7cde:	d102      	bne.n	a7ce6 <__aeabi_d2uiz+0x3a>
   a7ce0:	f04f 30ff 	mov.w	r0, #4294967295
   a7ce4:	4770      	bx	lr
   a7ce6:	f04f 0000 	mov.w	r0, #0
   a7cea:	4770      	bx	lr

000a7cec <__aeabi_d2f>:
   a7cec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a7cf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a7cf4:	bf24      	itt	cs
   a7cf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a7cfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a7cfe:	d90d      	bls.n	a7d1c <__aeabi_d2f+0x30>
   a7d00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a7d04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a7d08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a7d0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a7d10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a7d14:	bf08      	it	eq
   a7d16:	f020 0001 	biceq.w	r0, r0, #1
   a7d1a:	4770      	bx	lr
   a7d1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a7d20:	d121      	bne.n	a7d66 <__aeabi_d2f+0x7a>
   a7d22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a7d26:	bfbc      	itt	lt
   a7d28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a7d2c:	4770      	bxlt	lr
   a7d2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a7d32:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a7d36:	f1c2 0218 	rsb	r2, r2, #24
   a7d3a:	f1c2 0c20 	rsb	ip, r2, #32
   a7d3e:	fa10 f30c 	lsls.w	r3, r0, ip
   a7d42:	fa20 f002 	lsr.w	r0, r0, r2
   a7d46:	bf18      	it	ne
   a7d48:	f040 0001 	orrne.w	r0, r0, #1
   a7d4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a7d50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a7d54:	fa03 fc0c 	lsl.w	ip, r3, ip
   a7d58:	ea40 000c 	orr.w	r0, r0, ip
   a7d5c:	fa23 f302 	lsr.w	r3, r3, r2
   a7d60:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a7d64:	e7cc      	b.n	a7d00 <__aeabi_d2f+0x14>
   a7d66:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a7d6a:	d107      	bne.n	a7d7c <__aeabi_d2f+0x90>
   a7d6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a7d70:	bf1e      	ittt	ne
   a7d72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a7d76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a7d7a:	4770      	bxne	lr
   a7d7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a7d80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a7d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a7d88:	4770      	bx	lr
   a7d8a:	bf00      	nop

000a7d8c <__aeabi_frsub>:
   a7d8c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a7d90:	e002      	b.n	a7d98 <__addsf3>
   a7d92:	bf00      	nop

000a7d94 <__aeabi_fsub>:
   a7d94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a7d98 <__addsf3>:
   a7d98:	0042      	lsls	r2, r0, #1
   a7d9a:	bf1f      	itttt	ne
   a7d9c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a7da0:	ea92 0f03 	teqne	r2, r3
   a7da4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a7da8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a7dac:	d06a      	beq.n	a7e84 <__addsf3+0xec>
   a7dae:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a7db2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a7db6:	bfc1      	itttt	gt
   a7db8:	18d2      	addgt	r2, r2, r3
   a7dba:	4041      	eorgt	r1, r0
   a7dbc:	4048      	eorgt	r0, r1
   a7dbe:	4041      	eorgt	r1, r0
   a7dc0:	bfb8      	it	lt
   a7dc2:	425b      	neglt	r3, r3
   a7dc4:	2b19      	cmp	r3, #25
   a7dc6:	bf88      	it	hi
   a7dc8:	4770      	bxhi	lr
   a7dca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a7dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a7dd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a7dd6:	bf18      	it	ne
   a7dd8:	4240      	negne	r0, r0
   a7dda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a7dde:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a7de2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a7de6:	bf18      	it	ne
   a7de8:	4249      	negne	r1, r1
   a7dea:	ea92 0f03 	teq	r2, r3
   a7dee:	d03f      	beq.n	a7e70 <__addsf3+0xd8>
   a7df0:	f1a2 0201 	sub.w	r2, r2, #1
   a7df4:	fa41 fc03 	asr.w	ip, r1, r3
   a7df8:	eb10 000c 	adds.w	r0, r0, ip
   a7dfc:	f1c3 0320 	rsb	r3, r3, #32
   a7e00:	fa01 f103 	lsl.w	r1, r1, r3
   a7e04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a7e08:	d502      	bpl.n	a7e10 <__addsf3+0x78>
   a7e0a:	4249      	negs	r1, r1
   a7e0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a7e10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a7e14:	d313      	bcc.n	a7e3e <__addsf3+0xa6>
   a7e16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a7e1a:	d306      	bcc.n	a7e2a <__addsf3+0x92>
   a7e1c:	0840      	lsrs	r0, r0, #1
   a7e1e:	ea4f 0131 	mov.w	r1, r1, rrx
   a7e22:	f102 0201 	add.w	r2, r2, #1
   a7e26:	2afe      	cmp	r2, #254	; 0xfe
   a7e28:	d251      	bcs.n	a7ece <__addsf3+0x136>
   a7e2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a7e2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a7e32:	bf08      	it	eq
   a7e34:	f020 0001 	biceq.w	r0, r0, #1
   a7e38:	ea40 0003 	orr.w	r0, r0, r3
   a7e3c:	4770      	bx	lr
   a7e3e:	0049      	lsls	r1, r1, #1
   a7e40:	eb40 0000 	adc.w	r0, r0, r0
   a7e44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a7e48:	f1a2 0201 	sub.w	r2, r2, #1
   a7e4c:	d1ed      	bne.n	a7e2a <__addsf3+0x92>
   a7e4e:	fab0 fc80 	clz	ip, r0
   a7e52:	f1ac 0c08 	sub.w	ip, ip, #8
   a7e56:	ebb2 020c 	subs.w	r2, r2, ip
   a7e5a:	fa00 f00c 	lsl.w	r0, r0, ip
   a7e5e:	bfaa      	itet	ge
   a7e60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a7e64:	4252      	neglt	r2, r2
   a7e66:	4318      	orrge	r0, r3
   a7e68:	bfbc      	itt	lt
   a7e6a:	40d0      	lsrlt	r0, r2
   a7e6c:	4318      	orrlt	r0, r3
   a7e6e:	4770      	bx	lr
   a7e70:	f092 0f00 	teq	r2, #0
   a7e74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a7e78:	bf06      	itte	eq
   a7e7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a7e7e:	3201      	addeq	r2, #1
   a7e80:	3b01      	subne	r3, #1
   a7e82:	e7b5      	b.n	a7df0 <__addsf3+0x58>
   a7e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a7e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a7e8c:	bf18      	it	ne
   a7e8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a7e92:	d021      	beq.n	a7ed8 <__addsf3+0x140>
   a7e94:	ea92 0f03 	teq	r2, r3
   a7e98:	d004      	beq.n	a7ea4 <__addsf3+0x10c>
   a7e9a:	f092 0f00 	teq	r2, #0
   a7e9e:	bf08      	it	eq
   a7ea0:	4608      	moveq	r0, r1
   a7ea2:	4770      	bx	lr
   a7ea4:	ea90 0f01 	teq	r0, r1
   a7ea8:	bf1c      	itt	ne
   a7eaa:	2000      	movne	r0, #0
   a7eac:	4770      	bxne	lr
   a7eae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a7eb2:	d104      	bne.n	a7ebe <__addsf3+0x126>
   a7eb4:	0040      	lsls	r0, r0, #1
   a7eb6:	bf28      	it	cs
   a7eb8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a7ebc:	4770      	bx	lr
   a7ebe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a7ec2:	bf3c      	itt	cc
   a7ec4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a7ec8:	4770      	bxcc	lr
   a7eca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a7ece:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a7ed2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a7ed6:	4770      	bx	lr
   a7ed8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a7edc:	bf16      	itet	ne
   a7ede:	4608      	movne	r0, r1
   a7ee0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a7ee4:	4601      	movne	r1, r0
   a7ee6:	0242      	lsls	r2, r0, #9
   a7ee8:	bf06      	itte	eq
   a7eea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a7eee:	ea90 0f01 	teqeq	r0, r1
   a7ef2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a7ef6:	4770      	bx	lr

000a7ef8 <__aeabi_ui2f>:
   a7ef8:	f04f 0300 	mov.w	r3, #0
   a7efc:	e004      	b.n	a7f08 <__aeabi_i2f+0x8>
   a7efe:	bf00      	nop

000a7f00 <__aeabi_i2f>:
   a7f00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a7f04:	bf48      	it	mi
   a7f06:	4240      	negmi	r0, r0
   a7f08:	ea5f 0c00 	movs.w	ip, r0
   a7f0c:	bf08      	it	eq
   a7f0e:	4770      	bxeq	lr
   a7f10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a7f14:	4601      	mov	r1, r0
   a7f16:	f04f 0000 	mov.w	r0, #0
   a7f1a:	e01c      	b.n	a7f56 <__aeabi_l2f+0x2a>

000a7f1c <__aeabi_ul2f>:
   a7f1c:	ea50 0201 	orrs.w	r2, r0, r1
   a7f20:	bf08      	it	eq
   a7f22:	4770      	bxeq	lr
   a7f24:	f04f 0300 	mov.w	r3, #0
   a7f28:	e00a      	b.n	a7f40 <__aeabi_l2f+0x14>
   a7f2a:	bf00      	nop

000a7f2c <__aeabi_l2f>:
   a7f2c:	ea50 0201 	orrs.w	r2, r0, r1
   a7f30:	bf08      	it	eq
   a7f32:	4770      	bxeq	lr
   a7f34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a7f38:	d502      	bpl.n	a7f40 <__aeabi_l2f+0x14>
   a7f3a:	4240      	negs	r0, r0
   a7f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a7f40:	ea5f 0c01 	movs.w	ip, r1
   a7f44:	bf02      	ittt	eq
   a7f46:	4684      	moveq	ip, r0
   a7f48:	4601      	moveq	r1, r0
   a7f4a:	2000      	moveq	r0, #0
   a7f4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a7f50:	bf08      	it	eq
   a7f52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a7f56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a7f5a:	fabc f28c 	clz	r2, ip
   a7f5e:	3a08      	subs	r2, #8
   a7f60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a7f64:	db10      	blt.n	a7f88 <__aeabi_l2f+0x5c>
   a7f66:	fa01 fc02 	lsl.w	ip, r1, r2
   a7f6a:	4463      	add	r3, ip
   a7f6c:	fa00 fc02 	lsl.w	ip, r0, r2
   a7f70:	f1c2 0220 	rsb	r2, r2, #32
   a7f74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a7f78:	fa20 f202 	lsr.w	r2, r0, r2
   a7f7c:	eb43 0002 	adc.w	r0, r3, r2
   a7f80:	bf08      	it	eq
   a7f82:	f020 0001 	biceq.w	r0, r0, #1
   a7f86:	4770      	bx	lr
   a7f88:	f102 0220 	add.w	r2, r2, #32
   a7f8c:	fa01 fc02 	lsl.w	ip, r1, r2
   a7f90:	f1c2 0220 	rsb	r2, r2, #32
   a7f94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a7f98:	fa21 f202 	lsr.w	r2, r1, r2
   a7f9c:	eb43 0002 	adc.w	r0, r3, r2
   a7fa0:	bf08      	it	eq
   a7fa2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a7fa6:	4770      	bx	lr

000a7fa8 <__aeabi_fmul>:
   a7fa8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a7fac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a7fb0:	bf1e      	ittt	ne
   a7fb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a7fb6:	ea92 0f0c 	teqne	r2, ip
   a7fba:	ea93 0f0c 	teqne	r3, ip
   a7fbe:	d06f      	beq.n	a80a0 <__aeabi_fmul+0xf8>
   a7fc0:	441a      	add	r2, r3
   a7fc2:	ea80 0c01 	eor.w	ip, r0, r1
   a7fc6:	0240      	lsls	r0, r0, #9
   a7fc8:	bf18      	it	ne
   a7fca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a7fce:	d01e      	beq.n	a800e <__aeabi_fmul+0x66>
   a7fd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a7fd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a7fd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a7fdc:	fba0 3101 	umull	r3, r1, r0, r1
   a7fe0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a7fe4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a7fe8:	bf3e      	ittt	cc
   a7fea:	0049      	lslcc	r1, r1, #1
   a7fec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a7ff0:	005b      	lslcc	r3, r3, #1
   a7ff2:	ea40 0001 	orr.w	r0, r0, r1
   a7ff6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a7ffa:	2afd      	cmp	r2, #253	; 0xfd
   a7ffc:	d81d      	bhi.n	a803a <__aeabi_fmul+0x92>
   a7ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a8002:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a8006:	bf08      	it	eq
   a8008:	f020 0001 	biceq.w	r0, r0, #1
   a800c:	4770      	bx	lr
   a800e:	f090 0f00 	teq	r0, #0
   a8012:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a8016:	bf08      	it	eq
   a8018:	0249      	lsleq	r1, r1, #9
   a801a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a801e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a8022:	3a7f      	subs	r2, #127	; 0x7f
   a8024:	bfc2      	ittt	gt
   a8026:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a802a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a802e:	4770      	bxgt	lr
   a8030:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a8034:	f04f 0300 	mov.w	r3, #0
   a8038:	3a01      	subs	r2, #1
   a803a:	dc5d      	bgt.n	a80f8 <__aeabi_fmul+0x150>
   a803c:	f112 0f19 	cmn.w	r2, #25
   a8040:	bfdc      	itt	le
   a8042:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a8046:	4770      	bxle	lr
   a8048:	f1c2 0200 	rsb	r2, r2, #0
   a804c:	0041      	lsls	r1, r0, #1
   a804e:	fa21 f102 	lsr.w	r1, r1, r2
   a8052:	f1c2 0220 	rsb	r2, r2, #32
   a8056:	fa00 fc02 	lsl.w	ip, r0, r2
   a805a:	ea5f 0031 	movs.w	r0, r1, rrx
   a805e:	f140 0000 	adc.w	r0, r0, #0
   a8062:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a8066:	bf08      	it	eq
   a8068:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a806c:	4770      	bx	lr
   a806e:	f092 0f00 	teq	r2, #0
   a8072:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a8076:	bf02      	ittt	eq
   a8078:	0040      	lsleq	r0, r0, #1
   a807a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a807e:	3a01      	subeq	r2, #1
   a8080:	d0f9      	beq.n	a8076 <__aeabi_fmul+0xce>
   a8082:	ea40 000c 	orr.w	r0, r0, ip
   a8086:	f093 0f00 	teq	r3, #0
   a808a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a808e:	bf02      	ittt	eq
   a8090:	0049      	lsleq	r1, r1, #1
   a8092:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a8096:	3b01      	subeq	r3, #1
   a8098:	d0f9      	beq.n	a808e <__aeabi_fmul+0xe6>
   a809a:	ea41 010c 	orr.w	r1, r1, ip
   a809e:	e78f      	b.n	a7fc0 <__aeabi_fmul+0x18>
   a80a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a80a4:	ea92 0f0c 	teq	r2, ip
   a80a8:	bf18      	it	ne
   a80aa:	ea93 0f0c 	teqne	r3, ip
   a80ae:	d00a      	beq.n	a80c6 <__aeabi_fmul+0x11e>
   a80b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a80b4:	bf18      	it	ne
   a80b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a80ba:	d1d8      	bne.n	a806e <__aeabi_fmul+0xc6>
   a80bc:	ea80 0001 	eor.w	r0, r0, r1
   a80c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a80c4:	4770      	bx	lr
   a80c6:	f090 0f00 	teq	r0, #0
   a80ca:	bf17      	itett	ne
   a80cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a80d0:	4608      	moveq	r0, r1
   a80d2:	f091 0f00 	teqne	r1, #0
   a80d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a80da:	d014      	beq.n	a8106 <__aeabi_fmul+0x15e>
   a80dc:	ea92 0f0c 	teq	r2, ip
   a80e0:	d101      	bne.n	a80e6 <__aeabi_fmul+0x13e>
   a80e2:	0242      	lsls	r2, r0, #9
   a80e4:	d10f      	bne.n	a8106 <__aeabi_fmul+0x15e>
   a80e6:	ea93 0f0c 	teq	r3, ip
   a80ea:	d103      	bne.n	a80f4 <__aeabi_fmul+0x14c>
   a80ec:	024b      	lsls	r3, r1, #9
   a80ee:	bf18      	it	ne
   a80f0:	4608      	movne	r0, r1
   a80f2:	d108      	bne.n	a8106 <__aeabi_fmul+0x15e>
   a80f4:	ea80 0001 	eor.w	r0, r0, r1
   a80f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a80fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a8100:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a8104:	4770      	bx	lr
   a8106:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a810a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a810e:	4770      	bx	lr

000a8110 <__aeabi_fdiv>:
   a8110:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a8114:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a8118:	bf1e      	ittt	ne
   a811a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a811e:	ea92 0f0c 	teqne	r2, ip
   a8122:	ea93 0f0c 	teqne	r3, ip
   a8126:	d069      	beq.n	a81fc <__aeabi_fdiv+0xec>
   a8128:	eba2 0203 	sub.w	r2, r2, r3
   a812c:	ea80 0c01 	eor.w	ip, r0, r1
   a8130:	0249      	lsls	r1, r1, #9
   a8132:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a8136:	d037      	beq.n	a81a8 <__aeabi_fdiv+0x98>
   a8138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a813c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a8140:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a8144:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a8148:	428b      	cmp	r3, r1
   a814a:	bf38      	it	cc
   a814c:	005b      	lslcc	r3, r3, #1
   a814e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a8152:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a8156:	428b      	cmp	r3, r1
   a8158:	bf24      	itt	cs
   a815a:	1a5b      	subcs	r3, r3, r1
   a815c:	ea40 000c 	orrcs.w	r0, r0, ip
   a8160:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a8164:	bf24      	itt	cs
   a8166:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a816a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a816e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a8172:	bf24      	itt	cs
   a8174:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a8178:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a817c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a8180:	bf24      	itt	cs
   a8182:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a8186:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a818a:	011b      	lsls	r3, r3, #4
   a818c:	bf18      	it	ne
   a818e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a8192:	d1e0      	bne.n	a8156 <__aeabi_fdiv+0x46>
   a8194:	2afd      	cmp	r2, #253	; 0xfd
   a8196:	f63f af50 	bhi.w	a803a <__aeabi_fmul+0x92>
   a819a:	428b      	cmp	r3, r1
   a819c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a81a0:	bf08      	it	eq
   a81a2:	f020 0001 	biceq.w	r0, r0, #1
   a81a6:	4770      	bx	lr
   a81a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a81ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a81b0:	327f      	adds	r2, #127	; 0x7f
   a81b2:	bfc2      	ittt	gt
   a81b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a81b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a81bc:	4770      	bxgt	lr
   a81be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a81c2:	f04f 0300 	mov.w	r3, #0
   a81c6:	3a01      	subs	r2, #1
   a81c8:	e737      	b.n	a803a <__aeabi_fmul+0x92>
   a81ca:	f092 0f00 	teq	r2, #0
   a81ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a81d2:	bf02      	ittt	eq
   a81d4:	0040      	lsleq	r0, r0, #1
   a81d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a81da:	3a01      	subeq	r2, #1
   a81dc:	d0f9      	beq.n	a81d2 <__aeabi_fdiv+0xc2>
   a81de:	ea40 000c 	orr.w	r0, r0, ip
   a81e2:	f093 0f00 	teq	r3, #0
   a81e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a81ea:	bf02      	ittt	eq
   a81ec:	0049      	lsleq	r1, r1, #1
   a81ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a81f2:	3b01      	subeq	r3, #1
   a81f4:	d0f9      	beq.n	a81ea <__aeabi_fdiv+0xda>
   a81f6:	ea41 010c 	orr.w	r1, r1, ip
   a81fa:	e795      	b.n	a8128 <__aeabi_fdiv+0x18>
   a81fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a8200:	ea92 0f0c 	teq	r2, ip
   a8204:	d108      	bne.n	a8218 <__aeabi_fdiv+0x108>
   a8206:	0242      	lsls	r2, r0, #9
   a8208:	f47f af7d 	bne.w	a8106 <__aeabi_fmul+0x15e>
   a820c:	ea93 0f0c 	teq	r3, ip
   a8210:	f47f af70 	bne.w	a80f4 <__aeabi_fmul+0x14c>
   a8214:	4608      	mov	r0, r1
   a8216:	e776      	b.n	a8106 <__aeabi_fmul+0x15e>
   a8218:	ea93 0f0c 	teq	r3, ip
   a821c:	d104      	bne.n	a8228 <__aeabi_fdiv+0x118>
   a821e:	024b      	lsls	r3, r1, #9
   a8220:	f43f af4c 	beq.w	a80bc <__aeabi_fmul+0x114>
   a8224:	4608      	mov	r0, r1
   a8226:	e76e      	b.n	a8106 <__aeabi_fmul+0x15e>
   a8228:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a822c:	bf18      	it	ne
   a822e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a8232:	d1ca      	bne.n	a81ca <__aeabi_fdiv+0xba>
   a8234:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a8238:	f47f af5c 	bne.w	a80f4 <__aeabi_fmul+0x14c>
   a823c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a8240:	f47f af3c 	bne.w	a80bc <__aeabi_fmul+0x114>
   a8244:	e75f      	b.n	a8106 <__aeabi_fmul+0x15e>
   a8246:	bf00      	nop

000a8248 <__gesf2>:
   a8248:	f04f 3cff 	mov.w	ip, #4294967295
   a824c:	e006      	b.n	a825c <__cmpsf2+0x4>
   a824e:	bf00      	nop

000a8250 <__lesf2>:
   a8250:	f04f 0c01 	mov.w	ip, #1
   a8254:	e002      	b.n	a825c <__cmpsf2+0x4>
   a8256:	bf00      	nop

000a8258 <__cmpsf2>:
   a8258:	f04f 0c01 	mov.w	ip, #1
   a825c:	f84d cd04 	str.w	ip, [sp, #-4]!
   a8260:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a8264:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a8268:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a826c:	bf18      	it	ne
   a826e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a8272:	d011      	beq.n	a8298 <__cmpsf2+0x40>
   a8274:	b001      	add	sp, #4
   a8276:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a827a:	bf18      	it	ne
   a827c:	ea90 0f01 	teqne	r0, r1
   a8280:	bf58      	it	pl
   a8282:	ebb2 0003 	subspl.w	r0, r2, r3
   a8286:	bf88      	it	hi
   a8288:	17c8      	asrhi	r0, r1, #31
   a828a:	bf38      	it	cc
   a828c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a8290:	bf18      	it	ne
   a8292:	f040 0001 	orrne.w	r0, r0, #1
   a8296:	4770      	bx	lr
   a8298:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a829c:	d102      	bne.n	a82a4 <__cmpsf2+0x4c>
   a829e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a82a2:	d105      	bne.n	a82b0 <__cmpsf2+0x58>
   a82a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a82a8:	d1e4      	bne.n	a8274 <__cmpsf2+0x1c>
   a82aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a82ae:	d0e1      	beq.n	a8274 <__cmpsf2+0x1c>
   a82b0:	f85d 0b04 	ldr.w	r0, [sp], #4
   a82b4:	4770      	bx	lr
   a82b6:	bf00      	nop

000a82b8 <__aeabi_cfrcmple>:
   a82b8:	4684      	mov	ip, r0
   a82ba:	4608      	mov	r0, r1
   a82bc:	4661      	mov	r1, ip
   a82be:	e7ff      	b.n	a82c0 <__aeabi_cfcmpeq>

000a82c0 <__aeabi_cfcmpeq>:
   a82c0:	b50f      	push	{r0, r1, r2, r3, lr}
   a82c2:	f7ff ffc9 	bl	a8258 <__cmpsf2>
   a82c6:	2800      	cmp	r0, #0
   a82c8:	bf48      	it	mi
   a82ca:	f110 0f00 	cmnmi.w	r0, #0
   a82ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a82d0 <__aeabi_fcmpeq>:
   a82d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a82d4:	f7ff fff4 	bl	a82c0 <__aeabi_cfcmpeq>
   a82d8:	bf0c      	ite	eq
   a82da:	2001      	moveq	r0, #1
   a82dc:	2000      	movne	r0, #0
   a82de:	f85d fb08 	ldr.w	pc, [sp], #8
   a82e2:	bf00      	nop

000a82e4 <__aeabi_fcmplt>:
   a82e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a82e8:	f7ff ffea 	bl	a82c0 <__aeabi_cfcmpeq>
   a82ec:	bf34      	ite	cc
   a82ee:	2001      	movcc	r0, #1
   a82f0:	2000      	movcs	r0, #0
   a82f2:	f85d fb08 	ldr.w	pc, [sp], #8
   a82f6:	bf00      	nop

000a82f8 <__aeabi_fcmple>:
   a82f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a82fc:	f7ff ffe0 	bl	a82c0 <__aeabi_cfcmpeq>
   a8300:	bf94      	ite	ls
   a8302:	2001      	movls	r0, #1
   a8304:	2000      	movhi	r0, #0
   a8306:	f85d fb08 	ldr.w	pc, [sp], #8
   a830a:	bf00      	nop

000a830c <__aeabi_fcmpge>:
   a830c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a8310:	f7ff ffd2 	bl	a82b8 <__aeabi_cfrcmple>
   a8314:	bf94      	ite	ls
   a8316:	2001      	movls	r0, #1
   a8318:	2000      	movhi	r0, #0
   a831a:	f85d fb08 	ldr.w	pc, [sp], #8
   a831e:	bf00      	nop

000a8320 <__aeabi_fcmpgt>:
   a8320:	f84d ed08 	str.w	lr, [sp, #-8]!
   a8324:	f7ff ffc8 	bl	a82b8 <__aeabi_cfrcmple>
   a8328:	bf34      	ite	cc
   a832a:	2001      	movcc	r0, #1
   a832c:	2000      	movcs	r0, #0
   a832e:	f85d fb08 	ldr.w	pc, [sp], #8
   a8332:	bf00      	nop

000a8334 <__aeabi_f2iz>:
   a8334:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a8338:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a833c:	d30f      	bcc.n	a835e <__aeabi_f2iz+0x2a>
   a833e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a8342:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a8346:	d90d      	bls.n	a8364 <__aeabi_f2iz+0x30>
   a8348:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a834c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a8350:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a8354:	fa23 f002 	lsr.w	r0, r3, r2
   a8358:	bf18      	it	ne
   a835a:	4240      	negne	r0, r0
   a835c:	4770      	bx	lr
   a835e:	f04f 0000 	mov.w	r0, #0
   a8362:	4770      	bx	lr
   a8364:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a8368:	d101      	bne.n	a836e <__aeabi_f2iz+0x3a>
   a836a:	0242      	lsls	r2, r0, #9
   a836c:	d105      	bne.n	a837a <__aeabi_f2iz+0x46>
   a836e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a8372:	bf08      	it	eq
   a8374:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a8378:	4770      	bx	lr
   a837a:	f04f 0000 	mov.w	r0, #0
   a837e:	4770      	bx	lr

000a8380 <__aeabi_f2uiz>:
   a8380:	0042      	lsls	r2, r0, #1
   a8382:	d20e      	bcs.n	a83a2 <__aeabi_f2uiz+0x22>
   a8384:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a8388:	d30b      	bcc.n	a83a2 <__aeabi_f2uiz+0x22>
   a838a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a838e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a8392:	d409      	bmi.n	a83a8 <__aeabi_f2uiz+0x28>
   a8394:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a8398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a839c:	fa23 f002 	lsr.w	r0, r3, r2
   a83a0:	4770      	bx	lr
   a83a2:	f04f 0000 	mov.w	r0, #0
   a83a6:	4770      	bx	lr
   a83a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a83ac:	d101      	bne.n	a83b2 <__aeabi_f2uiz+0x32>
   a83ae:	0242      	lsls	r2, r0, #9
   a83b0:	d102      	bne.n	a83b8 <__aeabi_f2uiz+0x38>
   a83b2:	f04f 30ff 	mov.w	r0, #4294967295
   a83b6:	4770      	bx	lr
   a83b8:	f04f 0000 	mov.w	r0, #0
   a83bc:	4770      	bx	lr
   a83be:	bf00      	nop

000a83c0 <__libc_init_array>:
   a83c0:	b570      	push	{r4, r5, r6, lr}
   a83c2:	4e0f      	ldr	r6, [pc, #60]	; (a8400 <__libc_init_array+0x40>)
   a83c4:	4d0f      	ldr	r5, [pc, #60]	; (a8404 <__libc_init_array+0x44>)
   a83c6:	1b76      	subs	r6, r6, r5
   a83c8:	10b6      	asrs	r6, r6, #2
   a83ca:	bf18      	it	ne
   a83cc:	2400      	movne	r4, #0
   a83ce:	d005      	beq.n	a83dc <__libc_init_array+0x1c>
   a83d0:	3401      	adds	r4, #1
   a83d2:	f855 3b04 	ldr.w	r3, [r5], #4
   a83d6:	4798      	blx	r3
   a83d8:	42a6      	cmp	r6, r4
   a83da:	d1f9      	bne.n	a83d0 <__libc_init_array+0x10>
   a83dc:	4e0a      	ldr	r6, [pc, #40]	; (a8408 <__libc_init_array+0x48>)
   a83de:	4d0b      	ldr	r5, [pc, #44]	; (a840c <__libc_init_array+0x4c>)
   a83e0:	f002 f84a 	bl	aa478 <_init>
   a83e4:	1b76      	subs	r6, r6, r5
   a83e6:	10b6      	asrs	r6, r6, #2
   a83e8:	bf18      	it	ne
   a83ea:	2400      	movne	r4, #0
   a83ec:	d006      	beq.n	a83fc <__libc_init_array+0x3c>
   a83ee:	3401      	adds	r4, #1
   a83f0:	f855 3b04 	ldr.w	r3, [r5], #4
   a83f4:	4798      	blx	r3
   a83f6:	42a6      	cmp	r6, r4
   a83f8:	d1f9      	bne.n	a83ee <__libc_init_array+0x2e>
   a83fa:	bd70      	pop	{r4, r5, r6, pc}
   a83fc:	bd70      	pop	{r4, r5, r6, pc}
   a83fe:	bf00      	nop
   a8400:	000aa484 	.word	0x000aa484
   a8404:	000aa484 	.word	0x000aa484
   a8408:	000aa48c 	.word	0x000aa48c
   a840c:	000aa484 	.word	0x000aa484

000a8410 <memcpy>:
   a8410:	4684      	mov	ip, r0
   a8412:	ea41 0300 	orr.w	r3, r1, r0
   a8416:	f013 0303 	ands.w	r3, r3, #3
   a841a:	d149      	bne.n	a84b0 <memcpy+0xa0>
   a841c:	3a40      	subs	r2, #64	; 0x40
   a841e:	d323      	bcc.n	a8468 <memcpy+0x58>
   a8420:	680b      	ldr	r3, [r1, #0]
   a8422:	6003      	str	r3, [r0, #0]
   a8424:	684b      	ldr	r3, [r1, #4]
   a8426:	6043      	str	r3, [r0, #4]
   a8428:	688b      	ldr	r3, [r1, #8]
   a842a:	6083      	str	r3, [r0, #8]
   a842c:	68cb      	ldr	r3, [r1, #12]
   a842e:	60c3      	str	r3, [r0, #12]
   a8430:	690b      	ldr	r3, [r1, #16]
   a8432:	6103      	str	r3, [r0, #16]
   a8434:	694b      	ldr	r3, [r1, #20]
   a8436:	6143      	str	r3, [r0, #20]
   a8438:	698b      	ldr	r3, [r1, #24]
   a843a:	6183      	str	r3, [r0, #24]
   a843c:	69cb      	ldr	r3, [r1, #28]
   a843e:	61c3      	str	r3, [r0, #28]
   a8440:	6a0b      	ldr	r3, [r1, #32]
   a8442:	6203      	str	r3, [r0, #32]
   a8444:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a8446:	6243      	str	r3, [r0, #36]	; 0x24
   a8448:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a844a:	6283      	str	r3, [r0, #40]	; 0x28
   a844c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a844e:	62c3      	str	r3, [r0, #44]	; 0x2c
   a8450:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a8452:	6303      	str	r3, [r0, #48]	; 0x30
   a8454:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a8456:	6343      	str	r3, [r0, #52]	; 0x34
   a8458:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a845a:	6383      	str	r3, [r0, #56]	; 0x38
   a845c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a845e:	63c3      	str	r3, [r0, #60]	; 0x3c
   a8460:	3040      	adds	r0, #64	; 0x40
   a8462:	3140      	adds	r1, #64	; 0x40
   a8464:	3a40      	subs	r2, #64	; 0x40
   a8466:	d2db      	bcs.n	a8420 <memcpy+0x10>
   a8468:	3230      	adds	r2, #48	; 0x30
   a846a:	d30b      	bcc.n	a8484 <memcpy+0x74>
   a846c:	680b      	ldr	r3, [r1, #0]
   a846e:	6003      	str	r3, [r0, #0]
   a8470:	684b      	ldr	r3, [r1, #4]
   a8472:	6043      	str	r3, [r0, #4]
   a8474:	688b      	ldr	r3, [r1, #8]
   a8476:	6083      	str	r3, [r0, #8]
   a8478:	68cb      	ldr	r3, [r1, #12]
   a847a:	60c3      	str	r3, [r0, #12]
   a847c:	3010      	adds	r0, #16
   a847e:	3110      	adds	r1, #16
   a8480:	3a10      	subs	r2, #16
   a8482:	d2f3      	bcs.n	a846c <memcpy+0x5c>
   a8484:	320c      	adds	r2, #12
   a8486:	d305      	bcc.n	a8494 <memcpy+0x84>
   a8488:	f851 3b04 	ldr.w	r3, [r1], #4
   a848c:	f840 3b04 	str.w	r3, [r0], #4
   a8490:	3a04      	subs	r2, #4
   a8492:	d2f9      	bcs.n	a8488 <memcpy+0x78>
   a8494:	3204      	adds	r2, #4
   a8496:	d008      	beq.n	a84aa <memcpy+0x9a>
   a8498:	07d2      	lsls	r2, r2, #31
   a849a:	bf1c      	itt	ne
   a849c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a84a0:	f800 3b01 	strbne.w	r3, [r0], #1
   a84a4:	d301      	bcc.n	a84aa <memcpy+0x9a>
   a84a6:	880b      	ldrh	r3, [r1, #0]
   a84a8:	8003      	strh	r3, [r0, #0]
   a84aa:	4660      	mov	r0, ip
   a84ac:	4770      	bx	lr
   a84ae:	bf00      	nop
   a84b0:	2a08      	cmp	r2, #8
   a84b2:	d313      	bcc.n	a84dc <memcpy+0xcc>
   a84b4:	078b      	lsls	r3, r1, #30
   a84b6:	d0b1      	beq.n	a841c <memcpy+0xc>
   a84b8:	f010 0303 	ands.w	r3, r0, #3
   a84bc:	d0ae      	beq.n	a841c <memcpy+0xc>
   a84be:	f1c3 0304 	rsb	r3, r3, #4
   a84c2:	1ad2      	subs	r2, r2, r3
   a84c4:	07db      	lsls	r3, r3, #31
   a84c6:	bf1c      	itt	ne
   a84c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a84cc:	f800 3b01 	strbne.w	r3, [r0], #1
   a84d0:	d3a4      	bcc.n	a841c <memcpy+0xc>
   a84d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   a84d6:	f820 3b02 	strh.w	r3, [r0], #2
   a84da:	e79f      	b.n	a841c <memcpy+0xc>
   a84dc:	3a04      	subs	r2, #4
   a84de:	d3d9      	bcc.n	a8494 <memcpy+0x84>
   a84e0:	3a01      	subs	r2, #1
   a84e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   a84e6:	f800 3b01 	strb.w	r3, [r0], #1
   a84ea:	d2f9      	bcs.n	a84e0 <memcpy+0xd0>
   a84ec:	780b      	ldrb	r3, [r1, #0]
   a84ee:	7003      	strb	r3, [r0, #0]
   a84f0:	784b      	ldrb	r3, [r1, #1]
   a84f2:	7043      	strb	r3, [r0, #1]
   a84f4:	788b      	ldrb	r3, [r1, #2]
   a84f6:	7083      	strb	r3, [r0, #2]
   a84f8:	4660      	mov	r0, ip
   a84fa:	4770      	bx	lr

000a84fc <memset>:
   a84fc:	b470      	push	{r4, r5, r6}
   a84fe:	0784      	lsls	r4, r0, #30
   a8500:	d046      	beq.n	a8590 <memset+0x94>
   a8502:	1e54      	subs	r4, r2, #1
   a8504:	2a00      	cmp	r2, #0
   a8506:	d041      	beq.n	a858c <memset+0x90>
   a8508:	b2cd      	uxtb	r5, r1
   a850a:	4603      	mov	r3, r0
   a850c:	e002      	b.n	a8514 <memset+0x18>
   a850e:	1e62      	subs	r2, r4, #1
   a8510:	b3e4      	cbz	r4, a858c <memset+0x90>
   a8512:	4614      	mov	r4, r2
   a8514:	f803 5b01 	strb.w	r5, [r3], #1
   a8518:	079a      	lsls	r2, r3, #30
   a851a:	d1f8      	bne.n	a850e <memset+0x12>
   a851c:	2c03      	cmp	r4, #3
   a851e:	d92e      	bls.n	a857e <memset+0x82>
   a8520:	b2cd      	uxtb	r5, r1
   a8522:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a8526:	2c0f      	cmp	r4, #15
   a8528:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a852c:	d919      	bls.n	a8562 <memset+0x66>
   a852e:	4626      	mov	r6, r4
   a8530:	f103 0210 	add.w	r2, r3, #16
   a8534:	3e10      	subs	r6, #16
   a8536:	2e0f      	cmp	r6, #15
   a8538:	f842 5c10 	str.w	r5, [r2, #-16]
   a853c:	f842 5c0c 	str.w	r5, [r2, #-12]
   a8540:	f842 5c08 	str.w	r5, [r2, #-8]
   a8544:	f842 5c04 	str.w	r5, [r2, #-4]
   a8548:	f102 0210 	add.w	r2, r2, #16
   a854c:	d8f2      	bhi.n	a8534 <memset+0x38>
   a854e:	f1a4 0210 	sub.w	r2, r4, #16
   a8552:	f022 020f 	bic.w	r2, r2, #15
   a8556:	f004 040f 	and.w	r4, r4, #15
   a855a:	3210      	adds	r2, #16
   a855c:	2c03      	cmp	r4, #3
   a855e:	4413      	add	r3, r2
   a8560:	d90d      	bls.n	a857e <memset+0x82>
   a8562:	461e      	mov	r6, r3
   a8564:	4622      	mov	r2, r4
   a8566:	3a04      	subs	r2, #4
   a8568:	2a03      	cmp	r2, #3
   a856a:	f846 5b04 	str.w	r5, [r6], #4
   a856e:	d8fa      	bhi.n	a8566 <memset+0x6a>
   a8570:	1f22      	subs	r2, r4, #4
   a8572:	f022 0203 	bic.w	r2, r2, #3
   a8576:	3204      	adds	r2, #4
   a8578:	4413      	add	r3, r2
   a857a:	f004 0403 	and.w	r4, r4, #3
   a857e:	b12c      	cbz	r4, a858c <memset+0x90>
   a8580:	b2c9      	uxtb	r1, r1
   a8582:	441c      	add	r4, r3
   a8584:	f803 1b01 	strb.w	r1, [r3], #1
   a8588:	42a3      	cmp	r3, r4
   a858a:	d1fb      	bne.n	a8584 <memset+0x88>
   a858c:	bc70      	pop	{r4, r5, r6}
   a858e:	4770      	bx	lr
   a8590:	4614      	mov	r4, r2
   a8592:	4603      	mov	r3, r0
   a8594:	e7c2      	b.n	a851c <memset+0x20>
   a8596:	bf00      	nop

000a8598 <_puts_r>:
   a8598:	b5f0      	push	{r4, r5, r6, r7, lr}
   a859a:	4605      	mov	r5, r0
   a859c:	b089      	sub	sp, #36	; 0x24
   a859e:	4608      	mov	r0, r1
   a85a0:	460c      	mov	r4, r1
   a85a2:	f000 f8e5 	bl	a8770 <strlen>
   a85a6:	1c43      	adds	r3, r0, #1
   a85a8:	4f14      	ldr	r7, [pc, #80]	; (a85fc <_puts_r+0x64>)
   a85aa:	9303      	str	r3, [sp, #12]
   a85ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a85ae:	2601      	movs	r6, #1
   a85b0:	a904      	add	r1, sp, #16
   a85b2:	2202      	movs	r2, #2
   a85b4:	9404      	str	r4, [sp, #16]
   a85b6:	9005      	str	r0, [sp, #20]
   a85b8:	68ac      	ldr	r4, [r5, #8]
   a85ba:	9706      	str	r7, [sp, #24]
   a85bc:	9607      	str	r6, [sp, #28]
   a85be:	9101      	str	r1, [sp, #4]
   a85c0:	9202      	str	r2, [sp, #8]
   a85c2:	b1b3      	cbz	r3, a85f2 <_puts_r+0x5a>
   a85c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a85c8:	049a      	lsls	r2, r3, #18
   a85ca:	d406      	bmi.n	a85da <_puts_r+0x42>
   a85cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   a85ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a85d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   a85d6:	81a3      	strh	r3, [r4, #12]
   a85d8:	6662      	str	r2, [r4, #100]	; 0x64
   a85da:	4621      	mov	r1, r4
   a85dc:	4628      	mov	r0, r5
   a85de:	aa01      	add	r2, sp, #4
   a85e0:	f000 fbf4 	bl	a8dcc <__sfvwrite_r>
   a85e4:	2800      	cmp	r0, #0
   a85e6:	bf14      	ite	ne
   a85e8:	f04f 30ff 	movne.w	r0, #4294967295
   a85ec:	200a      	moveq	r0, #10
   a85ee:	b009      	add	sp, #36	; 0x24
   a85f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a85f2:	4628      	mov	r0, r5
   a85f4:	f000 fa96 	bl	a8b24 <__sinit>
   a85f8:	e7e4      	b.n	a85c4 <_puts_r+0x2c>
   a85fa:	bf00      	nop
   a85fc:	000aa474 	.word	0x000aa474

000a8600 <puts>:
   a8600:	4b02      	ldr	r3, [pc, #8]	; (a860c <puts+0xc>)
   a8602:	4601      	mov	r1, r0
   a8604:	6818      	ldr	r0, [r3, #0]
   a8606:	f7ff bfc7 	b.w	a8598 <_puts_r>
   a860a:	bf00      	nop
   a860c:	20071190 	.word	0x20071190

000a8610 <setbuf>:
   a8610:	2900      	cmp	r1, #0
   a8612:	bf0c      	ite	eq
   a8614:	2202      	moveq	r2, #2
   a8616:	2200      	movne	r2, #0
   a8618:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a861c:	f000 b800 	b.w	a8620 <setvbuf>

000a8620 <setvbuf>:
   a8620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a8624:	4d51      	ldr	r5, [pc, #324]	; (a876c <setvbuf+0x14c>)
   a8626:	b083      	sub	sp, #12
   a8628:	682d      	ldr	r5, [r5, #0]
   a862a:	4604      	mov	r4, r0
   a862c:	460f      	mov	r7, r1
   a862e:	4690      	mov	r8, r2
   a8630:	461e      	mov	r6, r3
   a8632:	b115      	cbz	r5, a863a <setvbuf+0x1a>
   a8634:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a8636:	2b00      	cmp	r3, #0
   a8638:	d079      	beq.n	a872e <setvbuf+0x10e>
   a863a:	f1b8 0f02 	cmp.w	r8, #2
   a863e:	d004      	beq.n	a864a <setvbuf+0x2a>
   a8640:	f1b8 0f01 	cmp.w	r8, #1
   a8644:	d87f      	bhi.n	a8746 <setvbuf+0x126>
   a8646:	2e00      	cmp	r6, #0
   a8648:	db7d      	blt.n	a8746 <setvbuf+0x126>
   a864a:	4621      	mov	r1, r4
   a864c:	4628      	mov	r0, r5
   a864e:	f000 f9d5 	bl	a89fc <_fflush_r>
   a8652:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a8654:	b141      	cbz	r1, a8668 <setvbuf+0x48>
   a8656:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a865a:	4299      	cmp	r1, r3
   a865c:	d002      	beq.n	a8664 <setvbuf+0x44>
   a865e:	4628      	mov	r0, r5
   a8660:	f000 facc 	bl	a8bfc <_free_r>
   a8664:	2300      	movs	r3, #0
   a8666:	6323      	str	r3, [r4, #48]	; 0x30
   a8668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a866c:	2200      	movs	r2, #0
   a866e:	61a2      	str	r2, [r4, #24]
   a8670:	6062      	str	r2, [r4, #4]
   a8672:	061a      	lsls	r2, r3, #24
   a8674:	d454      	bmi.n	a8720 <setvbuf+0x100>
   a8676:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   a867a:	f023 0303 	bic.w	r3, r3, #3
   a867e:	f1b8 0f02 	cmp.w	r8, #2
   a8682:	81a3      	strh	r3, [r4, #12]
   a8684:	d039      	beq.n	a86fa <setvbuf+0xda>
   a8686:	ab01      	add	r3, sp, #4
   a8688:	466a      	mov	r2, sp
   a868a:	4621      	mov	r1, r4
   a868c:	4628      	mov	r0, r5
   a868e:	f000 fd49 	bl	a9124 <__swhatbuf_r>
   a8692:	89a3      	ldrh	r3, [r4, #12]
   a8694:	4318      	orrs	r0, r3
   a8696:	81a0      	strh	r0, [r4, #12]
   a8698:	b326      	cbz	r6, a86e4 <setvbuf+0xc4>
   a869a:	b327      	cbz	r7, a86e6 <setvbuf+0xc6>
   a869c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a869e:	2b00      	cmp	r3, #0
   a86a0:	d04d      	beq.n	a873e <setvbuf+0x11e>
   a86a2:	9b00      	ldr	r3, [sp, #0]
   a86a4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   a86a8:	429e      	cmp	r6, r3
   a86aa:	bf1c      	itt	ne
   a86ac:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   a86b0:	81a0      	strhne	r0, [r4, #12]
   a86b2:	f1b8 0f01 	cmp.w	r8, #1
   a86b6:	bf08      	it	eq
   a86b8:	f040 0001 	orreq.w	r0, r0, #1
   a86bc:	b283      	uxth	r3, r0
   a86be:	bf08      	it	eq
   a86c0:	81a0      	strheq	r0, [r4, #12]
   a86c2:	f003 0008 	and.w	r0, r3, #8
   a86c6:	b280      	uxth	r0, r0
   a86c8:	6027      	str	r7, [r4, #0]
   a86ca:	6127      	str	r7, [r4, #16]
   a86cc:	6166      	str	r6, [r4, #20]
   a86ce:	b318      	cbz	r0, a8718 <setvbuf+0xf8>
   a86d0:	f013 0001 	ands.w	r0, r3, #1
   a86d4:	d02f      	beq.n	a8736 <setvbuf+0x116>
   a86d6:	2000      	movs	r0, #0
   a86d8:	4276      	negs	r6, r6
   a86da:	61a6      	str	r6, [r4, #24]
   a86dc:	60a0      	str	r0, [r4, #8]
   a86de:	b003      	add	sp, #12
   a86e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a86e4:	9e00      	ldr	r6, [sp, #0]
   a86e6:	4630      	mov	r0, r6
   a86e8:	f000 fd90 	bl	a920c <malloc>
   a86ec:	4607      	mov	r7, r0
   a86ee:	b368      	cbz	r0, a874c <setvbuf+0x12c>
   a86f0:	89a3      	ldrh	r3, [r4, #12]
   a86f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a86f6:	81a3      	strh	r3, [r4, #12]
   a86f8:	e7d0      	b.n	a869c <setvbuf+0x7c>
   a86fa:	2000      	movs	r0, #0
   a86fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a8700:	f043 0302 	orr.w	r3, r3, #2
   a8704:	2500      	movs	r5, #0
   a8706:	2101      	movs	r1, #1
   a8708:	81a3      	strh	r3, [r4, #12]
   a870a:	60a5      	str	r5, [r4, #8]
   a870c:	6022      	str	r2, [r4, #0]
   a870e:	6122      	str	r2, [r4, #16]
   a8710:	6161      	str	r1, [r4, #20]
   a8712:	b003      	add	sp, #12
   a8714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a8718:	60a0      	str	r0, [r4, #8]
   a871a:	b003      	add	sp, #12
   a871c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a8720:	6921      	ldr	r1, [r4, #16]
   a8722:	4628      	mov	r0, r5
   a8724:	f000 fa6a 	bl	a8bfc <_free_r>
   a8728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a872c:	e7a3      	b.n	a8676 <setvbuf+0x56>
   a872e:	4628      	mov	r0, r5
   a8730:	f000 f9f8 	bl	a8b24 <__sinit>
   a8734:	e781      	b.n	a863a <setvbuf+0x1a>
   a8736:	60a6      	str	r6, [r4, #8]
   a8738:	b003      	add	sp, #12
   a873a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a873e:	4628      	mov	r0, r5
   a8740:	f000 f9f0 	bl	a8b24 <__sinit>
   a8744:	e7ad      	b.n	a86a2 <setvbuf+0x82>
   a8746:	f04f 30ff 	mov.w	r0, #4294967295
   a874a:	e7e2      	b.n	a8712 <setvbuf+0xf2>
   a874c:	f8dd 9000 	ldr.w	r9, [sp]
   a8750:	45b1      	cmp	r9, r6
   a8752:	d006      	beq.n	a8762 <setvbuf+0x142>
   a8754:	4648      	mov	r0, r9
   a8756:	f000 fd59 	bl	a920c <malloc>
   a875a:	4607      	mov	r7, r0
   a875c:	b108      	cbz	r0, a8762 <setvbuf+0x142>
   a875e:	464e      	mov	r6, r9
   a8760:	e7c6      	b.n	a86f0 <setvbuf+0xd0>
   a8762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a8766:	f04f 30ff 	mov.w	r0, #4294967295
   a876a:	e7c7      	b.n	a86fc <setvbuf+0xdc>
   a876c:	20071190 	.word	0x20071190

000a8770 <strlen>:
   a8770:	f020 0103 	bic.w	r1, r0, #3
   a8774:	f010 0003 	ands.w	r0, r0, #3
   a8778:	f1c0 0000 	rsb	r0, r0, #0
   a877c:	f851 3b04 	ldr.w	r3, [r1], #4
   a8780:	f100 0c04 	add.w	ip, r0, #4
   a8784:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a8788:	f06f 0200 	mvn.w	r2, #0
   a878c:	bf1c      	itt	ne
   a878e:	fa22 f20c 	lsrne.w	r2, r2, ip
   a8792:	4313      	orrne	r3, r2
   a8794:	f04f 0c01 	mov.w	ip, #1
   a8798:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a879c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a87a0:	eba3 020c 	sub.w	r2, r3, ip
   a87a4:	ea22 0203 	bic.w	r2, r2, r3
   a87a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a87ac:	bf04      	itt	eq
   a87ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   a87b2:	3004      	addeq	r0, #4
   a87b4:	d0f4      	beq.n	a87a0 <strlen+0x30>
   a87b6:	f1c2 0100 	rsb	r1, r2, #0
   a87ba:	ea02 0201 	and.w	r2, r2, r1
   a87be:	fab2 f282 	clz	r2, r2
   a87c2:	f1c2 021f 	rsb	r2, r2, #31
   a87c6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a87ca:	4770      	bx	lr

000a87cc <__swsetup_r>:
   a87cc:	b538      	push	{r3, r4, r5, lr}
   a87ce:	4b30      	ldr	r3, [pc, #192]	; (a8890 <__swsetup_r+0xc4>)
   a87d0:	4605      	mov	r5, r0
   a87d2:	6818      	ldr	r0, [r3, #0]
   a87d4:	460c      	mov	r4, r1
   a87d6:	b110      	cbz	r0, a87de <__swsetup_r+0x12>
   a87d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a87da:	2b00      	cmp	r3, #0
   a87dc:	d038      	beq.n	a8850 <__swsetup_r+0x84>
   a87de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a87e2:	b293      	uxth	r3, r2
   a87e4:	0718      	lsls	r0, r3, #28
   a87e6:	d50c      	bpl.n	a8802 <__swsetup_r+0x36>
   a87e8:	6920      	ldr	r0, [r4, #16]
   a87ea:	b1a8      	cbz	r0, a8818 <__swsetup_r+0x4c>
   a87ec:	f013 0201 	ands.w	r2, r3, #1
   a87f0:	d01e      	beq.n	a8830 <__swsetup_r+0x64>
   a87f2:	6963      	ldr	r3, [r4, #20]
   a87f4:	2200      	movs	r2, #0
   a87f6:	425b      	negs	r3, r3
   a87f8:	61a3      	str	r3, [r4, #24]
   a87fa:	60a2      	str	r2, [r4, #8]
   a87fc:	b1f0      	cbz	r0, a883c <__swsetup_r+0x70>
   a87fe:	2000      	movs	r0, #0
   a8800:	bd38      	pop	{r3, r4, r5, pc}
   a8802:	06d9      	lsls	r1, r3, #27
   a8804:	d53b      	bpl.n	a887e <__swsetup_r+0xb2>
   a8806:	0758      	lsls	r0, r3, #29
   a8808:	d425      	bmi.n	a8856 <__swsetup_r+0x8a>
   a880a:	6920      	ldr	r0, [r4, #16]
   a880c:	f042 0308 	orr.w	r3, r2, #8
   a8810:	81a3      	strh	r3, [r4, #12]
   a8812:	b29b      	uxth	r3, r3
   a8814:	2800      	cmp	r0, #0
   a8816:	d1e9      	bne.n	a87ec <__swsetup_r+0x20>
   a8818:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a881c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a8820:	d0e4      	beq.n	a87ec <__swsetup_r+0x20>
   a8822:	4628      	mov	r0, r5
   a8824:	4621      	mov	r1, r4
   a8826:	f000 fcad 	bl	a9184 <__smakebuf_r>
   a882a:	89a3      	ldrh	r3, [r4, #12]
   a882c:	6920      	ldr	r0, [r4, #16]
   a882e:	e7dd      	b.n	a87ec <__swsetup_r+0x20>
   a8830:	0799      	lsls	r1, r3, #30
   a8832:	bf58      	it	pl
   a8834:	6962      	ldrpl	r2, [r4, #20]
   a8836:	60a2      	str	r2, [r4, #8]
   a8838:	2800      	cmp	r0, #0
   a883a:	d1e0      	bne.n	a87fe <__swsetup_r+0x32>
   a883c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a8840:	061a      	lsls	r2, r3, #24
   a8842:	d5dd      	bpl.n	a8800 <__swsetup_r+0x34>
   a8844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a8848:	81a3      	strh	r3, [r4, #12]
   a884a:	f04f 30ff 	mov.w	r0, #4294967295
   a884e:	bd38      	pop	{r3, r4, r5, pc}
   a8850:	f000 f968 	bl	a8b24 <__sinit>
   a8854:	e7c3      	b.n	a87de <__swsetup_r+0x12>
   a8856:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a8858:	b151      	cbz	r1, a8870 <__swsetup_r+0xa4>
   a885a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a885e:	4299      	cmp	r1, r3
   a8860:	d004      	beq.n	a886c <__swsetup_r+0xa0>
   a8862:	4628      	mov	r0, r5
   a8864:	f000 f9ca 	bl	a8bfc <_free_r>
   a8868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a886c:	2300      	movs	r3, #0
   a886e:	6323      	str	r3, [r4, #48]	; 0x30
   a8870:	6920      	ldr	r0, [r4, #16]
   a8872:	2300      	movs	r3, #0
   a8874:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a8878:	e884 0009 	stmia.w	r4, {r0, r3}
   a887c:	e7c6      	b.n	a880c <__swsetup_r+0x40>
   a887e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a8882:	2309      	movs	r3, #9
   a8884:	602b      	str	r3, [r5, #0]
   a8886:	f04f 30ff 	mov.w	r0, #4294967295
   a888a:	81a2      	strh	r2, [r4, #12]
   a888c:	bd38      	pop	{r3, r4, r5, pc}
   a888e:	bf00      	nop
   a8890:	20071190 	.word	0x20071190

000a8894 <register_fini>:
   a8894:	4b02      	ldr	r3, [pc, #8]	; (a88a0 <register_fini+0xc>)
   a8896:	b113      	cbz	r3, a889e <register_fini+0xa>
   a8898:	4802      	ldr	r0, [pc, #8]	; (a88a4 <register_fini+0x10>)
   a889a:	f000 b805 	b.w	a88a8 <atexit>
   a889e:	4770      	bx	lr
   a88a0:	00000000 	.word	0x00000000
   a88a4:	000a8b39 	.word	0x000a8b39

000a88a8 <atexit>:
   a88a8:	2300      	movs	r3, #0
   a88aa:	4601      	mov	r1, r0
   a88ac:	461a      	mov	r2, r3
   a88ae:	4618      	mov	r0, r3
   a88b0:	f001 ba64 	b.w	a9d7c <__register_exitproc>

000a88b4 <__sflush_r>:
   a88b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   a88b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a88bc:	b29a      	uxth	r2, r3
   a88be:	460d      	mov	r5, r1
   a88c0:	0711      	lsls	r1, r2, #28
   a88c2:	4680      	mov	r8, r0
   a88c4:	d43c      	bmi.n	a8940 <__sflush_r+0x8c>
   a88c6:	686a      	ldr	r2, [r5, #4]
   a88c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a88cc:	2a00      	cmp	r2, #0
   a88ce:	81ab      	strh	r3, [r5, #12]
   a88d0:	dd73      	ble.n	a89ba <__sflush_r+0x106>
   a88d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a88d4:	2c00      	cmp	r4, #0
   a88d6:	d04b      	beq.n	a8970 <__sflush_r+0xbc>
   a88d8:	b29b      	uxth	r3, r3
   a88da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a88de:	2100      	movs	r1, #0
   a88e0:	b292      	uxth	r2, r2
   a88e2:	f8d8 6000 	ldr.w	r6, [r8]
   a88e6:	f8c8 1000 	str.w	r1, [r8]
   a88ea:	2a00      	cmp	r2, #0
   a88ec:	d069      	beq.n	a89c2 <__sflush_r+0x10e>
   a88ee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a88f0:	075f      	lsls	r7, r3, #29
   a88f2:	d505      	bpl.n	a8900 <__sflush_r+0x4c>
   a88f4:	6869      	ldr	r1, [r5, #4]
   a88f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a88f8:	1a52      	subs	r2, r2, r1
   a88fa:	b10b      	cbz	r3, a8900 <__sflush_r+0x4c>
   a88fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a88fe:	1ad2      	subs	r2, r2, r3
   a8900:	2300      	movs	r3, #0
   a8902:	69e9      	ldr	r1, [r5, #28]
   a8904:	4640      	mov	r0, r8
   a8906:	47a0      	blx	r4
   a8908:	1c44      	adds	r4, r0, #1
   a890a:	d03c      	beq.n	a8986 <__sflush_r+0xd2>
   a890c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a8910:	6929      	ldr	r1, [r5, #16]
   a8912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a8916:	2200      	movs	r2, #0
   a8918:	81ab      	strh	r3, [r5, #12]
   a891a:	04db      	lsls	r3, r3, #19
   a891c:	e885 0006 	stmia.w	r5, {r1, r2}
   a8920:	d449      	bmi.n	a89b6 <__sflush_r+0x102>
   a8922:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a8924:	f8c8 6000 	str.w	r6, [r8]
   a8928:	b311      	cbz	r1, a8970 <__sflush_r+0xbc>
   a892a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a892e:	4299      	cmp	r1, r3
   a8930:	d002      	beq.n	a8938 <__sflush_r+0x84>
   a8932:	4640      	mov	r0, r8
   a8934:	f000 f962 	bl	a8bfc <_free_r>
   a8938:	2000      	movs	r0, #0
   a893a:	6328      	str	r0, [r5, #48]	; 0x30
   a893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8940:	692e      	ldr	r6, [r5, #16]
   a8942:	b1ae      	cbz	r6, a8970 <__sflush_r+0xbc>
   a8944:	0790      	lsls	r0, r2, #30
   a8946:	682c      	ldr	r4, [r5, #0]
   a8948:	bf0c      	ite	eq
   a894a:	696b      	ldreq	r3, [r5, #20]
   a894c:	2300      	movne	r3, #0
   a894e:	602e      	str	r6, [r5, #0]
   a8950:	1ba4      	subs	r4, r4, r6
   a8952:	60ab      	str	r3, [r5, #8]
   a8954:	e00a      	b.n	a896c <__sflush_r+0xb8>
   a8956:	4623      	mov	r3, r4
   a8958:	4632      	mov	r2, r6
   a895a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a895c:	69e9      	ldr	r1, [r5, #28]
   a895e:	4640      	mov	r0, r8
   a8960:	47b8      	blx	r7
   a8962:	2800      	cmp	r0, #0
   a8964:	eba4 0400 	sub.w	r4, r4, r0
   a8968:	4406      	add	r6, r0
   a896a:	dd04      	ble.n	a8976 <__sflush_r+0xc2>
   a896c:	2c00      	cmp	r4, #0
   a896e:	dcf2      	bgt.n	a8956 <__sflush_r+0xa2>
   a8970:	2000      	movs	r0, #0
   a8972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8976:	89ab      	ldrh	r3, [r5, #12]
   a8978:	f04f 30ff 	mov.w	r0, #4294967295
   a897c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a8980:	81ab      	strh	r3, [r5, #12]
   a8982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a8986:	f8d8 2000 	ldr.w	r2, [r8]
   a898a:	2a1d      	cmp	r2, #29
   a898c:	d8f3      	bhi.n	a8976 <__sflush_r+0xc2>
   a898e:	4b1a      	ldr	r3, [pc, #104]	; (a89f8 <__sflush_r+0x144>)
   a8990:	40d3      	lsrs	r3, r2
   a8992:	f003 0301 	and.w	r3, r3, #1
   a8996:	f083 0401 	eor.w	r4, r3, #1
   a899a:	2b00      	cmp	r3, #0
   a899c:	d0eb      	beq.n	a8976 <__sflush_r+0xc2>
   a899e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a89a2:	6929      	ldr	r1, [r5, #16]
   a89a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a89a8:	6029      	str	r1, [r5, #0]
   a89aa:	04d9      	lsls	r1, r3, #19
   a89ac:	606c      	str	r4, [r5, #4]
   a89ae:	81ab      	strh	r3, [r5, #12]
   a89b0:	d5b7      	bpl.n	a8922 <__sflush_r+0x6e>
   a89b2:	2a00      	cmp	r2, #0
   a89b4:	d1b5      	bne.n	a8922 <__sflush_r+0x6e>
   a89b6:	6528      	str	r0, [r5, #80]	; 0x50
   a89b8:	e7b3      	b.n	a8922 <__sflush_r+0x6e>
   a89ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a89bc:	2a00      	cmp	r2, #0
   a89be:	dc88      	bgt.n	a88d2 <__sflush_r+0x1e>
   a89c0:	e7d6      	b.n	a8970 <__sflush_r+0xbc>
   a89c2:	2301      	movs	r3, #1
   a89c4:	69e9      	ldr	r1, [r5, #28]
   a89c6:	4640      	mov	r0, r8
   a89c8:	47a0      	blx	r4
   a89ca:	1c43      	adds	r3, r0, #1
   a89cc:	4602      	mov	r2, r0
   a89ce:	d002      	beq.n	a89d6 <__sflush_r+0x122>
   a89d0:	89ab      	ldrh	r3, [r5, #12]
   a89d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a89d4:	e78c      	b.n	a88f0 <__sflush_r+0x3c>
   a89d6:	f8d8 3000 	ldr.w	r3, [r8]
   a89da:	2b00      	cmp	r3, #0
   a89dc:	d0f8      	beq.n	a89d0 <__sflush_r+0x11c>
   a89de:	2b1d      	cmp	r3, #29
   a89e0:	d001      	beq.n	a89e6 <__sflush_r+0x132>
   a89e2:	2b16      	cmp	r3, #22
   a89e4:	d102      	bne.n	a89ec <__sflush_r+0x138>
   a89e6:	f8c8 6000 	str.w	r6, [r8]
   a89ea:	e7c1      	b.n	a8970 <__sflush_r+0xbc>
   a89ec:	89ab      	ldrh	r3, [r5, #12]
   a89ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a89f2:	81ab      	strh	r3, [r5, #12]
   a89f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a89f8:	20400001 	.word	0x20400001

000a89fc <_fflush_r>:
   a89fc:	b510      	push	{r4, lr}
   a89fe:	4604      	mov	r4, r0
   a8a00:	b082      	sub	sp, #8
   a8a02:	b108      	cbz	r0, a8a08 <_fflush_r+0xc>
   a8a04:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a8a06:	b153      	cbz	r3, a8a1e <_fflush_r+0x22>
   a8a08:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a8a0c:	b908      	cbnz	r0, a8a12 <_fflush_r+0x16>
   a8a0e:	b002      	add	sp, #8
   a8a10:	bd10      	pop	{r4, pc}
   a8a12:	4620      	mov	r0, r4
   a8a14:	b002      	add	sp, #8
   a8a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a8a1a:	f7ff bf4b 	b.w	a88b4 <__sflush_r>
   a8a1e:	9101      	str	r1, [sp, #4]
   a8a20:	f000 f880 	bl	a8b24 <__sinit>
   a8a24:	9901      	ldr	r1, [sp, #4]
   a8a26:	e7ef      	b.n	a8a08 <_fflush_r+0xc>

000a8a28 <_cleanup_r>:
   a8a28:	4901      	ldr	r1, [pc, #4]	; (a8a30 <_cleanup_r+0x8>)
   a8a2a:	f000 bb53 	b.w	a90d4 <_fwalk_reent>
   a8a2e:	bf00      	nop
   a8a30:	000a9e45 	.word	0x000a9e45

000a8a34 <__sinit.part.1>:
   a8a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a8a38:	4607      	mov	r7, r0
   a8a3a:	4835      	ldr	r0, [pc, #212]	; (a8b10 <__sinit.part.1+0xdc>)
   a8a3c:	687d      	ldr	r5, [r7, #4]
   a8a3e:	2400      	movs	r4, #0
   a8a40:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a8a44:	2304      	movs	r3, #4
   a8a46:	2103      	movs	r1, #3
   a8a48:	63f8      	str	r0, [r7, #60]	; 0x3c
   a8a4a:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a8a4e:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a8a52:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a8a56:	b083      	sub	sp, #12
   a8a58:	602c      	str	r4, [r5, #0]
   a8a5a:	606c      	str	r4, [r5, #4]
   a8a5c:	60ac      	str	r4, [r5, #8]
   a8a5e:	666c      	str	r4, [r5, #100]	; 0x64
   a8a60:	81ec      	strh	r4, [r5, #14]
   a8a62:	612c      	str	r4, [r5, #16]
   a8a64:	616c      	str	r4, [r5, #20]
   a8a66:	61ac      	str	r4, [r5, #24]
   a8a68:	81ab      	strh	r3, [r5, #12]
   a8a6a:	4621      	mov	r1, r4
   a8a6c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a8a70:	2208      	movs	r2, #8
   a8a72:	f7ff fd43 	bl	a84fc <memset>
   a8a76:	f8df b09c 	ldr.w	fp, [pc, #156]	; a8b14 <__sinit.part.1+0xe0>
   a8a7a:	68be      	ldr	r6, [r7, #8]
   a8a7c:	f8df a098 	ldr.w	sl, [pc, #152]	; a8b18 <__sinit.part.1+0xe4>
   a8a80:	f8df 9098 	ldr.w	r9, [pc, #152]	; a8b1c <__sinit.part.1+0xe8>
   a8a84:	f8df 8098 	ldr.w	r8, [pc, #152]	; a8b20 <__sinit.part.1+0xec>
   a8a88:	2301      	movs	r3, #1
   a8a8a:	2209      	movs	r2, #9
   a8a8c:	f8c5 b020 	str.w	fp, [r5, #32]
   a8a90:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a8a94:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a8a98:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a8a9c:	61ed      	str	r5, [r5, #28]
   a8a9e:	4621      	mov	r1, r4
   a8aa0:	81f3      	strh	r3, [r6, #14]
   a8aa2:	81b2      	strh	r2, [r6, #12]
   a8aa4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a8aa8:	6034      	str	r4, [r6, #0]
   a8aaa:	6074      	str	r4, [r6, #4]
   a8aac:	60b4      	str	r4, [r6, #8]
   a8aae:	6674      	str	r4, [r6, #100]	; 0x64
   a8ab0:	6134      	str	r4, [r6, #16]
   a8ab2:	6174      	str	r4, [r6, #20]
   a8ab4:	61b4      	str	r4, [r6, #24]
   a8ab6:	2208      	movs	r2, #8
   a8ab8:	9301      	str	r3, [sp, #4]
   a8aba:	f7ff fd1f 	bl	a84fc <memset>
   a8abe:	68fd      	ldr	r5, [r7, #12]
   a8ac0:	2012      	movs	r0, #18
   a8ac2:	2202      	movs	r2, #2
   a8ac4:	61f6      	str	r6, [r6, #28]
   a8ac6:	f8c6 b020 	str.w	fp, [r6, #32]
   a8aca:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a8ace:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a8ad2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a8ad6:	4621      	mov	r1, r4
   a8ad8:	81a8      	strh	r0, [r5, #12]
   a8ada:	81ea      	strh	r2, [r5, #14]
   a8adc:	602c      	str	r4, [r5, #0]
   a8ade:	606c      	str	r4, [r5, #4]
   a8ae0:	60ac      	str	r4, [r5, #8]
   a8ae2:	666c      	str	r4, [r5, #100]	; 0x64
   a8ae4:	612c      	str	r4, [r5, #16]
   a8ae6:	616c      	str	r4, [r5, #20]
   a8ae8:	61ac      	str	r4, [r5, #24]
   a8aea:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a8aee:	2208      	movs	r2, #8
   a8af0:	f7ff fd04 	bl	a84fc <memset>
   a8af4:	9b01      	ldr	r3, [sp, #4]
   a8af6:	61ed      	str	r5, [r5, #28]
   a8af8:	f8c5 b020 	str.w	fp, [r5, #32]
   a8afc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a8b00:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a8b04:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a8b08:	63bb      	str	r3, [r7, #56]	; 0x38
   a8b0a:	b003      	add	sp, #12
   a8b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a8b10:	000a8a29 	.word	0x000a8a29
   a8b14:	000a9cc9 	.word	0x000a9cc9
   a8b18:	000a9ced 	.word	0x000a9ced
   a8b1c:	000a9d29 	.word	0x000a9d29
   a8b20:	000a9d49 	.word	0x000a9d49

000a8b24 <__sinit>:
   a8b24:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a8b26:	b103      	cbz	r3, a8b2a <__sinit+0x6>
   a8b28:	4770      	bx	lr
   a8b2a:	f7ff bf83 	b.w	a8a34 <__sinit.part.1>
   a8b2e:	bf00      	nop

000a8b30 <__sfp_lock_acquire>:
   a8b30:	4770      	bx	lr
   a8b32:	bf00      	nop

000a8b34 <__sfp_lock_release>:
   a8b34:	4770      	bx	lr
   a8b36:	bf00      	nop

000a8b38 <__libc_fini_array>:
   a8b38:	b538      	push	{r3, r4, r5, lr}
   a8b3a:	4d07      	ldr	r5, [pc, #28]	; (a8b58 <__libc_fini_array+0x20>)
   a8b3c:	4c07      	ldr	r4, [pc, #28]	; (a8b5c <__libc_fini_array+0x24>)
   a8b3e:	1b2c      	subs	r4, r5, r4
   a8b40:	10a4      	asrs	r4, r4, #2
   a8b42:	d005      	beq.n	a8b50 <__libc_fini_array+0x18>
   a8b44:	3c01      	subs	r4, #1
   a8b46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a8b4a:	4798      	blx	r3
   a8b4c:	2c00      	cmp	r4, #0
   a8b4e:	d1f9      	bne.n	a8b44 <__libc_fini_array+0xc>
   a8b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a8b54:	f001 bc9a 	b.w	aa48c <_fini>
   a8b58:	000aa49c 	.word	0x000aa49c
   a8b5c:	000aa498 	.word	0x000aa498

000a8b60 <_malloc_trim_r>:
   a8b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a8b62:	460c      	mov	r4, r1
   a8b64:	4f22      	ldr	r7, [pc, #136]	; (a8bf0 <_malloc_trim_r+0x90>)
   a8b66:	4606      	mov	r6, r0
   a8b68:	f000 feae 	bl	a98c8 <__malloc_lock>
   a8b6c:	68bb      	ldr	r3, [r7, #8]
   a8b6e:	685d      	ldr	r5, [r3, #4]
   a8b70:	f025 0503 	bic.w	r5, r5, #3
   a8b74:	1b29      	subs	r1, r5, r4
   a8b76:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a8b7a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a8b7e:	f021 010f 	bic.w	r1, r1, #15
   a8b82:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a8b86:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a8b8a:	db07      	blt.n	a8b9c <_malloc_trim_r+0x3c>
   a8b8c:	2100      	movs	r1, #0
   a8b8e:	4630      	mov	r0, r6
   a8b90:	f001 f888 	bl	a9ca4 <_sbrk_r>
   a8b94:	68bb      	ldr	r3, [r7, #8]
   a8b96:	442b      	add	r3, r5
   a8b98:	4298      	cmp	r0, r3
   a8b9a:	d004      	beq.n	a8ba6 <_malloc_trim_r+0x46>
   a8b9c:	4630      	mov	r0, r6
   a8b9e:	f000 fe95 	bl	a98cc <__malloc_unlock>
   a8ba2:	2000      	movs	r0, #0
   a8ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a8ba6:	4261      	negs	r1, r4
   a8ba8:	4630      	mov	r0, r6
   a8baa:	f001 f87b 	bl	a9ca4 <_sbrk_r>
   a8bae:	3001      	adds	r0, #1
   a8bb0:	d00d      	beq.n	a8bce <_malloc_trim_r+0x6e>
   a8bb2:	4b10      	ldr	r3, [pc, #64]	; (a8bf4 <_malloc_trim_r+0x94>)
   a8bb4:	68ba      	ldr	r2, [r7, #8]
   a8bb6:	6819      	ldr	r1, [r3, #0]
   a8bb8:	1b2d      	subs	r5, r5, r4
   a8bba:	f045 0501 	orr.w	r5, r5, #1
   a8bbe:	4630      	mov	r0, r6
   a8bc0:	1b09      	subs	r1, r1, r4
   a8bc2:	6055      	str	r5, [r2, #4]
   a8bc4:	6019      	str	r1, [r3, #0]
   a8bc6:	f000 fe81 	bl	a98cc <__malloc_unlock>
   a8bca:	2001      	movs	r0, #1
   a8bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a8bce:	2100      	movs	r1, #0
   a8bd0:	4630      	mov	r0, r6
   a8bd2:	f001 f867 	bl	a9ca4 <_sbrk_r>
   a8bd6:	68ba      	ldr	r2, [r7, #8]
   a8bd8:	1a83      	subs	r3, r0, r2
   a8bda:	2b0f      	cmp	r3, #15
   a8bdc:	ddde      	ble.n	a8b9c <_malloc_trim_r+0x3c>
   a8bde:	4c06      	ldr	r4, [pc, #24]	; (a8bf8 <_malloc_trim_r+0x98>)
   a8be0:	4904      	ldr	r1, [pc, #16]	; (a8bf4 <_malloc_trim_r+0x94>)
   a8be2:	6824      	ldr	r4, [r4, #0]
   a8be4:	f043 0301 	orr.w	r3, r3, #1
   a8be8:	1b00      	subs	r0, r0, r4
   a8bea:	6053      	str	r3, [r2, #4]
   a8bec:	6008      	str	r0, [r1, #0]
   a8bee:	e7d5      	b.n	a8b9c <_malloc_trim_r+0x3c>
   a8bf0:	20071194 	.word	0x20071194
   a8bf4:	20071be4 	.word	0x20071be4
   a8bf8:	200715a0 	.word	0x200715a0

000a8bfc <_free_r>:
   a8bfc:	2900      	cmp	r1, #0
   a8bfe:	d045      	beq.n	a8c8c <_free_r+0x90>
   a8c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a8c04:	460d      	mov	r5, r1
   a8c06:	4680      	mov	r8, r0
   a8c08:	f000 fe5e 	bl	a98c8 <__malloc_lock>
   a8c0c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   a8c10:	496a      	ldr	r1, [pc, #424]	; (a8dbc <_free_r+0x1c0>)
   a8c12:	f1a5 0408 	sub.w	r4, r5, #8
   a8c16:	f027 0301 	bic.w	r3, r7, #1
   a8c1a:	18e2      	adds	r2, r4, r3
   a8c1c:	688e      	ldr	r6, [r1, #8]
   a8c1e:	6850      	ldr	r0, [r2, #4]
   a8c20:	42b2      	cmp	r2, r6
   a8c22:	f020 0003 	bic.w	r0, r0, #3
   a8c26:	d062      	beq.n	a8cee <_free_r+0xf2>
   a8c28:	07fe      	lsls	r6, r7, #31
   a8c2a:	6050      	str	r0, [r2, #4]
   a8c2c:	d40b      	bmi.n	a8c46 <_free_r+0x4a>
   a8c2e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   a8c32:	f101 0e08 	add.w	lr, r1, #8
   a8c36:	1be4      	subs	r4, r4, r7
   a8c38:	68a5      	ldr	r5, [r4, #8]
   a8c3a:	443b      	add	r3, r7
   a8c3c:	4575      	cmp	r5, lr
   a8c3e:	d06f      	beq.n	a8d20 <_free_r+0x124>
   a8c40:	68e7      	ldr	r7, [r4, #12]
   a8c42:	60ef      	str	r7, [r5, #12]
   a8c44:	60bd      	str	r5, [r7, #8]
   a8c46:	1815      	adds	r5, r2, r0
   a8c48:	686d      	ldr	r5, [r5, #4]
   a8c4a:	07ed      	lsls	r5, r5, #31
   a8c4c:	d542      	bpl.n	a8cd4 <_free_r+0xd8>
   a8c4e:	f043 0201 	orr.w	r2, r3, #1
   a8c52:	6062      	str	r2, [r4, #4]
   a8c54:	50e3      	str	r3, [r4, r3]
   a8c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a8c5a:	d218      	bcs.n	a8c8e <_free_r+0x92>
   a8c5c:	08db      	lsrs	r3, r3, #3
   a8c5e:	6848      	ldr	r0, [r1, #4]
   a8c60:	109d      	asrs	r5, r3, #2
   a8c62:	2201      	movs	r2, #1
   a8c64:	3301      	adds	r3, #1
   a8c66:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   a8c6a:	fa02 f505 	lsl.w	r5, r2, r5
   a8c6e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   a8c72:	4328      	orrs	r0, r5
   a8c74:	3a08      	subs	r2, #8
   a8c76:	60e2      	str	r2, [r4, #12]
   a8c78:	60a7      	str	r7, [r4, #8]
   a8c7a:	6048      	str	r0, [r1, #4]
   a8c7c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a8c80:	60fc      	str	r4, [r7, #12]
   a8c82:	4640      	mov	r0, r8
   a8c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a8c88:	f000 be20 	b.w	a98cc <__malloc_unlock>
   a8c8c:	4770      	bx	lr
   a8c8e:	0a5a      	lsrs	r2, r3, #9
   a8c90:	2a04      	cmp	r2, #4
   a8c92:	d853      	bhi.n	a8d3c <_free_r+0x140>
   a8c94:	099a      	lsrs	r2, r3, #6
   a8c96:	f102 0739 	add.w	r7, r2, #57	; 0x39
   a8c9a:	007f      	lsls	r7, r7, #1
   a8c9c:	f102 0538 	add.w	r5, r2, #56	; 0x38
   a8ca0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   a8ca4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   a8ca8:	3808      	subs	r0, #8
   a8caa:	4290      	cmp	r0, r2
   a8cac:	4943      	ldr	r1, [pc, #268]	; (a8dbc <_free_r+0x1c0>)
   a8cae:	d04d      	beq.n	a8d4c <_free_r+0x150>
   a8cb0:	6851      	ldr	r1, [r2, #4]
   a8cb2:	f021 0103 	bic.w	r1, r1, #3
   a8cb6:	428b      	cmp	r3, r1
   a8cb8:	d202      	bcs.n	a8cc0 <_free_r+0xc4>
   a8cba:	6892      	ldr	r2, [r2, #8]
   a8cbc:	4290      	cmp	r0, r2
   a8cbe:	d1f7      	bne.n	a8cb0 <_free_r+0xb4>
   a8cc0:	68d0      	ldr	r0, [r2, #12]
   a8cc2:	60e0      	str	r0, [r4, #12]
   a8cc4:	60a2      	str	r2, [r4, #8]
   a8cc6:	6084      	str	r4, [r0, #8]
   a8cc8:	60d4      	str	r4, [r2, #12]
   a8cca:	4640      	mov	r0, r8
   a8ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a8cd0:	f000 bdfc 	b.w	a98cc <__malloc_unlock>
   a8cd4:	6895      	ldr	r5, [r2, #8]
   a8cd6:	4f3a      	ldr	r7, [pc, #232]	; (a8dc0 <_free_r+0x1c4>)
   a8cd8:	4403      	add	r3, r0
   a8cda:	42bd      	cmp	r5, r7
   a8cdc:	d03f      	beq.n	a8d5e <_free_r+0x162>
   a8cde:	68d0      	ldr	r0, [r2, #12]
   a8ce0:	f043 0201 	orr.w	r2, r3, #1
   a8ce4:	60e8      	str	r0, [r5, #12]
   a8ce6:	6085      	str	r5, [r0, #8]
   a8ce8:	6062      	str	r2, [r4, #4]
   a8cea:	50e3      	str	r3, [r4, r3]
   a8cec:	e7b3      	b.n	a8c56 <_free_r+0x5a>
   a8cee:	07ff      	lsls	r7, r7, #31
   a8cf0:	4403      	add	r3, r0
   a8cf2:	d407      	bmi.n	a8d04 <_free_r+0x108>
   a8cf4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   a8cf8:	1b64      	subs	r4, r4, r5
   a8cfa:	68e2      	ldr	r2, [r4, #12]
   a8cfc:	68a0      	ldr	r0, [r4, #8]
   a8cfe:	442b      	add	r3, r5
   a8d00:	60c2      	str	r2, [r0, #12]
   a8d02:	6090      	str	r0, [r2, #8]
   a8d04:	4a2f      	ldr	r2, [pc, #188]	; (a8dc4 <_free_r+0x1c8>)
   a8d06:	f043 0001 	orr.w	r0, r3, #1
   a8d0a:	6812      	ldr	r2, [r2, #0]
   a8d0c:	6060      	str	r0, [r4, #4]
   a8d0e:	4293      	cmp	r3, r2
   a8d10:	608c      	str	r4, [r1, #8]
   a8d12:	d3b6      	bcc.n	a8c82 <_free_r+0x86>
   a8d14:	4b2c      	ldr	r3, [pc, #176]	; (a8dc8 <_free_r+0x1cc>)
   a8d16:	4640      	mov	r0, r8
   a8d18:	6819      	ldr	r1, [r3, #0]
   a8d1a:	f7ff ff21 	bl	a8b60 <_malloc_trim_r>
   a8d1e:	e7b0      	b.n	a8c82 <_free_r+0x86>
   a8d20:	1811      	adds	r1, r2, r0
   a8d22:	6849      	ldr	r1, [r1, #4]
   a8d24:	07c9      	lsls	r1, r1, #31
   a8d26:	d444      	bmi.n	a8db2 <_free_r+0x1b6>
   a8d28:	6891      	ldr	r1, [r2, #8]
   a8d2a:	4403      	add	r3, r0
   a8d2c:	68d2      	ldr	r2, [r2, #12]
   a8d2e:	f043 0001 	orr.w	r0, r3, #1
   a8d32:	60ca      	str	r2, [r1, #12]
   a8d34:	6091      	str	r1, [r2, #8]
   a8d36:	6060      	str	r0, [r4, #4]
   a8d38:	50e3      	str	r3, [r4, r3]
   a8d3a:	e7a2      	b.n	a8c82 <_free_r+0x86>
   a8d3c:	2a14      	cmp	r2, #20
   a8d3e:	d817      	bhi.n	a8d70 <_free_r+0x174>
   a8d40:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   a8d44:	007f      	lsls	r7, r7, #1
   a8d46:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   a8d4a:	e7a9      	b.n	a8ca0 <_free_r+0xa4>
   a8d4c:	10aa      	asrs	r2, r5, #2
   a8d4e:	684b      	ldr	r3, [r1, #4]
   a8d50:	2501      	movs	r5, #1
   a8d52:	fa05 f202 	lsl.w	r2, r5, r2
   a8d56:	4313      	orrs	r3, r2
   a8d58:	604b      	str	r3, [r1, #4]
   a8d5a:	4602      	mov	r2, r0
   a8d5c:	e7b1      	b.n	a8cc2 <_free_r+0xc6>
   a8d5e:	f043 0201 	orr.w	r2, r3, #1
   a8d62:	614c      	str	r4, [r1, #20]
   a8d64:	610c      	str	r4, [r1, #16]
   a8d66:	60e5      	str	r5, [r4, #12]
   a8d68:	60a5      	str	r5, [r4, #8]
   a8d6a:	6062      	str	r2, [r4, #4]
   a8d6c:	50e3      	str	r3, [r4, r3]
   a8d6e:	e788      	b.n	a8c82 <_free_r+0x86>
   a8d70:	2a54      	cmp	r2, #84	; 0x54
   a8d72:	d806      	bhi.n	a8d82 <_free_r+0x186>
   a8d74:	0b1a      	lsrs	r2, r3, #12
   a8d76:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   a8d7a:	007f      	lsls	r7, r7, #1
   a8d7c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   a8d80:	e78e      	b.n	a8ca0 <_free_r+0xa4>
   a8d82:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a8d86:	d806      	bhi.n	a8d96 <_free_r+0x19a>
   a8d88:	0bda      	lsrs	r2, r3, #15
   a8d8a:	f102 0778 	add.w	r7, r2, #120	; 0x78
   a8d8e:	007f      	lsls	r7, r7, #1
   a8d90:	f102 0577 	add.w	r5, r2, #119	; 0x77
   a8d94:	e784      	b.n	a8ca0 <_free_r+0xa4>
   a8d96:	f240 5054 	movw	r0, #1364	; 0x554
   a8d9a:	4282      	cmp	r2, r0
   a8d9c:	d806      	bhi.n	a8dac <_free_r+0x1b0>
   a8d9e:	0c9a      	lsrs	r2, r3, #18
   a8da0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   a8da4:	007f      	lsls	r7, r7, #1
   a8da6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   a8daa:	e779      	b.n	a8ca0 <_free_r+0xa4>
   a8dac:	27fe      	movs	r7, #254	; 0xfe
   a8dae:	257e      	movs	r5, #126	; 0x7e
   a8db0:	e776      	b.n	a8ca0 <_free_r+0xa4>
   a8db2:	f043 0201 	orr.w	r2, r3, #1
   a8db6:	6062      	str	r2, [r4, #4]
   a8db8:	50e3      	str	r3, [r4, r3]
   a8dba:	e762      	b.n	a8c82 <_free_r+0x86>
   a8dbc:	20071194 	.word	0x20071194
   a8dc0:	2007119c 	.word	0x2007119c
   a8dc4:	2007159c 	.word	0x2007159c
   a8dc8:	20071be0 	.word	0x20071be0

000a8dcc <__sfvwrite_r>:
   a8dcc:	6893      	ldr	r3, [r2, #8]
   a8dce:	2b00      	cmp	r3, #0
   a8dd0:	f000 80ab 	beq.w	a8f2a <__sfvwrite_r+0x15e>
   a8dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a8dd8:	898b      	ldrh	r3, [r1, #12]
   a8dda:	b085      	sub	sp, #20
   a8ddc:	460c      	mov	r4, r1
   a8dde:	0719      	lsls	r1, r3, #28
   a8de0:	9002      	str	r0, [sp, #8]
   a8de2:	4616      	mov	r6, r2
   a8de4:	d528      	bpl.n	a8e38 <__sfvwrite_r+0x6c>
   a8de6:	6922      	ldr	r2, [r4, #16]
   a8de8:	b332      	cbz	r2, a8e38 <__sfvwrite_r+0x6c>
   a8dea:	f003 0802 	and.w	r8, r3, #2
   a8dee:	fa1f f088 	uxth.w	r0, r8
   a8df2:	6835      	ldr	r5, [r6, #0]
   a8df4:	b378      	cbz	r0, a8e56 <__sfvwrite_r+0x8a>
   a8df6:	f04f 0900 	mov.w	r9, #0
   a8dfa:	46c8      	mov	r8, r9
   a8dfc:	f8df a2d0 	ldr.w	sl, [pc, #720]	; a90d0 <__sfvwrite_r+0x304>
   a8e00:	f1b8 0f00 	cmp.w	r8, #0
   a8e04:	f000 808b 	beq.w	a8f1e <__sfvwrite_r+0x152>
   a8e08:	45d0      	cmp	r8, sl
   a8e0a:	4643      	mov	r3, r8
   a8e0c:	464a      	mov	r2, r9
   a8e0e:	bf28      	it	cs
   a8e10:	4653      	movcs	r3, sl
   a8e12:	69e1      	ldr	r1, [r4, #28]
   a8e14:	9802      	ldr	r0, [sp, #8]
   a8e16:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a8e18:	47b8      	blx	r7
   a8e1a:	2800      	cmp	r0, #0
   a8e1c:	f340 80a5 	ble.w	a8f6a <__sfvwrite_r+0x19e>
   a8e20:	68b3      	ldr	r3, [r6, #8]
   a8e22:	4481      	add	r9, r0
   a8e24:	1a1b      	subs	r3, r3, r0
   a8e26:	ebc0 0808 	rsb	r8, r0, r8
   a8e2a:	60b3      	str	r3, [r6, #8]
   a8e2c:	2b00      	cmp	r3, #0
   a8e2e:	d1e7      	bne.n	a8e00 <__sfvwrite_r+0x34>
   a8e30:	2000      	movs	r0, #0
   a8e32:	b005      	add	sp, #20
   a8e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a8e38:	4621      	mov	r1, r4
   a8e3a:	9802      	ldr	r0, [sp, #8]
   a8e3c:	f7ff fcc6 	bl	a87cc <__swsetup_r>
   a8e40:	2800      	cmp	r0, #0
   a8e42:	f040 813c 	bne.w	a90be <__sfvwrite_r+0x2f2>
   a8e46:	89a3      	ldrh	r3, [r4, #12]
   a8e48:	6835      	ldr	r5, [r6, #0]
   a8e4a:	f003 0802 	and.w	r8, r3, #2
   a8e4e:	fa1f f088 	uxth.w	r0, r8
   a8e52:	2800      	cmp	r0, #0
   a8e54:	d1cf      	bne.n	a8df6 <__sfvwrite_r+0x2a>
   a8e56:	f013 0901 	ands.w	r9, r3, #1
   a8e5a:	f040 8090 	bne.w	a8f7e <__sfvwrite_r+0x1b2>
   a8e5e:	464f      	mov	r7, r9
   a8e60:	9601      	str	r6, [sp, #4]
   a8e62:	2f00      	cmp	r7, #0
   a8e64:	d056      	beq.n	a8f14 <__sfvwrite_r+0x148>
   a8e66:	059a      	lsls	r2, r3, #22
   a8e68:	f8d4 8008 	ldr.w	r8, [r4, #8]
   a8e6c:	d55f      	bpl.n	a8f2e <__sfvwrite_r+0x162>
   a8e6e:	4547      	cmp	r7, r8
   a8e70:	46c2      	mov	sl, r8
   a8e72:	f0c0 80bf 	bcc.w	a8ff4 <__sfvwrite_r+0x228>
   a8e76:	f413 6f90 	tst.w	r3, #1152	; 0x480
   a8e7a:	f000 80bd 	beq.w	a8ff8 <__sfvwrite_r+0x22c>
   a8e7e:	6962      	ldr	r2, [r4, #20]
   a8e80:	6820      	ldr	r0, [r4, #0]
   a8e82:	6921      	ldr	r1, [r4, #16]
   a8e84:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   a8e88:	ebc1 0a00 	rsb	sl, r1, r0
   a8e8c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   a8e90:	f10a 0001 	add.w	r0, sl, #1
   a8e94:	ea4f 0868 	mov.w	r8, r8, asr #1
   a8e98:	4438      	add	r0, r7
   a8e9a:	4540      	cmp	r0, r8
   a8e9c:	4642      	mov	r2, r8
   a8e9e:	bf84      	itt	hi
   a8ea0:	4680      	movhi	r8, r0
   a8ea2:	4642      	movhi	r2, r8
   a8ea4:	055b      	lsls	r3, r3, #21
   a8ea6:	f140 80f2 	bpl.w	a908e <__sfvwrite_r+0x2c2>
   a8eaa:	4611      	mov	r1, r2
   a8eac:	9802      	ldr	r0, [sp, #8]
   a8eae:	f000 f9b5 	bl	a921c <_malloc_r>
   a8eb2:	4683      	mov	fp, r0
   a8eb4:	2800      	cmp	r0, #0
   a8eb6:	f000 8105 	beq.w	a90c4 <__sfvwrite_r+0x2f8>
   a8eba:	4652      	mov	r2, sl
   a8ebc:	6921      	ldr	r1, [r4, #16]
   a8ebe:	f7ff faa7 	bl	a8410 <memcpy>
   a8ec2:	89a3      	ldrh	r3, [r4, #12]
   a8ec4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   a8ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a8ecc:	81a3      	strh	r3, [r4, #12]
   a8ece:	ebca 0308 	rsb	r3, sl, r8
   a8ed2:	eb0b 000a 	add.w	r0, fp, sl
   a8ed6:	f8c4 8014 	str.w	r8, [r4, #20]
   a8eda:	46ba      	mov	sl, r7
   a8edc:	46b8      	mov	r8, r7
   a8ede:	f8c4 b010 	str.w	fp, [r4, #16]
   a8ee2:	6020      	str	r0, [r4, #0]
   a8ee4:	60a3      	str	r3, [r4, #8]
   a8ee6:	4652      	mov	r2, sl
   a8ee8:	4649      	mov	r1, r9
   a8eea:	f000 fc89 	bl	a9800 <memmove>
   a8eee:	68a0      	ldr	r0, [r4, #8]
   a8ef0:	6823      	ldr	r3, [r4, #0]
   a8ef2:	ebc8 0000 	rsb	r0, r8, r0
   a8ef6:	60a0      	str	r0, [r4, #8]
   a8ef8:	4638      	mov	r0, r7
   a8efa:	4453      	add	r3, sl
   a8efc:	6023      	str	r3, [r4, #0]
   a8efe:	9a01      	ldr	r2, [sp, #4]
   a8f00:	4481      	add	r9, r0
   a8f02:	6893      	ldr	r3, [r2, #8]
   a8f04:	1a3f      	subs	r7, r7, r0
   a8f06:	1a1b      	subs	r3, r3, r0
   a8f08:	6093      	str	r3, [r2, #8]
   a8f0a:	2b00      	cmp	r3, #0
   a8f0c:	d090      	beq.n	a8e30 <__sfvwrite_r+0x64>
   a8f0e:	89a3      	ldrh	r3, [r4, #12]
   a8f10:	2f00      	cmp	r7, #0
   a8f12:	d1a8      	bne.n	a8e66 <__sfvwrite_r+0x9a>
   a8f14:	f8d5 9000 	ldr.w	r9, [r5]
   a8f18:	686f      	ldr	r7, [r5, #4]
   a8f1a:	3508      	adds	r5, #8
   a8f1c:	e7a1      	b.n	a8e62 <__sfvwrite_r+0x96>
   a8f1e:	f8d5 9000 	ldr.w	r9, [r5]
   a8f22:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a8f26:	3508      	adds	r5, #8
   a8f28:	e76a      	b.n	a8e00 <__sfvwrite_r+0x34>
   a8f2a:	2000      	movs	r0, #0
   a8f2c:	4770      	bx	lr
   a8f2e:	6820      	ldr	r0, [r4, #0]
   a8f30:	6923      	ldr	r3, [r4, #16]
   a8f32:	4298      	cmp	r0, r3
   a8f34:	d803      	bhi.n	a8f3e <__sfvwrite_r+0x172>
   a8f36:	6962      	ldr	r2, [r4, #20]
   a8f38:	4297      	cmp	r7, r2
   a8f3a:	f080 8083 	bcs.w	a9044 <__sfvwrite_r+0x278>
   a8f3e:	45b8      	cmp	r8, r7
   a8f40:	bf28      	it	cs
   a8f42:	46b8      	movcs	r8, r7
   a8f44:	4649      	mov	r1, r9
   a8f46:	4642      	mov	r2, r8
   a8f48:	f000 fc5a 	bl	a9800 <memmove>
   a8f4c:	68a3      	ldr	r3, [r4, #8]
   a8f4e:	6822      	ldr	r2, [r4, #0]
   a8f50:	ebc8 0303 	rsb	r3, r8, r3
   a8f54:	4442      	add	r2, r8
   a8f56:	60a3      	str	r3, [r4, #8]
   a8f58:	6022      	str	r2, [r4, #0]
   a8f5a:	2b00      	cmp	r3, #0
   a8f5c:	d148      	bne.n	a8ff0 <__sfvwrite_r+0x224>
   a8f5e:	4621      	mov	r1, r4
   a8f60:	9802      	ldr	r0, [sp, #8]
   a8f62:	f7ff fd4b 	bl	a89fc <_fflush_r>
   a8f66:	2800      	cmp	r0, #0
   a8f68:	d042      	beq.n	a8ff0 <__sfvwrite_r+0x224>
   a8f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a8f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a8f72:	f04f 30ff 	mov.w	r0, #4294967295
   a8f76:	81a3      	strh	r3, [r4, #12]
   a8f78:	b005      	add	sp, #20
   a8f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a8f7e:	4680      	mov	r8, r0
   a8f80:	4682      	mov	sl, r0
   a8f82:	4681      	mov	r9, r0
   a8f84:	9001      	str	r0, [sp, #4]
   a8f86:	f1b9 0f00 	cmp.w	r9, #0
   a8f8a:	d029      	beq.n	a8fe0 <__sfvwrite_r+0x214>
   a8f8c:	9b01      	ldr	r3, [sp, #4]
   a8f8e:	2b00      	cmp	r3, #0
   a8f90:	d04b      	beq.n	a902a <__sfvwrite_r+0x25e>
   a8f92:	45c8      	cmp	r8, r9
   a8f94:	46c3      	mov	fp, r8
   a8f96:	bf28      	it	cs
   a8f98:	46cb      	movcs	fp, r9
   a8f9a:	6820      	ldr	r0, [r4, #0]
   a8f9c:	6923      	ldr	r3, [r4, #16]
   a8f9e:	465f      	mov	r7, fp
   a8fa0:	4298      	cmp	r0, r3
   a8fa2:	6962      	ldr	r2, [r4, #20]
   a8fa4:	d903      	bls.n	a8fae <__sfvwrite_r+0x1e2>
   a8fa6:	68a3      	ldr	r3, [r4, #8]
   a8fa8:	4413      	add	r3, r2
   a8faa:	459b      	cmp	fp, r3
   a8fac:	dc5c      	bgt.n	a9068 <__sfvwrite_r+0x29c>
   a8fae:	4593      	cmp	fp, r2
   a8fb0:	db24      	blt.n	a8ffc <__sfvwrite_r+0x230>
   a8fb2:	4613      	mov	r3, r2
   a8fb4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a8fb6:	4652      	mov	r2, sl
   a8fb8:	69e1      	ldr	r1, [r4, #28]
   a8fba:	9802      	ldr	r0, [sp, #8]
   a8fbc:	47b8      	blx	r7
   a8fbe:	1e07      	subs	r7, r0, #0
   a8fc0:	ddd3      	ble.n	a8f6a <__sfvwrite_r+0x19e>
   a8fc2:	ebb8 0807 	subs.w	r8, r8, r7
   a8fc6:	d027      	beq.n	a9018 <__sfvwrite_r+0x24c>
   a8fc8:	68b3      	ldr	r3, [r6, #8]
   a8fca:	44ba      	add	sl, r7
   a8fcc:	1bdb      	subs	r3, r3, r7
   a8fce:	ebc7 0909 	rsb	r9, r7, r9
   a8fd2:	60b3      	str	r3, [r6, #8]
   a8fd4:	2b00      	cmp	r3, #0
   a8fd6:	f43f af2b 	beq.w	a8e30 <__sfvwrite_r+0x64>
   a8fda:	f1b9 0f00 	cmp.w	r9, #0
   a8fde:	d1d5      	bne.n	a8f8c <__sfvwrite_r+0x1c0>
   a8fe0:	2300      	movs	r3, #0
   a8fe2:	f8d5 a000 	ldr.w	sl, [r5]
   a8fe6:	f8d5 9004 	ldr.w	r9, [r5, #4]
   a8fea:	9301      	str	r3, [sp, #4]
   a8fec:	3508      	adds	r5, #8
   a8fee:	e7ca      	b.n	a8f86 <__sfvwrite_r+0x1ba>
   a8ff0:	4640      	mov	r0, r8
   a8ff2:	e784      	b.n	a8efe <__sfvwrite_r+0x132>
   a8ff4:	46b8      	mov	r8, r7
   a8ff6:	46ba      	mov	sl, r7
   a8ff8:	6820      	ldr	r0, [r4, #0]
   a8ffa:	e774      	b.n	a8ee6 <__sfvwrite_r+0x11a>
   a8ffc:	465a      	mov	r2, fp
   a8ffe:	4651      	mov	r1, sl
   a9000:	f000 fbfe 	bl	a9800 <memmove>
   a9004:	68a2      	ldr	r2, [r4, #8]
   a9006:	6823      	ldr	r3, [r4, #0]
   a9008:	ebcb 0202 	rsb	r2, fp, r2
   a900c:	445b      	add	r3, fp
   a900e:	ebb8 0807 	subs.w	r8, r8, r7
   a9012:	60a2      	str	r2, [r4, #8]
   a9014:	6023      	str	r3, [r4, #0]
   a9016:	d1d7      	bne.n	a8fc8 <__sfvwrite_r+0x1fc>
   a9018:	4621      	mov	r1, r4
   a901a:	9802      	ldr	r0, [sp, #8]
   a901c:	f7ff fcee 	bl	a89fc <_fflush_r>
   a9020:	2800      	cmp	r0, #0
   a9022:	d1a2      	bne.n	a8f6a <__sfvwrite_r+0x19e>
   a9024:	f8cd 8004 	str.w	r8, [sp, #4]
   a9028:	e7ce      	b.n	a8fc8 <__sfvwrite_r+0x1fc>
   a902a:	464a      	mov	r2, r9
   a902c:	210a      	movs	r1, #10
   a902e:	4650      	mov	r0, sl
   a9030:	f000 fba0 	bl	a9774 <memchr>
   a9034:	2800      	cmp	r0, #0
   a9036:	d03d      	beq.n	a90b4 <__sfvwrite_r+0x2e8>
   a9038:	3001      	adds	r0, #1
   a903a:	2301      	movs	r3, #1
   a903c:	ebca 0800 	rsb	r8, sl, r0
   a9040:	9301      	str	r3, [sp, #4]
   a9042:	e7a6      	b.n	a8f92 <__sfvwrite_r+0x1c6>
   a9044:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a9048:	42bb      	cmp	r3, r7
   a904a:	bf28      	it	cs
   a904c:	463b      	movcs	r3, r7
   a904e:	fb93 f3f2 	sdiv	r3, r3, r2
   a9052:	69e1      	ldr	r1, [r4, #28]
   a9054:	fb02 f303 	mul.w	r3, r2, r3
   a9058:	9802      	ldr	r0, [sp, #8]
   a905a:	464a      	mov	r2, r9
   a905c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   a905e:	47b0      	blx	r6
   a9060:	2800      	cmp	r0, #0
   a9062:	f73f af4c 	bgt.w	a8efe <__sfvwrite_r+0x132>
   a9066:	e780      	b.n	a8f6a <__sfvwrite_r+0x19e>
   a9068:	461a      	mov	r2, r3
   a906a:	4651      	mov	r1, sl
   a906c:	9303      	str	r3, [sp, #12]
   a906e:	f000 fbc7 	bl	a9800 <memmove>
   a9072:	6822      	ldr	r2, [r4, #0]
   a9074:	9b03      	ldr	r3, [sp, #12]
   a9076:	4621      	mov	r1, r4
   a9078:	441a      	add	r2, r3
   a907a:	6022      	str	r2, [r4, #0]
   a907c:	9802      	ldr	r0, [sp, #8]
   a907e:	f7ff fcbd 	bl	a89fc <_fflush_r>
   a9082:	9b03      	ldr	r3, [sp, #12]
   a9084:	2800      	cmp	r0, #0
   a9086:	f47f af70 	bne.w	a8f6a <__sfvwrite_r+0x19e>
   a908a:	461f      	mov	r7, r3
   a908c:	e799      	b.n	a8fc2 <__sfvwrite_r+0x1f6>
   a908e:	9802      	ldr	r0, [sp, #8]
   a9090:	f000 fc1e 	bl	a98d0 <_realloc_r>
   a9094:	4683      	mov	fp, r0
   a9096:	2800      	cmp	r0, #0
   a9098:	f47f af19 	bne.w	a8ece <__sfvwrite_r+0x102>
   a909c:	9d02      	ldr	r5, [sp, #8]
   a909e:	6921      	ldr	r1, [r4, #16]
   a90a0:	4628      	mov	r0, r5
   a90a2:	f7ff fdab 	bl	a8bfc <_free_r>
   a90a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a90aa:	220c      	movs	r2, #12
   a90ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a90b0:	602a      	str	r2, [r5, #0]
   a90b2:	e75c      	b.n	a8f6e <__sfvwrite_r+0x1a2>
   a90b4:	2301      	movs	r3, #1
   a90b6:	f109 0801 	add.w	r8, r9, #1
   a90ba:	9301      	str	r3, [sp, #4]
   a90bc:	e769      	b.n	a8f92 <__sfvwrite_r+0x1c6>
   a90be:	f04f 30ff 	mov.w	r0, #4294967295
   a90c2:	e6b6      	b.n	a8e32 <__sfvwrite_r+0x66>
   a90c4:	9a02      	ldr	r2, [sp, #8]
   a90c6:	230c      	movs	r3, #12
   a90c8:	6013      	str	r3, [r2, #0]
   a90ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a90ce:	e74e      	b.n	a8f6e <__sfvwrite_r+0x1a2>
   a90d0:	7ffffc00 	.word	0x7ffffc00

000a90d4 <_fwalk_reent>:
   a90d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a90d8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a90dc:	d01e      	beq.n	a911c <_fwalk_reent+0x48>
   a90de:	4688      	mov	r8, r1
   a90e0:	4607      	mov	r7, r0
   a90e2:	f04f 0900 	mov.w	r9, #0
   a90e6:	6875      	ldr	r5, [r6, #4]
   a90e8:	68b4      	ldr	r4, [r6, #8]
   a90ea:	3d01      	subs	r5, #1
   a90ec:	d410      	bmi.n	a9110 <_fwalk_reent+0x3c>
   a90ee:	89a3      	ldrh	r3, [r4, #12]
   a90f0:	3d01      	subs	r5, #1
   a90f2:	2b01      	cmp	r3, #1
   a90f4:	d908      	bls.n	a9108 <_fwalk_reent+0x34>
   a90f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a90fa:	3301      	adds	r3, #1
   a90fc:	d004      	beq.n	a9108 <_fwalk_reent+0x34>
   a90fe:	4621      	mov	r1, r4
   a9100:	4638      	mov	r0, r7
   a9102:	47c0      	blx	r8
   a9104:	ea49 0900 	orr.w	r9, r9, r0
   a9108:	1c6b      	adds	r3, r5, #1
   a910a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a910e:	d1ee      	bne.n	a90ee <_fwalk_reent+0x1a>
   a9110:	6836      	ldr	r6, [r6, #0]
   a9112:	2e00      	cmp	r6, #0
   a9114:	d1e7      	bne.n	a90e6 <_fwalk_reent+0x12>
   a9116:	4648      	mov	r0, r9
   a9118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a911c:	46b1      	mov	r9, r6
   a911e:	4648      	mov	r0, r9
   a9120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a9124 <__swhatbuf_r>:
   a9124:	b570      	push	{r4, r5, r6, lr}
   a9126:	460e      	mov	r6, r1
   a9128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a912c:	b090      	sub	sp, #64	; 0x40
   a912e:	2900      	cmp	r1, #0
   a9130:	4614      	mov	r4, r2
   a9132:	461d      	mov	r5, r3
   a9134:	db14      	blt.n	a9160 <__swhatbuf_r+0x3c>
   a9136:	aa01      	add	r2, sp, #4
   a9138:	f000 fec6 	bl	a9ec8 <_fstat_r>
   a913c:	2800      	cmp	r0, #0
   a913e:	db0f      	blt.n	a9160 <__swhatbuf_r+0x3c>
   a9140:	9a02      	ldr	r2, [sp, #8]
   a9142:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a9146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   a914a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   a914e:	fab2 f282 	clz	r2, r2
   a9152:	f44f 6000 	mov.w	r0, #2048	; 0x800
   a9156:	0952      	lsrs	r2, r2, #5
   a9158:	602a      	str	r2, [r5, #0]
   a915a:	6023      	str	r3, [r4, #0]
   a915c:	b010      	add	sp, #64	; 0x40
   a915e:	bd70      	pop	{r4, r5, r6, pc}
   a9160:	89b2      	ldrh	r2, [r6, #12]
   a9162:	2000      	movs	r0, #0
   a9164:	f002 0280 	and.w	r2, r2, #128	; 0x80
   a9168:	b292      	uxth	r2, r2
   a916a:	6028      	str	r0, [r5, #0]
   a916c:	b11a      	cbz	r2, a9176 <__swhatbuf_r+0x52>
   a916e:	2340      	movs	r3, #64	; 0x40
   a9170:	6023      	str	r3, [r4, #0]
   a9172:	b010      	add	sp, #64	; 0x40
   a9174:	bd70      	pop	{r4, r5, r6, pc}
   a9176:	4610      	mov	r0, r2
   a9178:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a917c:	6023      	str	r3, [r4, #0]
   a917e:	b010      	add	sp, #64	; 0x40
   a9180:	bd70      	pop	{r4, r5, r6, pc}
   a9182:	bf00      	nop

000a9184 <__smakebuf_r>:
   a9184:	898a      	ldrh	r2, [r1, #12]
   a9186:	460b      	mov	r3, r1
   a9188:	0792      	lsls	r2, r2, #30
   a918a:	d506      	bpl.n	a919a <__smakebuf_r+0x16>
   a918c:	f101 0243 	add.w	r2, r1, #67	; 0x43
   a9190:	2101      	movs	r1, #1
   a9192:	601a      	str	r2, [r3, #0]
   a9194:	611a      	str	r2, [r3, #16]
   a9196:	6159      	str	r1, [r3, #20]
   a9198:	4770      	bx	lr
   a919a:	b5f0      	push	{r4, r5, r6, r7, lr}
   a919c:	b083      	sub	sp, #12
   a919e:	ab01      	add	r3, sp, #4
   a91a0:	466a      	mov	r2, sp
   a91a2:	460c      	mov	r4, r1
   a91a4:	4605      	mov	r5, r0
   a91a6:	f7ff ffbd 	bl	a9124 <__swhatbuf_r>
   a91aa:	9900      	ldr	r1, [sp, #0]
   a91ac:	4606      	mov	r6, r0
   a91ae:	4628      	mov	r0, r5
   a91b0:	f000 f834 	bl	a921c <_malloc_r>
   a91b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a91b8:	b1d0      	cbz	r0, a91f0 <__smakebuf_r+0x6c>
   a91ba:	e89d 0006 	ldmia.w	sp, {r1, r2}
   a91be:	4f12      	ldr	r7, [pc, #72]	; (a9208 <__smakebuf_r+0x84>)
   a91c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a91c4:	63ef      	str	r7, [r5, #60]	; 0x3c
   a91c6:	81a3      	strh	r3, [r4, #12]
   a91c8:	6020      	str	r0, [r4, #0]
   a91ca:	6120      	str	r0, [r4, #16]
   a91cc:	6161      	str	r1, [r4, #20]
   a91ce:	b91a      	cbnz	r2, a91d8 <__smakebuf_r+0x54>
   a91d0:	4333      	orrs	r3, r6
   a91d2:	81a3      	strh	r3, [r4, #12]
   a91d4:	b003      	add	sp, #12
   a91d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a91d8:	4628      	mov	r0, r5
   a91da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a91de:	f000 fe87 	bl	a9ef0 <_isatty_r>
   a91e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a91e6:	2800      	cmp	r0, #0
   a91e8:	d0f2      	beq.n	a91d0 <__smakebuf_r+0x4c>
   a91ea:	f043 0301 	orr.w	r3, r3, #1
   a91ee:	e7ef      	b.n	a91d0 <__smakebuf_r+0x4c>
   a91f0:	059a      	lsls	r2, r3, #22
   a91f2:	d4ef      	bmi.n	a91d4 <__smakebuf_r+0x50>
   a91f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a91f8:	f043 0302 	orr.w	r3, r3, #2
   a91fc:	2101      	movs	r1, #1
   a91fe:	81a3      	strh	r3, [r4, #12]
   a9200:	6022      	str	r2, [r4, #0]
   a9202:	6122      	str	r2, [r4, #16]
   a9204:	6161      	str	r1, [r4, #20]
   a9206:	e7e5      	b.n	a91d4 <__smakebuf_r+0x50>
   a9208:	000a8a29 	.word	0x000a8a29

000a920c <malloc>:
   a920c:	4b02      	ldr	r3, [pc, #8]	; (a9218 <malloc+0xc>)
   a920e:	4601      	mov	r1, r0
   a9210:	6818      	ldr	r0, [r3, #0]
   a9212:	f000 b803 	b.w	a921c <_malloc_r>
   a9216:	bf00      	nop
   a9218:	20071190 	.word	0x20071190

000a921c <_malloc_r>:
   a921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a9220:	f101 050b 	add.w	r5, r1, #11
   a9224:	2d16      	cmp	r5, #22
   a9226:	b083      	sub	sp, #12
   a9228:	4606      	mov	r6, r0
   a922a:	f240 80a0 	bls.w	a936e <_malloc_r+0x152>
   a922e:	f035 0507 	bics.w	r5, r5, #7
   a9232:	f100 80c0 	bmi.w	a93b6 <_malloc_r+0x19a>
   a9236:	42a9      	cmp	r1, r5
   a9238:	f200 80bd 	bhi.w	a93b6 <_malloc_r+0x19a>
   a923c:	f000 fb44 	bl	a98c8 <__malloc_lock>
   a9240:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a9244:	f0c0 8290 	bcc.w	a9768 <_malloc_r+0x54c>
   a9248:	0a6b      	lsrs	r3, r5, #9
   a924a:	f000 80bb 	beq.w	a93c4 <_malloc_r+0x1a8>
   a924e:	2b04      	cmp	r3, #4
   a9250:	f200 8177 	bhi.w	a9542 <_malloc_r+0x326>
   a9254:	09a8      	lsrs	r0, r5, #6
   a9256:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   a925a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a925e:	3038      	adds	r0, #56	; 0x38
   a9260:	4fbe      	ldr	r7, [pc, #760]	; (a955c <_malloc_r+0x340>)
   a9262:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a9266:	684c      	ldr	r4, [r1, #4]
   a9268:	3908      	subs	r1, #8
   a926a:	42a1      	cmp	r1, r4
   a926c:	d107      	bne.n	a927e <_malloc_r+0x62>
   a926e:	e0ae      	b.n	a93ce <_malloc_r+0x1b2>
   a9270:	2a00      	cmp	r2, #0
   a9272:	f280 80ae 	bge.w	a93d2 <_malloc_r+0x1b6>
   a9276:	68e4      	ldr	r4, [r4, #12]
   a9278:	42a1      	cmp	r1, r4
   a927a:	f000 80a8 	beq.w	a93ce <_malloc_r+0x1b2>
   a927e:	6863      	ldr	r3, [r4, #4]
   a9280:	f023 0303 	bic.w	r3, r3, #3
   a9284:	1b5a      	subs	r2, r3, r5
   a9286:	2a0f      	cmp	r2, #15
   a9288:	ddf2      	ble.n	a9270 <_malloc_r+0x54>
   a928a:	49b4      	ldr	r1, [pc, #720]	; (a955c <_malloc_r+0x340>)
   a928c:	693c      	ldr	r4, [r7, #16]
   a928e:	f101 0e08 	add.w	lr, r1, #8
   a9292:	4574      	cmp	r4, lr
   a9294:	f000 81a8 	beq.w	a95e8 <_malloc_r+0x3cc>
   a9298:	6863      	ldr	r3, [r4, #4]
   a929a:	f023 0303 	bic.w	r3, r3, #3
   a929e:	1b5a      	subs	r2, r3, r5
   a92a0:	2a0f      	cmp	r2, #15
   a92a2:	f300 818e 	bgt.w	a95c2 <_malloc_r+0x3a6>
   a92a6:	2a00      	cmp	r2, #0
   a92a8:	f8c1 e014 	str.w	lr, [r1, #20]
   a92ac:	f8c1 e010 	str.w	lr, [r1, #16]
   a92b0:	f280 8093 	bge.w	a93da <_malloc_r+0x1be>
   a92b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a92b8:	f080 815c 	bcs.w	a9574 <_malloc_r+0x358>
   a92bc:	08db      	lsrs	r3, r3, #3
   a92be:	684a      	ldr	r2, [r1, #4]
   a92c0:	ea4f 09a3 	mov.w	r9, r3, asr #2
   a92c4:	f04f 0c01 	mov.w	ip, #1
   a92c8:	3301      	adds	r3, #1
   a92ca:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   a92ce:	fa0c f909 	lsl.w	r9, ip, r9
   a92d2:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   a92d6:	ea49 0202 	orr.w	r2, r9, r2
   a92da:	f1ac 0c08 	sub.w	ip, ip, #8
   a92de:	f8c4 c00c 	str.w	ip, [r4, #12]
   a92e2:	f8c4 8008 	str.w	r8, [r4, #8]
   a92e6:	604a      	str	r2, [r1, #4]
   a92e8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a92ec:	f8c8 400c 	str.w	r4, [r8, #12]
   a92f0:	1083      	asrs	r3, r0, #2
   a92f2:	2401      	movs	r4, #1
   a92f4:	409c      	lsls	r4, r3
   a92f6:	4294      	cmp	r4, r2
   a92f8:	d87c      	bhi.n	a93f4 <_malloc_r+0x1d8>
   a92fa:	4214      	tst	r4, r2
   a92fc:	d106      	bne.n	a930c <_malloc_r+0xf0>
   a92fe:	f020 0003 	bic.w	r0, r0, #3
   a9302:	0064      	lsls	r4, r4, #1
   a9304:	4214      	tst	r4, r2
   a9306:	f100 0004 	add.w	r0, r0, #4
   a930a:	d0fa      	beq.n	a9302 <_malloc_r+0xe6>
   a930c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   a9310:	46cc      	mov	ip, r9
   a9312:	4680      	mov	r8, r0
   a9314:	f8dc 100c 	ldr.w	r1, [ip, #12]
   a9318:	458c      	cmp	ip, r1
   a931a:	d107      	bne.n	a932c <_malloc_r+0x110>
   a931c:	e166      	b.n	a95ec <_malloc_r+0x3d0>
   a931e:	2a00      	cmp	r2, #0
   a9320:	f280 8174 	bge.w	a960c <_malloc_r+0x3f0>
   a9324:	68c9      	ldr	r1, [r1, #12]
   a9326:	458c      	cmp	ip, r1
   a9328:	f000 8160 	beq.w	a95ec <_malloc_r+0x3d0>
   a932c:	684b      	ldr	r3, [r1, #4]
   a932e:	f023 0303 	bic.w	r3, r3, #3
   a9332:	1b5a      	subs	r2, r3, r5
   a9334:	2a0f      	cmp	r2, #15
   a9336:	ddf2      	ble.n	a931e <_malloc_r+0x102>
   a9338:	460c      	mov	r4, r1
   a933a:	68cb      	ldr	r3, [r1, #12]
   a933c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a9340:	f045 0801 	orr.w	r8, r5, #1
   a9344:	f8c1 8004 	str.w	r8, [r1, #4]
   a9348:	440d      	add	r5, r1
   a934a:	f042 0101 	orr.w	r1, r2, #1
   a934e:	f8cc 300c 	str.w	r3, [ip, #12]
   a9352:	4630      	mov	r0, r6
   a9354:	f8c3 c008 	str.w	ip, [r3, #8]
   a9358:	617d      	str	r5, [r7, #20]
   a935a:	613d      	str	r5, [r7, #16]
   a935c:	f8c5 e00c 	str.w	lr, [r5, #12]
   a9360:	f8c5 e008 	str.w	lr, [r5, #8]
   a9364:	6069      	str	r1, [r5, #4]
   a9366:	50aa      	str	r2, [r5, r2]
   a9368:	f000 fab0 	bl	a98cc <__malloc_unlock>
   a936c:	e01f      	b.n	a93ae <_malloc_r+0x192>
   a936e:	2910      	cmp	r1, #16
   a9370:	d821      	bhi.n	a93b6 <_malloc_r+0x19a>
   a9372:	f000 faa9 	bl	a98c8 <__malloc_lock>
   a9376:	2510      	movs	r5, #16
   a9378:	2306      	movs	r3, #6
   a937a:	2002      	movs	r0, #2
   a937c:	4f77      	ldr	r7, [pc, #476]	; (a955c <_malloc_r+0x340>)
   a937e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   a9382:	685c      	ldr	r4, [r3, #4]
   a9384:	f1a3 0208 	sub.w	r2, r3, #8
   a9388:	4294      	cmp	r4, r2
   a938a:	f000 8138 	beq.w	a95fe <_malloc_r+0x3e2>
   a938e:	6863      	ldr	r3, [r4, #4]
   a9390:	68e1      	ldr	r1, [r4, #12]
   a9392:	f023 0303 	bic.w	r3, r3, #3
   a9396:	4423      	add	r3, r4
   a9398:	685a      	ldr	r2, [r3, #4]
   a939a:	68a5      	ldr	r5, [r4, #8]
   a939c:	f042 0201 	orr.w	r2, r2, #1
   a93a0:	60e9      	str	r1, [r5, #12]
   a93a2:	4630      	mov	r0, r6
   a93a4:	608d      	str	r5, [r1, #8]
   a93a6:	605a      	str	r2, [r3, #4]
   a93a8:	f000 fa90 	bl	a98cc <__malloc_unlock>
   a93ac:	3408      	adds	r4, #8
   a93ae:	4620      	mov	r0, r4
   a93b0:	b003      	add	sp, #12
   a93b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a93b6:	2400      	movs	r4, #0
   a93b8:	4620      	mov	r0, r4
   a93ba:	230c      	movs	r3, #12
   a93bc:	6033      	str	r3, [r6, #0]
   a93be:	b003      	add	sp, #12
   a93c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a93c4:	2180      	movs	r1, #128	; 0x80
   a93c6:	f04f 0e40 	mov.w	lr, #64	; 0x40
   a93ca:	203f      	movs	r0, #63	; 0x3f
   a93cc:	e748      	b.n	a9260 <_malloc_r+0x44>
   a93ce:	4670      	mov	r0, lr
   a93d0:	e75b      	b.n	a928a <_malloc_r+0x6e>
   a93d2:	4423      	add	r3, r4
   a93d4:	685a      	ldr	r2, [r3, #4]
   a93d6:	68e1      	ldr	r1, [r4, #12]
   a93d8:	e7df      	b.n	a939a <_malloc_r+0x17e>
   a93da:	4423      	add	r3, r4
   a93dc:	685a      	ldr	r2, [r3, #4]
   a93de:	4630      	mov	r0, r6
   a93e0:	f042 0201 	orr.w	r2, r2, #1
   a93e4:	605a      	str	r2, [r3, #4]
   a93e6:	3408      	adds	r4, #8
   a93e8:	f000 fa70 	bl	a98cc <__malloc_unlock>
   a93ec:	4620      	mov	r0, r4
   a93ee:	b003      	add	sp, #12
   a93f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a93f4:	68bc      	ldr	r4, [r7, #8]
   a93f6:	6863      	ldr	r3, [r4, #4]
   a93f8:	f023 0803 	bic.w	r8, r3, #3
   a93fc:	45a8      	cmp	r8, r5
   a93fe:	d304      	bcc.n	a940a <_malloc_r+0x1ee>
   a9400:	ebc5 0308 	rsb	r3, r5, r8
   a9404:	2b0f      	cmp	r3, #15
   a9406:	f300 808c 	bgt.w	a9522 <_malloc_r+0x306>
   a940a:	4b55      	ldr	r3, [pc, #340]	; (a9560 <_malloc_r+0x344>)
   a940c:	f8df 9160 	ldr.w	r9, [pc, #352]	; a9570 <_malloc_r+0x354>
   a9410:	681a      	ldr	r2, [r3, #0]
   a9412:	f8d9 3000 	ldr.w	r3, [r9]
   a9416:	442a      	add	r2, r5
   a9418:	3301      	adds	r3, #1
   a941a:	eb04 0a08 	add.w	sl, r4, r8
   a941e:	f000 8160 	beq.w	a96e2 <_malloc_r+0x4c6>
   a9422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a9426:	320f      	adds	r2, #15
   a9428:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a942c:	f022 020f 	bic.w	r2, r2, #15
   a9430:	4611      	mov	r1, r2
   a9432:	4630      	mov	r0, r6
   a9434:	9201      	str	r2, [sp, #4]
   a9436:	f000 fc35 	bl	a9ca4 <_sbrk_r>
   a943a:	f1b0 3fff 	cmp.w	r0, #4294967295
   a943e:	4683      	mov	fp, r0
   a9440:	9a01      	ldr	r2, [sp, #4]
   a9442:	f000 8158 	beq.w	a96f6 <_malloc_r+0x4da>
   a9446:	4582      	cmp	sl, r0
   a9448:	f200 80fc 	bhi.w	a9644 <_malloc_r+0x428>
   a944c:	4b45      	ldr	r3, [pc, #276]	; (a9564 <_malloc_r+0x348>)
   a944e:	45da      	cmp	sl, fp
   a9450:	6819      	ldr	r1, [r3, #0]
   a9452:	4411      	add	r1, r2
   a9454:	6019      	str	r1, [r3, #0]
   a9456:	f000 8153 	beq.w	a9700 <_malloc_r+0x4e4>
   a945a:	f8d9 0000 	ldr.w	r0, [r9]
   a945e:	f8df e110 	ldr.w	lr, [pc, #272]	; a9570 <_malloc_r+0x354>
   a9462:	3001      	adds	r0, #1
   a9464:	bf1b      	ittet	ne
   a9466:	ebca 0a0b 	rsbne	sl, sl, fp
   a946a:	4451      	addne	r1, sl
   a946c:	f8ce b000 	streq.w	fp, [lr]
   a9470:	6019      	strne	r1, [r3, #0]
   a9472:	f01b 0107 	ands.w	r1, fp, #7
   a9476:	f000 8117 	beq.w	a96a8 <_malloc_r+0x48c>
   a947a:	f1c1 0008 	rsb	r0, r1, #8
   a947e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a9482:	4483      	add	fp, r0
   a9484:	3108      	adds	r1, #8
   a9486:	445a      	add	r2, fp
   a9488:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a948c:	ebc2 0901 	rsb	r9, r2, r1
   a9490:	4649      	mov	r1, r9
   a9492:	4630      	mov	r0, r6
   a9494:	9301      	str	r3, [sp, #4]
   a9496:	f000 fc05 	bl	a9ca4 <_sbrk_r>
   a949a:	1c43      	adds	r3, r0, #1
   a949c:	9b01      	ldr	r3, [sp, #4]
   a949e:	f000 813f 	beq.w	a9720 <_malloc_r+0x504>
   a94a2:	ebcb 0200 	rsb	r2, fp, r0
   a94a6:	444a      	add	r2, r9
   a94a8:	f042 0201 	orr.w	r2, r2, #1
   a94ac:	6819      	ldr	r1, [r3, #0]
   a94ae:	42bc      	cmp	r4, r7
   a94b0:	4449      	add	r1, r9
   a94b2:	f8c7 b008 	str.w	fp, [r7, #8]
   a94b6:	6019      	str	r1, [r3, #0]
   a94b8:	f8cb 2004 	str.w	r2, [fp, #4]
   a94bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; a9564 <_malloc_r+0x348>
   a94c0:	d016      	beq.n	a94f0 <_malloc_r+0x2d4>
   a94c2:	f1b8 0f0f 	cmp.w	r8, #15
   a94c6:	f240 80fd 	bls.w	a96c4 <_malloc_r+0x4a8>
   a94ca:	6862      	ldr	r2, [r4, #4]
   a94cc:	f1a8 030c 	sub.w	r3, r8, #12
   a94d0:	f023 0307 	bic.w	r3, r3, #7
   a94d4:	f002 0201 	and.w	r2, r2, #1
   a94d8:	18e0      	adds	r0, r4, r3
   a94da:	f04f 0e05 	mov.w	lr, #5
   a94de:	431a      	orrs	r2, r3
   a94e0:	2b0f      	cmp	r3, #15
   a94e2:	6062      	str	r2, [r4, #4]
   a94e4:	f8c0 e004 	str.w	lr, [r0, #4]
   a94e8:	f8c0 e008 	str.w	lr, [r0, #8]
   a94ec:	f200 811c 	bhi.w	a9728 <_malloc_r+0x50c>
   a94f0:	4b1d      	ldr	r3, [pc, #116]	; (a9568 <_malloc_r+0x34c>)
   a94f2:	68bc      	ldr	r4, [r7, #8]
   a94f4:	681a      	ldr	r2, [r3, #0]
   a94f6:	4291      	cmp	r1, r2
   a94f8:	bf88      	it	hi
   a94fa:	6019      	strhi	r1, [r3, #0]
   a94fc:	4b1b      	ldr	r3, [pc, #108]	; (a956c <_malloc_r+0x350>)
   a94fe:	681a      	ldr	r2, [r3, #0]
   a9500:	4291      	cmp	r1, r2
   a9502:	6862      	ldr	r2, [r4, #4]
   a9504:	bf88      	it	hi
   a9506:	6019      	strhi	r1, [r3, #0]
   a9508:	f022 0203 	bic.w	r2, r2, #3
   a950c:	4295      	cmp	r5, r2
   a950e:	eba2 0305 	sub.w	r3, r2, r5
   a9512:	d801      	bhi.n	a9518 <_malloc_r+0x2fc>
   a9514:	2b0f      	cmp	r3, #15
   a9516:	dc04      	bgt.n	a9522 <_malloc_r+0x306>
   a9518:	4630      	mov	r0, r6
   a951a:	f000 f9d7 	bl	a98cc <__malloc_unlock>
   a951e:	2400      	movs	r4, #0
   a9520:	e745      	b.n	a93ae <_malloc_r+0x192>
   a9522:	f045 0201 	orr.w	r2, r5, #1
   a9526:	f043 0301 	orr.w	r3, r3, #1
   a952a:	4425      	add	r5, r4
   a952c:	6062      	str	r2, [r4, #4]
   a952e:	4630      	mov	r0, r6
   a9530:	60bd      	str	r5, [r7, #8]
   a9532:	3408      	adds	r4, #8
   a9534:	606b      	str	r3, [r5, #4]
   a9536:	f000 f9c9 	bl	a98cc <__malloc_unlock>
   a953a:	4620      	mov	r0, r4
   a953c:	b003      	add	sp, #12
   a953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a9542:	2b14      	cmp	r3, #20
   a9544:	d971      	bls.n	a962a <_malloc_r+0x40e>
   a9546:	2b54      	cmp	r3, #84	; 0x54
   a9548:	f200 80a4 	bhi.w	a9694 <_malloc_r+0x478>
   a954c:	0b28      	lsrs	r0, r5, #12
   a954e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   a9552:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a9556:	306e      	adds	r0, #110	; 0x6e
   a9558:	e682      	b.n	a9260 <_malloc_r+0x44>
   a955a:	bf00      	nop
   a955c:	20071194 	.word	0x20071194
   a9560:	20071be0 	.word	0x20071be0
   a9564:	20071be4 	.word	0x20071be4
   a9568:	20071bdc 	.word	0x20071bdc
   a956c:	20071bd8 	.word	0x20071bd8
   a9570:	200715a0 	.word	0x200715a0
   a9574:	0a5a      	lsrs	r2, r3, #9
   a9576:	2a04      	cmp	r2, #4
   a9578:	d95e      	bls.n	a9638 <_malloc_r+0x41c>
   a957a:	2a14      	cmp	r2, #20
   a957c:	f200 80b3 	bhi.w	a96e6 <_malloc_r+0x4ca>
   a9580:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   a9584:	0049      	lsls	r1, r1, #1
   a9586:	325b      	adds	r2, #91	; 0x5b
   a9588:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   a958c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   a9590:	f1ac 0c08 	sub.w	ip, ip, #8
   a9594:	458c      	cmp	ip, r1
   a9596:	f8df 81d8 	ldr.w	r8, [pc, #472]	; a9770 <_malloc_r+0x554>
   a959a:	f000 8088 	beq.w	a96ae <_malloc_r+0x492>
   a959e:	684a      	ldr	r2, [r1, #4]
   a95a0:	f022 0203 	bic.w	r2, r2, #3
   a95a4:	4293      	cmp	r3, r2
   a95a6:	d202      	bcs.n	a95ae <_malloc_r+0x392>
   a95a8:	6889      	ldr	r1, [r1, #8]
   a95aa:	458c      	cmp	ip, r1
   a95ac:	d1f7      	bne.n	a959e <_malloc_r+0x382>
   a95ae:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   a95b2:	687a      	ldr	r2, [r7, #4]
   a95b4:	f8c4 c00c 	str.w	ip, [r4, #12]
   a95b8:	60a1      	str	r1, [r4, #8]
   a95ba:	f8cc 4008 	str.w	r4, [ip, #8]
   a95be:	60cc      	str	r4, [r1, #12]
   a95c0:	e696      	b.n	a92f0 <_malloc_r+0xd4>
   a95c2:	f045 0701 	orr.w	r7, r5, #1
   a95c6:	f042 0301 	orr.w	r3, r2, #1
   a95ca:	4425      	add	r5, r4
   a95cc:	6067      	str	r7, [r4, #4]
   a95ce:	4630      	mov	r0, r6
   a95d0:	614d      	str	r5, [r1, #20]
   a95d2:	610d      	str	r5, [r1, #16]
   a95d4:	f8c5 e00c 	str.w	lr, [r5, #12]
   a95d8:	f8c5 e008 	str.w	lr, [r5, #8]
   a95dc:	606b      	str	r3, [r5, #4]
   a95de:	50aa      	str	r2, [r5, r2]
   a95e0:	3408      	adds	r4, #8
   a95e2:	f000 f973 	bl	a98cc <__malloc_unlock>
   a95e6:	e6e2      	b.n	a93ae <_malloc_r+0x192>
   a95e8:	684a      	ldr	r2, [r1, #4]
   a95ea:	e681      	b.n	a92f0 <_malloc_r+0xd4>
   a95ec:	f108 0801 	add.w	r8, r8, #1
   a95f0:	f018 0f03 	tst.w	r8, #3
   a95f4:	f10c 0c08 	add.w	ip, ip, #8
   a95f8:	f47f ae8c 	bne.w	a9314 <_malloc_r+0xf8>
   a95fc:	e030      	b.n	a9660 <_malloc_r+0x444>
   a95fe:	68dc      	ldr	r4, [r3, #12]
   a9600:	42a3      	cmp	r3, r4
   a9602:	bf08      	it	eq
   a9604:	3002      	addeq	r0, #2
   a9606:	f43f ae40 	beq.w	a928a <_malloc_r+0x6e>
   a960a:	e6c0      	b.n	a938e <_malloc_r+0x172>
   a960c:	460c      	mov	r4, r1
   a960e:	440b      	add	r3, r1
   a9610:	685a      	ldr	r2, [r3, #4]
   a9612:	68c9      	ldr	r1, [r1, #12]
   a9614:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a9618:	f042 0201 	orr.w	r2, r2, #1
   a961c:	605a      	str	r2, [r3, #4]
   a961e:	4630      	mov	r0, r6
   a9620:	60e9      	str	r1, [r5, #12]
   a9622:	608d      	str	r5, [r1, #8]
   a9624:	f000 f952 	bl	a98cc <__malloc_unlock>
   a9628:	e6c1      	b.n	a93ae <_malloc_r+0x192>
   a962a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   a962e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   a9632:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a9636:	e613      	b.n	a9260 <_malloc_r+0x44>
   a9638:	099a      	lsrs	r2, r3, #6
   a963a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   a963e:	0049      	lsls	r1, r1, #1
   a9640:	3238      	adds	r2, #56	; 0x38
   a9642:	e7a1      	b.n	a9588 <_malloc_r+0x36c>
   a9644:	42bc      	cmp	r4, r7
   a9646:	4b4a      	ldr	r3, [pc, #296]	; (a9770 <_malloc_r+0x554>)
   a9648:	f43f af00 	beq.w	a944c <_malloc_r+0x230>
   a964c:	689c      	ldr	r4, [r3, #8]
   a964e:	6862      	ldr	r2, [r4, #4]
   a9650:	f022 0203 	bic.w	r2, r2, #3
   a9654:	e75a      	b.n	a950c <_malloc_r+0x2f0>
   a9656:	f859 3908 	ldr.w	r3, [r9], #-8
   a965a:	4599      	cmp	r9, r3
   a965c:	f040 8082 	bne.w	a9764 <_malloc_r+0x548>
   a9660:	f010 0f03 	tst.w	r0, #3
   a9664:	f100 30ff 	add.w	r0, r0, #4294967295
   a9668:	d1f5      	bne.n	a9656 <_malloc_r+0x43a>
   a966a:	687b      	ldr	r3, [r7, #4]
   a966c:	ea23 0304 	bic.w	r3, r3, r4
   a9670:	607b      	str	r3, [r7, #4]
   a9672:	0064      	lsls	r4, r4, #1
   a9674:	429c      	cmp	r4, r3
   a9676:	f63f aebd 	bhi.w	a93f4 <_malloc_r+0x1d8>
   a967a:	2c00      	cmp	r4, #0
   a967c:	f43f aeba 	beq.w	a93f4 <_malloc_r+0x1d8>
   a9680:	421c      	tst	r4, r3
   a9682:	4640      	mov	r0, r8
   a9684:	f47f ae42 	bne.w	a930c <_malloc_r+0xf0>
   a9688:	0064      	lsls	r4, r4, #1
   a968a:	421c      	tst	r4, r3
   a968c:	f100 0004 	add.w	r0, r0, #4
   a9690:	d0fa      	beq.n	a9688 <_malloc_r+0x46c>
   a9692:	e63b      	b.n	a930c <_malloc_r+0xf0>
   a9694:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a9698:	d818      	bhi.n	a96cc <_malloc_r+0x4b0>
   a969a:	0be8      	lsrs	r0, r5, #15
   a969c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   a96a0:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a96a4:	3077      	adds	r0, #119	; 0x77
   a96a6:	e5db      	b.n	a9260 <_malloc_r+0x44>
   a96a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a96ac:	e6eb      	b.n	a9486 <_malloc_r+0x26a>
   a96ae:	2101      	movs	r1, #1
   a96b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a96b4:	1092      	asrs	r2, r2, #2
   a96b6:	fa01 f202 	lsl.w	r2, r1, r2
   a96ba:	431a      	orrs	r2, r3
   a96bc:	f8c8 2004 	str.w	r2, [r8, #4]
   a96c0:	4661      	mov	r1, ip
   a96c2:	e777      	b.n	a95b4 <_malloc_r+0x398>
   a96c4:	2301      	movs	r3, #1
   a96c6:	f8cb 3004 	str.w	r3, [fp, #4]
   a96ca:	e725      	b.n	a9518 <_malloc_r+0x2fc>
   a96cc:	f240 5254 	movw	r2, #1364	; 0x554
   a96d0:	4293      	cmp	r3, r2
   a96d2:	d820      	bhi.n	a9716 <_malloc_r+0x4fa>
   a96d4:	0ca8      	lsrs	r0, r5, #18
   a96d6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   a96da:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a96de:	307c      	adds	r0, #124	; 0x7c
   a96e0:	e5be      	b.n	a9260 <_malloc_r+0x44>
   a96e2:	3210      	adds	r2, #16
   a96e4:	e6a4      	b.n	a9430 <_malloc_r+0x214>
   a96e6:	2a54      	cmp	r2, #84	; 0x54
   a96e8:	d826      	bhi.n	a9738 <_malloc_r+0x51c>
   a96ea:	0b1a      	lsrs	r2, r3, #12
   a96ec:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   a96f0:	0049      	lsls	r1, r1, #1
   a96f2:	326e      	adds	r2, #110	; 0x6e
   a96f4:	e748      	b.n	a9588 <_malloc_r+0x36c>
   a96f6:	68bc      	ldr	r4, [r7, #8]
   a96f8:	6862      	ldr	r2, [r4, #4]
   a96fa:	f022 0203 	bic.w	r2, r2, #3
   a96fe:	e705      	b.n	a950c <_malloc_r+0x2f0>
   a9700:	f3ca 000b 	ubfx	r0, sl, #0, #12
   a9704:	2800      	cmp	r0, #0
   a9706:	f47f aea8 	bne.w	a945a <_malloc_r+0x23e>
   a970a:	4442      	add	r2, r8
   a970c:	68bb      	ldr	r3, [r7, #8]
   a970e:	f042 0201 	orr.w	r2, r2, #1
   a9712:	605a      	str	r2, [r3, #4]
   a9714:	e6ec      	b.n	a94f0 <_malloc_r+0x2d4>
   a9716:	21fe      	movs	r1, #254	; 0xfe
   a9718:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   a971c:	207e      	movs	r0, #126	; 0x7e
   a971e:	e59f      	b.n	a9260 <_malloc_r+0x44>
   a9720:	2201      	movs	r2, #1
   a9722:	f04f 0900 	mov.w	r9, #0
   a9726:	e6c1      	b.n	a94ac <_malloc_r+0x290>
   a9728:	f104 0108 	add.w	r1, r4, #8
   a972c:	4630      	mov	r0, r6
   a972e:	f7ff fa65 	bl	a8bfc <_free_r>
   a9732:	f8d9 1000 	ldr.w	r1, [r9]
   a9736:	e6db      	b.n	a94f0 <_malloc_r+0x2d4>
   a9738:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a973c:	d805      	bhi.n	a974a <_malloc_r+0x52e>
   a973e:	0bda      	lsrs	r2, r3, #15
   a9740:	f102 0178 	add.w	r1, r2, #120	; 0x78
   a9744:	0049      	lsls	r1, r1, #1
   a9746:	3277      	adds	r2, #119	; 0x77
   a9748:	e71e      	b.n	a9588 <_malloc_r+0x36c>
   a974a:	f240 5154 	movw	r1, #1364	; 0x554
   a974e:	428a      	cmp	r2, r1
   a9750:	d805      	bhi.n	a975e <_malloc_r+0x542>
   a9752:	0c9a      	lsrs	r2, r3, #18
   a9754:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   a9758:	0049      	lsls	r1, r1, #1
   a975a:	327c      	adds	r2, #124	; 0x7c
   a975c:	e714      	b.n	a9588 <_malloc_r+0x36c>
   a975e:	21fe      	movs	r1, #254	; 0xfe
   a9760:	227e      	movs	r2, #126	; 0x7e
   a9762:	e711      	b.n	a9588 <_malloc_r+0x36c>
   a9764:	687b      	ldr	r3, [r7, #4]
   a9766:	e784      	b.n	a9672 <_malloc_r+0x456>
   a9768:	08e8      	lsrs	r0, r5, #3
   a976a:	1c43      	adds	r3, r0, #1
   a976c:	005b      	lsls	r3, r3, #1
   a976e:	e605      	b.n	a937c <_malloc_r+0x160>
   a9770:	20071194 	.word	0x20071194

000a9774 <memchr>:
   a9774:	0783      	lsls	r3, r0, #30
   a9776:	b470      	push	{r4, r5, r6}
   a9778:	b2cd      	uxtb	r5, r1
   a977a:	d03d      	beq.n	a97f8 <memchr+0x84>
   a977c:	1e53      	subs	r3, r2, #1
   a977e:	b302      	cbz	r2, a97c2 <memchr+0x4e>
   a9780:	7802      	ldrb	r2, [r0, #0]
   a9782:	42aa      	cmp	r2, r5
   a9784:	d01e      	beq.n	a97c4 <memchr+0x50>
   a9786:	1c42      	adds	r2, r0, #1
   a9788:	e004      	b.n	a9794 <memchr+0x20>
   a978a:	b1d3      	cbz	r3, a97c2 <memchr+0x4e>
   a978c:	7804      	ldrb	r4, [r0, #0]
   a978e:	3b01      	subs	r3, #1
   a9790:	42ac      	cmp	r4, r5
   a9792:	d017      	beq.n	a97c4 <memchr+0x50>
   a9794:	f012 0f03 	tst.w	r2, #3
   a9798:	4610      	mov	r0, r2
   a979a:	f102 0201 	add.w	r2, r2, #1
   a979e:	d1f4      	bne.n	a978a <memchr+0x16>
   a97a0:	2b03      	cmp	r3, #3
   a97a2:	d811      	bhi.n	a97c8 <memchr+0x54>
   a97a4:	b353      	cbz	r3, a97fc <memchr+0x88>
   a97a6:	7802      	ldrb	r2, [r0, #0]
   a97a8:	42aa      	cmp	r2, r5
   a97aa:	d00b      	beq.n	a97c4 <memchr+0x50>
   a97ac:	4403      	add	r3, r0
   a97ae:	1c42      	adds	r2, r0, #1
   a97b0:	e002      	b.n	a97b8 <memchr+0x44>
   a97b2:	7801      	ldrb	r1, [r0, #0]
   a97b4:	42a9      	cmp	r1, r5
   a97b6:	d005      	beq.n	a97c4 <memchr+0x50>
   a97b8:	4293      	cmp	r3, r2
   a97ba:	4610      	mov	r0, r2
   a97bc:	f102 0201 	add.w	r2, r2, #1
   a97c0:	d1f7      	bne.n	a97b2 <memchr+0x3e>
   a97c2:	2000      	movs	r0, #0
   a97c4:	bc70      	pop	{r4, r5, r6}
   a97c6:	4770      	bx	lr
   a97c8:	4604      	mov	r4, r0
   a97ca:	020e      	lsls	r6, r1, #8
   a97cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   a97d0:	432e      	orrs	r6, r5
   a97d2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a97d6:	6822      	ldr	r2, [r4, #0]
   a97d8:	4620      	mov	r0, r4
   a97da:	4072      	eors	r2, r6
   a97dc:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   a97e0:	ea21 0202 	bic.w	r2, r1, r2
   a97e4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a97e8:	f104 0404 	add.w	r4, r4, #4
   a97ec:	d1db      	bne.n	a97a6 <memchr+0x32>
   a97ee:	3b04      	subs	r3, #4
   a97f0:	2b03      	cmp	r3, #3
   a97f2:	4620      	mov	r0, r4
   a97f4:	d8ef      	bhi.n	a97d6 <memchr+0x62>
   a97f6:	e7d5      	b.n	a97a4 <memchr+0x30>
   a97f8:	4613      	mov	r3, r2
   a97fa:	e7d1      	b.n	a97a0 <memchr+0x2c>
   a97fc:	4618      	mov	r0, r3
   a97fe:	e7e1      	b.n	a97c4 <memchr+0x50>

000a9800 <memmove>:
   a9800:	4288      	cmp	r0, r1
   a9802:	b5f0      	push	{r4, r5, r6, r7, lr}
   a9804:	d90d      	bls.n	a9822 <memmove+0x22>
   a9806:	188b      	adds	r3, r1, r2
   a9808:	4298      	cmp	r0, r3
   a980a:	d20a      	bcs.n	a9822 <memmove+0x22>
   a980c:	1881      	adds	r1, r0, r2
   a980e:	2a00      	cmp	r2, #0
   a9810:	d051      	beq.n	a98b6 <memmove+0xb6>
   a9812:	1a9a      	subs	r2, r3, r2
   a9814:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a9818:	4293      	cmp	r3, r2
   a981a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a981e:	d1f9      	bne.n	a9814 <memmove+0x14>
   a9820:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a9822:	2a0f      	cmp	r2, #15
   a9824:	d948      	bls.n	a98b8 <memmove+0xb8>
   a9826:	ea41 0300 	orr.w	r3, r1, r0
   a982a:	079b      	lsls	r3, r3, #30
   a982c:	d146      	bne.n	a98bc <memmove+0xbc>
   a982e:	4615      	mov	r5, r2
   a9830:	f100 0410 	add.w	r4, r0, #16
   a9834:	f101 0310 	add.w	r3, r1, #16
   a9838:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a983c:	3d10      	subs	r5, #16
   a983e:	f844 6c10 	str.w	r6, [r4, #-16]
   a9842:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a9846:	2d0f      	cmp	r5, #15
   a9848:	f844 6c0c 	str.w	r6, [r4, #-12]
   a984c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a9850:	f104 0410 	add.w	r4, r4, #16
   a9854:	f844 6c18 	str.w	r6, [r4, #-24]
   a9858:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a985c:	f103 0310 	add.w	r3, r3, #16
   a9860:	f844 6c14 	str.w	r6, [r4, #-20]
   a9864:	d8e8      	bhi.n	a9838 <memmove+0x38>
   a9866:	f1a2 0310 	sub.w	r3, r2, #16
   a986a:	f023 030f 	bic.w	r3, r3, #15
   a986e:	f002 0e0f 	and.w	lr, r2, #15
   a9872:	3310      	adds	r3, #16
   a9874:	f1be 0f03 	cmp.w	lr, #3
   a9878:	4419      	add	r1, r3
   a987a:	4403      	add	r3, r0
   a987c:	d921      	bls.n	a98c2 <memmove+0xc2>
   a987e:	460e      	mov	r6, r1
   a9880:	4674      	mov	r4, lr
   a9882:	1f1d      	subs	r5, r3, #4
   a9884:	f856 7b04 	ldr.w	r7, [r6], #4
   a9888:	3c04      	subs	r4, #4
   a988a:	2c03      	cmp	r4, #3
   a988c:	f845 7f04 	str.w	r7, [r5, #4]!
   a9890:	d8f8      	bhi.n	a9884 <memmove+0x84>
   a9892:	f1ae 0404 	sub.w	r4, lr, #4
   a9896:	f024 0403 	bic.w	r4, r4, #3
   a989a:	3404      	adds	r4, #4
   a989c:	4423      	add	r3, r4
   a989e:	4421      	add	r1, r4
   a98a0:	f002 0203 	and.w	r2, r2, #3
   a98a4:	b162      	cbz	r2, a98c0 <memmove+0xc0>
   a98a6:	3b01      	subs	r3, #1
   a98a8:	440a      	add	r2, r1
   a98aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   a98ae:	428a      	cmp	r2, r1
   a98b0:	f803 4f01 	strb.w	r4, [r3, #1]!
   a98b4:	d1f9      	bne.n	a98aa <memmove+0xaa>
   a98b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a98b8:	4603      	mov	r3, r0
   a98ba:	e7f3      	b.n	a98a4 <memmove+0xa4>
   a98bc:	4603      	mov	r3, r0
   a98be:	e7f2      	b.n	a98a6 <memmove+0xa6>
   a98c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a98c2:	4672      	mov	r2, lr
   a98c4:	e7ee      	b.n	a98a4 <memmove+0xa4>
   a98c6:	bf00      	nop

000a98c8 <__malloc_lock>:
   a98c8:	4770      	bx	lr
   a98ca:	bf00      	nop

000a98cc <__malloc_unlock>:
   a98cc:	4770      	bx	lr
   a98ce:	bf00      	nop

000a98d0 <_realloc_r>:
   a98d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a98d4:	4617      	mov	r7, r2
   a98d6:	b083      	sub	sp, #12
   a98d8:	2900      	cmp	r1, #0
   a98da:	f000 808f 	beq.w	a99fc <_realloc_r+0x12c>
   a98de:	460d      	mov	r5, r1
   a98e0:	4681      	mov	r9, r0
   a98e2:	f107 040b 	add.w	r4, r7, #11
   a98e6:	f7ff ffef 	bl	a98c8 <__malloc_lock>
   a98ea:	f855 ec04 	ldr.w	lr, [r5, #-4]
   a98ee:	2c16      	cmp	r4, #22
   a98f0:	f02e 0603 	bic.w	r6, lr, #3
   a98f4:	f1a5 0808 	sub.w	r8, r5, #8
   a98f8:	d83c      	bhi.n	a9974 <_realloc_r+0xa4>
   a98fa:	2210      	movs	r2, #16
   a98fc:	4614      	mov	r4, r2
   a98fe:	42a7      	cmp	r7, r4
   a9900:	d83d      	bhi.n	a997e <_realloc_r+0xae>
   a9902:	4296      	cmp	r6, r2
   a9904:	da42      	bge.n	a998c <_realloc_r+0xbc>
   a9906:	4bc6      	ldr	r3, [pc, #792]	; (a9c20 <_realloc_r+0x350>)
   a9908:	eb08 0006 	add.w	r0, r8, r6
   a990c:	6899      	ldr	r1, [r3, #8]
   a990e:	4288      	cmp	r0, r1
   a9910:	6841      	ldr	r1, [r0, #4]
   a9912:	f000 80d7 	beq.w	a9ac4 <_realloc_r+0x1f4>
   a9916:	f021 0301 	bic.w	r3, r1, #1
   a991a:	4403      	add	r3, r0
   a991c:	685b      	ldr	r3, [r3, #4]
   a991e:	07db      	lsls	r3, r3, #31
   a9920:	d54c      	bpl.n	a99bc <_realloc_r+0xec>
   a9922:	f01e 0f01 	tst.w	lr, #1
   a9926:	f000 809d 	beq.w	a9a64 <_realloc_r+0x194>
   a992a:	4639      	mov	r1, r7
   a992c:	4648      	mov	r0, r9
   a992e:	f7ff fc75 	bl	a921c <_malloc_r>
   a9932:	4607      	mov	r7, r0
   a9934:	2800      	cmp	r0, #0
   a9936:	d03a      	beq.n	a99ae <_realloc_r+0xde>
   a9938:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a993c:	f1a0 0208 	sub.w	r2, r0, #8
   a9940:	f023 0301 	bic.w	r3, r3, #1
   a9944:	4443      	add	r3, r8
   a9946:	429a      	cmp	r2, r3
   a9948:	f000 813e 	beq.w	a9bc8 <_realloc_r+0x2f8>
   a994c:	1f32      	subs	r2, r6, #4
   a994e:	2a24      	cmp	r2, #36	; 0x24
   a9950:	f200 812b 	bhi.w	a9baa <_realloc_r+0x2da>
   a9954:	2a13      	cmp	r2, #19
   a9956:	f200 80ff 	bhi.w	a9b58 <_realloc_r+0x288>
   a995a:	4603      	mov	r3, r0
   a995c:	462a      	mov	r2, r5
   a995e:	6811      	ldr	r1, [r2, #0]
   a9960:	6019      	str	r1, [r3, #0]
   a9962:	6851      	ldr	r1, [r2, #4]
   a9964:	6059      	str	r1, [r3, #4]
   a9966:	6892      	ldr	r2, [r2, #8]
   a9968:	609a      	str	r2, [r3, #8]
   a996a:	4629      	mov	r1, r5
   a996c:	4648      	mov	r0, r9
   a996e:	f7ff f945 	bl	a8bfc <_free_r>
   a9972:	e01c      	b.n	a99ae <_realloc_r+0xde>
   a9974:	f024 0407 	bic.w	r4, r4, #7
   a9978:	2c00      	cmp	r4, #0
   a997a:	4622      	mov	r2, r4
   a997c:	dabf      	bge.n	a98fe <_realloc_r+0x2e>
   a997e:	230c      	movs	r3, #12
   a9980:	2000      	movs	r0, #0
   a9982:	f8c9 3000 	str.w	r3, [r9]
   a9986:	b003      	add	sp, #12
   a9988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a998c:	462f      	mov	r7, r5
   a998e:	1b33      	subs	r3, r6, r4
   a9990:	2b0f      	cmp	r3, #15
   a9992:	f8d8 2004 	ldr.w	r2, [r8, #4]
   a9996:	d81d      	bhi.n	a99d4 <_realloc_r+0x104>
   a9998:	f002 0201 	and.w	r2, r2, #1
   a999c:	4332      	orrs	r2, r6
   a999e:	eb08 0106 	add.w	r1, r8, r6
   a99a2:	f8c8 2004 	str.w	r2, [r8, #4]
   a99a6:	684b      	ldr	r3, [r1, #4]
   a99a8:	f043 0301 	orr.w	r3, r3, #1
   a99ac:	604b      	str	r3, [r1, #4]
   a99ae:	4648      	mov	r0, r9
   a99b0:	f7ff ff8c 	bl	a98cc <__malloc_unlock>
   a99b4:	4638      	mov	r0, r7
   a99b6:	b003      	add	sp, #12
   a99b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a99bc:	f021 0103 	bic.w	r1, r1, #3
   a99c0:	4431      	add	r1, r6
   a99c2:	4291      	cmp	r1, r2
   a99c4:	db20      	blt.n	a9a08 <_realloc_r+0x138>
   a99c6:	68c3      	ldr	r3, [r0, #12]
   a99c8:	6882      	ldr	r2, [r0, #8]
   a99ca:	462f      	mov	r7, r5
   a99cc:	60d3      	str	r3, [r2, #12]
   a99ce:	460e      	mov	r6, r1
   a99d0:	609a      	str	r2, [r3, #8]
   a99d2:	e7dc      	b.n	a998e <_realloc_r+0xbe>
   a99d4:	f002 0201 	and.w	r2, r2, #1
   a99d8:	eb08 0104 	add.w	r1, r8, r4
   a99dc:	4314      	orrs	r4, r2
   a99de:	f043 0201 	orr.w	r2, r3, #1
   a99e2:	f8c8 4004 	str.w	r4, [r8, #4]
   a99e6:	440b      	add	r3, r1
   a99e8:	604a      	str	r2, [r1, #4]
   a99ea:	685a      	ldr	r2, [r3, #4]
   a99ec:	3108      	adds	r1, #8
   a99ee:	f042 0201 	orr.w	r2, r2, #1
   a99f2:	605a      	str	r2, [r3, #4]
   a99f4:	4648      	mov	r0, r9
   a99f6:	f7ff f901 	bl	a8bfc <_free_r>
   a99fa:	e7d8      	b.n	a99ae <_realloc_r+0xde>
   a99fc:	4611      	mov	r1, r2
   a99fe:	b003      	add	sp, #12
   a9a00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a9a04:	f7ff bc0a 	b.w	a921c <_malloc_r>
   a9a08:	f01e 0f01 	tst.w	lr, #1
   a9a0c:	d18d      	bne.n	a992a <_realloc_r+0x5a>
   a9a0e:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a9a12:	ebc3 0a08 	rsb	sl, r3, r8
   a9a16:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9a1a:	f023 0c03 	bic.w	ip, r3, #3
   a9a1e:	eb01 0e0c 	add.w	lr, r1, ip
   a9a22:	4596      	cmp	lr, r2
   a9a24:	db26      	blt.n	a9a74 <_realloc_r+0x1a4>
   a9a26:	4657      	mov	r7, sl
   a9a28:	68c3      	ldr	r3, [r0, #12]
   a9a2a:	6881      	ldr	r1, [r0, #8]
   a9a2c:	1f32      	subs	r2, r6, #4
   a9a2e:	60cb      	str	r3, [r1, #12]
   a9a30:	6099      	str	r1, [r3, #8]
   a9a32:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a9a36:	f8da 300c 	ldr.w	r3, [sl, #12]
   a9a3a:	2a24      	cmp	r2, #36	; 0x24
   a9a3c:	60cb      	str	r3, [r1, #12]
   a9a3e:	6099      	str	r1, [r3, #8]
   a9a40:	f200 80c9 	bhi.w	a9bd6 <_realloc_r+0x306>
   a9a44:	2a13      	cmp	r2, #19
   a9a46:	f240 8092 	bls.w	a9b6e <_realloc_r+0x29e>
   a9a4a:	682b      	ldr	r3, [r5, #0]
   a9a4c:	2a1b      	cmp	r2, #27
   a9a4e:	f8ca 3008 	str.w	r3, [sl, #8]
   a9a52:	686b      	ldr	r3, [r5, #4]
   a9a54:	f8ca 300c 	str.w	r3, [sl, #12]
   a9a58:	f200 80cd 	bhi.w	a9bf6 <_realloc_r+0x326>
   a9a5c:	3508      	adds	r5, #8
   a9a5e:	f10a 0310 	add.w	r3, sl, #16
   a9a62:	e085      	b.n	a9b70 <_realloc_r+0x2a0>
   a9a64:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a9a68:	ebc3 0a08 	rsb	sl, r3, r8
   a9a6c:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9a70:	f023 0c03 	bic.w	ip, r3, #3
   a9a74:	eb06 030c 	add.w	r3, r6, ip
   a9a78:	4293      	cmp	r3, r2
   a9a7a:	f6ff af56 	blt.w	a992a <_realloc_r+0x5a>
   a9a7e:	4657      	mov	r7, sl
   a9a80:	f8da 100c 	ldr.w	r1, [sl, #12]
   a9a84:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a9a88:	1f32      	subs	r2, r6, #4
   a9a8a:	2a24      	cmp	r2, #36	; 0x24
   a9a8c:	60c1      	str	r1, [r0, #12]
   a9a8e:	6088      	str	r0, [r1, #8]
   a9a90:	f200 80aa 	bhi.w	a9be8 <_realloc_r+0x318>
   a9a94:	2a13      	cmp	r2, #19
   a9a96:	f240 80a5 	bls.w	a9be4 <_realloc_r+0x314>
   a9a9a:	6829      	ldr	r1, [r5, #0]
   a9a9c:	2a1b      	cmp	r2, #27
   a9a9e:	f8ca 1008 	str.w	r1, [sl, #8]
   a9aa2:	6869      	ldr	r1, [r5, #4]
   a9aa4:	f8ca 100c 	str.w	r1, [sl, #12]
   a9aa8:	f200 80bc 	bhi.w	a9c24 <_realloc_r+0x354>
   a9aac:	3508      	adds	r5, #8
   a9aae:	f10a 0210 	add.w	r2, sl, #16
   a9ab2:	6829      	ldr	r1, [r5, #0]
   a9ab4:	461e      	mov	r6, r3
   a9ab6:	6011      	str	r1, [r2, #0]
   a9ab8:	6869      	ldr	r1, [r5, #4]
   a9aba:	46d0      	mov	r8, sl
   a9abc:	6051      	str	r1, [r2, #4]
   a9abe:	68ab      	ldr	r3, [r5, #8]
   a9ac0:	6093      	str	r3, [r2, #8]
   a9ac2:	e764      	b.n	a998e <_realloc_r+0xbe>
   a9ac4:	f021 0b03 	bic.w	fp, r1, #3
   a9ac8:	f104 0010 	add.w	r0, r4, #16
   a9acc:	44b3      	add	fp, r6
   a9ace:	4583      	cmp	fp, r0
   a9ad0:	da57      	bge.n	a9b82 <_realloc_r+0x2b2>
   a9ad2:	f01e 0f01 	tst.w	lr, #1
   a9ad6:	f47f af28 	bne.w	a992a <_realloc_r+0x5a>
   a9ada:	f855 1c08 	ldr.w	r1, [r5, #-8]
   a9ade:	ebc1 0a08 	rsb	sl, r1, r8
   a9ae2:	f8da 1004 	ldr.w	r1, [sl, #4]
   a9ae6:	f021 0c03 	bic.w	ip, r1, #3
   a9aea:	44e3      	add	fp, ip
   a9aec:	4558      	cmp	r0, fp
   a9aee:	dcc1      	bgt.n	a9a74 <_realloc_r+0x1a4>
   a9af0:	4657      	mov	r7, sl
   a9af2:	f8da 100c 	ldr.w	r1, [sl, #12]
   a9af6:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a9afa:	1f32      	subs	r2, r6, #4
   a9afc:	2a24      	cmp	r2, #36	; 0x24
   a9afe:	60c1      	str	r1, [r0, #12]
   a9b00:	6088      	str	r0, [r1, #8]
   a9b02:	f200 80b1 	bhi.w	a9c68 <_realloc_r+0x398>
   a9b06:	2a13      	cmp	r2, #19
   a9b08:	f240 80a2 	bls.w	a9c50 <_realloc_r+0x380>
   a9b0c:	6829      	ldr	r1, [r5, #0]
   a9b0e:	2a1b      	cmp	r2, #27
   a9b10:	f8ca 1008 	str.w	r1, [sl, #8]
   a9b14:	6869      	ldr	r1, [r5, #4]
   a9b16:	f8ca 100c 	str.w	r1, [sl, #12]
   a9b1a:	f200 80ac 	bhi.w	a9c76 <_realloc_r+0x3a6>
   a9b1e:	3508      	adds	r5, #8
   a9b20:	f10a 0210 	add.w	r2, sl, #16
   a9b24:	6829      	ldr	r1, [r5, #0]
   a9b26:	6011      	str	r1, [r2, #0]
   a9b28:	6869      	ldr	r1, [r5, #4]
   a9b2a:	6051      	str	r1, [r2, #4]
   a9b2c:	68a9      	ldr	r1, [r5, #8]
   a9b2e:	6091      	str	r1, [r2, #8]
   a9b30:	ebc4 020b 	rsb	r2, r4, fp
   a9b34:	eb0a 0104 	add.w	r1, sl, r4
   a9b38:	f042 0201 	orr.w	r2, r2, #1
   a9b3c:	6099      	str	r1, [r3, #8]
   a9b3e:	604a      	str	r2, [r1, #4]
   a9b40:	f8da 3004 	ldr.w	r3, [sl, #4]
   a9b44:	4648      	mov	r0, r9
   a9b46:	f003 0301 	and.w	r3, r3, #1
   a9b4a:	431c      	orrs	r4, r3
   a9b4c:	f8ca 4004 	str.w	r4, [sl, #4]
   a9b50:	f7ff febc 	bl	a98cc <__malloc_unlock>
   a9b54:	4638      	mov	r0, r7
   a9b56:	e72e      	b.n	a99b6 <_realloc_r+0xe6>
   a9b58:	682b      	ldr	r3, [r5, #0]
   a9b5a:	2a1b      	cmp	r2, #27
   a9b5c:	6003      	str	r3, [r0, #0]
   a9b5e:	686b      	ldr	r3, [r5, #4]
   a9b60:	6043      	str	r3, [r0, #4]
   a9b62:	d826      	bhi.n	a9bb2 <_realloc_r+0x2e2>
   a9b64:	f100 0308 	add.w	r3, r0, #8
   a9b68:	f105 0208 	add.w	r2, r5, #8
   a9b6c:	e6f7      	b.n	a995e <_realloc_r+0x8e>
   a9b6e:	463b      	mov	r3, r7
   a9b70:	682a      	ldr	r2, [r5, #0]
   a9b72:	4676      	mov	r6, lr
   a9b74:	601a      	str	r2, [r3, #0]
   a9b76:	686a      	ldr	r2, [r5, #4]
   a9b78:	46d0      	mov	r8, sl
   a9b7a:	605a      	str	r2, [r3, #4]
   a9b7c:	68aa      	ldr	r2, [r5, #8]
   a9b7e:	609a      	str	r2, [r3, #8]
   a9b80:	e705      	b.n	a998e <_realloc_r+0xbe>
   a9b82:	ebc4 0b0b 	rsb	fp, r4, fp
   a9b86:	eb08 0104 	add.w	r1, r8, r4
   a9b8a:	f04b 0201 	orr.w	r2, fp, #1
   a9b8e:	6099      	str	r1, [r3, #8]
   a9b90:	604a      	str	r2, [r1, #4]
   a9b92:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a9b96:	4648      	mov	r0, r9
   a9b98:	f003 0301 	and.w	r3, r3, #1
   a9b9c:	431c      	orrs	r4, r3
   a9b9e:	f845 4c04 	str.w	r4, [r5, #-4]
   a9ba2:	f7ff fe93 	bl	a98cc <__malloc_unlock>
   a9ba6:	4628      	mov	r0, r5
   a9ba8:	e705      	b.n	a99b6 <_realloc_r+0xe6>
   a9baa:	4629      	mov	r1, r5
   a9bac:	f7ff fe28 	bl	a9800 <memmove>
   a9bb0:	e6db      	b.n	a996a <_realloc_r+0x9a>
   a9bb2:	68ab      	ldr	r3, [r5, #8]
   a9bb4:	2a24      	cmp	r2, #36	; 0x24
   a9bb6:	6083      	str	r3, [r0, #8]
   a9bb8:	68eb      	ldr	r3, [r5, #12]
   a9bba:	60c3      	str	r3, [r0, #12]
   a9bbc:	d027      	beq.n	a9c0e <_realloc_r+0x33e>
   a9bbe:	f100 0310 	add.w	r3, r0, #16
   a9bc2:	f105 0210 	add.w	r2, r5, #16
   a9bc6:	e6ca      	b.n	a995e <_realloc_r+0x8e>
   a9bc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   a9bcc:	462f      	mov	r7, r5
   a9bce:	f023 0303 	bic.w	r3, r3, #3
   a9bd2:	441e      	add	r6, r3
   a9bd4:	e6db      	b.n	a998e <_realloc_r+0xbe>
   a9bd6:	4629      	mov	r1, r5
   a9bd8:	4638      	mov	r0, r7
   a9bda:	4676      	mov	r6, lr
   a9bdc:	46d0      	mov	r8, sl
   a9bde:	f7ff fe0f 	bl	a9800 <memmove>
   a9be2:	e6d4      	b.n	a998e <_realloc_r+0xbe>
   a9be4:	463a      	mov	r2, r7
   a9be6:	e764      	b.n	a9ab2 <_realloc_r+0x1e2>
   a9be8:	4629      	mov	r1, r5
   a9bea:	4638      	mov	r0, r7
   a9bec:	461e      	mov	r6, r3
   a9bee:	46d0      	mov	r8, sl
   a9bf0:	f7ff fe06 	bl	a9800 <memmove>
   a9bf4:	e6cb      	b.n	a998e <_realloc_r+0xbe>
   a9bf6:	68ab      	ldr	r3, [r5, #8]
   a9bf8:	2a24      	cmp	r2, #36	; 0x24
   a9bfa:	f8ca 3010 	str.w	r3, [sl, #16]
   a9bfe:	68eb      	ldr	r3, [r5, #12]
   a9c00:	f8ca 3014 	str.w	r3, [sl, #20]
   a9c04:	d01a      	beq.n	a9c3c <_realloc_r+0x36c>
   a9c06:	3510      	adds	r5, #16
   a9c08:	f10a 0318 	add.w	r3, sl, #24
   a9c0c:	e7b0      	b.n	a9b70 <_realloc_r+0x2a0>
   a9c0e:	692a      	ldr	r2, [r5, #16]
   a9c10:	f100 0318 	add.w	r3, r0, #24
   a9c14:	6102      	str	r2, [r0, #16]
   a9c16:	6969      	ldr	r1, [r5, #20]
   a9c18:	f105 0218 	add.w	r2, r5, #24
   a9c1c:	6141      	str	r1, [r0, #20]
   a9c1e:	e69e      	b.n	a995e <_realloc_r+0x8e>
   a9c20:	20071194 	.word	0x20071194
   a9c24:	68a9      	ldr	r1, [r5, #8]
   a9c26:	2a24      	cmp	r2, #36	; 0x24
   a9c28:	f8ca 1010 	str.w	r1, [sl, #16]
   a9c2c:	68e9      	ldr	r1, [r5, #12]
   a9c2e:	f8ca 1014 	str.w	r1, [sl, #20]
   a9c32:	d00f      	beq.n	a9c54 <_realloc_r+0x384>
   a9c34:	3510      	adds	r5, #16
   a9c36:	f10a 0218 	add.w	r2, sl, #24
   a9c3a:	e73a      	b.n	a9ab2 <_realloc_r+0x1e2>
   a9c3c:	692a      	ldr	r2, [r5, #16]
   a9c3e:	f10a 0320 	add.w	r3, sl, #32
   a9c42:	f8ca 2018 	str.w	r2, [sl, #24]
   a9c46:	696a      	ldr	r2, [r5, #20]
   a9c48:	3518      	adds	r5, #24
   a9c4a:	f8ca 201c 	str.w	r2, [sl, #28]
   a9c4e:	e78f      	b.n	a9b70 <_realloc_r+0x2a0>
   a9c50:	463a      	mov	r2, r7
   a9c52:	e767      	b.n	a9b24 <_realloc_r+0x254>
   a9c54:	6929      	ldr	r1, [r5, #16]
   a9c56:	f10a 0220 	add.w	r2, sl, #32
   a9c5a:	f8ca 1018 	str.w	r1, [sl, #24]
   a9c5e:	6969      	ldr	r1, [r5, #20]
   a9c60:	3518      	adds	r5, #24
   a9c62:	f8ca 101c 	str.w	r1, [sl, #28]
   a9c66:	e724      	b.n	a9ab2 <_realloc_r+0x1e2>
   a9c68:	4629      	mov	r1, r5
   a9c6a:	4638      	mov	r0, r7
   a9c6c:	9301      	str	r3, [sp, #4]
   a9c6e:	f7ff fdc7 	bl	a9800 <memmove>
   a9c72:	9b01      	ldr	r3, [sp, #4]
   a9c74:	e75c      	b.n	a9b30 <_realloc_r+0x260>
   a9c76:	68a9      	ldr	r1, [r5, #8]
   a9c78:	2a24      	cmp	r2, #36	; 0x24
   a9c7a:	f8ca 1010 	str.w	r1, [sl, #16]
   a9c7e:	68e9      	ldr	r1, [r5, #12]
   a9c80:	f8ca 1014 	str.w	r1, [sl, #20]
   a9c84:	d003      	beq.n	a9c8e <_realloc_r+0x3be>
   a9c86:	3510      	adds	r5, #16
   a9c88:	f10a 0218 	add.w	r2, sl, #24
   a9c8c:	e74a      	b.n	a9b24 <_realloc_r+0x254>
   a9c8e:	6929      	ldr	r1, [r5, #16]
   a9c90:	f10a 0220 	add.w	r2, sl, #32
   a9c94:	f8ca 1018 	str.w	r1, [sl, #24]
   a9c98:	6969      	ldr	r1, [r5, #20]
   a9c9a:	3518      	adds	r5, #24
   a9c9c:	f8ca 101c 	str.w	r1, [sl, #28]
   a9ca0:	e740      	b.n	a9b24 <_realloc_r+0x254>
   a9ca2:	bf00      	nop

000a9ca4 <_sbrk_r>:
   a9ca4:	b538      	push	{r3, r4, r5, lr}
   a9ca6:	4c07      	ldr	r4, [pc, #28]	; (a9cc4 <_sbrk_r+0x20>)
   a9ca8:	2300      	movs	r3, #0
   a9caa:	4605      	mov	r5, r0
   a9cac:	4608      	mov	r0, r1
   a9cae:	6023      	str	r3, [r4, #0]
   a9cb0:	f7f2 fd6a 	bl	9c788 <_sbrk>
   a9cb4:	1c43      	adds	r3, r0, #1
   a9cb6:	d000      	beq.n	a9cba <_sbrk_r+0x16>
   a9cb8:	bd38      	pop	{r3, r4, r5, pc}
   a9cba:	6823      	ldr	r3, [r4, #0]
   a9cbc:	2b00      	cmp	r3, #0
   a9cbe:	d0fb      	beq.n	a9cb8 <_sbrk_r+0x14>
   a9cc0:	602b      	str	r3, [r5, #0]
   a9cc2:	bd38      	pop	{r3, r4, r5, pc}
   a9cc4:	200727f0 	.word	0x200727f0

000a9cc8 <__sread>:
   a9cc8:	b510      	push	{r4, lr}
   a9cca:	460c      	mov	r4, r1
   a9ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a9cd0:	f000 f936 	bl	a9f40 <_read_r>
   a9cd4:	2800      	cmp	r0, #0
   a9cd6:	db03      	blt.n	a9ce0 <__sread+0x18>
   a9cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a9cda:	4403      	add	r3, r0
   a9cdc:	6523      	str	r3, [r4, #80]	; 0x50
   a9cde:	bd10      	pop	{r4, pc}
   a9ce0:	89a3      	ldrh	r3, [r4, #12]
   a9ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a9ce6:	81a3      	strh	r3, [r4, #12]
   a9ce8:	bd10      	pop	{r4, pc}
   a9cea:	bf00      	nop

000a9cec <__swrite>:
   a9cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a9cf0:	460c      	mov	r4, r1
   a9cf2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   a9cf6:	461f      	mov	r7, r3
   a9cf8:	05cb      	lsls	r3, r1, #23
   a9cfa:	4616      	mov	r6, r2
   a9cfc:	4605      	mov	r5, r0
   a9cfe:	d507      	bpl.n	a9d10 <__swrite+0x24>
   a9d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a9d04:	2302      	movs	r3, #2
   a9d06:	2200      	movs	r2, #0
   a9d08:	f000 f904 	bl	a9f14 <_lseek_r>
   a9d0c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   a9d10:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a9d14:	81a1      	strh	r1, [r4, #12]
   a9d16:	463b      	mov	r3, r7
   a9d18:	4632      	mov	r2, r6
   a9d1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a9d1e:	4628      	mov	r0, r5
   a9d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a9d24:	f000 b814 	b.w	a9d50 <_write_r>

000a9d28 <__sseek>:
   a9d28:	b510      	push	{r4, lr}
   a9d2a:	460c      	mov	r4, r1
   a9d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a9d30:	f000 f8f0 	bl	a9f14 <_lseek_r>
   a9d34:	89a3      	ldrh	r3, [r4, #12]
   a9d36:	1c42      	adds	r2, r0, #1
   a9d38:	bf0e      	itee	eq
   a9d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a9d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a9d42:	6520      	strne	r0, [r4, #80]	; 0x50
   a9d44:	81a3      	strh	r3, [r4, #12]
   a9d46:	bd10      	pop	{r4, pc}

000a9d48 <__sclose>:
   a9d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a9d4c:	f000 b868 	b.w	a9e20 <_close_r>

000a9d50 <_write_r>:
   a9d50:	b570      	push	{r4, r5, r6, lr}
   a9d52:	460d      	mov	r5, r1
   a9d54:	4c08      	ldr	r4, [pc, #32]	; (a9d78 <_write_r+0x28>)
   a9d56:	4611      	mov	r1, r2
   a9d58:	4606      	mov	r6, r0
   a9d5a:	461a      	mov	r2, r3
   a9d5c:	4628      	mov	r0, r5
   a9d5e:	2300      	movs	r3, #0
   a9d60:	6023      	str	r3, [r4, #0]
   a9d62:	f7f1 fd21 	bl	9b7a8 <_write>
   a9d66:	1c43      	adds	r3, r0, #1
   a9d68:	d000      	beq.n	a9d6c <_write_r+0x1c>
   a9d6a:	bd70      	pop	{r4, r5, r6, pc}
   a9d6c:	6823      	ldr	r3, [r4, #0]
   a9d6e:	2b00      	cmp	r3, #0
   a9d70:	d0fb      	beq.n	a9d6a <_write_r+0x1a>
   a9d72:	6033      	str	r3, [r6, #0]
   a9d74:	bd70      	pop	{r4, r5, r6, pc}
   a9d76:	bf00      	nop
   a9d78:	200727f0 	.word	0x200727f0

000a9d7c <__register_exitproc>:
   a9d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a9d80:	4c25      	ldr	r4, [pc, #148]	; (a9e18 <__register_exitproc+0x9c>)
   a9d82:	4606      	mov	r6, r0
   a9d84:	6825      	ldr	r5, [r4, #0]
   a9d86:	4688      	mov	r8, r1
   a9d88:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a9d8c:	4692      	mov	sl, r2
   a9d8e:	4699      	mov	r9, r3
   a9d90:	b3c4      	cbz	r4, a9e04 <__register_exitproc+0x88>
   a9d92:	6860      	ldr	r0, [r4, #4]
   a9d94:	281f      	cmp	r0, #31
   a9d96:	dc17      	bgt.n	a9dc8 <__register_exitproc+0x4c>
   a9d98:	1c41      	adds	r1, r0, #1
   a9d9a:	b176      	cbz	r6, a9dba <__register_exitproc+0x3e>
   a9d9c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a9da0:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a9da4:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a9da8:	2201      	movs	r2, #1
   a9daa:	4082      	lsls	r2, r0
   a9dac:	4315      	orrs	r5, r2
   a9dae:	2e02      	cmp	r6, #2
   a9db0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a9db4:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a9db8:	d01e      	beq.n	a9df8 <__register_exitproc+0x7c>
   a9dba:	1c83      	adds	r3, r0, #2
   a9dbc:	6061      	str	r1, [r4, #4]
   a9dbe:	2000      	movs	r0, #0
   a9dc0:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a9dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a9dc8:	4b14      	ldr	r3, [pc, #80]	; (a9e1c <__register_exitproc+0xa0>)
   a9dca:	b303      	cbz	r3, a9e0e <__register_exitproc+0x92>
   a9dcc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a9dd0:	f7ff fa1c 	bl	a920c <malloc>
   a9dd4:	4604      	mov	r4, r0
   a9dd6:	b1d0      	cbz	r0, a9e0e <__register_exitproc+0x92>
   a9dd8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a9ddc:	2700      	movs	r7, #0
   a9dde:	e884 0088 	stmia.w	r4, {r3, r7}
   a9de2:	4638      	mov	r0, r7
   a9de4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a9de8:	2101      	movs	r1, #1
   a9dea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a9dee:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a9df2:	2e00      	cmp	r6, #0
   a9df4:	d0e1      	beq.n	a9dba <__register_exitproc+0x3e>
   a9df6:	e7d1      	b.n	a9d9c <__register_exitproc+0x20>
   a9df8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a9dfc:	431a      	orrs	r2, r3
   a9dfe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a9e02:	e7da      	b.n	a9dba <__register_exitproc+0x3e>
   a9e04:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a9e08:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a9e0c:	e7c1      	b.n	a9d92 <__register_exitproc+0x16>
   a9e0e:	f04f 30ff 	mov.w	r0, #4294967295
   a9e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a9e16:	bf00      	nop
   a9e18:	000aa470 	.word	0x000aa470
   a9e1c:	000a920d 	.word	0x000a920d

000a9e20 <_close_r>:
   a9e20:	b538      	push	{r3, r4, r5, lr}
   a9e22:	4c07      	ldr	r4, [pc, #28]	; (a9e40 <_close_r+0x20>)
   a9e24:	2300      	movs	r3, #0
   a9e26:	4605      	mov	r5, r0
   a9e28:	4608      	mov	r0, r1
   a9e2a:	6023      	str	r3, [r4, #0]
   a9e2c:	f7f2 fcca 	bl	9c7c4 <_close>
   a9e30:	1c43      	adds	r3, r0, #1
   a9e32:	d000      	beq.n	a9e36 <_close_r+0x16>
   a9e34:	bd38      	pop	{r3, r4, r5, pc}
   a9e36:	6823      	ldr	r3, [r4, #0]
   a9e38:	2b00      	cmp	r3, #0
   a9e3a:	d0fb      	beq.n	a9e34 <_close_r+0x14>
   a9e3c:	602b      	str	r3, [r5, #0]
   a9e3e:	bd38      	pop	{r3, r4, r5, pc}
   a9e40:	200727f0 	.word	0x200727f0

000a9e44 <_fclose_r>:
   a9e44:	2900      	cmp	r1, #0
   a9e46:	d03d      	beq.n	a9ec4 <_fclose_r+0x80>
   a9e48:	b570      	push	{r4, r5, r6, lr}
   a9e4a:	4605      	mov	r5, r0
   a9e4c:	460c      	mov	r4, r1
   a9e4e:	b108      	cbz	r0, a9e54 <_fclose_r+0x10>
   a9e50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a9e52:	b37b      	cbz	r3, a9eb4 <_fclose_r+0x70>
   a9e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a9e58:	b90b      	cbnz	r3, a9e5e <_fclose_r+0x1a>
   a9e5a:	2000      	movs	r0, #0
   a9e5c:	bd70      	pop	{r4, r5, r6, pc}
   a9e5e:	4621      	mov	r1, r4
   a9e60:	4628      	mov	r0, r5
   a9e62:	f7fe fd27 	bl	a88b4 <__sflush_r>
   a9e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a9e68:	4606      	mov	r6, r0
   a9e6a:	b133      	cbz	r3, a9e7a <_fclose_r+0x36>
   a9e6c:	69e1      	ldr	r1, [r4, #28]
   a9e6e:	4628      	mov	r0, r5
   a9e70:	4798      	blx	r3
   a9e72:	2800      	cmp	r0, #0
   a9e74:	bfb8      	it	lt
   a9e76:	f04f 36ff 	movlt.w	r6, #4294967295
   a9e7a:	89a3      	ldrh	r3, [r4, #12]
   a9e7c:	061b      	lsls	r3, r3, #24
   a9e7e:	d41c      	bmi.n	a9eba <_fclose_r+0x76>
   a9e80:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a9e82:	b141      	cbz	r1, a9e96 <_fclose_r+0x52>
   a9e84:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a9e88:	4299      	cmp	r1, r3
   a9e8a:	d002      	beq.n	a9e92 <_fclose_r+0x4e>
   a9e8c:	4628      	mov	r0, r5
   a9e8e:	f7fe feb5 	bl	a8bfc <_free_r>
   a9e92:	2300      	movs	r3, #0
   a9e94:	6323      	str	r3, [r4, #48]	; 0x30
   a9e96:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a9e98:	b121      	cbz	r1, a9ea4 <_fclose_r+0x60>
   a9e9a:	4628      	mov	r0, r5
   a9e9c:	f7fe feae 	bl	a8bfc <_free_r>
   a9ea0:	2300      	movs	r3, #0
   a9ea2:	6463      	str	r3, [r4, #68]	; 0x44
   a9ea4:	f7fe fe44 	bl	a8b30 <__sfp_lock_acquire>
   a9ea8:	2300      	movs	r3, #0
   a9eaa:	81a3      	strh	r3, [r4, #12]
   a9eac:	f7fe fe42 	bl	a8b34 <__sfp_lock_release>
   a9eb0:	4630      	mov	r0, r6
   a9eb2:	bd70      	pop	{r4, r5, r6, pc}
   a9eb4:	f7fe fe36 	bl	a8b24 <__sinit>
   a9eb8:	e7cc      	b.n	a9e54 <_fclose_r+0x10>
   a9eba:	6921      	ldr	r1, [r4, #16]
   a9ebc:	4628      	mov	r0, r5
   a9ebe:	f7fe fe9d 	bl	a8bfc <_free_r>
   a9ec2:	e7dd      	b.n	a9e80 <_fclose_r+0x3c>
   a9ec4:	2000      	movs	r0, #0
   a9ec6:	4770      	bx	lr

000a9ec8 <_fstat_r>:
   a9ec8:	b538      	push	{r3, r4, r5, lr}
   a9eca:	460b      	mov	r3, r1
   a9ecc:	4c07      	ldr	r4, [pc, #28]	; (a9eec <_fstat_r+0x24>)
   a9ece:	4605      	mov	r5, r0
   a9ed0:	4611      	mov	r1, r2
   a9ed2:	4618      	mov	r0, r3
   a9ed4:	2300      	movs	r3, #0
   a9ed6:	6023      	str	r3, [r4, #0]
   a9ed8:	f7f2 fc80 	bl	9c7dc <_fstat>
   a9edc:	1c43      	adds	r3, r0, #1
   a9ede:	d000      	beq.n	a9ee2 <_fstat_r+0x1a>
   a9ee0:	bd38      	pop	{r3, r4, r5, pc}
   a9ee2:	6823      	ldr	r3, [r4, #0]
   a9ee4:	2b00      	cmp	r3, #0
   a9ee6:	d0fb      	beq.n	a9ee0 <_fstat_r+0x18>
   a9ee8:	602b      	str	r3, [r5, #0]
   a9eea:	bd38      	pop	{r3, r4, r5, pc}
   a9eec:	200727f0 	.word	0x200727f0

000a9ef0 <_isatty_r>:
   a9ef0:	b538      	push	{r3, r4, r5, lr}
   a9ef2:	4c07      	ldr	r4, [pc, #28]	; (a9f10 <_isatty_r+0x20>)
   a9ef4:	2300      	movs	r3, #0
   a9ef6:	4605      	mov	r5, r0
   a9ef8:	4608      	mov	r0, r1
   a9efa:	6023      	str	r3, [r4, #0]
   a9efc:	f7f2 fc7e 	bl	9c7fc <_isatty>
   a9f00:	1c43      	adds	r3, r0, #1
   a9f02:	d000      	beq.n	a9f06 <_isatty_r+0x16>
   a9f04:	bd38      	pop	{r3, r4, r5, pc}
   a9f06:	6823      	ldr	r3, [r4, #0]
   a9f08:	2b00      	cmp	r3, #0
   a9f0a:	d0fb      	beq.n	a9f04 <_isatty_r+0x14>
   a9f0c:	602b      	str	r3, [r5, #0]
   a9f0e:	bd38      	pop	{r3, r4, r5, pc}
   a9f10:	200727f0 	.word	0x200727f0

000a9f14 <_lseek_r>:
   a9f14:	b570      	push	{r4, r5, r6, lr}
   a9f16:	460d      	mov	r5, r1
   a9f18:	4c08      	ldr	r4, [pc, #32]	; (a9f3c <_lseek_r+0x28>)
   a9f1a:	4611      	mov	r1, r2
   a9f1c:	4606      	mov	r6, r0
   a9f1e:	461a      	mov	r2, r3
   a9f20:	4628      	mov	r0, r5
   a9f22:	2300      	movs	r3, #0
   a9f24:	6023      	str	r3, [r4, #0]
   a9f26:	f7f2 fc73 	bl	9c810 <_lseek>
   a9f2a:	1c43      	adds	r3, r0, #1
   a9f2c:	d000      	beq.n	a9f30 <_lseek_r+0x1c>
   a9f2e:	bd70      	pop	{r4, r5, r6, pc}
   a9f30:	6823      	ldr	r3, [r4, #0]
   a9f32:	2b00      	cmp	r3, #0
   a9f34:	d0fb      	beq.n	a9f2e <_lseek_r+0x1a>
   a9f36:	6033      	str	r3, [r6, #0]
   a9f38:	bd70      	pop	{r4, r5, r6, pc}
   a9f3a:	bf00      	nop
   a9f3c:	200727f0 	.word	0x200727f0

000a9f40 <_read_r>:
   a9f40:	b570      	push	{r4, r5, r6, lr}
   a9f42:	460d      	mov	r5, r1
   a9f44:	4c08      	ldr	r4, [pc, #32]	; (a9f68 <_read_r+0x28>)
   a9f46:	4611      	mov	r1, r2
   a9f48:	4606      	mov	r6, r0
   a9f4a:	461a      	mov	r2, r3
   a9f4c:	4628      	mov	r0, r5
   a9f4e:	2300      	movs	r3, #0
   a9f50:	6023      	str	r3, [r4, #0]
   a9f52:	f7f1 fbff 	bl	9b754 <_read>
   a9f56:	1c43      	adds	r3, r0, #1
   a9f58:	d000      	beq.n	a9f5c <_read_r+0x1c>
   a9f5a:	bd70      	pop	{r4, r5, r6, pc}
   a9f5c:	6823      	ldr	r3, [r4, #0]
   a9f5e:	2b00      	cmp	r3, #0
   a9f60:	d0fb      	beq.n	a9f5a <_read_r+0x1a>
   a9f62:	6033      	str	r3, [r6, #0]
   a9f64:	bd70      	pop	{r4, r5, r6, pc}
   a9f66:	bf00      	nop
   a9f68:	200727f0 	.word	0x200727f0
   a9f6c:	48545056 	.word	0x48545056
   a9f70:	00484749 	.word	0x00484749
   a9f74:	4f4f4c42 	.word	0x4f4f4c42
   a9f78:	4c445f44 	.word	0x4c445f44
   a9f7c:	00000000 	.word	0x00000000
   a9f80:	00545041 	.word	0x00545041
   a9f84:	45544e45 	.word	0x45544e45
   a9f88:	00325f52 	.word	0x00325f52
   a9f8c:	45544e45 	.word	0x45544e45
   a9f90:	00335f52 	.word	0x00335f52
   a9f94:	45544e45 	.word	0x45544e45
   a9f98:	00345f52 	.word	0x00345f52
   a9f9c:	00303035 	.word	0x00303035
   a9fa0:	41505942 	.word	0x41505942
   a9fa4:	00005353 	.word	0x00005353
   a9fa8:	4d495250 	.word	0x4d495250
   a9fac:	00003245 	.word	0x00003245
   a9fb0:	52494352 	.word	0x52494352
   a9fb4:	00003243 	.word	0x00003243
   a9fb8:	4f5f4548 	.word	0x4f5f4548
   a9fbc:	0000004e 	.word	0x0000004e
   a9fc0:	4f5f4548 	.word	0x4f5f4548
   a9fc4:	00004646 	.word	0x00004646
   a9fc8:	4f5f5046 	.word	0x4f5f5046
   a9fcc:	0000004e 	.word	0x0000004e
   a9fd0:	4f5f5046 	.word	0x4f5f5046
   a9fd4:	00004646 	.word	0x00004646
   a9fd8:	505f5343 	.word	0x505f5343
   a9fdc:	535f544f 	.word	0x535f544f
   a9fe0:	00005445 	.word	0x00005445
   a9fe4:	525f5046 	.word	0x525f5046
   a9fe8:	00455441 	.word	0x00455441
   a9fec:	465f5046 	.word	0x465f5046
   a9ff0:	00005152 	.word	0x00005152
   a9ff4:	5f504744 	.word	0x5f504744
   a9ff8:	00004e4f 	.word	0x00004e4f
   a9ffc:	5f504744 	.word	0x5f504744
   aa000:	0046464f 	.word	0x0046464f
   aa004:	5f504744 	.word	0x5f504744
   aa008:	45544152 	.word	0x45544152
   aa00c:	00000000 	.word	0x00000000
   aa010:	5f504744 	.word	0x5f504744
   aa014:	00515246 	.word	0x00515246
   aa018:	545f5350 	.word	0x545f5350
   aa01c:	00000000 	.word	0x00000000
   aa020:	5f504655 	.word	0x5f504655
   aa024:	0046464f 	.word	0x0046464f
   aa028:	5f504655 	.word	0x5f504655
   aa02c:	45544152 	.word	0x45544152
   aa030:	00000000 	.word	0x00000000
   aa034:	5f414c56 	.word	0x5f414c56
   aa038:	504d5550 	.word	0x504d5550
   aa03c:	004e4f5f 	.word	0x004e4f5f
   aa040:	5f414c56 	.word	0x5f414c56
   aa044:	504d5550 	.word	0x504d5550
   aa048:	46464f5f 	.word	0x46464f5f
   aa04c:	00000000 	.word	0x00000000
   aa050:	525f5042 	.word	0x525f5042
   aa054:	00455441 	.word	0x00455441
   aa058:	4f5f4356 	.word	0x4f5f4356
   aa05c:	00004646 	.word	0x00004646
   aa060:	4f5f4957 	.word	0x4f5f4957
   aa064:	0000004e 	.word	0x0000004e
   aa068:	4f5f4957 	.word	0x4f5f4957
   aa06c:	00004646 	.word	0x00004646
   aa070:	49415244 	.word	0x49415244
   aa074:	4e4f5f4e 	.word	0x4e4f5f4e
   aa078:	00000000 	.word	0x00000000
   aa07c:	49415244 	.word	0x49415244
   aa080:	464f5f4e 	.word	0x464f5f4e
   aa084:	00000046 	.word	0x00000046
   aa088:	504f5f56 	.word	0x504f5f56
   aa08c:	00004e45 	.word	0x00004e45
   aa090:	4c435f56 	.word	0x4c435f56
   aa094:	0045534f 	.word	0x0045534f
   aa098:	4c415f56 	.word	0x4c415f56
   aa09c:	45504f4c 	.word	0x45504f4c
   aa0a0:	0000004e 	.word	0x0000004e
   aa0a4:	4f5f5048 	.word	0x4f5f5048
   aa0a8:	0000004e 	.word	0x0000004e
   aa0ac:	4f5f5048 	.word	0x4f5f5048
   aa0b0:	00004646 	.word	0x00004646
   aa0b4:	525f5048 	.word	0x525f5048
   aa0b8:	00455441 	.word	0x00455441
   aa0bc:	565f4342 	.word	0x565f4342
   aa0c0:	45532031 	.word	0x45532031
   aa0c4:	00000054 	.word	0x00000054
   aa0c8:	565f4342 	.word	0x565f4342
   aa0cc:	45532032 	.word	0x45532032
   aa0d0:	00000054 	.word	0x00000054
   aa0d4:	565f4342 	.word	0x565f4342
   aa0d8:	33315f31 	.word	0x33315f31
   aa0dc:	53203431 	.word	0x53203431
   aa0e0:	00005445 	.word	0x00005445
   aa0e4:	565f4342 	.word	0x565f4342
   aa0e8:	33315f32 	.word	0x33315f32
   aa0ec:	53203431 	.word	0x53203431
   aa0f0:	00005445 	.word	0x00005445
   aa0f4:	565f4342 	.word	0x565f4342
   aa0f8:	20345f31 	.word	0x20345f31
   aa0fc:	00544553 	.word	0x00544553
   aa100:	565f4342 	.word	0x565f4342
   aa104:	20345f32 	.word	0x20345f32
   aa108:	00544553 	.word	0x00544553
   aa10c:	525f4342 	.word	0x525f4342
   aa110:	54455345 	.word	0x54455345
   aa114:	00000000 	.word	0x00000000
   aa118:	465f4342 	.word	0x465f4342
   aa11c:	5a454552 	.word	0x5a454552
   aa120:	00000045 	.word	0x00000045
   aa124:	555f4342 	.word	0x555f4342
   aa128:	4552464e 	.word	0x4552464e
   aa12c:	00455a45 	.word	0x00455a45
   aa130:	4e45504f 	.word	0x4e45504f
   aa134:	4c4c4946 	.word	0x4c4c4946
   aa138:	00000000 	.word	0x00000000
   aa13c:	0052544a 	.word	0x0052544a
   aa140:	4f5f4356 	.word	0x4f5f4356
   aa144:	0000004e 	.word	0x0000004e
   aa148:	545f5343 	.word	0x545f5343
   aa14c:	47474952 	.word	0x47474952
   aa150:	00005245 	.word	0x00005245
   aa154:	545f5350 	.word	0x545f5350
   aa158:	47474952 	.word	0x47474952
   aa15c:	00005245 	.word	0x00005245
   aa160:	3a726556 	.word	0x3a726556
   aa164:	00342e54 	.word	0x00342e54
   aa168:	574f4c46 	.word	0x574f4c46
   aa16c:	004e455f 	.word	0x004e455f
   aa170:	574f4c46 	.word	0x574f4c46
   aa174:	5349445f 	.word	0x5349445f
   aa178:	00000000 	.word	0x00000000
   aa17c:	504d4554 	.word	0x504d4554
   aa180:	49485f31 	.word	0x49485f31
   aa184:	00004847 	.word	0x00004847
   aa188:	504d4554 	.word	0x504d4554
   aa18c:	4f4c5f31 	.word	0x4f4c5f31
   aa190:	00000057 	.word	0x00000057
   aa194:	504d4554 	.word	0x504d4554
   aa198:	00000031 	.word	0x00000031
   aa19c:	504d4554 	.word	0x504d4554
   aa1a0:	49485f32 	.word	0x49485f32
   aa1a4:	00004847 	.word	0x00004847
   aa1a8:	504d4554 	.word	0x504d4554
   aa1ac:	4f4c5f32 	.word	0x4f4c5f32
   aa1b0:	00000057 	.word	0x00000057
   aa1b4:	54534554 	.word	0x54534554
   aa1b8:	00000000 	.word	0x00000000
   aa1bc:	504d4554 	.word	0x504d4554
   aa1c0:	00000032 	.word	0x00000032
   aa1c4:	504d4554 	.word	0x504d4554
   aa1c8:	4749485f 	.word	0x4749485f
   aa1cc:	00000048 	.word	0x00000048
   aa1d0:	504d4554 	.word	0x504d4554
   aa1d4:	574f4c5f 	.word	0x574f4c5f
   aa1d8:	00000000 	.word	0x00000000
   aa1dc:	504d4554 	.word	0x504d4554
   aa1e0:	00000033 	.word	0x00000033
   aa1e4:	5f545041 	.word	0x5f545041
   aa1e8:	48474948 	.word	0x48474948
   aa1ec:	00000000 	.word	0x00000000
   aa1f0:	5f545041 	.word	0x5f545041
   aa1f4:	3d574f4c 	.word	0x3d574f4c
   aa1f8:	292d2820 	.word	0x292d2820
   aa1fc:	00000000 	.word	0x00000000
   aa200:	5f545041 	.word	0x5f545041
   aa204:	00574f4c 	.word	0x00574f4c
   aa208:	5f545056 	.word	0x5f545056
   aa20c:	48474948 	.word	0x48474948
   aa210:	00000000 	.word	0x00000000
   aa214:	5f545056 	.word	0x5f545056
   aa218:	3d574f4c 	.word	0x3d574f4c
   aa21c:	292d2820 	.word	0x292d2820
   aa220:	00000000 	.word	0x00000000
   aa224:	5f325350 	.word	0x5f325350
   aa228:	00574f4c 	.word	0x00574f4c
   aa22c:	444e4f43 	.word	0x444e4f43
   aa230:	4749485f 	.word	0x4749485f
   aa234:	00000048 	.word	0x00000048
   aa238:	444e4f43 	.word	0x444e4f43
   aa23c:	574f4c5f 	.word	0x574f4c5f
   aa240:	00000000 	.word	0x00000000
   aa244:	5f4e4f43 	.word	0x5f4e4f43
   aa248:	00574f4c 	.word	0x00574f4c
   aa24c:	5f315350 	.word	0x5f315350
   aa250:	48474948 	.word	0x48474948
   aa254:	00000000 	.word	0x00000000
   aa258:	5f315350 	.word	0x5f315350
   aa25c:	3d574f4c 	.word	0x3d574f4c
   aa260:	292d2820 	.word	0x292d2820
   aa264:	00000000 	.word	0x00000000
   aa268:	00325350 	.word	0x00325350
   aa26c:	5f325350 	.word	0x5f325350
   aa270:	3d574f4c 	.word	0x3d574f4c
   aa274:	292d2820 	.word	0x292d2820
   aa278:	00000000 	.word	0x00000000
   aa27c:	00335350 	.word	0x00335350
   aa280:	5f335350 	.word	0x5f335350
   aa284:	3d574f4c 	.word	0x3d574f4c
   aa288:	292d2820 	.word	0x292d2820
   aa28c:	00000000 	.word	0x00000000
   aa290:	5f335350 	.word	0x5f335350
   aa294:	00574f4c 	.word	0x00574f4c
   aa298:	535f5048 	.word	0x535f5048
   aa29c:	54524154 	.word	0x54524154
   aa2a0:	0000003d 	.word	0x0000003d
   aa2a4:	455f5048 	.word	0x455f5048
   aa2a8:	003d444e 	.word	0x003d444e
   aa2ac:	3d315350 	.word	0x3d315350
   aa2b0:	00000000 	.word	0x00000000
   aa2b4:	3d325350 	.word	0x3d325350
   aa2b8:	00000000 	.word	0x00000000
   aa2bc:	3d335350 	.word	0x3d335350
   aa2c0:	00000000 	.word	0x00000000
   aa2c4:	3d545041 	.word	0x3d545041
   aa2c8:	00000000 	.word	0x00000000
   aa2cc:	3d545056 	.word	0x3d545056
   aa2d0:	00000000 	.word	0x00000000
   aa2d4:	31504d54 	.word	0x31504d54
   aa2d8:	0000003d 	.word	0x0000003d
   aa2dc:	32504d54 	.word	0x32504d54
   aa2e0:	0000003d 	.word	0x0000003d
   aa2e4:	504d4554 	.word	0x504d4554
   aa2e8:	00003d31 	.word	0x00003d31
   aa2ec:	504d4554 	.word	0x504d4554
   aa2f0:	00003d32 	.word	0x00003d32
   aa2f4:	504d4554 	.word	0x504d4554
   aa2f8:	00003d33 	.word	0x00003d33
   aa2fc:	544e4328 	.word	0x544e4328
   aa300:	00000029 	.word	0x00000029

000aa304 <can_bit_time>:
   aa304:	02020308 02094b03 43020303 0303030a     .....K.....C....
   aa314:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   aa324:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   aa334:	05050510 06114504 47040505 06060512     .....E.....G....
   aa344:	06134304 44040606 06060714 08154604     .C.....D.....F..
   aa354:	47040606 07070716 08174404 46040708     ...G.....D.....F
   aa364:	08080718 08194304 44040808 00006325     .....C.....D%c..
   aa374:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   aa384:	74737953 206b6369 666e6f63 72756769     Systick configur
   aa394:	6f697461 7265206e 0d726f72 00000000     ation error.....

000aa3a4 <uart_serial_options>:
   aa3a4:	0001c200 00000000 00000800 00000001     ................
   aa3b4:	01ddccaa 05040302 09080706 bbee0b0a     ................
   aa3c4:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   aa3d4:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   aa3e4:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   aa3f4:	4d495250 00003145 4f4f4c42 00000044     PRIME1..BLOOD...
   aa404:	41504548 004e4952 454e4f44 0050485f     HEPARIN.DONE_HP.
   aa414:	00303035 534e4952 00003245 534e4952     500.RINSE2..RINS
   aa424:	00003345 534e4952 00003445 534e4952     E3..RINSE4..RINS
   aa434:	00003145 454e4f44 00000000 52494352     E1..DONE....RCIR
   aa444:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   aa454:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   aa464:	4d495250 00003145 00000043              PRIME1..C...

000aa470 <_global_impure_ptr>:
   aa470:	20070d68 0000000a                       h.. ....

000aa478 <_init>:
   aa478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   aa47a:	bf00      	nop
   aa47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   aa47e:	bc08      	pop	{r3}
   aa480:	469e      	mov	lr, r3
   aa482:	4770      	bx	lr

000aa484 <__init_array_start>:
   aa484:	000a8895 	.word	0x000a8895

000aa488 <__frame_dummy_init_array_entry>:
   aa488:	00080119                                ....

000aa48c <_fini>:
   aa48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   aa48e:	bf00      	nop
   aa490:	bcf8      	pop	{r3, r4, r5, r6, r7}
   aa492:	bc08      	pop	{r3}
   aa494:	469e      	mov	lr, r3
   aa496:	4770      	bx	lr

000aa498 <__fini_array_start>:
   aa498:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a27      	ldr	r2, [pc, #156]	; (200700b0 <efc_perform_read_sequence+0xb0>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00

200700b4 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b4:	b480      	push	{r7}
200700b6:	b083      	sub	sp, #12
200700b8:	af00      	add	r7, sp, #0
200700ba:	6078      	str	r0, [r7, #4]
200700bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700be:	687b      	ldr	r3, [r7, #4]
200700c0:	683a      	ldr	r2, [r7, #0]
200700c2:	601a      	str	r2, [r3, #0]
}
200700c4:	bf00      	nop
200700c6:	370c      	adds	r7, #12
200700c8:	46bd      	mov	sp, r7
200700ca:	bc80      	pop	{r7}
200700cc:	4770      	bx	lr
200700ce:	bf00      	nop

200700d0 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d0:	b480      	push	{r7}
200700d2:	b085      	sub	sp, #20
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
200700d8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700da:	687b      	ldr	r3, [r7, #4]
200700dc:	683a      	ldr	r2, [r7, #0]
200700de:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e0:	687b      	ldr	r3, [r7, #4]
200700e2:	689b      	ldr	r3, [r3, #8]
200700e4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700e6:	68fb      	ldr	r3, [r7, #12]
200700e8:	f003 0301 	and.w	r3, r3, #1
200700ec:	2b00      	cmp	r3, #0
200700ee:	d0f7      	beq.n	200700e0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f0:	68fb      	ldr	r3, [r7, #12]
200700f2:	f003 0306 	and.w	r3, r3, #6
}
200700f6:	4618      	mov	r0, r3
200700f8:	3714      	adds	r7, #20
200700fa:	46bd      	mov	sp, r7
200700fc:	bc80      	pop	{r7}
200700fe:	4770      	bx	lr

20070100 <levelswitchprevstatus>:
20070100:	0001                                        ..

20070102 <ps3_threshold>:
20070102:	1000                                        ..

20070104 <cl_flowpathtable>:
20070104:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

2007011c <hp>:
2007011c:	000a 0082 0009 002a 0008 002d 0007 0037     ......*...-...7.
2007012c:	0006 0041 0005 005f 0004 0064 0002 0212     ..A..._...d.....
2007013c:	0001 0424 0032 0bb8 001e 157c 0000 0000     ..$.2.....|.....
	...

200701e4 <apt2>:
200701e4:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
200701f4:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
20070204:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
20070214:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
20070224:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
20070234:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
20070244:	0168 12e1 01a4 1630                         h.....0.

2007024c <vpt2>:
2007024c:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
2007025c:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007026c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
2007027c:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
2007028c:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
2007029c:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200702ac:	0168 12e1 01a4 1630                         h.....0.

200702b4 <ufp>:
200702b4:	000a 03e8 0014 03b6 001e 0384 0028 0352     ............(.R.
200702c4:	0032 0320 003c 02ee 0046 02bc 0050 028a     2. .<...F...P...
200702d4:	005a 0258 0064 0226 006e 01f4 0078 01c2     Z.X.d.&.n...x...
200702e4:	0082 0190 0096 015e                         ......^.

200702ec <ps_1_2>:
200702ec:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
200702fc:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
2007030c:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
2007031c:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
2007032c:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
2007033c:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
2007034c:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

20070358 <ps_2_2>:
20070358:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
20070368:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
20070378:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
20070388:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
20070398:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
200703a8:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
200703b8:	02ee 1612 0320 1900 0000 0000               .... .......

200703c4 <Cl_DlsisAlarmTable>:
200703c4:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
200703d4:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
200703e4:	0000 0d00 0001 0000 0000 010e 0000 0000     ................
200703f4:	0100 0001 0000 0000 0115 0000 0000 1600     ................
20070404:	0001 0000 0000 0117 0000 0000 1800 0001     ................
20070414:	0000 0000 0127 0000 0000 2800 0001 0000     ....'......(....
20070424:	0000 0121 0000 0000 2000 0001 0000 0000     ..!...... ......
20070434:	0122 0000 0000 2400 0001 0000 0000 0123     "......$......#.
20070444:	0000 0000 2600 0001 0000 0000 0125 0000     .....&......%...
20070454:	0000 0700 0001 0100 0000 0108 0000 0001     ................
20070464:	1300 0001 0000 0000 0114 0000 0000 1100     ................
20070474:	0001 0000 0000 0112 0000 0000 0f00 0001     ................
20070484:	0000 0000 0110 0000 0000 1d00 0001 0000     ................
20070494:	0000 013f 0000 0000 4100 0001 0000 0000     ..?......A......
200704a4:	0142 0000 0000 4000 0001 0000 0000 011a     B......@........
200704b4:	0000 0000 4000 0001 0000 0000 0000 0000     .....@..........
200704c4:	0000 0000                                   ....

200704c8 <heater_duty>:
200704c8:	0555 0000                                   U...

200704cc <prescribed_temp>:
200704cc:	0000 4214                                   ...B

200704d0 <wait_4_TS2Stability>:
200704d0:	00b4                                        ..

200704d2 <wait_4_stability>:
200704d2:	00f0                                        ..

200704d4 <wait_4_TS3NeuStability>:
200704d4:	0078                                        x.

200704d6 <Neupost_stability_count>:
200704d6:	0078                                        x.

200704d8 <SYSTEM_FLOW>:
200704d8:	012c 0000                                   ,...

200704dc <gram_test_buffer.9585>:
200704dc:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
200704ec:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
200704fc:	aaaa 0000 0000 0000                         ........

20070504 <Cl_MacState>:
20070504:	0101                                             .

20070505 <ConsoleSync>:
20070505:	cc01                                             .

20070506 <cond_pot_val_2volts.9599>:
20070506:	02cc                                        ..

20070508 <res_temp>:
20070508:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
20070518:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
20070528:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
20070538:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
20070548:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
20070558:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
20070568:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
20070578:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
20070588:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
20070598:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
200705a8:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
200705b8:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
200705c8:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
200705d8:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
200705e8:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
200705f8:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
20070608:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
20070618:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
20070628:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
20070638:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
20070648:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
20070658:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
20070668:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
20070678:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
20070688:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
20070698:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
200706a8:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
200706b8:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
200706c8:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
200706d8:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
200706e8:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
200706f8:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
20070708:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
20070718:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
20070728:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
20070738:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
20070748:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

200709b8 <TEST_STUB_ENABLEGATE>:
200709b8:	0101                                             .

200709b9 <prev_gate_status>:
200709b9:	0101                                             .

200709ba <Current_sense_trigger>:
200709ba:	0001                                        ..

200709bc <pwm_period>:
200709bc:	00c8 0000                                   ....

200709c0 <bp_rotataion_marker>:
200709c0:	0001                                        ..

200709c2 <prev_bp_rotataion_marker>:
200709c2:	0001                                        ..

200709c4 <cl_hep_deliveryrate>:
200709c4:	0064 0000                                   d...

200709c8 <hep_rotataion_marker>:
200709c8:	0001                                        ..

200709ca <prev_hep_rotataion_marker>:
200709ca:	0001                                        ..

200709cc <cl_hep_bolus_count_rate>:
200709cc:	0064 0000                                   d...

200709d0 <Cl_IsoufAlarmTable>:
200709d0:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
200709e0:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
200709f0:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
20070a00:	1500 0001 0000 0000 0116 0000 0000 1700     ................
20070a10:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
20070a20:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
20070a30:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
20070a40:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
20070a50:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
20070a60:	0001 0800 0001 0100 0000 0113 0000 0000     ................
20070a70:	1400 0001 0000 0000 0111 0000 0000 1200     ................
20070a80:	0001 0000 0000 010f 0000 0000 1000 0001     ................
20070a90:	0000 0000 011d 0000 0000 3f00 0001 0000     ...........?....
	...

20070aa2 <uf_rotataion_marker>:
20070aa2:	0001                                        ..

20070aa4 <prev_uf_rotataion_marker>:
20070aa4:	0001 0000                                   ....

20070aa8 <opt>:
20070aa8:	0000 0000 86a0 0001 002c 0000               ........,...

20070ab4 <nvmarray>:
	...
20070abc:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070acc:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070b08 <SystemCoreClock>:
20070b08:	0900 003d                                   ..=.

20070b0c <Cl_ConsoleState>:
20070b0c:	0101                                             .

20070b0d <g_b_led0_active>:
20070b0d:	0101                                             .

20070b0e <Cl_disinfOpenFillTimeOut>:
20070b0e:	0001                                        ..

20070b10 <Cl_DisinfAlarmTable>:
20070b10:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070b20:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070b30:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070b40:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070b50:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070b60:	0000 0000                                   ....

20070b64 <Cl_DprepAlarmTable>:
20070b64:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070b74:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070b84:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070b94:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070ba4:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070bb4:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070bc4:	0000 010e 0000 0000 2000 0001 0000 0000     ......... ......
20070bd4:	0121 0000 0000 2200 0001 0000 0000 0124     !......"......$.
20070be4:	0000 0000 2600 0001 0000 0000 0115 0000     .....&..........
20070bf4:	0000 1600 0001 0000 0000 0117 0000 0000     ................
20070c04:	1800 0001 0000 0000 0127 0000 0000 2800     ........'......(
20070c14:	0001 0000 0000 010f 0000 0000 1000 0001     ................
20070c24:	0000 0000 0111 0000 0000 1200 0001 0000     ................
20070c34:	0000 0113 0000 0000 1400 0001 0000 0000     ................
20070c44:	013c 0000 0000 1d00 0001 0000 0000 013f     <.............?.
20070c54:	0000 0000 1a00 0001 0000 0000 0000 0000     ................
20070c64:	0000 0000                                   ....

20070c68 <Cl_RinseAlarmTable>:
20070c68:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070c78:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070c88:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070c98:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070ca8:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070cb8:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070cc8:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070cd8:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070ce8:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070cf8:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070d08:	011d 0000 0000 0000 010c 0000 0000 0000     ................
20070d18:	010d 0000 0000 0000 010e 0000 0000 0000     ................
20070d28:	0121 0000 0000 0000 011a 0000 0000 0000     !...............
20070d38:	013f 0000 0000 0000                         ?.......

20070d40 <Cl_StandbyAlarmTable>:
20070d40:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070d50:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070d60:	0000 0000                                   ....

20070d64 <cl_stbystate>:
20070d64:	0001 0000                                   ....

20070d68 <impure_data>:
20070d68:	0000 0000 1054 2007 10bc 2007 1124 2007     ....T.. ... $.. 
	...
20070d9c:	a46c 000a 0000 0000 0000 0000 0000 0000     l...............
	...
20070e10:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070e20:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20071190 <_impure_ptr>:
20071190:	0d68 2007                                   h.. 

20071194 <__malloc_av_>:
	...
2007119c:	1194 2007 1194 2007 119c 2007 119c 2007     ... ... ... ... 
200711ac:	11a4 2007 11a4 2007 11ac 2007 11ac 2007     ... ... ... ... 
200711bc:	11b4 2007 11b4 2007 11bc 2007 11bc 2007     ... ... ... ... 
200711cc:	11c4 2007 11c4 2007 11cc 2007 11cc 2007     ... ... ... ... 
200711dc:	11d4 2007 11d4 2007 11dc 2007 11dc 2007     ... ... ... ... 
200711ec:	11e4 2007 11e4 2007 11ec 2007 11ec 2007     ... ... ... ... 
200711fc:	11f4 2007 11f4 2007 11fc 2007 11fc 2007     ... ... ... ... 
2007120c:	1204 2007 1204 2007 120c 2007 120c 2007     ... ... ... ... 
2007121c:	1214 2007 1214 2007 121c 2007 121c 2007     ... ... ... ... 
2007122c:	1224 2007 1224 2007 122c 2007 122c 2007     $.. $.. ,.. ,.. 
2007123c:	1234 2007 1234 2007 123c 2007 123c 2007     4.. 4.. <.. <.. 
2007124c:	1244 2007 1244 2007 124c 2007 124c 2007     D.. D.. L.. L.. 
2007125c:	1254 2007 1254 2007 125c 2007 125c 2007     T.. T.. \.. \.. 
2007126c:	1264 2007 1264 2007 126c 2007 126c 2007     d.. d.. l.. l.. 
2007127c:	1274 2007 1274 2007 127c 2007 127c 2007     t.. t.. |.. |.. 
2007128c:	1284 2007 1284 2007 128c 2007 128c 2007     ... ... ... ... 
2007129c:	1294 2007 1294 2007 129c 2007 129c 2007     ... ... ... ... 
200712ac:	12a4 2007 12a4 2007 12ac 2007 12ac 2007     ... ... ... ... 
200712bc:	12b4 2007 12b4 2007 12bc 2007 12bc 2007     ... ... ... ... 
200712cc:	12c4 2007 12c4 2007 12cc 2007 12cc 2007     ... ... ... ... 
200712dc:	12d4 2007 12d4 2007 12dc 2007 12dc 2007     ... ... ... ... 
200712ec:	12e4 2007 12e4 2007 12ec 2007 12ec 2007     ... ... ... ... 
200712fc:	12f4 2007 12f4 2007 12fc 2007 12fc 2007     ... ... ... ... 
2007130c:	1304 2007 1304 2007 130c 2007 130c 2007     ... ... ... ... 
2007131c:	1314 2007 1314 2007 131c 2007 131c 2007     ... ... ... ... 
2007132c:	1324 2007 1324 2007 132c 2007 132c 2007     $.. $.. ,.. ,.. 
2007133c:	1334 2007 1334 2007 133c 2007 133c 2007     4.. 4.. <.. <.. 
2007134c:	1344 2007 1344 2007 134c 2007 134c 2007     D.. D.. L.. L.. 
2007135c:	1354 2007 1354 2007 135c 2007 135c 2007     T.. T.. \.. \.. 
2007136c:	1364 2007 1364 2007 136c 2007 136c 2007     d.. d.. l.. l.. 
2007137c:	1374 2007 1374 2007 137c 2007 137c 2007     t.. t.. |.. |.. 
2007138c:	1384 2007 1384 2007 138c 2007 138c 2007     ... ... ... ... 
2007139c:	1394 2007 1394 2007 139c 2007 139c 2007     ... ... ... ... 
200713ac:	13a4 2007 13a4 2007 13ac 2007 13ac 2007     ... ... ... ... 
200713bc:	13b4 2007 13b4 2007 13bc 2007 13bc 2007     ... ... ... ... 
200713cc:	13c4 2007 13c4 2007 13cc 2007 13cc 2007     ... ... ... ... 
200713dc:	13d4 2007 13d4 2007 13dc 2007 13dc 2007     ... ... ... ... 
200713ec:	13e4 2007 13e4 2007 13ec 2007 13ec 2007     ... ... ... ... 
200713fc:	13f4 2007 13f4 2007 13fc 2007 13fc 2007     ... ... ... ... 
2007140c:	1404 2007 1404 2007 140c 2007 140c 2007     ... ... ... ... 
2007141c:	1414 2007 1414 2007 141c 2007 141c 2007     ... ... ... ... 
2007142c:	1424 2007 1424 2007 142c 2007 142c 2007     $.. $.. ,.. ,.. 
2007143c:	1434 2007 1434 2007 143c 2007 143c 2007     4.. 4.. <.. <.. 
2007144c:	1444 2007 1444 2007 144c 2007 144c 2007     D.. D.. L.. L.. 
2007145c:	1454 2007 1454 2007 145c 2007 145c 2007     T.. T.. \.. \.. 
2007146c:	1464 2007 1464 2007 146c 2007 146c 2007     d.. d.. l.. l.. 
2007147c:	1474 2007 1474 2007 147c 2007 147c 2007     t.. t.. |.. |.. 
2007148c:	1484 2007 1484 2007 148c 2007 148c 2007     ... ... ... ... 
2007149c:	1494 2007 1494 2007 149c 2007 149c 2007     ... ... ... ... 
200714ac:	14a4 2007 14a4 2007 14ac 2007 14ac 2007     ... ... ... ... 
200714bc:	14b4 2007 14b4 2007 14bc 2007 14bc 2007     ... ... ... ... 
200714cc:	14c4 2007 14c4 2007 14cc 2007 14cc 2007     ... ... ... ... 
200714dc:	14d4 2007 14d4 2007 14dc 2007 14dc 2007     ... ... ... ... 
200714ec:	14e4 2007 14e4 2007 14ec 2007 14ec 2007     ... ... ... ... 
200714fc:	14f4 2007 14f4 2007 14fc 2007 14fc 2007     ... ... ... ... 
2007150c:	1504 2007 1504 2007 150c 2007 150c 2007     ... ... ... ... 
2007151c:	1514 2007 1514 2007 151c 2007 151c 2007     ... ... ... ... 
2007152c:	1524 2007 1524 2007 152c 2007 152c 2007     $.. $.. ,.. ,.. 
2007153c:	1534 2007 1534 2007 153c 2007 153c 2007     4.. 4.. <.. <.. 
2007154c:	1544 2007 1544 2007 154c 2007 154c 2007     D.. D.. L.. L.. 
2007155c:	1554 2007 1554 2007 155c 2007 155c 2007     T.. T.. \.. \.. 
2007156c:	1564 2007 1564 2007 156c 2007 156c 2007     d.. d.. l.. l.. 
2007157c:	1574 2007 1574 2007 157c 2007 157c 2007     t.. t.. |.. |.. 
2007158c:	1584 2007 1584 2007 158c 2007 158c 2007     ... ... ... ... 

2007159c <__malloc_trim_threshold>:
2007159c:	0000 0002                                   ....

200715a0 <__malloc_sbrk_base>:
200715a0:	ffff ffff                                   ....
