
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e34  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086e34  00086e34  0000ee34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  00086e3c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005fc  20070c6c  00087aa8  00010c6c  2**2
                  ALLOC
  4 .stack        00002000  20071268  000880a4  00010c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010c6c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   000159a7  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003003  00000000  00000000  00026697  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000074d6  00000000  00000000  0002969a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000da8  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bf8  00000000  00000000  00031918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009b21  00000000  00000000  00032510  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017755  00000000  00000000  0003c031  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061e40  00000000  00000000  00053786  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004318  00000000  00000000  000b55c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073268 	.word	0x20073268
   80004:	00083689 	.word	0x00083689
   80008:	00083681 	.word	0x00083681
   8000c:	00083681 	.word	0x00083681
   80010:	00083681 	.word	0x00083681
   80014:	00083681 	.word	0x00083681
   80018:	00083681 	.word	0x00083681
	...
   8002c:	00083681 	.word	0x00083681
   80030:	00083681 	.word	0x00083681
   80034:	00000000 	.word	0x00000000
   80038:	00083681 	.word	0x00083681
   8003c:	00083681 	.word	0x00083681
   80040:	00083681 	.word	0x00083681
   80044:	00083681 	.word	0x00083681
   80048:	00083681 	.word	0x00083681
   8004c:	00083681 	.word	0x00083681
   80050:	00083681 	.word	0x00083681
   80054:	00083681 	.word	0x00083681
   80058:	00083681 	.word	0x00083681
   8005c:	00083681 	.word	0x00083681
   80060:	00082021 	.word	0x00082021
   80064:	00083681 	.word	0x00083681
   80068:	00000000 	.word	0x00000000
   8006c:	000832f1 	.word	0x000832f1
   80070:	00083309 	.word	0x00083309
   80074:	00083321 	.word	0x00083321
   80078:	00083339 	.word	0x00083339
	...
   80084:	00083681 	.word	0x00083681
   80088:	00083681 	.word	0x00083681
   8008c:	00083681 	.word	0x00083681
   80090:	00083681 	.word	0x00083681
   80094:	00083681 	.word	0x00083681
   80098:	00083681 	.word	0x00083681
   8009c:	00083681 	.word	0x00083681
   800a0:	00083681 	.word	0x00083681
   800a4:	00000000 	.word	0x00000000
   800a8:	00083681 	.word	0x00083681
   800ac:	00080bc9 	.word	0x00080bc9
   800b0:	00080d39 	.word	0x00080d39
   800b4:	00080e21 	.word	0x00080e21
   800b8:	00080e4d 	.word	0x00080e4d
   800bc:	00083681 	.word	0x00083681
   800c0:	00083681 	.word	0x00083681
   800c4:	00080ea5 	.word	0x00080ea5
   800c8:	00080e79 	.word	0x00080e79
   800cc:	00083681 	.word	0x00083681
   800d0:	00083681 	.word	0x00083681
   800d4:	00083681 	.word	0x00083681
   800d8:	00083681 	.word	0x00083681
   800dc:	00083681 	.word	0x00083681
   800e0:	00083681 	.word	0x00083681
   800e4:	00083681 	.word	0x00083681
   800e8:	00083681 	.word	0x00083681
   800ec:	000801b5 	.word	0x000801b5
   800f0:	00083681 	.word	0x00083681

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	00086e3c 	.word	0x00086e3c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00086e3c 	.word	0x00086e3c
   80144:	20070c70 	.word	0x20070c70
   80148:	00086e3c 	.word	0x00086e3c
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bd80      	pop	{r7, pc}
   80172:	bf00      	nop
   80174:	00082d2d 	.word	0x00082d2d
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	370c      	adds	r7, #12
   801a8:	46bd      	mov	sp, r7
   801aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	3708      	adds	r7, #8
   801fa:	46bd      	mov	sp, r7
   801fc:	bd80      	pop	{r7, pc}
   801fe:	bf00      	nop
   80200:	400b4000 	.word	0x400b4000
   80204:	20070ddc 	.word	0x20070ddc
   80208:	000804c5 	.word	0x000804c5
   8020c:	00080215 	.word	0x00080215
   80210:	20070ca0 	.word	0x20070ca0

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a98      	ldr	r2, [pc, #608]	; (80484 <dd_can_extract_mailbox_data+0x270>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b97      	ldr	r3, [pc, #604]	; (80484 <dd_can_extract_mailbox_data+0x270>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b96      	ldr	r3, [pc, #600]	; (80484 <dd_can_extract_mailbox_data+0x270>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b95      	ldr	r3, [pc, #596]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b95      	ldr	r3, [pc, #596]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e11c      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b93      	ldr	r3, [pc, #588]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a92      	ldr	r2, [pc, #584]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b90      	ldr	r3, [pc, #576]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b8e      	ldr	r3, [pc, #568]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b8d      	ldr	r3, [pc, #564]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b8c      	ldr	r3, [pc, #560]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b89      	ldr	r3, [pc, #548]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b87      	ldr	r3, [pc, #540]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b87      	ldr	r3, [pc, #540]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b87      	ldr	r3, [pc, #540]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b85      	ldr	r3, [pc, #532]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a85      	ldr	r2, [pc, #532]	; (804a0 <dd_can_extract_mailbox_data+0x28c>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b12      	cmp	r3, #18
   80294:	f200 80ef 	bhi.w	80476 <dd_can_extract_mailbox_data+0x262>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080331 	.word	0x00080331
   802a4:	00080353 	.word	0x00080353
   802a8:	0008037d 	.word	0x0008037d
   802ac:	000803d7 	.word	0x000803d7
   802b0:	000803e5 	.word	0x000803e5
   802b4:	000803f3 	.word	0x000803f3
   802b8:	00080401 	.word	0x00080401
   802bc:	000803bb 	.word	0x000803bb
   802c0:	000803c9 	.word	0x000803c9
   802c4:	0008039f 	.word	0x0008039f
   802c8:	000803ad 	.word	0x000803ad
   802cc:	000802ed 	.word	0x000802ed
   802d0:	0008030f 	.word	0x0008030f
   802d4:	00080477 	.word	0x00080477
   802d8:	00080477 	.word	0x00080477
   802dc:	0008040f 	.word	0x0008040f
   802e0:	00080477 	.word	0x00080477
   802e4:	00080433 	.word	0x00080433
   802e8:	00080455 	.word	0x00080455
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802ec:	4b6d      	ldr	r3, [pc, #436]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   802ee:	2200      	movs	r2, #0
   802f0:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802f2:	4b6d      	ldr	r3, [pc, #436]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   802f4:	881b      	ldrh	r3, [r3, #0]
   802f6:	b29b      	uxth	r3, r3
   802f8:	3301      	adds	r3, #1
   802fa:	b29a      	uxth	r2, r3
   802fc:	4b6a      	ldr	r3, [pc, #424]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   802fe:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   80300:	4b6a      	ldr	r3, [pc, #424]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80302:	2201      	movs	r2, #1
   80304:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80306:	4b61      	ldr	r3, [pc, #388]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80308:	2200      	movs	r2, #0
   8030a:	701a      	strb	r2, [r3, #0]
				  
				  break;
   8030c:	e0b4      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   8030e:	4b65      	ldr	r3, [pc, #404]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   80310:	2200      	movs	r2, #0
   80312:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   80314:	4b64      	ldr	r3, [pc, #400]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80316:	881b      	ldrh	r3, [r3, #0]
   80318:	b29b      	uxth	r3, r3
   8031a:	3301      	adds	r3, #1
   8031c:	b29a      	uxth	r2, r3
   8031e:	4b62      	ldr	r3, [pc, #392]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80320:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   80322:	4b62      	ldr	r3, [pc, #392]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80324:	2201      	movs	r2, #1
   80326:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80328:	4b58      	ldr	r3, [pc, #352]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   8032a:	2200      	movs	r2, #0
   8032c:	701a      	strb	r2, [r3, #0]
				  
				  break;
   8032e:	e0a3      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
			     case PROP_START_ALIGMENT:
			          test =0;
   80330:	4b5c      	ldr	r3, [pc, #368]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   80332:	2200      	movs	r2, #0
   80334:	701a      	strb	r2, [r3, #0]
					  count_start++;
   80336:	4b5c      	ldr	r3, [pc, #368]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80338:	881b      	ldrh	r3, [r3, #0]
   8033a:	b29b      	uxth	r3, r3
   8033c:	3301      	adds	r3, #1
   8033e:	b29a      	uxth	r2, r3
   80340:	4b59      	ldr	r3, [pc, #356]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80342:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   80344:	4b59      	ldr	r3, [pc, #356]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80346:	2201      	movs	r2, #1
   80348:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   8034a:	4b50      	ldr	r3, [pc, #320]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   8034c:	2200      	movs	r2, #0
   8034e:	701a      	strb	r2, [r3, #0]
			    break;
   80350:	e092      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
			    case PROP_START_MIXING:
				 User_setConductivity = temp_struct.temp_reg_16[1];
   80352:	4b4c      	ldr	r3, [pc, #304]	; (80484 <dd_can_extract_mailbox_data+0x270>)
   80354:	885a      	ldrh	r2, [r3, #2]
   80356:	4b56      	ldr	r3, [pc, #344]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80358:	801a      	strh	r2, [r3, #0]
// // 							break;
// 							
// 						}
			       

				    test=0;
   8035a:	4b52      	ldr	r3, [pc, #328]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   8035c:	2200      	movs	r2, #0
   8035e:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80360:	4b51      	ldr	r3, [pc, #324]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80362:	881b      	ldrh	r3, [r3, #0]
   80364:	b29b      	uxth	r3, r3
   80366:	3301      	adds	r3, #1
   80368:	b29a      	uxth	r2, r3
   8036a:	4b4f      	ldr	r3, [pc, #316]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   8036c:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   8036e:	4b4f      	ldr	r3, [pc, #316]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80370:	2201      	movs	r2, #1
   80372:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80374:	4b45      	ldr	r3, [pc, #276]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80376:	2200      	movs	r2, #0
   80378:	701a      	strb	r2, [r3, #0]
			    break;
   8037a:	e07d      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
			    case PROP_STOP_MIXING:
			        test =0;
   8037c:	4b49      	ldr	r3, [pc, #292]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   8037e:	2200      	movs	r2, #0
   80380:	701a      	strb	r2, [r3, #0]
					count_stop++;
   80382:	4b4c      	ldr	r3, [pc, #304]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   80384:	881b      	ldrh	r3, [r3, #0]
   80386:	b29b      	uxth	r3, r3
   80388:	3301      	adds	r3, #1
   8038a:	b29a      	uxth	r2, r3
   8038c:	4b49      	ldr	r3, [pc, #292]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   8038e:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80390:	4b46      	ldr	r3, [pc, #280]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80392:	2201      	movs	r2, #1
   80394:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80396:	4b3d      	ldr	r3, [pc, #244]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80398:	2200      	movs	r2, #0
   8039a:	701a      	strb	r2, [r3, #0]
			    break;
   8039c:	e06c      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   8039e:	4b43      	ldr	r3, [pc, #268]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803a0:	2201      	movs	r2, #1
   803a2:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   803a4:	4b39      	ldr	r3, [pc, #228]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803a6:	2200      	movs	r2, #0
   803a8:	701a      	strb	r2, [r3, #0]
			    break;
   803aa:	e065      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   803ac:	4b3f      	ldr	r3, [pc, #252]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803ae:	2201      	movs	r2, #1
   803b0:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   803b2:	4b36      	ldr	r3, [pc, #216]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803b4:	2200      	movs	r2, #0
   803b6:	701a      	strb	r2, [r3, #0]
			    break;
   803b8:	e05e      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   803ba:	4b3c      	ldr	r3, [pc, #240]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803bc:	2201      	movs	r2, #1
   803be:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803c0:	4b32      	ldr	r3, [pc, #200]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803c2:	2200      	movs	r2, #0
   803c4:	701a      	strb	r2, [r3, #0]
			    break;
   803c6:	e057      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803c8:	4b38      	ldr	r3, [pc, #224]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803ca:	2201      	movs	r2, #1
   803cc:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803ce:	4b2f      	ldr	r3, [pc, #188]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]
				
				break;
   803d4:	e050      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803d6:	4b35      	ldr	r3, [pc, #212]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803d8:	2201      	movs	r2, #1
   803da:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803dc:	4b2b      	ldr	r3, [pc, #172]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803de:	2200      	movs	r2, #0
   803e0:	701a      	strb	r2, [r3, #0]
				break;
   803e2:	e049      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803e4:	4b31      	ldr	r3, [pc, #196]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803e6:	2201      	movs	r2, #1
   803e8:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803ea:	4b28      	ldr	r3, [pc, #160]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803ec:	2200      	movs	r2, #0
   803ee:	701a      	strb	r2, [r3, #0]
				break;
   803f0:	e042      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803f2:	4b2e      	ldr	r3, [pc, #184]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   803f4:	2201      	movs	r2, #1
   803f6:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803f8:	4b24      	ldr	r3, [pc, #144]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   803fa:	2200      	movs	r2, #0
   803fc:	701a      	strb	r2, [r3, #0]
				break;
   803fe:	e03b      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   80400:	4b2a      	ldr	r3, [pc, #168]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80402:	2201      	movs	r2, #1
   80404:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   80406:	4b21      	ldr	r3, [pc, #132]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80408:	2200      	movs	r2, #0
   8040a:	701a      	strb	r2, [r3, #0]
				break;
   8040c:	e034      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				case PROP_CONDUCTIVITY:
				stabilise_Conductivity ++;
   8040e:	4b2a      	ldr	r3, [pc, #168]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80410:	781b      	ldrb	r3, [r3, #0]
   80412:	3301      	adds	r3, #1
   80414:	b2da      	uxtb	r2, r3
   80416:	4b28      	ldr	r3, [pc, #160]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80418:	701a      	strb	r2, [r3, #0]
//				avg_conductivity = avg_conductivity + temp_struct.temp_reg_16[1];
				conductivity = avg_conductivity + temp_struct.temp_reg_16[1];
   8041a:	4b1a      	ldr	r3, [pc, #104]	; (80484 <dd_can_extract_mailbox_data+0x270>)
   8041c:	885a      	ldrh	r2, [r3, #2]
   8041e:	4b27      	ldr	r3, [pc, #156]	; (804bc <dd_can_extract_mailbox_data+0x2a8>)
   80420:	881b      	ldrh	r3, [r3, #0]
   80422:	4413      	add	r3, r2
   80424:	b29a      	uxth	r2, r3
   80426:	4b26      	ldr	r3, [pc, #152]	; (804c0 <dd_can_extract_mailbox_data+0x2ac>)
   80428:	801a      	strh	r2, [r3, #0]
// 					avg_conductivity = avg_conductivity /6;
// 					stabilise_Conductivity = 0;
// 					conductivity = avg_conductivity/10;
// 				}
				
				state = CAN_IDLE;
   8042a:	4b18      	ldr	r3, [pc, #96]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   8042c:	2200      	movs	r2, #0
   8042e:	701a      	strb	r2, [r3, #0]

				break;
   80430:	e022      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				case prop_BICAR_FEED_BACK:
				   test =0;
   80432:	4b1c      	ldr	r3, [pc, #112]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   80434:	2200      	movs	r2, #0
   80436:	701a      	strb	r2, [r3, #0]
				   count_start++;
   80438:	4b1b      	ldr	r3, [pc, #108]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   8043a:	881b      	ldrh	r3, [r3, #0]
   8043c:	b29b      	uxth	r3, r3
   8043e:	3301      	adds	r3, #1
   80440:	b29a      	uxth	r2, r3
   80442:	4b19      	ldr	r3, [pc, #100]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80444:	801a      	strh	r2, [r3, #0]
				flag_buff=1;
   80446:	4b19      	ldr	r3, [pc, #100]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80448:	2201      	movs	r2, #1
   8044a:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   8044c:	4b0f      	ldr	r3, [pc, #60]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   8044e:	2200      	movs	r2, #0
   80450:	701a      	strb	r2, [r3, #0]
				break;
   80452:	e011      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				case prop_BICAR_FEED_BACK_STATUS:
				   test =0;
   80454:	4b13      	ldr	r3, [pc, #76]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   80456:	2200      	movs	r2, #0
   80458:	701a      	strb	r2, [r3, #0]
				   count_start++;
   8045a:	4b13      	ldr	r3, [pc, #76]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   8045c:	881b      	ldrh	r3, [r3, #0]
   8045e:	b29b      	uxth	r3, r3
   80460:	3301      	adds	r3, #1
   80462:	b29a      	uxth	r2, r3
   80464:	4b10      	ldr	r3, [pc, #64]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80466:	801a      	strh	r2, [r3, #0]
				flag_buff=1;
   80468:	4b10      	ldr	r3, [pc, #64]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   8046a:	2201      	movs	r2, #1
   8046c:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   8046e:	4b07      	ldr	r3, [pc, #28]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80470:	2200      	movs	r2, #0
   80472:	701a      	strb	r2, [r3, #0]
				break;
   80474:	e000      	b.n	80478 <dd_can_extract_mailbox_data+0x264>
				
				default:
				break;
   80476:	bf00      	nop
			  }		  
		   default:
		   break;
   80478:	bf00      	nop
		   
	 }
}
   8047a:	3714      	adds	r7, #20
   8047c:	46bd      	mov	sp, r7
   8047e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80482:	4770      	bx	lr
   80484:	20070dd0 	.word	0x20070dd0
   80488:	20070c93 	.word	0x20070c93
   8048c:	20070c88 	.word	0x20070c88
   80490:	20070c8e 	.word	0x20070c8e
   80494:	20070c90 	.word	0x20070c90
   80498:	20070c94 	.word	0x20070c94
   8049c:	20070e10 	.word	0x20070e10
   804a0:	20070dd4 	.word	0x20070dd4
   804a4:	20070c97 	.word	0x20070c97
   804a8:	20070c8a 	.word	0x20070c8a
   804ac:	20070dfc 	.word	0x20070dfc
   804b0:	20070dd6 	.word	0x20070dd6
   804b4:	20070c8c 	.word	0x20070c8c
   804b8:	20070c98 	.word	0x20070c98
   804bc:	20070c9c 	.word	0x20070c9c
   804c0:	20070c9a 	.word	0x20070c9a

000804c4 <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   804c4:	b480      	push	{r7}
   804c6:	b087      	sub	sp, #28
   804c8:	af00      	add	r7, sp, #0
   804ca:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   804cc:	2300      	movs	r3, #0
   804ce:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	681b      	ldr	r3, [r3, #0]
   804d4:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   804d6:	687b      	ldr	r3, [r7, #4]
   804d8:	689b      	ldr	r3, [r3, #8]
   804da:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   804dc:	68fb      	ldr	r3, [r7, #12]
   804de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   804e2:	2b00      	cmp	r3, #0
   804e4:	d006      	beq.n	804f4 <dd_can_mailbox_read+0x30>
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804ec:	2b00      	cmp	r3, #0
   804ee:	d001      	beq.n	804f4 <dd_can_mailbox_read+0x30>
   804f0:	2302      	movs	r3, #2
   804f2:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   804f4:	4a26      	ldr	r2, [pc, #152]	; (80590 <dd_can_mailbox_read+0xcc>)
   804f6:	7cfb      	ldrb	r3, [r7, #19]
   804f8:	015b      	lsls	r3, r3, #5
   804fa:	4413      	add	r3, r2
   804fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80500:	685b      	ldr	r3, [r3, #4]
   80502:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8050a:	68fb      	ldr	r3, [r7, #12]
   8050c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80510:	0c1b      	lsrs	r3, r3, #16
   80512:	b2da      	uxtb	r2, r3
   80514:	687b      	ldr	r3, [r7, #4]
   80516:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   80518:	4a1d      	ldr	r2, [pc, #116]	; (80590 <dd_can_mailbox_read+0xcc>)
   8051a:	7cfb      	ldrb	r3, [r7, #19]
   8051c:	015b      	lsls	r3, r3, #5
   8051e:	4413      	add	r3, r2
   80520:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80524:	685a      	ldr	r2, [r3, #4]
   80526:	687b      	ldr	r3, [r7, #4]
   80528:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   8052a:	4a19      	ldr	r2, [pc, #100]	; (80590 <dd_can_mailbox_read+0xcc>)
   8052c:	7cfb      	ldrb	r3, [r7, #19]
   8052e:	015b      	lsls	r3, r3, #5
   80530:	4413      	add	r3, r2
   80532:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80536:	681a      	ldr	r2, [r3, #0]
   80538:	687b      	ldr	r3, [r7, #4]
   8053a:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8053c:	4a14      	ldr	r2, [pc, #80]	; (80590 <dd_can_mailbox_read+0xcc>)
   8053e:	7cfb      	ldrb	r3, [r7, #19]
   80540:	015b      	lsls	r3, r3, #5
   80542:	4413      	add	r3, r2
   80544:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80548:	681a      	ldr	r2, [r3, #0]
   8054a:	687b      	ldr	r3, [r7, #4]
   8054c:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   8054e:	687b      	ldr	r3, [r7, #4]
   80550:	689b      	ldr	r3, [r3, #8]
   80552:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   80554:	68fb      	ldr	r3, [r7, #12]
   80556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8055a:	2b00      	cmp	r3, #0
   8055c:	d003      	beq.n	80566 <dd_can_mailbox_read+0xa2>
   8055e:	697b      	ldr	r3, [r7, #20]
   80560:	f043 0304 	orr.w	r3, r3, #4
   80564:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   80566:	490a      	ldr	r1, [pc, #40]	; (80590 <dd_can_mailbox_read+0xcc>)
   80568:	7cfb      	ldrb	r3, [r7, #19]
   8056a:	687a      	ldr	r2, [r7, #4]
   8056c:	7992      	ldrb	r2, [r2, #6]
   8056e:	0412      	lsls	r2, r2, #16
   80570:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80574:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80578:	015b      	lsls	r3, r3, #5
   8057a:	440b      	add	r3, r1
   8057c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80580:	605a      	str	r2, [r3, #4]
	return ul_retval;
   80582:	697b      	ldr	r3, [r7, #20]
}
   80584:	4618      	mov	r0, r3
   80586:	371c      	adds	r7, #28
   80588:	46bd      	mov	sp, r7
   8058a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8058e:	4770      	bx	lr
   80590:	400b4000 	.word	0x400b4000

00080594 <dd_can_mailbox_write>:

		
 uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   80594:	b480      	push	{r7}
   80596:	b085      	sub	sp, #20
   80598:	af00      	add	r7, sp, #0
   8059a:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	681b      	ldr	r3, [r3, #0]
   805a0:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   805a2:	4a2a      	ldr	r2, [pc, #168]	; (8064c <dd_can_mailbox_write+0xb8>)
   805a4:	7bfb      	ldrb	r3, [r7, #15]
   805a6:	015b      	lsls	r3, r3, #5
   805a8:	4413      	add	r3, r2
   805aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
   805ae:	681a      	ldr	r2, [r3, #0]
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   805b4:	687b      	ldr	r3, [r7, #4]
   805b6:	689b      	ldr	r3, [r3, #8]
   805b8:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   805c0:	2b00      	cmp	r3, #0
   805c2:	d101      	bne.n	805c8 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   805c4:	2301      	movs	r3, #1
   805c6:	e03b      	b.n	80640 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	795b      	ldrb	r3, [r3, #5]
   805cc:	2b00      	cmp	r3, #0
   805ce:	d00b      	beq.n	805e8 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   805d0:	491e      	ldr	r1, [pc, #120]	; (8064c <dd_can_mailbox_write+0xb8>)
   805d2:	7bfb      	ldrb	r3, [r7, #15]
   805d4:	687a      	ldr	r2, [r7, #4]
   805d6:	6912      	ldr	r2, [r2, #16]
   805d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   805dc:	015b      	lsls	r3, r3, #5
   805de:	440b      	add	r3, r1
   805e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e4:	601a      	str	r2, [r3, #0]
   805e6:	e008      	b.n	805fa <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   805e8:	4918      	ldr	r1, [pc, #96]	; (8064c <dd_can_mailbox_write+0xb8>)
   805ea:	7bfb      	ldrb	r3, [r7, #15]
   805ec:	687a      	ldr	r2, [r7, #4]
   805ee:	6912      	ldr	r2, [r2, #16]
   805f0:	015b      	lsls	r3, r3, #5
   805f2:	440b      	add	r3, r1
   805f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805f8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   805fa:	4914      	ldr	r1, [pc, #80]	; (8064c <dd_can_mailbox_write+0xb8>)
   805fc:	7bfb      	ldrb	r3, [r7, #15]
   805fe:	687a      	ldr	r2, [r7, #4]
   80600:	6992      	ldr	r2, [r2, #24]
   80602:	015b      	lsls	r3, r3, #5
   80604:	440b      	add	r3, r1
   80606:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8060a:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	799b      	ldrb	r3, [r3, #6]
   80610:	2b04      	cmp	r3, #4
   80612:	d908      	bls.n	80626 <dd_can_mailbox_write+0x92>
   80614:	490d      	ldr	r1, [pc, #52]	; (8064c <dd_can_mailbox_write+0xb8>)
   80616:	7bfb      	ldrb	r3, [r7, #15]
   80618:	687a      	ldr	r2, [r7, #4]
   8061a:	69d2      	ldr	r2, [r2, #28]
   8061c:	015b      	lsls	r3, r3, #5
   8061e:	440b      	add	r3, r1
   80620:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80624:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80626:	4909      	ldr	r1, [pc, #36]	; (8064c <dd_can_mailbox_write+0xb8>)
   80628:	7bfb      	ldrb	r3, [r7, #15]
   8062a:	687a      	ldr	r2, [r7, #4]
   8062c:	7992      	ldrb	r2, [r2, #6]
   8062e:	0412      	lsls	r2, r2, #16
   80630:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80634:	015b      	lsls	r3, r3, #5
   80636:	440b      	add	r3, r1
   80638:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8063c:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   8063e:	2300      	movs	r3, #0
}
   80640:	4618      	mov	r0, r3
   80642:	3714      	adds	r7, #20
   80644:	46bd      	mov	sp, r7
   80646:	f85d 7b04 	ldr.w	r7, [sp], #4
   8064a:	4770      	bx	lr
   8064c:	400b4000 	.word	0x400b4000

00080650 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   80650:	b480      	push	{r7}
   80652:	b085      	sub	sp, #20
   80654:	af00      	add	r7, sp, #0
   80656:	4603      	mov	r3, r0
   80658:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   8065a:	4b07      	ldr	r3, [pc, #28]	; (80678 <dd_can_global_send_transfer_cmd+0x28>)
   8065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8065e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   80662:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   80664:	4904      	ldr	r1, [pc, #16]	; (80678 <dd_can_global_send_transfer_cmd+0x28>)
   80666:	79fa      	ldrb	r2, [r7, #7]
   80668:	68fb      	ldr	r3, [r7, #12]
   8066a:	4313      	orrs	r3, r2
   8066c:	624b      	str	r3, [r1, #36]	; 0x24
}
   8066e:	3714      	adds	r7, #20
   80670:	46bd      	mov	sp, r7
   80672:	f85d 7b04 	ldr.w	r7, [sp], #4
   80676:	4770      	bx	lr
   80678:	400b4000 	.word	0x400b4000

0008067c <dd_can_mailbox_conf>:



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   8067c:	b480      	push	{r7}
   8067e:	b085      	sub	sp, #20
   80680:	af00      	add	r7, sp, #0
   80682:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80684:	687b      	ldr	r3, [r7, #4]
   80686:	681b      	ldr	r3, [r3, #0]
   80688:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8068a:	687b      	ldr	r3, [r7, #4]
   8068c:	791b      	ldrb	r3, [r3, #4]
   8068e:	2b00      	cmp	r3, #0
   80690:	d12e      	bne.n	806f0 <dd_can_mailbox_conf+0x74>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   80692:	4a34      	ldr	r2, [pc, #208]	; (80764 <dd_can_mailbox_conf+0xe8>)
   80694:	7bfb      	ldrb	r3, [r7, #15]
   80696:	3310      	adds	r3, #16
   80698:	015b      	lsls	r3, r3, #5
   8069a:	4413      	add	r3, r2
   8069c:	2200      	movs	r2, #0
   8069e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   806a0:	4a30      	ldr	r2, [pc, #192]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806a2:	7bfb      	ldrb	r3, [r7, #15]
   806a4:	3310      	adds	r3, #16
   806a6:	015b      	lsls	r3, r3, #5
   806a8:	4413      	add	r3, r2
   806aa:	2200      	movs	r2, #0
   806ac:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   806ae:	4a2d      	ldr	r2, [pc, #180]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806b0:	7bfb      	ldrb	r3, [r7, #15]
   806b2:	015b      	lsls	r3, r3, #5
   806b4:	4413      	add	r3, r2
   806b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   806ba:	2200      	movs	r2, #0
   806bc:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   806be:	4a29      	ldr	r2, [pc, #164]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806c0:	7bfb      	ldrb	r3, [r7, #15]
   806c2:	015b      	lsls	r3, r3, #5
   806c4:	4413      	add	r3, r2
   806c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   806ca:	2200      	movs	r2, #0
   806cc:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   806ce:	4a25      	ldr	r2, [pc, #148]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806d0:	7bfb      	ldrb	r3, [r7, #15]
   806d2:	015b      	lsls	r3, r3, #5
   806d4:	4413      	add	r3, r2
   806d6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806da:	2200      	movs	r2, #0
   806dc:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   806de:	4a21      	ldr	r2, [pc, #132]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806e0:	7bfb      	ldrb	r3, [r7, #15]
   806e2:	015b      	lsls	r3, r3, #5
   806e4:	4413      	add	r3, r2
   806e6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806ea:	2200      	movs	r2, #0
   806ec:	605a      	str	r2, [r3, #4]
		return;
   806ee:	e034      	b.n	8075a <dd_can_mailbox_conf+0xde>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   806f0:	481c      	ldr	r0, [pc, #112]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806f2:	7bfb      	ldrb	r3, [r7, #15]
   806f4:	491b      	ldr	r1, [pc, #108]	; (80764 <dd_can_mailbox_conf+0xe8>)
   806f6:	7bfa      	ldrb	r2, [r7, #15]
   806f8:	3210      	adds	r2, #16
   806fa:	0152      	lsls	r2, r2, #5
   806fc:	440a      	add	r2, r1
   806fe:	6812      	ldr	r2, [r2, #0]
   80700:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80704:	6879      	ldr	r1, [r7, #4]
   80706:	79c9      	ldrb	r1, [r1, #7]
   80708:	0409      	lsls	r1, r1, #16
   8070a:	430a      	orrs	r2, r1
   8070c:	3310      	adds	r3, #16
   8070e:	015b      	lsls	r3, r3, #5
   80710:	4403      	add	r3, r0
   80712:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80714:	4913      	ldr	r1, [pc, #76]	; (80764 <dd_can_mailbox_conf+0xe8>)
   80716:	7bfb      	ldrb	r3, [r7, #15]
   80718:	687a      	ldr	r2, [r7, #4]
   8071a:	68d2      	ldr	r2, [r2, #12]
   8071c:	3310      	adds	r3, #16
   8071e:	015b      	lsls	r3, r3, #5
   80720:	440b      	add	r3, r1
   80722:	605a      	str	r2, [r3, #4]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80724:	490f      	ldr	r1, [pc, #60]	; (80764 <dd_can_mailbox_conf+0xe8>)
   80726:	7bfb      	ldrb	r3, [r7, #15]
   80728:	687a      	ldr	r2, [r7, #4]
   8072a:	6912      	ldr	r2, [r2, #16]
   8072c:	015b      	lsls	r3, r3, #5
   8072e:	440b      	add	r3, r1
   80730:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80734:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   80736:	480b      	ldr	r0, [pc, #44]	; (80764 <dd_can_mailbox_conf+0xe8>)
   80738:	7bfb      	ldrb	r3, [r7, #15]
   8073a:	490a      	ldr	r1, [pc, #40]	; (80764 <dd_can_mailbox_conf+0xe8>)
   8073c:	7bfa      	ldrb	r2, [r7, #15]
   8073e:	3210      	adds	r2, #16
   80740:	0152      	lsls	r2, r2, #5
   80742:	440a      	add	r2, r1
   80744:	6812      	ldr	r2, [r2, #0]
   80746:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   8074a:	6879      	ldr	r1, [r7, #4]
   8074c:	7909      	ldrb	r1, [r1, #4]
   8074e:	0609      	lsls	r1, r1, #24
   80750:	430a      	orrs	r2, r1
   80752:	3310      	adds	r3, #16
   80754:	015b      	lsls	r3, r3, #5
   80756:	4403      	add	r3, r0
   80758:	601a      	str	r2, [r3, #0]
}
   8075a:	3714      	adds	r7, #20
   8075c:	46bd      	mov	sp, r7
   8075e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80762:	4770      	bx	lr
   80764:	400b4000 	.word	0x400b4000

00080768 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   80768:	b580      	push	{r7, lr}
   8076a:	b08e      	sub	sp, #56	; 0x38
   8076c:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   8076e:	4b4b      	ldr	r3, [pc, #300]	; (8089c <DD_INIT_CAN+0x134>)
   80770:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80772:	2378      	movs	r3, #120	; 0x78
   80774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80778:	4b49      	ldr	r3, [pc, #292]	; (808a0 <DD_INIT_CAN+0x138>)
   8077a:	4a4a      	ldr	r2, [pc, #296]	; (808a4 <DD_INIT_CAN+0x13c>)
   8077c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80780:	4a47      	ldr	r2, [pc, #284]	; (808a0 <DD_INIT_CAN+0x138>)
   80782:	4b47      	ldr	r3, [pc, #284]	; (808a0 <DD_INIT_CAN+0x138>)
   80784:	681b      	ldr	r3, [r3, #0]
   80786:	f023 0301 	bic.w	r3, r3, #1
   8078a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   8078c:	4944      	ldr	r1, [pc, #272]	; (808a0 <DD_INIT_CAN+0x138>)
   8078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80790:	78db      	ldrb	r3, [r3, #3]
   80792:	3b01      	subs	r3, #1
   80794:	f003 0207 	and.w	r2, r3, #7
   80798:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8079a:	789b      	ldrb	r3, [r3, #2]
   8079c:	3b01      	subs	r3, #1
   8079e:	011b      	lsls	r3, r3, #4
   807a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807a4:	431a      	orrs	r2, r3
   807a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807a8:	785b      	ldrb	r3, [r3, #1]
   807aa:	3b01      	subs	r3, #1
   807ac:	021b      	lsls	r3, r3, #8
   807ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807b2:	431a      	orrs	r2, r3
   807b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807b6:	791b      	ldrb	r3, [r3, #4]
   807b8:	3b01      	subs	r3, #1
   807ba:	031b      	lsls	r3, r3, #12
   807bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   807c0:	431a      	orrs	r2, r3
   807c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   807c6:	3b01      	subs	r3, #1
   807c8:	041b      	lsls	r3, r3, #16
   807ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   807ce:	4313      	orrs	r3, r2
   807d0:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   807d2:	2300      	movs	r3, #0
   807d4:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807d6:	2300      	movs	r3, #0
   807d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807dc:	e00b      	b.n	807f6 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   807de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807e2:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   807e4:	1d3b      	adds	r3, r7, #4
   807e6:	4618      	mov	r0, r3
   807e8:	4b2f      	ldr	r3, [pc, #188]	; (808a8 <DD_INIT_CAN+0x140>)
   807ea:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807f0:	3301      	adds	r3, #1
   807f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807fa:	2b07      	cmp	r3, #7
   807fc:	d9ef      	bls.n	807de <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   807fe:	4a28      	ldr	r2, [pc, #160]	; (808a0 <DD_INIT_CAN+0x138>)
   80800:	4b27      	ldr	r3, [pc, #156]	; (808a0 <DD_INIT_CAN+0x138>)
   80802:	681b      	ldr	r3, [r3, #0]
   80804:	f043 0301 	orr.w	r3, r3, #1
   80808:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8080a:	2300      	movs	r3, #0
   8080c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8080e:	2300      	movs	r3, #0
   80810:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80812:	e005      	b.n	80820 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   80814:	4b22      	ldr	r3, [pc, #136]	; (808a0 <DD_INIT_CAN+0x138>)
   80816:	691b      	ldr	r3, [r3, #16]
   80818:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   8081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8081c:	3301      	adds	r3, #1
   8081e:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80826:	2b00      	cmp	r3, #0
   80828:	d103      	bne.n	80832 <DD_INIT_CAN+0xca>
   8082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8082c:	4a1f      	ldr	r2, [pc, #124]	; (808ac <DD_INIT_CAN+0x144>)
   8082e:	4293      	cmp	r3, r2
   80830:	d9f0      	bls.n	80814 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   80832:	4b1f      	ldr	r3, [pc, #124]	; (808b0 <DD_INIT_CAN+0x148>)
   80834:	2201      	movs	r2, #1
   80836:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   80838:	4b1d      	ldr	r3, [pc, #116]	; (808b0 <DD_INIT_CAN+0x148>)
   8083a:	2201      	movs	r2, #1
   8083c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   8083e:	4b1c      	ldr	r3, [pc, #112]	; (808b0 <DD_INIT_CAN+0x148>)
   80840:	2200      	movs	r2, #0
   80842:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80844:	4b1a      	ldr	r3, [pc, #104]	; (808b0 <DD_INIT_CAN+0x148>)
   80846:	2200      	movs	r2, #0
   80848:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   8084a:	4b19      	ldr	r3, [pc, #100]	; (808b0 <DD_INIT_CAN+0x148>)
   8084c:	4a19      	ldr	r2, [pc, #100]	; (808b4 <DD_INIT_CAN+0x14c>)
   8084e:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   80850:	4b17      	ldr	r3, [pc, #92]	; (808b0 <DD_INIT_CAN+0x148>)
   80852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80856:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   80858:	4815      	ldr	r0, [pc, #84]	; (808b0 <DD_INIT_CAN+0x148>)
   8085a:	4b13      	ldr	r3, [pc, #76]	; (808a8 <DD_INIT_CAN+0x140>)
   8085c:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   8085e:	202b      	movs	r0, #43	; 0x2b
   80860:	4b15      	ldr	r3, [pc, #84]	; (808b8 <DD_INIT_CAN+0x150>)
   80862:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80864:	4b0e      	ldr	r3, [pc, #56]	; (808a0 <DD_INIT_CAN+0x138>)
   80866:	2202      	movs	r2, #2
   80868:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8086a:	4b11      	ldr	r3, [pc, #68]	; (808b0 <DD_INIT_CAN+0x148>)
   8086c:	2200      	movs	r2, #0
   8086e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80870:	4b0f      	ldr	r3, [pc, #60]	; (808b0 <DD_INIT_CAN+0x148>)
   80872:	2203      	movs	r2, #3
   80874:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80876:	4b0e      	ldr	r3, [pc, #56]	; (808b0 <DD_INIT_CAN+0x148>)
   80878:	2201      	movs	r2, #1
   8087a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8087c:	4b0c      	ldr	r3, [pc, #48]	; (808b0 <DD_INIT_CAN+0x148>)
   8087e:	2200      	movs	r2, #0
   80880:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80882:	4b0b      	ldr	r3, [pc, #44]	; (808b0 <DD_INIT_CAN+0x148>)
   80884:	4a0b      	ldr	r2, [pc, #44]	; (808b4 <DD_INIT_CAN+0x14c>)
   80886:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80888:	4b09      	ldr	r3, [pc, #36]	; (808b0 <DD_INIT_CAN+0x148>)
   8088a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8088e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   80890:	4807      	ldr	r0, [pc, #28]	; (808b0 <DD_INIT_CAN+0x148>)
   80892:	4b05      	ldr	r3, [pc, #20]	; (808a8 <DD_INIT_CAN+0x140>)
   80894:	4798      	blx	r3
}
   80896:	3738      	adds	r7, #56	; 0x38
   80898:	46bd      	mov	sp, r7
   8089a:	bd80      	pop	{r7, pc}
   8089c:	00086d4c 	.word	0x00086d4c
   808a0:	400b4000 	.word	0x400b4000
   808a4:	43414e00 	.word	0x43414e00
   808a8:	0008067d 	.word	0x0008067d
   808ac:	0001869f 	.word	0x0001869f
   808b0:	20070ddc 	.word	0x20070ddc
   808b4:	1ffc0000 	.word	0x1ffc0000
   808b8:	00080185 	.word	0x00080185

000808bc <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   808bc:	b580      	push	{r7, lr}
   808be:	b082      	sub	sp, #8
   808c0:	af00      	add	r7, sp, #0
   808c2:	4603      	mov	r3, r0
   808c4:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   808c6:	4b18      	ldr	r3, [pc, #96]	; (80928 <CPU3_D_SET_PUMP+0x6c>)
   808c8:	f640 2241 	movw	r2, #2625	; 0xa41
   808cc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   808d0:	4b15      	ldr	r3, [pc, #84]	; (80928 <CPU3_D_SET_PUMP+0x6c>)
   808d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   808d6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   808da:	4b13      	ldr	r3, [pc, #76]	; (80928 <CPU3_D_SET_PUMP+0x6c>)
   808dc:	f640 2241 	movw	r2, #2625	; 0xa41
   808e0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   808e4:	4b10      	ldr	r3, [pc, #64]	; (80928 <CPU3_D_SET_PUMP+0x6c>)
   808e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   808ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   808ee:	79fb      	ldrb	r3, [r7, #7]
   808f0:	2b01      	cmp	r3, #1
   808f2:	d002      	beq.n	808fa <CPU3_D_SET_PUMP+0x3e>
   808f4:	2b02      	cmp	r3, #2
   808f6:	d009      	beq.n	8090c <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   808f8:	e011      	b.n	8091e <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   808fa:	4b0b      	ldr	r3, [pc, #44]	; (80928 <CPU3_D_SET_PUMP+0x6c>)
   808fc:	2210      	movs	r2, #16
   808fe:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   80900:	2055      	movs	r0, #85	; 0x55
   80902:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80906:	4b09      	ldr	r3, [pc, #36]	; (8092c <CPU3_D_SET_PUMP+0x70>)
   80908:	4798      	blx	r3
		break;
   8090a:	e008      	b.n	8091e <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   8090c:	4b06      	ldr	r3, [pc, #24]	; (80928 <CPU3_D_SET_PUMP+0x6c>)
   8090e:	2220      	movs	r2, #32
   80910:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   80912:	2056      	movs	r0, #86	; 0x56
   80914:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80918:	4b04      	ldr	r3, [pc, #16]	; (8092c <CPU3_D_SET_PUMP+0x70>)
   8091a:	4798      	blx	r3
		break;
   8091c:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   8091e:	2300      	movs	r3, #0
}
   80920:	4618      	mov	r0, r3
   80922:	3708      	adds	r7, #8
   80924:	46bd      	mov	sp, r7
   80926:	bd80      	pop	{r7, pc}
   80928:	40094000 	.word	0x40094000
   8092c:	00083029 	.word	0x00083029

00080930 <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   80930:	b590      	push	{r4, r7, lr}
   80932:	b089      	sub	sp, #36	; 0x24
   80934:	af00      	add	r7, sp, #0
   80936:	4603      	mov	r3, r0
   80938:	460a      	mov	r2, r1
   8093a:	71fb      	strb	r3, [r7, #7]
   8093c:	4613      	mov	r3, r2
   8093e:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   80940:	2300      	movs	r3, #0
   80942:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   80944:	79bb      	ldrb	r3, [r7, #6]
   80946:	01db      	lsls	r3, r3, #7
   80948:	4a1f      	ldr	r2, [pc, #124]	; (809c8 <CPU3_D_CONFIG_TIMER+0x98>)
   8094a:	fb92 f3f3 	sdiv	r3, r2, r3
   8094e:	1e5a      	subs	r2, r3, #1
   80950:	4b1e      	ldr	r3, [pc, #120]	; (809cc <CPU3_D_CONFIG_TIMER+0x9c>)
   80952:	4610      	mov	r0, r2
   80954:	4798      	blx	r3
   80956:	4602      	mov	r2, r0
   80958:	460b      	mov	r3, r1
   8095a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   8095e:	4b1c      	ldr	r3, [pc, #112]	; (809d0 <CPU3_D_CONFIG_TIMER+0xa0>)
   80960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   80964:	4798      	blx	r3
   80966:	4603      	mov	r3, r0
   80968:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   8096a:	79fb      	ldrb	r3, [r7, #7]
   8096c:	2b04      	cmp	r3, #4
   8096e:	d826      	bhi.n	809be <CPU3_D_CONFIG_TIMER+0x8e>
   80970:	a201      	add	r2, pc, #4	; (adr r2, 80978 <CPU3_D_CONFIG_TIMER+0x48>)
   80972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80976:	bf00      	nop
   80978:	0008098d 	.word	0x0008098d
   8097c:	0008099b 	.word	0x0008099b
   80980:	000809ad 	.word	0x000809ad
   80984:	000809b3 	.word	0x000809b3
   80988:	000809b9 	.word	0x000809b9
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   8098c:	4811      	ldr	r0, [pc, #68]	; (809d4 <CPU3_D_CONFIG_TIMER+0xa4>)
   8098e:	69f9      	ldr	r1, [r7, #28]
   80990:	2221      	movs	r2, #33	; 0x21
   80992:	68fb      	ldr	r3, [r7, #12]
   80994:	4c10      	ldr	r4, [pc, #64]	; (809d8 <CPU3_D_CONFIG_TIMER+0xa8>)
   80996:	47a0      	blx	r4
		break;
   80998:	e012      	b.n	809c0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   8099a:	79bb      	ldrb	r3, [r7, #6]
   8099c:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   8099e:	480f      	ldr	r0, [pc, #60]	; (809dc <CPU3_D_CONFIG_TIMER+0xac>)
   809a0:	2100      	movs	r1, #0
   809a2:	221b      	movs	r2, #27
   809a4:	68fb      	ldr	r3, [r7, #12]
   809a6:	4c0e      	ldr	r4, [pc, #56]	; (809e0 <CPU3_D_CONFIG_TIMER+0xb0>)
   809a8:	47a0      	blx	r4
		break;
   809aa:	e009      	b.n	809c0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   809ac:	79bb      	ldrb	r3, [r7, #6]
   809ae:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   809b0:	e006      	b.n	809c0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   809b2:	79bb      	ldrb	r3, [r7, #6]
   809b4:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   809b6:	e003      	b.n	809c0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   809b8:	79bb      	ldrb	r3, [r7, #6]
   809ba:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   809bc:	e000      	b.n	809c0 <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   809be:	bf00      	nop
		
	}
}
   809c0:	4618      	mov	r0, r3
   809c2:	3724      	adds	r7, #36	; 0x24
   809c4:	46bd      	mov	sp, r7
   809c6:	bd90      	pop	{r4, r7, pc}
   809c8:	0501bd00 	.word	0x0501bd00
   809cc:	00083cbd 	.word	0x00083cbd
   809d0:	00083d89 	.word	0x00083d89
   809d4:	40088000 	.word	0x40088000
   809d8:	00081249 	.word	0x00081249
   809dc:	40080000 	.word	0x40080000
   809e0:	000812a5 	.word	0x000812a5

000809e4 <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   809e4:	b580      	push	{r7, lr}
   809e6:	b082      	sub	sp, #8
   809e8:	af00      	add	r7, sp, #0
   809ea:	4603      	mov	r3, r0
   809ec:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   809ee:	79fb      	ldrb	r3, [r7, #7]
   809f0:	2b04      	cmp	r3, #4
   809f2:	d826      	bhi.n	80a42 <CPU3_D_STOP_TIMER+0x5e>
   809f4:	a201      	add	r2, pc, #4	; (adr r2, 809fc <CPU3_D_STOP_TIMER+0x18>)
   809f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   809fa:	bf00      	nop
   809fc:	00080a11 	.word	0x00080a11
   80a00:	00080a1b 	.word	0x00080a1b
   80a04:	00080a25 	.word	0x00080a25
   80a08:	00080a2f 	.word	0x00080a2f
   80a0c:	00080a39 	.word	0x00080a39
	{
		case 0:
		tc_stop(TC0,0);
   80a10:	480e      	ldr	r0, [pc, #56]	; (80a4c <CPU3_D_STOP_TIMER+0x68>)
   80a12:	2100      	movs	r1, #0
   80a14:	4b0e      	ldr	r3, [pc, #56]	; (80a50 <CPU3_D_STOP_TIMER+0x6c>)
   80a16:	4798      	blx	r3
		break;
   80a18:	e014      	b.n	80a44 <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   80a1a:	480c      	ldr	r0, [pc, #48]	; (80a4c <CPU3_D_STOP_TIMER+0x68>)
   80a1c:	2101      	movs	r1, #1
   80a1e:	4b0c      	ldr	r3, [pc, #48]	; (80a50 <CPU3_D_STOP_TIMER+0x6c>)
   80a20:	4798      	blx	r3
		break;
   80a22:	e00f      	b.n	80a44 <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   80a24:	480b      	ldr	r0, [pc, #44]	; (80a54 <CPU3_D_STOP_TIMER+0x70>)
   80a26:	2100      	movs	r1, #0
   80a28:	4b09      	ldr	r3, [pc, #36]	; (80a50 <CPU3_D_STOP_TIMER+0x6c>)
   80a2a:	4798      	blx	r3
		break;
   80a2c:	e00a      	b.n	80a44 <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   80a2e:	480a      	ldr	r0, [pc, #40]	; (80a58 <CPU3_D_STOP_TIMER+0x74>)
   80a30:	2100      	movs	r1, #0
   80a32:	4b07      	ldr	r3, [pc, #28]	; (80a50 <CPU3_D_STOP_TIMER+0x6c>)
   80a34:	4798      	blx	r3
		break;
   80a36:	e005      	b.n	80a44 <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   80a38:	4807      	ldr	r0, [pc, #28]	; (80a58 <CPU3_D_STOP_TIMER+0x74>)
   80a3a:	2101      	movs	r1, #1
   80a3c:	4b04      	ldr	r3, [pc, #16]	; (80a50 <CPU3_D_STOP_TIMER+0x6c>)
   80a3e:	4798      	blx	r3
		break;
   80a40:	e000      	b.n	80a44 <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   80a42:	bf00      	nop
	}
   80a44:	4618      	mov	r0, r3
   80a46:	3708      	adds	r7, #8
   80a48:	46bd      	mov	sp, r7
   80a4a:	bd80      	pop	{r7, pc}
   80a4c:	40080000 	.word	0x40080000
   80a50:	000816f9 	.word	0x000816f9
   80a54:	40088000 	.word	0x40088000
   80a58:	40084000 	.word	0x40084000

00080a5c <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   80a60:	200b      	movs	r0, #11
   80a62:	4b3b      	ldr	r3, [pc, #236]	; (80b50 <CPU3_D_INIT_PIO+0xf4>)
   80a64:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   80a66:	200c      	movs	r0, #12
   80a68:	4b39      	ldr	r3, [pc, #228]	; (80b50 <CPU3_D_INIT_PIO+0xf4>)
   80a6a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   80a6c:	200d      	movs	r0, #13
   80a6e:	4b38      	ldr	r3, [pc, #224]	; (80b50 <CPU3_D_INIT_PIO+0xf4>)
   80a70:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   80a72:	200e      	movs	r0, #14
   80a74:	4b36      	ldr	r3, [pc, #216]	; (80b50 <CPU3_D_INIT_PIO+0xf4>)
   80a76:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80a78:	4b36      	ldr	r3, [pc, #216]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80a7a:	4a37      	ldr	r2, [pc, #220]	; (80b58 <CPU3_D_INIT_PIO+0xfc>)
   80a7c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   80a80:	4b36      	ldr	r3, [pc, #216]	; (80b5c <CPU3_D_INIT_PIO+0x100>)
   80a82:	4a35      	ldr	r2, [pc, #212]	; (80b58 <CPU3_D_INIT_PIO+0xfc>)
   80a84:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80a88:	4b35      	ldr	r3, [pc, #212]	; (80b60 <CPU3_D_INIT_PIO+0x104>)
   80a8a:	4a33      	ldr	r2, [pc, #204]	; (80b58 <CPU3_D_INIT_PIO+0xfc>)
   80a8c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   80a90:	4b34      	ldr	r3, [pc, #208]	; (80b64 <CPU3_D_INIT_PIO+0x108>)
   80a92:	4a31      	ldr	r2, [pc, #196]	; (80b58 <CPU3_D_INIT_PIO+0xfc>)
   80a94:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80a98:	4b2e      	ldr	r3, [pc, #184]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80a9a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   80a9e:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   80aa0:	4b2c      	ldr	r3, [pc, #176]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80aa2:	4a31      	ldr	r2, [pc, #196]	; (80b68 <CPU3_D_INIT_PIO+0x10c>)
   80aa4:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80aa6:	4b2b      	ldr	r3, [pc, #172]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80aa8:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   80aac:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   80aae:	4b29      	ldr	r3, [pc, #164]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80ab0:	f44f 7240 	mov.w	r2, #768	; 0x300
   80ab4:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80ab6:	4b27      	ldr	r3, [pc, #156]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80ab8:	f44f 7240 	mov.w	r2, #768	; 0x300
   80abc:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   80abe:	4b25      	ldr	r3, [pc, #148]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80ac0:	4a2a      	ldr	r2, [pc, #168]	; (80b6c <CPU3_D_INIT_PIO+0x110>)
   80ac2:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80ac4:	4b23      	ldr	r3, [pc, #140]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80ac6:	4a2a      	ldr	r2, [pc, #168]	; (80b70 <CPU3_D_INIT_PIO+0x114>)
   80ac8:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   80aca:	4b22      	ldr	r3, [pc, #136]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80acc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   80ad0:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   80ad2:	4b20      	ldr	r3, [pc, #128]	; (80b54 <CPU3_D_INIT_PIO+0xf8>)
   80ad4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80ad8:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   80ada:	4b20      	ldr	r3, [pc, #128]	; (80b5c <CPU3_D_INIT_PIO+0x100>)
   80adc:	4a25      	ldr	r2, [pc, #148]	; (80b74 <CPU3_D_INIT_PIO+0x118>)
   80ade:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   80ae0:	4b1e      	ldr	r3, [pc, #120]	; (80b5c <CPU3_D_INIT_PIO+0x100>)
   80ae2:	4a24      	ldr	r2, [pc, #144]	; (80b74 <CPU3_D_INIT_PIO+0x118>)
   80ae4:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80ae6:	4b1d      	ldr	r3, [pc, #116]	; (80b5c <CPU3_D_INIT_PIO+0x100>)
   80ae8:	4a23      	ldr	r2, [pc, #140]	; (80b78 <CPU3_D_INIT_PIO+0x11c>)
   80aea:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   80aec:	4b1b      	ldr	r3, [pc, #108]	; (80b5c <CPU3_D_INIT_PIO+0x100>)
   80aee:	4a23      	ldr	r2, [pc, #140]	; (80b7c <CPU3_D_INIT_PIO+0x120>)
   80af0:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   80af2:	4b1a      	ldr	r3, [pc, #104]	; (80b5c <CPU3_D_INIT_PIO+0x100>)
   80af4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80af8:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   80afa:	4b19      	ldr	r3, [pc, #100]	; (80b60 <CPU3_D_INIT_PIO+0x104>)
   80afc:	4a20      	ldr	r2, [pc, #128]	; (80b80 <CPU3_D_INIT_PIO+0x124>)
   80afe:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   80b00:	4b17      	ldr	r3, [pc, #92]	; (80b60 <CPU3_D_INIT_PIO+0x104>)
   80b02:	4a20      	ldr	r2, [pc, #128]	; (80b84 <CPU3_D_INIT_PIO+0x128>)
   80b04:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   80b06:	4b16      	ldr	r3, [pc, #88]	; (80b60 <CPU3_D_INIT_PIO+0x104>)
   80b08:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   80b0c:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   80b0e:	4b14      	ldr	r3, [pc, #80]	; (80b60 <CPU3_D_INIT_PIO+0x104>)
   80b10:	4a1d      	ldr	r2, [pc, #116]	; (80b88 <CPU3_D_INIT_PIO+0x12c>)
   80b12:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   80b14:	4b12      	ldr	r3, [pc, #72]	; (80b60 <CPU3_D_INIT_PIO+0x104>)
   80b16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80b1a:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   80b1c:	4b11      	ldr	r3, [pc, #68]	; (80b64 <CPU3_D_INIT_PIO+0x108>)
   80b1e:	f641 6210 	movw	r2, #7696	; 0x1e10
   80b22:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   80b24:	4b0f      	ldr	r3, [pc, #60]	; (80b64 <CPU3_D_INIT_PIO+0x108>)
   80b26:	226f      	movs	r2, #111	; 0x6f
   80b28:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   80b2a:	4b0e      	ldr	r3, [pc, #56]	; (80b64 <CPU3_D_INIT_PIO+0x108>)
   80b2c:	220f      	movs	r2, #15
   80b2e:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80b30:	2001      	movs	r0, #1
   80b32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b36:	4b15      	ldr	r3, [pc, #84]	; (80b8c <CPU3_D_INIT_PIO+0x130>)
   80b38:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80b3a:	2000      	movs	r0, #0
   80b3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b40:	4b12      	ldr	r3, [pc, #72]	; (80b8c <CPU3_D_INIT_PIO+0x130>)
   80b42:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   80b44:	2003      	movs	r0, #3
   80b46:	4912      	ldr	r1, [pc, #72]	; (80b90 <CPU3_D_INIT_PIO+0x134>)
   80b48:	4b10      	ldr	r3, [pc, #64]	; (80b8c <CPU3_D_INIT_PIO+0x130>)
   80b4a:	4798      	blx	r3





}
   80b4c:	bd80      	pop	{r7, pc}
   80b4e:	bf00      	nop
   80b50:	000835c5 	.word	0x000835c5
   80b54:	400e0e00 	.word	0x400e0e00
   80b58:	50494f00 	.word	0x50494f00
   80b5c:	400e1000 	.word	0x400e1000
   80b60:	400e1200 	.word	0x400e1200
   80b64:	400e1400 	.word	0x400e1400
   80b68:	1f870343 	.word	0x1f870343
   80b6c:	0018c004 	.word	0x0018c004
   80b70:	00180004 	.word	0x00180004
   80b74:	08204000 	.word	0x08204000
   80b78:	f01800ff 	.word	0xf01800ff
   80b7c:	06204000 	.word	0x06204000
   80b80:	0d8ff1fe 	.word	0x0d8ff1fe
   80b84:	008ff1fe 	.word	0x008ff1fe
   80b88:	060ff1fe 	.word	0x060ff1fe
   80b8c:	00083029 	.word	0x00083029
   80b90:	30000001 	.word	0x30000001

00080b94 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80b94:	b480      	push	{r7}
   80b96:	b083      	sub	sp, #12
   80b98:	af00      	add	r7, sp, #0
   80b9a:	4603      	mov	r3, r0
   80b9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80b9e:	4909      	ldr	r1, [pc, #36]	; (80bc4 <NVIC_ClearPendingIRQ+0x30>)
   80ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ba4:	095b      	lsrs	r3, r3, #5
   80ba6:	79fa      	ldrb	r2, [r7, #7]
   80ba8:	f002 021f 	and.w	r2, r2, #31
   80bac:	2001      	movs	r0, #1
   80bae:	fa00 f202 	lsl.w	r2, r0, r2
   80bb2:	3360      	adds	r3, #96	; 0x60
   80bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80bb8:	370c      	adds	r7, #12
   80bba:	46bd      	mov	sp, r7
   80bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bc0:	4770      	bx	lr
   80bc2:	bf00      	nop
   80bc4:	e000e100 	.word	0xe000e100

00080bc8 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80bc8:	b580      	push	{r7, lr}
   80bca:	af00      	add	r7, sp, #0
	TC1->TC_CHANNEL[0].TC_IDR = TC_IER_CPCS;
   80bcc:	4b4f      	ldr	r3, [pc, #316]	; (80d0c <TC0_Handler+0x144>)
   80bce:	2210      	movs	r2, #16
   80bd0:	629a      	str	r2, [r3, #40]	; 0x28
	
	PIOD->PIO_WPMR	= 0x50494F00;
   80bd2:	4b4f      	ldr	r3, [pc, #316]	; (80d10 <TC0_Handler+0x148>)
   80bd4:	4a4f      	ldr	r2, [pc, #316]	; (80d14 <TC0_Handler+0x14c>)
   80bd6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80bda:	4b4f      	ldr	r3, [pc, #316]	; (80d18 <TC0_Handler+0x150>)
   80bdc:	4a4d      	ldr	r2, [pc, #308]	; (80d14 <TC0_Handler+0x14c>)
   80bde:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80be2:	4b4b      	ldr	r3, [pc, #300]	; (80d10 <TC0_Handler+0x148>)
   80be4:	2203      	movs	r2, #3
   80be6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80bea:	4b49      	ldr	r3, [pc, #292]	; (80d10 <TC0_Handler+0x148>)
   80bec:	220c      	movs	r2, #12
   80bee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80bf2:	4b49      	ldr	r3, [pc, #292]	; (80d18 <TC0_Handler+0x150>)
   80bf4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80bf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80bfc:	4b46      	ldr	r3, [pc, #280]	; (80d18 <TC0_Handler+0x150>)
   80bfe:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80c02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80c06:	4b45      	ldr	r3, [pc, #276]	; (80d1c <TC0_Handler+0x154>)
   80c08:	681b      	ldr	r3, [r3, #0]
   80c0a:	3301      	adds	r3, #1
   80c0c:	4a43      	ldr	r2, [pc, #268]	; (80d1c <TC0_Handler+0x154>)
   80c0e:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80c10:	4b43      	ldr	r3, [pc, #268]	; (80d20 <TC0_Handler+0x158>)
   80c12:	681b      	ldr	r3, [r3, #0]
   80c14:	3301      	adds	r3, #1
   80c16:	4a42      	ldr	r2, [pc, #264]	; (80d20 <TC0_Handler+0x158>)
   80c18:	6013      	str	r3, [r2, #0]
	Cnt_TC0_total++;
   80c1a:	4b42      	ldr	r3, [pc, #264]	; (80d24 <TC0_Handler+0x15c>)
   80c1c:	681b      	ldr	r3, [r3, #0]
   80c1e:	3301      	adds	r3, #1
   80c20:	4a40      	ldr	r2, [pc, #256]	; (80d24 <TC0_Handler+0x15c>)
   80c22:	6013      	str	r3, [r2, #0]
	
	
	if(count<64)
   80c24:	4b3d      	ldr	r3, [pc, #244]	; (80d1c <TC0_Handler+0x154>)
   80c26:	681b      	ldr	r3, [r3, #0]
   80c28:	2b3f      	cmp	r3, #63	; 0x3f
   80c2a:	d80e      	bhi.n	80c4a <TC0_Handler+0x82>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80c2c:	4a38      	ldr	r2, [pc, #224]	; (80d10 <TC0_Handler+0x148>)
   80c2e:	4b3b      	ldr	r3, [pc, #236]	; (80d1c <TC0_Handler+0x154>)
   80c30:	681b      	ldr	r3, [r3, #0]
   80c32:	493d      	ldr	r1, [pc, #244]	; (80d28 <TC0_Handler+0x160>)
   80c34:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80c38:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80c3a:	4a37      	ldr	r2, [pc, #220]	; (80d18 <TC0_Handler+0x150>)
   80c3c:	4b37      	ldr	r3, [pc, #220]	; (80d1c <TC0_Handler+0x154>)
   80c3e:	681b      	ldr	r3, [r3, #0]
   80c40:	4939      	ldr	r1, [pc, #228]	; (80d28 <TC0_Handler+0x160>)
   80c42:	00db      	lsls	r3, r3, #3
   80c44:	440b      	add	r3, r1
   80c46:	685b      	ldr	r3, [r3, #4]
   80c48:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80c4a:	4b34      	ldr	r3, [pc, #208]	; (80d1c <TC0_Handler+0x154>)
   80c4c:	681b      	ldr	r3, [r3, #0]
   80c4e:	2b3f      	cmp	r3, #63	; 0x3f
   80c50:	d911      	bls.n	80c76 <TC0_Handler+0xae>
	{
		count = 0;
   80c52:	4b32      	ldr	r3, [pc, #200]	; (80d1c <TC0_Handler+0x154>)
   80c54:	2200      	movs	r2, #0
   80c56:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80c58:	4a2d      	ldr	r2, [pc, #180]	; (80d10 <TC0_Handler+0x148>)
   80c5a:	4b30      	ldr	r3, [pc, #192]	; (80d1c <TC0_Handler+0x154>)
   80c5c:	681b      	ldr	r3, [r3, #0]
   80c5e:	4932      	ldr	r1, [pc, #200]	; (80d28 <TC0_Handler+0x160>)
   80c60:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80c64:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80c66:	4a2c      	ldr	r2, [pc, #176]	; (80d18 <TC0_Handler+0x150>)
   80c68:	4b2c      	ldr	r3, [pc, #176]	; (80d1c <TC0_Handler+0x154>)
   80c6a:	681b      	ldr	r3, [r3, #0]
   80c6c:	492e      	ldr	r1, [pc, #184]	; (80d28 <TC0_Handler+0x160>)
   80c6e:	00db      	lsls	r3, r3, #3
   80c70:	440b      	add	r3, r1
   80c72:	685b      	ldr	r3, [r3, #4]
   80c74:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	
		PIOD->PIO_WPMR	= 0x50494F00;
   80c76:	4b26      	ldr	r3, [pc, #152]	; (80d10 <TC0_Handler+0x148>)
   80c78:	4a26      	ldr	r2, [pc, #152]	; (80d14 <TC0_Handler+0x14c>)
   80c7a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   80c7e:	4b26      	ldr	r3, [pc, #152]	; (80d18 <TC0_Handler+0x150>)
   80c80:	4a24      	ldr	r2, [pc, #144]	; (80d14 <TC0_Handler+0x14c>)
   80c82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   80c86:	4b22      	ldr	r3, [pc, #136]	; (80d10 <TC0_Handler+0x148>)
   80c88:	220c      	movs	r2, #12
   80c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR  = 0x00000003;
   80c8e:	4b20      	ldr	r3, [pc, #128]	; (80d10 <TC0_Handler+0x148>)
   80c90:	2203      	movs	r2, #3
   80c92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   80c96:	4b20      	ldr	r3, [pc, #128]	; (80d18 <TC0_Handler+0x150>)
   80c98:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80c9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   80ca0:	4b1d      	ldr	r3, [pc, #116]	; (80d18 <TC0_Handler+0x150>)
   80ca2:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80ca6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

		if(count<64)
   80caa:	4b1c      	ldr	r3, [pc, #112]	; (80d1c <TC0_Handler+0x154>)
   80cac:	681b      	ldr	r3, [r3, #0]
   80cae:	2b3f      	cmp	r3, #63	; 0x3f
   80cb0:	d80e      	bhi.n	80cd0 <TC0_Handler+0x108>
		{
			PIOD->PIO_ODSR = array_bicar[count].dir;
   80cb2:	4a17      	ldr	r2, [pc, #92]	; (80d10 <TC0_Handler+0x148>)
   80cb4:	4b19      	ldr	r3, [pc, #100]	; (80d1c <TC0_Handler+0x154>)
   80cb6:	681b      	ldr	r3, [r3, #0]
   80cb8:	491c      	ldr	r1, [pc, #112]	; (80d2c <TC0_Handler+0x164>)
   80cba:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80cbe:	6393      	str	r3, [r2, #56]	; 0x38
			PIOC->PIO_ODSR = array_bicar[count].AB;
   80cc0:	4a15      	ldr	r2, [pc, #84]	; (80d18 <TC0_Handler+0x150>)
   80cc2:	4b16      	ldr	r3, [pc, #88]	; (80d1c <TC0_Handler+0x154>)
   80cc4:	681b      	ldr	r3, [r3, #0]
   80cc6:	4919      	ldr	r1, [pc, #100]	; (80d2c <TC0_Handler+0x164>)
   80cc8:	00db      	lsls	r3, r3, #3
   80cca:	440b      	add	r3, r1
   80ccc:	685b      	ldr	r3, [r3, #4]
   80cce:	6393      	str	r3, [r2, #56]	; 0x38
		}
		if (count >=64)
   80cd0:	4b12      	ldr	r3, [pc, #72]	; (80d1c <TC0_Handler+0x154>)
   80cd2:	681b      	ldr	r3, [r3, #0]
   80cd4:	2b3f      	cmp	r3, #63	; 0x3f
   80cd6:	d911      	bls.n	80cfc <TC0_Handler+0x134>
		{
			count = 0;
   80cd8:	4b10      	ldr	r3, [pc, #64]	; (80d1c <TC0_Handler+0x154>)
   80cda:	2200      	movs	r2, #0
   80cdc:	601a      	str	r2, [r3, #0]
			PIOD->PIO_ODSR = array_bicar[count].dir;
   80cde:	4a0c      	ldr	r2, [pc, #48]	; (80d10 <TC0_Handler+0x148>)
   80ce0:	4b0e      	ldr	r3, [pc, #56]	; (80d1c <TC0_Handler+0x154>)
   80ce2:	681b      	ldr	r3, [r3, #0]
   80ce4:	4911      	ldr	r1, [pc, #68]	; (80d2c <TC0_Handler+0x164>)
   80ce6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80cea:	6393      	str	r3, [r2, #56]	; 0x38
			PIOC->PIO_ODSR = array_bicar[count].AB;
   80cec:	4a0a      	ldr	r2, [pc, #40]	; (80d18 <TC0_Handler+0x150>)
   80cee:	4b0b      	ldr	r3, [pc, #44]	; (80d1c <TC0_Handler+0x154>)
   80cf0:	681b      	ldr	r3, [r3, #0]
   80cf2:	490e      	ldr	r1, [pc, #56]	; (80d2c <TC0_Handler+0x164>)
   80cf4:	00db      	lsls	r3, r3, #3
   80cf6:	440b      	add	r3, r1
   80cf8:	685b      	ldr	r3, [r3, #4]
   80cfa:	6393      	str	r3, [r2, #56]	; 0x38
		}
	
	
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80cfc:	480c      	ldr	r0, [pc, #48]	; (80d30 <TC0_Handler+0x168>)
   80cfe:	2100      	movs	r1, #0
   80d00:	4b0c      	ldr	r3, [pc, #48]	; (80d34 <TC0_Handler+0x16c>)
   80d02:	4798      	blx	r3
	{
		;
	}
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80d04:	4b01      	ldr	r3, [pc, #4]	; (80d0c <TC0_Handler+0x144>)
   80d06:	2210      	movs	r2, #16
   80d08:	625a      	str	r2, [r3, #36]	; 0x24
}
   80d0a:	bd80      	pop	{r7, pc}
   80d0c:	40084000 	.word	0x40084000
   80d10:	400e1400 	.word	0x400e1400
   80d14:	50494f00 	.word	0x50494f00
   80d18:	400e1200 	.word	0x400e1200
   80d1c:	20070cd4 	.word	0x20070cd4
   80d20:	20070ca8 	.word	0x20070ca8
   80d24:	20070cb0 	.word	0x20070cb0
   80d28:	20070000 	.word	0x20070000
   80d2c:	20070200 	.word	0x20070200
   80d30:	40080000 	.word	0x40080000
   80d34:	00081765 	.word	0x00081765

00080d38 <TC1_Handler>:
// 	}
// 	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
// }

void TC1_Handler()
{	
   80d38:	b580      	push	{r7, lr}
   80d3a:	af00      	add	r7, sp, #0
	TC1->TC_CHANNEL[0].TC_IDR = TC_IER_CPCS;
   80d3c:	4b2e      	ldr	r3, [pc, #184]	; (80df8 <TC1_Handler+0xc0>)
   80d3e:	2210      	movs	r2, #16
   80d40:	629a      	str	r2, [r3, #40]	; 0x28
	PIOD->PIO_WPMR	= 0x50494F00;
   80d42:	4b2e      	ldr	r3, [pc, #184]	; (80dfc <TC1_Handler+0xc4>)
   80d44:	4a2e      	ldr	r2, [pc, #184]	; (80e00 <TC1_Handler+0xc8>)
   80d46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80d4a:	4b2e      	ldr	r3, [pc, #184]	; (80e04 <TC1_Handler+0xcc>)
   80d4c:	4a2c      	ldr	r2, [pc, #176]	; (80e00 <TC1_Handler+0xc8>)
   80d4e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80d52:	4b2a      	ldr	r3, [pc, #168]	; (80dfc <TC1_Handler+0xc4>)
   80d54:	220c      	movs	r2, #12
   80d56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80d5a:	4b28      	ldr	r3, [pc, #160]	; (80dfc <TC1_Handler+0xc4>)
   80d5c:	2203      	movs	r2, #3
   80d5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80d62:	4b28      	ldr	r3, [pc, #160]	; (80e04 <TC1_Handler+0xcc>)
   80d64:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80d68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80d6c:	4b25      	ldr	r3, [pc, #148]	; (80e04 <TC1_Handler+0xcc>)
   80d6e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80d72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80d76:	4b24      	ldr	r3, [pc, #144]	; (80e08 <TC1_Handler+0xd0>)
   80d78:	681b      	ldr	r3, [r3, #0]
   80d7a:	3301      	adds	r3, #1
   80d7c:	4a22      	ldr	r2, [pc, #136]	; (80e08 <TC1_Handler+0xd0>)
   80d7e:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80d80:	4b22      	ldr	r3, [pc, #136]	; (80e0c <TC1_Handler+0xd4>)
   80d82:	681b      	ldr	r3, [r3, #0]
   80d84:	3301      	adds	r3, #1
   80d86:	4a21      	ldr	r2, [pc, #132]	; (80e0c <TC1_Handler+0xd4>)
   80d88:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80d8a:	4b21      	ldr	r3, [pc, #132]	; (80e10 <TC1_Handler+0xd8>)
   80d8c:	681b      	ldr	r3, [r3, #0]
   80d8e:	3301      	adds	r3, #1
   80d90:	4a1f      	ldr	r2, [pc, #124]	; (80e10 <TC1_Handler+0xd8>)
   80d92:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80d94:	4b1c      	ldr	r3, [pc, #112]	; (80e08 <TC1_Handler+0xd0>)
   80d96:	681b      	ldr	r3, [r3, #0]
   80d98:	2b3f      	cmp	r3, #63	; 0x3f
   80d9a:	d80e      	bhi.n	80dba <TC1_Handler+0x82>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80d9c:	4a17      	ldr	r2, [pc, #92]	; (80dfc <TC1_Handler+0xc4>)
   80d9e:	4b1a      	ldr	r3, [pc, #104]	; (80e08 <TC1_Handler+0xd0>)
   80da0:	681b      	ldr	r3, [r3, #0]
   80da2:	491c      	ldr	r1, [pc, #112]	; (80e14 <TC1_Handler+0xdc>)
   80da4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80da8:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80daa:	4a16      	ldr	r2, [pc, #88]	; (80e04 <TC1_Handler+0xcc>)
   80dac:	4b16      	ldr	r3, [pc, #88]	; (80e08 <TC1_Handler+0xd0>)
   80dae:	681b      	ldr	r3, [r3, #0]
   80db0:	4918      	ldr	r1, [pc, #96]	; (80e14 <TC1_Handler+0xdc>)
   80db2:	00db      	lsls	r3, r3, #3
   80db4:	440b      	add	r3, r1
   80db6:	685b      	ldr	r3, [r3, #4]
   80db8:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80dba:	4b13      	ldr	r3, [pc, #76]	; (80e08 <TC1_Handler+0xd0>)
   80dbc:	681b      	ldr	r3, [r3, #0]
   80dbe:	2b3f      	cmp	r3, #63	; 0x3f
   80dc0:	d911      	bls.n	80de6 <TC1_Handler+0xae>
	{
		count1 = 0;
   80dc2:	4b11      	ldr	r3, [pc, #68]	; (80e08 <TC1_Handler+0xd0>)
   80dc4:	2200      	movs	r2, #0
   80dc6:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80dc8:	4a0c      	ldr	r2, [pc, #48]	; (80dfc <TC1_Handler+0xc4>)
   80dca:	4b0f      	ldr	r3, [pc, #60]	; (80e08 <TC1_Handler+0xd0>)
   80dcc:	681b      	ldr	r3, [r3, #0]
   80dce:	4911      	ldr	r1, [pc, #68]	; (80e14 <TC1_Handler+0xdc>)
   80dd0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80dd4:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80dd6:	4a0b      	ldr	r2, [pc, #44]	; (80e04 <TC1_Handler+0xcc>)
   80dd8:	4b0b      	ldr	r3, [pc, #44]	; (80e08 <TC1_Handler+0xd0>)
   80dda:	681b      	ldr	r3, [r3, #0]
   80ddc:	490d      	ldr	r1, [pc, #52]	; (80e14 <TC1_Handler+0xdc>)
   80dde:	00db      	lsls	r3, r3, #3
   80de0:	440b      	add	r3, r1
   80de2:	685b      	ldr	r3, [r3, #4]
   80de4:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80de6:	480c      	ldr	r0, [pc, #48]	; (80e18 <TC1_Handler+0xe0>)
   80de8:	2101      	movs	r1, #1
   80dea:	4b0c      	ldr	r3, [pc, #48]	; (80e1c <TC1_Handler+0xe4>)
   80dec:	4798      	blx	r3
	{
		
		
	}
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80dee:	4b02      	ldr	r3, [pc, #8]	; (80df8 <TC1_Handler+0xc0>)
   80df0:	2210      	movs	r2, #16
   80df2:	625a      	str	r2, [r3, #36]	; 0x24
}
   80df4:	bd80      	pop	{r7, pc}
   80df6:	bf00      	nop
   80df8:	40084000 	.word	0x40084000
   80dfc:	400e1400 	.word	0x400e1400
   80e00:	50494f00 	.word	0x50494f00
   80e04:	400e1200 	.word	0x400e1200
   80e08:	20070cd8 	.word	0x20070cd8
   80e0c:	20070cac 	.word	0x20070cac
   80e10:	20070cb4 	.word	0x20070cb4
   80e14:	20070200 	.word	0x20070200
   80e18:	40080000 	.word	0x40080000
   80e1c:	00081765 	.word	0x00081765

00080e20 <TC2_Handler>:
void TC2_Handler()
{
   80e20:	b580      	push	{r7, lr}
   80e22:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80e24:	4805      	ldr	r0, [pc, #20]	; (80e3c <TC2_Handler+0x1c>)
   80e26:	2100      	movs	r1, #0
   80e28:	4b05      	ldr	r3, [pc, #20]	; (80e40 <TC2_Handler+0x20>)
   80e2a:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80e2c:	4b05      	ldr	r3, [pc, #20]	; (80e44 <TC2_Handler+0x24>)
   80e2e:	2200      	movs	r2, #0
   80e30:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80e32:	4802      	ldr	r0, [pc, #8]	; (80e3c <TC2_Handler+0x1c>)
   80e34:	2102      	movs	r1, #2
   80e36:	4b04      	ldr	r3, [pc, #16]	; (80e48 <TC2_Handler+0x28>)
   80e38:	4798      	blx	r3
	{
		
	}
}
   80e3a:	bd80      	pop	{r7, pc}
   80e3c:	40080000 	.word	0x40080000
   80e40:	000816f9 	.word	0x000816f9
   80e44:	20070ca4 	.word	0x20070ca4
   80e48:	00081765 	.word	0x00081765

00080e4c <TC3_Handler>:
void TC3_Handler()
{
   80e4c:	b580      	push	{r7, lr}
   80e4e:	af00      	add	r7, sp, #0
	OneSecFlag = 1;
   80e50:	4b05      	ldr	r3, [pc, #20]	; (80e68 <TC3_Handler+0x1c>)
   80e52:	2201      	movs	r2, #1
   80e54:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80e56:	4805      	ldr	r0, [pc, #20]	; (80e6c <TC3_Handler+0x20>)
   80e58:	2100      	movs	r1, #0
   80e5a:	4b05      	ldr	r3, [pc, #20]	; (80e70 <TC3_Handler+0x24>)
   80e5c:	4798      	blx	r3
	{
		
	}
	tc_stop(TC1,0);
   80e5e:	4803      	ldr	r0, [pc, #12]	; (80e6c <TC3_Handler+0x20>)
   80e60:	2100      	movs	r1, #0
   80e62:	4b04      	ldr	r3, [pc, #16]	; (80e74 <TC3_Handler+0x28>)
   80e64:	4798      	blx	r3
}
   80e66:	bd80      	pop	{r7, pc}
   80e68:	20070cb8 	.word	0x20070cb8
   80e6c:	40084000 	.word	0x40084000
   80e70:	00081765 	.word	0x00081765
   80e74:	000816f9 	.word	0x000816f9

00080e78 <TC7_Handler>:

void TC7_Handler(){
   80e78:	b580      	push	{r7, lr}
   80e7a:	af00      	add	r7, sp, #0
	
	OneSecFlag = 1;
   80e7c:	4b05      	ldr	r3, [pc, #20]	; (80e94 <TC7_Handler+0x1c>)
   80e7e:	2201      	movs	r2, #1
   80e80:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC2, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80e82:	4805      	ldr	r0, [pc, #20]	; (80e98 <TC7_Handler+0x20>)
   80e84:	2101      	movs	r1, #1
   80e86:	4b05      	ldr	r3, [pc, #20]	; (80e9c <TC7_Handler+0x24>)
   80e88:	4798      	blx	r3
	{
		
	}
	tc_stop(TC2,1);
   80e8a:	4803      	ldr	r0, [pc, #12]	; (80e98 <TC7_Handler+0x20>)
   80e8c:	2101      	movs	r1, #1
   80e8e:	4b04      	ldr	r3, [pc, #16]	; (80ea0 <TC7_Handler+0x28>)
   80e90:	4798      	blx	r3
	
}
   80e92:	bd80      	pop	{r7, pc}
   80e94:	20070cb8 	.word	0x20070cb8
   80e98:	40088000 	.word	0x40088000
   80e9c:	00081765 	.word	0x00081765
   80ea0:	000816f9 	.word	0x000816f9

00080ea4 <TC6_Handler>:

void TC6_Handler()
{
   80ea4:	b580      	push	{r7, lr}
   80ea6:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80ea8:	2021      	movs	r0, #33	; 0x21
   80eaa:	4b29      	ldr	r3, [pc, #164]	; (80f50 <TC6_Handler+0xac>)
   80eac:	4798      	blx	r3
	tick++;
   80eae:	4b29      	ldr	r3, [pc, #164]	; (80f54 <TC6_Handler+0xb0>)
   80eb0:	681b      	ldr	r3, [r3, #0]
   80eb2:	3301      	adds	r3, #1
   80eb4:	4a27      	ldr	r2, [pc, #156]	; (80f54 <TC6_Handler+0xb0>)
   80eb6:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80eb8:	4b26      	ldr	r3, [pc, #152]	; (80f54 <TC6_Handler+0xb0>)
   80eba:	681b      	ldr	r3, [r3, #0]
   80ebc:	2b0a      	cmp	r3, #10
   80ebe:	d10a      	bne.n	80ed6 <TC6_Handler+0x32>
	{
		tick_10++;
   80ec0:	4b25      	ldr	r3, [pc, #148]	; (80f58 <TC6_Handler+0xb4>)
   80ec2:	681b      	ldr	r3, [r3, #0]
   80ec4:	3301      	adds	r3, #1
   80ec6:	4a24      	ldr	r2, [pc, #144]	; (80f58 <TC6_Handler+0xb4>)
   80ec8:	6013      	str	r3, [r2, #0]
		tick = 0;
   80eca:	4b22      	ldr	r3, [pc, #136]	; (80f54 <TC6_Handler+0xb0>)
   80ecc:	2200      	movs	r2, #0
   80ece:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80ed0:	4b22      	ldr	r3, [pc, #136]	; (80f5c <TC6_Handler+0xb8>)
   80ed2:	2200      	movs	r2, #0
   80ed4:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80ed6:	4b20      	ldr	r3, [pc, #128]	; (80f58 <TC6_Handler+0xb4>)
   80ed8:	681b      	ldr	r3, [r3, #0]
   80eda:	2b05      	cmp	r3, #5
   80edc:	d10a      	bne.n	80ef4 <TC6_Handler+0x50>
	{
		tick_50++;
   80ede:	4b20      	ldr	r3, [pc, #128]	; (80f60 <TC6_Handler+0xbc>)
   80ee0:	681b      	ldr	r3, [r3, #0]
   80ee2:	3301      	adds	r3, #1
   80ee4:	4a1e      	ldr	r2, [pc, #120]	; (80f60 <TC6_Handler+0xbc>)
   80ee6:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80ee8:	4b1b      	ldr	r3, [pc, #108]	; (80f58 <TC6_Handler+0xb4>)
   80eea:	2200      	movs	r2, #0
   80eec:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80eee:	4b1b      	ldr	r3, [pc, #108]	; (80f5c <TC6_Handler+0xb8>)
   80ef0:	2201      	movs	r2, #1
   80ef2:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80ef4:	4b1a      	ldr	r3, [pc, #104]	; (80f60 <TC6_Handler+0xbc>)
   80ef6:	681b      	ldr	r3, [r3, #0]
   80ef8:	2b02      	cmp	r3, #2
   80efa:	d10a      	bne.n	80f12 <TC6_Handler+0x6e>
	{
		tick_100++;
   80efc:	4b19      	ldr	r3, [pc, #100]	; (80f64 <TC6_Handler+0xc0>)
   80efe:	681b      	ldr	r3, [r3, #0]
   80f00:	3301      	adds	r3, #1
   80f02:	4a18      	ldr	r2, [pc, #96]	; (80f64 <TC6_Handler+0xc0>)
   80f04:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80f06:	4b16      	ldr	r3, [pc, #88]	; (80f60 <TC6_Handler+0xbc>)
   80f08:	2200      	movs	r2, #0
   80f0a:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80f0c:	4b13      	ldr	r3, [pc, #76]	; (80f5c <TC6_Handler+0xb8>)
   80f0e:	2202      	movs	r2, #2
   80f10:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80f12:	4b14      	ldr	r3, [pc, #80]	; (80f64 <TC6_Handler+0xc0>)
   80f14:	681b      	ldr	r3, [r3, #0]
   80f16:	2b05      	cmp	r3, #5
   80f18:	d10a      	bne.n	80f30 <TC6_Handler+0x8c>
	{
		tick_500++;
   80f1a:	4b13      	ldr	r3, [pc, #76]	; (80f68 <TC6_Handler+0xc4>)
   80f1c:	681b      	ldr	r3, [r3, #0]
   80f1e:	3301      	adds	r3, #1
   80f20:	4a11      	ldr	r2, [pc, #68]	; (80f68 <TC6_Handler+0xc4>)
   80f22:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80f24:	4b0f      	ldr	r3, [pc, #60]	; (80f64 <TC6_Handler+0xc0>)
   80f26:	2200      	movs	r2, #0
   80f28:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80f2a:	4b0c      	ldr	r3, [pc, #48]	; (80f5c <TC6_Handler+0xb8>)
   80f2c:	2203      	movs	r2, #3
   80f2e:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80f30:	4b0d      	ldr	r3, [pc, #52]	; (80f68 <TC6_Handler+0xc4>)
   80f32:	681b      	ldr	r3, [r3, #0]
   80f34:	2b02      	cmp	r3, #2
   80f36:	d105      	bne.n	80f44 <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80f38:	4b0b      	ldr	r3, [pc, #44]	; (80f68 <TC6_Handler+0xc4>)
   80f3a:	2200      	movs	r2, #0
   80f3c:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80f3e:	4b07      	ldr	r3, [pc, #28]	; (80f5c <TC6_Handler+0xb8>)
   80f40:	2204      	movs	r2, #4
   80f42:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80f44:	4809      	ldr	r0, [pc, #36]	; (80f6c <TC6_Handler+0xc8>)
   80f46:	2100      	movs	r1, #0
   80f48:	4b09      	ldr	r3, [pc, #36]	; (80f70 <TC6_Handler+0xcc>)
   80f4a:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80f4c:	bd80      	pop	{r7, pc}
   80f4e:	bf00      	nop
   80f50:	00080b95 	.word	0x00080b95
   80f54:	20070cbc 	.word	0x20070cbc
   80f58:	20070cc0 	.word	0x20070cc0
   80f5c:	200711f8 	.word	0x200711f8
   80f60:	20070cc4 	.word	0x20070cc4
   80f64:	20070cc8 	.word	0x20070cc8
   80f68:	20070ccc 	.word	0x20070ccc
   80f6c:	40088000 	.word	0x40088000
   80f70:	00081765 	.word	0x00081765

00080f74 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80f74:	b480      	push	{r7}
   80f76:	b083      	sub	sp, #12
   80f78:	af00      	add	r7, sp, #0
   80f7a:	4603      	mov	r3, r0
   80f7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80f7e:	4908      	ldr	r1, [pc, #32]	; (80fa0 <NVIC_EnableIRQ+0x2c>)
   80f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80f84:	095b      	lsrs	r3, r3, #5
   80f86:	79fa      	ldrb	r2, [r7, #7]
   80f88:	f002 021f 	and.w	r2, r2, #31
   80f8c:	2001      	movs	r0, #1
   80f8e:	fa00 f202 	lsl.w	r2, r0, r2
   80f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80f96:	370c      	adds	r7, #12
   80f98:	46bd      	mov	sp, r7
   80f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f9e:	4770      	bx	lr
   80fa0:	e000e100 	.word	0xe000e100

00080fa4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80fa4:	b480      	push	{r7}
   80fa6:	b083      	sub	sp, #12
   80fa8:	af00      	add	r7, sp, #0
   80faa:	4603      	mov	r3, r0
   80fac:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80fae:	4909      	ldr	r1, [pc, #36]	; (80fd4 <NVIC_DisableIRQ+0x30>)
   80fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80fb4:	095b      	lsrs	r3, r3, #5
   80fb6:	79fa      	ldrb	r2, [r7, #7]
   80fb8:	f002 021f 	and.w	r2, r2, #31
   80fbc:	2001      	movs	r0, #1
   80fbe:	fa00 f202 	lsl.w	r2, r0, r2
   80fc2:	3320      	adds	r3, #32
   80fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80fc8:	370c      	adds	r7, #12
   80fca:	46bd      	mov	sp, r7
   80fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80fd0:	4770      	bx	lr
   80fd2:	bf00      	nop
   80fd4:	e000e100 	.word	0xe000e100

00080fd8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80fd8:	b480      	push	{r7}
   80fda:	b083      	sub	sp, #12
   80fdc:	af00      	add	r7, sp, #0
   80fde:	4603      	mov	r3, r0
   80fe0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80fe2:	4909      	ldr	r1, [pc, #36]	; (81008 <NVIC_ClearPendingIRQ+0x30>)
   80fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80fe8:	095b      	lsrs	r3, r3, #5
   80fea:	79fa      	ldrb	r2, [r7, #7]
   80fec:	f002 021f 	and.w	r2, r2, #31
   80ff0:	2001      	movs	r0, #1
   80ff2:	fa00 f202 	lsl.w	r2, r0, r2
   80ff6:	3360      	adds	r3, #96	; 0x60
   80ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80ffc:	370c      	adds	r7, #12
   80ffe:	46bd      	mov	sp, r7
   81000:	f85d 7b04 	ldr.w	r7, [sp], #4
   81004:	4770      	bx	lr
   81006:	bf00      	nop
   81008:	e000e100 	.word	0xe000e100

0008100c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8100c:	b480      	push	{r7}
   8100e:	b083      	sub	sp, #12
   81010:	af00      	add	r7, sp, #0
   81012:	4603      	mov	r3, r0
   81014:	6039      	str	r1, [r7, #0]
   81016:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81018:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8101c:	2b00      	cmp	r3, #0
   8101e:	da0b      	bge.n	81038 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81020:	490d      	ldr	r1, [pc, #52]	; (81058 <NVIC_SetPriority+0x4c>)
   81022:	79fb      	ldrb	r3, [r7, #7]
   81024:	f003 030f 	and.w	r3, r3, #15
   81028:	3b04      	subs	r3, #4
   8102a:	683a      	ldr	r2, [r7, #0]
   8102c:	b2d2      	uxtb	r2, r2
   8102e:	0112      	lsls	r2, r2, #4
   81030:	b2d2      	uxtb	r2, r2
   81032:	440b      	add	r3, r1
   81034:	761a      	strb	r2, [r3, #24]
   81036:	e009      	b.n	8104c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81038:	4908      	ldr	r1, [pc, #32]	; (8105c <NVIC_SetPriority+0x50>)
   8103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8103e:	683a      	ldr	r2, [r7, #0]
   81040:	b2d2      	uxtb	r2, r2
   81042:	0112      	lsls	r2, r2, #4
   81044:	b2d2      	uxtb	r2, r2
   81046:	440b      	add	r3, r1
   81048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8104c:	370c      	adds	r7, #12
   8104e:	46bd      	mov	sp, r7
   81050:	f85d 7b04 	ldr.w	r7, [sp], #4
   81054:	4770      	bx	lr
   81056:	bf00      	nop
   81058:	e000ed00 	.word	0xe000ed00
   8105c:	e000e100 	.word	0xe000e100

00081060 <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   81060:	b580      	push	{r7, lr}
   81062:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   81064:	2016      	movs	r0, #22
   81066:	4b31      	ldr	r3, [pc, #196]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   81068:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   8106a:	2016      	movs	r0, #22
   8106c:	4b30      	ldr	r3, [pc, #192]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   8106e:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   81070:	2016      	movs	r0, #22
   81072:	2100      	movs	r1, #0
   81074:	4b2f      	ldr	r3, [pc, #188]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   81076:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   81078:	2016      	movs	r0, #22
   8107a:	4b2f      	ldr	r3, [pc, #188]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   8107c:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   8107e:	2008      	movs	r0, #8
   81080:	4b2a      	ldr	r3, [pc, #168]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   81082:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   81084:	2008      	movs	r0, #8
   81086:	4b2a      	ldr	r3, [pc, #168]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   81088:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   8108a:	2008      	movs	r0, #8
   8108c:	2100      	movs	r1, #0
   8108e:	4b29      	ldr	r3, [pc, #164]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   81090:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   81092:	2008      	movs	r0, #8
   81094:	4b28      	ldr	r3, [pc, #160]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   81096:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81098:	4828      	ldr	r0, [pc, #160]	; (8113c <CPU3_D_INIT_INT+0xdc>)
   8109a:	2101      	movs	r1, #1
   8109c:	4b28      	ldr	r3, [pc, #160]	; (81140 <CPU3_D_INIT_INT+0xe0>)
   8109e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   810a0:	201b      	movs	r0, #27
   810a2:	4b22      	ldr	r3, [pc, #136]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   810a4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   810a6:	201b      	movs	r0, #27
   810a8:	4b21      	ldr	r3, [pc, #132]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   810aa:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   810ac:	201b      	movs	r0, #27
   810ae:	2100      	movs	r1, #0
   810b0:	4b20      	ldr	r3, [pc, #128]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   810b2:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   810b4:	201b      	movs	r0, #27
   810b6:	4b20      	ldr	r3, [pc, #128]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   810b8:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   810ba:	201c      	movs	r0, #28
   810bc:	4b1b      	ldr	r3, [pc, #108]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   810be:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   810c0:	201c      	movs	r0, #28
   810c2:	4b1b      	ldr	r3, [pc, #108]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   810c4:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   810c6:	201c      	movs	r0, #28
   810c8:	2100      	movs	r1, #0
   810ca:	4b1a      	ldr	r3, [pc, #104]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   810cc:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   810ce:	201c      	movs	r0, #28
   810d0:	4b19      	ldr	r3, [pc, #100]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   810d2:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   810d4:	201d      	movs	r0, #29
   810d6:	4b15      	ldr	r3, [pc, #84]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   810d8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   810da:	201d      	movs	r0, #29
   810dc:	4b14      	ldr	r3, [pc, #80]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   810de:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   810e0:	201d      	movs	r0, #29
   810e2:	2100      	movs	r1, #0
   810e4:	4b13      	ldr	r3, [pc, #76]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   810e6:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   810e8:	201d      	movs	r0, #29
   810ea:	4b13      	ldr	r3, [pc, #76]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   810ec:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   810ee:	201e      	movs	r0, #30
   810f0:	4b0e      	ldr	r3, [pc, #56]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   810f2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   810f4:	201e      	movs	r0, #30
   810f6:	4b0e      	ldr	r3, [pc, #56]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   810f8:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   810fa:	201e      	movs	r0, #30
   810fc:	2100      	movs	r1, #0
   810fe:	4b0d      	ldr	r3, [pc, #52]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   81100:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   81102:	201e      	movs	r0, #30
   81104:	4b0c      	ldr	r3, [pc, #48]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   81106:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   81108:	2021      	movs	r0, #33	; 0x21
   8110a:	4b08      	ldr	r3, [pc, #32]	; (8112c <CPU3_D_INIT_INT+0xcc>)
   8110c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   8110e:	2021      	movs	r0, #33	; 0x21
   81110:	4b07      	ldr	r3, [pc, #28]	; (81130 <CPU3_D_INIT_INT+0xd0>)
   81112:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   81114:	2021      	movs	r0, #33	; 0x21
   81116:	2100      	movs	r1, #0
   81118:	4b06      	ldr	r3, [pc, #24]	; (81134 <CPU3_D_INIT_INT+0xd4>)
   8111a:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   8111c:	2021      	movs	r0, #33	; 0x21
   8111e:	4b06      	ldr	r3, [pc, #24]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   81120:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   81122:	202b      	movs	r0, #43	; 0x2b
   81124:	4b04      	ldr	r3, [pc, #16]	; (81138 <CPU3_D_INIT_INT+0xd8>)
   81126:	4798      	blx	r3
	
	
   81128:	bd80      	pop	{r7, pc}
   8112a:	bf00      	nop
   8112c:	00080fa5 	.word	0x00080fa5
   81130:	00080fd9 	.word	0x00080fd9
   81134:	0008100d 	.word	0x0008100d
   81138:	00080f75 	.word	0x00080f75
   8113c:	400e0800 	.word	0x400e0800
   81140:	00081835 	.word	0x00081835

00081144 <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   81144:	b480      	push	{r7}
   81146:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   81148:	4b14      	ldr	r3, [pc, #80]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   8114a:	4a15      	ldr	r2, [pc, #84]	; (811a0 <CPU3_D_INIT_PWM+0x5c>)
   8114c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81150:	4b12      	ldr	r3, [pc, #72]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   81152:	4a14      	ldr	r2, [pc, #80]	; (811a4 <CPU3_D_INIT_PWM+0x60>)
   81154:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81158:	4b10      	ldr	r3, [pc, #64]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   8115a:	4a12      	ldr	r2, [pc, #72]	; (811a4 <CPU3_D_INIT_PWM+0x60>)
   8115c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   81160:	4b0e      	ldr	r3, [pc, #56]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   81162:	22ff      	movs	r2, #255	; 0xff
   81164:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   81166:	4b0d      	ldr	r3, [pc, #52]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   81168:	f640 2241 	movw	r2, #2625	; 0xa41
   8116c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   81170:	4b0a      	ldr	r3, [pc, #40]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   81172:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   81176:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   8117a:	4b08      	ldr	r3, [pc, #32]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   8117c:	f640 2241 	movw	r2, #2625	; 0xa41
   81180:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   81184:	4b05      	ldr	r3, [pc, #20]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   81186:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8118a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   8118e:	4b03      	ldr	r3, [pc, #12]	; (8119c <CPU3_D_INIT_PWM+0x58>)
   81190:	22ff      	movs	r2, #255	; 0xff
   81192:	605a      	str	r2, [r3, #4]
}
   81194:	46bd      	mov	sp, r7
   81196:	f85d 7b04 	ldr.w	r7, [sp], #4
   8119a:	4770      	bx	lr
   8119c:	40094000 	.word	0x40094000
   811a0:	50574d00 	.word	0x50574d00
   811a4:	00070605 	.word	0x00070605

000811a8 <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   811a8:	b580      	push	{r7, lr}
   811aa:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   811ac:	4b21      	ldr	r3, [pc, #132]	; (81234 <CPU3_D_INIT_TIMER+0x8c>)
   811ae:	4a22      	ldr	r2, [pc, #136]	; (81238 <CPU3_D_INIT_TIMER+0x90>)
   811b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   811b4:	4b21      	ldr	r3, [pc, #132]	; (8123c <CPU3_D_INIT_TIMER+0x94>)
   811b6:	4a20      	ldr	r2, [pc, #128]	; (81238 <CPU3_D_INIT_TIMER+0x90>)
   811b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   811bc:	4b20      	ldr	r3, [pc, #128]	; (81240 <CPU3_D_INIT_TIMER+0x98>)
   811be:	4a1e      	ldr	r2, [pc, #120]	; (81238 <CPU3_D_INIT_TIMER+0x90>)
   811c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   811c4:	201b      	movs	r0, #27
   811c6:	4b1f      	ldr	r3, [pc, #124]	; (81244 <CPU3_D_INIT_TIMER+0x9c>)
   811c8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   811ca:	201c      	movs	r0, #28
   811cc:	4b1d      	ldr	r3, [pc, #116]	; (81244 <CPU3_D_INIT_TIMER+0x9c>)
   811ce:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   811d0:	201e      	movs	r0, #30
   811d2:	4b1c      	ldr	r3, [pc, #112]	; (81244 <CPU3_D_INIT_TIMER+0x9c>)
   811d4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC7);
   811d6:	2022      	movs	r0, #34	; 0x22
   811d8:	4b1a      	ldr	r3, [pc, #104]	; (81244 <CPU3_D_INIT_TIMER+0x9c>)
   811da:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   811dc:	2021      	movs	r0, #33	; 0x21
   811de:	4b19      	ldr	r3, [pc, #100]	; (81244 <CPU3_D_INIT_TIMER+0x9c>)
   811e0:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811e2:	4b14      	ldr	r3, [pc, #80]	; (81234 <CPU3_D_INIT_TIMER+0x8c>)
   811e4:	f24c 0203 	movw	r2, #49155	; 0xc003
   811e8:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811ea:	4b12      	ldr	r3, [pc, #72]	; (81234 <CPU3_D_INIT_TIMER+0x8c>)
   811ec:	f24c 0203 	movw	r2, #49155	; 0xc003
   811f0:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811f2:	4b12      	ldr	r3, [pc, #72]	; (8123c <CPU3_D_INIT_TIMER+0x94>)
   811f4:	f24c 0203 	movw	r2, #49155	; 0xc003
   811f8:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811fa:	4b10      	ldr	r3, [pc, #64]	; (8123c <CPU3_D_INIT_TIMER+0x94>)
   811fc:	f24c 0203 	movw	r2, #49155	; 0xc003
   81200:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81202:	4b0f      	ldr	r3, [pc, #60]	; (81240 <CPU3_D_INIT_TIMER+0x98>)
   81204:	f24c 0203 	movw	r2, #49155	; 0xc003
   81208:	605a      	str	r2, [r3, #4]
	TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8120a:	4b0d      	ldr	r3, [pc, #52]	; (81240 <CPU3_D_INIT_TIMER+0x98>)
   8120c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81210:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81212:	4b08      	ldr	r3, [pc, #32]	; (81234 <CPU3_D_INIT_TIMER+0x8c>)
   81214:	2210      	movs	r2, #16
   81216:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81218:	4b06      	ldr	r3, [pc, #24]	; (81234 <CPU3_D_INIT_TIMER+0x8c>)
   8121a:	2210      	movs	r2, #16
   8121c:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   8121e:	4b07      	ldr	r3, [pc, #28]	; (8123c <CPU3_D_INIT_TIMER+0x94>)
   81220:	2210      	movs	r2, #16
   81222:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81224:	4b05      	ldr	r3, [pc, #20]	; (8123c <CPU3_D_INIT_TIMER+0x94>)
   81226:	2210      	movs	r2, #16
   81228:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   8122a:	4b05      	ldr	r3, [pc, #20]	; (81240 <CPU3_D_INIT_TIMER+0x98>)
   8122c:	2210      	movs	r2, #16
   8122e:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
}
   81230:	bd80      	pop	{r7, pc}
   81232:	bf00      	nop
   81234:	40080000 	.word	0x40080000
   81238:	54494d00 	.word	0x54494d00
   8123c:	40084000 	.word	0x40084000
   81240:	40088000 	.word	0x40088000
   81244:	000835c5 	.word	0x000835c5

00081248 <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81248:	b580      	push	{r7, lr}
   8124a:	b084      	sub	sp, #16
   8124c:	af00      	add	r7, sp, #0
   8124e:	60f8      	str	r0, [r7, #12]
   81250:	60b9      	str	r1, [r7, #8]
   81252:	603b      	str	r3, [r7, #0]
   81254:	4613      	mov	r3, r2
   81256:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81258:	2000      	movs	r0, #0
   8125a:	4b0d      	ldr	r3, [pc, #52]	; (81290 <CPU3_D_MAIN_TIMER+0x48>)
   8125c:	4798      	blx	r3
	channel=0;
   8125e:	2300      	movs	r3, #0
   81260:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81262:	4b0c      	ldr	r3, [pc, #48]	; (81294 <CPU3_D_MAIN_TIMER+0x4c>)
   81264:	f24c 0203 	movw	r2, #49155	; 0xc003
   81268:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   8126a:	68f8      	ldr	r0, [r7, #12]
   8126c:	68b9      	ldr	r1, [r7, #8]
   8126e:	683a      	ldr	r2, [r7, #0]
   81270:	4b09      	ldr	r3, [pc, #36]	; (81298 <CPU3_D_MAIN_TIMER+0x50>)
   81272:	4798      	blx	r3
	tc_start(tc, channel);
   81274:	68f8      	ldr	r0, [r7, #12]
   81276:	68b9      	ldr	r1, [r7, #8]
   81278:	4b08      	ldr	r3, [pc, #32]	; (8129c <CPU3_D_MAIN_TIMER+0x54>)
   8127a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   8127c:	68f8      	ldr	r0, [r7, #12]
   8127e:	68b9      	ldr	r1, [r7, #8]
   81280:	2210      	movs	r2, #16
   81282:	4b07      	ldr	r3, [pc, #28]	; (812a0 <CPU3_D_MAIN_TIMER+0x58>)
   81284:	4798      	blx	r3
}
   81286:	4618      	mov	r0, r3
   81288:	3710      	adds	r7, #16
   8128a:	46bd      	mov	sp, r7
   8128c:	bd80      	pop	{r7, pc}
   8128e:	bf00      	nop
   81290:	00083649 	.word	0x00083649
   81294:	40088000 	.word	0x40088000
   81298:	00081719 	.word	0x00081719
   8129c:	000816d9 	.word	0x000816d9
   812a0:	0008173d 	.word	0x0008173d

000812a4 <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   812a4:	b580      	push	{r7, lr}
   812a6:	b084      	sub	sp, #16
   812a8:	af00      	add	r7, sp, #0
   812aa:	60f8      	str	r0, [r7, #12]
   812ac:	60b9      	str	r1, [r7, #8]
   812ae:	603b      	str	r3, [r7, #0]
   812b0:	4613      	mov	r3, r2
   812b2:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   812b4:	2000      	movs	r0, #0
   812b6:	4b10      	ldr	r3, [pc, #64]	; (812f8 <acid_startTimer1+0x54>)
   812b8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   812ba:	201b      	movs	r0, #27
   812bc:	4b0f      	ldr	r3, [pc, #60]	; (812fc <acid_startTimer1+0x58>)
   812be:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   812c0:	68f8      	ldr	r0, [r7, #12]
   812c2:	68b9      	ldr	r1, [r7, #8]
   812c4:	f24c 0202 	movw	r2, #49154	; 0xc002
   812c8:	4b0d      	ldr	r3, [pc, #52]	; (81300 <acid_startTimer1+0x5c>)
   812ca:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   812cc:	4b0d      	ldr	r3, [pc, #52]	; (81304 <acid_startTimer1+0x60>)
   812ce:	f24c 0202 	movw	r2, #49154	; 0xc002
   812d2:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   812d4:	68f8      	ldr	r0, [r7, #12]
   812d6:	68b9      	ldr	r1, [r7, #8]
   812d8:	683a      	ldr	r2, [r7, #0]
   812da:	4b0b      	ldr	r3, [pc, #44]	; (81308 <acid_startTimer1+0x64>)
   812dc:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   812de:	4809      	ldr	r0, [pc, #36]	; (81304 <acid_startTimer1+0x60>)
   812e0:	2100      	movs	r1, #0
   812e2:	2210      	movs	r2, #16
   812e4:	4b09      	ldr	r3, [pc, #36]	; (8130c <acid_startTimer1+0x68>)
   812e6:	4798      	blx	r3
	tc_start(tc, channel);
   812e8:	68f8      	ldr	r0, [r7, #12]
   812ea:	68b9      	ldr	r1, [r7, #8]
   812ec:	4b08      	ldr	r3, [pc, #32]	; (81310 <acid_startTimer1+0x6c>)
   812ee:	4798      	blx	r3
}
   812f0:	3710      	adds	r7, #16
   812f2:	46bd      	mov	sp, r7
   812f4:	bd80      	pop	{r7, pc}
   812f6:	bf00      	nop
   812f8:	00083649 	.word	0x00083649
   812fc:	000835c5 	.word	0x000835c5
   81300:	000816a1 	.word	0x000816a1
   81304:	40080000 	.word	0x40080000
   81308:	00081719 	.word	0x00081719
   8130c:	0008173d 	.word	0x0008173d
   81310:	000816d9 	.word	0x000816d9

00081314 <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81314:	b580      	push	{r7, lr}
   81316:	b084      	sub	sp, #16
   81318:	af00      	add	r7, sp, #0
   8131a:	60f8      	str	r0, [r7, #12]
   8131c:	60b9      	str	r1, [r7, #8]
   8131e:	603b      	str	r3, [r7, #0]
   81320:	4613      	mov	r3, r2
   81322:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81324:	2000      	movs	r0, #0
   81326:	4b10      	ldr	r3, [pc, #64]	; (81368 <bicar_startTimer1+0x54>)
   81328:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   8132a:	201c      	movs	r0, #28
   8132c:	4b0f      	ldr	r3, [pc, #60]	; (8136c <bicar_startTimer1+0x58>)
   8132e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   81330:	68f8      	ldr	r0, [r7, #12]
   81332:	68b9      	ldr	r1, [r7, #8]
   81334:	f24c 0202 	movw	r2, #49154	; 0xc002
   81338:	4b0d      	ldr	r3, [pc, #52]	; (81370 <bicar_startTimer1+0x5c>)
   8133a:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   8133c:	4b0d      	ldr	r3, [pc, #52]	; (81374 <bicar_startTimer1+0x60>)
   8133e:	f24c 0202 	movw	r2, #49154	; 0xc002
   81342:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   81344:	68f8      	ldr	r0, [r7, #12]
   81346:	68b9      	ldr	r1, [r7, #8]
   81348:	683a      	ldr	r2, [r7, #0]
   8134a:	4b0b      	ldr	r3, [pc, #44]	; (81378 <bicar_startTimer1+0x64>)
   8134c:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   8134e:	4809      	ldr	r0, [pc, #36]	; (81374 <bicar_startTimer1+0x60>)
   81350:	2101      	movs	r1, #1
   81352:	2210      	movs	r2, #16
   81354:	4b09      	ldr	r3, [pc, #36]	; (8137c <bicar_startTimer1+0x68>)
   81356:	4798      	blx	r3
	tc_start(tc, channel);
   81358:	68f8      	ldr	r0, [r7, #12]
   8135a:	68b9      	ldr	r1, [r7, #8]
   8135c:	4b08      	ldr	r3, [pc, #32]	; (81380 <bicar_startTimer1+0x6c>)
   8135e:	4798      	blx	r3
}
   81360:	3710      	adds	r7, #16
   81362:	46bd      	mov	sp, r7
   81364:	bd80      	pop	{r7, pc}
   81366:	bf00      	nop
   81368:	00083649 	.word	0x00083649
   8136c:	000835c5 	.word	0x000835c5
   81370:	000816a1 	.word	0x000816a1
   81374:	40080000 	.word	0x40080000
   81378:	00081719 	.word	0x00081719
   8137c:	0008173d 	.word	0x0008173d
   81380:	000816d9 	.word	0x000816d9

00081384 <startTimer1>:
// 	tc_enable_interrupt(TC2,1,TC_IER_CPCS);
// 	tc_start(tc, channel);
// }

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81384:	b580      	push	{r7, lr}
   81386:	b084      	sub	sp, #16
   81388:	af00      	add	r7, sp, #0
   8138a:	60f8      	str	r0, [r7, #12]
   8138c:	60b9      	str	r1, [r7, #8]
   8138e:	603b      	str	r3, [r7, #0]
   81390:	4613      	mov	r3, r2
   81392:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81394:	2000      	movs	r0, #0
   81396:	4b10      	ldr	r3, [pc, #64]	; (813d8 <startTimer1+0x54>)
   81398:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   8139a:	201d      	movs	r0, #29
   8139c:	4b0f      	ldr	r3, [pc, #60]	; (813dc <startTimer1+0x58>)
   8139e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   813a0:	68f8      	ldr	r0, [r7, #12]
   813a2:	68b9      	ldr	r1, [r7, #8]
   813a4:	f24c 0203 	movw	r2, #49155	; 0xc003
   813a8:	4b0d      	ldr	r3, [pc, #52]	; (813e0 <startTimer1+0x5c>)
   813aa:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   813ac:	4b0d      	ldr	r3, [pc, #52]	; (813e4 <startTimer1+0x60>)
   813ae:	f24c 0203 	movw	r2, #49155	; 0xc003
   813b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   813b6:	68f8      	ldr	r0, [r7, #12]
   813b8:	68b9      	ldr	r1, [r7, #8]
   813ba:	683a      	ldr	r2, [r7, #0]
   813bc:	4b0a      	ldr	r3, [pc, #40]	; (813e8 <startTimer1+0x64>)
   813be:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   813c0:	4808      	ldr	r0, [pc, #32]	; (813e4 <startTimer1+0x60>)
   813c2:	2102      	movs	r1, #2
   813c4:	2210      	movs	r2, #16
   813c6:	4b09      	ldr	r3, [pc, #36]	; (813ec <startTimer1+0x68>)
   813c8:	4798      	blx	r3
	tc_start(tc, channel);
   813ca:	68f8      	ldr	r0, [r7, #12]
   813cc:	68b9      	ldr	r1, [r7, #8]
   813ce:	4b08      	ldr	r3, [pc, #32]	; (813f0 <startTimer1+0x6c>)
   813d0:	4798      	blx	r3
}
   813d2:	3710      	adds	r7, #16
   813d4:	46bd      	mov	sp, r7
   813d6:	bd80      	pop	{r7, pc}
   813d8:	00083649 	.word	0x00083649
   813dc:	000835c5 	.word	0x000835c5
   813e0:	000816a1 	.word	0x000816a1
   813e4:	40080000 	.word	0x40080000
   813e8:	00081719 	.word	0x00081719
   813ec:	0008173d 	.word	0x0008173d
   813f0:	000816d9 	.word	0x000816d9

000813f4 <startTimer2>:
void startTimer2(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   813f4:	b580      	push	{r7, lr}
   813f6:	b084      	sub	sp, #16
   813f8:	af00      	add	r7, sp, #0
   813fa:	60f8      	str	r0, [r7, #12]
   813fc:	60b9      	str	r1, [r7, #8]
   813fe:	603b      	str	r3, [r7, #0]
   81400:	4613      	mov	r3, r2
   81402:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81404:	2000      	movs	r0, #0
   81406:	4b10      	ldr	r3, [pc, #64]	; (81448 <startTimer2+0x54>)
   81408:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   8140a:	201e      	movs	r0, #30
   8140c:	4b0f      	ldr	r3, [pc, #60]	; (8144c <startTimer2+0x58>)
   8140e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81410:	68f8      	ldr	r0, [r7, #12]
   81412:	68b9      	ldr	r1, [r7, #8]
   81414:	f24c 0203 	movw	r2, #49155	; 0xc003
   81418:	4b0d      	ldr	r3, [pc, #52]	; (81450 <startTimer2+0x5c>)
   8141a:	4798      	blx	r3
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8141c:	4b0d      	ldr	r3, [pc, #52]	; (81454 <startTimer2+0x60>)
   8141e:	f24c 0203 	movw	r2, #49155	; 0xc003
   81422:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81424:	68f8      	ldr	r0, [r7, #12]
   81426:	68b9      	ldr	r1, [r7, #8]
   81428:	683a      	ldr	r2, [r7, #0]
   8142a:	4b0b      	ldr	r3, [pc, #44]	; (81458 <startTimer2+0x64>)
   8142c:	4798      	blx	r3
	tc_enable_interrupt(TC1,0,TC_IER_CPCS);
   8142e:	4809      	ldr	r0, [pc, #36]	; (81454 <startTimer2+0x60>)
   81430:	2100      	movs	r1, #0
   81432:	2210      	movs	r2, #16
   81434:	4b09      	ldr	r3, [pc, #36]	; (8145c <startTimer2+0x68>)
   81436:	4798      	blx	r3
	tc_start(tc, channel);
   81438:	68f8      	ldr	r0, [r7, #12]
   8143a:	68b9      	ldr	r1, [r7, #8]
   8143c:	4b08      	ldr	r3, [pc, #32]	; (81460 <startTimer2+0x6c>)
   8143e:	4798      	blx	r3
}
   81440:	3710      	adds	r7, #16
   81442:	46bd      	mov	sp, r7
   81444:	bd80      	pop	{r7, pc}
   81446:	bf00      	nop
   81448:	00083649 	.word	0x00083649
   8144c:	000835c5 	.word	0x000835c5
   81450:	000816a1 	.word	0x000816a1
   81454:	40084000 	.word	0x40084000
   81458:	00081719 	.word	0x00081719
   8145c:	0008173d 	.word	0x0008173d
   81460:	000816d9 	.word	0x000816d9

00081464 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81464:	b580      	push	{r7, lr}
   81466:	b082      	sub	sp, #8
   81468:	af00      	add	r7, sp, #0
   8146a:	4603      	mov	r3, r0
   8146c:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   8146e:	79fb      	ldrb	r3, [r7, #7]
   81470:	4618      	mov	r0, r3
   81472:	4b03      	ldr	r3, [pc, #12]	; (81480 <cpu3_sv_cntrl_activatepump+0x1c>)
   81474:	4798      	blx	r3
	
	return 0;
   81476:	2300      	movs	r3, #0
}
   81478:	4618      	mov	r0, r3
   8147a:	3708      	adds	r7, #8
   8147c:	46bd      	mov	sp, r7
   8147e:	bd80      	pop	{r7, pc}
   81480:	000808bd 	.word	0x000808bd

00081484 <SV_put_sensor_data>:
// 	
// 	return 0;
// 
// }

bool SV_put_sensor_data(Sys_statusType* sensor_struct)   {
   81484:	b580      	push	{r7, lr}
   81486:	b084      	sub	sp, #16
   81488:	af00      	add	r7, sp, #0
   8148a:	6078      	str	r0, [r7, #4]
	
	DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = PROPORTIONING_CPU_id;
   8148c:	2302      	movs	r3, #2
   8148e:	723b      	strb	r3, [r7, #8]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = GROUP_ID_8 ;
   81490:	2308      	movs	r3, #8
   81492:	727b      	strb	r3, [r7, #9]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = acid_f_b;
   81494:	4b08      	ldr	r3, [pc, #32]	; (814b8 <SV_put_sensor_data+0x34>)
   81496:	881b      	ldrh	r3, [r3, #0]
   81498:	817b      	strh	r3, [r7, #10]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = bicarb_f_b;
   8149a:	4b08      	ldr	r3, [pc, #32]	; (814bc <SV_put_sensor_data+0x38>)
   8149c:	881b      	ldrh	r3, [r3, #0]
   8149e:	81bb      	strh	r3, [r7, #12]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = 0;
   814a0:	2300      	movs	r3, #0
   814a2:	81fb      	strh	r3, [r7, #14]
	SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   814a4:	f107 0308 	add.w	r3, r7, #8
   814a8:	4618      	mov	r0, r3
   814aa:	4b05      	ldr	r3, [pc, #20]	; (814c0 <SV_put_sensor_data+0x3c>)
   814ac:	4798      	blx	r3
	
	return ;
   814ae:	bf00      	nop
}
   814b0:	4618      	mov	r0, r3
   814b2:	3710      	adds	r7, #16
   814b4:	46bd      	mov	sp, r7
   814b6:	bd80      	pop	{r7, pc}
   814b8:	20071200 	.word	0x20071200
   814bc:	20071202 	.word	0x20071202
   814c0:	000814c5 	.word	0x000814c5

000814c4 <SV_SEND_CAN_MAILBOX>:


void SV_SEND_CAN_MAILBOX(DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   814c4:	b580      	push	{r7, lr}
   814c6:	b084      	sub	sp, #16
   814c8:	af00      	add	r7, sp, #0
   814ca:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   814cc:	687b      	ldr	r3, [r7, #4]
   814ce:	781b      	ldrb	r3, [r3, #0]
   814d0:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   814d2:	687b      	ldr	r3, [r7, #4]
   814d4:	785b      	ldrb	r3, [r3, #1]
   814d6:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;
   814d8:	687b      	ldr	r3, [r7, #4]
   814da:	885b      	ldrh	r3, [r3, #2]
   814dc:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   814de:	687b      	ldr	r3, [r7, #4]
   814e0:	889b      	ldrh	r3, [r3, #4]
   814e2:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   814e4:	687b      	ldr	r3, [r7, #4]
   814e6:	88db      	ldrh	r3, [r3, #6]
   814e8:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal                                    =sv_data_size.fourbyte[0];
   814ea:	68bb      	ldr	r3, [r7, #8]
   814ec:	4a14      	ldr	r2, [pc, #80]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   814ee:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah                                    =sv_data_size.fourbyte[1];
   814f0:	68fb      	ldr	r3, [r7, #12]
   814f2:	4a13      	ldr	r2, [pc, #76]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   814f4:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length                                  = 8;
   814f6:	4b12      	ldr	r3, [pc, #72]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   814f8:	2208      	movs	r2, #8
   814fa:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   814fc:	4b10      	ldr	r3, [pc, #64]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   814fe:	2200      	movs	r2, #0
   81500:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   81502:	4b0f      	ldr	r3, [pc, #60]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   81504:	2203      	movs	r2, #3
   81506:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   81508:	4b0d      	ldr	r3, [pc, #52]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   8150a:	2201      	movs	r2, #1
   8150c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8150e:	4b0c      	ldr	r3, [pc, #48]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   81510:	2200      	movs	r2, #0
   81512:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0x7FC ;
   81514:	4b0a      	ldr	r3, [pc, #40]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   81516:	f240 72fc 	movw	r2, #2044	; 0x7fc
   8151a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id); ;
   8151c:	4b08      	ldr	r3, [pc, #32]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   8151e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   81522:	611a      	str	r2, [r3, #16]
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));
   81524:	bf00      	nop
   81526:	4806      	ldr	r0, [pc, #24]	; (81540 <SV_SEND_CAN_MAILBOX+0x7c>)
   81528:	4b06      	ldr	r3, [pc, #24]	; (81544 <SV_SEND_CAN_MAILBOX+0x80>)
   8152a:	4798      	blx	r3
   8152c:	4603      	mov	r3, r0
   8152e:	2b01      	cmp	r3, #1
   81530:	d0f9      	beq.n	81526 <SV_SEND_CAN_MAILBOX+0x62>
	//dd_can_mailbox_write(&can0_mailbox);
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   81532:	2001      	movs	r0, #1
   81534:	4b04      	ldr	r3, [pc, #16]	; (81548 <SV_SEND_CAN_MAILBOX+0x84>)
   81536:	4798      	blx	r3
   81538:	3710      	adds	r7, #16
   8153a:	46bd      	mov	sp, r7
   8153c:	bd80      	pop	{r7, pc}
   8153e:	bf00      	nop
   81540:	20070ddc 	.word	0x20070ddc
   81544:	00080595 	.word	0x00080595
   81548:	00080651 	.word	0x00080651

0008154c <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   8154c:	b580      	push	{r7, lr}
   8154e:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   81550:	4b08      	ldr	r3, [pc, #32]	; (81574 <CPU3_S_SYSTEM_INIT+0x28>)
   81552:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   81554:	4b08      	ldr	r3, [pc, #32]	; (81578 <CPU3_S_SYSTEM_INIT+0x2c>)
   81556:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   81558:	4b08      	ldr	r3, [pc, #32]	; (8157c <CPU3_S_SYSTEM_INIT+0x30>)
   8155a:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   8155c:	4b08      	ldr	r3, [pc, #32]	; (81580 <CPU3_S_SYSTEM_INIT+0x34>)
   8155e:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   81560:	4b08      	ldr	r3, [pc, #32]	; (81584 <CPU3_S_SYSTEM_INIT+0x38>)
   81562:	4798      	blx	r3
	DD_INIT_CAN();
   81564:	4b08      	ldr	r3, [pc, #32]	; (81588 <CPU3_S_SYSTEM_INIT+0x3c>)
   81566:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81568:	2000      	movs	r0, #0
   8156a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8156e:	4b07      	ldr	r3, [pc, #28]	; (8158c <CPU3_S_SYSTEM_INIT+0x40>)
   81570:	4798      	blx	r3
}
   81572:	bd80      	pop	{r7, pc}
   81574:	00080151 	.word	0x00080151
   81578:	00081061 	.word	0x00081061
   8157c:	00080a5d 	.word	0x00080a5d
   81580:	00081145 	.word	0x00081145
   81584:	000811a9 	.word	0x000811a9
   81588:	00080769 	.word	0x00080769
   8158c:	00081591 	.word	0x00081591

00081590 <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   81590:	b580      	push	{r7, lr}
   81592:	b082      	sub	sp, #8
   81594:	af00      	add	r7, sp, #0
   81596:	4603      	mov	r3, r0
   81598:	6039      	str	r1, [r7, #0]
   8159a:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   8159c:	683b      	ldr	r3, [r7, #0]
   8159e:	b2db      	uxtb	r3, r3
   815a0:	79fa      	ldrb	r2, [r7, #7]
   815a2:	4610      	mov	r0, r2
   815a4:	4619      	mov	r1, r3
   815a6:	4b03      	ldr	r3, [pc, #12]	; (815b4 <CPU3_S_START_TIMER+0x24>)
   815a8:	4798      	blx	r3
	
	return 0;
   815aa:	2300      	movs	r3, #0
}
   815ac:	4618      	mov	r0, r3
   815ae:	3708      	adds	r7, #8
   815b0:	46bd      	mov	sp, r7
   815b2:	bd80      	pop	{r7, pc}
   815b4:	00080931 	.word	0x00080931

000815b8 <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   815b8:	b580      	push	{r7, lr}
   815ba:	b082      	sub	sp, #8
   815bc:	af00      	add	r7, sp, #0
   815be:	4603      	mov	r3, r0
   815c0:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   815c2:	79fb      	ldrb	r3, [r7, #7]
   815c4:	4618      	mov	r0, r3
   815c6:	4b03      	ldr	r3, [pc, #12]	; (815d4 <CPU3_S_STOP_TIMER+0x1c>)
   815c8:	4798      	blx	r3
	
	return 0;
   815ca:	2300      	movs	r3, #0
   815cc:	4618      	mov	r0, r3
   815ce:	3708      	adds	r7, #8
   815d0:	46bd      	mov	sp, r7
   815d2:	bd80      	pop	{r7, pc}
   815d4:	000809e5 	.word	0x000809e5

000815d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   815d8:	b580      	push	{r7, lr}
   815da:	b086      	sub	sp, #24
   815dc:	af00      	add	r7, sp, #0
   815de:	60f8      	str	r0, [r7, #12]
   815e0:	60b9      	str	r1, [r7, #8]
   815e2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   815e4:	2300      	movs	r3, #0
   815e6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   815e8:	68fb      	ldr	r3, [r7, #12]
   815ea:	2b00      	cmp	r3, #0
   815ec:	d002      	beq.n	815f4 <_read+0x1c>
		return -1;
   815ee:	f04f 33ff 	mov.w	r3, #4294967295
   815f2:	e014      	b.n	8161e <_read+0x46>
	}

	for (; len > 0; --len) {
   815f4:	e00f      	b.n	81616 <_read+0x3e>
		ptr_get(stdio_base, ptr);
   815f6:	4b0c      	ldr	r3, [pc, #48]	; (81628 <_read+0x50>)
   815f8:	681b      	ldr	r3, [r3, #0]
   815fa:	4a0c      	ldr	r2, [pc, #48]	; (8162c <_read+0x54>)
   815fc:	6812      	ldr	r2, [r2, #0]
   815fe:	4610      	mov	r0, r2
   81600:	68b9      	ldr	r1, [r7, #8]
   81602:	4798      	blx	r3
		ptr++;
   81604:	68bb      	ldr	r3, [r7, #8]
   81606:	3301      	adds	r3, #1
   81608:	60bb      	str	r3, [r7, #8]
		nChars++;
   8160a:	697b      	ldr	r3, [r7, #20]
   8160c:	3301      	adds	r3, #1
   8160e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81610:	687b      	ldr	r3, [r7, #4]
   81612:	3b01      	subs	r3, #1
   81614:	607b      	str	r3, [r7, #4]
   81616:	687b      	ldr	r3, [r7, #4]
   81618:	2b00      	cmp	r3, #0
   8161a:	dcec      	bgt.n	815f6 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8161c:	697b      	ldr	r3, [r7, #20]
}
   8161e:	4618      	mov	r0, r3
   81620:	3718      	adds	r7, #24
   81622:	46bd      	mov	sp, r7
   81624:	bd80      	pop	{r7, pc}
   81626:	bf00      	nop
   81628:	20071204 	.word	0x20071204
   8162c:	2007120c 	.word	0x2007120c

00081630 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81630:	b580      	push	{r7, lr}
   81632:	b086      	sub	sp, #24
   81634:	af00      	add	r7, sp, #0
   81636:	60f8      	str	r0, [r7, #12]
   81638:	60b9      	str	r1, [r7, #8]
   8163a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   8163c:	2300      	movs	r3, #0
   8163e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   81640:	68fb      	ldr	r3, [r7, #12]
   81642:	2b01      	cmp	r3, #1
   81644:	d008      	beq.n	81658 <_write+0x28>
   81646:	68fb      	ldr	r3, [r7, #12]
   81648:	2b02      	cmp	r3, #2
   8164a:	d005      	beq.n	81658 <_write+0x28>
   8164c:	68fb      	ldr	r3, [r7, #12]
   8164e:	2b03      	cmp	r3, #3
   81650:	d002      	beq.n	81658 <_write+0x28>
		return -1;
   81652:	f04f 33ff 	mov.w	r3, #4294967295
   81656:	e01a      	b.n	8168e <_write+0x5e>
	}

	for (; len != 0; --len) {
   81658:	e015      	b.n	81686 <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8165a:	4b0f      	ldr	r3, [pc, #60]	; (81698 <_write+0x68>)
   8165c:	681a      	ldr	r2, [r3, #0]
   8165e:	4b0f      	ldr	r3, [pc, #60]	; (8169c <_write+0x6c>)
   81660:	6818      	ldr	r0, [r3, #0]
   81662:	68bb      	ldr	r3, [r7, #8]
   81664:	1c59      	adds	r1, r3, #1
   81666:	60b9      	str	r1, [r7, #8]
   81668:	781b      	ldrb	r3, [r3, #0]
   8166a:	4619      	mov	r1, r3
   8166c:	4790      	blx	r2
   8166e:	4603      	mov	r3, r0
   81670:	2b00      	cmp	r3, #0
   81672:	da02      	bge.n	8167a <_write+0x4a>
			return -1;
   81674:	f04f 33ff 	mov.w	r3, #4294967295
   81678:	e009      	b.n	8168e <_write+0x5e>
		}
		++nChars;
   8167a:	697b      	ldr	r3, [r7, #20]
   8167c:	3301      	adds	r3, #1
   8167e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81680:	687b      	ldr	r3, [r7, #4]
   81682:	3b01      	subs	r3, #1
   81684:	607b      	str	r3, [r7, #4]
   81686:	687b      	ldr	r3, [r7, #4]
   81688:	2b00      	cmp	r3, #0
   8168a:	d1e6      	bne.n	8165a <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   8168c:	697b      	ldr	r3, [r7, #20]
}
   8168e:	4618      	mov	r0, r3
   81690:	3718      	adds	r7, #24
   81692:	46bd      	mov	sp, r7
   81694:	bd80      	pop	{r7, pc}
   81696:	bf00      	nop
   81698:	20071208 	.word	0x20071208
   8169c:	2007120c 	.word	0x2007120c

000816a0 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   816a0:	b480      	push	{r7}
   816a2:	b087      	sub	sp, #28
   816a4:	af00      	add	r7, sp, #0
   816a6:	60f8      	str	r0, [r7, #12]
   816a8:	60b9      	str	r1, [r7, #8]
   816aa:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   816ac:	68bb      	ldr	r3, [r7, #8]
   816ae:	019b      	lsls	r3, r3, #6
   816b0:	68fa      	ldr	r2, [r7, #12]
   816b2:	4413      	add	r3, r2
   816b4:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   816b6:	697b      	ldr	r3, [r7, #20]
   816b8:	2202      	movs	r2, #2
   816ba:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   816bc:	697b      	ldr	r3, [r7, #20]
   816be:	f04f 32ff 	mov.w	r2, #4294967295
   816c2:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   816c4:	697b      	ldr	r3, [r7, #20]
   816c6:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   816c8:	697b      	ldr	r3, [r7, #20]
   816ca:	687a      	ldr	r2, [r7, #4]
   816cc:	605a      	str	r2, [r3, #4]
}
   816ce:	371c      	adds	r7, #28
   816d0:	46bd      	mov	sp, r7
   816d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   816d6:	4770      	bx	lr

000816d8 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   816d8:	b480      	push	{r7}
   816da:	b083      	sub	sp, #12
   816dc:	af00      	add	r7, sp, #0
   816de:	6078      	str	r0, [r7, #4]
   816e0:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   816e2:	687a      	ldr	r2, [r7, #4]
   816e4:	683b      	ldr	r3, [r7, #0]
   816e6:	019b      	lsls	r3, r3, #6
   816e8:	4413      	add	r3, r2
   816ea:	2205      	movs	r2, #5
   816ec:	601a      	str	r2, [r3, #0]
}
   816ee:	370c      	adds	r7, #12
   816f0:	46bd      	mov	sp, r7
   816f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   816f6:	4770      	bx	lr

000816f8 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   816f8:	b480      	push	{r7}
   816fa:	b083      	sub	sp, #12
   816fc:	af00      	add	r7, sp, #0
   816fe:	6078      	str	r0, [r7, #4]
   81700:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81702:	687a      	ldr	r2, [r7, #4]
   81704:	683b      	ldr	r3, [r7, #0]
   81706:	019b      	lsls	r3, r3, #6
   81708:	4413      	add	r3, r2
   8170a:	2202      	movs	r2, #2
   8170c:	601a      	str	r2, [r3, #0]
}
   8170e:	370c      	adds	r7, #12
   81710:	46bd      	mov	sp, r7
   81712:	f85d 7b04 	ldr.w	r7, [sp], #4
   81716:	4770      	bx	lr

00081718 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   81718:	b480      	push	{r7}
   8171a:	b085      	sub	sp, #20
   8171c:	af00      	add	r7, sp, #0
   8171e:	60f8      	str	r0, [r7, #12]
   81720:	60b9      	str	r1, [r7, #8]
   81722:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81724:	68fa      	ldr	r2, [r7, #12]
   81726:	68bb      	ldr	r3, [r7, #8]
   81728:	019b      	lsls	r3, r3, #6
   8172a:	4413      	add	r3, r2
   8172c:	3318      	adds	r3, #24
   8172e:	687a      	ldr	r2, [r7, #4]
   81730:	605a      	str	r2, [r3, #4]
}
   81732:	3714      	adds	r7, #20
   81734:	46bd      	mov	sp, r7
   81736:	f85d 7b04 	ldr.w	r7, [sp], #4
   8173a:	4770      	bx	lr

0008173c <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   8173c:	b480      	push	{r7}
   8173e:	b087      	sub	sp, #28
   81740:	af00      	add	r7, sp, #0
   81742:	60f8      	str	r0, [r7, #12]
   81744:	60b9      	str	r1, [r7, #8]
   81746:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81748:	68bb      	ldr	r3, [r7, #8]
   8174a:	019b      	lsls	r3, r3, #6
   8174c:	68fa      	ldr	r2, [r7, #12]
   8174e:	4413      	add	r3, r2
   81750:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   81752:	697b      	ldr	r3, [r7, #20]
   81754:	687a      	ldr	r2, [r7, #4]
   81756:	625a      	str	r2, [r3, #36]	; 0x24
}
   81758:	371c      	adds	r7, #28
   8175a:	46bd      	mov	sp, r7
   8175c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81760:	4770      	bx	lr
   81762:	bf00      	nop

00081764 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   81764:	b480      	push	{r7}
   81766:	b085      	sub	sp, #20
   81768:	af00      	add	r7, sp, #0
   8176a:	6078      	str	r0, [r7, #4]
   8176c:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8176e:	683b      	ldr	r3, [r7, #0]
   81770:	019b      	lsls	r3, r3, #6
   81772:	687a      	ldr	r2, [r7, #4]
   81774:	4413      	add	r3, r2
   81776:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   81778:	68fb      	ldr	r3, [r7, #12]
   8177a:	6a1b      	ldr	r3, [r3, #32]
}
   8177c:	4618      	mov	r0, r3
   8177e:	3714      	adds	r7, #20
   81780:	46bd      	mov	sp, r7
   81782:	f85d 7b04 	ldr.w	r7, [sp], #4
   81786:	4770      	bx	lr

00081788 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81788:	b480      	push	{r7}
   8178a:	b085      	sub	sp, #20
   8178c:	af00      	add	r7, sp, #0
   8178e:	6078      	str	r0, [r7, #4]
   81790:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   81792:	2300      	movs	r3, #0
   81794:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81796:	687b      	ldr	r3, [r7, #4]
   81798:	22ac      	movs	r2, #172	; 0xac
   8179a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8179c:	683b      	ldr	r3, [r7, #0]
   8179e:	681a      	ldr	r2, [r3, #0]
   817a0:	683b      	ldr	r3, [r7, #0]
   817a2:	685b      	ldr	r3, [r3, #4]
   817a4:	fbb2 f3f3 	udiv	r3, r2, r3
   817a8:	091b      	lsrs	r3, r3, #4
   817aa:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   817ac:	68fb      	ldr	r3, [r7, #12]
   817ae:	2b00      	cmp	r3, #0
   817b0:	d003      	beq.n	817ba <uart_init+0x32>
   817b2:	68fb      	ldr	r3, [r7, #12]
   817b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   817b8:	d301      	bcc.n	817be <uart_init+0x36>
		return 1;
   817ba:	2301      	movs	r3, #1
   817bc:	e00f      	b.n	817de <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   817be:	687b      	ldr	r3, [r7, #4]
   817c0:	68fa      	ldr	r2, [r7, #12]
   817c2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   817c4:	683b      	ldr	r3, [r7, #0]
   817c6:	689a      	ldr	r2, [r3, #8]
   817c8:	687b      	ldr	r3, [r7, #4]
   817ca:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   817cc:	687b      	ldr	r3, [r7, #4]
   817ce:	f240 2202 	movw	r2, #514	; 0x202
   817d2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   817d6:	687b      	ldr	r3, [r7, #4]
   817d8:	2250      	movs	r2, #80	; 0x50
   817da:	601a      	str	r2, [r3, #0]

	return 0;
   817dc:	2300      	movs	r3, #0
}
   817de:	4618      	mov	r0, r3
   817e0:	3714      	adds	r7, #20
   817e2:	46bd      	mov	sp, r7
   817e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   817e8:	4770      	bx	lr
   817ea:	bf00      	nop

000817ec <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   817ec:	b480      	push	{r7}
   817ee:	b083      	sub	sp, #12
   817f0:	af00      	add	r7, sp, #0
   817f2:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   817f4:	687b      	ldr	r3, [r7, #4]
   817f6:	2240      	movs	r2, #64	; 0x40
   817f8:	601a      	str	r2, [r3, #0]
}
   817fa:	370c      	adds	r7, #12
   817fc:	46bd      	mov	sp, r7
   817fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   81802:	4770      	bx	lr

00081804 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   81804:	b480      	push	{r7}
   81806:	b083      	sub	sp, #12
   81808:	af00      	add	r7, sp, #0
   8180a:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   8180c:	687b      	ldr	r3, [r7, #4]
   8180e:	2210      	movs	r2, #16
   81810:	601a      	str	r2, [r3, #0]
}
   81812:	370c      	adds	r7, #12
   81814:	46bd      	mov	sp, r7
   81816:	f85d 7b04 	ldr.w	r7, [sp], #4
   8181a:	4770      	bx	lr

0008181c <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   8181c:	b480      	push	{r7}
   8181e:	b083      	sub	sp, #12
   81820:	af00      	add	r7, sp, #0
   81822:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81824:	687b      	ldr	r3, [r7, #4]
   81826:	2250      	movs	r2, #80	; 0x50
   81828:	601a      	str	r2, [r3, #0]
}
   8182a:	370c      	adds	r7, #12
   8182c:	46bd      	mov	sp, r7
   8182e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81832:	4770      	bx	lr

00081834 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   81834:	b480      	push	{r7}
   81836:	b083      	sub	sp, #12
   81838:	af00      	add	r7, sp, #0
   8183a:	6078      	str	r0, [r7, #4]
   8183c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   8183e:	687b      	ldr	r3, [r7, #4]
   81840:	683a      	ldr	r2, [r7, #0]
   81842:	609a      	str	r2, [r3, #8]
}
   81844:	370c      	adds	r7, #12
   81846:	46bd      	mov	sp, r7
   81848:	f85d 7b04 	ldr.w	r7, [sp], #4
   8184c:	4770      	bx	lr
   8184e:	bf00      	nop

00081850 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   81850:	b480      	push	{r7}
   81852:	b083      	sub	sp, #12
   81854:	af00      	add	r7, sp, #0
   81856:	6078      	str	r0, [r7, #4]
   81858:	460b      	mov	r3, r1
   8185a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8185c:	687b      	ldr	r3, [r7, #4]
   8185e:	695b      	ldr	r3, [r3, #20]
   81860:	f003 0302 	and.w	r3, r3, #2
   81864:	2b00      	cmp	r3, #0
   81866:	d101      	bne.n	8186c <uart_write+0x1c>
		return 1;
   81868:	2301      	movs	r3, #1
   8186a:	e003      	b.n	81874 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   8186c:	78fa      	ldrb	r2, [r7, #3]
   8186e:	687b      	ldr	r3, [r7, #4]
   81870:	61da      	str	r2, [r3, #28]
	return 0;
   81872:	2300      	movs	r3, #0
}
   81874:	4618      	mov	r0, r3
   81876:	370c      	adds	r7, #12
   81878:	46bd      	mov	sp, r7
   8187a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8187e:	4770      	bx	lr

00081880 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   81880:	b480      	push	{r7}
   81882:	b083      	sub	sp, #12
   81884:	af00      	add	r7, sp, #0
   81886:	6078      	str	r0, [r7, #4]
   81888:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8188a:	687b      	ldr	r3, [r7, #4]
   8188c:	695b      	ldr	r3, [r3, #20]
   8188e:	f003 0301 	and.w	r3, r3, #1
   81892:	2b00      	cmp	r3, #0
   81894:	d101      	bne.n	8189a <uart_read+0x1a>
		return 1;
   81896:	2301      	movs	r3, #1
   81898:	e005      	b.n	818a6 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8189a:	687b      	ldr	r3, [r7, #4]
   8189c:	699b      	ldr	r3, [r3, #24]
   8189e:	b2da      	uxtb	r2, r3
   818a0:	683b      	ldr	r3, [r7, #0]
   818a2:	701a      	strb	r2, [r3, #0]
	return 0;
   818a4:	2300      	movs	r3, #0
}
   818a6:	4618      	mov	r0, r3
   818a8:	370c      	adds	r7, #12
   818aa:	46bd      	mov	sp, r7
   818ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   818b0:	4770      	bx	lr
   818b2:	bf00      	nop

000818b4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   818b4:	b480      	push	{r7}
   818b6:	b089      	sub	sp, #36	; 0x24
   818b8:	af00      	add	r7, sp, #0
   818ba:	60f8      	str	r0, [r7, #12]
   818bc:	60b9      	str	r1, [r7, #8]
   818be:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   818c0:	68bb      	ldr	r3, [r7, #8]
   818c2:	011a      	lsls	r2, r3, #4
   818c4:	687b      	ldr	r3, [r7, #4]
   818c6:	429a      	cmp	r2, r3
   818c8:	d802      	bhi.n	818d0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   818ca:	2310      	movs	r3, #16
   818cc:	61fb      	str	r3, [r7, #28]
   818ce:	e001      	b.n	818d4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   818d0:	2308      	movs	r3, #8
   818d2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   818d4:	687b      	ldr	r3, [r7, #4]
   818d6:	00da      	lsls	r2, r3, #3
   818d8:	69fb      	ldr	r3, [r7, #28]
   818da:	68b9      	ldr	r1, [r7, #8]
   818dc:	fb01 f303 	mul.w	r3, r1, r3
   818e0:	085b      	lsrs	r3, r3, #1
   818e2:	441a      	add	r2, r3
   818e4:	69fb      	ldr	r3, [r7, #28]
   818e6:	68b9      	ldr	r1, [r7, #8]
   818e8:	fb01 f303 	mul.w	r3, r1, r3
   818ec:	fbb2 f3f3 	udiv	r3, r2, r3
   818f0:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   818f2:	69bb      	ldr	r3, [r7, #24]
   818f4:	08db      	lsrs	r3, r3, #3
   818f6:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   818f8:	69bb      	ldr	r3, [r7, #24]
   818fa:	f003 0307 	and.w	r3, r3, #7
   818fe:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81900:	697b      	ldr	r3, [r7, #20]
   81902:	2b00      	cmp	r3, #0
   81904:	d003      	beq.n	8190e <usart_set_async_baudrate+0x5a>
   81906:	697b      	ldr	r3, [r7, #20]
   81908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8190c:	d301      	bcc.n	81912 <usart_set_async_baudrate+0x5e>
		return 1;
   8190e:	2301      	movs	r3, #1
   81910:	e00f      	b.n	81932 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81912:	69fb      	ldr	r3, [r7, #28]
   81914:	2b08      	cmp	r3, #8
   81916:	d105      	bne.n	81924 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81918:	68fb      	ldr	r3, [r7, #12]
   8191a:	685b      	ldr	r3, [r3, #4]
   8191c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81920:	68fb      	ldr	r3, [r7, #12]
   81922:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81924:	693b      	ldr	r3, [r7, #16]
   81926:	041a      	lsls	r2, r3, #16
   81928:	697b      	ldr	r3, [r7, #20]
   8192a:	431a      	orrs	r2, r3
   8192c:	68fb      	ldr	r3, [r7, #12]
   8192e:	621a      	str	r2, [r3, #32]

	return 0;
   81930:	2300      	movs	r3, #0
}
   81932:	4618      	mov	r0, r3
   81934:	3724      	adds	r7, #36	; 0x24
   81936:	46bd      	mov	sp, r7
   81938:	f85d 7b04 	ldr.w	r7, [sp], #4
   8193c:	4770      	bx	lr
   8193e:	bf00      	nop

00081940 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81940:	b580      	push	{r7, lr}
   81942:	b082      	sub	sp, #8
   81944:	af00      	add	r7, sp, #0
   81946:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81948:	6878      	ldr	r0, [r7, #4]
   8194a:	4b0d      	ldr	r3, [pc, #52]	; (81980 <usart_reset+0x40>)
   8194c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8194e:	687b      	ldr	r3, [r7, #4]
   81950:	2200      	movs	r2, #0
   81952:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81954:	687b      	ldr	r3, [r7, #4]
   81956:	2200      	movs	r2, #0
   81958:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8195a:	687b      	ldr	r3, [r7, #4]
   8195c:	2200      	movs	r2, #0
   8195e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   81960:	6878      	ldr	r0, [r7, #4]
   81962:	4b08      	ldr	r3, [pc, #32]	; (81984 <usart_reset+0x44>)
   81964:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81966:	6878      	ldr	r0, [r7, #4]
   81968:	4b07      	ldr	r3, [pc, #28]	; (81988 <usart_reset+0x48>)
   8196a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8196c:	6878      	ldr	r0, [r7, #4]
   8196e:	4b07      	ldr	r3, [pc, #28]	; (8198c <usart_reset+0x4c>)
   81970:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   81972:	6878      	ldr	r0, [r7, #4]
   81974:	4b06      	ldr	r3, [pc, #24]	; (81990 <usart_reset+0x50>)
   81976:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81978:	3708      	adds	r7, #8
   8197a:	46bd      	mov	sp, r7
   8197c:	bd80      	pop	{r7, pc}
   8197e:	bf00      	nop
   81980:	00081b19 	.word	0x00081b19
   81984:	00081a31 	.word	0x00081a31
   81988:	00081a61 	.word	0x00081a61
   8198c:	00081a79 	.word	0x00081a79
   81990:	00081a95 	.word	0x00081a95

00081994 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81994:	b580      	push	{r7, lr}
   81996:	b084      	sub	sp, #16
   81998:	af00      	add	r7, sp, #0
   8199a:	60f8      	str	r0, [r7, #12]
   8199c:	60b9      	str	r1, [r7, #8]
   8199e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   819a0:	68f8      	ldr	r0, [r7, #12]
   819a2:	4b1a      	ldr	r3, [pc, #104]	; (81a0c <usart_init_rs232+0x78>)
   819a4:	4798      	blx	r3

	ul_reg_val = 0;
   819a6:	4b1a      	ldr	r3, [pc, #104]	; (81a10 <usart_init_rs232+0x7c>)
   819a8:	2200      	movs	r2, #0
   819aa:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   819ac:	68bb      	ldr	r3, [r7, #8]
   819ae:	2b00      	cmp	r3, #0
   819b0:	d009      	beq.n	819c6 <usart_init_rs232+0x32>
   819b2:	68bb      	ldr	r3, [r7, #8]
   819b4:	681b      	ldr	r3, [r3, #0]
   819b6:	68f8      	ldr	r0, [r7, #12]
   819b8:	4619      	mov	r1, r3
   819ba:	687a      	ldr	r2, [r7, #4]
   819bc:	4b15      	ldr	r3, [pc, #84]	; (81a14 <usart_init_rs232+0x80>)
   819be:	4798      	blx	r3
   819c0:	4603      	mov	r3, r0
   819c2:	2b00      	cmp	r3, #0
   819c4:	d001      	beq.n	819ca <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   819c6:	2301      	movs	r3, #1
   819c8:	e01b      	b.n	81a02 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819ca:	68bb      	ldr	r3, [r7, #8]
   819cc:	685a      	ldr	r2, [r3, #4]
   819ce:	68bb      	ldr	r3, [r7, #8]
   819d0:	689b      	ldr	r3, [r3, #8]
   819d2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   819d4:	68bb      	ldr	r3, [r7, #8]
   819d6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819d8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   819da:	68bb      	ldr	r3, [r7, #8]
   819dc:	68db      	ldr	r3, [r3, #12]
   819de:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819e0:	4b0b      	ldr	r3, [pc, #44]	; (81a10 <usart_init_rs232+0x7c>)
   819e2:	681b      	ldr	r3, [r3, #0]
   819e4:	4313      	orrs	r3, r2
   819e6:	4a0a      	ldr	r2, [pc, #40]	; (81a10 <usart_init_rs232+0x7c>)
   819e8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   819ea:	4b09      	ldr	r3, [pc, #36]	; (81a10 <usart_init_rs232+0x7c>)
   819ec:	681b      	ldr	r3, [r3, #0]
   819ee:	4a08      	ldr	r2, [pc, #32]	; (81a10 <usart_init_rs232+0x7c>)
   819f0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   819f2:	68fb      	ldr	r3, [r7, #12]
   819f4:	685a      	ldr	r2, [r3, #4]
   819f6:	4b06      	ldr	r3, [pc, #24]	; (81a10 <usart_init_rs232+0x7c>)
   819f8:	681b      	ldr	r3, [r3, #0]
   819fa:	431a      	orrs	r2, r3
   819fc:	68fb      	ldr	r3, [r7, #12]
   819fe:	605a      	str	r2, [r3, #4]

	return 0;
   81a00:	2300      	movs	r3, #0
}
   81a02:	4618      	mov	r0, r3
   81a04:	3710      	adds	r7, #16
   81a06:	46bd      	mov	sp, r7
   81a08:	bd80      	pop	{r7, pc}
   81a0a:	bf00      	nop
   81a0c:	00081941 	.word	0x00081941
   81a10:	20070cd0 	.word	0x20070cd0
   81a14:	000818b5 	.word	0x000818b5

00081a18 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81a18:	b480      	push	{r7}
   81a1a:	b083      	sub	sp, #12
   81a1c:	af00      	add	r7, sp, #0
   81a1e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81a20:	687b      	ldr	r3, [r7, #4]
   81a22:	2240      	movs	r2, #64	; 0x40
   81a24:	601a      	str	r2, [r3, #0]
}
   81a26:	370c      	adds	r7, #12
   81a28:	46bd      	mov	sp, r7
   81a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a2e:	4770      	bx	lr

00081a30 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81a30:	b480      	push	{r7}
   81a32:	b083      	sub	sp, #12
   81a34:	af00      	add	r7, sp, #0
   81a36:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81a38:	687b      	ldr	r3, [r7, #4]
   81a3a:	2288      	movs	r2, #136	; 0x88
   81a3c:	601a      	str	r2, [r3, #0]
}
   81a3e:	370c      	adds	r7, #12
   81a40:	46bd      	mov	sp, r7
   81a42:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a46:	4770      	bx	lr

00081a48 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81a48:	b480      	push	{r7}
   81a4a:	b083      	sub	sp, #12
   81a4c:	af00      	add	r7, sp, #0
   81a4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   81a50:	687b      	ldr	r3, [r7, #4]
   81a52:	2210      	movs	r2, #16
   81a54:	601a      	str	r2, [r3, #0]
}
   81a56:	370c      	adds	r7, #12
   81a58:	46bd      	mov	sp, r7
   81a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a5e:	4770      	bx	lr

00081a60 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81a60:	b480      	push	{r7}
   81a62:	b083      	sub	sp, #12
   81a64:	af00      	add	r7, sp, #0
   81a66:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81a68:	687b      	ldr	r3, [r7, #4]
   81a6a:	2224      	movs	r2, #36	; 0x24
   81a6c:	601a      	str	r2, [r3, #0]
}
   81a6e:	370c      	adds	r7, #12
   81a70:	46bd      	mov	sp, r7
   81a72:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a76:	4770      	bx	lr

00081a78 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   81a78:	b480      	push	{r7}
   81a7a:	b083      	sub	sp, #12
   81a7c:	af00      	add	r7, sp, #0
   81a7e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   81a80:	687b      	ldr	r3, [r7, #4]
   81a82:	f44f 7280 	mov.w	r2, #256	; 0x100
   81a86:	601a      	str	r2, [r3, #0]
}
   81a88:	370c      	adds	r7, #12
   81a8a:	46bd      	mov	sp, r7
   81a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a90:	4770      	bx	lr
   81a92:	bf00      	nop

00081a94 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81a94:	b480      	push	{r7}
   81a96:	b083      	sub	sp, #12
   81a98:	af00      	add	r7, sp, #0
   81a9a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81a9c:	687b      	ldr	r3, [r7, #4]
   81a9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81aa2:	601a      	str	r2, [r3, #0]
}
   81aa4:	370c      	adds	r7, #12
   81aa6:	46bd      	mov	sp, r7
   81aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81aac:	4770      	bx	lr
   81aae:	bf00      	nop

00081ab0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81ab0:	b480      	push	{r7}
   81ab2:	b083      	sub	sp, #12
   81ab4:	af00      	add	r7, sp, #0
   81ab6:	6078      	str	r0, [r7, #4]
   81ab8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81aba:	687b      	ldr	r3, [r7, #4]
   81abc:	695b      	ldr	r3, [r3, #20]
   81abe:	f003 0302 	and.w	r3, r3, #2
   81ac2:	2b00      	cmp	r3, #0
   81ac4:	d101      	bne.n	81aca <usart_write+0x1a>
		return 1;
   81ac6:	2301      	movs	r3, #1
   81ac8:	e005      	b.n	81ad6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81aca:	683b      	ldr	r3, [r7, #0]
   81acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81ad0:	687b      	ldr	r3, [r7, #4]
   81ad2:	61da      	str	r2, [r3, #28]
	return 0;
   81ad4:	2300      	movs	r3, #0
}
   81ad6:	4618      	mov	r0, r3
   81ad8:	370c      	adds	r7, #12
   81ada:	46bd      	mov	sp, r7
   81adc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ae0:	4770      	bx	lr
   81ae2:	bf00      	nop

00081ae4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   81ae4:	b480      	push	{r7}
   81ae6:	b083      	sub	sp, #12
   81ae8:	af00      	add	r7, sp, #0
   81aea:	6078      	str	r0, [r7, #4]
   81aec:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81aee:	687b      	ldr	r3, [r7, #4]
   81af0:	695b      	ldr	r3, [r3, #20]
   81af2:	f003 0301 	and.w	r3, r3, #1
   81af6:	2b00      	cmp	r3, #0
   81af8:	d101      	bne.n	81afe <usart_read+0x1a>
		return 1;
   81afa:	2301      	movs	r3, #1
   81afc:	e006      	b.n	81b0c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81afe:	687b      	ldr	r3, [r7, #4]
   81b00:	699b      	ldr	r3, [r3, #24]
   81b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81b06:	683b      	ldr	r3, [r7, #0]
   81b08:	601a      	str	r2, [r3, #0]

	return 0;
   81b0a:	2300      	movs	r3, #0
}
   81b0c:	4618      	mov	r0, r3
   81b0e:	370c      	adds	r7, #12
   81b10:	46bd      	mov	sp, r7
   81b12:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b16:	4770      	bx	lr

00081b18 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81b18:	b480      	push	{r7}
   81b1a:	b083      	sub	sp, #12
   81b1c:	af00      	add	r7, sp, #0
   81b1e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81b20:	687b      	ldr	r3, [r7, #4]
   81b22:	4a04      	ldr	r2, [pc, #16]	; (81b34 <usart_disable_writeprotect+0x1c>)
   81b24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81b28:	370c      	adds	r7, #12
   81b2a:	46bd      	mov	sp, r7
   81b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop
   81b34:	55534100 	.word	0x55534100

00081b38 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81b38:	b480      	push	{r7}
   81b3a:	b083      	sub	sp, #12
   81b3c:	af00      	add	r7, sp, #0
   81b3e:	4603      	mov	r3, r0
   81b40:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81b42:	4908      	ldr	r1, [pc, #32]	; (81b64 <NVIC_EnableIRQ+0x2c>)
   81b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b48:	095b      	lsrs	r3, r3, #5
   81b4a:	79fa      	ldrb	r2, [r7, #7]
   81b4c:	f002 021f 	and.w	r2, r2, #31
   81b50:	2001      	movs	r0, #1
   81b52:	fa00 f202 	lsl.w	r2, r0, r2
   81b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81b5a:	370c      	adds	r7, #12
   81b5c:	46bd      	mov	sp, r7
   81b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b62:	4770      	bx	lr
   81b64:	e000e100 	.word	0xe000e100

00081b68 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   81b68:	b480      	push	{r7}
   81b6a:	b083      	sub	sp, #12
   81b6c:	af00      	add	r7, sp, #0
   81b6e:	4603      	mov	r3, r0
   81b70:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81b72:	4909      	ldr	r1, [pc, #36]	; (81b98 <NVIC_DisableIRQ+0x30>)
   81b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b78:	095b      	lsrs	r3, r3, #5
   81b7a:	79fa      	ldrb	r2, [r7, #7]
   81b7c:	f002 021f 	and.w	r2, r2, #31
   81b80:	2001      	movs	r0, #1
   81b82:	fa00 f202 	lsl.w	r2, r0, r2
   81b86:	3320      	adds	r3, #32
   81b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81b8c:	370c      	adds	r7, #12
   81b8e:	46bd      	mov	sp, r7
   81b90:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b94:	4770      	bx	lr
   81b96:	bf00      	nop
   81b98:	e000e100 	.word	0xe000e100

00081b9c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81b9c:	b480      	push	{r7}
   81b9e:	b083      	sub	sp, #12
   81ba0:	af00      	add	r7, sp, #0
   81ba2:	4603      	mov	r3, r0
   81ba4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81ba6:	4909      	ldr	r1, [pc, #36]	; (81bcc <NVIC_ClearPendingIRQ+0x30>)
   81ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81bac:	095b      	lsrs	r3, r3, #5
   81bae:	79fa      	ldrb	r2, [r7, #7]
   81bb0:	f002 021f 	and.w	r2, r2, #31
   81bb4:	2001      	movs	r0, #1
   81bb6:	fa00 f202 	lsl.w	r2, r0, r2
   81bba:	3360      	adds	r3, #96	; 0x60
   81bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81bc0:	370c      	adds	r7, #12
   81bc2:	46bd      	mov	sp, r7
   81bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81bc8:	4770      	bx	lr
   81bca:	bf00      	nop
   81bcc:	e000e100 	.word	0xe000e100

00081bd0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81bd0:	b480      	push	{r7}
   81bd2:	b083      	sub	sp, #12
   81bd4:	af00      	add	r7, sp, #0
   81bd6:	4603      	mov	r3, r0
   81bd8:	6039      	str	r1, [r7, #0]
   81bda:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81be0:	2b00      	cmp	r3, #0
   81be2:	da0b      	bge.n	81bfc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81be4:	490d      	ldr	r1, [pc, #52]	; (81c1c <NVIC_SetPriority+0x4c>)
   81be6:	79fb      	ldrb	r3, [r7, #7]
   81be8:	f003 030f 	and.w	r3, r3, #15
   81bec:	3b04      	subs	r3, #4
   81bee:	683a      	ldr	r2, [r7, #0]
   81bf0:	b2d2      	uxtb	r2, r2
   81bf2:	0112      	lsls	r2, r2, #4
   81bf4:	b2d2      	uxtb	r2, r2
   81bf6:	440b      	add	r3, r1
   81bf8:	761a      	strb	r2, [r3, #24]
   81bfa:	e009      	b.n	81c10 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81bfc:	4908      	ldr	r1, [pc, #32]	; (81c20 <NVIC_SetPriority+0x50>)
   81bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81c02:	683a      	ldr	r2, [r7, #0]
   81c04:	b2d2      	uxtb	r2, r2
   81c06:	0112      	lsls	r2, r2, #4
   81c08:	b2d2      	uxtb	r2, r2
   81c0a:	440b      	add	r3, r1
   81c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81c10:	370c      	adds	r7, #12
   81c12:	46bd      	mov	sp, r7
   81c14:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c18:	4770      	bx	lr
   81c1a:	bf00      	nop
   81c1c:	e000ed00 	.word	0xe000ed00
   81c20:	e000e100 	.word	0xe000e100

00081c24 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81c24:	b480      	push	{r7}
   81c26:	b083      	sub	sp, #12
   81c28:	af00      	add	r7, sp, #0
   81c2a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81c2c:	687b      	ldr	r3, [r7, #4]
   81c2e:	2b07      	cmp	r3, #7
   81c30:	d825      	bhi.n	81c7e <osc_get_rate+0x5a>
   81c32:	a201      	add	r2, pc, #4	; (adr r2, 81c38 <osc_get_rate+0x14>)
   81c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c38:	00081c59 	.word	0x00081c59
   81c3c:	00081c5f 	.word	0x00081c5f
   81c40:	00081c65 	.word	0x00081c65
   81c44:	00081c6b 	.word	0x00081c6b
   81c48:	00081c6f 	.word	0x00081c6f
   81c4c:	00081c73 	.word	0x00081c73
   81c50:	00081c77 	.word	0x00081c77
   81c54:	00081c7b 	.word	0x00081c7b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81c58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81c5c:	e010      	b.n	81c80 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81c62:	e00d      	b.n	81c80 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81c68:	e00a      	b.n	81c80 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81c6a:	4b08      	ldr	r3, [pc, #32]	; (81c8c <osc_get_rate+0x68>)
   81c6c:	e008      	b.n	81c80 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81c6e:	4b08      	ldr	r3, [pc, #32]	; (81c90 <osc_get_rate+0x6c>)
   81c70:	e006      	b.n	81c80 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81c72:	4b08      	ldr	r3, [pc, #32]	; (81c94 <osc_get_rate+0x70>)
   81c74:	e004      	b.n	81c80 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81c76:	4b07      	ldr	r3, [pc, #28]	; (81c94 <osc_get_rate+0x70>)
   81c78:	e002      	b.n	81c80 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81c7a:	4b06      	ldr	r3, [pc, #24]	; (81c94 <osc_get_rate+0x70>)
   81c7c:	e000      	b.n	81c80 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81c7e:	2300      	movs	r3, #0
}
   81c80:	4618      	mov	r0, r3
   81c82:	370c      	adds	r7, #12
   81c84:	46bd      	mov	sp, r7
   81c86:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c8a:	4770      	bx	lr
   81c8c:	003d0900 	.word	0x003d0900
   81c90:	007a1200 	.word	0x007a1200
   81c94:	00b71b00 	.word	0x00b71b00

00081c98 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81c98:	b580      	push	{r7, lr}
   81c9a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81c9c:	2006      	movs	r0, #6
   81c9e:	4b04      	ldr	r3, [pc, #16]	; (81cb0 <sysclk_get_main_hz+0x18>)
   81ca0:	4798      	blx	r3
   81ca2:	4602      	mov	r2, r0
   81ca4:	4613      	mov	r3, r2
   81ca6:	00db      	lsls	r3, r3, #3
   81ca8:	1a9b      	subs	r3, r3, r2
   81caa:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81cac:	4618      	mov	r0, r3
   81cae:	bd80      	pop	{r7, pc}
   81cb0:	00081c25 	.word	0x00081c25

00081cb4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   81cb4:	b580      	push	{r7, lr}
   81cb6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81cb8:	4b02      	ldr	r3, [pc, #8]	; (81cc4 <sysclk_get_peripheral_hz+0x10>)
   81cba:	4798      	blx	r3
   81cbc:	4603      	mov	r3, r0
   81cbe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81cc0:	4618      	mov	r0, r3
   81cc2:	bd80      	pop	{r7, pc}
   81cc4:	00081c99 	.word	0x00081c99

00081cc8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81cc8:	b580      	push	{r7, lr}
   81cca:	b082      	sub	sp, #8
   81ccc:	af00      	add	r7, sp, #0
   81cce:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81cd0:	6878      	ldr	r0, [r7, #4]
   81cd2:	4b02      	ldr	r3, [pc, #8]	; (81cdc <sysclk_enable_peripheral_clock+0x14>)
   81cd4:	4798      	blx	r3
}
   81cd6:	3708      	adds	r7, #8
   81cd8:	46bd      	mov	sp, r7
   81cda:	bd80      	pop	{r7, pc}
   81cdc:	000835c5 	.word	0x000835c5

00081ce0 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   81ce0:	b580      	push	{r7, lr}
   81ce2:	b08c      	sub	sp, #48	; 0x30
   81ce4:	af00      	add	r7, sp, #0
   81ce6:	6078      	str	r0, [r7, #4]
   81ce8:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81cea:	4b40      	ldr	r3, [pc, #256]	; (81dec <usart_serial_init+0x10c>)
   81cec:	4798      	blx	r3
   81cee:	4603      	mov	r3, r0
   81cf0:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   81cf2:	683b      	ldr	r3, [r7, #0]
   81cf4:	681b      	ldr	r3, [r3, #0]
   81cf6:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   81cf8:	683b      	ldr	r3, [r7, #0]
   81cfa:	689b      	ldr	r3, [r3, #8]
   81cfc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   81cfe:	683b      	ldr	r3, [r7, #0]
   81d00:	681b      	ldr	r3, [r3, #0]
   81d02:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   81d04:	683b      	ldr	r3, [r7, #0]
   81d06:	685b      	ldr	r3, [r3, #4]
   81d08:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   81d0a:	683b      	ldr	r3, [r7, #0]
   81d0c:	689b      	ldr	r3, [r3, #8]
   81d0e:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81d10:	683b      	ldr	r3, [r7, #0]
   81d12:	7b1b      	ldrb	r3, [r3, #12]
   81d14:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   81d16:	2300      	movs	r3, #0
   81d18:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81d1a:	687b      	ldr	r3, [r7, #4]
   81d1c:	4a34      	ldr	r2, [pc, #208]	; (81df0 <usart_serial_init+0x110>)
   81d1e:	4293      	cmp	r3, r2
   81d20:	d108      	bne.n	81d34 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   81d22:	2008      	movs	r0, #8
   81d24:	4b33      	ldr	r3, [pc, #204]	; (81df4 <usart_serial_init+0x114>)
   81d26:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81d28:	f107 0320 	add.w	r3, r7, #32
   81d2c:	6878      	ldr	r0, [r7, #4]
   81d2e:	4619      	mov	r1, r3
   81d30:	4b31      	ldr	r3, [pc, #196]	; (81df8 <usart_serial_init+0x118>)
   81d32:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81d34:	687b      	ldr	r3, [r7, #4]
   81d36:	4a31      	ldr	r2, [pc, #196]	; (81dfc <usart_serial_init+0x11c>)
   81d38:	4293      	cmp	r3, r2
   81d3a:	d111      	bne.n	81d60 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   81d3c:	2011      	movs	r0, #17
   81d3e:	4b2d      	ldr	r3, [pc, #180]	; (81df4 <usart_serial_init+0x114>)
   81d40:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d42:	4b2a      	ldr	r3, [pc, #168]	; (81dec <usart_serial_init+0x10c>)
   81d44:	4798      	blx	r3
   81d46:	4602      	mov	r2, r0
   81d48:	f107 0308 	add.w	r3, r7, #8
   81d4c:	6878      	ldr	r0, [r7, #4]
   81d4e:	4619      	mov	r1, r3
   81d50:	4b2b      	ldr	r3, [pc, #172]	; (81e00 <usart_serial_init+0x120>)
   81d52:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81d54:	6878      	ldr	r0, [r7, #4]
   81d56:	4b2b      	ldr	r3, [pc, #172]	; (81e04 <usart_serial_init+0x124>)
   81d58:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81d5a:	6878      	ldr	r0, [r7, #4]
   81d5c:	4b2a      	ldr	r3, [pc, #168]	; (81e08 <usart_serial_init+0x128>)
   81d5e:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	4a2a      	ldr	r2, [pc, #168]	; (81e0c <usart_serial_init+0x12c>)
   81d64:	4293      	cmp	r3, r2
   81d66:	d111      	bne.n	81d8c <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   81d68:	2012      	movs	r0, #18
   81d6a:	4b22      	ldr	r3, [pc, #136]	; (81df4 <usart_serial_init+0x114>)
   81d6c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d6e:	4b1f      	ldr	r3, [pc, #124]	; (81dec <usart_serial_init+0x10c>)
   81d70:	4798      	blx	r3
   81d72:	4602      	mov	r2, r0
   81d74:	f107 0308 	add.w	r3, r7, #8
   81d78:	6878      	ldr	r0, [r7, #4]
   81d7a:	4619      	mov	r1, r3
   81d7c:	4b20      	ldr	r3, [pc, #128]	; (81e00 <usart_serial_init+0x120>)
   81d7e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81d80:	6878      	ldr	r0, [r7, #4]
   81d82:	4b20      	ldr	r3, [pc, #128]	; (81e04 <usart_serial_init+0x124>)
   81d84:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81d86:	6878      	ldr	r0, [r7, #4]
   81d88:	4b1f      	ldr	r3, [pc, #124]	; (81e08 <usart_serial_init+0x128>)
   81d8a:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81d8c:	687b      	ldr	r3, [r7, #4]
   81d8e:	4a20      	ldr	r2, [pc, #128]	; (81e10 <usart_serial_init+0x130>)
   81d90:	4293      	cmp	r3, r2
   81d92:	d111      	bne.n	81db8 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   81d94:	2013      	movs	r0, #19
   81d96:	4b17      	ldr	r3, [pc, #92]	; (81df4 <usart_serial_init+0x114>)
   81d98:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d9a:	4b14      	ldr	r3, [pc, #80]	; (81dec <usart_serial_init+0x10c>)
   81d9c:	4798      	blx	r3
   81d9e:	4602      	mov	r2, r0
   81da0:	f107 0308 	add.w	r3, r7, #8
   81da4:	6878      	ldr	r0, [r7, #4]
   81da6:	4619      	mov	r1, r3
   81da8:	4b15      	ldr	r3, [pc, #84]	; (81e00 <usart_serial_init+0x120>)
   81daa:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81dac:	6878      	ldr	r0, [r7, #4]
   81dae:	4b15      	ldr	r3, [pc, #84]	; (81e04 <usart_serial_init+0x124>)
   81db0:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81db2:	6878      	ldr	r0, [r7, #4]
   81db4:	4b14      	ldr	r3, [pc, #80]	; (81e08 <usart_serial_init+0x128>)
   81db6:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81db8:	687b      	ldr	r3, [r7, #4]
   81dba:	4a16      	ldr	r2, [pc, #88]	; (81e14 <usart_serial_init+0x134>)
   81dbc:	4293      	cmp	r3, r2
   81dbe:	d111      	bne.n	81de4 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81dc0:	2014      	movs	r0, #20
   81dc2:	4b0c      	ldr	r3, [pc, #48]	; (81df4 <usart_serial_init+0x114>)
   81dc4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81dc6:	4b09      	ldr	r3, [pc, #36]	; (81dec <usart_serial_init+0x10c>)
   81dc8:	4798      	blx	r3
   81dca:	4602      	mov	r2, r0
   81dcc:	f107 0308 	add.w	r3, r7, #8
   81dd0:	6878      	ldr	r0, [r7, #4]
   81dd2:	4619      	mov	r1, r3
   81dd4:	4b0a      	ldr	r3, [pc, #40]	; (81e00 <usart_serial_init+0x120>)
   81dd6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81dd8:	6878      	ldr	r0, [r7, #4]
   81dda:	4b0a      	ldr	r3, [pc, #40]	; (81e04 <usart_serial_init+0x124>)
   81ddc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81dde:	6878      	ldr	r0, [r7, #4]
   81de0:	4b09      	ldr	r3, [pc, #36]	; (81e08 <usart_serial_init+0x128>)
   81de2:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81de4:	3730      	adds	r7, #48	; 0x30
   81de6:	46bd      	mov	sp, r7
   81de8:	bd80      	pop	{r7, pc}
   81dea:	bf00      	nop
   81dec:	00081cb5 	.word	0x00081cb5
   81df0:	400e0800 	.word	0x400e0800
   81df4:	00081cc9 	.word	0x00081cc9
   81df8:	00081789 	.word	0x00081789
   81dfc:	40098000 	.word	0x40098000
   81e00:	00081995 	.word	0x00081995
   81e04:	00081a19 	.word	0x00081a19
   81e08:	00081a49 	.word	0x00081a49
   81e0c:	4009c000 	.word	0x4009c000
   81e10:	400a0000 	.word	0x400a0000
   81e14:	400a4000 	.word	0x400a4000

00081e18 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81e18:	b580      	push	{r7, lr}
   81e1a:	b082      	sub	sp, #8
   81e1c:	af00      	add	r7, sp, #0
   81e1e:	6078      	str	r0, [r7, #4]
   81e20:	460b      	mov	r3, r1
   81e22:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81e24:	687b      	ldr	r3, [r7, #4]
   81e26:	4a27      	ldr	r2, [pc, #156]	; (81ec4 <usart_serial_putchar+0xac>)
   81e28:	4293      	cmp	r3, r2
   81e2a:	d10a      	bne.n	81e42 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81e2c:	bf00      	nop
   81e2e:	78fb      	ldrb	r3, [r7, #3]
   81e30:	6878      	ldr	r0, [r7, #4]
   81e32:	4619      	mov	r1, r3
   81e34:	4b24      	ldr	r3, [pc, #144]	; (81ec8 <usart_serial_putchar+0xb0>)
   81e36:	4798      	blx	r3
   81e38:	4603      	mov	r3, r0
   81e3a:	2b00      	cmp	r3, #0
   81e3c:	d1f7      	bne.n	81e2e <usart_serial_putchar+0x16>
		return 1;
   81e3e:	2301      	movs	r3, #1
   81e40:	e03c      	b.n	81ebc <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81e42:	687b      	ldr	r3, [r7, #4]
   81e44:	4a21      	ldr	r2, [pc, #132]	; (81ecc <usart_serial_putchar+0xb4>)
   81e46:	4293      	cmp	r3, r2
   81e48:	d10a      	bne.n	81e60 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81e4a:	bf00      	nop
   81e4c:	78fb      	ldrb	r3, [r7, #3]
   81e4e:	6878      	ldr	r0, [r7, #4]
   81e50:	4619      	mov	r1, r3
   81e52:	4b1f      	ldr	r3, [pc, #124]	; (81ed0 <usart_serial_putchar+0xb8>)
   81e54:	4798      	blx	r3
   81e56:	4603      	mov	r3, r0
   81e58:	2b00      	cmp	r3, #0
   81e5a:	d1f7      	bne.n	81e4c <usart_serial_putchar+0x34>
		return 1;
   81e5c:	2301      	movs	r3, #1
   81e5e:	e02d      	b.n	81ebc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81e60:	687b      	ldr	r3, [r7, #4]
   81e62:	4a1c      	ldr	r2, [pc, #112]	; (81ed4 <usart_serial_putchar+0xbc>)
   81e64:	4293      	cmp	r3, r2
   81e66:	d10a      	bne.n	81e7e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81e68:	bf00      	nop
   81e6a:	78fb      	ldrb	r3, [r7, #3]
   81e6c:	6878      	ldr	r0, [r7, #4]
   81e6e:	4619      	mov	r1, r3
   81e70:	4b17      	ldr	r3, [pc, #92]	; (81ed0 <usart_serial_putchar+0xb8>)
   81e72:	4798      	blx	r3
   81e74:	4603      	mov	r3, r0
   81e76:	2b00      	cmp	r3, #0
   81e78:	d1f7      	bne.n	81e6a <usart_serial_putchar+0x52>
		return 1;
   81e7a:	2301      	movs	r3, #1
   81e7c:	e01e      	b.n	81ebc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81e7e:	687b      	ldr	r3, [r7, #4]
   81e80:	4a15      	ldr	r2, [pc, #84]	; (81ed8 <usart_serial_putchar+0xc0>)
   81e82:	4293      	cmp	r3, r2
   81e84:	d10a      	bne.n	81e9c <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81e86:	bf00      	nop
   81e88:	78fb      	ldrb	r3, [r7, #3]
   81e8a:	6878      	ldr	r0, [r7, #4]
   81e8c:	4619      	mov	r1, r3
   81e8e:	4b10      	ldr	r3, [pc, #64]	; (81ed0 <usart_serial_putchar+0xb8>)
   81e90:	4798      	blx	r3
   81e92:	4603      	mov	r3, r0
   81e94:	2b00      	cmp	r3, #0
   81e96:	d1f7      	bne.n	81e88 <usart_serial_putchar+0x70>
		return 1;
   81e98:	2301      	movs	r3, #1
   81e9a:	e00f      	b.n	81ebc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81e9c:	687b      	ldr	r3, [r7, #4]
   81e9e:	4a0f      	ldr	r2, [pc, #60]	; (81edc <usart_serial_putchar+0xc4>)
   81ea0:	4293      	cmp	r3, r2
   81ea2:	d10a      	bne.n	81eba <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81ea4:	bf00      	nop
   81ea6:	78fb      	ldrb	r3, [r7, #3]
   81ea8:	6878      	ldr	r0, [r7, #4]
   81eaa:	4619      	mov	r1, r3
   81eac:	4b08      	ldr	r3, [pc, #32]	; (81ed0 <usart_serial_putchar+0xb8>)
   81eae:	4798      	blx	r3
   81eb0:	4603      	mov	r3, r0
   81eb2:	2b00      	cmp	r3, #0
   81eb4:	d1f7      	bne.n	81ea6 <usart_serial_putchar+0x8e>
		return 1;
   81eb6:	2301      	movs	r3, #1
   81eb8:	e000      	b.n	81ebc <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81eba:	2300      	movs	r3, #0
}
   81ebc:	4618      	mov	r0, r3
   81ebe:	3708      	adds	r7, #8
   81ec0:	46bd      	mov	sp, r7
   81ec2:	bd80      	pop	{r7, pc}
   81ec4:	400e0800 	.word	0x400e0800
   81ec8:	00081851 	.word	0x00081851
   81ecc:	40098000 	.word	0x40098000
   81ed0:	00081ab1 	.word	0x00081ab1
   81ed4:	4009c000 	.word	0x4009c000
   81ed8:	400a0000 	.word	0x400a0000
   81edc:	400a4000 	.word	0x400a4000

00081ee0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81ee0:	b580      	push	{r7, lr}
   81ee2:	b084      	sub	sp, #16
   81ee4:	af00      	add	r7, sp, #0
   81ee6:	6078      	str	r0, [r7, #4]
   81ee8:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81eea:	2300      	movs	r3, #0
   81eec:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81eee:	687b      	ldr	r3, [r7, #4]
   81ef0:	4a2a      	ldr	r2, [pc, #168]	; (81f9c <usart_serial_getchar+0xbc>)
   81ef2:	4293      	cmp	r3, r2
   81ef4:	d107      	bne.n	81f06 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81ef6:	bf00      	nop
   81ef8:	6878      	ldr	r0, [r7, #4]
   81efa:	6839      	ldr	r1, [r7, #0]
   81efc:	4b28      	ldr	r3, [pc, #160]	; (81fa0 <usart_serial_getchar+0xc0>)
   81efe:	4798      	blx	r3
   81f00:	4603      	mov	r3, r0
   81f02:	2b00      	cmp	r3, #0
   81f04:	d1f8      	bne.n	81ef8 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81f06:	687b      	ldr	r3, [r7, #4]
   81f08:	4a26      	ldr	r2, [pc, #152]	; (81fa4 <usart_serial_getchar+0xc4>)
   81f0a:	4293      	cmp	r3, r2
   81f0c:	d10d      	bne.n	81f2a <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81f0e:	bf00      	nop
   81f10:	f107 030c 	add.w	r3, r7, #12
   81f14:	6878      	ldr	r0, [r7, #4]
   81f16:	4619      	mov	r1, r3
   81f18:	4b23      	ldr	r3, [pc, #140]	; (81fa8 <usart_serial_getchar+0xc8>)
   81f1a:	4798      	blx	r3
   81f1c:	4603      	mov	r3, r0
   81f1e:	2b00      	cmp	r3, #0
   81f20:	d1f6      	bne.n	81f10 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81f22:	68fb      	ldr	r3, [r7, #12]
   81f24:	b2da      	uxtb	r2, r3
   81f26:	683b      	ldr	r3, [r7, #0]
   81f28:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81f2a:	687b      	ldr	r3, [r7, #4]
   81f2c:	4a1f      	ldr	r2, [pc, #124]	; (81fac <usart_serial_getchar+0xcc>)
   81f2e:	4293      	cmp	r3, r2
   81f30:	d10d      	bne.n	81f4e <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81f32:	bf00      	nop
   81f34:	f107 030c 	add.w	r3, r7, #12
   81f38:	6878      	ldr	r0, [r7, #4]
   81f3a:	4619      	mov	r1, r3
   81f3c:	4b1a      	ldr	r3, [pc, #104]	; (81fa8 <usart_serial_getchar+0xc8>)
   81f3e:	4798      	blx	r3
   81f40:	4603      	mov	r3, r0
   81f42:	2b00      	cmp	r3, #0
   81f44:	d1f6      	bne.n	81f34 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81f46:	68fb      	ldr	r3, [r7, #12]
   81f48:	b2da      	uxtb	r2, r3
   81f4a:	683b      	ldr	r3, [r7, #0]
   81f4c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81f4e:	687b      	ldr	r3, [r7, #4]
   81f50:	4a17      	ldr	r2, [pc, #92]	; (81fb0 <usart_serial_getchar+0xd0>)
   81f52:	4293      	cmp	r3, r2
   81f54:	d10d      	bne.n	81f72 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81f56:	bf00      	nop
   81f58:	f107 030c 	add.w	r3, r7, #12
   81f5c:	6878      	ldr	r0, [r7, #4]
   81f5e:	4619      	mov	r1, r3
   81f60:	4b11      	ldr	r3, [pc, #68]	; (81fa8 <usart_serial_getchar+0xc8>)
   81f62:	4798      	blx	r3
   81f64:	4603      	mov	r3, r0
   81f66:	2b00      	cmp	r3, #0
   81f68:	d1f6      	bne.n	81f58 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81f6a:	68fb      	ldr	r3, [r7, #12]
   81f6c:	b2da      	uxtb	r2, r3
   81f6e:	683b      	ldr	r3, [r7, #0]
   81f70:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81f72:	687b      	ldr	r3, [r7, #4]
   81f74:	4a0f      	ldr	r2, [pc, #60]	; (81fb4 <usart_serial_getchar+0xd4>)
   81f76:	4293      	cmp	r3, r2
   81f78:	d10d      	bne.n	81f96 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81f7a:	bf00      	nop
   81f7c:	f107 030c 	add.w	r3, r7, #12
   81f80:	6878      	ldr	r0, [r7, #4]
   81f82:	4619      	mov	r1, r3
   81f84:	4b08      	ldr	r3, [pc, #32]	; (81fa8 <usart_serial_getchar+0xc8>)
   81f86:	4798      	blx	r3
   81f88:	4603      	mov	r3, r0
   81f8a:	2b00      	cmp	r3, #0
   81f8c:	d1f6      	bne.n	81f7c <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81f8e:	68fb      	ldr	r3, [r7, #12]
   81f90:	b2da      	uxtb	r2, r3
   81f92:	683b      	ldr	r3, [r7, #0]
   81f94:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81f96:	3710      	adds	r7, #16
   81f98:	46bd      	mov	sp, r7
   81f9a:	bd80      	pop	{r7, pc}
   81f9c:	400e0800 	.word	0x400e0800
   81fa0:	00081881 	.word	0x00081881
   81fa4:	40098000 	.word	0x40098000
   81fa8:	00081ae5 	.word	0x00081ae5
   81fac:	4009c000 	.word	0x4009c000
   81fb0:	400a0000 	.word	0x400a0000
   81fb4:	400a4000 	.word	0x400a4000

00081fb8 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81fb8:	b580      	push	{r7, lr}
   81fba:	b082      	sub	sp, #8
   81fbc:	af00      	add	r7, sp, #0
   81fbe:	6078      	str	r0, [r7, #4]
   81fc0:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81fc2:	4a0f      	ldr	r2, [pc, #60]	; (82000 <stdio_serial_init+0x48>)
   81fc4:	687b      	ldr	r3, [r7, #4]
   81fc6:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81fc8:	4b0e      	ldr	r3, [pc, #56]	; (82004 <stdio_serial_init+0x4c>)
   81fca:	4a0f      	ldr	r2, [pc, #60]	; (82008 <stdio_serial_init+0x50>)
   81fcc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81fce:	4b0f      	ldr	r3, [pc, #60]	; (8200c <stdio_serial_init+0x54>)
   81fd0:	4a0f      	ldr	r2, [pc, #60]	; (82010 <stdio_serial_init+0x58>)
   81fd2:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81fd4:	6878      	ldr	r0, [r7, #4]
   81fd6:	6839      	ldr	r1, [r7, #0]
   81fd8:	4b0e      	ldr	r3, [pc, #56]	; (82014 <stdio_serial_init+0x5c>)
   81fda:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81fdc:	4b0e      	ldr	r3, [pc, #56]	; (82018 <stdio_serial_init+0x60>)
   81fde:	681b      	ldr	r3, [r3, #0]
   81fe0:	689b      	ldr	r3, [r3, #8]
   81fe2:	4618      	mov	r0, r3
   81fe4:	2100      	movs	r1, #0
   81fe6:	4b0d      	ldr	r3, [pc, #52]	; (8201c <stdio_serial_init+0x64>)
   81fe8:	4798      	blx	r3
	setbuf(stdin, NULL);
   81fea:	4b0b      	ldr	r3, [pc, #44]	; (82018 <stdio_serial_init+0x60>)
   81fec:	681b      	ldr	r3, [r3, #0]
   81fee:	685b      	ldr	r3, [r3, #4]
   81ff0:	4618      	mov	r0, r3
   81ff2:	2100      	movs	r1, #0
   81ff4:	4b09      	ldr	r3, [pc, #36]	; (8201c <stdio_serial_init+0x64>)
   81ff6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   81ff8:	3708      	adds	r7, #8
   81ffa:	46bd      	mov	sp, r7
   81ffc:	bd80      	pop	{r7, pc}
   81ffe:	bf00      	nop
   82000:	2007120c 	.word	0x2007120c
   82004:	20071208 	.word	0x20071208
   82008:	00081e19 	.word	0x00081e19
   8200c:	20071204 	.word	0x20071204
   82010:	00081ee1 	.word	0x00081ee1
   82014:	00081ce1 	.word	0x00081ce1
   82018:	20070830 	.word	0x20070830
   8201c:	00083edd 	.word	0x00083edd

00082020 <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   82020:	b580      	push	{r7, lr}
   82022:	b082      	sub	sp, #8
   82024:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   82026:	4b28      	ldr	r3, [pc, #160]	; (820c8 <UART_Handler+0xa8>)
   82028:	781b      	ldrb	r3, [r3, #0]
   8202a:	3301      	adds	r3, #1
   8202c:	b2da      	uxtb	r2, r3
   8202e:	4b26      	ldr	r3, [pc, #152]	; (820c8 <UART_Handler+0xa8>)
   82030:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   82032:	4b26      	ldr	r3, [pc, #152]	; (820cc <UART_Handler+0xac>)
   82034:	695b      	ldr	r3, [r3, #20]
   82036:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   82038:	687b      	ldr	r3, [r7, #4]
   8203a:	f003 0301 	and.w	r3, r3, #1
   8203e:	2b00      	cmp	r3, #0
   82040:	d03e      	beq.n	820c0 <UART_Handler+0xa0>
	{
		rx_val=UART->UART_RHR;
   82042:	4b22      	ldr	r3, [pc, #136]	; (820cc <UART_Handler+0xac>)
   82044:	699b      	ldr	r3, [r3, #24]
   82046:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   82048:	78fb      	ldrb	r3, [r7, #3]
   8204a:	337f      	adds	r3, #127	; 0x7f
   8204c:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   8204e:	4b1e      	ldr	r3, [pc, #120]	; (820c8 <UART_Handler+0xa8>)
   82050:	781b      	ldrb	r3, [r3, #0]
   82052:	2b01      	cmp	r3, #1
   82054:	d103      	bne.n	8205e <UART_Handler+0x3e>
		{
			rc=rx_val;
   82056:	78fb      	ldrb	r3, [r7, #3]
   82058:	4a1d      	ldr	r2, [pc, #116]	; (820d0 <UART_Handler+0xb0>)
   8205a:	6013      	str	r3, [r2, #0]
   8205c:	e009      	b.n	82072 <UART_Handler+0x52>
		}
		else if (cnt==2)
   8205e:	4b1a      	ldr	r3, [pc, #104]	; (820c8 <UART_Handler+0xa8>)
   82060:	781b      	ldrb	r3, [r3, #0]
   82062:	2b02      	cmp	r3, #2
   82064:	d105      	bne.n	82072 <UART_Handler+0x52>
		{
			bic_rc=rx_val;
   82066:	78fb      	ldrb	r3, [r7, #3]
   82068:	4a1a      	ldr	r2, [pc, #104]	; (820d4 <UART_Handler+0xb4>)
   8206a:	6013      	str	r3, [r2, #0]
			cnt=0;
   8206c:	4b16      	ldr	r3, [pc, #88]	; (820c8 <UART_Handler+0xa8>)
   8206e:	2200      	movs	r2, #0
   82070:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   82072:	4b17      	ldr	r3, [pc, #92]	; (820d0 <UART_Handler+0xb0>)
   82074:	681a      	ldr	r2, [r3, #0]
   82076:	4b17      	ldr	r3, [pc, #92]	; (820d4 <UART_Handler+0xb4>)
   82078:	681b      	ldr	r3, [r3, #0]
   8207a:	4817      	ldr	r0, [pc, #92]	; (820d8 <UART_Handler+0xb8>)
   8207c:	4611      	mov	r1, r2
   8207e:	461a      	mov	r2, r3
   82080:	4b16      	ldr	r3, [pc, #88]	; (820dc <UART_Handler+0xbc>)
   82082:	4798      	blx	r3
		tc_stop(TC0,0);
   82084:	4816      	ldr	r0, [pc, #88]	; (820e0 <UART_Handler+0xc0>)
   82086:	2100      	movs	r1, #0
   82088:	4b16      	ldr	r3, [pc, #88]	; (820e4 <UART_Handler+0xc4>)
   8208a:	4798      	blx	r3
		tc_stop(TC0,1);
   8208c:	4814      	ldr	r0, [pc, #80]	; (820e0 <UART_Handler+0xc0>)
   8208e:	2101      	movs	r1, #1
   82090:	4b14      	ldr	r3, [pc, #80]	; (820e4 <UART_Handler+0xc4>)
   82092:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   82094:	4b0e      	ldr	r3, [pc, #56]	; (820d0 <UART_Handler+0xb0>)
   82096:	681b      	ldr	r3, [r3, #0]
   82098:	4811      	ldr	r0, [pc, #68]	; (820e0 <UART_Handler+0xc0>)
   8209a:	2100      	movs	r1, #0
   8209c:	461a      	mov	r2, r3
   8209e:	4b12      	ldr	r3, [pc, #72]	; (820e8 <UART_Handler+0xc8>)
   820a0:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   820a2:	4b0c      	ldr	r3, [pc, #48]	; (820d4 <UART_Handler+0xb4>)
   820a4:	681b      	ldr	r3, [r3, #0]
   820a6:	480e      	ldr	r0, [pc, #56]	; (820e0 <UART_Handler+0xc0>)
   820a8:	2101      	movs	r1, #1
   820aa:	461a      	mov	r2, r3
   820ac:	4b0e      	ldr	r3, [pc, #56]	; (820e8 <UART_Handler+0xc8>)
   820ae:	4798      	blx	r3
		tc_start(TC0,0);
   820b0:	480b      	ldr	r0, [pc, #44]	; (820e0 <UART_Handler+0xc0>)
   820b2:	2100      	movs	r1, #0
   820b4:	4b0d      	ldr	r3, [pc, #52]	; (820ec <UART_Handler+0xcc>)
   820b6:	4798      	blx	r3
		tc_start(TC0,1);
   820b8:	4809      	ldr	r0, [pc, #36]	; (820e0 <UART_Handler+0xc0>)
   820ba:	2101      	movs	r1, #1
   820bc:	4b0b      	ldr	r3, [pc, #44]	; (820ec <UART_Handler+0xcc>)
   820be:	4798      	blx	r3
	}
}
   820c0:	3708      	adds	r7, #8
   820c2:	46bd      	mov	sp, r7
   820c4:	bd80      	pop	{r7, pc}
   820c6:	bf00      	nop
   820c8:	20070cf4 	.word	0x20070cf4
   820cc:	400e0800 	.word	0x400e0800
   820d0:	20070ce0 	.word	0x20070ce0
   820d4:	20071228 	.word	0x20071228
   820d8:	00086da4 	.word	0x00086da4
   820dc:	00083e19 	.word	0x00083e19
   820e0:	40080000 	.word	0x40080000
   820e4:	000816f9 	.word	0x000816f9
   820e8:	00081719 	.word	0x00081719
   820ec:	000816d9 	.word	0x000816d9

000820f0 <main>:
int main (void)
{
   820f0:	b590      	push	{r4, r7, lr}
   820f2:	b087      	sub	sp, #28
   820f4:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   820f6:	4b1a      	ldr	r3, [pc, #104]	; (82160 <main+0x70>)
   820f8:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   820fa:	4b1a      	ldr	r3, [pc, #104]	; (82164 <main+0x74>)
   820fc:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   820fe:	2008      	movs	r0, #8
   82100:	4b19      	ldr	r3, [pc, #100]	; (82168 <main+0x78>)
   82102:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   82104:	200b      	movs	r0, #11
   82106:	4b19      	ldr	r3, [pc, #100]	; (8216c <main+0x7c>)
   82108:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   8210a:	4b19      	ldr	r3, [pc, #100]	; (82170 <main+0x80>)
   8210c:	2250      	movs	r2, #80	; 0x50
   8210e:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   82110:	4b17      	ldr	r3, [pc, #92]	; (82170 <main+0x80>)
   82112:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82116:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   82118:	4b15      	ldr	r3, [pc, #84]	; (82170 <main+0x80>)
   8211a:	2246      	movs	r2, #70	; 0x46
   8211c:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   8211e:	4b15      	ldr	r3, [pc, #84]	; (82174 <main+0x84>)
   82120:	f44f 7240 	mov.w	r2, #768	; 0x300
   82124:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   82126:	4812      	ldr	r0, [pc, #72]	; (82170 <main+0x80>)
   82128:	4913      	ldr	r1, [pc, #76]	; (82178 <main+0x88>)
   8212a:	4b14      	ldr	r3, [pc, #80]	; (8217c <main+0x8c>)
   8212c:	4798      	blx	r3
	uart_enable(UART);
   8212e:	4810      	ldr	r0, [pc, #64]	; (82170 <main+0x80>)
   82130:	4b13      	ldr	r3, [pc, #76]	; (82180 <main+0x90>)
   82132:	4798      	blx	r3
	uart_enable_rx(UART);
   82134:	480e      	ldr	r0, [pc, #56]	; (82170 <main+0x80>)
   82136:	4b13      	ldr	r3, [pc, #76]	; (82184 <main+0x94>)
   82138:	4798      	blx	r3
	uart_enable_tx(UART);
   8213a:	480d      	ldr	r0, [pc, #52]	; (82170 <main+0x80>)
   8213c:	4b12      	ldr	r3, [pc, #72]	; (82188 <main+0x98>)
   8213e:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   82140:	2008      	movs	r0, #8
   82142:	4b12      	ldr	r3, [pc, #72]	; (8218c <main+0x9c>)
   82144:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   82146:	2008      	movs	r0, #8
   82148:	4b11      	ldr	r3, [pc, #68]	; (82190 <main+0xa0>)
   8214a:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   8214c:	2008      	movs	r0, #8
   8214e:	2100      	movs	r1, #0
   82150:	4b10      	ldr	r3, [pc, #64]	; (82194 <main+0xa4>)
   82152:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   82154:	2008      	movs	r0, #8
   82156:	4b10      	ldr	r3, [pc, #64]	; (82198 <main+0xa8>)
   82158:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   8215a:	2300      	movs	r3, #0
   8215c:	617b      	str	r3, [r7, #20]
   8215e:	e020      	b.n	821a2 <main+0xb2>
   82160:	00082dd1 	.word	0x00082dd1
   82164:	0008154d 	.word	0x0008154d
   82168:	00081cc9 	.word	0x00081cc9
   8216c:	000835c5 	.word	0x000835c5
   82170:	400e0800 	.word	0x400e0800
   82174:	400e0e00 	.word	0x400e0e00
   82178:	00086d94 	.word	0x00086d94
   8217c:	00081fb9 	.word	0x00081fb9
   82180:	0008181d 	.word	0x0008181d
   82184:	00081805 	.word	0x00081805
   82188:	000817ed 	.word	0x000817ed
   8218c:	00081b69 	.word	0x00081b69
   82190:	00081b9d 	.word	0x00081b9d
   82194:	00081bd1 	.word	0x00081bd1
   82198:	00081b39 	.word	0x00081b39
   8219c:	697b      	ldr	r3, [r7, #20]
   8219e:	3301      	adds	r3, #1
   821a0:	617b      	str	r3, [r7, #20]
   821a2:	697b      	ldr	r3, [r7, #20]
   821a4:	4a91      	ldr	r2, [pc, #580]	; (823ec <main+0x2fc>)
   821a6:	4293      	cmp	r3, r2
   821a8:	ddf8      	ble.n	8219c <main+0xac>
	{
		;
	}
	printf("welcome\n");
   821aa:	4891      	ldr	r0, [pc, #580]	; (823f0 <main+0x300>)
   821ac:	4b91      	ldr	r3, [pc, #580]	; (823f4 <main+0x304>)
   821ae:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   821b0:	200b      	movs	r0, #11
   821b2:	4b91      	ldr	r3, [pc, #580]	; (823f8 <main+0x308>)
   821b4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   821b6:	200c      	movs	r0, #12
   821b8:	4b8f      	ldr	r3, [pc, #572]	; (823f8 <main+0x308>)
   821ba:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   821bc:	200d      	movs	r0, #13
   821be:	4b8e      	ldr	r3, [pc, #568]	; (823f8 <main+0x308>)
   821c0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   821c2:	200e      	movs	r0, #14
   821c4:	4b8c      	ldr	r3, [pc, #560]	; (823f8 <main+0x308>)
   821c6:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   821c8:	4b8c      	ldr	r3, [pc, #560]	; (823fc <main+0x30c>)
   821ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821cc:	0e5b      	lsrs	r3, r3, #25
   821ce:	f003 0301 	and.w	r3, r3, #1
   821d2:	4a8b      	ldr	r2, [pc, #556]	; (82400 <main+0x310>)
   821d4:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   821d6:	4b8b      	ldr	r3, [pc, #556]	; (82404 <main+0x314>)
   821d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821da:	0f1b      	lsrs	r3, r3, #28
   821dc:	f003 0301 	and.w	r3, r3, #1
   821e0:	4a89      	ldr	r2, [pc, #548]	; (82408 <main+0x318>)
   821e2:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   821e4:	4b87      	ldr	r3, [pc, #540]	; (82404 <main+0x314>)
   821e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821e8:	0e9b      	lsrs	r3, r3, #26
   821ea:	f003 0301 	and.w	r3, r3, #1
   821ee:	4a87      	ldr	r2, [pc, #540]	; (8240c <main+0x31c>)
   821f0:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   821f2:	4b85      	ldr	r3, [pc, #532]	; (82408 <main+0x318>)
   821f4:	681b      	ldr	r3, [r3, #0]
   821f6:	4a86      	ldr	r2, [pc, #536]	; (82410 <main+0x320>)
   821f8:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   821fa:	4b84      	ldr	r3, [pc, #528]	; (8240c <main+0x31c>)
   821fc:	681b      	ldr	r3, [r3, #0]
   821fe:	4a85      	ldr	r2, [pc, #532]	; (82414 <main+0x324>)
   82200:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   82202:	4b85      	ldr	r3, [pc, #532]	; (82418 <main+0x328>)
   82204:	613b      	str	r3, [r7, #16]
	uint32_t secondcount = (1312499/2  + 328124)  ;   //
   82206:	4b85      	ldr	r3, [pc, #532]	; (8241c <main+0x32c>)
   82208:	60fb      	str	r3, [r7, #12]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	uint32_t stepcount1 = 6562;
   8220a:	f641 13a2 	movw	r3, #6562	; 0x19a2
   8220e:	60bb      	str	r3, [r7, #8]
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   82210:	4883      	ldr	r0, [pc, #524]	; (82420 <main+0x330>)
   82212:	2101      	movs	r1, #1
   82214:	4b83      	ldr	r3, [pc, #524]	; (82424 <main+0x334>)
   82216:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   82218:	4b78      	ldr	r3, [pc, #480]	; (823fc <main+0x30c>)
   8221a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8221e:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   82220:	4b76      	ldr	r3, [pc, #472]	; (823fc <main+0x30c>)
   82222:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82226:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   82228:	4b7f      	ldr	r3, [pc, #508]	; (82428 <main+0x338>)
   8222a:	781b      	ldrb	r3, [r3, #0]
   8222c:	2b01      	cmp	r3, #1
   8222e:	d057      	beq.n	822e0 <main+0x1f0>
		{
			
		
				if(flag_1==0)
   82230:	4b7e      	ldr	r3, [pc, #504]	; (8242c <main+0x33c>)
   82232:	681b      	ldr	r3, [r3, #0]
   82234:	2b00      	cmp	r3, #0
   82236:	d125      	bne.n	82284 <main+0x194>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   82238:	4b7d      	ldr	r3, [pc, #500]	; (82430 <main+0x340>)
   8223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8223c:	0b9b      	lsrs	r3, r3, #14
   8223e:	f003 0301 	and.w	r3, r3, #1
   82242:	4a6f      	ldr	r2, [pc, #444]	; (82400 <main+0x310>)
   82244:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   82246:	4b6e      	ldr	r3, [pc, #440]	; (82400 <main+0x310>)
   82248:	681b      	ldr	r3, [r3, #0]
   8224a:	2b01      	cmp	r3, #1
   8224c:	d116      	bne.n	8227c <main+0x18c>
   8224e:	4b79      	ldr	r3, [pc, #484]	; (82434 <main+0x344>)
   82250:	681b      	ldr	r3, [r3, #0]
   82252:	2b00      	cmp	r3, #0
   82254:	d112      	bne.n	8227c <main+0x18c>
					{
						dummy_1++;
   82256:	4b78      	ldr	r3, [pc, #480]	; (82438 <main+0x348>)
   82258:	681b      	ldr	r3, [r3, #0]
   8225a:	3301      	adds	r3, #1
   8225c:	4a76      	ldr	r2, [pc, #472]	; (82438 <main+0x348>)
   8225e:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   82260:	4b75      	ldr	r3, [pc, #468]	; (82438 <main+0x348>)
   82262:	681b      	ldr	r3, [r3, #0]
   82264:	2b02      	cmp	r3, #2
   82266:	d109      	bne.n	8227c <main+0x18c>
						{
							tc_stop(TC0,0);
   82268:	4874      	ldr	r0, [pc, #464]	; (8243c <main+0x34c>)
   8226a:	2100      	movs	r1, #0
   8226c:	4b74      	ldr	r3, [pc, #464]	; (82440 <main+0x350>)
   8226e:	4798      	blx	r3
							dummy_1=0;
   82270:	4b71      	ldr	r3, [pc, #452]	; (82438 <main+0x348>)
   82272:	2200      	movs	r2, #0
   82274:	601a      	str	r2, [r3, #0]
							flag_1=1;
   82276:	4b6d      	ldr	r3, [pc, #436]	; (8242c <main+0x33c>)
   82278:	2201      	movs	r2, #1
   8227a:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   8227c:	4b60      	ldr	r3, [pc, #384]	; (82400 <main+0x310>)
   8227e:	681b      	ldr	r3, [r3, #0]
   82280:	4a6c      	ldr	r2, [pc, #432]	; (82434 <main+0x344>)
   82282:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   82284:	4b6f      	ldr	r3, [pc, #444]	; (82444 <main+0x354>)
   82286:	681b      	ldr	r3, [r3, #0]
   82288:	2b00      	cmp	r3, #0
   8228a:	d129      	bne.n	822e0 <main+0x1f0>
   8228c:	4b67      	ldr	r3, [pc, #412]	; (8242c <main+0x33c>)
   8228e:	681b      	ldr	r3, [r3, #0]
   82290:	2b01      	cmp	r3, #1
   82292:	d125      	bne.n	822e0 <main+0x1f0>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   82294:	4b66      	ldr	r3, [pc, #408]	; (82430 <main+0x340>)
   82296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82298:	0bdb      	lsrs	r3, r3, #15
   8229a:	f003 0301 	and.w	r3, r3, #1
   8229e:	4a5a      	ldr	r2, [pc, #360]	; (82408 <main+0x318>)
   822a0:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   822a2:	4b59      	ldr	r3, [pc, #356]	; (82408 <main+0x318>)
   822a4:	681b      	ldr	r3, [r3, #0]
   822a6:	2b01      	cmp	r3, #1
   822a8:	d116      	bne.n	822d8 <main+0x1e8>
   822aa:	4b59      	ldr	r3, [pc, #356]	; (82410 <main+0x320>)
   822ac:	681b      	ldr	r3, [r3, #0]
   822ae:	2b00      	cmp	r3, #0
   822b0:	d112      	bne.n	822d8 <main+0x1e8>
					{
						dummy_1b++;
   822b2:	4b65      	ldr	r3, [pc, #404]	; (82448 <main+0x358>)
   822b4:	681b      	ldr	r3, [r3, #0]
   822b6:	3301      	adds	r3, #1
   822b8:	4a63      	ldr	r2, [pc, #396]	; (82448 <main+0x358>)
   822ba:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   822bc:	4b62      	ldr	r3, [pc, #392]	; (82448 <main+0x358>)
   822be:	681b      	ldr	r3, [r3, #0]
   822c0:	2b02      	cmp	r3, #2
   822c2:	d109      	bne.n	822d8 <main+0x1e8>
						{
							tc_stop(TC0,1);
   822c4:	485d      	ldr	r0, [pc, #372]	; (8243c <main+0x34c>)
   822c6:	2101      	movs	r1, #1
   822c8:	4b5d      	ldr	r3, [pc, #372]	; (82440 <main+0x350>)
   822ca:	4798      	blx	r3
							dummy_1b=0;
   822cc:	4b5e      	ldr	r3, [pc, #376]	; (82448 <main+0x358>)
   822ce:	2200      	movs	r2, #0
   822d0:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   822d2:	4b5c      	ldr	r3, [pc, #368]	; (82444 <main+0x354>)
   822d4:	2201      	movs	r2, #1
   822d6:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   822d8:	4b4b      	ldr	r3, [pc, #300]	; (82408 <main+0x318>)
   822da:	681b      	ldr	r3, [r3, #0]
   822dc:	4a4c      	ldr	r2, [pc, #304]	; (82410 <main+0x320>)
   822de:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   822e0:	4b5a      	ldr	r3, [pc, #360]	; (8244c <main+0x35c>)
   822e2:	781b      	ldrb	r3, [r3, #0]
   822e4:	2b01      	cmp	r3, #1
   822e6:	d13d      	bne.n	82364 <main+0x274>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   822e8:	4b51      	ldr	r3, [pc, #324]	; (82430 <main+0x340>)
   822ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   822ec:	0b9b      	lsrs	r3, r3, #14
   822ee:	f003 0301 	and.w	r3, r3, #1
   822f2:	4a43      	ldr	r2, [pc, #268]	; (82400 <main+0x310>)
   822f4:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   822f6:	4b42      	ldr	r3, [pc, #264]	; (82400 <main+0x310>)
   822f8:	681b      	ldr	r3, [r3, #0]
   822fa:	2b01      	cmp	r3, #1
   822fc:	d10f      	bne.n	8231e <main+0x22e>
   822fe:	4b4d      	ldr	r3, [pc, #308]	; (82434 <main+0x344>)
   82300:	681b      	ldr	r3, [r3, #0]
   82302:	2b00      	cmp	r3, #0
   82304:	d10b      	bne.n	8231e <main+0x22e>
				{
					acid_count++;
   82306:	4b52      	ldr	r3, [pc, #328]	; (82450 <main+0x360>)
   82308:	681b      	ldr	r3, [r3, #0]
   8230a:	3301      	adds	r3, #1
   8230c:	4a50      	ldr	r2, [pc, #320]	; (82450 <main+0x360>)
   8230e:	6013      	str	r3, [r2, #0]
					acid_f_b = acid_count;
   82310:	4b4f      	ldr	r3, [pc, #316]	; (82450 <main+0x360>)
   82312:	681b      	ldr	r3, [r3, #0]
   82314:	4a4f      	ldr	r2, [pc, #316]	; (82454 <main+0x364>)
   82316:	6013      	str	r3, [r2, #0]
					TC1_cnt = 0;
   82318:	4b4f      	ldr	r3, [pc, #316]	; (82458 <main+0x368>)
   8231a:	2200      	movs	r2, #0
   8231c:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   8231e:	4b38      	ldr	r3, [pc, #224]	; (82400 <main+0x310>)
   82320:	681b      	ldr	r3, [r3, #0]
   82322:	4a44      	ldr	r2, [pc, #272]	; (82434 <main+0x344>)
   82324:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   82326:	4b42      	ldr	r3, [pc, #264]	; (82430 <main+0x340>)
   82328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8232a:	0bdb      	lsrs	r3, r3, #15
   8232c:	f003 0301 	and.w	r3, r3, #1
   82330:	4a35      	ldr	r2, [pc, #212]	; (82408 <main+0x318>)
   82332:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   82334:	4b34      	ldr	r3, [pc, #208]	; (82408 <main+0x318>)
   82336:	681b      	ldr	r3, [r3, #0]
   82338:	2b01      	cmp	r3, #1
   8233a:	d10f      	bne.n	8235c <main+0x26c>
   8233c:	4b34      	ldr	r3, [pc, #208]	; (82410 <main+0x320>)
   8233e:	681b      	ldr	r3, [r3, #0]
   82340:	2b00      	cmp	r3, #0
   82342:	d10b      	bne.n	8235c <main+0x26c>
				{
				      bicarb_count ++;
   82344:	4b45      	ldr	r3, [pc, #276]	; (8245c <main+0x36c>)
   82346:	681b      	ldr	r3, [r3, #0]
   82348:	3301      	adds	r3, #1
   8234a:	4a44      	ldr	r2, [pc, #272]	; (8245c <main+0x36c>)
   8234c:	6013      	str	r3, [r2, #0]
					  bicarb_f_b = bicarb_count;
   8234e:	4b43      	ldr	r3, [pc, #268]	; (8245c <main+0x36c>)
   82350:	681b      	ldr	r3, [r3, #0]
   82352:	4a43      	ldr	r2, [pc, #268]	; (82460 <main+0x370>)
   82354:	6013      	str	r3, [r2, #0]
				 TC2_cnt = 0;
   82356:	4b43      	ldr	r3, [pc, #268]	; (82464 <main+0x374>)
   82358:	2200      	movs	r2, #0
   8235a:	601a      	str	r2, [r3, #0]
				 
				}
				prev_status_bic= status_bic;
   8235c:	4b2a      	ldr	r3, [pc, #168]	; (82408 <main+0x318>)
   8235e:	681b      	ldr	r3, [r3, #0]
   82360:	4a2b      	ldr	r2, [pc, #172]	; (82410 <main+0x320>)
   82362:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1) && (OneSecFlag == 1)  )   // 
   82364:	4b40      	ldr	r3, [pc, #256]	; (82468 <main+0x378>)
   82366:	781b      	ldrb	r3, [r3, #0]
   82368:	b2db      	uxtb	r3, r3
   8236a:	2b01      	cmp	r3, #1
   8236c:	d13b      	bne.n	823e6 <main+0x2f6>
   8236e:	4b2f      	ldr	r3, [pc, #188]	; (8242c <main+0x33c>)
   82370:	681b      	ldr	r3, [r3, #0]
   82372:	2b01      	cmp	r3, #1
   82374:	d137      	bne.n	823e6 <main+0x2f6>
   82376:	4b33      	ldr	r3, [pc, #204]	; (82444 <main+0x354>)
   82378:	681b      	ldr	r3, [r3, #0]
   8237a:	2b01      	cmp	r3, #1
   8237c:	d133      	bne.n	823e6 <main+0x2f6>
   8237e:	4b3b      	ldr	r3, [pc, #236]	; (8246c <main+0x37c>)
   82380:	781b      	ldrb	r3, [r3, #0]
   82382:	2b01      	cmp	r3, #1
   82384:	d12f      	bne.n	823e6 <main+0x2f6>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   82386:	4b1f      	ldr	r3, [pc, #124]	; (82404 <main+0x314>)
   82388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8238a:	0e9b      	lsrs	r3, r3, #26
   8238c:	f003 0301 	and.w	r3, r3, #1
   82390:	4a1e      	ldr	r2, [pc, #120]	; (8240c <main+0x31c>)
   82392:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   82394:	4b1d      	ldr	r3, [pc, #116]	; (8240c <main+0x31c>)
   82396:	681b      	ldr	r3, [r3, #0]
   82398:	2b01      	cmp	r3, #1
   8239a:	d120      	bne.n	823de <main+0x2ee>
   8239c:	4b1d      	ldr	r3, [pc, #116]	; (82414 <main+0x324>)
   8239e:	681b      	ldr	r3, [r3, #0]
   823a0:	2b00      	cmp	r3, #0
   823a2:	d11c      	bne.n	823de <main+0x2ee>
			{
				stop_pump();
   823a4:	4b32      	ldr	r3, [pc, #200]	; (82470 <main+0x380>)
   823a6:	4798      	blx	r3
				Correction_Count++;
   823a8:	4b32      	ldr	r3, [pc, #200]	; (82474 <main+0x384>)
   823aa:	781b      	ldrb	r3, [r3, #0]
   823ac:	3301      	adds	r3, #1
   823ae:	b2da      	uxtb	r2, r3
   823b0:	4b30      	ldr	r3, [pc, #192]	; (82474 <main+0x384>)
   823b2:	701a      	strb	r2, [r3, #0]
// 					}
// 				}
// 				}
// 				}

				rc=Set_RC;
   823b4:	4b30      	ldr	r3, [pc, #192]	; (82478 <main+0x388>)
   823b6:	681b      	ldr	r3, [r3, #0]
   823b8:	4a30      	ldr	r2, [pc, #192]	; (8247c <main+0x38c>)
   823ba:	6013      	str	r3, [r2, #0]
				start_pump();
   823bc:	4b30      	ldr	r3, [pc, #192]	; (82480 <main+0x390>)
   823be:	4798      	blx	r3
				OneSecFlag = 0;
   823c0:	4b2a      	ldr	r3, [pc, #168]	; (8246c <main+0x37c>)
   823c2:	2200      	movs	r2, #0
   823c4:	701a      	strb	r2, [r3, #0]
				
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   823c6:	481d      	ldr	r0, [pc, #116]	; (8243c <main+0x34c>)
   823c8:	2102      	movs	r1, #2
   823ca:	221d      	movs	r2, #29
   823cc:	693b      	ldr	r3, [r7, #16]
   823ce:	4c2d      	ldr	r4, [pc, #180]	; (82484 <main+0x394>)
   823d0:	47a0      	blx	r4
				startTimer2(TC1,0,TC3_IRQn,secondcount);
   823d2:	482d      	ldr	r0, [pc, #180]	; (82488 <main+0x398>)
   823d4:	2100      	movs	r1, #0
   823d6:	221e      	movs	r2, #30
   823d8:	68fb      	ldr	r3, [r7, #12]
   823da:	4c2c      	ldr	r4, [pc, #176]	; (8248c <main+0x39c>)
   823dc:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   823de:	4b0b      	ldr	r3, [pc, #44]	; (8240c <main+0x31c>)
   823e0:	681b      	ldr	r3, [r3, #0]
   823e2:	4a0c      	ldr	r2, [pc, #48]	; (82414 <main+0x324>)
   823e4:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   823e6:	4b2a      	ldr	r3, [pc, #168]	; (82490 <main+0x3a0>)
   823e8:	781b      	ldrb	r3, [r3, #0]
   823ea:	e053      	b.n	82494 <main+0x3a4>
   823ec:	0001869f 	.word	0x0001869f
   823f0:	00086dac 	.word	0x00086dac
   823f4:	00083e19 	.word	0x00083e19
   823f8:	000835c5 	.word	0x000835c5
   823fc:	400e1000 	.word	0x400e1000
   82400:	20070cf8 	.word	0x20070cf8
   82404:	400e1200 	.word	0x400e1200
   82408:	20070cfc 	.word	0x20070cfc
   8240c:	20070d00 	.word	0x20070d00
   82410:	20070d04 	.word	0x20070d04
   82414:	20070d08 	.word	0x20070d08
   82418:	001406f3 	.word	0x001406f3
   8241c:	000f0535 	.word	0x000f0535
   82420:	400e0800 	.word	0x400e0800
   82424:	00081835 	.word	0x00081835
   82428:	20070cdc 	.word	0x20070cdc
   8242c:	20070d0c 	.word	0x20070d0c
   82430:	400e0e00 	.word	0x400e0e00
   82434:	20070d10 	.word	0x20070d10
   82438:	20070d14 	.word	0x20070d14
   8243c:	40080000 	.word	0x40080000
   82440:	000816f9 	.word	0x000816f9
   82444:	20070d18 	.word	0x20070d18
   82448:	20070d1c 	.word	0x20070d1c
   8244c:	20070ce9 	.word	0x20070ce9
   82450:	20070cec 	.word	0x20070cec
   82454:	20071200 	.word	0x20071200
   82458:	20070ca8 	.word	0x20070ca8
   8245c:	20070cf0 	.word	0x20070cf0
   82460:	20071202 	.word	0x20071202
   82464:	20070cac 	.word	0x20070cac
   82468:	20070cdd 	.word	0x20070cdd
   8246c:	20070cb8 	.word	0x20070cb8
   82470:	00082a1d 	.word	0x00082a1d
   82474:	20070ce8 	.word	0x20070ce8
   82478:	20070ce4 	.word	0x20070ce4
   8247c:	20070ce0 	.word	0x20070ce0
   82480:	0008286d 	.word	0x0008286d
   82484:	00081385 	.word	0x00081385
   82488:	40084000 	.word	0x40084000
   8248c:	000813f5 	.word	0x000813f5
   82490:	20070400 	.word	0x20070400
   82494:	2b05      	cmp	r3, #5
   82496:	f63f aec7 	bhi.w	82228 <main+0x138>
   8249a:	a201      	add	r2, pc, #4	; (adr r2, 824a0 <main+0x3b0>)
   8249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   824a0:	000824b9 	.word	0x000824b9
   824a4:	000824e9 	.word	0x000824e9
   824a8:	00082229 	.word	0x00082229
   824ac:	000824d3 	.word	0x000824d3
   824b0:	00082503 	.word	0x00082503
   824b4:	00082519 	.word	0x00082519
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   824b8:	4ba3      	ldr	r3, [pc, #652]	; (82748 <main+0x658>)
   824ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   824be:	601a      	str	r2, [r3, #0]
					start_acidpump();
   824c0:	4ba2      	ldr	r3, [pc, #648]	; (8274c <main+0x65c>)
   824c2:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   824c4:	4ba2      	ldr	r3, [pc, #648]	; (82750 <main+0x660>)
   824c6:	2203      	movs	r2, #3
   824c8:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   824ca:	4ba2      	ldr	r3, [pc, #648]	; (82754 <main+0x664>)
   824cc:	2200      	movs	r2, #0
   824ce:	701a      	strb	r2, [r3, #0]
				break;
   824d0:	e16f      	b.n	827b2 <main+0x6c2>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   824d2:	4ba1      	ldr	r3, [pc, #644]	; (82758 <main+0x668>)
   824d4:	681b      	ldr	r3, [r3, #0]
   824d6:	2b01      	cmp	r3, #1
   824d8:	d102      	bne.n	824e0 <main+0x3f0>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   824da:	4b9d      	ldr	r3, [pc, #628]	; (82750 <main+0x660>)
   824dc:	2201      	movs	r2, #1
   824de:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   824e0:	4b9c      	ldr	r3, [pc, #624]	; (82754 <main+0x664>)
   824e2:	2200      	movs	r2, #0
   824e4:	701a      	strb	r2, [r3, #0]
				break;
   824e6:	e164      	b.n	827b2 <main+0x6c2>
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   824e8:	4b9c      	ldr	r3, [pc, #624]	; (8275c <main+0x66c>)
   824ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   824ee:	601a      	str	r2, [r3, #0]
					start_bicarpump();
   824f0:	4b9b      	ldr	r3, [pc, #620]	; (82760 <main+0x670>)
   824f2:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   824f4:	4b96      	ldr	r3, [pc, #600]	; (82750 <main+0x660>)
   824f6:	2204      	movs	r2, #4
   824f8:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   824fa:	4b96      	ldr	r3, [pc, #600]	; (82754 <main+0x664>)
   824fc:	2200      	movs	r2, #0
   824fe:	701a      	strb	r2, [r3, #0]
				break;
   82500:	e157      	b.n	827b2 <main+0x6c2>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   82502:	4b98      	ldr	r3, [pc, #608]	; (82764 <main+0x674>)
   82504:	681b      	ldr	r3, [r3, #0]
   82506:	2b01      	cmp	r3, #1
   82508:	d102      	bne.n	82510 <main+0x420>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   8250a:	4b91      	ldr	r3, [pc, #580]	; (82750 <main+0x660>)
   8250c:	2205      	movs	r2, #5
   8250e:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   82510:	4b90      	ldr	r3, [pc, #576]	; (82754 <main+0x664>)
   82512:	2200      	movs	r2, #0
   82514:	701a      	strb	r2, [r3, #0]
				break;
   82516:	e14c      	b.n	827b2 <main+0x6c2>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   82518:	4b93      	ldr	r3, [pc, #588]	; (82768 <main+0x678>)
   8251a:	781b      	ldrb	r3, [r3, #0]
   8251c:	b2db      	uxtb	r3, r3
   8251e:	2b01      	cmp	r3, #1
   82520:	f040 8147 	bne.w	827b2 <main+0x6c2>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   82524:	4b91      	ldr	r3, [pc, #580]	; (8276c <main+0x67c>)
   82526:	781b      	ldrb	r3, [r3, #0]
   82528:	71fb      	strb	r3, [r7, #7]
						switch (dummy)
   8252a:	79fb      	ldrb	r3, [r7, #7]
   8252c:	3b01      	subs	r3, #1
   8252e:	2b12      	cmp	r3, #18
   82530:	f200 8134 	bhi.w	8279c <main+0x6ac>
   82534:	a201      	add	r2, pc, #4	; (adr r2, 8253c <main+0x44c>)
   82536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8253a:	bf00      	nop
   8253c:	000825e7 	.word	0x000825e7
   82540:	00082675 	.word	0x00082675
   82544:	00082737 	.word	0x00082737
   82548:	00082601 	.word	0x00082601
   8254c:	00082613 	.word	0x00082613
   82550:	0008261f 	.word	0x0008261f
   82554:	00082631 	.word	0x00082631
   82558:	000825a1 	.word	0x000825a1
   8255c:	000825c9 	.word	0x000825c9
   82560:	0008279d 	.word	0x0008279d
   82564:	0008279d 	.word	0x0008279d
   82568:	00082589 	.word	0x00082589
   8256c:	00082595 	.word	0x00082595
   82570:	0008279d 	.word	0x0008279d
   82574:	0008279d 	.word	0x0008279d
   82578:	0008279d 	.word	0x0008279d
   8257c:	0008279d 	.word	0x0008279d
   82580:	0008263d 	.word	0x0008263d
   82584:	0008266d 	.word	0x0008266d
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   82588:	4b6f      	ldr	r3, [pc, #444]	; (82748 <main+0x658>)
   8258a:	22d2      	movs	r2, #210	; 0xd2
   8258c:	601a      	str	r2, [r3, #0]
															start_acidpump();
   8258e:	4b6f      	ldr	r3, [pc, #444]	; (8274c <main+0x65c>)
   82590:	4798      	blx	r3
							
							break;
   82592:	e104      	b.n	8279e <main+0x6ae>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   82594:	4b71      	ldr	r3, [pc, #452]	; (8275c <main+0x66c>)
   82596:	22d2      	movs	r2, #210	; 0xd2
   82598:	601a      	str	r2, [r3, #0]
															start_bicarpump();
   8259a:	4b71      	ldr	r3, [pc, #452]	; (82760 <main+0x670>)
   8259c:	4798      	blx	r3
							
							break;
   8259e:	e0fe      	b.n	8279e <main+0x6ae>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
					feedcount_flag = 1; 
   825a0:	4b73      	ldr	r3, [pc, #460]	; (82770 <main+0x680>)
   825a2:	2201      	movs	r2, #1
   825a4:	701a      	strb	r2, [r3, #0]
								rc=210;
   825a6:	4b68      	ldr	r3, [pc, #416]	; (82748 <main+0x658>)
   825a8:	22d2      	movs	r2, #210	; 0xd2
   825aa:	601a      	str	r2, [r3, #0]
								bic_rc=210;
   825ac:	4b6b      	ldr	r3, [pc, #428]	; (8275c <main+0x66c>)
   825ae:	22d2      	movs	r2, #210	; 0xd2
   825b0:	601a      	str	r2, [r3, #0]
								start_acidpump();
   825b2:	4b66      	ldr	r3, [pc, #408]	; (8274c <main+0x65c>)
   825b4:	4798      	blx	r3
								start_bicarpump();
   825b6:	4b6a      	ldr	r3, [pc, #424]	; (82760 <main+0x670>)
   825b8:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   825ba:	4b65      	ldr	r3, [pc, #404]	; (82750 <main+0x660>)
   825bc:	2205      	movs	r2, #5
   825be:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   825c0:	4b6c      	ldr	r3, [pc, #432]	; (82774 <main+0x684>)
   825c2:	2201      	movs	r2, #1
   825c4:	701a      	strb	r2, [r3, #0]
							break;
   825c6:	e0ea      	b.n	8279e <main+0x6ae>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
							feedcount_flag = 0; 
   825c8:	4b69      	ldr	r3, [pc, #420]	; (82770 <main+0x680>)
   825ca:	2200      	movs	r2, #0
   825cc:	701a      	strb	r2, [r3, #0]
								stop_pump();
   825ce:	4b6a      	ldr	r3, [pc, #424]	; (82778 <main+0x688>)
   825d0:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   825d2:	4b5f      	ldr	r3, [pc, #380]	; (82750 <main+0x660>)
   825d4:	2205      	movs	r2, #5
   825d6:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   825d8:	4b5e      	ldr	r3, [pc, #376]	; (82754 <main+0x664>)
   825da:	2200      	movs	r2, #0
   825dc:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   825de:	4b65      	ldr	r3, [pc, #404]	; (82774 <main+0x684>)
   825e0:	2200      	movs	r2, #0
   825e2:	701a      	strb	r2, [r3, #0]
							break;
   825e4:	e0db      	b.n	8279e <main+0x6ae>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_1=0;
   825e6:	4b5c      	ldr	r3, [pc, #368]	; (82758 <main+0x668>)
   825e8:	2200      	movs	r2, #0
   825ea:	601a      	str	r2, [r3, #0]
							flag_1b=0;
   825ec:	4b5d      	ldr	r3, [pc, #372]	; (82764 <main+0x674>)
   825ee:	2200      	movs	r2, #0
   825f0:	601a      	str	r2, [r3, #0]
							flag_nrmal=0;
   825f2:	4b58      	ldr	r3, [pc, #352]	; (82754 <main+0x664>)
   825f4:	2200      	movs	r2, #0
   825f6:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   825f8:	4b55      	ldr	r3, [pc, #340]	; (82750 <main+0x660>)
   825fa:	2200      	movs	r2, #0
   825fc:	701a      	strb	r2, [r3, #0]
							break;
   825fe:	e0ce      	b.n	8279e <main+0x6ae>
							case PROP_START_DISINFECTION:
								rc=210;
   82600:	4b51      	ldr	r3, [pc, #324]	; (82748 <main+0x658>)
   82602:	22d2      	movs	r2, #210	; 0xd2
   82604:	601a      	str	r2, [r3, #0]
								start_acidpump();
   82606:	4b51      	ldr	r3, [pc, #324]	; (8274c <main+0x65c>)
   82608:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   8260a:	4b51      	ldr	r3, [pc, #324]	; (82750 <main+0x660>)
   8260c:	2205      	movs	r2, #5
   8260e:	701a      	strb	r2, [r3, #0]
							break;
   82610:	e0c5      	b.n	8279e <main+0x6ae>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   82612:	4b59      	ldr	r3, [pc, #356]	; (82778 <main+0x688>)
   82614:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82616:	4b4e      	ldr	r3, [pc, #312]	; (82750 <main+0x660>)
   82618:	2205      	movs	r2, #5
   8261a:	701a      	strb	r2, [r3, #0]
							break;
   8261c:	e0bf      	b.n	8279e <main+0x6ae>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   8261e:	4b4f      	ldr	r3, [pc, #316]	; (8275c <main+0x66c>)
   82620:	22d2      	movs	r2, #210	; 0xd2
   82622:	601a      	str	r2, [r3, #0]
								start_bicarpump();
   82624:	4b4e      	ldr	r3, [pc, #312]	; (82760 <main+0x670>)
   82626:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82628:	4b49      	ldr	r3, [pc, #292]	; (82750 <main+0x660>)
   8262a:	2205      	movs	r2, #5
   8262c:	701a      	strb	r2, [r3, #0]
							break;
   8262e:	e0b6      	b.n	8279e <main+0x6ae>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   82630:	4b51      	ldr	r3, [pc, #324]	; (82778 <main+0x688>)
   82632:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82634:	4b46      	ldr	r3, [pc, #280]	; (82750 <main+0x660>)
   82636:	2205      	movs	r2, #5
   82638:	701a      	strb	r2, [r3, #0]
							break;
   8263a:	e0b0      	b.n	8279e <main+0x6ae>
							
							case prop_BICAR_FEED_BACK:   //selftest bicar
							//   bic_rc = 210; 
							rc= 210;
   8263c:	4b42      	ldr	r3, [pc, #264]	; (82748 <main+0x658>)
   8263e:	22d2      	movs	r2, #210	; 0xd2
   82640:	601a      	str	r2, [r3, #0]
							bic_rc = 210;
   82642:	4b46      	ldr	r3, [pc, #280]	; (8275c <main+0x66c>)
   82644:	22d2      	movs	r2, #210	; 0xd2
   82646:	601a      	str	r2, [r3, #0]
							
							   feedcount_flag = 1; 
   82648:	4b49      	ldr	r3, [pc, #292]	; (82770 <main+0x680>)
   8264a:	2201      	movs	r2, #1
   8264c:	701a      	strb	r2, [r3, #0]
							   startTimer1(TC0,2,TC2_IRQn,stepcount);
   8264e:	484b      	ldr	r0, [pc, #300]	; (8277c <main+0x68c>)
   82650:	2102      	movs	r1, #2
   82652:	221d      	movs	r2, #29
   82654:	693b      	ldr	r3, [r7, #16]
   82656:	4c4a      	ldr	r4, [pc, #296]	; (82780 <main+0x690>)
   82658:	47a0      	blx	r4
							    start_pump();
   8265a:	4b4a      	ldr	r3, [pc, #296]	; (82784 <main+0x694>)
   8265c:	4798      	blx	r3
						
							   flag_nrmal=0;
   8265e:	4b3d      	ldr	r3, [pc, #244]	; (82754 <main+0x664>)
   82660:	2200      	movs	r2, #0
   82662:	701a      	strb	r2, [r3, #0]
							   state_3 = CPU3_STANDBY;
   82664:	4b3a      	ldr	r3, [pc, #232]	; (82750 <main+0x660>)
   82666:	2205      	movs	r2, #5
   82668:	701a      	strb	r2, [r3, #0]
							break;
   8266a:	e098      	b.n	8279e <main+0x6ae>
							case prop_BICAR_FEED_BACK_STATUS:
						//	uint8_t acid_feed_back_counter = 0;
					//		        bicarb_f_b_counter = bicarb_count;
					//				acid_feed_back_counter = acid_count;
					SV_put_sensor_data(&sv_sys_statbuffer);
   8266c:	4846      	ldr	r0, [pc, #280]	; (82788 <main+0x698>)
   8266e:	4b47      	ldr	r3, [pc, #284]	; (8278c <main+0x69c>)
   82670:	4798      	blx	r3
// 								stop_pump();
// 									flag_1=0;
// 									flag_1b=0;
// 									flag_nrmal=0;
// 									state_3 = CPU3_STANDBY;
							break;
   82672:	e094      	b.n	8279e <main+0x6ae>
							case PROP_START_MIXING:
							OneSecFlag = 1 ;
   82674:	4b46      	ldr	r3, [pc, #280]	; (82790 <main+0x6a0>)
   82676:	2201      	movs	r2, #1
   82678:	701a      	strb	r2, [r3, #0]
								switch(User_setConductivity)
   8267a:	4b46      	ldr	r3, [pc, #280]	; (82794 <main+0x6a4>)
   8267c:	881b      	ldrh	r3, [r3, #0]
   8267e:	3b87      	subs	r3, #135	; 0x87
   82680:	2b06      	cmp	r3, #6
   82682:	d842      	bhi.n	8270a <main+0x61a>
   82684:	a201      	add	r2, pc, #4	; (adr r2, 8268c <main+0x59c>)
   82686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8268a:	bf00      	nop
   8268c:	000826a9 	.word	0x000826a9
   82690:	000826b7 	.word	0x000826b7
   82694:	000826c5 	.word	0x000826c5
   82698:	000826d3 	.word	0x000826d3
   8269c:	000826e1 	.word	0x000826e1
   826a0:	000826ef 	.word	0x000826ef
   826a4:	000826fd 	.word	0x000826fd
									{
										case 135:
										Set_RC= 199;
   826a8:	4b3b      	ldr	r3, [pc, #236]	; (82798 <main+0x6a8>)
   826aa:	22c7      	movs	r2, #199	; 0xc7
   826ac:	601a      	str	r2, [r3, #0]
										bic_rc = 199;
   826ae:	4b2b      	ldr	r3, [pc, #172]	; (8275c <main+0x66c>)
   826b0:	22c7      	movs	r2, #199	; 0xc7
   826b2:	601a      	str	r2, [r3, #0]
										break;
   826b4:	e029      	b.n	8270a <main+0x61a>
										
										case 136:
										Set_RC= 196;
   826b6:	4b38      	ldr	r3, [pc, #224]	; (82798 <main+0x6a8>)
   826b8:	22c4      	movs	r2, #196	; 0xc4
   826ba:	601a      	str	r2, [r3, #0]
										bic_rc = 196;
   826bc:	4b27      	ldr	r3, [pc, #156]	; (8275c <main+0x66c>)
   826be:	22c4      	movs	r2, #196	; 0xc4
   826c0:	601a      	str	r2, [r3, #0]
										break;
   826c2:	e022      	b.n	8270a <main+0x61a>
										
										case 137:
										Set_RC= 193;
   826c4:	4b34      	ldr	r3, [pc, #208]	; (82798 <main+0x6a8>)
   826c6:	22c1      	movs	r2, #193	; 0xc1
   826c8:	601a      	str	r2, [r3, #0]
										bic_rc = 193;
   826ca:	4b24      	ldr	r3, [pc, #144]	; (8275c <main+0x66c>)
   826cc:	22c1      	movs	r2, #193	; 0xc1
   826ce:	601a      	str	r2, [r3, #0]
										break;
   826d0:	e01b      	b.n	8270a <main+0x61a>
										
										case 138:
										Set_RC= 190;
   826d2:	4b31      	ldr	r3, [pc, #196]	; (82798 <main+0x6a8>)
   826d4:	22be      	movs	r2, #190	; 0xbe
   826d6:	601a      	str	r2, [r3, #0]
										bic_rc = 190;
   826d8:	4b20      	ldr	r3, [pc, #128]	; (8275c <main+0x66c>)
   826da:	22be      	movs	r2, #190	; 0xbe
   826dc:	601a      	str	r2, [r3, #0]
										break;
   826de:	e014      	b.n	8270a <main+0x61a>
										
										case 139:
										Set_RC= 187;
   826e0:	4b2d      	ldr	r3, [pc, #180]	; (82798 <main+0x6a8>)
   826e2:	22bb      	movs	r2, #187	; 0xbb
   826e4:	601a      	str	r2, [r3, #0]
										bic_rc = 187;
   826e6:	4b1d      	ldr	r3, [pc, #116]	; (8275c <main+0x66c>)
   826e8:	22bb      	movs	r2, #187	; 0xbb
   826ea:	601a      	str	r2, [r3, #0]
										break;
   826ec:	e00d      	b.n	8270a <main+0x61a>
										
										case 140:
										Set_RC= 184;
   826ee:	4b2a      	ldr	r3, [pc, #168]	; (82798 <main+0x6a8>)
   826f0:	22b8      	movs	r2, #184	; 0xb8
   826f2:	601a      	str	r2, [r3, #0]
										bic_rc = 184;
   826f4:	4b19      	ldr	r3, [pc, #100]	; (8275c <main+0x66c>)
   826f6:	22b8      	movs	r2, #184	; 0xb8
   826f8:	601a      	str	r2, [r3, #0]
										break;
   826fa:	e006      	b.n	8270a <main+0x61a>
										
										case 141:
										Set_RC= 181;
   826fc:	4b26      	ldr	r3, [pc, #152]	; (82798 <main+0x6a8>)
   826fe:	22b5      	movs	r2, #181	; 0xb5
   82700:	601a      	str	r2, [r3, #0]
										bic_rc = 181;
   82702:	4b16      	ldr	r3, [pc, #88]	; (8275c <main+0x66c>)
   82704:	22b5      	movs	r2, #181	; 0xb5
   82706:	601a      	str	r2, [r3, #0]
										break;
   82708:	bf00      	nop
										// 												break;
												
														
									}
						
							feedcount_flag = 1; // test - to be removed
   8270a:	4b19      	ldr	r3, [pc, #100]	; (82770 <main+0x680>)
   8270c:	2201      	movs	r2, #1
   8270e:	701a      	strb	r2, [r3, #0]
							rc = Set_RC;
   82710:	4b21      	ldr	r3, [pc, #132]	; (82798 <main+0x6a8>)
   82712:	681b      	ldr	r3, [r3, #0]
   82714:	4a0c      	ldr	r2, [pc, #48]	; (82748 <main+0x658>)
   82716:	6013      	str	r3, [r2, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   82718:	4818      	ldr	r0, [pc, #96]	; (8277c <main+0x68c>)
   8271a:	2102      	movs	r1, #2
   8271c:	221d      	movs	r2, #29
   8271e:	693b      	ldr	r3, [r7, #16]
   82720:	4c17      	ldr	r4, [pc, #92]	; (82780 <main+0x690>)
   82722:	47a0      	blx	r4
						
// 								start_acidpump();
// 								start_bicarpump();

								start_pump();
   82724:	4b17      	ldr	r3, [pc, #92]	; (82784 <main+0x694>)
   82726:	4798      	blx	r3
								flag_nrmal=1;
   82728:	4b0a      	ldr	r3, [pc, #40]	; (82754 <main+0x664>)
   8272a:	2201      	movs	r2, #1
   8272c:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   8272e:	4b08      	ldr	r3, [pc, #32]	; (82750 <main+0x660>)
   82730:	2205      	movs	r2, #5
   82732:	701a      	strb	r2, [r3, #0]
							break;
   82734:	e033      	b.n	8279e <main+0x6ae>
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   82736:	4b10      	ldr	r3, [pc, #64]	; (82778 <main+0x688>)
   82738:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   8273a:	4b05      	ldr	r3, [pc, #20]	; (82750 <main+0x660>)
   8273c:	2205      	movs	r2, #5
   8273e:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82740:	4b04      	ldr	r3, [pc, #16]	; (82754 <main+0x664>)
   82742:	2200      	movs	r2, #0
   82744:	701a      	strb	r2, [r3, #0]
							break;
   82746:	e02a      	b.n	8279e <main+0x6ae>
   82748:	20070ce0 	.word	0x20070ce0
   8274c:	000827c1 	.word	0x000827c1
   82750:	20070400 	.word	0x20070400
   82754:	20070cdd 	.word	0x20070cdd
   82758:	20070d0c 	.word	0x20070d0c
   8275c:	20071228 	.word	0x20071228
   82760:	00082981 	.word	0x00082981
   82764:	20070d18 	.word	0x20070d18
   82768:	20070dfc 	.word	0x20070dfc
   8276c:	20070c94 	.word	0x20070c94
   82770:	20070ce9 	.word	0x20070ce9
   82774:	20070cdc 	.word	0x20070cdc
   82778:	00082a1d 	.word	0x00082a1d
   8277c:	40080000 	.word	0x40080000
   82780:	00081385 	.word	0x00081385
   82784:	0008286d 	.word	0x0008286d
   82788:	2007121c 	.word	0x2007121c
   8278c:	00081485 	.word	0x00081485
   82790:	20070cb8 	.word	0x20070cb8
   82794:	20070dd6 	.word	0x20070dd6
   82798:	20070ce4 	.word	0x20070ce4
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   8279c:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   8279e:	4b05      	ldr	r3, [pc, #20]	; (827b4 <main+0x6c4>)
   827a0:	2200      	movs	r2, #0
   827a2:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   827a4:	4b04      	ldr	r3, [pc, #16]	; (827b8 <main+0x6c8>)
   827a6:	2200      	movs	r2, #0
   827a8:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   827aa:	4b04      	ldr	r3, [pc, #16]	; (827bc <main+0x6cc>)
   827ac:	2200      	movs	r2, #0
   827ae:	601a      	str	r2, [r3, #0]
				break;
   827b0:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   827b2:	e539      	b.n	82228 <main+0x138>
   827b4:	20070c94 	.word	0x20070c94
   827b8:	20070dfc 	.word	0x20070dfc
   827bc:	20070c8e 	.word	0x20070c8e

000827c0 <start_acidpump>:
	}


void start_acidpump()
{
   827c0:	b598      	push	{r3, r4, r7, lr}
   827c2:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   827c4:	4b1f      	ldr	r3, [pc, #124]	; (82844 <start_acidpump+0x84>)
   827c6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   827ca:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   827cc:	4b1e      	ldr	r3, [pc, #120]	; (82848 <start_acidpump+0x88>)
   827ce:	2203      	movs	r2, #3
   827d0:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   827d2:	4b1e      	ldr	r3, [pc, #120]	; (8284c <start_acidpump+0x8c>)
   827d4:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   827d8:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   827da:	4b1b      	ldr	r3, [pc, #108]	; (82848 <start_acidpump+0x88>)
   827dc:	4a1c      	ldr	r2, [pc, #112]	; (82850 <start_acidpump+0x90>)
   827de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   827e2:	4b1a      	ldr	r3, [pc, #104]	; (8284c <start_acidpump+0x8c>)
   827e4:	4a1a      	ldr	r2, [pc, #104]	; (82850 <start_acidpump+0x90>)
   827e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   827ea:	4b17      	ldr	r3, [pc, #92]	; (82848 <start_acidpump+0x88>)
   827ec:	2203      	movs	r2, #3
   827ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   827f2:	4b15      	ldr	r3, [pc, #84]	; (82848 <start_acidpump+0x88>)
   827f4:	220c      	movs	r2, #12
   827f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   827fa:	4b14      	ldr	r3, [pc, #80]	; (8284c <start_acidpump+0x8c>)
   827fc:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82800:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   82804:	4b11      	ldr	r3, [pc, #68]	; (8284c <start_acidpump+0x8c>)
   82806:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   8280a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   8280e:	4a0e      	ldr	r2, [pc, #56]	; (82848 <start_acidpump+0x88>)
   82810:	4b10      	ldr	r3, [pc, #64]	; (82854 <start_acidpump+0x94>)
   82812:	681b      	ldr	r3, [r3, #0]
   82814:	4910      	ldr	r1, [pc, #64]	; (82858 <start_acidpump+0x98>)
   82816:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   8281a:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   8281c:	4a0b      	ldr	r2, [pc, #44]	; (8284c <start_acidpump+0x8c>)
   8281e:	4b0d      	ldr	r3, [pc, #52]	; (82854 <start_acidpump+0x94>)
   82820:	681b      	ldr	r3, [r3, #0]
   82822:	490d      	ldr	r1, [pc, #52]	; (82858 <start_acidpump+0x98>)
   82824:	00db      	lsls	r3, r3, #3
   82826:	440b      	add	r3, r1
   82828:	685b      	ldr	r3, [r3, #4]
   8282a:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   8282c:	2001      	movs	r0, #1
   8282e:	4b0b      	ldr	r3, [pc, #44]	; (8285c <start_acidpump+0x9c>)
   82830:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);
   82832:	4b0b      	ldr	r3, [pc, #44]	; (82860 <start_acidpump+0xa0>)
   82834:	681b      	ldr	r3, [r3, #0]
   82836:	480b      	ldr	r0, [pc, #44]	; (82864 <start_acidpump+0xa4>)
   82838:	2100      	movs	r1, #0
   8283a:	221b      	movs	r2, #27
   8283c:	4c0a      	ldr	r4, [pc, #40]	; (82868 <start_acidpump+0xa8>)
   8283e:	47a0      	blx	r4
}
   82840:	bd98      	pop	{r3, r4, r7, pc}
   82842:	bf00      	nop
   82844:	400e0e00 	.word	0x400e0e00
   82848:	400e1400 	.word	0x400e1400
   8284c:	400e1200 	.word	0x400e1200
   82850:	50494f00 	.word	0x50494f00
   82854:	20070cd4 	.word	0x20070cd4
   82858:	20070000 	.word	0x20070000
   8285c:	00081465 	.word	0x00081465
   82860:	20070ce0 	.word	0x20070ce0
   82864:	40080000 	.word	0x40080000
   82868:	000812a5 	.word	0x000812a5

0008286c <start_pump>:


	
void start_pump()
{
   8286c:	b598      	push	{r3, r4, r7, lr}
   8286e:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   82870:	4b37      	ldr	r3, [pc, #220]	; (82950 <start_pump+0xe4>)
   82872:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   82876:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   82878:	4b36      	ldr	r3, [pc, #216]	; (82954 <start_pump+0xe8>)
   8287a:	2203      	movs	r2, #3
   8287c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   8287e:	4b36      	ldr	r3, [pc, #216]	; (82958 <start_pump+0xec>)
   82880:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82884:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   82886:	4b33      	ldr	r3, [pc, #204]	; (82954 <start_pump+0xe8>)
   82888:	4a34      	ldr	r2, [pc, #208]	; (8295c <start_pump+0xf0>)
   8288a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   8288e:	4b32      	ldr	r3, [pc, #200]	; (82958 <start_pump+0xec>)
   82890:	4a32      	ldr	r2, [pc, #200]	; (8295c <start_pump+0xf0>)
   82892:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   82896:	4b2f      	ldr	r3, [pc, #188]	; (82954 <start_pump+0xe8>)
   82898:	2203      	movs	r2, #3
   8289a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   8289e:	4b2d      	ldr	r3, [pc, #180]	; (82954 <start_pump+0xe8>)
   828a0:	220c      	movs	r2, #12
   828a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   828a6:	4b2c      	ldr	r3, [pc, #176]	; (82958 <start_pump+0xec>)
   828a8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   828ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   828b0:	4b29      	ldr	r3, [pc, #164]	; (82958 <start_pump+0xec>)
   828b2:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   828b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   828ba:	4a26      	ldr	r2, [pc, #152]	; (82954 <start_pump+0xe8>)
   828bc:	4b28      	ldr	r3, [pc, #160]	; (82960 <start_pump+0xf4>)
   828be:	681b      	ldr	r3, [r3, #0]
   828c0:	4928      	ldr	r1, [pc, #160]	; (82964 <start_pump+0xf8>)
   828c2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   828c6:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   828c8:	4a23      	ldr	r2, [pc, #140]	; (82958 <start_pump+0xec>)
   828ca:	4b25      	ldr	r3, [pc, #148]	; (82960 <start_pump+0xf4>)
   828cc:	681b      	ldr	r3, [r3, #0]
   828ce:	4925      	ldr	r1, [pc, #148]	; (82964 <start_pump+0xf8>)
   828d0:	00db      	lsls	r3, r3, #3
   828d2:	440b      	add	r3, r1
   828d4:	685b      	ldr	r3, [r3, #4]
   828d6:	6393      	str	r3, [r2, #56]	; 0x38
	
	
	
	PIOD->PIO_WPMR	= 0x50494F00;
   828d8:	4b1e      	ldr	r3, [pc, #120]	; (82954 <start_pump+0xe8>)
   828da:	4a20      	ldr	r2, [pc, #128]	; (8295c <start_pump+0xf0>)
   828dc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   828e0:	4b1d      	ldr	r3, [pc, #116]	; (82958 <start_pump+0xec>)
   828e2:	4a1e      	ldr	r2, [pc, #120]	; (8295c <start_pump+0xf0>)
   828e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   828e8:	4b1a      	ldr	r3, [pc, #104]	; (82954 <start_pump+0xe8>)
   828ea:	220c      	movs	r2, #12
   828ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR = 0x000000003;
   828f0:	4b18      	ldr	r3, [pc, #96]	; (82954 <start_pump+0xe8>)
   828f2:	2203      	movs	r2, #3
   828f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   828f8:	4b17      	ldr	r3, [pc, #92]	; (82958 <start_pump+0xec>)
   828fa:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   828fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   82902:	4b15      	ldr	r3, [pc, #84]	; (82958 <start_pump+0xec>)
   82904:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82908:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOB->PIO_CODR  = 0x00204000;			// brake clear
   8290c:	4b16      	ldr	r3, [pc, #88]	; (82968 <start_pump+0xfc>)
   8290e:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   82912:	635a      	str	r2, [r3, #52]	; 0x34
			
	PIOD->PIO_ODSR = array_bicar[count].dir;
   82914:	4a0f      	ldr	r2, [pc, #60]	; (82954 <start_pump+0xe8>)
   82916:	4b12      	ldr	r3, [pc, #72]	; (82960 <start_pump+0xf4>)
   82918:	681b      	ldr	r3, [r3, #0]
   8291a:	4914      	ldr	r1, [pc, #80]	; (8296c <start_pump+0x100>)
   8291c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82920:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_bicar[count].AB;
   82922:	4a0d      	ldr	r2, [pc, #52]	; (82958 <start_pump+0xec>)
   82924:	4b0e      	ldr	r3, [pc, #56]	; (82960 <start_pump+0xf4>)
   82926:	681b      	ldr	r3, [r3, #0]
   82928:	4910      	ldr	r1, [pc, #64]	; (8296c <start_pump+0x100>)
   8292a:	00db      	lsls	r3, r3, #3
   8292c:	440b      	add	r3, r1
   8292e:	685b      	ldr	r3, [r3, #4]
   82930:	6393      	str	r3, [r2, #56]	; 0x38
			
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   82932:	2001      	movs	r0, #1
   82934:	4b0e      	ldr	r3, [pc, #56]	; (82970 <start_pump+0x104>)
   82936:	4798      	blx	r3
	cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   82938:	2002      	movs	r0, #2
   8293a:	4b0d      	ldr	r3, [pc, #52]	; (82970 <start_pump+0x104>)
   8293c:	4798      	blx	r3
	
	
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   8293e:	4b0d      	ldr	r3, [pc, #52]	; (82974 <start_pump+0x108>)
   82940:	681b      	ldr	r3, [r3, #0]
   82942:	480d      	ldr	r0, [pc, #52]	; (82978 <start_pump+0x10c>)
   82944:	2100      	movs	r1, #0
   82946:	221b      	movs	r2, #27
   82948:	4c0c      	ldr	r4, [pc, #48]	; (8297c <start_pump+0x110>)
   8294a:	47a0      	blx	r4
}
   8294c:	bd98      	pop	{r3, r4, r7, pc}
   8294e:	bf00      	nop
   82950:	400e0e00 	.word	0x400e0e00
   82954:	400e1400 	.word	0x400e1400
   82958:	400e1200 	.word	0x400e1200
   8295c:	50494f00 	.word	0x50494f00
   82960:	20070cd4 	.word	0x20070cd4
   82964:	20070000 	.word	0x20070000
   82968:	400e1000 	.word	0x400e1000
   8296c:	20070200 	.word	0x20070200
   82970:	00081465 	.word	0x00081465
   82974:	20070ce0 	.word	0x20070ce0
   82978:	40080000 	.word	0x40080000
   8297c:	000812a5 	.word	0x000812a5

00082980 <start_bicarpump>:


void start_bicarpump()
{
   82980:	b598      	push	{r3, r4, r7, lr}
   82982:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   82984:	4b1b      	ldr	r3, [pc, #108]	; (829f4 <start_bicarpump+0x74>)
   82986:	4a1c      	ldr	r2, [pc, #112]	; (829f8 <start_bicarpump+0x78>)
   82988:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   8298c:	4b1b      	ldr	r3, [pc, #108]	; (829fc <start_bicarpump+0x7c>)
   8298e:	4a1a      	ldr	r2, [pc, #104]	; (829f8 <start_bicarpump+0x78>)
   82990:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   82994:	4b17      	ldr	r3, [pc, #92]	; (829f4 <start_bicarpump+0x74>)
   82996:	220c      	movs	r2, #12
   82998:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   8299c:	4b15      	ldr	r3, [pc, #84]	; (829f4 <start_bicarpump+0x74>)
   8299e:	2203      	movs	r2, #3
   829a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   829a4:	4b15      	ldr	r3, [pc, #84]	; (829fc <start_bicarpump+0x7c>)
   829a6:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   829aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   829ae:	4b13      	ldr	r3, [pc, #76]	; (829fc <start_bicarpump+0x7c>)
   829b0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   829b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   829b8:	4b11      	ldr	r3, [pc, #68]	; (82a00 <start_bicarpump+0x80>)
   829ba:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   829be:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   829c0:	4a0c      	ldr	r2, [pc, #48]	; (829f4 <start_bicarpump+0x74>)
   829c2:	4b10      	ldr	r3, [pc, #64]	; (82a04 <start_bicarpump+0x84>)
   829c4:	681b      	ldr	r3, [r3, #0]
   829c6:	4910      	ldr	r1, [pc, #64]	; (82a08 <start_bicarpump+0x88>)
   829c8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   829cc:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   829ce:	4a0b      	ldr	r2, [pc, #44]	; (829fc <start_bicarpump+0x7c>)
   829d0:	4b0c      	ldr	r3, [pc, #48]	; (82a04 <start_bicarpump+0x84>)
   829d2:	681b      	ldr	r3, [r3, #0]
   829d4:	490c      	ldr	r1, [pc, #48]	; (82a08 <start_bicarpump+0x88>)
   829d6:	00db      	lsls	r3, r3, #3
   829d8:	440b      	add	r3, r1
   829da:	685b      	ldr	r3, [r3, #4]
   829dc:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   829de:	2002      	movs	r0, #2
   829e0:	4b0a      	ldr	r3, [pc, #40]	; (82a0c <start_bicarpump+0x8c>)
   829e2:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   829e4:	4b0a      	ldr	r3, [pc, #40]	; (82a10 <start_bicarpump+0x90>)
   829e6:	681b      	ldr	r3, [r3, #0]
   829e8:	480a      	ldr	r0, [pc, #40]	; (82a14 <start_bicarpump+0x94>)
   829ea:	2101      	movs	r1, #1
   829ec:	221c      	movs	r2, #28
   829ee:	4c0a      	ldr	r4, [pc, #40]	; (82a18 <start_bicarpump+0x98>)
   829f0:	47a0      	blx	r4
}
   829f2:	bd98      	pop	{r3, r4, r7, pc}
   829f4:	400e1400 	.word	0x400e1400
   829f8:	50494f00 	.word	0x50494f00
   829fc:	400e1200 	.word	0x400e1200
   82a00:	400e1000 	.word	0x400e1000
   82a04:	20070cd8 	.word	0x20070cd8
   82a08:	20070200 	.word	0x20070200
   82a0c:	00081465 	.word	0x00081465
   82a10:	20071228 	.word	0x20071228
   82a14:	40080000 	.word	0x40080000
   82a18:	00081315 	.word	0x00081315

00082a1c <stop_pump>:

void stop_pump()
{
   82a1c:	b580      	push	{r7, lr}
   82a1e:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   82a20:	2000      	movs	r0, #0
   82a22:	4b06      	ldr	r3, [pc, #24]	; (82a3c <stop_pump+0x20>)
   82a24:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   82a26:	2001      	movs	r0, #1
   82a28:	4b04      	ldr	r3, [pc, #16]	; (82a3c <stop_pump+0x20>)
   82a2a:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   82a2c:	2003      	movs	r0, #3
   82a2e:	4b03      	ldr	r3, [pc, #12]	; (82a3c <stop_pump+0x20>)
   82a30:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   82a32:	2004      	movs	r0, #4
   82a34:	4b01      	ldr	r3, [pc, #4]	; (82a3c <stop_pump+0x20>)
   82a36:	4798      	blx	r3
}
   82a38:	bd80      	pop	{r7, pc}
   82a3a:	bf00      	nop
   82a3c:	000815b9 	.word	0x000815b9

00082a40 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82a40:	b580      	push	{r7, lr}
   82a42:	b082      	sub	sp, #8
   82a44:	af00      	add	r7, sp, #0
   82a46:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82a48:	687b      	ldr	r3, [r7, #4]
   82a4a:	2b07      	cmp	r3, #7
   82a4c:	d830      	bhi.n	82ab0 <osc_enable+0x70>
   82a4e:	a201      	add	r2, pc, #4	; (adr r2, 82a54 <osc_enable+0x14>)
   82a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82a54:	00082ab1 	.word	0x00082ab1
   82a58:	00082a75 	.word	0x00082a75
   82a5c:	00082a7d 	.word	0x00082a7d
   82a60:	00082a85 	.word	0x00082a85
   82a64:	00082a8d 	.word	0x00082a8d
   82a68:	00082a95 	.word	0x00082a95
   82a6c:	00082a9d 	.word	0x00082a9d
   82a70:	00082aa7 	.word	0x00082aa7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82a74:	2000      	movs	r0, #0
   82a76:	4b10      	ldr	r3, [pc, #64]	; (82ab8 <osc_enable+0x78>)
   82a78:	4798      	blx	r3
		break;
   82a7a:	e019      	b.n	82ab0 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82a7c:	2001      	movs	r0, #1
   82a7e:	4b0e      	ldr	r3, [pc, #56]	; (82ab8 <osc_enable+0x78>)
   82a80:	4798      	blx	r3
		break;
   82a82:	e015      	b.n	82ab0 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82a84:	2000      	movs	r0, #0
   82a86:	4b0d      	ldr	r3, [pc, #52]	; (82abc <osc_enable+0x7c>)
   82a88:	4798      	blx	r3
		break;
   82a8a:	e011      	b.n	82ab0 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82a8c:	2010      	movs	r0, #16
   82a8e:	4b0b      	ldr	r3, [pc, #44]	; (82abc <osc_enable+0x7c>)
   82a90:	4798      	blx	r3
		break;
   82a92:	e00d      	b.n	82ab0 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82a94:	2020      	movs	r0, #32
   82a96:	4b09      	ldr	r3, [pc, #36]	; (82abc <osc_enable+0x7c>)
   82a98:	4798      	blx	r3
		break;
   82a9a:	e009      	b.n	82ab0 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82a9c:	2000      	movs	r0, #0
   82a9e:	213e      	movs	r1, #62	; 0x3e
   82aa0:	4b07      	ldr	r3, [pc, #28]	; (82ac0 <osc_enable+0x80>)
   82aa2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82aa4:	e004      	b.n	82ab0 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82aa6:	2001      	movs	r0, #1
   82aa8:	213e      	movs	r1, #62	; 0x3e
   82aaa:	4b05      	ldr	r3, [pc, #20]	; (82ac0 <osc_enable+0x80>)
   82aac:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82aae:	bf00      	nop
	}
}
   82ab0:	3708      	adds	r7, #8
   82ab2:	46bd      	mov	sp, r7
   82ab4:	bd80      	pop	{r7, pc}
   82ab6:	bf00      	nop
   82ab8:	000833d5 	.word	0x000833d5
   82abc:	00083441 	.word	0x00083441
   82ac0:	000834e1 	.word	0x000834e1

00082ac4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   82ac4:	b580      	push	{r7, lr}
   82ac6:	b082      	sub	sp, #8
   82ac8:	af00      	add	r7, sp, #0
   82aca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82acc:	687b      	ldr	r3, [r7, #4]
   82ace:	2b07      	cmp	r3, #7
   82ad0:	d826      	bhi.n	82b20 <osc_is_ready+0x5c>
   82ad2:	a201      	add	r2, pc, #4	; (adr r2, 82ad8 <osc_is_ready+0x14>)
   82ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82ad8:	00082af9 	.word	0x00082af9
   82adc:	00082afd 	.word	0x00082afd
   82ae0:	00082afd 	.word	0x00082afd
   82ae4:	00082b0f 	.word	0x00082b0f
   82ae8:	00082b0f 	.word	0x00082b0f
   82aec:	00082b0f 	.word	0x00082b0f
   82af0:	00082b0f 	.word	0x00082b0f
   82af4:	00082b0f 	.word	0x00082b0f
	case OSC_SLCK_32K_RC:
		return 1;
   82af8:	2301      	movs	r3, #1
   82afa:	e012      	b.n	82b22 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   82afc:	4b0b      	ldr	r3, [pc, #44]	; (82b2c <osc_is_ready+0x68>)
   82afe:	4798      	blx	r3
   82b00:	4603      	mov	r3, r0
   82b02:	2b00      	cmp	r3, #0
   82b04:	bf14      	ite	ne
   82b06:	2301      	movne	r3, #1
   82b08:	2300      	moveq	r3, #0
   82b0a:	b2db      	uxtb	r3, r3
   82b0c:	e009      	b.n	82b22 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82b0e:	4b08      	ldr	r3, [pc, #32]	; (82b30 <osc_is_ready+0x6c>)
   82b10:	4798      	blx	r3
   82b12:	4603      	mov	r3, r0
   82b14:	2b00      	cmp	r3, #0
   82b16:	bf14      	ite	ne
   82b18:	2301      	movne	r3, #1
   82b1a:	2300      	moveq	r3, #0
   82b1c:	b2db      	uxtb	r3, r3
   82b1e:	e000      	b.n	82b22 <osc_is_ready+0x5e>
	}

	return 0;
   82b20:	2300      	movs	r3, #0
}
   82b22:	4618      	mov	r0, r3
   82b24:	3708      	adds	r7, #8
   82b26:	46bd      	mov	sp, r7
   82b28:	bd80      	pop	{r7, pc}
   82b2a:	bf00      	nop
   82b2c:	0008340d 	.word	0x0008340d
   82b30:	00083559 	.word	0x00083559

00082b34 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82b34:	b480      	push	{r7}
   82b36:	b083      	sub	sp, #12
   82b38:	af00      	add	r7, sp, #0
   82b3a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82b3c:	687b      	ldr	r3, [r7, #4]
   82b3e:	2b07      	cmp	r3, #7
   82b40:	d825      	bhi.n	82b8e <osc_get_rate+0x5a>
   82b42:	a201      	add	r2, pc, #4	; (adr r2, 82b48 <osc_get_rate+0x14>)
   82b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b48:	00082b69 	.word	0x00082b69
   82b4c:	00082b6f 	.word	0x00082b6f
   82b50:	00082b75 	.word	0x00082b75
   82b54:	00082b7b 	.word	0x00082b7b
   82b58:	00082b7f 	.word	0x00082b7f
   82b5c:	00082b83 	.word	0x00082b83
   82b60:	00082b87 	.word	0x00082b87
   82b64:	00082b8b 	.word	0x00082b8b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82b68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82b6c:	e010      	b.n	82b90 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82b72:	e00d      	b.n	82b90 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82b78:	e00a      	b.n	82b90 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82b7a:	4b08      	ldr	r3, [pc, #32]	; (82b9c <osc_get_rate+0x68>)
   82b7c:	e008      	b.n	82b90 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82b7e:	4b08      	ldr	r3, [pc, #32]	; (82ba0 <osc_get_rate+0x6c>)
   82b80:	e006      	b.n	82b90 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82b82:	4b08      	ldr	r3, [pc, #32]	; (82ba4 <osc_get_rate+0x70>)
   82b84:	e004      	b.n	82b90 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82b86:	4b07      	ldr	r3, [pc, #28]	; (82ba4 <osc_get_rate+0x70>)
   82b88:	e002      	b.n	82b90 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82b8a:	4b06      	ldr	r3, [pc, #24]	; (82ba4 <osc_get_rate+0x70>)
   82b8c:	e000      	b.n	82b90 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82b8e:	2300      	movs	r3, #0
}
   82b90:	4618      	mov	r0, r3
   82b92:	370c      	adds	r7, #12
   82b94:	46bd      	mov	sp, r7
   82b96:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b9a:	4770      	bx	lr
   82b9c:	003d0900 	.word	0x003d0900
   82ba0:	007a1200 	.word	0x007a1200
   82ba4:	00b71b00 	.word	0x00b71b00

00082ba8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82ba8:	b580      	push	{r7, lr}
   82baa:	b082      	sub	sp, #8
   82bac:	af00      	add	r7, sp, #0
   82bae:	4603      	mov	r3, r0
   82bb0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82bb2:	bf00      	nop
   82bb4:	79fb      	ldrb	r3, [r7, #7]
   82bb6:	4618      	mov	r0, r3
   82bb8:	4b05      	ldr	r3, [pc, #20]	; (82bd0 <osc_wait_ready+0x28>)
   82bba:	4798      	blx	r3
   82bbc:	4603      	mov	r3, r0
   82bbe:	f083 0301 	eor.w	r3, r3, #1
   82bc2:	b2db      	uxtb	r3, r3
   82bc4:	2b00      	cmp	r3, #0
   82bc6:	d1f5      	bne.n	82bb4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82bc8:	3708      	adds	r7, #8
   82bca:	46bd      	mov	sp, r7
   82bcc:	bd80      	pop	{r7, pc}
   82bce:	bf00      	nop
   82bd0:	00082ac5 	.word	0x00082ac5

00082bd4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82bd4:	b580      	push	{r7, lr}
   82bd6:	b086      	sub	sp, #24
   82bd8:	af00      	add	r7, sp, #0
   82bda:	60f8      	str	r0, [r7, #12]
   82bdc:	607a      	str	r2, [r7, #4]
   82bde:	603b      	str	r3, [r7, #0]
   82be0:	460b      	mov	r3, r1
   82be2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82be4:	687b      	ldr	r3, [r7, #4]
   82be6:	2b00      	cmp	r3, #0
   82be8:	d107      	bne.n	82bfa <pll_config_init+0x26>
   82bea:	683b      	ldr	r3, [r7, #0]
   82bec:	2b00      	cmp	r3, #0
   82bee:	d104      	bne.n	82bfa <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82bf0:	68fb      	ldr	r3, [r7, #12]
   82bf2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82bf6:	601a      	str	r2, [r3, #0]
   82bf8:	e019      	b.n	82c2e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82bfa:	7afb      	ldrb	r3, [r7, #11]
   82bfc:	4618      	mov	r0, r3
   82bfe:	4b0d      	ldr	r3, [pc, #52]	; (82c34 <pll_config_init+0x60>)
   82c00:	4798      	blx	r3
   82c02:	4602      	mov	r2, r0
   82c04:	687b      	ldr	r3, [r7, #4]
   82c06:	fbb2 f3f3 	udiv	r3, r2, r3
   82c0a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82c0c:	697b      	ldr	r3, [r7, #20]
   82c0e:	683a      	ldr	r2, [r7, #0]
   82c10:	fb02 f303 	mul.w	r3, r2, r3
   82c14:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82c16:	683b      	ldr	r3, [r7, #0]
   82c18:	3b01      	subs	r3, #1
   82c1a:	041a      	lsls	r2, r3, #16
   82c1c:	4b06      	ldr	r3, [pc, #24]	; (82c38 <pll_config_init+0x64>)
   82c1e:	4013      	ands	r3, r2
   82c20:	687a      	ldr	r2, [r7, #4]
   82c22:	b2d2      	uxtb	r2, r2
   82c24:	4313      	orrs	r3, r2
   82c26:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82c2a:	68fb      	ldr	r3, [r7, #12]
   82c2c:	601a      	str	r2, [r3, #0]
	}
}
   82c2e:	3718      	adds	r7, #24
   82c30:	46bd      	mov	sp, r7
   82c32:	bd80      	pop	{r7, pc}
   82c34:	00082b35 	.word	0x00082b35
   82c38:	07ff0000 	.word	0x07ff0000

00082c3c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82c3c:	b580      	push	{r7, lr}
   82c3e:	b082      	sub	sp, #8
   82c40:	af00      	add	r7, sp, #0
   82c42:	6078      	str	r0, [r7, #4]
   82c44:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82c46:	683b      	ldr	r3, [r7, #0]
   82c48:	2b00      	cmp	r3, #0
   82c4a:	d108      	bne.n	82c5e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82c4c:	4b08      	ldr	r3, [pc, #32]	; (82c70 <pll_enable+0x34>)
   82c4e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82c50:	4a08      	ldr	r2, [pc, #32]	; (82c74 <pll_enable+0x38>)
   82c52:	687b      	ldr	r3, [r7, #4]
   82c54:	681b      	ldr	r3, [r3, #0]
   82c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82c5a:	6293      	str	r3, [r2, #40]	; 0x28
   82c5c:	e005      	b.n	82c6a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82c5e:	4a05      	ldr	r2, [pc, #20]	; (82c74 <pll_enable+0x38>)
   82c60:	687b      	ldr	r3, [r7, #4]
   82c62:	681b      	ldr	r3, [r3, #0]
   82c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82c68:	61d3      	str	r3, [r2, #28]
	}
}
   82c6a:	3708      	adds	r7, #8
   82c6c:	46bd      	mov	sp, r7
   82c6e:	bd80      	pop	{r7, pc}
   82c70:	00083575 	.word	0x00083575
   82c74:	400e0600 	.word	0x400e0600

00082c78 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82c78:	b580      	push	{r7, lr}
   82c7a:	b082      	sub	sp, #8
   82c7c:	af00      	add	r7, sp, #0
   82c7e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82c80:	687b      	ldr	r3, [r7, #4]
   82c82:	2b00      	cmp	r3, #0
   82c84:	d103      	bne.n	82c8e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82c86:	4b05      	ldr	r3, [pc, #20]	; (82c9c <pll_is_locked+0x24>)
   82c88:	4798      	blx	r3
   82c8a:	4603      	mov	r3, r0
   82c8c:	e002      	b.n	82c94 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82c8e:	4b04      	ldr	r3, [pc, #16]	; (82ca0 <pll_is_locked+0x28>)
   82c90:	4798      	blx	r3
   82c92:	4603      	mov	r3, r0
	}
}
   82c94:	4618      	mov	r0, r3
   82c96:	3708      	adds	r7, #8
   82c98:	46bd      	mov	sp, r7
   82c9a:	bd80      	pop	{r7, pc}
   82c9c:	0008358d 	.word	0x0008358d
   82ca0:	000835a9 	.word	0x000835a9

00082ca4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82ca4:	b580      	push	{r7, lr}
   82ca6:	b082      	sub	sp, #8
   82ca8:	af00      	add	r7, sp, #0
   82caa:	4603      	mov	r3, r0
   82cac:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82cae:	79fb      	ldrb	r3, [r7, #7]
   82cb0:	3b03      	subs	r3, #3
   82cb2:	2b04      	cmp	r3, #4
   82cb4:	d808      	bhi.n	82cc8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82cb6:	79fb      	ldrb	r3, [r7, #7]
   82cb8:	4618      	mov	r0, r3
   82cba:	4b05      	ldr	r3, [pc, #20]	; (82cd0 <pll_enable_source+0x2c>)
   82cbc:	4798      	blx	r3
		osc_wait_ready(e_src);
   82cbe:	79fb      	ldrb	r3, [r7, #7]
   82cc0:	4618      	mov	r0, r3
   82cc2:	4b04      	ldr	r3, [pc, #16]	; (82cd4 <pll_enable_source+0x30>)
   82cc4:	4798      	blx	r3
		break;
   82cc6:	e000      	b.n	82cca <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82cc8:	bf00      	nop
	}
}
   82cca:	3708      	adds	r7, #8
   82ccc:	46bd      	mov	sp, r7
   82cce:	bd80      	pop	{r7, pc}
   82cd0:	00082a41 	.word	0x00082a41
   82cd4:	00082ba9 	.word	0x00082ba9

00082cd8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82cd8:	b580      	push	{r7, lr}
   82cda:	b082      	sub	sp, #8
   82cdc:	af00      	add	r7, sp, #0
   82cde:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82ce0:	bf00      	nop
   82ce2:	6878      	ldr	r0, [r7, #4]
   82ce4:	4b04      	ldr	r3, [pc, #16]	; (82cf8 <pll_wait_for_lock+0x20>)
   82ce6:	4798      	blx	r3
   82ce8:	4603      	mov	r3, r0
   82cea:	2b00      	cmp	r3, #0
   82cec:	d0f9      	beq.n	82ce2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82cee:	2300      	movs	r3, #0
}
   82cf0:	4618      	mov	r0, r3
   82cf2:	3708      	adds	r7, #8
   82cf4:	46bd      	mov	sp, r7
   82cf6:	bd80      	pop	{r7, pc}
   82cf8:	00082c79 	.word	0x00082c79

00082cfc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82cfc:	b580      	push	{r7, lr}
   82cfe:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82d00:	2006      	movs	r0, #6
   82d02:	4b04      	ldr	r3, [pc, #16]	; (82d14 <sysclk_get_main_hz+0x18>)
   82d04:	4798      	blx	r3
   82d06:	4602      	mov	r2, r0
   82d08:	4613      	mov	r3, r2
   82d0a:	00db      	lsls	r3, r3, #3
   82d0c:	1a9b      	subs	r3, r3, r2
   82d0e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82d10:	4618      	mov	r0, r3
   82d12:	bd80      	pop	{r7, pc}
   82d14:	00082b35 	.word	0x00082b35

00082d18 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82d18:	b580      	push	{r7, lr}
   82d1a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82d1c:	4b02      	ldr	r3, [pc, #8]	; (82d28 <sysclk_get_cpu_hz+0x10>)
   82d1e:	4798      	blx	r3
   82d20:	4603      	mov	r3, r0
   82d22:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82d24:	4618      	mov	r0, r3
   82d26:	bd80      	pop	{r7, pc}
   82d28:	00082cfd 	.word	0x00082cfd

00082d2c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82d2c:	b590      	push	{r4, r7, lr}
   82d2e:	b083      	sub	sp, #12
   82d30:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82d32:	4b10      	ldr	r3, [pc, #64]	; (82d74 <sysclk_init+0x48>)
   82d34:	4798      	blx	r3
   82d36:	4603      	mov	r3, r0
   82d38:	4618      	mov	r0, r3
   82d3a:	4b0f      	ldr	r3, [pc, #60]	; (82d78 <sysclk_init+0x4c>)
   82d3c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82d3e:	2006      	movs	r0, #6
   82d40:	4b0e      	ldr	r3, [pc, #56]	; (82d7c <sysclk_init+0x50>)
   82d42:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82d44:	1d3b      	adds	r3, r7, #4
   82d46:	4618      	mov	r0, r3
   82d48:	2106      	movs	r1, #6
   82d4a:	2201      	movs	r2, #1
   82d4c:	230e      	movs	r3, #14
   82d4e:	4c0c      	ldr	r4, [pc, #48]	; (82d80 <sysclk_init+0x54>)
   82d50:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82d52:	1d3b      	adds	r3, r7, #4
   82d54:	4618      	mov	r0, r3
   82d56:	2100      	movs	r1, #0
   82d58:	4b0a      	ldr	r3, [pc, #40]	; (82d84 <sysclk_init+0x58>)
   82d5a:	4798      	blx	r3
		pll_wait_for_lock(0);
   82d5c:	2000      	movs	r0, #0
   82d5e:	4b0a      	ldr	r3, [pc, #40]	; (82d88 <sysclk_init+0x5c>)
   82d60:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82d62:	2010      	movs	r0, #16
   82d64:	4b09      	ldr	r3, [pc, #36]	; (82d8c <sysclk_init+0x60>)
   82d66:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82d68:	4b09      	ldr	r3, [pc, #36]	; (82d90 <sysclk_init+0x64>)
   82d6a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82d6c:	370c      	adds	r7, #12
   82d6e:	46bd      	mov	sp, r7
   82d70:	bd90      	pop	{r4, r7, pc}
   82d72:	bf00      	nop
   82d74:	00082d19 	.word	0x00082d19
   82d78:	000838b1 	.word	0x000838b1
   82d7c:	00082ca5 	.word	0x00082ca5
   82d80:	00082bd5 	.word	0x00082bd5
   82d84:	00082c3d 	.word	0x00082c3d
   82d88:	00082cd9 	.word	0x00082cd9
   82d8c:	00083351 	.word	0x00083351
   82d90:	00083731 	.word	0x00083731

00082d94 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82d94:	b580      	push	{r7, lr}
   82d96:	b082      	sub	sp, #8
   82d98:	af00      	add	r7, sp, #0
   82d9a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82d9c:	6878      	ldr	r0, [r7, #4]
   82d9e:	4b02      	ldr	r3, [pc, #8]	; (82da8 <sysclk_enable_peripheral_clock+0x14>)
   82da0:	4798      	blx	r3
}
   82da2:	3708      	adds	r7, #8
   82da4:	46bd      	mov	sp, r7
   82da6:	bd80      	pop	{r7, pc}
   82da8:	000835c5 	.word	0x000835c5

00082dac <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82dac:	b580      	push	{r7, lr}
   82dae:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82db0:	200b      	movs	r0, #11
   82db2:	4b06      	ldr	r3, [pc, #24]	; (82dcc <ioport_init+0x20>)
   82db4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   82db6:	200c      	movs	r0, #12
   82db8:	4b04      	ldr	r3, [pc, #16]	; (82dcc <ioport_init+0x20>)
   82dba:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   82dbc:	200d      	movs	r0, #13
   82dbe:	4b03      	ldr	r3, [pc, #12]	; (82dcc <ioport_init+0x20>)
   82dc0:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   82dc2:	200e      	movs	r0, #14
   82dc4:	4b01      	ldr	r3, [pc, #4]	; (82dcc <ioport_init+0x20>)
   82dc6:	4798      	blx	r3
	arch_ioport_init();
}
   82dc8:	bd80      	pop	{r7, pc}
   82dca:	bf00      	nop
   82dcc:	00082d95 	.word	0x00082d95

00082dd0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82dd0:	b580      	push	{r7, lr}
   82dd2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82dd4:	4b17      	ldr	r3, [pc, #92]	; (82e34 <board_init+0x64>)
   82dd6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82dda:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82ddc:	4b16      	ldr	r3, [pc, #88]	; (82e38 <board_init+0x68>)
   82dde:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82de0:	203b      	movs	r0, #59	; 0x3b
   82de2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82de6:	4b15      	ldr	r3, [pc, #84]	; (82e3c <board_init+0x6c>)
   82de8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82dea:	2055      	movs	r0, #85	; 0x55
   82dec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82df0:	4b12      	ldr	r3, [pc, #72]	; (82e3c <board_init+0x6c>)
   82df2:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82df4:	2056      	movs	r0, #86	; 0x56
   82df6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82dfa:	4b10      	ldr	r3, [pc, #64]	; (82e3c <board_init+0x6c>)
   82dfc:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82dfe:	2068      	movs	r0, #104	; 0x68
   82e00:	490f      	ldr	r1, [pc, #60]	; (82e40 <board_init+0x70>)
   82e02:	4b0e      	ldr	r3, [pc, #56]	; (82e3c <board_init+0x6c>)
   82e04:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82e06:	205c      	movs	r0, #92	; 0x5c
   82e08:	490e      	ldr	r1, [pc, #56]	; (82e44 <board_init+0x74>)
   82e0a:	4b0c      	ldr	r3, [pc, #48]	; (82e3c <board_init+0x6c>)
   82e0c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82e0e:	480e      	ldr	r0, [pc, #56]	; (82e48 <board_init+0x78>)
   82e10:	f44f 7140 	mov.w	r1, #768	; 0x300
   82e14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82e18:	4b0c      	ldr	r3, [pc, #48]	; (82e4c <board_init+0x7c>)
   82e1a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82e1c:	202b      	movs	r0, #43	; 0x2b
   82e1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e22:	4b06      	ldr	r3, [pc, #24]	; (82e3c <board_init+0x6c>)
   82e24:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82e26:	202a      	movs	r0, #42	; 0x2a
   82e28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e2c:	4b03      	ldr	r3, [pc, #12]	; (82e3c <board_init+0x6c>)
   82e2e:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82e30:	bd80      	pop	{r7, pc}
   82e32:	bf00      	nop
   82e34:	400e1a50 	.word	0x400e1a50
   82e38:	00082dad 	.word	0x00082dad
   82e3c:	00083029 	.word	0x00083029
   82e40:	28000079 	.word	0x28000079
   82e44:	28000001 	.word	0x28000001
   82e48:	400e0e00 	.word	0x400e0e00
   82e4c:	00083169 	.word	0x00083169

00082e50 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82e50:	b480      	push	{r7}
   82e52:	b085      	sub	sp, #20
   82e54:	af00      	add	r7, sp, #0
   82e56:	60f8      	str	r0, [r7, #12]
   82e58:	60b9      	str	r1, [r7, #8]
   82e5a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82e5c:	687b      	ldr	r3, [r7, #4]
   82e5e:	2b00      	cmp	r3, #0
   82e60:	d003      	beq.n	82e6a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82e62:	68fb      	ldr	r3, [r7, #12]
   82e64:	68ba      	ldr	r2, [r7, #8]
   82e66:	665a      	str	r2, [r3, #100]	; 0x64
   82e68:	e002      	b.n	82e70 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82e6a:	68fb      	ldr	r3, [r7, #12]
   82e6c:	68ba      	ldr	r2, [r7, #8]
   82e6e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82e70:	3714      	adds	r7, #20
   82e72:	46bd      	mov	sp, r7
   82e74:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e78:	4770      	bx	lr
   82e7a:	bf00      	nop

00082e7c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82e7c:	b480      	push	{r7}
   82e7e:	b087      	sub	sp, #28
   82e80:	af00      	add	r7, sp, #0
   82e82:	60f8      	str	r0, [r7, #12]
   82e84:	60b9      	str	r1, [r7, #8]
   82e86:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82e88:	68fb      	ldr	r3, [r7, #12]
   82e8a:	687a      	ldr	r2, [r7, #4]
   82e8c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82e8e:	68bb      	ldr	r3, [r7, #8]
   82e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82e94:	d01f      	beq.n	82ed6 <pio_set_peripheral+0x5a>
   82e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82e9a:	d805      	bhi.n	82ea8 <pio_set_peripheral+0x2c>
   82e9c:	2b00      	cmp	r3, #0
   82e9e:	d027      	beq.n	82ef0 <pio_set_peripheral+0x74>
   82ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82ea4:	d00a      	beq.n	82ebc <pio_set_peripheral+0x40>
   82ea6:	e01f      	b.n	82ee8 <pio_set_peripheral+0x6c>
   82ea8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82eac:	d020      	beq.n	82ef0 <pio_set_peripheral+0x74>
   82eae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82eb2:	d01d      	beq.n	82ef0 <pio_set_peripheral+0x74>
   82eb4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82eb8:	d01a      	beq.n	82ef0 <pio_set_peripheral+0x74>
   82eba:	e015      	b.n	82ee8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82ebc:	68fb      	ldr	r3, [r7, #12]
   82ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ec0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82ec2:	68fb      	ldr	r3, [r7, #12]
   82ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82ec6:	687b      	ldr	r3, [r7, #4]
   82ec8:	43d9      	mvns	r1, r3
   82eca:	697b      	ldr	r3, [r7, #20]
   82ecc:	400b      	ands	r3, r1
   82ece:	401a      	ands	r2, r3
   82ed0:	68fb      	ldr	r3, [r7, #12]
   82ed2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82ed4:	e008      	b.n	82ee8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82ed6:	68fb      	ldr	r3, [r7, #12]
   82ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82eda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82edc:	687a      	ldr	r2, [r7, #4]
   82ede:	697b      	ldr	r3, [r7, #20]
   82ee0:	431a      	orrs	r2, r3
   82ee2:	68fb      	ldr	r3, [r7, #12]
   82ee4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82ee6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82ee8:	68fb      	ldr	r3, [r7, #12]
   82eea:	687a      	ldr	r2, [r7, #4]
   82eec:	605a      	str	r2, [r3, #4]
   82eee:	e000      	b.n	82ef2 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82ef0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   82ef2:	371c      	adds	r7, #28
   82ef4:	46bd      	mov	sp, r7
   82ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82efa:	4770      	bx	lr

00082efc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82efc:	b580      	push	{r7, lr}
   82efe:	b084      	sub	sp, #16
   82f00:	af00      	add	r7, sp, #0
   82f02:	60f8      	str	r0, [r7, #12]
   82f04:	60b9      	str	r1, [r7, #8]
   82f06:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82f08:	68f8      	ldr	r0, [r7, #12]
   82f0a:	68b9      	ldr	r1, [r7, #8]
   82f0c:	4b18      	ldr	r3, [pc, #96]	; (82f70 <pio_set_input+0x74>)
   82f0e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82f10:	687b      	ldr	r3, [r7, #4]
   82f12:	f003 0301 	and.w	r3, r3, #1
   82f16:	68f8      	ldr	r0, [r7, #12]
   82f18:	68b9      	ldr	r1, [r7, #8]
   82f1a:	461a      	mov	r2, r3
   82f1c:	4b15      	ldr	r3, [pc, #84]	; (82f74 <pio_set_input+0x78>)
   82f1e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82f20:	687b      	ldr	r3, [r7, #4]
   82f22:	f003 030a 	and.w	r3, r3, #10
   82f26:	2b00      	cmp	r3, #0
   82f28:	d003      	beq.n	82f32 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82f2a:	68fb      	ldr	r3, [r7, #12]
   82f2c:	68ba      	ldr	r2, [r7, #8]
   82f2e:	621a      	str	r2, [r3, #32]
   82f30:	e002      	b.n	82f38 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82f32:	68fb      	ldr	r3, [r7, #12]
   82f34:	68ba      	ldr	r2, [r7, #8]
   82f36:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82f38:	687b      	ldr	r3, [r7, #4]
   82f3a:	f003 0302 	and.w	r3, r3, #2
   82f3e:	2b00      	cmp	r3, #0
   82f40:	d004      	beq.n	82f4c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82f42:	68fb      	ldr	r3, [r7, #12]
   82f44:	68ba      	ldr	r2, [r7, #8]
   82f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82f4a:	e008      	b.n	82f5e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82f4c:	687b      	ldr	r3, [r7, #4]
   82f4e:	f003 0308 	and.w	r3, r3, #8
   82f52:	2b00      	cmp	r3, #0
   82f54:	d003      	beq.n	82f5e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   82f56:	68fb      	ldr	r3, [r7, #12]
   82f58:	68ba      	ldr	r2, [r7, #8]
   82f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82f5e:	68fb      	ldr	r3, [r7, #12]
   82f60:	68ba      	ldr	r2, [r7, #8]
   82f62:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82f64:	68fb      	ldr	r3, [r7, #12]
   82f66:	68ba      	ldr	r2, [r7, #8]
   82f68:	601a      	str	r2, [r3, #0]
}
   82f6a:	3710      	adds	r7, #16
   82f6c:	46bd      	mov	sp, r7
   82f6e:	bd80      	pop	{r7, pc}
   82f70:	00082fdd 	.word	0x00082fdd
   82f74:	00082e51 	.word	0x00082e51

00082f78 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82f78:	b580      	push	{r7, lr}
   82f7a:	b084      	sub	sp, #16
   82f7c:	af00      	add	r7, sp, #0
   82f7e:	60f8      	str	r0, [r7, #12]
   82f80:	60b9      	str	r1, [r7, #8]
   82f82:	607a      	str	r2, [r7, #4]
   82f84:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82f86:	68f8      	ldr	r0, [r7, #12]
   82f88:	68b9      	ldr	r1, [r7, #8]
   82f8a:	4b12      	ldr	r3, [pc, #72]	; (82fd4 <pio_set_output+0x5c>)
   82f8c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82f8e:	68f8      	ldr	r0, [r7, #12]
   82f90:	68b9      	ldr	r1, [r7, #8]
   82f92:	69ba      	ldr	r2, [r7, #24]
   82f94:	4b10      	ldr	r3, [pc, #64]	; (82fd8 <pio_set_output+0x60>)
   82f96:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82f98:	683b      	ldr	r3, [r7, #0]
   82f9a:	2b00      	cmp	r3, #0
   82f9c:	d003      	beq.n	82fa6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82f9e:	68fb      	ldr	r3, [r7, #12]
   82fa0:	68ba      	ldr	r2, [r7, #8]
   82fa2:	651a      	str	r2, [r3, #80]	; 0x50
   82fa4:	e002      	b.n	82fac <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82fa6:	68fb      	ldr	r3, [r7, #12]
   82fa8:	68ba      	ldr	r2, [r7, #8]
   82faa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82fac:	687b      	ldr	r3, [r7, #4]
   82fae:	2b00      	cmp	r3, #0
   82fb0:	d003      	beq.n	82fba <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82fb2:	68fb      	ldr	r3, [r7, #12]
   82fb4:	68ba      	ldr	r2, [r7, #8]
   82fb6:	631a      	str	r2, [r3, #48]	; 0x30
   82fb8:	e002      	b.n	82fc0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82fba:	68fb      	ldr	r3, [r7, #12]
   82fbc:	68ba      	ldr	r2, [r7, #8]
   82fbe:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82fc0:	68fb      	ldr	r3, [r7, #12]
   82fc2:	68ba      	ldr	r2, [r7, #8]
   82fc4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82fc6:	68fb      	ldr	r3, [r7, #12]
   82fc8:	68ba      	ldr	r2, [r7, #8]
   82fca:	601a      	str	r2, [r3, #0]
}
   82fcc:	3710      	adds	r7, #16
   82fce:	46bd      	mov	sp, r7
   82fd0:	bd80      	pop	{r7, pc}
   82fd2:	bf00      	nop
   82fd4:	00082fdd 	.word	0x00082fdd
   82fd8:	00082e51 	.word	0x00082e51

00082fdc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82fdc:	b480      	push	{r7}
   82fde:	b083      	sub	sp, #12
   82fe0:	af00      	add	r7, sp, #0
   82fe2:	6078      	str	r0, [r7, #4]
   82fe4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82fe6:	687b      	ldr	r3, [r7, #4]
   82fe8:	683a      	ldr	r2, [r7, #0]
   82fea:	645a      	str	r2, [r3, #68]	; 0x44
}
   82fec:	370c      	adds	r7, #12
   82fee:	46bd      	mov	sp, r7
   82ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ff4:	4770      	bx	lr
   82ff6:	bf00      	nop

00082ff8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82ff8:	b480      	push	{r7}
   82ffa:	b083      	sub	sp, #12
   82ffc:	af00      	add	r7, sp, #0
   82ffe:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83000:	687b      	ldr	r3, [r7, #4]
   83002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   83004:	4618      	mov	r0, r3
   83006:	370c      	adds	r7, #12
   83008:	46bd      	mov	sp, r7
   8300a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8300e:	4770      	bx	lr

00083010 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83010:	b480      	push	{r7}
   83012:	b083      	sub	sp, #12
   83014:	af00      	add	r7, sp, #0
   83016:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83018:	687b      	ldr	r3, [r7, #4]
   8301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   8301c:	4618      	mov	r0, r3
   8301e:	370c      	adds	r7, #12
   83020:	46bd      	mov	sp, r7
   83022:	f85d 7b04 	ldr.w	r7, [sp], #4
   83026:	4770      	bx	lr

00083028 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83028:	b590      	push	{r4, r7, lr}
   8302a:	b087      	sub	sp, #28
   8302c:	af02      	add	r7, sp, #8
   8302e:	6078      	str	r0, [r7, #4]
   83030:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83032:	687b      	ldr	r3, [r7, #4]
   83034:	095b      	lsrs	r3, r3, #5
   83036:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8303a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8303e:	025b      	lsls	r3, r3, #9
   83040:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83042:	683b      	ldr	r3, [r7, #0]
   83044:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83048:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8304c:	d048      	beq.n	830e0 <pio_configure_pin+0xb8>
   8304e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83052:	d806      	bhi.n	83062 <pio_configure_pin+0x3a>
   83054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83058:	d00a      	beq.n	83070 <pio_configure_pin+0x48>
   8305a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8305e:	d023      	beq.n	830a8 <pio_configure_pin+0x80>
   83060:	e072      	b.n	83148 <pio_configure_pin+0x120>
   83062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83066:	d047      	beq.n	830f8 <pio_configure_pin+0xd0>
   83068:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8306c:	d044      	beq.n	830f8 <pio_configure_pin+0xd0>
   8306e:	e06b      	b.n	83148 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83070:	687b      	ldr	r3, [r7, #4]
   83072:	f003 031f 	and.w	r3, r3, #31
   83076:	2201      	movs	r2, #1
   83078:	fa02 f303 	lsl.w	r3, r2, r3
   8307c:	68f8      	ldr	r0, [r7, #12]
   8307e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83082:	461a      	mov	r2, r3
   83084:	4b34      	ldr	r3, [pc, #208]	; (83158 <pio_configure_pin+0x130>)
   83086:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83088:	687b      	ldr	r3, [r7, #4]
   8308a:	f003 031f 	and.w	r3, r3, #31
   8308e:	2201      	movs	r2, #1
   83090:	fa02 f303 	lsl.w	r3, r2, r3
   83094:	461a      	mov	r2, r3
   83096:	683b      	ldr	r3, [r7, #0]
   83098:	f003 0301 	and.w	r3, r3, #1
   8309c:	68f8      	ldr	r0, [r7, #12]
   8309e:	4611      	mov	r1, r2
   830a0:	461a      	mov	r2, r3
   830a2:	4b2e      	ldr	r3, [pc, #184]	; (8315c <pio_configure_pin+0x134>)
   830a4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   830a6:	e051      	b.n	8314c <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   830a8:	687b      	ldr	r3, [r7, #4]
   830aa:	f003 031f 	and.w	r3, r3, #31
   830ae:	2201      	movs	r2, #1
   830b0:	fa02 f303 	lsl.w	r3, r2, r3
   830b4:	68f8      	ldr	r0, [r7, #12]
   830b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   830ba:	461a      	mov	r2, r3
   830bc:	4b26      	ldr	r3, [pc, #152]	; (83158 <pio_configure_pin+0x130>)
   830be:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   830c0:	687b      	ldr	r3, [r7, #4]
   830c2:	f003 031f 	and.w	r3, r3, #31
   830c6:	2201      	movs	r2, #1
   830c8:	fa02 f303 	lsl.w	r3, r2, r3
   830cc:	461a      	mov	r2, r3
   830ce:	683b      	ldr	r3, [r7, #0]
   830d0:	f003 0301 	and.w	r3, r3, #1
   830d4:	68f8      	ldr	r0, [r7, #12]
   830d6:	4611      	mov	r1, r2
   830d8:	461a      	mov	r2, r3
   830da:	4b20      	ldr	r3, [pc, #128]	; (8315c <pio_configure_pin+0x134>)
   830dc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   830de:	e035      	b.n	8314c <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   830e0:	687b      	ldr	r3, [r7, #4]
   830e2:	f003 031f 	and.w	r3, r3, #31
   830e6:	2201      	movs	r2, #1
   830e8:	fa02 f303 	lsl.w	r3, r2, r3
   830ec:	68f8      	ldr	r0, [r7, #12]
   830ee:	4619      	mov	r1, r3
   830f0:	683a      	ldr	r2, [r7, #0]
   830f2:	4b1b      	ldr	r3, [pc, #108]	; (83160 <pio_configure_pin+0x138>)
   830f4:	4798      	blx	r3
		break;
   830f6:	e029      	b.n	8314c <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   830f8:	687b      	ldr	r3, [r7, #4]
   830fa:	f003 031f 	and.w	r3, r3, #31
   830fe:	2201      	movs	r2, #1
   83100:	fa02 f303 	lsl.w	r3, r2, r3
   83104:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83106:	683b      	ldr	r3, [r7, #0]
   83108:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8310c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83110:	bf0c      	ite	eq
   83112:	2301      	moveq	r3, #1
   83114:	2300      	movne	r3, #0
   83116:	b2db      	uxtb	r3, r3
   83118:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8311a:	683b      	ldr	r3, [r7, #0]
   8311c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83120:	2b00      	cmp	r3, #0
   83122:	bf14      	ite	ne
   83124:	2301      	movne	r3, #1
   83126:	2300      	moveq	r3, #0
   83128:	b2db      	uxtb	r3, r3
   8312a:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8312c:	683b      	ldr	r3, [r7, #0]
   8312e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83132:	2b00      	cmp	r3, #0
   83134:	bf14      	ite	ne
   83136:	2301      	movne	r3, #1
   83138:	2300      	moveq	r3, #0
   8313a:	b2db      	uxtb	r3, r3
   8313c:	9300      	str	r3, [sp, #0]
   8313e:	68f8      	ldr	r0, [r7, #12]
   83140:	4623      	mov	r3, r4
   83142:	4c08      	ldr	r4, [pc, #32]	; (83164 <pio_configure_pin+0x13c>)
   83144:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83146:	e001      	b.n	8314c <pio_configure_pin+0x124>

	default:
		return 0;
   83148:	2300      	movs	r3, #0
   8314a:	e000      	b.n	8314e <pio_configure_pin+0x126>
	}

	return 1;
   8314c:	2301      	movs	r3, #1
}
   8314e:	4618      	mov	r0, r3
   83150:	3714      	adds	r7, #20
   83152:	46bd      	mov	sp, r7
   83154:	bd90      	pop	{r4, r7, pc}
   83156:	bf00      	nop
   83158:	00082e7d 	.word	0x00082e7d
   8315c:	00082e51 	.word	0x00082e51
   83160:	00082efd 	.word	0x00082efd
   83164:	00082f79 	.word	0x00082f79

00083168 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   83168:	b590      	push	{r4, r7, lr}
   8316a:	b087      	sub	sp, #28
   8316c:	af02      	add	r7, sp, #8
   8316e:	60f8      	str	r0, [r7, #12]
   83170:	60b9      	str	r1, [r7, #8]
   83172:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83174:	687b      	ldr	r3, [r7, #4]
   83176:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8317a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8317e:	d02e      	beq.n	831de <pio_configure_pin_group+0x76>
   83180:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83184:	d806      	bhi.n	83194 <pio_configure_pin_group+0x2c>
   83186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8318a:	d00a      	beq.n	831a2 <pio_configure_pin_group+0x3a>
   8318c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83190:	d016      	beq.n	831c0 <pio_configure_pin_group+0x58>
   83192:	e04c      	b.n	8322e <pio_configure_pin_group+0xc6>
   83194:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83198:	d027      	beq.n	831ea <pio_configure_pin_group+0x82>
   8319a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8319e:	d024      	beq.n	831ea <pio_configure_pin_group+0x82>
   831a0:	e045      	b.n	8322e <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   831a2:	68f8      	ldr	r0, [r7, #12]
   831a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   831a8:	68ba      	ldr	r2, [r7, #8]
   831aa:	4b24      	ldr	r3, [pc, #144]	; (8323c <pio_configure_pin_group+0xd4>)
   831ac:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   831ae:	687b      	ldr	r3, [r7, #4]
   831b0:	f003 0301 	and.w	r3, r3, #1
   831b4:	68f8      	ldr	r0, [r7, #12]
   831b6:	68b9      	ldr	r1, [r7, #8]
   831b8:	461a      	mov	r2, r3
   831ba:	4b21      	ldr	r3, [pc, #132]	; (83240 <pio_configure_pin_group+0xd8>)
   831bc:	4798      	blx	r3
		break;
   831be:	e038      	b.n	83232 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   831c0:	68f8      	ldr	r0, [r7, #12]
   831c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   831c6:	68ba      	ldr	r2, [r7, #8]
   831c8:	4b1c      	ldr	r3, [pc, #112]	; (8323c <pio_configure_pin_group+0xd4>)
   831ca:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   831cc:	687b      	ldr	r3, [r7, #4]
   831ce:	f003 0301 	and.w	r3, r3, #1
   831d2:	68f8      	ldr	r0, [r7, #12]
   831d4:	68b9      	ldr	r1, [r7, #8]
   831d6:	461a      	mov	r2, r3
   831d8:	4b19      	ldr	r3, [pc, #100]	; (83240 <pio_configure_pin_group+0xd8>)
   831da:	4798      	blx	r3
		break;
   831dc:	e029      	b.n	83232 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   831de:	68f8      	ldr	r0, [r7, #12]
   831e0:	68b9      	ldr	r1, [r7, #8]
   831e2:	687a      	ldr	r2, [r7, #4]
   831e4:	4b17      	ldr	r3, [pc, #92]	; (83244 <pio_configure_pin_group+0xdc>)
   831e6:	4798      	blx	r3
		break;
   831e8:	e023      	b.n	83232 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   831ea:	687b      	ldr	r3, [r7, #4]
   831ec:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   831f0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   831f4:	bf0c      	ite	eq
   831f6:	2301      	moveq	r3, #1
   831f8:	2300      	movne	r3, #0
   831fa:	b2db      	uxtb	r3, r3
   831fc:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   831fe:	687b      	ldr	r3, [r7, #4]
   83200:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83204:	2b00      	cmp	r3, #0
   83206:	bf14      	ite	ne
   83208:	2301      	movne	r3, #1
   8320a:	2300      	moveq	r3, #0
   8320c:	b2db      	uxtb	r3, r3
   8320e:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83210:	687b      	ldr	r3, [r7, #4]
   83212:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83216:	2b00      	cmp	r3, #0
   83218:	bf14      	ite	ne
   8321a:	2301      	movne	r3, #1
   8321c:	2300      	moveq	r3, #0
   8321e:	b2db      	uxtb	r3, r3
   83220:	9300      	str	r3, [sp, #0]
   83222:	68f8      	ldr	r0, [r7, #12]
   83224:	68b9      	ldr	r1, [r7, #8]
   83226:	4623      	mov	r3, r4
   83228:	4c07      	ldr	r4, [pc, #28]	; (83248 <pio_configure_pin_group+0xe0>)
   8322a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8322c:	e001      	b.n	83232 <pio_configure_pin_group+0xca>

	default:
		return 0;
   8322e:	2300      	movs	r3, #0
   83230:	e000      	b.n	83234 <pio_configure_pin_group+0xcc>
	}

	return 1;
   83232:	2301      	movs	r3, #1
}
   83234:	4618      	mov	r0, r3
   83236:	3714      	adds	r7, #20
   83238:	46bd      	mov	sp, r7
   8323a:	bd90      	pop	{r4, r7, pc}
   8323c:	00082e7d 	.word	0x00082e7d
   83240:	00082e51 	.word	0x00082e51
   83244:	00082efd 	.word	0x00082efd
   83248:	00082f79 	.word	0x00082f79

0008324c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8324c:	b580      	push	{r7, lr}
   8324e:	b084      	sub	sp, #16
   83250:	af00      	add	r7, sp, #0
   83252:	6078      	str	r0, [r7, #4]
   83254:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83256:	6878      	ldr	r0, [r7, #4]
   83258:	4b22      	ldr	r3, [pc, #136]	; (832e4 <pio_handler_process+0x98>)
   8325a:	4798      	blx	r3
   8325c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8325e:	6878      	ldr	r0, [r7, #4]
   83260:	4b21      	ldr	r3, [pc, #132]	; (832e8 <pio_handler_process+0x9c>)
   83262:	4798      	blx	r3
   83264:	4602      	mov	r2, r0
   83266:	68fb      	ldr	r3, [r7, #12]
   83268:	4013      	ands	r3, r2
   8326a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8326c:	68fb      	ldr	r3, [r7, #12]
   8326e:	2b00      	cmp	r3, #0
   83270:	d034      	beq.n	832dc <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   83272:	2300      	movs	r3, #0
   83274:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   83276:	e02e      	b.n	832d6 <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83278:	4a1c      	ldr	r2, [pc, #112]	; (832ec <pio_handler_process+0xa0>)
   8327a:	68bb      	ldr	r3, [r7, #8]
   8327c:	011b      	lsls	r3, r3, #4
   8327e:	4413      	add	r3, r2
   83280:	681a      	ldr	r2, [r3, #0]
   83282:	683b      	ldr	r3, [r7, #0]
   83284:	429a      	cmp	r2, r3
   83286:	d123      	bne.n	832d0 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83288:	4a18      	ldr	r2, [pc, #96]	; (832ec <pio_handler_process+0xa0>)
   8328a:	68bb      	ldr	r3, [r7, #8]
   8328c:	011b      	lsls	r3, r3, #4
   8328e:	4413      	add	r3, r2
   83290:	685a      	ldr	r2, [r3, #4]
   83292:	68fb      	ldr	r3, [r7, #12]
   83294:	4013      	ands	r3, r2
   83296:	2b00      	cmp	r3, #0
   83298:	d01a      	beq.n	832d0 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8329a:	4a14      	ldr	r2, [pc, #80]	; (832ec <pio_handler_process+0xa0>)
   8329c:	68bb      	ldr	r3, [r7, #8]
   8329e:	011b      	lsls	r3, r3, #4
   832a0:	4413      	add	r3, r2
   832a2:	3308      	adds	r3, #8
   832a4:	685b      	ldr	r3, [r3, #4]
   832a6:	4911      	ldr	r1, [pc, #68]	; (832ec <pio_handler_process+0xa0>)
   832a8:	68ba      	ldr	r2, [r7, #8]
   832aa:	0112      	lsls	r2, r2, #4
   832ac:	440a      	add	r2, r1
   832ae:	6810      	ldr	r0, [r2, #0]
   832b0:	490e      	ldr	r1, [pc, #56]	; (832ec <pio_handler_process+0xa0>)
   832b2:	68ba      	ldr	r2, [r7, #8]
   832b4:	0112      	lsls	r2, r2, #4
   832b6:	440a      	add	r2, r1
   832b8:	6852      	ldr	r2, [r2, #4]
   832ba:	4611      	mov	r1, r2
   832bc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   832be:	4a0b      	ldr	r2, [pc, #44]	; (832ec <pio_handler_process+0xa0>)
   832c0:	68bb      	ldr	r3, [r7, #8]
   832c2:	011b      	lsls	r3, r3, #4
   832c4:	4413      	add	r3, r2
   832c6:	685b      	ldr	r3, [r3, #4]
   832c8:	43db      	mvns	r3, r3
   832ca:	68fa      	ldr	r2, [r7, #12]
   832cc:	4013      	ands	r3, r2
   832ce:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   832d0:	68bb      	ldr	r3, [r7, #8]
   832d2:	3301      	adds	r3, #1
   832d4:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   832d6:	68fb      	ldr	r3, [r7, #12]
   832d8:	2b00      	cmp	r3, #0
   832da:	d1cd      	bne.n	83278 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   832dc:	3710      	adds	r7, #16
   832de:	46bd      	mov	sp, r7
   832e0:	bd80      	pop	{r7, pc}
   832e2:	bf00      	nop
   832e4:	00082ff9 	.word	0x00082ff9
   832e8:	00083011 	.word	0x00083011
   832ec:	20070d20 	.word	0x20070d20

000832f0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   832f0:	b580      	push	{r7, lr}
   832f2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   832f4:	4802      	ldr	r0, [pc, #8]	; (83300 <PIOA_Handler+0x10>)
   832f6:	210b      	movs	r1, #11
   832f8:	4b02      	ldr	r3, [pc, #8]	; (83304 <PIOA_Handler+0x14>)
   832fa:	4798      	blx	r3
}
   832fc:	bd80      	pop	{r7, pc}
   832fe:	bf00      	nop
   83300:	400e0e00 	.word	0x400e0e00
   83304:	0008324d 	.word	0x0008324d

00083308 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83308:	b580      	push	{r7, lr}
   8330a:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   8330c:	4802      	ldr	r0, [pc, #8]	; (83318 <PIOB_Handler+0x10>)
   8330e:	210c      	movs	r1, #12
   83310:	4b02      	ldr	r3, [pc, #8]	; (8331c <PIOB_Handler+0x14>)
   83312:	4798      	blx	r3
}
   83314:	bd80      	pop	{r7, pc}
   83316:	bf00      	nop
   83318:	400e1000 	.word	0x400e1000
   8331c:	0008324d 	.word	0x0008324d

00083320 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83320:	b580      	push	{r7, lr}
   83322:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   83324:	4802      	ldr	r0, [pc, #8]	; (83330 <PIOC_Handler+0x10>)
   83326:	210d      	movs	r1, #13
   83328:	4b02      	ldr	r3, [pc, #8]	; (83334 <PIOC_Handler+0x14>)
   8332a:	4798      	blx	r3
}
   8332c:	bd80      	pop	{r7, pc}
   8332e:	bf00      	nop
   83330:	400e1200 	.word	0x400e1200
   83334:	0008324d 	.word	0x0008324d

00083338 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83338:	b580      	push	{r7, lr}
   8333a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   8333c:	4802      	ldr	r0, [pc, #8]	; (83348 <PIOD_Handler+0x10>)
   8333e:	210e      	movs	r1, #14
   83340:	4b02      	ldr	r3, [pc, #8]	; (8334c <PIOD_Handler+0x14>)
   83342:	4798      	blx	r3
}
   83344:	bd80      	pop	{r7, pc}
   83346:	bf00      	nop
   83348:	400e1400 	.word	0x400e1400
   8334c:	0008324d 	.word	0x0008324d

00083350 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83350:	b480      	push	{r7}
   83352:	b085      	sub	sp, #20
   83354:	af00      	add	r7, sp, #0
   83356:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83358:	491d      	ldr	r1, [pc, #116]	; (833d0 <pmc_switch_mck_to_pllack+0x80>)
   8335a:	4b1d      	ldr	r3, [pc, #116]	; (833d0 <pmc_switch_mck_to_pllack+0x80>)
   8335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8335e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83362:	687b      	ldr	r3, [r7, #4]
   83364:	4313      	orrs	r3, r2
   83366:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83368:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8336c:	60fb      	str	r3, [r7, #12]
   8336e:	e007      	b.n	83380 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83370:	68fb      	ldr	r3, [r7, #12]
   83372:	2b00      	cmp	r3, #0
   83374:	d101      	bne.n	8337a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83376:	2301      	movs	r3, #1
   83378:	e023      	b.n	833c2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8337a:	68fb      	ldr	r3, [r7, #12]
   8337c:	3b01      	subs	r3, #1
   8337e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83380:	4b13      	ldr	r3, [pc, #76]	; (833d0 <pmc_switch_mck_to_pllack+0x80>)
   83382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83384:	f003 0308 	and.w	r3, r3, #8
   83388:	2b00      	cmp	r3, #0
   8338a:	d0f1      	beq.n	83370 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8338c:	4a10      	ldr	r2, [pc, #64]	; (833d0 <pmc_switch_mck_to_pllack+0x80>)
   8338e:	4b10      	ldr	r3, [pc, #64]	; (833d0 <pmc_switch_mck_to_pllack+0x80>)
   83390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83392:	f023 0303 	bic.w	r3, r3, #3
   83396:	f043 0302 	orr.w	r3, r3, #2
   8339a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8339c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   833a0:	60fb      	str	r3, [r7, #12]
   833a2:	e007      	b.n	833b4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   833a4:	68fb      	ldr	r3, [r7, #12]
   833a6:	2b00      	cmp	r3, #0
   833a8:	d101      	bne.n	833ae <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   833aa:	2301      	movs	r3, #1
   833ac:	e009      	b.n	833c2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   833ae:	68fb      	ldr	r3, [r7, #12]
   833b0:	3b01      	subs	r3, #1
   833b2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833b4:	4b06      	ldr	r3, [pc, #24]	; (833d0 <pmc_switch_mck_to_pllack+0x80>)
   833b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   833b8:	f003 0308 	and.w	r3, r3, #8
   833bc:	2b00      	cmp	r3, #0
   833be:	d0f1      	beq.n	833a4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   833c0:	2300      	movs	r3, #0
}
   833c2:	4618      	mov	r0, r3
   833c4:	3714      	adds	r7, #20
   833c6:	46bd      	mov	sp, r7
   833c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   833cc:	4770      	bx	lr
   833ce:	bf00      	nop
   833d0:	400e0600 	.word	0x400e0600

000833d4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   833d4:	b480      	push	{r7}
   833d6:	b083      	sub	sp, #12
   833d8:	af00      	add	r7, sp, #0
   833da:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   833dc:	687b      	ldr	r3, [r7, #4]
   833de:	2b01      	cmp	r3, #1
   833e0:	d107      	bne.n	833f2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   833e2:	4a08      	ldr	r2, [pc, #32]	; (83404 <pmc_switch_sclk_to_32kxtal+0x30>)
   833e4:	4b07      	ldr	r3, [pc, #28]	; (83404 <pmc_switch_sclk_to_32kxtal+0x30>)
   833e6:	689b      	ldr	r3, [r3, #8]
   833e8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   833ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   833f0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   833f2:	4b04      	ldr	r3, [pc, #16]	; (83404 <pmc_switch_sclk_to_32kxtal+0x30>)
   833f4:	4a04      	ldr	r2, [pc, #16]	; (83408 <pmc_switch_sclk_to_32kxtal+0x34>)
   833f6:	601a      	str	r2, [r3, #0]
}
   833f8:	370c      	adds	r7, #12
   833fa:	46bd      	mov	sp, r7
   833fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   83400:	4770      	bx	lr
   83402:	bf00      	nop
   83404:	400e1a10 	.word	0x400e1a10
   83408:	a5000008 	.word	0xa5000008

0008340c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8340c:	b480      	push	{r7}
   8340e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83410:	4b09      	ldr	r3, [pc, #36]	; (83438 <pmc_osc_is_ready_32kxtal+0x2c>)
   83412:	695b      	ldr	r3, [r3, #20]
   83414:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83418:	2b00      	cmp	r3, #0
   8341a:	d007      	beq.n	8342c <pmc_osc_is_ready_32kxtal+0x20>
   8341c:	4b07      	ldr	r3, [pc, #28]	; (8343c <pmc_osc_is_ready_32kxtal+0x30>)
   8341e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83420:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83424:	2b00      	cmp	r3, #0
   83426:	d001      	beq.n	8342c <pmc_osc_is_ready_32kxtal+0x20>
   83428:	2301      	movs	r3, #1
   8342a:	e000      	b.n	8342e <pmc_osc_is_ready_32kxtal+0x22>
   8342c:	2300      	movs	r3, #0
}
   8342e:	4618      	mov	r0, r3
   83430:	46bd      	mov	sp, r7
   83432:	f85d 7b04 	ldr.w	r7, [sp], #4
   83436:	4770      	bx	lr
   83438:	400e1a10 	.word	0x400e1a10
   8343c:	400e0600 	.word	0x400e0600

00083440 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83440:	b480      	push	{r7}
   83442:	b085      	sub	sp, #20
   83444:	af00      	add	r7, sp, #0
   83446:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   83448:	2300      	movs	r3, #0
   8344a:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   8344c:	4b21      	ldr	r3, [pc, #132]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   8344e:	6a1b      	ldr	r3, [r3, #32]
   83450:	f003 0301 	and.w	r3, r3, #1
   83454:	2b00      	cmp	r3, #0
   83456:	d00e      	beq.n	83476 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83458:	491e      	ldr	r1, [pc, #120]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   8345a:	4b1e      	ldr	r3, [pc, #120]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   8345c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   8345e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83462:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   83466:	687a      	ldr	r2, [r7, #4]
   83468:	4313      	orrs	r3, r2
   8346a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8346e:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83472:	620b      	str	r3, [r1, #32]
   83474:	e00b      	b.n	8348e <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   83476:	2301      	movs	r3, #1
   83478:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8347a:	4916      	ldr	r1, [pc, #88]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   8347c:	4b15      	ldr	r3, [pc, #84]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   8347e:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   83480:	4b15      	ldr	r3, [pc, #84]	; (834d8 <pmc_switch_mainck_to_fastrc+0x98>)
   83482:	4013      	ands	r3, r2
   83484:	687a      	ldr	r2, [r7, #4]
   83486:	431a      	orrs	r2, r3
   83488:	4b14      	ldr	r3, [pc, #80]	; (834dc <pmc_switch_mainck_to_fastrc+0x9c>)
   8348a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8348c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8348e:	bf00      	nop
   83490:	4b10      	ldr	r3, [pc, #64]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   83492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83498:	2b00      	cmp	r3, #0
   8349a:	d0f9      	beq.n	83490 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8349c:	4a0d      	ldr	r2, [pc, #52]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   8349e:	4b0d      	ldr	r3, [pc, #52]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   834a0:	6a1b      	ldr	r3, [r3, #32]
   834a2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   834a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   834aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   834ae:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   834b0:	68fb      	ldr	r3, [r7, #12]
   834b2:	2b00      	cmp	r3, #0
   834b4:	d009      	beq.n	834ca <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   834b6:	4a07      	ldr	r2, [pc, #28]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   834b8:	4b06      	ldr	r3, [pc, #24]	; (834d4 <pmc_switch_mainck_to_fastrc+0x94>)
   834ba:	6a1b      	ldr	r3, [r3, #32]
   834bc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   834c0:	f023 0301 	bic.w	r3, r3, #1
   834c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   834c8:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   834ca:	3714      	adds	r7, #20
   834cc:	46bd      	mov	sp, r7
   834ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   834d2:	4770      	bx	lr
   834d4:	400e0600 	.word	0x400e0600
   834d8:	ffc80086 	.word	0xffc80086
   834dc:	0037ff09 	.word	0x0037ff09

000834e0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   834e0:	b480      	push	{r7}
   834e2:	b083      	sub	sp, #12
   834e4:	af00      	add	r7, sp, #0
   834e6:	6078      	str	r0, [r7, #4]
   834e8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   834ea:	687b      	ldr	r3, [r7, #4]
   834ec:	2b00      	cmp	r3, #0
   834ee:	d008      	beq.n	83502 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   834f0:	4916      	ldr	r1, [pc, #88]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   834f2:	4b16      	ldr	r3, [pc, #88]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   834f4:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   834f6:	4a16      	ldr	r2, [pc, #88]	; (83550 <pmc_switch_mainck_to_xtal+0x70>)
   834f8:	401a      	ands	r2, r3
   834fa:	4b16      	ldr	r3, [pc, #88]	; (83554 <pmc_switch_mainck_to_xtal+0x74>)
   834fc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   834fe:	620b      	str	r3, [r1, #32]
   83500:	e01e      	b.n	83540 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83502:	4912      	ldr	r1, [pc, #72]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   83504:	4b11      	ldr	r3, [pc, #68]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   83506:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83508:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8350c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83510:	683a      	ldr	r2, [r7, #0]
   83512:	0212      	lsls	r2, r2, #8
   83514:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83516:	4313      	orrs	r3, r2
   83518:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8351c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83520:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83522:	bf00      	nop
   83524:	4b09      	ldr	r3, [pc, #36]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   83526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83528:	f003 0301 	and.w	r3, r3, #1
   8352c:	2b00      	cmp	r3, #0
   8352e:	d0f9      	beq.n	83524 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   83530:	4a06      	ldr	r2, [pc, #24]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   83532:	4b06      	ldr	r3, [pc, #24]	; (8354c <pmc_switch_mainck_to_xtal+0x6c>)
   83534:	6a1b      	ldr	r3, [r3, #32]
   83536:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8353e:	6213      	str	r3, [r2, #32]
	}
}
   83540:	370c      	adds	r7, #12
   83542:	46bd      	mov	sp, r7
   83544:	f85d 7b04 	ldr.w	r7, [sp], #4
   83548:	4770      	bx	lr
   8354a:	bf00      	nop
   8354c:	400e0600 	.word	0x400e0600
   83550:	fec8fffc 	.word	0xfec8fffc
   83554:	01370002 	.word	0x01370002

00083558 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83558:	b480      	push	{r7}
   8355a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8355c:	4b04      	ldr	r3, [pc, #16]	; (83570 <pmc_osc_is_ready_mainck+0x18>)
   8355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83564:	4618      	mov	r0, r3
   83566:	46bd      	mov	sp, r7
   83568:	f85d 7b04 	ldr.w	r7, [sp], #4
   8356c:	4770      	bx	lr
   8356e:	bf00      	nop
   83570:	400e0600 	.word	0x400e0600

00083574 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83574:	b480      	push	{r7}
   83576:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83578:	4b03      	ldr	r3, [pc, #12]	; (83588 <pmc_disable_pllack+0x14>)
   8357a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8357e:	629a      	str	r2, [r3, #40]	; 0x28
}
   83580:	46bd      	mov	sp, r7
   83582:	f85d 7b04 	ldr.w	r7, [sp], #4
   83586:	4770      	bx	lr
   83588:	400e0600 	.word	0x400e0600

0008358c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8358c:	b480      	push	{r7}
   8358e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83590:	4b04      	ldr	r3, [pc, #16]	; (835a4 <pmc_is_locked_pllack+0x18>)
   83592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83594:	f003 0302 	and.w	r3, r3, #2
}
   83598:	4618      	mov	r0, r3
   8359a:	46bd      	mov	sp, r7
   8359c:	f85d 7b04 	ldr.w	r7, [sp], #4
   835a0:	4770      	bx	lr
   835a2:	bf00      	nop
   835a4:	400e0600 	.word	0x400e0600

000835a8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   835a8:	b480      	push	{r7}
   835aa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   835ac:	4b04      	ldr	r3, [pc, #16]	; (835c0 <pmc_is_locked_upll+0x18>)
   835ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   835b4:	4618      	mov	r0, r3
   835b6:	46bd      	mov	sp, r7
   835b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   835bc:	4770      	bx	lr
   835be:	bf00      	nop
   835c0:	400e0600 	.word	0x400e0600

000835c4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   835c4:	b480      	push	{r7}
   835c6:	b083      	sub	sp, #12
   835c8:	af00      	add	r7, sp, #0
   835ca:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   835cc:	687b      	ldr	r3, [r7, #4]
   835ce:	2b2c      	cmp	r3, #44	; 0x2c
   835d0:	d901      	bls.n	835d6 <pmc_enable_periph_clk+0x12>
		return 1;
   835d2:	2301      	movs	r3, #1
   835d4:	e02f      	b.n	83636 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   835d6:	687b      	ldr	r3, [r7, #4]
   835d8:	2b1f      	cmp	r3, #31
   835da:	d813      	bhi.n	83604 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   835dc:	4b19      	ldr	r3, [pc, #100]	; (83644 <pmc_enable_periph_clk+0x80>)
   835de:	699a      	ldr	r2, [r3, #24]
   835e0:	687b      	ldr	r3, [r7, #4]
   835e2:	2101      	movs	r1, #1
   835e4:	fa01 f303 	lsl.w	r3, r1, r3
   835e8:	401a      	ands	r2, r3
   835ea:	687b      	ldr	r3, [r7, #4]
   835ec:	2101      	movs	r1, #1
   835ee:	fa01 f303 	lsl.w	r3, r1, r3
   835f2:	429a      	cmp	r2, r3
   835f4:	d01e      	beq.n	83634 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   835f6:	4a13      	ldr	r2, [pc, #76]	; (83644 <pmc_enable_periph_clk+0x80>)
   835f8:	687b      	ldr	r3, [r7, #4]
   835fa:	2101      	movs	r1, #1
   835fc:	fa01 f303 	lsl.w	r3, r1, r3
   83600:	6113      	str	r3, [r2, #16]
   83602:	e017      	b.n	83634 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   83604:	687b      	ldr	r3, [r7, #4]
   83606:	3b20      	subs	r3, #32
   83608:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8360a:	4b0e      	ldr	r3, [pc, #56]	; (83644 <pmc_enable_periph_clk+0x80>)
   8360c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83610:	687b      	ldr	r3, [r7, #4]
   83612:	2101      	movs	r1, #1
   83614:	fa01 f303 	lsl.w	r3, r1, r3
   83618:	401a      	ands	r2, r3
   8361a:	687b      	ldr	r3, [r7, #4]
   8361c:	2101      	movs	r1, #1
   8361e:	fa01 f303 	lsl.w	r3, r1, r3
   83622:	429a      	cmp	r2, r3
   83624:	d006      	beq.n	83634 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83626:	4a07      	ldr	r2, [pc, #28]	; (83644 <pmc_enable_periph_clk+0x80>)
   83628:	687b      	ldr	r3, [r7, #4]
   8362a:	2101      	movs	r1, #1
   8362c:	fa01 f303 	lsl.w	r3, r1, r3
   83630:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83634:	2300      	movs	r3, #0
}
   83636:	4618      	mov	r0, r3
   83638:	370c      	adds	r7, #12
   8363a:	46bd      	mov	sp, r7
   8363c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83640:	4770      	bx	lr
   83642:	bf00      	nop
   83644:	400e0600 	.word	0x400e0600

00083648 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   83648:	b480      	push	{r7}
   8364a:	b083      	sub	sp, #12
   8364c:	af00      	add	r7, sp, #0
   8364e:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83650:	687b      	ldr	r3, [r7, #4]
   83652:	2b00      	cmp	r3, #0
   83654:	d004      	beq.n	83660 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   83656:	4b07      	ldr	r3, [pc, #28]	; (83674 <pmc_set_writeprotect+0x2c>)
   83658:	4a07      	ldr	r2, [pc, #28]	; (83678 <pmc_set_writeprotect+0x30>)
   8365a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   8365e:	e003      	b.n	83668 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83660:	4b04      	ldr	r3, [pc, #16]	; (83674 <pmc_set_writeprotect+0x2c>)
   83662:	4a06      	ldr	r2, [pc, #24]	; (8367c <pmc_set_writeprotect+0x34>)
   83664:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   83668:	370c      	adds	r7, #12
   8366a:	46bd      	mov	sp, r7
   8366c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83670:	4770      	bx	lr
   83672:	bf00      	nop
   83674:	400e0600 	.word	0x400e0600
   83678:	504d4301 	.word	0x504d4301
   8367c:	504d4300 	.word	0x504d4300

00083680 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83680:	b480      	push	{r7}
   83682:	af00      	add	r7, sp, #0
	while (1) {
	}
   83684:	e7fe      	b.n	83684 <Dummy_Handler+0x4>
   83686:	bf00      	nop

00083688 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83688:	b580      	push	{r7, lr}
   8368a:	b082      	sub	sp, #8
   8368c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8368e:	4b1e      	ldr	r3, [pc, #120]	; (83708 <Reset_Handler+0x80>)
   83690:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83692:	4b1e      	ldr	r3, [pc, #120]	; (8370c <Reset_Handler+0x84>)
   83694:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83696:	687a      	ldr	r2, [r7, #4]
   83698:	683b      	ldr	r3, [r7, #0]
   8369a:	429a      	cmp	r2, r3
   8369c:	d00c      	beq.n	836b8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8369e:	e007      	b.n	836b0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   836a0:	683b      	ldr	r3, [r7, #0]
   836a2:	1d1a      	adds	r2, r3, #4
   836a4:	603a      	str	r2, [r7, #0]
   836a6:	687a      	ldr	r2, [r7, #4]
   836a8:	1d11      	adds	r1, r2, #4
   836aa:	6079      	str	r1, [r7, #4]
   836ac:	6812      	ldr	r2, [r2, #0]
   836ae:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   836b0:	683b      	ldr	r3, [r7, #0]
   836b2:	4a17      	ldr	r2, [pc, #92]	; (83710 <Reset_Handler+0x88>)
   836b4:	4293      	cmp	r3, r2
   836b6:	d3f3      	bcc.n	836a0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   836b8:	4b16      	ldr	r3, [pc, #88]	; (83714 <Reset_Handler+0x8c>)
   836ba:	603b      	str	r3, [r7, #0]
   836bc:	e004      	b.n	836c8 <Reset_Handler+0x40>
		*pDest++ = 0;
   836be:	683b      	ldr	r3, [r7, #0]
   836c0:	1d1a      	adds	r2, r3, #4
   836c2:	603a      	str	r2, [r7, #0]
   836c4:	2200      	movs	r2, #0
   836c6:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   836c8:	683b      	ldr	r3, [r7, #0]
   836ca:	4a13      	ldr	r2, [pc, #76]	; (83718 <Reset_Handler+0x90>)
   836cc:	4293      	cmp	r3, r2
   836ce:	d3f6      	bcc.n	836be <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   836d0:	4b12      	ldr	r3, [pc, #72]	; (8371c <Reset_Handler+0x94>)
   836d2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   836d4:	4a12      	ldr	r2, [pc, #72]	; (83720 <Reset_Handler+0x98>)
   836d6:	687b      	ldr	r3, [r7, #4]
   836d8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   836dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   836e0:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   836e2:	687b      	ldr	r3, [r7, #4]
   836e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   836e8:	d309      	bcc.n	836fe <Reset_Handler+0x76>
   836ea:	687b      	ldr	r3, [r7, #4]
   836ec:	4a0d      	ldr	r2, [pc, #52]	; (83724 <Reset_Handler+0x9c>)
   836ee:	4293      	cmp	r3, r2
   836f0:	d805      	bhi.n	836fe <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   836f2:	4a0b      	ldr	r2, [pc, #44]	; (83720 <Reset_Handler+0x98>)
   836f4:	4b0a      	ldr	r3, [pc, #40]	; (83720 <Reset_Handler+0x98>)
   836f6:	689b      	ldr	r3, [r3, #8]
   836f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   836fc:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   836fe:	4b0a      	ldr	r3, [pc, #40]	; (83728 <Reset_Handler+0xa0>)
   83700:	4798      	blx	r3

	/* Branch to main function */
	main();
   83702:	4b0a      	ldr	r3, [pc, #40]	; (8372c <Reset_Handler+0xa4>)
   83704:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83706:	e7fe      	b.n	83706 <Reset_Handler+0x7e>
   83708:	00086e3c 	.word	0x00086e3c
   8370c:	20070000 	.word	0x20070000
   83710:	20070c6c 	.word	0x20070c6c
   83714:	20070c6c 	.word	0x20070c6c
   83718:	20071268 	.word	0x20071268
   8371c:	00080000 	.word	0x00080000
   83720:	e000ed00 	.word	0xe000ed00
   83724:	200fffff 	.word	0x200fffff
   83728:	00083dc9 	.word	0x00083dc9
   8372c:	000820f1 	.word	0x000820f1

00083730 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83730:	b480      	push	{r7}
   83732:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83734:	4b56      	ldr	r3, [pc, #344]	; (83890 <SystemCoreClockUpdate+0x160>)
   83736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83738:	f003 0303 	and.w	r3, r3, #3
   8373c:	2b03      	cmp	r3, #3
   8373e:	f200 808a 	bhi.w	83856 <SystemCoreClockUpdate+0x126>
   83742:	a201      	add	r2, pc, #4	; (adr r2, 83748 <SystemCoreClockUpdate+0x18>)
   83744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83748:	00083759 	.word	0x00083759
   8374c:	00083779 	.word	0x00083779
   83750:	000837c9 	.word	0x000837c9
   83754:	000837c9 	.word	0x000837c9
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83758:	4b4e      	ldr	r3, [pc, #312]	; (83894 <SystemCoreClockUpdate+0x164>)
   8375a:	695b      	ldr	r3, [r3, #20]
   8375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83760:	2b00      	cmp	r3, #0
   83762:	d004      	beq.n	8376e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83764:	4b4c      	ldr	r3, [pc, #304]	; (83898 <SystemCoreClockUpdate+0x168>)
   83766:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8376a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8376c:	e073      	b.n	83856 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8376e:	4b4a      	ldr	r3, [pc, #296]	; (83898 <SystemCoreClockUpdate+0x168>)
   83770:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83774:	601a      	str	r2, [r3, #0]
		}
		break;
   83776:	e06e      	b.n	83856 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83778:	4b45      	ldr	r3, [pc, #276]	; (83890 <SystemCoreClockUpdate+0x160>)
   8377a:	6a1b      	ldr	r3, [r3, #32]
   8377c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83780:	2b00      	cmp	r3, #0
   83782:	d003      	beq.n	8378c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83784:	4b44      	ldr	r3, [pc, #272]	; (83898 <SystemCoreClockUpdate+0x168>)
   83786:	4a45      	ldr	r2, [pc, #276]	; (8389c <SystemCoreClockUpdate+0x16c>)
   83788:	601a      	str	r2, [r3, #0]
   8378a:	e01c      	b.n	837c6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8378c:	4b42      	ldr	r3, [pc, #264]	; (83898 <SystemCoreClockUpdate+0x168>)
   8378e:	4a44      	ldr	r2, [pc, #272]	; (838a0 <SystemCoreClockUpdate+0x170>)
   83790:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83792:	4b3f      	ldr	r3, [pc, #252]	; (83890 <SystemCoreClockUpdate+0x160>)
   83794:	6a1b      	ldr	r3, [r3, #32]
   83796:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8379a:	2b10      	cmp	r3, #16
   8379c:	d004      	beq.n	837a8 <SystemCoreClockUpdate+0x78>
   8379e:	2b20      	cmp	r3, #32
   837a0:	d008      	beq.n	837b4 <SystemCoreClockUpdate+0x84>
   837a2:	2b00      	cmp	r3, #0
   837a4:	d00e      	beq.n	837c4 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   837a6:	e00e      	b.n	837c6 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   837a8:	4b3b      	ldr	r3, [pc, #236]	; (83898 <SystemCoreClockUpdate+0x168>)
   837aa:	681b      	ldr	r3, [r3, #0]
   837ac:	005b      	lsls	r3, r3, #1
   837ae:	4a3a      	ldr	r2, [pc, #232]	; (83898 <SystemCoreClockUpdate+0x168>)
   837b0:	6013      	str	r3, [r2, #0]
				break;
   837b2:	e008      	b.n	837c6 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   837b4:	4b38      	ldr	r3, [pc, #224]	; (83898 <SystemCoreClockUpdate+0x168>)
   837b6:	681a      	ldr	r2, [r3, #0]
   837b8:	4613      	mov	r3, r2
   837ba:	005b      	lsls	r3, r3, #1
   837bc:	4413      	add	r3, r2
   837be:	4a36      	ldr	r2, [pc, #216]	; (83898 <SystemCoreClockUpdate+0x168>)
   837c0:	6013      	str	r3, [r2, #0]
				break;
   837c2:	e000      	b.n	837c6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   837c4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   837c6:	e046      	b.n	83856 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   837c8:	4b31      	ldr	r3, [pc, #196]	; (83890 <SystemCoreClockUpdate+0x160>)
   837ca:	6a1b      	ldr	r3, [r3, #32]
   837cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   837d0:	2b00      	cmp	r3, #0
   837d2:	d003      	beq.n	837dc <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   837d4:	4b30      	ldr	r3, [pc, #192]	; (83898 <SystemCoreClockUpdate+0x168>)
   837d6:	4a31      	ldr	r2, [pc, #196]	; (8389c <SystemCoreClockUpdate+0x16c>)
   837d8:	601a      	str	r2, [r3, #0]
   837da:	e01c      	b.n	83816 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   837dc:	4b2e      	ldr	r3, [pc, #184]	; (83898 <SystemCoreClockUpdate+0x168>)
   837de:	4a30      	ldr	r2, [pc, #192]	; (838a0 <SystemCoreClockUpdate+0x170>)
   837e0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   837e2:	4b2b      	ldr	r3, [pc, #172]	; (83890 <SystemCoreClockUpdate+0x160>)
   837e4:	6a1b      	ldr	r3, [r3, #32]
   837e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   837ea:	2b10      	cmp	r3, #16
   837ec:	d004      	beq.n	837f8 <SystemCoreClockUpdate+0xc8>
   837ee:	2b20      	cmp	r3, #32
   837f0:	d008      	beq.n	83804 <SystemCoreClockUpdate+0xd4>
   837f2:	2b00      	cmp	r3, #0
   837f4:	d00e      	beq.n	83814 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   837f6:	e00e      	b.n	83816 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   837f8:	4b27      	ldr	r3, [pc, #156]	; (83898 <SystemCoreClockUpdate+0x168>)
   837fa:	681b      	ldr	r3, [r3, #0]
   837fc:	005b      	lsls	r3, r3, #1
   837fe:	4a26      	ldr	r2, [pc, #152]	; (83898 <SystemCoreClockUpdate+0x168>)
   83800:	6013      	str	r3, [r2, #0]
				break;
   83802:	e008      	b.n	83816 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83804:	4b24      	ldr	r3, [pc, #144]	; (83898 <SystemCoreClockUpdate+0x168>)
   83806:	681a      	ldr	r2, [r3, #0]
   83808:	4613      	mov	r3, r2
   8380a:	005b      	lsls	r3, r3, #1
   8380c:	4413      	add	r3, r2
   8380e:	4a22      	ldr	r2, [pc, #136]	; (83898 <SystemCoreClockUpdate+0x168>)
   83810:	6013      	str	r3, [r2, #0]
				break;
   83812:	e000      	b.n	83816 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83814:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83816:	4b1e      	ldr	r3, [pc, #120]	; (83890 <SystemCoreClockUpdate+0x160>)
   83818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8381a:	f003 0303 	and.w	r3, r3, #3
   8381e:	2b02      	cmp	r3, #2
   83820:	d115      	bne.n	8384e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83822:	4b1b      	ldr	r3, [pc, #108]	; (83890 <SystemCoreClockUpdate+0x160>)
   83824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   83826:	4b1f      	ldr	r3, [pc, #124]	; (838a4 <SystemCoreClockUpdate+0x174>)
   83828:	4013      	ands	r3, r2
   8382a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   8382c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8382e:	4a1a      	ldr	r2, [pc, #104]	; (83898 <SystemCoreClockUpdate+0x168>)
   83830:	6812      	ldr	r2, [r2, #0]
   83832:	fb02 f303 	mul.w	r3, r2, r3
   83836:	4a18      	ldr	r2, [pc, #96]	; (83898 <SystemCoreClockUpdate+0x168>)
   83838:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8383a:	4b15      	ldr	r3, [pc, #84]	; (83890 <SystemCoreClockUpdate+0x160>)
   8383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8383e:	b2db      	uxtb	r3, r3
   83840:	4a15      	ldr	r2, [pc, #84]	; (83898 <SystemCoreClockUpdate+0x168>)
   83842:	6812      	ldr	r2, [r2, #0]
   83844:	fbb2 f3f3 	udiv	r3, r2, r3
   83848:	4a13      	ldr	r2, [pc, #76]	; (83898 <SystemCoreClockUpdate+0x168>)
   8384a:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   8384c:	e002      	b.n	83854 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8384e:	4b12      	ldr	r3, [pc, #72]	; (83898 <SystemCoreClockUpdate+0x168>)
   83850:	4a15      	ldr	r2, [pc, #84]	; (838a8 <SystemCoreClockUpdate+0x178>)
   83852:	601a      	str	r2, [r3, #0]
		}
		break;
   83854:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83856:	4b0e      	ldr	r3, [pc, #56]	; (83890 <SystemCoreClockUpdate+0x160>)
   83858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8385a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8385e:	2b70      	cmp	r3, #112	; 0x70
   83860:	d108      	bne.n	83874 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83862:	4b0d      	ldr	r3, [pc, #52]	; (83898 <SystemCoreClockUpdate+0x168>)
   83864:	681b      	ldr	r3, [r3, #0]
   83866:	4a11      	ldr	r2, [pc, #68]	; (838ac <SystemCoreClockUpdate+0x17c>)
   83868:	fba2 2303 	umull	r2, r3, r2, r3
   8386c:	085b      	lsrs	r3, r3, #1
   8386e:	4a0a      	ldr	r2, [pc, #40]	; (83898 <SystemCoreClockUpdate+0x168>)
   83870:	6013      	str	r3, [r2, #0]
   83872:	e009      	b.n	83888 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83874:	4b06      	ldr	r3, [pc, #24]	; (83890 <SystemCoreClockUpdate+0x160>)
   83876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83878:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8387c:	091a      	lsrs	r2, r3, #4
   8387e:	4b06      	ldr	r3, [pc, #24]	; (83898 <SystemCoreClockUpdate+0x168>)
   83880:	681b      	ldr	r3, [r3, #0]
   83882:	40d3      	lsrs	r3, r2
   83884:	4a04      	ldr	r2, [pc, #16]	; (83898 <SystemCoreClockUpdate+0x168>)
   83886:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   83888:	46bd      	mov	sp, r7
   8388a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8388e:	4770      	bx	lr
   83890:	400e0600 	.word	0x400e0600
   83894:	400e1a10 	.word	0x400e1a10
   83898:	20070404 	.word	0x20070404
   8389c:	00b71b00 	.word	0x00b71b00
   838a0:	003d0900 	.word	0x003d0900
   838a4:	07ff0000 	.word	0x07ff0000
   838a8:	0e4e1c00 	.word	0x0e4e1c00
   838ac:	aaaaaaab 	.word	0xaaaaaaab

000838b0 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   838b0:	b480      	push	{r7}
   838b2:	b083      	sub	sp, #12
   838b4:	af00      	add	r7, sp, #0
   838b6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   838b8:	687b      	ldr	r3, [r7, #4]
   838ba:	4a25      	ldr	r2, [pc, #148]	; (83950 <system_init_flash+0xa0>)
   838bc:	4293      	cmp	r3, r2
   838be:	d806      	bhi.n	838ce <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   838c0:	4b24      	ldr	r3, [pc, #144]	; (83954 <system_init_flash+0xa4>)
   838c2:	2200      	movs	r2, #0
   838c4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   838c6:	4b24      	ldr	r3, [pc, #144]	; (83958 <system_init_flash+0xa8>)
   838c8:	2200      	movs	r2, #0
   838ca:	601a      	str	r2, [r3, #0]
   838cc:	e03b      	b.n	83946 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   838ce:	687b      	ldr	r3, [r7, #4]
   838d0:	4a22      	ldr	r2, [pc, #136]	; (8395c <system_init_flash+0xac>)
   838d2:	4293      	cmp	r3, r2
   838d4:	d808      	bhi.n	838e8 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   838d6:	4b1f      	ldr	r3, [pc, #124]	; (83954 <system_init_flash+0xa4>)
   838d8:	f44f 7280 	mov.w	r2, #256	; 0x100
   838dc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   838de:	4b1e      	ldr	r3, [pc, #120]	; (83958 <system_init_flash+0xa8>)
   838e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   838e4:	601a      	str	r2, [r3, #0]
   838e6:	e02e      	b.n	83946 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   838e8:	687b      	ldr	r3, [r7, #4]
   838ea:	4a1d      	ldr	r2, [pc, #116]	; (83960 <system_init_flash+0xb0>)
   838ec:	4293      	cmp	r3, r2
   838ee:	d808      	bhi.n	83902 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   838f0:	4b18      	ldr	r3, [pc, #96]	; (83954 <system_init_flash+0xa4>)
   838f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   838f6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   838f8:	4b17      	ldr	r3, [pc, #92]	; (83958 <system_init_flash+0xa8>)
   838fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   838fe:	601a      	str	r2, [r3, #0]
   83900:	e021      	b.n	83946 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   83902:	687b      	ldr	r3, [r7, #4]
   83904:	4a17      	ldr	r2, [pc, #92]	; (83964 <system_init_flash+0xb4>)
   83906:	4293      	cmp	r3, r2
   83908:	d808      	bhi.n	8391c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8390a:	4b12      	ldr	r3, [pc, #72]	; (83954 <system_init_flash+0xa4>)
   8390c:	f44f 7240 	mov.w	r2, #768	; 0x300
   83910:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   83912:	4b11      	ldr	r3, [pc, #68]	; (83958 <system_init_flash+0xa8>)
   83914:	f44f 7240 	mov.w	r2, #768	; 0x300
   83918:	601a      	str	r2, [r3, #0]
   8391a:	e014      	b.n	83946 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   8391c:	687b      	ldr	r3, [r7, #4]
   8391e:	4a12      	ldr	r2, [pc, #72]	; (83968 <system_init_flash+0xb8>)
   83920:	4293      	cmp	r3, r2
   83922:	d808      	bhi.n	83936 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   83924:	4b0b      	ldr	r3, [pc, #44]	; (83954 <system_init_flash+0xa4>)
   83926:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8392a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   8392c:	4b0a      	ldr	r3, [pc, #40]	; (83958 <system_init_flash+0xa8>)
   8392e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83932:	601a      	str	r2, [r3, #0]
   83934:	e007      	b.n	83946 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   83936:	4b07      	ldr	r3, [pc, #28]	; (83954 <system_init_flash+0xa4>)
   83938:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   8393c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8393e:	4b06      	ldr	r3, [pc, #24]	; (83958 <system_init_flash+0xa8>)
   83940:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   83944:	601a      	str	r2, [r3, #0]
	}
}
   83946:	370c      	adds	r7, #12
   83948:	46bd      	mov	sp, r7
   8394a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8394e:	4770      	bx	lr
   83950:	0121eabf 	.word	0x0121eabf
   83954:	400e0a00 	.word	0x400e0a00
   83958:	400e0c00 	.word	0x400e0c00
   8395c:	02faf07f 	.word	0x02faf07f
   83960:	03d08fff 	.word	0x03d08fff
   83964:	04c4b3ff 	.word	0x04c4b3ff
   83968:	055d4a7f 	.word	0x055d4a7f

0008396c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8396c:	b480      	push	{r7}
   8396e:	b085      	sub	sp, #20
   83970:	af00      	add	r7, sp, #0
   83972:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   83974:	4b0b      	ldr	r3, [pc, #44]	; (839a4 <_sbrk+0x38>)
   83976:	681b      	ldr	r3, [r3, #0]
   83978:	2b00      	cmp	r3, #0
   8397a:	d102      	bne.n	83982 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   8397c:	4b09      	ldr	r3, [pc, #36]	; (839a4 <_sbrk+0x38>)
   8397e:	4a0a      	ldr	r2, [pc, #40]	; (839a8 <_sbrk+0x3c>)
   83980:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83982:	4b08      	ldr	r3, [pc, #32]	; (839a4 <_sbrk+0x38>)
   83984:	681b      	ldr	r3, [r3, #0]
   83986:	60fb      	str	r3, [r7, #12]

	heap += incr;
   83988:	4b06      	ldr	r3, [pc, #24]	; (839a4 <_sbrk+0x38>)
   8398a:	681a      	ldr	r2, [r3, #0]
   8398c:	687b      	ldr	r3, [r7, #4]
   8398e:	4413      	add	r3, r2
   83990:	4a04      	ldr	r2, [pc, #16]	; (839a4 <_sbrk+0x38>)
   83992:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83994:	68fb      	ldr	r3, [r7, #12]
}
   83996:	4618      	mov	r0, r3
   83998:	3714      	adds	r7, #20
   8399a:	46bd      	mov	sp, r7
   8399c:	f85d 7b04 	ldr.w	r7, [sp], #4
   839a0:	4770      	bx	lr
   839a2:	bf00      	nop
   839a4:	20070d90 	.word	0x20070d90
   839a8:	20073268 	.word	0x20073268

000839ac <_close>:
{
	return -1;
}

extern int _close(int file)
{
   839ac:	b480      	push	{r7}
   839ae:	b083      	sub	sp, #12
   839b0:	af00      	add	r7, sp, #0
   839b2:	6078      	str	r0, [r7, #4]
	return -1;
   839b4:	f04f 33ff 	mov.w	r3, #4294967295
}
   839b8:	4618      	mov	r0, r3
   839ba:	370c      	adds	r7, #12
   839bc:	46bd      	mov	sp, r7
   839be:	f85d 7b04 	ldr.w	r7, [sp], #4
   839c2:	4770      	bx	lr

000839c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   839c4:	b480      	push	{r7}
   839c6:	b083      	sub	sp, #12
   839c8:	af00      	add	r7, sp, #0
   839ca:	6078      	str	r0, [r7, #4]
   839cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   839ce:	683b      	ldr	r3, [r7, #0]
   839d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   839d4:	605a      	str	r2, [r3, #4]

	return 0;
   839d6:	2300      	movs	r3, #0
}
   839d8:	4618      	mov	r0, r3
   839da:	370c      	adds	r7, #12
   839dc:	46bd      	mov	sp, r7
   839de:	f85d 7b04 	ldr.w	r7, [sp], #4
   839e2:	4770      	bx	lr

000839e4 <_isatty>:

extern int _isatty(int file)
{
   839e4:	b480      	push	{r7}
   839e6:	b083      	sub	sp, #12
   839e8:	af00      	add	r7, sp, #0
   839ea:	6078      	str	r0, [r7, #4]
	return 1;
   839ec:	2301      	movs	r3, #1
}
   839ee:	4618      	mov	r0, r3
   839f0:	370c      	adds	r7, #12
   839f2:	46bd      	mov	sp, r7
   839f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   839f8:	4770      	bx	lr
   839fa:	bf00      	nop

000839fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   839fc:	b480      	push	{r7}
   839fe:	b085      	sub	sp, #20
   83a00:	af00      	add	r7, sp, #0
   83a02:	60f8      	str	r0, [r7, #12]
   83a04:	60b9      	str	r1, [r7, #8]
   83a06:	607a      	str	r2, [r7, #4]
	return 0;
   83a08:	2300      	movs	r3, #0
}
   83a0a:	4618      	mov	r0, r3
   83a0c:	3714      	adds	r7, #20
   83a0e:	46bd      	mov	sp, r7
   83a10:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a14:	4770      	bx	lr
   83a16:	bf00      	nop

00083a18 <__aeabi_drsub>:
   83a18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83a1c:	e002      	b.n	83a24 <__adddf3>
   83a1e:	bf00      	nop

00083a20 <__aeabi_dsub>:
   83a20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083a24 <__adddf3>:
   83a24:	b530      	push	{r4, r5, lr}
   83a26:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83a2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83a2e:	ea94 0f05 	teq	r4, r5
   83a32:	bf08      	it	eq
   83a34:	ea90 0f02 	teqeq	r0, r2
   83a38:	bf1f      	itttt	ne
   83a3a:	ea54 0c00 	orrsne.w	ip, r4, r0
   83a3e:	ea55 0c02 	orrsne.w	ip, r5, r2
   83a42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83a46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83a4a:	f000 80e2 	beq.w	83c12 <__adddf3+0x1ee>
   83a4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83a52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83a56:	bfb8      	it	lt
   83a58:	426d      	neglt	r5, r5
   83a5a:	dd0c      	ble.n	83a76 <__adddf3+0x52>
   83a5c:	442c      	add	r4, r5
   83a5e:	ea80 0202 	eor.w	r2, r0, r2
   83a62:	ea81 0303 	eor.w	r3, r1, r3
   83a66:	ea82 0000 	eor.w	r0, r2, r0
   83a6a:	ea83 0101 	eor.w	r1, r3, r1
   83a6e:	ea80 0202 	eor.w	r2, r0, r2
   83a72:	ea81 0303 	eor.w	r3, r1, r3
   83a76:	2d36      	cmp	r5, #54	; 0x36
   83a78:	bf88      	it	hi
   83a7a:	bd30      	pophi	{r4, r5, pc}
   83a7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83a80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83a84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83a88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83a8c:	d002      	beq.n	83a94 <__adddf3+0x70>
   83a8e:	4240      	negs	r0, r0
   83a90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83a98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83a9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83aa0:	d002      	beq.n	83aa8 <__adddf3+0x84>
   83aa2:	4252      	negs	r2, r2
   83aa4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83aa8:	ea94 0f05 	teq	r4, r5
   83aac:	f000 80a7 	beq.w	83bfe <__adddf3+0x1da>
   83ab0:	f1a4 0401 	sub.w	r4, r4, #1
   83ab4:	f1d5 0e20 	rsbs	lr, r5, #32
   83ab8:	db0d      	blt.n	83ad6 <__adddf3+0xb2>
   83aba:	fa02 fc0e 	lsl.w	ip, r2, lr
   83abe:	fa22 f205 	lsr.w	r2, r2, r5
   83ac2:	1880      	adds	r0, r0, r2
   83ac4:	f141 0100 	adc.w	r1, r1, #0
   83ac8:	fa03 f20e 	lsl.w	r2, r3, lr
   83acc:	1880      	adds	r0, r0, r2
   83ace:	fa43 f305 	asr.w	r3, r3, r5
   83ad2:	4159      	adcs	r1, r3
   83ad4:	e00e      	b.n	83af4 <__adddf3+0xd0>
   83ad6:	f1a5 0520 	sub.w	r5, r5, #32
   83ada:	f10e 0e20 	add.w	lr, lr, #32
   83ade:	2a01      	cmp	r2, #1
   83ae0:	fa03 fc0e 	lsl.w	ip, r3, lr
   83ae4:	bf28      	it	cs
   83ae6:	f04c 0c02 	orrcs.w	ip, ip, #2
   83aea:	fa43 f305 	asr.w	r3, r3, r5
   83aee:	18c0      	adds	r0, r0, r3
   83af0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83af4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83af8:	d507      	bpl.n	83b0a <__adddf3+0xe6>
   83afa:	f04f 0e00 	mov.w	lr, #0
   83afe:	f1dc 0c00 	rsbs	ip, ip, #0
   83b02:	eb7e 0000 	sbcs.w	r0, lr, r0
   83b06:	eb6e 0101 	sbc.w	r1, lr, r1
   83b0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83b0e:	d31b      	bcc.n	83b48 <__adddf3+0x124>
   83b10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83b14:	d30c      	bcc.n	83b30 <__adddf3+0x10c>
   83b16:	0849      	lsrs	r1, r1, #1
   83b18:	ea5f 0030 	movs.w	r0, r0, rrx
   83b1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83b20:	f104 0401 	add.w	r4, r4, #1
   83b24:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83b28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83b2c:	f080 809a 	bcs.w	83c64 <__adddf3+0x240>
   83b30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83b34:	bf08      	it	eq
   83b36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b3a:	f150 0000 	adcs.w	r0, r0, #0
   83b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b42:	ea41 0105 	orr.w	r1, r1, r5
   83b46:	bd30      	pop	{r4, r5, pc}
   83b48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83b4c:	4140      	adcs	r0, r0
   83b4e:	eb41 0101 	adc.w	r1, r1, r1
   83b52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b56:	f1a4 0401 	sub.w	r4, r4, #1
   83b5a:	d1e9      	bne.n	83b30 <__adddf3+0x10c>
   83b5c:	f091 0f00 	teq	r1, #0
   83b60:	bf04      	itt	eq
   83b62:	4601      	moveq	r1, r0
   83b64:	2000      	moveq	r0, #0
   83b66:	fab1 f381 	clz	r3, r1
   83b6a:	bf08      	it	eq
   83b6c:	3320      	addeq	r3, #32
   83b6e:	f1a3 030b 	sub.w	r3, r3, #11
   83b72:	f1b3 0220 	subs.w	r2, r3, #32
   83b76:	da0c      	bge.n	83b92 <__adddf3+0x16e>
   83b78:	320c      	adds	r2, #12
   83b7a:	dd08      	ble.n	83b8e <__adddf3+0x16a>
   83b7c:	f102 0c14 	add.w	ip, r2, #20
   83b80:	f1c2 020c 	rsb	r2, r2, #12
   83b84:	fa01 f00c 	lsl.w	r0, r1, ip
   83b88:	fa21 f102 	lsr.w	r1, r1, r2
   83b8c:	e00c      	b.n	83ba8 <__adddf3+0x184>
   83b8e:	f102 0214 	add.w	r2, r2, #20
   83b92:	bfd8      	it	le
   83b94:	f1c2 0c20 	rsble	ip, r2, #32
   83b98:	fa01 f102 	lsl.w	r1, r1, r2
   83b9c:	fa20 fc0c 	lsr.w	ip, r0, ip
   83ba0:	bfdc      	itt	le
   83ba2:	ea41 010c 	orrle.w	r1, r1, ip
   83ba6:	4090      	lslle	r0, r2
   83ba8:	1ae4      	subs	r4, r4, r3
   83baa:	bfa2      	ittt	ge
   83bac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83bb0:	4329      	orrge	r1, r5
   83bb2:	bd30      	popge	{r4, r5, pc}
   83bb4:	ea6f 0404 	mvn.w	r4, r4
   83bb8:	3c1f      	subs	r4, #31
   83bba:	da1c      	bge.n	83bf6 <__adddf3+0x1d2>
   83bbc:	340c      	adds	r4, #12
   83bbe:	dc0e      	bgt.n	83bde <__adddf3+0x1ba>
   83bc0:	f104 0414 	add.w	r4, r4, #20
   83bc4:	f1c4 0220 	rsb	r2, r4, #32
   83bc8:	fa20 f004 	lsr.w	r0, r0, r4
   83bcc:	fa01 f302 	lsl.w	r3, r1, r2
   83bd0:	ea40 0003 	orr.w	r0, r0, r3
   83bd4:	fa21 f304 	lsr.w	r3, r1, r4
   83bd8:	ea45 0103 	orr.w	r1, r5, r3
   83bdc:	bd30      	pop	{r4, r5, pc}
   83bde:	f1c4 040c 	rsb	r4, r4, #12
   83be2:	f1c4 0220 	rsb	r2, r4, #32
   83be6:	fa20 f002 	lsr.w	r0, r0, r2
   83bea:	fa01 f304 	lsl.w	r3, r1, r4
   83bee:	ea40 0003 	orr.w	r0, r0, r3
   83bf2:	4629      	mov	r1, r5
   83bf4:	bd30      	pop	{r4, r5, pc}
   83bf6:	fa21 f004 	lsr.w	r0, r1, r4
   83bfa:	4629      	mov	r1, r5
   83bfc:	bd30      	pop	{r4, r5, pc}
   83bfe:	f094 0f00 	teq	r4, #0
   83c02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83c06:	bf06      	itte	eq
   83c08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83c0c:	3401      	addeq	r4, #1
   83c0e:	3d01      	subne	r5, #1
   83c10:	e74e      	b.n	83ab0 <__adddf3+0x8c>
   83c12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c16:	bf18      	it	ne
   83c18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83c1c:	d029      	beq.n	83c72 <__adddf3+0x24e>
   83c1e:	ea94 0f05 	teq	r4, r5
   83c22:	bf08      	it	eq
   83c24:	ea90 0f02 	teqeq	r0, r2
   83c28:	d005      	beq.n	83c36 <__adddf3+0x212>
   83c2a:	ea54 0c00 	orrs.w	ip, r4, r0
   83c2e:	bf04      	itt	eq
   83c30:	4619      	moveq	r1, r3
   83c32:	4610      	moveq	r0, r2
   83c34:	bd30      	pop	{r4, r5, pc}
   83c36:	ea91 0f03 	teq	r1, r3
   83c3a:	bf1e      	ittt	ne
   83c3c:	2100      	movne	r1, #0
   83c3e:	2000      	movne	r0, #0
   83c40:	bd30      	popne	{r4, r5, pc}
   83c42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83c46:	d105      	bne.n	83c54 <__adddf3+0x230>
   83c48:	0040      	lsls	r0, r0, #1
   83c4a:	4149      	adcs	r1, r1
   83c4c:	bf28      	it	cs
   83c4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83c52:	bd30      	pop	{r4, r5, pc}
   83c54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83c58:	bf3c      	itt	cc
   83c5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83c5e:	bd30      	popcc	{r4, r5, pc}
   83c60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83c64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83c68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83c6c:	f04f 0000 	mov.w	r0, #0
   83c70:	bd30      	pop	{r4, r5, pc}
   83c72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c76:	bf1a      	itte	ne
   83c78:	4619      	movne	r1, r3
   83c7a:	4610      	movne	r0, r2
   83c7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83c80:	bf1c      	itt	ne
   83c82:	460b      	movne	r3, r1
   83c84:	4602      	movne	r2, r0
   83c86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83c8a:	bf06      	itte	eq
   83c8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83c90:	ea91 0f03 	teqeq	r1, r3
   83c94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83c98:	bd30      	pop	{r4, r5, pc}
   83c9a:	bf00      	nop

00083c9c <__aeabi_ui2d>:
   83c9c:	f090 0f00 	teq	r0, #0
   83ca0:	bf04      	itt	eq
   83ca2:	2100      	moveq	r1, #0
   83ca4:	4770      	bxeq	lr
   83ca6:	b530      	push	{r4, r5, lr}
   83ca8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83cac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83cb0:	f04f 0500 	mov.w	r5, #0
   83cb4:	f04f 0100 	mov.w	r1, #0
   83cb8:	e750      	b.n	83b5c <__adddf3+0x138>
   83cba:	bf00      	nop

00083cbc <__aeabi_i2d>:
   83cbc:	f090 0f00 	teq	r0, #0
   83cc0:	bf04      	itt	eq
   83cc2:	2100      	moveq	r1, #0
   83cc4:	4770      	bxeq	lr
   83cc6:	b530      	push	{r4, r5, lr}
   83cc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83ccc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83cd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83cd4:	bf48      	it	mi
   83cd6:	4240      	negmi	r0, r0
   83cd8:	f04f 0100 	mov.w	r1, #0
   83cdc:	e73e      	b.n	83b5c <__adddf3+0x138>
   83cde:	bf00      	nop

00083ce0 <__aeabi_f2d>:
   83ce0:	0042      	lsls	r2, r0, #1
   83ce2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83ce6:	ea4f 0131 	mov.w	r1, r1, rrx
   83cea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83cee:	bf1f      	itttt	ne
   83cf0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83cf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83cf8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83cfc:	4770      	bxne	lr
   83cfe:	f092 0f00 	teq	r2, #0
   83d02:	bf14      	ite	ne
   83d04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d08:	4770      	bxeq	lr
   83d0a:	b530      	push	{r4, r5, lr}
   83d0c:	f44f 7460 	mov.w	r4, #896	; 0x380
   83d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83d18:	e720      	b.n	83b5c <__adddf3+0x138>
   83d1a:	bf00      	nop

00083d1c <__aeabi_ul2d>:
   83d1c:	ea50 0201 	orrs.w	r2, r0, r1
   83d20:	bf08      	it	eq
   83d22:	4770      	bxeq	lr
   83d24:	b530      	push	{r4, r5, lr}
   83d26:	f04f 0500 	mov.w	r5, #0
   83d2a:	e00a      	b.n	83d42 <__aeabi_l2d+0x16>

00083d2c <__aeabi_l2d>:
   83d2c:	ea50 0201 	orrs.w	r2, r0, r1
   83d30:	bf08      	it	eq
   83d32:	4770      	bxeq	lr
   83d34:	b530      	push	{r4, r5, lr}
   83d36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83d3a:	d502      	bpl.n	83d42 <__aeabi_l2d+0x16>
   83d3c:	4240      	negs	r0, r0
   83d3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83d42:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d46:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83d4e:	f43f aedc 	beq.w	83b0a <__adddf3+0xe6>
   83d52:	f04f 0203 	mov.w	r2, #3
   83d56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d5a:	bf18      	it	ne
   83d5c:	3203      	addne	r2, #3
   83d5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d62:	bf18      	it	ne
   83d64:	3203      	addne	r2, #3
   83d66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83d6a:	f1c2 0320 	rsb	r3, r2, #32
   83d6e:	fa00 fc03 	lsl.w	ip, r0, r3
   83d72:	fa20 f002 	lsr.w	r0, r0, r2
   83d76:	fa01 fe03 	lsl.w	lr, r1, r3
   83d7a:	ea40 000e 	orr.w	r0, r0, lr
   83d7e:	fa21 f102 	lsr.w	r1, r1, r2
   83d82:	4414      	add	r4, r2
   83d84:	e6c1      	b.n	83b0a <__adddf3+0xe6>
   83d86:	bf00      	nop

00083d88 <__aeabi_d2uiz>:
   83d88:	004a      	lsls	r2, r1, #1
   83d8a:	d211      	bcs.n	83db0 <__aeabi_d2uiz+0x28>
   83d8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83d90:	d211      	bcs.n	83db6 <__aeabi_d2uiz+0x2e>
   83d92:	d50d      	bpl.n	83db0 <__aeabi_d2uiz+0x28>
   83d94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83d98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83d9c:	d40e      	bmi.n	83dbc <__aeabi_d2uiz+0x34>
   83d9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83da6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83daa:	fa23 f002 	lsr.w	r0, r3, r2
   83dae:	4770      	bx	lr
   83db0:	f04f 0000 	mov.w	r0, #0
   83db4:	4770      	bx	lr
   83db6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83dba:	d102      	bne.n	83dc2 <__aeabi_d2uiz+0x3a>
   83dbc:	f04f 30ff 	mov.w	r0, #4294967295
   83dc0:	4770      	bx	lr
   83dc2:	f04f 0000 	mov.w	r0, #0
   83dc6:	4770      	bx	lr

00083dc8 <__libc_init_array>:
   83dc8:	b570      	push	{r4, r5, r6, lr}
   83dca:	4e0f      	ldr	r6, [pc, #60]	; (83e08 <__libc_init_array+0x40>)
   83dcc:	4d0f      	ldr	r5, [pc, #60]	; (83e0c <__libc_init_array+0x44>)
   83dce:	1b76      	subs	r6, r6, r5
   83dd0:	10b6      	asrs	r6, r6, #2
   83dd2:	bf18      	it	ne
   83dd4:	2400      	movne	r4, #0
   83dd6:	d005      	beq.n	83de4 <__libc_init_array+0x1c>
   83dd8:	3401      	adds	r4, #1
   83dda:	f855 3b04 	ldr.w	r3, [r5], #4
   83dde:	4798      	blx	r3
   83de0:	42a6      	cmp	r6, r4
   83de2:	d1f9      	bne.n	83dd8 <__libc_init_array+0x10>
   83de4:	4e0a      	ldr	r6, [pc, #40]	; (83e10 <__libc_init_array+0x48>)
   83de6:	4d0b      	ldr	r5, [pc, #44]	; (83e14 <__libc_init_array+0x4c>)
   83de8:	f003 f812 	bl	86e10 <_init>
   83dec:	1b76      	subs	r6, r6, r5
   83dee:	10b6      	asrs	r6, r6, #2
   83df0:	bf18      	it	ne
   83df2:	2400      	movne	r4, #0
   83df4:	d006      	beq.n	83e04 <__libc_init_array+0x3c>
   83df6:	3401      	adds	r4, #1
   83df8:	f855 3b04 	ldr.w	r3, [r5], #4
   83dfc:	4798      	blx	r3
   83dfe:	42a6      	cmp	r6, r4
   83e00:	d1f9      	bne.n	83df6 <__libc_init_array+0x2e>
   83e02:	bd70      	pop	{r4, r5, r6, pc}
   83e04:	bd70      	pop	{r4, r5, r6, pc}
   83e06:	bf00      	nop
   83e08:	00086e1c 	.word	0x00086e1c
   83e0c:	00086e1c 	.word	0x00086e1c
   83e10:	00086e24 	.word	0x00086e24
   83e14:	00086e1c 	.word	0x00086e1c

00083e18 <iprintf>:
   83e18:	b40f      	push	{r0, r1, r2, r3}
   83e1a:	b510      	push	{r4, lr}
   83e1c:	4b07      	ldr	r3, [pc, #28]	; (83e3c <iprintf+0x24>)
   83e1e:	b082      	sub	sp, #8
   83e20:	ac04      	add	r4, sp, #16
   83e22:	f854 2b04 	ldr.w	r2, [r4], #4
   83e26:	6818      	ldr	r0, [r3, #0]
   83e28:	4623      	mov	r3, r4
   83e2a:	6881      	ldr	r1, [r0, #8]
   83e2c:	9401      	str	r4, [sp, #4]
   83e2e:	f000 f943 	bl	840b8 <_vfiprintf_r>
   83e32:	b002      	add	sp, #8
   83e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83e38:	b004      	add	sp, #16
   83e3a:	4770      	bx	lr
   83e3c:	20070830 	.word	0x20070830

00083e40 <memset>:
   83e40:	b470      	push	{r4, r5, r6}
   83e42:	0784      	lsls	r4, r0, #30
   83e44:	d046      	beq.n	83ed4 <memset+0x94>
   83e46:	1e54      	subs	r4, r2, #1
   83e48:	2a00      	cmp	r2, #0
   83e4a:	d041      	beq.n	83ed0 <memset+0x90>
   83e4c:	b2cd      	uxtb	r5, r1
   83e4e:	4603      	mov	r3, r0
   83e50:	e002      	b.n	83e58 <memset+0x18>
   83e52:	1e62      	subs	r2, r4, #1
   83e54:	b3e4      	cbz	r4, 83ed0 <memset+0x90>
   83e56:	4614      	mov	r4, r2
   83e58:	f803 5b01 	strb.w	r5, [r3], #1
   83e5c:	079a      	lsls	r2, r3, #30
   83e5e:	d1f8      	bne.n	83e52 <memset+0x12>
   83e60:	2c03      	cmp	r4, #3
   83e62:	d92e      	bls.n	83ec2 <memset+0x82>
   83e64:	b2cd      	uxtb	r5, r1
   83e66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83e6a:	2c0f      	cmp	r4, #15
   83e6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83e70:	d919      	bls.n	83ea6 <memset+0x66>
   83e72:	4626      	mov	r6, r4
   83e74:	f103 0210 	add.w	r2, r3, #16
   83e78:	3e10      	subs	r6, #16
   83e7a:	2e0f      	cmp	r6, #15
   83e7c:	f842 5c10 	str.w	r5, [r2, #-16]
   83e80:	f842 5c0c 	str.w	r5, [r2, #-12]
   83e84:	f842 5c08 	str.w	r5, [r2, #-8]
   83e88:	f842 5c04 	str.w	r5, [r2, #-4]
   83e8c:	f102 0210 	add.w	r2, r2, #16
   83e90:	d8f2      	bhi.n	83e78 <memset+0x38>
   83e92:	f1a4 0210 	sub.w	r2, r4, #16
   83e96:	f022 020f 	bic.w	r2, r2, #15
   83e9a:	f004 040f 	and.w	r4, r4, #15
   83e9e:	3210      	adds	r2, #16
   83ea0:	2c03      	cmp	r4, #3
   83ea2:	4413      	add	r3, r2
   83ea4:	d90d      	bls.n	83ec2 <memset+0x82>
   83ea6:	461e      	mov	r6, r3
   83ea8:	4622      	mov	r2, r4
   83eaa:	3a04      	subs	r2, #4
   83eac:	2a03      	cmp	r2, #3
   83eae:	f846 5b04 	str.w	r5, [r6], #4
   83eb2:	d8fa      	bhi.n	83eaa <memset+0x6a>
   83eb4:	1f22      	subs	r2, r4, #4
   83eb6:	f022 0203 	bic.w	r2, r2, #3
   83eba:	3204      	adds	r2, #4
   83ebc:	4413      	add	r3, r2
   83ebe:	f004 0403 	and.w	r4, r4, #3
   83ec2:	b12c      	cbz	r4, 83ed0 <memset+0x90>
   83ec4:	b2c9      	uxtb	r1, r1
   83ec6:	441c      	add	r4, r3
   83ec8:	f803 1b01 	strb.w	r1, [r3], #1
   83ecc:	42a3      	cmp	r3, r4
   83ece:	d1fb      	bne.n	83ec8 <memset+0x88>
   83ed0:	bc70      	pop	{r4, r5, r6}
   83ed2:	4770      	bx	lr
   83ed4:	4614      	mov	r4, r2
   83ed6:	4603      	mov	r3, r0
   83ed8:	e7c2      	b.n	83e60 <memset+0x20>
   83eda:	bf00      	nop

00083edc <setbuf>:
   83edc:	2900      	cmp	r1, #0
   83ede:	bf0c      	ite	eq
   83ee0:	2202      	moveq	r2, #2
   83ee2:	2200      	movne	r2, #0
   83ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83ee8:	f000 b800 	b.w	83eec <setvbuf>

00083eec <setvbuf>:
   83eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ef0:	4d3a      	ldr	r5, [pc, #232]	; (83fdc <setvbuf+0xf0>)
   83ef2:	4604      	mov	r4, r0
   83ef4:	682e      	ldr	r6, [r5, #0]
   83ef6:	4690      	mov	r8, r2
   83ef8:	460d      	mov	r5, r1
   83efa:	461f      	mov	r7, r3
   83efc:	b116      	cbz	r6, 83f04 <setvbuf+0x18>
   83efe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   83f00:	2b00      	cmp	r3, #0
   83f02:	d03c      	beq.n	83f7e <setvbuf+0x92>
   83f04:	f1b8 0f02 	cmp.w	r8, #2
   83f08:	d82f      	bhi.n	83f6a <setvbuf+0x7e>
   83f0a:	2f00      	cmp	r7, #0
   83f0c:	db2d      	blt.n	83f6a <setvbuf+0x7e>
   83f0e:	4621      	mov	r1, r4
   83f10:	4630      	mov	r0, r6
   83f12:	f001 f82d 	bl	84f70 <_fflush_r>
   83f16:	89a1      	ldrh	r1, [r4, #12]
   83f18:	2300      	movs	r3, #0
   83f1a:	6063      	str	r3, [r4, #4]
   83f1c:	61a3      	str	r3, [r4, #24]
   83f1e:	060b      	lsls	r3, r1, #24
   83f20:	d427      	bmi.n	83f72 <setvbuf+0x86>
   83f22:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   83f26:	b289      	uxth	r1, r1
   83f28:	f1b8 0f02 	cmp.w	r8, #2
   83f2c:	81a1      	strh	r1, [r4, #12]
   83f2e:	d02a      	beq.n	83f86 <setvbuf+0x9a>
   83f30:	2d00      	cmp	r5, #0
   83f32:	d036      	beq.n	83fa2 <setvbuf+0xb6>
   83f34:	f1b8 0f01 	cmp.w	r8, #1
   83f38:	d011      	beq.n	83f5e <setvbuf+0x72>
   83f3a:	b289      	uxth	r1, r1
   83f3c:	f001 0008 	and.w	r0, r1, #8
   83f40:	4b27      	ldr	r3, [pc, #156]	; (83fe0 <setvbuf+0xf4>)
   83f42:	b280      	uxth	r0, r0
   83f44:	63f3      	str	r3, [r6, #60]	; 0x3c
   83f46:	6025      	str	r5, [r4, #0]
   83f48:	6125      	str	r5, [r4, #16]
   83f4a:	6167      	str	r7, [r4, #20]
   83f4c:	b178      	cbz	r0, 83f6e <setvbuf+0x82>
   83f4e:	f011 0f03 	tst.w	r1, #3
   83f52:	bf18      	it	ne
   83f54:	2700      	movne	r7, #0
   83f56:	2000      	movs	r0, #0
   83f58:	60a7      	str	r7, [r4, #8]
   83f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f5e:	f041 0101 	orr.w	r1, r1, #1
   83f62:	427b      	negs	r3, r7
   83f64:	81a1      	strh	r1, [r4, #12]
   83f66:	61a3      	str	r3, [r4, #24]
   83f68:	e7e7      	b.n	83f3a <setvbuf+0x4e>
   83f6a:	f04f 30ff 	mov.w	r0, #4294967295
   83f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83f72:	6921      	ldr	r1, [r4, #16]
   83f74:	4630      	mov	r0, r6
   83f76:	f001 f967 	bl	85248 <_free_r>
   83f7a:	89a1      	ldrh	r1, [r4, #12]
   83f7c:	e7d1      	b.n	83f22 <setvbuf+0x36>
   83f7e:	4630      	mov	r0, r6
   83f80:	f001 f88a 	bl	85098 <__sinit>
   83f84:	e7be      	b.n	83f04 <setvbuf+0x18>
   83f86:	2000      	movs	r0, #0
   83f88:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83f8c:	f041 0102 	orr.w	r1, r1, #2
   83f90:	2500      	movs	r5, #0
   83f92:	2201      	movs	r2, #1
   83f94:	81a1      	strh	r1, [r4, #12]
   83f96:	60a5      	str	r5, [r4, #8]
   83f98:	6023      	str	r3, [r4, #0]
   83f9a:	6123      	str	r3, [r4, #16]
   83f9c:	6162      	str	r2, [r4, #20]
   83f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83fa2:	2f00      	cmp	r7, #0
   83fa4:	bf08      	it	eq
   83fa6:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83faa:	4638      	mov	r0, r7
   83fac:	f001 fc56 	bl	8585c <malloc>
   83fb0:	4605      	mov	r5, r0
   83fb2:	b128      	cbz	r0, 83fc0 <setvbuf+0xd4>
   83fb4:	89a1      	ldrh	r1, [r4, #12]
   83fb6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   83fba:	b289      	uxth	r1, r1
   83fbc:	81a1      	strh	r1, [r4, #12]
   83fbe:	e7b9      	b.n	83f34 <setvbuf+0x48>
   83fc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83fc4:	f001 fc4a 	bl	8585c <malloc>
   83fc8:	4605      	mov	r5, r0
   83fca:	b918      	cbnz	r0, 83fd4 <setvbuf+0xe8>
   83fcc:	89a1      	ldrh	r1, [r4, #12]
   83fce:	f04f 30ff 	mov.w	r0, #4294967295
   83fd2:	e7d9      	b.n	83f88 <setvbuf+0x9c>
   83fd4:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83fd8:	e7ec      	b.n	83fb4 <setvbuf+0xc8>
   83fda:	bf00      	nop
   83fdc:	20070830 	.word	0x20070830
   83fe0:	00084f9d 	.word	0x00084f9d

00083fe4 <strlen>:
   83fe4:	f020 0103 	bic.w	r1, r0, #3
   83fe8:	f010 0003 	ands.w	r0, r0, #3
   83fec:	f1c0 0000 	rsb	r0, r0, #0
   83ff0:	f851 3b04 	ldr.w	r3, [r1], #4
   83ff4:	f100 0c04 	add.w	ip, r0, #4
   83ff8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83ffc:	f06f 0200 	mvn.w	r2, #0
   84000:	bf1c      	itt	ne
   84002:	fa22 f20c 	lsrne.w	r2, r2, ip
   84006:	4313      	orrne	r3, r2
   84008:	f04f 0c01 	mov.w	ip, #1
   8400c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84010:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84014:	eba3 020c 	sub.w	r2, r3, ip
   84018:	ea22 0203 	bic.w	r2, r2, r3
   8401c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84020:	bf04      	itt	eq
   84022:	f851 3b04 	ldreq.w	r3, [r1], #4
   84026:	3004      	addeq	r0, #4
   84028:	d0f4      	beq.n	84014 <strlen+0x30>
   8402a:	f1c2 0100 	rsb	r1, r2, #0
   8402e:	ea02 0201 	and.w	r2, r2, r1
   84032:	fab2 f282 	clz	r2, r2
   84036:	f1c2 021f 	rsb	r2, r2, #31
   8403a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8403e:	4770      	bx	lr

00084040 <__sprint_r.part.0>:
   84040:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84046:	049c      	lsls	r4, r3, #18
   84048:	460f      	mov	r7, r1
   8404a:	4692      	mov	sl, r2
   8404c:	d52b      	bpl.n	840a6 <__sprint_r.part.0+0x66>
   8404e:	6893      	ldr	r3, [r2, #8]
   84050:	6812      	ldr	r2, [r2, #0]
   84052:	b333      	cbz	r3, 840a2 <__sprint_r.part.0+0x62>
   84054:	4680      	mov	r8, r0
   84056:	f102 0908 	add.w	r9, r2, #8
   8405a:	e919 0060 	ldmdb	r9, {r5, r6}
   8405e:	08b6      	lsrs	r6, r6, #2
   84060:	d017      	beq.n	84092 <__sprint_r.part.0+0x52>
   84062:	3d04      	subs	r5, #4
   84064:	2400      	movs	r4, #0
   84066:	e001      	b.n	8406c <__sprint_r.part.0+0x2c>
   84068:	42a6      	cmp	r6, r4
   8406a:	d010      	beq.n	8408e <__sprint_r.part.0+0x4e>
   8406c:	4640      	mov	r0, r8
   8406e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   84072:	463a      	mov	r2, r7
   84074:	f001 f888 	bl	85188 <_fputwc_r>
   84078:	1c43      	adds	r3, r0, #1
   8407a:	f104 0401 	add.w	r4, r4, #1
   8407e:	d1f3      	bne.n	84068 <__sprint_r.part.0+0x28>
   84080:	2300      	movs	r3, #0
   84082:	f8ca 3008 	str.w	r3, [sl, #8]
   84086:	f8ca 3004 	str.w	r3, [sl, #4]
   8408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8408e:	f8da 3008 	ldr.w	r3, [sl, #8]
   84092:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   84096:	f8ca 3008 	str.w	r3, [sl, #8]
   8409a:	f109 0908 	add.w	r9, r9, #8
   8409e:	2b00      	cmp	r3, #0
   840a0:	d1db      	bne.n	8405a <__sprint_r.part.0+0x1a>
   840a2:	2000      	movs	r0, #0
   840a4:	e7ec      	b.n	84080 <__sprint_r.part.0+0x40>
   840a6:	f001 f9a7 	bl	853f8 <__sfvwrite_r>
   840aa:	2300      	movs	r3, #0
   840ac:	f8ca 3008 	str.w	r3, [sl, #8]
   840b0:	f8ca 3004 	str.w	r3, [sl, #4]
   840b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000840b8 <_vfiprintf_r>:
   840b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840bc:	b0ab      	sub	sp, #172	; 0xac
   840be:	461c      	mov	r4, r3
   840c0:	9100      	str	r1, [sp, #0]
   840c2:	4693      	mov	fp, r2
   840c4:	9304      	str	r3, [sp, #16]
   840c6:	9001      	str	r0, [sp, #4]
   840c8:	b118      	cbz	r0, 840d2 <_vfiprintf_r+0x1a>
   840ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   840cc:	2b00      	cmp	r3, #0
   840ce:	f000 80e3 	beq.w	84298 <_vfiprintf_r+0x1e0>
   840d2:	9b00      	ldr	r3, [sp, #0]
   840d4:	8999      	ldrh	r1, [r3, #12]
   840d6:	b28a      	uxth	r2, r1
   840d8:	0490      	lsls	r0, r2, #18
   840da:	d408      	bmi.n	840ee <_vfiprintf_r+0x36>
   840dc:	4618      	mov	r0, r3
   840de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   840e0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   840e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   840e8:	8182      	strh	r2, [r0, #12]
   840ea:	6643      	str	r3, [r0, #100]	; 0x64
   840ec:	b292      	uxth	r2, r2
   840ee:	0711      	lsls	r1, r2, #28
   840f0:	f140 80b2 	bpl.w	84258 <_vfiprintf_r+0x1a0>
   840f4:	9b00      	ldr	r3, [sp, #0]
   840f6:	691b      	ldr	r3, [r3, #16]
   840f8:	2b00      	cmp	r3, #0
   840fa:	f000 80ad 	beq.w	84258 <_vfiprintf_r+0x1a0>
   840fe:	f002 021a 	and.w	r2, r2, #26
   84102:	2a0a      	cmp	r2, #10
   84104:	f000 80b4 	beq.w	84270 <_vfiprintf_r+0x1b8>
   84108:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   8410c:	4654      	mov	r4, sl
   8410e:	2300      	movs	r3, #0
   84110:	9309      	str	r3, [sp, #36]	; 0x24
   84112:	9302      	str	r3, [sp, #8]
   84114:	930f      	str	r3, [sp, #60]	; 0x3c
   84116:	930e      	str	r3, [sp, #56]	; 0x38
   84118:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   8411c:	f89b 3000 	ldrb.w	r3, [fp]
   84120:	2b00      	cmp	r3, #0
   84122:	f000 84a3 	beq.w	84a6c <_vfiprintf_r+0x9b4>
   84126:	2b25      	cmp	r3, #37	; 0x25
   84128:	f000 84a0 	beq.w	84a6c <_vfiprintf_r+0x9b4>
   8412c:	465a      	mov	r2, fp
   8412e:	e001      	b.n	84134 <_vfiprintf_r+0x7c>
   84130:	2b25      	cmp	r3, #37	; 0x25
   84132:	d003      	beq.n	8413c <_vfiprintf_r+0x84>
   84134:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   84138:	2b00      	cmp	r3, #0
   8413a:	d1f9      	bne.n	84130 <_vfiprintf_r+0x78>
   8413c:	ebcb 0602 	rsb	r6, fp, r2
   84140:	4615      	mov	r5, r2
   84142:	b196      	cbz	r6, 8416a <_vfiprintf_r+0xb2>
   84144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84148:	3301      	adds	r3, #1
   8414a:	4432      	add	r2, r6
   8414c:	2b07      	cmp	r3, #7
   8414e:	f8c4 b000 	str.w	fp, [r4]
   84152:	6066      	str	r6, [r4, #4]
   84154:	920f      	str	r2, [sp, #60]	; 0x3c
   84156:	930e      	str	r3, [sp, #56]	; 0x38
   84158:	dd79      	ble.n	8424e <_vfiprintf_r+0x196>
   8415a:	2a00      	cmp	r2, #0
   8415c:	f040 84ad 	bne.w	84aba <_vfiprintf_r+0xa02>
   84160:	4654      	mov	r4, sl
   84162:	9b02      	ldr	r3, [sp, #8]
   84164:	920e      	str	r2, [sp, #56]	; 0x38
   84166:	4433      	add	r3, r6
   84168:	9302      	str	r3, [sp, #8]
   8416a:	782b      	ldrb	r3, [r5, #0]
   8416c:	2b00      	cmp	r3, #0
   8416e:	f000 835f 	beq.w	84830 <_vfiprintf_r+0x778>
   84172:	f04f 0300 	mov.w	r3, #0
   84176:	2100      	movs	r1, #0
   84178:	f04f 3cff 	mov.w	ip, #4294967295
   8417c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84180:	1c68      	adds	r0, r5, #1
   84182:	786b      	ldrb	r3, [r5, #1]
   84184:	4688      	mov	r8, r1
   84186:	460d      	mov	r5, r1
   84188:	4666      	mov	r6, ip
   8418a:	f100 0b01 	add.w	fp, r0, #1
   8418e:	f1a3 0220 	sub.w	r2, r3, #32
   84192:	2a58      	cmp	r2, #88	; 0x58
   84194:	f200 82aa 	bhi.w	846ec <_vfiprintf_r+0x634>
   84198:	e8df f012 	tbh	[pc, r2, lsl #1]
   8419c:	02a8029a 	.word	0x02a8029a
   841a0:	02a202a8 	.word	0x02a202a8
   841a4:	02a802a8 	.word	0x02a802a8
   841a8:	02a802a8 	.word	0x02a802a8
   841ac:	02a802a8 	.word	0x02a802a8
   841b0:	02600254 	.word	0x02600254
   841b4:	010d02a8 	.word	0x010d02a8
   841b8:	02a8026c 	.word	0x02a8026c
   841bc:	012f0129 	.word	0x012f0129
   841c0:	012f012f 	.word	0x012f012f
   841c4:	012f012f 	.word	0x012f012f
   841c8:	012f012f 	.word	0x012f012f
   841cc:	012f012f 	.word	0x012f012f
   841d0:	02a802a8 	.word	0x02a802a8
   841d4:	02a802a8 	.word	0x02a802a8
   841d8:	02a802a8 	.word	0x02a802a8
   841dc:	02a802a8 	.word	0x02a802a8
   841e0:	02a802a8 	.word	0x02a802a8
   841e4:	02a8013d 	.word	0x02a8013d
   841e8:	02a802a8 	.word	0x02a802a8
   841ec:	02a802a8 	.word	0x02a802a8
   841f0:	02a802a8 	.word	0x02a802a8
   841f4:	02a802a8 	.word	0x02a802a8
   841f8:	017402a8 	.word	0x017402a8
   841fc:	02a802a8 	.word	0x02a802a8
   84200:	02a802a8 	.word	0x02a802a8
   84204:	018b02a8 	.word	0x018b02a8
   84208:	02a802a8 	.word	0x02a802a8
   8420c:	02a801a3 	.word	0x02a801a3
   84210:	02a802a8 	.word	0x02a802a8
   84214:	02a802a8 	.word	0x02a802a8
   84218:	02a802a8 	.word	0x02a802a8
   8421c:	02a802a8 	.word	0x02a802a8
   84220:	01c702a8 	.word	0x01c702a8
   84224:	02a801da 	.word	0x02a801da
   84228:	02a802a8 	.word	0x02a802a8
   8422c:	01da0123 	.word	0x01da0123
   84230:	02a802a8 	.word	0x02a802a8
   84234:	02a8024b 	.word	0x02a8024b
   84238:	01130288 	.word	0x01130288
   8423c:	020701f4 	.word	0x020701f4
   84240:	020d02a8 	.word	0x020d02a8
   84244:	008102a8 	.word	0x008102a8
   84248:	02a802a8 	.word	0x02a802a8
   8424c:	0232      	.short	0x0232
   8424e:	3408      	adds	r4, #8
   84250:	9b02      	ldr	r3, [sp, #8]
   84252:	4433      	add	r3, r6
   84254:	9302      	str	r3, [sp, #8]
   84256:	e788      	b.n	8416a <_vfiprintf_r+0xb2>
   84258:	9801      	ldr	r0, [sp, #4]
   8425a:	9900      	ldr	r1, [sp, #0]
   8425c:	f000 fd72 	bl	84d44 <__swsetup_r>
   84260:	b9a8      	cbnz	r0, 8428e <_vfiprintf_r+0x1d6>
   84262:	9b00      	ldr	r3, [sp, #0]
   84264:	899a      	ldrh	r2, [r3, #12]
   84266:	f002 021a 	and.w	r2, r2, #26
   8426a:	2a0a      	cmp	r2, #10
   8426c:	f47f af4c 	bne.w	84108 <_vfiprintf_r+0x50>
   84270:	9b00      	ldr	r3, [sp, #0]
   84272:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   84276:	2b00      	cmp	r3, #0
   84278:	f6ff af46 	blt.w	84108 <_vfiprintf_r+0x50>
   8427c:	9801      	ldr	r0, [sp, #4]
   8427e:	9900      	ldr	r1, [sp, #0]
   84280:	465a      	mov	r2, fp
   84282:	4623      	mov	r3, r4
   84284:	f000 fd20 	bl	84cc8 <__sbprintf>
   84288:	b02b      	add	sp, #172	; 0xac
   8428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8428e:	f04f 30ff 	mov.w	r0, #4294967295
   84292:	b02b      	add	sp, #172	; 0xac
   84294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84298:	f000 fefe 	bl	85098 <__sinit>
   8429c:	e719      	b.n	840d2 <_vfiprintf_r+0x1a>
   8429e:	f018 0f20 	tst.w	r8, #32
   842a2:	9503      	str	r5, [sp, #12]
   842a4:	46b4      	mov	ip, r6
   842a6:	f000 810c 	beq.w	844c2 <_vfiprintf_r+0x40a>
   842aa:	9b04      	ldr	r3, [sp, #16]
   842ac:	3307      	adds	r3, #7
   842ae:	f023 0307 	bic.w	r3, r3, #7
   842b2:	f103 0208 	add.w	r2, r3, #8
   842b6:	e9d3 6700 	ldrd	r6, r7, [r3]
   842ba:	9204      	str	r2, [sp, #16]
   842bc:	2301      	movs	r3, #1
   842be:	f04f 0200 	mov.w	r2, #0
   842c2:	46e1      	mov	r9, ip
   842c4:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   842c8:	2500      	movs	r5, #0
   842ca:	f1bc 0f00 	cmp.w	ip, #0
   842ce:	bfa8      	it	ge
   842d0:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   842d4:	ea56 0207 	orrs.w	r2, r6, r7
   842d8:	f040 80c4 	bne.w	84464 <_vfiprintf_r+0x3ac>
   842dc:	f1bc 0f00 	cmp.w	ip, #0
   842e0:	f000 8380 	beq.w	849e4 <_vfiprintf_r+0x92c>
   842e4:	2b01      	cmp	r3, #1
   842e6:	f000 80c5 	beq.w	84474 <_vfiprintf_r+0x3bc>
   842ea:	2b02      	cmp	r3, #2
   842ec:	f000 8386 	beq.w	849fc <_vfiprintf_r+0x944>
   842f0:	4651      	mov	r1, sl
   842f2:	08f2      	lsrs	r2, r6, #3
   842f4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   842f8:	08f8      	lsrs	r0, r7, #3
   842fa:	f006 0307 	and.w	r3, r6, #7
   842fe:	4607      	mov	r7, r0
   84300:	4616      	mov	r6, r2
   84302:	3330      	adds	r3, #48	; 0x30
   84304:	ea56 0207 	orrs.w	r2, r6, r7
   84308:	f801 3d01 	strb.w	r3, [r1, #-1]!
   8430c:	d1f1      	bne.n	842f2 <_vfiprintf_r+0x23a>
   8430e:	f018 0f01 	tst.w	r8, #1
   84312:	9107      	str	r1, [sp, #28]
   84314:	f040 83fa 	bne.w	84b0c <_vfiprintf_r+0xa54>
   84318:	ebc1 090a 	rsb	r9, r1, sl
   8431c:	45e1      	cmp	r9, ip
   8431e:	464e      	mov	r6, r9
   84320:	bfb8      	it	lt
   84322:	4666      	movlt	r6, ip
   84324:	b105      	cbz	r5, 84328 <_vfiprintf_r+0x270>
   84326:	3601      	adds	r6, #1
   84328:	f018 0302 	ands.w	r3, r8, #2
   8432c:	9305      	str	r3, [sp, #20]
   8432e:	bf18      	it	ne
   84330:	3602      	addne	r6, #2
   84332:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   84336:	9306      	str	r3, [sp, #24]
   84338:	f040 81f9 	bne.w	8472e <_vfiprintf_r+0x676>
   8433c:	9b03      	ldr	r3, [sp, #12]
   8433e:	1b9d      	subs	r5, r3, r6
   84340:	2d00      	cmp	r5, #0
   84342:	f340 81f4 	ble.w	8472e <_vfiprintf_r+0x676>
   84346:	2d10      	cmp	r5, #16
   84348:	f340 848a 	ble.w	84c60 <_vfiprintf_r+0xba8>
   8434c:	4620      	mov	r0, r4
   8434e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   84352:	4664      	mov	r4, ip
   84354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84356:	4fc4      	ldr	r7, [pc, #784]	; (84668 <_vfiprintf_r+0x5b0>)
   84358:	2310      	movs	r3, #16
   8435a:	4671      	mov	r1, lr
   8435c:	4684      	mov	ip, r0
   8435e:	e007      	b.n	84370 <_vfiprintf_r+0x2b8>
   84360:	f101 0e02 	add.w	lr, r1, #2
   84364:	4601      	mov	r1, r0
   84366:	f10c 0c08 	add.w	ip, ip, #8
   8436a:	3d10      	subs	r5, #16
   8436c:	2d10      	cmp	r5, #16
   8436e:	dd13      	ble.n	84398 <_vfiprintf_r+0x2e0>
   84370:	1c48      	adds	r0, r1, #1
   84372:	3210      	adds	r2, #16
   84374:	2807      	cmp	r0, #7
   84376:	920f      	str	r2, [sp, #60]	; 0x3c
   84378:	f8cc 7000 	str.w	r7, [ip]
   8437c:	f8cc 3004 	str.w	r3, [ip, #4]
   84380:	900e      	str	r0, [sp, #56]	; 0x38
   84382:	dded      	ble.n	84360 <_vfiprintf_r+0x2a8>
   84384:	2a00      	cmp	r2, #0
   84386:	f040 81c2 	bne.w	8470e <_vfiprintf_r+0x656>
   8438a:	3d10      	subs	r5, #16
   8438c:	2d10      	cmp	r5, #16
   8438e:	4611      	mov	r1, r2
   84390:	f04f 0e01 	mov.w	lr, #1
   84394:	46d4      	mov	ip, sl
   84396:	dceb      	bgt.n	84370 <_vfiprintf_r+0x2b8>
   84398:	4663      	mov	r3, ip
   8439a:	4671      	mov	r1, lr
   8439c:	46a4      	mov	ip, r4
   8439e:	461c      	mov	r4, r3
   843a0:	442a      	add	r2, r5
   843a2:	2907      	cmp	r1, #7
   843a4:	920f      	str	r2, [sp, #60]	; 0x3c
   843a6:	6027      	str	r7, [r4, #0]
   843a8:	6065      	str	r5, [r4, #4]
   843aa:	910e      	str	r1, [sp, #56]	; 0x38
   843ac:	f300 8346 	bgt.w	84a3c <_vfiprintf_r+0x984>
   843b0:	3408      	adds	r4, #8
   843b2:	1c48      	adds	r0, r1, #1
   843b4:	e1be      	b.n	84734 <_vfiprintf_r+0x67c>
   843b6:	4658      	mov	r0, fp
   843b8:	f048 0804 	orr.w	r8, r8, #4
   843bc:	f89b 3000 	ldrb.w	r3, [fp]
   843c0:	e6e3      	b.n	8418a <_vfiprintf_r+0xd2>
   843c2:	f018 0320 	ands.w	r3, r8, #32
   843c6:	9503      	str	r5, [sp, #12]
   843c8:	46b4      	mov	ip, r6
   843ca:	d062      	beq.n	84492 <_vfiprintf_r+0x3da>
   843cc:	9b04      	ldr	r3, [sp, #16]
   843ce:	3307      	adds	r3, #7
   843d0:	f023 0307 	bic.w	r3, r3, #7
   843d4:	f103 0208 	add.w	r2, r3, #8
   843d8:	e9d3 6700 	ldrd	r6, r7, [r3]
   843dc:	9204      	str	r2, [sp, #16]
   843de:	2300      	movs	r3, #0
   843e0:	e76d      	b.n	842be <_vfiprintf_r+0x206>
   843e2:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   843e6:	f89b 3000 	ldrb.w	r3, [fp]
   843ea:	4658      	mov	r0, fp
   843ec:	e6cd      	b.n	8418a <_vfiprintf_r+0xd2>
   843ee:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   843f2:	f89b 3000 	ldrb.w	r3, [fp]
   843f6:	4658      	mov	r0, fp
   843f8:	e6c7      	b.n	8418a <_vfiprintf_r+0xd2>
   843fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   843fe:	2500      	movs	r5, #0
   84400:	f81b 3b01 	ldrb.w	r3, [fp], #1
   84404:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84408:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8440c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84410:	2a09      	cmp	r2, #9
   84412:	d9f5      	bls.n	84400 <_vfiprintf_r+0x348>
   84414:	e6bb      	b.n	8418e <_vfiprintf_r+0xd6>
   84416:	f048 0810 	orr.w	r8, r8, #16
   8441a:	f018 0f20 	tst.w	r8, #32
   8441e:	9503      	str	r5, [sp, #12]
   84420:	46b4      	mov	ip, r6
   84422:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84426:	f000 809b 	beq.w	84560 <_vfiprintf_r+0x4a8>
   8442a:	9904      	ldr	r1, [sp, #16]
   8442c:	3107      	adds	r1, #7
   8442e:	f021 0107 	bic.w	r1, r1, #7
   84432:	e9d1 2300 	ldrd	r2, r3, [r1]
   84436:	4616      	mov	r6, r2
   84438:	461f      	mov	r7, r3
   8443a:	3108      	adds	r1, #8
   8443c:	9104      	str	r1, [sp, #16]
   8443e:	2a00      	cmp	r2, #0
   84440:	f173 0300 	sbcs.w	r3, r3, #0
   84444:	f2c0 83a4 	blt.w	84b90 <_vfiprintf_r+0xad8>
   84448:	f1bc 0f00 	cmp.w	ip, #0
   8444c:	bfa8      	it	ge
   8444e:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   84452:	ea56 0207 	orrs.w	r2, r6, r7
   84456:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8445a:	46e1      	mov	r9, ip
   8445c:	f04f 0301 	mov.w	r3, #1
   84460:	f43f af3c 	beq.w	842dc <_vfiprintf_r+0x224>
   84464:	2b01      	cmp	r3, #1
   84466:	f47f af40 	bne.w	842ea <_vfiprintf_r+0x232>
   8446a:	2f00      	cmp	r7, #0
   8446c:	bf08      	it	eq
   8446e:	2e0a      	cmpeq	r6, #10
   84470:	f080 8332 	bcs.w	84ad8 <_vfiprintf_r+0xa20>
   84474:	ab2a      	add	r3, sp, #168	; 0xa8
   84476:	3630      	adds	r6, #48	; 0x30
   84478:	f803 6d41 	strb.w	r6, [r3, #-65]!
   8447c:	ebc3 090a 	rsb	r9, r3, sl
   84480:	9307      	str	r3, [sp, #28]
   84482:	e74b      	b.n	8431c <_vfiprintf_r+0x264>
   84484:	f048 0810 	orr.w	r8, r8, #16
   84488:	f018 0320 	ands.w	r3, r8, #32
   8448c:	9503      	str	r5, [sp, #12]
   8448e:	46b4      	mov	ip, r6
   84490:	d19c      	bne.n	843cc <_vfiprintf_r+0x314>
   84492:	f018 0210 	ands.w	r2, r8, #16
   84496:	f040 82f7 	bne.w	84a88 <_vfiprintf_r+0x9d0>
   8449a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   8449e:	f000 82f3 	beq.w	84a88 <_vfiprintf_r+0x9d0>
   844a2:	9904      	ldr	r1, [sp, #16]
   844a4:	4613      	mov	r3, r2
   844a6:	460a      	mov	r2, r1
   844a8:	3204      	adds	r2, #4
   844aa:	880e      	ldrh	r6, [r1, #0]
   844ac:	2700      	movs	r7, #0
   844ae:	9204      	str	r2, [sp, #16]
   844b0:	e705      	b.n	842be <_vfiprintf_r+0x206>
   844b2:	f048 0810 	orr.w	r8, r8, #16
   844b6:	f018 0f20 	tst.w	r8, #32
   844ba:	9503      	str	r5, [sp, #12]
   844bc:	46b4      	mov	ip, r6
   844be:	f47f aef4 	bne.w	842aa <_vfiprintf_r+0x1f2>
   844c2:	9a04      	ldr	r2, [sp, #16]
   844c4:	f018 0f10 	tst.w	r8, #16
   844c8:	4613      	mov	r3, r2
   844ca:	f040 82e4 	bne.w	84a96 <_vfiprintf_r+0x9de>
   844ce:	f018 0f40 	tst.w	r8, #64	; 0x40
   844d2:	f000 82e0 	beq.w	84a96 <_vfiprintf_r+0x9de>
   844d6:	8816      	ldrh	r6, [r2, #0]
   844d8:	3204      	adds	r2, #4
   844da:	2700      	movs	r7, #0
   844dc:	2301      	movs	r3, #1
   844de:	9204      	str	r2, [sp, #16]
   844e0:	e6ed      	b.n	842be <_vfiprintf_r+0x206>
   844e2:	4a62      	ldr	r2, [pc, #392]	; (8466c <_vfiprintf_r+0x5b4>)
   844e4:	f018 0f20 	tst.w	r8, #32
   844e8:	9503      	str	r5, [sp, #12]
   844ea:	46b4      	mov	ip, r6
   844ec:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   844f0:	9209      	str	r2, [sp, #36]	; 0x24
   844f2:	f000 808f 	beq.w	84614 <_vfiprintf_r+0x55c>
   844f6:	9a04      	ldr	r2, [sp, #16]
   844f8:	3207      	adds	r2, #7
   844fa:	f022 0207 	bic.w	r2, r2, #7
   844fe:	f102 0108 	add.w	r1, r2, #8
   84502:	9104      	str	r1, [sp, #16]
   84504:	e9d2 6700 	ldrd	r6, r7, [r2]
   84508:	f018 0f01 	tst.w	r8, #1
   8450c:	f000 828f 	beq.w	84a2e <_vfiprintf_r+0x976>
   84510:	ea56 0207 	orrs.w	r2, r6, r7
   84514:	f000 828b 	beq.w	84a2e <_vfiprintf_r+0x976>
   84518:	2230      	movs	r2, #48	; 0x30
   8451a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8451e:	f048 0802 	orr.w	r8, r8, #2
   84522:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84526:	2302      	movs	r3, #2
   84528:	e6c9      	b.n	842be <_vfiprintf_r+0x206>
   8452a:	9a04      	ldr	r2, [sp, #16]
   8452c:	2601      	movs	r6, #1
   8452e:	6813      	ldr	r3, [r2, #0]
   84530:	f04f 0100 	mov.w	r1, #0
   84534:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84538:	4613      	mov	r3, r2
   8453a:	46b1      	mov	r9, r6
   8453c:	3304      	adds	r3, #4
   8453e:	9304      	str	r3, [sp, #16]
   84540:	ab10      	add	r3, sp, #64	; 0x40
   84542:	9503      	str	r5, [sp, #12]
   84544:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84548:	9307      	str	r3, [sp, #28]
   8454a:	f04f 0c00 	mov.w	ip, #0
   8454e:	e6eb      	b.n	84328 <_vfiprintf_r+0x270>
   84550:	f018 0f20 	tst.w	r8, #32
   84554:	9503      	str	r5, [sp, #12]
   84556:	46b4      	mov	ip, r6
   84558:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8455c:	f47f af65 	bne.w	8442a <_vfiprintf_r+0x372>
   84560:	9a04      	ldr	r2, [sp, #16]
   84562:	f018 0f10 	tst.w	r8, #16
   84566:	4613      	mov	r3, r2
   84568:	f040 82a0 	bne.w	84aac <_vfiprintf_r+0x9f4>
   8456c:	f018 0f40 	tst.w	r8, #64	; 0x40
   84570:	f000 829c 	beq.w	84aac <_vfiprintf_r+0x9f4>
   84574:	f9b2 6000 	ldrsh.w	r6, [r2]
   84578:	3304      	adds	r3, #4
   8457a:	17f7      	asrs	r7, r6, #31
   8457c:	9304      	str	r3, [sp, #16]
   8457e:	4632      	mov	r2, r6
   84580:	463b      	mov	r3, r7
   84582:	e75c      	b.n	8443e <_vfiprintf_r+0x386>
   84584:	9904      	ldr	r1, [sp, #16]
   84586:	2378      	movs	r3, #120	; 0x78
   84588:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8458c:	4b38      	ldr	r3, [pc, #224]	; (84670 <_vfiprintf_r+0x5b8>)
   8458e:	46b4      	mov	ip, r6
   84590:	2230      	movs	r2, #48	; 0x30
   84592:	680e      	ldr	r6, [r1, #0]
   84594:	3104      	adds	r1, #4
   84596:	9309      	str	r3, [sp, #36]	; 0x24
   84598:	9503      	str	r5, [sp, #12]
   8459a:	f048 0802 	orr.w	r8, r8, #2
   8459e:	9104      	str	r1, [sp, #16]
   845a0:	2700      	movs	r7, #0
   845a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   845a6:	2302      	movs	r3, #2
   845a8:	e689      	b.n	842be <_vfiprintf_r+0x206>
   845aa:	f048 0820 	orr.w	r8, r8, #32
   845ae:	f89b 3000 	ldrb.w	r3, [fp]
   845b2:	4658      	mov	r0, fp
   845b4:	e5e9      	b.n	8418a <_vfiprintf_r+0xd2>
   845b6:	f04f 0100 	mov.w	r1, #0
   845ba:	9a04      	ldr	r2, [sp, #16]
   845bc:	9503      	str	r5, [sp, #12]
   845be:	6813      	ldr	r3, [r2, #0]
   845c0:	46b4      	mov	ip, r6
   845c2:	9307      	str	r3, [sp, #28]
   845c4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   845c8:	1d15      	adds	r5, r2, #4
   845ca:	2b00      	cmp	r3, #0
   845cc:	f000 834e 	beq.w	84c6c <_vfiprintf_r+0xbb4>
   845d0:	2e00      	cmp	r6, #0
   845d2:	f2c0 8329 	blt.w	84c28 <_vfiprintf_r+0xb70>
   845d6:	9e07      	ldr	r6, [sp, #28]
   845d8:	4662      	mov	r2, ip
   845da:	4630      	mov	r0, r6
   845dc:	2100      	movs	r1, #0
   845de:	f8cd c010 	str.w	ip, [sp, #16]
   845e2:	f001 fbc9 	bl	85d78 <memchr>
   845e6:	f8dd c010 	ldr.w	ip, [sp, #16]
   845ea:	2800      	cmp	r0, #0
   845ec:	f000 834e 	beq.w	84c8c <_vfiprintf_r+0xbd4>
   845f0:	9504      	str	r5, [sp, #16]
   845f2:	ebc6 0900 	rsb	r9, r6, r0
   845f6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   845fa:	f04f 0c00 	mov.w	ip, #0
   845fe:	e68d      	b.n	8431c <_vfiprintf_r+0x264>
   84600:	4a1b      	ldr	r2, [pc, #108]	; (84670 <_vfiprintf_r+0x5b8>)
   84602:	f018 0f20 	tst.w	r8, #32
   84606:	9503      	str	r5, [sp, #12]
   84608:	46b4      	mov	ip, r6
   8460a:	9209      	str	r2, [sp, #36]	; 0x24
   8460c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84610:	f47f af71 	bne.w	844f6 <_vfiprintf_r+0x43e>
   84614:	9904      	ldr	r1, [sp, #16]
   84616:	f018 0f10 	tst.w	r8, #16
   8461a:	460a      	mov	r2, r1
   8461c:	f040 8241 	bne.w	84aa2 <_vfiprintf_r+0x9ea>
   84620:	f018 0f40 	tst.w	r8, #64	; 0x40
   84624:	f000 823d 	beq.w	84aa2 <_vfiprintf_r+0x9ea>
   84628:	3204      	adds	r2, #4
   8462a:	880e      	ldrh	r6, [r1, #0]
   8462c:	2700      	movs	r7, #0
   8462e:	9204      	str	r2, [sp, #16]
   84630:	e76a      	b.n	84508 <_vfiprintf_r+0x450>
   84632:	f89b 3000 	ldrb.w	r3, [fp]
   84636:	2b6c      	cmp	r3, #108	; 0x6c
   84638:	f000 82e9 	beq.w	84c0e <_vfiprintf_r+0xb56>
   8463c:	f048 0810 	orr.w	r8, r8, #16
   84640:	4658      	mov	r0, fp
   84642:	e5a2      	b.n	8418a <_vfiprintf_r+0xd2>
   84644:	9a04      	ldr	r2, [sp, #16]
   84646:	4613      	mov	r3, r2
   84648:	6815      	ldr	r5, [r2, #0]
   8464a:	3304      	adds	r3, #4
   8464c:	2d00      	cmp	r5, #0
   8464e:	f2c0 82e6 	blt.w	84c1e <_vfiprintf_r+0xb66>
   84652:	9304      	str	r3, [sp, #16]
   84654:	f89b 3000 	ldrb.w	r3, [fp]
   84658:	4658      	mov	r0, fp
   8465a:	e596      	b.n	8418a <_vfiprintf_r+0xd2>
   8465c:	f89b 3000 	ldrb.w	r3, [fp]
   84660:	4658      	mov	r0, fp
   84662:	212b      	movs	r1, #43	; 0x2b
   84664:	e591      	b.n	8418a <_vfiprintf_r+0xd2>
   84666:	bf00      	nop
   84668:	00086e00 	.word	0x00086e00
   8466c:	00086dd0 	.word	0x00086dd0
   84670:	00086de4 	.word	0x00086de4
   84674:	f89b 3000 	ldrb.w	r3, [fp]
   84678:	f10b 0001 	add.w	r0, fp, #1
   8467c:	2b2a      	cmp	r3, #42	; 0x2a
   8467e:	f000 830f 	beq.w	84ca0 <_vfiprintf_r+0xbe8>
   84682:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84686:	2a09      	cmp	r2, #9
   84688:	4683      	mov	fp, r0
   8468a:	f04f 0600 	mov.w	r6, #0
   8468e:	f63f ad7e 	bhi.w	8418e <_vfiprintf_r+0xd6>
   84692:	f81b 3b01 	ldrb.w	r3, [fp], #1
   84696:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   8469a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   8469e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   846a2:	2a09      	cmp	r2, #9
   846a4:	d9f5      	bls.n	84692 <_vfiprintf_r+0x5da>
   846a6:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   846aa:	e570      	b.n	8418e <_vfiprintf_r+0xd6>
   846ac:	f018 0f20 	tst.w	r8, #32
   846b0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   846b4:	f000 8283 	beq.w	84bbe <_vfiprintf_r+0xb06>
   846b8:	9a04      	ldr	r2, [sp, #16]
   846ba:	4613      	mov	r3, r2
   846bc:	3304      	adds	r3, #4
   846be:	9304      	str	r3, [sp, #16]
   846c0:	9b02      	ldr	r3, [sp, #8]
   846c2:	6811      	ldr	r1, [r2, #0]
   846c4:	17df      	asrs	r7, r3, #31
   846c6:	461a      	mov	r2, r3
   846c8:	463b      	mov	r3, r7
   846ca:	e9c1 2300 	strd	r2, r3, [r1]
   846ce:	e525      	b.n	8411c <_vfiprintf_r+0x64>
   846d0:	4658      	mov	r0, fp
   846d2:	f89b 3000 	ldrb.w	r3, [fp]
   846d6:	2900      	cmp	r1, #0
   846d8:	f47f ad57 	bne.w	8418a <_vfiprintf_r+0xd2>
   846dc:	2120      	movs	r1, #32
   846de:	e554      	b.n	8418a <_vfiprintf_r+0xd2>
   846e0:	f048 0801 	orr.w	r8, r8, #1
   846e4:	4658      	mov	r0, fp
   846e6:	f89b 3000 	ldrb.w	r3, [fp]
   846ea:	e54e      	b.n	8418a <_vfiprintf_r+0xd2>
   846ec:	9503      	str	r5, [sp, #12]
   846ee:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   846f2:	2b00      	cmp	r3, #0
   846f4:	f000 809c 	beq.w	84830 <_vfiprintf_r+0x778>
   846f8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   846fc:	f04f 0300 	mov.w	r3, #0
   84700:	2601      	movs	r6, #1
   84702:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84706:	ab10      	add	r3, sp, #64	; 0x40
   84708:	46b1      	mov	r9, r6
   8470a:	9307      	str	r3, [sp, #28]
   8470c:	e71d      	b.n	8454a <_vfiprintf_r+0x492>
   8470e:	9801      	ldr	r0, [sp, #4]
   84710:	9900      	ldr	r1, [sp, #0]
   84712:	aa0d      	add	r2, sp, #52	; 0x34
   84714:	9308      	str	r3, [sp, #32]
   84716:	f7ff fc93 	bl	84040 <__sprint_r.part.0>
   8471a:	2800      	cmp	r0, #0
   8471c:	f040 808f 	bne.w	8483e <_vfiprintf_r+0x786>
   84720:	990e      	ldr	r1, [sp, #56]	; 0x38
   84722:	46d4      	mov	ip, sl
   84724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84726:	f101 0e01 	add.w	lr, r1, #1
   8472a:	9b08      	ldr	r3, [sp, #32]
   8472c:	e61d      	b.n	8436a <_vfiprintf_r+0x2b2>
   8472e:	990e      	ldr	r1, [sp, #56]	; 0x38
   84730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84732:	1c48      	adds	r0, r1, #1
   84734:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84738:	b16b      	cbz	r3, 84756 <_vfiprintf_r+0x69e>
   8473a:	3201      	adds	r2, #1
   8473c:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   84740:	2101      	movs	r1, #1
   84742:	2807      	cmp	r0, #7
   84744:	920f      	str	r2, [sp, #60]	; 0x3c
   84746:	900e      	str	r0, [sp, #56]	; 0x38
   84748:	6023      	str	r3, [r4, #0]
   8474a:	6061      	str	r1, [r4, #4]
   8474c:	f300 8134 	bgt.w	849b8 <_vfiprintf_r+0x900>
   84750:	4601      	mov	r1, r0
   84752:	3408      	adds	r4, #8
   84754:	3001      	adds	r0, #1
   84756:	9b05      	ldr	r3, [sp, #20]
   84758:	b163      	cbz	r3, 84774 <_vfiprintf_r+0x6bc>
   8475a:	3202      	adds	r2, #2
   8475c:	a90c      	add	r1, sp, #48	; 0x30
   8475e:	2302      	movs	r3, #2
   84760:	2807      	cmp	r0, #7
   84762:	920f      	str	r2, [sp, #60]	; 0x3c
   84764:	900e      	str	r0, [sp, #56]	; 0x38
   84766:	e884 000a 	stmia.w	r4, {r1, r3}
   8476a:	f300 8134 	bgt.w	849d6 <_vfiprintf_r+0x91e>
   8476e:	4601      	mov	r1, r0
   84770:	3408      	adds	r4, #8
   84772:	3001      	adds	r0, #1
   84774:	9b06      	ldr	r3, [sp, #24]
   84776:	2b80      	cmp	r3, #128	; 0x80
   84778:	f000 80d4 	beq.w	84924 <_vfiprintf_r+0x86c>
   8477c:	ebc9 070c 	rsb	r7, r9, ip
   84780:	2f00      	cmp	r7, #0
   84782:	dd2b      	ble.n	847dc <_vfiprintf_r+0x724>
   84784:	2f10      	cmp	r7, #16
   84786:	4dab      	ldr	r5, [pc, #684]	; (84a34 <_vfiprintf_r+0x97c>)
   84788:	dd1f      	ble.n	847ca <_vfiprintf_r+0x712>
   8478a:	46a6      	mov	lr, r4
   8478c:	2310      	movs	r3, #16
   8478e:	9c01      	ldr	r4, [sp, #4]
   84790:	e007      	b.n	847a2 <_vfiprintf_r+0x6ea>
   84792:	f101 0c02 	add.w	ip, r1, #2
   84796:	4601      	mov	r1, r0
   84798:	f10e 0e08 	add.w	lr, lr, #8
   8479c:	3f10      	subs	r7, #16
   8479e:	2f10      	cmp	r7, #16
   847a0:	dd11      	ble.n	847c6 <_vfiprintf_r+0x70e>
   847a2:	1c48      	adds	r0, r1, #1
   847a4:	3210      	adds	r2, #16
   847a6:	2807      	cmp	r0, #7
   847a8:	920f      	str	r2, [sp, #60]	; 0x3c
   847aa:	f8ce 5000 	str.w	r5, [lr]
   847ae:	f8ce 3004 	str.w	r3, [lr, #4]
   847b2:	900e      	str	r0, [sp, #56]	; 0x38
   847b4:	dded      	ble.n	84792 <_vfiprintf_r+0x6da>
   847b6:	bb6a      	cbnz	r2, 84814 <_vfiprintf_r+0x75c>
   847b8:	3f10      	subs	r7, #16
   847ba:	2f10      	cmp	r7, #16
   847bc:	f04f 0c01 	mov.w	ip, #1
   847c0:	4611      	mov	r1, r2
   847c2:	46d6      	mov	lr, sl
   847c4:	dced      	bgt.n	847a2 <_vfiprintf_r+0x6ea>
   847c6:	4674      	mov	r4, lr
   847c8:	4660      	mov	r0, ip
   847ca:	443a      	add	r2, r7
   847cc:	2807      	cmp	r0, #7
   847ce:	920f      	str	r2, [sp, #60]	; 0x3c
   847d0:	e884 00a0 	stmia.w	r4, {r5, r7}
   847d4:	900e      	str	r0, [sp, #56]	; 0x38
   847d6:	dc3b      	bgt.n	84850 <_vfiprintf_r+0x798>
   847d8:	3408      	adds	r4, #8
   847da:	3001      	adds	r0, #1
   847dc:	eb02 0309 	add.w	r3, r2, r9
   847e0:	9a07      	ldr	r2, [sp, #28]
   847e2:	2807      	cmp	r0, #7
   847e4:	930f      	str	r3, [sp, #60]	; 0x3c
   847e6:	e884 0204 	stmia.w	r4, {r2, r9}
   847ea:	900e      	str	r0, [sp, #56]	; 0x38
   847ec:	dd3d      	ble.n	8486a <_vfiprintf_r+0x7b2>
   847ee:	2b00      	cmp	r3, #0
   847f0:	f040 813f 	bne.w	84a72 <_vfiprintf_r+0x9ba>
   847f4:	f018 0f04 	tst.w	r8, #4
   847f8:	930e      	str	r3, [sp, #56]	; 0x38
   847fa:	f040 8130 	bne.w	84a5e <_vfiprintf_r+0x9a6>
   847fe:	9b02      	ldr	r3, [sp, #8]
   84800:	9a03      	ldr	r2, [sp, #12]
   84802:	4296      	cmp	r6, r2
   84804:	bfac      	ite	ge
   84806:	199b      	addge	r3, r3, r6
   84808:	189b      	addlt	r3, r3, r2
   8480a:	9302      	str	r3, [sp, #8]
   8480c:	2300      	movs	r3, #0
   8480e:	930e      	str	r3, [sp, #56]	; 0x38
   84810:	4654      	mov	r4, sl
   84812:	e483      	b.n	8411c <_vfiprintf_r+0x64>
   84814:	4620      	mov	r0, r4
   84816:	9900      	ldr	r1, [sp, #0]
   84818:	aa0d      	add	r2, sp, #52	; 0x34
   8481a:	9305      	str	r3, [sp, #20]
   8481c:	f7ff fc10 	bl	84040 <__sprint_r.part.0>
   84820:	b968      	cbnz	r0, 8483e <_vfiprintf_r+0x786>
   84822:	990e      	ldr	r1, [sp, #56]	; 0x38
   84824:	46d6      	mov	lr, sl
   84826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84828:	f101 0c01 	add.w	ip, r1, #1
   8482c:	9b05      	ldr	r3, [sp, #20]
   8482e:	e7b5      	b.n	8479c <_vfiprintf_r+0x6e4>
   84830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84832:	b123      	cbz	r3, 8483e <_vfiprintf_r+0x786>
   84834:	9801      	ldr	r0, [sp, #4]
   84836:	9900      	ldr	r1, [sp, #0]
   84838:	aa0d      	add	r2, sp, #52	; 0x34
   8483a:	f7ff fc01 	bl	84040 <__sprint_r.part.0>
   8483e:	9b00      	ldr	r3, [sp, #0]
   84840:	899b      	ldrh	r3, [r3, #12]
   84842:	065b      	lsls	r3, r3, #25
   84844:	f53f ad23 	bmi.w	8428e <_vfiprintf_r+0x1d6>
   84848:	9802      	ldr	r0, [sp, #8]
   8484a:	b02b      	add	sp, #172	; 0xac
   8484c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84850:	2a00      	cmp	r2, #0
   84852:	f040 8190 	bne.w	84b76 <_vfiprintf_r+0xabe>
   84856:	464b      	mov	r3, r9
   84858:	4654      	mov	r4, sl
   8485a:	9907      	ldr	r1, [sp, #28]
   8485c:	2201      	movs	r2, #1
   8485e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   84862:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   84866:	911a      	str	r1, [sp, #104]	; 0x68
   84868:	920e      	str	r2, [sp, #56]	; 0x38
   8486a:	f104 0208 	add.w	r2, r4, #8
   8486e:	f018 0f04 	tst.w	r8, #4
   84872:	d039      	beq.n	848e8 <_vfiprintf_r+0x830>
   84874:	9903      	ldr	r1, [sp, #12]
   84876:	1b8d      	subs	r5, r1, r6
   84878:	2d00      	cmp	r5, #0
   8487a:	dd35      	ble.n	848e8 <_vfiprintf_r+0x830>
   8487c:	2d10      	cmp	r5, #16
   8487e:	f340 8200 	ble.w	84c82 <_vfiprintf_r+0xbca>
   84882:	980e      	ldr	r0, [sp, #56]	; 0x38
   84884:	4f6c      	ldr	r7, [pc, #432]	; (84a38 <_vfiprintf_r+0x980>)
   84886:	2410      	movs	r4, #16
   84888:	f8dd 8004 	ldr.w	r8, [sp, #4]
   8488c:	f8dd 9000 	ldr.w	r9, [sp]
   84890:	e006      	b.n	848a0 <_vfiprintf_r+0x7e8>
   84892:	f100 0e02 	add.w	lr, r0, #2
   84896:	4608      	mov	r0, r1
   84898:	3208      	adds	r2, #8
   8489a:	3d10      	subs	r5, #16
   8489c:	2d10      	cmp	r5, #16
   8489e:	dd10      	ble.n	848c2 <_vfiprintf_r+0x80a>
   848a0:	1c41      	adds	r1, r0, #1
   848a2:	3310      	adds	r3, #16
   848a4:	2907      	cmp	r1, #7
   848a6:	930f      	str	r3, [sp, #60]	; 0x3c
   848a8:	6017      	str	r7, [r2, #0]
   848aa:	6054      	str	r4, [r2, #4]
   848ac:	910e      	str	r1, [sp, #56]	; 0x38
   848ae:	ddf0      	ble.n	84892 <_vfiprintf_r+0x7da>
   848b0:	2b00      	cmp	r3, #0
   848b2:	d12a      	bne.n	8490a <_vfiprintf_r+0x852>
   848b4:	3d10      	subs	r5, #16
   848b6:	2d10      	cmp	r5, #16
   848b8:	f04f 0e01 	mov.w	lr, #1
   848bc:	4618      	mov	r0, r3
   848be:	4652      	mov	r2, sl
   848c0:	dcee      	bgt.n	848a0 <_vfiprintf_r+0x7e8>
   848c2:	442b      	add	r3, r5
   848c4:	f1be 0f07 	cmp.w	lr, #7
   848c8:	930f      	str	r3, [sp, #60]	; 0x3c
   848ca:	6017      	str	r7, [r2, #0]
   848cc:	6055      	str	r5, [r2, #4]
   848ce:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   848d2:	dd09      	ble.n	848e8 <_vfiprintf_r+0x830>
   848d4:	2b00      	cmp	r3, #0
   848d6:	d092      	beq.n	847fe <_vfiprintf_r+0x746>
   848d8:	9801      	ldr	r0, [sp, #4]
   848da:	9900      	ldr	r1, [sp, #0]
   848dc:	aa0d      	add	r2, sp, #52	; 0x34
   848de:	f7ff fbaf 	bl	84040 <__sprint_r.part.0>
   848e2:	2800      	cmp	r0, #0
   848e4:	d1ab      	bne.n	8483e <_vfiprintf_r+0x786>
   848e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   848e8:	9a02      	ldr	r2, [sp, #8]
   848ea:	9903      	ldr	r1, [sp, #12]
   848ec:	428e      	cmp	r6, r1
   848ee:	bfac      	ite	ge
   848f0:	1992      	addge	r2, r2, r6
   848f2:	1852      	addlt	r2, r2, r1
   848f4:	9202      	str	r2, [sp, #8]
   848f6:	2b00      	cmp	r3, #0
   848f8:	d088      	beq.n	8480c <_vfiprintf_r+0x754>
   848fa:	9801      	ldr	r0, [sp, #4]
   848fc:	9900      	ldr	r1, [sp, #0]
   848fe:	aa0d      	add	r2, sp, #52	; 0x34
   84900:	f7ff fb9e 	bl	84040 <__sprint_r.part.0>
   84904:	2800      	cmp	r0, #0
   84906:	d081      	beq.n	8480c <_vfiprintf_r+0x754>
   84908:	e799      	b.n	8483e <_vfiprintf_r+0x786>
   8490a:	4640      	mov	r0, r8
   8490c:	4649      	mov	r1, r9
   8490e:	aa0d      	add	r2, sp, #52	; 0x34
   84910:	f7ff fb96 	bl	84040 <__sprint_r.part.0>
   84914:	2800      	cmp	r0, #0
   84916:	d192      	bne.n	8483e <_vfiprintf_r+0x786>
   84918:	980e      	ldr	r0, [sp, #56]	; 0x38
   8491a:	4652      	mov	r2, sl
   8491c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8491e:	f100 0e01 	add.w	lr, r0, #1
   84922:	e7ba      	b.n	8489a <_vfiprintf_r+0x7e2>
   84924:	9b03      	ldr	r3, [sp, #12]
   84926:	1b9f      	subs	r7, r3, r6
   84928:	2f00      	cmp	r7, #0
   8492a:	f77f af27 	ble.w	8477c <_vfiprintf_r+0x6c4>
   8492e:	2f10      	cmp	r7, #16
   84930:	f340 81b3 	ble.w	84c9a <_vfiprintf_r+0xbe2>
   84934:	4620      	mov	r0, r4
   84936:	4d3f      	ldr	r5, [pc, #252]	; (84a34 <_vfiprintf_r+0x97c>)
   84938:	4664      	mov	r4, ip
   8493a:	2310      	movs	r3, #16
   8493c:	4684      	mov	ip, r0
   8493e:	e007      	b.n	84950 <_vfiprintf_r+0x898>
   84940:	f101 0e02 	add.w	lr, r1, #2
   84944:	4601      	mov	r1, r0
   84946:	f10c 0c08 	add.w	ip, ip, #8
   8494a:	3f10      	subs	r7, #16
   8494c:	2f10      	cmp	r7, #16
   8494e:	dd11      	ble.n	84974 <_vfiprintf_r+0x8bc>
   84950:	1c48      	adds	r0, r1, #1
   84952:	3210      	adds	r2, #16
   84954:	2807      	cmp	r0, #7
   84956:	920f      	str	r2, [sp, #60]	; 0x3c
   84958:	f8cc 5000 	str.w	r5, [ip]
   8495c:	f8cc 3004 	str.w	r3, [ip, #4]
   84960:	900e      	str	r0, [sp, #56]	; 0x38
   84962:	dded      	ble.n	84940 <_vfiprintf_r+0x888>
   84964:	b9c2      	cbnz	r2, 84998 <_vfiprintf_r+0x8e0>
   84966:	3f10      	subs	r7, #16
   84968:	2f10      	cmp	r7, #16
   8496a:	f04f 0e01 	mov.w	lr, #1
   8496e:	4611      	mov	r1, r2
   84970:	46d4      	mov	ip, sl
   84972:	dced      	bgt.n	84950 <_vfiprintf_r+0x898>
   84974:	4663      	mov	r3, ip
   84976:	46a4      	mov	ip, r4
   84978:	461c      	mov	r4, r3
   8497a:	443a      	add	r2, r7
   8497c:	f1be 0f07 	cmp.w	lr, #7
   84980:	920f      	str	r2, [sp, #60]	; 0x3c
   84982:	e884 00a0 	stmia.w	r4, {r5, r7}
   84986:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8498a:	f300 80ee 	bgt.w	84b6a <_vfiprintf_r+0xab2>
   8498e:	3408      	adds	r4, #8
   84990:	f10e 0001 	add.w	r0, lr, #1
   84994:	4671      	mov	r1, lr
   84996:	e6f1      	b.n	8477c <_vfiprintf_r+0x6c4>
   84998:	9801      	ldr	r0, [sp, #4]
   8499a:	9900      	ldr	r1, [sp, #0]
   8499c:	aa0d      	add	r2, sp, #52	; 0x34
   8499e:	9305      	str	r3, [sp, #20]
   849a0:	f7ff fb4e 	bl	84040 <__sprint_r.part.0>
   849a4:	2800      	cmp	r0, #0
   849a6:	f47f af4a 	bne.w	8483e <_vfiprintf_r+0x786>
   849aa:	990e      	ldr	r1, [sp, #56]	; 0x38
   849ac:	46d4      	mov	ip, sl
   849ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   849b0:	f101 0e01 	add.w	lr, r1, #1
   849b4:	9b05      	ldr	r3, [sp, #20]
   849b6:	e7c8      	b.n	8494a <_vfiprintf_r+0x892>
   849b8:	2a00      	cmp	r2, #0
   849ba:	f040 80c5 	bne.w	84b48 <_vfiprintf_r+0xa90>
   849be:	9b05      	ldr	r3, [sp, #20]
   849c0:	2b00      	cmp	r3, #0
   849c2:	f000 8085 	beq.w	84ad0 <_vfiprintf_r+0xa18>
   849c6:	aa0c      	add	r2, sp, #48	; 0x30
   849c8:	2302      	movs	r3, #2
   849ca:	921a      	str	r2, [sp, #104]	; 0x68
   849cc:	4608      	mov	r0, r1
   849ce:	931b      	str	r3, [sp, #108]	; 0x6c
   849d0:	461a      	mov	r2, r3
   849d2:	4654      	mov	r4, sl
   849d4:	e6cb      	b.n	8476e <_vfiprintf_r+0x6b6>
   849d6:	2a00      	cmp	r2, #0
   849d8:	f040 80a5 	bne.w	84b26 <_vfiprintf_r+0xa6e>
   849dc:	2001      	movs	r0, #1
   849de:	4611      	mov	r1, r2
   849e0:	4654      	mov	r4, sl
   849e2:	e6c7      	b.n	84774 <_vfiprintf_r+0x6bc>
   849e4:	bb03      	cbnz	r3, 84a28 <_vfiprintf_r+0x970>
   849e6:	f018 0f01 	tst.w	r8, #1
   849ea:	d01d      	beq.n	84a28 <_vfiprintf_r+0x970>
   849ec:	ab2a      	add	r3, sp, #168	; 0xa8
   849ee:	2230      	movs	r2, #48	; 0x30
   849f0:	f803 2d41 	strb.w	r2, [r3, #-65]!
   849f4:	ebc3 090a 	rsb	r9, r3, sl
   849f8:	9307      	str	r3, [sp, #28]
   849fa:	e48f      	b.n	8431c <_vfiprintf_r+0x264>
   849fc:	46d1      	mov	r9, sl
   849fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   84a00:	0933      	lsrs	r3, r6, #4
   84a02:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84a06:	0939      	lsrs	r1, r7, #4
   84a08:	f006 020f 	and.w	r2, r6, #15
   84a0c:	460f      	mov	r7, r1
   84a0e:	461e      	mov	r6, r3
   84a10:	5c83      	ldrb	r3, [r0, r2]
   84a12:	f809 3d01 	strb.w	r3, [r9, #-1]!
   84a16:	ea56 0307 	orrs.w	r3, r6, r7
   84a1a:	d1f1      	bne.n	84a00 <_vfiprintf_r+0x948>
   84a1c:	464b      	mov	r3, r9
   84a1e:	f8cd 901c 	str.w	r9, [sp, #28]
   84a22:	ebc3 090a 	rsb	r9, r3, sl
   84a26:	e479      	b.n	8431c <_vfiprintf_r+0x264>
   84a28:	f8cd a01c 	str.w	sl, [sp, #28]
   84a2c:	e476      	b.n	8431c <_vfiprintf_r+0x264>
   84a2e:	2302      	movs	r3, #2
   84a30:	e445      	b.n	842be <_vfiprintf_r+0x206>
   84a32:	bf00      	nop
   84a34:	00086dc0 	.word	0x00086dc0
   84a38:	00086e00 	.word	0x00086e00
   84a3c:	2a00      	cmp	r2, #0
   84a3e:	f040 80d5 	bne.w	84bec <_vfiprintf_r+0xb34>
   84a42:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84a46:	2b00      	cmp	r3, #0
   84a48:	f000 80ac 	beq.w	84ba4 <_vfiprintf_r+0xaec>
   84a4c:	2301      	movs	r3, #1
   84a4e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84a52:	4618      	mov	r0, r3
   84a54:	931b      	str	r3, [sp, #108]	; 0x6c
   84a56:	461a      	mov	r2, r3
   84a58:	911a      	str	r1, [sp, #104]	; 0x68
   84a5a:	4654      	mov	r4, sl
   84a5c:	e678      	b.n	84750 <_vfiprintf_r+0x698>
   84a5e:	9a03      	ldr	r2, [sp, #12]
   84a60:	1b95      	subs	r5, r2, r6
   84a62:	2d00      	cmp	r5, #0
   84a64:	4652      	mov	r2, sl
   84a66:	f73f af09 	bgt.w	8487c <_vfiprintf_r+0x7c4>
   84a6a:	e6c8      	b.n	847fe <_vfiprintf_r+0x746>
   84a6c:	465d      	mov	r5, fp
   84a6e:	f7ff bb7c 	b.w	8416a <_vfiprintf_r+0xb2>
   84a72:	9801      	ldr	r0, [sp, #4]
   84a74:	9900      	ldr	r1, [sp, #0]
   84a76:	aa0d      	add	r2, sp, #52	; 0x34
   84a78:	f7ff fae2 	bl	84040 <__sprint_r.part.0>
   84a7c:	2800      	cmp	r0, #0
   84a7e:	f47f aede 	bne.w	8483e <_vfiprintf_r+0x786>
   84a82:	4652      	mov	r2, sl
   84a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84a86:	e6f2      	b.n	8486e <_vfiprintf_r+0x7b6>
   84a88:	9904      	ldr	r1, [sp, #16]
   84a8a:	2700      	movs	r7, #0
   84a8c:	460a      	mov	r2, r1
   84a8e:	3204      	adds	r2, #4
   84a90:	680e      	ldr	r6, [r1, #0]
   84a92:	9204      	str	r2, [sp, #16]
   84a94:	e413      	b.n	842be <_vfiprintf_r+0x206>
   84a96:	3204      	adds	r2, #4
   84a98:	681e      	ldr	r6, [r3, #0]
   84a9a:	2700      	movs	r7, #0
   84a9c:	2301      	movs	r3, #1
   84a9e:	9204      	str	r2, [sp, #16]
   84aa0:	e40d      	b.n	842be <_vfiprintf_r+0x206>
   84aa2:	6816      	ldr	r6, [r2, #0]
   84aa4:	3204      	adds	r2, #4
   84aa6:	9204      	str	r2, [sp, #16]
   84aa8:	2700      	movs	r7, #0
   84aaa:	e52d      	b.n	84508 <_vfiprintf_r+0x450>
   84aac:	681e      	ldr	r6, [r3, #0]
   84aae:	3304      	adds	r3, #4
   84ab0:	17f7      	asrs	r7, r6, #31
   84ab2:	9304      	str	r3, [sp, #16]
   84ab4:	4632      	mov	r2, r6
   84ab6:	463b      	mov	r3, r7
   84ab8:	e4c1      	b.n	8443e <_vfiprintf_r+0x386>
   84aba:	9801      	ldr	r0, [sp, #4]
   84abc:	9900      	ldr	r1, [sp, #0]
   84abe:	aa0d      	add	r2, sp, #52	; 0x34
   84ac0:	f7ff fabe 	bl	84040 <__sprint_r.part.0>
   84ac4:	2800      	cmp	r0, #0
   84ac6:	f47f aeba 	bne.w	8483e <_vfiprintf_r+0x786>
   84aca:	4654      	mov	r4, sl
   84acc:	f7ff bbc0 	b.w	84250 <_vfiprintf_r+0x198>
   84ad0:	4608      	mov	r0, r1
   84ad2:	4654      	mov	r4, sl
   84ad4:	4611      	mov	r1, r2
   84ad6:	e64d      	b.n	84774 <_vfiprintf_r+0x6bc>
   84ad8:	46d1      	mov	r9, sl
   84ada:	f8cd c014 	str.w	ip, [sp, #20]
   84ade:	4630      	mov	r0, r6
   84ae0:	4639      	mov	r1, r7
   84ae2:	220a      	movs	r2, #10
   84ae4:	2300      	movs	r3, #0
   84ae6:	f001 fe47 	bl	86778 <__aeabi_uldivmod>
   84aea:	3230      	adds	r2, #48	; 0x30
   84aec:	4630      	mov	r0, r6
   84aee:	4639      	mov	r1, r7
   84af0:	f809 2d01 	strb.w	r2, [r9, #-1]!
   84af4:	2300      	movs	r3, #0
   84af6:	220a      	movs	r2, #10
   84af8:	f001 fe3e 	bl	86778 <__aeabi_uldivmod>
   84afc:	4606      	mov	r6, r0
   84afe:	460f      	mov	r7, r1
   84b00:	ea56 0307 	orrs.w	r3, r6, r7
   84b04:	d1eb      	bne.n	84ade <_vfiprintf_r+0xa26>
   84b06:	f8dd c014 	ldr.w	ip, [sp, #20]
   84b0a:	e787      	b.n	84a1c <_vfiprintf_r+0x964>
   84b0c:	2b30      	cmp	r3, #48	; 0x30
   84b0e:	9b07      	ldr	r3, [sp, #28]
   84b10:	d087      	beq.n	84a22 <_vfiprintf_r+0x96a>
   84b12:	3b01      	subs	r3, #1
   84b14:	461a      	mov	r2, r3
   84b16:	9307      	str	r3, [sp, #28]
   84b18:	2330      	movs	r3, #48	; 0x30
   84b1a:	ebc2 090a 	rsb	r9, r2, sl
   84b1e:	f801 3c01 	strb.w	r3, [r1, #-1]
   84b22:	f7ff bbfb 	b.w	8431c <_vfiprintf_r+0x264>
   84b26:	9801      	ldr	r0, [sp, #4]
   84b28:	9900      	ldr	r1, [sp, #0]
   84b2a:	aa0d      	add	r2, sp, #52	; 0x34
   84b2c:	f8cd c014 	str.w	ip, [sp, #20]
   84b30:	f7ff fa86 	bl	84040 <__sprint_r.part.0>
   84b34:	2800      	cmp	r0, #0
   84b36:	f47f ae82 	bne.w	8483e <_vfiprintf_r+0x786>
   84b3a:	990e      	ldr	r1, [sp, #56]	; 0x38
   84b3c:	4654      	mov	r4, sl
   84b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b40:	1c48      	adds	r0, r1, #1
   84b42:	f8dd c014 	ldr.w	ip, [sp, #20]
   84b46:	e615      	b.n	84774 <_vfiprintf_r+0x6bc>
   84b48:	9801      	ldr	r0, [sp, #4]
   84b4a:	9900      	ldr	r1, [sp, #0]
   84b4c:	aa0d      	add	r2, sp, #52	; 0x34
   84b4e:	f8cd c020 	str.w	ip, [sp, #32]
   84b52:	f7ff fa75 	bl	84040 <__sprint_r.part.0>
   84b56:	2800      	cmp	r0, #0
   84b58:	f47f ae71 	bne.w	8483e <_vfiprintf_r+0x786>
   84b5c:	990e      	ldr	r1, [sp, #56]	; 0x38
   84b5e:	4654      	mov	r4, sl
   84b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b62:	1c48      	adds	r0, r1, #1
   84b64:	f8dd c020 	ldr.w	ip, [sp, #32]
   84b68:	e5f5      	b.n	84756 <_vfiprintf_r+0x69e>
   84b6a:	2a00      	cmp	r2, #0
   84b6c:	d167      	bne.n	84c3e <_vfiprintf_r+0xb86>
   84b6e:	2001      	movs	r0, #1
   84b70:	4611      	mov	r1, r2
   84b72:	4654      	mov	r4, sl
   84b74:	e602      	b.n	8477c <_vfiprintf_r+0x6c4>
   84b76:	9801      	ldr	r0, [sp, #4]
   84b78:	9900      	ldr	r1, [sp, #0]
   84b7a:	aa0d      	add	r2, sp, #52	; 0x34
   84b7c:	f7ff fa60 	bl	84040 <__sprint_r.part.0>
   84b80:	2800      	cmp	r0, #0
   84b82:	f47f ae5c 	bne.w	8483e <_vfiprintf_r+0x786>
   84b86:	980e      	ldr	r0, [sp, #56]	; 0x38
   84b88:	4654      	mov	r4, sl
   84b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b8c:	3001      	adds	r0, #1
   84b8e:	e625      	b.n	847dc <_vfiprintf_r+0x724>
   84b90:	252d      	movs	r5, #45	; 0x2d
   84b92:	4276      	negs	r6, r6
   84b94:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84b98:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   84b9c:	46e1      	mov	r9, ip
   84b9e:	2301      	movs	r3, #1
   84ba0:	f7ff bb93 	b.w	842ca <_vfiprintf_r+0x212>
   84ba4:	9b05      	ldr	r3, [sp, #20]
   84ba6:	4611      	mov	r1, r2
   84ba8:	2001      	movs	r0, #1
   84baa:	4654      	mov	r4, sl
   84bac:	2b00      	cmp	r3, #0
   84bae:	f43f ade5 	beq.w	8477c <_vfiprintf_r+0x6c4>
   84bb2:	aa0c      	add	r2, sp, #48	; 0x30
   84bb4:	2302      	movs	r3, #2
   84bb6:	e88a 000c 	stmia.w	sl, {r2, r3}
   84bba:	461a      	mov	r2, r3
   84bbc:	e5d7      	b.n	8476e <_vfiprintf_r+0x6b6>
   84bbe:	f018 0f10 	tst.w	r8, #16
   84bc2:	d10b      	bne.n	84bdc <_vfiprintf_r+0xb24>
   84bc4:	f018 0f40 	tst.w	r8, #64	; 0x40
   84bc8:	d008      	beq.n	84bdc <_vfiprintf_r+0xb24>
   84bca:	9a04      	ldr	r2, [sp, #16]
   84bcc:	6813      	ldr	r3, [r2, #0]
   84bce:	3204      	adds	r2, #4
   84bd0:	9204      	str	r2, [sp, #16]
   84bd2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84bd6:	801a      	strh	r2, [r3, #0]
   84bd8:	f7ff baa0 	b.w	8411c <_vfiprintf_r+0x64>
   84bdc:	9a04      	ldr	r2, [sp, #16]
   84bde:	6813      	ldr	r3, [r2, #0]
   84be0:	3204      	adds	r2, #4
   84be2:	9204      	str	r2, [sp, #16]
   84be4:	9a02      	ldr	r2, [sp, #8]
   84be6:	601a      	str	r2, [r3, #0]
   84be8:	f7ff ba98 	b.w	8411c <_vfiprintf_r+0x64>
   84bec:	9801      	ldr	r0, [sp, #4]
   84bee:	9900      	ldr	r1, [sp, #0]
   84bf0:	aa0d      	add	r2, sp, #52	; 0x34
   84bf2:	f8cd c020 	str.w	ip, [sp, #32]
   84bf6:	f7ff fa23 	bl	84040 <__sprint_r.part.0>
   84bfa:	2800      	cmp	r0, #0
   84bfc:	f47f ae1f 	bne.w	8483e <_vfiprintf_r+0x786>
   84c00:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c02:	4654      	mov	r4, sl
   84c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c06:	1c48      	adds	r0, r1, #1
   84c08:	f8dd c020 	ldr.w	ip, [sp, #32]
   84c0c:	e592      	b.n	84734 <_vfiprintf_r+0x67c>
   84c0e:	f048 0820 	orr.w	r8, r8, #32
   84c12:	f10b 0001 	add.w	r0, fp, #1
   84c16:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84c1a:	f7ff bab6 	b.w	8418a <_vfiprintf_r+0xd2>
   84c1e:	426d      	negs	r5, r5
   84c20:	9304      	str	r3, [sp, #16]
   84c22:	4658      	mov	r0, fp
   84c24:	f7ff bbc8 	b.w	843b8 <_vfiprintf_r+0x300>
   84c28:	9807      	ldr	r0, [sp, #28]
   84c2a:	9504      	str	r5, [sp, #16]
   84c2c:	f7ff f9da 	bl	83fe4 <strlen>
   84c30:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84c34:	4681      	mov	r9, r0
   84c36:	f04f 0c00 	mov.w	ip, #0
   84c3a:	f7ff bb6f 	b.w	8431c <_vfiprintf_r+0x264>
   84c3e:	9801      	ldr	r0, [sp, #4]
   84c40:	9900      	ldr	r1, [sp, #0]
   84c42:	aa0d      	add	r2, sp, #52	; 0x34
   84c44:	f8cd c014 	str.w	ip, [sp, #20]
   84c48:	f7ff f9fa 	bl	84040 <__sprint_r.part.0>
   84c4c:	2800      	cmp	r0, #0
   84c4e:	f47f adf6 	bne.w	8483e <_vfiprintf_r+0x786>
   84c52:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c54:	4654      	mov	r4, sl
   84c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c58:	1c48      	adds	r0, r1, #1
   84c5a:	f8dd c014 	ldr.w	ip, [sp, #20]
   84c5e:	e58d      	b.n	8477c <_vfiprintf_r+0x6c4>
   84c60:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c64:	3101      	adds	r1, #1
   84c66:	4f15      	ldr	r7, [pc, #84]	; (84cbc <_vfiprintf_r+0xc04>)
   84c68:	f7ff bb9a 	b.w	843a0 <_vfiprintf_r+0x2e8>
   84c6c:	2e06      	cmp	r6, #6
   84c6e:	4b14      	ldr	r3, [pc, #80]	; (84cc0 <_vfiprintf_r+0xc08>)
   84c70:	bf28      	it	cs
   84c72:	f04f 0c06 	movcs.w	ip, #6
   84c76:	46e1      	mov	r9, ip
   84c78:	9504      	str	r5, [sp, #16]
   84c7a:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   84c7e:	9307      	str	r3, [sp, #28]
   84c80:	e463      	b.n	8454a <_vfiprintf_r+0x492>
   84c82:	990e      	ldr	r1, [sp, #56]	; 0x38
   84c84:	4f0d      	ldr	r7, [pc, #52]	; (84cbc <_vfiprintf_r+0xc04>)
   84c86:	f101 0e01 	add.w	lr, r1, #1
   84c8a:	e61a      	b.n	848c2 <_vfiprintf_r+0x80a>
   84c8c:	46e1      	mov	r9, ip
   84c8e:	9504      	str	r5, [sp, #16]
   84c90:	4684      	mov	ip, r0
   84c92:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84c96:	f7ff bb41 	b.w	8431c <_vfiprintf_r+0x264>
   84c9a:	4686      	mov	lr, r0
   84c9c:	4d09      	ldr	r5, [pc, #36]	; (84cc4 <_vfiprintf_r+0xc0c>)
   84c9e:	e66c      	b.n	8497a <_vfiprintf_r+0x8c2>
   84ca0:	9a04      	ldr	r2, [sp, #16]
   84ca2:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84ca6:	6816      	ldr	r6, [r2, #0]
   84ca8:	3204      	adds	r2, #4
   84caa:	2e00      	cmp	r6, #0
   84cac:	9204      	str	r2, [sp, #16]
   84cae:	f6bf aa6c 	bge.w	8418a <_vfiprintf_r+0xd2>
   84cb2:	f04f 36ff 	mov.w	r6, #4294967295
   84cb6:	f7ff ba68 	b.w	8418a <_vfiprintf_r+0xd2>
   84cba:	bf00      	nop
   84cbc:	00086e00 	.word	0x00086e00
   84cc0:	00086df8 	.word	0x00086df8
   84cc4:	00086dc0 	.word	0x00086dc0

00084cc8 <__sbprintf>:
   84cc8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   84ccc:	4688      	mov	r8, r1
   84cce:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84cd0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84cd4:	9719      	str	r7, [sp, #100]	; 0x64
   84cd6:	f8d8 701c 	ldr.w	r7, [r8, #28]
   84cda:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   84cde:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   84ce2:	9707      	str	r7, [sp, #28]
   84ce4:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84ce8:	ac1a      	add	r4, sp, #104	; 0x68
   84cea:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84cee:	f02e 0e02 	bic.w	lr, lr, #2
   84cf2:	2600      	movs	r6, #0
   84cf4:	4669      	mov	r1, sp
   84cf6:	9400      	str	r4, [sp, #0]
   84cf8:	9404      	str	r4, [sp, #16]
   84cfa:	9502      	str	r5, [sp, #8]
   84cfc:	9505      	str	r5, [sp, #20]
   84cfe:	f8ad e00c 	strh.w	lr, [sp, #12]
   84d02:	f8ad a00e 	strh.w	sl, [sp, #14]
   84d06:	9709      	str	r7, [sp, #36]	; 0x24
   84d08:	9606      	str	r6, [sp, #24]
   84d0a:	4605      	mov	r5, r0
   84d0c:	f7ff f9d4 	bl	840b8 <_vfiprintf_r>
   84d10:	1e04      	subs	r4, r0, #0
   84d12:	db07      	blt.n	84d24 <__sbprintf+0x5c>
   84d14:	4628      	mov	r0, r5
   84d16:	4669      	mov	r1, sp
   84d18:	f000 f92a 	bl	84f70 <_fflush_r>
   84d1c:	42b0      	cmp	r0, r6
   84d1e:	bf18      	it	ne
   84d20:	f04f 34ff 	movne.w	r4, #4294967295
   84d24:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84d28:	065b      	lsls	r3, r3, #25
   84d2a:	d505      	bpl.n	84d38 <__sbprintf+0x70>
   84d2c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d34:	f8a8 300c 	strh.w	r3, [r8, #12]
   84d38:	4620      	mov	r0, r4
   84d3a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84d3e:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   84d42:	bf00      	nop

00084d44 <__swsetup_r>:
   84d44:	b538      	push	{r3, r4, r5, lr}
   84d46:	4b2f      	ldr	r3, [pc, #188]	; (84e04 <__swsetup_r+0xc0>)
   84d48:	4605      	mov	r5, r0
   84d4a:	6818      	ldr	r0, [r3, #0]
   84d4c:	460c      	mov	r4, r1
   84d4e:	b110      	cbz	r0, 84d56 <__swsetup_r+0x12>
   84d50:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d52:	2b00      	cmp	r3, #0
   84d54:	d036      	beq.n	84dc4 <__swsetup_r+0x80>
   84d56:	89a2      	ldrh	r2, [r4, #12]
   84d58:	b293      	uxth	r3, r2
   84d5a:	0718      	lsls	r0, r3, #28
   84d5c:	d50c      	bpl.n	84d78 <__swsetup_r+0x34>
   84d5e:	6920      	ldr	r0, [r4, #16]
   84d60:	b1a8      	cbz	r0, 84d8e <__swsetup_r+0x4a>
   84d62:	f013 0201 	ands.w	r2, r3, #1
   84d66:	d01e      	beq.n	84da6 <__swsetup_r+0x62>
   84d68:	6963      	ldr	r3, [r4, #20]
   84d6a:	2200      	movs	r2, #0
   84d6c:	425b      	negs	r3, r3
   84d6e:	61a3      	str	r3, [r4, #24]
   84d70:	60a2      	str	r2, [r4, #8]
   84d72:	b1f0      	cbz	r0, 84db2 <__swsetup_r+0x6e>
   84d74:	2000      	movs	r0, #0
   84d76:	bd38      	pop	{r3, r4, r5, pc}
   84d78:	06d9      	lsls	r1, r3, #27
   84d7a:	d53a      	bpl.n	84df2 <__swsetup_r+0xae>
   84d7c:	0758      	lsls	r0, r3, #29
   84d7e:	d424      	bmi.n	84dca <__swsetup_r+0x86>
   84d80:	6920      	ldr	r0, [r4, #16]
   84d82:	f042 0308 	orr.w	r3, r2, #8
   84d86:	81a3      	strh	r3, [r4, #12]
   84d88:	b29b      	uxth	r3, r3
   84d8a:	2800      	cmp	r0, #0
   84d8c:	d1e9      	bne.n	84d62 <__swsetup_r+0x1e>
   84d8e:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84d92:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84d96:	d0e4      	beq.n	84d62 <__swsetup_r+0x1e>
   84d98:	4628      	mov	r0, r5
   84d9a:	4621      	mov	r1, r4
   84d9c:	f000 fcee 	bl	8577c <__smakebuf_r>
   84da0:	89a3      	ldrh	r3, [r4, #12]
   84da2:	6920      	ldr	r0, [r4, #16]
   84da4:	e7dd      	b.n	84d62 <__swsetup_r+0x1e>
   84da6:	0799      	lsls	r1, r3, #30
   84da8:	bf58      	it	pl
   84daa:	6962      	ldrpl	r2, [r4, #20]
   84dac:	60a2      	str	r2, [r4, #8]
   84dae:	2800      	cmp	r0, #0
   84db0:	d1e0      	bne.n	84d74 <__swsetup_r+0x30>
   84db2:	89a3      	ldrh	r3, [r4, #12]
   84db4:	061a      	lsls	r2, r3, #24
   84db6:	d5de      	bpl.n	84d76 <__swsetup_r+0x32>
   84db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84dbc:	81a3      	strh	r3, [r4, #12]
   84dbe:	f04f 30ff 	mov.w	r0, #4294967295
   84dc2:	bd38      	pop	{r3, r4, r5, pc}
   84dc4:	f000 f968 	bl	85098 <__sinit>
   84dc8:	e7c5      	b.n	84d56 <__swsetup_r+0x12>
   84dca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84dcc:	b149      	cbz	r1, 84de2 <__swsetup_r+0x9e>
   84dce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84dd2:	4299      	cmp	r1, r3
   84dd4:	d003      	beq.n	84dde <__swsetup_r+0x9a>
   84dd6:	4628      	mov	r0, r5
   84dd8:	f000 fa36 	bl	85248 <_free_r>
   84ddc:	89a2      	ldrh	r2, [r4, #12]
   84dde:	2300      	movs	r3, #0
   84de0:	6323      	str	r3, [r4, #48]	; 0x30
   84de2:	6920      	ldr	r0, [r4, #16]
   84de4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84de8:	2300      	movs	r3, #0
   84dea:	b292      	uxth	r2, r2
   84dec:	e884 0009 	stmia.w	r4, {r0, r3}
   84df0:	e7c7      	b.n	84d82 <__swsetup_r+0x3e>
   84df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84df6:	2309      	movs	r3, #9
   84df8:	602b      	str	r3, [r5, #0]
   84dfa:	f04f 30ff 	mov.w	r0, #4294967295
   84dfe:	81a2      	strh	r2, [r4, #12]
   84e00:	bd38      	pop	{r3, r4, r5, pc}
   84e02:	bf00      	nop
   84e04:	20070830 	.word	0x20070830

00084e08 <register_fini>:
   84e08:	4b02      	ldr	r3, [pc, #8]	; (84e14 <register_fini+0xc>)
   84e0a:	b113      	cbz	r3, 84e12 <register_fini+0xa>
   84e0c:	4802      	ldr	r0, [pc, #8]	; (84e18 <register_fini+0x10>)
   84e0e:	f000 b805 	b.w	84e1c <atexit>
   84e12:	4770      	bx	lr
   84e14:	00000000 	.word	0x00000000
   84e18:	000850ad 	.word	0x000850ad

00084e1c <atexit>:
   84e1c:	4601      	mov	r1, r0
   84e1e:	2000      	movs	r0, #0
   84e20:	4602      	mov	r2, r0
   84e22:	4603      	mov	r3, r0
   84e24:	f001 bbb4 	b.w	86590 <__register_exitproc>

00084e28 <__sflush_r>:
   84e28:	898b      	ldrh	r3, [r1, #12]
   84e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e2e:	b29a      	uxth	r2, r3
   84e30:	460d      	mov	r5, r1
   84e32:	0711      	lsls	r1, r2, #28
   84e34:	4680      	mov	r8, r0
   84e36:	d43c      	bmi.n	84eb2 <__sflush_r+0x8a>
   84e38:	686a      	ldr	r2, [r5, #4]
   84e3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e3e:	2a00      	cmp	r2, #0
   84e40:	81ab      	strh	r3, [r5, #12]
   84e42:	dd65      	ble.n	84f10 <__sflush_r+0xe8>
   84e44:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84e46:	2e00      	cmp	r6, #0
   84e48:	d04b      	beq.n	84ee2 <__sflush_r+0xba>
   84e4a:	b29b      	uxth	r3, r3
   84e4c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84e50:	2100      	movs	r1, #0
   84e52:	b292      	uxth	r2, r2
   84e54:	f8d8 4000 	ldr.w	r4, [r8]
   84e58:	f8c8 1000 	str.w	r1, [r8]
   84e5c:	2a00      	cmp	r2, #0
   84e5e:	d05b      	beq.n	84f18 <__sflush_r+0xf0>
   84e60:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84e62:	075f      	lsls	r7, r3, #29
   84e64:	d505      	bpl.n	84e72 <__sflush_r+0x4a>
   84e66:	6869      	ldr	r1, [r5, #4]
   84e68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84e6a:	1a52      	subs	r2, r2, r1
   84e6c:	b10b      	cbz	r3, 84e72 <__sflush_r+0x4a>
   84e6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84e70:	1ad2      	subs	r2, r2, r3
   84e72:	4640      	mov	r0, r8
   84e74:	69e9      	ldr	r1, [r5, #28]
   84e76:	2300      	movs	r3, #0
   84e78:	47b0      	blx	r6
   84e7a:	1c46      	adds	r6, r0, #1
   84e7c:	d056      	beq.n	84f2c <__sflush_r+0x104>
   84e7e:	89ab      	ldrh	r3, [r5, #12]
   84e80:	692a      	ldr	r2, [r5, #16]
   84e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84e86:	b29b      	uxth	r3, r3
   84e88:	2100      	movs	r1, #0
   84e8a:	602a      	str	r2, [r5, #0]
   84e8c:	04da      	lsls	r2, r3, #19
   84e8e:	81ab      	strh	r3, [r5, #12]
   84e90:	6069      	str	r1, [r5, #4]
   84e92:	d43b      	bmi.n	84f0c <__sflush_r+0xe4>
   84e94:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84e96:	f8c8 4000 	str.w	r4, [r8]
   84e9a:	b311      	cbz	r1, 84ee2 <__sflush_r+0xba>
   84e9c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84ea0:	4299      	cmp	r1, r3
   84ea2:	d002      	beq.n	84eaa <__sflush_r+0x82>
   84ea4:	4640      	mov	r0, r8
   84ea6:	f000 f9cf 	bl	85248 <_free_r>
   84eaa:	2000      	movs	r0, #0
   84eac:	6328      	str	r0, [r5, #48]	; 0x30
   84eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84eb2:	692e      	ldr	r6, [r5, #16]
   84eb4:	b1ae      	cbz	r6, 84ee2 <__sflush_r+0xba>
   84eb6:	0791      	lsls	r1, r2, #30
   84eb8:	682c      	ldr	r4, [r5, #0]
   84eba:	bf0c      	ite	eq
   84ebc:	696b      	ldreq	r3, [r5, #20]
   84ebe:	2300      	movne	r3, #0
   84ec0:	602e      	str	r6, [r5, #0]
   84ec2:	1ba4      	subs	r4, r4, r6
   84ec4:	60ab      	str	r3, [r5, #8]
   84ec6:	e00a      	b.n	84ede <__sflush_r+0xb6>
   84ec8:	4632      	mov	r2, r6
   84eca:	4623      	mov	r3, r4
   84ecc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84ece:	4640      	mov	r0, r8
   84ed0:	69e9      	ldr	r1, [r5, #28]
   84ed2:	47b8      	blx	r7
   84ed4:	2800      	cmp	r0, #0
   84ed6:	eba4 0400 	sub.w	r4, r4, r0
   84eda:	4406      	add	r6, r0
   84edc:	dd04      	ble.n	84ee8 <__sflush_r+0xc0>
   84ede:	2c00      	cmp	r4, #0
   84ee0:	dcf2      	bgt.n	84ec8 <__sflush_r+0xa0>
   84ee2:	2000      	movs	r0, #0
   84ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ee8:	89ab      	ldrh	r3, [r5, #12]
   84eea:	f04f 30ff 	mov.w	r0, #4294967295
   84eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84ef2:	81ab      	strh	r3, [r5, #12]
   84ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ef8:	89ab      	ldrh	r3, [r5, #12]
   84efa:	692a      	ldr	r2, [r5, #16]
   84efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84f00:	b29b      	uxth	r3, r3
   84f02:	81ab      	strh	r3, [r5, #12]
   84f04:	04db      	lsls	r3, r3, #19
   84f06:	6069      	str	r1, [r5, #4]
   84f08:	602a      	str	r2, [r5, #0]
   84f0a:	d5c3      	bpl.n	84e94 <__sflush_r+0x6c>
   84f0c:	6528      	str	r0, [r5, #80]	; 0x50
   84f0e:	e7c1      	b.n	84e94 <__sflush_r+0x6c>
   84f10:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84f12:	2a00      	cmp	r2, #0
   84f14:	dc96      	bgt.n	84e44 <__sflush_r+0x1c>
   84f16:	e7e4      	b.n	84ee2 <__sflush_r+0xba>
   84f18:	2301      	movs	r3, #1
   84f1a:	4640      	mov	r0, r8
   84f1c:	69e9      	ldr	r1, [r5, #28]
   84f1e:	47b0      	blx	r6
   84f20:	1c43      	adds	r3, r0, #1
   84f22:	4602      	mov	r2, r0
   84f24:	d019      	beq.n	84f5a <__sflush_r+0x132>
   84f26:	89ab      	ldrh	r3, [r5, #12]
   84f28:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84f2a:	e79a      	b.n	84e62 <__sflush_r+0x3a>
   84f2c:	f8d8 1000 	ldr.w	r1, [r8]
   84f30:	2900      	cmp	r1, #0
   84f32:	d0e1      	beq.n	84ef8 <__sflush_r+0xd0>
   84f34:	291d      	cmp	r1, #29
   84f36:	d007      	beq.n	84f48 <__sflush_r+0x120>
   84f38:	2916      	cmp	r1, #22
   84f3a:	d005      	beq.n	84f48 <__sflush_r+0x120>
   84f3c:	89ab      	ldrh	r3, [r5, #12]
   84f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84f42:	81ab      	strh	r3, [r5, #12]
   84f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f48:	89ab      	ldrh	r3, [r5, #12]
   84f4a:	6929      	ldr	r1, [r5, #16]
   84f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84f50:	2200      	movs	r2, #0
   84f52:	81ab      	strh	r3, [r5, #12]
   84f54:	e885 0006 	stmia.w	r5, {r1, r2}
   84f58:	e79c      	b.n	84e94 <__sflush_r+0x6c>
   84f5a:	f8d8 3000 	ldr.w	r3, [r8]
   84f5e:	2b00      	cmp	r3, #0
   84f60:	d0e1      	beq.n	84f26 <__sflush_r+0xfe>
   84f62:	2b1d      	cmp	r3, #29
   84f64:	d001      	beq.n	84f6a <__sflush_r+0x142>
   84f66:	2b16      	cmp	r3, #22
   84f68:	d1be      	bne.n	84ee8 <__sflush_r+0xc0>
   84f6a:	f8c8 4000 	str.w	r4, [r8]
   84f6e:	e7b8      	b.n	84ee2 <__sflush_r+0xba>

00084f70 <_fflush_r>:
   84f70:	b510      	push	{r4, lr}
   84f72:	4604      	mov	r4, r0
   84f74:	b082      	sub	sp, #8
   84f76:	b108      	cbz	r0, 84f7c <_fflush_r+0xc>
   84f78:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f7a:	b153      	cbz	r3, 84f92 <_fflush_r+0x22>
   84f7c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84f80:	b908      	cbnz	r0, 84f86 <_fflush_r+0x16>
   84f82:	b002      	add	sp, #8
   84f84:	bd10      	pop	{r4, pc}
   84f86:	4620      	mov	r0, r4
   84f88:	b002      	add	sp, #8
   84f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84f8e:	f7ff bf4b 	b.w	84e28 <__sflush_r>
   84f92:	9101      	str	r1, [sp, #4]
   84f94:	f000 f880 	bl	85098 <__sinit>
   84f98:	9901      	ldr	r1, [sp, #4]
   84f9a:	e7ef      	b.n	84f7c <_fflush_r+0xc>

00084f9c <_cleanup_r>:
   84f9c:	4901      	ldr	r1, [pc, #4]	; (84fa4 <_cleanup_r+0x8>)
   84f9e:	f000 bbbb 	b.w	85718 <_fwalk_reent>
   84fa2:	bf00      	nop
   84fa4:	00086659 	.word	0x00086659

00084fa8 <__sinit.part.1>:
   84fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84fac:	4607      	mov	r7, r0
   84fae:	4835      	ldr	r0, [pc, #212]	; (85084 <__sinit.part.1+0xdc>)
   84fb0:	687d      	ldr	r5, [r7, #4]
   84fb2:	2400      	movs	r4, #0
   84fb4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84fb8:	2304      	movs	r3, #4
   84fba:	2103      	movs	r1, #3
   84fbc:	63f8      	str	r0, [r7, #60]	; 0x3c
   84fbe:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84fc2:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84fc6:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84fca:	b083      	sub	sp, #12
   84fcc:	602c      	str	r4, [r5, #0]
   84fce:	606c      	str	r4, [r5, #4]
   84fd0:	60ac      	str	r4, [r5, #8]
   84fd2:	666c      	str	r4, [r5, #100]	; 0x64
   84fd4:	81ec      	strh	r4, [r5, #14]
   84fd6:	612c      	str	r4, [r5, #16]
   84fd8:	616c      	str	r4, [r5, #20]
   84fda:	61ac      	str	r4, [r5, #24]
   84fdc:	81ab      	strh	r3, [r5, #12]
   84fde:	4621      	mov	r1, r4
   84fe0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84fe4:	2208      	movs	r2, #8
   84fe6:	f7fe ff2b 	bl	83e40 <memset>
   84fea:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85088 <__sinit.part.1+0xe0>
   84fee:	68be      	ldr	r6, [r7, #8]
   84ff0:	f8df a098 	ldr.w	sl, [pc, #152]	; 8508c <__sinit.part.1+0xe4>
   84ff4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85090 <__sinit.part.1+0xe8>
   84ff8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85094 <__sinit.part.1+0xec>
   84ffc:	2301      	movs	r3, #1
   84ffe:	2209      	movs	r2, #9
   85000:	f8c5 b020 	str.w	fp, [r5, #32]
   85004:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85008:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8500c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85010:	61ed      	str	r5, [r5, #28]
   85012:	4621      	mov	r1, r4
   85014:	81f3      	strh	r3, [r6, #14]
   85016:	81b2      	strh	r2, [r6, #12]
   85018:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8501c:	6034      	str	r4, [r6, #0]
   8501e:	6074      	str	r4, [r6, #4]
   85020:	60b4      	str	r4, [r6, #8]
   85022:	6674      	str	r4, [r6, #100]	; 0x64
   85024:	6134      	str	r4, [r6, #16]
   85026:	6174      	str	r4, [r6, #20]
   85028:	61b4      	str	r4, [r6, #24]
   8502a:	2208      	movs	r2, #8
   8502c:	9301      	str	r3, [sp, #4]
   8502e:	f7fe ff07 	bl	83e40 <memset>
   85032:	68fd      	ldr	r5, [r7, #12]
   85034:	2012      	movs	r0, #18
   85036:	2202      	movs	r2, #2
   85038:	61f6      	str	r6, [r6, #28]
   8503a:	f8c6 b020 	str.w	fp, [r6, #32]
   8503e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85042:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85046:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8504a:	4621      	mov	r1, r4
   8504c:	81a8      	strh	r0, [r5, #12]
   8504e:	81ea      	strh	r2, [r5, #14]
   85050:	602c      	str	r4, [r5, #0]
   85052:	606c      	str	r4, [r5, #4]
   85054:	60ac      	str	r4, [r5, #8]
   85056:	666c      	str	r4, [r5, #100]	; 0x64
   85058:	612c      	str	r4, [r5, #16]
   8505a:	616c      	str	r4, [r5, #20]
   8505c:	61ac      	str	r4, [r5, #24]
   8505e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85062:	2208      	movs	r2, #8
   85064:	f7fe feec 	bl	83e40 <memset>
   85068:	9b01      	ldr	r3, [sp, #4]
   8506a:	61ed      	str	r5, [r5, #28]
   8506c:	f8c5 b020 	str.w	fp, [r5, #32]
   85070:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85074:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85078:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8507c:	63bb      	str	r3, [r7, #56]	; 0x38
   8507e:	b003      	add	sp, #12
   85080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85084:	00084f9d 	.word	0x00084f9d
   85088:	000863cd 	.word	0x000863cd
   8508c:	000863f1 	.word	0x000863f1
   85090:	00086429 	.word	0x00086429
   85094:	00086449 	.word	0x00086449

00085098 <__sinit>:
   85098:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8509a:	b103      	cbz	r3, 8509e <__sinit+0x6>
   8509c:	4770      	bx	lr
   8509e:	f7ff bf83 	b.w	84fa8 <__sinit.part.1>
   850a2:	bf00      	nop

000850a4 <__sfp_lock_acquire>:
   850a4:	4770      	bx	lr
   850a6:	bf00      	nop

000850a8 <__sfp_lock_release>:
   850a8:	4770      	bx	lr
   850aa:	bf00      	nop

000850ac <__libc_fini_array>:
   850ac:	b538      	push	{r3, r4, r5, lr}
   850ae:	4b08      	ldr	r3, [pc, #32]	; (850d0 <__libc_fini_array+0x24>)
   850b0:	4d08      	ldr	r5, [pc, #32]	; (850d4 <__libc_fini_array+0x28>)
   850b2:	1aed      	subs	r5, r5, r3
   850b4:	10ac      	asrs	r4, r5, #2
   850b6:	bf18      	it	ne
   850b8:	18ed      	addne	r5, r5, r3
   850ba:	d005      	beq.n	850c8 <__libc_fini_array+0x1c>
   850bc:	3c01      	subs	r4, #1
   850be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   850c2:	4798      	blx	r3
   850c4:	2c00      	cmp	r4, #0
   850c6:	d1f9      	bne.n	850bc <__libc_fini_array+0x10>
   850c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   850cc:	f001 beaa 	b.w	86e24 <_fini>
   850d0:	00086e30 	.word	0x00086e30
   850d4:	00086e34 	.word	0x00086e34

000850d8 <__fputwc>:
   850d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   850dc:	b082      	sub	sp, #8
   850de:	4607      	mov	r7, r0
   850e0:	460e      	mov	r6, r1
   850e2:	4614      	mov	r4, r2
   850e4:	f000 fb44 	bl	85770 <__locale_mb_cur_max>
   850e8:	2801      	cmp	r0, #1
   850ea:	d040      	beq.n	8516e <__fputwc+0x96>
   850ec:	4638      	mov	r0, r7
   850ee:	a901      	add	r1, sp, #4
   850f0:	4632      	mov	r2, r6
   850f2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   850f6:	f001 f9ff 	bl	864f8 <_wcrtomb_r>
   850fa:	f1b0 3fff 	cmp.w	r0, #4294967295
   850fe:	4680      	mov	r8, r0
   85100:	d02e      	beq.n	85160 <__fputwc+0x88>
   85102:	2800      	cmp	r0, #0
   85104:	d03b      	beq.n	8517e <__fputwc+0xa6>
   85106:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8510a:	2500      	movs	r5, #0
   8510c:	e009      	b.n	85122 <__fputwc+0x4a>
   8510e:	6823      	ldr	r3, [r4, #0]
   85110:	7019      	strb	r1, [r3, #0]
   85112:	6823      	ldr	r3, [r4, #0]
   85114:	3301      	adds	r3, #1
   85116:	6023      	str	r3, [r4, #0]
   85118:	3501      	adds	r5, #1
   8511a:	45a8      	cmp	r8, r5
   8511c:	d92f      	bls.n	8517e <__fputwc+0xa6>
   8511e:	ab01      	add	r3, sp, #4
   85120:	5d59      	ldrb	r1, [r3, r5]
   85122:	68a3      	ldr	r3, [r4, #8]
   85124:	3b01      	subs	r3, #1
   85126:	2b00      	cmp	r3, #0
   85128:	60a3      	str	r3, [r4, #8]
   8512a:	daf0      	bge.n	8510e <__fputwc+0x36>
   8512c:	69a2      	ldr	r2, [r4, #24]
   8512e:	4293      	cmp	r3, r2
   85130:	db06      	blt.n	85140 <__fputwc+0x68>
   85132:	6823      	ldr	r3, [r4, #0]
   85134:	7019      	strb	r1, [r3, #0]
   85136:	6823      	ldr	r3, [r4, #0]
   85138:	7819      	ldrb	r1, [r3, #0]
   8513a:	3301      	adds	r3, #1
   8513c:	290a      	cmp	r1, #10
   8513e:	d1ea      	bne.n	85116 <__fputwc+0x3e>
   85140:	4638      	mov	r0, r7
   85142:	4622      	mov	r2, r4
   85144:	f001 f984 	bl	86450 <__swbuf_r>
   85148:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   8514c:	fab0 f080 	clz	r0, r0
   85150:	0940      	lsrs	r0, r0, #5
   85152:	2800      	cmp	r0, #0
   85154:	d0e0      	beq.n	85118 <__fputwc+0x40>
   85156:	f04f 30ff 	mov.w	r0, #4294967295
   8515a:	b002      	add	sp, #8
   8515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85160:	89a3      	ldrh	r3, [r4, #12]
   85162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85166:	81a3      	strh	r3, [r4, #12]
   85168:	b002      	add	sp, #8
   8516a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8516e:	1e73      	subs	r3, r6, #1
   85170:	2bfe      	cmp	r3, #254	; 0xfe
   85172:	d8bb      	bhi.n	850ec <__fputwc+0x14>
   85174:	b2f1      	uxtb	r1, r6
   85176:	4680      	mov	r8, r0
   85178:	f88d 1004 	strb.w	r1, [sp, #4]
   8517c:	e7c5      	b.n	8510a <__fputwc+0x32>
   8517e:	4630      	mov	r0, r6
   85180:	b002      	add	sp, #8
   85182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85186:	bf00      	nop

00085188 <_fputwc_r>:
   85188:	8993      	ldrh	r3, [r2, #12]
   8518a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8518e:	d10b      	bne.n	851a8 <_fputwc_r+0x20>
   85190:	b410      	push	{r4}
   85192:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85198:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   8519c:	6654      	str	r4, [r2, #100]	; 0x64
   8519e:	8193      	strh	r3, [r2, #12]
   851a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   851a4:	f7ff bf98 	b.w	850d8 <__fputwc>
   851a8:	f7ff bf96 	b.w	850d8 <__fputwc>

000851ac <_malloc_trim_r>:
   851ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   851ae:	460c      	mov	r4, r1
   851b0:	4f22      	ldr	r7, [pc, #136]	; (8523c <_malloc_trim_r+0x90>)
   851b2:	4606      	mov	r6, r0
   851b4:	f000 ff04 	bl	85fc0 <__malloc_lock>
   851b8:	68bb      	ldr	r3, [r7, #8]
   851ba:	685d      	ldr	r5, [r3, #4]
   851bc:	f025 0503 	bic.w	r5, r5, #3
   851c0:	1b29      	subs	r1, r5, r4
   851c2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   851c6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   851ca:	f021 010f 	bic.w	r1, r1, #15
   851ce:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   851d2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   851d6:	db07      	blt.n	851e8 <_malloc_trim_r+0x3c>
   851d8:	4630      	mov	r0, r6
   851da:	2100      	movs	r1, #0
   851dc:	f001 f8e4 	bl	863a8 <_sbrk_r>
   851e0:	68bb      	ldr	r3, [r7, #8]
   851e2:	442b      	add	r3, r5
   851e4:	4298      	cmp	r0, r3
   851e6:	d004      	beq.n	851f2 <_malloc_trim_r+0x46>
   851e8:	4630      	mov	r0, r6
   851ea:	f000 feeb 	bl	85fc4 <__malloc_unlock>
   851ee:	2000      	movs	r0, #0
   851f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851f2:	4630      	mov	r0, r6
   851f4:	4261      	negs	r1, r4
   851f6:	f001 f8d7 	bl	863a8 <_sbrk_r>
   851fa:	3001      	adds	r0, #1
   851fc:	d00d      	beq.n	8521a <_malloc_trim_r+0x6e>
   851fe:	4b10      	ldr	r3, [pc, #64]	; (85240 <_malloc_trim_r+0x94>)
   85200:	68ba      	ldr	r2, [r7, #8]
   85202:	6819      	ldr	r1, [r3, #0]
   85204:	1b2d      	subs	r5, r5, r4
   85206:	f045 0501 	orr.w	r5, r5, #1
   8520a:	4630      	mov	r0, r6
   8520c:	1b09      	subs	r1, r1, r4
   8520e:	6055      	str	r5, [r2, #4]
   85210:	6019      	str	r1, [r3, #0]
   85212:	f000 fed7 	bl	85fc4 <__malloc_unlock>
   85216:	2001      	movs	r0, #1
   85218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8521a:	4630      	mov	r0, r6
   8521c:	2100      	movs	r1, #0
   8521e:	f001 f8c3 	bl	863a8 <_sbrk_r>
   85222:	68ba      	ldr	r2, [r7, #8]
   85224:	1a83      	subs	r3, r0, r2
   85226:	2b0f      	cmp	r3, #15
   85228:	ddde      	ble.n	851e8 <_malloc_trim_r+0x3c>
   8522a:	4c06      	ldr	r4, [pc, #24]	; (85244 <_malloc_trim_r+0x98>)
   8522c:	4904      	ldr	r1, [pc, #16]	; (85240 <_malloc_trim_r+0x94>)
   8522e:	6824      	ldr	r4, [r4, #0]
   85230:	f043 0301 	orr.w	r3, r3, #1
   85234:	1b00      	subs	r0, r0, r4
   85236:	6053      	str	r3, [r2, #4]
   85238:	6008      	str	r0, [r1, #0]
   8523a:	e7d5      	b.n	851e8 <_malloc_trim_r+0x3c>
   8523c:	20070858 	.word	0x20070858
   85240:	20070da0 	.word	0x20070da0
   85244:	20070c64 	.word	0x20070c64

00085248 <_free_r>:
   85248:	2900      	cmp	r1, #0
   8524a:	d04e      	beq.n	852ea <_free_r+0xa2>
   8524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85250:	460c      	mov	r4, r1
   85252:	4680      	mov	r8, r0
   85254:	f000 feb4 	bl	85fc0 <__malloc_lock>
   85258:	f854 7c04 	ldr.w	r7, [r4, #-4]
   8525c:	4962      	ldr	r1, [pc, #392]	; (853e8 <_free_r+0x1a0>)
   8525e:	f1a4 0508 	sub.w	r5, r4, #8
   85262:	f027 0201 	bic.w	r2, r7, #1
   85266:	18ab      	adds	r3, r5, r2
   85268:	688e      	ldr	r6, [r1, #8]
   8526a:	6858      	ldr	r0, [r3, #4]
   8526c:	429e      	cmp	r6, r3
   8526e:	f020 0003 	bic.w	r0, r0, #3
   85272:	d05a      	beq.n	8532a <_free_r+0xe2>
   85274:	07fe      	lsls	r6, r7, #31
   85276:	6058      	str	r0, [r3, #4]
   85278:	d40b      	bmi.n	85292 <_free_r+0x4a>
   8527a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8527e:	f101 0e08 	add.w	lr, r1, #8
   85282:	1bed      	subs	r5, r5, r7
   85284:	68ac      	ldr	r4, [r5, #8]
   85286:	443a      	add	r2, r7
   85288:	4574      	cmp	r4, lr
   8528a:	d067      	beq.n	8535c <_free_r+0x114>
   8528c:	68ef      	ldr	r7, [r5, #12]
   8528e:	60e7      	str	r7, [r4, #12]
   85290:	60bc      	str	r4, [r7, #8]
   85292:	181c      	adds	r4, r3, r0
   85294:	6864      	ldr	r4, [r4, #4]
   85296:	07e4      	lsls	r4, r4, #31
   85298:	d40c      	bmi.n	852b4 <_free_r+0x6c>
   8529a:	4f54      	ldr	r7, [pc, #336]	; (853ec <_free_r+0x1a4>)
   8529c:	689c      	ldr	r4, [r3, #8]
   8529e:	4402      	add	r2, r0
   852a0:	42bc      	cmp	r4, r7
   852a2:	d07c      	beq.n	8539e <_free_r+0x156>
   852a4:	68d8      	ldr	r0, [r3, #12]
   852a6:	f042 0301 	orr.w	r3, r2, #1
   852aa:	60e0      	str	r0, [r4, #12]
   852ac:	6084      	str	r4, [r0, #8]
   852ae:	606b      	str	r3, [r5, #4]
   852b0:	50aa      	str	r2, [r5, r2]
   852b2:	e003      	b.n	852bc <_free_r+0x74>
   852b4:	f042 0301 	orr.w	r3, r2, #1
   852b8:	606b      	str	r3, [r5, #4]
   852ba:	50aa      	str	r2, [r5, r2]
   852bc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   852c0:	d214      	bcs.n	852ec <_free_r+0xa4>
   852c2:	08d2      	lsrs	r2, r2, #3
   852c4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   852c8:	2401      	movs	r4, #1
   852ca:	6848      	ldr	r0, [r1, #4]
   852cc:	1092      	asrs	r2, r2, #2
   852ce:	fa04 f202 	lsl.w	r2, r4, r2
   852d2:	689c      	ldr	r4, [r3, #8]
   852d4:	4310      	orrs	r0, r2
   852d6:	60ac      	str	r4, [r5, #8]
   852d8:	60eb      	str	r3, [r5, #12]
   852da:	6048      	str	r0, [r1, #4]
   852dc:	609d      	str	r5, [r3, #8]
   852de:	60e5      	str	r5, [r4, #12]
   852e0:	4640      	mov	r0, r8
   852e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   852e6:	f000 be6d 	b.w	85fc4 <__malloc_unlock>
   852ea:	4770      	bx	lr
   852ec:	0a53      	lsrs	r3, r2, #9
   852ee:	2b04      	cmp	r3, #4
   852f0:	d847      	bhi.n	85382 <_free_r+0x13a>
   852f2:	0993      	lsrs	r3, r2, #6
   852f4:	f103 0438 	add.w	r4, r3, #56	; 0x38
   852f8:	0060      	lsls	r0, r4, #1
   852fa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   852fe:	6883      	ldr	r3, [r0, #8]
   85300:	4939      	ldr	r1, [pc, #228]	; (853e8 <_free_r+0x1a0>)
   85302:	4283      	cmp	r3, r0
   85304:	d043      	beq.n	8538e <_free_r+0x146>
   85306:	6859      	ldr	r1, [r3, #4]
   85308:	f021 0103 	bic.w	r1, r1, #3
   8530c:	4291      	cmp	r1, r2
   8530e:	d902      	bls.n	85316 <_free_r+0xce>
   85310:	689b      	ldr	r3, [r3, #8]
   85312:	4298      	cmp	r0, r3
   85314:	d1f7      	bne.n	85306 <_free_r+0xbe>
   85316:	68da      	ldr	r2, [r3, #12]
   85318:	60ea      	str	r2, [r5, #12]
   8531a:	60ab      	str	r3, [r5, #8]
   8531c:	4640      	mov	r0, r8
   8531e:	6095      	str	r5, [r2, #8]
   85320:	60dd      	str	r5, [r3, #12]
   85322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85326:	f000 be4d 	b.w	85fc4 <__malloc_unlock>
   8532a:	07ff      	lsls	r7, r7, #31
   8532c:	4402      	add	r2, r0
   8532e:	d407      	bmi.n	85340 <_free_r+0xf8>
   85330:	f854 4c08 	ldr.w	r4, [r4, #-8]
   85334:	1b2d      	subs	r5, r5, r4
   85336:	68eb      	ldr	r3, [r5, #12]
   85338:	68a8      	ldr	r0, [r5, #8]
   8533a:	4422      	add	r2, r4
   8533c:	60c3      	str	r3, [r0, #12]
   8533e:	6098      	str	r0, [r3, #8]
   85340:	4b2b      	ldr	r3, [pc, #172]	; (853f0 <_free_r+0x1a8>)
   85342:	f042 0001 	orr.w	r0, r2, #1
   85346:	681b      	ldr	r3, [r3, #0]
   85348:	6068      	str	r0, [r5, #4]
   8534a:	429a      	cmp	r2, r3
   8534c:	608d      	str	r5, [r1, #8]
   8534e:	d3c7      	bcc.n	852e0 <_free_r+0x98>
   85350:	4b28      	ldr	r3, [pc, #160]	; (853f4 <_free_r+0x1ac>)
   85352:	4640      	mov	r0, r8
   85354:	6819      	ldr	r1, [r3, #0]
   85356:	f7ff ff29 	bl	851ac <_malloc_trim_r>
   8535a:	e7c1      	b.n	852e0 <_free_r+0x98>
   8535c:	1819      	adds	r1, r3, r0
   8535e:	6849      	ldr	r1, [r1, #4]
   85360:	07c9      	lsls	r1, r1, #31
   85362:	d409      	bmi.n	85378 <_free_r+0x130>
   85364:	68d9      	ldr	r1, [r3, #12]
   85366:	4402      	add	r2, r0
   85368:	689b      	ldr	r3, [r3, #8]
   8536a:	f042 0001 	orr.w	r0, r2, #1
   8536e:	60d9      	str	r1, [r3, #12]
   85370:	608b      	str	r3, [r1, #8]
   85372:	6068      	str	r0, [r5, #4]
   85374:	50aa      	str	r2, [r5, r2]
   85376:	e7b3      	b.n	852e0 <_free_r+0x98>
   85378:	f042 0301 	orr.w	r3, r2, #1
   8537c:	606b      	str	r3, [r5, #4]
   8537e:	50aa      	str	r2, [r5, r2]
   85380:	e7ae      	b.n	852e0 <_free_r+0x98>
   85382:	2b14      	cmp	r3, #20
   85384:	d814      	bhi.n	853b0 <_free_r+0x168>
   85386:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8538a:	0060      	lsls	r0, r4, #1
   8538c:	e7b5      	b.n	852fa <_free_r+0xb2>
   8538e:	684a      	ldr	r2, [r1, #4]
   85390:	10a4      	asrs	r4, r4, #2
   85392:	2001      	movs	r0, #1
   85394:	40a0      	lsls	r0, r4
   85396:	4302      	orrs	r2, r0
   85398:	604a      	str	r2, [r1, #4]
   8539a:	461a      	mov	r2, r3
   8539c:	e7bc      	b.n	85318 <_free_r+0xd0>
   8539e:	f042 0301 	orr.w	r3, r2, #1
   853a2:	614d      	str	r5, [r1, #20]
   853a4:	610d      	str	r5, [r1, #16]
   853a6:	60ec      	str	r4, [r5, #12]
   853a8:	60ac      	str	r4, [r5, #8]
   853aa:	606b      	str	r3, [r5, #4]
   853ac:	50aa      	str	r2, [r5, r2]
   853ae:	e797      	b.n	852e0 <_free_r+0x98>
   853b0:	2b54      	cmp	r3, #84	; 0x54
   853b2:	d804      	bhi.n	853be <_free_r+0x176>
   853b4:	0b13      	lsrs	r3, r2, #12
   853b6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   853ba:	0060      	lsls	r0, r4, #1
   853bc:	e79d      	b.n	852fa <_free_r+0xb2>
   853be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   853c2:	d804      	bhi.n	853ce <_free_r+0x186>
   853c4:	0bd3      	lsrs	r3, r2, #15
   853c6:	f103 0477 	add.w	r4, r3, #119	; 0x77
   853ca:	0060      	lsls	r0, r4, #1
   853cc:	e795      	b.n	852fa <_free_r+0xb2>
   853ce:	f240 5054 	movw	r0, #1364	; 0x554
   853d2:	4283      	cmp	r3, r0
   853d4:	d804      	bhi.n	853e0 <_free_r+0x198>
   853d6:	0c93      	lsrs	r3, r2, #18
   853d8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   853dc:	0060      	lsls	r0, r4, #1
   853de:	e78c      	b.n	852fa <_free_r+0xb2>
   853e0:	20fc      	movs	r0, #252	; 0xfc
   853e2:	247e      	movs	r4, #126	; 0x7e
   853e4:	e789      	b.n	852fa <_free_r+0xb2>
   853e6:	bf00      	nop
   853e8:	20070858 	.word	0x20070858
   853ec:	20070860 	.word	0x20070860
   853f0:	20070c60 	.word	0x20070c60
   853f4:	20070d9c 	.word	0x20070d9c

000853f8 <__sfvwrite_r>:
   853f8:	6893      	ldr	r3, [r2, #8]
   853fa:	2b00      	cmp	r3, #0
   853fc:	f000 80b1 	beq.w	85562 <__sfvwrite_r+0x16a>
   85400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85404:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   85408:	b083      	sub	sp, #12
   8540a:	f01e 0f08 	tst.w	lr, #8
   8540e:	460c      	mov	r4, r1
   85410:	4681      	mov	r9, r0
   85412:	4616      	mov	r6, r2
   85414:	d028      	beq.n	85468 <__sfvwrite_r+0x70>
   85416:	690b      	ldr	r3, [r1, #16]
   85418:	b333      	cbz	r3, 85468 <__sfvwrite_r+0x70>
   8541a:	f00e 0802 	and.w	r8, lr, #2
   8541e:	fa1f f088 	uxth.w	r0, r8
   85422:	6835      	ldr	r5, [r6, #0]
   85424:	b380      	cbz	r0, 85488 <__sfvwrite_r+0x90>
   85426:	f04f 0b00 	mov.w	fp, #0
   8542a:	46d8      	mov	r8, fp
   8542c:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 85714 <__sfvwrite_r+0x31c>
   85430:	f1b8 0f00 	cmp.w	r8, #0
   85434:	f000 808f 	beq.w	85556 <__sfvwrite_r+0x15e>
   85438:	45d0      	cmp	r8, sl
   8543a:	4643      	mov	r3, r8
   8543c:	4648      	mov	r0, r9
   8543e:	bf28      	it	cs
   85440:	4653      	movcs	r3, sl
   85442:	69e1      	ldr	r1, [r4, #28]
   85444:	465a      	mov	r2, fp
   85446:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85448:	47b8      	blx	r7
   8544a:	2800      	cmp	r0, #0
   8544c:	f340 80a8 	ble.w	855a0 <__sfvwrite_r+0x1a8>
   85450:	68b3      	ldr	r3, [r6, #8]
   85452:	4483      	add	fp, r0
   85454:	1a1b      	subs	r3, r3, r0
   85456:	ebc0 0808 	rsb	r8, r0, r8
   8545a:	60b3      	str	r3, [r6, #8]
   8545c:	2b00      	cmp	r3, #0
   8545e:	d1e7      	bne.n	85430 <__sfvwrite_r+0x38>
   85460:	2000      	movs	r0, #0
   85462:	b003      	add	sp, #12
   85464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85468:	4648      	mov	r0, r9
   8546a:	4621      	mov	r1, r4
   8546c:	f7ff fc6a 	bl	84d44 <__swsetup_r>
   85470:	2800      	cmp	r0, #0
   85472:	f040 8146 	bne.w	85702 <__sfvwrite_r+0x30a>
   85476:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   8547a:	6835      	ldr	r5, [r6, #0]
   8547c:	f00e 0802 	and.w	r8, lr, #2
   85480:	fa1f f088 	uxth.w	r0, r8
   85484:	2800      	cmp	r0, #0
   85486:	d1ce      	bne.n	85426 <__sfvwrite_r+0x2e>
   85488:	f01e 0b01 	ands.w	fp, lr, #1
   8548c:	f040 8091 	bne.w	855b2 <__sfvwrite_r+0x1ba>
   85490:	46d8      	mov	r8, fp
   85492:	f1b8 0f00 	cmp.w	r8, #0
   85496:	d058      	beq.n	8554a <__sfvwrite_r+0x152>
   85498:	f41e 7f00 	tst.w	lr, #512	; 0x200
   8549c:	68a7      	ldr	r7, [r4, #8]
   8549e:	d062      	beq.n	85566 <__sfvwrite_r+0x16e>
   854a0:	45b8      	cmp	r8, r7
   854a2:	46ba      	mov	sl, r7
   854a4:	f0c0 80c2 	bcc.w	8562c <__sfvwrite_r+0x234>
   854a8:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   854ac:	f000 80c0 	beq.w	85630 <__sfvwrite_r+0x238>
   854b0:	6967      	ldr	r7, [r4, #20]
   854b2:	6921      	ldr	r1, [r4, #16]
   854b4:	6823      	ldr	r3, [r4, #0]
   854b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   854ba:	1a5b      	subs	r3, r3, r1
   854bc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   854c0:	1c58      	adds	r0, r3, #1
   854c2:	107f      	asrs	r7, r7, #1
   854c4:	4440      	add	r0, r8
   854c6:	4287      	cmp	r7, r0
   854c8:	463a      	mov	r2, r7
   854ca:	bf3c      	itt	cc
   854cc:	4607      	movcc	r7, r0
   854ce:	463a      	movcc	r2, r7
   854d0:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   854d4:	9300      	str	r3, [sp, #0]
   854d6:	f000 80fb 	beq.w	856d0 <__sfvwrite_r+0x2d8>
   854da:	4611      	mov	r1, r2
   854dc:	4648      	mov	r0, r9
   854de:	f000 f9c5 	bl	8586c <_malloc_r>
   854e2:	9b00      	ldr	r3, [sp, #0]
   854e4:	4682      	mov	sl, r0
   854e6:	2800      	cmp	r0, #0
   854e8:	f000 810e 	beq.w	85708 <__sfvwrite_r+0x310>
   854ec:	461a      	mov	r2, r3
   854ee:	6921      	ldr	r1, [r4, #16]
   854f0:	9300      	str	r3, [sp, #0]
   854f2:	f000 fc8b 	bl	85e0c <memcpy>
   854f6:	89a2      	ldrh	r2, [r4, #12]
   854f8:	9b00      	ldr	r3, [sp, #0]
   854fa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   854fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85502:	81a2      	strh	r2, [r4, #12]
   85504:	eb0a 0003 	add.w	r0, sl, r3
   85508:	f8c4 a010 	str.w	sl, [r4, #16]
   8550c:	1afb      	subs	r3, r7, r3
   8550e:	6167      	str	r7, [r4, #20]
   85510:	46c2      	mov	sl, r8
   85512:	4647      	mov	r7, r8
   85514:	6020      	str	r0, [r4, #0]
   85516:	60a3      	str	r3, [r4, #8]
   85518:	4652      	mov	r2, sl
   8551a:	4659      	mov	r1, fp
   8551c:	f000 fcec 	bl	85ef8 <memmove>
   85520:	68a0      	ldr	r0, [r4, #8]
   85522:	6822      	ldr	r2, [r4, #0]
   85524:	1bc0      	subs	r0, r0, r7
   85526:	60a0      	str	r0, [r4, #8]
   85528:	4640      	mov	r0, r8
   8552a:	eb02 030a 	add.w	r3, r2, sl
   8552e:	6023      	str	r3, [r4, #0]
   85530:	68b3      	ldr	r3, [r6, #8]
   85532:	4483      	add	fp, r0
   85534:	1a1b      	subs	r3, r3, r0
   85536:	ebc0 0808 	rsb	r8, r0, r8
   8553a:	60b3      	str	r3, [r6, #8]
   8553c:	2b00      	cmp	r3, #0
   8553e:	d08f      	beq.n	85460 <__sfvwrite_r+0x68>
   85540:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   85544:	f1b8 0f00 	cmp.w	r8, #0
   85548:	d1a6      	bne.n	85498 <__sfvwrite_r+0xa0>
   8554a:	f8d5 b000 	ldr.w	fp, [r5]
   8554e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85552:	3508      	adds	r5, #8
   85554:	e79d      	b.n	85492 <__sfvwrite_r+0x9a>
   85556:	f8d5 b000 	ldr.w	fp, [r5]
   8555a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8555e:	3508      	adds	r5, #8
   85560:	e766      	b.n	85430 <__sfvwrite_r+0x38>
   85562:	2000      	movs	r0, #0
   85564:	4770      	bx	lr
   85566:	6820      	ldr	r0, [r4, #0]
   85568:	6923      	ldr	r3, [r4, #16]
   8556a:	4298      	cmp	r0, r3
   8556c:	d803      	bhi.n	85576 <__sfvwrite_r+0x17e>
   8556e:	6962      	ldr	r2, [r4, #20]
   85570:	4590      	cmp	r8, r2
   85572:	f080 8085 	bcs.w	85680 <__sfvwrite_r+0x288>
   85576:	4547      	cmp	r7, r8
   85578:	bf28      	it	cs
   8557a:	4647      	movcs	r7, r8
   8557c:	4659      	mov	r1, fp
   8557e:	463a      	mov	r2, r7
   85580:	f000 fcba 	bl	85ef8 <memmove>
   85584:	68a3      	ldr	r3, [r4, #8]
   85586:	6822      	ldr	r2, [r4, #0]
   85588:	1bdb      	subs	r3, r3, r7
   8558a:	443a      	add	r2, r7
   8558c:	60a3      	str	r3, [r4, #8]
   8558e:	6022      	str	r2, [r4, #0]
   85590:	2b00      	cmp	r3, #0
   85592:	d149      	bne.n	85628 <__sfvwrite_r+0x230>
   85594:	4648      	mov	r0, r9
   85596:	4621      	mov	r1, r4
   85598:	f7ff fcea 	bl	84f70 <_fflush_r>
   8559c:	2800      	cmp	r0, #0
   8559e:	d043      	beq.n	85628 <__sfvwrite_r+0x230>
   855a0:	89a3      	ldrh	r3, [r4, #12]
   855a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   855a6:	f04f 30ff 	mov.w	r0, #4294967295
   855aa:	81a3      	strh	r3, [r4, #12]
   855ac:	b003      	add	sp, #12
   855ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   855b2:	4680      	mov	r8, r0
   855b4:	4683      	mov	fp, r0
   855b6:	4682      	mov	sl, r0
   855b8:	9000      	str	r0, [sp, #0]
   855ba:	f1ba 0f00 	cmp.w	sl, #0
   855be:	d02b      	beq.n	85618 <__sfvwrite_r+0x220>
   855c0:	9b00      	ldr	r3, [sp, #0]
   855c2:	2b00      	cmp	r3, #0
   855c4:	d04f      	beq.n	85666 <__sfvwrite_r+0x26e>
   855c6:	45d0      	cmp	r8, sl
   855c8:	4643      	mov	r3, r8
   855ca:	bf28      	it	cs
   855cc:	4653      	movcs	r3, sl
   855ce:	6820      	ldr	r0, [r4, #0]
   855d0:	6921      	ldr	r1, [r4, #16]
   855d2:	461f      	mov	r7, r3
   855d4:	4288      	cmp	r0, r1
   855d6:	f8d4 e008 	ldr.w	lr, [r4, #8]
   855da:	6962      	ldr	r2, [r4, #20]
   855dc:	d903      	bls.n	855e6 <__sfvwrite_r+0x1ee>
   855de:	eb0e 0c02 	add.w	ip, lr, r2
   855e2:	4563      	cmp	r3, ip
   855e4:	dc5e      	bgt.n	856a4 <__sfvwrite_r+0x2ac>
   855e6:	4293      	cmp	r3, r2
   855e8:	db24      	blt.n	85634 <__sfvwrite_r+0x23c>
   855ea:	4613      	mov	r3, r2
   855ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
   855ee:	4648      	mov	r0, r9
   855f0:	69e1      	ldr	r1, [r4, #28]
   855f2:	465a      	mov	r2, fp
   855f4:	47b8      	blx	r7
   855f6:	1e07      	subs	r7, r0, #0
   855f8:	ddd2      	ble.n	855a0 <__sfvwrite_r+0x1a8>
   855fa:	ebb8 0807 	subs.w	r8, r8, r7
   855fe:	d029      	beq.n	85654 <__sfvwrite_r+0x25c>
   85600:	68b3      	ldr	r3, [r6, #8]
   85602:	44bb      	add	fp, r7
   85604:	1bdb      	subs	r3, r3, r7
   85606:	ebc7 0a0a 	rsb	sl, r7, sl
   8560a:	60b3      	str	r3, [r6, #8]
   8560c:	2b00      	cmp	r3, #0
   8560e:	f43f af27 	beq.w	85460 <__sfvwrite_r+0x68>
   85612:	f1ba 0f00 	cmp.w	sl, #0
   85616:	d1d3      	bne.n	855c0 <__sfvwrite_r+0x1c8>
   85618:	2300      	movs	r3, #0
   8561a:	f8d5 b000 	ldr.w	fp, [r5]
   8561e:	f8d5 a004 	ldr.w	sl, [r5, #4]
   85622:	9300      	str	r3, [sp, #0]
   85624:	3508      	adds	r5, #8
   85626:	e7c8      	b.n	855ba <__sfvwrite_r+0x1c2>
   85628:	4638      	mov	r0, r7
   8562a:	e781      	b.n	85530 <__sfvwrite_r+0x138>
   8562c:	4647      	mov	r7, r8
   8562e:	46c2      	mov	sl, r8
   85630:	6820      	ldr	r0, [r4, #0]
   85632:	e771      	b.n	85518 <__sfvwrite_r+0x120>
   85634:	461a      	mov	r2, r3
   85636:	4659      	mov	r1, fp
   85638:	9301      	str	r3, [sp, #4]
   8563a:	f000 fc5d 	bl	85ef8 <memmove>
   8563e:	68a2      	ldr	r2, [r4, #8]
   85640:	6821      	ldr	r1, [r4, #0]
   85642:	9b01      	ldr	r3, [sp, #4]
   85644:	ebb8 0807 	subs.w	r8, r8, r7
   85648:	eba2 0203 	sub.w	r2, r2, r3
   8564c:	440b      	add	r3, r1
   8564e:	60a2      	str	r2, [r4, #8]
   85650:	6023      	str	r3, [r4, #0]
   85652:	d1d5      	bne.n	85600 <__sfvwrite_r+0x208>
   85654:	4648      	mov	r0, r9
   85656:	4621      	mov	r1, r4
   85658:	f7ff fc8a 	bl	84f70 <_fflush_r>
   8565c:	2800      	cmp	r0, #0
   8565e:	d19f      	bne.n	855a0 <__sfvwrite_r+0x1a8>
   85660:	f8cd 8000 	str.w	r8, [sp]
   85664:	e7cc      	b.n	85600 <__sfvwrite_r+0x208>
   85666:	4658      	mov	r0, fp
   85668:	210a      	movs	r1, #10
   8566a:	4652      	mov	r2, sl
   8566c:	f000 fb84 	bl	85d78 <memchr>
   85670:	2800      	cmp	r0, #0
   85672:	d041      	beq.n	856f8 <__sfvwrite_r+0x300>
   85674:	3001      	adds	r0, #1
   85676:	2301      	movs	r3, #1
   85678:	ebcb 0800 	rsb	r8, fp, r0
   8567c:	9300      	str	r3, [sp, #0]
   8567e:	e7a2      	b.n	855c6 <__sfvwrite_r+0x1ce>
   85680:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85684:	4543      	cmp	r3, r8
   85686:	bf28      	it	cs
   85688:	4643      	movcs	r3, r8
   8568a:	fb93 f3f2 	sdiv	r3, r3, r2
   8568e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85690:	fb03 f302 	mul.w	r3, r3, r2
   85694:	4648      	mov	r0, r9
   85696:	69e1      	ldr	r1, [r4, #28]
   85698:	465a      	mov	r2, fp
   8569a:	47b8      	blx	r7
   8569c:	2800      	cmp	r0, #0
   8569e:	f73f af47 	bgt.w	85530 <__sfvwrite_r+0x138>
   856a2:	e77d      	b.n	855a0 <__sfvwrite_r+0x1a8>
   856a4:	4662      	mov	r2, ip
   856a6:	4659      	mov	r1, fp
   856a8:	f8cd c004 	str.w	ip, [sp, #4]
   856ac:	f000 fc24 	bl	85ef8 <memmove>
   856b0:	6823      	ldr	r3, [r4, #0]
   856b2:	f8dd c004 	ldr.w	ip, [sp, #4]
   856b6:	4648      	mov	r0, r9
   856b8:	4463      	add	r3, ip
   856ba:	6023      	str	r3, [r4, #0]
   856bc:	4621      	mov	r1, r4
   856be:	f7ff fc57 	bl	84f70 <_fflush_r>
   856c2:	f8dd c004 	ldr.w	ip, [sp, #4]
   856c6:	2800      	cmp	r0, #0
   856c8:	f47f af6a 	bne.w	855a0 <__sfvwrite_r+0x1a8>
   856cc:	4667      	mov	r7, ip
   856ce:	e794      	b.n	855fa <__sfvwrite_r+0x202>
   856d0:	4648      	mov	r0, r9
   856d2:	f000 fc79 	bl	85fc8 <_realloc_r>
   856d6:	9b00      	ldr	r3, [sp, #0]
   856d8:	4682      	mov	sl, r0
   856da:	2800      	cmp	r0, #0
   856dc:	f47f af12 	bne.w	85504 <__sfvwrite_r+0x10c>
   856e0:	4648      	mov	r0, r9
   856e2:	6921      	ldr	r1, [r4, #16]
   856e4:	f7ff fdb0 	bl	85248 <_free_r>
   856e8:	89a3      	ldrh	r3, [r4, #12]
   856ea:	220c      	movs	r2, #12
   856ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   856f0:	b29b      	uxth	r3, r3
   856f2:	f8c9 2000 	str.w	r2, [r9]
   856f6:	e754      	b.n	855a2 <__sfvwrite_r+0x1aa>
   856f8:	2301      	movs	r3, #1
   856fa:	f10a 0801 	add.w	r8, sl, #1
   856fe:	9300      	str	r3, [sp, #0]
   85700:	e761      	b.n	855c6 <__sfvwrite_r+0x1ce>
   85702:	f04f 30ff 	mov.w	r0, #4294967295
   85706:	e6ac      	b.n	85462 <__sfvwrite_r+0x6a>
   85708:	230c      	movs	r3, #12
   8570a:	f8c9 3000 	str.w	r3, [r9]
   8570e:	89a3      	ldrh	r3, [r4, #12]
   85710:	e747      	b.n	855a2 <__sfvwrite_r+0x1aa>
   85712:	bf00      	nop
   85714:	7ffffc00 	.word	0x7ffffc00

00085718 <_fwalk_reent>:
   85718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8571c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85720:	d01e      	beq.n	85760 <_fwalk_reent+0x48>
   85722:	4688      	mov	r8, r1
   85724:	4607      	mov	r7, r0
   85726:	f04f 0900 	mov.w	r9, #0
   8572a:	6875      	ldr	r5, [r6, #4]
   8572c:	68b4      	ldr	r4, [r6, #8]
   8572e:	3d01      	subs	r5, #1
   85730:	d410      	bmi.n	85754 <_fwalk_reent+0x3c>
   85732:	89a3      	ldrh	r3, [r4, #12]
   85734:	3d01      	subs	r5, #1
   85736:	2b01      	cmp	r3, #1
   85738:	d908      	bls.n	8574c <_fwalk_reent+0x34>
   8573a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8573e:	3301      	adds	r3, #1
   85740:	d004      	beq.n	8574c <_fwalk_reent+0x34>
   85742:	4638      	mov	r0, r7
   85744:	4621      	mov	r1, r4
   85746:	47c0      	blx	r8
   85748:	ea49 0900 	orr.w	r9, r9, r0
   8574c:	1c6b      	adds	r3, r5, #1
   8574e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   85752:	d1ee      	bne.n	85732 <_fwalk_reent+0x1a>
   85754:	6836      	ldr	r6, [r6, #0]
   85756:	2e00      	cmp	r6, #0
   85758:	d1e7      	bne.n	8572a <_fwalk_reent+0x12>
   8575a:	4648      	mov	r0, r9
   8575c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85760:	46b1      	mov	r9, r6
   85762:	4648      	mov	r0, r9
   85764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085768 <__locale_charset>:
   85768:	4800      	ldr	r0, [pc, #0]	; (8576c <__locale_charset+0x4>)
   8576a:	4770      	bx	lr
   8576c:	20070834 	.word	0x20070834

00085770 <__locale_mb_cur_max>:
   85770:	4b01      	ldr	r3, [pc, #4]	; (85778 <__locale_mb_cur_max+0x8>)
   85772:	6818      	ldr	r0, [r3, #0]
   85774:	4770      	bx	lr
   85776:	bf00      	nop
   85778:	20070854 	.word	0x20070854

0008577c <__smakebuf_r>:
   8577c:	898b      	ldrh	r3, [r1, #12]
   8577e:	b29a      	uxth	r2, r3
   85780:	f012 0f02 	tst.w	r2, #2
   85784:	d13c      	bne.n	85800 <__smakebuf_r+0x84>
   85786:	b5f0      	push	{r4, r5, r6, r7, lr}
   85788:	460c      	mov	r4, r1
   8578a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8578e:	b091      	sub	sp, #68	; 0x44
   85790:	2900      	cmp	r1, #0
   85792:	4605      	mov	r5, r0
   85794:	db19      	blt.n	857ca <__smakebuf_r+0x4e>
   85796:	aa01      	add	r2, sp, #4
   85798:	f000 ffa0 	bl	866dc <_fstat_r>
   8579c:	2800      	cmp	r0, #0
   8579e:	db12      	blt.n	857c6 <__smakebuf_r+0x4a>
   857a0:	9b02      	ldr	r3, [sp, #8]
   857a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   857a6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   857aa:	fab7 f787 	clz	r7, r7
   857ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   857b2:	ea4f 1757 	mov.w	r7, r7, lsr #5
   857b6:	d02a      	beq.n	8580e <__smakebuf_r+0x92>
   857b8:	89a3      	ldrh	r3, [r4, #12]
   857ba:	f44f 6680 	mov.w	r6, #1024	; 0x400
   857be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   857c2:	81a3      	strh	r3, [r4, #12]
   857c4:	e00b      	b.n	857de <__smakebuf_r+0x62>
   857c6:	89a3      	ldrh	r3, [r4, #12]
   857c8:	b29a      	uxth	r2, r3
   857ca:	f012 0f80 	tst.w	r2, #128	; 0x80
   857ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   857d2:	81a3      	strh	r3, [r4, #12]
   857d4:	bf0c      	ite	eq
   857d6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   857da:	2640      	movne	r6, #64	; 0x40
   857dc:	2700      	movs	r7, #0
   857de:	4628      	mov	r0, r5
   857e0:	4631      	mov	r1, r6
   857e2:	f000 f843 	bl	8586c <_malloc_r>
   857e6:	89a3      	ldrh	r3, [r4, #12]
   857e8:	b340      	cbz	r0, 8583c <__smakebuf_r+0xc0>
   857ea:	4a1a      	ldr	r2, [pc, #104]	; (85854 <__smakebuf_r+0xd8>)
   857ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   857f0:	63ea      	str	r2, [r5, #60]	; 0x3c
   857f2:	81a3      	strh	r3, [r4, #12]
   857f4:	6020      	str	r0, [r4, #0]
   857f6:	6120      	str	r0, [r4, #16]
   857f8:	6166      	str	r6, [r4, #20]
   857fa:	b99f      	cbnz	r7, 85824 <__smakebuf_r+0xa8>
   857fc:	b011      	add	sp, #68	; 0x44
   857fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85800:	f101 0343 	add.w	r3, r1, #67	; 0x43
   85804:	2201      	movs	r2, #1
   85806:	600b      	str	r3, [r1, #0]
   85808:	610b      	str	r3, [r1, #16]
   8580a:	614a      	str	r2, [r1, #20]
   8580c:	4770      	bx	lr
   8580e:	4b12      	ldr	r3, [pc, #72]	; (85858 <__smakebuf_r+0xdc>)
   85810:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   85812:	429a      	cmp	r2, r3
   85814:	d1d0      	bne.n	857b8 <__smakebuf_r+0x3c>
   85816:	89a3      	ldrh	r3, [r4, #12]
   85818:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8581c:	4333      	orrs	r3, r6
   8581e:	81a3      	strh	r3, [r4, #12]
   85820:	64e6      	str	r6, [r4, #76]	; 0x4c
   85822:	e7dc      	b.n	857de <__smakebuf_r+0x62>
   85824:	4628      	mov	r0, r5
   85826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8582a:	f000 ff6b 	bl	86704 <_isatty_r>
   8582e:	2800      	cmp	r0, #0
   85830:	d0e4      	beq.n	857fc <__smakebuf_r+0x80>
   85832:	89a3      	ldrh	r3, [r4, #12]
   85834:	f043 0301 	orr.w	r3, r3, #1
   85838:	81a3      	strh	r3, [r4, #12]
   8583a:	e7df      	b.n	857fc <__smakebuf_r+0x80>
   8583c:	059a      	lsls	r2, r3, #22
   8583e:	d4dd      	bmi.n	857fc <__smakebuf_r+0x80>
   85840:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85844:	f043 0302 	orr.w	r3, r3, #2
   85848:	2101      	movs	r1, #1
   8584a:	81a3      	strh	r3, [r4, #12]
   8584c:	6022      	str	r2, [r4, #0]
   8584e:	6122      	str	r2, [r4, #16]
   85850:	6161      	str	r1, [r4, #20]
   85852:	e7d3      	b.n	857fc <__smakebuf_r+0x80>
   85854:	00084f9d 	.word	0x00084f9d
   85858:	00086429 	.word	0x00086429

0008585c <malloc>:
   8585c:	4b02      	ldr	r3, [pc, #8]	; (85868 <malloc+0xc>)
   8585e:	4601      	mov	r1, r0
   85860:	6818      	ldr	r0, [r3, #0]
   85862:	f000 b803 	b.w	8586c <_malloc_r>
   85866:	bf00      	nop
   85868:	20070830 	.word	0x20070830

0008586c <_malloc_r>:
   8586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85870:	f101 050b 	add.w	r5, r1, #11
   85874:	2d16      	cmp	r5, #22
   85876:	b083      	sub	sp, #12
   85878:	4606      	mov	r6, r0
   8587a:	d927      	bls.n	858cc <_malloc_r+0x60>
   8587c:	f035 0507 	bics.w	r5, r5, #7
   85880:	f100 80b6 	bmi.w	859f0 <_malloc_r+0x184>
   85884:	42a9      	cmp	r1, r5
   85886:	f200 80b3 	bhi.w	859f0 <_malloc_r+0x184>
   8588a:	f000 fb99 	bl	85fc0 <__malloc_lock>
   8588e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85892:	d222      	bcs.n	858da <_malloc_r+0x6e>
   85894:	4fbc      	ldr	r7, [pc, #752]	; (85b88 <_malloc_r+0x31c>)
   85896:	08e8      	lsrs	r0, r5, #3
   85898:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   8589c:	68dc      	ldr	r4, [r3, #12]
   8589e:	429c      	cmp	r4, r3
   858a0:	f000 81bc 	beq.w	85c1c <_malloc_r+0x3b0>
   858a4:	6863      	ldr	r3, [r4, #4]
   858a6:	68e1      	ldr	r1, [r4, #12]
   858a8:	f023 0303 	bic.w	r3, r3, #3
   858ac:	4423      	add	r3, r4
   858ae:	685a      	ldr	r2, [r3, #4]
   858b0:	68a5      	ldr	r5, [r4, #8]
   858b2:	f042 0201 	orr.w	r2, r2, #1
   858b6:	60e9      	str	r1, [r5, #12]
   858b8:	4630      	mov	r0, r6
   858ba:	608d      	str	r5, [r1, #8]
   858bc:	605a      	str	r2, [r3, #4]
   858be:	f000 fb81 	bl	85fc4 <__malloc_unlock>
   858c2:	3408      	adds	r4, #8
   858c4:	4620      	mov	r0, r4
   858c6:	b003      	add	sp, #12
   858c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   858cc:	2910      	cmp	r1, #16
   858ce:	f200 808f 	bhi.w	859f0 <_malloc_r+0x184>
   858d2:	f000 fb75 	bl	85fc0 <__malloc_lock>
   858d6:	2510      	movs	r5, #16
   858d8:	e7dc      	b.n	85894 <_malloc_r+0x28>
   858da:	0a68      	lsrs	r0, r5, #9
   858dc:	f000 808f 	beq.w	859fe <_malloc_r+0x192>
   858e0:	2804      	cmp	r0, #4
   858e2:	f200 8147 	bhi.w	85b74 <_malloc_r+0x308>
   858e6:	09a8      	lsrs	r0, r5, #6
   858e8:	3038      	adds	r0, #56	; 0x38
   858ea:	0041      	lsls	r1, r0, #1
   858ec:	4fa6      	ldr	r7, [pc, #664]	; (85b88 <_malloc_r+0x31c>)
   858ee:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   858f2:	68cc      	ldr	r4, [r1, #12]
   858f4:	42a1      	cmp	r1, r4
   858f6:	d106      	bne.n	85906 <_malloc_r+0x9a>
   858f8:	e00c      	b.n	85914 <_malloc_r+0xa8>
   858fa:	2a00      	cmp	r2, #0
   858fc:	f280 8082 	bge.w	85a04 <_malloc_r+0x198>
   85900:	68e4      	ldr	r4, [r4, #12]
   85902:	42a1      	cmp	r1, r4
   85904:	d006      	beq.n	85914 <_malloc_r+0xa8>
   85906:	6863      	ldr	r3, [r4, #4]
   85908:	f023 0303 	bic.w	r3, r3, #3
   8590c:	1b5a      	subs	r2, r3, r5
   8590e:	2a0f      	cmp	r2, #15
   85910:	ddf3      	ble.n	858fa <_malloc_r+0x8e>
   85912:	3801      	subs	r0, #1
   85914:	3001      	adds	r0, #1
   85916:	499c      	ldr	r1, [pc, #624]	; (85b88 <_malloc_r+0x31c>)
   85918:	693c      	ldr	r4, [r7, #16]
   8591a:	f101 0e08 	add.w	lr, r1, #8
   8591e:	4574      	cmp	r4, lr
   85920:	f000 8171 	beq.w	85c06 <_malloc_r+0x39a>
   85924:	6863      	ldr	r3, [r4, #4]
   85926:	f023 0303 	bic.w	r3, r3, #3
   8592a:	1b5a      	subs	r2, r3, r5
   8592c:	2a0f      	cmp	r2, #15
   8592e:	f300 8157 	bgt.w	85be0 <_malloc_r+0x374>
   85932:	2a00      	cmp	r2, #0
   85934:	f8c1 e014 	str.w	lr, [r1, #20]
   85938:	f8c1 e010 	str.w	lr, [r1, #16]
   8593c:	da66      	bge.n	85a0c <_malloc_r+0x1a0>
   8593e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85942:	f080 812d 	bcs.w	85ba0 <_malloc_r+0x334>
   85946:	08db      	lsrs	r3, r3, #3
   85948:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   8594c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   85950:	684a      	ldr	r2, [r1, #4]
   85952:	2301      	movs	r3, #1
   85954:	fa03 f30c 	lsl.w	r3, r3, ip
   85958:	f8d8 c008 	ldr.w	ip, [r8, #8]
   8595c:	4313      	orrs	r3, r2
   8595e:	f8c4 c008 	str.w	ip, [r4, #8]
   85962:	f8c4 800c 	str.w	r8, [r4, #12]
   85966:	604b      	str	r3, [r1, #4]
   85968:	f8c8 4008 	str.w	r4, [r8, #8]
   8596c:	f8cc 400c 	str.w	r4, [ip, #12]
   85970:	1082      	asrs	r2, r0, #2
   85972:	2401      	movs	r4, #1
   85974:	4094      	lsls	r4, r2
   85976:	429c      	cmp	r4, r3
   85978:	d855      	bhi.n	85a26 <_malloc_r+0x1ba>
   8597a:	4223      	tst	r3, r4
   8597c:	d106      	bne.n	8598c <_malloc_r+0x120>
   8597e:	f020 0003 	bic.w	r0, r0, #3
   85982:	0064      	lsls	r4, r4, #1
   85984:	4223      	tst	r3, r4
   85986:	f100 0004 	add.w	r0, r0, #4
   8598a:	d0fa      	beq.n	85982 <_malloc_r+0x116>
   8598c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   85990:	46c4      	mov	ip, r8
   85992:	4681      	mov	r9, r0
   85994:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85998:	459c      	cmp	ip, r3
   8599a:	d107      	bne.n	859ac <_malloc_r+0x140>
   8599c:	e135      	b.n	85c0a <_malloc_r+0x39e>
   8599e:	2900      	cmp	r1, #0
   859a0:	f280 8145 	bge.w	85c2e <_malloc_r+0x3c2>
   859a4:	68db      	ldr	r3, [r3, #12]
   859a6:	459c      	cmp	ip, r3
   859a8:	f000 812f 	beq.w	85c0a <_malloc_r+0x39e>
   859ac:	685a      	ldr	r2, [r3, #4]
   859ae:	f022 0203 	bic.w	r2, r2, #3
   859b2:	1b51      	subs	r1, r2, r5
   859b4:	290f      	cmp	r1, #15
   859b6:	ddf2      	ble.n	8599e <_malloc_r+0x132>
   859b8:	461c      	mov	r4, r3
   859ba:	68da      	ldr	r2, [r3, #12]
   859bc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   859c0:	f045 0901 	orr.w	r9, r5, #1
   859c4:	f041 0801 	orr.w	r8, r1, #1
   859c8:	441d      	add	r5, r3
   859ca:	f8c3 9004 	str.w	r9, [r3, #4]
   859ce:	4630      	mov	r0, r6
   859d0:	f8cc 200c 	str.w	r2, [ip, #12]
   859d4:	f8c2 c008 	str.w	ip, [r2, #8]
   859d8:	617d      	str	r5, [r7, #20]
   859da:	613d      	str	r5, [r7, #16]
   859dc:	f8c5 e00c 	str.w	lr, [r5, #12]
   859e0:	f8c5 e008 	str.w	lr, [r5, #8]
   859e4:	f8c5 8004 	str.w	r8, [r5, #4]
   859e8:	5069      	str	r1, [r5, r1]
   859ea:	f000 faeb 	bl	85fc4 <__malloc_unlock>
   859ee:	e769      	b.n	858c4 <_malloc_r+0x58>
   859f0:	2400      	movs	r4, #0
   859f2:	4620      	mov	r0, r4
   859f4:	230c      	movs	r3, #12
   859f6:	6033      	str	r3, [r6, #0]
   859f8:	b003      	add	sp, #12
   859fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859fe:	217e      	movs	r1, #126	; 0x7e
   85a00:	203f      	movs	r0, #63	; 0x3f
   85a02:	e773      	b.n	858ec <_malloc_r+0x80>
   85a04:	4423      	add	r3, r4
   85a06:	685a      	ldr	r2, [r3, #4]
   85a08:	68e1      	ldr	r1, [r4, #12]
   85a0a:	e751      	b.n	858b0 <_malloc_r+0x44>
   85a0c:	4423      	add	r3, r4
   85a0e:	685a      	ldr	r2, [r3, #4]
   85a10:	4630      	mov	r0, r6
   85a12:	f042 0201 	orr.w	r2, r2, #1
   85a16:	605a      	str	r2, [r3, #4]
   85a18:	3408      	adds	r4, #8
   85a1a:	f000 fad3 	bl	85fc4 <__malloc_unlock>
   85a1e:	4620      	mov	r0, r4
   85a20:	b003      	add	sp, #12
   85a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a26:	68bc      	ldr	r4, [r7, #8]
   85a28:	6863      	ldr	r3, [r4, #4]
   85a2a:	f023 0803 	bic.w	r8, r3, #3
   85a2e:	4545      	cmp	r5, r8
   85a30:	d804      	bhi.n	85a3c <_malloc_r+0x1d0>
   85a32:	ebc5 0308 	rsb	r3, r5, r8
   85a36:	2b0f      	cmp	r3, #15
   85a38:	f300 808c 	bgt.w	85b54 <_malloc_r+0x2e8>
   85a3c:	4b53      	ldr	r3, [pc, #332]	; (85b8c <_malloc_r+0x320>)
   85a3e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 85b9c <_malloc_r+0x330>
   85a42:	681a      	ldr	r2, [r3, #0]
   85a44:	f8da 3000 	ldr.w	r3, [sl]
   85a48:	442a      	add	r2, r5
   85a4a:	3301      	adds	r3, #1
   85a4c:	eb04 0b08 	add.w	fp, r4, r8
   85a50:	f000 8151 	beq.w	85cf6 <_malloc_r+0x48a>
   85a54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85a58:	320f      	adds	r2, #15
   85a5a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85a5e:	f022 020f 	bic.w	r2, r2, #15
   85a62:	4611      	mov	r1, r2
   85a64:	4630      	mov	r0, r6
   85a66:	9201      	str	r2, [sp, #4]
   85a68:	f000 fc9e 	bl	863a8 <_sbrk_r>
   85a6c:	f1b0 3fff 	cmp.w	r0, #4294967295
   85a70:	4681      	mov	r9, r0
   85a72:	9a01      	ldr	r2, [sp, #4]
   85a74:	f000 8148 	beq.w	85d08 <_malloc_r+0x49c>
   85a78:	4583      	cmp	fp, r0
   85a7a:	f200 80ef 	bhi.w	85c5c <_malloc_r+0x3f0>
   85a7e:	4b44      	ldr	r3, [pc, #272]	; (85b90 <_malloc_r+0x324>)
   85a80:	45cb      	cmp	fp, r9
   85a82:	6819      	ldr	r1, [r3, #0]
   85a84:	4411      	add	r1, r2
   85a86:	6019      	str	r1, [r3, #0]
   85a88:	f000 8143 	beq.w	85d12 <_malloc_r+0x4a6>
   85a8c:	f8da 0000 	ldr.w	r0, [sl]
   85a90:	f8df e108 	ldr.w	lr, [pc, #264]	; 85b9c <_malloc_r+0x330>
   85a94:	3001      	adds	r0, #1
   85a96:	bf1b      	ittet	ne
   85a98:	ebcb 0b09 	rsbne	fp, fp, r9
   85a9c:	4459      	addne	r1, fp
   85a9e:	f8ce 9000 	streq.w	r9, [lr]
   85aa2:	6019      	strne	r1, [r3, #0]
   85aa4:	f019 0107 	ands.w	r1, r9, #7
   85aa8:	f000 8108 	beq.w	85cbc <_malloc_r+0x450>
   85aac:	f1c1 0008 	rsb	r0, r1, #8
   85ab0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85ab4:	4481      	add	r9, r0
   85ab6:	3108      	adds	r1, #8
   85ab8:	444a      	add	r2, r9
   85aba:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85abe:	ebc2 0a01 	rsb	sl, r2, r1
   85ac2:	4651      	mov	r1, sl
   85ac4:	4630      	mov	r0, r6
   85ac6:	9301      	str	r3, [sp, #4]
   85ac8:	f000 fc6e 	bl	863a8 <_sbrk_r>
   85acc:	1c43      	adds	r3, r0, #1
   85ace:	9b01      	ldr	r3, [sp, #4]
   85ad0:	f000 812d 	beq.w	85d2e <_malloc_r+0x4c2>
   85ad4:	ebc9 0200 	rsb	r2, r9, r0
   85ad8:	4452      	add	r2, sl
   85ada:	f042 0201 	orr.w	r2, r2, #1
   85ade:	6819      	ldr	r1, [r3, #0]
   85ae0:	42bc      	cmp	r4, r7
   85ae2:	4451      	add	r1, sl
   85ae4:	f8c7 9008 	str.w	r9, [r7, #8]
   85ae8:	6019      	str	r1, [r3, #0]
   85aea:	f8c9 2004 	str.w	r2, [r9, #4]
   85aee:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 85b90 <_malloc_r+0x324>
   85af2:	d016      	beq.n	85b22 <_malloc_r+0x2b6>
   85af4:	f1b8 0f0f 	cmp.w	r8, #15
   85af8:	f240 80ef 	bls.w	85cda <_malloc_r+0x46e>
   85afc:	6862      	ldr	r2, [r4, #4]
   85afe:	f1a8 030c 	sub.w	r3, r8, #12
   85b02:	f023 0307 	bic.w	r3, r3, #7
   85b06:	f002 0201 	and.w	r2, r2, #1
   85b0a:	18e0      	adds	r0, r4, r3
   85b0c:	f04f 0e05 	mov.w	lr, #5
   85b10:	431a      	orrs	r2, r3
   85b12:	2b0f      	cmp	r3, #15
   85b14:	6062      	str	r2, [r4, #4]
   85b16:	f8c0 e004 	str.w	lr, [r0, #4]
   85b1a:	f8c0 e008 	str.w	lr, [r0, #8]
   85b1e:	f200 810a 	bhi.w	85d36 <_malloc_r+0x4ca>
   85b22:	4b1c      	ldr	r3, [pc, #112]	; (85b94 <_malloc_r+0x328>)
   85b24:	68bc      	ldr	r4, [r7, #8]
   85b26:	681a      	ldr	r2, [r3, #0]
   85b28:	4291      	cmp	r1, r2
   85b2a:	bf88      	it	hi
   85b2c:	6019      	strhi	r1, [r3, #0]
   85b2e:	4b1a      	ldr	r3, [pc, #104]	; (85b98 <_malloc_r+0x32c>)
   85b30:	681a      	ldr	r2, [r3, #0]
   85b32:	4291      	cmp	r1, r2
   85b34:	6862      	ldr	r2, [r4, #4]
   85b36:	bf88      	it	hi
   85b38:	6019      	strhi	r1, [r3, #0]
   85b3a:	f022 0203 	bic.w	r2, r2, #3
   85b3e:	4295      	cmp	r5, r2
   85b40:	eba2 0305 	sub.w	r3, r2, r5
   85b44:	d801      	bhi.n	85b4a <_malloc_r+0x2de>
   85b46:	2b0f      	cmp	r3, #15
   85b48:	dc04      	bgt.n	85b54 <_malloc_r+0x2e8>
   85b4a:	4630      	mov	r0, r6
   85b4c:	f000 fa3a 	bl	85fc4 <__malloc_unlock>
   85b50:	2400      	movs	r4, #0
   85b52:	e6b7      	b.n	858c4 <_malloc_r+0x58>
   85b54:	f045 0201 	orr.w	r2, r5, #1
   85b58:	f043 0301 	orr.w	r3, r3, #1
   85b5c:	4425      	add	r5, r4
   85b5e:	6062      	str	r2, [r4, #4]
   85b60:	4630      	mov	r0, r6
   85b62:	60bd      	str	r5, [r7, #8]
   85b64:	3408      	adds	r4, #8
   85b66:	606b      	str	r3, [r5, #4]
   85b68:	f000 fa2c 	bl	85fc4 <__malloc_unlock>
   85b6c:	4620      	mov	r0, r4
   85b6e:	b003      	add	sp, #12
   85b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85b74:	2814      	cmp	r0, #20
   85b76:	d969      	bls.n	85c4c <_malloc_r+0x3e0>
   85b78:	2854      	cmp	r0, #84	; 0x54
   85b7a:	f200 8098 	bhi.w	85cae <_malloc_r+0x442>
   85b7e:	0b28      	lsrs	r0, r5, #12
   85b80:	306e      	adds	r0, #110	; 0x6e
   85b82:	0041      	lsls	r1, r0, #1
   85b84:	e6b2      	b.n	858ec <_malloc_r+0x80>
   85b86:	bf00      	nop
   85b88:	20070858 	.word	0x20070858
   85b8c:	20070d9c 	.word	0x20070d9c
   85b90:	20070da0 	.word	0x20070da0
   85b94:	20070d98 	.word	0x20070d98
   85b98:	20070d94 	.word	0x20070d94
   85b9c:	20070c64 	.word	0x20070c64
   85ba0:	0a5a      	lsrs	r2, r3, #9
   85ba2:	2a04      	cmp	r2, #4
   85ba4:	d955      	bls.n	85c52 <_malloc_r+0x3e6>
   85ba6:	2a14      	cmp	r2, #20
   85ba8:	f200 80a7 	bhi.w	85cfa <_malloc_r+0x48e>
   85bac:	325b      	adds	r2, #91	; 0x5b
   85bae:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85bb2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   85bb6:	f8dc 1008 	ldr.w	r1, [ip, #8]
   85bba:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85d74 <_malloc_r+0x508>
   85bbe:	4561      	cmp	r1, ip
   85bc0:	d07f      	beq.n	85cc2 <_malloc_r+0x456>
   85bc2:	684a      	ldr	r2, [r1, #4]
   85bc4:	f022 0203 	bic.w	r2, r2, #3
   85bc8:	4293      	cmp	r3, r2
   85bca:	d202      	bcs.n	85bd2 <_malloc_r+0x366>
   85bcc:	6889      	ldr	r1, [r1, #8]
   85bce:	458c      	cmp	ip, r1
   85bd0:	d1f7      	bne.n	85bc2 <_malloc_r+0x356>
   85bd2:	68ca      	ldr	r2, [r1, #12]
   85bd4:	687b      	ldr	r3, [r7, #4]
   85bd6:	60e2      	str	r2, [r4, #12]
   85bd8:	60a1      	str	r1, [r4, #8]
   85bda:	6094      	str	r4, [r2, #8]
   85bdc:	60cc      	str	r4, [r1, #12]
   85bde:	e6c7      	b.n	85970 <_malloc_r+0x104>
   85be0:	f045 0701 	orr.w	r7, r5, #1
   85be4:	f042 0301 	orr.w	r3, r2, #1
   85be8:	4425      	add	r5, r4
   85bea:	6067      	str	r7, [r4, #4]
   85bec:	4630      	mov	r0, r6
   85bee:	614d      	str	r5, [r1, #20]
   85bf0:	610d      	str	r5, [r1, #16]
   85bf2:	f8c5 e00c 	str.w	lr, [r5, #12]
   85bf6:	f8c5 e008 	str.w	lr, [r5, #8]
   85bfa:	606b      	str	r3, [r5, #4]
   85bfc:	50aa      	str	r2, [r5, r2]
   85bfe:	3408      	adds	r4, #8
   85c00:	f000 f9e0 	bl	85fc4 <__malloc_unlock>
   85c04:	e65e      	b.n	858c4 <_malloc_r+0x58>
   85c06:	684b      	ldr	r3, [r1, #4]
   85c08:	e6b2      	b.n	85970 <_malloc_r+0x104>
   85c0a:	f109 0901 	add.w	r9, r9, #1
   85c0e:	f019 0f03 	tst.w	r9, #3
   85c12:	f10c 0c08 	add.w	ip, ip, #8
   85c16:	f47f aebd 	bne.w	85994 <_malloc_r+0x128>
   85c1a:	e02c      	b.n	85c76 <_malloc_r+0x40a>
   85c1c:	f104 0308 	add.w	r3, r4, #8
   85c20:	6964      	ldr	r4, [r4, #20]
   85c22:	42a3      	cmp	r3, r4
   85c24:	bf08      	it	eq
   85c26:	3002      	addeq	r0, #2
   85c28:	f43f ae75 	beq.w	85916 <_malloc_r+0xaa>
   85c2c:	e63a      	b.n	858a4 <_malloc_r+0x38>
   85c2e:	461c      	mov	r4, r3
   85c30:	441a      	add	r2, r3
   85c32:	6851      	ldr	r1, [r2, #4]
   85c34:	68db      	ldr	r3, [r3, #12]
   85c36:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85c3a:	f041 0101 	orr.w	r1, r1, #1
   85c3e:	6051      	str	r1, [r2, #4]
   85c40:	4630      	mov	r0, r6
   85c42:	60eb      	str	r3, [r5, #12]
   85c44:	609d      	str	r5, [r3, #8]
   85c46:	f000 f9bd 	bl	85fc4 <__malloc_unlock>
   85c4a:	e63b      	b.n	858c4 <_malloc_r+0x58>
   85c4c:	305b      	adds	r0, #91	; 0x5b
   85c4e:	0041      	lsls	r1, r0, #1
   85c50:	e64c      	b.n	858ec <_malloc_r+0x80>
   85c52:	099a      	lsrs	r2, r3, #6
   85c54:	3238      	adds	r2, #56	; 0x38
   85c56:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85c5a:	e7aa      	b.n	85bb2 <_malloc_r+0x346>
   85c5c:	42bc      	cmp	r4, r7
   85c5e:	4b45      	ldr	r3, [pc, #276]	; (85d74 <_malloc_r+0x508>)
   85c60:	f43f af0d 	beq.w	85a7e <_malloc_r+0x212>
   85c64:	689c      	ldr	r4, [r3, #8]
   85c66:	6862      	ldr	r2, [r4, #4]
   85c68:	f022 0203 	bic.w	r2, r2, #3
   85c6c:	e767      	b.n	85b3e <_malloc_r+0x2d2>
   85c6e:	f8d8 8000 	ldr.w	r8, [r8]
   85c72:	4598      	cmp	r8, r3
   85c74:	d17c      	bne.n	85d70 <_malloc_r+0x504>
   85c76:	f010 0f03 	tst.w	r0, #3
   85c7a:	f1a8 0308 	sub.w	r3, r8, #8
   85c7e:	f100 30ff 	add.w	r0, r0, #4294967295
   85c82:	d1f4      	bne.n	85c6e <_malloc_r+0x402>
   85c84:	687b      	ldr	r3, [r7, #4]
   85c86:	ea23 0304 	bic.w	r3, r3, r4
   85c8a:	607b      	str	r3, [r7, #4]
   85c8c:	0064      	lsls	r4, r4, #1
   85c8e:	429c      	cmp	r4, r3
   85c90:	f63f aec9 	bhi.w	85a26 <_malloc_r+0x1ba>
   85c94:	2c00      	cmp	r4, #0
   85c96:	f43f aec6 	beq.w	85a26 <_malloc_r+0x1ba>
   85c9a:	4223      	tst	r3, r4
   85c9c:	4648      	mov	r0, r9
   85c9e:	f47f ae75 	bne.w	8598c <_malloc_r+0x120>
   85ca2:	0064      	lsls	r4, r4, #1
   85ca4:	4223      	tst	r3, r4
   85ca6:	f100 0004 	add.w	r0, r0, #4
   85caa:	d0fa      	beq.n	85ca2 <_malloc_r+0x436>
   85cac:	e66e      	b.n	8598c <_malloc_r+0x120>
   85cae:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85cb2:	d818      	bhi.n	85ce6 <_malloc_r+0x47a>
   85cb4:	0be8      	lsrs	r0, r5, #15
   85cb6:	3077      	adds	r0, #119	; 0x77
   85cb8:	0041      	lsls	r1, r0, #1
   85cba:	e617      	b.n	858ec <_malloc_r+0x80>
   85cbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85cc0:	e6fa      	b.n	85ab8 <_malloc_r+0x24c>
   85cc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85cc6:	1092      	asrs	r2, r2, #2
   85cc8:	f04f 0c01 	mov.w	ip, #1
   85ccc:	fa0c f202 	lsl.w	r2, ip, r2
   85cd0:	4313      	orrs	r3, r2
   85cd2:	f8c8 3004 	str.w	r3, [r8, #4]
   85cd6:	460a      	mov	r2, r1
   85cd8:	e77d      	b.n	85bd6 <_malloc_r+0x36a>
   85cda:	2301      	movs	r3, #1
   85cdc:	f8c9 3004 	str.w	r3, [r9, #4]
   85ce0:	464c      	mov	r4, r9
   85ce2:	2200      	movs	r2, #0
   85ce4:	e72b      	b.n	85b3e <_malloc_r+0x2d2>
   85ce6:	f240 5354 	movw	r3, #1364	; 0x554
   85cea:	4298      	cmp	r0, r3
   85cec:	d81c      	bhi.n	85d28 <_malloc_r+0x4bc>
   85cee:	0ca8      	lsrs	r0, r5, #18
   85cf0:	307c      	adds	r0, #124	; 0x7c
   85cf2:	0041      	lsls	r1, r0, #1
   85cf4:	e5fa      	b.n	858ec <_malloc_r+0x80>
   85cf6:	3210      	adds	r2, #16
   85cf8:	e6b3      	b.n	85a62 <_malloc_r+0x1f6>
   85cfa:	2a54      	cmp	r2, #84	; 0x54
   85cfc:	d823      	bhi.n	85d46 <_malloc_r+0x4da>
   85cfe:	0b1a      	lsrs	r2, r3, #12
   85d00:	326e      	adds	r2, #110	; 0x6e
   85d02:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85d06:	e754      	b.n	85bb2 <_malloc_r+0x346>
   85d08:	68bc      	ldr	r4, [r7, #8]
   85d0a:	6862      	ldr	r2, [r4, #4]
   85d0c:	f022 0203 	bic.w	r2, r2, #3
   85d10:	e715      	b.n	85b3e <_malloc_r+0x2d2>
   85d12:	f3cb 000b 	ubfx	r0, fp, #0, #12
   85d16:	2800      	cmp	r0, #0
   85d18:	f47f aeb8 	bne.w	85a8c <_malloc_r+0x220>
   85d1c:	4442      	add	r2, r8
   85d1e:	68bb      	ldr	r3, [r7, #8]
   85d20:	f042 0201 	orr.w	r2, r2, #1
   85d24:	605a      	str	r2, [r3, #4]
   85d26:	e6fc      	b.n	85b22 <_malloc_r+0x2b6>
   85d28:	21fc      	movs	r1, #252	; 0xfc
   85d2a:	207e      	movs	r0, #126	; 0x7e
   85d2c:	e5de      	b.n	858ec <_malloc_r+0x80>
   85d2e:	2201      	movs	r2, #1
   85d30:	f04f 0a00 	mov.w	sl, #0
   85d34:	e6d3      	b.n	85ade <_malloc_r+0x272>
   85d36:	f104 0108 	add.w	r1, r4, #8
   85d3a:	4630      	mov	r0, r6
   85d3c:	f7ff fa84 	bl	85248 <_free_r>
   85d40:	f8da 1000 	ldr.w	r1, [sl]
   85d44:	e6ed      	b.n	85b22 <_malloc_r+0x2b6>
   85d46:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85d4a:	d804      	bhi.n	85d56 <_malloc_r+0x4ea>
   85d4c:	0bda      	lsrs	r2, r3, #15
   85d4e:	3277      	adds	r2, #119	; 0x77
   85d50:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85d54:	e72d      	b.n	85bb2 <_malloc_r+0x346>
   85d56:	f240 5154 	movw	r1, #1364	; 0x554
   85d5a:	428a      	cmp	r2, r1
   85d5c:	d804      	bhi.n	85d68 <_malloc_r+0x4fc>
   85d5e:	0c9a      	lsrs	r2, r3, #18
   85d60:	327c      	adds	r2, #124	; 0x7c
   85d62:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85d66:	e724      	b.n	85bb2 <_malloc_r+0x346>
   85d68:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   85d6c:	227e      	movs	r2, #126	; 0x7e
   85d6e:	e720      	b.n	85bb2 <_malloc_r+0x346>
   85d70:	687b      	ldr	r3, [r7, #4]
   85d72:	e78b      	b.n	85c8c <_malloc_r+0x420>
   85d74:	20070858 	.word	0x20070858

00085d78 <memchr>:
   85d78:	0783      	lsls	r3, r0, #30
   85d7a:	b470      	push	{r4, r5, r6}
   85d7c:	b2c9      	uxtb	r1, r1
   85d7e:	d040      	beq.n	85e02 <memchr+0x8a>
   85d80:	1e54      	subs	r4, r2, #1
   85d82:	2a00      	cmp	r2, #0
   85d84:	d03f      	beq.n	85e06 <memchr+0x8e>
   85d86:	7803      	ldrb	r3, [r0, #0]
   85d88:	428b      	cmp	r3, r1
   85d8a:	bf18      	it	ne
   85d8c:	1c43      	addne	r3, r0, #1
   85d8e:	d105      	bne.n	85d9c <memchr+0x24>
   85d90:	e01c      	b.n	85dcc <memchr+0x54>
   85d92:	b1ec      	cbz	r4, 85dd0 <memchr+0x58>
   85d94:	7802      	ldrb	r2, [r0, #0]
   85d96:	3c01      	subs	r4, #1
   85d98:	428a      	cmp	r2, r1
   85d9a:	d017      	beq.n	85dcc <memchr+0x54>
   85d9c:	f013 0f03 	tst.w	r3, #3
   85da0:	4618      	mov	r0, r3
   85da2:	f103 0301 	add.w	r3, r3, #1
   85da6:	d1f4      	bne.n	85d92 <memchr+0x1a>
   85da8:	2c03      	cmp	r4, #3
   85daa:	d814      	bhi.n	85dd6 <memchr+0x5e>
   85dac:	b184      	cbz	r4, 85dd0 <memchr+0x58>
   85dae:	7803      	ldrb	r3, [r0, #0]
   85db0:	428b      	cmp	r3, r1
   85db2:	d00b      	beq.n	85dcc <memchr+0x54>
   85db4:	1905      	adds	r5, r0, r4
   85db6:	1c43      	adds	r3, r0, #1
   85db8:	e002      	b.n	85dc0 <memchr+0x48>
   85dba:	7802      	ldrb	r2, [r0, #0]
   85dbc:	428a      	cmp	r2, r1
   85dbe:	d005      	beq.n	85dcc <memchr+0x54>
   85dc0:	42ab      	cmp	r3, r5
   85dc2:	4618      	mov	r0, r3
   85dc4:	f103 0301 	add.w	r3, r3, #1
   85dc8:	d1f7      	bne.n	85dba <memchr+0x42>
   85dca:	2000      	movs	r0, #0
   85dcc:	bc70      	pop	{r4, r5, r6}
   85dce:	4770      	bx	lr
   85dd0:	4620      	mov	r0, r4
   85dd2:	bc70      	pop	{r4, r5, r6}
   85dd4:	4770      	bx	lr
   85dd6:	4602      	mov	r2, r0
   85dd8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   85ddc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85de0:	6813      	ldr	r3, [r2, #0]
   85de2:	4610      	mov	r0, r2
   85de4:	4073      	eors	r3, r6
   85de6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   85dea:	ea25 0303 	bic.w	r3, r5, r3
   85dee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85df2:	f102 0204 	add.w	r2, r2, #4
   85df6:	d1d9      	bne.n	85dac <memchr+0x34>
   85df8:	3c04      	subs	r4, #4
   85dfa:	2c03      	cmp	r4, #3
   85dfc:	4610      	mov	r0, r2
   85dfe:	d8ef      	bhi.n	85de0 <memchr+0x68>
   85e00:	e7d4      	b.n	85dac <memchr+0x34>
   85e02:	4614      	mov	r4, r2
   85e04:	e7d0      	b.n	85da8 <memchr+0x30>
   85e06:	4610      	mov	r0, r2
   85e08:	e7e0      	b.n	85dcc <memchr+0x54>
   85e0a:	bf00      	nop

00085e0c <memcpy>:
   85e0c:	4684      	mov	ip, r0
   85e0e:	ea41 0300 	orr.w	r3, r1, r0
   85e12:	f013 0303 	ands.w	r3, r3, #3
   85e16:	d149      	bne.n	85eac <memcpy+0xa0>
   85e18:	3a40      	subs	r2, #64	; 0x40
   85e1a:	d323      	bcc.n	85e64 <memcpy+0x58>
   85e1c:	680b      	ldr	r3, [r1, #0]
   85e1e:	6003      	str	r3, [r0, #0]
   85e20:	684b      	ldr	r3, [r1, #4]
   85e22:	6043      	str	r3, [r0, #4]
   85e24:	688b      	ldr	r3, [r1, #8]
   85e26:	6083      	str	r3, [r0, #8]
   85e28:	68cb      	ldr	r3, [r1, #12]
   85e2a:	60c3      	str	r3, [r0, #12]
   85e2c:	690b      	ldr	r3, [r1, #16]
   85e2e:	6103      	str	r3, [r0, #16]
   85e30:	694b      	ldr	r3, [r1, #20]
   85e32:	6143      	str	r3, [r0, #20]
   85e34:	698b      	ldr	r3, [r1, #24]
   85e36:	6183      	str	r3, [r0, #24]
   85e38:	69cb      	ldr	r3, [r1, #28]
   85e3a:	61c3      	str	r3, [r0, #28]
   85e3c:	6a0b      	ldr	r3, [r1, #32]
   85e3e:	6203      	str	r3, [r0, #32]
   85e40:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85e42:	6243      	str	r3, [r0, #36]	; 0x24
   85e44:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85e46:	6283      	str	r3, [r0, #40]	; 0x28
   85e48:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85e4a:	62c3      	str	r3, [r0, #44]	; 0x2c
   85e4c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85e4e:	6303      	str	r3, [r0, #48]	; 0x30
   85e50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85e52:	6343      	str	r3, [r0, #52]	; 0x34
   85e54:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85e56:	6383      	str	r3, [r0, #56]	; 0x38
   85e58:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85e5a:	63c3      	str	r3, [r0, #60]	; 0x3c
   85e5c:	3040      	adds	r0, #64	; 0x40
   85e5e:	3140      	adds	r1, #64	; 0x40
   85e60:	3a40      	subs	r2, #64	; 0x40
   85e62:	d2db      	bcs.n	85e1c <memcpy+0x10>
   85e64:	3230      	adds	r2, #48	; 0x30
   85e66:	d30b      	bcc.n	85e80 <memcpy+0x74>
   85e68:	680b      	ldr	r3, [r1, #0]
   85e6a:	6003      	str	r3, [r0, #0]
   85e6c:	684b      	ldr	r3, [r1, #4]
   85e6e:	6043      	str	r3, [r0, #4]
   85e70:	688b      	ldr	r3, [r1, #8]
   85e72:	6083      	str	r3, [r0, #8]
   85e74:	68cb      	ldr	r3, [r1, #12]
   85e76:	60c3      	str	r3, [r0, #12]
   85e78:	3010      	adds	r0, #16
   85e7a:	3110      	adds	r1, #16
   85e7c:	3a10      	subs	r2, #16
   85e7e:	d2f3      	bcs.n	85e68 <memcpy+0x5c>
   85e80:	320c      	adds	r2, #12
   85e82:	d305      	bcc.n	85e90 <memcpy+0x84>
   85e84:	f851 3b04 	ldr.w	r3, [r1], #4
   85e88:	f840 3b04 	str.w	r3, [r0], #4
   85e8c:	3a04      	subs	r2, #4
   85e8e:	d2f9      	bcs.n	85e84 <memcpy+0x78>
   85e90:	3204      	adds	r2, #4
   85e92:	d008      	beq.n	85ea6 <memcpy+0x9a>
   85e94:	07d2      	lsls	r2, r2, #31
   85e96:	bf1c      	itt	ne
   85e98:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85e9c:	f800 3b01 	strbne.w	r3, [r0], #1
   85ea0:	d301      	bcc.n	85ea6 <memcpy+0x9a>
   85ea2:	880b      	ldrh	r3, [r1, #0]
   85ea4:	8003      	strh	r3, [r0, #0]
   85ea6:	4660      	mov	r0, ip
   85ea8:	4770      	bx	lr
   85eaa:	bf00      	nop
   85eac:	2a08      	cmp	r2, #8
   85eae:	d313      	bcc.n	85ed8 <memcpy+0xcc>
   85eb0:	078b      	lsls	r3, r1, #30
   85eb2:	d0b1      	beq.n	85e18 <memcpy+0xc>
   85eb4:	f010 0303 	ands.w	r3, r0, #3
   85eb8:	d0ae      	beq.n	85e18 <memcpy+0xc>
   85eba:	f1c3 0304 	rsb	r3, r3, #4
   85ebe:	1ad2      	subs	r2, r2, r3
   85ec0:	07db      	lsls	r3, r3, #31
   85ec2:	bf1c      	itt	ne
   85ec4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85ec8:	f800 3b01 	strbne.w	r3, [r0], #1
   85ecc:	d3a4      	bcc.n	85e18 <memcpy+0xc>
   85ece:	f831 3b02 	ldrh.w	r3, [r1], #2
   85ed2:	f820 3b02 	strh.w	r3, [r0], #2
   85ed6:	e79f      	b.n	85e18 <memcpy+0xc>
   85ed8:	3a04      	subs	r2, #4
   85eda:	d3d9      	bcc.n	85e90 <memcpy+0x84>
   85edc:	3a01      	subs	r2, #1
   85ede:	f811 3b01 	ldrb.w	r3, [r1], #1
   85ee2:	f800 3b01 	strb.w	r3, [r0], #1
   85ee6:	d2f9      	bcs.n	85edc <memcpy+0xd0>
   85ee8:	780b      	ldrb	r3, [r1, #0]
   85eea:	7003      	strb	r3, [r0, #0]
   85eec:	784b      	ldrb	r3, [r1, #1]
   85eee:	7043      	strb	r3, [r0, #1]
   85ef0:	788b      	ldrb	r3, [r1, #2]
   85ef2:	7083      	strb	r3, [r0, #2]
   85ef4:	4660      	mov	r0, ip
   85ef6:	4770      	bx	lr

00085ef8 <memmove>:
   85ef8:	4288      	cmp	r0, r1
   85efa:	b5f0      	push	{r4, r5, r6, r7, lr}
   85efc:	d90d      	bls.n	85f1a <memmove+0x22>
   85efe:	188b      	adds	r3, r1, r2
   85f00:	4298      	cmp	r0, r3
   85f02:	d20a      	bcs.n	85f1a <memmove+0x22>
   85f04:	1881      	adds	r1, r0, r2
   85f06:	2a00      	cmp	r2, #0
   85f08:	d054      	beq.n	85fb4 <memmove+0xbc>
   85f0a:	1a9a      	subs	r2, r3, r2
   85f0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85f10:	4293      	cmp	r3, r2
   85f12:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85f16:	d1f9      	bne.n	85f0c <memmove+0x14>
   85f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85f1a:	2a0f      	cmp	r2, #15
   85f1c:	d948      	bls.n	85fb0 <memmove+0xb8>
   85f1e:	ea40 0301 	orr.w	r3, r0, r1
   85f22:	079b      	lsls	r3, r3, #30
   85f24:	d147      	bne.n	85fb6 <memmove+0xbe>
   85f26:	4615      	mov	r5, r2
   85f28:	f100 0410 	add.w	r4, r0, #16
   85f2c:	f101 0310 	add.w	r3, r1, #16
   85f30:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85f34:	3d10      	subs	r5, #16
   85f36:	f844 6c10 	str.w	r6, [r4, #-16]
   85f3a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85f3e:	2d0f      	cmp	r5, #15
   85f40:	f844 6c0c 	str.w	r6, [r4, #-12]
   85f44:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85f48:	f104 0410 	add.w	r4, r4, #16
   85f4c:	f844 6c18 	str.w	r6, [r4, #-24]
   85f50:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85f54:	f103 0310 	add.w	r3, r3, #16
   85f58:	f844 6c14 	str.w	r6, [r4, #-20]
   85f5c:	d8e8      	bhi.n	85f30 <memmove+0x38>
   85f5e:	f1a2 0310 	sub.w	r3, r2, #16
   85f62:	f023 030f 	bic.w	r3, r3, #15
   85f66:	f002 0e0f 	and.w	lr, r2, #15
   85f6a:	3310      	adds	r3, #16
   85f6c:	f1be 0f03 	cmp.w	lr, #3
   85f70:	4419      	add	r1, r3
   85f72:	4403      	add	r3, r0
   85f74:	d921      	bls.n	85fba <memmove+0xc2>
   85f76:	460e      	mov	r6, r1
   85f78:	4674      	mov	r4, lr
   85f7a:	1f1d      	subs	r5, r3, #4
   85f7c:	f856 7b04 	ldr.w	r7, [r6], #4
   85f80:	3c04      	subs	r4, #4
   85f82:	2c03      	cmp	r4, #3
   85f84:	f845 7f04 	str.w	r7, [r5, #4]!
   85f88:	d8f8      	bhi.n	85f7c <memmove+0x84>
   85f8a:	f1ae 0404 	sub.w	r4, lr, #4
   85f8e:	f024 0403 	bic.w	r4, r4, #3
   85f92:	3404      	adds	r4, #4
   85f94:	4423      	add	r3, r4
   85f96:	4421      	add	r1, r4
   85f98:	f002 0203 	and.w	r2, r2, #3
   85f9c:	b152      	cbz	r2, 85fb4 <memmove+0xbc>
   85f9e:	3b01      	subs	r3, #1
   85fa0:	440a      	add	r2, r1
   85fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   85fa6:	4291      	cmp	r1, r2
   85fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
   85fac:	d1f9      	bne.n	85fa2 <memmove+0xaa>
   85fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85fb0:	4603      	mov	r3, r0
   85fb2:	e7f3      	b.n	85f9c <memmove+0xa4>
   85fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85fb6:	4603      	mov	r3, r0
   85fb8:	e7f1      	b.n	85f9e <memmove+0xa6>
   85fba:	4672      	mov	r2, lr
   85fbc:	e7ee      	b.n	85f9c <memmove+0xa4>
   85fbe:	bf00      	nop

00085fc0 <__malloc_lock>:
   85fc0:	4770      	bx	lr
   85fc2:	bf00      	nop

00085fc4 <__malloc_unlock>:
   85fc4:	4770      	bx	lr
   85fc6:	bf00      	nop

00085fc8 <_realloc_r>:
   85fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fcc:	4617      	mov	r7, r2
   85fce:	b083      	sub	sp, #12
   85fd0:	460d      	mov	r5, r1
   85fd2:	2900      	cmp	r1, #0
   85fd4:	f000 80e2 	beq.w	8619c <_realloc_r+0x1d4>
   85fd8:	4681      	mov	r9, r0
   85fda:	f107 040b 	add.w	r4, r7, #11
   85fde:	f7ff ffef 	bl	85fc0 <__malloc_lock>
   85fe2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85fe6:	2c16      	cmp	r4, #22
   85fe8:	f023 0603 	bic.w	r6, r3, #3
   85fec:	f1a5 0808 	sub.w	r8, r5, #8
   85ff0:	d84b      	bhi.n	8608a <_realloc_r+0xc2>
   85ff2:	2210      	movs	r2, #16
   85ff4:	4614      	mov	r4, r2
   85ff6:	42a7      	cmp	r7, r4
   85ff8:	d84c      	bhi.n	86094 <_realloc_r+0xcc>
   85ffa:	4296      	cmp	r6, r2
   85ffc:	da51      	bge.n	860a2 <_realloc_r+0xda>
   85ffe:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 863a4 <_realloc_r+0x3dc>
   86002:	eb08 0106 	add.w	r1, r8, r6
   86006:	f8db 0008 	ldr.w	r0, [fp, #8]
   8600a:	4288      	cmp	r0, r1
   8600c:	f000 80d3 	beq.w	861b6 <_realloc_r+0x1ee>
   86010:	6848      	ldr	r0, [r1, #4]
   86012:	f020 0e01 	bic.w	lr, r0, #1
   86016:	448e      	add	lr, r1
   86018:	f8de e004 	ldr.w	lr, [lr, #4]
   8601c:	f01e 0f01 	tst.w	lr, #1
   86020:	d154      	bne.n	860cc <_realloc_r+0x104>
   86022:	f020 0003 	bic.w	r0, r0, #3
   86026:	4430      	add	r0, r6
   86028:	4290      	cmp	r0, r2
   8602a:	f280 80bd 	bge.w	861a8 <_realloc_r+0x1e0>
   8602e:	07db      	lsls	r3, r3, #31
   86030:	f100 8090 	bmi.w	86154 <_realloc_r+0x18c>
   86034:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86038:	ebc3 0a08 	rsb	sl, r3, r8
   8603c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86040:	f023 0303 	bic.w	r3, r3, #3
   86044:	eb00 0e03 	add.w	lr, r0, r3
   86048:	4596      	cmp	lr, r2
   8604a:	db49      	blt.n	860e0 <_realloc_r+0x118>
   8604c:	4657      	mov	r7, sl
   8604e:	68cb      	ldr	r3, [r1, #12]
   86050:	6889      	ldr	r1, [r1, #8]
   86052:	1f32      	subs	r2, r6, #4
   86054:	60cb      	str	r3, [r1, #12]
   86056:	6099      	str	r1, [r3, #8]
   86058:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8605c:	f8da 300c 	ldr.w	r3, [sl, #12]
   86060:	2a24      	cmp	r2, #36	; 0x24
   86062:	60cb      	str	r3, [r1, #12]
   86064:	6099      	str	r1, [r3, #8]
   86066:	f200 8133 	bhi.w	862d0 <_realloc_r+0x308>
   8606a:	2a13      	cmp	r2, #19
   8606c:	f240 80fa 	bls.w	86264 <_realloc_r+0x29c>
   86070:	682b      	ldr	r3, [r5, #0]
   86072:	2a1b      	cmp	r2, #27
   86074:	f8ca 3008 	str.w	r3, [sl, #8]
   86078:	686b      	ldr	r3, [r5, #4]
   8607a:	f8ca 300c 	str.w	r3, [sl, #12]
   8607e:	f200 813b 	bhi.w	862f8 <_realloc_r+0x330>
   86082:	3508      	adds	r5, #8
   86084:	f10a 0310 	add.w	r3, sl, #16
   86088:	e0ed      	b.n	86266 <_realloc_r+0x29e>
   8608a:	f024 0407 	bic.w	r4, r4, #7
   8608e:	2c00      	cmp	r4, #0
   86090:	4622      	mov	r2, r4
   86092:	dab0      	bge.n	85ff6 <_realloc_r+0x2e>
   86094:	230c      	movs	r3, #12
   86096:	2000      	movs	r0, #0
   86098:	f8c9 3000 	str.w	r3, [r9]
   8609c:	b003      	add	sp, #12
   8609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860a2:	462f      	mov	r7, r5
   860a4:	1b32      	subs	r2, r6, r4
   860a6:	2a0f      	cmp	r2, #15
   860a8:	f003 0301 	and.w	r3, r3, #1
   860ac:	d840      	bhi.n	86130 <_realloc_r+0x168>
   860ae:	4333      	orrs	r3, r6
   860b0:	f8c8 3004 	str.w	r3, [r8, #4]
   860b4:	4446      	add	r6, r8
   860b6:	6873      	ldr	r3, [r6, #4]
   860b8:	f043 0301 	orr.w	r3, r3, #1
   860bc:	6073      	str	r3, [r6, #4]
   860be:	4648      	mov	r0, r9
   860c0:	f7ff ff80 	bl	85fc4 <__malloc_unlock>
   860c4:	4638      	mov	r0, r7
   860c6:	b003      	add	sp, #12
   860c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860cc:	07d9      	lsls	r1, r3, #31
   860ce:	d441      	bmi.n	86154 <_realloc_r+0x18c>
   860d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   860d4:	ebc3 0a08 	rsb	sl, r3, r8
   860d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   860dc:	f023 0303 	bic.w	r3, r3, #3
   860e0:	4433      	add	r3, r6
   860e2:	4293      	cmp	r3, r2
   860e4:	db36      	blt.n	86154 <_realloc_r+0x18c>
   860e6:	4657      	mov	r7, sl
   860e8:	f8da 100c 	ldr.w	r1, [sl, #12]
   860ec:	f857 0f08 	ldr.w	r0, [r7, #8]!
   860f0:	1f32      	subs	r2, r6, #4
   860f2:	2a24      	cmp	r2, #36	; 0x24
   860f4:	60c1      	str	r1, [r0, #12]
   860f6:	6088      	str	r0, [r1, #8]
   860f8:	f200 80f5 	bhi.w	862e6 <_realloc_r+0x31e>
   860fc:	2a13      	cmp	r2, #19
   860fe:	f240 80f0 	bls.w	862e2 <_realloc_r+0x31a>
   86102:	6829      	ldr	r1, [r5, #0]
   86104:	2a1b      	cmp	r2, #27
   86106:	f8ca 1008 	str.w	r1, [sl, #8]
   8610a:	6869      	ldr	r1, [r5, #4]
   8610c:	f8ca 100c 	str.w	r1, [sl, #12]
   86110:	f200 8107 	bhi.w	86322 <_realloc_r+0x35a>
   86114:	3508      	adds	r5, #8
   86116:	f10a 0210 	add.w	r2, sl, #16
   8611a:	6829      	ldr	r1, [r5, #0]
   8611c:	461e      	mov	r6, r3
   8611e:	6011      	str	r1, [r2, #0]
   86120:	6869      	ldr	r1, [r5, #4]
   86122:	46d0      	mov	r8, sl
   86124:	6051      	str	r1, [r2, #4]
   86126:	68ab      	ldr	r3, [r5, #8]
   86128:	6093      	str	r3, [r2, #8]
   8612a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8612e:	e7b9      	b.n	860a4 <_realloc_r+0xdc>
   86130:	eb08 0104 	add.w	r1, r8, r4
   86134:	4323      	orrs	r3, r4
   86136:	f042 0001 	orr.w	r0, r2, #1
   8613a:	f8c8 3004 	str.w	r3, [r8, #4]
   8613e:	440a      	add	r2, r1
   86140:	6048      	str	r0, [r1, #4]
   86142:	6853      	ldr	r3, [r2, #4]
   86144:	3108      	adds	r1, #8
   86146:	f043 0301 	orr.w	r3, r3, #1
   8614a:	6053      	str	r3, [r2, #4]
   8614c:	4648      	mov	r0, r9
   8614e:	f7ff f87b 	bl	85248 <_free_r>
   86152:	e7b4      	b.n	860be <_realloc_r+0xf6>
   86154:	4639      	mov	r1, r7
   86156:	4648      	mov	r0, r9
   86158:	f7ff fb88 	bl	8586c <_malloc_r>
   8615c:	4607      	mov	r7, r0
   8615e:	2800      	cmp	r0, #0
   86160:	d0ad      	beq.n	860be <_realloc_r+0xf6>
   86162:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86166:	f1a0 0108 	sub.w	r1, r0, #8
   8616a:	f023 0201 	bic.w	r2, r3, #1
   8616e:	4442      	add	r2, r8
   86170:	4291      	cmp	r1, r2
   86172:	f000 80a6 	beq.w	862c2 <_realloc_r+0x2fa>
   86176:	1f32      	subs	r2, r6, #4
   86178:	2a24      	cmp	r2, #36	; 0x24
   8617a:	f200 8093 	bhi.w	862a4 <_realloc_r+0x2dc>
   8617e:	2a13      	cmp	r2, #19
   86180:	d865      	bhi.n	8624e <_realloc_r+0x286>
   86182:	4603      	mov	r3, r0
   86184:	462a      	mov	r2, r5
   86186:	6811      	ldr	r1, [r2, #0]
   86188:	6019      	str	r1, [r3, #0]
   8618a:	6851      	ldr	r1, [r2, #4]
   8618c:	6059      	str	r1, [r3, #4]
   8618e:	6892      	ldr	r2, [r2, #8]
   86190:	609a      	str	r2, [r3, #8]
   86192:	4629      	mov	r1, r5
   86194:	4648      	mov	r0, r9
   86196:	f7ff f857 	bl	85248 <_free_r>
   8619a:	e790      	b.n	860be <_realloc_r+0xf6>
   8619c:	4611      	mov	r1, r2
   8619e:	b003      	add	sp, #12
   861a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   861a4:	f7ff bb62 	b.w	8586c <_malloc_r>
   861a8:	68ca      	ldr	r2, [r1, #12]
   861aa:	6889      	ldr	r1, [r1, #8]
   861ac:	462f      	mov	r7, r5
   861ae:	60ca      	str	r2, [r1, #12]
   861b0:	4606      	mov	r6, r0
   861b2:	6091      	str	r1, [r2, #8]
   861b4:	e776      	b.n	860a4 <_realloc_r+0xdc>
   861b6:	6841      	ldr	r1, [r0, #4]
   861b8:	f104 0010 	add.w	r0, r4, #16
   861bc:	f021 0103 	bic.w	r1, r1, #3
   861c0:	4431      	add	r1, r6
   861c2:	4281      	cmp	r1, r0
   861c4:	da5a      	bge.n	8627c <_realloc_r+0x2b4>
   861c6:	07db      	lsls	r3, r3, #31
   861c8:	d4c4      	bmi.n	86154 <_realloc_r+0x18c>
   861ca:	f855 3c08 	ldr.w	r3, [r5, #-8]
   861ce:	ebc3 0a08 	rsb	sl, r3, r8
   861d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   861d6:	f023 0303 	bic.w	r3, r3, #3
   861da:	eb01 0c03 	add.w	ip, r1, r3
   861de:	4560      	cmp	r0, ip
   861e0:	f73f af7e 	bgt.w	860e0 <_realloc_r+0x118>
   861e4:	4657      	mov	r7, sl
   861e6:	f8da 300c 	ldr.w	r3, [sl, #12]
   861ea:	f857 1f08 	ldr.w	r1, [r7, #8]!
   861ee:	1f32      	subs	r2, r6, #4
   861f0:	2a24      	cmp	r2, #36	; 0x24
   861f2:	60cb      	str	r3, [r1, #12]
   861f4:	6099      	str	r1, [r3, #8]
   861f6:	f200 80b6 	bhi.w	86366 <_realloc_r+0x39e>
   861fa:	2a13      	cmp	r2, #19
   861fc:	f240 80a7 	bls.w	8634e <_realloc_r+0x386>
   86200:	682b      	ldr	r3, [r5, #0]
   86202:	2a1b      	cmp	r2, #27
   86204:	f8ca 3008 	str.w	r3, [sl, #8]
   86208:	686b      	ldr	r3, [r5, #4]
   8620a:	f8ca 300c 	str.w	r3, [sl, #12]
   8620e:	f200 80b3 	bhi.w	86378 <_realloc_r+0x3b0>
   86212:	3508      	adds	r5, #8
   86214:	f10a 0310 	add.w	r3, sl, #16
   86218:	682a      	ldr	r2, [r5, #0]
   8621a:	601a      	str	r2, [r3, #0]
   8621c:	686a      	ldr	r2, [r5, #4]
   8621e:	605a      	str	r2, [r3, #4]
   86220:	68aa      	ldr	r2, [r5, #8]
   86222:	609a      	str	r2, [r3, #8]
   86224:	ebc4 030c 	rsb	r3, r4, ip
   86228:	eb0a 0204 	add.w	r2, sl, r4
   8622c:	f043 0301 	orr.w	r3, r3, #1
   86230:	f8cb 2008 	str.w	r2, [fp, #8]
   86234:	6053      	str	r3, [r2, #4]
   86236:	f8da 3004 	ldr.w	r3, [sl, #4]
   8623a:	4648      	mov	r0, r9
   8623c:	f003 0301 	and.w	r3, r3, #1
   86240:	431c      	orrs	r4, r3
   86242:	f8ca 4004 	str.w	r4, [sl, #4]
   86246:	f7ff febd 	bl	85fc4 <__malloc_unlock>
   8624a:	4638      	mov	r0, r7
   8624c:	e73b      	b.n	860c6 <_realloc_r+0xfe>
   8624e:	682b      	ldr	r3, [r5, #0]
   86250:	2a1b      	cmp	r2, #27
   86252:	6003      	str	r3, [r0, #0]
   86254:	686b      	ldr	r3, [r5, #4]
   86256:	6043      	str	r3, [r0, #4]
   86258:	d828      	bhi.n	862ac <_realloc_r+0x2e4>
   8625a:	f100 0308 	add.w	r3, r0, #8
   8625e:	f105 0208 	add.w	r2, r5, #8
   86262:	e790      	b.n	86186 <_realloc_r+0x1be>
   86264:	463b      	mov	r3, r7
   86266:	682a      	ldr	r2, [r5, #0]
   86268:	4676      	mov	r6, lr
   8626a:	601a      	str	r2, [r3, #0]
   8626c:	686a      	ldr	r2, [r5, #4]
   8626e:	46d0      	mov	r8, sl
   86270:	605a      	str	r2, [r3, #4]
   86272:	68aa      	ldr	r2, [r5, #8]
   86274:	609a      	str	r2, [r3, #8]
   86276:	f8da 3004 	ldr.w	r3, [sl, #4]
   8627a:	e713      	b.n	860a4 <_realloc_r+0xdc>
   8627c:	1b0b      	subs	r3, r1, r4
   8627e:	eb08 0204 	add.w	r2, r8, r4
   86282:	f043 0301 	orr.w	r3, r3, #1
   86286:	f8cb 2008 	str.w	r2, [fp, #8]
   8628a:	6053      	str	r3, [r2, #4]
   8628c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86290:	4648      	mov	r0, r9
   86292:	f003 0301 	and.w	r3, r3, #1
   86296:	431c      	orrs	r4, r3
   86298:	f845 4c04 	str.w	r4, [r5, #-4]
   8629c:	f7ff fe92 	bl	85fc4 <__malloc_unlock>
   862a0:	4628      	mov	r0, r5
   862a2:	e710      	b.n	860c6 <_realloc_r+0xfe>
   862a4:	4629      	mov	r1, r5
   862a6:	f7ff fe27 	bl	85ef8 <memmove>
   862aa:	e772      	b.n	86192 <_realloc_r+0x1ca>
   862ac:	68ab      	ldr	r3, [r5, #8]
   862ae:	2a24      	cmp	r2, #36	; 0x24
   862b0:	6083      	str	r3, [r0, #8]
   862b2:	68eb      	ldr	r3, [r5, #12]
   862b4:	60c3      	str	r3, [r0, #12]
   862b6:	d02b      	beq.n	86310 <_realloc_r+0x348>
   862b8:	f100 0310 	add.w	r3, r0, #16
   862bc:	f105 0210 	add.w	r2, r5, #16
   862c0:	e761      	b.n	86186 <_realloc_r+0x1be>
   862c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   862c6:	462f      	mov	r7, r5
   862c8:	f022 0203 	bic.w	r2, r2, #3
   862cc:	4416      	add	r6, r2
   862ce:	e6e9      	b.n	860a4 <_realloc_r+0xdc>
   862d0:	4629      	mov	r1, r5
   862d2:	4638      	mov	r0, r7
   862d4:	4676      	mov	r6, lr
   862d6:	46d0      	mov	r8, sl
   862d8:	f7ff fe0e 	bl	85ef8 <memmove>
   862dc:	f8da 3004 	ldr.w	r3, [sl, #4]
   862e0:	e6e0      	b.n	860a4 <_realloc_r+0xdc>
   862e2:	463a      	mov	r2, r7
   862e4:	e719      	b.n	8611a <_realloc_r+0x152>
   862e6:	4629      	mov	r1, r5
   862e8:	4638      	mov	r0, r7
   862ea:	461e      	mov	r6, r3
   862ec:	46d0      	mov	r8, sl
   862ee:	f7ff fe03 	bl	85ef8 <memmove>
   862f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   862f6:	e6d5      	b.n	860a4 <_realloc_r+0xdc>
   862f8:	68ab      	ldr	r3, [r5, #8]
   862fa:	2a24      	cmp	r2, #36	; 0x24
   862fc:	f8ca 3010 	str.w	r3, [sl, #16]
   86300:	68eb      	ldr	r3, [r5, #12]
   86302:	f8ca 3014 	str.w	r3, [sl, #20]
   86306:	d018      	beq.n	8633a <_realloc_r+0x372>
   86308:	3510      	adds	r5, #16
   8630a:	f10a 0318 	add.w	r3, sl, #24
   8630e:	e7aa      	b.n	86266 <_realloc_r+0x29e>
   86310:	692a      	ldr	r2, [r5, #16]
   86312:	f100 0318 	add.w	r3, r0, #24
   86316:	6102      	str	r2, [r0, #16]
   86318:	6969      	ldr	r1, [r5, #20]
   8631a:	f105 0218 	add.w	r2, r5, #24
   8631e:	6141      	str	r1, [r0, #20]
   86320:	e731      	b.n	86186 <_realloc_r+0x1be>
   86322:	68a9      	ldr	r1, [r5, #8]
   86324:	2a24      	cmp	r2, #36	; 0x24
   86326:	f8ca 1010 	str.w	r1, [sl, #16]
   8632a:	68e9      	ldr	r1, [r5, #12]
   8632c:	f8ca 1014 	str.w	r1, [sl, #20]
   86330:	d00f      	beq.n	86352 <_realloc_r+0x38a>
   86332:	3510      	adds	r5, #16
   86334:	f10a 0218 	add.w	r2, sl, #24
   86338:	e6ef      	b.n	8611a <_realloc_r+0x152>
   8633a:	692a      	ldr	r2, [r5, #16]
   8633c:	f10a 0320 	add.w	r3, sl, #32
   86340:	f8ca 2018 	str.w	r2, [sl, #24]
   86344:	696a      	ldr	r2, [r5, #20]
   86346:	3518      	adds	r5, #24
   86348:	f8ca 201c 	str.w	r2, [sl, #28]
   8634c:	e78b      	b.n	86266 <_realloc_r+0x29e>
   8634e:	463b      	mov	r3, r7
   86350:	e762      	b.n	86218 <_realloc_r+0x250>
   86352:	6929      	ldr	r1, [r5, #16]
   86354:	f10a 0220 	add.w	r2, sl, #32
   86358:	f8ca 1018 	str.w	r1, [sl, #24]
   8635c:	6969      	ldr	r1, [r5, #20]
   8635e:	3518      	adds	r5, #24
   86360:	f8ca 101c 	str.w	r1, [sl, #28]
   86364:	e6d9      	b.n	8611a <_realloc_r+0x152>
   86366:	4629      	mov	r1, r5
   86368:	4638      	mov	r0, r7
   8636a:	f8cd c004 	str.w	ip, [sp, #4]
   8636e:	f7ff fdc3 	bl	85ef8 <memmove>
   86372:	f8dd c004 	ldr.w	ip, [sp, #4]
   86376:	e755      	b.n	86224 <_realloc_r+0x25c>
   86378:	68ab      	ldr	r3, [r5, #8]
   8637a:	2a24      	cmp	r2, #36	; 0x24
   8637c:	f8ca 3010 	str.w	r3, [sl, #16]
   86380:	68eb      	ldr	r3, [r5, #12]
   86382:	f8ca 3014 	str.w	r3, [sl, #20]
   86386:	d003      	beq.n	86390 <_realloc_r+0x3c8>
   86388:	3510      	adds	r5, #16
   8638a:	f10a 0318 	add.w	r3, sl, #24
   8638e:	e743      	b.n	86218 <_realloc_r+0x250>
   86390:	692a      	ldr	r2, [r5, #16]
   86392:	f10a 0320 	add.w	r3, sl, #32
   86396:	f8ca 2018 	str.w	r2, [sl, #24]
   8639a:	696a      	ldr	r2, [r5, #20]
   8639c:	3518      	adds	r5, #24
   8639e:	f8ca 201c 	str.w	r2, [sl, #28]
   863a2:	e739      	b.n	86218 <_realloc_r+0x250>
   863a4:	20070858 	.word	0x20070858

000863a8 <_sbrk_r>:
   863a8:	b538      	push	{r3, r4, r5, lr}
   863aa:	4c07      	ldr	r4, [pc, #28]	; (863c8 <_sbrk_r+0x20>)
   863ac:	2300      	movs	r3, #0
   863ae:	4605      	mov	r5, r0
   863b0:	4608      	mov	r0, r1
   863b2:	6023      	str	r3, [r4, #0]
   863b4:	f7fd fada 	bl	8396c <_sbrk>
   863b8:	1c43      	adds	r3, r0, #1
   863ba:	d000      	beq.n	863be <_sbrk_r+0x16>
   863bc:	bd38      	pop	{r3, r4, r5, pc}
   863be:	6823      	ldr	r3, [r4, #0]
   863c0:	2b00      	cmp	r3, #0
   863c2:	d0fb      	beq.n	863bc <_sbrk_r+0x14>
   863c4:	602b      	str	r3, [r5, #0]
   863c6:	bd38      	pop	{r3, r4, r5, pc}
   863c8:	20071264 	.word	0x20071264

000863cc <__sread>:
   863cc:	b510      	push	{r4, lr}
   863ce:	460c      	mov	r4, r1
   863d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863d4:	f000 f9bc 	bl	86750 <_read_r>
   863d8:	2800      	cmp	r0, #0
   863da:	db03      	blt.n	863e4 <__sread+0x18>
   863dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   863de:	4403      	add	r3, r0
   863e0:	6523      	str	r3, [r4, #80]	; 0x50
   863e2:	bd10      	pop	{r4, pc}
   863e4:	89a3      	ldrh	r3, [r4, #12]
   863e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   863ea:	81a3      	strh	r3, [r4, #12]
   863ec:	bd10      	pop	{r4, pc}
   863ee:	bf00      	nop

000863f0 <__swrite>:
   863f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   863f4:	460c      	mov	r4, r1
   863f6:	8989      	ldrh	r1, [r1, #12]
   863f8:	461d      	mov	r5, r3
   863fa:	05cb      	lsls	r3, r1, #23
   863fc:	4616      	mov	r6, r2
   863fe:	4607      	mov	r7, r0
   86400:	d506      	bpl.n	86410 <__swrite+0x20>
   86402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86406:	2200      	movs	r2, #0
   86408:	2302      	movs	r3, #2
   8640a:	f000 f98d 	bl	86728 <_lseek_r>
   8640e:	89a1      	ldrh	r1, [r4, #12]
   86410:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86414:	81a1      	strh	r1, [r4, #12]
   86416:	4638      	mov	r0, r7
   86418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8641c:	4632      	mov	r2, r6
   8641e:	462b      	mov	r3, r5
   86420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86424:	f000 b8a0 	b.w	86568 <_write_r>

00086428 <__sseek>:
   86428:	b510      	push	{r4, lr}
   8642a:	460c      	mov	r4, r1
   8642c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86430:	f000 f97a 	bl	86728 <_lseek_r>
   86434:	89a3      	ldrh	r3, [r4, #12]
   86436:	1c42      	adds	r2, r0, #1
   86438:	bf0e      	itee	eq
   8643a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8643e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86442:	6520      	strne	r0, [r4, #80]	; 0x50
   86444:	81a3      	strh	r3, [r4, #12]
   86446:	bd10      	pop	{r4, pc}

00086448 <__sclose>:
   86448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8644c:	f000 b8f2 	b.w	86634 <_close_r>

00086450 <__swbuf_r>:
   86450:	b570      	push	{r4, r5, r6, lr}
   86452:	460d      	mov	r5, r1
   86454:	4614      	mov	r4, r2
   86456:	4606      	mov	r6, r0
   86458:	b110      	cbz	r0, 86460 <__swbuf_r+0x10>
   8645a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8645c:	2b00      	cmp	r3, #0
   8645e:	d048      	beq.n	864f2 <__swbuf_r+0xa2>
   86460:	89a2      	ldrh	r2, [r4, #12]
   86462:	69a3      	ldr	r3, [r4, #24]
   86464:	b291      	uxth	r1, r2
   86466:	0708      	lsls	r0, r1, #28
   86468:	60a3      	str	r3, [r4, #8]
   8646a:	d538      	bpl.n	864de <__swbuf_r+0x8e>
   8646c:	6923      	ldr	r3, [r4, #16]
   8646e:	2b00      	cmp	r3, #0
   86470:	d035      	beq.n	864de <__swbuf_r+0x8e>
   86472:	0489      	lsls	r1, r1, #18
   86474:	b2ed      	uxtb	r5, r5
   86476:	d515      	bpl.n	864a4 <__swbuf_r+0x54>
   86478:	6822      	ldr	r2, [r4, #0]
   8647a:	6961      	ldr	r1, [r4, #20]
   8647c:	1ad3      	subs	r3, r2, r3
   8647e:	428b      	cmp	r3, r1
   86480:	da1c      	bge.n	864bc <__swbuf_r+0x6c>
   86482:	3301      	adds	r3, #1
   86484:	68a1      	ldr	r1, [r4, #8]
   86486:	1c50      	adds	r0, r2, #1
   86488:	3901      	subs	r1, #1
   8648a:	60a1      	str	r1, [r4, #8]
   8648c:	6020      	str	r0, [r4, #0]
   8648e:	7015      	strb	r5, [r2, #0]
   86490:	6962      	ldr	r2, [r4, #20]
   86492:	429a      	cmp	r2, r3
   86494:	d01a      	beq.n	864cc <__swbuf_r+0x7c>
   86496:	89a3      	ldrh	r3, [r4, #12]
   86498:	07db      	lsls	r3, r3, #31
   8649a:	d501      	bpl.n	864a0 <__swbuf_r+0x50>
   8649c:	2d0a      	cmp	r5, #10
   8649e:	d015      	beq.n	864cc <__swbuf_r+0x7c>
   864a0:	4628      	mov	r0, r5
   864a2:	bd70      	pop	{r4, r5, r6, pc}
   864a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   864a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   864aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   864ae:	81a2      	strh	r2, [r4, #12]
   864b0:	6822      	ldr	r2, [r4, #0]
   864b2:	6661      	str	r1, [r4, #100]	; 0x64
   864b4:	6961      	ldr	r1, [r4, #20]
   864b6:	1ad3      	subs	r3, r2, r3
   864b8:	428b      	cmp	r3, r1
   864ba:	dbe2      	blt.n	86482 <__swbuf_r+0x32>
   864bc:	4630      	mov	r0, r6
   864be:	4621      	mov	r1, r4
   864c0:	f7fe fd56 	bl	84f70 <_fflush_r>
   864c4:	b940      	cbnz	r0, 864d8 <__swbuf_r+0x88>
   864c6:	6822      	ldr	r2, [r4, #0]
   864c8:	2301      	movs	r3, #1
   864ca:	e7db      	b.n	86484 <__swbuf_r+0x34>
   864cc:	4630      	mov	r0, r6
   864ce:	4621      	mov	r1, r4
   864d0:	f7fe fd4e 	bl	84f70 <_fflush_r>
   864d4:	2800      	cmp	r0, #0
   864d6:	d0e3      	beq.n	864a0 <__swbuf_r+0x50>
   864d8:	f04f 30ff 	mov.w	r0, #4294967295
   864dc:	bd70      	pop	{r4, r5, r6, pc}
   864de:	4630      	mov	r0, r6
   864e0:	4621      	mov	r1, r4
   864e2:	f7fe fc2f 	bl	84d44 <__swsetup_r>
   864e6:	2800      	cmp	r0, #0
   864e8:	d1f6      	bne.n	864d8 <__swbuf_r+0x88>
   864ea:	89a2      	ldrh	r2, [r4, #12]
   864ec:	6923      	ldr	r3, [r4, #16]
   864ee:	b291      	uxth	r1, r2
   864f0:	e7bf      	b.n	86472 <__swbuf_r+0x22>
   864f2:	f7fe fdd1 	bl	85098 <__sinit>
   864f6:	e7b3      	b.n	86460 <__swbuf_r+0x10>

000864f8 <_wcrtomb_r>:
   864f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   864fc:	4605      	mov	r5, r0
   864fe:	b086      	sub	sp, #24
   86500:	461e      	mov	r6, r3
   86502:	460c      	mov	r4, r1
   86504:	b1a1      	cbz	r1, 86530 <_wcrtomb_r+0x38>
   86506:	4b10      	ldr	r3, [pc, #64]	; (86548 <_wcrtomb_r+0x50>)
   86508:	4617      	mov	r7, r2
   8650a:	f8d3 8000 	ldr.w	r8, [r3]
   8650e:	f7ff f92b 	bl	85768 <__locale_charset>
   86512:	9600      	str	r6, [sp, #0]
   86514:	4603      	mov	r3, r0
   86516:	4621      	mov	r1, r4
   86518:	463a      	mov	r2, r7
   8651a:	4628      	mov	r0, r5
   8651c:	47c0      	blx	r8
   8651e:	1c43      	adds	r3, r0, #1
   86520:	d103      	bne.n	8652a <_wcrtomb_r+0x32>
   86522:	2200      	movs	r2, #0
   86524:	238a      	movs	r3, #138	; 0x8a
   86526:	6032      	str	r2, [r6, #0]
   86528:	602b      	str	r3, [r5, #0]
   8652a:	b006      	add	sp, #24
   8652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86530:	4b05      	ldr	r3, [pc, #20]	; (86548 <_wcrtomb_r+0x50>)
   86532:	681f      	ldr	r7, [r3, #0]
   86534:	f7ff f918 	bl	85768 <__locale_charset>
   86538:	9600      	str	r6, [sp, #0]
   8653a:	4603      	mov	r3, r0
   8653c:	4622      	mov	r2, r4
   8653e:	4628      	mov	r0, r5
   86540:	a903      	add	r1, sp, #12
   86542:	47b8      	blx	r7
   86544:	e7eb      	b.n	8651e <_wcrtomb_r+0x26>
   86546:	bf00      	nop
   86548:	20070c68 	.word	0x20070c68

0008654c <__ascii_wctomb>:
   8654c:	b121      	cbz	r1, 86558 <__ascii_wctomb+0xc>
   8654e:	2aff      	cmp	r2, #255	; 0xff
   86550:	d804      	bhi.n	8655c <__ascii_wctomb+0x10>
   86552:	700a      	strb	r2, [r1, #0]
   86554:	2001      	movs	r0, #1
   86556:	4770      	bx	lr
   86558:	4608      	mov	r0, r1
   8655a:	4770      	bx	lr
   8655c:	238a      	movs	r3, #138	; 0x8a
   8655e:	6003      	str	r3, [r0, #0]
   86560:	f04f 30ff 	mov.w	r0, #4294967295
   86564:	4770      	bx	lr
   86566:	bf00      	nop

00086568 <_write_r>:
   86568:	b570      	push	{r4, r5, r6, lr}
   8656a:	4c08      	ldr	r4, [pc, #32]	; (8658c <_write_r+0x24>)
   8656c:	4606      	mov	r6, r0
   8656e:	2500      	movs	r5, #0
   86570:	4608      	mov	r0, r1
   86572:	4611      	mov	r1, r2
   86574:	461a      	mov	r2, r3
   86576:	6025      	str	r5, [r4, #0]
   86578:	f7fb f85a 	bl	81630 <_write>
   8657c:	1c43      	adds	r3, r0, #1
   8657e:	d000      	beq.n	86582 <_write_r+0x1a>
   86580:	bd70      	pop	{r4, r5, r6, pc}
   86582:	6823      	ldr	r3, [r4, #0]
   86584:	2b00      	cmp	r3, #0
   86586:	d0fb      	beq.n	86580 <_write_r+0x18>
   86588:	6033      	str	r3, [r6, #0]
   8658a:	bd70      	pop	{r4, r5, r6, pc}
   8658c:	20071264 	.word	0x20071264

00086590 <__register_exitproc>:
   86590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86594:	4c25      	ldr	r4, [pc, #148]	; (8662c <__register_exitproc+0x9c>)
   86596:	4606      	mov	r6, r0
   86598:	6825      	ldr	r5, [r4, #0]
   8659a:	4688      	mov	r8, r1
   8659c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   865a0:	4692      	mov	sl, r2
   865a2:	4699      	mov	r9, r3
   865a4:	b3c4      	cbz	r4, 86618 <__register_exitproc+0x88>
   865a6:	6860      	ldr	r0, [r4, #4]
   865a8:	281f      	cmp	r0, #31
   865aa:	dc17      	bgt.n	865dc <__register_exitproc+0x4c>
   865ac:	1c41      	adds	r1, r0, #1
   865ae:	b176      	cbz	r6, 865ce <__register_exitproc+0x3e>
   865b0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   865b4:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   865b8:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   865bc:	2201      	movs	r2, #1
   865be:	4082      	lsls	r2, r0
   865c0:	4315      	orrs	r5, r2
   865c2:	2e02      	cmp	r6, #2
   865c4:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   865c8:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   865cc:	d01e      	beq.n	8660c <__register_exitproc+0x7c>
   865ce:	1c83      	adds	r3, r0, #2
   865d0:	6061      	str	r1, [r4, #4]
   865d2:	2000      	movs	r0, #0
   865d4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   865d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865dc:	4b14      	ldr	r3, [pc, #80]	; (86630 <__register_exitproc+0xa0>)
   865de:	b303      	cbz	r3, 86622 <__register_exitproc+0x92>
   865e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   865e4:	f7ff f93a 	bl	8585c <malloc>
   865e8:	4604      	mov	r4, r0
   865ea:	b1d0      	cbz	r0, 86622 <__register_exitproc+0x92>
   865ec:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   865f0:	2700      	movs	r7, #0
   865f2:	e884 0088 	stmia.w	r4, {r3, r7}
   865f6:	4638      	mov	r0, r7
   865f8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   865fc:	2101      	movs	r1, #1
   865fe:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   86602:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   86606:	2e00      	cmp	r6, #0
   86608:	d0e1      	beq.n	865ce <__register_exitproc+0x3e>
   8660a:	e7d1      	b.n	865b0 <__register_exitproc+0x20>
   8660c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86610:	431a      	orrs	r2, r3
   86612:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   86616:	e7da      	b.n	865ce <__register_exitproc+0x3e>
   86618:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   8661c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86620:	e7c1      	b.n	865a6 <__register_exitproc+0x16>
   86622:	f04f 30ff 	mov.w	r0, #4294967295
   86626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8662a:	bf00      	nop
   8662c:	00086dbc 	.word	0x00086dbc
   86630:	0008585d 	.word	0x0008585d

00086634 <_close_r>:
   86634:	b538      	push	{r3, r4, r5, lr}
   86636:	4c07      	ldr	r4, [pc, #28]	; (86654 <_close_r+0x20>)
   86638:	2300      	movs	r3, #0
   8663a:	4605      	mov	r5, r0
   8663c:	4608      	mov	r0, r1
   8663e:	6023      	str	r3, [r4, #0]
   86640:	f7fd f9b4 	bl	839ac <_close>
   86644:	1c43      	adds	r3, r0, #1
   86646:	d000      	beq.n	8664a <_close_r+0x16>
   86648:	bd38      	pop	{r3, r4, r5, pc}
   8664a:	6823      	ldr	r3, [r4, #0]
   8664c:	2b00      	cmp	r3, #0
   8664e:	d0fb      	beq.n	86648 <_close_r+0x14>
   86650:	602b      	str	r3, [r5, #0]
   86652:	bd38      	pop	{r3, r4, r5, pc}
   86654:	20071264 	.word	0x20071264

00086658 <_fclose_r>:
   86658:	2900      	cmp	r1, #0
   8665a:	d03d      	beq.n	866d8 <_fclose_r+0x80>
   8665c:	b570      	push	{r4, r5, r6, lr}
   8665e:	4605      	mov	r5, r0
   86660:	460c      	mov	r4, r1
   86662:	b108      	cbz	r0, 86668 <_fclose_r+0x10>
   86664:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86666:	b37b      	cbz	r3, 866c8 <_fclose_r+0x70>
   86668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8666c:	b90b      	cbnz	r3, 86672 <_fclose_r+0x1a>
   8666e:	2000      	movs	r0, #0
   86670:	bd70      	pop	{r4, r5, r6, pc}
   86672:	4628      	mov	r0, r5
   86674:	4621      	mov	r1, r4
   86676:	f7fe fbd7 	bl	84e28 <__sflush_r>
   8667a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8667c:	4606      	mov	r6, r0
   8667e:	b133      	cbz	r3, 8668e <_fclose_r+0x36>
   86680:	4628      	mov	r0, r5
   86682:	69e1      	ldr	r1, [r4, #28]
   86684:	4798      	blx	r3
   86686:	2800      	cmp	r0, #0
   86688:	bfb8      	it	lt
   8668a:	f04f 36ff 	movlt.w	r6, #4294967295
   8668e:	89a3      	ldrh	r3, [r4, #12]
   86690:	061b      	lsls	r3, r3, #24
   86692:	d41c      	bmi.n	866ce <_fclose_r+0x76>
   86694:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86696:	b141      	cbz	r1, 866aa <_fclose_r+0x52>
   86698:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8669c:	4299      	cmp	r1, r3
   8669e:	d002      	beq.n	866a6 <_fclose_r+0x4e>
   866a0:	4628      	mov	r0, r5
   866a2:	f7fe fdd1 	bl	85248 <_free_r>
   866a6:	2300      	movs	r3, #0
   866a8:	6323      	str	r3, [r4, #48]	; 0x30
   866aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
   866ac:	b121      	cbz	r1, 866b8 <_fclose_r+0x60>
   866ae:	4628      	mov	r0, r5
   866b0:	f7fe fdca 	bl	85248 <_free_r>
   866b4:	2300      	movs	r3, #0
   866b6:	6463      	str	r3, [r4, #68]	; 0x44
   866b8:	f7fe fcf4 	bl	850a4 <__sfp_lock_acquire>
   866bc:	2300      	movs	r3, #0
   866be:	81a3      	strh	r3, [r4, #12]
   866c0:	f7fe fcf2 	bl	850a8 <__sfp_lock_release>
   866c4:	4630      	mov	r0, r6
   866c6:	bd70      	pop	{r4, r5, r6, pc}
   866c8:	f7fe fce6 	bl	85098 <__sinit>
   866cc:	e7cc      	b.n	86668 <_fclose_r+0x10>
   866ce:	4628      	mov	r0, r5
   866d0:	6921      	ldr	r1, [r4, #16]
   866d2:	f7fe fdb9 	bl	85248 <_free_r>
   866d6:	e7dd      	b.n	86694 <_fclose_r+0x3c>
   866d8:	2000      	movs	r0, #0
   866da:	4770      	bx	lr

000866dc <_fstat_r>:
   866dc:	b538      	push	{r3, r4, r5, lr}
   866de:	4c08      	ldr	r4, [pc, #32]	; (86700 <_fstat_r+0x24>)
   866e0:	2300      	movs	r3, #0
   866e2:	4605      	mov	r5, r0
   866e4:	4608      	mov	r0, r1
   866e6:	4611      	mov	r1, r2
   866e8:	6023      	str	r3, [r4, #0]
   866ea:	f7fd f96b 	bl	839c4 <_fstat>
   866ee:	1c43      	adds	r3, r0, #1
   866f0:	d000      	beq.n	866f4 <_fstat_r+0x18>
   866f2:	bd38      	pop	{r3, r4, r5, pc}
   866f4:	6823      	ldr	r3, [r4, #0]
   866f6:	2b00      	cmp	r3, #0
   866f8:	d0fb      	beq.n	866f2 <_fstat_r+0x16>
   866fa:	602b      	str	r3, [r5, #0]
   866fc:	bd38      	pop	{r3, r4, r5, pc}
   866fe:	bf00      	nop
   86700:	20071264 	.word	0x20071264

00086704 <_isatty_r>:
   86704:	b538      	push	{r3, r4, r5, lr}
   86706:	4c07      	ldr	r4, [pc, #28]	; (86724 <_isatty_r+0x20>)
   86708:	2300      	movs	r3, #0
   8670a:	4605      	mov	r5, r0
   8670c:	4608      	mov	r0, r1
   8670e:	6023      	str	r3, [r4, #0]
   86710:	f7fd f968 	bl	839e4 <_isatty>
   86714:	1c43      	adds	r3, r0, #1
   86716:	d000      	beq.n	8671a <_isatty_r+0x16>
   86718:	bd38      	pop	{r3, r4, r5, pc}
   8671a:	6823      	ldr	r3, [r4, #0]
   8671c:	2b00      	cmp	r3, #0
   8671e:	d0fb      	beq.n	86718 <_isatty_r+0x14>
   86720:	602b      	str	r3, [r5, #0]
   86722:	bd38      	pop	{r3, r4, r5, pc}
   86724:	20071264 	.word	0x20071264

00086728 <_lseek_r>:
   86728:	b570      	push	{r4, r5, r6, lr}
   8672a:	4c08      	ldr	r4, [pc, #32]	; (8674c <_lseek_r+0x24>)
   8672c:	4606      	mov	r6, r0
   8672e:	2500      	movs	r5, #0
   86730:	4608      	mov	r0, r1
   86732:	4611      	mov	r1, r2
   86734:	461a      	mov	r2, r3
   86736:	6025      	str	r5, [r4, #0]
   86738:	f7fd f960 	bl	839fc <_lseek>
   8673c:	1c43      	adds	r3, r0, #1
   8673e:	d000      	beq.n	86742 <_lseek_r+0x1a>
   86740:	bd70      	pop	{r4, r5, r6, pc}
   86742:	6823      	ldr	r3, [r4, #0]
   86744:	2b00      	cmp	r3, #0
   86746:	d0fb      	beq.n	86740 <_lseek_r+0x18>
   86748:	6033      	str	r3, [r6, #0]
   8674a:	bd70      	pop	{r4, r5, r6, pc}
   8674c:	20071264 	.word	0x20071264

00086750 <_read_r>:
   86750:	b570      	push	{r4, r5, r6, lr}
   86752:	4c08      	ldr	r4, [pc, #32]	; (86774 <_read_r+0x24>)
   86754:	4606      	mov	r6, r0
   86756:	2500      	movs	r5, #0
   86758:	4608      	mov	r0, r1
   8675a:	4611      	mov	r1, r2
   8675c:	461a      	mov	r2, r3
   8675e:	6025      	str	r5, [r4, #0]
   86760:	f7fa ff3a 	bl	815d8 <_read>
   86764:	1c43      	adds	r3, r0, #1
   86766:	d000      	beq.n	8676a <_read_r+0x1a>
   86768:	bd70      	pop	{r4, r5, r6, pc}
   8676a:	6823      	ldr	r3, [r4, #0]
   8676c:	2b00      	cmp	r3, #0
   8676e:	d0fb      	beq.n	86768 <_read_r+0x18>
   86770:	6033      	str	r3, [r6, #0]
   86772:	bd70      	pop	{r4, r5, r6, pc}
   86774:	20071264 	.word	0x20071264

00086778 <__aeabi_uldivmod>:
   86778:	b953      	cbnz	r3, 86790 <__aeabi_uldivmod+0x18>
   8677a:	b94a      	cbnz	r2, 86790 <__aeabi_uldivmod+0x18>
   8677c:	2900      	cmp	r1, #0
   8677e:	bf08      	it	eq
   86780:	2800      	cmpeq	r0, #0
   86782:	bf1c      	itt	ne
   86784:	f04f 31ff 	movne.w	r1, #4294967295
   86788:	f04f 30ff 	movne.w	r0, #4294967295
   8678c:	f000 b83c 	b.w	86808 <__aeabi_idiv0>
   86790:	b082      	sub	sp, #8
   86792:	46ec      	mov	ip, sp
   86794:	e92d 5000 	stmdb	sp!, {ip, lr}
   86798:	f000 f81e 	bl	867d8 <__gnu_uldivmod_helper>
   8679c:	f8dd e004 	ldr.w	lr, [sp, #4]
   867a0:	b002      	add	sp, #8
   867a2:	bc0c      	pop	{r2, r3}
   867a4:	4770      	bx	lr
   867a6:	bf00      	nop

000867a8 <__gnu_ldivmod_helper>:
   867a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   867ac:	9c06      	ldr	r4, [sp, #24]
   867ae:	4690      	mov	r8, r2
   867b0:	4606      	mov	r6, r0
   867b2:	460f      	mov	r7, r1
   867b4:	461d      	mov	r5, r3
   867b6:	f000 f829 	bl	8680c <__divdi3>
   867ba:	fb08 fc01 	mul.w	ip, r8, r1
   867be:	fba8 2300 	umull	r2, r3, r8, r0
   867c2:	fb00 c505 	mla	r5, r0, r5, ip
   867c6:	1ab2      	subs	r2, r6, r2
   867c8:	442b      	add	r3, r5
   867ca:	eb67 0303 	sbc.w	r3, r7, r3
   867ce:	4686      	mov	lr, r0
   867d0:	e9c4 2300 	strd	r2, r3, [r4]
   867d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000867d8 <__gnu_uldivmod_helper>:
   867d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   867dc:	9e08      	ldr	r6, [sp, #32]
   867de:	4617      	mov	r7, r2
   867e0:	4680      	mov	r8, r0
   867e2:	4689      	mov	r9, r1
   867e4:	461d      	mov	r5, r3
   867e6:	f000 f967 	bl	86ab8 <__udivdi3>
   867ea:	fb00 f305 	mul.w	r3, r0, r5
   867ee:	fba0 4507 	umull	r4, r5, r0, r7
   867f2:	fb07 3701 	mla	r7, r7, r1, r3
   867f6:	ebb8 0404 	subs.w	r4, r8, r4
   867fa:	443d      	add	r5, r7
   867fc:	eb69 0505 	sbc.w	r5, r9, r5
   86800:	e9c6 4500 	strd	r4, r5, [r6]
   86804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086808 <__aeabi_idiv0>:
   86808:	4770      	bx	lr
   8680a:	bf00      	nop

0008680c <__divdi3>:
   8680c:	2900      	cmp	r1, #0
   8680e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86812:	f2c0 80a8 	blt.w	86966 <__divdi3+0x15a>
   86816:	2600      	movs	r6, #0
   86818:	2b00      	cmp	r3, #0
   8681a:	f2c0 809e 	blt.w	8695a <__divdi3+0x14e>
   8681e:	4681      	mov	r9, r0
   86820:	468e      	mov	lr, r1
   86822:	4690      	mov	r8, r2
   86824:	469c      	mov	ip, r3
   86826:	4617      	mov	r7, r2
   86828:	4604      	mov	r4, r0
   8682a:	460d      	mov	r5, r1
   8682c:	2b00      	cmp	r3, #0
   8682e:	d13d      	bne.n	868ac <__divdi3+0xa0>
   86830:	428a      	cmp	r2, r1
   86832:	d959      	bls.n	868e8 <__divdi3+0xdc>
   86834:	fab2 f382 	clz	r3, r2
   86838:	b13b      	cbz	r3, 8684a <__divdi3+0x3e>
   8683a:	f1c3 0220 	rsb	r2, r3, #32
   8683e:	409d      	lsls	r5, r3
   86840:	fa20 f202 	lsr.w	r2, r0, r2
   86844:	409f      	lsls	r7, r3
   86846:	4315      	orrs	r5, r2
   86848:	409c      	lsls	r4, r3
   8684a:	0c39      	lsrs	r1, r7, #16
   8684c:	fbb5 f0f1 	udiv	r0, r5, r1
   86850:	fa1f fe87 	uxth.w	lr, r7
   86854:	fb01 5510 	mls	r5, r1, r0, r5
   86858:	fb0e f300 	mul.w	r3, lr, r0
   8685c:	0c22      	lsrs	r2, r4, #16
   8685e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   86862:	42ab      	cmp	r3, r5
   86864:	d909      	bls.n	8687a <__divdi3+0x6e>
   86866:	19ed      	adds	r5, r5, r7
   86868:	f100 32ff 	add.w	r2, r0, #4294967295
   8686c:	f080 810b 	bcs.w	86a86 <__divdi3+0x27a>
   86870:	42ab      	cmp	r3, r5
   86872:	f240 8108 	bls.w	86a86 <__divdi3+0x27a>
   86876:	3802      	subs	r0, #2
   86878:	443d      	add	r5, r7
   8687a:	1aed      	subs	r5, r5, r3
   8687c:	fbb5 f3f1 	udiv	r3, r5, r1
   86880:	fb01 5513 	mls	r5, r1, r3, r5
   86884:	fb0e fe03 	mul.w	lr, lr, r3
   86888:	b2a4      	uxth	r4, r4
   8688a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   8688e:	45ae      	cmp	lr, r5
   86890:	d908      	bls.n	868a4 <__divdi3+0x98>
   86892:	19ed      	adds	r5, r5, r7
   86894:	f103 32ff 	add.w	r2, r3, #4294967295
   86898:	f080 80f7 	bcs.w	86a8a <__divdi3+0x27e>
   8689c:	45ae      	cmp	lr, r5
   8689e:	f240 80f4 	bls.w	86a8a <__divdi3+0x27e>
   868a2:	3b02      	subs	r3, #2
   868a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   868a8:	2200      	movs	r2, #0
   868aa:	e003      	b.n	868b4 <__divdi3+0xa8>
   868ac:	428b      	cmp	r3, r1
   868ae:	d90f      	bls.n	868d0 <__divdi3+0xc4>
   868b0:	2200      	movs	r2, #0
   868b2:	4613      	mov	r3, r2
   868b4:	1c34      	adds	r4, r6, #0
   868b6:	bf18      	it	ne
   868b8:	2401      	movne	r4, #1
   868ba:	4260      	negs	r0, r4
   868bc:	f04f 0500 	mov.w	r5, #0
   868c0:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   868c4:	4058      	eors	r0, r3
   868c6:	4051      	eors	r1, r2
   868c8:	1900      	adds	r0, r0, r4
   868ca:	4169      	adcs	r1, r5
   868cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   868d0:	fab3 f283 	clz	r2, r3
   868d4:	2a00      	cmp	r2, #0
   868d6:	f040 8089 	bne.w	869ec <__divdi3+0x1e0>
   868da:	428b      	cmp	r3, r1
   868dc:	d302      	bcc.n	868e4 <__divdi3+0xd8>
   868de:	4580      	cmp	r8, r0
   868e0:	f200 80e2 	bhi.w	86aa8 <__divdi3+0x29c>
   868e4:	2301      	movs	r3, #1
   868e6:	e7e5      	b.n	868b4 <__divdi3+0xa8>
   868e8:	b912      	cbnz	r2, 868f0 <__divdi3+0xe4>
   868ea:	2301      	movs	r3, #1
   868ec:	fbb3 f7f2 	udiv	r7, r3, r2
   868f0:	fab7 f887 	clz	r8, r7
   868f4:	f1b8 0f00 	cmp.w	r8, #0
   868f8:	d13b      	bne.n	86972 <__divdi3+0x166>
   868fa:	1bed      	subs	r5, r5, r7
   868fc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86900:	fa1f fe87 	uxth.w	lr, r7
   86904:	2201      	movs	r2, #1
   86906:	fbb5 f0fc 	udiv	r0, r5, ip
   8690a:	fb0c 5510 	mls	r5, ip, r0, r5
   8690e:	fb0e f300 	mul.w	r3, lr, r0
   86912:	0c21      	lsrs	r1, r4, #16
   86914:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   86918:	42ab      	cmp	r3, r5
   8691a:	d907      	bls.n	8692c <__divdi3+0x120>
   8691c:	19ed      	adds	r5, r5, r7
   8691e:	f100 31ff 	add.w	r1, r0, #4294967295
   86922:	d202      	bcs.n	8692a <__divdi3+0x11e>
   86924:	42ab      	cmp	r3, r5
   86926:	f200 80c3 	bhi.w	86ab0 <__divdi3+0x2a4>
   8692a:	4608      	mov	r0, r1
   8692c:	1aed      	subs	r5, r5, r3
   8692e:	fbb5 f3fc 	udiv	r3, r5, ip
   86932:	fb0c 5513 	mls	r5, ip, r3, r5
   86936:	fb0e fe03 	mul.w	lr, lr, r3
   8693a:	b2a4      	uxth	r4, r4
   8693c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   86940:	45ae      	cmp	lr, r5
   86942:	d907      	bls.n	86954 <__divdi3+0x148>
   86944:	19ed      	adds	r5, r5, r7
   86946:	f103 31ff 	add.w	r1, r3, #4294967295
   8694a:	d202      	bcs.n	86952 <__divdi3+0x146>
   8694c:	45ae      	cmp	lr, r5
   8694e:	f200 80ad 	bhi.w	86aac <__divdi3+0x2a0>
   86952:	460b      	mov	r3, r1
   86954:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   86958:	e7ac      	b.n	868b4 <__divdi3+0xa8>
   8695a:	4252      	negs	r2, r2
   8695c:	ea6f 0606 	mvn.w	r6, r6
   86960:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   86964:	e75b      	b.n	8681e <__divdi3+0x12>
   86966:	4240      	negs	r0, r0
   86968:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8696c:	f04f 36ff 	mov.w	r6, #4294967295
   86970:	e752      	b.n	86818 <__divdi3+0xc>
   86972:	fa07 f708 	lsl.w	r7, r7, r8
   86976:	f1c8 0220 	rsb	r2, r8, #32
   8697a:	fa25 f302 	lsr.w	r3, r5, r2
   8697e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86982:	fbb3 f1fc 	udiv	r1, r3, ip
   86986:	fa1f fe87 	uxth.w	lr, r7
   8698a:	fb0c 3311 	mls	r3, ip, r1, r3
   8698e:	fa24 f202 	lsr.w	r2, r4, r2
   86992:	fa05 f508 	lsl.w	r5, r5, r8
   86996:	fb0e f901 	mul.w	r9, lr, r1
   8699a:	432a      	orrs	r2, r5
   8699c:	0c10      	lsrs	r0, r2, #16
   8699e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   869a2:	4599      	cmp	r9, r3
   869a4:	fa04 f408 	lsl.w	r4, r4, r8
   869a8:	d907      	bls.n	869ba <__divdi3+0x1ae>
   869aa:	19db      	adds	r3, r3, r7
   869ac:	f101 30ff 	add.w	r0, r1, #4294967295
   869b0:	d278      	bcs.n	86aa4 <__divdi3+0x298>
   869b2:	4599      	cmp	r9, r3
   869b4:	d976      	bls.n	86aa4 <__divdi3+0x298>
   869b6:	3902      	subs	r1, #2
   869b8:	443b      	add	r3, r7
   869ba:	ebc9 0303 	rsb	r3, r9, r3
   869be:	fbb3 f0fc 	udiv	r0, r3, ip
   869c2:	fb0c 3310 	mls	r3, ip, r0, r3
   869c6:	fb0e f500 	mul.w	r5, lr, r0
   869ca:	b292      	uxth	r2, r2
   869cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   869d0:	429d      	cmp	r5, r3
   869d2:	d907      	bls.n	869e4 <__divdi3+0x1d8>
   869d4:	19db      	adds	r3, r3, r7
   869d6:	f100 32ff 	add.w	r2, r0, #4294967295
   869da:	d25f      	bcs.n	86a9c <__divdi3+0x290>
   869dc:	429d      	cmp	r5, r3
   869de:	d95d      	bls.n	86a9c <__divdi3+0x290>
   869e0:	3802      	subs	r0, #2
   869e2:	443b      	add	r3, r7
   869e4:	1b5d      	subs	r5, r3, r5
   869e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   869ea:	e78c      	b.n	86906 <__divdi3+0xfa>
   869ec:	f1c2 0320 	rsb	r3, r2, #32
   869f0:	fa28 f103 	lsr.w	r1, r8, r3
   869f4:	fa0c fc02 	lsl.w	ip, ip, r2
   869f8:	ea41 0c0c 	orr.w	ip, r1, ip
   869fc:	ea4f 401c 	mov.w	r0, ip, lsr #16
   86a00:	fa2e f103 	lsr.w	r1, lr, r3
   86a04:	fbb1 f5f0 	udiv	r5, r1, r0
   86a08:	fa1f f78c 	uxth.w	r7, ip
   86a0c:	fb00 1115 	mls	r1, r0, r5, r1
   86a10:	fa29 f303 	lsr.w	r3, r9, r3
   86a14:	fa0e fe02 	lsl.w	lr, lr, r2
   86a18:	fb07 f905 	mul.w	r9, r7, r5
   86a1c:	ea43 0e0e 	orr.w	lr, r3, lr
   86a20:	ea4f 431e 	mov.w	r3, lr, lsr #16
   86a24:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86a28:	4589      	cmp	r9, r1
   86a2a:	fa08 f802 	lsl.w	r8, r8, r2
   86a2e:	d908      	bls.n	86a42 <__divdi3+0x236>
   86a30:	eb11 010c 	adds.w	r1, r1, ip
   86a34:	f105 33ff 	add.w	r3, r5, #4294967295
   86a38:	d232      	bcs.n	86aa0 <__divdi3+0x294>
   86a3a:	4589      	cmp	r9, r1
   86a3c:	d930      	bls.n	86aa0 <__divdi3+0x294>
   86a3e:	3d02      	subs	r5, #2
   86a40:	4461      	add	r1, ip
   86a42:	ebc9 0101 	rsb	r1, r9, r1
   86a46:	fbb1 f3f0 	udiv	r3, r1, r0
   86a4a:	fb00 1113 	mls	r1, r0, r3, r1
   86a4e:	fb07 f703 	mul.w	r7, r7, r3
   86a52:	fa1f fe8e 	uxth.w	lr, lr
   86a56:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   86a5a:	4577      	cmp	r7, lr
   86a5c:	d908      	bls.n	86a70 <__divdi3+0x264>
   86a5e:	eb1e 0e0c 	adds.w	lr, lr, ip
   86a62:	f103 31ff 	add.w	r1, r3, #4294967295
   86a66:	d217      	bcs.n	86a98 <__divdi3+0x28c>
   86a68:	4577      	cmp	r7, lr
   86a6a:	d915      	bls.n	86a98 <__divdi3+0x28c>
   86a6c:	3b02      	subs	r3, #2
   86a6e:	44e6      	add	lr, ip
   86a70:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   86a74:	fba3 8908 	umull	r8, r9, r3, r8
   86a78:	ebc7 0e0e 	rsb	lr, r7, lr
   86a7c:	45ce      	cmp	lr, r9
   86a7e:	d309      	bcc.n	86a94 <__divdi3+0x288>
   86a80:	d005      	beq.n	86a8e <__divdi3+0x282>
   86a82:	2200      	movs	r2, #0
   86a84:	e716      	b.n	868b4 <__divdi3+0xa8>
   86a86:	4610      	mov	r0, r2
   86a88:	e6f7      	b.n	8687a <__divdi3+0x6e>
   86a8a:	4613      	mov	r3, r2
   86a8c:	e70a      	b.n	868a4 <__divdi3+0x98>
   86a8e:	4094      	lsls	r4, r2
   86a90:	4544      	cmp	r4, r8
   86a92:	d2f6      	bcs.n	86a82 <__divdi3+0x276>
   86a94:	3b01      	subs	r3, #1
   86a96:	e7f4      	b.n	86a82 <__divdi3+0x276>
   86a98:	460b      	mov	r3, r1
   86a9a:	e7e9      	b.n	86a70 <__divdi3+0x264>
   86a9c:	4610      	mov	r0, r2
   86a9e:	e7a1      	b.n	869e4 <__divdi3+0x1d8>
   86aa0:	461d      	mov	r5, r3
   86aa2:	e7ce      	b.n	86a42 <__divdi3+0x236>
   86aa4:	4601      	mov	r1, r0
   86aa6:	e788      	b.n	869ba <__divdi3+0x1ae>
   86aa8:	4613      	mov	r3, r2
   86aaa:	e703      	b.n	868b4 <__divdi3+0xa8>
   86aac:	3b02      	subs	r3, #2
   86aae:	e751      	b.n	86954 <__divdi3+0x148>
   86ab0:	3802      	subs	r0, #2
   86ab2:	443d      	add	r5, r7
   86ab4:	e73a      	b.n	8692c <__divdi3+0x120>
   86ab6:	bf00      	nop

00086ab8 <__udivdi3>:
   86ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86abc:	2b00      	cmp	r3, #0
   86abe:	d144      	bne.n	86b4a <__udivdi3+0x92>
   86ac0:	428a      	cmp	r2, r1
   86ac2:	4615      	mov	r5, r2
   86ac4:	4604      	mov	r4, r0
   86ac6:	d94f      	bls.n	86b68 <__udivdi3+0xb0>
   86ac8:	fab2 f782 	clz	r7, r2
   86acc:	460e      	mov	r6, r1
   86ace:	b14f      	cbz	r7, 86ae4 <__udivdi3+0x2c>
   86ad0:	f1c7 0320 	rsb	r3, r7, #32
   86ad4:	40b9      	lsls	r1, r7
   86ad6:	fa20 f603 	lsr.w	r6, r0, r3
   86ada:	fa02 f507 	lsl.w	r5, r2, r7
   86ade:	430e      	orrs	r6, r1
   86ae0:	fa00 f407 	lsl.w	r4, r0, r7
   86ae4:	0c2f      	lsrs	r7, r5, #16
   86ae6:	fbb6 f0f7 	udiv	r0, r6, r7
   86aea:	fa1f fe85 	uxth.w	lr, r5
   86aee:	fb07 6210 	mls	r2, r7, r0, r6
   86af2:	fb0e f100 	mul.w	r1, lr, r0
   86af6:	0c26      	lsrs	r6, r4, #16
   86af8:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   86afc:	4299      	cmp	r1, r3
   86afe:	d909      	bls.n	86b14 <__udivdi3+0x5c>
   86b00:	195b      	adds	r3, r3, r5
   86b02:	f100 32ff 	add.w	r2, r0, #4294967295
   86b06:	f080 80ee 	bcs.w	86ce6 <__udivdi3+0x22e>
   86b0a:	4299      	cmp	r1, r3
   86b0c:	f240 80eb 	bls.w	86ce6 <__udivdi3+0x22e>
   86b10:	3802      	subs	r0, #2
   86b12:	442b      	add	r3, r5
   86b14:	1a59      	subs	r1, r3, r1
   86b16:	fbb1 f3f7 	udiv	r3, r1, r7
   86b1a:	fb07 1113 	mls	r1, r7, r3, r1
   86b1e:	fb0e fe03 	mul.w	lr, lr, r3
   86b22:	b2a4      	uxth	r4, r4
   86b24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   86b28:	458e      	cmp	lr, r1
   86b2a:	d908      	bls.n	86b3e <__udivdi3+0x86>
   86b2c:	1949      	adds	r1, r1, r5
   86b2e:	f103 32ff 	add.w	r2, r3, #4294967295
   86b32:	f080 80da 	bcs.w	86cea <__udivdi3+0x232>
   86b36:	458e      	cmp	lr, r1
   86b38:	f240 80d7 	bls.w	86cea <__udivdi3+0x232>
   86b3c:	3b02      	subs	r3, #2
   86b3e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86b42:	2600      	movs	r6, #0
   86b44:	4631      	mov	r1, r6
   86b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86b4a:	428b      	cmp	r3, r1
   86b4c:	d847      	bhi.n	86bde <__udivdi3+0x126>
   86b4e:	fab3 f683 	clz	r6, r3
   86b52:	2e00      	cmp	r6, #0
   86b54:	d148      	bne.n	86be8 <__udivdi3+0x130>
   86b56:	428b      	cmp	r3, r1
   86b58:	d302      	bcc.n	86b60 <__udivdi3+0xa8>
   86b5a:	4282      	cmp	r2, r0
   86b5c:	f200 80cf 	bhi.w	86cfe <__udivdi3+0x246>
   86b60:	2001      	movs	r0, #1
   86b62:	4631      	mov	r1, r6
   86b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86b68:	b912      	cbnz	r2, 86b70 <__udivdi3+0xb8>
   86b6a:	2501      	movs	r5, #1
   86b6c:	fbb5 f5f2 	udiv	r5, r5, r2
   86b70:	fab5 fc85 	clz	ip, r5
   86b74:	f1bc 0f00 	cmp.w	ip, #0
   86b78:	d178      	bne.n	86c6c <__udivdi3+0x1b4>
   86b7a:	1b49      	subs	r1, r1, r5
   86b7c:	0c2f      	lsrs	r7, r5, #16
   86b7e:	fa1f fe85 	uxth.w	lr, r5
   86b82:	2601      	movs	r6, #1
   86b84:	fbb1 f0f7 	udiv	r0, r1, r7
   86b88:	fb07 1110 	mls	r1, r7, r0, r1
   86b8c:	fb0e f200 	mul.w	r2, lr, r0
   86b90:	0c23      	lsrs	r3, r4, #16
   86b92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86b96:	428a      	cmp	r2, r1
   86b98:	d907      	bls.n	86baa <__udivdi3+0xf2>
   86b9a:	1949      	adds	r1, r1, r5
   86b9c:	f100 33ff 	add.w	r3, r0, #4294967295
   86ba0:	d202      	bcs.n	86ba8 <__udivdi3+0xf0>
   86ba2:	428a      	cmp	r2, r1
   86ba4:	f200 80bc 	bhi.w	86d20 <__udivdi3+0x268>
   86ba8:	4618      	mov	r0, r3
   86baa:	1a89      	subs	r1, r1, r2
   86bac:	fbb1 f3f7 	udiv	r3, r1, r7
   86bb0:	fb07 1113 	mls	r1, r7, r3, r1
   86bb4:	fb0e fe03 	mul.w	lr, lr, r3
   86bb8:	b2a4      	uxth	r4, r4
   86bba:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   86bbe:	4596      	cmp	lr, r2
   86bc0:	d908      	bls.n	86bd4 <__udivdi3+0x11c>
   86bc2:	1952      	adds	r2, r2, r5
   86bc4:	f103 31ff 	add.w	r1, r3, #4294967295
   86bc8:	f080 8091 	bcs.w	86cee <__udivdi3+0x236>
   86bcc:	4596      	cmp	lr, r2
   86bce:	f240 808e 	bls.w	86cee <__udivdi3+0x236>
   86bd2:	3b02      	subs	r3, #2
   86bd4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86bd8:	4631      	mov	r1, r6
   86bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86bde:	2600      	movs	r6, #0
   86be0:	4630      	mov	r0, r6
   86be2:	4631      	mov	r1, r6
   86be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86be8:	f1c6 0420 	rsb	r4, r6, #32
   86bec:	fa22 f504 	lsr.w	r5, r2, r4
   86bf0:	40b3      	lsls	r3, r6
   86bf2:	432b      	orrs	r3, r5
   86bf4:	fa21 f704 	lsr.w	r7, r1, r4
   86bf8:	ea4f 4813 	mov.w	r8, r3, lsr #16
   86bfc:	fbb7 fcf8 	udiv	ip, r7, r8
   86c00:	fa1f f983 	uxth.w	r9, r3
   86c04:	fb08 771c 	mls	r7, r8, ip, r7
   86c08:	fa20 fe04 	lsr.w	lr, r0, r4
   86c0c:	fa01 f506 	lsl.w	r5, r1, r6
   86c10:	fb09 f40c 	mul.w	r4, r9, ip
   86c14:	ea4e 0505 	orr.w	r5, lr, r5
   86c18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   86c1c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   86c20:	42bc      	cmp	r4, r7
   86c22:	fa02 f206 	lsl.w	r2, r2, r6
   86c26:	d904      	bls.n	86c32 <__udivdi3+0x17a>
   86c28:	18ff      	adds	r7, r7, r3
   86c2a:	f10c 31ff 	add.w	r1, ip, #4294967295
   86c2e:	d368      	bcc.n	86d02 <__udivdi3+0x24a>
   86c30:	468c      	mov	ip, r1
   86c32:	1b3f      	subs	r7, r7, r4
   86c34:	fbb7 f4f8 	udiv	r4, r7, r8
   86c38:	fb08 7714 	mls	r7, r8, r4, r7
   86c3c:	fb09 f904 	mul.w	r9, r9, r4
   86c40:	b2ad      	uxth	r5, r5
   86c42:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   86c46:	4589      	cmp	r9, r1
   86c48:	d904      	bls.n	86c54 <__udivdi3+0x19c>
   86c4a:	18c9      	adds	r1, r1, r3
   86c4c:	f104 35ff 	add.w	r5, r4, #4294967295
   86c50:	d35d      	bcc.n	86d0e <__udivdi3+0x256>
   86c52:	462c      	mov	r4, r5
   86c54:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   86c58:	fba4 2302 	umull	r2, r3, r4, r2
   86c5c:	ebc9 0101 	rsb	r1, r9, r1
   86c60:	4299      	cmp	r1, r3
   86c62:	d349      	bcc.n	86cf8 <__udivdi3+0x240>
   86c64:	d045      	beq.n	86cf2 <__udivdi3+0x23a>
   86c66:	4620      	mov	r0, r4
   86c68:	2600      	movs	r6, #0
   86c6a:	e76b      	b.n	86b44 <__udivdi3+0x8c>
   86c6c:	f1cc 0420 	rsb	r4, ip, #32
   86c70:	fa05 f50c 	lsl.w	r5, r5, ip
   86c74:	fa21 f304 	lsr.w	r3, r1, r4
   86c78:	0c2a      	lsrs	r2, r5, #16
   86c7a:	fbb3 f6f2 	udiv	r6, r3, r2
   86c7e:	fa1f fe85 	uxth.w	lr, r5
   86c82:	fb02 3816 	mls	r8, r2, r6, r3
   86c86:	fa20 f704 	lsr.w	r7, r0, r4
   86c8a:	fa01 f10c 	lsl.w	r1, r1, ip
   86c8e:	fb0e f906 	mul.w	r9, lr, r6
   86c92:	430f      	orrs	r7, r1
   86c94:	0c3c      	lsrs	r4, r7, #16
   86c96:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   86c9a:	4599      	cmp	r9, r3
   86c9c:	fa00 f40c 	lsl.w	r4, r0, ip
   86ca0:	d907      	bls.n	86cb2 <__udivdi3+0x1fa>
   86ca2:	195b      	adds	r3, r3, r5
   86ca4:	f106 31ff 	add.w	r1, r6, #4294967295
   86ca8:	d238      	bcs.n	86d1c <__udivdi3+0x264>
   86caa:	4599      	cmp	r9, r3
   86cac:	d936      	bls.n	86d1c <__udivdi3+0x264>
   86cae:	3e02      	subs	r6, #2
   86cb0:	442b      	add	r3, r5
   86cb2:	ebc9 0303 	rsb	r3, r9, r3
   86cb6:	fbb3 f0f2 	udiv	r0, r3, r2
   86cba:	fb02 3310 	mls	r3, r2, r0, r3
   86cbe:	fb0e f100 	mul.w	r1, lr, r0
   86cc2:	b2bf      	uxth	r7, r7
   86cc4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   86cc8:	4299      	cmp	r1, r3
   86cca:	d907      	bls.n	86cdc <__udivdi3+0x224>
   86ccc:	195b      	adds	r3, r3, r5
   86cce:	f100 37ff 	add.w	r7, r0, #4294967295
   86cd2:	d221      	bcs.n	86d18 <__udivdi3+0x260>
   86cd4:	4299      	cmp	r1, r3
   86cd6:	d91f      	bls.n	86d18 <__udivdi3+0x260>
   86cd8:	3802      	subs	r0, #2
   86cda:	442b      	add	r3, r5
   86cdc:	4617      	mov	r7, r2
   86cde:	1a59      	subs	r1, r3, r1
   86ce0:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   86ce4:	e74e      	b.n	86b84 <__udivdi3+0xcc>
   86ce6:	4610      	mov	r0, r2
   86ce8:	e714      	b.n	86b14 <__udivdi3+0x5c>
   86cea:	4613      	mov	r3, r2
   86cec:	e727      	b.n	86b3e <__udivdi3+0x86>
   86cee:	460b      	mov	r3, r1
   86cf0:	e770      	b.n	86bd4 <__udivdi3+0x11c>
   86cf2:	40b0      	lsls	r0, r6
   86cf4:	4290      	cmp	r0, r2
   86cf6:	d2b6      	bcs.n	86c66 <__udivdi3+0x1ae>
   86cf8:	1e60      	subs	r0, r4, #1
   86cfa:	2600      	movs	r6, #0
   86cfc:	e722      	b.n	86b44 <__udivdi3+0x8c>
   86cfe:	4630      	mov	r0, r6
   86d00:	e720      	b.n	86b44 <__udivdi3+0x8c>
   86d02:	42bc      	cmp	r4, r7
   86d04:	d994      	bls.n	86c30 <__udivdi3+0x178>
   86d06:	f1ac 0c02 	sub.w	ip, ip, #2
   86d0a:	441f      	add	r7, r3
   86d0c:	e791      	b.n	86c32 <__udivdi3+0x17a>
   86d0e:	4589      	cmp	r9, r1
   86d10:	d99f      	bls.n	86c52 <__udivdi3+0x19a>
   86d12:	3c02      	subs	r4, #2
   86d14:	4419      	add	r1, r3
   86d16:	e79d      	b.n	86c54 <__udivdi3+0x19c>
   86d18:	4638      	mov	r0, r7
   86d1a:	e7df      	b.n	86cdc <__udivdi3+0x224>
   86d1c:	460e      	mov	r6, r1
   86d1e:	e7c8      	b.n	86cb2 <__udivdi3+0x1fa>
   86d20:	3802      	subs	r0, #2
   86d22:	4429      	add	r1, r5
   86d24:	e741      	b.n	86baa <__udivdi3+0xf2>
   86d26:	bf00      	nop

00086d28 <can_bit_time>:
   86d28:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   86d38:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   86d48:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   86d58:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86d68:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86d78:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86d88:	0718 0808 4304 0819 0808 4404               .....C.....D

00086d94 <uart_serial_options>:
   86d94:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86da4:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86db4:	0000 0000 0043 0000                         ....C...

00086dbc <_global_impure_ptr>:
   86dbc:	0408 2007                                   ... 

00086dc0 <zeroes.6869>:
   86dc0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86dd0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   86de0:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   86df0:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00086e00 <blanks.6868>:
   86e00:	2020 2020 2020 2020 2020 2020 2020 2020                     

00086e10 <_init>:
   86e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e12:	bf00      	nop
   86e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e16:	bc08      	pop	{r3}
   86e18:	469e      	mov	lr, r3
   86e1a:	4770      	bx	lr

00086e1c <__init_array_start>:
   86e1c:	00084e09 	.word	0x00084e09

00086e20 <__frame_dummy_init_array_entry>:
   86e20:	00080119                                ....

00086e24 <_fini>:
   86e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e26:	bf00      	nop
   86e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e2a:	bc08      	pop	{r3}
   86e2c:	469e      	mov	lr, r3
   86e2e:	4770      	bx	lr

00086e30 <__fini_array_start>:
   86e30:	000800f5 	.word	0x000800f5
