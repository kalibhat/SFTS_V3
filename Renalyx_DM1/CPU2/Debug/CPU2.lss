
CPU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076ec  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000876ec  000876ec  000176ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000914  20070000  000876f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005d0  20070914  00088008  00020914  2**2
                  ALLOC
  4 .stack        00002004  20070ee4  000885d8  00020914  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000195cc  00000000  00000000  00020996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003939  00000000  00000000  00039f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000082be  00000000  00000000  0003d89b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f30  00000000  00000000  00045b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d80  00000000  00000000  00046a89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d7cd  00000000  00000000  00047809  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b856  00000000  00000000  00064fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063b4e  00000000  00000000  0008082c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004900  00000000  00000000  000e437c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ee8 	.word	0x20072ee8
   80004:	00083f4d 	.word	0x00083f4d
   80008:	00083f45 	.word	0x00083f45
   8000c:	00083f45 	.word	0x00083f45
   80010:	00083f45 	.word	0x00083f45
   80014:	00083f45 	.word	0x00083f45
   80018:	00083f45 	.word	0x00083f45
	...
   8002c:	00083f45 	.word	0x00083f45
   80030:	00083f45 	.word	0x00083f45
   80034:	00000000 	.word	0x00000000
   80038:	00083f45 	.word	0x00083f45
   8003c:	00083f45 	.word	0x00083f45
   80040:	00083f45 	.word	0x00083f45
   80044:	00083f45 	.word	0x00083f45
   80048:	00083f45 	.word	0x00083f45
   8004c:	00083f45 	.word	0x00083f45
   80050:	00083f45 	.word	0x00083f45
   80054:	00083f45 	.word	0x00083f45
   80058:	00083f45 	.word	0x00083f45
   8005c:	00083f45 	.word	0x00083f45
   80060:	00083f45 	.word	0x00083f45
   80064:	00083f45 	.word	0x00083f45
   80068:	00000000 	.word	0x00000000
   8006c:	00083bc9 	.word	0x00083bc9
   80070:	00083be1 	.word	0x00083be1
   80074:	00083bf9 	.word	0x00083bf9
   80078:	00083c11 	.word	0x00083c11
	...
   80084:	00083f45 	.word	0x00083f45
   80088:	00083f45 	.word	0x00083f45
   8008c:	00083f45 	.word	0x00083f45
   80090:	00083f45 	.word	0x00083f45
   80094:	00083f45 	.word	0x00083f45
   80098:	00083f45 	.word	0x00083f45
   8009c:	00083f45 	.word	0x00083f45
   800a0:	00083f45 	.word	0x00083f45
   800a4:	00000000 	.word	0x00000000
   800a8:	00083f45 	.word	0x00083f45
   800ac:	0008152d 	.word	0x0008152d
   800b0:	000815a9 	.word	0x000815a9
   800b4:	00081679 	.word	0x00081679
   800b8:	00083f45 	.word	0x00083f45
   800bc:	00083f45 	.word	0x00083f45
   800c0:	00083f45 	.word	0x00083f45
   800c4:	000816a1 	.word	0x000816a1
   800c8:	00083f45 	.word	0x00083f45
   800cc:	00083f45 	.word	0x00083f45
   800d0:	00083f45 	.word	0x00083f45
   800d4:	00083f45 	.word	0x00083f45
   800d8:	00083f45 	.word	0x00083f45
   800dc:	00083f45 	.word	0x00083f45
   800e0:	00083f45 	.word	0x00083f45
   800e4:	00083f45 	.word	0x00083f45
   800e8:	00083f45 	.word	0x00083f45
   800ec:	000802a1 	.word	0x000802a1
   800f0:	00083f45 	.word	0x00083f45

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070914 	.word	0x20070914
   80110:	00000000 	.word	0x00000000
   80114:	000876f4 	.word	0x000876f4

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070918 	.word	0x20070918
   80144:	000876f4 	.word	0x000876f4
   80148:	000876f4 	.word	0x000876f4
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_enable_peripheral_clock>:
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
   80158:	6878      	ldr	r0, [r7, #4]
   8015a:	4b03      	ldr	r3, [pc, #12]	; (80168 <sysclk_enable_peripheral_clock+0x18>)
   8015c:	4798      	blx	r3
   8015e:	bf00      	nop
   80160:	3708      	adds	r7, #8
   80162:	46bd      	mov	sp, r7
   80164:	bd80      	pop	{r7, pc}
   80166:	bf00      	nop
   80168:	00083e8d 	.word	0x00083e8d

0008016c <spi_enable_clock>:
   8016c:	b580      	push	{r7, lr}
   8016e:	b082      	sub	sp, #8
   80170:	af00      	add	r7, sp, #0
   80172:	6078      	str	r0, [r7, #4]
   80174:	687b      	ldr	r3, [r7, #4]
   80176:	4a05      	ldr	r2, [pc, #20]	; (8018c <spi_enable_clock+0x20>)
   80178:	4293      	cmp	r3, r2
   8017a:	d102      	bne.n	80182 <spi_enable_clock+0x16>
   8017c:	2018      	movs	r0, #24
   8017e:	4b04      	ldr	r3, [pc, #16]	; (80190 <spi_enable_clock+0x24>)
   80180:	4798      	blx	r3
   80182:	bf00      	nop
   80184:	3708      	adds	r7, #8
   80186:	46bd      	mov	sp, r7
   80188:	bd80      	pop	{r7, pc}
   8018a:	bf00      	nop
   8018c:	40008000 	.word	0x40008000
   80190:	00080151 	.word	0x00080151

00080194 <CPU2_D_INIT_CLOCK>:
   80194:	b580      	push	{r7, lr}
   80196:	af00      	add	r7, sp, #0
   80198:	4b07      	ldr	r3, [pc, #28]	; (801b8 <CPU2_D_INIT_CLOCK+0x24>)
   8019a:	4798      	blx	r3
   8019c:	4b07      	ldr	r3, [pc, #28]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   8019e:	4a08      	ldr	r2, [pc, #32]	; (801c0 <CPU2_D_INIT_CLOCK+0x2c>)
   801a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   801a4:	4b05      	ldr	r3, [pc, #20]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   801a6:	4a07      	ldr	r2, [pc, #28]	; (801c4 <CPU2_D_INIT_CLOCK+0x30>)
   801a8:	611a      	str	r2, [r3, #16]
   801aa:	4b04      	ldr	r3, [pc, #16]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   801ac:	f640 023f 	movw	r2, #2111	; 0x83f
   801b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   801b4:	bf00      	nop
   801b6:	bd80      	pop	{r7, pc}
   801b8:	000835d1 	.word	0x000835d1
   801bc:	400e0600 	.word	0x400e0600
   801c0:	504d4300 	.word	0x504d4300
   801c4:	f8407900 	.word	0xf8407900

000801c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   801c8:	b480      	push	{r7}
   801ca:	b083      	sub	sp, #12
   801cc:	af00      	add	r7, sp, #0
   801ce:	4603      	mov	r3, r0
   801d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801d2:	4908      	ldr	r1, [pc, #32]	; (801f4 <NVIC_EnableIRQ+0x2c>)
   801d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   801d8:	095b      	lsrs	r3, r3, #5
   801da:	79fa      	ldrb	r2, [r7, #7]
   801dc:	f002 021f 	and.w	r2, r2, #31
   801e0:	2001      	movs	r0, #1
   801e2:	fa00 f202 	lsl.w	r2, r0, r2
   801e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801ea:	bf00      	nop
   801ec:	370c      	adds	r7, #12
   801ee:	46bd      	mov	sp, r7
   801f0:	bc80      	pop	{r7}
   801f2:	4770      	bx	lr
   801f4:	e000e100 	.word	0xe000e100

000801f8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   801f8:	b480      	push	{r7}
   801fa:	b08b      	sub	sp, #44	; 0x2c
   801fc:	af00      	add	r7, sp, #0
   801fe:	6078      	str	r0, [r7, #4]
   80200:	460b      	mov	r3, r1
   80202:	70fb      	strb	r3, [r7, #3]
   80204:	687b      	ldr	r3, [r7, #4]
   80206:	627b      	str	r3, [r7, #36]	; 0x24
   80208:	78fb      	ldrb	r3, [r7, #3]
   8020a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8020e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80210:	61fb      	str	r3, [r7, #28]
   80212:	69fb      	ldr	r3, [r7, #28]
   80214:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80216:	69bb      	ldr	r3, [r7, #24]
   80218:	095b      	lsrs	r3, r3, #5
   8021a:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8021c:	697b      	ldr	r3, [r7, #20]
   8021e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80222:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80226:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80228:	613b      	str	r3, [r7, #16]

	if (level) {
   8022a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8022e:	2b00      	cmp	r3, #0
   80230:	d009      	beq.n	80246 <ioport_set_pin_level+0x4e>
   80232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80234:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80236:	68fb      	ldr	r3, [r7, #12]
   80238:	f003 031f 	and.w	r3, r3, #31
   8023c:	2201      	movs	r2, #1
   8023e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80240:	693b      	ldr	r3, [r7, #16]
   80242:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   80244:	e008      	b.n	80258 <ioport_set_pin_level+0x60>
   80246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80248:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8024a:	68bb      	ldr	r3, [r7, #8]
   8024c:	f003 031f 	and.w	r3, r3, #31
   80250:	2201      	movs	r2, #1
   80252:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80254:	693b      	ldr	r3, [r7, #16]
   80256:	635a      	str	r2, [r3, #52]	; 0x34
   80258:	bf00      	nop
   8025a:	372c      	adds	r7, #44	; 0x2c
   8025c:	46bd      	mov	sp, r7
   8025e:	bc80      	pop	{r7}
   80260:	4770      	bx	lr
   80262:	bf00      	nop

00080264 <sn65hvda540_set_en>:
uint32_t bp_speed;

DD_Sensor_status_type sensor_data;
     
void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   80264:	b480      	push	{r7}
   80266:	b083      	sub	sp, #12
   80268:	af00      	add	r7, sp, #0
   8026a:	6078      	str	r0, [r7, #4]
   8026c:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8026e:	687b      	ldr	r3, [r7, #4]
   80270:	683a      	ldr	r2, [r7, #0]
   80272:	601a      	str	r2, [r3, #0]
}
   80274:	bf00      	nop
   80276:	370c      	adds	r7, #12
   80278:	46bd      	mov	sp, r7
   8027a:	bc80      	pop	{r7}
   8027c:	4770      	bx	lr
   8027e:	bf00      	nop

00080280 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   80280:	b580      	push	{r7, lr}
   80282:	b082      	sub	sp, #8
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   80288:	687b      	ldr	r3, [r7, #4]
   8028a:	681b      	ldr	r3, [r3, #0]
   8028c:	2100      	movs	r1, #0
   8028e:	4618      	mov	r0, r3
   80290:	4b02      	ldr	r3, [pc, #8]	; (8029c <sn65hvda540_normal_mode+0x1c>)
   80292:	4798      	blx	r3
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	000801f9 	.word	0x000801f9

000802a0 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   802a0:	b580      	push	{r7, lr}
   802a2:	b082      	sub	sp, #8
   802a4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   802a6:	4b11      	ldr	r3, [pc, #68]	; (802ec <CAN0_Handler+0x4c>)
   802a8:	691b      	ldr	r3, [r3, #16]
   802aa:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   802ac:	687b      	ldr	r3, [r7, #4]
   802ae:	b2db      	uxtb	r3, r3
   802b0:	2b00      	cmp	r3, #0
   802b2:	d017      	beq.n	802e4 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   802b4:	4b0d      	ldr	r3, [pc, #52]	; (802ec <CAN0_Handler+0x4c>)
   802b6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   802ba:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   802bc:	687b      	ldr	r3, [r7, #4]
   802be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   802c2:	2b00      	cmp	r3, #0
   802c4:	d00e      	beq.n	802e4 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   802c6:	4b0a      	ldr	r3, [pc, #40]	; (802f0 <CAN0_Handler+0x50>)
   802c8:	2201      	movs	r2, #1
   802ca:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   802cc:	4a08      	ldr	r2, [pc, #32]	; (802f0 <CAN0_Handler+0x50>)
   802ce:	687b      	ldr	r3, [r7, #4]
   802d0:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   802d2:	4807      	ldr	r0, [pc, #28]	; (802f0 <CAN0_Handler+0x50>)
   802d4:	4b07      	ldr	r3, [pc, #28]	; (802f4 <CAN0_Handler+0x54>)
   802d6:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   802d8:	4805      	ldr	r0, [pc, #20]	; (802f0 <CAN0_Handler+0x50>)
   802da:	4b07      	ldr	r3, [pc, #28]	; (802f8 <CAN0_Handler+0x58>)
   802dc:	4798      	blx	r3
			g_ul_recv_status = 1;
   802de:	4b07      	ldr	r3, [pc, #28]	; (802fc <CAN0_Handler+0x5c>)
   802e0:	2201      	movs	r2, #1
   802e2:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   802e4:	bf00      	nop
   802e6:	3708      	adds	r7, #8
   802e8:	46bd      	mov	sp, r7
   802ea:	bd80      	pop	{r7, pc}
   802ec:	400b4000 	.word	0x400b4000
   802f0:	20070a48 	.word	0x20070a48
   802f4:	000804c5 	.word	0x000804c5
   802f8:	00080301 	.word	0x00080301
   802fc:	20070944 	.word	0x20070944

00080300 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80300:	b480      	push	{r7}
   80302:	b085      	sub	sp, #20
   80304:	af00      	add	r7, sp, #0
   80306:	6078      	str	r0, [r7, #4]
		 uint32_t ul_reg;
		 uint16_t speed;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	699b      	ldr	r3, [r3, #24]
   8030c:	4a63      	ldr	r2, [pc, #396]	; (8049c <dd_can_extract_mailbox_data+0x19c>)
   8030e:	6013      	str	r3, [r2, #0]
	   if (temp_struct.temp_reg_8[0] == MASTER_CPU_id)
   80310:	4b62      	ldr	r3, [pc, #392]	; (8049c <dd_can_extract_mailbox_data+0x19c>)
   80312:	781b      	ldrb	r3, [r3, #0]
   80314:	2b0a      	cmp	r3, #10
   80316:	f040 80bc 	bne.w	80492 <dd_can_extract_mailbox_data+0x192>
	   {
	  
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   8031a:	4b60      	ldr	r3, [pc, #384]	; (8049c <dd_can_extract_mailbox_data+0x19c>)
   8031c:	785b      	ldrb	r3, [r3, #1]
   8031e:	73fb      	strb	r3, [r7, #15]
	   data_buff[0] = master_command_byte;
   80320:	4a5f      	ldr	r2, [pc, #380]	; (804a0 <dd_can_extract_mailbox_data+0x1a0>)
   80322:	7bfb      	ldrb	r3, [r7, #15]
   80324:	7013      	strb	r3, [r2, #0]
	       //master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	 //  sv_rxrdy_flag = true;
	
	   speed = temp_struct.temp_reg_16[1];				//temp_struct.temp_reg_16[0];
   80326:	4b5d      	ldr	r3, [pc, #372]	; (8049c <dd_can_extract_mailbox_data+0x19c>)
   80328:	885b      	ldrh	r3, [r3, #2]
   8032a:	81bb      	strh	r3, [r7, #12]
			switch (state)
   8032c:	4b5d      	ldr	r3, [pc, #372]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   8032e:	781b      	ldrb	r3, [r3, #0]
   80330:	2b00      	cmp	r3, #0
   80332:	d003      	beq.n	8033c <dd_can_extract_mailbox_data+0x3c>
   80334:	2b01      	cmp	r3, #1
   80336:	f000 8093 	beq.w	80460 <dd_can_extract_mailbox_data+0x160>
// 				twi_enable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_SR_SVACC);
// 				twi_disable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_IDR_RXRDY | TWI_IDR_GACC |
// 				TWI_IDR_NACK | TWI_IDR_EOSACC | TWI_IDR_SCL_WS |TWI_SR_TXRDY);
// 			}
// 		}
}
   8033a:	e0aa      	b.n	80492 <dd_can_extract_mailbox_data+0x192>
				
// 				data[data_count] = twi_read_byte(BOARD_BASE_TWI_SLAVE);
// 				data_buff[data_count] = data[data_count];
// 				
// 				start_c[0] =data_buff[0];
				switch (master_command_byte)
   8033c:	7bfb      	ldrb	r3, [r7, #15]
   8033e:	3b20      	subs	r3, #32
   80340:	2b09      	cmp	r3, #9
   80342:	f200 8089 	bhi.w	80458 <dd_can_extract_mailbox_data+0x158>
   80346:	a201      	add	r2, pc, #4	; (adr r2, 8034c <dd_can_extract_mailbox_data+0x4c>)
   80348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8034c:	00080375 	.word	0x00080375
   80350:	000803ad 	.word	0x000803ad
   80354:	000803c9 	.word	0x000803c9
   80358:	00080401 	.word	0x00080401
   8035c:	00080445 	.word	0x00080445
   80360:	000803d7 	.word	0x000803d7
   80364:	000803e5 	.word	0x000803e5
   80368:	0008042f 	.word	0x0008042f
   8036c:	000803f3 	.word	0x000803f3
   80370:	00080391 	.word	0x00080391
					case BP_START_BLOOD_PUMP:
					//printf("%d\n",var);
					//printf("s\n");
					//flag = 1;
					//count_start++;
					flag_buff++;
   80374:	4b4c      	ldr	r3, [pc, #304]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80376:	781b      	ldrb	r3, [r3, #0]
   80378:	b2db      	uxtb	r3, r3
   8037a:	3301      	adds	r3, #1
   8037c:	b2da      	uxtb	r2, r3
   8037e:	4b4a      	ldr	r3, [pc, #296]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80380:	701a      	strb	r2, [r3, #0]
					bp_start_command = master_command_byte;
   80382:	4a4a      	ldr	r2, [pc, #296]	; (804ac <dd_can_extract_mailbox_data+0x1ac>)
   80384:	7bfb      	ldrb	r3, [r7, #15]
   80386:	7013      	strb	r3, [r2, #0]
					state = HEMO_IDLE;
   80388:	4b46      	ldr	r3, [pc, #280]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   8038a:	2200      	movs	r2, #0
   8038c:	701a      	strb	r2, [r3, #0]
					break;
   8038e:	e066      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BD_CALIBRATION:
					flag_buff++;
   80390:	4b45      	ldr	r3, [pc, #276]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80392:	781b      	ldrb	r3, [r3, #0]
   80394:	b2db      	uxtb	r3, r3
   80396:	3301      	adds	r3, #1
   80398:	b2da      	uxtb	r2, r3
   8039a:	4b43      	ldr	r3, [pc, #268]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   8039c:	701a      	strb	r2, [r3, #0]
					bd_start_calibration = master_command_byte;
   8039e:	4a44      	ldr	r2, [pc, #272]	; (804b0 <dd_can_extract_mailbox_data+0x1b0>)
   803a0:	7bfb      	ldrb	r3, [r7, #15]
   803a2:	7013      	strb	r3, [r2, #0]
					state = HEMO_IDLE;
   803a4:	4b3f      	ldr	r3, [pc, #252]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   803a6:	2200      	movs	r2, #0
   803a8:	701a      	strb	r2, [r3, #0]
					break;
   803aa:	e058      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_STOP_PUMP:
					//printf("%d\n",var);
					//printf("st\n");
					//flag = 1;
					//count_stop++;
					flag_buff++;
   803ac:	4b3e      	ldr	r3, [pc, #248]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   803ae:	781b      	ldrb	r3, [r3, #0]
   803b0:	b2db      	uxtb	r3, r3
   803b2:	3301      	adds	r3, #1
   803b4:	b2da      	uxtb	r2, r3
   803b6:	4b3c      	ldr	r3, [pc, #240]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   803b8:	701a      	strb	r2, [r3, #0]
					bp_stop_command = master_command_byte;
   803ba:	4a3e      	ldr	r2, [pc, #248]	; (804b4 <dd_can_extract_mailbox_data+0x1b4>)
   803bc:	7bfb      	ldrb	r3, [r7, #15]
   803be:	7013      	strb	r3, [r2, #0]
					state =  HEMO_IDLE;
   803c0:	4b38      	ldr	r3, [pc, #224]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   803c2:	2200      	movs	r2, #0
   803c4:	701a      	strb	r2, [r3, #0]
					break;
   803c6:	e04a      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_COMPLETED:
					//flag = 1;
						flag_buff = 1;
   803c8:	4b37      	ldr	r3, [pc, #220]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   803ca:	2201      	movs	r2, #1
   803cc:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803ce:	4b35      	ldr	r3, [pc, #212]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   803d0:	2200      	movs	r2, #0
   803d2:	701a      	strb	r2, [r3, #0]
					break;
   803d4:	e043      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_INC:
					//flag = 1;
						flag_buff = 1;
   803d6:	4b34      	ldr	r3, [pc, #208]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   803d8:	2201      	movs	r2, #1
   803da:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803dc:	4b31      	ldr	r3, [pc, #196]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   803de:	2200      	movs	r2, #0
   803e0:	701a      	strb	r2, [r3, #0]
					break;
   803e2:	e03c      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_DEC:
					//flag = 1;
						flag_buff = 1;
   803e4:	4b30      	ldr	r3, [pc, #192]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   803e6:	2201      	movs	r2, #1
   803e8:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803ea:	4b2e      	ldr	r3, [pc, #184]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   803ec:	2200      	movs	r2, #0
   803ee:	701a      	strb	r2, [r3, #0]
					break;
   803f0:	e035      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_RECOVER:
					//flag = 1;
						flag_buff = 1;
   803f2:	4b2d      	ldr	r3, [pc, #180]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   803f4:	2201      	movs	r2, #1
   803f6:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803f8:	4b2a      	ldr	r3, [pc, #168]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   803fa:	2200      	movs	r2, #0
   803fc:	701a      	strb	r2, [r3, #0]
					break;
   803fe:	e02e      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_SPEED_CHANGE:

					
					if(speed > 0)
   80400:	89bb      	ldrh	r3, [r7, #12]
   80402:	2b00      	cmp	r3, #0
   80404:	d02a      	beq.n	8045c <dd_can_extract_mailbox_data+0x15c>
					{

						bp_speed = speed;						
   80406:	89bb      	ldrh	r3, [r7, #12]
   80408:	4a2b      	ldr	r2, [pc, #172]	; (804b8 <dd_can_extract_mailbox_data+0x1b8>)
   8040a:	6013      	str	r3, [r2, #0]
							flag = 1;
   8040c:	4b2b      	ldr	r3, [pc, #172]	; (804bc <dd_can_extract_mailbox_data+0x1bc>)
   8040e:	2201      	movs	r2, #1
   80410:	701a      	strb	r2, [r3, #0]
							flag_buff++;
   80412:	4b25      	ldr	r3, [pc, #148]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80414:	781b      	ldrb	r3, [r3, #0]
   80416:	b2db      	uxtb	r3, r3
   80418:	3301      	adds	r3, #1
   8041a:	b2da      	uxtb	r2, r3
   8041c:	4b22      	ldr	r3, [pc, #136]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   8041e:	701a      	strb	r2, [r3, #0]
							bp_Speed_change_command = master_command_byte;
   80420:	4a27      	ldr	r2, [pc, #156]	; (804c0 <dd_can_extract_mailbox_data+0x1c0>)
   80422:	7bfb      	ldrb	r3, [r7, #15]
   80424:	7013      	strb	r3, [r2, #0]
							state =  HEMO_IDLE;
   80426:	4b1f      	ldr	r3, [pc, #124]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   80428:	2200      	movs	r2, #0
   8042a:	701a      	strb	r2, [r3, #0]

					}
				
				
					break;
   8042c:	e016      	b.n	8045c <dd_can_extract_mailbox_data+0x15c>
					case BP_APT_VPT_SEND_TO_MASTER:
					//printf("speed\n");
					//state = HEMO_IDLE;
					flag = 0;
   8042e:	4b23      	ldr	r3, [pc, #140]	; (804bc <dd_can_extract_mailbox_data+0x1bc>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]
					flag_buff ++;
   80434:	4b1c      	ldr	r3, [pc, #112]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80436:	781b      	ldrb	r3, [r3, #0]
   80438:	b2db      	uxtb	r3, r3
   8043a:	3301      	adds	r3, #1
   8043c:	b2da      	uxtb	r2, r3
   8043e:	4b1a      	ldr	r3, [pc, #104]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80440:	701a      	strb	r2, [r3, #0]
					break;
   80442:	e00c      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					case BP_DAC_REF:
					state =  HEMO_WAIT;
   80444:	4b17      	ldr	r3, [pc, #92]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   80446:	2201      	movs	r2, #1
   80448:	701a      	strb	r2, [r3, #0]
					flag = 0;
   8044a:	4b1c      	ldr	r3, [pc, #112]	; (804bc <dd_can_extract_mailbox_data+0x1bc>)
   8044c:	2200      	movs	r2, #0
   8044e:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   80450:	4b15      	ldr	r3, [pc, #84]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80452:	2200      	movs	r2, #0
   80454:	701a      	strb	r2, [r3, #0]
					break;
   80456:	e002      	b.n	8045e <dd_can_extract_mailbox_data+0x15e>
					default:
					break;
   80458:	bf00      	nop
   8045a:	e01a      	b.n	80492 <dd_can_extract_mailbox_data+0x192>
							state =  HEMO_IDLE;

					}
				
				
					break;
   8045c:	bf00      	nop
					flag_buff = 0;
					break;
					default:
					break;
				}
				break;
   8045e:	e018      	b.n	80492 <dd_can_extract_mailbox_data+0x192>
				
				case HEMO_WAIT:
				
//				if (data_count <= 2)

				if(speed > 0)
   80460:	89bb      	ldrh	r3, [r7, #12]
   80462:	2b00      	cmp	r3, #0
   80464:	d014      	beq.n	80490 <dd_can_extract_mailbox_data+0x190>
				{
// 					data[data_count] = twi_read_byte(BOARD_BASE_TWI_SLAVE);
// 					data_buff[data_count] = data[data_count];
// 					start_c[data_count]= data_buff[data_count];
//					bp_speed = temp_struct.temp_reg_16[1];
					bp_speed = speed;
   80466:	89bb      	ldrh	r3, [r7, #12]
   80468:	4a13      	ldr	r2, [pc, #76]	; (804b8 <dd_can_extract_mailbox_data+0x1b8>)
   8046a:	6013      	str	r3, [r2, #0]
					state =  HEMO_WAIT;
   8046c:	4b0d      	ldr	r3, [pc, #52]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   8046e:	2201      	movs	r2, #1
   80470:	701a      	strb	r2, [r3, #0]
					flag = 0;
   80472:	4b12      	ldr	r3, [pc, #72]	; (804bc <dd_can_extract_mailbox_data+0x1bc>)
   80474:	2200      	movs	r2, #0
   80476:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   80478:	4b0b      	ldr	r3, [pc, #44]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   8047a:	2200      	movs	r2, #0
   8047c:	701a      	strb	r2, [r3, #0]
					
					
					{
						//printf("%d \t %d \t %d\n",data_buff[0],data_buff[1],data_buff[2]);
						
						flag = 1;
   8047e:	4b0f      	ldr	r3, [pc, #60]	; (804bc <dd_can_extract_mailbox_data+0x1bc>)
   80480:	2201      	movs	r2, #1
   80482:	701a      	strb	r2, [r3, #0]
								flag_buff = 1;
   80484:	4b08      	ldr	r3, [pc, #32]	; (804a8 <dd_can_extract_mailbox_data+0x1a8>)
   80486:	2201      	movs	r2, #1
   80488:	701a      	strb	r2, [r3, #0]
						state =  HEMO_IDLE;
   8048a:	4b06      	ldr	r3, [pc, #24]	; (804a4 <dd_can_extract_mailbox_data+0x1a4>)
   8048c:	2200      	movs	r2, #0
   8048e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
   80490:	bf00      	nop
// 				twi_enable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_SR_SVACC);
// 				twi_disable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_IDR_RXRDY | TWI_IDR_GACC |
// 				TWI_IDR_NACK | TWI_IDR_EOSACC | TWI_IDR_SCL_WS |TWI_SR_TXRDY);
// 			}
// 		}
}
   80492:	bf00      	nop
   80494:	3714      	adds	r7, #20
   80496:	46bd      	mov	sp, r7
   80498:	bc80      	pop	{r7}
   8049a:	4770      	bx	lr
   8049c:	20070a40 	.word	0x20070a40
   804a0:	20070938 	.word	0x20070938
   804a4:	20070930 	.word	0x20070930
   804a8:	20070a68 	.word	0x20070a68
   804ac:	2007093c 	.word	0x2007093c
   804b0:	2007093b 	.word	0x2007093b
   804b4:	2007093d 	.word	0x2007093d
   804b8:	20070a6c 	.word	0x20070a6c
   804bc:	20070a3c 	.word	0x20070a3c
   804c0:	2007093e 	.word	0x2007093e

000804c4 <dd_can_mailbox_read>:
	   
	 
	


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   804c4:	b480      	push	{r7}
   804c6:	b087      	sub	sp, #28
   804c8:	af00      	add	r7, sp, #0
   804ca:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   804cc:	2300      	movs	r3, #0
   804ce:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804d0:	687b      	ldr	r3, [r7, #4]
   804d2:	681b      	ldr	r3, [r3, #0]
   804d4:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   804d6:	687b      	ldr	r3, [r7, #4]
   804d8:	689b      	ldr	r3, [r3, #8]
   804da:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   804dc:	68fb      	ldr	r3, [r7, #12]
   804de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   804e2:	2b00      	cmp	r3, #0
   804e4:	d006      	beq.n	804f4 <dd_can_mailbox_read+0x30>
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804ec:	2b00      	cmp	r3, #0
   804ee:	d001      	beq.n	804f4 <dd_can_mailbox_read+0x30>
   804f0:	2302      	movs	r3, #2
   804f2:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   804f4:	4a26      	ldr	r2, [pc, #152]	; (80590 <dd_can_mailbox_read+0xcc>)
   804f6:	7cfb      	ldrb	r3, [r7, #19]
   804f8:	015b      	lsls	r3, r3, #5
   804fa:	4413      	add	r3, r2
   804fc:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   80500:	681b      	ldr	r3, [r3, #0]
   80502:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80506:	687b      	ldr	r3, [r7, #4]
   80508:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8050a:	68fb      	ldr	r3, [r7, #12]
   8050c:	0c1b      	lsrs	r3, r3, #16
   8050e:	b2db      	uxtb	r3, r3
   80510:	f003 030f 	and.w	r3, r3, #15
   80514:	b2da      	uxtb	r2, r3
   80516:	687b      	ldr	r3, [r7, #4]
   80518:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   8051a:	4a1d      	ldr	r2, [pc, #116]	; (80590 <dd_can_mailbox_read+0xcc>)
   8051c:	7cfb      	ldrb	r3, [r7, #19]
   8051e:	015b      	lsls	r3, r3, #5
   80520:	4413      	add	r3, r2
   80522:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80526:	681a      	ldr	r2, [r3, #0]
   80528:	687b      	ldr	r3, [r7, #4]
   8052a:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   8052c:	4a18      	ldr	r2, [pc, #96]	; (80590 <dd_can_mailbox_read+0xcc>)
   8052e:	7cfb      	ldrb	r3, [r7, #19]
   80530:	015b      	lsls	r3, r3, #5
   80532:	4413      	add	r3, r2
   80534:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80538:	681a      	ldr	r2, [r3, #0]
   8053a:	687b      	ldr	r3, [r7, #4]
   8053c:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8053e:	4a14      	ldr	r2, [pc, #80]	; (80590 <dd_can_mailbox_read+0xcc>)
   80540:	7cfb      	ldrb	r3, [r7, #19]
   80542:	015b      	lsls	r3, r3, #5
   80544:	4413      	add	r3, r2
   80546:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8054a:	681a      	ldr	r2, [r3, #0]
   8054c:	687b      	ldr	r3, [r7, #4]
   8054e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80550:	687b      	ldr	r3, [r7, #4]
   80552:	689b      	ldr	r3, [r3, #8]
   80554:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   80556:	68fb      	ldr	r3, [r7, #12]
   80558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8055c:	2b00      	cmp	r3, #0
   8055e:	d003      	beq.n	80568 <dd_can_mailbox_read+0xa4>
   80560:	697b      	ldr	r3, [r7, #20]
   80562:	f043 0304 	orr.w	r3, r3, #4
   80566:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   80568:	4909      	ldr	r1, [pc, #36]	; (80590 <dd_can_mailbox_read+0xcc>)
   8056a:	7cfb      	ldrb	r3, [r7, #19]
   8056c:	687a      	ldr	r2, [r7, #4]
   8056e:	7992      	ldrb	r2, [r2, #6]
   80570:	0412      	lsls	r2, r2, #16
   80572:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80576:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8057a:	015b      	lsls	r3, r3, #5
   8057c:	440b      	add	r3, r1
   8057e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80582:	601a      	str	r2, [r3, #0]
	return ul_retval;
   80584:	697b      	ldr	r3, [r7, #20]
}
   80586:	4618      	mov	r0, r3
   80588:	371c      	adds	r7, #28
   8058a:	46bd      	mov	sp, r7
   8058c:	bc80      	pop	{r7}
   8058e:	4770      	bx	lr
   80590:	400b4000 	.word	0x400b4000

00080594 <dd_can_mailbox_write>:

		
 uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   80594:	b480      	push	{r7}
   80596:	b085      	sub	sp, #20
   80598:	af00      	add	r7, sp, #0
   8059a:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	681b      	ldr	r3, [r3, #0]
   805a0:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   805a2:	4a2a      	ldr	r2, [pc, #168]	; (8064c <dd_can_mailbox_write+0xb8>)
   805a4:	7bfb      	ldrb	r3, [r7, #15]
   805a6:	015b      	lsls	r3, r3, #5
   805a8:	4413      	add	r3, r2
   805aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
   805ae:	681a      	ldr	r2, [r3, #0]
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   805b4:	687b      	ldr	r3, [r7, #4]
   805b6:	689b      	ldr	r3, [r3, #8]
   805b8:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   805ba:	68bb      	ldr	r3, [r7, #8]
   805bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   805c0:	2b00      	cmp	r3, #0
   805c2:	d101      	bne.n	805c8 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   805c4:	2301      	movs	r3, #1
   805c6:	e03b      	b.n	80640 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	795b      	ldrb	r3, [r3, #5]
   805cc:	2b00      	cmp	r3, #0
   805ce:	d00b      	beq.n	805e8 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   805d0:	491e      	ldr	r1, [pc, #120]	; (8064c <dd_can_mailbox_write+0xb8>)
   805d2:	7bfb      	ldrb	r3, [r7, #15]
   805d4:	687a      	ldr	r2, [r7, #4]
   805d6:	6912      	ldr	r2, [r2, #16]
   805d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   805dc:	015b      	lsls	r3, r3, #5
   805de:	440b      	add	r3, r1
   805e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805e4:	601a      	str	r2, [r3, #0]
   805e6:	e008      	b.n	805fa <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   805e8:	4918      	ldr	r1, [pc, #96]	; (8064c <dd_can_mailbox_write+0xb8>)
   805ea:	7bfb      	ldrb	r3, [r7, #15]
   805ec:	687a      	ldr	r2, [r7, #4]
   805ee:	6912      	ldr	r2, [r2, #16]
   805f0:	015b      	lsls	r3, r3, #5
   805f2:	440b      	add	r3, r1
   805f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805f8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   805fa:	4914      	ldr	r1, [pc, #80]	; (8064c <dd_can_mailbox_write+0xb8>)
   805fc:	7bfb      	ldrb	r3, [r7, #15]
   805fe:	687a      	ldr	r2, [r7, #4]
   80600:	6992      	ldr	r2, [r2, #24]
   80602:	015b      	lsls	r3, r3, #5
   80604:	440b      	add	r3, r1
   80606:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8060a:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	799b      	ldrb	r3, [r3, #6]
   80610:	2b04      	cmp	r3, #4
   80612:	d908      	bls.n	80626 <dd_can_mailbox_write+0x92>
   80614:	490d      	ldr	r1, [pc, #52]	; (8064c <dd_can_mailbox_write+0xb8>)
   80616:	7bfb      	ldrb	r3, [r7, #15]
   80618:	687a      	ldr	r2, [r7, #4]
   8061a:	69d2      	ldr	r2, [r2, #28]
   8061c:	015b      	lsls	r3, r3, #5
   8061e:	440b      	add	r3, r1
   80620:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80624:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80626:	4909      	ldr	r1, [pc, #36]	; (8064c <dd_can_mailbox_write+0xb8>)
   80628:	7bfb      	ldrb	r3, [r7, #15]
   8062a:	687a      	ldr	r2, [r7, #4]
   8062c:	7992      	ldrb	r2, [r2, #6]
   8062e:	0412      	lsls	r2, r2, #16
   80630:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80634:	015b      	lsls	r3, r3, #5
   80636:	440b      	add	r3, r1
   80638:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   8063c:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   8063e:	2300      	movs	r3, #0
}
   80640:	4618      	mov	r0, r3
   80642:	3714      	adds	r7, #20
   80644:	46bd      	mov	sp, r7
   80646:	bc80      	pop	{r7}
   80648:	4770      	bx	lr
   8064a:	bf00      	nop
   8064c:	400b4000 	.word	0x400b4000

00080650 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   80650:	b480      	push	{r7}
   80652:	b085      	sub	sp, #20
   80654:	af00      	add	r7, sp, #0
   80656:	4603      	mov	r3, r0
   80658:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   8065a:	4b07      	ldr	r3, [pc, #28]	; (80678 <dd_can_global_send_transfer_cmd+0x28>)
   8065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8065e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   80662:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   80664:	4904      	ldr	r1, [pc, #16]	; (80678 <dd_can_global_send_transfer_cmd+0x28>)
   80666:	79fa      	ldrb	r2, [r7, #7]
   80668:	68fb      	ldr	r3, [r7, #12]
   8066a:	4313      	orrs	r3, r2
   8066c:	624b      	str	r3, [r1, #36]	; 0x24
}
   8066e:	bf00      	nop
   80670:	3714      	adds	r7, #20
   80672:	46bd      	mov	sp, r7
   80674:	bc80      	pop	{r7}
   80676:	4770      	bx	lr
   80678:	400b4000 	.word	0x400b4000

0008067c <dd_can_mailbox_conf>:



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   8067c:	b480      	push	{r7}
   8067e:	b085      	sub	sp, #20
   80680:	af00      	add	r7, sp, #0
   80682:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80684:	687b      	ldr	r3, [r7, #4]
   80686:	681b      	ldr	r3, [r3, #0]
   80688:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8068a:	687b      	ldr	r3, [r7, #4]
   8068c:	791b      	ldrb	r3, [r3, #4]
   8068e:	2b00      	cmp	r3, #0
   80690:	d12f      	bne.n	806f2 <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   80692:	4a35      	ldr	r2, [pc, #212]	; (80768 <dd_can_mailbox_conf+0xec>)
   80694:	7bfb      	ldrb	r3, [r7, #15]
   80696:	3310      	adds	r3, #16
   80698:	015b      	lsls	r3, r3, #5
   8069a:	4413      	add	r3, r2
   8069c:	2200      	movs	r2, #0
   8069e:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   806a0:	4a31      	ldr	r2, [pc, #196]	; (80768 <dd_can_mailbox_conf+0xec>)
   806a2:	7bfb      	ldrb	r3, [r7, #15]
   806a4:	3310      	adds	r3, #16
   806a6:	015b      	lsls	r3, r3, #5
   806a8:	4413      	add	r3, r2
   806aa:	3304      	adds	r3, #4
   806ac:	2200      	movs	r2, #0
   806ae:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   806b0:	4a2d      	ldr	r2, [pc, #180]	; (80768 <dd_can_mailbox_conf+0xec>)
   806b2:	7bfb      	ldrb	r3, [r7, #15]
   806b4:	015b      	lsls	r3, r3, #5
   806b6:	4413      	add	r3, r2
   806b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   806bc:	2200      	movs	r2, #0
   806be:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   806c0:	4a29      	ldr	r2, [pc, #164]	; (80768 <dd_can_mailbox_conf+0xec>)
   806c2:	7bfb      	ldrb	r3, [r7, #15]
   806c4:	015b      	lsls	r3, r3, #5
   806c6:	4413      	add	r3, r2
   806c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
   806cc:	2200      	movs	r2, #0
   806ce:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   806d0:	4a25      	ldr	r2, [pc, #148]	; (80768 <dd_can_mailbox_conf+0xec>)
   806d2:	7bfb      	ldrb	r3, [r7, #15]
   806d4:	015b      	lsls	r3, r3, #5
   806d6:	4413      	add	r3, r2
   806d8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806dc:	2200      	movs	r2, #0
   806de:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   806e0:	4a21      	ldr	r2, [pc, #132]	; (80768 <dd_can_mailbox_conf+0xec>)
   806e2:	7bfb      	ldrb	r3, [r7, #15]
   806e4:	015b      	lsls	r3, r3, #5
   806e6:	4413      	add	r3, r2
   806e8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   806ec:	2200      	movs	r2, #0
   806ee:	601a      	str	r2, [r3, #0]
		return;
   806f0:	e035      	b.n	8075e <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   806f2:	481d      	ldr	r0, [pc, #116]	; (80768 <dd_can_mailbox_conf+0xec>)
   806f4:	7bfb      	ldrb	r3, [r7, #15]
   806f6:	491c      	ldr	r1, [pc, #112]	; (80768 <dd_can_mailbox_conf+0xec>)
   806f8:	7bfa      	ldrb	r2, [r7, #15]
   806fa:	3210      	adds	r2, #16
   806fc:	0152      	lsls	r2, r2, #5
   806fe:	440a      	add	r2, r1
   80700:	6812      	ldr	r2, [r2, #0]
   80702:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80706:	6879      	ldr	r1, [r7, #4]
   80708:	79c9      	ldrb	r1, [r1, #7]
   8070a:	0409      	lsls	r1, r1, #16
   8070c:	430a      	orrs	r2, r1
   8070e:	3310      	adds	r3, #16
   80710:	015b      	lsls	r3, r3, #5
   80712:	4403      	add	r3, r0
   80714:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80716:	4914      	ldr	r1, [pc, #80]	; (80768 <dd_can_mailbox_conf+0xec>)
   80718:	7bfb      	ldrb	r3, [r7, #15]
   8071a:	687a      	ldr	r2, [r7, #4]
   8071c:	68d2      	ldr	r2, [r2, #12]
   8071e:	3310      	adds	r3, #16
   80720:	015b      	lsls	r3, r3, #5
   80722:	440b      	add	r3, r1
   80724:	3304      	adds	r3, #4
   80726:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80728:	490f      	ldr	r1, [pc, #60]	; (80768 <dd_can_mailbox_conf+0xec>)
   8072a:	7bfb      	ldrb	r3, [r7, #15]
   8072c:	687a      	ldr	r2, [r7, #4]
   8072e:	6912      	ldr	r2, [r2, #16]
   80730:	015b      	lsls	r3, r3, #5
   80732:	440b      	add	r3, r1
   80734:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80738:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   8073a:	480b      	ldr	r0, [pc, #44]	; (80768 <dd_can_mailbox_conf+0xec>)
   8073c:	7bfb      	ldrb	r3, [r7, #15]
   8073e:	490a      	ldr	r1, [pc, #40]	; (80768 <dd_can_mailbox_conf+0xec>)
   80740:	7bfa      	ldrb	r2, [r7, #15]
   80742:	3210      	adds	r2, #16
   80744:	0152      	lsls	r2, r2, #5
   80746:	440a      	add	r2, r1
   80748:	6812      	ldr	r2, [r2, #0]
   8074a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   8074e:	6879      	ldr	r1, [r7, #4]
   80750:	7909      	ldrb	r1, [r1, #4]
   80752:	0609      	lsls	r1, r1, #24
   80754:	430a      	orrs	r2, r1
   80756:	3310      	adds	r3, #16
   80758:	015b      	lsls	r3, r3, #5
   8075a:	4403      	add	r3, r0
   8075c:	601a      	str	r2, [r3, #0]
}
   8075e:	3714      	adds	r7, #20
   80760:	46bd      	mov	sp, r7
   80762:	bc80      	pop	{r7}
   80764:	4770      	bx	lr
   80766:	bf00      	nop
   80768:	400b4000 	.word	0x400b4000

0008076c <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   8076c:	b580      	push	{r7, lr}
   8076e:	b08e      	sub	sp, #56	; 0x38
   80770:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   80772:	4b4f      	ldr	r3, [pc, #316]	; (808b0 <DD_INIT_CAN+0x144>)
   80774:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80776:	2378      	movs	r3, #120	; 0x78
   80778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   8077c:	4b4d      	ldr	r3, [pc, #308]	; (808b4 <DD_INIT_CAN+0x148>)
   8077e:	4a4e      	ldr	r2, [pc, #312]	; (808b8 <DD_INIT_CAN+0x14c>)
   80780:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80784:	4a4b      	ldr	r2, [pc, #300]	; (808b4 <DD_INIT_CAN+0x148>)
   80786:	4b4b      	ldr	r3, [pc, #300]	; (808b4 <DD_INIT_CAN+0x148>)
   80788:	681b      	ldr	r3, [r3, #0]
   8078a:	f023 0301 	bic.w	r3, r3, #1
   8078e:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   80790:	4948      	ldr	r1, [pc, #288]	; (808b4 <DD_INIT_CAN+0x148>)
   80792:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80794:	78db      	ldrb	r3, [r3, #3]
   80796:	3b01      	subs	r3, #1
   80798:	f003 0207 	and.w	r2, r3, #7
   8079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8079e:	789b      	ldrb	r3, [r3, #2]
   807a0:	3b01      	subs	r3, #1
   807a2:	011b      	lsls	r3, r3, #4
   807a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807a8:	431a      	orrs	r2, r3
   807aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807ac:	785b      	ldrb	r3, [r3, #1]
   807ae:	3b01      	subs	r3, #1
   807b0:	021b      	lsls	r3, r3, #8
   807b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807b6:	431a      	orrs	r2, r3
   807b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807ba:	791b      	ldrb	r3, [r3, #4]
   807bc:	3b01      	subs	r3, #1
   807be:	031b      	lsls	r3, r3, #12
   807c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   807c4:	431a      	orrs	r2, r3
   807c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   807ca:	3b01      	subs	r3, #1
   807cc:	041b      	lsls	r3, r3, #16
   807ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   807d2:	4313      	orrs	r3, r2
   807d4:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   807d6:	2300      	movs	r3, #0
   807d8:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807da:	2300      	movs	r3, #0
   807dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807e0:	e00b      	b.n	807fa <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   807e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807e6:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   807e8:	1d3b      	adds	r3, r7, #4
   807ea:	4618      	mov	r0, r3
   807ec:	4b33      	ldr	r3, [pc, #204]	; (808bc <DD_INIT_CAN+0x150>)
   807ee:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807f4:	3301      	adds	r3, #1
   807f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807fe:	2b07      	cmp	r3, #7
   80800:	d9ef      	bls.n	807e2 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   80802:	4a2c      	ldr	r2, [pc, #176]	; (808b4 <DD_INIT_CAN+0x148>)
   80804:	4b2b      	ldr	r3, [pc, #172]	; (808b4 <DD_INIT_CAN+0x148>)
   80806:	681b      	ldr	r3, [r3, #0]
   80808:	f043 0301 	orr.w	r3, r3, #1
   8080c:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8080e:	2300      	movs	r3, #0
   80810:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   80812:	2300      	movs	r3, #0
   80814:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80816:	e005      	b.n	80824 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   80818:	4b26      	ldr	r3, [pc, #152]	; (808b4 <DD_INIT_CAN+0x148>)
   8081a:	691b      	ldr	r3, [r3, #16]
   8081c:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   8081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80820:	3301      	adds	r3, #1
   80822:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   8082a:	2b00      	cmp	r3, #0
   8082c:	d103      	bne.n	80836 <DD_INIT_CAN+0xca>
   8082e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80830:	4a23      	ldr	r2, [pc, #140]	; (808c0 <DD_INIT_CAN+0x154>)
   80832:	4293      	cmp	r3, r2
   80834:	d9f0      	bls.n	80818 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   80836:	4b23      	ldr	r3, [pc, #140]	; (808c4 <DD_INIT_CAN+0x158>)
   80838:	2201      	movs	r2, #1
   8083a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   8083c:	4b21      	ldr	r3, [pc, #132]	; (808c4 <DD_INIT_CAN+0x158>)
   8083e:	2201      	movs	r2, #1
   80840:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   80842:	4b20      	ldr	r3, [pc, #128]	; (808c4 <DD_INIT_CAN+0x158>)
   80844:	2200      	movs	r2, #0
   80846:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80848:	4b1e      	ldr	r3, [pc, #120]	; (808c4 <DD_INIT_CAN+0x158>)
   8084a:	2200      	movs	r2, #0
   8084c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   8084e:	4b1d      	ldr	r3, [pc, #116]	; (808c4 <DD_INIT_CAN+0x158>)
   80850:	4a1d      	ldr	r2, [pc, #116]	; (808c8 <DD_INIT_CAN+0x15c>)
   80852:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(HEMO_CPU_id) ;
   80854:	4b1b      	ldr	r3, [pc, #108]	; (808c4 <DD_INIT_CAN+0x158>)
   80856:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8085a:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   8085c:	4819      	ldr	r0, [pc, #100]	; (808c4 <DD_INIT_CAN+0x158>)
   8085e:	4b17      	ldr	r3, [pc, #92]	; (808bc <DD_INIT_CAN+0x150>)
   80860:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   80862:	202b      	movs	r0, #43	; 0x2b
   80864:	4b19      	ldr	r3, [pc, #100]	; (808cc <DD_INIT_CAN+0x160>)
   80866:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80868:	4b12      	ldr	r3, [pc, #72]	; (808b4 <DD_INIT_CAN+0x148>)
   8086a:	2202      	movs	r2, #2
   8086c:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8086e:	4b15      	ldr	r3, [pc, #84]	; (808c4 <DD_INIT_CAN+0x158>)
   80870:	2200      	movs	r2, #0
   80872:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80874:	4b13      	ldr	r3, [pc, #76]	; (808c4 <DD_INIT_CAN+0x158>)
   80876:	2203      	movs	r2, #3
   80878:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   8087a:	4b12      	ldr	r3, [pc, #72]	; (808c4 <DD_INIT_CAN+0x158>)
   8087c:	2201      	movs	r2, #1
   8087e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80880:	4b10      	ldr	r3, [pc, #64]	; (808c4 <DD_INIT_CAN+0x158>)
   80882:	2200      	movs	r2, #0
   80884:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80886:	4b0f      	ldr	r3, [pc, #60]	; (808c4 <DD_INIT_CAN+0x158>)
   80888:	4a0f      	ldr	r2, [pc, #60]	; (808c8 <DD_INIT_CAN+0x15c>)
   8088a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   8088c:	4b0d      	ldr	r3, [pc, #52]	; (808c4 <DD_INIT_CAN+0x158>)
   8088e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   80892:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   80894:	480b      	ldr	r0, [pc, #44]	; (808c4 <DD_INIT_CAN+0x158>)
   80896:	4b09      	ldr	r3, [pc, #36]	; (808bc <DD_INIT_CAN+0x150>)
   80898:	4798      	blx	r3
	
		sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   8089a:	2102      	movs	r1, #2
   8089c:	480c      	ldr	r0, [pc, #48]	; (808d0 <DD_INIT_CAN+0x164>)
   8089e:	4b0d      	ldr	r3, [pc, #52]	; (808d4 <DD_INIT_CAN+0x168>)
   808a0:	4798      	blx	r3
		sn65hvda540_normal_mode(&can0_transceiver);
   808a2:	480b      	ldr	r0, [pc, #44]	; (808d0 <DD_INIT_CAN+0x164>)
   808a4:	4b0c      	ldr	r3, [pc, #48]	; (808d8 <DD_INIT_CAN+0x16c>)
   808a6:	4798      	blx	r3
}
   808a8:	bf00      	nop
   808aa:	3738      	adds	r7, #56	; 0x38
   808ac:	46bd      	mov	sp, r7
   808ae:	bd80      	pop	{r7, pc}
   808b0:	000875d8 	.word	0x000875d8
   808b4:	400b4000 	.word	0x400b4000
   808b8:	43414e00 	.word	0x43414e00
   808bc:	0008067d 	.word	0x0008067d
   808c0:	0001869f 	.word	0x0001869f
   808c4:	20070a48 	.word	0x20070a48
   808c8:	1ffc0000 	.word	0x1ffc0000
   808cc:	000801c9 	.word	0x000801c9
   808d0:	20070a74 	.word	0x20070a74
   808d4:	00080265 	.word	0x00080265
   808d8:	00080281 	.word	0x00080281

000808dc <dd_APT_REG_INIT>:
   808dc:	b580      	push	{r7, lr}
   808de:	b084      	sub	sp, #16
   808e0:	af00      	add	r7, sp, #0
   808e2:	4b1e      	ldr	r3, [pc, #120]	; (8095c <dd_APT_REG_INIT+0x80>)
   808e4:	2206      	movs	r2, #6
   808e6:	801a      	strh	r2, [r3, #0]
   808e8:	2101      	movs	r1, #1
   808ea:	481c      	ldr	r0, [pc, #112]	; (8095c <dd_APT_REG_INIT+0x80>)
   808ec:	4b1c      	ldr	r3, [pc, #112]	; (80960 <dd_APT_REG_INIT+0x84>)
   808ee:	4798      	blx	r3
   808f0:	2300      	movs	r3, #0
   808f2:	60fb      	str	r3, [r7, #12]
   808f4:	e002      	b.n	808fc <dd_APT_REG_INIT+0x20>
   808f6:	68fb      	ldr	r3, [r7, #12]
   808f8:	3301      	adds	r3, #1
   808fa:	60fb      	str	r3, [r7, #12]
   808fc:	68fb      	ldr	r3, [r7, #12]
   808fe:	f242 720f 	movw	r2, #9999	; 0x270f
   80902:	4293      	cmp	r3, r2
   80904:	ddf7      	ble.n	808f6 <dd_APT_REG_INIT+0x1a>
   80906:	4b15      	ldr	r3, [pc, #84]	; (8095c <dd_APT_REG_INIT+0x80>)
   80908:	2243      	movs	r2, #67	; 0x43
   8090a:	801a      	strh	r2, [r3, #0]
   8090c:	4b13      	ldr	r3, [pc, #76]	; (8095c <dd_APT_REG_INIT+0x80>)
   8090e:	223a      	movs	r2, #58	; 0x3a
   80910:	805a      	strh	r2, [r3, #2]
   80912:	4b12      	ldr	r3, [pc, #72]	; (8095c <dd_APT_REG_INIT+0x80>)
   80914:	2204      	movs	r2, #4
   80916:	809a      	strh	r2, [r3, #4]
   80918:	4b10      	ldr	r3, [pc, #64]	; (8095c <dd_APT_REG_INIT+0x80>)
   8091a:	2298      	movs	r2, #152	; 0x98
   8091c:	80da      	strh	r2, [r3, #6]
   8091e:	4b0f      	ldr	r3, [pc, #60]	; (8095c <dd_APT_REG_INIT+0x80>)
   80920:	2200      	movs	r2, #0
   80922:	811a      	strh	r2, [r3, #8]
   80924:	2105      	movs	r1, #5
   80926:	480d      	ldr	r0, [pc, #52]	; (8095c <dd_APT_REG_INIT+0x80>)
   80928:	4b0d      	ldr	r3, [pc, #52]	; (80960 <dd_APT_REG_INIT+0x84>)
   8092a:	4798      	blx	r3
   8092c:	4b0b      	ldr	r3, [pc, #44]	; (8095c <dd_APT_REG_INIT+0x80>)
   8092e:	2208      	movs	r2, #8
   80930:	801a      	strh	r2, [r3, #0]
   80932:	2101      	movs	r1, #1
   80934:	4809      	ldr	r0, [pc, #36]	; (8095c <dd_APT_REG_INIT+0x80>)
   80936:	4b0a      	ldr	r3, [pc, #40]	; (80960 <dd_APT_REG_INIT+0x84>)
   80938:	4798      	blx	r3
   8093a:	2300      	movs	r3, #0
   8093c:	60bb      	str	r3, [r7, #8]
   8093e:	e002      	b.n	80946 <dd_APT_REG_INIT+0x6a>
   80940:	68bb      	ldr	r3, [r7, #8]
   80942:	3301      	adds	r3, #1
   80944:	60bb      	str	r3, [r7, #8]
   80946:	68bb      	ldr	r3, [r7, #8]
   80948:	f242 720f 	movw	r2, #9999	; 0x270f
   8094c:	4293      	cmp	r3, r2
   8094e:	ddf7      	ble.n	80940 <dd_APT_REG_INIT+0x64>
   80950:	2300      	movs	r3, #0
   80952:	607b      	str	r3, [r7, #4]
   80954:	bf00      	nop
   80956:	3710      	adds	r7, #16
   80958:	46bd      	mov	sp, r7
   8095a:	bd80      	pop	{r7, pc}
   8095c:	20070e68 	.word	0x20070e68
   80960:	00080b9d 	.word	0x00080b9d

00080964 <dd_VPT_REG_INIT>:
   80964:	b580      	push	{r7, lr}
   80966:	b084      	sub	sp, #16
   80968:	af00      	add	r7, sp, #0
   8096a:	4b1e      	ldr	r3, [pc, #120]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   8096c:	2206      	movs	r2, #6
   8096e:	801a      	strh	r2, [r3, #0]
   80970:	2101      	movs	r1, #1
   80972:	481c      	ldr	r0, [pc, #112]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   80974:	4b1c      	ldr	r3, [pc, #112]	; (809e8 <dd_VPT_REG_INIT+0x84>)
   80976:	4798      	blx	r3
   80978:	2300      	movs	r3, #0
   8097a:	60fb      	str	r3, [r7, #12]
   8097c:	e002      	b.n	80984 <dd_VPT_REG_INIT+0x20>
   8097e:	68fb      	ldr	r3, [r7, #12]
   80980:	3301      	adds	r3, #1
   80982:	60fb      	str	r3, [r7, #12]
   80984:	68fb      	ldr	r3, [r7, #12]
   80986:	f242 720f 	movw	r2, #9999	; 0x270f
   8098a:	4293      	cmp	r3, r2
   8098c:	ddf7      	ble.n	8097e <dd_VPT_REG_INIT+0x1a>
   8098e:	4b15      	ldr	r3, [pc, #84]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   80990:	2243      	movs	r2, #67	; 0x43
   80992:	801a      	strh	r2, [r3, #0]
   80994:	4b13      	ldr	r3, [pc, #76]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   80996:	223a      	movs	r2, #58	; 0x3a
   80998:	805a      	strh	r2, [r3, #2]
   8099a:	4b12      	ldr	r3, [pc, #72]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   8099c:	2204      	movs	r2, #4
   8099e:	809a      	strh	r2, [r3, #4]
   809a0:	4b10      	ldr	r3, [pc, #64]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   809a2:	2298      	movs	r2, #152	; 0x98
   809a4:	80da      	strh	r2, [r3, #6]
   809a6:	4b0f      	ldr	r3, [pc, #60]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   809a8:	2200      	movs	r2, #0
   809aa:	811a      	strh	r2, [r3, #8]
   809ac:	2105      	movs	r1, #5
   809ae:	480d      	ldr	r0, [pc, #52]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   809b0:	4b0d      	ldr	r3, [pc, #52]	; (809e8 <dd_VPT_REG_INIT+0x84>)
   809b2:	4798      	blx	r3
   809b4:	4b0b      	ldr	r3, [pc, #44]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   809b6:	2208      	movs	r2, #8
   809b8:	801a      	strh	r2, [r3, #0]
   809ba:	2101      	movs	r1, #1
   809bc:	4809      	ldr	r0, [pc, #36]	; (809e4 <dd_VPT_REG_INIT+0x80>)
   809be:	4b0a      	ldr	r3, [pc, #40]	; (809e8 <dd_VPT_REG_INIT+0x84>)
   809c0:	4798      	blx	r3
   809c2:	2300      	movs	r3, #0
   809c4:	60bb      	str	r3, [r7, #8]
   809c6:	e002      	b.n	809ce <dd_VPT_REG_INIT+0x6a>
   809c8:	68bb      	ldr	r3, [r7, #8]
   809ca:	3301      	adds	r3, #1
   809cc:	60bb      	str	r3, [r7, #8]
   809ce:	68bb      	ldr	r3, [r7, #8]
   809d0:	f242 720f 	movw	r2, #9999	; 0x270f
   809d4:	4293      	cmp	r3, r2
   809d6:	ddf7      	ble.n	809c8 <dd_VPT_REG_INIT+0x64>
   809d8:	2300      	movs	r3, #0
   809da:	607b      	str	r3, [r7, #4]
   809dc:	bf00      	nop
   809de:	3710      	adds	r7, #16
   809e0:	46bd      	mov	sp, r7
   809e2:	bd80      	pop	{r7, pc}
   809e4:	20070e68 	.word	0x20070e68
   809e8:	00080b9d 	.word	0x00080b9d

000809ec <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   809ec:	b490      	push	{r4, r7}
   809ee:	b082      	sub	sp, #8
   809f0:	af00      	add	r7, sp, #0
   809f2:	4603      	mov	r3, r0
   809f4:	80fb      	strh	r3, [r7, #6]
   809f6:	460b      	mov	r3, r1
   809f8:	717b      	strb	r3, [r7, #5]
   809fa:	4613      	mov	r3, r2
   809fc:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   809fe:	4911      	ldr	r1, [pc, #68]	; (80a44 <dd_spi_set_transfer_delay+0x58>)
   80a00:	88fb      	ldrh	r3, [r7, #6]
   80a02:	4810      	ldr	r0, [pc, #64]	; (80a44 <dd_spi_set_transfer_delay+0x58>)
   80a04:	88fa      	ldrh	r2, [r7, #6]
   80a06:	320c      	adds	r2, #12
   80a08:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80a0c:	b292      	uxth	r2, r2
   80a0e:	330c      	adds	r3, #12
   80a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   80a14:	4c0b      	ldr	r4, [pc, #44]	; (80a44 <dd_spi_set_transfer_delay+0x58>)
   80a16:	88fb      	ldrh	r3, [r7, #6]
   80a18:	490a      	ldr	r1, [pc, #40]	; (80a44 <dd_spi_set_transfer_delay+0x58>)
   80a1a:	88fa      	ldrh	r2, [r7, #6]
   80a1c:	320c      	adds	r2, #12
   80a1e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80a22:	797a      	ldrb	r2, [r7, #5]
   80a24:	0412      	lsls	r2, r2, #16
   80a26:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   80a2a:	7938      	ldrb	r0, [r7, #4]
   80a2c:	0600      	lsls	r0, r0, #24
   80a2e:	4302      	orrs	r2, r0
   80a30:	430a      	orrs	r2, r1
   80a32:	330c      	adds	r3, #12
   80a34:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   80a38:	bf00      	nop
   80a3a:	3708      	adds	r7, #8
   80a3c:	46bd      	mov	sp, r7
   80a3e:	bc90      	pop	{r4, r7}
   80a40:	4770      	bx	lr
   80a42:	bf00      	nop
   80a44:	40008000 	.word	0x40008000

00080a48 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   80a48:	b480      	push	{r7}
   80a4a:	b083      	sub	sp, #12
   80a4c:	af00      	add	r7, sp, #0
   80a4e:	4603      	mov	r3, r0
   80a50:	6039      	str	r1, [r7, #0]
   80a52:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   80a54:	490e      	ldr	r1, [pc, #56]	; (80a90 <dd_spi_set_bits_per_transfer+0x48>)
   80a56:	88fb      	ldrh	r3, [r7, #6]
   80a58:	480d      	ldr	r0, [pc, #52]	; (80a90 <dd_spi_set_bits_per_transfer+0x48>)
   80a5a:	88fa      	ldrh	r2, [r7, #6]
   80a5c:	320c      	adds	r2, #12
   80a5e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80a62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   80a66:	330c      	adds	r3, #12
   80a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   80a6c:	4808      	ldr	r0, [pc, #32]	; (80a90 <dd_spi_set_bits_per_transfer+0x48>)
   80a6e:	88fb      	ldrh	r3, [r7, #6]
   80a70:	4907      	ldr	r1, [pc, #28]	; (80a90 <dd_spi_set_bits_per_transfer+0x48>)
   80a72:	88fa      	ldrh	r2, [r7, #6]
   80a74:	320c      	adds	r2, #12
   80a76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80a7a:	683a      	ldr	r2, [r7, #0]
   80a7c:	430a      	orrs	r2, r1
   80a7e:	330c      	adds	r3, #12
   80a80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   80a84:	bf00      	nop
   80a86:	370c      	adds	r7, #12
   80a88:	46bd      	mov	sp, r7
   80a8a:	bc80      	pop	{r7}
   80a8c:	4770      	bx	lr
   80a8e:	bf00      	nop
   80a90:	40008000 	.word	0x40008000

00080a94 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   80a94:	b480      	push	{r7}
   80a96:	b083      	sub	sp, #12
   80a98:	af00      	add	r7, sp, #0
   80a9a:	4603      	mov	r3, r0
   80a9c:	6039      	str	r1, [r7, #0]
   80a9e:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   80aa0:	683b      	ldr	r3, [r7, #0]
   80aa2:	2b00      	cmp	r3, #0
   80aa4:	d00c      	beq.n	80ac0 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   80aa6:	490f      	ldr	r1, [pc, #60]	; (80ae4 <dd_spi_set_clock_polarity+0x50>)
   80aa8:	88fb      	ldrh	r3, [r7, #6]
   80aaa:	480e      	ldr	r0, [pc, #56]	; (80ae4 <dd_spi_set_clock_polarity+0x50>)
   80aac:	88fa      	ldrh	r2, [r7, #6]
   80aae:	320c      	adds	r2, #12
   80ab0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80ab4:	f042 0201 	orr.w	r2, r2, #1
   80ab8:	330c      	adds	r3, #12
   80aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   80abe:	e00b      	b.n	80ad8 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   80ac0:	4908      	ldr	r1, [pc, #32]	; (80ae4 <dd_spi_set_clock_polarity+0x50>)
   80ac2:	88fb      	ldrh	r3, [r7, #6]
   80ac4:	4807      	ldr	r0, [pc, #28]	; (80ae4 <dd_spi_set_clock_polarity+0x50>)
   80ac6:	88fa      	ldrh	r2, [r7, #6]
   80ac8:	320c      	adds	r2, #12
   80aca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80ace:	f022 0201 	bic.w	r2, r2, #1
   80ad2:	330c      	adds	r3, #12
   80ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   80ad8:	bf00      	nop
   80ada:	370c      	adds	r7, #12
   80adc:	46bd      	mov	sp, r7
   80ade:	bc80      	pop	{r7}
   80ae0:	4770      	bx	lr
   80ae2:	bf00      	nop
   80ae4:	40008000 	.word	0x40008000

00080ae8 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   80ae8:	b480      	push	{r7}
   80aea:	b083      	sub	sp, #12
   80aec:	af00      	add	r7, sp, #0
   80aee:	4603      	mov	r3, r0
   80af0:	6039      	str	r1, [r7, #0]
   80af2:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   80af4:	683b      	ldr	r3, [r7, #0]
   80af6:	2b00      	cmp	r3, #0
   80af8:	d00c      	beq.n	80b14 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   80afa:	490f      	ldr	r1, [pc, #60]	; (80b38 <dd_spi_set_clock_phase+0x50>)
   80afc:	88fb      	ldrh	r3, [r7, #6]
   80afe:	480e      	ldr	r0, [pc, #56]	; (80b38 <dd_spi_set_clock_phase+0x50>)
   80b00:	88fa      	ldrh	r2, [r7, #6]
   80b02:	320c      	adds	r2, #12
   80b04:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b08:	f042 0202 	orr.w	r2, r2, #2
   80b0c:	330c      	adds	r3, #12
   80b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   80b12:	e00b      	b.n	80b2c <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   80b14:	4908      	ldr	r1, [pc, #32]	; (80b38 <dd_spi_set_clock_phase+0x50>)
   80b16:	88fb      	ldrh	r3, [r7, #6]
   80b18:	4807      	ldr	r0, [pc, #28]	; (80b38 <dd_spi_set_clock_phase+0x50>)
   80b1a:	88fa      	ldrh	r2, [r7, #6]
   80b1c:	320c      	adds	r2, #12
   80b1e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b22:	f022 0202 	bic.w	r2, r2, #2
   80b26:	330c      	adds	r3, #12
   80b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   80b2c:	bf00      	nop
   80b2e:	370c      	adds	r7, #12
   80b30:	46bd      	mov	sp, r7
   80b32:	bc80      	pop	{r7}
   80b34:	4770      	bx	lr
   80b36:	bf00      	nop
   80b38:	40008000 	.word	0x40008000

00080b3c <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   80b3c:	b480      	push	{r7}
   80b3e:	b083      	sub	sp, #12
   80b40:	af00      	add	r7, sp, #0
   80b42:	4603      	mov	r3, r0
   80b44:	460a      	mov	r2, r1
   80b46:	80fb      	strh	r3, [r7, #6]
   80b48:	4613      	mov	r3, r2
   80b4a:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   80b4c:	797b      	ldrb	r3, [r7, #5]
   80b4e:	2b00      	cmp	r3, #0
   80b50:	d102      	bne.n	80b58 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   80b52:	f04f 33ff 	mov.w	r3, #4294967295
   80b56:	e01a      	b.n	80b8e <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   80b58:	490f      	ldr	r1, [pc, #60]	; (80b98 <dd_spi_set_baudrate_div+0x5c>)
   80b5a:	88fb      	ldrh	r3, [r7, #6]
   80b5c:	480e      	ldr	r0, [pc, #56]	; (80b98 <dd_spi_set_baudrate_div+0x5c>)
   80b5e:	88fa      	ldrh	r2, [r7, #6]
   80b60:	320c      	adds	r2, #12
   80b62:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b66:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   80b6a:	330c      	adds	r3, #12
   80b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80b70:	4809      	ldr	r0, [pc, #36]	; (80b98 <dd_spi_set_baudrate_div+0x5c>)
   80b72:	88fb      	ldrh	r3, [r7, #6]
   80b74:	4908      	ldr	r1, [pc, #32]	; (80b98 <dd_spi_set_baudrate_div+0x5c>)
   80b76:	88fa      	ldrh	r2, [r7, #6]
   80b78:	320c      	adds	r2, #12
   80b7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80b7e:	797a      	ldrb	r2, [r7, #5]
   80b80:	0212      	lsls	r2, r2, #8
   80b82:	b292      	uxth	r2, r2
   80b84:	430a      	orrs	r2, r1
   80b86:	330c      	adds	r3, #12
   80b88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   80b8c:	2300      	movs	r3, #0
}
   80b8e:	4618      	mov	r0, r3
   80b90:	370c      	adds	r7, #12
   80b92:	46bd      	mov	sp, r7
   80b94:	bc80      	pop	{r7}
   80b96:	4770      	bx	lr
   80b98:	40008000 	.word	0x40008000

00080b9c <dd_spi_master_transfer>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void dd_spi_master_transfer(void *p_buf, uint32_t size)  {
   80b9c:	b580      	push	{r7, lr}
   80b9e:	b086      	sub	sp, #24
   80ba0:	af00      	add	r7, sp, #0
   80ba2:	6078      	str	r0, [r7, #4]
   80ba4:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint8_t uc_pcs;
	static uint8_t data;
	uint32_t timeout = SPI_TIMEOUT;
   80ba6:	f643 2398 	movw	r3, #15000	; 0x3a98
   80baa:	613b      	str	r3, [r7, #16]

	uint16_t *p_buffer;

	p_buffer = p_buf;
   80bac:	687b      	ldr	r3, [r7, #4]
   80bae:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   80bb0:	2300      	movs	r3, #0
   80bb2:	617b      	str	r3, [r7, #20]
   80bb4:	e022      	b.n	80bfc <dd_spi_master_transfer+0x60>
		dd_spi_write(p_buffer[i]);
   80bb6:	697b      	ldr	r3, [r7, #20]
   80bb8:	005b      	lsls	r3, r3, #1
   80bba:	68fa      	ldr	r2, [r7, #12]
   80bbc:	4413      	add	r3, r2
   80bbe:	881b      	ldrh	r3, [r3, #0]
   80bc0:	b2db      	uxtb	r3, r3
   80bc2:	4618      	mov	r0, r3
   80bc4:	4b12      	ldr	r3, [pc, #72]	; (80c10 <dd_spi_master_transfer+0x74>)
   80bc6:	4798      	blx	r3
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80bc8:	e004      	b.n	80bd4 <dd_spi_master_transfer+0x38>
			 {
				if (!timeout--) {
   80bca:	693b      	ldr	r3, [r7, #16]
   80bcc:	1e5a      	subs	r2, r3, #1
   80bce:	613a      	str	r2, [r7, #16]
   80bd0:	2b00      	cmp	r3, #0
   80bd2:	d018      	beq.n	80c06 <dd_spi_master_transfer+0x6a>
	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
		dd_spi_write(p_buffer[i]);
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80bd4:	4b0f      	ldr	r3, [pc, #60]	; (80c14 <dd_spi_master_transfer+0x78>)
   80bd6:	691b      	ldr	r3, [r3, #16]
   80bd8:	f003 0301 	and.w	r3, r3, #1
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d0f4      	beq.n	80bca <dd_spi_master_transfer+0x2e>
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
				}
			 }
		dd_spi_read(&data);
   80be0:	480d      	ldr	r0, [pc, #52]	; (80c18 <dd_spi_master_transfer+0x7c>)
   80be2:	4b0e      	ldr	r3, [pc, #56]	; (80c1c <dd_spi_master_transfer+0x80>)
   80be4:	4798      	blx	r3
		p_buffer[i] = data;
   80be6:	697b      	ldr	r3, [r7, #20]
   80be8:	005b      	lsls	r3, r3, #1
   80bea:	68fa      	ldr	r2, [r7, #12]
   80bec:	4413      	add	r3, r2
   80bee:	4a0a      	ldr	r2, [pc, #40]	; (80c18 <dd_spi_master_transfer+0x7c>)
   80bf0:	7812      	ldrb	r2, [r2, #0]
   80bf2:	b292      	uxth	r2, r2
   80bf4:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   80bf6:	697b      	ldr	r3, [r7, #20]
   80bf8:	3301      	adds	r3, #1
   80bfa:	617b      	str	r3, [r7, #20]
   80bfc:	697a      	ldr	r2, [r7, #20]
   80bfe:	683b      	ldr	r3, [r7, #0]
   80c00:	429a      	cmp	r2, r3
   80c02:	d3d8      	bcc.n	80bb6 <dd_spi_master_transfer+0x1a>
   80c04:	e000      	b.n	80c08 <dd_spi_master_transfer+0x6c>
		dd_spi_write(p_buffer[i]);
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
   80c06:	bf00      	nop
				}
			 }
		dd_spi_read(&data);
		p_buffer[i] = data;
	}
}
   80c08:	3718      	adds	r7, #24
   80c0a:	46bd      	mov	sp, r7
   80c0c:	bd80      	pop	{r7, pc}
   80c0e:	bf00      	nop
   80c10:	00080c7d 	.word	0x00080c7d
   80c14:	40008000 	.word	0x40008000
   80c18:	20070949 	.word	0x20070949
   80c1c:	00080c21 	.word	0x00080c21

00080c20 <dd_spi_read>:

spi_status_t dd_spi_read(uint8_t *us_data) {
   80c20:	b480      	push	{r7}
   80c22:	b085      	sub	sp, #20
   80c24:	af00      	add	r7, sp, #0
   80c26:	6078      	str	r0, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   80c28:	f643 2398 	movw	r3, #15000	; 0x3a98
   80c2c:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   80c2e:	e006      	b.n	80c3e <dd_spi_read+0x1e>
		if (!timeout--) {
   80c30:	68fb      	ldr	r3, [r7, #12]
   80c32:	1e5a      	subs	r2, r3, #1
   80c34:	60fa      	str	r2, [r7, #12]
   80c36:	2b00      	cmp	r3, #0
   80c38:	d101      	bne.n	80c3e <dd_spi_read+0x1e>
			return SPI_ERROR_TIMEOUT;
   80c3a:	2301      	movs	r3, #1
   80c3c:	e015      	b.n	80c6a <dd_spi_read+0x4a>

spi_status_t dd_spi_read(uint8_t *us_data) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   80c3e:	4b0d      	ldr	r3, [pc, #52]	; (80c74 <dd_spi_read+0x54>)
   80c40:	691b      	ldr	r3, [r3, #16]
   80c42:	f003 0301 	and.w	r3, r3, #1
   80c46:	2b00      	cmp	r3, #0
   80c48:	d0f2      	beq.n	80c30 <dd_spi_read+0x10>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

if(SPI0->SPI_SR & SPI_SR_RDRF)
   80c4a:	4b0a      	ldr	r3, [pc, #40]	; (80c74 <dd_spi_read+0x54>)
   80c4c:	691b      	ldr	r3, [r3, #16]
   80c4e:	f003 0301 	and.w	r3, r3, #1
   80c52:	2b00      	cmp	r3, #0
   80c54:	d003      	beq.n	80c5e <dd_spi_read+0x3e>
{
	reg_value = SPI0->SPI_RDR;
   80c56:	4b07      	ldr	r3, [pc, #28]	; (80c74 <dd_spi_read+0x54>)
   80c58:	689b      	ldr	r3, [r3, #8]
   80c5a:	4a07      	ldr	r2, [pc, #28]	; (80c78 <dd_spi_read+0x58>)
   80c5c:	6013      	str	r3, [r2, #0]
}

	*us_data =  (reg_value & SPI_RDR_RD_Msk);   	
   80c5e:	4b06      	ldr	r3, [pc, #24]	; (80c78 <dd_spi_read+0x58>)
   80c60:	681b      	ldr	r3, [r3, #0]
   80c62:	b2da      	uxtb	r2, r3
   80c64:	687b      	ldr	r3, [r7, #4]
   80c66:	701a      	strb	r2, [r3, #0]
	return SPI_OK;
   80c68:	2300      	movs	r3, #0
}
   80c6a:	4618      	mov	r0, r3
   80c6c:	3714      	adds	r7, #20
   80c6e:	46bd      	mov	sp, r7
   80c70:	bc80      	pop	{r7}
   80c72:	4770      	bx	lr
   80c74:	40008000 	.word	0x40008000
   80c78:	2007094c 	.word	0x2007094c

00080c7c <dd_spi_write>:

spi_status_t dd_spi_write(uint8_t us_data)  {																																																																																																																																																																																																																																																																																																																																						
   80c7c:	b480      	push	{r7}
   80c7e:	b085      	sub	sp, #20
   80c80:	af00      	add	r7, sp, #0
   80c82:	4603      	mov	r3, r0
   80c84:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = SPI_TIMEOUT;
   80c86:	f643 2398 	movw	r3, #15000	; 0x3a98
   80c8a:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   80c8c:	e006      	b.n	80c9c <dd_spi_write+0x20>
		if (!timeout--) {
   80c8e:	68fb      	ldr	r3, [r7, #12]
   80c90:	1e5a      	subs	r2, r3, #1
   80c92:	60fa      	str	r2, [r7, #12]
   80c94:	2b00      	cmp	r3, #0
   80c96:	d101      	bne.n	80c9c <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   80c98:	2301      	movs	r3, #1
   80c9a:	e00b      	b.n	80cb4 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint8_t us_data)  {																																																																																																																																																																																																																																																																																																																																						
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   80c9c:	4b08      	ldr	r3, [pc, #32]	; (80cc0 <dd_spi_write+0x44>)
   80c9e:	691b      	ldr	r3, [r3, #16]
   80ca0:	f003 0302 	and.w	r3, r3, #2
   80ca4:	2b00      	cmp	r3, #0
   80ca6:	d0f2      	beq.n	80c8e <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   80ca8:	79fb      	ldrb	r3, [r7, #7]
   80caa:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   80cac:	4a04      	ldr	r2, [pc, #16]	; (80cc0 <dd_spi_write+0x44>)
   80cae:	68bb      	ldr	r3, [r7, #8]
   80cb0:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   80cb2:	2300      	movs	r3, #0
}
   80cb4:	4618      	mov	r0, r3
   80cb6:	3714      	adds	r7, #20
   80cb8:	46bd      	mov	sp, r7
   80cba:	bc80      	pop	{r7}
   80cbc:	4770      	bx	lr
   80cbe:	bf00      	nop
   80cc0:	40008000 	.word	0x40008000

00080cc4 <dd_spi_master_read>:

 void dd_spi_master_read(void *p_buf, uint32_t size)
{
   80cc4:	b580      	push	{r7, lr}
   80cc6:	b086      	sub	sp, #24
   80cc8:	af00      	add	r7, sp, #0
   80cca:	6078      	str	r0, [r7, #4]
   80ccc:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint8_t uc_pcs;
	static uint8_t data;
	uint32_t timeout = SPI_TIMEOUT;
   80cce:	f643 2398 	movw	r3, #15000	; 0x3a98
   80cd2:	613b      	str	r3, [r7, #16]

	volatile uint8_t *p_buffer;
	
// 	uint8_t   dummy[4];
// 
	p_buffer = p_buf;
   80cd4:	687b      	ldr	r3, [r7, #4]
   80cd6:	60fb      	str	r3, [r7, #12]
//  	dd_spi_read(&data);
// 	
// 	dd_spi_write(p_buffer[0]);
// 	dd_spi_read(&data);
	
	for (i = 0; i < size ; i++) {
   80cd8:	2300      	movs	r3, #0
   80cda:	617b      	str	r3, [r7, #20]
   80cdc:	e01f      	b.n	80d1e <dd_spi_master_read+0x5a>
		dd_spi_write(p_buffer[i]);
   80cde:	68fa      	ldr	r2, [r7, #12]
   80ce0:	697b      	ldr	r3, [r7, #20]
   80ce2:	4413      	add	r3, r2
   80ce4:	781b      	ldrb	r3, [r3, #0]
   80ce6:	b2db      	uxtb	r3, r3
   80ce8:	4618      	mov	r0, r3
   80cea:	4b11      	ldr	r3, [pc, #68]	; (80d30 <dd_spi_master_read+0x6c>)
   80cec:	4798      	blx	r3
		/*dd_spi_write(p_buffer[1]);*/
	//	while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
	//	dd_spi_read(&data);	
		
		while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80cee:	e004      	b.n	80cfa <dd_spi_master_read+0x36>
			 {
				if (!timeout--) {
   80cf0:	693b      	ldr	r3, [r7, #16]
   80cf2:	1e5a      	subs	r2, r3, #1
   80cf4:	613a      	str	r2, [r7, #16]
   80cf6:	2b00      	cmp	r3, #0
   80cf8:	d016      	beq.n	80d28 <dd_spi_master_read+0x64>
		dd_spi_write(p_buffer[i]);
		/*dd_spi_write(p_buffer[1]);*/
	//	while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
	//	dd_spi_read(&data);	
		
		while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80cfa:	4b0e      	ldr	r3, [pc, #56]	; (80d34 <dd_spi_master_read+0x70>)
   80cfc:	691b      	ldr	r3, [r3, #16]
   80cfe:	f003 0301 	and.w	r3, r3, #1
   80d02:	2b00      	cmp	r3, #0
   80d04:	d0f4      	beq.n	80cf0 <dd_spi_master_read+0x2c>
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
				}
			 }
		dd_spi_read(&data);
   80d06:	480c      	ldr	r0, [pc, #48]	; (80d38 <dd_spi_master_read+0x74>)
   80d08:	4b0c      	ldr	r3, [pc, #48]	; (80d3c <dd_spi_master_read+0x78>)
   80d0a:	4798      	blx	r3
		p_buffer[i] = data;
   80d0c:	68fa      	ldr	r2, [r7, #12]
   80d0e:	697b      	ldr	r3, [r7, #20]
   80d10:	4413      	add	r3, r2
   80d12:	4a09      	ldr	r2, [pc, #36]	; (80d38 <dd_spi_master_read+0x74>)
   80d14:	7812      	ldrb	r2, [r2, #0]
   80d16:	701a      	strb	r2, [r3, #0]
//  	dd_spi_read(&data);
// 	
// 	dd_spi_write(p_buffer[0]);
// 	dd_spi_read(&data);
	
	for (i = 0; i < size ; i++) {
   80d18:	697b      	ldr	r3, [r7, #20]
   80d1a:	3301      	adds	r3, #1
   80d1c:	617b      	str	r3, [r7, #20]
   80d1e:	697a      	ldr	r2, [r7, #20]
   80d20:	683b      	ldr	r3, [r7, #0]
   80d22:	429a      	cmp	r2, r3
   80d24:	d3db      	bcc.n	80cde <dd_spi_master_read+0x1a>
   80d26:	e000      	b.n	80d2a <dd_spi_master_read+0x66>
	//	dd_spi_read(&data);	
		
		while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
   80d28:	bf00      	nop
			 }
		dd_spi_read(&data);
		p_buffer[i] = data;
		
	}
}
   80d2a:	3718      	adds	r7, #24
   80d2c:	46bd      	mov	sp, r7
   80d2e:	bd80      	pop	{r7, pc}
   80d30:	00080c7d 	.word	0x00080c7d
   80d34:	40008000 	.word	0x40008000
   80d38:	20070950 	.word	0x20070950
   80d3c:	00080c21 	.word	0x00080c21

00080d40 <CPU2_DD_INIT_SPI>:
		data_ready = false;
	}	
}

void CPU2_DD_INIT_SPI(void)
{
   80d40:	b580      	push	{r7, lr}
   80d42:	b082      	sub	sp, #8
   80d44:	af00      	add	r7, sp, #0

	///////////////////////////////////////////////
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   80d46:	4b43      	ldr	r3, [pc, #268]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d48:	4a43      	ldr	r2, [pc, #268]	; (80e58 <CPU2_DD_INIT_SPI+0x118>)
   80d4a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");	
	//dd_spi_set_writeprotect(0);	
	
	PMC->PMC_WPMR = 0x504D4300;
   80d4e:	4b43      	ldr	r3, [pc, #268]	; (80e5c <CPU2_DD_INIT_SPI+0x11c>)
   80d50:	4a43      	ldr	r2, [pc, #268]	; (80e60 <CPU2_DD_INIT_SPI+0x120>)
   80d52:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   80d56:	483f      	ldr	r0, [pc, #252]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d58:	4b42      	ldr	r3, [pc, #264]	; (80e64 <CPU2_DD_INIT_SPI+0x124>)
   80d5a:	4798      	blx	r3
	
	
	
	 SPI0->SPI_CR = SPI_CR_SPIDIS;	
   80d5c:	4b3d      	ldr	r3, [pc, #244]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d5e:	2202      	movs	r2, #2
   80d60:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   80d62:	4b3c      	ldr	r3, [pc, #240]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d64:	2280      	movs	r2, #128	; 0x80
   80d66:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   80d68:	4b3a      	ldr	r3, [pc, #232]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80d6e:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   80d70:	4a38      	ldr	r2, [pc, #224]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d72:	4b38      	ldr	r3, [pc, #224]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d74:	685b      	ldr	r3, [r3, #4]
   80d76:	f043 0301 	orr.w	r3, r3, #1
   80d7a:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   80d7c:	4a35      	ldr	r2, [pc, #212]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d7e:	4b35      	ldr	r3, [pc, #212]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80d80:	685b      	ldr	r3, [r3, #4]
   80d82:	f043 0310 	orr.w	r3, r3, #16
   80d86:	6053      	str	r3, [r2, #4]
// 	SPI0->SPI_MR = 0x00000001;
// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);	
	dd_spi_set_clock_polarity(APT_CHIP_SEL, SPI_CLK_POLARITY_0);
   80d88:	4b37      	ldr	r3, [pc, #220]	; (80e68 <CPU2_DD_INIT_SPI+0x128>)
   80d8a:	781b      	ldrb	r3, [r3, #0]
   80d8c:	b29b      	uxth	r3, r3
   80d8e:	2100      	movs	r1, #0
   80d90:	4618      	mov	r0, r3
   80d92:	4b36      	ldr	r3, [pc, #216]	; (80e6c <CPU2_DD_INIT_SPI+0x12c>)
   80d94:	4798      	blx	r3
	dd_spi_set_clock_phase(APT_CHIP_SEL, SPI_CLK_PHASE_1);	
   80d96:	4b34      	ldr	r3, [pc, #208]	; (80e68 <CPU2_DD_INIT_SPI+0x128>)
   80d98:	781b      	ldrb	r3, [r3, #0]
   80d9a:	b29b      	uxth	r3, r3
   80d9c:	2101      	movs	r1, #1
   80d9e:	4618      	mov	r0, r3
   80da0:	4b33      	ldr	r3, [pc, #204]	; (80e70 <CPU2_DD_INIT_SPI+0x130>)
   80da2:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(APT_CHIP_SEL,SPI_CSR_BITS_8_BIT);	
   80da4:	4b30      	ldr	r3, [pc, #192]	; (80e68 <CPU2_DD_INIT_SPI+0x128>)
   80da6:	781b      	ldrb	r3, [r3, #0]
   80da8:	b29b      	uxth	r3, r3
   80daa:	2100      	movs	r1, #0
   80dac:	4618      	mov	r0, r3
   80dae:	4b31      	ldr	r3, [pc, #196]	; (80e74 <CPU2_DD_INIT_SPI+0x134>)
   80db0:	4798      	blx	r3
	dd_spi_set_baudrate_div(APT_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   80db2:	4b2d      	ldr	r3, [pc, #180]	; (80e68 <CPU2_DD_INIT_SPI+0x128>)
   80db4:	781b      	ldrb	r3, [r3, #0]
   80db6:	b29b      	uxth	r3, r3
   80db8:	21ff      	movs	r1, #255	; 0xff
   80dba:	4618      	mov	r0, r3
   80dbc:	4b2e      	ldr	r3, [pc, #184]	; (80e78 <CPU2_DD_INIT_SPI+0x138>)
   80dbe:	4798      	blx	r3
	dd_spi_set_transfer_delay(APT_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   80dc0:	4b29      	ldr	r3, [pc, #164]	; (80e68 <CPU2_DD_INIT_SPI+0x128>)
   80dc2:	781b      	ldrb	r3, [r3, #0]
   80dc4:	b29b      	uxth	r3, r3
   80dc6:	2230      	movs	r2, #48	; 0x30
   80dc8:	21ff      	movs	r1, #255	; 0xff
   80dca:	4618      	mov	r0, r3
   80dcc:	4b2b      	ldr	r3, [pc, #172]	; (80e7c <CPU2_DD_INIT_SPI+0x13c>)
   80dce:	4798      	blx	r3
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);	
	dd_spi_set_clock_polarity(VPT_CHIP_SEL, SPI_CLK_POLARITY_0);
   80dd0:	4b2b      	ldr	r3, [pc, #172]	; (80e80 <CPU2_DD_INIT_SPI+0x140>)
   80dd2:	781b      	ldrb	r3, [r3, #0]
   80dd4:	b29b      	uxth	r3, r3
   80dd6:	2100      	movs	r1, #0
   80dd8:	4618      	mov	r0, r3
   80dda:	4b24      	ldr	r3, [pc, #144]	; (80e6c <CPU2_DD_INIT_SPI+0x12c>)
   80ddc:	4798      	blx	r3
	dd_spi_set_clock_phase(VPT_CHIP_SEL, SPI_CLK_PHASE_1);	
   80dde:	4b28      	ldr	r3, [pc, #160]	; (80e80 <CPU2_DD_INIT_SPI+0x140>)
   80de0:	781b      	ldrb	r3, [r3, #0]
   80de2:	b29b      	uxth	r3, r3
   80de4:	2101      	movs	r1, #1
   80de6:	4618      	mov	r0, r3
   80de8:	4b21      	ldr	r3, [pc, #132]	; (80e70 <CPU2_DD_INIT_SPI+0x130>)
   80dea:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(VPT_CHIP_SEL,SPI_CSR_BITS_8_BIT);	
   80dec:	4b24      	ldr	r3, [pc, #144]	; (80e80 <CPU2_DD_INIT_SPI+0x140>)
   80dee:	781b      	ldrb	r3, [r3, #0]
   80df0:	b29b      	uxth	r3, r3
   80df2:	2100      	movs	r1, #0
   80df4:	4618      	mov	r0, r3
   80df6:	4b1f      	ldr	r3, [pc, #124]	; (80e74 <CPU2_DD_INIT_SPI+0x134>)
   80df8:	4798      	blx	r3
	dd_spi_set_baudrate_div(VPT_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   80dfa:	4b21      	ldr	r3, [pc, #132]	; (80e80 <CPU2_DD_INIT_SPI+0x140>)
   80dfc:	781b      	ldrb	r3, [r3, #0]
   80dfe:	b29b      	uxth	r3, r3
   80e00:	21ff      	movs	r1, #255	; 0xff
   80e02:	4618      	mov	r0, r3
   80e04:	4b1c      	ldr	r3, [pc, #112]	; (80e78 <CPU2_DD_INIT_SPI+0x138>)
   80e06:	4798      	blx	r3
	dd_spi_set_transfer_delay(VPT_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   80e08:	4b1d      	ldr	r3, [pc, #116]	; (80e80 <CPU2_DD_INIT_SPI+0x140>)
   80e0a:	781b      	ldrb	r3, [r3, #0]
   80e0c:	b29b      	uxth	r3, r3
   80e0e:	2230      	movs	r2, #48	; 0x30
   80e10:	21ff      	movs	r1, #255	; 0xff
   80e12:	4618      	mov	r0, r3
   80e14:	4b19      	ldr	r3, [pc, #100]	; (80e7c <CPU2_DD_INIT_SPI+0x13c>)
   80e16:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   80e18:	4b0e      	ldr	r3, [pc, #56]	; (80e54 <CPU2_DD_INIT_SPI+0x114>)
   80e1a:	2201      	movs	r2, #1
   80e1c:	601a      	str	r2, [r3, #0]
	
	dd_APT_CS();
   80e1e:	4b19      	ldr	r3, [pc, #100]	; (80e84 <CPU2_DD_INIT_SPI+0x144>)
   80e20:	4798      	blx	r3
	dd_APT_REG_INIT();
   80e22:	4b19      	ldr	r3, [pc, #100]	; (80e88 <CPU2_DD_INIT_SPI+0x148>)
   80e24:	4798      	blx	r3
	uint k = 0;
   80e26:	2300      	movs	r3, #0
   80e28:	607b      	str	r3, [r7, #4]
	while (k < 100000)
   80e2a:	e002      	b.n	80e32 <CPU2_DD_INIT_SPI+0xf2>
	{
		k++;
   80e2c:	687b      	ldr	r3, [r7, #4]
   80e2e:	3301      	adds	r3, #1
   80e30:	607b      	str	r3, [r7, #4]
	SPI0->SPI_CR = SPI_CR_SPIEN;
	
	dd_APT_CS();
	dd_APT_REG_INIT();
	uint k = 0;
	while (k < 100000)
   80e32:	687b      	ldr	r3, [r7, #4]
   80e34:	4a15      	ldr	r2, [pc, #84]	; (80e8c <CPU2_DD_INIT_SPI+0x14c>)
   80e36:	4293      	cmp	r3, r2
   80e38:	d9f8      	bls.n	80e2c <CPU2_DD_INIT_SPI+0xec>
	{
		k++;
	}
	
	 dd_spi_master_read( &DATA_array, 2);
   80e3a:	2102      	movs	r1, #2
   80e3c:	4814      	ldr	r0, [pc, #80]	; (80e90 <CPU2_DD_INIT_SPI+0x150>)
   80e3e:	4b15      	ldr	r3, [pc, #84]	; (80e94 <CPU2_DD_INIT_SPI+0x154>)
   80e40:	4798      	blx	r3
	dd_VPT_CS();
   80e42:	4b15      	ldr	r3, [pc, #84]	; (80e98 <CPU2_DD_INIT_SPI+0x158>)
   80e44:	4798      	blx	r3
	dd_VPT_REG_INIT();
   80e46:	4b15      	ldr	r3, [pc, #84]	; (80e9c <CPU2_DD_INIT_SPI+0x15c>)
   80e48:	4798      	blx	r3
	
	
			
}
   80e4a:	bf00      	nop
   80e4c:	3708      	adds	r7, #8
   80e4e:	46bd      	mov	sp, r7
   80e50:	bd80      	pop	{r7, pc}
   80e52:	bf00      	nop
   80e54:	40008000 	.word	0x40008000
   80e58:	53504900 	.word	0x53504900
   80e5c:	400e0600 	.word	0x400e0600
   80e60:	504d4300 	.word	0x504d4300
   80e64:	0008016d 	.word	0x0008016d
   80e68:	20070948 	.word	0x20070948
   80e6c:	00080a95 	.word	0x00080a95
   80e70:	00080ae9 	.word	0x00080ae9
   80e74:	00080a49 	.word	0x00080a49
   80e78:	00080b3d 	.word	0x00080b3d
   80e7c:	000809ed 	.word	0x000809ed
   80e80:	20070000 	.word	0x20070000
   80e84:	00080ea1 	.word	0x00080ea1
   80e88:	000808dd 	.word	0x000808dd
   80e8c:	0001869f 	.word	0x0001869f
   80e90:	20070e7c 	.word	0x20070e7c
   80e94:	00080cc5 	.word	0x00080cc5
   80e98:	00080ef5 	.word	0x00080ef5
   80e9c:	00080965 	.word	0x00080965

00080ea0 <dd_APT_CS>:

 void dd_APT_CS()
	 {
   80ea0:	b480      	push	{r7}
   80ea2:	af00      	add	r7, sp, #0
		 SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.	
   80ea4:	4a11      	ldr	r2, [pc, #68]	; (80eec <dd_APT_CS+0x4c>)
   80ea6:	4b11      	ldr	r3, [pc, #68]	; (80eec <dd_APT_CS+0x4c>)
   80ea8:	685b      	ldr	r3, [r3, #4]
   80eaa:	f023 0302 	bic.w	r3, r3, #2
   80eae:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   80eb0:	4a0e      	ldr	r2, [pc, #56]	; (80eec <dd_APT_CS+0x4c>)
   80eb2:	4b0e      	ldr	r3, [pc, #56]	; (80eec <dd_APT_CS+0x4c>)
   80eb4:	685b      	ldr	r3, [r3, #4]
   80eb6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80eba:	6053      	str	r3, [r2, #4]
	 SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   80ebc:	4a0b      	ldr	r2, [pc, #44]	; (80eec <dd_APT_CS+0x4c>)
   80ebe:	4b0b      	ldr	r3, [pc, #44]	; (80eec <dd_APT_CS+0x4c>)
   80ec0:	685b      	ldr	r3, [r3, #4]
   80ec2:	f023 0304 	bic.w	r3, r3, #4
   80ec6:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR |= SPI_MR_PCS(APT_CHIP_PCS);
   80ec8:	4908      	ldr	r1, [pc, #32]	; (80eec <dd_APT_CS+0x4c>)
   80eca:	4b08      	ldr	r3, [pc, #32]	; (80eec <dd_APT_CS+0x4c>)
   80ecc:	685a      	ldr	r2, [r3, #4]
   80ece:	4b08      	ldr	r3, [pc, #32]	; (80ef0 <dd_APT_CS+0x50>)
   80ed0:	781b      	ldrb	r3, [r3, #0]
   80ed2:	4618      	mov	r0, r3
   80ed4:	2301      	movs	r3, #1
   80ed6:	4083      	lsls	r3, r0
   80ed8:	43db      	mvns	r3, r3
   80eda:	041b      	lsls	r3, r3, #16
   80edc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80ee0:	4313      	orrs	r3, r2
   80ee2:	604b      	str	r3, [r1, #4]
		 
	 }
   80ee4:	bf00      	nop
   80ee6:	46bd      	mov	sp, r7
   80ee8:	bc80      	pop	{r7}
   80eea:	4770      	bx	lr
   80eec:	40008000 	.word	0x40008000
   80ef0:	20070948 	.word	0x20070948

00080ef4 <dd_VPT_CS>:
	 
void dd_VPT_CS()
	 {
   80ef4:	b480      	push	{r7}
   80ef6:	af00      	add	r7, sp, #0
		  SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.	
   80ef8:	4a11      	ldr	r2, [pc, #68]	; (80f40 <dd_VPT_CS+0x4c>)
   80efa:	4b11      	ldr	r3, [pc, #68]	; (80f40 <dd_VPT_CS+0x4c>)
   80efc:	685b      	ldr	r3, [r3, #4]
   80efe:	f023 0302 	bic.w	r3, r3, #2
   80f02:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   80f04:	4a0e      	ldr	r2, [pc, #56]	; (80f40 <dd_VPT_CS+0x4c>)
   80f06:	4b0e      	ldr	r3, [pc, #56]	; (80f40 <dd_VPT_CS+0x4c>)
   80f08:	685b      	ldr	r3, [r3, #4]
   80f0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80f0e:	6053      	str	r3, [r2, #4]
	 SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   80f10:	4a0b      	ldr	r2, [pc, #44]	; (80f40 <dd_VPT_CS+0x4c>)
   80f12:	4b0b      	ldr	r3, [pc, #44]	; (80f40 <dd_VPT_CS+0x4c>)
   80f14:	685b      	ldr	r3, [r3, #4]
   80f16:	f023 0304 	bic.w	r3, r3, #4
   80f1a:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR |= SPI_MR_PCS(VPT_CHIP_PCS);
   80f1c:	4908      	ldr	r1, [pc, #32]	; (80f40 <dd_VPT_CS+0x4c>)
   80f1e:	4b08      	ldr	r3, [pc, #32]	; (80f40 <dd_VPT_CS+0x4c>)
   80f20:	685a      	ldr	r2, [r3, #4]
   80f22:	4b08      	ldr	r3, [pc, #32]	; (80f44 <dd_VPT_CS+0x50>)
   80f24:	781b      	ldrb	r3, [r3, #0]
   80f26:	4618      	mov	r0, r3
   80f28:	2301      	movs	r3, #1
   80f2a:	4083      	lsls	r3, r0
   80f2c:	43db      	mvns	r3, r3
   80f2e:	041b      	lsls	r3, r3, #16
   80f30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80f34:	4313      	orrs	r3, r2
   80f36:	604b      	str	r3, [r1, #4]
	 }
   80f38:	bf00      	nop
   80f3a:	46bd      	mov	sp, r7
   80f3c:	bc80      	pop	{r7}
   80f3e:	4770      	bx	lr
   80f40:	40008000 	.word	0x40008000
   80f44:	20070000 	.word	0x20070000

00080f48 <DD_READ_SENSORS>:
 
uint16_t DD_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   80f48:	b580      	push	{r7, lr}
   80f4a:	b084      	sub	sp, #16
   80f4c:	af00      	add	r7, sp, #0
   80f4e:	4603      	mov	r3, r0
   80f50:	71fb      	strb	r3, [r7, #7]
	uint16_t sensor_status = 0;
   80f52:	2300      	movs	r3, #0
   80f54:	81fb      	strh	r3, [r7, #14]
	
	sensor_data.CPU_SENDER_type_reg = HEMO_CPU_id;
   80f56:	4b29      	ldr	r3, [pc, #164]	; (80ffc <DD_READ_SENSORS+0xb4>)
   80f58:	2201      	movs	r2, #1
   80f5a:	701a      	strb	r2, [r3, #0]
	sensor_data.SENSOR_GROUP_type_reg = GROUP_ID_7;
   80f5c:	4b27      	ldr	r3, [pc, #156]	; (80ffc <DD_READ_SENSORS+0xb4>)
   80f5e:	2207      	movs	r2, #7
   80f60:	705a      	strb	r2, [r3, #1]
	
	 switch(ID_SENSOR)
   80f62:	79fb      	ldrb	r3, [r7, #7]
   80f64:	2b01      	cmp	r3, #1
   80f66:	d003      	beq.n	80f70 <DD_READ_SENSORS+0x28>
   80f68:	2b02      	cmp	r3, #2
   80f6a:	d022      	beq.n	80fb2 <DD_READ_SENSORS+0x6a>
		 }
		 return sensor_status;
		 break;
	
		default:
		break;
   80f6c:	bf00      	nop
	
	 }
	
	
		
   80f6e:	e040      	b.n	80ff2 <DD_READ_SENSORS+0xaa>
		 uint32_t volatile temp ;
		 case SV_APT:
		 
	//	 temp = SPI_APT_READY;
		
		 while(SPI_APT_READY)
   80f70:	bf00      	nop
   80f72:	4b23      	ldr	r3, [pc, #140]	; (81000 <DD_READ_SENSORS+0xb8>)
   80f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80f76:	099b      	lsrs	r3, r3, #6
   80f78:	f003 0301 	and.w	r3, r3, #1
   80f7c:	2b00      	cmp	r3, #0
   80f7e:	d1f8      	bne.n	80f72 <DD_READ_SENSORS+0x2a>
	//	 if(temp == 0)
		 
		 {
			 
		 
		 dd_APT_CS();
   80f80:	4b20      	ldr	r3, [pc, #128]	; (81004 <DD_READ_SENSORS+0xbc>)
   80f82:	4798      	blx	r3
		 DATA_array[0]=0;
   80f84:	4b20      	ldr	r3, [pc, #128]	; (81008 <DD_READ_SENSORS+0xc0>)
   80f86:	2200      	movs	r2, #0
   80f88:	701a      	strb	r2, [r3, #0]
		 DATA_array[1]=0;
   80f8a:	4b1f      	ldr	r3, [pc, #124]	; (81008 <DD_READ_SENSORS+0xc0>)
   80f8c:	2200      	movs	r2, #0
   80f8e:	705a      	strb	r2, [r3, #1]
		 
		 dd_spi_master_read( &DATA_array, 2);
   80f90:	2102      	movs	r1, #2
   80f92:	481d      	ldr	r0, [pc, #116]	; (81008 <DD_READ_SENSORS+0xc0>)
   80f94:	4b1d      	ldr	r3, [pc, #116]	; (8100c <DD_READ_SENSORS+0xc4>)
   80f96:	4798      	blx	r3
		 
		 spi_data.bytearray[1] =DATA_array[0];
   80f98:	4b1b      	ldr	r3, [pc, #108]	; (81008 <DD_READ_SENSORS+0xc0>)
   80f9a:	781a      	ldrb	r2, [r3, #0]
   80f9c:	4b1c      	ldr	r3, [pc, #112]	; (81010 <DD_READ_SENSORS+0xc8>)
   80f9e:	705a      	strb	r2, [r3, #1]
		 spi_data.bytearray[0] = DATA_array[1];
   80fa0:	4b19      	ldr	r3, [pc, #100]	; (81008 <DD_READ_SENSORS+0xc0>)
   80fa2:	785a      	ldrb	r2, [r3, #1]
   80fa4:	4b1a      	ldr	r3, [pc, #104]	; (81010 <DD_READ_SENSORS+0xc8>)
   80fa6:	701a      	strb	r2, [r3, #0]
		 
		 sensor_status = spi_data.Twobyte;
   80fa8:	4b19      	ldr	r3, [pc, #100]	; (81010 <DD_READ_SENSORS+0xc8>)
   80faa:	881b      	ldrh	r3, [r3, #0]
   80fac:	81fb      	strh	r3, [r7, #14]
		 
		 }
		 return sensor_status;
   80fae:	89fb      	ldrh	r3, [r7, #14]
   80fb0:	e01f      	b.n	80ff2 <DD_READ_SENSORS+0xaa>
// 		 
		 
		 break;
		 
		 case SV_VPT:
		 while(SPI_VPT_READY)
   80fb2:	bf00      	nop
   80fb4:	4b12      	ldr	r3, [pc, #72]	; (81000 <DD_READ_SENSORS+0xb8>)
   80fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80fb8:	095b      	lsrs	r3, r3, #5
   80fba:	f003 0301 	and.w	r3, r3, #1
   80fbe:	2b00      	cmp	r3, #0
   80fc0:	d1f8      	bne.n	80fb4 <DD_READ_SENSORS+0x6c>
		 {
			 // return if TIME EOUT
		 };
		 {
		 dd_VPT_CS();
   80fc2:	4b14      	ldr	r3, [pc, #80]	; (81014 <DD_READ_SENSORS+0xcc>)
   80fc4:	4798      	blx	r3
		 
		 DATA_array[0]=0;
   80fc6:	4b10      	ldr	r3, [pc, #64]	; (81008 <DD_READ_SENSORS+0xc0>)
   80fc8:	2200      	movs	r2, #0
   80fca:	701a      	strb	r2, [r3, #0]
		 DATA_array[1]=0;
   80fcc:	4b0e      	ldr	r3, [pc, #56]	; (81008 <DD_READ_SENSORS+0xc0>)
   80fce:	2200      	movs	r2, #0
   80fd0:	705a      	strb	r2, [r3, #1]
		 
		 
		 dd_spi_master_read( &DATA_array, 2);
   80fd2:	2102      	movs	r1, #2
   80fd4:	480c      	ldr	r0, [pc, #48]	; (81008 <DD_READ_SENSORS+0xc0>)
   80fd6:	4b0d      	ldr	r3, [pc, #52]	; (8100c <DD_READ_SENSORS+0xc4>)
   80fd8:	4798      	blx	r3
		 
		 spi_data.bytearray[1] =DATA_array[0];
   80fda:	4b0b      	ldr	r3, [pc, #44]	; (81008 <DD_READ_SENSORS+0xc0>)
   80fdc:	781a      	ldrb	r2, [r3, #0]
   80fde:	4b0c      	ldr	r3, [pc, #48]	; (81010 <DD_READ_SENSORS+0xc8>)
   80fe0:	705a      	strb	r2, [r3, #1]
		 spi_data.bytearray[0] = DATA_array[1];
   80fe2:	4b09      	ldr	r3, [pc, #36]	; (81008 <DD_READ_SENSORS+0xc0>)
   80fe4:	785a      	ldrb	r2, [r3, #1]
   80fe6:	4b0a      	ldr	r3, [pc, #40]	; (81010 <DD_READ_SENSORS+0xc8>)
   80fe8:	701a      	strb	r2, [r3, #0]
		 sensor_status = spi_data.Twobyte;
   80fea:	4b09      	ldr	r3, [pc, #36]	; (81010 <DD_READ_SENSORS+0xc8>)
   80fec:	881b      	ldrh	r3, [r3, #0]
   80fee:	81fb      	strh	r3, [r7, #14]
// 		 for (int i=0;i<100000;i++)
// 		 {
// 			 ;
// 		 }
		 }
		 return sensor_status;
   80ff0:	89fb      	ldrh	r3, [r7, #14]
	
	 }
	
	
		
   80ff2:	4618      	mov	r0, r3
   80ff4:	3710      	adds	r7, #16
   80ff6:	46bd      	mov	sp, r7
   80ff8:	bd80      	pop	{r7, pc}
   80ffa:	bf00      	nop
   80ffc:	20070a30 	.word	0x20070a30
   81000:	400e1200 	.word	0x400e1200
   81004:	00080ea1 	.word	0x00080ea1
   81008:	20070e7c 	.word	0x20070e7c
   8100c:	00080cc5 	.word	0x00080cc5
   81010:	20070e74 	.word	0x20070e74
   81014:	00080ef5 	.word	0x00080ef5

00081018 <CPU2_D_INIT_PIO>:
   81018:	b580      	push	{r7, lr}
   8101a:	af00      	add	r7, sp, #0
   8101c:	4b3b      	ldr	r3, [pc, #236]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   8101e:	4a3c      	ldr	r2, [pc, #240]	; (81110 <CPU2_D_INIT_PIO+0xf8>)
   81020:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   81024:	4b3b      	ldr	r3, [pc, #236]	; (81114 <CPU2_D_INIT_PIO+0xfc>)
   81026:	4a3a      	ldr	r2, [pc, #232]	; (81110 <CPU2_D_INIT_PIO+0xf8>)
   81028:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   8102c:	4b3a      	ldr	r3, [pc, #232]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   8102e:	4a38      	ldr	r2, [pc, #224]	; (81110 <CPU2_D_INIT_PIO+0xf8>)
   81030:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   81034:	4b39      	ldr	r3, [pc, #228]	; (8111c <CPU2_D_INIT_PIO+0x104>)
   81036:	4a36      	ldr	r2, [pc, #216]	; (81110 <CPU2_D_INIT_PIO+0xf8>)
   81038:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   8103c:	4b33      	ldr	r3, [pc, #204]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   8103e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81042:	665a      	str	r2, [r3, #100]	; 0x64
   81044:	4b31      	ldr	r3, [pc, #196]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   81046:	4a36      	ldr	r2, [pc, #216]	; (81120 <CPU2_D_INIT_PIO+0x108>)
   81048:	605a      	str	r2, [r3, #4]
   8104a:	4b30      	ldr	r3, [pc, #192]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   8104c:	f44f 7240 	mov.w	r2, #768	; 0x300
   81050:	665a      	str	r2, [r3, #100]	; 0x64
   81052:	4b2e      	ldr	r3, [pc, #184]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   81054:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
   81058:	601a      	str	r2, [r3, #0]
   8105a:	4b2c      	ldr	r3, [pc, #176]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   8105c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   81060:	611a      	str	r2, [r3, #16]
   81062:	4b2a      	ldr	r3, [pc, #168]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   81064:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
   81068:	615a      	str	r2, [r3, #20]
   8106a:	4b28      	ldr	r3, [pc, #160]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   8106c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81070:	631a      	str	r2, [r3, #48]	; 0x30
   81072:	4b26      	ldr	r3, [pc, #152]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   81074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81078:	635a      	str	r2, [r3, #52]	; 0x34
   8107a:	4b24      	ldr	r3, [pc, #144]	; (8110c <CPU2_D_INIT_PIO+0xf4>)
   8107c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   81080:	665a      	str	r2, [r3, #100]	; 0x64
   81082:	4b24      	ldr	r3, [pc, #144]	; (81114 <CPU2_D_INIT_PIO+0xfc>)
   81084:	4a27      	ldr	r2, [pc, #156]	; (81124 <CPU2_D_INIT_PIO+0x10c>)
   81086:	601a      	str	r2, [r3, #0]
   81088:	4b22      	ldr	r3, [pc, #136]	; (81114 <CPU2_D_INIT_PIO+0xfc>)
   8108a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   8108e:	611a      	str	r2, [r3, #16]
   81090:	4b20      	ldr	r3, [pc, #128]	; (81114 <CPU2_D_INIT_PIO+0xfc>)
   81092:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81096:	615a      	str	r2, [r3, #20]
   81098:	4b1e      	ldr	r3, [pc, #120]	; (81114 <CPU2_D_INIT_PIO+0xfc>)
   8109a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   8109e:	631a      	str	r2, [r3, #48]	; 0x30
   810a0:	4b1d      	ldr	r3, [pc, #116]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   810a2:	4a21      	ldr	r2, [pc, #132]	; (81128 <CPU2_D_INIT_PIO+0x110>)
   810a4:	601a      	str	r2, [r3, #0]
   810a6:	4b1c      	ldr	r3, [pc, #112]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   810a8:	4a20      	ldr	r2, [pc, #128]	; (8112c <CPU2_D_INIT_PIO+0x114>)
   810aa:	611a      	str	r2, [r3, #16]
   810ac:	4b1a      	ldr	r3, [pc, #104]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   810ae:	4a20      	ldr	r2, [pc, #128]	; (81130 <CPU2_D_INIT_PIO+0x118>)
   810b0:	615a      	str	r2, [r3, #20]
   810b2:	4b19      	ldr	r3, [pc, #100]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   810b4:	4a1f      	ldr	r2, [pc, #124]	; (81134 <CPU2_D_INIT_PIO+0x11c>)
   810b6:	631a      	str	r2, [r3, #48]	; 0x30
   810b8:	4b17      	ldr	r3, [pc, #92]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   810ba:	4a1c      	ldr	r2, [pc, #112]	; (8112c <CPU2_D_INIT_PIO+0x114>)
   810bc:	665a      	str	r2, [r3, #100]	; 0x64
   810be:	4b16      	ldr	r3, [pc, #88]	; (81118 <CPU2_D_INIT_PIO+0x100>)
   810c0:	f44f 0204 	mov.w	r2, #8650752	; 0x840000
   810c4:	635a      	str	r2, [r3, #52]	; 0x34
   810c6:	4b15      	ldr	r3, [pc, #84]	; (8111c <CPU2_D_INIT_PIO+0x104>)
   810c8:	f240 62ef 	movw	r2, #1775	; 0x6ef
   810cc:	601a      	str	r2, [r3, #0]
   810ce:	4b13      	ldr	r3, [pc, #76]	; (8111c <CPU2_D_INIT_PIO+0x104>)
   810d0:	f240 624f 	movw	r2, #1615	; 0x64f
   810d4:	611a      	str	r2, [r3, #16]
   810d6:	4b11      	ldr	r3, [pc, #68]	; (8111c <CPU2_D_INIT_PIO+0x104>)
   810d8:	2220      	movs	r2, #32
   810da:	615a      	str	r2, [r3, #20]
   810dc:	4b0f      	ldr	r3, [pc, #60]	; (8111c <CPU2_D_INIT_PIO+0x104>)
   810de:	f240 624f 	movw	r2, #1615	; 0x64f
   810e2:	631a      	str	r2, [r3, #48]	; 0x30
   810e4:	4b0d      	ldr	r3, [pc, #52]	; (8111c <CPU2_D_INIT_PIO+0x104>)
   810e6:	f240 624f 	movw	r2, #1615	; 0x64f
   810ea:	665a      	str	r2, [r3, #100]	; 0x64
   810ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810f0:	2001      	movs	r0, #1
   810f2:	4b11      	ldr	r3, [pc, #68]	; (81138 <CPU2_D_INIT_PIO+0x120>)
   810f4:	4798      	blx	r3
   810f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810fa:	2000      	movs	r0, #0
   810fc:	4b0e      	ldr	r3, [pc, #56]	; (81138 <CPU2_D_INIT_PIO+0x120>)
   810fe:	4798      	blx	r3
   81100:	490e      	ldr	r1, [pc, #56]	; (8113c <CPU2_D_INIT_PIO+0x124>)
   81102:	2002      	movs	r0, #2
   81104:	4b0c      	ldr	r3, [pc, #48]	; (81138 <CPU2_D_INIT_PIO+0x120>)
   81106:	4798      	blx	r3
   81108:	bf00      	nop
   8110a:	bd80      	pop	{r7, pc}
   8110c:	400e0e00 	.word	0x400e0e00
   81110:	50494f00 	.word	0x50494f00
   81114:	400e1000 	.word	0x400e1000
   81118:	400e1200 	.word	0x400e1200
   8111c:	400e1400 	.word	0x400e1400
   81120:	3e060000 	.word	0x3e060000
   81124:	06008000 	.word	0x06008000
   81128:	018ff06a 	.word	0x018ff06a
   8112c:	008ff002 	.word	0x008ff002
   81130:	01000068 	.word	0x01000068
   81134:	000bf002 	.word	0x000bf002
   81138:	000838fd 	.word	0x000838fd
   8113c:	30000001 	.word	0x30000001

00081140 <CPU2_D_SET_PIO>:
   81140:	b480      	push	{r7}
   81142:	b083      	sub	sp, #12
   81144:	af00      	add	r7, sp, #0
   81146:	6078      	str	r0, [r7, #4]
   81148:	6039      	str	r1, [r7, #0]
   8114a:	687b      	ldr	r3, [r7, #4]
   8114c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81150:	d014      	beq.n	8117c <CPU2_D_SET_PIO+0x3c>
   81152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81156:	d803      	bhi.n	81160 <CPU2_D_SET_PIO+0x20>
   81158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8115c:	d007      	beq.n	8116e <CPU2_D_SET_PIO+0x2e>
   8115e:	e022      	b.n	811a6 <CPU2_D_SET_PIO+0x66>
   81160:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   81164:	d011      	beq.n	8118a <CPU2_D_SET_PIO+0x4a>
   81166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8116a:	d015      	beq.n	81198 <CPU2_D_SET_PIO+0x58>
   8116c:	e01b      	b.n	811a6 <CPU2_D_SET_PIO+0x66>
   8116e:	4a11      	ldr	r2, [pc, #68]	; (811b4 <CPU2_D_SET_PIO+0x74>)
   81170:	2101      	movs	r1, #1
   81172:	683b      	ldr	r3, [r7, #0]
   81174:	fa01 f303 	lsl.w	r3, r1, r3
   81178:	6313      	str	r3, [r2, #48]	; 0x30
   8117a:	e014      	b.n	811a6 <CPU2_D_SET_PIO+0x66>
   8117c:	4a0e      	ldr	r2, [pc, #56]	; (811b8 <CPU2_D_SET_PIO+0x78>)
   8117e:	2101      	movs	r1, #1
   81180:	683b      	ldr	r3, [r7, #0]
   81182:	fa01 f303 	lsl.w	r3, r1, r3
   81186:	6313      	str	r3, [r2, #48]	; 0x30
   81188:	e00d      	b.n	811a6 <CPU2_D_SET_PIO+0x66>
   8118a:	4a0c      	ldr	r2, [pc, #48]	; (811bc <CPU2_D_SET_PIO+0x7c>)
   8118c:	2101      	movs	r1, #1
   8118e:	683b      	ldr	r3, [r7, #0]
   81190:	fa01 f303 	lsl.w	r3, r1, r3
   81194:	6313      	str	r3, [r2, #48]	; 0x30
   81196:	e006      	b.n	811a6 <CPU2_D_SET_PIO+0x66>
   81198:	4a09      	ldr	r2, [pc, #36]	; (811c0 <CPU2_D_SET_PIO+0x80>)
   8119a:	2101      	movs	r1, #1
   8119c:	683b      	ldr	r3, [r7, #0]
   8119e:	fa01 f303 	lsl.w	r3, r1, r3
   811a2:	6313      	str	r3, [r2, #48]	; 0x30
   811a4:	bf00      	nop
   811a6:	2300      	movs	r3, #0
   811a8:	4618      	mov	r0, r3
   811aa:	370c      	adds	r7, #12
   811ac:	46bd      	mov	sp, r7
   811ae:	bc80      	pop	{r7}
   811b0:	4770      	bx	lr
   811b2:	bf00      	nop
   811b4:	400e0e00 	.word	0x400e0e00
   811b8:	400e1000 	.word	0x400e1000
   811bc:	400e1200 	.word	0x400e1200
   811c0:	400e1400 	.word	0x400e1400

000811c4 <CPU2_D_RESET_PIO>:
   811c4:	b480      	push	{r7}
   811c6:	b083      	sub	sp, #12
   811c8:	af00      	add	r7, sp, #0
   811ca:	6078      	str	r0, [r7, #4]
   811cc:	6039      	str	r1, [r7, #0]
   811ce:	687b      	ldr	r3, [r7, #4]
   811d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811d4:	d014      	beq.n	81200 <CPU2_D_RESET_PIO+0x3c>
   811d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811da:	d803      	bhi.n	811e4 <CPU2_D_RESET_PIO+0x20>
   811dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   811e0:	d007      	beq.n	811f2 <CPU2_D_RESET_PIO+0x2e>
   811e2:	e022      	b.n	8122a <CPU2_D_RESET_PIO+0x66>
   811e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   811e8:	d011      	beq.n	8120e <CPU2_D_RESET_PIO+0x4a>
   811ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   811ee:	d015      	beq.n	8121c <CPU2_D_RESET_PIO+0x58>
   811f0:	e01b      	b.n	8122a <CPU2_D_RESET_PIO+0x66>
   811f2:	4a11      	ldr	r2, [pc, #68]	; (81238 <CPU2_D_RESET_PIO+0x74>)
   811f4:	2101      	movs	r1, #1
   811f6:	683b      	ldr	r3, [r7, #0]
   811f8:	fa01 f303 	lsl.w	r3, r1, r3
   811fc:	6353      	str	r3, [r2, #52]	; 0x34
   811fe:	e014      	b.n	8122a <CPU2_D_RESET_PIO+0x66>
   81200:	4a0e      	ldr	r2, [pc, #56]	; (8123c <CPU2_D_RESET_PIO+0x78>)
   81202:	2101      	movs	r1, #1
   81204:	683b      	ldr	r3, [r7, #0]
   81206:	fa01 f303 	lsl.w	r3, r1, r3
   8120a:	6353      	str	r3, [r2, #52]	; 0x34
   8120c:	e00d      	b.n	8122a <CPU2_D_RESET_PIO+0x66>
   8120e:	4a0c      	ldr	r2, [pc, #48]	; (81240 <CPU2_D_RESET_PIO+0x7c>)
   81210:	2101      	movs	r1, #1
   81212:	683b      	ldr	r3, [r7, #0]
   81214:	fa01 f303 	lsl.w	r3, r1, r3
   81218:	6353      	str	r3, [r2, #52]	; 0x34
   8121a:	e006      	b.n	8122a <CPU2_D_RESET_PIO+0x66>
   8121c:	4a09      	ldr	r2, [pc, #36]	; (81244 <CPU2_D_RESET_PIO+0x80>)
   8121e:	2101      	movs	r1, #1
   81220:	683b      	ldr	r3, [r7, #0]
   81222:	fa01 f303 	lsl.w	r3, r1, r3
   81226:	6353      	str	r3, [r2, #52]	; 0x34
   81228:	bf00      	nop
   8122a:	2300      	movs	r3, #0
   8122c:	4618      	mov	r0, r3
   8122e:	370c      	adds	r7, #12
   81230:	46bd      	mov	sp, r7
   81232:	bc80      	pop	{r7}
   81234:	4770      	bx	lr
   81236:	bf00      	nop
   81238:	400e0e00 	.word	0x400e0e00
   8123c:	400e1000 	.word	0x400e1000
   81240:	400e1200 	.word	0x400e1200
   81244:	400e1400 	.word	0x400e1400

00081248 <CPU2_D_READ_PIO>:
   81248:	b480      	push	{r7}
   8124a:	b085      	sub	sp, #20
   8124c:	af00      	add	r7, sp, #0
   8124e:	6078      	str	r0, [r7, #4]
   81250:	6039      	str	r1, [r7, #0]
   81252:	2300      	movs	r3, #0
   81254:	81fb      	strh	r3, [r7, #14]
   81256:	687b      	ldr	r3, [r7, #4]
   81258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8125c:	d01a      	beq.n	81294 <CPU2_D_READ_PIO+0x4c>
   8125e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81262:	d803      	bhi.n	8126c <CPU2_D_READ_PIO+0x24>
   81264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81268:	d007      	beq.n	8127a <CPU2_D_READ_PIO+0x32>
   8126a:	e03c      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   8126c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   81270:	d01d      	beq.n	812ae <CPU2_D_READ_PIO+0x66>
   81272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81276:	d029      	beq.n	812cc <CPU2_D_READ_PIO+0x84>
   81278:	e035      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   8127a:	4b1d      	ldr	r3, [pc, #116]	; (812f0 <CPU2_D_READ_PIO+0xa8>)
   8127c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8127e:	2101      	movs	r1, #1
   81280:	683a      	ldr	r2, [r7, #0]
   81282:	fa01 f202 	lsl.w	r2, r1, r2
   81286:	4013      	ands	r3, r2
   81288:	2b00      	cmp	r3, #0
   8128a:	d101      	bne.n	81290 <CPU2_D_READ_PIO+0x48>
   8128c:	2300      	movs	r3, #0
   8128e:	e02a      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   81290:	2301      	movs	r3, #1
   81292:	e028      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   81294:	4b17      	ldr	r3, [pc, #92]	; (812f4 <CPU2_D_READ_PIO+0xac>)
   81296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81298:	2101      	movs	r1, #1
   8129a:	683a      	ldr	r2, [r7, #0]
   8129c:	fa01 f202 	lsl.w	r2, r1, r2
   812a0:	4013      	ands	r3, r2
   812a2:	2b00      	cmp	r3, #0
   812a4:	d101      	bne.n	812aa <CPU2_D_READ_PIO+0x62>
   812a6:	2300      	movs	r3, #0
   812a8:	e01d      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   812aa:	2301      	movs	r3, #1
   812ac:	e01b      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   812ae:	4b12      	ldr	r3, [pc, #72]	; (812f8 <CPU2_D_READ_PIO+0xb0>)
   812b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812b2:	2101      	movs	r1, #1
   812b4:	683a      	ldr	r2, [r7, #0]
   812b6:	fa01 f202 	lsl.w	r2, r1, r2
   812ba:	4013      	ands	r3, r2
   812bc:	2b00      	cmp	r3, #0
   812be:	d101      	bne.n	812c4 <CPU2_D_READ_PIO+0x7c>
   812c0:	2300      	movs	r3, #0
   812c2:	e010      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   812c4:	2301      	movs	r3, #1
   812c6:	81fb      	strh	r3, [r7, #14]
   812c8:	89fb      	ldrh	r3, [r7, #14]
   812ca:	e00c      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   812cc:	4b0b      	ldr	r3, [pc, #44]	; (812fc <CPU2_D_READ_PIO+0xb4>)
   812ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812d0:	2101      	movs	r1, #1
   812d2:	683a      	ldr	r2, [r7, #0]
   812d4:	fa01 f202 	lsl.w	r2, r1, r2
   812d8:	4013      	ands	r3, r2
   812da:	2b00      	cmp	r3, #0
   812dc:	d101      	bne.n	812e2 <CPU2_D_READ_PIO+0x9a>
   812de:	2300      	movs	r3, #0
   812e0:	e001      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   812e2:	2301      	movs	r3, #1
   812e4:	e7ff      	b.n	812e6 <CPU2_D_READ_PIO+0x9e>
   812e6:	4618      	mov	r0, r3
   812e8:	3714      	adds	r7, #20
   812ea:	46bd      	mov	sp, r7
   812ec:	bc80      	pop	{r7}
   812ee:	4770      	bx	lr
   812f0:	400e0e00 	.word	0x400e0e00
   812f4:	400e1000 	.word	0x400e1000
   812f8:	400e1200 	.word	0x400e1200
   812fc:	400e1400 	.word	0x400e1400

00081300 <NVIC_EnableIRQ>:
   81300:	b480      	push	{r7}
   81302:	b083      	sub	sp, #12
   81304:	af00      	add	r7, sp, #0
   81306:	4603      	mov	r3, r0
   81308:	71fb      	strb	r3, [r7, #7]
   8130a:	4908      	ldr	r1, [pc, #32]	; (8132c <NVIC_EnableIRQ+0x2c>)
   8130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81310:	095b      	lsrs	r3, r3, #5
   81312:	79fa      	ldrb	r2, [r7, #7]
   81314:	f002 021f 	and.w	r2, r2, #31
   81318:	2001      	movs	r0, #1
   8131a:	fa00 f202 	lsl.w	r2, r0, r2
   8131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   81322:	bf00      	nop
   81324:	370c      	adds	r7, #12
   81326:	46bd      	mov	sp, r7
   81328:	bc80      	pop	{r7}
   8132a:	4770      	bx	lr
   8132c:	e000e100 	.word	0xe000e100

00081330 <NVIC_DisableIRQ>:
   81330:	b480      	push	{r7}
   81332:	b083      	sub	sp, #12
   81334:	af00      	add	r7, sp, #0
   81336:	4603      	mov	r3, r0
   81338:	71fb      	strb	r3, [r7, #7]
   8133a:	4909      	ldr	r1, [pc, #36]	; (81360 <NVIC_DisableIRQ+0x30>)
   8133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81340:	095b      	lsrs	r3, r3, #5
   81342:	79fa      	ldrb	r2, [r7, #7]
   81344:	f002 021f 	and.w	r2, r2, #31
   81348:	2001      	movs	r0, #1
   8134a:	fa00 f202 	lsl.w	r2, r0, r2
   8134e:	3320      	adds	r3, #32
   81350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   81354:	bf00      	nop
   81356:	370c      	adds	r7, #12
   81358:	46bd      	mov	sp, r7
   8135a:	bc80      	pop	{r7}
   8135c:	4770      	bx	lr
   8135e:	bf00      	nop
   81360:	e000e100 	.word	0xe000e100

00081364 <NVIC_ClearPendingIRQ>:
   81364:	b480      	push	{r7}
   81366:	b083      	sub	sp, #12
   81368:	af00      	add	r7, sp, #0
   8136a:	4603      	mov	r3, r0
   8136c:	71fb      	strb	r3, [r7, #7]
   8136e:	4909      	ldr	r1, [pc, #36]	; (81394 <NVIC_ClearPendingIRQ+0x30>)
   81370:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81374:	095b      	lsrs	r3, r3, #5
   81376:	79fa      	ldrb	r2, [r7, #7]
   81378:	f002 021f 	and.w	r2, r2, #31
   8137c:	2001      	movs	r0, #1
   8137e:	fa00 f202 	lsl.w	r2, r0, r2
   81382:	3360      	adds	r3, #96	; 0x60
   81384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   81388:	bf00      	nop
   8138a:	370c      	adds	r7, #12
   8138c:	46bd      	mov	sp, r7
   8138e:	bc80      	pop	{r7}
   81390:	4770      	bx	lr
   81392:	bf00      	nop
   81394:	e000e100 	.word	0xe000e100

00081398 <NVIC_SetPriority>:
   81398:	b480      	push	{r7}
   8139a:	b083      	sub	sp, #12
   8139c:	af00      	add	r7, sp, #0
   8139e:	4603      	mov	r3, r0
   813a0:	6039      	str	r1, [r7, #0]
   813a2:	71fb      	strb	r3, [r7, #7]
   813a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   813a8:	2b00      	cmp	r3, #0
   813aa:	da0b      	bge.n	813c4 <NVIC_SetPriority+0x2c>
   813ac:	490d      	ldr	r1, [pc, #52]	; (813e4 <NVIC_SetPriority+0x4c>)
   813ae:	79fb      	ldrb	r3, [r7, #7]
   813b0:	f003 030f 	and.w	r3, r3, #15
   813b4:	3b04      	subs	r3, #4
   813b6:	683a      	ldr	r2, [r7, #0]
   813b8:	b2d2      	uxtb	r2, r2
   813ba:	0112      	lsls	r2, r2, #4
   813bc:	b2d2      	uxtb	r2, r2
   813be:	440b      	add	r3, r1
   813c0:	761a      	strb	r2, [r3, #24]
   813c2:	e009      	b.n	813d8 <NVIC_SetPriority+0x40>
   813c4:	4908      	ldr	r1, [pc, #32]	; (813e8 <NVIC_SetPriority+0x50>)
   813c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   813ca:	683a      	ldr	r2, [r7, #0]
   813cc:	b2d2      	uxtb	r2, r2
   813ce:	0112      	lsls	r2, r2, #4
   813d0:	b2d2      	uxtb	r2, r2
   813d2:	440b      	add	r3, r1
   813d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   813d8:	bf00      	nop
   813da:	370c      	adds	r7, #12
   813dc:	46bd      	mov	sp, r7
   813de:	bc80      	pop	{r7}
   813e0:	4770      	bx	lr
   813e2:	bf00      	nop
   813e4:	e000ed00 	.word	0xe000ed00
   813e8:	e000e100 	.word	0xe000e100

000813ec <CPU2_D_INIT_INT>:
   813ec:	b580      	push	{r7, lr}
   813ee:	af00      	add	r7, sp, #0
   813f0:	2016      	movs	r0, #22
   813f2:	4b29      	ldr	r3, [pc, #164]	; (81498 <CPU2_D_INIT_INT+0xac>)
   813f4:	4798      	blx	r3
   813f6:	2016      	movs	r0, #22
   813f8:	4b28      	ldr	r3, [pc, #160]	; (8149c <CPU2_D_INIT_INT+0xb0>)
   813fa:	4798      	blx	r3
   813fc:	2100      	movs	r1, #0
   813fe:	2016      	movs	r0, #22
   81400:	4b27      	ldr	r3, [pc, #156]	; (814a0 <CPU2_D_INIT_INT+0xb4>)
   81402:	4798      	blx	r3
   81404:	2016      	movs	r0, #22
   81406:	4b27      	ldr	r3, [pc, #156]	; (814a4 <CPU2_D_INIT_INT+0xb8>)
   81408:	4798      	blx	r3
   8140a:	2008      	movs	r0, #8
   8140c:	4b22      	ldr	r3, [pc, #136]	; (81498 <CPU2_D_INIT_INT+0xac>)
   8140e:	4798      	blx	r3
   81410:	2008      	movs	r0, #8
   81412:	4b22      	ldr	r3, [pc, #136]	; (8149c <CPU2_D_INIT_INT+0xb0>)
   81414:	4798      	blx	r3
   81416:	2100      	movs	r1, #0
   81418:	2008      	movs	r0, #8
   8141a:	4b21      	ldr	r3, [pc, #132]	; (814a0 <CPU2_D_INIT_INT+0xb4>)
   8141c:	4798      	blx	r3
   8141e:	2008      	movs	r0, #8
   81420:	4b20      	ldr	r3, [pc, #128]	; (814a4 <CPU2_D_INIT_INT+0xb8>)
   81422:	4798      	blx	r3
   81424:	2101      	movs	r1, #1
   81426:	4820      	ldr	r0, [pc, #128]	; (814a8 <CPU2_D_INIT_INT+0xbc>)
   81428:	4b20      	ldr	r3, [pc, #128]	; (814ac <CPU2_D_INIT_INT+0xc0>)
   8142a:	4798      	blx	r3
   8142c:	201b      	movs	r0, #27
   8142e:	4b1a      	ldr	r3, [pc, #104]	; (81498 <CPU2_D_INIT_INT+0xac>)
   81430:	4798      	blx	r3
   81432:	201b      	movs	r0, #27
   81434:	4b19      	ldr	r3, [pc, #100]	; (8149c <CPU2_D_INIT_INT+0xb0>)
   81436:	4798      	blx	r3
   81438:	2100      	movs	r1, #0
   8143a:	201b      	movs	r0, #27
   8143c:	4b18      	ldr	r3, [pc, #96]	; (814a0 <CPU2_D_INIT_INT+0xb4>)
   8143e:	4798      	blx	r3
   81440:	201b      	movs	r0, #27
   81442:	4b18      	ldr	r3, [pc, #96]	; (814a4 <CPU2_D_INIT_INT+0xb8>)
   81444:	4798      	blx	r3
   81446:	201c      	movs	r0, #28
   81448:	4b13      	ldr	r3, [pc, #76]	; (81498 <CPU2_D_INIT_INT+0xac>)
   8144a:	4798      	blx	r3
   8144c:	201c      	movs	r0, #28
   8144e:	4b13      	ldr	r3, [pc, #76]	; (8149c <CPU2_D_INIT_INT+0xb0>)
   81450:	4798      	blx	r3
   81452:	2100      	movs	r1, #0
   81454:	201c      	movs	r0, #28
   81456:	4b12      	ldr	r3, [pc, #72]	; (814a0 <CPU2_D_INIT_INT+0xb4>)
   81458:	4798      	blx	r3
   8145a:	201c      	movs	r0, #28
   8145c:	4b11      	ldr	r3, [pc, #68]	; (814a4 <CPU2_D_INIT_INT+0xb8>)
   8145e:	4798      	blx	r3
   81460:	201e      	movs	r0, #30
   81462:	4b0d      	ldr	r3, [pc, #52]	; (81498 <CPU2_D_INIT_INT+0xac>)
   81464:	4798      	blx	r3
   81466:	201e      	movs	r0, #30
   81468:	4b0c      	ldr	r3, [pc, #48]	; (8149c <CPU2_D_INIT_INT+0xb0>)
   8146a:	4798      	blx	r3
   8146c:	2100      	movs	r1, #0
   8146e:	201e      	movs	r0, #30
   81470:	4b0b      	ldr	r3, [pc, #44]	; (814a0 <CPU2_D_INIT_INT+0xb4>)
   81472:	4798      	blx	r3
   81474:	201e      	movs	r0, #30
   81476:	4b0b      	ldr	r3, [pc, #44]	; (814a4 <CPU2_D_INIT_INT+0xb8>)
   81478:	4798      	blx	r3
   8147a:	2021      	movs	r0, #33	; 0x21
   8147c:	4b06      	ldr	r3, [pc, #24]	; (81498 <CPU2_D_INIT_INT+0xac>)
   8147e:	4798      	blx	r3
   81480:	2021      	movs	r0, #33	; 0x21
   81482:	4b06      	ldr	r3, [pc, #24]	; (8149c <CPU2_D_INIT_INT+0xb0>)
   81484:	4798      	blx	r3
   81486:	2100      	movs	r1, #0
   81488:	2021      	movs	r0, #33	; 0x21
   8148a:	4b05      	ldr	r3, [pc, #20]	; (814a0 <CPU2_D_INIT_INT+0xb4>)
   8148c:	4798      	blx	r3
   8148e:	2021      	movs	r0, #33	; 0x21
   81490:	4b04      	ldr	r3, [pc, #16]	; (814a4 <CPU2_D_INIT_INT+0xb8>)
   81492:	4798      	blx	r3
   81494:	bf00      	nop
   81496:	bd80      	pop	{r7, pc}
   81498:	00081331 	.word	0x00081331
   8149c:	00081365 	.word	0x00081365
   814a0:	00081399 	.word	0x00081399
   814a4:	00081301 	.word	0x00081301
   814a8:	400e0800 	.word	0x400e0800
   814ac:	00082139 	.word	0x00082139

000814b0 <CPU2_D_INIT_PWM>:
   814b0:	b480      	push	{r7}
   814b2:	af00      	add	r7, sp, #0
   814b4:	4b0d      	ldr	r3, [pc, #52]	; (814ec <CPU2_D_INIT_PWM+0x3c>)
   814b6:	4a0e      	ldr	r2, [pc, #56]	; (814f0 <CPU2_D_INIT_PWM+0x40>)
   814b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   814bc:	4b0b      	ldr	r3, [pc, #44]	; (814ec <CPU2_D_INIT_PWM+0x3c>)
   814be:	4a0d      	ldr	r2, [pc, #52]	; (814f4 <CPU2_D_INIT_PWM+0x44>)
   814c0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
   814c4:	4b09      	ldr	r3, [pc, #36]	; (814ec <CPU2_D_INIT_PWM+0x3c>)
   814c6:	22ff      	movs	r2, #255	; 0xff
   814c8:	609a      	str	r2, [r3, #8]
   814ca:	4b08      	ldr	r3, [pc, #32]	; (814ec <CPU2_D_INIT_PWM+0x3c>)
   814cc:	f640 2241 	movw	r2, #2625	; 0xa41
   814d0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
   814d4:	4b05      	ldr	r3, [pc, #20]	; (814ec <CPU2_D_INIT_PWM+0x3c>)
   814d6:	f240 3297 	movw	r2, #919	; 0x397
   814da:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
   814de:	4b03      	ldr	r3, [pc, #12]	; (814ec <CPU2_D_INIT_PWM+0x3c>)
   814e0:	2210      	movs	r2, #16
   814e2:	605a      	str	r2, [r3, #4]
   814e4:	bf00      	nop
   814e6:	46bd      	mov	sp, r7
   814e8:	bc80      	pop	{r7}
   814ea:	4770      	bx	lr
   814ec:	40094000 	.word	0x40094000
   814f0:	50574d00 	.word	0x50574d00
   814f4:	00070605 	.word	0x00070605

000814f8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   814f8:	b480      	push	{r7}
   814fa:	b083      	sub	sp, #12
   814fc:	af00      	add	r7, sp, #0
   814fe:	4603      	mov	r3, r0
   81500:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81502:	4909      	ldr	r1, [pc, #36]	; (81528 <NVIC_ClearPendingIRQ+0x30>)
   81504:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81508:	095b      	lsrs	r3, r3, #5
   8150a:	79fa      	ldrb	r2, [r7, #7]
   8150c:	f002 021f 	and.w	r2, r2, #31
   81510:	2001      	movs	r0, #1
   81512:	fa00 f202 	lsl.w	r2, r0, r2
   81516:	3360      	adds	r3, #96	; 0x60
   81518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8151c:	bf00      	nop
   8151e:	370c      	adds	r7, #12
   81520:	46bd      	mov	sp, r7
   81522:	bc80      	pop	{r7}
   81524:	4770      	bx	lr
   81526:	bf00      	nop
   81528:	e000e100 	.word	0xe000e100

0008152c <TC0_Handler>:
volatile uint32_t i2c_counter = 0 ;
extern bool sv_acc_flag, sv_end_flag, sv_rxrdy_flag;
volatile uint8_t spi_count=0;
uint32_t time_tick = 0;
void TC0_Handler()
{
   8152c:	b580      	push	{r7, lr}
   8152e:	af00      	add	r7, sp, #0
	spi_count++;
   81530:	4b13      	ldr	r3, [pc, #76]	; (81580 <TC0_Handler+0x54>)
   81532:	781b      	ldrb	r3, [r3, #0]
   81534:	b2db      	uxtb	r3, r3
   81536:	3301      	adds	r3, #1
   81538:	b2da      	uxtb	r2, r3
   8153a:	4b11      	ldr	r3, [pc, #68]	; (81580 <TC0_Handler+0x54>)
   8153c:	701a      	strb	r2, [r3, #0]
	printf("count = %d\n",fedbck_cnt);
   8153e:	4b11      	ldr	r3, [pc, #68]	; (81584 <TC0_Handler+0x58>)
   81540:	681b      	ldr	r3, [r3, #0]
   81542:	4619      	mov	r1, r3
   81544:	4810      	ldr	r0, [pc, #64]	; (81588 <TC0_Handler+0x5c>)
   81546:	4b11      	ldr	r3, [pc, #68]	; (8158c <TC0_Handler+0x60>)
   81548:	4798      	blx	r3
	fedbck_cnt1=fedbck_cnt;
   8154a:	4b0e      	ldr	r3, [pc, #56]	; (81584 <TC0_Handler+0x58>)
   8154c:	681b      	ldr	r3, [r3, #0]
   8154e:	4a10      	ldr	r2, [pc, #64]	; (81590 <TC0_Handler+0x64>)
   81550:	6013      	str	r3, [r2, #0]
	
	if (modify==1)                                   // Timer interrupt every 10 sec
   81552:	4b10      	ldr	r3, [pc, #64]	; (81594 <TC0_Handler+0x68>)
   81554:	781b      	ldrb	r3, [r3, #0]
   81556:	b2db      	uxtb	r3, r3
   81558:	2b01      	cmp	r3, #1
   8155a:	d10a      	bne.n	81572 <TC0_Handler+0x46>
	{
		count_2++;
   8155c:	4b0e      	ldr	r3, [pc, #56]	; (81598 <TC0_Handler+0x6c>)
   8155e:	681b      	ldr	r3, [r3, #0]
   81560:	3301      	adds	r3, #1
   81562:	4a0d      	ldr	r2, [pc, #52]	; (81598 <TC0_Handler+0x6c>)
   81564:	6013      	str	r3, [r2, #0]
		flag_1=1;
   81566:	4b0d      	ldr	r3, [pc, #52]	; (8159c <TC0_Handler+0x70>)
   81568:	2201      	movs	r2, #1
   8156a:	701a      	strb	r2, [r3, #0]
		fedbck_cnt=0;
   8156c:	4b05      	ldr	r3, [pc, #20]	; (81584 <TC0_Handler+0x58>)
   8156e:	2200      	movs	r2, #0
   81570:	601a      	str	r2, [r3, #0]
	{
		count = 0;
		PIOD->PIO_ODSR = array[count].A;
		PIOC->PIO_ODSR = array[count].B;
	}*/
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   81572:	2100      	movs	r1, #0
   81574:	480a      	ldr	r0, [pc, #40]	; (815a0 <TC0_Handler+0x74>)
   81576:	4b0b      	ldr	r3, [pc, #44]	; (815a4 <TC0_Handler+0x78>)
   81578:	4798      	blx	r3
	{
		
	}
}
   8157a:	bf00      	nop
   8157c:	bd80      	pop	{r7, pc}
   8157e:	bf00      	nop
   81580:	20070968 	.word	0x20070968
   81584:	2007095c 	.word	0x2007095c
   81588:	00087620 	.word	0x00087620
   8158c:	000846d5 	.word	0x000846d5
   81590:	20070960 	.word	0x20070960
   81594:	20070973 	.word	0x20070973
   81598:	20070964 	.word	0x20070964
   8159c:	20070958 	.word	0x20070958
   815a0:	40080000 	.word	0x40080000
   815a4:	000820b5 	.word	0x000820b5

000815a8 <TC1_Handler>:

void TC1_Handler()
{
   815a8:	b598      	push	{r3, r4, r7, lr}
   815aa:	af00      	add	r7, sp, #0
	cnt++;
   815ac:	4b29      	ldr	r3, [pc, #164]	; (81654 <TC1_Handler+0xac>)
   815ae:	681b      	ldr	r3, [r3, #0]
   815b0:	3301      	adds	r3, #1
   815b2:	4a28      	ldr	r2, [pc, #160]	; (81654 <TC1_Handler+0xac>)
   815b4:	6013      	str	r3, [r2, #0]
	if (mode == 1)
   815b6:	4b28      	ldr	r3, [pc, #160]	; (81658 <TC1_Handler+0xb0>)
   815b8:	681b      	ldr	r3, [r3, #0]
   815ba:	2b01      	cmp	r3, #1
   815bc:	d122      	bne.n	81604 <TC1_Handler+0x5c>
	{
		if ( rc == default_speed)
   815be:	4b27      	ldr	r3, [pc, #156]	; (8165c <TC1_Handler+0xb4>)
   815c0:	681a      	ldr	r2, [r3, #0]
   815c2:	4b27      	ldr	r3, [pc, #156]	; (81660 <TC1_Handler+0xb8>)
   815c4:	681b      	ldr	r3, [r3, #0]
   815c6:	429a      	cmp	r2, r3
   815c8:	d104      	bne.n	815d4 <TC1_Handler+0x2c>
		{
		//printf("timer stop\n");
			tc_stop(TC0,1);                                   // Timer interrupt based on RC value
   815ca:	2101      	movs	r1, #1
   815cc:	4825      	ldr	r0, [pc, #148]	; (81664 <TC1_Handler+0xbc>)
   815ce:	4b26      	ldr	r3, [pc, #152]	; (81668 <TC1_Handler+0xc0>)
   815d0:	4798      	blx	r3
   815d2:	e039      	b.n	81648 <TC1_Handler+0xa0>
		}
		else
		{
			if (cnt == 2)
   815d4:	4b1f      	ldr	r3, [pc, #124]	; (81654 <TC1_Handler+0xac>)
   815d6:	681b      	ldr	r3, [r3, #0]
   815d8:	2b02      	cmp	r3, #2
   815da:	d135      	bne.n	81648 <TC1_Handler+0xa0>
			{
				//printf("temer2\n");
				rc = rc-1;
   815dc:	4b1f      	ldr	r3, [pc, #124]	; (8165c <TC1_Handler+0xb4>)
   815de:	681b      	ldr	r3, [r3, #0]
   815e0:	3b01      	subs	r3, #1
   815e2:	4a1e      	ldr	r2, [pc, #120]	; (8165c <TC1_Handler+0xb4>)
   815e4:	6013      	str	r3, [r2, #0]
				tc_stop(TC0,0);
   815e6:	2100      	movs	r1, #0
   815e8:	481e      	ldr	r0, [pc, #120]	; (81664 <TC1_Handler+0xbc>)
   815ea:	4b1f      	ldr	r3, [pc, #124]	; (81668 <TC1_Handler+0xc0>)
   815ec:	4798      	blx	r3
				//tc_write_rc(TC0,0,rc);
				startTimer1(TC0,0,TC0_IRQn,rc);
   815ee:	4b1b      	ldr	r3, [pc, #108]	; (8165c <TC1_Handler+0xb4>)
   815f0:	681b      	ldr	r3, [r3, #0]
   815f2:	221b      	movs	r2, #27
   815f4:	2100      	movs	r1, #0
   815f6:	481b      	ldr	r0, [pc, #108]	; (81664 <TC1_Handler+0xbc>)
   815f8:	4c1c      	ldr	r4, [pc, #112]	; (8166c <TC1_Handler+0xc4>)
   815fa:	47a0      	blx	r4
				cnt = 0;
   815fc:	4b15      	ldr	r3, [pc, #84]	; (81654 <TC1_Handler+0xac>)
   815fe:	2200      	movs	r2, #0
   81600:	601a      	str	r2, [r3, #0]
   81602:	e021      	b.n	81648 <TC1_Handler+0xa0>
			}
		}
	}
	else if (mode == 0)
   81604:	4b14      	ldr	r3, [pc, #80]	; (81658 <TC1_Handler+0xb0>)
   81606:	681b      	ldr	r3, [r3, #0]
   81608:	2b00      	cmp	r3, #0
   8160a:	d11d      	bne.n	81648 <TC1_Handler+0xa0>
	{
		if ( rc == default_speed)
   8160c:	4b13      	ldr	r3, [pc, #76]	; (8165c <TC1_Handler+0xb4>)
   8160e:	681a      	ldr	r2, [r3, #0]
   81610:	4b13      	ldr	r3, [pc, #76]	; (81660 <TC1_Handler+0xb8>)
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	429a      	cmp	r2, r3
   81616:	d104      	bne.n	81622 <TC1_Handler+0x7a>
		{
			tc_stop(TC0,1);
   81618:	2101      	movs	r1, #1
   8161a:	4812      	ldr	r0, [pc, #72]	; (81664 <TC1_Handler+0xbc>)
   8161c:	4b12      	ldr	r3, [pc, #72]	; (81668 <TC1_Handler+0xc0>)
   8161e:	4798      	blx	r3
   81620:	e012      	b.n	81648 <TC1_Handler+0xa0>
		}
		else
		{
			if (cnt == 2)
   81622:	4b0c      	ldr	r3, [pc, #48]	; (81654 <TC1_Handler+0xac>)
   81624:	681b      	ldr	r3, [r3, #0]
   81626:	2b02      	cmp	r3, #2
   81628:	d10e      	bne.n	81648 <TC1_Handler+0xa0>
			{
				
				rc = rc+1;
   8162a:	4b0c      	ldr	r3, [pc, #48]	; (8165c <TC1_Handler+0xb4>)
   8162c:	681b      	ldr	r3, [r3, #0]
   8162e:	3301      	adds	r3, #1
   81630:	4a0a      	ldr	r2, [pc, #40]	; (8165c <TC1_Handler+0xb4>)
   81632:	6013      	str	r3, [r2, #0]
				tc_write_rc(TC0,0,rc);
   81634:	4b09      	ldr	r3, [pc, #36]	; (8165c <TC1_Handler+0xb4>)
   81636:	681b      	ldr	r3, [r3, #0]
   81638:	461a      	mov	r2, r3
   8163a:	2100      	movs	r1, #0
   8163c:	4809      	ldr	r0, [pc, #36]	; (81664 <TC1_Handler+0xbc>)
   8163e:	4b0c      	ldr	r3, [pc, #48]	; (81670 <TC1_Handler+0xc8>)
   81640:	4798      	blx	r3
				cnt = 0;
   81642:	4b04      	ldr	r3, [pc, #16]	; (81654 <TC1_Handler+0xac>)
   81644:	2200      	movs	r2, #0
   81646:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   81648:	2101      	movs	r1, #1
   8164a:	4806      	ldr	r0, [pc, #24]	; (81664 <TC1_Handler+0xbc>)
   8164c:	4b09      	ldr	r3, [pc, #36]	; (81674 <TC1_Handler+0xcc>)
   8164e:	4798      	blx	r3
	{
		
	}
}
   81650:	bf00      	nop
   81652:	bd98      	pop	{r3, r4, r7, pc}
   81654:	20070e84 	.word	0x20070e84
   81658:	20070eb4 	.word	0x20070eb4
   8165c:	20070e98 	.word	0x20070e98
   81660:	20070004 	.word	0x20070004
   81664:	40080000 	.word	0x40080000
   81668:	00082049 	.word	0x00082049
   8166c:	00081b69 	.word	0x00081b69
   81670:	00082069 	.word	0x00082069
   81674:	000820b5 	.word	0x000820b5

00081678 <TC2_Handler>:

void TC2_Handler()
{
   81678:	b480      	push	{r7}
   8167a:	af00      	add	r7, sp, #0
	
	
	if(time_tick++ > 65000)
   8167c:	4b07      	ldr	r3, [pc, #28]	; (8169c <TC2_Handler+0x24>)
   8167e:	681b      	ldr	r3, [r3, #0]
   81680:	1c5a      	adds	r2, r3, #1
   81682:	4906      	ldr	r1, [pc, #24]	; (8169c <TC2_Handler+0x24>)
   81684:	600a      	str	r2, [r1, #0]
   81686:	f64f 52e8 	movw	r2, #65000	; 0xfde8
   8168a:	4293      	cmp	r3, r2
   8168c:	d902      	bls.n	81694 <TC2_Handler+0x1c>
	{
		time_tick = 0;
   8168e:	4b03      	ldr	r3, [pc, #12]	; (8169c <TC2_Handler+0x24>)
   81690:	2200      	movs	r2, #0
   81692:	601a      	str	r2, [r3, #0]
// 	}
// 	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
// 	{
// 		
// 	}
}
   81694:	bf00      	nop
   81696:	46bd      	mov	sp, r7
   81698:	bc80      	pop	{r7}
   8169a:	4770      	bx	lr
   8169c:	20070954 	.word	0x20070954

000816a0 <TC6_Handler>:
void TC6_Handler()
{
   816a0:	b580      	push	{r7, lr}
   816a2:	b086      	sub	sp, #24
   816a4:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   816a6:	2021      	movs	r0, #33	; 0x21
   816a8:	4b25      	ldr	r3, [pc, #148]	; (81740 <TC6_Handler+0xa0>)
   816aa:	4798      	blx	r3
	uint32_t tick =0,tick_10 = 0,tick_50=0,tick_100=0,tick_500=0;                       // Timer interrupt every 1 msec
   816ac:	2300      	movs	r3, #0
   816ae:	607b      	str	r3, [r7, #4]
   816b0:	2300      	movs	r3, #0
   816b2:	617b      	str	r3, [r7, #20]
   816b4:	2300      	movs	r3, #0
   816b6:	613b      	str	r3, [r7, #16]
   816b8:	2300      	movs	r3, #0
   816ba:	60fb      	str	r3, [r7, #12]
   816bc:	2300      	movs	r3, #0
   816be:	60bb      	str	r3, [r7, #8]
	tick++;
   816c0:	687b      	ldr	r3, [r7, #4]
   816c2:	3301      	adds	r3, #1
   816c4:	607b      	str	r3, [r7, #4]
	if (tick == 10)
   816c6:	687b      	ldr	r3, [r7, #4]
   816c8:	2b0a      	cmp	r3, #10
   816ca:	d107      	bne.n	816dc <TC6_Handler+0x3c>
	{
		tick_10++;
   816cc:	697b      	ldr	r3, [r7, #20]
   816ce:	3301      	adds	r3, #1
   816d0:	617b      	str	r3, [r7, #20]
		tick = 0;
   816d2:	2300      	movs	r3, #0
   816d4:	607b      	str	r3, [r7, #4]
		time_tick = TICK_10MS;                                            
   816d6:	4b1b      	ldr	r3, [pc, #108]	; (81744 <TC6_Handler+0xa4>)
   816d8:	2200      	movs	r2, #0
   816da:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   816dc:	697b      	ldr	r3, [r7, #20]
   816de:	2b05      	cmp	r3, #5
   816e0:	d107      	bne.n	816f2 <TC6_Handler+0x52>
	{
		tick_50++;
   816e2:	693b      	ldr	r3, [r7, #16]
   816e4:	3301      	adds	r3, #1
   816e6:	613b      	str	r3, [r7, #16]
		tick_10 = 0;
   816e8:	2300      	movs	r3, #0
   816ea:	617b      	str	r3, [r7, #20]
		time_tick = TICK_50MS;
   816ec:	4b15      	ldr	r3, [pc, #84]	; (81744 <TC6_Handler+0xa4>)
   816ee:	2201      	movs	r2, #1
   816f0:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   816f2:	693b      	ldr	r3, [r7, #16]
   816f4:	2b02      	cmp	r3, #2
   816f6:	d107      	bne.n	81708 <TC6_Handler+0x68>
	{
		tick_100++;
   816f8:	68fb      	ldr	r3, [r7, #12]
   816fa:	3301      	adds	r3, #1
   816fc:	60fb      	str	r3, [r7, #12]
		tick_50 = 0;
   816fe:	2300      	movs	r3, #0
   81700:	613b      	str	r3, [r7, #16]
		time_tick = TICK_100MS;
   81702:	4b10      	ldr	r3, [pc, #64]	; (81744 <TC6_Handler+0xa4>)
   81704:	2202      	movs	r2, #2
   81706:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   81708:	68fb      	ldr	r3, [r7, #12]
   8170a:	2b05      	cmp	r3, #5
   8170c:	d107      	bne.n	8171e <TC6_Handler+0x7e>
	{
		tick_500++;
   8170e:	68bb      	ldr	r3, [r7, #8]
   81710:	3301      	adds	r3, #1
   81712:	60bb      	str	r3, [r7, #8]
		tick_100 = 0;
   81714:	2300      	movs	r3, #0
   81716:	60fb      	str	r3, [r7, #12]
		time_tick = TICK_500MS;
   81718:	4b0a      	ldr	r3, [pc, #40]	; (81744 <TC6_Handler+0xa4>)
   8171a:	2203      	movs	r2, #3
   8171c:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   8171e:	68bb      	ldr	r3, [r7, #8]
   81720:	2b02      	cmp	r3, #2
   81722:	d104      	bne.n	8172e <TC6_Handler+0x8e>
	{
		tick_500 = 0;
   81724:	2300      	movs	r3, #0
   81726:	60bb      	str	r3, [r7, #8]
		time_tick = TICK_SEC;
   81728:	4b06      	ldr	r3, [pc, #24]	; (81744 <TC6_Handler+0xa4>)
   8172a:	2204      	movs	r2, #4
   8172c:	601a      	str	r2, [r3, #0]
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8172e:	2100      	movs	r1, #0
   81730:	4805      	ldr	r0, [pc, #20]	; (81748 <TC6_Handler+0xa8>)
   81732:	4b06      	ldr	r3, [pc, #24]	; (8174c <TC6_Handler+0xac>)
   81734:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
}
   81736:	bf00      	nop
   81738:	3718      	adds	r7, #24
   8173a:	46bd      	mov	sp, r7
   8173c:	bd80      	pop	{r7, pc}
   8173e:	bf00      	nop
   81740:	000814f9 	.word	0x000814f9
   81744:	20070954 	.word	0x20070954
   81748:	40088000 	.word	0x40088000
   8174c:	000820b5 	.word	0x000820b5

00081750 <CPU2_D_SET_PUMP>:

#include "D_SYS.h"
#include "Platform/Service/CPU2_S_interface.h"
extern uint32_t DUTY;
uint8_t CPU2_D_SET_PUMP(sv_pumptype id_pump)
{
   81750:	b580      	push	{r7, lr}
   81752:	b082      	sub	sp, #8
   81754:	af00      	add	r7, sp, #0
   81756:	4603      	mov	r3, r0
   81758:	71fb      	strb	r3, [r7, #7]
	switch (id_pump)
   8175a:	79fb      	ldrb	r3, [r7, #7]
   8175c:	2b01      	cmp	r3, #1
   8175e:	d000      	beq.n	81762 <CPU2_D_SET_PUMP+0x12>
			PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
			PWM->PWM_ENA =0x00000010;
			gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		break;
		default:
		break;
   81760:	e012      	b.n	81788 <CPU2_D_SET_PUMP+0x38>
{
	switch (id_pump)
	{
		
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   81762:	4b0c      	ldr	r3, [pc, #48]	; (81794 <CPU2_D_SET_PUMP+0x44>)
   81764:	f640 2241 	movw	r2, #2625	; 0xa41
   81768:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
   8176c:	4a09      	ldr	r2, [pc, #36]	; (81794 <CPU2_D_SET_PUMP+0x44>)
   8176e:	4b0a      	ldr	r3, [pc, #40]	; (81798 <CPU2_D_SET_PUMP+0x48>)
   81770:	681b      	ldr	r3, [r3, #0]
   81772:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
			PWM->PWM_ENA =0x00000010;
   81776:	4b07      	ldr	r3, [pc, #28]	; (81794 <CPU2_D_SET_PUMP+0x44>)
   81778:	2210      	movs	r2, #16
   8177a:	605a      	str	r2, [r3, #4]
			gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   8177c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81780:	2055      	movs	r0, #85	; 0x55
   81782:	4b06      	ldr	r3, [pc, #24]	; (8179c <CPU2_D_SET_PUMP+0x4c>)
   81784:	4798      	blx	r3
		break;
   81786:	bf00      	nop
		default:
		break;
	}
	
	return 0;
   81788:	2300      	movs	r3, #0
}
   8178a:	4618      	mov	r0, r3
   8178c:	3708      	adds	r7, #8
   8178e:	46bd      	mov	sp, r7
   81790:	bd80      	pop	{r7, pc}
   81792:	bf00      	nop
   81794:	40094000 	.word	0x40094000
   81798:	20070008 	.word	0x20070008
   8179c:	000838fd 	.word	0x000838fd

000817a0 <CPU2_D_RESET_PUMP>:

uint8_t CPU2_D_RESET_PUMP(sv_pumptype id_pump)
{
   817a0:	b480      	push	{r7}
   817a2:	b083      	sub	sp, #12
   817a4:	af00      	add	r7, sp, #0
   817a6:	4603      	mov	r3, r0
   817a8:	71fb      	strb	r3, [r7, #7]
	switch (id_pump)
   817aa:	79fb      	ldrb	r3, [r7, #7]
   817ac:	2b01      	cmp	r3, #1
   817ae:	d000      	beq.n	817b2 <CPU2_D_RESET_PUMP+0x12>
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_DIS =0x00000010;
		break;
		
		default:
		break;
   817b0:	e003      	b.n	817ba <CPU2_D_RESET_PUMP+0x1a>
{
	switch (id_pump)
	{
		
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_DIS =0x00000010;
   817b2:	4b05      	ldr	r3, [pc, #20]	; (817c8 <CPU2_D_RESET_PUMP+0x28>)
   817b4:	2210      	movs	r2, #16
   817b6:	609a      	str	r2, [r3, #8]
		break;
   817b8:	bf00      	nop
		
		default:
		break;
		
	}
	return 0;
   817ba:	2300      	movs	r3, #0
}
   817bc:	4618      	mov	r0, r3
   817be:	370c      	adds	r7, #12
   817c0:	46bd      	mov	sp, r7
   817c2:	bc80      	pop	{r7}
   817c4:	4770      	bx	lr
   817c6:	bf00      	nop
   817c8:	40094000 	.word	0x40094000

000817cc <CPU2_D_SET_VALVE>:


uint8_t CPU2_D_SET_VALVE(sv_valvetype id_valve)
{
   817cc:	b580      	push	{r7, lr}
   817ce:	b084      	sub	sp, #16
   817d0:	af00      	add	r7, sp, #0
   817d2:	4603      	mov	r3, r0
   817d4:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io = 0, peri;
   817d6:	2300      	movs	r3, #0
   817d8:	60fb      	str	r3, [r7, #12]
	switch(id_valve)
   817da:	79fb      	ldrb	r3, [r7, #7]
   817dc:	3b01      	subs	r3, #1
   817de:	2b07      	cmp	r3, #7
   817e0:	d836      	bhi.n	81850 <CPU2_D_SET_VALVE+0x84>
   817e2:	a201      	add	r2, pc, #4	; (adr r2, 817e8 <CPU2_D_SET_VALVE+0x1c>)
   817e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817e8:	00081809 	.word	0x00081809
   817ec:	00081821 	.word	0x00081821
   817f0:	00081851 	.word	0x00081851
   817f4:	00081851 	.word	0x00081851
   817f8:	00081815 	.word	0x00081815
   817fc:	0008182d 	.word	0x0008182d
   81800:	00081839 	.word	0x00081839
   81804:	00081845 	.word	0x00081845
	{
		
		case HEMO_IF4:
		p_io = 21;
   81808:	2315      	movs	r3, #21
   8180a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   8180c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81810:	60bb      	str	r3, [r7, #8]
		break;
   81812:	e01e      	b.n	81852 <CPU2_D_SET_VALVE+0x86>
		
		case CLAMP_PWR:
		p_io = 13;
   81814:	230d      	movs	r3, #13
   81816:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81818:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8181c:	60bb      	str	r3, [r7, #8]
		break;
   8181e:	e018      	b.n	81852 <CPU2_D_SET_VALVE+0x86>
		
		case HEMO_IF3:
		p_io = 22;
   81820:	2316      	movs	r3, #22
   81822:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81828:	60bb      	str	r3, [r7, #8]
		break;
   8182a:	e012      	b.n	81852 <CPU2_D_SET_VALVE+0x86>
		
		case BYPS_PWR:
		p_io = 11;
   8182c:	230b      	movs	r3, #11
   8182e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81830:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81834:	60bb      	str	r3, [r7, #8]
		break;
   81836:	e00c      	b.n	81852 <CPU2_D_SET_VALVE+0x86>
		
		case RUDNCY_INT:
		p_io = 23;
   81838:	2317      	movs	r3, #23
   8183a:	60fb      	str	r3, [r7, #12]
		peri = PC;
   8183c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81840:	60bb      	str	r3, [r7, #8]
		break;
   81842:	e006      	b.n	81852 <CPU2_D_SET_VALVE+0x86>
		
		case CPU_INT:
		p_io = 18;
   81844:	2312      	movs	r3, #18
   81846:	60fb      	str	r3, [r7, #12]
		peri = PC;
   81848:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8184c:	60bb      	str	r3, [r7, #8]
		break;
   8184e:	e000      	b.n	81852 <CPU2_D_SET_VALVE+0x86>
		
		default:
		break;
   81850:	bf00      	nop
	}
	
	CPU2_D_SET_PIO(peri,p_io);
   81852:	68f9      	ldr	r1, [r7, #12]
   81854:	68b8      	ldr	r0, [r7, #8]
   81856:	4b03      	ldr	r3, [pc, #12]	; (81864 <CPU2_D_SET_VALVE+0x98>)
   81858:	4798      	blx	r3
	return 0;
   8185a:	2300      	movs	r3, #0
}
   8185c:	4618      	mov	r0, r3
   8185e:	3710      	adds	r7, #16
   81860:	46bd      	mov	sp, r7
   81862:	bd80      	pop	{r7, pc}
   81864:	00081141 	.word	0x00081141

00081868 <CPU2_D_RESET_VALVE>:


uint8_t CPU2_D_RESET_VALVE(sv_valvetype id_valve)
{
   81868:	b580      	push	{r7, lr}
   8186a:	b084      	sub	sp, #16
   8186c:	af00      	add	r7, sp, #0
   8186e:	4603      	mov	r3, r0
   81870:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io = 0, peri;
   81872:	2300      	movs	r3, #0
   81874:	60fb      	str	r3, [r7, #12]
	switch(id_valve)
   81876:	79fb      	ldrb	r3, [r7, #7]
   81878:	3b01      	subs	r3, #1
   8187a:	2b07      	cmp	r3, #7
   8187c:	d836      	bhi.n	818ec <CPU2_D_RESET_VALVE+0x84>
   8187e:	a201      	add	r2, pc, #4	; (adr r2, 81884 <CPU2_D_RESET_VALVE+0x1c>)
   81880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81884:	000818a5 	.word	0x000818a5
   81888:	000818bd 	.word	0x000818bd
   8188c:	000818ed 	.word	0x000818ed
   81890:	000818ed 	.word	0x000818ed
   81894:	000818b1 	.word	0x000818b1
   81898:	000818c9 	.word	0x000818c9
   8189c:	000818d5 	.word	0x000818d5
   818a0:	000818e1 	.word	0x000818e1
// 		p_io = 10;
// 		peri = PD;
// 		break;
// 		
		case HEMO_IF4:
		p_io = 21;
   818a4:	2315      	movs	r3, #21
   818a6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818ac:	60bb      	str	r3, [r7, #8]
		break;
   818ae:	e01e      	b.n	818ee <CPU2_D_RESET_VALVE+0x86>
		
		case CLAMP_PWR:
		p_io = 13;
   818b0:	230d      	movs	r3, #13
   818b2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818b8:	60bb      	str	r3, [r7, #8]
		break;
   818ba:	e018      	b.n	818ee <CPU2_D_RESET_VALVE+0x86>
		
		case HEMO_IF3:
		p_io = 22;
   818bc:	2316      	movs	r3, #22
   818be:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818c4:	60bb      	str	r3, [r7, #8]
 		break;
   818c6:	e012      	b.n	818ee <CPU2_D_RESET_VALVE+0x86>
		
		case BYPS_PWR:
		p_io = 11;
   818c8:	230b      	movs	r3, #11
   818ca:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818d0:	60bb      	str	r3, [r7, #8]
		break;
   818d2:	e00c      	b.n	818ee <CPU2_D_RESET_VALVE+0x86>
		
		case RUDNCY_INT:
		p_io = 23;
   818d4:	2317      	movs	r3, #23
   818d6:	60fb      	str	r3, [r7, #12]
		peri = PC;
   818d8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   818dc:	60bb      	str	r3, [r7, #8]
		break;
   818de:	e006      	b.n	818ee <CPU2_D_RESET_VALVE+0x86>
		
		case CPU_INT:
		p_io = 18;
   818e0:	2312      	movs	r3, #18
   818e2:	60fb      	str	r3, [r7, #12]
		peri = PC;
   818e4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   818e8:	60bb      	str	r3, [r7, #8]
		break;
   818ea:	e000      	b.n	818ee <CPU2_D_RESET_VALVE+0x86>
		
		default:
		break;
   818ec:	bf00      	nop
	}
	CPU2_D_RESET_PIO(peri,p_io);
   818ee:	68f9      	ldr	r1, [r7, #12]
   818f0:	68b8      	ldr	r0, [r7, #8]
   818f2:	4b03      	ldr	r3, [pc, #12]	; (81900 <CPU2_D_RESET_VALVE+0x98>)
   818f4:	4798      	blx	r3
	return 0;
   818f6:	2300      	movs	r3, #0
}
   818f8:	4618      	mov	r0, r3
   818fa:	3710      	adds	r7, #16
   818fc:	46bd      	mov	sp, r7
   818fe:	bd80      	pop	{r7, pc}
   81900:	000811c5 	.word	0x000811c5

00081904 <CPU2_D_RD_SENSIN>:

uint8_t CPU2_D_RD_SENSIN(sv_sensintype id_sensein)
{
   81904:	b580      	push	{r7, lr}
   81906:	b086      	sub	sp, #24
   81908:	af00      	add	r7, sp, #0
   8190a:	4603      	mov	r3, r0
   8190c:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   8190e:	2300      	movs	r3, #0
   81910:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   81912:	79fb      	ldrb	r3, [r7, #7]
   81914:	3b01      	subs	r3, #1
   81916:	2b06      	cmp	r3, #6
   81918:	d83a      	bhi.n	81990 <CPU2_D_RD_SENSIN+0x8c>
   8191a:	a201      	add	r2, pc, #4	; (adr r2, 81920 <CPU2_D_RD_SENSIN+0x1c>)
   8191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81920:	0008193d 	.word	0x0008193d
   81924:	00081949 	.word	0x00081949
   81928:	00081955 	.word	0x00081955
   8192c:	00081961 	.word	0x00081961
   81930:	0008196d 	.word	0x0008196d
   81934:	00081979 	.word	0x00081979
   81938:	00081985 	.word	0x00081985
	{
		case SV_BP_DOOR:
		p_io = 10;               // bp_door
   8193c:	230a      	movs	r3, #10
   8193e:	617b      	str	r3, [r7, #20]
		peri = PC;
   81940:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81944:	613b      	str	r3, [r7, #16]
		break;
   81946:	e024      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_BP_FB:					// pump_sense
		p_io = 9;
   81948:	2309      	movs	r3, #9
   8194a:	617b      	str	r3, [r7, #20]
		peri = PC;
   8194c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81950:	613b      	str	r3, [r7, #16]
		break;
   81952:	e01e      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_CLAMP_FB:					// clamp_feedback
		p_io = 7;
   81954:	2307      	movs	r3, #7
   81956:	617b      	str	r3, [r7, #20]
		peri = PC;
   81958:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8195c:	613b      	str	r3, [r7, #16]
		break;
   8195e:	e018      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_CLAMP_DOOR:					// clamp_door
		
		p_io = 7;
   81960:	2307      	movs	r3, #7
   81962:	617b      	str	r3, [r7, #20]
		peri = PC;
   81964:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81968:	613b      	str	r3, [r7, #16]
		break;
   8196a:	e012      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_BD:					// blood dectector
		
		p_io = 12;
   8196c:	230c      	movs	r3, #12
   8196e:	617b      	str	r3, [r7, #20]
		peri = PB;
   81970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81974:	613b      	str	r3, [r7, #16]
		break;
   81976:	e00c      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_ABD:					// ABD
		
		p_io = 8;
   81978:	2308      	movs	r3, #8
   8197a:	617b      	str	r3, [r7, #20]
		peri = PC;
   8197c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81980:	613b      	str	r3, [r7, #16]
		break;
   81982:	e006      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_REDUNDANCY_IRQ:					//Redundancy_irq
		p_io = 24;
   81984:	2318      	movs	r3, #24
   81986:	617b      	str	r3, [r7, #20]
		peri = PC;
   81988:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8198c:	613b      	str	r3, [r7, #16]
		break;
   8198e:	e000      	b.n	81992 <CPU2_D_RD_SENSIN+0x8e>
		
		default:
		break;
   81990:	bf00      	nop
	}
	
	pio_val = CPU2_D_READ_PIO(peri, p_io);
   81992:	6979      	ldr	r1, [r7, #20]
   81994:	6938      	ldr	r0, [r7, #16]
   81996:	4b04      	ldr	r3, [pc, #16]	; (819a8 <CPU2_D_RD_SENSIN+0xa4>)
   81998:	4798      	blx	r3
   8199a:	4603      	mov	r3, r0
   8199c:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   8199e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   819a0:	4618      	mov	r0, r3
   819a2:	3718      	adds	r7, #24
   819a4:	46bd      	mov	sp, r7
   819a6:	bd80      	pop	{r7, pc}
   819a8:	00081249 	.word	0x00081249

000819ac <CPU2_D_READ_SENSORS>:


uint16_t CPU2_D_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   819ac:	b580      	push	{r7, lr}
   819ae:	b084      	sub	sp, #16
   819b0:	af00      	add	r7, sp, #0
   819b2:	4603      	mov	r3, r0
   819b4:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	 uint8_t channel = 0;
   819b6:	2300      	movs	r3, #0
   819b8:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
   819ba:	79fb      	ldrb	r3, [r7, #7]
   819bc:	2b01      	cmp	r3, #1
   819be:	d002      	beq.n	819c6 <CPU2_D_READ_SENSORS+0x1a>
   819c0:	2b02      	cmp	r3, #2
   819c2:	d008      	beq.n	819d6 <CPU2_D_READ_SENSORS+0x2a>
// 		 //channel = channel_3;
// 		 channel =  4;
// 		 break;
		 
		 default:
		 break;
   819c4:	e00f      	b.n	819e6 <CPU2_D_READ_SENSORS+0x3a>
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
	 {
		 case SV_APT:
		 //channel = channel_7;
		 SENSOR_VAL = DD_READ_SENSORS(SV_APT);
   819c6:	2001      	movs	r0, #1
   819c8:	4b09      	ldr	r3, [pc, #36]	; (819f0 <CPU2_D_READ_SENSORS+0x44>)
   819ca:	4798      	blx	r3
   819cc:	4603      	mov	r3, r0
   819ce:	81fb      	strh	r3, [r7, #14]
		 channel = 0;
   819d0:	2300      	movs	r3, #0
   819d2:	737b      	strb	r3, [r7, #13]
		 break;
   819d4:	e007      	b.n	819e6 <CPU2_D_READ_SENSORS+0x3a>
		 
		 case SV_VPT:
		SENSOR_VAL = DD_READ_SENSORS(SV_VPT);
   819d6:	2002      	movs	r0, #2
   819d8:	4b05      	ldr	r3, [pc, #20]	; (819f0 <CPU2_D_READ_SENSORS+0x44>)
   819da:	4798      	blx	r3
   819dc:	4603      	mov	r3, r0
   819de:	81fb      	strh	r3, [r7, #14]
		 channel =  1;
   819e0:	2301      	movs	r3, #1
   819e2:	737b      	strb	r3, [r7, #13]
		 break;
   819e4:	bf00      	nop
		 
	 }
	
//	SENSOR_VAL= CPU2_D_READ_ADC(channel);
	
	return SENSOR_VAL;
   819e6:	89fb      	ldrh	r3, [r7, #14]
	
}
   819e8:	4618      	mov	r0, r3
   819ea:	3710      	adds	r7, #16
   819ec:	46bd      	mov	sp, r7
   819ee:	bd80      	pop	{r7, pc}
   819f0:	00080f49 	.word	0x00080f49

000819f4 <CPU2_D_CONFIG_TIMER>:

uint8_t CPU2_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   819f4:	b590      	push	{r4, r7, lr}
   819f6:	b089      	sub	sp, #36	; 0x24
   819f8:	af00      	add	r7, sp, #0
   819fa:	4603      	mov	r3, r0
   819fc:	460a      	mov	r2, r1
   819fe:	71fb      	strb	r3, [r7, #7]
   81a00:	4613      	mov	r3, r2
   81a02:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   81a04:	2300      	movs	r3, #0
   81a06:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   81a08:	79bb      	ldrb	r3, [r7, #6]
   81a0a:	01db      	lsls	r3, r3, #7
   81a0c:	4a1b      	ldr	r2, [pc, #108]	; (81a7c <CPU2_D_CONFIG_TIMER+0x88>)
   81a0e:	fb92 f3f3 	sdiv	r3, r2, r3
   81a12:	1e5a      	subs	r2, r3, #1
   81a14:	4b1a      	ldr	r3, [pc, #104]	; (81a80 <CPU2_D_CONFIG_TIMER+0x8c>)
   81a16:	4610      	mov	r0, r2
   81a18:	4798      	blx	r3
   81a1a:	4603      	mov	r3, r0
   81a1c:	460c      	mov	r4, r1
   81a1e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   81a22:	4b18      	ldr	r3, [pc, #96]	; (81a84 <CPU2_D_CONFIG_TIMER+0x90>)
   81a24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   81a28:	4798      	blx	r3
   81a2a:	4603      	mov	r3, r0
   81a2c:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   81a2e:	79fb      	ldrb	r3, [r7, #7]
   81a30:	2b01      	cmp	r3, #1
   81a32:	d00b      	beq.n	81a4c <CPU2_D_CONFIG_TIMER+0x58>
   81a34:	2b02      	cmp	r3, #2
   81a36:	d012      	beq.n	81a5e <CPU2_D_CONFIG_TIMER+0x6a>
   81a38:	2b00      	cmp	r3, #0
   81a3a:	d000      	beq.n	81a3e <CPU2_D_CONFIG_TIMER+0x4a>
		rc = timer_res;
		startTimer2(TC0,1,TC1_IRQn,rc);
		break;
		
		default:
		break;
   81a3c:	e018      	b.n	81a70 <CPU2_D_CONFIG_TIMER+0x7c>
	rc = rc_cal;

	switch (timer_no)
	{
		case 0:
		CPU2_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   81a3e:	68fb      	ldr	r3, [r7, #12]
   81a40:	2221      	movs	r2, #33	; 0x21
   81a42:	69f9      	ldr	r1, [r7, #28]
   81a44:	4810      	ldr	r0, [pc, #64]	; (81a88 <CPU2_D_CONFIG_TIMER+0x94>)
   81a46:	4c11      	ldr	r4, [pc, #68]	; (81a8c <CPU2_D_CONFIG_TIMER+0x98>)
   81a48:	47a0      	blx	r4
		break;
   81a4a:	e011      	b.n	81a70 <CPU2_D_CONFIG_TIMER+0x7c>
		
		case 1:
		rc = timer_res;
   81a4c:	79bb      	ldrb	r3, [r7, #6]
   81a4e:	60fb      	str	r3, [r7, #12]
		startTimer1(TC0,0,TC0_IRQn,rc);
   81a50:	68fb      	ldr	r3, [r7, #12]
   81a52:	221b      	movs	r2, #27
   81a54:	2100      	movs	r1, #0
   81a56:	480e      	ldr	r0, [pc, #56]	; (81a90 <CPU2_D_CONFIG_TIMER+0x9c>)
   81a58:	4c0e      	ldr	r4, [pc, #56]	; (81a94 <CPU2_D_CONFIG_TIMER+0xa0>)
   81a5a:	47a0      	blx	r4
		break;
   81a5c:	e008      	b.n	81a70 <CPU2_D_CONFIG_TIMER+0x7c>
		
		case 2:
		rc = timer_res;
   81a5e:	79bb      	ldrb	r3, [r7, #6]
   81a60:	60fb      	str	r3, [r7, #12]
		startTimer2(TC0,1,TC1_IRQn,rc);
   81a62:	68fb      	ldr	r3, [r7, #12]
   81a64:	221c      	movs	r2, #28
   81a66:	2101      	movs	r1, #1
   81a68:	4809      	ldr	r0, [pc, #36]	; (81a90 <CPU2_D_CONFIG_TIMER+0x9c>)
   81a6a:	4c0b      	ldr	r4, [pc, #44]	; (81a98 <CPU2_D_CONFIG_TIMER+0xa4>)
   81a6c:	47a0      	blx	r4
		break;
   81a6e:	bf00      	nop
		
		default:
		break;
		
	}
}
   81a70:	bf00      	nop
   81a72:	4618      	mov	r0, r3
   81a74:	3724      	adds	r7, #36	; 0x24
   81a76:	46bd      	mov	sp, r7
   81a78:	bd90      	pop	{r4, r7, pc}
   81a7a:	bf00      	nop
   81a7c:	0501bd00 	.word	0x0501bd00
   81a80:	00084579 	.word	0x00084579
   81a84:	00084645 	.word	0x00084645
   81a88:	40088000 	.word	0x40088000
   81a8c:	00081b0d 	.word	0x00081b0d
   81a90:	40080000 	.word	0x40080000
   81a94:	00081b69 	.word	0x00081b69
   81a98:	00081bd9 	.word	0x00081bd9

00081a9c <CPU2_D_INIT_TIMER>:
   81a9c:	b580      	push	{r7, lr}
   81a9e:	af00      	add	r7, sp, #0
   81aa0:	4b16      	ldr	r3, [pc, #88]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81aa2:	4a17      	ldr	r2, [pc, #92]	; (81b00 <CPU2_D_INIT_TIMER+0x64>)
   81aa4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   81aa8:	4b16      	ldr	r3, [pc, #88]	; (81b04 <CPU2_D_INIT_TIMER+0x68>)
   81aaa:	4a15      	ldr	r2, [pc, #84]	; (81b00 <CPU2_D_INIT_TIMER+0x64>)
   81aac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   81ab0:	201b      	movs	r0, #27
   81ab2:	4b15      	ldr	r3, [pc, #84]	; (81b08 <CPU2_D_INIT_TIMER+0x6c>)
   81ab4:	4798      	blx	r3
   81ab6:	201c      	movs	r0, #28
   81ab8:	4b13      	ldr	r3, [pc, #76]	; (81b08 <CPU2_D_INIT_TIMER+0x6c>)
   81aba:	4798      	blx	r3
   81abc:	2021      	movs	r0, #33	; 0x21
   81abe:	4b12      	ldr	r3, [pc, #72]	; (81b08 <CPU2_D_INIT_TIMER+0x6c>)
   81ac0:	4798      	blx	r3
   81ac2:	4b0e      	ldr	r3, [pc, #56]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81ac4:	f24c 0203 	movw	r2, #49155	; 0xc003
   81ac8:	605a      	str	r2, [r3, #4]
   81aca:	4b0c      	ldr	r3, [pc, #48]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81acc:	f24c 0203 	movw	r2, #49155	; 0xc003
   81ad0:	645a      	str	r2, [r3, #68]	; 0x44
   81ad2:	4b0a      	ldr	r3, [pc, #40]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81ad4:	f24c 0203 	movw	r2, #49155	; 0xc003
   81ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   81adc:	4b07      	ldr	r3, [pc, #28]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81ade:	2210      	movs	r2, #16
   81ae0:	625a      	str	r2, [r3, #36]	; 0x24
   81ae2:	4b06      	ldr	r3, [pc, #24]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81ae4:	2210      	movs	r2, #16
   81ae6:	665a      	str	r2, [r3, #100]	; 0x64
   81ae8:	4b04      	ldr	r3, [pc, #16]	; (81afc <CPU2_D_INIT_TIMER+0x60>)
   81aea:	2210      	movs	r2, #16
   81aec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   81af0:	4b04      	ldr	r3, [pc, #16]	; (81b04 <CPU2_D_INIT_TIMER+0x68>)
   81af2:	2210      	movs	r2, #16
   81af4:	625a      	str	r2, [r3, #36]	; 0x24
   81af6:	bf00      	nop
   81af8:	bd80      	pop	{r7, pc}
   81afa:	bf00      	nop
   81afc:	40080000 	.word	0x40080000
   81b00:	54494d00 	.word	0x54494d00
   81b04:	40084000 	.word	0x40084000
   81b08:	00083e8d 	.word	0x00083e8d

00081b0c <CPU2_D_MAIN_TIMER>:
   81b0c:	b580      	push	{r7, lr}
   81b0e:	b084      	sub	sp, #16
   81b10:	af00      	add	r7, sp, #0
   81b12:	60f8      	str	r0, [r7, #12]
   81b14:	60b9      	str	r1, [r7, #8]
   81b16:	603b      	str	r3, [r7, #0]
   81b18:	4613      	mov	r3, r2
   81b1a:	71fb      	strb	r3, [r7, #7]
   81b1c:	2000      	movs	r0, #0
   81b1e:	4b0d      	ldr	r3, [pc, #52]	; (81b54 <CPU2_D_MAIN_TIMER+0x48>)
   81b20:	4798      	blx	r3
   81b22:	2300      	movs	r3, #0
   81b24:	60bb      	str	r3, [r7, #8]
   81b26:	4b0c      	ldr	r3, [pc, #48]	; (81b58 <CPU2_D_MAIN_TIMER+0x4c>)
   81b28:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b2c:	605a      	str	r2, [r3, #4]
   81b2e:	683a      	ldr	r2, [r7, #0]
   81b30:	68b9      	ldr	r1, [r7, #8]
   81b32:	68f8      	ldr	r0, [r7, #12]
   81b34:	4b09      	ldr	r3, [pc, #36]	; (81b5c <CPU2_D_MAIN_TIMER+0x50>)
   81b36:	4798      	blx	r3
   81b38:	68b9      	ldr	r1, [r7, #8]
   81b3a:	68f8      	ldr	r0, [r7, #12]
   81b3c:	4b08      	ldr	r3, [pc, #32]	; (81b60 <CPU2_D_MAIN_TIMER+0x54>)
   81b3e:	4798      	blx	r3
   81b40:	2210      	movs	r2, #16
   81b42:	68b9      	ldr	r1, [r7, #8]
   81b44:	68f8      	ldr	r0, [r7, #12]
   81b46:	4b07      	ldr	r3, [pc, #28]	; (81b64 <CPU2_D_MAIN_TIMER+0x58>)
   81b48:	4798      	blx	r3
   81b4a:	bf00      	nop
   81b4c:	4618      	mov	r0, r3
   81b4e:	3710      	adds	r7, #16
   81b50:	46bd      	mov	sp, r7
   81b52:	bd80      	pop	{r7, pc}
   81b54:	00083f0d 	.word	0x00083f0d
   81b58:	40088000 	.word	0x40088000
   81b5c:	00082069 	.word	0x00082069
   81b60:	00082029 	.word	0x00082029
   81b64:	0008208d 	.word	0x0008208d

00081b68 <startTimer1>:
   81b68:	b580      	push	{r7, lr}
   81b6a:	b084      	sub	sp, #16
   81b6c:	af00      	add	r7, sp, #0
   81b6e:	60f8      	str	r0, [r7, #12]
   81b70:	60b9      	str	r1, [r7, #8]
   81b72:	603b      	str	r3, [r7, #0]
   81b74:	4613      	mov	r3, r2
   81b76:	71fb      	strb	r3, [r7, #7]
   81b78:	2000      	movs	r0, #0
   81b7a:	4b10      	ldr	r3, [pc, #64]	; (81bbc <startTimer1+0x54>)
   81b7c:	4798      	blx	r3
   81b7e:	201b      	movs	r0, #27
   81b80:	4b0f      	ldr	r3, [pc, #60]	; (81bc0 <startTimer1+0x58>)
   81b82:	4798      	blx	r3
   81b84:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b88:	68b9      	ldr	r1, [r7, #8]
   81b8a:	68f8      	ldr	r0, [r7, #12]
   81b8c:	4b0d      	ldr	r3, [pc, #52]	; (81bc4 <startTimer1+0x5c>)
   81b8e:	4798      	blx	r3
   81b90:	4b0d      	ldr	r3, [pc, #52]	; (81bc8 <startTimer1+0x60>)
   81b92:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b96:	605a      	str	r2, [r3, #4]
   81b98:	683a      	ldr	r2, [r7, #0]
   81b9a:	68b9      	ldr	r1, [r7, #8]
   81b9c:	68f8      	ldr	r0, [r7, #12]
   81b9e:	4b0b      	ldr	r3, [pc, #44]	; (81bcc <startTimer1+0x64>)
   81ba0:	4798      	blx	r3
   81ba2:	2210      	movs	r2, #16
   81ba4:	2100      	movs	r1, #0
   81ba6:	4808      	ldr	r0, [pc, #32]	; (81bc8 <startTimer1+0x60>)
   81ba8:	4b09      	ldr	r3, [pc, #36]	; (81bd0 <startTimer1+0x68>)
   81baa:	4798      	blx	r3
   81bac:	68b9      	ldr	r1, [r7, #8]
   81bae:	68f8      	ldr	r0, [r7, #12]
   81bb0:	4b08      	ldr	r3, [pc, #32]	; (81bd4 <startTimer1+0x6c>)
   81bb2:	4798      	blx	r3
   81bb4:	bf00      	nop
   81bb6:	3710      	adds	r7, #16
   81bb8:	46bd      	mov	sp, r7
   81bba:	bd80      	pop	{r7, pc}
   81bbc:	00083f0d 	.word	0x00083f0d
   81bc0:	00083e8d 	.word	0x00083e8d
   81bc4:	00081ff1 	.word	0x00081ff1
   81bc8:	40080000 	.word	0x40080000
   81bcc:	00082069 	.word	0x00082069
   81bd0:	0008208d 	.word	0x0008208d
   81bd4:	00082029 	.word	0x00082029

00081bd8 <startTimer2>:
   81bd8:	b580      	push	{r7, lr}
   81bda:	b084      	sub	sp, #16
   81bdc:	af00      	add	r7, sp, #0
   81bde:	60f8      	str	r0, [r7, #12]
   81be0:	60b9      	str	r1, [r7, #8]
   81be2:	603b      	str	r3, [r7, #0]
   81be4:	4613      	mov	r3, r2
   81be6:	71fb      	strb	r3, [r7, #7]
   81be8:	2000      	movs	r0, #0
   81bea:	4b10      	ldr	r3, [pc, #64]	; (81c2c <startTimer2+0x54>)
   81bec:	4798      	blx	r3
   81bee:	201c      	movs	r0, #28
   81bf0:	4b0f      	ldr	r3, [pc, #60]	; (81c30 <startTimer2+0x58>)
   81bf2:	4798      	blx	r3
   81bf4:	f24c 0203 	movw	r2, #49155	; 0xc003
   81bf8:	68b9      	ldr	r1, [r7, #8]
   81bfa:	68f8      	ldr	r0, [r7, #12]
   81bfc:	4b0d      	ldr	r3, [pc, #52]	; (81c34 <startTimer2+0x5c>)
   81bfe:	4798      	blx	r3
   81c00:	4b0d      	ldr	r3, [pc, #52]	; (81c38 <startTimer2+0x60>)
   81c02:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c06:	645a      	str	r2, [r3, #68]	; 0x44
   81c08:	683a      	ldr	r2, [r7, #0]
   81c0a:	68b9      	ldr	r1, [r7, #8]
   81c0c:	68f8      	ldr	r0, [r7, #12]
   81c0e:	4b0b      	ldr	r3, [pc, #44]	; (81c3c <startTimer2+0x64>)
   81c10:	4798      	blx	r3
   81c12:	2210      	movs	r2, #16
   81c14:	2101      	movs	r1, #1
   81c16:	4808      	ldr	r0, [pc, #32]	; (81c38 <startTimer2+0x60>)
   81c18:	4b09      	ldr	r3, [pc, #36]	; (81c40 <startTimer2+0x68>)
   81c1a:	4798      	blx	r3
   81c1c:	68b9      	ldr	r1, [r7, #8]
   81c1e:	68f8      	ldr	r0, [r7, #12]
   81c20:	4b08      	ldr	r3, [pc, #32]	; (81c44 <startTimer2+0x6c>)
   81c22:	4798      	blx	r3
   81c24:	bf00      	nop
   81c26:	3710      	adds	r7, #16
   81c28:	46bd      	mov	sp, r7
   81c2a:	bd80      	pop	{r7, pc}
   81c2c:	00083f0d 	.word	0x00083f0d
   81c30:	00083e8d 	.word	0x00083e8d
   81c34:	00081ff1 	.word	0x00081ff1
   81c38:	40080000 	.word	0x40080000
   81c3c:	00082069 	.word	0x00082069
   81c40:	0008208d 	.word	0x0008208d
   81c44:	00082029 	.word	0x00082029

00081c48 <startTimer3>:
   81c48:	b580      	push	{r7, lr}
   81c4a:	b084      	sub	sp, #16
   81c4c:	af00      	add	r7, sp, #0
   81c4e:	60f8      	str	r0, [r7, #12]
   81c50:	60b9      	str	r1, [r7, #8]
   81c52:	603b      	str	r3, [r7, #0]
   81c54:	4613      	mov	r3, r2
   81c56:	71fb      	strb	r3, [r7, #7]
   81c58:	2000      	movs	r0, #0
   81c5a:	4b11      	ldr	r3, [pc, #68]	; (81ca0 <startTimer3+0x58>)
   81c5c:	4798      	blx	r3
   81c5e:	201d      	movs	r0, #29
   81c60:	4b10      	ldr	r3, [pc, #64]	; (81ca4 <startTimer3+0x5c>)
   81c62:	4798      	blx	r3
   81c64:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c68:	68b9      	ldr	r1, [r7, #8]
   81c6a:	68f8      	ldr	r0, [r7, #12]
   81c6c:	4b0e      	ldr	r3, [pc, #56]	; (81ca8 <startTimer3+0x60>)
   81c6e:	4798      	blx	r3
   81c70:	4b0e      	ldr	r3, [pc, #56]	; (81cac <startTimer3+0x64>)
   81c72:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   81c7a:	683a      	ldr	r2, [r7, #0]
   81c7c:	68b9      	ldr	r1, [r7, #8]
   81c7e:	68f8      	ldr	r0, [r7, #12]
   81c80:	4b0b      	ldr	r3, [pc, #44]	; (81cb0 <startTimer3+0x68>)
   81c82:	4798      	blx	r3
   81c84:	2210      	movs	r2, #16
   81c86:	2102      	movs	r1, #2
   81c88:	4808      	ldr	r0, [pc, #32]	; (81cac <startTimer3+0x64>)
   81c8a:	4b0a      	ldr	r3, [pc, #40]	; (81cb4 <startTimer3+0x6c>)
   81c8c:	4798      	blx	r3
   81c8e:	68b9      	ldr	r1, [r7, #8]
   81c90:	68f8      	ldr	r0, [r7, #12]
   81c92:	4b09      	ldr	r3, [pc, #36]	; (81cb8 <startTimer3+0x70>)
   81c94:	4798      	blx	r3
   81c96:	bf00      	nop
   81c98:	3710      	adds	r7, #16
   81c9a:	46bd      	mov	sp, r7
   81c9c:	bd80      	pop	{r7, pc}
   81c9e:	bf00      	nop
   81ca0:	00083f0d 	.word	0x00083f0d
   81ca4:	00083e8d 	.word	0x00083e8d
   81ca8:	00081ff1 	.word	0x00081ff1
   81cac:	40080000 	.word	0x40080000
   81cb0:	00082069 	.word	0x00082069
   81cb4:	0008208d 	.word	0x0008208d
   81cb8:	00082029 	.word	0x00082029

00081cbc <cpu2_sv_cntrl_activatepump>:
 */ 
#include "CNTRL.h"


uint8_t cpu2_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81cbc:	b580      	push	{r7, lr}
   81cbe:	b082      	sub	sp, #8
   81cc0:	af00      	add	r7, sp, #0
   81cc2:	4603      	mov	r3, r0
   81cc4:	71fb      	strb	r3, [r7, #7]
	CPU2_D_SET_PUMP(sv_pump_id);
   81cc6:	79fb      	ldrb	r3, [r7, #7]
   81cc8:	4618      	mov	r0, r3
   81cca:	4b03      	ldr	r3, [pc, #12]	; (81cd8 <cpu2_sv_cntrl_activatepump+0x1c>)
   81ccc:	4798      	blx	r3
	
	return 0;
   81cce:	2300      	movs	r3, #0
}
   81cd0:	4618      	mov	r0, r3
   81cd2:	3708      	adds	r7, #8
   81cd4:	46bd      	mov	sp, r7
   81cd6:	bd80      	pop	{r7, pc}
   81cd8:	00081751 	.word	0x00081751

00081cdc <cpu2_sv_cntrl_deactivatepump>:

uint8_t cpu2_sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   81cdc:	b580      	push	{r7, lr}
   81cde:	b082      	sub	sp, #8
   81ce0:	af00      	add	r7, sp, #0
   81ce2:	4603      	mov	r3, r0
   81ce4:	71fb      	strb	r3, [r7, #7]
	CPU2_D_RESET_PUMP(sv_pump_id);
   81ce6:	79fb      	ldrb	r3, [r7, #7]
   81ce8:	4618      	mov	r0, r3
   81cea:	4b03      	ldr	r3, [pc, #12]	; (81cf8 <cpu2_sv_cntrl_deactivatepump+0x1c>)
   81cec:	4798      	blx	r3
	
	return 0;
   81cee:	2300      	movs	r3, #0
}
   81cf0:	4618      	mov	r0, r3
   81cf2:	3708      	adds	r7, #8
   81cf4:	46bd      	mov	sp, r7
   81cf6:	bd80      	pop	{r7, pc}
   81cf8:	000817a1 	.word	0x000817a1

00081cfc <cpu2_sv_cntrl_activate_pin>:


uint8_t cpu2_sv_cntrl_activate_pin(sv_valvetype sv_pin_id)
{
   81cfc:	b580      	push	{r7, lr}
   81cfe:	b082      	sub	sp, #8
   81d00:	af00      	add	r7, sp, #0
   81d02:	4603      	mov	r3, r0
   81d04:	71fb      	strb	r3, [r7, #7]
	CPU2_D_SET_VALVE(sv_pin_id);
   81d06:	79fb      	ldrb	r3, [r7, #7]
   81d08:	4618      	mov	r0, r3
   81d0a:	4b03      	ldr	r3, [pc, #12]	; (81d18 <cpu2_sv_cntrl_activate_pin+0x1c>)
   81d0c:	4798      	blx	r3
	
	return 0;
   81d0e:	2300      	movs	r3, #0
}
   81d10:	4618      	mov	r0, r3
   81d12:	3708      	adds	r7, #8
   81d14:	46bd      	mov	sp, r7
   81d16:	bd80      	pop	{r7, pc}
   81d18:	000817cd 	.word	0x000817cd

00081d1c <cpu2_sv_cntrl_deactivate_pin>:

uint8_t cpu2_sv_cntrl_deactivate_pin(sv_valvetype sv_pin_id)
{
   81d1c:	b580      	push	{r7, lr}
   81d1e:	b082      	sub	sp, #8
   81d20:	af00      	add	r7, sp, #0
   81d22:	4603      	mov	r3, r0
   81d24:	71fb      	strb	r3, [r7, #7]
	CPU2_D_RESET_VALVE(sv_pin_id);
   81d26:	79fb      	ldrb	r3, [r7, #7]
   81d28:	4618      	mov	r0, r3
   81d2a:	4b03      	ldr	r3, [pc, #12]	; (81d38 <cpu2_sv_cntrl_deactivate_pin+0x1c>)
   81d2c:	4798      	blx	r3
	
	return 0;
   81d2e:	2300      	movs	r3, #0
   81d30:	4618      	mov	r0, r3
   81d32:	3708      	adds	r7, #8
   81d34:	46bd      	mov	sp, r7
   81d36:	bd80      	pop	{r7, pc}
   81d38:	00081869 	.word	0x00081869

00081d3c <cpu2_sv_status_getsystemstatus>:

#include "STATUS.h"
#define CAN_MID_MIDvA_dd(value) ((0x1FFC0000 & ((value) << 18)))
extern can_mb_conf_t can0_mailbox;
uint16_t cpu2_sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   81d3c:	b580      	push	{r7, lr}
   81d3e:	b088      	sub	sp, #32
   81d40:	af00      	add	r7, sp, #0
   81d42:	6078      	str	r0, [r7, #4]
	
	 Sys_statusType sensor_struct1;

	sensor_struct1.vptstatus			= CPU2_D_READ_SENSORS(SV_VPT);
   81d44:	2002      	movs	r0, #2
   81d46:	4b29      	ldr	r3, [pc, #164]	; (81dec <cpu2_sv_status_getsystemstatus+0xb0>)
   81d48:	4798      	blx	r3
   81d4a:	4603      	mov	r3, r0
   81d4c:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.aptstatus			= CPU2_D_READ_SENSORS(SV_APT);
   81d4e:	2001      	movs	r0, #1
   81d50:	4b26      	ldr	r3, [pc, #152]	; (81dec <cpu2_sv_status_getsystemstatus+0xb0>)
   81d52:	4798      	blx	r3
   81d54:	4603      	mov	r3, r0
   81d56:	81bb      	strh	r3, [r7, #12]
// 	sensor_struct1.Tempstatus			= CPU2_D_READ_SENSORS(SV_SENSOR_ID3);
// 	sensor_struct1.cond1_status			= CPU2_D_READ_SENSORS(SV_SENSOR_ID4);
// 	sensor_struct1.cond2_status			= CPU2_D_READ_SENSORS(SV_SENSOR_ID5);
	
	sensor_struct1.bp_door			= CPU2_D_RD_SENSIN(SV_BP_DOOR);
   81d58:	2001      	movs	r0, #1
   81d5a:	4b25      	ldr	r3, [pc, #148]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81d5c:	4798      	blx	r3
   81d5e:	4603      	mov	r3, r0
   81d60:	b29b      	uxth	r3, r3
   81d62:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.bp_sense			= CPU2_D_RD_SENSIN(SV_BP_FB);
   81d64:	2002      	movs	r0, #2
   81d66:	4b22      	ldr	r3, [pc, #136]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81d68:	4798      	blx	r3
   81d6a:	4603      	mov	r3, r0
   81d6c:	b29b      	uxth	r3, r3
   81d6e:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.clamp_fdbk		= CPU2_D_RD_SENSIN(SV_CLAMP_FB);
   81d70:	2003      	movs	r0, #3
   81d72:	4b1f      	ldr	r3, [pc, #124]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81d74:	4798      	blx	r3
   81d76:	4603      	mov	r3, r0
   81d78:	b29b      	uxth	r3, r3
   81d7a:	833b      	strh	r3, [r7, #24]
	sensor_struct1.clamp_door			= CPU2_D_RD_SENSIN(SV_CLAMP_DOOR);
   81d7c:	2004      	movs	r0, #4
   81d7e:	4b1c      	ldr	r3, [pc, #112]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81d80:	4798      	blx	r3
   81d82:	4603      	mov	r3, r0
   81d84:	b29b      	uxth	r3, r3
   81d86:	837b      	strh	r3, [r7, #26]
	sensor_struct1.bdstatus				= CPU2_D_RD_SENSIN(SV_BD);
   81d88:	2005      	movs	r0, #5
   81d8a:	4b19      	ldr	r3, [pc, #100]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81d8c:	4798      	blx	r3
   81d8e:	4603      	mov	r3, r0
   81d90:	b29b      	uxth	r3, r3
   81d92:	827b      	strh	r3, [r7, #18]
	sensor_struct1.abdstatus			= CPU2_D_RD_SENSIN(SV_ABD);
   81d94:	2006      	movs	r0, #6
   81d96:	4b16      	ldr	r3, [pc, #88]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81d98:	4798      	blx	r3
   81d9a:	4603      	mov	r3, r0
   81d9c:	b29b      	uxth	r3, r3
   81d9e:	823b      	strh	r3, [r7, #16]
	sensor_struct1.rudncy_irq			= CPU2_D_RD_SENSIN(SV_REDUNDANCY_IRQ);
   81da0:	2007      	movs	r0, #7
   81da2:	4b13      	ldr	r3, [pc, #76]	; (81df0 <cpu2_sv_status_getsystemstatus+0xb4>)
   81da4:	4798      	blx	r3
   81da6:	4603      	mov	r3, r0
   81da8:	b29b      	uxth	r3, r3
   81daa:	83bb      	strh	r3, [r7, #28]
	
	
// 	sensor_struct->cond1_status			= sensor_struct1.cond1_status;
// 	sensor_struct->cond2_status			= sensor_struct1.cond2_status;
// 	sensor_struct->Tempstatus			= sensor_struct1.Tempstatus;
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   81dac:	89ba      	ldrh	r2, [r7, #12]
   81dae:	687b      	ldr	r3, [r7, #4]
   81db0:	801a      	strh	r2, [r3, #0]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   81db2:	89fa      	ldrh	r2, [r7, #14]
   81db4:	687b      	ldr	r3, [r7, #4]
   81db6:	805a      	strh	r2, [r3, #2]
	
	
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   81db8:	8a7a      	ldrh	r2, [r7, #18]
   81dba:	687b      	ldr	r3, [r7, #4]
   81dbc:	80da      	strh	r2, [r3, #6]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   81dbe:	8a3a      	ldrh	r2, [r7, #16]
   81dc0:	687b      	ldr	r3, [r7, #4]
   81dc2:	809a      	strh	r2, [r3, #4]
	sensor_struct->bp_door				= sensor_struct1.bp_door;
   81dc4:	8aba      	ldrh	r2, [r7, #20]
   81dc6:	687b      	ldr	r3, [r7, #4]
   81dc8:	811a      	strh	r2, [r3, #8]
	sensor_struct->bp_sense				= sensor_struct1.bp_sense;
   81dca:	8afa      	ldrh	r2, [r7, #22]
   81dcc:	687b      	ldr	r3, [r7, #4]
   81dce:	815a      	strh	r2, [r3, #10]
	sensor_struct->clamp_fdbk			= sensor_struct1.clamp_fdbk;
   81dd0:	8b3a      	ldrh	r2, [r7, #24]
   81dd2:	687b      	ldr	r3, [r7, #4]
   81dd4:	819a      	strh	r2, [r3, #12]
	sensor_struct->clamp_door			= sensor_struct1.clamp_door;
   81dd6:	8b7a      	ldrh	r2, [r7, #26]
   81dd8:	687b      	ldr	r3, [r7, #4]
   81dda:	81da      	strh	r2, [r3, #14]
	sensor_struct->rudncy_irq			= sensor_struct1.rudncy_irq;
   81ddc:	8bba      	ldrh	r2, [r7, #28]
   81dde:	687b      	ldr	r3, [r7, #4]
   81de0:	821a      	strh	r2, [r3, #16]
	
	return 0;
   81de2:	2300      	movs	r3, #0

}
   81de4:	4618      	mov	r0, r3
   81de6:	3720      	adds	r7, #32
   81de8:	46bd      	mov	sp, r7
   81dea:	bd80      	pop	{r7, pc}
   81dec:	000819ad 	.word	0x000819ad
   81df0:	00081905 	.word	0x00081905

00081df4 <SV_put_sensor_data>:

bool SV_put_sensor_data(Sys_statusType* sensor_struct)   {
   81df4:	b580      	push	{r7, lr}
   81df6:	b084      	sub	sp, #16
   81df8:	af00      	add	r7, sp, #0
   81dfa:	6078      	str	r0, [r7, #4]
	
 DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = HEMO_CPU_id ;
   81dfc:	2301      	movs	r3, #1
   81dfe:	723b      	strb	r3, [r7, #8]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = GROUP_ID_7 ;
   81e00:	2307      	movs	r3, #7
   81e02:	727b      	strb	r3, [r7, #9]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->aptstatus;
   81e04:	687b      	ldr	r3, [r7, #4]
   81e06:	881b      	ldrh	r3, [r3, #0]
   81e08:	817b      	strh	r3, [r7, #10]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->vptstatus;
   81e0a:	687b      	ldr	r3, [r7, #4]
   81e0c:	885b      	ldrh	r3, [r3, #2]
   81e0e:	81bb      	strh	r3, [r7, #12]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = 0;
   81e10:	2300      	movs	r3, #0
   81e12:	81fb      	strh	r3, [r7, #14]
	SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   81e14:	f107 0308 	add.w	r3, r7, #8
   81e18:	4618      	mov	r0, r3
   81e1a:	4b04      	ldr	r3, [pc, #16]	; (81e2c <SV_put_sensor_data+0x38>)
   81e1c:	4798      	blx	r3
	
	return ;
   81e1e:	bf00      	nop
   81e20:	bf00      	nop
}
   81e22:	4618      	mov	r0, r3
   81e24:	3710      	adds	r7, #16
   81e26:	46bd      	mov	sp, r7
   81e28:	bd80      	pop	{r7, pc}
   81e2a:	bf00      	nop
   81e2c:	00081e31 	.word	0x00081e31

00081e30 <SV_SEND_CAN_MAILBOX>:


void SV_SEND_CAN_MAILBOX(DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   81e30:	b580      	push	{r7, lr}
   81e32:	b084      	sub	sp, #16
   81e34:	af00      	add	r7, sp, #0
   81e36:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   81e38:	687b      	ldr	r3, [r7, #4]
   81e3a:	781b      	ldrb	r3, [r3, #0]
   81e3c:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   81e3e:	687b      	ldr	r3, [r7, #4]
   81e40:	785b      	ldrb	r3, [r3, #1]
   81e42:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;
   81e44:	687b      	ldr	r3, [r7, #4]
   81e46:	885b      	ldrh	r3, [r3, #2]
   81e48:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   81e4a:	687b      	ldr	r3, [r7, #4]
   81e4c:	889b      	ldrh	r3, [r3, #4]
   81e4e:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   81e50:	687b      	ldr	r3, [r7, #4]
   81e52:	88db      	ldrh	r3, [r3, #6]
   81e54:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal                                    =sv_data_size.fourbyte[0];
   81e56:	68bb      	ldr	r3, [r7, #8]
   81e58:	4a14      	ldr	r2, [pc, #80]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e5a:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah                                    =sv_data_size.fourbyte[1];
   81e5c:	68fb      	ldr	r3, [r7, #12]
   81e5e:	4a13      	ldr	r2, [pc, #76]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e60:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length                                  = 8;
   81e62:	4b12      	ldr	r3, [pc, #72]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e64:	2208      	movs	r2, #8
   81e66:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   81e68:	4b10      	ldr	r3, [pc, #64]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e6a:	2200      	movs	r2, #0
   81e6c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   81e6e:	4b0f      	ldr	r3, [pc, #60]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e70:	2203      	movs	r2, #3
   81e72:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   81e74:	4b0d      	ldr	r3, [pc, #52]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e76:	2201      	movs	r2, #1
   81e78:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   81e7a:	4b0c      	ldr	r3, [pc, #48]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e7c:	2200      	movs	r2, #0
   81e7e:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0x7FC ;
   81e80:	4b0a      	ldr	r3, [pc, #40]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e82:	f240 72fc 	movw	r2, #2044	; 0x7fc
   81e86:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id); ;
   81e88:	4b08      	ldr	r3, [pc, #32]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e8a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   81e8e:	611a      	str	r2, [r3, #16]
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   81e90:	bf00      	nop
   81e92:	4806      	ldr	r0, [pc, #24]	; (81eac <SV_SEND_CAN_MAILBOX+0x7c>)
   81e94:	4b06      	ldr	r3, [pc, #24]	; (81eb0 <SV_SEND_CAN_MAILBOX+0x80>)
   81e96:	4798      	blx	r3
   81e98:	4603      	mov	r3, r0
   81e9a:	2b01      	cmp	r3, #1
   81e9c:	d0f9      	beq.n	81e92 <SV_SEND_CAN_MAILBOX+0x62>
	//dd_can_mailbox_write(&can0_mailbox);
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   81e9e:	2001      	movs	r0, #1
   81ea0:	4b04      	ldr	r3, [pc, #16]	; (81eb4 <SV_SEND_CAN_MAILBOX+0x84>)
   81ea2:	4798      	blx	r3
   81ea4:	bf00      	nop
   81ea6:	3710      	adds	r7, #16
   81ea8:	46bd      	mov	sp, r7
   81eaa:	bd80      	pop	{r7, pc}
   81eac:	20070a48 	.word	0x20070a48
   81eb0:	00080595 	.word	0x00080595
   81eb4:	00080651 	.word	0x00080651

00081eb8 <CPU2_S_SYSTEM_INIT>:
#include "S_SYS.h"
#include "Platform/Service/CPU2_S_TIMER/S_TIMER.h"
#include "Platform/Driver/Driver_calls.h"

void CPU2_S_SYSTEM_INIT()
{
   81eb8:	b580      	push	{r7, lr}
   81eba:	af00      	add	r7, sp, #0
	CPU2_D_INIT_CLOCK();
   81ebc:	4b0a      	ldr	r3, [pc, #40]	; (81ee8 <CPU2_S_SYSTEM_INIT+0x30>)
   81ebe:	4798      	blx	r3
//	CPU2_D_INIT_ADC();
	CPU2_D_INIT_INT();
   81ec0:	4b0a      	ldr	r3, [pc, #40]	; (81eec <CPU2_S_SYSTEM_INIT+0x34>)
   81ec2:	4798      	blx	r3
	CPU2_D_INIT_PIO();
   81ec4:	4b0a      	ldr	r3, [pc, #40]	; (81ef0 <CPU2_S_SYSTEM_INIT+0x38>)
   81ec6:	4798      	blx	r3
	CPU2_D_INIT_PWM();
   81ec8:	4b0a      	ldr	r3, [pc, #40]	; (81ef4 <CPU2_S_SYSTEM_INIT+0x3c>)
   81eca:	4798      	blx	r3
	CPU2_D_INIT_TIMER();
   81ecc:	4b0a      	ldr	r3, [pc, #40]	; (81ef8 <CPU2_S_SYSTEM_INIT+0x40>)
   81ece:	4798      	blx	r3
	DD_INIT_CAN();
   81ed0:	4b0a      	ldr	r3, [pc, #40]	; (81efc <CPU2_S_SYSTEM_INIT+0x44>)
   81ed2:	4798      	blx	r3
	CPU2_DD_INIT_SPI();
   81ed4:	4b0a      	ldr	r3, [pc, #40]	; (81f00 <CPU2_S_SYSTEM_INIT+0x48>)
   81ed6:	4798      	blx	r3
	//CPU2_D_INIT_IIC();
	
	CPU2_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81ed8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   81edc:	2000      	movs	r0, #0
   81ede:	4b09      	ldr	r3, [pc, #36]	; (81f04 <CPU2_S_SYSTEM_INIT+0x4c>)
   81ee0:	4798      	blx	r3
}
   81ee2:	bf00      	nop
   81ee4:	bd80      	pop	{r7, pc}
   81ee6:	bf00      	nop
   81ee8:	00080195 	.word	0x00080195
   81eec:	000813ed 	.word	0x000813ed
   81ef0:	00081019 	.word	0x00081019
   81ef4:	000814b1 	.word	0x000814b1
   81ef8:	00081a9d 	.word	0x00081a9d
   81efc:	0008076d 	.word	0x0008076d
   81f00:	00080d41 	.word	0x00080d41
   81f04:	00081f09 	.word	0x00081f09

00081f08 <CPU2_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU2_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   81f08:	b580      	push	{r7, lr}
   81f0a:	b082      	sub	sp, #8
   81f0c:	af00      	add	r7, sp, #0
   81f0e:	4603      	mov	r3, r0
   81f10:	6039      	str	r1, [r7, #0]
   81f12:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU2_D_CONFIG_TIMER(timer_no, timer_res);
   81f14:	683b      	ldr	r3, [r7, #0]
   81f16:	b2da      	uxtb	r2, r3
   81f18:	79fb      	ldrb	r3, [r7, #7]
   81f1a:	4611      	mov	r1, r2
   81f1c:	4618      	mov	r0, r3
   81f1e:	4b03      	ldr	r3, [pc, #12]	; (81f2c <CPU2_S_START_TIMER+0x24>)
   81f20:	4798      	blx	r3
	
	return 0;
   81f22:	2300      	movs	r3, #0
}
   81f24:	4618      	mov	r0, r3
   81f26:	3708      	adds	r7, #8
   81f28:	46bd      	mov	sp, r7
   81f2a:	bd80      	pop	{r7, pc}
   81f2c:	000819f5 	.word	0x000819f5

00081f30 <_read>:
   81f30:	b580      	push	{r7, lr}
   81f32:	b086      	sub	sp, #24
   81f34:	af00      	add	r7, sp, #0
   81f36:	60f8      	str	r0, [r7, #12]
   81f38:	60b9      	str	r1, [r7, #8]
   81f3a:	607a      	str	r2, [r7, #4]
   81f3c:	2300      	movs	r3, #0
   81f3e:	617b      	str	r3, [r7, #20]
   81f40:	68fb      	ldr	r3, [r7, #12]
   81f42:	2b00      	cmp	r3, #0
   81f44:	d012      	beq.n	81f6c <_read+0x3c>
   81f46:	f04f 33ff 	mov.w	r3, #4294967295
   81f4a:	e013      	b.n	81f74 <_read+0x44>
   81f4c:	4b0b      	ldr	r3, [pc, #44]	; (81f7c <_read+0x4c>)
   81f4e:	681b      	ldr	r3, [r3, #0]
   81f50:	4a0b      	ldr	r2, [pc, #44]	; (81f80 <_read+0x50>)
   81f52:	6812      	ldr	r2, [r2, #0]
   81f54:	68b9      	ldr	r1, [r7, #8]
   81f56:	4610      	mov	r0, r2
   81f58:	4798      	blx	r3
   81f5a:	68bb      	ldr	r3, [r7, #8]
   81f5c:	3301      	adds	r3, #1
   81f5e:	60bb      	str	r3, [r7, #8]
   81f60:	697b      	ldr	r3, [r7, #20]
   81f62:	3301      	adds	r3, #1
   81f64:	617b      	str	r3, [r7, #20]
   81f66:	687b      	ldr	r3, [r7, #4]
   81f68:	3b01      	subs	r3, #1
   81f6a:	607b      	str	r3, [r7, #4]
   81f6c:	687b      	ldr	r3, [r7, #4]
   81f6e:	2b00      	cmp	r3, #0
   81f70:	dcec      	bgt.n	81f4c <_read+0x1c>
   81f72:	697b      	ldr	r3, [r7, #20]
   81f74:	4618      	mov	r0, r3
   81f76:	3718      	adds	r7, #24
   81f78:	46bd      	mov	sp, r7
   81f7a:	bd80      	pop	{r7, pc}
   81f7c:	20070e8c 	.word	0x20070e8c
   81f80:	20070e94 	.word	0x20070e94

00081f84 <_write>:
   81f84:	b580      	push	{r7, lr}
   81f86:	b086      	sub	sp, #24
   81f88:	af00      	add	r7, sp, #0
   81f8a:	60f8      	str	r0, [r7, #12]
   81f8c:	60b9      	str	r1, [r7, #8]
   81f8e:	607a      	str	r2, [r7, #4]
   81f90:	2300      	movs	r3, #0
   81f92:	617b      	str	r3, [r7, #20]
   81f94:	68fb      	ldr	r3, [r7, #12]
   81f96:	2b01      	cmp	r3, #1
   81f98:	d01e      	beq.n	81fd8 <_write+0x54>
   81f9a:	68fb      	ldr	r3, [r7, #12]
   81f9c:	2b02      	cmp	r3, #2
   81f9e:	d01b      	beq.n	81fd8 <_write+0x54>
   81fa0:	68fb      	ldr	r3, [r7, #12]
   81fa2:	2b03      	cmp	r3, #3
   81fa4:	d018      	beq.n	81fd8 <_write+0x54>
   81fa6:	f04f 33ff 	mov.w	r3, #4294967295
   81faa:	e019      	b.n	81fe0 <_write+0x5c>
   81fac:	4b0e      	ldr	r3, [pc, #56]	; (81fe8 <_write+0x64>)
   81fae:	681a      	ldr	r2, [r3, #0]
   81fb0:	4b0e      	ldr	r3, [pc, #56]	; (81fec <_write+0x68>)
   81fb2:	6818      	ldr	r0, [r3, #0]
   81fb4:	68bb      	ldr	r3, [r7, #8]
   81fb6:	1c59      	adds	r1, r3, #1
   81fb8:	60b9      	str	r1, [r7, #8]
   81fba:	781b      	ldrb	r3, [r3, #0]
   81fbc:	4619      	mov	r1, r3
   81fbe:	4790      	blx	r2
   81fc0:	4603      	mov	r3, r0
   81fc2:	2b00      	cmp	r3, #0
   81fc4:	da02      	bge.n	81fcc <_write+0x48>
   81fc6:	f04f 33ff 	mov.w	r3, #4294967295
   81fca:	e009      	b.n	81fe0 <_write+0x5c>
   81fcc:	697b      	ldr	r3, [r7, #20]
   81fce:	3301      	adds	r3, #1
   81fd0:	617b      	str	r3, [r7, #20]
   81fd2:	687b      	ldr	r3, [r7, #4]
   81fd4:	3b01      	subs	r3, #1
   81fd6:	607b      	str	r3, [r7, #4]
   81fd8:	687b      	ldr	r3, [r7, #4]
   81fda:	2b00      	cmp	r3, #0
   81fdc:	d1e6      	bne.n	81fac <_write+0x28>
   81fde:	697b      	ldr	r3, [r7, #20]
   81fe0:	4618      	mov	r0, r3
   81fe2:	3718      	adds	r7, #24
   81fe4:	46bd      	mov	sp, r7
   81fe6:	bd80      	pop	{r7, pc}
   81fe8:	20070e90 	.word	0x20070e90
   81fec:	20070e94 	.word	0x20070e94

00081ff0 <tc_init>:
   81ff0:	b480      	push	{r7}
   81ff2:	b087      	sub	sp, #28
   81ff4:	af00      	add	r7, sp, #0
   81ff6:	60f8      	str	r0, [r7, #12]
   81ff8:	60b9      	str	r1, [r7, #8]
   81ffa:	607a      	str	r2, [r7, #4]
   81ffc:	68fa      	ldr	r2, [r7, #12]
   81ffe:	68bb      	ldr	r3, [r7, #8]
   82000:	019b      	lsls	r3, r3, #6
   82002:	4413      	add	r3, r2
   82004:	617b      	str	r3, [r7, #20]
   82006:	697b      	ldr	r3, [r7, #20]
   82008:	2202      	movs	r2, #2
   8200a:	601a      	str	r2, [r3, #0]
   8200c:	697b      	ldr	r3, [r7, #20]
   8200e:	f04f 32ff 	mov.w	r2, #4294967295
   82012:	629a      	str	r2, [r3, #40]	; 0x28
   82014:	697b      	ldr	r3, [r7, #20]
   82016:	6a1b      	ldr	r3, [r3, #32]
   82018:	697b      	ldr	r3, [r7, #20]
   8201a:	687a      	ldr	r2, [r7, #4]
   8201c:	605a      	str	r2, [r3, #4]
   8201e:	bf00      	nop
   82020:	371c      	adds	r7, #28
   82022:	46bd      	mov	sp, r7
   82024:	bc80      	pop	{r7}
   82026:	4770      	bx	lr

00082028 <tc_start>:
   82028:	b480      	push	{r7}
   8202a:	b083      	sub	sp, #12
   8202c:	af00      	add	r7, sp, #0
   8202e:	6078      	str	r0, [r7, #4]
   82030:	6039      	str	r1, [r7, #0]
   82032:	687a      	ldr	r2, [r7, #4]
   82034:	683b      	ldr	r3, [r7, #0]
   82036:	019b      	lsls	r3, r3, #6
   82038:	4413      	add	r3, r2
   8203a:	2205      	movs	r2, #5
   8203c:	601a      	str	r2, [r3, #0]
   8203e:	bf00      	nop
   82040:	370c      	adds	r7, #12
   82042:	46bd      	mov	sp, r7
   82044:	bc80      	pop	{r7}
   82046:	4770      	bx	lr

00082048 <tc_stop>:
   82048:	b480      	push	{r7}
   8204a:	b083      	sub	sp, #12
   8204c:	af00      	add	r7, sp, #0
   8204e:	6078      	str	r0, [r7, #4]
   82050:	6039      	str	r1, [r7, #0]
   82052:	687a      	ldr	r2, [r7, #4]
   82054:	683b      	ldr	r3, [r7, #0]
   82056:	019b      	lsls	r3, r3, #6
   82058:	4413      	add	r3, r2
   8205a:	2202      	movs	r2, #2
   8205c:	601a      	str	r2, [r3, #0]
   8205e:	bf00      	nop
   82060:	370c      	adds	r7, #12
   82062:	46bd      	mov	sp, r7
   82064:	bc80      	pop	{r7}
   82066:	4770      	bx	lr

00082068 <tc_write_rc>:
   82068:	b480      	push	{r7}
   8206a:	b085      	sub	sp, #20
   8206c:	af00      	add	r7, sp, #0
   8206e:	60f8      	str	r0, [r7, #12]
   82070:	60b9      	str	r1, [r7, #8]
   82072:	607a      	str	r2, [r7, #4]
   82074:	68fa      	ldr	r2, [r7, #12]
   82076:	68bb      	ldr	r3, [r7, #8]
   82078:	019b      	lsls	r3, r3, #6
   8207a:	4413      	add	r3, r2
   8207c:	331c      	adds	r3, #28
   8207e:	687a      	ldr	r2, [r7, #4]
   82080:	601a      	str	r2, [r3, #0]
   82082:	bf00      	nop
   82084:	3714      	adds	r7, #20
   82086:	46bd      	mov	sp, r7
   82088:	bc80      	pop	{r7}
   8208a:	4770      	bx	lr

0008208c <tc_enable_interrupt>:
   8208c:	b480      	push	{r7}
   8208e:	b087      	sub	sp, #28
   82090:	af00      	add	r7, sp, #0
   82092:	60f8      	str	r0, [r7, #12]
   82094:	60b9      	str	r1, [r7, #8]
   82096:	607a      	str	r2, [r7, #4]
   82098:	68fa      	ldr	r2, [r7, #12]
   8209a:	68bb      	ldr	r3, [r7, #8]
   8209c:	019b      	lsls	r3, r3, #6
   8209e:	4413      	add	r3, r2
   820a0:	617b      	str	r3, [r7, #20]
   820a2:	697b      	ldr	r3, [r7, #20]
   820a4:	687a      	ldr	r2, [r7, #4]
   820a6:	625a      	str	r2, [r3, #36]	; 0x24
   820a8:	bf00      	nop
   820aa:	371c      	adds	r7, #28
   820ac:	46bd      	mov	sp, r7
   820ae:	bc80      	pop	{r7}
   820b0:	4770      	bx	lr
   820b2:	bf00      	nop

000820b4 <tc_get_status>:
   820b4:	b480      	push	{r7}
   820b6:	b085      	sub	sp, #20
   820b8:	af00      	add	r7, sp, #0
   820ba:	6078      	str	r0, [r7, #4]
   820bc:	6039      	str	r1, [r7, #0]
   820be:	687a      	ldr	r2, [r7, #4]
   820c0:	683b      	ldr	r3, [r7, #0]
   820c2:	019b      	lsls	r3, r3, #6
   820c4:	4413      	add	r3, r2
   820c6:	60fb      	str	r3, [r7, #12]
   820c8:	68fb      	ldr	r3, [r7, #12]
   820ca:	6a1b      	ldr	r3, [r3, #32]
   820cc:	4618      	mov	r0, r3
   820ce:	3714      	adds	r7, #20
   820d0:	46bd      	mov	sp, r7
   820d2:	bc80      	pop	{r7}
   820d4:	4770      	bx	lr
   820d6:	bf00      	nop

000820d8 <uart_init>:
   820d8:	b480      	push	{r7}
   820da:	b085      	sub	sp, #20
   820dc:	af00      	add	r7, sp, #0
   820de:	6078      	str	r0, [r7, #4]
   820e0:	6039      	str	r1, [r7, #0]
   820e2:	2300      	movs	r3, #0
   820e4:	60fb      	str	r3, [r7, #12]
   820e6:	687b      	ldr	r3, [r7, #4]
   820e8:	22ac      	movs	r2, #172	; 0xac
   820ea:	601a      	str	r2, [r3, #0]
   820ec:	683b      	ldr	r3, [r7, #0]
   820ee:	681a      	ldr	r2, [r3, #0]
   820f0:	683b      	ldr	r3, [r7, #0]
   820f2:	685b      	ldr	r3, [r3, #4]
   820f4:	fbb2 f3f3 	udiv	r3, r2, r3
   820f8:	091b      	lsrs	r3, r3, #4
   820fa:	60fb      	str	r3, [r7, #12]
   820fc:	68fb      	ldr	r3, [r7, #12]
   820fe:	2b00      	cmp	r3, #0
   82100:	d003      	beq.n	8210a <uart_init+0x32>
   82102:	68fb      	ldr	r3, [r7, #12]
   82104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82108:	d301      	bcc.n	8210e <uart_init+0x36>
   8210a:	2301      	movs	r3, #1
   8210c:	e00f      	b.n	8212e <uart_init+0x56>
   8210e:	687b      	ldr	r3, [r7, #4]
   82110:	68fa      	ldr	r2, [r7, #12]
   82112:	621a      	str	r2, [r3, #32]
   82114:	683b      	ldr	r3, [r7, #0]
   82116:	689a      	ldr	r2, [r3, #8]
   82118:	687b      	ldr	r3, [r7, #4]
   8211a:	605a      	str	r2, [r3, #4]
   8211c:	687b      	ldr	r3, [r7, #4]
   8211e:	f240 2202 	movw	r2, #514	; 0x202
   82122:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   82126:	687b      	ldr	r3, [r7, #4]
   82128:	2250      	movs	r2, #80	; 0x50
   8212a:	601a      	str	r2, [r3, #0]
   8212c:	2300      	movs	r3, #0
   8212e:	4618      	mov	r0, r3
   82130:	3714      	adds	r7, #20
   82132:	46bd      	mov	sp, r7
   82134:	bc80      	pop	{r7}
   82136:	4770      	bx	lr

00082138 <uart_enable_interrupt>:
   82138:	b480      	push	{r7}
   8213a:	b083      	sub	sp, #12
   8213c:	af00      	add	r7, sp, #0
   8213e:	6078      	str	r0, [r7, #4]
   82140:	6039      	str	r1, [r7, #0]
   82142:	687b      	ldr	r3, [r7, #4]
   82144:	683a      	ldr	r2, [r7, #0]
   82146:	609a      	str	r2, [r3, #8]
   82148:	bf00      	nop
   8214a:	370c      	adds	r7, #12
   8214c:	46bd      	mov	sp, r7
   8214e:	bc80      	pop	{r7}
   82150:	4770      	bx	lr
   82152:	bf00      	nop

00082154 <uart_write>:
   82154:	b480      	push	{r7}
   82156:	b083      	sub	sp, #12
   82158:	af00      	add	r7, sp, #0
   8215a:	6078      	str	r0, [r7, #4]
   8215c:	460b      	mov	r3, r1
   8215e:	70fb      	strb	r3, [r7, #3]
   82160:	687b      	ldr	r3, [r7, #4]
   82162:	695b      	ldr	r3, [r3, #20]
   82164:	f003 0302 	and.w	r3, r3, #2
   82168:	2b00      	cmp	r3, #0
   8216a:	d101      	bne.n	82170 <uart_write+0x1c>
   8216c:	2301      	movs	r3, #1
   8216e:	e003      	b.n	82178 <uart_write+0x24>
   82170:	78fa      	ldrb	r2, [r7, #3]
   82172:	687b      	ldr	r3, [r7, #4]
   82174:	61da      	str	r2, [r3, #28]
   82176:	2300      	movs	r3, #0
   82178:	4618      	mov	r0, r3
   8217a:	370c      	adds	r7, #12
   8217c:	46bd      	mov	sp, r7
   8217e:	bc80      	pop	{r7}
   82180:	4770      	bx	lr
   82182:	bf00      	nop

00082184 <uart_read>:
   82184:	b480      	push	{r7}
   82186:	b083      	sub	sp, #12
   82188:	af00      	add	r7, sp, #0
   8218a:	6078      	str	r0, [r7, #4]
   8218c:	6039      	str	r1, [r7, #0]
   8218e:	687b      	ldr	r3, [r7, #4]
   82190:	695b      	ldr	r3, [r3, #20]
   82192:	f003 0301 	and.w	r3, r3, #1
   82196:	2b00      	cmp	r3, #0
   82198:	d101      	bne.n	8219e <uart_read+0x1a>
   8219a:	2301      	movs	r3, #1
   8219c:	e005      	b.n	821aa <uart_read+0x26>
   8219e:	687b      	ldr	r3, [r7, #4]
   821a0:	699b      	ldr	r3, [r3, #24]
   821a2:	b2da      	uxtb	r2, r3
   821a4:	683b      	ldr	r3, [r7, #0]
   821a6:	701a      	strb	r2, [r3, #0]
   821a8:	2300      	movs	r3, #0
   821aa:	4618      	mov	r0, r3
   821ac:	370c      	adds	r7, #12
   821ae:	46bd      	mov	sp, r7
   821b0:	bc80      	pop	{r7}
   821b2:	4770      	bx	lr

000821b4 <usart_set_async_baudrate>:
   821b4:	b480      	push	{r7}
   821b6:	b089      	sub	sp, #36	; 0x24
   821b8:	af00      	add	r7, sp, #0
   821ba:	60f8      	str	r0, [r7, #12]
   821bc:	60b9      	str	r1, [r7, #8]
   821be:	607a      	str	r2, [r7, #4]
   821c0:	68bb      	ldr	r3, [r7, #8]
   821c2:	011a      	lsls	r2, r3, #4
   821c4:	687b      	ldr	r3, [r7, #4]
   821c6:	429a      	cmp	r2, r3
   821c8:	d802      	bhi.n	821d0 <usart_set_async_baudrate+0x1c>
   821ca:	2310      	movs	r3, #16
   821cc:	61fb      	str	r3, [r7, #28]
   821ce:	e001      	b.n	821d4 <usart_set_async_baudrate+0x20>
   821d0:	2308      	movs	r3, #8
   821d2:	61fb      	str	r3, [r7, #28]
   821d4:	687b      	ldr	r3, [r7, #4]
   821d6:	00da      	lsls	r2, r3, #3
   821d8:	69fb      	ldr	r3, [r7, #28]
   821da:	68b9      	ldr	r1, [r7, #8]
   821dc:	fb01 f303 	mul.w	r3, r1, r3
   821e0:	085b      	lsrs	r3, r3, #1
   821e2:	441a      	add	r2, r3
   821e4:	69fb      	ldr	r3, [r7, #28]
   821e6:	68b9      	ldr	r1, [r7, #8]
   821e8:	fb01 f303 	mul.w	r3, r1, r3
   821ec:	fbb2 f3f3 	udiv	r3, r2, r3
   821f0:	61bb      	str	r3, [r7, #24]
   821f2:	69bb      	ldr	r3, [r7, #24]
   821f4:	08db      	lsrs	r3, r3, #3
   821f6:	617b      	str	r3, [r7, #20]
   821f8:	69bb      	ldr	r3, [r7, #24]
   821fa:	f003 0307 	and.w	r3, r3, #7
   821fe:	613b      	str	r3, [r7, #16]
   82200:	697b      	ldr	r3, [r7, #20]
   82202:	2b00      	cmp	r3, #0
   82204:	d003      	beq.n	8220e <usart_set_async_baudrate+0x5a>
   82206:	697b      	ldr	r3, [r7, #20]
   82208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8220c:	d301      	bcc.n	82212 <usart_set_async_baudrate+0x5e>
   8220e:	2301      	movs	r3, #1
   82210:	e00f      	b.n	82232 <usart_set_async_baudrate+0x7e>
   82212:	69fb      	ldr	r3, [r7, #28]
   82214:	2b08      	cmp	r3, #8
   82216:	d105      	bne.n	82224 <usart_set_async_baudrate+0x70>
   82218:	68fb      	ldr	r3, [r7, #12]
   8221a:	685b      	ldr	r3, [r3, #4]
   8221c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82220:	68fb      	ldr	r3, [r7, #12]
   82222:	605a      	str	r2, [r3, #4]
   82224:	693b      	ldr	r3, [r7, #16]
   82226:	041a      	lsls	r2, r3, #16
   82228:	697b      	ldr	r3, [r7, #20]
   8222a:	431a      	orrs	r2, r3
   8222c:	68fb      	ldr	r3, [r7, #12]
   8222e:	621a      	str	r2, [r3, #32]
   82230:	2300      	movs	r3, #0
   82232:	4618      	mov	r0, r3
   82234:	3724      	adds	r7, #36	; 0x24
   82236:	46bd      	mov	sp, r7
   82238:	bc80      	pop	{r7}
   8223a:	4770      	bx	lr

0008223c <usart_reset>:
   8223c:	b580      	push	{r7, lr}
   8223e:	b082      	sub	sp, #8
   82240:	af00      	add	r7, sp, #0
   82242:	6078      	str	r0, [r7, #4]
   82244:	6878      	ldr	r0, [r7, #4]
   82246:	4b0d      	ldr	r3, [pc, #52]	; (8227c <usart_reset+0x40>)
   82248:	4798      	blx	r3
   8224a:	687b      	ldr	r3, [r7, #4]
   8224c:	2200      	movs	r2, #0
   8224e:	605a      	str	r2, [r3, #4]
   82250:	687b      	ldr	r3, [r7, #4]
   82252:	2200      	movs	r2, #0
   82254:	625a      	str	r2, [r3, #36]	; 0x24
   82256:	687b      	ldr	r3, [r7, #4]
   82258:	2200      	movs	r2, #0
   8225a:	629a      	str	r2, [r3, #40]	; 0x28
   8225c:	6878      	ldr	r0, [r7, #4]
   8225e:	4b08      	ldr	r3, [pc, #32]	; (82280 <usart_reset+0x44>)
   82260:	4798      	blx	r3
   82262:	6878      	ldr	r0, [r7, #4]
   82264:	4b07      	ldr	r3, [pc, #28]	; (82284 <usart_reset+0x48>)
   82266:	4798      	blx	r3
   82268:	6878      	ldr	r0, [r7, #4]
   8226a:	4b07      	ldr	r3, [pc, #28]	; (82288 <usart_reset+0x4c>)
   8226c:	4798      	blx	r3
   8226e:	6878      	ldr	r0, [r7, #4]
   82270:	4b06      	ldr	r3, [pc, #24]	; (8228c <usart_reset+0x50>)
   82272:	4798      	blx	r3
   82274:	bf00      	nop
   82276:	3708      	adds	r7, #8
   82278:	46bd      	mov	sp, r7
   8227a:	bd80      	pop	{r7, pc}
   8227c:	00082411 	.word	0x00082411
   82280:	0008232d 	.word	0x0008232d
   82284:	0008235d 	.word	0x0008235d
   82288:	00082375 	.word	0x00082375
   8228c:	00082391 	.word	0x00082391

00082290 <usart_init_rs232>:
   82290:	b580      	push	{r7, lr}
   82292:	b084      	sub	sp, #16
   82294:	af00      	add	r7, sp, #0
   82296:	60f8      	str	r0, [r7, #12]
   82298:	60b9      	str	r1, [r7, #8]
   8229a:	607a      	str	r2, [r7, #4]
   8229c:	68f8      	ldr	r0, [r7, #12]
   8229e:	4b1a      	ldr	r3, [pc, #104]	; (82308 <usart_init_rs232+0x78>)
   822a0:	4798      	blx	r3
   822a2:	4b1a      	ldr	r3, [pc, #104]	; (8230c <usart_init_rs232+0x7c>)
   822a4:	2200      	movs	r2, #0
   822a6:	601a      	str	r2, [r3, #0]
   822a8:	68bb      	ldr	r3, [r7, #8]
   822aa:	2b00      	cmp	r3, #0
   822ac:	d009      	beq.n	822c2 <usart_init_rs232+0x32>
   822ae:	68bb      	ldr	r3, [r7, #8]
   822b0:	681b      	ldr	r3, [r3, #0]
   822b2:	687a      	ldr	r2, [r7, #4]
   822b4:	4619      	mov	r1, r3
   822b6:	68f8      	ldr	r0, [r7, #12]
   822b8:	4b15      	ldr	r3, [pc, #84]	; (82310 <usart_init_rs232+0x80>)
   822ba:	4798      	blx	r3
   822bc:	4603      	mov	r3, r0
   822be:	2b00      	cmp	r3, #0
   822c0:	d001      	beq.n	822c6 <usart_init_rs232+0x36>
   822c2:	2301      	movs	r3, #1
   822c4:	e01b      	b.n	822fe <usart_init_rs232+0x6e>
   822c6:	68bb      	ldr	r3, [r7, #8]
   822c8:	685a      	ldr	r2, [r3, #4]
   822ca:	68bb      	ldr	r3, [r7, #8]
   822cc:	689b      	ldr	r3, [r3, #8]
   822ce:	431a      	orrs	r2, r3
   822d0:	68bb      	ldr	r3, [r7, #8]
   822d2:	691b      	ldr	r3, [r3, #16]
   822d4:	431a      	orrs	r2, r3
   822d6:	68bb      	ldr	r3, [r7, #8]
   822d8:	68db      	ldr	r3, [r3, #12]
   822da:	431a      	orrs	r2, r3
   822dc:	4b0b      	ldr	r3, [pc, #44]	; (8230c <usart_init_rs232+0x7c>)
   822de:	681b      	ldr	r3, [r3, #0]
   822e0:	4313      	orrs	r3, r2
   822e2:	4a0a      	ldr	r2, [pc, #40]	; (8230c <usart_init_rs232+0x7c>)
   822e4:	6013      	str	r3, [r2, #0]
   822e6:	4b09      	ldr	r3, [pc, #36]	; (8230c <usart_init_rs232+0x7c>)
   822e8:	681b      	ldr	r3, [r3, #0]
   822ea:	4a08      	ldr	r2, [pc, #32]	; (8230c <usart_init_rs232+0x7c>)
   822ec:	6013      	str	r3, [r2, #0]
   822ee:	68fb      	ldr	r3, [r7, #12]
   822f0:	685a      	ldr	r2, [r3, #4]
   822f2:	4b06      	ldr	r3, [pc, #24]	; (8230c <usart_init_rs232+0x7c>)
   822f4:	681b      	ldr	r3, [r3, #0]
   822f6:	431a      	orrs	r2, r3
   822f8:	68fb      	ldr	r3, [r7, #12]
   822fa:	605a      	str	r2, [r3, #4]
   822fc:	2300      	movs	r3, #0
   822fe:	4618      	mov	r0, r3
   82300:	3710      	adds	r7, #16
   82302:	46bd      	mov	sp, r7
   82304:	bd80      	pop	{r7, pc}
   82306:	bf00      	nop
   82308:	0008223d 	.word	0x0008223d
   8230c:	2007096c 	.word	0x2007096c
   82310:	000821b5 	.word	0x000821b5

00082314 <usart_enable_tx>:
   82314:	b480      	push	{r7}
   82316:	b083      	sub	sp, #12
   82318:	af00      	add	r7, sp, #0
   8231a:	6078      	str	r0, [r7, #4]
   8231c:	687b      	ldr	r3, [r7, #4]
   8231e:	2240      	movs	r2, #64	; 0x40
   82320:	601a      	str	r2, [r3, #0]
   82322:	bf00      	nop
   82324:	370c      	adds	r7, #12
   82326:	46bd      	mov	sp, r7
   82328:	bc80      	pop	{r7}
   8232a:	4770      	bx	lr

0008232c <usart_reset_tx>:
   8232c:	b480      	push	{r7}
   8232e:	b083      	sub	sp, #12
   82330:	af00      	add	r7, sp, #0
   82332:	6078      	str	r0, [r7, #4]
   82334:	687b      	ldr	r3, [r7, #4]
   82336:	2288      	movs	r2, #136	; 0x88
   82338:	601a      	str	r2, [r3, #0]
   8233a:	bf00      	nop
   8233c:	370c      	adds	r7, #12
   8233e:	46bd      	mov	sp, r7
   82340:	bc80      	pop	{r7}
   82342:	4770      	bx	lr

00082344 <usart_enable_rx>:
   82344:	b480      	push	{r7}
   82346:	b083      	sub	sp, #12
   82348:	af00      	add	r7, sp, #0
   8234a:	6078      	str	r0, [r7, #4]
   8234c:	687b      	ldr	r3, [r7, #4]
   8234e:	2210      	movs	r2, #16
   82350:	601a      	str	r2, [r3, #0]
   82352:	bf00      	nop
   82354:	370c      	adds	r7, #12
   82356:	46bd      	mov	sp, r7
   82358:	bc80      	pop	{r7}
   8235a:	4770      	bx	lr

0008235c <usart_reset_rx>:
   8235c:	b480      	push	{r7}
   8235e:	b083      	sub	sp, #12
   82360:	af00      	add	r7, sp, #0
   82362:	6078      	str	r0, [r7, #4]
   82364:	687b      	ldr	r3, [r7, #4]
   82366:	2224      	movs	r2, #36	; 0x24
   82368:	601a      	str	r2, [r3, #0]
   8236a:	bf00      	nop
   8236c:	370c      	adds	r7, #12
   8236e:	46bd      	mov	sp, r7
   82370:	bc80      	pop	{r7}
   82372:	4770      	bx	lr

00082374 <usart_reset_status>:
   82374:	b480      	push	{r7}
   82376:	b083      	sub	sp, #12
   82378:	af00      	add	r7, sp, #0
   8237a:	6078      	str	r0, [r7, #4]
   8237c:	687b      	ldr	r3, [r7, #4]
   8237e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82382:	601a      	str	r2, [r3, #0]
   82384:	bf00      	nop
   82386:	370c      	adds	r7, #12
   82388:	46bd      	mov	sp, r7
   8238a:	bc80      	pop	{r7}
   8238c:	4770      	bx	lr
   8238e:	bf00      	nop

00082390 <usart_drive_RTS_pin_high>:
   82390:	b480      	push	{r7}
   82392:	b083      	sub	sp, #12
   82394:	af00      	add	r7, sp, #0
   82396:	6078      	str	r0, [r7, #4]
   82398:	687b      	ldr	r3, [r7, #4]
   8239a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8239e:	601a      	str	r2, [r3, #0]
   823a0:	bf00      	nop
   823a2:	370c      	adds	r7, #12
   823a4:	46bd      	mov	sp, r7
   823a6:	bc80      	pop	{r7}
   823a8:	4770      	bx	lr
   823aa:	bf00      	nop

000823ac <usart_write>:
   823ac:	b480      	push	{r7}
   823ae:	b083      	sub	sp, #12
   823b0:	af00      	add	r7, sp, #0
   823b2:	6078      	str	r0, [r7, #4]
   823b4:	6039      	str	r1, [r7, #0]
   823b6:	687b      	ldr	r3, [r7, #4]
   823b8:	695b      	ldr	r3, [r3, #20]
   823ba:	f003 0302 	and.w	r3, r3, #2
   823be:	2b00      	cmp	r3, #0
   823c0:	d101      	bne.n	823c6 <usart_write+0x1a>
   823c2:	2301      	movs	r3, #1
   823c4:	e005      	b.n	823d2 <usart_write+0x26>
   823c6:	683b      	ldr	r3, [r7, #0]
   823c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   823cc:	687b      	ldr	r3, [r7, #4]
   823ce:	61da      	str	r2, [r3, #28]
   823d0:	2300      	movs	r3, #0
   823d2:	4618      	mov	r0, r3
   823d4:	370c      	adds	r7, #12
   823d6:	46bd      	mov	sp, r7
   823d8:	bc80      	pop	{r7}
   823da:	4770      	bx	lr

000823dc <usart_read>:
   823dc:	b480      	push	{r7}
   823de:	b083      	sub	sp, #12
   823e0:	af00      	add	r7, sp, #0
   823e2:	6078      	str	r0, [r7, #4]
   823e4:	6039      	str	r1, [r7, #0]
   823e6:	687b      	ldr	r3, [r7, #4]
   823e8:	695b      	ldr	r3, [r3, #20]
   823ea:	f003 0301 	and.w	r3, r3, #1
   823ee:	2b00      	cmp	r3, #0
   823f0:	d101      	bne.n	823f6 <usart_read+0x1a>
   823f2:	2301      	movs	r3, #1
   823f4:	e006      	b.n	82404 <usart_read+0x28>
   823f6:	687b      	ldr	r3, [r7, #4]
   823f8:	699b      	ldr	r3, [r3, #24]
   823fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   823fe:	683b      	ldr	r3, [r7, #0]
   82400:	601a      	str	r2, [r3, #0]
   82402:	2300      	movs	r3, #0
   82404:	4618      	mov	r0, r3
   82406:	370c      	adds	r7, #12
   82408:	46bd      	mov	sp, r7
   8240a:	bc80      	pop	{r7}
   8240c:	4770      	bx	lr
   8240e:	bf00      	nop

00082410 <usart_disable_writeprotect>:
   82410:	b480      	push	{r7}
   82412:	b083      	sub	sp, #12
   82414:	af00      	add	r7, sp, #0
   82416:	6078      	str	r0, [r7, #4]
   82418:	687b      	ldr	r3, [r7, #4]
   8241a:	4a04      	ldr	r2, [pc, #16]	; (8242c <usart_disable_writeprotect+0x1c>)
   8241c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   82420:	bf00      	nop
   82422:	370c      	adds	r7, #12
   82424:	46bd      	mov	sp, r7
   82426:	bc80      	pop	{r7}
   82428:	4770      	bx	lr
   8242a:	bf00      	nop
   8242c:	55534100 	.word	0x55534100

00082430 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   82430:	b480      	push	{r7}
   82432:	b083      	sub	sp, #12
   82434:	af00      	add	r7, sp, #0
   82436:	4603      	mov	r3, r0
   82438:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8243a:	4908      	ldr	r1, [pc, #32]	; (8245c <NVIC_EnableIRQ+0x2c>)
   8243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82440:	095b      	lsrs	r3, r3, #5
   82442:	79fa      	ldrb	r2, [r7, #7]
   82444:	f002 021f 	and.w	r2, r2, #31
   82448:	2001      	movs	r0, #1
   8244a:	fa00 f202 	lsl.w	r2, r0, r2
   8244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82452:	bf00      	nop
   82454:	370c      	adds	r7, #12
   82456:	46bd      	mov	sp, r7
   82458:	bc80      	pop	{r7}
   8245a:	4770      	bx	lr
   8245c:	e000e100 	.word	0xe000e100

00082460 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   82460:	b480      	push	{r7}
   82462:	b083      	sub	sp, #12
   82464:	af00      	add	r7, sp, #0
   82466:	4603      	mov	r3, r0
   82468:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8246a:	4909      	ldr	r1, [pc, #36]	; (82490 <NVIC_DisableIRQ+0x30>)
   8246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82470:	095b      	lsrs	r3, r3, #5
   82472:	79fa      	ldrb	r2, [r7, #7]
   82474:	f002 021f 	and.w	r2, r2, #31
   82478:	2001      	movs	r0, #1
   8247a:	fa00 f202 	lsl.w	r2, r0, r2
   8247e:	3320      	adds	r3, #32
   82480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82484:	bf00      	nop
   82486:	370c      	adds	r7, #12
   82488:	46bd      	mov	sp, r7
   8248a:	bc80      	pop	{r7}
   8248c:	4770      	bx	lr
   8248e:	bf00      	nop
   82490:	e000e100 	.word	0xe000e100

00082494 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   82494:	b480      	push	{r7}
   82496:	b083      	sub	sp, #12
   82498:	af00      	add	r7, sp, #0
   8249a:	4603      	mov	r3, r0
   8249c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8249e:	4909      	ldr	r1, [pc, #36]	; (824c4 <NVIC_ClearPendingIRQ+0x30>)
   824a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824a4:	095b      	lsrs	r3, r3, #5
   824a6:	79fa      	ldrb	r2, [r7, #7]
   824a8:	f002 021f 	and.w	r2, r2, #31
   824ac:	2001      	movs	r0, #1
   824ae:	fa00 f202 	lsl.w	r2, r0, r2
   824b2:	3360      	adds	r3, #96	; 0x60
   824b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   824b8:	bf00      	nop
   824ba:	370c      	adds	r7, #12
   824bc:	46bd      	mov	sp, r7
   824be:	bc80      	pop	{r7}
   824c0:	4770      	bx	lr
   824c2:	bf00      	nop
   824c4:	e000e100 	.word	0xe000e100

000824c8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   824c8:	b480      	push	{r7}
   824ca:	b083      	sub	sp, #12
   824cc:	af00      	add	r7, sp, #0
   824ce:	4603      	mov	r3, r0
   824d0:	6039      	str	r1, [r7, #0]
   824d2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   824d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824d8:	2b00      	cmp	r3, #0
   824da:	da0b      	bge.n	824f4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   824dc:	490d      	ldr	r1, [pc, #52]	; (82514 <NVIC_SetPriority+0x4c>)
   824de:	79fb      	ldrb	r3, [r7, #7]
   824e0:	f003 030f 	and.w	r3, r3, #15
   824e4:	3b04      	subs	r3, #4
   824e6:	683a      	ldr	r2, [r7, #0]
   824e8:	b2d2      	uxtb	r2, r2
   824ea:	0112      	lsls	r2, r2, #4
   824ec:	b2d2      	uxtb	r2, r2
   824ee:	440b      	add	r3, r1
   824f0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   824f2:	e009      	b.n	82508 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   824f4:	4908      	ldr	r1, [pc, #32]	; (82518 <NVIC_SetPriority+0x50>)
   824f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824fa:	683a      	ldr	r2, [r7, #0]
   824fc:	b2d2      	uxtb	r2, r2
   824fe:	0112      	lsls	r2, r2, #4
   82500:	b2d2      	uxtb	r2, r2
   82502:	440b      	add	r3, r1
   82504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   82508:	bf00      	nop
   8250a:	370c      	adds	r7, #12
   8250c:	46bd      	mov	sp, r7
   8250e:	bc80      	pop	{r7}
   82510:	4770      	bx	lr
   82512:	bf00      	nop
   82514:	e000ed00 	.word	0xe000ed00
   82518:	e000e100 	.word	0xe000e100

0008251c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8251c:	b480      	push	{r7}
   8251e:	b083      	sub	sp, #12
   82520:	af00      	add	r7, sp, #0
   82522:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82524:	687b      	ldr	r3, [r7, #4]
   82526:	2b07      	cmp	r3, #7
   82528:	d825      	bhi.n	82576 <osc_get_rate+0x5a>
   8252a:	a201      	add	r2, pc, #4	; (adr r2, 82530 <osc_get_rate+0x14>)
   8252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82530:	00082551 	.word	0x00082551
   82534:	00082557 	.word	0x00082557
   82538:	0008255d 	.word	0x0008255d
   8253c:	00082563 	.word	0x00082563
   82540:	00082567 	.word	0x00082567
   82544:	0008256b 	.word	0x0008256b
   82548:	0008256f 	.word	0x0008256f
   8254c:	00082573 	.word	0x00082573
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82550:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82554:	e010      	b.n	82578 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8255a:	e00d      	b.n	82578 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8255c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82560:	e00a      	b.n	82578 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82562:	4b08      	ldr	r3, [pc, #32]	; (82584 <osc_get_rate+0x68>)
   82564:	e008      	b.n	82578 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82566:	4b08      	ldr	r3, [pc, #32]	; (82588 <osc_get_rate+0x6c>)
   82568:	e006      	b.n	82578 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8256a:	4b08      	ldr	r3, [pc, #32]	; (8258c <osc_get_rate+0x70>)
   8256c:	e004      	b.n	82578 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8256e:	4b07      	ldr	r3, [pc, #28]	; (8258c <osc_get_rate+0x70>)
   82570:	e002      	b.n	82578 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82572:	4b06      	ldr	r3, [pc, #24]	; (8258c <osc_get_rate+0x70>)
   82574:	e000      	b.n	82578 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82576:	2300      	movs	r3, #0
}
   82578:	4618      	mov	r0, r3
   8257a:	370c      	adds	r7, #12
   8257c:	46bd      	mov	sp, r7
   8257e:	bc80      	pop	{r7}
   82580:	4770      	bx	lr
   82582:	bf00      	nop
   82584:	003d0900 	.word	0x003d0900
   82588:	007a1200 	.word	0x007a1200
   8258c:	00b71b00 	.word	0x00b71b00

00082590 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82590:	b580      	push	{r7, lr}
   82592:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82594:	2006      	movs	r0, #6
   82596:	4b04      	ldr	r3, [pc, #16]	; (825a8 <sysclk_get_main_hz+0x18>)
   82598:	4798      	blx	r3
   8259a:	4602      	mov	r2, r0
   8259c:	4613      	mov	r3, r2
   8259e:	00db      	lsls	r3, r3, #3
   825a0:	1a9b      	subs	r3, r3, r2
   825a2:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   825a4:	4618      	mov	r0, r3
   825a6:	bd80      	pop	{r7, pc}
   825a8:	0008251d 	.word	0x0008251d

000825ac <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   825ac:	b580      	push	{r7, lr}
   825ae:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   825b0:	4b02      	ldr	r3, [pc, #8]	; (825bc <sysclk_get_peripheral_hz+0x10>)
   825b2:	4798      	blx	r3
   825b4:	4603      	mov	r3, r0
   825b6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   825b8:	4618      	mov	r0, r3
   825ba:	bd80      	pop	{r7, pc}
   825bc:	00082591 	.word	0x00082591

000825c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   825c0:	b580      	push	{r7, lr}
   825c2:	b082      	sub	sp, #8
   825c4:	af00      	add	r7, sp, #0
   825c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   825c8:	6878      	ldr	r0, [r7, #4]
   825ca:	4b03      	ldr	r3, [pc, #12]	; (825d8 <sysclk_enable_peripheral_clock+0x18>)
   825cc:	4798      	blx	r3
}
   825ce:	bf00      	nop
   825d0:	3708      	adds	r7, #8
   825d2:	46bd      	mov	sp, r7
   825d4:	bd80      	pop	{r7, pc}
   825d6:	bf00      	nop
   825d8:	00083e8d 	.word	0x00083e8d

000825dc <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   825dc:	b580      	push	{r7, lr}
   825de:	b08c      	sub	sp, #48	; 0x30
   825e0:	af00      	add	r7, sp, #0
   825e2:	6078      	str	r0, [r7, #4]
   825e4:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   825e6:	4b40      	ldr	r3, [pc, #256]	; (826e8 <usart_serial_init+0x10c>)
   825e8:	4798      	blx	r3
   825ea:	4603      	mov	r3, r0
   825ec:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   825ee:	683b      	ldr	r3, [r7, #0]
   825f0:	681b      	ldr	r3, [r3, #0]
   825f2:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   825f4:	683b      	ldr	r3, [r7, #0]
   825f6:	689b      	ldr	r3, [r3, #8]
   825f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   825fa:	683b      	ldr	r3, [r7, #0]
   825fc:	681b      	ldr	r3, [r3, #0]
   825fe:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   82600:	683b      	ldr	r3, [r7, #0]
   82602:	685b      	ldr	r3, [r3, #4]
   82604:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   82606:	683b      	ldr	r3, [r7, #0]
   82608:	689b      	ldr	r3, [r3, #8]
   8260a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   8260c:	683b      	ldr	r3, [r7, #0]
   8260e:	7b1b      	ldrb	r3, [r3, #12]
   82610:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   82612:	2300      	movs	r3, #0
   82614:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   82616:	687b      	ldr	r3, [r7, #4]
   82618:	4a34      	ldr	r2, [pc, #208]	; (826ec <usart_serial_init+0x110>)
   8261a:	4293      	cmp	r3, r2
   8261c:	d108      	bne.n	82630 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   8261e:	2008      	movs	r0, #8
   82620:	4b33      	ldr	r3, [pc, #204]	; (826f0 <usart_serial_init+0x114>)
   82622:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82624:	f107 0320 	add.w	r3, r7, #32
   82628:	4619      	mov	r1, r3
   8262a:	6878      	ldr	r0, [r7, #4]
   8262c:	4b31      	ldr	r3, [pc, #196]	; (826f4 <usart_serial_init+0x118>)
   8262e:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82630:	687b      	ldr	r3, [r7, #4]
   82632:	4a31      	ldr	r2, [pc, #196]	; (826f8 <usart_serial_init+0x11c>)
   82634:	4293      	cmp	r3, r2
   82636:	d111      	bne.n	8265c <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   82638:	2011      	movs	r0, #17
   8263a:	4b2d      	ldr	r3, [pc, #180]	; (826f0 <usart_serial_init+0x114>)
   8263c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8263e:	4b2a      	ldr	r3, [pc, #168]	; (826e8 <usart_serial_init+0x10c>)
   82640:	4798      	blx	r3
   82642:	4602      	mov	r2, r0
   82644:	f107 0308 	add.w	r3, r7, #8
   82648:	4619      	mov	r1, r3
   8264a:	6878      	ldr	r0, [r7, #4]
   8264c:	4b2b      	ldr	r3, [pc, #172]	; (826fc <usart_serial_init+0x120>)
   8264e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   82650:	6878      	ldr	r0, [r7, #4]
   82652:	4b2b      	ldr	r3, [pc, #172]	; (82700 <usart_serial_init+0x124>)
   82654:	4798      	blx	r3
		usart_enable_rx(p_usart);
   82656:	6878      	ldr	r0, [r7, #4]
   82658:	4b2a      	ldr	r3, [pc, #168]	; (82704 <usart_serial_init+0x128>)
   8265a:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8265c:	687b      	ldr	r3, [r7, #4]
   8265e:	4a2a      	ldr	r2, [pc, #168]	; (82708 <usart_serial_init+0x12c>)
   82660:	4293      	cmp	r3, r2
   82662:	d111      	bne.n	82688 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   82664:	2012      	movs	r0, #18
   82666:	4b22      	ldr	r3, [pc, #136]	; (826f0 <usart_serial_init+0x114>)
   82668:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8266a:	4b1f      	ldr	r3, [pc, #124]	; (826e8 <usart_serial_init+0x10c>)
   8266c:	4798      	blx	r3
   8266e:	4602      	mov	r2, r0
   82670:	f107 0308 	add.w	r3, r7, #8
   82674:	4619      	mov	r1, r3
   82676:	6878      	ldr	r0, [r7, #4]
   82678:	4b20      	ldr	r3, [pc, #128]	; (826fc <usart_serial_init+0x120>)
   8267a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   8267c:	6878      	ldr	r0, [r7, #4]
   8267e:	4b20      	ldr	r3, [pc, #128]	; (82700 <usart_serial_init+0x124>)
   82680:	4798      	blx	r3
		usart_enable_rx(p_usart);
   82682:	6878      	ldr	r0, [r7, #4]
   82684:	4b1f      	ldr	r3, [pc, #124]	; (82704 <usart_serial_init+0x128>)
   82686:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82688:	687b      	ldr	r3, [r7, #4]
   8268a:	4a20      	ldr	r2, [pc, #128]	; (8270c <usart_serial_init+0x130>)
   8268c:	4293      	cmp	r3, r2
   8268e:	d111      	bne.n	826b4 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   82690:	2013      	movs	r0, #19
   82692:	4b17      	ldr	r3, [pc, #92]	; (826f0 <usart_serial_init+0x114>)
   82694:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   82696:	4b14      	ldr	r3, [pc, #80]	; (826e8 <usart_serial_init+0x10c>)
   82698:	4798      	blx	r3
   8269a:	4602      	mov	r2, r0
   8269c:	f107 0308 	add.w	r3, r7, #8
   826a0:	4619      	mov	r1, r3
   826a2:	6878      	ldr	r0, [r7, #4]
   826a4:	4b15      	ldr	r3, [pc, #84]	; (826fc <usart_serial_init+0x120>)
   826a6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   826a8:	6878      	ldr	r0, [r7, #4]
   826aa:	4b15      	ldr	r3, [pc, #84]	; (82700 <usart_serial_init+0x124>)
   826ac:	4798      	blx	r3
		usart_enable_rx(p_usart);
   826ae:	6878      	ldr	r0, [r7, #4]
   826b0:	4b14      	ldr	r3, [pc, #80]	; (82704 <usart_serial_init+0x128>)
   826b2:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   826b4:	687b      	ldr	r3, [r7, #4]
   826b6:	4a16      	ldr	r2, [pc, #88]	; (82710 <usart_serial_init+0x134>)
   826b8:	4293      	cmp	r3, r2
   826ba:	d111      	bne.n	826e0 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   826bc:	2014      	movs	r0, #20
   826be:	4b0c      	ldr	r3, [pc, #48]	; (826f0 <usart_serial_init+0x114>)
   826c0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   826c2:	4b09      	ldr	r3, [pc, #36]	; (826e8 <usart_serial_init+0x10c>)
   826c4:	4798      	blx	r3
   826c6:	4602      	mov	r2, r0
   826c8:	f107 0308 	add.w	r3, r7, #8
   826cc:	4619      	mov	r1, r3
   826ce:	6878      	ldr	r0, [r7, #4]
   826d0:	4b0a      	ldr	r3, [pc, #40]	; (826fc <usart_serial_init+0x120>)
   826d2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   826d4:	6878      	ldr	r0, [r7, #4]
   826d6:	4b0a      	ldr	r3, [pc, #40]	; (82700 <usart_serial_init+0x124>)
   826d8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   826da:	6878      	ldr	r0, [r7, #4]
   826dc:	4b09      	ldr	r3, [pc, #36]	; (82704 <usart_serial_init+0x128>)
   826de:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   826e0:	bf00      	nop
   826e2:	3730      	adds	r7, #48	; 0x30
   826e4:	46bd      	mov	sp, r7
   826e6:	bd80      	pop	{r7, pc}
   826e8:	000825ad 	.word	0x000825ad
   826ec:	400e0800 	.word	0x400e0800
   826f0:	000825c1 	.word	0x000825c1
   826f4:	000820d9 	.word	0x000820d9
   826f8:	40098000 	.word	0x40098000
   826fc:	00082291 	.word	0x00082291
   82700:	00082315 	.word	0x00082315
   82704:	00082345 	.word	0x00082345
   82708:	4009c000 	.word	0x4009c000
   8270c:	400a0000 	.word	0x400a0000
   82710:	400a4000 	.word	0x400a4000

00082714 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   82714:	b580      	push	{r7, lr}
   82716:	b082      	sub	sp, #8
   82718:	af00      	add	r7, sp, #0
   8271a:	6078      	str	r0, [r7, #4]
   8271c:	460b      	mov	r3, r1
   8271e:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   82720:	687b      	ldr	r3, [r7, #4]
   82722:	4a27      	ldr	r2, [pc, #156]	; (827c0 <usart_serial_putchar+0xac>)
   82724:	4293      	cmp	r3, r2
   82726:	d10a      	bne.n	8273e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   82728:	bf00      	nop
   8272a:	78fb      	ldrb	r3, [r7, #3]
   8272c:	4619      	mov	r1, r3
   8272e:	6878      	ldr	r0, [r7, #4]
   82730:	4b24      	ldr	r3, [pc, #144]	; (827c4 <usart_serial_putchar+0xb0>)
   82732:	4798      	blx	r3
   82734:	4603      	mov	r3, r0
   82736:	2b00      	cmp	r3, #0
   82738:	d1f7      	bne.n	8272a <usart_serial_putchar+0x16>
		return 1;
   8273a:	2301      	movs	r3, #1
   8273c:	e03c      	b.n	827b8 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8273e:	687b      	ldr	r3, [r7, #4]
   82740:	4a21      	ldr	r2, [pc, #132]	; (827c8 <usart_serial_putchar+0xb4>)
   82742:	4293      	cmp	r3, r2
   82744:	d10a      	bne.n	8275c <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   82746:	bf00      	nop
   82748:	78fb      	ldrb	r3, [r7, #3]
   8274a:	4619      	mov	r1, r3
   8274c:	6878      	ldr	r0, [r7, #4]
   8274e:	4b1f      	ldr	r3, [pc, #124]	; (827cc <usart_serial_putchar+0xb8>)
   82750:	4798      	blx	r3
   82752:	4603      	mov	r3, r0
   82754:	2b00      	cmp	r3, #0
   82756:	d1f7      	bne.n	82748 <usart_serial_putchar+0x34>
		return 1;
   82758:	2301      	movs	r3, #1
   8275a:	e02d      	b.n	827b8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8275c:	687b      	ldr	r3, [r7, #4]
   8275e:	4a1c      	ldr	r2, [pc, #112]	; (827d0 <usart_serial_putchar+0xbc>)
   82760:	4293      	cmp	r3, r2
   82762:	d10a      	bne.n	8277a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   82764:	bf00      	nop
   82766:	78fb      	ldrb	r3, [r7, #3]
   82768:	4619      	mov	r1, r3
   8276a:	6878      	ldr	r0, [r7, #4]
   8276c:	4b17      	ldr	r3, [pc, #92]	; (827cc <usart_serial_putchar+0xb8>)
   8276e:	4798      	blx	r3
   82770:	4603      	mov	r3, r0
   82772:	2b00      	cmp	r3, #0
   82774:	d1f7      	bne.n	82766 <usart_serial_putchar+0x52>
		return 1;
   82776:	2301      	movs	r3, #1
   82778:	e01e      	b.n	827b8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8277a:	687b      	ldr	r3, [r7, #4]
   8277c:	4a15      	ldr	r2, [pc, #84]	; (827d4 <usart_serial_putchar+0xc0>)
   8277e:	4293      	cmp	r3, r2
   82780:	d10a      	bne.n	82798 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   82782:	bf00      	nop
   82784:	78fb      	ldrb	r3, [r7, #3]
   82786:	4619      	mov	r1, r3
   82788:	6878      	ldr	r0, [r7, #4]
   8278a:	4b10      	ldr	r3, [pc, #64]	; (827cc <usart_serial_putchar+0xb8>)
   8278c:	4798      	blx	r3
   8278e:	4603      	mov	r3, r0
   82790:	2b00      	cmp	r3, #0
   82792:	d1f7      	bne.n	82784 <usart_serial_putchar+0x70>
		return 1;
   82794:	2301      	movs	r3, #1
   82796:	e00f      	b.n	827b8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82798:	687b      	ldr	r3, [r7, #4]
   8279a:	4a0f      	ldr	r2, [pc, #60]	; (827d8 <usart_serial_putchar+0xc4>)
   8279c:	4293      	cmp	r3, r2
   8279e:	d10a      	bne.n	827b6 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   827a0:	bf00      	nop
   827a2:	78fb      	ldrb	r3, [r7, #3]
   827a4:	4619      	mov	r1, r3
   827a6:	6878      	ldr	r0, [r7, #4]
   827a8:	4b08      	ldr	r3, [pc, #32]	; (827cc <usart_serial_putchar+0xb8>)
   827aa:	4798      	blx	r3
   827ac:	4603      	mov	r3, r0
   827ae:	2b00      	cmp	r3, #0
   827b0:	d1f7      	bne.n	827a2 <usart_serial_putchar+0x8e>
		return 1;
   827b2:	2301      	movs	r3, #1
   827b4:	e000      	b.n	827b8 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   827b6:	2300      	movs	r3, #0
}
   827b8:	4618      	mov	r0, r3
   827ba:	3708      	adds	r7, #8
   827bc:	46bd      	mov	sp, r7
   827be:	bd80      	pop	{r7, pc}
   827c0:	400e0800 	.word	0x400e0800
   827c4:	00082155 	.word	0x00082155
   827c8:	40098000 	.word	0x40098000
   827cc:	000823ad 	.word	0x000823ad
   827d0:	4009c000 	.word	0x4009c000
   827d4:	400a0000 	.word	0x400a0000
   827d8:	400a4000 	.word	0x400a4000

000827dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   827dc:	b580      	push	{r7, lr}
   827de:	b084      	sub	sp, #16
   827e0:	af00      	add	r7, sp, #0
   827e2:	6078      	str	r0, [r7, #4]
   827e4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   827e6:	2300      	movs	r3, #0
   827e8:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   827ea:	687b      	ldr	r3, [r7, #4]
   827ec:	4a2b      	ldr	r2, [pc, #172]	; (8289c <usart_serial_getchar+0xc0>)
   827ee:	4293      	cmp	r3, r2
   827f0:	d107      	bne.n	82802 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   827f2:	bf00      	nop
   827f4:	6839      	ldr	r1, [r7, #0]
   827f6:	6878      	ldr	r0, [r7, #4]
   827f8:	4b29      	ldr	r3, [pc, #164]	; (828a0 <usart_serial_getchar+0xc4>)
   827fa:	4798      	blx	r3
   827fc:	4603      	mov	r3, r0
   827fe:	2b00      	cmp	r3, #0
   82800:	d1f8      	bne.n	827f4 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82802:	687b      	ldr	r3, [r7, #4]
   82804:	4a27      	ldr	r2, [pc, #156]	; (828a4 <usart_serial_getchar+0xc8>)
   82806:	4293      	cmp	r3, r2
   82808:	d10d      	bne.n	82826 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   8280a:	bf00      	nop
   8280c:	f107 030c 	add.w	r3, r7, #12
   82810:	4619      	mov	r1, r3
   82812:	6878      	ldr	r0, [r7, #4]
   82814:	4b24      	ldr	r3, [pc, #144]	; (828a8 <usart_serial_getchar+0xcc>)
   82816:	4798      	blx	r3
   82818:	4603      	mov	r3, r0
   8281a:	2b00      	cmp	r3, #0
   8281c:	d1f6      	bne.n	8280c <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   8281e:	68fb      	ldr	r3, [r7, #12]
   82820:	b2da      	uxtb	r2, r3
   82822:	683b      	ldr	r3, [r7, #0]
   82824:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82826:	687b      	ldr	r3, [r7, #4]
   82828:	4a20      	ldr	r2, [pc, #128]	; (828ac <usart_serial_getchar+0xd0>)
   8282a:	4293      	cmp	r3, r2
   8282c:	d10d      	bne.n	8284a <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   8282e:	bf00      	nop
   82830:	f107 030c 	add.w	r3, r7, #12
   82834:	4619      	mov	r1, r3
   82836:	6878      	ldr	r0, [r7, #4]
   82838:	4b1b      	ldr	r3, [pc, #108]	; (828a8 <usart_serial_getchar+0xcc>)
   8283a:	4798      	blx	r3
   8283c:	4603      	mov	r3, r0
   8283e:	2b00      	cmp	r3, #0
   82840:	d1f6      	bne.n	82830 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   82842:	68fb      	ldr	r3, [r7, #12]
   82844:	b2da      	uxtb	r2, r3
   82846:	683b      	ldr	r3, [r7, #0]
   82848:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8284a:	687b      	ldr	r3, [r7, #4]
   8284c:	4a18      	ldr	r2, [pc, #96]	; (828b0 <usart_serial_getchar+0xd4>)
   8284e:	4293      	cmp	r3, r2
   82850:	d10d      	bne.n	8286e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   82852:	bf00      	nop
   82854:	f107 030c 	add.w	r3, r7, #12
   82858:	4619      	mov	r1, r3
   8285a:	6878      	ldr	r0, [r7, #4]
   8285c:	4b12      	ldr	r3, [pc, #72]	; (828a8 <usart_serial_getchar+0xcc>)
   8285e:	4798      	blx	r3
   82860:	4603      	mov	r3, r0
   82862:	2b00      	cmp	r3, #0
   82864:	d1f6      	bne.n	82854 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   82866:	68fb      	ldr	r3, [r7, #12]
   82868:	b2da      	uxtb	r2, r3
   8286a:	683b      	ldr	r3, [r7, #0]
   8286c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8286e:	687b      	ldr	r3, [r7, #4]
   82870:	4a10      	ldr	r2, [pc, #64]	; (828b4 <usart_serial_getchar+0xd8>)
   82872:	4293      	cmp	r3, r2
   82874:	d10d      	bne.n	82892 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   82876:	bf00      	nop
   82878:	f107 030c 	add.w	r3, r7, #12
   8287c:	4619      	mov	r1, r3
   8287e:	6878      	ldr	r0, [r7, #4]
   82880:	4b09      	ldr	r3, [pc, #36]	; (828a8 <usart_serial_getchar+0xcc>)
   82882:	4798      	blx	r3
   82884:	4603      	mov	r3, r0
   82886:	2b00      	cmp	r3, #0
   82888:	d1f6      	bne.n	82878 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   8288a:	68fb      	ldr	r3, [r7, #12]
   8288c:	b2da      	uxtb	r2, r3
   8288e:	683b      	ldr	r3, [r7, #0]
   82890:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82892:	bf00      	nop
   82894:	3710      	adds	r7, #16
   82896:	46bd      	mov	sp, r7
   82898:	bd80      	pop	{r7, pc}
   8289a:	bf00      	nop
   8289c:	400e0800 	.word	0x400e0800
   828a0:	00082185 	.word	0x00082185
   828a4:	40098000 	.word	0x40098000
   828a8:	000823dd 	.word	0x000823dd
   828ac:	4009c000 	.word	0x4009c000
   828b0:	400a0000 	.word	0x400a0000
   828b4:	400a4000 	.word	0x400a4000

000828b8 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   828b8:	b580      	push	{r7, lr}
   828ba:	b082      	sub	sp, #8
   828bc:	af00      	add	r7, sp, #0
   828be:	6078      	str	r0, [r7, #4]
   828c0:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   828c2:	4a0f      	ldr	r2, [pc, #60]	; (82900 <stdio_serial_init+0x48>)
   828c4:	687b      	ldr	r3, [r7, #4]
   828c6:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   828c8:	4b0e      	ldr	r3, [pc, #56]	; (82904 <stdio_serial_init+0x4c>)
   828ca:	4a0f      	ldr	r2, [pc, #60]	; (82908 <stdio_serial_init+0x50>)
   828cc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   828ce:	4b0f      	ldr	r3, [pc, #60]	; (8290c <stdio_serial_init+0x54>)
   828d0:	4a0f      	ldr	r2, [pc, #60]	; (82910 <stdio_serial_init+0x58>)
   828d2:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   828d4:	6839      	ldr	r1, [r7, #0]
   828d6:	6878      	ldr	r0, [r7, #4]
   828d8:	4b0e      	ldr	r3, [pc, #56]	; (82914 <stdio_serial_init+0x5c>)
   828da:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   828dc:	4b0e      	ldr	r3, [pc, #56]	; (82918 <stdio_serial_init+0x60>)
   828de:	681b      	ldr	r3, [r3, #0]
   828e0:	689b      	ldr	r3, [r3, #8]
   828e2:	2100      	movs	r1, #0
   828e4:	4618      	mov	r0, r3
   828e6:	4b0d      	ldr	r3, [pc, #52]	; (8291c <stdio_serial_init+0x64>)
   828e8:	4798      	blx	r3
	setbuf(stdin, NULL);
   828ea:	4b0b      	ldr	r3, [pc, #44]	; (82918 <stdio_serial_init+0x60>)
   828ec:	681b      	ldr	r3, [r3, #0]
   828ee:	685b      	ldr	r3, [r3, #4]
   828f0:	2100      	movs	r1, #0
   828f2:	4618      	mov	r0, r3
   828f4:	4b09      	ldr	r3, [pc, #36]	; (8291c <stdio_serial_init+0x64>)
   828f6:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   828f8:	bf00      	nop
   828fa:	3708      	adds	r7, #8
   828fc:	46bd      	mov	sp, r7
   828fe:	bd80      	pop	{r7, pc}
   82900:	20070e94 	.word	0x20070e94
   82904:	20070e90 	.word	0x20070e90
   82908:	00082715 	.word	0x00082715
   8290c:	20070e8c 	.word	0x20070e8c
   82910:	000827dd 	.word	0x000827dd
   82914:	000825dd 	.word	0x000825dd
   82918:	200704d8 	.word	0x200704d8
   8291c:	00084799 	.word	0x00084799

00082920 <configure_console>:
{
	{50,700,50},{60,750,57},{65,750,64},{70,750,70},{75,750,74},{80,750,78},{85,750,82},{90,750,86},{95,750,90},{100,760,100},{110,780,110},{120,810,120},
	{140,810,140},{150,850,150},{200,970,200},{300,1200,290},{400,1250,350}	
};
static void configure_console(void)
{
   82920:	b580      	push	{r7, lr}
   82922:	b084      	sub	sp, #16
   82924:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
   82926:	463b      	mov	r3, r7
   82928:	2200      	movs	r2, #0
   8292a:	601a      	str	r2, [r3, #0]
   8292c:	605a      	str	r2, [r3, #4]
   8292e:	609a      	str	r2, [r3, #8]
   82930:	60da      	str	r2, [r3, #12]
   82932:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82936:	603b      	str	r3, [r7, #0]
   82938:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8293c:	60bb      	str	r3, [r7, #8]
		.baudrate = 115200,
		.paritytype = UART_MR_PAR_NO
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
   8293e:	2008      	movs	r0, #8
   82940:	4b05      	ldr	r3, [pc, #20]	; (82958 <configure_console+0x38>)
   82942:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
   82944:	463b      	mov	r3, r7
   82946:	4619      	mov	r1, r3
   82948:	4804      	ldr	r0, [pc, #16]	; (8295c <configure_console+0x3c>)
   8294a:	4b05      	ldr	r3, [pc, #20]	; (82960 <configure_console+0x40>)
   8294c:	4798      	blx	r3
}
   8294e:	bf00      	nop
   82950:	3710      	adds	r7, #16
   82952:	46bd      	mov	sp, r7
   82954:	bd80      	pop	{r7, pc}
   82956:	bf00      	nop
   82958:	000825c1 	.word	0x000825c1
   8295c:	400e0800 	.word	0x400e0800
   82960:	000828b9 	.word	0x000828b9

00082964 <main>:
volatile uint32_t fed_value=0;
extern uint32_t array_dummy[100];
extern uint32_t var;
uint8_t command =  0;
int main (void)
{
   82964:	b590      	push	{r4, r7, lr}
   82966:	b087      	sub	sp, #28
   82968:	af00      	add	r7, sp, #0
	
	speed_data speed_d;
	static uint32_t status=0;
	static uint32_t prev_status=0;
	sysclk_init();
   8296a:	4ba6      	ldr	r3, [pc, #664]	; (82c04 <main+0x2a0>)
   8296c:	4798      	blx	r3
	board_init();
   8296e:	4ba6      	ldr	r3, [pc, #664]	; (82c08 <main+0x2a4>)
   82970:	4798      	blx	r3
	CPU2_S_SYSTEM_INIT();
   82972:	4ba6      	ldr	r3, [pc, #664]	; (82c0c <main+0x2a8>)
   82974:	4798      	blx	r3
	configure_console();
   82976:	4ba6      	ldr	r3, [pc, #664]	; (82c10 <main+0x2ac>)
   82978:	4798      	blx	r3
	printf("welcome\n");
   8297a:	48a6      	ldr	r0, [pc, #664]	; (82c14 <main+0x2b0>)
   8297c:	4ba6      	ldr	r3, [pc, #664]	; (82c18 <main+0x2b4>)
   8297e:	4798      	blx	r3
	printf("Version1.1\n");
   82980:	48a6      	ldr	r0, [pc, #664]	; (82c1c <main+0x2b8>)
   82982:	4ba5      	ldr	r3, [pc, #660]	; (82c18 <main+0x2b4>)
   82984:	4798      	blx	r3
	PIOA->PIO_WPMR = 0x50494F00;
   82986:	4ba6      	ldr	r3, [pc, #664]	; (82c20 <main+0x2bc>)
   82988:	4aa6      	ldr	r2, [pc, #664]	; (82c24 <main+0x2c0>)
   8298a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOA->PIO_PUER = 0x00000300;
   8298e:	4ba4      	ldr	r3, [pc, #656]	; (82c20 <main+0x2bc>)
   82990:	f44f 7240 	mov.w	r2, #768	; 0x300
   82994:	665a      	str	r2, [r3, #100]	; 0x64
	//PIOA->PIO_PUER = 0x00060000;
	PIOA->PIO_PDR =	 0x00060000;
   82996:	4ba2      	ldr	r3, [pc, #648]	; (82c20 <main+0x2bc>)
   82998:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8299c:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   8299e:	4ba0      	ldr	r3, [pc, #640]	; (82c20 <main+0x2bc>)
   829a0:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   829a4:	671a      	str	r2, [r3, #112]	; 0x70
	pmc_enable_periph_clk(ID_PIOD);
   829a6:	200e      	movs	r0, #14
   829a8:	4b9f      	ldr	r3, [pc, #636]	; (82c28 <main+0x2c4>)
   829aa:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   829ac:	200d      	movs	r0, #13
   829ae:	4b9e      	ldr	r3, [pc, #632]	; (82c28 <main+0x2c4>)
   829b0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PWM);
   829b2:	2024      	movs	r0, #36	; 0x24
   829b4:	4b9c      	ldr	r3, [pc, #624]	; (82c28 <main+0x2c4>)
   829b6:	4798      	blx	r3

	PIOD->PIO_WPMR = 0x50494F00;
   829b8:	4b9c      	ldr	r3, [pc, #624]	; (82c2c <main+0x2c8>)
   829ba:	4a9a      	ldr	r2, [pc, #616]	; (82c24 <main+0x2c0>)
   829bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_PER  = 0x000002CF;
   829c0:	4b9a      	ldr	r3, [pc, #616]	; (82c2c <main+0x2c8>)
   829c2:	f240 22cf 	movw	r2, #719	; 0x2cf
   829c6:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000024F;
   829c8:	4b98      	ldr	r3, [pc, #608]	; (82c2c <main+0x2c8>)
   829ca:	f240 224f 	movw	r2, #591	; 0x24f
   829ce:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0x00000080;				//m1,m2,m3,m4,directionA,BrakeA
   829d0:	4b96      	ldr	r3, [pc, #600]	; (82c2c <main+0x2c8>)
   829d2:	2280      	movs	r2, #128	; 0x80
   829d4:	615a      	str	r2, [r3, #20]
	PIOD->PIO_CODR = 0x0000024F;
   829d6:	4b95      	ldr	r3, [pc, #596]	; (82c2c <main+0x2c8>)
   829d8:	f240 224f 	movw	r2, #591	; 0x24f
   829dc:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PUER = 0x0000024F;
   829de:	4b93      	ldr	r3, [pc, #588]	; (82c2c <main+0x2c8>)
   829e0:	f240 224f 	movw	r2, #591	; 0x24f
   829e4:	665a      	str	r2, [r3, #100]	; 0x64

	PIOC->PIO_WPMR = 0x50494F00;
   829e6:	4b92      	ldr	r3, [pc, #584]	; (82c30 <main+0x2cc>)
   829e8:	4a8e      	ldr	r2, [pc, #568]	; (82c24 <main+0x2c0>)
   829ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_PER  = 0x0007F800;
   829ee:	4b90      	ldr	r3, [pc, #576]	; (82c30 <main+0x2cc>)
   829f0:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
   829f4:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x0007F800;				//m1,m2,m3,m4,directionB,BrakeB
   829f6:	4b8e      	ldr	r3, [pc, #568]	; (82c30 <main+0x2cc>)
   829f8:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
   829fc:	611a      	str	r2, [r3, #16]
	PIOC->PIO_CODR = 0x0007F000;
   829fe:	4b8c      	ldr	r3, [pc, #560]	; (82c30 <main+0x2cc>)
   82a00:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   82a04:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_PUER = 0x0007F000;
   82a06:	4b8a      	ldr	r3, [pc, #552]	; (82c30 <main+0x2cc>)
   82a08:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   82a0c:	665a      	str	r2, [r3, #100]	; 0x64

	PIOA->PIO_PUER = 0x00000300;
   82a0e:	4b84      	ldr	r3, [pc, #528]	; (82c20 <main+0x2bc>)
   82a10:	f44f 7240 	mov.w	r2, #768	; 0x300
   82a14:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00060000;
   82a16:	4b82      	ldr	r3, [pc, #520]	; (82c20 <main+0x2bc>)
   82a18:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   82a1c:	665a      	str	r2, [r3, #100]	; 0x64
	
	PWM->PWM_WPCR = 0x50574D00;
   82a1e:	4b85      	ldr	r3, [pc, #532]	; (82c34 <main+0x2d0>)
   82a20:	4a85      	ldr	r2, [pc, #532]	; (82c38 <main+0x2d4>)
   82a22:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PWM->PWM_DIS = 0x000000FF;
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   82a26:	4b83      	ldr	r3, [pc, #524]	; (82c34 <main+0x2d0>)
   82a28:	4a84      	ldr	r2, [pc, #528]	; (82c3c <main+0x2d8>)
   82a2a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   82a2e:	4b81      	ldr	r3, [pc, #516]	; (82c34 <main+0x2d0>)
   82a30:	f640 2241 	movw	r2, #2625	; 0xa41
   82a34:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
   82a38:	4a7e      	ldr	r2, [pc, #504]	; (82c34 <main+0x2d0>)
   82a3a:	4b81      	ldr	r3, [pc, #516]	; (82c40 <main+0x2dc>)
   82a3c:	681b      	ldr	r3, [r3, #0]
   82a3e:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
	PIOD->PIO_WPMR	= 0x50494F00;
   82a42:	4b7a      	ldr	r3, [pc, #488]	; (82c2c <main+0x2c8>)
   82a44:	4a77      	ldr	r2, [pc, #476]	; (82c24 <main+0x2c0>)
   82a46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_PER   = 0x0000024F;
   82a4a:	4b78      	ldr	r3, [pc, #480]	; (82c2c <main+0x2c8>)
   82a4c:	f240 224f 	movw	r2, #591	; 0x24f
   82a50:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER   = 0x0000024F;
   82a52:	4b76      	ldr	r3, [pc, #472]	; (82c2c <main+0x2c8>)
   82a54:	f240 224f 	movw	r2, #591	; 0x24f
   82a58:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PUER  = 0x0000000F;
   82a5a:	4b74      	ldr	r3, [pc, #464]	; (82c2c <main+0x2c8>)
   82a5c:	220f      	movs	r2, #15
   82a5e:	665a      	str	r2, [r3, #100]	; 0x64
	PIOD->PIO_SODR  = 0x00000200;
   82a60:	4b72      	ldr	r3, [pc, #456]	; (82c2c <main+0x2c8>)
   82a62:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a66:	631a      	str	r2, [r3, #48]	; 0x30
	status=(((PIOA->PIO_PDSR)>>14)&1);
   82a68:	4b6d      	ldr	r3, [pc, #436]	; (82c20 <main+0x2bc>)
   82a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82a6c:	0b9b      	lsrs	r3, r3, #14
   82a6e:	f003 0301 	and.w	r3, r3, #1
   82a72:	4a74      	ldr	r2, [pc, #464]	; (82c44 <main+0x2e0>)
   82a74:	6013      	str	r3, [r2, #0]
	prev_status=status;
   82a76:	4b73      	ldr	r3, [pc, #460]	; (82c44 <main+0x2e0>)
   82a78:	681b      	ldr	r3, [r3, #0]
   82a7a:	4a73      	ldr	r2, [pc, #460]	; (82c48 <main+0x2e4>)
   82a7c:	6013      	str	r3, [r2, #0]
	NVIC_DisableIRQ(SPI_IRQn);
   82a7e:	2018      	movs	r0, #24
   82a80:	4b72      	ldr	r3, [pc, #456]	; (82c4c <main+0x2e8>)
   82a82:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
   82a84:	2018      	movs	r0, #24
   82a86:	4b72      	ldr	r3, [pc, #456]	; (82c50 <main+0x2ec>)
   82a88:	4798      	blx	r3
	NVIC_SetPriority(SPI_IRQn, 0);
   82a8a:	2100      	movs	r1, #0
   82a8c:	2018      	movs	r0, #24
   82a8e:	4b71      	ldr	r3, [pc, #452]	; (82c54 <main+0x2f0>)
   82a90:	4798      	blx	r3
	NVIC_EnableIRQ(SPI_IRQn);
   82a92:	2018      	movs	r0, #24
   82a94:	4b70      	ldr	r3, [pc, #448]	; (82c58 <main+0x2f4>)
   82a96:	4798      	blx	r3

//	spi_slave_initialize();
	//spi_master_initialize();
	//pio_enable_interrupt(PIOA,PIO_IER_P14);
	uint32_t expire_time = 6562490;			//10 sec
   82a98:	4b70      	ldr	r3, [pc, #448]	; (82c5c <main+0x2f8>)
   82a9a:	613b      	str	r3, [r7, #16]
	uint32_t stepcount = 6562;			//10 sec
   82a9c:	f641 13a2 	movw	r3, #6562	; 0x19a2
   82aa0:	60fb      	str	r3, [r7, #12]
	startTimer1(TC0,0,TC0_IRQn,expire_time);
   82aa2:	693b      	ldr	r3, [r7, #16]
   82aa4:	221b      	movs	r2, #27
   82aa6:	2100      	movs	r1, #0
   82aa8:	486d      	ldr	r0, [pc, #436]	; (82c60 <main+0x2fc>)
   82aaa:	4c6e      	ldr	r4, [pc, #440]	; (82c64 <main+0x300>)
   82aac:	47a0      	blx	r4
	int i=0;
   82aae:	2300      	movs	r3, #0
   82ab0:	60bb      	str	r3, [r7, #8]
	startTimer3(TC0,2,TC2_IRQn,stepcount);
   82ab2:	68fb      	ldr	r3, [r7, #12]
   82ab4:	221d      	movs	r2, #29
   82ab6:	2102      	movs	r1, #2
   82ab8:	4869      	ldr	r0, [pc, #420]	; (82c60 <main+0x2fc>)
   82aba:	4c6b      	ldr	r4, [pc, #428]	; (82c68 <main+0x304>)
   82abc:	47a0      	blx	r4
// 	  for(int i=0; i<10000000; i++)
// 	  {
// 		  ;
// 	  }
// 	  
 	   CPU2_D_SET_PIO(PIO_TYPE_PIO_C,11);
   82abe:	210b      	movs	r1, #11
   82ac0:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
   82ac4:	4b69      	ldr	r3, [pc, #420]	; (82c6c <main+0x308>)
   82ac6:	4798      	blx	r3
 	  
	  
	
	CPU2_D_SET_PIO(PIO_TYPE_PIO_A,13);      // VENOUS CLAMP POWER ENABLED
   82ac8:	210d      	movs	r1, #13
   82aca:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   82ace:	4b67      	ldr	r3, [pc, #412]	; (82c6c <main+0x308>)
   82ad0:	4798      	blx	r3
	CPU2_D_SET_PIO(PIO_TYPE_PIO_A,11);     // BYPASS VALVE POWER ENABLED
   82ad2:	210b      	movs	r1, #11
   82ad4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   82ad8:	4b64      	ldr	r3, [pc, #400]	; (82c6c <main+0x308>)
   82ada:	4798      	blx	r3
			/*if ()				// fpr conductivity and temp
			{
			}*/
		//}
		
		while (flag_buff >= 1)
   82adc:	e185      	b.n	82dea <main+0x486>
		{ 
			command = data_buff[0];
   82ade:	4b64      	ldr	r3, [pc, #400]	; (82c70 <main+0x30c>)
   82ae0:	781a      	ldrb	r2, [r3, #0]
   82ae2:	4b64      	ldr	r3, [pc, #400]	; (82c74 <main+0x310>)
   82ae4:	701a      	strb	r2, [r3, #0]
				if (command == BP_APT_VPT_SEND_TO_MASTER)
   82ae6:	4b63      	ldr	r3, [pc, #396]	; (82c74 <main+0x310>)
   82ae8:	781b      	ldrb	r3, [r3, #0]
   82aea:	2b27      	cmp	r3, #39	; 0x27
   82aec:	d105      	bne.n	82afa <main+0x196>
				{
					//printf("start\n");
									
					//send CAN Message for APT and VPT
					SV_put_sensor_data(&sv_sys_statbuffer);
   82aee:	4862      	ldr	r0, [pc, #392]	; (82c78 <main+0x314>)
   82af0:	4b62      	ldr	r3, [pc, #392]	; (82c7c <main+0x318>)
   82af2:	4798      	blx	r3
					command = (uint8_t)0;
   82af4:	4b5f      	ldr	r3, [pc, #380]	; (82c74 <main+0x310>)
   82af6:	2200      	movs	r2, #0
   82af8:	701a      	strb	r2, [r3, #0]
				//	flag_buff--;
				}
				
				if(command == BD_CALIBRATION){
   82afa:	4b5e      	ldr	r3, [pc, #376]	; (82c74 <main+0x310>)
   82afc:	781b      	ldrb	r3, [r3, #0]
   82afe:	2b29      	cmp	r3, #41	; 0x29
   82b00:	d116      	bne.n	82b30 <main+0x1cc>
					
					CPU2_D_RESET_PIO(PIO_TYPE_PIO_C,11);    // reseting calibrate pin for BD/ABD 4july2017
   82b02:	210b      	movs	r1, #11
   82b04:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
   82b08:	4b5d      	ldr	r3, [pc, #372]	; (82c80 <main+0x31c>)
   82b0a:	4798      	blx	r3
					// 	 /* int i=0;*/
					 	  for(int i=0; i<10000000; i++)
   82b0c:	2300      	movs	r3, #0
   82b0e:	617b      	str	r3, [r7, #20]
   82b10:	e002      	b.n	82b18 <main+0x1b4>
   82b12:	697b      	ldr	r3, [r7, #20]
   82b14:	3301      	adds	r3, #1
   82b16:	617b      	str	r3, [r7, #20]
   82b18:	697b      	ldr	r3, [r7, #20]
   82b1a:	4a5a      	ldr	r2, [pc, #360]	; (82c84 <main+0x320>)
   82b1c:	4293      	cmp	r3, r2
   82b1e:	ddf8      	ble.n	82b12 <main+0x1ae>
						  {
					 		  ;
					 	  }
					
					 	   CPU2_D_SET_PIO(PIO_TYPE_PIO_C,11);
   82b20:	210b      	movs	r1, #11
   82b22:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
   82b26:	4b51      	ldr	r3, [pc, #324]	; (82c6c <main+0x308>)
   82b28:	4798      	blx	r3
					command = (uint8_t)0;
   82b2a:	4b52      	ldr	r3, [pc, #328]	; (82c74 <main+0x310>)
   82b2c:	2200      	movs	r2, #0
   82b2e:	701a      	strb	r2, [r3, #0]
					
				}
			//	continue;
								
			//printf("enter\n");
			switch (states_2)
   82b30:	4b55      	ldr	r3, [pc, #340]	; (82c88 <main+0x324>)
   82b32:	781b      	ldrb	r3, [r3, #0]
   82b34:	2b26      	cmp	r3, #38	; 0x26
   82b36:	f200 814d 	bhi.w	82dd4 <main+0x470>
   82b3a:	a201      	add	r2, pc, #4	; (adr r2, 82b40 <main+0x1dc>)
   82b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b40:	00082bdd 	.word	0x00082bdd
   82b44:	00082c99 	.word	0x00082c99
   82b48:	00082d8d 	.word	0x00082d8d
   82b4c:	00082dd5 	.word	0x00082dd5
   82b50:	00082dd5 	.word	0x00082dd5
   82b54:	00082dd5 	.word	0x00082dd5
   82b58:	00082dd5 	.word	0x00082dd5
   82b5c:	00082dd5 	.word	0x00082dd5
   82b60:	00082dd5 	.word	0x00082dd5
   82b64:	00082dd5 	.word	0x00082dd5
   82b68:	00082dd5 	.word	0x00082dd5
   82b6c:	00082dd5 	.word	0x00082dd5
   82b70:	00082dd5 	.word	0x00082dd5
   82b74:	00082dd5 	.word	0x00082dd5
   82b78:	00082dd5 	.word	0x00082dd5
   82b7c:	00082dd5 	.word	0x00082dd5
   82b80:	00082dd5 	.word	0x00082dd5
   82b84:	00082dd5 	.word	0x00082dd5
   82b88:	00082dd5 	.word	0x00082dd5
   82b8c:	00082dd5 	.word	0x00082dd5
   82b90:	00082dd5 	.word	0x00082dd5
   82b94:	00082dd5 	.word	0x00082dd5
   82b98:	00082dd5 	.word	0x00082dd5
   82b9c:	00082dd5 	.word	0x00082dd5
   82ba0:	00082dd5 	.word	0x00082dd5
   82ba4:	00082dd5 	.word	0x00082dd5
   82ba8:	00082dd5 	.word	0x00082dd5
   82bac:	00082dd5 	.word	0x00082dd5
   82bb0:	00082dd5 	.word	0x00082dd5
   82bb4:	00082dd5 	.word	0x00082dd5
   82bb8:	00082dd5 	.word	0x00082dd5
   82bbc:	00082dd5 	.word	0x00082dd5
   82bc0:	00082dd5 	.word	0x00082dd5
   82bc4:	00082dd5 	.word	0x00082dd5
   82bc8:	00082dd5 	.word	0x00082dd5
   82bcc:	00082dd5 	.word	0x00082dd5
   82bd0:	00082dd5 	.word	0x00082dd5
   82bd4:	00082dd5 	.word	0x00082dd5
   82bd8:	00082d65 	.word	0x00082d65
			{
				case CPU2_STANDBY:
				
					if (bp_start_command == BP_START_BLOOD_PUMP)
   82bdc:	4b2b      	ldr	r3, [pc, #172]	; (82c8c <main+0x328>)
   82bde:	781b      	ldrb	r3, [r3, #0]
   82be0:	b2db      	uxtb	r3, r3
   82be2:	2b20      	cmp	r3, #32
   82be4:	d107      	bne.n	82bf6 <main+0x292>
					{
						//printf("start\n");
						bp_start_command = 0;
   82be6:	4b29      	ldr	r3, [pc, #164]	; (82c8c <main+0x328>)
   82be8:	2200      	movs	r2, #0
   82bea:	701a      	strb	r2, [r3, #0]
						start_bloodpump();
   82bec:	4b28      	ldr	r3, [pc, #160]	; (82c90 <main+0x32c>)
   82bee:	4798      	blx	r3
						states_2 = CPU2_BLOODPUMP;
   82bf0:	4b25      	ldr	r3, [pc, #148]	; (82c88 <main+0x324>)
   82bf2:	2201      	movs	r2, #1
   82bf4:	701a      	strb	r2, [r3, #0]
					}
					command = (uint8_t)0;
   82bf6:	4b1f      	ldr	r3, [pc, #124]	; (82c74 <main+0x310>)
   82bf8:	2200      	movs	r2, #0
   82bfa:	701a      	strb	r2, [r3, #0]
				//	flag_buff = 0;
					data_count = 0;			
   82bfc:	4b25      	ldr	r3, [pc, #148]	; (82c94 <main+0x330>)
   82bfe:	2200      	movs	r2, #0
   82c00:	601a      	str	r2, [r3, #0]
					
				break;
   82c02:	e0e8      	b.n	82dd6 <main+0x472>
   82c04:	000835d1 	.word	0x000835d1
   82c08:	00083679 	.word	0x00083679
   82c0c:	00081eb9 	.word	0x00081eb9
   82c10:	00082921 	.word	0x00082921
   82c14:	0008762c 	.word	0x0008762c
   82c18:	000846d5 	.word	0x000846d5
   82c1c:	00087638 	.word	0x00087638
   82c20:	400e0e00 	.word	0x400e0e00
   82c24:	50494f00 	.word	0x50494f00
   82c28:	00083e8d 	.word	0x00083e8d
   82c2c:	400e1400 	.word	0x400e1400
   82c30:	400e1200 	.word	0x400e1200
   82c34:	40094000 	.word	0x40094000
   82c38:	50574d00 	.word	0x50574d00
   82c3c:	00070605 	.word	0x00070605
   82c40:	20070008 	.word	0x20070008
   82c44:	20070980 	.word	0x20070980
   82c48:	20070984 	.word	0x20070984
   82c4c:	00082461 	.word	0x00082461
   82c50:	00082495 	.word	0x00082495
   82c54:	000824c9 	.word	0x000824c9
   82c58:	00082431 	.word	0x00082431
   82c5c:	006422ba 	.word	0x006422ba
   82c60:	40080000 	.word	0x40080000
   82c64:	00081b69 	.word	0x00081b69
   82c68:	00081c49 	.word	0x00081c49
   82c6c:	00081141 	.word	0x00081141
   82c70:	20070938 	.word	0x20070938
   82c74:	2007097c 	.word	0x2007097c
   82c78:	20070ea0 	.word	0x20070ea0
   82c7c:	00081df5 	.word	0x00081df5
   82c80:	000811c5 	.word	0x000811c5
   82c84:	0098967f 	.word	0x0098967f
   82c88:	20070970 	.word	0x20070970
   82c8c:	2007093c 	.word	0x2007093c
   82c90:	00083045 	.word	0x00083045
   82c94:	20070931 	.word	0x20070931
				
// 
// 					switch (command)
// 					{

						if (bp_start_command == BP_START_BLOOD_PUMP)
   82c98:	4b9d      	ldr	r3, [pc, #628]	; (82f10 <main+0x5ac>)
   82c9a:	781b      	ldrb	r3, [r3, #0]
   82c9c:	b2db      	uxtb	r3, r3
   82c9e:	2b20      	cmp	r3, #32
   82ca0:	d11b      	bne.n	82cda <main+0x376>
						{	
							bp_start_command =  0;
   82ca2:	4b9b      	ldr	r3, [pc, #620]	; (82f10 <main+0x5ac>)
   82ca4:	2200      	movs	r2, #0
   82ca6:	701a      	strb	r2, [r3, #0]
							start_bloodpump();
   82ca8:	4b9a      	ldr	r3, [pc, #616]	; (82f14 <main+0x5b0>)
   82caa:	4798      	blx	r3
							//printf("start\n");
							if (modify_1==1)
   82cac:	4b9a      	ldr	r3, [pc, #616]	; (82f18 <main+0x5b4>)
   82cae:	781b      	ldrb	r3, [r3, #0]
   82cb0:	b2db      	uxtb	r3, r3
   82cb2:	2b01      	cmp	r3, #1
   82cb4:	d10e      	bne.n	82cd4 <main+0x370>
							{
								modify=1;
   82cb6:	4b99      	ldr	r3, [pc, #612]	; (82f1c <main+0x5b8>)
   82cb8:	2201      	movs	r2, #1
   82cba:	701a      	strb	r2, [r3, #0]
								flag_3=1;
   82cbc:	4b98      	ldr	r3, [pc, #608]	; (82f20 <main+0x5bc>)
   82cbe:	2201      	movs	r2, #1
   82cc0:	701a      	strb	r2, [r3, #0]
								flag_1=1;
   82cc2:	4b98      	ldr	r3, [pc, #608]	; (82f24 <main+0x5c0>)
   82cc4:	2201      	movs	r2, #1
   82cc6:	701a      	strb	r2, [r3, #0]
								flag_2=1;
   82cc8:	4b97      	ldr	r3, [pc, #604]	; (82f28 <main+0x5c4>)
   82cca:	2201      	movs	r2, #1
   82ccc:	701a      	strb	r2, [r3, #0]
								count_2=2;
   82cce:	4b97      	ldr	r3, [pc, #604]	; (82f2c <main+0x5c8>)
   82cd0:	2202      	movs	r2, #2
   82cd2:	701a      	strb	r2, [r3, #0]
							}
						//	flag_buff--;
							states_2 = CPU2_BLOODPUMP;
   82cd4:	4b96      	ldr	r3, [pc, #600]	; (82f30 <main+0x5cc>)
   82cd6:	2201      	movs	r2, #1
   82cd8:	701a      	strb	r2, [r3, #0]
						}
					//	break;

						if (bp_stop_command == BP_STOP_PUMP)
   82cda:	4b96      	ldr	r3, [pc, #600]	; (82f34 <main+0x5d0>)
   82cdc:	781b      	ldrb	r3, [r3, #0]
   82cde:	b2db      	uxtb	r3, r3
   82ce0:	2b21      	cmp	r3, #33	; 0x21
   82ce2:	d119      	bne.n	82d18 <main+0x3b4>
						{
							
						bp_stop_command = 0;
   82ce4:	4b93      	ldr	r3, [pc, #588]	; (82f34 <main+0x5d0>)
   82ce6:	2200      	movs	r2, #0
   82ce8:	701a      	strb	r2, [r3, #0]
						//printf("stop\n");
							stop_bloodpump();
   82cea:	4b93      	ldr	r3, [pc, #588]	; (82f38 <main+0x5d4>)
   82cec:	4798      	blx	r3
							//states_2 = CPU2_STANDBY;
							fedbck_cnt=0;
   82cee:	4b93      	ldr	r3, [pc, #588]	; (82f3c <main+0x5d8>)
   82cf0:	2200      	movs	r2, #0
   82cf2:	601a      	str	r2, [r3, #0]
							modify=0;
   82cf4:	4b89      	ldr	r3, [pc, #548]	; (82f1c <main+0x5b8>)
   82cf6:	2200      	movs	r2, #0
   82cf8:	701a      	strb	r2, [r3, #0]
							flag_3=0;
   82cfa:	4b89      	ldr	r3, [pc, #548]	; (82f20 <main+0x5bc>)
   82cfc:	2200      	movs	r2, #0
   82cfe:	701a      	strb	r2, [r3, #0]
							flag_1=0;
   82d00:	4b88      	ldr	r3, [pc, #544]	; (82f24 <main+0x5c0>)
   82d02:	2200      	movs	r2, #0
   82d04:	701a      	strb	r2, [r3, #0]
							flag_2=0;
   82d06:	4b88      	ldr	r3, [pc, #544]	; (82f28 <main+0x5c4>)
   82d08:	2200      	movs	r2, #0
   82d0a:	701a      	strb	r2, [r3, #0]
							count_2=0;
   82d0c:	4b87      	ldr	r3, [pc, #540]	; (82f2c <main+0x5c8>)
   82d0e:	2200      	movs	r2, #0
   82d10:	701a      	strb	r2, [r3, #0]
							states_2 = CPU2_BLOODPUMP;
   82d12:	4b87      	ldr	r3, [pc, #540]	; (82f30 <main+0x5cc>)
   82d14:	2201      	movs	r2, #1
   82d16:	701a      	strb	r2, [r3, #0]
							count_stop = 0;
							
							//CPU2_D_INIT_IIC();
							states_2 = CPU2_STANDBY;
						break;*/
							if (bp_Speed_change_command == BP_SPEED_CHANGE)
   82d18:	4b89      	ldr	r3, [pc, #548]	; (82f40 <main+0x5dc>)
   82d1a:	781b      	ldrb	r3, [r3, #0]
   82d1c:	b2db      	uxtb	r3, r3
   82d1e:	2b23      	cmp	r3, #35	; 0x23
   82d20:	d113      	bne.n	82d4a <main+0x3e6>
							{
								
							bp_Speed_change_command = 0;
   82d22:	4b87      	ldr	r3, [pc, #540]	; (82f40 <main+0x5dc>)
   82d24:	2200      	movs	r2, #0
   82d26:	701a      	strb	r2, [r3, #0]
// 								data_stream.bytearray[0] = data_buff[1];
// 								data_stream.bytearray[1] = data_buff[2];
// 								speed_d.byte[0]= data_stream.bytearray[0];
// 								speed_d.byte[1]= data_stream.bytearray[1];
// 								//printf("%d\n",data_stream.Twobyte);
								speedchange_bloodpump(bp_speed);
   82d28:	4b86      	ldr	r3, [pc, #536]	; (82f44 <main+0x5e0>)
   82d2a:	681b      	ldr	r3, [r3, #0]
   82d2c:	4618      	mov	r0, r3
   82d2e:	4b86      	ldr	r3, [pc, #536]	; (82f48 <main+0x5e4>)
   82d30:	4798      	blx	r3
								states_2 = CPU2_BLOODPUMP;
   82d32:	4b7f      	ldr	r3, [pc, #508]	; (82f30 <main+0x5cc>)
   82d34:	2201      	movs	r2, #1
   82d36:	701a      	strb	r2, [r3, #0]
								modify=1;
   82d38:	4b78      	ldr	r3, [pc, #480]	; (82f1c <main+0x5b8>)
   82d3a:	2201      	movs	r2, #1
   82d3c:	701a      	strb	r2, [r3, #0]
								modify_1=1;
   82d3e:	4b76      	ldr	r3, [pc, #472]	; (82f18 <main+0x5b4>)
   82d40:	2201      	movs	r2, #1
   82d42:	701a      	strb	r2, [r3, #0]
								data_count1=0;
   82d44:	4b81      	ldr	r3, [pc, #516]	; (82f4c <main+0x5e8>)
   82d46:	2200      	movs	r2, #0
   82d48:	601a      	str	r2, [r3, #0]
							}			
							//}
					//	break;
						
							if (bp_inc == BP_INC)
   82d4a:	4b81      	ldr	r3, [pc, #516]	; (82f50 <main+0x5ec>)
   82d4c:	781b      	ldrb	r3, [r3, #0]
   82d4e:	b2db      	uxtb	r3, r3
   82d50:	2b25      	cmp	r3, #37	; 0x25
   82d52:	d107      	bne.n	82d64 <main+0x400>
							{
								bp_inc = 0;
   82d54:	4b7e      	ldr	r3, [pc, #504]	; (82f50 <main+0x5ec>)
   82d56:	2200      	movs	r2, #0
   82d58:	701a      	strb	r2, [r3, #0]
						//	}
						//	printf("inc\n");
							fed_value = fed_value+10;
   82d5a:	4b7e      	ldr	r3, [pc, #504]	; (82f54 <main+0x5f0>)
   82d5c:	681b      	ldr	r3, [r3, #0]
   82d5e:	330a      	adds	r3, #10
   82d60:	4a7c      	ldr	r2, [pc, #496]	; (82f54 <main+0x5f0>)
   82d62:	6013      	str	r3, [r2, #0]
							//printf("%d\n",fed_value);
							}
					//	break;
						case BP_DEC:
							if (bp_dec == BP_DEC)
   82d64:	4b7c      	ldr	r3, [pc, #496]	; (82f58 <main+0x5f4>)
   82d66:	781b      	ldrb	r3, [r3, #0]
   82d68:	b2db      	uxtb	r3, r3
   82d6a:	2b26      	cmp	r3, #38	; 0x26
   82d6c:	d107      	bne.n	82d7e <main+0x41a>
							{
								bp_dec = 0;
   82d6e:	4b7a      	ldr	r3, [pc, #488]	; (82f58 <main+0x5f4>)
   82d70:	2200      	movs	r2, #0
   82d72:	701a      	strb	r2, [r3, #0]
					//	printf("dec\n");
							fed_value = fed_value-10;
   82d74:	4b77      	ldr	r3, [pc, #476]	; (82f54 <main+0x5f0>)
   82d76:	681b      	ldr	r3, [r3, #0]
   82d78:	3b0a      	subs	r3, #10
   82d7a:	4a76      	ldr	r2, [pc, #472]	; (82f54 <main+0x5f0>)
   82d7c:	6013      	str	r3, [r2, #0]
// 						break;
// 						
// 						default:
// 						break;
			//		}
					command = (uint8_t)0;
   82d7e:	4b77      	ldr	r3, [pc, #476]	; (82f5c <main+0x5f8>)
   82d80:	2200      	movs	r2, #0
   82d82:	701a      	strb	r2, [r3, #0]
					//flag_buff = 0;
					data_count = 0;
   82d84:	4b76      	ldr	r3, [pc, #472]	; (82f60 <main+0x5fc>)
   82d86:	2200      	movs	r2, #0
   82d88:	601a      	str	r2, [r3, #0]
				break;
   82d8a:	e024      	b.n	82dd6 <main+0x472>
				
				case CPU2_SAFETYSTATE:
				//printf("%d\n",data_buff[0]);
				switch (command)
   82d8c:	4b73      	ldr	r3, [pc, #460]	; (82f5c <main+0x5f8>)
   82d8e:	781b      	ldrb	r3, [r3, #0]
   82d90:	2b28      	cmp	r3, #40	; 0x28
   82d92:	d000      	beq.n	82d96 <main+0x432>
						states_2 = CPU2_SAFETYSTATE;
					}
					break;
					
					default:
					break;
   82d94:	e01d      	b.n	82dd2 <main+0x46e>
				case CPU2_SAFETYSTATE:
				//printf("%d\n",data_buff[0]);
				switch (command)
				{
					case BP_RECOVER:
					cpu2_sensorstatus();
   82d96:	4b73      	ldr	r3, [pc, #460]	; (82f64 <main+0x600>)
   82d98:	4798      	blx	r3
					
					if (sensor_status.bldpump_door == 0)
   82d9a:	4b73      	ldr	r3, [pc, #460]	; (82f68 <main+0x604>)
   82d9c:	789b      	ldrb	r3, [r3, #2]
   82d9e:	2b00      	cmp	r3, #0
   82da0:	d10b      	bne.n	82dba <main+0x456>
					{
						states_2 = CPU2_BLOODPUMP;
   82da2:	4b63      	ldr	r3, [pc, #396]	; (82f30 <main+0x5cc>)
   82da4:	2201      	movs	r2, #1
   82da6:	701a      	strb	r2, [r3, #0]
						cpu2_sv_cntrl_deactivate_pin(RUDNCY_INT);
   82da8:	2007      	movs	r0, #7
   82daa:	4b70      	ldr	r3, [pc, #448]	; (82f6c <main+0x608>)
   82dac:	4798      	blx	r3
						cpu2_sv_cntrl_deactivate_pin(CPU_INT);
   82dae:	2008      	movs	r0, #8
   82db0:	4b6e      	ldr	r3, [pc, #440]	; (82f6c <main+0x608>)
   82db2:	4798      	blx	r3
						safety_measure_deactivate();
   82db4:	4b6e      	ldr	r3, [pc, #440]	; (82f70 <main+0x60c>)
   82db6:	4798      	blx	r3
						cpu2_sv_cntrl_activate_pin(RUDNCY_INT);
						cpu2_sv_cntrl_activate_pin(CPU_INT);
						safety_measure_activate();
						states_2 = CPU2_SAFETYSTATE;
					}
					break;
   82db8:	e00a      	b.n	82dd0 <main+0x46c>
						cpu2_sv_cntrl_deactivate_pin(CPU_INT);
						safety_measure_deactivate();
					}
					else
					{
						cpu2_sv_cntrl_activate_pin(RUDNCY_INT);
   82dba:	2007      	movs	r0, #7
   82dbc:	4b6d      	ldr	r3, [pc, #436]	; (82f74 <main+0x610>)
   82dbe:	4798      	blx	r3
						cpu2_sv_cntrl_activate_pin(CPU_INT);
   82dc0:	2008      	movs	r0, #8
   82dc2:	4b6c      	ldr	r3, [pc, #432]	; (82f74 <main+0x610>)
   82dc4:	4798      	blx	r3
						safety_measure_activate();
   82dc6:	4b6c      	ldr	r3, [pc, #432]	; (82f78 <main+0x614>)
   82dc8:	4798      	blx	r3
						states_2 = CPU2_SAFETYSTATE;
   82dca:	4b59      	ldr	r3, [pc, #356]	; (82f30 <main+0x5cc>)
   82dcc:	2202      	movs	r2, #2
   82dce:	701a      	strb	r2, [r3, #0]
					}
					break;
   82dd0:	bf00      	nop
					
					default:
					break;
					//similarly for the temp and conductivity
				}
				break;
   82dd2:	e000      	b.n	82dd6 <main+0x472>
				
				default:
				break;
   82dd4:	bf00      	nop
				
			}
			command = (uint8_t)0;
   82dd6:	4b61      	ldr	r3, [pc, #388]	; (82f5c <main+0x5f8>)
   82dd8:	2200      	movs	r2, #0
   82dda:	701a      	strb	r2, [r3, #0]
			//data_buff[1] = (uint8_t)0;
			//data_buff[2] = (uint8_t)0;
		//	flag_buff = 0;
		flag_buff--;
   82ddc:	4b67      	ldr	r3, [pc, #412]	; (82f7c <main+0x618>)
   82dde:	781b      	ldrb	r3, [r3, #0]
   82de0:	b2db      	uxtb	r3, r3
   82de2:	3b01      	subs	r3, #1
   82de4:	b2da      	uxtb	r2, r3
   82de6:	4b65      	ldr	r3, [pc, #404]	; (82f7c <main+0x618>)
   82de8:	701a      	strb	r2, [r3, #0]
			/*if ()				// fpr conductivity and temp
			{
			}*/
		//}
		
		while (flag_buff >= 1)
   82dea:	4b64      	ldr	r3, [pc, #400]	; (82f7c <main+0x618>)
   82dec:	781b      	ldrb	r3, [r3, #0]
   82dee:	b2db      	uxtb	r3, r3
   82df0:	2b00      	cmp	r3, #0
   82df2:	f47f ae74 	bne.w	82ade <main+0x17a>
//			data_count = 0;
		}
		
		
				
		if (!( time_tick % 5))
   82df6:	4b62      	ldr	r3, [pc, #392]	; (82f80 <main+0x61c>)
   82df8:	6819      	ldr	r1, [r3, #0]
   82dfa:	4b62      	ldr	r3, [pc, #392]	; (82f84 <main+0x620>)
   82dfc:	fba3 2301 	umull	r2, r3, r3, r1
   82e00:	089a      	lsrs	r2, r3, #2
   82e02:	4613      	mov	r3, r2
   82e04:	009b      	lsls	r3, r3, #2
   82e06:	4413      	add	r3, r2
   82e08:	1aca      	subs	r2, r1, r3
   82e0a:	2a00      	cmp	r2, #0
   82e0c:	d101      	bne.n	82e12 <main+0x4ae>
		{
			// read APT and VPT from spi
			cpu2_sensorstatus();
   82e0e:	4b55      	ldr	r3, [pc, #340]	; (82f64 <main+0x600>)
   82e10:	4798      	blx	r3
		}
		if(modify==1)
   82e12:	4b42      	ldr	r3, [pc, #264]	; (82f1c <main+0x5b8>)
   82e14:	781b      	ldrb	r3, [r3, #0]
   82e16:	b2db      	uxtb	r3, r3
   82e18:	2b01      	cmp	r3, #1
   82e1a:	f47f ae5f 	bne.w	82adc <main+0x178>
		{
			status=(((PIOA->PIO_PDSR)>>14)&1);
   82e1e:	4b5a      	ldr	r3, [pc, #360]	; (82f88 <main+0x624>)
   82e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82e22:	0b9b      	lsrs	r3, r3, #14
   82e24:	f003 0301 	and.w	r3, r3, #1
   82e28:	4a58      	ldr	r2, [pc, #352]	; (82f8c <main+0x628>)
   82e2a:	6013      	str	r3, [r2, #0]
			if (status==1 && prev_status ==0)
   82e2c:	4b57      	ldr	r3, [pc, #348]	; (82f8c <main+0x628>)
   82e2e:	681b      	ldr	r3, [r3, #0]
   82e30:	2b01      	cmp	r3, #1
   82e32:	d108      	bne.n	82e46 <main+0x4e2>
   82e34:	4b56      	ldr	r3, [pc, #344]	; (82f90 <main+0x62c>)
   82e36:	681b      	ldr	r3, [r3, #0]
   82e38:	2b00      	cmp	r3, #0
   82e3a:	d104      	bne.n	82e46 <main+0x4e2>
			{
				fedbck_cnt++;
   82e3c:	4b3f      	ldr	r3, [pc, #252]	; (82f3c <main+0x5d8>)
   82e3e:	681b      	ldr	r3, [r3, #0]
   82e40:	3301      	adds	r3, #1
   82e42:	4a3e      	ldr	r2, [pc, #248]	; (82f3c <main+0x5d8>)
   82e44:	6013      	str	r3, [r2, #0]
			}
			prev_status= status;
   82e46:	4b51      	ldr	r3, [pc, #324]	; (82f8c <main+0x628>)
   82e48:	681b      	ldr	r3, [r3, #0]
   82e4a:	4a51      	ldr	r2, [pc, #324]	; (82f90 <main+0x62c>)
   82e4c:	6013      	str	r3, [r2, #0]
		
			if (flag_1==1 && flag_2==1)
   82e4e:	4b35      	ldr	r3, [pc, #212]	; (82f24 <main+0x5c0>)
   82e50:	781b      	ldrb	r3, [r3, #0]
   82e52:	2b01      	cmp	r3, #1
   82e54:	f47f ae42 	bne.w	82adc <main+0x178>
   82e58:	4b33      	ldr	r3, [pc, #204]	; (82f28 <main+0x5c4>)
   82e5a:	781b      	ldrb	r3, [r3, #0]
   82e5c:	b2db      	uxtb	r3, r3
   82e5e:	2b01      	cmp	r3, #1
   82e60:	f47f ae3c 	bne.w	82adc <main+0x178>
			{
				if (count_2==2)
   82e64:	4b31      	ldr	r3, [pc, #196]	; (82f2c <main+0x5c8>)
   82e66:	781b      	ldrb	r3, [r3, #0]
   82e68:	b2db      	uxtb	r3, r3
   82e6a:	2b02      	cmp	r3, #2
   82e6c:	d102      	bne.n	82e74 <main+0x510>
				{
					flag_3=1;
   82e6e:	4b2c      	ldr	r3, [pc, #176]	; (82f20 <main+0x5bc>)
   82e70:	2201      	movs	r2, #1
   82e72:	701a      	strb	r2, [r3, #0]
				}
				if (flag_3==1)
   82e74:	4b2a      	ldr	r3, [pc, #168]	; (82f20 <main+0x5bc>)
   82e76:	781b      	ldrb	r3, [r3, #0]
   82e78:	b2db      	uxtb	r3, r3
   82e7a:	2b01      	cmp	r3, #1
   82e7c:	f040 80d0 	bne.w	83020 <main+0x6bc>
				{
					if (fedbck_cnt1 > fed_value )
   82e80:	4b44      	ldr	r3, [pc, #272]	; (82f94 <main+0x630>)
   82e82:	681a      	ldr	r2, [r3, #0]
   82e84:	4b33      	ldr	r3, [pc, #204]	; (82f54 <main+0x5f0>)
   82e86:	681b      	ldr	r3, [r3, #0]
   82e88:	429a      	cmp	r2, r3
   82e8a:	f240 80b9 	bls.w	83000 <main+0x69c>
						{
							DUTY=DUTY-2;
							PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
							printf("DUTY=%d\n",DUTY);
						}*/
								if (fedbck_cnt1 > fed_value+100)
   82e8e:	4b31      	ldr	r3, [pc, #196]	; (82f54 <main+0x5f0>)
   82e90:	681b      	ldr	r3, [r3, #0]
   82e92:	f103 0264 	add.w	r2, r3, #100	; 0x64
   82e96:	4b3f      	ldr	r3, [pc, #252]	; (82f94 <main+0x630>)
   82e98:	681b      	ldr	r3, [r3, #0]
   82e9a:	429a      	cmp	r2, r3
   82e9c:	d20a      	bcs.n	82eb4 <main+0x550>
								{
									//printf("decrment by 60....\n");
									DUTY=DUTY-60;
   82e9e:	4b3e      	ldr	r3, [pc, #248]	; (82f98 <main+0x634>)
   82ea0:	681b      	ldr	r3, [r3, #0]
   82ea2:	3b3c      	subs	r3, #60	; 0x3c
   82ea4:	4a3c      	ldr	r2, [pc, #240]	; (82f98 <main+0x634>)
   82ea6:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82ea8:	4a3c      	ldr	r2, [pc, #240]	; (82f9c <main+0x638>)
   82eaa:	4b3b      	ldr	r3, [pc, #236]	; (82f98 <main+0x634>)
   82eac:	681b      	ldr	r3, [r3, #0]
   82eae:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82eb2:	e0b5      	b.n	83020 <main+0x6bc>
							//		printf("DUTY=%d\n",DUTY);
								}
								else if (fedbck_cnt1 > fed_value+80)
   82eb4:	4b27      	ldr	r3, [pc, #156]	; (82f54 <main+0x5f0>)
   82eb6:	681b      	ldr	r3, [r3, #0]
   82eb8:	f103 0250 	add.w	r2, r3, #80	; 0x50
   82ebc:	4b35      	ldr	r3, [pc, #212]	; (82f94 <main+0x630>)
   82ebe:	681b      	ldr	r3, [r3, #0]
   82ec0:	429a      	cmp	r2, r3
   82ec2:	d20a      	bcs.n	82eda <main+0x576>
								{
									//printf("decrment by 50....\n");
									DUTY=DUTY-50;
   82ec4:	4b34      	ldr	r3, [pc, #208]	; (82f98 <main+0x634>)
   82ec6:	681b      	ldr	r3, [r3, #0]
   82ec8:	3b32      	subs	r3, #50	; 0x32
   82eca:	4a33      	ldr	r2, [pc, #204]	; (82f98 <main+0x634>)
   82ecc:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82ece:	4a33      	ldr	r2, [pc, #204]	; (82f9c <main+0x638>)
   82ed0:	4b31      	ldr	r3, [pc, #196]	; (82f98 <main+0x634>)
   82ed2:	681b      	ldr	r3, [r3, #0]
   82ed4:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82ed8:	e0a2      	b.n	83020 <main+0x6bc>
								//	printf("DUTY=%d\n",DUTY);
								}
								else if ((fedbck_cnt1 >= fed_value+20) && (fedbck_cnt1 <=fed_value+80))
   82eda:	4b1e      	ldr	r3, [pc, #120]	; (82f54 <main+0x5f0>)
   82edc:	681b      	ldr	r3, [r3, #0]
   82ede:	f103 0214 	add.w	r2, r3, #20
   82ee2:	4b2c      	ldr	r3, [pc, #176]	; (82f94 <main+0x630>)
   82ee4:	681b      	ldr	r3, [r3, #0]
   82ee6:	429a      	cmp	r2, r3
   82ee8:	d85a      	bhi.n	82fa0 <main+0x63c>
   82eea:	4b1a      	ldr	r3, [pc, #104]	; (82f54 <main+0x5f0>)
   82eec:	681b      	ldr	r3, [r3, #0]
   82eee:	f103 0250 	add.w	r2, r3, #80	; 0x50
   82ef2:	4b28      	ldr	r3, [pc, #160]	; (82f94 <main+0x630>)
   82ef4:	681b      	ldr	r3, [r3, #0]
   82ef6:	429a      	cmp	r2, r3
   82ef8:	d352      	bcc.n	82fa0 <main+0x63c>
								{
									//printf("decrment by 40....\n");
									DUTY=DUTY-40;
   82efa:	4b27      	ldr	r3, [pc, #156]	; (82f98 <main+0x634>)
   82efc:	681b      	ldr	r3, [r3, #0]
   82efe:	3b28      	subs	r3, #40	; 0x28
   82f00:	4a25      	ldr	r2, [pc, #148]	; (82f98 <main+0x634>)
   82f02:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f04:	4a25      	ldr	r2, [pc, #148]	; (82f9c <main+0x638>)
   82f06:	4b24      	ldr	r3, [pc, #144]	; (82f98 <main+0x634>)
   82f08:	681b      	ldr	r3, [r3, #0]
   82f0a:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f0e:	e087      	b.n	83020 <main+0x6bc>
   82f10:	2007093c 	.word	0x2007093c
   82f14:	00083045 	.word	0x00083045
   82f18:	20070974 	.word	0x20070974
   82f1c:	20070973 	.word	0x20070973
   82f20:	20070972 	.word	0x20070972
   82f24:	20070958 	.word	0x20070958
   82f28:	20070971 	.word	0x20070971
   82f2c:	20070964 	.word	0x20070964
   82f30:	20070970 	.word	0x20070970
   82f34:	2007093d 	.word	0x2007093d
   82f38:	00083071 	.word	0x00083071
   82f3c:	2007095c 	.word	0x2007095c
   82f40:	2007093e 	.word	0x2007093e
   82f44:	20070a6c 	.word	0x20070a6c
   82f48:	00083095 	.word	0x00083095
   82f4c:	20070934 	.word	0x20070934
   82f50:	2007093f 	.word	0x2007093f
   82f54:	20070978 	.word	0x20070978
   82f58:	20070940 	.word	0x20070940
   82f5c:	2007097c 	.word	0x2007097c
   82f60:	20070931 	.word	0x20070931
   82f64:	00083221 	.word	0x00083221
   82f68:	20070eb8 	.word	0x20070eb8
   82f6c:	00081d1d 	.word	0x00081d1d
   82f70:	000832b5 	.word	0x000832b5
   82f74:	00081cfd 	.word	0x00081cfd
   82f78:	00083295 	.word	0x00083295
   82f7c:	20070a68 	.word	0x20070a68
   82f80:	20070954 	.word	0x20070954
   82f84:	cccccccd 	.word	0xcccccccd
   82f88:	400e0e00 	.word	0x400e0e00
   82f8c:	20070980 	.word	0x20070980
   82f90:	20070984 	.word	0x20070984
   82f94:	20070960 	.word	0x20070960
   82f98:	20070008 	.word	0x20070008
   82f9c:	40094000 	.word	0x40094000
								//	printf("DUTY=%d\n",DUTY);
								}
								else if (fedbck_cnt1 > fed_value+10)
   82fa0:	4b23      	ldr	r3, [pc, #140]	; (83030 <main+0x6cc>)
   82fa2:	681b      	ldr	r3, [r3, #0]
   82fa4:	f103 020a 	add.w	r2, r3, #10
   82fa8:	4b22      	ldr	r3, [pc, #136]	; (83034 <main+0x6d0>)
   82faa:	681b      	ldr	r3, [r3, #0]
   82fac:	429a      	cmp	r2, r3
   82fae:	d20a      	bcs.n	82fc6 <main+0x662>
								{
									//printf("decrment by 20....\n");
									DUTY=DUTY-20;
   82fb0:	4b21      	ldr	r3, [pc, #132]	; (83038 <main+0x6d4>)
   82fb2:	681b      	ldr	r3, [r3, #0]
   82fb4:	3b14      	subs	r3, #20
   82fb6:	4a20      	ldr	r2, [pc, #128]	; (83038 <main+0x6d4>)
   82fb8:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82fba:	4a20      	ldr	r2, [pc, #128]	; (8303c <main+0x6d8>)
   82fbc:	4b1e      	ldr	r3, [pc, #120]	; (83038 <main+0x6d4>)
   82fbe:	681b      	ldr	r3, [r3, #0]
   82fc0:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82fc4:	e02c      	b.n	83020 <main+0x6bc>
								//	printf("DUTY=%d\n",DUTY);
								}
								
								else if (fedbck_cnt1 > fed_value+5)
   82fc6:	4b1a      	ldr	r3, [pc, #104]	; (83030 <main+0x6cc>)
   82fc8:	681b      	ldr	r3, [r3, #0]
   82fca:	1d5a      	adds	r2, r3, #5
   82fcc:	4b19      	ldr	r3, [pc, #100]	; (83034 <main+0x6d0>)
   82fce:	681b      	ldr	r3, [r3, #0]
   82fd0:	429a      	cmp	r2, r3
   82fd2:	d20a      	bcs.n	82fea <main+0x686>
								{
									//printf("decrment by 10....\n");
									DUTY=DUTY-10;
   82fd4:	4b18      	ldr	r3, [pc, #96]	; (83038 <main+0x6d4>)
   82fd6:	681b      	ldr	r3, [r3, #0]
   82fd8:	3b0a      	subs	r3, #10
   82fda:	4a17      	ldr	r2, [pc, #92]	; (83038 <main+0x6d4>)
   82fdc:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82fde:	4a17      	ldr	r2, [pc, #92]	; (8303c <main+0x6d8>)
   82fe0:	4b15      	ldr	r3, [pc, #84]	; (83038 <main+0x6d4>)
   82fe2:	681b      	ldr	r3, [r3, #0]
   82fe4:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82fe8:	e01a      	b.n	83020 <main+0x6bc>
								//	printf("DUTY=%d\n",DUTY);
								}
								else
								{
									//printf("decrment by 2....\n");
									DUTY=DUTY-2;
   82fea:	4b13      	ldr	r3, [pc, #76]	; (83038 <main+0x6d4>)
   82fec:	681b      	ldr	r3, [r3, #0]
   82fee:	3b02      	subs	r3, #2
   82ff0:	4a11      	ldr	r2, [pc, #68]	; (83038 <main+0x6d4>)
   82ff2:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82ff4:	4a11      	ldr	r2, [pc, #68]	; (8303c <main+0x6d8>)
   82ff6:	4b10      	ldr	r3, [pc, #64]	; (83038 <main+0x6d4>)
   82ff8:	681b      	ldr	r3, [r3, #0]
   82ffa:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82ffe:	e00f      	b.n	83020 <main+0x6bc>
								
						}
							
						//fedbck_cnt2=fedbck_cnt1;
						
					else if (fedbck_cnt1 < fed_value)
   83000:	4b0c      	ldr	r3, [pc, #48]	; (83034 <main+0x6d0>)
   83002:	681a      	ldr	r2, [r3, #0]
   83004:	4b0a      	ldr	r3, [pc, #40]	; (83030 <main+0x6cc>)
   83006:	681b      	ldr	r3, [r3, #0]
   83008:	429a      	cmp	r2, r3
   8300a:	d209      	bcs.n	83020 <main+0x6bc>
					{
						//	printf("less...\n");
							DUTY=DUTY+1;
   8300c:	4b0a      	ldr	r3, [pc, #40]	; (83038 <main+0x6d4>)
   8300e:	681b      	ldr	r3, [r3, #0]
   83010:	3301      	adds	r3, #1
   83012:	4a09      	ldr	r2, [pc, #36]	; (83038 <main+0x6d4>)
   83014:	6013      	str	r3, [r2, #0]
							PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   83016:	4a09      	ldr	r2, [pc, #36]	; (8303c <main+0x6d8>)
   83018:	4b07      	ldr	r3, [pc, #28]	; (83038 <main+0x6d4>)
   8301a:	681b      	ldr	r3, [r3, #0]
   8301c:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
						//	printf("DUTY=%d\n",DUTY);
						
					}
				}
				fedbck_cnt1=0;
   83020:	4b04      	ldr	r3, [pc, #16]	; (83034 <main+0x6d0>)
   83022:	2200      	movs	r2, #0
   83024:	601a      	str	r2, [r3, #0]
				flag_1=0;
   83026:	4b06      	ldr	r3, [pc, #24]	; (83040 <main+0x6dc>)
   83028:	2200      	movs	r2, #0
   8302a:	701a      	strb	r2, [r3, #0]
		}
		
		
		
		
	}	
   8302c:	e556      	b.n	82adc <main+0x178>
   8302e:	bf00      	nop
   83030:	20070978 	.word	0x20070978
   83034:	20070960 	.word	0x20070960
   83038:	20070008 	.word	0x20070008
   8303c:	40094000 	.word	0x40094000
   83040:	20070958 	.word	0x20070958

00083044 <start_bloodpump>:
}

void start_bloodpump()
{
   83044:	b580      	push	{r7, lr}
   83046:	af00      	add	r7, sp, #0
	//startTimer1(TC0,0,TC0_IRQn,rc);
	//startTimer2(TC0,1,TC1_IRQn,ra);
	defaultspeed_bloodpump(rc);				// 10 rotation rc count is 231
	rampingspeed_bloodpump(ra);	*/
	
	PIOD->PIO_SODR = 0x00000008;				// setting of dac input that is 8
   83048:	4b07      	ldr	r3, [pc, #28]	; (83068 <start_bloodpump+0x24>)
   8304a:	2208      	movs	r2, #8
   8304c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = 0x00000040;
   8304e:	4b06      	ldr	r3, [pc, #24]	; (83068 <start_bloodpump+0x24>)
   83050:	2240      	movs	r2, #64	; 0x40
   83052:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR = 0x00000200;
   83054:	4b04      	ldr	r3, [pc, #16]	; (83068 <start_bloodpump+0x24>)
   83056:	f44f 7200 	mov.w	r2, #512	; 0x200
   8305a:	635a      	str	r2, [r3, #52]	; 0x34
	cpu2_sv_cntrl_activatepump(BLOODPUMP);		//35 rotation ra count will be 4179	
   8305c:	2001      	movs	r0, #1
   8305e:	4b03      	ldr	r3, [pc, #12]	; (8306c <start_bloodpump+0x28>)
   83060:	4798      	blx	r3
	
}
   83062:	bf00      	nop
   83064:	bd80      	pop	{r7, pc}
   83066:	bf00      	nop
   83068:	400e1400 	.word	0x400e1400
   8306c:	00081cbd 	.word	0x00081cbd

00083070 <stop_bloodpump>:
void stop_bloodpump()
{
   83070:	b580      	push	{r7, lr}
   83072:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_deactivatepump(BLOODPUMP);
   83074:	2001      	movs	r0, #1
   83076:	4b05      	ldr	r3, [pc, #20]	; (8308c <stop_bloodpump+0x1c>)
   83078:	4798      	blx	r3
	PIOD->PIO_CODR = 0x0000000F;
   8307a:	4b05      	ldr	r3, [pc, #20]	; (83090 <stop_bloodpump+0x20>)
   8307c:	220f      	movs	r2, #15
   8307e:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_SODR = 0x00000200;
   83080:	4b03      	ldr	r3, [pc, #12]	; (83090 <stop_bloodpump+0x20>)
   83082:	f44f 7200 	mov.w	r2, #512	; 0x200
   83086:	631a      	str	r2, [r3, #48]	; 0x30
	/*PIOD->PIO_SODR = 0x00000200;
	PIOC->PIO_SODR = 0x00001000;
	cpu2_sv_cntrl_deactivatepump(BLOODPUMP);
	CPU2_S_STOP_TIMER(0);
	CPU2_S_STOP_TIMER(1);*/
}
   83088:	bf00      	nop
   8308a:	bd80      	pop	{r7, pc}
   8308c:	00081cdd 	.word	0x00081cdd
   83090:	400e1400 	.word	0x400e1400

00083094 <speedchange_bloodpump>:
void speedchange_bloodpump(uint32_t spd_change)
{
   83094:	b590      	push	{r4, r7, lr}
   83096:	b085      	sub	sp, #20
   83098:	af00      	add	r7, sp, #0
   8309a:	6078      	str	r0, [r7, #4]
	int i;
	
	//printf("Before %d\n",spd_change);
	
	for(i=0;i<20;i++)
   8309c:	2300      	movs	r3, #0
   8309e:	60fb      	str	r3, [r7, #12]
   830a0:	e096      	b.n	831d0 <speedchange_bloodpump+0x13c>
	{
		if(spd_change == blood_array[i].ml)
   830a2:	4a56      	ldr	r2, [pc, #344]	; (831fc <speedchange_bloodpump+0x168>)
   830a4:	68fb      	ldr	r3, [r7, #12]
   830a6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   830aa:	b29b      	uxth	r3, r3
   830ac:	461a      	mov	r2, r3
   830ae:	687b      	ldr	r3, [r7, #4]
   830b0:	429a      	cmp	r2, r3
   830b2:	d113      	bne.n	830dc <speedchange_bloodpump+0x48>
		{
			printf("value matched\n");
   830b4:	4852      	ldr	r0, [pc, #328]	; (83200 <speedchange_bloodpump+0x16c>)
   830b6:	4b53      	ldr	r3, [pc, #332]	; (83204 <speedchange_bloodpump+0x170>)
   830b8:	4798      	blx	r3
			DUTY=blood_array[i].duty_value;
   830ba:	4a50      	ldr	r2, [pc, #320]	; (831fc <speedchange_bloodpump+0x168>)
   830bc:	68fb      	ldr	r3, [r7, #12]
   830be:	00db      	lsls	r3, r3, #3
   830c0:	4413      	add	r3, r2
   830c2:	885b      	ldrh	r3, [r3, #2]
   830c4:	b29b      	uxth	r3, r3
   830c6:	461a      	mov	r2, r3
   830c8:	4b4f      	ldr	r3, [pc, #316]	; (83208 <speedchange_bloodpump+0x174>)
   830ca:	601a      	str	r2, [r3, #0]
			fed_value=blood_array[i].fdbck;
   830cc:	4a4b      	ldr	r2, [pc, #300]	; (831fc <speedchange_bloodpump+0x168>)
   830ce:	68fb      	ldr	r3, [r7, #12]
   830d0:	00db      	lsls	r3, r3, #3
   830d2:	4413      	add	r3, r2
   830d4:	685b      	ldr	r3, [r3, #4]
   830d6:	4a4d      	ldr	r2, [pc, #308]	; (8320c <speedchange_bloodpump+0x178>)
   830d8:	6013      	str	r3, [r2, #0]
			//value=i;
			break;
   830da:	e07d      	b.n	831d8 <speedchange_bloodpump+0x144>
		}
		else if((spd_change > blood_array[i].ml) && (spd_change < blood_array[i+1].ml))
   830dc:	4a47      	ldr	r2, [pc, #284]	; (831fc <speedchange_bloodpump+0x168>)
   830de:	68fb      	ldr	r3, [r7, #12]
   830e0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   830e4:	b29b      	uxth	r3, r3
   830e6:	461a      	mov	r2, r3
   830e8:	687b      	ldr	r3, [r7, #4]
   830ea:	429a      	cmp	r2, r3
   830ec:	d26d      	bcs.n	831ca <speedchange_bloodpump+0x136>
   830ee:	68fb      	ldr	r3, [r7, #12]
   830f0:	3301      	adds	r3, #1
   830f2:	4a42      	ldr	r2, [pc, #264]	; (831fc <speedchange_bloodpump+0x168>)
   830f4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   830f8:	b29b      	uxth	r3, r3
   830fa:	461a      	mov	r2, r3
   830fc:	687b      	ldr	r3, [r7, #4]
   830fe:	429a      	cmp	r2, r3
   83100:	d963      	bls.n	831ca <speedchange_bloodpump+0x136>
		{
			printf("manipulation\n");
   83102:	4843      	ldr	r0, [pc, #268]	; (83210 <speedchange_bloodpump+0x17c>)
   83104:	4b3f      	ldr	r3, [pc, #252]	; (83204 <speedchange_bloodpump+0x170>)
   83106:	4798      	blx	r3
			DUTY = blood_array[i].duty_value+((blood_array[i+1].duty_value-blood_array[i].duty_value)/(blood_array[i+1].ml-blood_array[i].ml))*(spd_change-blood_array[i].ml);
   83108:	4a3c      	ldr	r2, [pc, #240]	; (831fc <speedchange_bloodpump+0x168>)
   8310a:	68fb      	ldr	r3, [r7, #12]
   8310c:	00db      	lsls	r3, r3, #3
   8310e:	4413      	add	r3, r2
   83110:	885b      	ldrh	r3, [r3, #2]
   83112:	b29b      	uxth	r3, r3
   83114:	4618      	mov	r0, r3
   83116:	68fb      	ldr	r3, [r7, #12]
   83118:	3301      	adds	r3, #1
   8311a:	4a38      	ldr	r2, [pc, #224]	; (831fc <speedchange_bloodpump+0x168>)
   8311c:	00db      	lsls	r3, r3, #3
   8311e:	4413      	add	r3, r2
   83120:	885b      	ldrh	r3, [r3, #2]
   83122:	b29b      	uxth	r3, r3
   83124:	4619      	mov	r1, r3
   83126:	4a35      	ldr	r2, [pc, #212]	; (831fc <speedchange_bloodpump+0x168>)
   83128:	68fb      	ldr	r3, [r7, #12]
   8312a:	00db      	lsls	r3, r3, #3
   8312c:	4413      	add	r3, r2
   8312e:	885b      	ldrh	r3, [r3, #2]
   83130:	b29b      	uxth	r3, r3
   83132:	1aca      	subs	r2, r1, r3
   83134:	68fb      	ldr	r3, [r7, #12]
   83136:	3301      	adds	r3, #1
   83138:	4930      	ldr	r1, [pc, #192]	; (831fc <speedchange_bloodpump+0x168>)
   8313a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   8313e:	b29b      	uxth	r3, r3
   83140:	461c      	mov	r4, r3
   83142:	492e      	ldr	r1, [pc, #184]	; (831fc <speedchange_bloodpump+0x168>)
   83144:	68fb      	ldr	r3, [r7, #12]
   83146:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   8314a:	b29b      	uxth	r3, r3
   8314c:	1ae3      	subs	r3, r4, r3
   8314e:	fb92 f3f3 	sdiv	r3, r2, r3
   83152:	4619      	mov	r1, r3
   83154:	4a29      	ldr	r2, [pc, #164]	; (831fc <speedchange_bloodpump+0x168>)
   83156:	68fb      	ldr	r3, [r7, #12]
   83158:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   8315c:	b29b      	uxth	r3, r3
   8315e:	461a      	mov	r2, r3
   83160:	687b      	ldr	r3, [r7, #4]
   83162:	1a9b      	subs	r3, r3, r2
   83164:	fb03 f301 	mul.w	r3, r3, r1
   83168:	4403      	add	r3, r0
   8316a:	4a27      	ldr	r2, [pc, #156]	; (83208 <speedchange_bloodpump+0x174>)
   8316c:	6013      	str	r3, [r2, #0]
			//value=19;
			//fed_value = blood_array[i].fdbck+((blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))*(spd_change-blood_array[i].ml);
			fed_value = ((spd_change-blood_array[i].ml)*(blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))+blood_array[i].fdbck;
   8316e:	4a23      	ldr	r2, [pc, #140]	; (831fc <speedchange_bloodpump+0x168>)
   83170:	68fb      	ldr	r3, [r7, #12]
   83172:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   83176:	b29b      	uxth	r3, r3
   83178:	461a      	mov	r2, r3
   8317a:	687b      	ldr	r3, [r7, #4]
   8317c:	1a9a      	subs	r2, r3, r2
   8317e:	68fb      	ldr	r3, [r7, #12]
   83180:	3301      	adds	r3, #1
   83182:	491e      	ldr	r1, [pc, #120]	; (831fc <speedchange_bloodpump+0x168>)
   83184:	00db      	lsls	r3, r3, #3
   83186:	440b      	add	r3, r1
   83188:	6859      	ldr	r1, [r3, #4]
   8318a:	481c      	ldr	r0, [pc, #112]	; (831fc <speedchange_bloodpump+0x168>)
   8318c:	68fb      	ldr	r3, [r7, #12]
   8318e:	00db      	lsls	r3, r3, #3
   83190:	4403      	add	r3, r0
   83192:	685b      	ldr	r3, [r3, #4]
   83194:	1acb      	subs	r3, r1, r3
   83196:	fb03 f302 	mul.w	r3, r3, r2
   8319a:	68fa      	ldr	r2, [r7, #12]
   8319c:	3201      	adds	r2, #1
   8319e:	4917      	ldr	r1, [pc, #92]	; (831fc <speedchange_bloodpump+0x168>)
   831a0:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
   831a4:	b292      	uxth	r2, r2
   831a6:	4610      	mov	r0, r2
   831a8:	4914      	ldr	r1, [pc, #80]	; (831fc <speedchange_bloodpump+0x168>)
   831aa:	68fa      	ldr	r2, [r7, #12]
   831ac:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
   831b0:	b292      	uxth	r2, r2
   831b2:	1a82      	subs	r2, r0, r2
   831b4:	fbb3 f2f2 	udiv	r2, r3, r2
   831b8:	4910      	ldr	r1, [pc, #64]	; (831fc <speedchange_bloodpump+0x168>)
   831ba:	68fb      	ldr	r3, [r7, #12]
   831bc:	00db      	lsls	r3, r3, #3
   831be:	440b      	add	r3, r1
   831c0:	685b      	ldr	r3, [r3, #4]
   831c2:	4413      	add	r3, r2
   831c4:	4a11      	ldr	r2, [pc, #68]	; (8320c <speedchange_bloodpump+0x178>)
   831c6:	6013      	str	r3, [r2, #0]
			//blood_array[value].fdbck=fed_value;
			//printf("After %d\n",fed_value);
			break;
   831c8:	e006      	b.n	831d8 <speedchange_bloodpump+0x144>
{
	int i;
	
	//printf("Before %d\n",spd_change);
	
	for(i=0;i<20;i++)
   831ca:	68fb      	ldr	r3, [r7, #12]
   831cc:	3301      	adds	r3, #1
   831ce:	60fb      	str	r3, [r7, #12]
   831d0:	68fb      	ldr	r3, [r7, #12]
   831d2:	2b13      	cmp	r3, #19
   831d4:	f77f af65 	ble.w	830a2 <speedchange_bloodpump+0xe>
			//printf("After %d\n",fed_value);
			break;
		}
	}
	//spd_change=spd_change+200;
	printf("After %d\n",DUTY);
   831d8:	4b0b      	ldr	r3, [pc, #44]	; (83208 <speedchange_bloodpump+0x174>)
   831da:	681b      	ldr	r3, [r3, #0]
   831dc:	4619      	mov	r1, r3
   831de:	480d      	ldr	r0, [pc, #52]	; (83214 <speedchange_bloodpump+0x180>)
   831e0:	4b08      	ldr	r3, [pc, #32]	; (83204 <speedchange_bloodpump+0x170>)
   831e2:	4798      	blx	r3
	PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   831e4:	4a0c      	ldr	r2, [pc, #48]	; (83218 <speedchange_bloodpump+0x184>)
   831e6:	4b08      	ldr	r3, [pc, #32]	; (83208 <speedchange_bloodpump+0x174>)
   831e8:	681b      	ldr	r3, [r3, #0]
   831ea:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
	flag_2=1;
   831ee:	4b0b      	ldr	r3, [pc, #44]	; (8321c <speedchange_bloodpump+0x188>)
   831f0:	2201      	movs	r2, #1
   831f2:	701a      	strb	r2, [r3, #0]
		ra = (84000000/(128*val))-1;
		//startTimer2(TC0,1,TC1_IRQn,ra);
		rampingspeed_bloodpump(ra);
	}*/
	
}
   831f4:	bf00      	nop
   831f6:	3714      	adds	r7, #20
   831f8:	46bd      	mov	sp, r7
   831fa:	bd90      	pop	{r4, r7, pc}
   831fc:	2007000c 	.word	0x2007000c
   83200:	00087644 	.word	0x00087644
   83204:	000846d5 	.word	0x000846d5
   83208:	20070008 	.word	0x20070008
   8320c:	20070978 	.word	0x20070978
   83210:	00087654 	.word	0x00087654
   83214:	00087664 	.word	0x00087664
   83218:	40094000 	.word	0x40094000
   8321c:	20070971 	.word	0x20070971

00083220 <cpu2_sensorstatus>:
{
	CPU2_S_START_TIMER(2,rampingspeed);
}

void cpu2_sensorstatus(void)
{
   83220:	b580      	push	{r7, lr}
   83222:	af00      	add	r7, sp, #0
	
	
	cpu2_sv_status_getsystemstatus(&sv_sys_statbuffer);
   83224:	4818      	ldr	r0, [pc, #96]	; (83288 <cpu2_sensorstatus+0x68>)
   83226:	4b19      	ldr	r3, [pc, #100]	; (8328c <cpu2_sensorstatus+0x6c>)
   83228:	4798      	blx	r3
	
	sensor_status.abd=sv_sys_statbuffer.abdstatus;
   8322a:	4b17      	ldr	r3, [pc, #92]	; (83288 <cpu2_sensorstatus+0x68>)
   8322c:	889b      	ldrh	r3, [r3, #4]
   8322e:	b2da      	uxtb	r2, r3
   83230:	4b17      	ldr	r3, [pc, #92]	; (83290 <cpu2_sensorstatus+0x70>)
   83232:	701a      	strb	r2, [r3, #0]
	sensor_status.bd=sv_sys_statbuffer.bdstatus;
   83234:	4b14      	ldr	r3, [pc, #80]	; (83288 <cpu2_sensorstatus+0x68>)
   83236:	88db      	ldrh	r3, [r3, #6]
   83238:	b2da      	uxtb	r2, r3
   8323a:	4b15      	ldr	r3, [pc, #84]	; (83290 <cpu2_sensorstatus+0x70>)
   8323c:	705a      	strb	r2, [r3, #1]
	sensor_status.bldpump_door=sv_sys_statbuffer.bp_door;
   8323e:	4b12      	ldr	r3, [pc, #72]	; (83288 <cpu2_sensorstatus+0x68>)
   83240:	891b      	ldrh	r3, [r3, #8]
   83242:	b2da      	uxtb	r2, r3
   83244:	4b12      	ldr	r3, [pc, #72]	; (83290 <cpu2_sensorstatus+0x70>)
   83246:	709a      	strb	r2, [r3, #2]
	sensor_status.bldpump_sense=sv_sys_statbuffer.bp_sense;
   83248:	4b0f      	ldr	r3, [pc, #60]	; (83288 <cpu2_sensorstatus+0x68>)
   8324a:	895b      	ldrh	r3, [r3, #10]
   8324c:	b2da      	uxtb	r2, r3
   8324e:	4b10      	ldr	r3, [pc, #64]	; (83290 <cpu2_sensorstatus+0x70>)
   83250:	70da      	strb	r2, [r3, #3]
	sensor_status.clamp_fdbk=sv_sys_statbuffer.clamp_fdbk;
   83252:	4b0d      	ldr	r3, [pc, #52]	; (83288 <cpu2_sensorstatus+0x68>)
   83254:	899b      	ldrh	r3, [r3, #12]
   83256:	b2da      	uxtb	r2, r3
   83258:	4b0d      	ldr	r3, [pc, #52]	; (83290 <cpu2_sensorstatus+0x70>)
   8325a:	711a      	strb	r2, [r3, #4]
	sensor_status.clamp_door=sv_sys_statbuffer.clamp_door;
   8325c:	4b0a      	ldr	r3, [pc, #40]	; (83288 <cpu2_sensorstatus+0x68>)
   8325e:	89db      	ldrh	r3, [r3, #14]
   83260:	b2da      	uxtb	r2, r3
   83262:	4b0b      	ldr	r3, [pc, #44]	; (83290 <cpu2_sensorstatus+0x70>)
   83264:	715a      	strb	r2, [r3, #5]
	sensor_status.rdncy_irq=sv_sys_statbuffer.rudncy_irq;
   83266:	4b08      	ldr	r3, [pc, #32]	; (83288 <cpu2_sensorstatus+0x68>)
   83268:	8a1b      	ldrh	r3, [r3, #16]
   8326a:	b2da      	uxtb	r2, r3
   8326c:	4b08      	ldr	r3, [pc, #32]	; (83290 <cpu2_sensorstatus+0x70>)
   8326e:	719a      	strb	r2, [r3, #6]
// 	sensor_status.cond1=sv_sys_statbuffer.cond1_status;
// 	sensor_status.cond2=sv_sys_statbuffer.cond2_status;
// 	sensor_status.temp=sv_sys_statbuffer.Tempstatus;
	sensor_status.apt=sv_sys_statbuffer.aptstatus;
   83270:	4b05      	ldr	r3, [pc, #20]	; (83288 <cpu2_sensorstatus+0x68>)
   83272:	881b      	ldrh	r3, [r3, #0]
   83274:	461a      	mov	r2, r3
   83276:	4b06      	ldr	r3, [pc, #24]	; (83290 <cpu2_sensorstatus+0x70>)
   83278:	615a      	str	r2, [r3, #20]
	sensor_status.vpt=sv_sys_statbuffer.vptstatus;	
   8327a:	4b03      	ldr	r3, [pc, #12]	; (83288 <cpu2_sensorstatus+0x68>)
   8327c:	885b      	ldrh	r3, [r3, #2]
   8327e:	461a      	mov	r2, r3
   83280:	4b03      	ldr	r3, [pc, #12]	; (83290 <cpu2_sensorstatus+0x70>)
   83282:	619a      	str	r2, [r3, #24]
}
   83284:	bf00      	nop
   83286:	bd80      	pop	{r7, pc}
   83288:	20070ea0 	.word	0x20070ea0
   8328c:	00081d3d 	.word	0x00081d3d
   83290:	20070eb8 	.word	0x20070eb8

00083294 <safety_measure_activate>:

void safety_measure_activate(void)
{
   83294:	b580      	push	{r7, lr}
   83296:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_activate_pin(CLAMP_PWR);
   83298:	2005      	movs	r0, #5
   8329a:	4b04      	ldr	r3, [pc, #16]	; (832ac <safety_measure_activate+0x18>)
   8329c:	4798      	blx	r3
	stop_bloodpump();
   8329e:	4b04      	ldr	r3, [pc, #16]	; (832b0 <safety_measure_activate+0x1c>)
   832a0:	4798      	blx	r3
	cpu2_sv_cntrl_activate_pin(BYPS_PWR);
   832a2:	2006      	movs	r0, #6
   832a4:	4b01      	ldr	r3, [pc, #4]	; (832ac <safety_measure_activate+0x18>)
   832a6:	4798      	blx	r3
}
   832a8:	bf00      	nop
   832aa:	bd80      	pop	{r7, pc}
   832ac:	00081cfd 	.word	0x00081cfd
   832b0:	00083071 	.word	0x00083071

000832b4 <safety_measure_deactivate>:
void safety_measure_deactivate(void)
{
   832b4:	b580      	push	{r7, lr}
   832b6:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_deactivate_pin(CLAMP_PWR);
   832b8:	2005      	movs	r0, #5
   832ba:	4b04      	ldr	r3, [pc, #16]	; (832cc <safety_measure_deactivate+0x18>)
   832bc:	4798      	blx	r3
	start_bloodpump();
   832be:	4b04      	ldr	r3, [pc, #16]	; (832d0 <safety_measure_deactivate+0x1c>)
   832c0:	4798      	blx	r3
	cpu2_sv_cntrl_deactivate_pin(BYPS_PWR);
   832c2:	2006      	movs	r0, #6
   832c4:	4b01      	ldr	r3, [pc, #4]	; (832cc <safety_measure_deactivate+0x18>)
   832c6:	4798      	blx	r3
	//states_2= CPU2_BLOODPUMP;
}
   832c8:	bf00      	nop
   832ca:	bd80      	pop	{r7, pc}
   832cc:	00081d1d 	.word	0x00081d1d
   832d0:	00083045 	.word	0x00083045

000832d4 <osc_enable>:
   832d4:	b580      	push	{r7, lr}
   832d6:	b082      	sub	sp, #8
   832d8:	af00      	add	r7, sp, #0
   832da:	6078      	str	r0, [r7, #4]
   832dc:	687b      	ldr	r3, [r7, #4]
   832de:	2b07      	cmp	r3, #7
   832e0:	d831      	bhi.n	83346 <osc_enable+0x72>
   832e2:	a201      	add	r2, pc, #4	; (adr r2, 832e8 <osc_enable+0x14>)
   832e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832e8:	00083345 	.word	0x00083345
   832ec:	00083309 	.word	0x00083309
   832f0:	00083311 	.word	0x00083311
   832f4:	00083319 	.word	0x00083319
   832f8:	00083321 	.word	0x00083321
   832fc:	00083329 	.word	0x00083329
   83300:	00083331 	.word	0x00083331
   83304:	0008333b 	.word	0x0008333b
   83308:	2000      	movs	r0, #0
   8330a:	4b11      	ldr	r3, [pc, #68]	; (83350 <osc_enable+0x7c>)
   8330c:	4798      	blx	r3
   8330e:	e01a      	b.n	83346 <osc_enable+0x72>
   83310:	2001      	movs	r0, #1
   83312:	4b0f      	ldr	r3, [pc, #60]	; (83350 <osc_enable+0x7c>)
   83314:	4798      	blx	r3
   83316:	e016      	b.n	83346 <osc_enable+0x72>
   83318:	2000      	movs	r0, #0
   8331a:	4b0e      	ldr	r3, [pc, #56]	; (83354 <osc_enable+0x80>)
   8331c:	4798      	blx	r3
   8331e:	e012      	b.n	83346 <osc_enable+0x72>
   83320:	2010      	movs	r0, #16
   83322:	4b0c      	ldr	r3, [pc, #48]	; (83354 <osc_enable+0x80>)
   83324:	4798      	blx	r3
   83326:	e00e      	b.n	83346 <osc_enable+0x72>
   83328:	2020      	movs	r0, #32
   8332a:	4b0a      	ldr	r3, [pc, #40]	; (83354 <osc_enable+0x80>)
   8332c:	4798      	blx	r3
   8332e:	e00a      	b.n	83346 <osc_enable+0x72>
   83330:	213e      	movs	r1, #62	; 0x3e
   83332:	2000      	movs	r0, #0
   83334:	4b08      	ldr	r3, [pc, #32]	; (83358 <osc_enable+0x84>)
   83336:	4798      	blx	r3
   83338:	e005      	b.n	83346 <osc_enable+0x72>
   8333a:	213e      	movs	r1, #62	; 0x3e
   8333c:	2001      	movs	r0, #1
   8333e:	4b06      	ldr	r3, [pc, #24]	; (83358 <osc_enable+0x84>)
   83340:	4798      	blx	r3
   83342:	e000      	b.n	83346 <osc_enable+0x72>
   83344:	bf00      	nop
   83346:	bf00      	nop
   83348:	3708      	adds	r7, #8
   8334a:	46bd      	mov	sp, r7
   8334c:	bd80      	pop	{r7, pc}
   8334e:	bf00      	nop
   83350:	00083ca9 	.word	0x00083ca9
   83354:	00083d15 	.word	0x00083d15
   83358:	00083db5 	.word	0x00083db5

0008335c <osc_is_ready>:
   8335c:	b580      	push	{r7, lr}
   8335e:	b082      	sub	sp, #8
   83360:	af00      	add	r7, sp, #0
   83362:	6078      	str	r0, [r7, #4]
   83364:	687b      	ldr	r3, [r7, #4]
   83366:	2b07      	cmp	r3, #7
   83368:	d826      	bhi.n	833b8 <osc_is_ready+0x5c>
   8336a:	a201      	add	r2, pc, #4	; (adr r2, 83370 <osc_is_ready+0x14>)
   8336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83370:	00083391 	.word	0x00083391
   83374:	00083395 	.word	0x00083395
   83378:	00083395 	.word	0x00083395
   8337c:	000833a7 	.word	0x000833a7
   83380:	000833a7 	.word	0x000833a7
   83384:	000833a7 	.word	0x000833a7
   83388:	000833a7 	.word	0x000833a7
   8338c:	000833a7 	.word	0x000833a7
   83390:	2301      	movs	r3, #1
   83392:	e012      	b.n	833ba <osc_is_ready+0x5e>
   83394:	4b0b      	ldr	r3, [pc, #44]	; (833c4 <osc_is_ready+0x68>)
   83396:	4798      	blx	r3
   83398:	4603      	mov	r3, r0
   8339a:	2b00      	cmp	r3, #0
   8339c:	bf14      	ite	ne
   8339e:	2301      	movne	r3, #1
   833a0:	2300      	moveq	r3, #0
   833a2:	b2db      	uxtb	r3, r3
   833a4:	e009      	b.n	833ba <osc_is_ready+0x5e>
   833a6:	4b08      	ldr	r3, [pc, #32]	; (833c8 <osc_is_ready+0x6c>)
   833a8:	4798      	blx	r3
   833aa:	4603      	mov	r3, r0
   833ac:	2b00      	cmp	r3, #0
   833ae:	bf14      	ite	ne
   833b0:	2301      	movne	r3, #1
   833b2:	2300      	moveq	r3, #0
   833b4:	b2db      	uxtb	r3, r3
   833b6:	e000      	b.n	833ba <osc_is_ready+0x5e>
   833b8:	2300      	movs	r3, #0
   833ba:	4618      	mov	r0, r3
   833bc:	3708      	adds	r7, #8
   833be:	46bd      	mov	sp, r7
   833c0:	bd80      	pop	{r7, pc}
   833c2:	bf00      	nop
   833c4:	00083ce1 	.word	0x00083ce1
   833c8:	00083e2d 	.word	0x00083e2d

000833cc <osc_get_rate>:
   833cc:	b480      	push	{r7}
   833ce:	b083      	sub	sp, #12
   833d0:	af00      	add	r7, sp, #0
   833d2:	6078      	str	r0, [r7, #4]
   833d4:	687b      	ldr	r3, [r7, #4]
   833d6:	2b07      	cmp	r3, #7
   833d8:	d825      	bhi.n	83426 <osc_get_rate+0x5a>
   833da:	a201      	add	r2, pc, #4	; (adr r2, 833e0 <osc_get_rate+0x14>)
   833dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833e0:	00083401 	.word	0x00083401
   833e4:	00083407 	.word	0x00083407
   833e8:	0008340d 	.word	0x0008340d
   833ec:	00083413 	.word	0x00083413
   833f0:	00083417 	.word	0x00083417
   833f4:	0008341b 	.word	0x0008341b
   833f8:	0008341f 	.word	0x0008341f
   833fc:	00083423 	.word	0x00083423
   83400:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83404:	e010      	b.n	83428 <osc_get_rate+0x5c>
   83406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8340a:	e00d      	b.n	83428 <osc_get_rate+0x5c>
   8340c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83410:	e00a      	b.n	83428 <osc_get_rate+0x5c>
   83412:	4b08      	ldr	r3, [pc, #32]	; (83434 <osc_get_rate+0x68>)
   83414:	e008      	b.n	83428 <osc_get_rate+0x5c>
   83416:	4b08      	ldr	r3, [pc, #32]	; (83438 <osc_get_rate+0x6c>)
   83418:	e006      	b.n	83428 <osc_get_rate+0x5c>
   8341a:	4b08      	ldr	r3, [pc, #32]	; (8343c <osc_get_rate+0x70>)
   8341c:	e004      	b.n	83428 <osc_get_rate+0x5c>
   8341e:	4b07      	ldr	r3, [pc, #28]	; (8343c <osc_get_rate+0x70>)
   83420:	e002      	b.n	83428 <osc_get_rate+0x5c>
   83422:	4b06      	ldr	r3, [pc, #24]	; (8343c <osc_get_rate+0x70>)
   83424:	e000      	b.n	83428 <osc_get_rate+0x5c>
   83426:	2300      	movs	r3, #0
   83428:	4618      	mov	r0, r3
   8342a:	370c      	adds	r7, #12
   8342c:	46bd      	mov	sp, r7
   8342e:	bc80      	pop	{r7}
   83430:	4770      	bx	lr
   83432:	bf00      	nop
   83434:	003d0900 	.word	0x003d0900
   83438:	007a1200 	.word	0x007a1200
   8343c:	00b71b00 	.word	0x00b71b00

00083440 <osc_wait_ready>:
   83440:	b580      	push	{r7, lr}
   83442:	b082      	sub	sp, #8
   83444:	af00      	add	r7, sp, #0
   83446:	4603      	mov	r3, r0
   83448:	71fb      	strb	r3, [r7, #7]
   8344a:	bf00      	nop
   8344c:	79fb      	ldrb	r3, [r7, #7]
   8344e:	4618      	mov	r0, r3
   83450:	4b05      	ldr	r3, [pc, #20]	; (83468 <osc_wait_ready+0x28>)
   83452:	4798      	blx	r3
   83454:	4603      	mov	r3, r0
   83456:	f083 0301 	eor.w	r3, r3, #1
   8345a:	b2db      	uxtb	r3, r3
   8345c:	2b00      	cmp	r3, #0
   8345e:	d1f5      	bne.n	8344c <osc_wait_ready+0xc>
   83460:	bf00      	nop
   83462:	3708      	adds	r7, #8
   83464:	46bd      	mov	sp, r7
   83466:	bd80      	pop	{r7, pc}
   83468:	0008335d 	.word	0x0008335d

0008346c <pll_config_init>:
   8346c:	b580      	push	{r7, lr}
   8346e:	b086      	sub	sp, #24
   83470:	af00      	add	r7, sp, #0
   83472:	60f8      	str	r0, [r7, #12]
   83474:	607a      	str	r2, [r7, #4]
   83476:	603b      	str	r3, [r7, #0]
   83478:	460b      	mov	r3, r1
   8347a:	72fb      	strb	r3, [r7, #11]
   8347c:	687b      	ldr	r3, [r7, #4]
   8347e:	2b00      	cmp	r3, #0
   83480:	d107      	bne.n	83492 <pll_config_init+0x26>
   83482:	683b      	ldr	r3, [r7, #0]
   83484:	2b00      	cmp	r3, #0
   83486:	d104      	bne.n	83492 <pll_config_init+0x26>
   83488:	68fb      	ldr	r3, [r7, #12]
   8348a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8348e:	601a      	str	r2, [r3, #0]
   83490:	e019      	b.n	834c6 <pll_config_init+0x5a>
   83492:	7afb      	ldrb	r3, [r7, #11]
   83494:	4618      	mov	r0, r3
   83496:	4b0e      	ldr	r3, [pc, #56]	; (834d0 <pll_config_init+0x64>)
   83498:	4798      	blx	r3
   8349a:	4602      	mov	r2, r0
   8349c:	687b      	ldr	r3, [r7, #4]
   8349e:	fbb2 f3f3 	udiv	r3, r2, r3
   834a2:	617b      	str	r3, [r7, #20]
   834a4:	697b      	ldr	r3, [r7, #20]
   834a6:	683a      	ldr	r2, [r7, #0]
   834a8:	fb02 f303 	mul.w	r3, r2, r3
   834ac:	617b      	str	r3, [r7, #20]
   834ae:	683b      	ldr	r3, [r7, #0]
   834b0:	3b01      	subs	r3, #1
   834b2:	041a      	lsls	r2, r3, #16
   834b4:	4b07      	ldr	r3, [pc, #28]	; (834d4 <pll_config_init+0x68>)
   834b6:	4013      	ands	r3, r2
   834b8:	687a      	ldr	r2, [r7, #4]
   834ba:	b2d2      	uxtb	r2, r2
   834bc:	4313      	orrs	r3, r2
   834be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   834c2:	68fb      	ldr	r3, [r7, #12]
   834c4:	601a      	str	r2, [r3, #0]
   834c6:	bf00      	nop
   834c8:	3718      	adds	r7, #24
   834ca:	46bd      	mov	sp, r7
   834cc:	bd80      	pop	{r7, pc}
   834ce:	bf00      	nop
   834d0:	000833cd 	.word	0x000833cd
   834d4:	07ff0000 	.word	0x07ff0000

000834d8 <pll_enable>:
   834d8:	b580      	push	{r7, lr}
   834da:	b082      	sub	sp, #8
   834dc:	af00      	add	r7, sp, #0
   834de:	6078      	str	r0, [r7, #4]
   834e0:	6039      	str	r1, [r7, #0]
   834e2:	683b      	ldr	r3, [r7, #0]
   834e4:	2b00      	cmp	r3, #0
   834e6:	d108      	bne.n	834fa <pll_enable+0x22>
   834e8:	4b09      	ldr	r3, [pc, #36]	; (83510 <pll_enable+0x38>)
   834ea:	4798      	blx	r3
   834ec:	4a09      	ldr	r2, [pc, #36]	; (83514 <pll_enable+0x3c>)
   834ee:	687b      	ldr	r3, [r7, #4]
   834f0:	681b      	ldr	r3, [r3, #0]
   834f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   834f6:	6293      	str	r3, [r2, #40]	; 0x28
   834f8:	e005      	b.n	83506 <pll_enable+0x2e>
   834fa:	4a06      	ldr	r2, [pc, #24]	; (83514 <pll_enable+0x3c>)
   834fc:	687b      	ldr	r3, [r7, #4]
   834fe:	681b      	ldr	r3, [r3, #0]
   83500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83504:	61d3      	str	r3, [r2, #28]
   83506:	bf00      	nop
   83508:	3708      	adds	r7, #8
   8350a:	46bd      	mov	sp, r7
   8350c:	bd80      	pop	{r7, pc}
   8350e:	bf00      	nop
   83510:	00083e45 	.word	0x00083e45
   83514:	400e0600 	.word	0x400e0600

00083518 <pll_is_locked>:
   83518:	b580      	push	{r7, lr}
   8351a:	b082      	sub	sp, #8
   8351c:	af00      	add	r7, sp, #0
   8351e:	6078      	str	r0, [r7, #4]
   83520:	687b      	ldr	r3, [r7, #4]
   83522:	2b00      	cmp	r3, #0
   83524:	d103      	bne.n	8352e <pll_is_locked+0x16>
   83526:	4b05      	ldr	r3, [pc, #20]	; (8353c <pll_is_locked+0x24>)
   83528:	4798      	blx	r3
   8352a:	4603      	mov	r3, r0
   8352c:	e002      	b.n	83534 <pll_is_locked+0x1c>
   8352e:	4b04      	ldr	r3, [pc, #16]	; (83540 <pll_is_locked+0x28>)
   83530:	4798      	blx	r3
   83532:	4603      	mov	r3, r0
   83534:	4618      	mov	r0, r3
   83536:	3708      	adds	r7, #8
   83538:	46bd      	mov	sp, r7
   8353a:	bd80      	pop	{r7, pc}
   8353c:	00083e5d 	.word	0x00083e5d
   83540:	00083e75 	.word	0x00083e75

00083544 <pll_enable_source>:
   83544:	b580      	push	{r7, lr}
   83546:	b082      	sub	sp, #8
   83548:	af00      	add	r7, sp, #0
   8354a:	4603      	mov	r3, r0
   8354c:	71fb      	strb	r3, [r7, #7]
   8354e:	79fb      	ldrb	r3, [r7, #7]
   83550:	3b03      	subs	r3, #3
   83552:	2b04      	cmp	r3, #4
   83554:	d808      	bhi.n	83568 <pll_enable_source+0x24>
   83556:	79fb      	ldrb	r3, [r7, #7]
   83558:	4618      	mov	r0, r3
   8355a:	4b06      	ldr	r3, [pc, #24]	; (83574 <pll_enable_source+0x30>)
   8355c:	4798      	blx	r3
   8355e:	79fb      	ldrb	r3, [r7, #7]
   83560:	4618      	mov	r0, r3
   83562:	4b05      	ldr	r3, [pc, #20]	; (83578 <pll_enable_source+0x34>)
   83564:	4798      	blx	r3
   83566:	e000      	b.n	8356a <pll_enable_source+0x26>
   83568:	bf00      	nop
   8356a:	bf00      	nop
   8356c:	3708      	adds	r7, #8
   8356e:	46bd      	mov	sp, r7
   83570:	bd80      	pop	{r7, pc}
   83572:	bf00      	nop
   83574:	000832d5 	.word	0x000832d5
   83578:	00083441 	.word	0x00083441

0008357c <pll_wait_for_lock>:
   8357c:	b580      	push	{r7, lr}
   8357e:	b082      	sub	sp, #8
   83580:	af00      	add	r7, sp, #0
   83582:	6078      	str	r0, [r7, #4]
   83584:	bf00      	nop
   83586:	6878      	ldr	r0, [r7, #4]
   83588:	4b04      	ldr	r3, [pc, #16]	; (8359c <pll_wait_for_lock+0x20>)
   8358a:	4798      	blx	r3
   8358c:	4603      	mov	r3, r0
   8358e:	2b00      	cmp	r3, #0
   83590:	d0f9      	beq.n	83586 <pll_wait_for_lock+0xa>
   83592:	2300      	movs	r3, #0
   83594:	4618      	mov	r0, r3
   83596:	3708      	adds	r7, #8
   83598:	46bd      	mov	sp, r7
   8359a:	bd80      	pop	{r7, pc}
   8359c:	00083519 	.word	0x00083519

000835a0 <sysclk_get_main_hz>:
   835a0:	b580      	push	{r7, lr}
   835a2:	af00      	add	r7, sp, #0
   835a4:	2006      	movs	r0, #6
   835a6:	4b04      	ldr	r3, [pc, #16]	; (835b8 <sysclk_get_main_hz+0x18>)
   835a8:	4798      	blx	r3
   835aa:	4602      	mov	r2, r0
   835ac:	4613      	mov	r3, r2
   835ae:	00db      	lsls	r3, r3, #3
   835b0:	1a9b      	subs	r3, r3, r2
   835b2:	005b      	lsls	r3, r3, #1
   835b4:	4618      	mov	r0, r3
   835b6:	bd80      	pop	{r7, pc}
   835b8:	000833cd 	.word	0x000833cd

000835bc <sysclk_get_cpu_hz>:
   835bc:	b580      	push	{r7, lr}
   835be:	af00      	add	r7, sp, #0
   835c0:	4b02      	ldr	r3, [pc, #8]	; (835cc <sysclk_get_cpu_hz+0x10>)
   835c2:	4798      	blx	r3
   835c4:	4603      	mov	r3, r0
   835c6:	085b      	lsrs	r3, r3, #1
   835c8:	4618      	mov	r0, r3
   835ca:	bd80      	pop	{r7, pc}
   835cc:	000835a1 	.word	0x000835a1

000835d0 <sysclk_init>:
   835d0:	b590      	push	{r4, r7, lr}
   835d2:	b083      	sub	sp, #12
   835d4:	af00      	add	r7, sp, #0
   835d6:	4b10      	ldr	r3, [pc, #64]	; (83618 <sysclk_init+0x48>)
   835d8:	4798      	blx	r3
   835da:	4603      	mov	r3, r0
   835dc:	4618      	mov	r0, r3
   835de:	4b0f      	ldr	r3, [pc, #60]	; (8361c <sysclk_init+0x4c>)
   835e0:	4798      	blx	r3
   835e2:	2006      	movs	r0, #6
   835e4:	4b0e      	ldr	r3, [pc, #56]	; (83620 <sysclk_init+0x50>)
   835e6:	4798      	blx	r3
   835e8:	1d38      	adds	r0, r7, #4
   835ea:	230e      	movs	r3, #14
   835ec:	2201      	movs	r2, #1
   835ee:	2106      	movs	r1, #6
   835f0:	4c0c      	ldr	r4, [pc, #48]	; (83624 <sysclk_init+0x54>)
   835f2:	47a0      	blx	r4
   835f4:	1d3b      	adds	r3, r7, #4
   835f6:	2100      	movs	r1, #0
   835f8:	4618      	mov	r0, r3
   835fa:	4b0b      	ldr	r3, [pc, #44]	; (83628 <sysclk_init+0x58>)
   835fc:	4798      	blx	r3
   835fe:	2000      	movs	r0, #0
   83600:	4b0a      	ldr	r3, [pc, #40]	; (8362c <sysclk_init+0x5c>)
   83602:	4798      	blx	r3
   83604:	2010      	movs	r0, #16
   83606:	4b0a      	ldr	r3, [pc, #40]	; (83630 <sysclk_init+0x60>)
   83608:	4798      	blx	r3
   8360a:	4b0a      	ldr	r3, [pc, #40]	; (83634 <sysclk_init+0x64>)
   8360c:	4798      	blx	r3
   8360e:	bf00      	nop
   83610:	370c      	adds	r7, #12
   83612:	46bd      	mov	sp, r7
   83614:	bd90      	pop	{r4, r7, pc}
   83616:	bf00      	nop
   83618:	000835bd 	.word	0x000835bd
   8361c:	00084179 	.word	0x00084179
   83620:	00083545 	.word	0x00083545
   83624:	0008346d 	.word	0x0008346d
   83628:	000834d9 	.word	0x000834d9
   8362c:	0008357d 	.word	0x0008357d
   83630:	00083c29 	.word	0x00083c29
   83634:	00083ff5 	.word	0x00083ff5

00083638 <sysclk_enable_peripheral_clock>:
   83638:	b580      	push	{r7, lr}
   8363a:	b082      	sub	sp, #8
   8363c:	af00      	add	r7, sp, #0
   8363e:	6078      	str	r0, [r7, #4]
   83640:	6878      	ldr	r0, [r7, #4]
   83642:	4b03      	ldr	r3, [pc, #12]	; (83650 <sysclk_enable_peripheral_clock+0x18>)
   83644:	4798      	blx	r3
   83646:	bf00      	nop
   83648:	3708      	adds	r7, #8
   8364a:	46bd      	mov	sp, r7
   8364c:	bd80      	pop	{r7, pc}
   8364e:	bf00      	nop
   83650:	00083e8d 	.word	0x00083e8d

00083654 <ioport_init>:
   83654:	b580      	push	{r7, lr}
   83656:	af00      	add	r7, sp, #0
   83658:	200b      	movs	r0, #11
   8365a:	4b06      	ldr	r3, [pc, #24]	; (83674 <ioport_init+0x20>)
   8365c:	4798      	blx	r3
   8365e:	200c      	movs	r0, #12
   83660:	4b04      	ldr	r3, [pc, #16]	; (83674 <ioport_init+0x20>)
   83662:	4798      	blx	r3
   83664:	200d      	movs	r0, #13
   83666:	4b03      	ldr	r3, [pc, #12]	; (83674 <ioport_init+0x20>)
   83668:	4798      	blx	r3
   8366a:	200e      	movs	r0, #14
   8366c:	4b01      	ldr	r3, [pc, #4]	; (83674 <ioport_init+0x20>)
   8366e:	4798      	blx	r3
   83670:	bf00      	nop
   83672:	bd80      	pop	{r7, pc}
   83674:	00083639 	.word	0x00083639

00083678 <board_init>:
   83678:	b580      	push	{r7, lr}
   8367a:	af00      	add	r7, sp, #0
   8367c:	4b21      	ldr	r3, [pc, #132]	; (83704 <board_init+0x8c>)
   8367e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83682:	605a      	str	r2, [r3, #4]
   83684:	4b20      	ldr	r3, [pc, #128]	; (83708 <board_init+0x90>)
   83686:	4798      	blx	r3
   83688:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8368c:	203b      	movs	r0, #59	; 0x3b
   8368e:	4b1f      	ldr	r3, [pc, #124]	; (8370c <board_init+0x94>)
   83690:	4798      	blx	r3
   83692:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83696:	2055      	movs	r0, #85	; 0x55
   83698:	4b1c      	ldr	r3, [pc, #112]	; (8370c <board_init+0x94>)
   8369a:	4798      	blx	r3
   8369c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   836a0:	2056      	movs	r0, #86	; 0x56
   836a2:	4b1a      	ldr	r3, [pc, #104]	; (8370c <board_init+0x94>)
   836a4:	4798      	blx	r3
   836a6:	491a      	ldr	r1, [pc, #104]	; (83710 <board_init+0x98>)
   836a8:	2068      	movs	r0, #104	; 0x68
   836aa:	4b18      	ldr	r3, [pc, #96]	; (8370c <board_init+0x94>)
   836ac:	4798      	blx	r3
   836ae:	4919      	ldr	r1, [pc, #100]	; (83714 <board_init+0x9c>)
   836b0:	205c      	movs	r0, #92	; 0x5c
   836b2:	4b16      	ldr	r3, [pc, #88]	; (8370c <board_init+0x94>)
   836b4:	4798      	blx	r3
   836b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   836ba:	f44f 7140 	mov.w	r1, #768	; 0x300
   836be:	4816      	ldr	r0, [pc, #88]	; (83718 <board_init+0xa0>)
   836c0:	4b16      	ldr	r3, [pc, #88]	; (8371c <board_init+0xa4>)
   836c2:	4798      	blx	r3
   836c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836c8:	2019      	movs	r0, #25
   836ca:	4b10      	ldr	r3, [pc, #64]	; (8370c <board_init+0x94>)
   836cc:	4798      	blx	r3
   836ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836d2:	201a      	movs	r0, #26
   836d4:	4b0d      	ldr	r3, [pc, #52]	; (8370c <board_init+0x94>)
   836d6:	4798      	blx	r3
   836d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836dc:	201b      	movs	r0, #27
   836de:	4b0b      	ldr	r3, [pc, #44]	; (8370c <board_init+0x94>)
   836e0:	4798      	blx	r3
   836e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836e6:	201c      	movs	r0, #28
   836e8:	4b08      	ldr	r3, [pc, #32]	; (8370c <board_init+0x94>)
   836ea:	4798      	blx	r3
   836ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836f0:	202b      	movs	r0, #43	; 0x2b
   836f2:	4b06      	ldr	r3, [pc, #24]	; (8370c <board_init+0x94>)
   836f4:	4798      	blx	r3
   836f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   836fa:	202a      	movs	r0, #42	; 0x2a
   836fc:	4b03      	ldr	r3, [pc, #12]	; (8370c <board_init+0x94>)
   836fe:	4798      	blx	r3
   83700:	bf00      	nop
   83702:	bd80      	pop	{r7, pc}
   83704:	400e1a50 	.word	0x400e1a50
   83708:	00083655 	.word	0x00083655
   8370c:	000838fd 	.word	0x000838fd
   83710:	28000079 	.word	0x28000079
   83714:	28000001 	.word	0x28000001
   83718:	400e0e00 	.word	0x400e0e00
   8371c:	00083a39 	.word	0x00083a39

00083720 <pio_pull_up>:
   83720:	b480      	push	{r7}
   83722:	b085      	sub	sp, #20
   83724:	af00      	add	r7, sp, #0
   83726:	60f8      	str	r0, [r7, #12]
   83728:	60b9      	str	r1, [r7, #8]
   8372a:	607a      	str	r2, [r7, #4]
   8372c:	687b      	ldr	r3, [r7, #4]
   8372e:	2b00      	cmp	r3, #0
   83730:	d003      	beq.n	8373a <pio_pull_up+0x1a>
   83732:	68fb      	ldr	r3, [r7, #12]
   83734:	68ba      	ldr	r2, [r7, #8]
   83736:	665a      	str	r2, [r3, #100]	; 0x64
   83738:	e002      	b.n	83740 <pio_pull_up+0x20>
   8373a:	68fb      	ldr	r3, [r7, #12]
   8373c:	68ba      	ldr	r2, [r7, #8]
   8373e:	661a      	str	r2, [r3, #96]	; 0x60
   83740:	bf00      	nop
   83742:	3714      	adds	r7, #20
   83744:	46bd      	mov	sp, r7
   83746:	bc80      	pop	{r7}
   83748:	4770      	bx	lr
   8374a:	bf00      	nop

0008374c <pio_set_peripheral>:
   8374c:	b480      	push	{r7}
   8374e:	b087      	sub	sp, #28
   83750:	af00      	add	r7, sp, #0
   83752:	60f8      	str	r0, [r7, #12]
   83754:	60b9      	str	r1, [r7, #8]
   83756:	607a      	str	r2, [r7, #4]
   83758:	68fb      	ldr	r3, [r7, #12]
   8375a:	687a      	ldr	r2, [r7, #4]
   8375c:	645a      	str	r2, [r3, #68]	; 0x44
   8375e:	68bb      	ldr	r3, [r7, #8]
   83760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83764:	d01f      	beq.n	837a6 <pio_set_peripheral+0x5a>
   83766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8376a:	d805      	bhi.n	83778 <pio_set_peripheral+0x2c>
   8376c:	2b00      	cmp	r3, #0
   8376e:	d027      	beq.n	837c0 <pio_set_peripheral+0x74>
   83770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83774:	d00a      	beq.n	8378c <pio_set_peripheral+0x40>
   83776:	e01f      	b.n	837b8 <pio_set_peripheral+0x6c>
   83778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8377c:	d020      	beq.n	837c0 <pio_set_peripheral+0x74>
   8377e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83782:	d01d      	beq.n	837c0 <pio_set_peripheral+0x74>
   83784:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83788:	d01a      	beq.n	837c0 <pio_set_peripheral+0x74>
   8378a:	e015      	b.n	837b8 <pio_set_peripheral+0x6c>
   8378c:	68fb      	ldr	r3, [r7, #12]
   8378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83790:	617b      	str	r3, [r7, #20]
   83792:	68fb      	ldr	r3, [r7, #12]
   83794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83796:	687b      	ldr	r3, [r7, #4]
   83798:	43d9      	mvns	r1, r3
   8379a:	697b      	ldr	r3, [r7, #20]
   8379c:	400b      	ands	r3, r1
   8379e:	401a      	ands	r2, r3
   837a0:	68fb      	ldr	r3, [r7, #12]
   837a2:	671a      	str	r2, [r3, #112]	; 0x70
   837a4:	e008      	b.n	837b8 <pio_set_peripheral+0x6c>
   837a6:	68fb      	ldr	r3, [r7, #12]
   837a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   837aa:	617b      	str	r3, [r7, #20]
   837ac:	687a      	ldr	r2, [r7, #4]
   837ae:	697b      	ldr	r3, [r7, #20]
   837b0:	431a      	orrs	r2, r3
   837b2:	68fb      	ldr	r3, [r7, #12]
   837b4:	671a      	str	r2, [r3, #112]	; 0x70
   837b6:	bf00      	nop
   837b8:	68fb      	ldr	r3, [r7, #12]
   837ba:	687a      	ldr	r2, [r7, #4]
   837bc:	605a      	str	r2, [r3, #4]
   837be:	e000      	b.n	837c2 <pio_set_peripheral+0x76>
   837c0:	bf00      	nop
   837c2:	371c      	adds	r7, #28
   837c4:	46bd      	mov	sp, r7
   837c6:	bc80      	pop	{r7}
   837c8:	4770      	bx	lr
   837ca:	bf00      	nop

000837cc <pio_set_input>:
   837cc:	b580      	push	{r7, lr}
   837ce:	b084      	sub	sp, #16
   837d0:	af00      	add	r7, sp, #0
   837d2:	60f8      	str	r0, [r7, #12]
   837d4:	60b9      	str	r1, [r7, #8]
   837d6:	607a      	str	r2, [r7, #4]
   837d8:	68b9      	ldr	r1, [r7, #8]
   837da:	68f8      	ldr	r0, [r7, #12]
   837dc:	4b19      	ldr	r3, [pc, #100]	; (83844 <pio_set_input+0x78>)
   837de:	4798      	blx	r3
   837e0:	687b      	ldr	r3, [r7, #4]
   837e2:	f003 0301 	and.w	r3, r3, #1
   837e6:	461a      	mov	r2, r3
   837e8:	68b9      	ldr	r1, [r7, #8]
   837ea:	68f8      	ldr	r0, [r7, #12]
   837ec:	4b16      	ldr	r3, [pc, #88]	; (83848 <pio_set_input+0x7c>)
   837ee:	4798      	blx	r3
   837f0:	687b      	ldr	r3, [r7, #4]
   837f2:	f003 030a 	and.w	r3, r3, #10
   837f6:	2b00      	cmp	r3, #0
   837f8:	d003      	beq.n	83802 <pio_set_input+0x36>
   837fa:	68fb      	ldr	r3, [r7, #12]
   837fc:	68ba      	ldr	r2, [r7, #8]
   837fe:	621a      	str	r2, [r3, #32]
   83800:	e002      	b.n	83808 <pio_set_input+0x3c>
   83802:	68fb      	ldr	r3, [r7, #12]
   83804:	68ba      	ldr	r2, [r7, #8]
   83806:	625a      	str	r2, [r3, #36]	; 0x24
   83808:	687b      	ldr	r3, [r7, #4]
   8380a:	f003 0302 	and.w	r3, r3, #2
   8380e:	2b00      	cmp	r3, #0
   83810:	d004      	beq.n	8381c <pio_set_input+0x50>
   83812:	68fb      	ldr	r3, [r7, #12]
   83814:	68ba      	ldr	r2, [r7, #8]
   83816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8381a:	e008      	b.n	8382e <pio_set_input+0x62>
   8381c:	687b      	ldr	r3, [r7, #4]
   8381e:	f003 0308 	and.w	r3, r3, #8
   83822:	2b00      	cmp	r3, #0
   83824:	d003      	beq.n	8382e <pio_set_input+0x62>
   83826:	68fb      	ldr	r3, [r7, #12]
   83828:	68ba      	ldr	r2, [r7, #8]
   8382a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8382e:	68fb      	ldr	r3, [r7, #12]
   83830:	68ba      	ldr	r2, [r7, #8]
   83832:	615a      	str	r2, [r3, #20]
   83834:	68fb      	ldr	r3, [r7, #12]
   83836:	68ba      	ldr	r2, [r7, #8]
   83838:	601a      	str	r2, [r3, #0]
   8383a:	bf00      	nop
   8383c:	3710      	adds	r7, #16
   8383e:	46bd      	mov	sp, r7
   83840:	bd80      	pop	{r7, pc}
   83842:	bf00      	nop
   83844:	000838b1 	.word	0x000838b1
   83848:	00083721 	.word	0x00083721

0008384c <pio_set_output>:
   8384c:	b580      	push	{r7, lr}
   8384e:	b084      	sub	sp, #16
   83850:	af00      	add	r7, sp, #0
   83852:	60f8      	str	r0, [r7, #12]
   83854:	60b9      	str	r1, [r7, #8]
   83856:	607a      	str	r2, [r7, #4]
   83858:	603b      	str	r3, [r7, #0]
   8385a:	68b9      	ldr	r1, [r7, #8]
   8385c:	68f8      	ldr	r0, [r7, #12]
   8385e:	4b12      	ldr	r3, [pc, #72]	; (838a8 <pio_set_output+0x5c>)
   83860:	4798      	blx	r3
   83862:	69ba      	ldr	r2, [r7, #24]
   83864:	68b9      	ldr	r1, [r7, #8]
   83866:	68f8      	ldr	r0, [r7, #12]
   83868:	4b10      	ldr	r3, [pc, #64]	; (838ac <pio_set_output+0x60>)
   8386a:	4798      	blx	r3
   8386c:	683b      	ldr	r3, [r7, #0]
   8386e:	2b00      	cmp	r3, #0
   83870:	d003      	beq.n	8387a <pio_set_output+0x2e>
   83872:	68fb      	ldr	r3, [r7, #12]
   83874:	68ba      	ldr	r2, [r7, #8]
   83876:	651a      	str	r2, [r3, #80]	; 0x50
   83878:	e002      	b.n	83880 <pio_set_output+0x34>
   8387a:	68fb      	ldr	r3, [r7, #12]
   8387c:	68ba      	ldr	r2, [r7, #8]
   8387e:	655a      	str	r2, [r3, #84]	; 0x54
   83880:	687b      	ldr	r3, [r7, #4]
   83882:	2b00      	cmp	r3, #0
   83884:	d003      	beq.n	8388e <pio_set_output+0x42>
   83886:	68fb      	ldr	r3, [r7, #12]
   83888:	68ba      	ldr	r2, [r7, #8]
   8388a:	631a      	str	r2, [r3, #48]	; 0x30
   8388c:	e002      	b.n	83894 <pio_set_output+0x48>
   8388e:	68fb      	ldr	r3, [r7, #12]
   83890:	68ba      	ldr	r2, [r7, #8]
   83892:	635a      	str	r2, [r3, #52]	; 0x34
   83894:	68fb      	ldr	r3, [r7, #12]
   83896:	68ba      	ldr	r2, [r7, #8]
   83898:	611a      	str	r2, [r3, #16]
   8389a:	68fb      	ldr	r3, [r7, #12]
   8389c:	68ba      	ldr	r2, [r7, #8]
   8389e:	601a      	str	r2, [r3, #0]
   838a0:	bf00      	nop
   838a2:	3710      	adds	r7, #16
   838a4:	46bd      	mov	sp, r7
   838a6:	bd80      	pop	{r7, pc}
   838a8:	000838b1 	.word	0x000838b1
   838ac:	00083721 	.word	0x00083721

000838b0 <pio_disable_interrupt>:
   838b0:	b480      	push	{r7}
   838b2:	b083      	sub	sp, #12
   838b4:	af00      	add	r7, sp, #0
   838b6:	6078      	str	r0, [r7, #4]
   838b8:	6039      	str	r1, [r7, #0]
   838ba:	687b      	ldr	r3, [r7, #4]
   838bc:	683a      	ldr	r2, [r7, #0]
   838be:	645a      	str	r2, [r3, #68]	; 0x44
   838c0:	bf00      	nop
   838c2:	370c      	adds	r7, #12
   838c4:	46bd      	mov	sp, r7
   838c6:	bc80      	pop	{r7}
   838c8:	4770      	bx	lr
   838ca:	bf00      	nop

000838cc <pio_get_interrupt_status>:
   838cc:	b480      	push	{r7}
   838ce:	b083      	sub	sp, #12
   838d0:	af00      	add	r7, sp, #0
   838d2:	6078      	str	r0, [r7, #4]
   838d4:	687b      	ldr	r3, [r7, #4]
   838d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   838d8:	4618      	mov	r0, r3
   838da:	370c      	adds	r7, #12
   838dc:	46bd      	mov	sp, r7
   838de:	bc80      	pop	{r7}
   838e0:	4770      	bx	lr
   838e2:	bf00      	nop

000838e4 <pio_get_interrupt_mask>:
   838e4:	b480      	push	{r7}
   838e6:	b083      	sub	sp, #12
   838e8:	af00      	add	r7, sp, #0
   838ea:	6078      	str	r0, [r7, #4]
   838ec:	687b      	ldr	r3, [r7, #4]
   838ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   838f0:	4618      	mov	r0, r3
   838f2:	370c      	adds	r7, #12
   838f4:	46bd      	mov	sp, r7
   838f6:	bc80      	pop	{r7}
   838f8:	4770      	bx	lr
   838fa:	bf00      	nop

000838fc <pio_configure_pin>:
   838fc:	b590      	push	{r4, r7, lr}
   838fe:	b087      	sub	sp, #28
   83900:	af02      	add	r7, sp, #8
   83902:	6078      	str	r0, [r7, #4]
   83904:	6039      	str	r1, [r7, #0]
   83906:	687b      	ldr	r3, [r7, #4]
   83908:	095b      	lsrs	r3, r3, #5
   8390a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8390e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83912:	025b      	lsls	r3, r3, #9
   83914:	60fb      	str	r3, [r7, #12]
   83916:	683b      	ldr	r3, [r7, #0]
   83918:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8391c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83920:	d046      	beq.n	839b0 <pio_configure_pin+0xb4>
   83922:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83926:	d806      	bhi.n	83936 <pio_configure_pin+0x3a>
   83928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8392c:	d00a      	beq.n	83944 <pio_configure_pin+0x48>
   8392e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83932:	d022      	beq.n	8397a <pio_configure_pin+0x7e>
   83934:	e070      	b.n	83a18 <pio_configure_pin+0x11c>
   83936:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8393a:	d045      	beq.n	839c8 <pio_configure_pin+0xcc>
   8393c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83940:	d042      	beq.n	839c8 <pio_configure_pin+0xcc>
   83942:	e069      	b.n	83a18 <pio_configure_pin+0x11c>
   83944:	687b      	ldr	r3, [r7, #4]
   83946:	f003 031f 	and.w	r3, r3, #31
   8394a:	2201      	movs	r2, #1
   8394c:	fa02 f303 	lsl.w	r3, r2, r3
   83950:	461a      	mov	r2, r3
   83952:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83956:	68f8      	ldr	r0, [r7, #12]
   83958:	4b33      	ldr	r3, [pc, #204]	; (83a28 <pio_configure_pin+0x12c>)
   8395a:	4798      	blx	r3
   8395c:	687b      	ldr	r3, [r7, #4]
   8395e:	f003 031f 	and.w	r3, r3, #31
   83962:	2201      	movs	r2, #1
   83964:	fa02 f303 	lsl.w	r3, r2, r3
   83968:	4619      	mov	r1, r3
   8396a:	683b      	ldr	r3, [r7, #0]
   8396c:	f003 0301 	and.w	r3, r3, #1
   83970:	461a      	mov	r2, r3
   83972:	68f8      	ldr	r0, [r7, #12]
   83974:	4b2d      	ldr	r3, [pc, #180]	; (83a2c <pio_configure_pin+0x130>)
   83976:	4798      	blx	r3
   83978:	e050      	b.n	83a1c <pio_configure_pin+0x120>
   8397a:	687b      	ldr	r3, [r7, #4]
   8397c:	f003 031f 	and.w	r3, r3, #31
   83980:	2201      	movs	r2, #1
   83982:	fa02 f303 	lsl.w	r3, r2, r3
   83986:	461a      	mov	r2, r3
   83988:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8398c:	68f8      	ldr	r0, [r7, #12]
   8398e:	4b26      	ldr	r3, [pc, #152]	; (83a28 <pio_configure_pin+0x12c>)
   83990:	4798      	blx	r3
   83992:	687b      	ldr	r3, [r7, #4]
   83994:	f003 031f 	and.w	r3, r3, #31
   83998:	2201      	movs	r2, #1
   8399a:	fa02 f303 	lsl.w	r3, r2, r3
   8399e:	4619      	mov	r1, r3
   839a0:	683b      	ldr	r3, [r7, #0]
   839a2:	f003 0301 	and.w	r3, r3, #1
   839a6:	461a      	mov	r2, r3
   839a8:	68f8      	ldr	r0, [r7, #12]
   839aa:	4b20      	ldr	r3, [pc, #128]	; (83a2c <pio_configure_pin+0x130>)
   839ac:	4798      	blx	r3
   839ae:	e035      	b.n	83a1c <pio_configure_pin+0x120>
   839b0:	687b      	ldr	r3, [r7, #4]
   839b2:	f003 031f 	and.w	r3, r3, #31
   839b6:	2201      	movs	r2, #1
   839b8:	fa02 f303 	lsl.w	r3, r2, r3
   839bc:	683a      	ldr	r2, [r7, #0]
   839be:	4619      	mov	r1, r3
   839c0:	68f8      	ldr	r0, [r7, #12]
   839c2:	4b1b      	ldr	r3, [pc, #108]	; (83a30 <pio_configure_pin+0x134>)
   839c4:	4798      	blx	r3
   839c6:	e029      	b.n	83a1c <pio_configure_pin+0x120>
   839c8:	687b      	ldr	r3, [r7, #4]
   839ca:	f003 031f 	and.w	r3, r3, #31
   839ce:	2201      	movs	r2, #1
   839d0:	fa02 f303 	lsl.w	r3, r2, r3
   839d4:	4619      	mov	r1, r3
   839d6:	683b      	ldr	r3, [r7, #0]
   839d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   839dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   839e0:	bf0c      	ite	eq
   839e2:	2301      	moveq	r3, #1
   839e4:	2300      	movne	r3, #0
   839e6:	b2db      	uxtb	r3, r3
   839e8:	461a      	mov	r2, r3
   839ea:	683b      	ldr	r3, [r7, #0]
   839ec:	f003 0304 	and.w	r3, r3, #4
   839f0:	2b00      	cmp	r3, #0
   839f2:	bf14      	ite	ne
   839f4:	2301      	movne	r3, #1
   839f6:	2300      	moveq	r3, #0
   839f8:	b2db      	uxtb	r3, r3
   839fa:	4618      	mov	r0, r3
   839fc:	683b      	ldr	r3, [r7, #0]
   839fe:	f003 0301 	and.w	r3, r3, #1
   83a02:	2b00      	cmp	r3, #0
   83a04:	bf14      	ite	ne
   83a06:	2301      	movne	r3, #1
   83a08:	2300      	moveq	r3, #0
   83a0a:	b2db      	uxtb	r3, r3
   83a0c:	9300      	str	r3, [sp, #0]
   83a0e:	4603      	mov	r3, r0
   83a10:	68f8      	ldr	r0, [r7, #12]
   83a12:	4c08      	ldr	r4, [pc, #32]	; (83a34 <pio_configure_pin+0x138>)
   83a14:	47a0      	blx	r4
   83a16:	e001      	b.n	83a1c <pio_configure_pin+0x120>
   83a18:	2300      	movs	r3, #0
   83a1a:	e000      	b.n	83a1e <pio_configure_pin+0x122>
   83a1c:	2301      	movs	r3, #1
   83a1e:	4618      	mov	r0, r3
   83a20:	3714      	adds	r7, #20
   83a22:	46bd      	mov	sp, r7
   83a24:	bd90      	pop	{r4, r7, pc}
   83a26:	bf00      	nop
   83a28:	0008374d 	.word	0x0008374d
   83a2c:	00083721 	.word	0x00083721
   83a30:	000837cd 	.word	0x000837cd
   83a34:	0008384d 	.word	0x0008384d

00083a38 <pio_configure_pin_group>:
   83a38:	b590      	push	{r4, r7, lr}
   83a3a:	b087      	sub	sp, #28
   83a3c:	af02      	add	r7, sp, #8
   83a3e:	60f8      	str	r0, [r7, #12]
   83a40:	60b9      	str	r1, [r7, #8]
   83a42:	607a      	str	r2, [r7, #4]
   83a44:	687b      	ldr	r3, [r7, #4]
   83a46:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83a4a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83a4e:	d02e      	beq.n	83aae <pio_configure_pin_group+0x76>
   83a50:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83a54:	d806      	bhi.n	83a64 <pio_configure_pin_group+0x2c>
   83a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83a5a:	d00a      	beq.n	83a72 <pio_configure_pin_group+0x3a>
   83a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83a60:	d016      	beq.n	83a90 <pio_configure_pin_group+0x58>
   83a62:	e04c      	b.n	83afe <pio_configure_pin_group+0xc6>
   83a64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83a68:	d027      	beq.n	83aba <pio_configure_pin_group+0x82>
   83a6a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83a6e:	d024      	beq.n	83aba <pio_configure_pin_group+0x82>
   83a70:	e045      	b.n	83afe <pio_configure_pin_group+0xc6>
   83a72:	68ba      	ldr	r2, [r7, #8]
   83a74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83a78:	68f8      	ldr	r0, [r7, #12]
   83a7a:	4b24      	ldr	r3, [pc, #144]	; (83b0c <pio_configure_pin_group+0xd4>)
   83a7c:	4798      	blx	r3
   83a7e:	687b      	ldr	r3, [r7, #4]
   83a80:	f003 0301 	and.w	r3, r3, #1
   83a84:	461a      	mov	r2, r3
   83a86:	68b9      	ldr	r1, [r7, #8]
   83a88:	68f8      	ldr	r0, [r7, #12]
   83a8a:	4b21      	ldr	r3, [pc, #132]	; (83b10 <pio_configure_pin_group+0xd8>)
   83a8c:	4798      	blx	r3
   83a8e:	e038      	b.n	83b02 <pio_configure_pin_group+0xca>
   83a90:	68ba      	ldr	r2, [r7, #8]
   83a92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83a96:	68f8      	ldr	r0, [r7, #12]
   83a98:	4b1c      	ldr	r3, [pc, #112]	; (83b0c <pio_configure_pin_group+0xd4>)
   83a9a:	4798      	blx	r3
   83a9c:	687b      	ldr	r3, [r7, #4]
   83a9e:	f003 0301 	and.w	r3, r3, #1
   83aa2:	461a      	mov	r2, r3
   83aa4:	68b9      	ldr	r1, [r7, #8]
   83aa6:	68f8      	ldr	r0, [r7, #12]
   83aa8:	4b19      	ldr	r3, [pc, #100]	; (83b10 <pio_configure_pin_group+0xd8>)
   83aaa:	4798      	blx	r3
   83aac:	e029      	b.n	83b02 <pio_configure_pin_group+0xca>
   83aae:	687a      	ldr	r2, [r7, #4]
   83ab0:	68b9      	ldr	r1, [r7, #8]
   83ab2:	68f8      	ldr	r0, [r7, #12]
   83ab4:	4b17      	ldr	r3, [pc, #92]	; (83b14 <pio_configure_pin_group+0xdc>)
   83ab6:	4798      	blx	r3
   83ab8:	e023      	b.n	83b02 <pio_configure_pin_group+0xca>
   83aba:	687b      	ldr	r3, [r7, #4]
   83abc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   83ac0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83ac4:	bf0c      	ite	eq
   83ac6:	2301      	moveq	r3, #1
   83ac8:	2300      	movne	r3, #0
   83aca:	b2db      	uxtb	r3, r3
   83acc:	461a      	mov	r2, r3
   83ace:	687b      	ldr	r3, [r7, #4]
   83ad0:	f003 0304 	and.w	r3, r3, #4
   83ad4:	2b00      	cmp	r3, #0
   83ad6:	bf14      	ite	ne
   83ad8:	2301      	movne	r3, #1
   83ada:	2300      	moveq	r3, #0
   83adc:	b2db      	uxtb	r3, r3
   83ade:	4619      	mov	r1, r3
   83ae0:	687b      	ldr	r3, [r7, #4]
   83ae2:	f003 0301 	and.w	r3, r3, #1
   83ae6:	2b00      	cmp	r3, #0
   83ae8:	bf14      	ite	ne
   83aea:	2301      	movne	r3, #1
   83aec:	2300      	moveq	r3, #0
   83aee:	b2db      	uxtb	r3, r3
   83af0:	9300      	str	r3, [sp, #0]
   83af2:	460b      	mov	r3, r1
   83af4:	68b9      	ldr	r1, [r7, #8]
   83af6:	68f8      	ldr	r0, [r7, #12]
   83af8:	4c07      	ldr	r4, [pc, #28]	; (83b18 <pio_configure_pin_group+0xe0>)
   83afa:	47a0      	blx	r4
   83afc:	e001      	b.n	83b02 <pio_configure_pin_group+0xca>
   83afe:	2300      	movs	r3, #0
   83b00:	e000      	b.n	83b04 <pio_configure_pin_group+0xcc>
   83b02:	2301      	movs	r3, #1
   83b04:	4618      	mov	r0, r3
   83b06:	3714      	adds	r7, #20
   83b08:	46bd      	mov	sp, r7
   83b0a:	bd90      	pop	{r4, r7, pc}
   83b0c:	0008374d 	.word	0x0008374d
   83b10:	00083721 	.word	0x00083721
   83b14:	000837cd 	.word	0x000837cd
   83b18:	0008384d 	.word	0x0008384d

00083b1c <pio_handler_process>:
   83b1c:	b580      	push	{r7, lr}
   83b1e:	b084      	sub	sp, #16
   83b20:	af00      	add	r7, sp, #0
   83b22:	6078      	str	r0, [r7, #4]
   83b24:	6039      	str	r1, [r7, #0]
   83b26:	6878      	ldr	r0, [r7, #4]
   83b28:	4b24      	ldr	r3, [pc, #144]	; (83bbc <pio_handler_process+0xa0>)
   83b2a:	4798      	blx	r3
   83b2c:	60f8      	str	r0, [r7, #12]
   83b2e:	6878      	ldr	r0, [r7, #4]
   83b30:	4b23      	ldr	r3, [pc, #140]	; (83bc0 <pio_handler_process+0xa4>)
   83b32:	4798      	blx	r3
   83b34:	4602      	mov	r2, r0
   83b36:	68fb      	ldr	r3, [r7, #12]
   83b38:	4013      	ands	r3, r2
   83b3a:	60fb      	str	r3, [r7, #12]
   83b3c:	68fb      	ldr	r3, [r7, #12]
   83b3e:	2b00      	cmp	r3, #0
   83b40:	d037      	beq.n	83bb2 <pio_handler_process+0x96>
   83b42:	2300      	movs	r3, #0
   83b44:	60bb      	str	r3, [r7, #8]
   83b46:	e031      	b.n	83bac <pio_handler_process+0x90>
   83b48:	4a1e      	ldr	r2, [pc, #120]	; (83bc4 <pio_handler_process+0xa8>)
   83b4a:	68bb      	ldr	r3, [r7, #8]
   83b4c:	011b      	lsls	r3, r3, #4
   83b4e:	4413      	add	r3, r2
   83b50:	681a      	ldr	r2, [r3, #0]
   83b52:	683b      	ldr	r3, [r7, #0]
   83b54:	429a      	cmp	r2, r3
   83b56:	d126      	bne.n	83ba6 <pio_handler_process+0x8a>
   83b58:	4a1a      	ldr	r2, [pc, #104]	; (83bc4 <pio_handler_process+0xa8>)
   83b5a:	68bb      	ldr	r3, [r7, #8]
   83b5c:	011b      	lsls	r3, r3, #4
   83b5e:	4413      	add	r3, r2
   83b60:	3304      	adds	r3, #4
   83b62:	681a      	ldr	r2, [r3, #0]
   83b64:	68fb      	ldr	r3, [r7, #12]
   83b66:	4013      	ands	r3, r2
   83b68:	2b00      	cmp	r3, #0
   83b6a:	d01c      	beq.n	83ba6 <pio_handler_process+0x8a>
   83b6c:	4a15      	ldr	r2, [pc, #84]	; (83bc4 <pio_handler_process+0xa8>)
   83b6e:	68bb      	ldr	r3, [r7, #8]
   83b70:	011b      	lsls	r3, r3, #4
   83b72:	4413      	add	r3, r2
   83b74:	330c      	adds	r3, #12
   83b76:	681b      	ldr	r3, [r3, #0]
   83b78:	4912      	ldr	r1, [pc, #72]	; (83bc4 <pio_handler_process+0xa8>)
   83b7a:	68ba      	ldr	r2, [r7, #8]
   83b7c:	0112      	lsls	r2, r2, #4
   83b7e:	440a      	add	r2, r1
   83b80:	6810      	ldr	r0, [r2, #0]
   83b82:	4910      	ldr	r1, [pc, #64]	; (83bc4 <pio_handler_process+0xa8>)
   83b84:	68ba      	ldr	r2, [r7, #8]
   83b86:	0112      	lsls	r2, r2, #4
   83b88:	440a      	add	r2, r1
   83b8a:	3204      	adds	r2, #4
   83b8c:	6812      	ldr	r2, [r2, #0]
   83b8e:	4611      	mov	r1, r2
   83b90:	4798      	blx	r3
   83b92:	4a0c      	ldr	r2, [pc, #48]	; (83bc4 <pio_handler_process+0xa8>)
   83b94:	68bb      	ldr	r3, [r7, #8]
   83b96:	011b      	lsls	r3, r3, #4
   83b98:	4413      	add	r3, r2
   83b9a:	3304      	adds	r3, #4
   83b9c:	681b      	ldr	r3, [r3, #0]
   83b9e:	43db      	mvns	r3, r3
   83ba0:	68fa      	ldr	r2, [r7, #12]
   83ba2:	4013      	ands	r3, r2
   83ba4:	60fb      	str	r3, [r7, #12]
   83ba6:	68bb      	ldr	r3, [r7, #8]
   83ba8:	3301      	adds	r3, #1
   83baa:	60bb      	str	r3, [r7, #8]
   83bac:	68fb      	ldr	r3, [r7, #12]
   83bae:	2b00      	cmp	r3, #0
   83bb0:	d1ca      	bne.n	83b48 <pio_handler_process+0x2c>
   83bb2:	bf00      	nop
   83bb4:	3710      	adds	r7, #16
   83bb6:	46bd      	mov	sp, r7
   83bb8:	bd80      	pop	{r7, pc}
   83bba:	bf00      	nop
   83bbc:	000838cd 	.word	0x000838cd
   83bc0:	000838e5 	.word	0x000838e5
   83bc4:	20070988 	.word	0x20070988

00083bc8 <PIOA_Handler>:
   83bc8:	b580      	push	{r7, lr}
   83bca:	af00      	add	r7, sp, #0
   83bcc:	210b      	movs	r1, #11
   83bce:	4802      	ldr	r0, [pc, #8]	; (83bd8 <PIOA_Handler+0x10>)
   83bd0:	4b02      	ldr	r3, [pc, #8]	; (83bdc <PIOA_Handler+0x14>)
   83bd2:	4798      	blx	r3
   83bd4:	bf00      	nop
   83bd6:	bd80      	pop	{r7, pc}
   83bd8:	400e0e00 	.word	0x400e0e00
   83bdc:	00083b1d 	.word	0x00083b1d

00083be0 <PIOB_Handler>:
   83be0:	b580      	push	{r7, lr}
   83be2:	af00      	add	r7, sp, #0
   83be4:	210c      	movs	r1, #12
   83be6:	4802      	ldr	r0, [pc, #8]	; (83bf0 <PIOB_Handler+0x10>)
   83be8:	4b02      	ldr	r3, [pc, #8]	; (83bf4 <PIOB_Handler+0x14>)
   83bea:	4798      	blx	r3
   83bec:	bf00      	nop
   83bee:	bd80      	pop	{r7, pc}
   83bf0:	400e1000 	.word	0x400e1000
   83bf4:	00083b1d 	.word	0x00083b1d

00083bf8 <PIOC_Handler>:
   83bf8:	b580      	push	{r7, lr}
   83bfa:	af00      	add	r7, sp, #0
   83bfc:	210d      	movs	r1, #13
   83bfe:	4802      	ldr	r0, [pc, #8]	; (83c08 <PIOC_Handler+0x10>)
   83c00:	4b02      	ldr	r3, [pc, #8]	; (83c0c <PIOC_Handler+0x14>)
   83c02:	4798      	blx	r3
   83c04:	bf00      	nop
   83c06:	bd80      	pop	{r7, pc}
   83c08:	400e1200 	.word	0x400e1200
   83c0c:	00083b1d 	.word	0x00083b1d

00083c10 <PIOD_Handler>:
   83c10:	b580      	push	{r7, lr}
   83c12:	af00      	add	r7, sp, #0
   83c14:	210e      	movs	r1, #14
   83c16:	4802      	ldr	r0, [pc, #8]	; (83c20 <PIOD_Handler+0x10>)
   83c18:	4b02      	ldr	r3, [pc, #8]	; (83c24 <PIOD_Handler+0x14>)
   83c1a:	4798      	blx	r3
   83c1c:	bf00      	nop
   83c1e:	bd80      	pop	{r7, pc}
   83c20:	400e1400 	.word	0x400e1400
   83c24:	00083b1d 	.word	0x00083b1d

00083c28 <pmc_switch_mck_to_pllack>:
   83c28:	b480      	push	{r7}
   83c2a:	b085      	sub	sp, #20
   83c2c:	af00      	add	r7, sp, #0
   83c2e:	6078      	str	r0, [r7, #4]
   83c30:	491c      	ldr	r1, [pc, #112]	; (83ca4 <pmc_switch_mck_to_pllack+0x7c>)
   83c32:	4b1c      	ldr	r3, [pc, #112]	; (83ca4 <pmc_switch_mck_to_pllack+0x7c>)
   83c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83c3a:	687b      	ldr	r3, [r7, #4]
   83c3c:	4313      	orrs	r3, r2
   83c3e:	630b      	str	r3, [r1, #48]	; 0x30
   83c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83c44:	60fb      	str	r3, [r7, #12]
   83c46:	e007      	b.n	83c58 <pmc_switch_mck_to_pllack+0x30>
   83c48:	68fb      	ldr	r3, [r7, #12]
   83c4a:	2b00      	cmp	r3, #0
   83c4c:	d101      	bne.n	83c52 <pmc_switch_mck_to_pllack+0x2a>
   83c4e:	2301      	movs	r3, #1
   83c50:	e023      	b.n	83c9a <pmc_switch_mck_to_pllack+0x72>
   83c52:	68fb      	ldr	r3, [r7, #12]
   83c54:	3b01      	subs	r3, #1
   83c56:	60fb      	str	r3, [r7, #12]
   83c58:	4b12      	ldr	r3, [pc, #72]	; (83ca4 <pmc_switch_mck_to_pllack+0x7c>)
   83c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c5c:	f003 0308 	and.w	r3, r3, #8
   83c60:	2b00      	cmp	r3, #0
   83c62:	d0f1      	beq.n	83c48 <pmc_switch_mck_to_pllack+0x20>
   83c64:	4a0f      	ldr	r2, [pc, #60]	; (83ca4 <pmc_switch_mck_to_pllack+0x7c>)
   83c66:	4b0f      	ldr	r3, [pc, #60]	; (83ca4 <pmc_switch_mck_to_pllack+0x7c>)
   83c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c6a:	f023 0303 	bic.w	r3, r3, #3
   83c6e:	f043 0302 	orr.w	r3, r3, #2
   83c72:	6313      	str	r3, [r2, #48]	; 0x30
   83c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83c78:	60fb      	str	r3, [r7, #12]
   83c7a:	e007      	b.n	83c8c <pmc_switch_mck_to_pllack+0x64>
   83c7c:	68fb      	ldr	r3, [r7, #12]
   83c7e:	2b00      	cmp	r3, #0
   83c80:	d101      	bne.n	83c86 <pmc_switch_mck_to_pllack+0x5e>
   83c82:	2301      	movs	r3, #1
   83c84:	e009      	b.n	83c9a <pmc_switch_mck_to_pllack+0x72>
   83c86:	68fb      	ldr	r3, [r7, #12]
   83c88:	3b01      	subs	r3, #1
   83c8a:	60fb      	str	r3, [r7, #12]
   83c8c:	4b05      	ldr	r3, [pc, #20]	; (83ca4 <pmc_switch_mck_to_pllack+0x7c>)
   83c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c90:	f003 0308 	and.w	r3, r3, #8
   83c94:	2b00      	cmp	r3, #0
   83c96:	d0f1      	beq.n	83c7c <pmc_switch_mck_to_pllack+0x54>
   83c98:	2300      	movs	r3, #0
   83c9a:	4618      	mov	r0, r3
   83c9c:	3714      	adds	r7, #20
   83c9e:	46bd      	mov	sp, r7
   83ca0:	bc80      	pop	{r7}
   83ca2:	4770      	bx	lr
   83ca4:	400e0600 	.word	0x400e0600

00083ca8 <pmc_switch_sclk_to_32kxtal>:
   83ca8:	b480      	push	{r7}
   83caa:	b083      	sub	sp, #12
   83cac:	af00      	add	r7, sp, #0
   83cae:	6078      	str	r0, [r7, #4]
   83cb0:	687b      	ldr	r3, [r7, #4]
   83cb2:	2b01      	cmp	r3, #1
   83cb4:	d107      	bne.n	83cc6 <pmc_switch_sclk_to_32kxtal+0x1e>
   83cb6:	4a08      	ldr	r2, [pc, #32]	; (83cd8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83cb8:	4b07      	ldr	r3, [pc, #28]	; (83cd8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83cba:	689b      	ldr	r3, [r3, #8]
   83cbc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83cc4:	6093      	str	r3, [r2, #8]
   83cc6:	4b04      	ldr	r3, [pc, #16]	; (83cd8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83cc8:	4a04      	ldr	r2, [pc, #16]	; (83cdc <pmc_switch_sclk_to_32kxtal+0x34>)
   83cca:	601a      	str	r2, [r3, #0]
   83ccc:	bf00      	nop
   83cce:	370c      	adds	r7, #12
   83cd0:	46bd      	mov	sp, r7
   83cd2:	bc80      	pop	{r7}
   83cd4:	4770      	bx	lr
   83cd6:	bf00      	nop
   83cd8:	400e1a10 	.word	0x400e1a10
   83cdc:	a5000008 	.word	0xa5000008

00083ce0 <pmc_osc_is_ready_32kxtal>:
   83ce0:	b480      	push	{r7}
   83ce2:	af00      	add	r7, sp, #0
   83ce4:	4b09      	ldr	r3, [pc, #36]	; (83d0c <pmc_osc_is_ready_32kxtal+0x2c>)
   83ce6:	695b      	ldr	r3, [r3, #20]
   83ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83cec:	2b00      	cmp	r3, #0
   83cee:	d007      	beq.n	83d00 <pmc_osc_is_ready_32kxtal+0x20>
   83cf0:	4b07      	ldr	r3, [pc, #28]	; (83d10 <pmc_osc_is_ready_32kxtal+0x30>)
   83cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83cf8:	2b00      	cmp	r3, #0
   83cfa:	d001      	beq.n	83d00 <pmc_osc_is_ready_32kxtal+0x20>
   83cfc:	2301      	movs	r3, #1
   83cfe:	e000      	b.n	83d02 <pmc_osc_is_ready_32kxtal+0x22>
   83d00:	2300      	movs	r3, #0
   83d02:	4618      	mov	r0, r3
   83d04:	46bd      	mov	sp, r7
   83d06:	bc80      	pop	{r7}
   83d08:	4770      	bx	lr
   83d0a:	bf00      	nop
   83d0c:	400e1a10 	.word	0x400e1a10
   83d10:	400e0600 	.word	0x400e0600

00083d14 <pmc_switch_mainck_to_fastrc>:
   83d14:	b480      	push	{r7}
   83d16:	b085      	sub	sp, #20
   83d18:	af00      	add	r7, sp, #0
   83d1a:	6078      	str	r0, [r7, #4]
   83d1c:	2300      	movs	r3, #0
   83d1e:	60fb      	str	r3, [r7, #12]
   83d20:	4b21      	ldr	r3, [pc, #132]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d22:	6a1b      	ldr	r3, [r3, #32]
   83d24:	f003 0301 	and.w	r3, r3, #1
   83d28:	2b00      	cmp	r3, #0
   83d2a:	d00e      	beq.n	83d4a <pmc_switch_mainck_to_fastrc+0x36>
   83d2c:	491e      	ldr	r1, [pc, #120]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d2e:	4b1e      	ldr	r3, [pc, #120]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d30:	6a1b      	ldr	r3, [r3, #32]
   83d32:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83d36:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   83d3a:	687a      	ldr	r2, [r7, #4]
   83d3c:	4313      	orrs	r3, r2
   83d3e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d42:	f043 0308 	orr.w	r3, r3, #8
   83d46:	620b      	str	r3, [r1, #32]
   83d48:	e00b      	b.n	83d62 <pmc_switch_mainck_to_fastrc+0x4e>
   83d4a:	2301      	movs	r3, #1
   83d4c:	60fb      	str	r3, [r7, #12]
   83d4e:	4916      	ldr	r1, [pc, #88]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d50:	4b15      	ldr	r3, [pc, #84]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d52:	6a1a      	ldr	r2, [r3, #32]
   83d54:	4b15      	ldr	r3, [pc, #84]	; (83dac <pmc_switch_mainck_to_fastrc+0x98>)
   83d56:	4013      	ands	r3, r2
   83d58:	687a      	ldr	r2, [r7, #4]
   83d5a:	431a      	orrs	r2, r3
   83d5c:	4b14      	ldr	r3, [pc, #80]	; (83db0 <pmc_switch_mainck_to_fastrc+0x9c>)
   83d5e:	4313      	orrs	r3, r2
   83d60:	620b      	str	r3, [r1, #32]
   83d62:	bf00      	nop
   83d64:	4b10      	ldr	r3, [pc, #64]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	d0f9      	beq.n	83d64 <pmc_switch_mainck_to_fastrc+0x50>
   83d70:	4a0d      	ldr	r2, [pc, #52]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d72:	4b0d      	ldr	r3, [pc, #52]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d74:	6a1b      	ldr	r3, [r3, #32]
   83d76:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83d7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d82:	6213      	str	r3, [r2, #32]
   83d84:	68fb      	ldr	r3, [r7, #12]
   83d86:	2b00      	cmp	r3, #0
   83d88:	d009      	beq.n	83d9e <pmc_switch_mainck_to_fastrc+0x8a>
   83d8a:	4a07      	ldr	r2, [pc, #28]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d8c:	4b06      	ldr	r3, [pc, #24]	; (83da8 <pmc_switch_mainck_to_fastrc+0x94>)
   83d8e:	6a1b      	ldr	r3, [r3, #32]
   83d90:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83d94:	f023 0301 	bic.w	r3, r3, #1
   83d98:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d9c:	6213      	str	r3, [r2, #32]
   83d9e:	bf00      	nop
   83da0:	3714      	adds	r7, #20
   83da2:	46bd      	mov	sp, r7
   83da4:	bc80      	pop	{r7}
   83da6:	4770      	bx	lr
   83da8:	400e0600 	.word	0x400e0600
   83dac:	ffc80086 	.word	0xffc80086
   83db0:	0037ff09 	.word	0x0037ff09

00083db4 <pmc_switch_mainck_to_xtal>:
   83db4:	b480      	push	{r7}
   83db6:	b083      	sub	sp, #12
   83db8:	af00      	add	r7, sp, #0
   83dba:	6078      	str	r0, [r7, #4]
   83dbc:	6039      	str	r1, [r7, #0]
   83dbe:	687b      	ldr	r3, [r7, #4]
   83dc0:	2b00      	cmp	r3, #0
   83dc2:	d008      	beq.n	83dd6 <pmc_switch_mainck_to_xtal+0x22>
   83dc4:	4916      	ldr	r1, [pc, #88]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83dc6:	4b16      	ldr	r3, [pc, #88]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83dc8:	6a1b      	ldr	r3, [r3, #32]
   83dca:	4a16      	ldr	r2, [pc, #88]	; (83e24 <pmc_switch_mainck_to_xtal+0x70>)
   83dcc:	401a      	ands	r2, r3
   83dce:	4b16      	ldr	r3, [pc, #88]	; (83e28 <pmc_switch_mainck_to_xtal+0x74>)
   83dd0:	4313      	orrs	r3, r2
   83dd2:	620b      	str	r3, [r1, #32]
   83dd4:	e01e      	b.n	83e14 <pmc_switch_mainck_to_xtal+0x60>
   83dd6:	4912      	ldr	r1, [pc, #72]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83dd8:	4b11      	ldr	r3, [pc, #68]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83dda:	6a1b      	ldr	r3, [r3, #32]
   83ddc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83de0:	f023 0303 	bic.w	r3, r3, #3
   83de4:	683a      	ldr	r2, [r7, #0]
   83de6:	0212      	lsls	r2, r2, #8
   83de8:	b292      	uxth	r2, r2
   83dea:	4313      	orrs	r3, r2
   83dec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83df0:	f043 0301 	orr.w	r3, r3, #1
   83df4:	620b      	str	r3, [r1, #32]
   83df6:	bf00      	nop
   83df8:	4b09      	ldr	r3, [pc, #36]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83dfc:	f003 0301 	and.w	r3, r3, #1
   83e00:	2b00      	cmp	r3, #0
   83e02:	d0f9      	beq.n	83df8 <pmc_switch_mainck_to_xtal+0x44>
   83e04:	4a06      	ldr	r2, [pc, #24]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83e06:	4b06      	ldr	r3, [pc, #24]	; (83e20 <pmc_switch_mainck_to_xtal+0x6c>)
   83e08:	6a1b      	ldr	r3, [r3, #32]
   83e0a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83e12:	6213      	str	r3, [r2, #32]
   83e14:	bf00      	nop
   83e16:	370c      	adds	r7, #12
   83e18:	46bd      	mov	sp, r7
   83e1a:	bc80      	pop	{r7}
   83e1c:	4770      	bx	lr
   83e1e:	bf00      	nop
   83e20:	400e0600 	.word	0x400e0600
   83e24:	fec8fffc 	.word	0xfec8fffc
   83e28:	01370002 	.word	0x01370002

00083e2c <pmc_osc_is_ready_mainck>:
   83e2c:	b480      	push	{r7}
   83e2e:	af00      	add	r7, sp, #0
   83e30:	4b03      	ldr	r3, [pc, #12]	; (83e40 <pmc_osc_is_ready_mainck+0x14>)
   83e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   83e38:	4618      	mov	r0, r3
   83e3a:	46bd      	mov	sp, r7
   83e3c:	bc80      	pop	{r7}
   83e3e:	4770      	bx	lr
   83e40:	400e0600 	.word	0x400e0600

00083e44 <pmc_disable_pllack>:
   83e44:	b480      	push	{r7}
   83e46:	af00      	add	r7, sp, #0
   83e48:	4b03      	ldr	r3, [pc, #12]	; (83e58 <pmc_disable_pllack+0x14>)
   83e4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83e4e:	629a      	str	r2, [r3, #40]	; 0x28
   83e50:	bf00      	nop
   83e52:	46bd      	mov	sp, r7
   83e54:	bc80      	pop	{r7}
   83e56:	4770      	bx	lr
   83e58:	400e0600 	.word	0x400e0600

00083e5c <pmc_is_locked_pllack>:
   83e5c:	b480      	push	{r7}
   83e5e:	af00      	add	r7, sp, #0
   83e60:	4b03      	ldr	r3, [pc, #12]	; (83e70 <pmc_is_locked_pllack+0x14>)
   83e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e64:	f003 0302 	and.w	r3, r3, #2
   83e68:	4618      	mov	r0, r3
   83e6a:	46bd      	mov	sp, r7
   83e6c:	bc80      	pop	{r7}
   83e6e:	4770      	bx	lr
   83e70:	400e0600 	.word	0x400e0600

00083e74 <pmc_is_locked_upll>:
   83e74:	b480      	push	{r7}
   83e76:	af00      	add	r7, sp, #0
   83e78:	4b03      	ldr	r3, [pc, #12]	; (83e88 <pmc_is_locked_upll+0x14>)
   83e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83e80:	4618      	mov	r0, r3
   83e82:	46bd      	mov	sp, r7
   83e84:	bc80      	pop	{r7}
   83e86:	4770      	bx	lr
   83e88:	400e0600 	.word	0x400e0600

00083e8c <pmc_enable_periph_clk>:
   83e8c:	b480      	push	{r7}
   83e8e:	b083      	sub	sp, #12
   83e90:	af00      	add	r7, sp, #0
   83e92:	6078      	str	r0, [r7, #4]
   83e94:	687b      	ldr	r3, [r7, #4]
   83e96:	2b2c      	cmp	r3, #44	; 0x2c
   83e98:	d901      	bls.n	83e9e <pmc_enable_periph_clk+0x12>
   83e9a:	2301      	movs	r3, #1
   83e9c:	e02f      	b.n	83efe <pmc_enable_periph_clk+0x72>
   83e9e:	687b      	ldr	r3, [r7, #4]
   83ea0:	2b1f      	cmp	r3, #31
   83ea2:	d813      	bhi.n	83ecc <pmc_enable_periph_clk+0x40>
   83ea4:	4b18      	ldr	r3, [pc, #96]	; (83f08 <pmc_enable_periph_clk+0x7c>)
   83ea6:	699a      	ldr	r2, [r3, #24]
   83ea8:	2101      	movs	r1, #1
   83eaa:	687b      	ldr	r3, [r7, #4]
   83eac:	fa01 f303 	lsl.w	r3, r1, r3
   83eb0:	401a      	ands	r2, r3
   83eb2:	2101      	movs	r1, #1
   83eb4:	687b      	ldr	r3, [r7, #4]
   83eb6:	fa01 f303 	lsl.w	r3, r1, r3
   83eba:	429a      	cmp	r2, r3
   83ebc:	d01e      	beq.n	83efc <pmc_enable_periph_clk+0x70>
   83ebe:	4a12      	ldr	r2, [pc, #72]	; (83f08 <pmc_enable_periph_clk+0x7c>)
   83ec0:	2101      	movs	r1, #1
   83ec2:	687b      	ldr	r3, [r7, #4]
   83ec4:	fa01 f303 	lsl.w	r3, r1, r3
   83ec8:	6113      	str	r3, [r2, #16]
   83eca:	e017      	b.n	83efc <pmc_enable_periph_clk+0x70>
   83ecc:	687b      	ldr	r3, [r7, #4]
   83ece:	3b20      	subs	r3, #32
   83ed0:	607b      	str	r3, [r7, #4]
   83ed2:	4b0d      	ldr	r3, [pc, #52]	; (83f08 <pmc_enable_periph_clk+0x7c>)
   83ed4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83ed8:	2101      	movs	r1, #1
   83eda:	687b      	ldr	r3, [r7, #4]
   83edc:	fa01 f303 	lsl.w	r3, r1, r3
   83ee0:	401a      	ands	r2, r3
   83ee2:	2101      	movs	r1, #1
   83ee4:	687b      	ldr	r3, [r7, #4]
   83ee6:	fa01 f303 	lsl.w	r3, r1, r3
   83eea:	429a      	cmp	r2, r3
   83eec:	d006      	beq.n	83efc <pmc_enable_periph_clk+0x70>
   83eee:	4a06      	ldr	r2, [pc, #24]	; (83f08 <pmc_enable_periph_clk+0x7c>)
   83ef0:	2101      	movs	r1, #1
   83ef2:	687b      	ldr	r3, [r7, #4]
   83ef4:	fa01 f303 	lsl.w	r3, r1, r3
   83ef8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
   83efc:	2300      	movs	r3, #0
   83efe:	4618      	mov	r0, r3
   83f00:	370c      	adds	r7, #12
   83f02:	46bd      	mov	sp, r7
   83f04:	bc80      	pop	{r7}
   83f06:	4770      	bx	lr
   83f08:	400e0600 	.word	0x400e0600

00083f0c <pmc_set_writeprotect>:
   83f0c:	b480      	push	{r7}
   83f0e:	b083      	sub	sp, #12
   83f10:	af00      	add	r7, sp, #0
   83f12:	6078      	str	r0, [r7, #4]
   83f14:	687b      	ldr	r3, [r7, #4]
   83f16:	2b00      	cmp	r3, #0
   83f18:	d004      	beq.n	83f24 <pmc_set_writeprotect+0x18>
   83f1a:	4b07      	ldr	r3, [pc, #28]	; (83f38 <pmc_set_writeprotect+0x2c>)
   83f1c:	4a07      	ldr	r2, [pc, #28]	; (83f3c <pmc_set_writeprotect+0x30>)
   83f1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   83f22:	e003      	b.n	83f2c <pmc_set_writeprotect+0x20>
   83f24:	4b04      	ldr	r3, [pc, #16]	; (83f38 <pmc_set_writeprotect+0x2c>)
   83f26:	4a06      	ldr	r2, [pc, #24]	; (83f40 <pmc_set_writeprotect+0x34>)
   83f28:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   83f2c:	bf00      	nop
   83f2e:	370c      	adds	r7, #12
   83f30:	46bd      	mov	sp, r7
   83f32:	bc80      	pop	{r7}
   83f34:	4770      	bx	lr
   83f36:	bf00      	nop
   83f38:	400e0600 	.word	0x400e0600
   83f3c:	504d4301 	.word	0x504d4301
   83f40:	504d4300 	.word	0x504d4300

00083f44 <Dummy_Handler>:
   83f44:	b480      	push	{r7}
   83f46:	af00      	add	r7, sp, #0
   83f48:	e7fe      	b.n	83f48 <Dummy_Handler+0x4>
   83f4a:	bf00      	nop

00083f4c <Reset_Handler>:
   83f4c:	b580      	push	{r7, lr}
   83f4e:	b082      	sub	sp, #8
   83f50:	af00      	add	r7, sp, #0
   83f52:	4b1e      	ldr	r3, [pc, #120]	; (83fcc <Reset_Handler+0x80>)
   83f54:	607b      	str	r3, [r7, #4]
   83f56:	4b1e      	ldr	r3, [pc, #120]	; (83fd0 <Reset_Handler+0x84>)
   83f58:	603b      	str	r3, [r7, #0]
   83f5a:	687a      	ldr	r2, [r7, #4]
   83f5c:	683b      	ldr	r3, [r7, #0]
   83f5e:	429a      	cmp	r2, r3
   83f60:	d00c      	beq.n	83f7c <Reset_Handler+0x30>
   83f62:	e007      	b.n	83f74 <Reset_Handler+0x28>
   83f64:	683b      	ldr	r3, [r7, #0]
   83f66:	1d1a      	adds	r2, r3, #4
   83f68:	603a      	str	r2, [r7, #0]
   83f6a:	687a      	ldr	r2, [r7, #4]
   83f6c:	1d11      	adds	r1, r2, #4
   83f6e:	6079      	str	r1, [r7, #4]
   83f70:	6812      	ldr	r2, [r2, #0]
   83f72:	601a      	str	r2, [r3, #0]
   83f74:	683b      	ldr	r3, [r7, #0]
   83f76:	4a17      	ldr	r2, [pc, #92]	; (83fd4 <Reset_Handler+0x88>)
   83f78:	4293      	cmp	r3, r2
   83f7a:	d3f3      	bcc.n	83f64 <Reset_Handler+0x18>
   83f7c:	4b16      	ldr	r3, [pc, #88]	; (83fd8 <Reset_Handler+0x8c>)
   83f7e:	603b      	str	r3, [r7, #0]
   83f80:	e004      	b.n	83f8c <Reset_Handler+0x40>
   83f82:	683b      	ldr	r3, [r7, #0]
   83f84:	1d1a      	adds	r2, r3, #4
   83f86:	603a      	str	r2, [r7, #0]
   83f88:	2200      	movs	r2, #0
   83f8a:	601a      	str	r2, [r3, #0]
   83f8c:	683b      	ldr	r3, [r7, #0]
   83f8e:	4a13      	ldr	r2, [pc, #76]	; (83fdc <Reset_Handler+0x90>)
   83f90:	4293      	cmp	r3, r2
   83f92:	d3f6      	bcc.n	83f82 <Reset_Handler+0x36>
   83f94:	4b12      	ldr	r3, [pc, #72]	; (83fe0 <Reset_Handler+0x94>)
   83f96:	607b      	str	r3, [r7, #4]
   83f98:	4a12      	ldr	r2, [pc, #72]	; (83fe4 <Reset_Handler+0x98>)
   83f9a:	687b      	ldr	r3, [r7, #4]
   83f9c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83fa4:	6093      	str	r3, [r2, #8]
   83fa6:	687b      	ldr	r3, [r7, #4]
   83fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83fac:	d309      	bcc.n	83fc2 <Reset_Handler+0x76>
   83fae:	687b      	ldr	r3, [r7, #4]
   83fb0:	4a0d      	ldr	r2, [pc, #52]	; (83fe8 <Reset_Handler+0x9c>)
   83fb2:	4293      	cmp	r3, r2
   83fb4:	d805      	bhi.n	83fc2 <Reset_Handler+0x76>
   83fb6:	4a0b      	ldr	r2, [pc, #44]	; (83fe4 <Reset_Handler+0x98>)
   83fb8:	4b0a      	ldr	r3, [pc, #40]	; (83fe4 <Reset_Handler+0x98>)
   83fba:	689b      	ldr	r3, [r3, #8]
   83fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83fc0:	6093      	str	r3, [r2, #8]
   83fc2:	4b0a      	ldr	r3, [pc, #40]	; (83fec <Reset_Handler+0xa0>)
   83fc4:	4798      	blx	r3
   83fc6:	4b0a      	ldr	r3, [pc, #40]	; (83ff0 <Reset_Handler+0xa4>)
   83fc8:	4798      	blx	r3
   83fca:	e7fe      	b.n	83fca <Reset_Handler+0x7e>
   83fcc:	000876f4 	.word	0x000876f4
   83fd0:	20070000 	.word	0x20070000
   83fd4:	20070914 	.word	0x20070914
   83fd8:	20070914 	.word	0x20070914
   83fdc:	20070ee4 	.word	0x20070ee4
   83fe0:	00080000 	.word	0x00080000
   83fe4:	e000ed00 	.word	0xe000ed00
   83fe8:	200fffff 	.word	0x200fffff
   83fec:	00084685 	.word	0x00084685
   83ff0:	00082965 	.word	0x00082965

00083ff4 <SystemCoreClockUpdate>:
   83ff4:	b480      	push	{r7}
   83ff6:	af00      	add	r7, sp, #0
   83ff8:	4b57      	ldr	r3, [pc, #348]	; (84158 <SystemCoreClockUpdate+0x164>)
   83ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ffc:	f003 0303 	and.w	r3, r3, #3
   84000:	2b03      	cmp	r3, #3
   84002:	f200 808a 	bhi.w	8411a <SystemCoreClockUpdate+0x126>
   84006:	a201      	add	r2, pc, #4	; (adr r2, 8400c <SystemCoreClockUpdate+0x18>)
   84008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8400c:	0008401d 	.word	0x0008401d
   84010:	0008403d 	.word	0x0008403d
   84014:	0008408d 	.word	0x0008408d
   84018:	0008408d 	.word	0x0008408d
   8401c:	4b4f      	ldr	r3, [pc, #316]	; (8415c <SystemCoreClockUpdate+0x168>)
   8401e:	695b      	ldr	r3, [r3, #20]
   84020:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84024:	2b00      	cmp	r3, #0
   84026:	d004      	beq.n	84032 <SystemCoreClockUpdate+0x3e>
   84028:	4b4d      	ldr	r3, [pc, #308]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8402a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8402e:	601a      	str	r2, [r3, #0]
   84030:	e073      	b.n	8411a <SystemCoreClockUpdate+0x126>
   84032:	4b4b      	ldr	r3, [pc, #300]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84034:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   84038:	601a      	str	r2, [r3, #0]
   8403a:	e06e      	b.n	8411a <SystemCoreClockUpdate+0x126>
   8403c:	4b46      	ldr	r3, [pc, #280]	; (84158 <SystemCoreClockUpdate+0x164>)
   8403e:	6a1b      	ldr	r3, [r3, #32]
   84040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84044:	2b00      	cmp	r3, #0
   84046:	d003      	beq.n	84050 <SystemCoreClockUpdate+0x5c>
   84048:	4b45      	ldr	r3, [pc, #276]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8404a:	4a46      	ldr	r2, [pc, #280]	; (84164 <SystemCoreClockUpdate+0x170>)
   8404c:	601a      	str	r2, [r3, #0]
   8404e:	e064      	b.n	8411a <SystemCoreClockUpdate+0x126>
   84050:	4b43      	ldr	r3, [pc, #268]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84052:	4a45      	ldr	r2, [pc, #276]	; (84168 <SystemCoreClockUpdate+0x174>)
   84054:	601a      	str	r2, [r3, #0]
   84056:	4b40      	ldr	r3, [pc, #256]	; (84158 <SystemCoreClockUpdate+0x164>)
   84058:	6a1b      	ldr	r3, [r3, #32]
   8405a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8405e:	2b10      	cmp	r3, #16
   84060:	d004      	beq.n	8406c <SystemCoreClockUpdate+0x78>
   84062:	2b20      	cmp	r3, #32
   84064:	d008      	beq.n	84078 <SystemCoreClockUpdate+0x84>
   84066:	2b00      	cmp	r3, #0
   84068:	d00e      	beq.n	84088 <SystemCoreClockUpdate+0x94>
   8406a:	e00e      	b.n	8408a <SystemCoreClockUpdate+0x96>
   8406c:	4b3c      	ldr	r3, [pc, #240]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8406e:	681b      	ldr	r3, [r3, #0]
   84070:	005b      	lsls	r3, r3, #1
   84072:	4a3b      	ldr	r2, [pc, #236]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84074:	6013      	str	r3, [r2, #0]
   84076:	e008      	b.n	8408a <SystemCoreClockUpdate+0x96>
   84078:	4b39      	ldr	r3, [pc, #228]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8407a:	681a      	ldr	r2, [r3, #0]
   8407c:	4613      	mov	r3, r2
   8407e:	005b      	lsls	r3, r3, #1
   84080:	4413      	add	r3, r2
   84082:	4a37      	ldr	r2, [pc, #220]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84084:	6013      	str	r3, [r2, #0]
   84086:	e000      	b.n	8408a <SystemCoreClockUpdate+0x96>
   84088:	bf00      	nop
   8408a:	e046      	b.n	8411a <SystemCoreClockUpdate+0x126>
   8408c:	4b32      	ldr	r3, [pc, #200]	; (84158 <SystemCoreClockUpdate+0x164>)
   8408e:	6a1b      	ldr	r3, [r3, #32]
   84090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84094:	2b00      	cmp	r3, #0
   84096:	d003      	beq.n	840a0 <SystemCoreClockUpdate+0xac>
   84098:	4b31      	ldr	r3, [pc, #196]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8409a:	4a32      	ldr	r2, [pc, #200]	; (84164 <SystemCoreClockUpdate+0x170>)
   8409c:	601a      	str	r2, [r3, #0]
   8409e:	e01c      	b.n	840da <SystemCoreClockUpdate+0xe6>
   840a0:	4b2f      	ldr	r3, [pc, #188]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840a2:	4a31      	ldr	r2, [pc, #196]	; (84168 <SystemCoreClockUpdate+0x174>)
   840a4:	601a      	str	r2, [r3, #0]
   840a6:	4b2c      	ldr	r3, [pc, #176]	; (84158 <SystemCoreClockUpdate+0x164>)
   840a8:	6a1b      	ldr	r3, [r3, #32]
   840aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   840ae:	2b10      	cmp	r3, #16
   840b0:	d004      	beq.n	840bc <SystemCoreClockUpdate+0xc8>
   840b2:	2b20      	cmp	r3, #32
   840b4:	d008      	beq.n	840c8 <SystemCoreClockUpdate+0xd4>
   840b6:	2b00      	cmp	r3, #0
   840b8:	d00e      	beq.n	840d8 <SystemCoreClockUpdate+0xe4>
   840ba:	e00e      	b.n	840da <SystemCoreClockUpdate+0xe6>
   840bc:	4b28      	ldr	r3, [pc, #160]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840be:	681b      	ldr	r3, [r3, #0]
   840c0:	005b      	lsls	r3, r3, #1
   840c2:	4a27      	ldr	r2, [pc, #156]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840c4:	6013      	str	r3, [r2, #0]
   840c6:	e008      	b.n	840da <SystemCoreClockUpdate+0xe6>
   840c8:	4b25      	ldr	r3, [pc, #148]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840ca:	681a      	ldr	r2, [r3, #0]
   840cc:	4613      	mov	r3, r2
   840ce:	005b      	lsls	r3, r3, #1
   840d0:	4413      	add	r3, r2
   840d2:	4a23      	ldr	r2, [pc, #140]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840d4:	6013      	str	r3, [r2, #0]
   840d6:	e000      	b.n	840da <SystemCoreClockUpdate+0xe6>
   840d8:	bf00      	nop
   840da:	4b1f      	ldr	r3, [pc, #124]	; (84158 <SystemCoreClockUpdate+0x164>)
   840dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840de:	f003 0303 	and.w	r3, r3, #3
   840e2:	2b02      	cmp	r3, #2
   840e4:	d115      	bne.n	84112 <SystemCoreClockUpdate+0x11e>
   840e6:	4b1c      	ldr	r3, [pc, #112]	; (84158 <SystemCoreClockUpdate+0x164>)
   840e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   840ea:	4b20      	ldr	r3, [pc, #128]	; (8416c <SystemCoreClockUpdate+0x178>)
   840ec:	4013      	ands	r3, r2
   840ee:	0c1b      	lsrs	r3, r3, #16
   840f0:	3301      	adds	r3, #1
   840f2:	4a1b      	ldr	r2, [pc, #108]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840f4:	6812      	ldr	r2, [r2, #0]
   840f6:	fb02 f303 	mul.w	r3, r2, r3
   840fa:	4a19      	ldr	r2, [pc, #100]	; (84160 <SystemCoreClockUpdate+0x16c>)
   840fc:	6013      	str	r3, [r2, #0]
   840fe:	4b16      	ldr	r3, [pc, #88]	; (84158 <SystemCoreClockUpdate+0x164>)
   84100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84102:	b2db      	uxtb	r3, r3
   84104:	4a16      	ldr	r2, [pc, #88]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84106:	6812      	ldr	r2, [r2, #0]
   84108:	fbb2 f3f3 	udiv	r3, r2, r3
   8410c:	4a14      	ldr	r2, [pc, #80]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8410e:	6013      	str	r3, [r2, #0]
   84110:	e002      	b.n	84118 <SystemCoreClockUpdate+0x124>
   84112:	4b13      	ldr	r3, [pc, #76]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84114:	4a16      	ldr	r2, [pc, #88]	; (84170 <SystemCoreClockUpdate+0x17c>)
   84116:	601a      	str	r2, [r3, #0]
   84118:	bf00      	nop
   8411a:	4b0f      	ldr	r3, [pc, #60]	; (84158 <SystemCoreClockUpdate+0x164>)
   8411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8411e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84122:	2b70      	cmp	r3, #112	; 0x70
   84124:	d108      	bne.n	84138 <SystemCoreClockUpdate+0x144>
   84126:	4b0e      	ldr	r3, [pc, #56]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84128:	681b      	ldr	r3, [r3, #0]
   8412a:	4a12      	ldr	r2, [pc, #72]	; (84174 <SystemCoreClockUpdate+0x180>)
   8412c:	fba2 2303 	umull	r2, r3, r2, r3
   84130:	085b      	lsrs	r3, r3, #1
   84132:	4a0b      	ldr	r2, [pc, #44]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84134:	6013      	str	r3, [r2, #0]
   84136:	e00a      	b.n	8414e <SystemCoreClockUpdate+0x15a>
   84138:	4b07      	ldr	r3, [pc, #28]	; (84158 <SystemCoreClockUpdate+0x164>)
   8413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8413c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84140:	091b      	lsrs	r3, r3, #4
   84142:	4a07      	ldr	r2, [pc, #28]	; (84160 <SystemCoreClockUpdate+0x16c>)
   84144:	6812      	ldr	r2, [r2, #0]
   84146:	fa22 f303 	lsr.w	r3, r2, r3
   8414a:	4a05      	ldr	r2, [pc, #20]	; (84160 <SystemCoreClockUpdate+0x16c>)
   8414c:	6013      	str	r3, [r2, #0]
   8414e:	bf00      	nop
   84150:	46bd      	mov	sp, r7
   84152:	bc80      	pop	{r7}
   84154:	4770      	bx	lr
   84156:	bf00      	nop
   84158:	400e0600 	.word	0x400e0600
   8415c:	400e1a10 	.word	0x400e1a10
   84160:	200700ac 	.word	0x200700ac
   84164:	00b71b00 	.word	0x00b71b00
   84168:	003d0900 	.word	0x003d0900
   8416c:	07ff0000 	.word	0x07ff0000
   84170:	0e4e1c00 	.word	0x0e4e1c00
   84174:	aaaaaaab 	.word	0xaaaaaaab

00084178 <system_init_flash>:
   84178:	b480      	push	{r7}
   8417a:	b083      	sub	sp, #12
   8417c:	af00      	add	r7, sp, #0
   8417e:	6078      	str	r0, [r7, #4]
   84180:	687b      	ldr	r3, [r7, #4]
   84182:	4a25      	ldr	r2, [pc, #148]	; (84218 <system_init_flash+0xa0>)
   84184:	4293      	cmp	r3, r2
   84186:	d806      	bhi.n	84196 <system_init_flash+0x1e>
   84188:	4b24      	ldr	r3, [pc, #144]	; (8421c <system_init_flash+0xa4>)
   8418a:	2200      	movs	r2, #0
   8418c:	601a      	str	r2, [r3, #0]
   8418e:	4b24      	ldr	r3, [pc, #144]	; (84220 <system_init_flash+0xa8>)
   84190:	2200      	movs	r2, #0
   84192:	601a      	str	r2, [r3, #0]
   84194:	e03b      	b.n	8420e <system_init_flash+0x96>
   84196:	687b      	ldr	r3, [r7, #4]
   84198:	4a22      	ldr	r2, [pc, #136]	; (84224 <system_init_flash+0xac>)
   8419a:	4293      	cmp	r3, r2
   8419c:	d808      	bhi.n	841b0 <system_init_flash+0x38>
   8419e:	4b1f      	ldr	r3, [pc, #124]	; (8421c <system_init_flash+0xa4>)
   841a0:	f44f 7280 	mov.w	r2, #256	; 0x100
   841a4:	601a      	str	r2, [r3, #0]
   841a6:	4b1e      	ldr	r3, [pc, #120]	; (84220 <system_init_flash+0xa8>)
   841a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   841ac:	601a      	str	r2, [r3, #0]
   841ae:	e02e      	b.n	8420e <system_init_flash+0x96>
   841b0:	687b      	ldr	r3, [r7, #4]
   841b2:	4a1d      	ldr	r2, [pc, #116]	; (84228 <system_init_flash+0xb0>)
   841b4:	4293      	cmp	r3, r2
   841b6:	d808      	bhi.n	841ca <system_init_flash+0x52>
   841b8:	4b18      	ldr	r3, [pc, #96]	; (8421c <system_init_flash+0xa4>)
   841ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   841be:	601a      	str	r2, [r3, #0]
   841c0:	4b17      	ldr	r3, [pc, #92]	; (84220 <system_init_flash+0xa8>)
   841c2:	f44f 7200 	mov.w	r2, #512	; 0x200
   841c6:	601a      	str	r2, [r3, #0]
   841c8:	e021      	b.n	8420e <system_init_flash+0x96>
   841ca:	687b      	ldr	r3, [r7, #4]
   841cc:	4a17      	ldr	r2, [pc, #92]	; (8422c <system_init_flash+0xb4>)
   841ce:	4293      	cmp	r3, r2
   841d0:	d808      	bhi.n	841e4 <system_init_flash+0x6c>
   841d2:	4b12      	ldr	r3, [pc, #72]	; (8421c <system_init_flash+0xa4>)
   841d4:	f44f 7240 	mov.w	r2, #768	; 0x300
   841d8:	601a      	str	r2, [r3, #0]
   841da:	4b11      	ldr	r3, [pc, #68]	; (84220 <system_init_flash+0xa8>)
   841dc:	f44f 7240 	mov.w	r2, #768	; 0x300
   841e0:	601a      	str	r2, [r3, #0]
   841e2:	e014      	b.n	8420e <system_init_flash+0x96>
   841e4:	687b      	ldr	r3, [r7, #4]
   841e6:	4a12      	ldr	r2, [pc, #72]	; (84230 <system_init_flash+0xb8>)
   841e8:	4293      	cmp	r3, r2
   841ea:	d808      	bhi.n	841fe <system_init_flash+0x86>
   841ec:	4b0b      	ldr	r3, [pc, #44]	; (8421c <system_init_flash+0xa4>)
   841ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   841f2:	601a      	str	r2, [r3, #0]
   841f4:	4b0a      	ldr	r3, [pc, #40]	; (84220 <system_init_flash+0xa8>)
   841f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   841fa:	601a      	str	r2, [r3, #0]
   841fc:	e007      	b.n	8420e <system_init_flash+0x96>
   841fe:	4b07      	ldr	r3, [pc, #28]	; (8421c <system_init_flash+0xa4>)
   84200:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   84204:	601a      	str	r2, [r3, #0]
   84206:	4b06      	ldr	r3, [pc, #24]	; (84220 <system_init_flash+0xa8>)
   84208:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   8420c:	601a      	str	r2, [r3, #0]
   8420e:	bf00      	nop
   84210:	370c      	adds	r7, #12
   84212:	46bd      	mov	sp, r7
   84214:	bc80      	pop	{r7}
   84216:	4770      	bx	lr
   84218:	0121eabf 	.word	0x0121eabf
   8421c:	400e0a00 	.word	0x400e0a00
   84220:	400e0c00 	.word	0x400e0c00
   84224:	02faf07f 	.word	0x02faf07f
   84228:	03d08fff 	.word	0x03d08fff
   8422c:	04c4b3ff 	.word	0x04c4b3ff
   84230:	055d4a7f 	.word	0x055d4a7f

00084234 <_sbrk>:
   84234:	b480      	push	{r7}
   84236:	b085      	sub	sp, #20
   84238:	af00      	add	r7, sp, #0
   8423a:	6078      	str	r0, [r7, #4]
   8423c:	4b0a      	ldr	r3, [pc, #40]	; (84268 <_sbrk+0x34>)
   8423e:	681b      	ldr	r3, [r3, #0]
   84240:	2b00      	cmp	r3, #0
   84242:	d102      	bne.n	8424a <_sbrk+0x16>
   84244:	4b08      	ldr	r3, [pc, #32]	; (84268 <_sbrk+0x34>)
   84246:	4a09      	ldr	r2, [pc, #36]	; (8426c <_sbrk+0x38>)
   84248:	601a      	str	r2, [r3, #0]
   8424a:	4b07      	ldr	r3, [pc, #28]	; (84268 <_sbrk+0x34>)
   8424c:	681b      	ldr	r3, [r3, #0]
   8424e:	60fb      	str	r3, [r7, #12]
   84250:	4b05      	ldr	r3, [pc, #20]	; (84268 <_sbrk+0x34>)
   84252:	681a      	ldr	r2, [r3, #0]
   84254:	687b      	ldr	r3, [r7, #4]
   84256:	4413      	add	r3, r2
   84258:	4a03      	ldr	r2, [pc, #12]	; (84268 <_sbrk+0x34>)
   8425a:	6013      	str	r3, [r2, #0]
   8425c:	68fb      	ldr	r3, [r7, #12]
   8425e:	4618      	mov	r0, r3
   84260:	3714      	adds	r7, #20
   84262:	46bd      	mov	sp, r7
   84264:	bc80      	pop	{r7}
   84266:	4770      	bx	lr
   84268:	200709f8 	.word	0x200709f8
   8426c:	20072ee8 	.word	0x20072ee8

00084270 <_close>:
   84270:	b480      	push	{r7}
   84272:	b083      	sub	sp, #12
   84274:	af00      	add	r7, sp, #0
   84276:	6078      	str	r0, [r7, #4]
   84278:	f04f 33ff 	mov.w	r3, #4294967295
   8427c:	4618      	mov	r0, r3
   8427e:	370c      	adds	r7, #12
   84280:	46bd      	mov	sp, r7
   84282:	bc80      	pop	{r7}
   84284:	4770      	bx	lr
   84286:	bf00      	nop

00084288 <_fstat>:
   84288:	b480      	push	{r7}
   8428a:	b083      	sub	sp, #12
   8428c:	af00      	add	r7, sp, #0
   8428e:	6078      	str	r0, [r7, #4]
   84290:	6039      	str	r1, [r7, #0]
   84292:	683b      	ldr	r3, [r7, #0]
   84294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84298:	605a      	str	r2, [r3, #4]
   8429a:	2300      	movs	r3, #0
   8429c:	4618      	mov	r0, r3
   8429e:	370c      	adds	r7, #12
   842a0:	46bd      	mov	sp, r7
   842a2:	bc80      	pop	{r7}
   842a4:	4770      	bx	lr
   842a6:	bf00      	nop

000842a8 <_isatty>:
   842a8:	b480      	push	{r7}
   842aa:	b083      	sub	sp, #12
   842ac:	af00      	add	r7, sp, #0
   842ae:	6078      	str	r0, [r7, #4]
   842b0:	2301      	movs	r3, #1
   842b2:	4618      	mov	r0, r3
   842b4:	370c      	adds	r7, #12
   842b6:	46bd      	mov	sp, r7
   842b8:	bc80      	pop	{r7}
   842ba:	4770      	bx	lr

000842bc <_lseek>:
   842bc:	b480      	push	{r7}
   842be:	b085      	sub	sp, #20
   842c0:	af00      	add	r7, sp, #0
   842c2:	60f8      	str	r0, [r7, #12]
   842c4:	60b9      	str	r1, [r7, #8]
   842c6:	607a      	str	r2, [r7, #4]
   842c8:	2300      	movs	r3, #0
   842ca:	4618      	mov	r0, r3
   842cc:	3714      	adds	r7, #20
   842ce:	46bd      	mov	sp, r7
   842d0:	bc80      	pop	{r7}
   842d2:	4770      	bx	lr

000842d4 <__aeabi_drsub>:
   842d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   842d8:	e002      	b.n	842e0 <__adddf3>
   842da:	bf00      	nop

000842dc <__aeabi_dsub>:
   842dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000842e0 <__adddf3>:
   842e0:	b530      	push	{r4, r5, lr}
   842e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   842e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   842ea:	ea94 0f05 	teq	r4, r5
   842ee:	bf08      	it	eq
   842f0:	ea90 0f02 	teqeq	r0, r2
   842f4:	bf1f      	itttt	ne
   842f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   842fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   842fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   84306:	f000 80e2 	beq.w	844ce <__adddf3+0x1ee>
   8430a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8430e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   84312:	bfb8      	it	lt
   84314:	426d      	neglt	r5, r5
   84316:	dd0c      	ble.n	84332 <__adddf3+0x52>
   84318:	442c      	add	r4, r5
   8431a:	ea80 0202 	eor.w	r2, r0, r2
   8431e:	ea81 0303 	eor.w	r3, r1, r3
   84322:	ea82 0000 	eor.w	r0, r2, r0
   84326:	ea83 0101 	eor.w	r1, r3, r1
   8432a:	ea80 0202 	eor.w	r2, r0, r2
   8432e:	ea81 0303 	eor.w	r3, r1, r3
   84332:	2d36      	cmp	r5, #54	; 0x36
   84334:	bf88      	it	hi
   84336:	bd30      	pophi	{r4, r5, pc}
   84338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8433c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   84344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   84348:	d002      	beq.n	84350 <__adddf3+0x70>
   8434a:	4240      	negs	r0, r0
   8434c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   84354:	ea4f 3303 	mov.w	r3, r3, lsl #12
   84358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8435c:	d002      	beq.n	84364 <__adddf3+0x84>
   8435e:	4252      	negs	r2, r2
   84360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   84364:	ea94 0f05 	teq	r4, r5
   84368:	f000 80a7 	beq.w	844ba <__adddf3+0x1da>
   8436c:	f1a4 0401 	sub.w	r4, r4, #1
   84370:	f1d5 0e20 	rsbs	lr, r5, #32
   84374:	db0d      	blt.n	84392 <__adddf3+0xb2>
   84376:	fa02 fc0e 	lsl.w	ip, r2, lr
   8437a:	fa22 f205 	lsr.w	r2, r2, r5
   8437e:	1880      	adds	r0, r0, r2
   84380:	f141 0100 	adc.w	r1, r1, #0
   84384:	fa03 f20e 	lsl.w	r2, r3, lr
   84388:	1880      	adds	r0, r0, r2
   8438a:	fa43 f305 	asr.w	r3, r3, r5
   8438e:	4159      	adcs	r1, r3
   84390:	e00e      	b.n	843b0 <__adddf3+0xd0>
   84392:	f1a5 0520 	sub.w	r5, r5, #32
   84396:	f10e 0e20 	add.w	lr, lr, #32
   8439a:	2a01      	cmp	r2, #1
   8439c:	fa03 fc0e 	lsl.w	ip, r3, lr
   843a0:	bf28      	it	cs
   843a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   843a6:	fa43 f305 	asr.w	r3, r3, r5
   843aa:	18c0      	adds	r0, r0, r3
   843ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   843b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   843b4:	d507      	bpl.n	843c6 <__adddf3+0xe6>
   843b6:	f04f 0e00 	mov.w	lr, #0
   843ba:	f1dc 0c00 	rsbs	ip, ip, #0
   843be:	eb7e 0000 	sbcs.w	r0, lr, r0
   843c2:	eb6e 0101 	sbc.w	r1, lr, r1
   843c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   843ca:	d31b      	bcc.n	84404 <__adddf3+0x124>
   843cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   843d0:	d30c      	bcc.n	843ec <__adddf3+0x10c>
   843d2:	0849      	lsrs	r1, r1, #1
   843d4:	ea5f 0030 	movs.w	r0, r0, rrx
   843d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   843dc:	f104 0401 	add.w	r4, r4, #1
   843e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   843e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   843e8:	f080 809a 	bcs.w	84520 <__adddf3+0x240>
   843ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   843f0:	bf08      	it	eq
   843f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   843f6:	f150 0000 	adcs.w	r0, r0, #0
   843fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   843fe:	ea41 0105 	orr.w	r1, r1, r5
   84402:	bd30      	pop	{r4, r5, pc}
   84404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   84408:	4140      	adcs	r0, r0
   8440a:	eb41 0101 	adc.w	r1, r1, r1
   8440e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84412:	f1a4 0401 	sub.w	r4, r4, #1
   84416:	d1e9      	bne.n	843ec <__adddf3+0x10c>
   84418:	f091 0f00 	teq	r1, #0
   8441c:	bf04      	itt	eq
   8441e:	4601      	moveq	r1, r0
   84420:	2000      	moveq	r0, #0
   84422:	fab1 f381 	clz	r3, r1
   84426:	bf08      	it	eq
   84428:	3320      	addeq	r3, #32
   8442a:	f1a3 030b 	sub.w	r3, r3, #11
   8442e:	f1b3 0220 	subs.w	r2, r3, #32
   84432:	da0c      	bge.n	8444e <__adddf3+0x16e>
   84434:	320c      	adds	r2, #12
   84436:	dd08      	ble.n	8444a <__adddf3+0x16a>
   84438:	f102 0c14 	add.w	ip, r2, #20
   8443c:	f1c2 020c 	rsb	r2, r2, #12
   84440:	fa01 f00c 	lsl.w	r0, r1, ip
   84444:	fa21 f102 	lsr.w	r1, r1, r2
   84448:	e00c      	b.n	84464 <__adddf3+0x184>
   8444a:	f102 0214 	add.w	r2, r2, #20
   8444e:	bfd8      	it	le
   84450:	f1c2 0c20 	rsble	ip, r2, #32
   84454:	fa01 f102 	lsl.w	r1, r1, r2
   84458:	fa20 fc0c 	lsr.w	ip, r0, ip
   8445c:	bfdc      	itt	le
   8445e:	ea41 010c 	orrle.w	r1, r1, ip
   84462:	4090      	lslle	r0, r2
   84464:	1ae4      	subs	r4, r4, r3
   84466:	bfa2      	ittt	ge
   84468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8446c:	4329      	orrge	r1, r5
   8446e:	bd30      	popge	{r4, r5, pc}
   84470:	ea6f 0404 	mvn.w	r4, r4
   84474:	3c1f      	subs	r4, #31
   84476:	da1c      	bge.n	844b2 <__adddf3+0x1d2>
   84478:	340c      	adds	r4, #12
   8447a:	dc0e      	bgt.n	8449a <__adddf3+0x1ba>
   8447c:	f104 0414 	add.w	r4, r4, #20
   84480:	f1c4 0220 	rsb	r2, r4, #32
   84484:	fa20 f004 	lsr.w	r0, r0, r4
   84488:	fa01 f302 	lsl.w	r3, r1, r2
   8448c:	ea40 0003 	orr.w	r0, r0, r3
   84490:	fa21 f304 	lsr.w	r3, r1, r4
   84494:	ea45 0103 	orr.w	r1, r5, r3
   84498:	bd30      	pop	{r4, r5, pc}
   8449a:	f1c4 040c 	rsb	r4, r4, #12
   8449e:	f1c4 0220 	rsb	r2, r4, #32
   844a2:	fa20 f002 	lsr.w	r0, r0, r2
   844a6:	fa01 f304 	lsl.w	r3, r1, r4
   844aa:	ea40 0003 	orr.w	r0, r0, r3
   844ae:	4629      	mov	r1, r5
   844b0:	bd30      	pop	{r4, r5, pc}
   844b2:	fa21 f004 	lsr.w	r0, r1, r4
   844b6:	4629      	mov	r1, r5
   844b8:	bd30      	pop	{r4, r5, pc}
   844ba:	f094 0f00 	teq	r4, #0
   844be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   844c2:	bf06      	itte	eq
   844c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   844c8:	3401      	addeq	r4, #1
   844ca:	3d01      	subne	r5, #1
   844cc:	e74e      	b.n	8436c <__adddf3+0x8c>
   844ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   844d2:	bf18      	it	ne
   844d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   844d8:	d029      	beq.n	8452e <__adddf3+0x24e>
   844da:	ea94 0f05 	teq	r4, r5
   844de:	bf08      	it	eq
   844e0:	ea90 0f02 	teqeq	r0, r2
   844e4:	d005      	beq.n	844f2 <__adddf3+0x212>
   844e6:	ea54 0c00 	orrs.w	ip, r4, r0
   844ea:	bf04      	itt	eq
   844ec:	4619      	moveq	r1, r3
   844ee:	4610      	moveq	r0, r2
   844f0:	bd30      	pop	{r4, r5, pc}
   844f2:	ea91 0f03 	teq	r1, r3
   844f6:	bf1e      	ittt	ne
   844f8:	2100      	movne	r1, #0
   844fa:	2000      	movne	r0, #0
   844fc:	bd30      	popne	{r4, r5, pc}
   844fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84502:	d105      	bne.n	84510 <__adddf3+0x230>
   84504:	0040      	lsls	r0, r0, #1
   84506:	4149      	adcs	r1, r1
   84508:	bf28      	it	cs
   8450a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8450e:	bd30      	pop	{r4, r5, pc}
   84510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   84514:	bf3c      	itt	cc
   84516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8451a:	bd30      	popcc	{r4, r5, pc}
   8451c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   84524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84528:	f04f 0000 	mov.w	r0, #0
   8452c:	bd30      	pop	{r4, r5, pc}
   8452e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84532:	bf1a      	itte	ne
   84534:	4619      	movne	r1, r3
   84536:	4610      	movne	r0, r2
   84538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8453c:	bf1c      	itt	ne
   8453e:	460b      	movne	r3, r1
   84540:	4602      	movne	r2, r0
   84542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   84546:	bf06      	itte	eq
   84548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8454c:	ea91 0f03 	teqeq	r1, r3
   84550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   84554:	bd30      	pop	{r4, r5, pc}
   84556:	bf00      	nop

00084558 <__aeabi_ui2d>:
   84558:	f090 0f00 	teq	r0, #0
   8455c:	bf04      	itt	eq
   8455e:	2100      	moveq	r1, #0
   84560:	4770      	bxeq	lr
   84562:	b530      	push	{r4, r5, lr}
   84564:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84568:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8456c:	f04f 0500 	mov.w	r5, #0
   84570:	f04f 0100 	mov.w	r1, #0
   84574:	e750      	b.n	84418 <__adddf3+0x138>
   84576:	bf00      	nop

00084578 <__aeabi_i2d>:
   84578:	f090 0f00 	teq	r0, #0
   8457c:	bf04      	itt	eq
   8457e:	2100      	moveq	r1, #0
   84580:	4770      	bxeq	lr
   84582:	b530      	push	{r4, r5, lr}
   84584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8458c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84590:	bf48      	it	mi
   84592:	4240      	negmi	r0, r0
   84594:	f04f 0100 	mov.w	r1, #0
   84598:	e73e      	b.n	84418 <__adddf3+0x138>
   8459a:	bf00      	nop

0008459c <__aeabi_f2d>:
   8459c:	0042      	lsls	r2, r0, #1
   8459e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   845a2:	ea4f 0131 	mov.w	r1, r1, rrx
   845a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   845aa:	bf1f      	itttt	ne
   845ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   845b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   845b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   845b8:	4770      	bxne	lr
   845ba:	f092 0f00 	teq	r2, #0
   845be:	bf14      	ite	ne
   845c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   845c4:	4770      	bxeq	lr
   845c6:	b530      	push	{r4, r5, lr}
   845c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   845cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   845d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   845d4:	e720      	b.n	84418 <__adddf3+0x138>
   845d6:	bf00      	nop

000845d8 <__aeabi_ul2d>:
   845d8:	ea50 0201 	orrs.w	r2, r0, r1
   845dc:	bf08      	it	eq
   845de:	4770      	bxeq	lr
   845e0:	b530      	push	{r4, r5, lr}
   845e2:	f04f 0500 	mov.w	r5, #0
   845e6:	e00a      	b.n	845fe <__aeabi_l2d+0x16>

000845e8 <__aeabi_l2d>:
   845e8:	ea50 0201 	orrs.w	r2, r0, r1
   845ec:	bf08      	it	eq
   845ee:	4770      	bxeq	lr
   845f0:	b530      	push	{r4, r5, lr}
   845f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   845f6:	d502      	bpl.n	845fe <__aeabi_l2d+0x16>
   845f8:	4240      	negs	r0, r0
   845fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   845fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84602:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8460a:	f43f aedc 	beq.w	843c6 <__adddf3+0xe6>
   8460e:	f04f 0203 	mov.w	r2, #3
   84612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   84616:	bf18      	it	ne
   84618:	3203      	addne	r2, #3
   8461a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8461e:	bf18      	it	ne
   84620:	3203      	addne	r2, #3
   84622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   84626:	f1c2 0320 	rsb	r3, r2, #32
   8462a:	fa00 fc03 	lsl.w	ip, r0, r3
   8462e:	fa20 f002 	lsr.w	r0, r0, r2
   84632:	fa01 fe03 	lsl.w	lr, r1, r3
   84636:	ea40 000e 	orr.w	r0, r0, lr
   8463a:	fa21 f102 	lsr.w	r1, r1, r2
   8463e:	4414      	add	r4, r2
   84640:	e6c1      	b.n	843c6 <__adddf3+0xe6>
   84642:	bf00      	nop

00084644 <__aeabi_d2uiz>:
   84644:	004a      	lsls	r2, r1, #1
   84646:	d211      	bcs.n	8466c <__aeabi_d2uiz+0x28>
   84648:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8464c:	d211      	bcs.n	84672 <__aeabi_d2uiz+0x2e>
   8464e:	d50d      	bpl.n	8466c <__aeabi_d2uiz+0x28>
   84650:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   84654:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   84658:	d40e      	bmi.n	84678 <__aeabi_d2uiz+0x34>
   8465a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8465e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84662:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   84666:	fa23 f002 	lsr.w	r0, r3, r2
   8466a:	4770      	bx	lr
   8466c:	f04f 0000 	mov.w	r0, #0
   84670:	4770      	bx	lr
   84672:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   84676:	d102      	bne.n	8467e <__aeabi_d2uiz+0x3a>
   84678:	f04f 30ff 	mov.w	r0, #4294967295
   8467c:	4770      	bx	lr
   8467e:	f04f 0000 	mov.w	r0, #0
   84682:	4770      	bx	lr

00084684 <__libc_init_array>:
   84684:	b570      	push	{r4, r5, r6, lr}
   84686:	4e0f      	ldr	r6, [pc, #60]	; (846c4 <__libc_init_array+0x40>)
   84688:	4d0f      	ldr	r5, [pc, #60]	; (846c8 <__libc_init_array+0x44>)
   8468a:	1b76      	subs	r6, r6, r5
   8468c:	10b6      	asrs	r6, r6, #2
   8468e:	bf18      	it	ne
   84690:	2400      	movne	r4, #0
   84692:	d005      	beq.n	846a0 <__libc_init_array+0x1c>
   84694:	3401      	adds	r4, #1
   84696:	f855 3b04 	ldr.w	r3, [r5], #4
   8469a:	4798      	blx	r3
   8469c:	42a6      	cmp	r6, r4
   8469e:	d1f9      	bne.n	84694 <__libc_init_array+0x10>
   846a0:	4e0a      	ldr	r6, [pc, #40]	; (846cc <__libc_init_array+0x48>)
   846a2:	4d0b      	ldr	r5, [pc, #44]	; (846d0 <__libc_init_array+0x4c>)
   846a4:	f003 f810 	bl	876c8 <_init>
   846a8:	1b76      	subs	r6, r6, r5
   846aa:	10b6      	asrs	r6, r6, #2
   846ac:	bf18      	it	ne
   846ae:	2400      	movne	r4, #0
   846b0:	d006      	beq.n	846c0 <__libc_init_array+0x3c>
   846b2:	3401      	adds	r4, #1
   846b4:	f855 3b04 	ldr.w	r3, [r5], #4
   846b8:	4798      	blx	r3
   846ba:	42a6      	cmp	r6, r4
   846bc:	d1f9      	bne.n	846b2 <__libc_init_array+0x2e>
   846be:	bd70      	pop	{r4, r5, r6, pc}
   846c0:	bd70      	pop	{r4, r5, r6, pc}
   846c2:	bf00      	nop
   846c4:	000876d4 	.word	0x000876d4
   846c8:	000876d4 	.word	0x000876d4
   846cc:	000876dc 	.word	0x000876dc
   846d0:	000876d4 	.word	0x000876d4

000846d4 <iprintf>:
   846d4:	b40f      	push	{r0, r1, r2, r3}
   846d6:	b510      	push	{r4, lr}
   846d8:	4b07      	ldr	r3, [pc, #28]	; (846f8 <iprintf+0x24>)
   846da:	b082      	sub	sp, #8
   846dc:	ac04      	add	r4, sp, #16
   846de:	f854 2b04 	ldr.w	r2, [r4], #4
   846e2:	6818      	ldr	r0, [r3, #0]
   846e4:	4623      	mov	r3, r4
   846e6:	6881      	ldr	r1, [r0, #8]
   846e8:	9401      	str	r4, [sp, #4]
   846ea:	f000 f96f 	bl	849cc <_vfiprintf_r>
   846ee:	b002      	add	sp, #8
   846f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   846f4:	b004      	add	sp, #16
   846f6:	4770      	bx	lr
   846f8:	200704d8 	.word	0x200704d8

000846fc <memset>:
   846fc:	b470      	push	{r4, r5, r6}
   846fe:	0784      	lsls	r4, r0, #30
   84700:	d046      	beq.n	84790 <memset+0x94>
   84702:	1e54      	subs	r4, r2, #1
   84704:	2a00      	cmp	r2, #0
   84706:	d041      	beq.n	8478c <memset+0x90>
   84708:	b2cd      	uxtb	r5, r1
   8470a:	4603      	mov	r3, r0
   8470c:	e002      	b.n	84714 <memset+0x18>
   8470e:	1e62      	subs	r2, r4, #1
   84710:	b3e4      	cbz	r4, 8478c <memset+0x90>
   84712:	4614      	mov	r4, r2
   84714:	f803 5b01 	strb.w	r5, [r3], #1
   84718:	079a      	lsls	r2, r3, #30
   8471a:	d1f8      	bne.n	8470e <memset+0x12>
   8471c:	2c03      	cmp	r4, #3
   8471e:	d92e      	bls.n	8477e <memset+0x82>
   84720:	b2cd      	uxtb	r5, r1
   84722:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84726:	2c0f      	cmp	r4, #15
   84728:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8472c:	d919      	bls.n	84762 <memset+0x66>
   8472e:	4626      	mov	r6, r4
   84730:	f103 0210 	add.w	r2, r3, #16
   84734:	3e10      	subs	r6, #16
   84736:	2e0f      	cmp	r6, #15
   84738:	f842 5c10 	str.w	r5, [r2, #-16]
   8473c:	f842 5c0c 	str.w	r5, [r2, #-12]
   84740:	f842 5c08 	str.w	r5, [r2, #-8]
   84744:	f842 5c04 	str.w	r5, [r2, #-4]
   84748:	f102 0210 	add.w	r2, r2, #16
   8474c:	d8f2      	bhi.n	84734 <memset+0x38>
   8474e:	f1a4 0210 	sub.w	r2, r4, #16
   84752:	f022 020f 	bic.w	r2, r2, #15
   84756:	f004 040f 	and.w	r4, r4, #15
   8475a:	3210      	adds	r2, #16
   8475c:	2c03      	cmp	r4, #3
   8475e:	4413      	add	r3, r2
   84760:	d90d      	bls.n	8477e <memset+0x82>
   84762:	461e      	mov	r6, r3
   84764:	4622      	mov	r2, r4
   84766:	3a04      	subs	r2, #4
   84768:	2a03      	cmp	r2, #3
   8476a:	f846 5b04 	str.w	r5, [r6], #4
   8476e:	d8fa      	bhi.n	84766 <memset+0x6a>
   84770:	1f22      	subs	r2, r4, #4
   84772:	f022 0203 	bic.w	r2, r2, #3
   84776:	3204      	adds	r2, #4
   84778:	4413      	add	r3, r2
   8477a:	f004 0403 	and.w	r4, r4, #3
   8477e:	b12c      	cbz	r4, 8478c <memset+0x90>
   84780:	b2c9      	uxtb	r1, r1
   84782:	441c      	add	r4, r3
   84784:	f803 1b01 	strb.w	r1, [r3], #1
   84788:	42a3      	cmp	r3, r4
   8478a:	d1fb      	bne.n	84784 <memset+0x88>
   8478c:	bc70      	pop	{r4, r5, r6}
   8478e:	4770      	bx	lr
   84790:	4614      	mov	r4, r2
   84792:	4603      	mov	r3, r0
   84794:	e7c2      	b.n	8471c <memset+0x20>
   84796:	bf00      	nop

00084798 <setbuf>:
   84798:	2900      	cmp	r1, #0
   8479a:	bf0c      	ite	eq
   8479c:	2202      	moveq	r2, #2
   8479e:	2200      	movne	r2, #0
   847a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   847a4:	f000 b800 	b.w	847a8 <setvbuf>

000847a8 <setvbuf>:
   847a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   847ac:	4d51      	ldr	r5, [pc, #324]	; (848f4 <setvbuf+0x14c>)
   847ae:	b083      	sub	sp, #12
   847b0:	682d      	ldr	r5, [r5, #0]
   847b2:	4604      	mov	r4, r0
   847b4:	460f      	mov	r7, r1
   847b6:	4690      	mov	r8, r2
   847b8:	461e      	mov	r6, r3
   847ba:	b115      	cbz	r5, 847c2 <setvbuf+0x1a>
   847bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   847be:	2b00      	cmp	r3, #0
   847c0:	d079      	beq.n	848b6 <setvbuf+0x10e>
   847c2:	f1b8 0f02 	cmp.w	r8, #2
   847c6:	d004      	beq.n	847d2 <setvbuf+0x2a>
   847c8:	f1b8 0f01 	cmp.w	r8, #1
   847cc:	d87f      	bhi.n	848ce <setvbuf+0x126>
   847ce:	2e00      	cmp	r6, #0
   847d0:	db7d      	blt.n	848ce <setvbuf+0x126>
   847d2:	4621      	mov	r1, r4
   847d4:	4628      	mov	r0, r5
   847d6:	f001 f93b 	bl	85a50 <_fflush_r>
   847da:	6b21      	ldr	r1, [r4, #48]	; 0x30
   847dc:	b141      	cbz	r1, 847f0 <setvbuf+0x48>
   847de:	f104 0340 	add.w	r3, r4, #64	; 0x40
   847e2:	4299      	cmp	r1, r3
   847e4:	d002      	beq.n	847ec <setvbuf+0x44>
   847e6:	4628      	mov	r0, r5
   847e8:	f001 fa8e 	bl	85d08 <_free_r>
   847ec:	2300      	movs	r3, #0
   847ee:	6323      	str	r3, [r4, #48]	; 0x30
   847f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   847f4:	2200      	movs	r2, #0
   847f6:	61a2      	str	r2, [r4, #24]
   847f8:	6062      	str	r2, [r4, #4]
   847fa:	061a      	lsls	r2, r3, #24
   847fc:	d454      	bmi.n	848a8 <setvbuf+0x100>
   847fe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   84802:	f023 0303 	bic.w	r3, r3, #3
   84806:	f1b8 0f02 	cmp.w	r8, #2
   8480a:	81a3      	strh	r3, [r4, #12]
   8480c:	d039      	beq.n	84882 <setvbuf+0xda>
   8480e:	ab01      	add	r3, sp, #4
   84810:	466a      	mov	r2, sp
   84812:	4621      	mov	r1, r4
   84814:	4628      	mov	r0, r5
   84816:	f001 fd15 	bl	86244 <__swhatbuf_r>
   8481a:	89a3      	ldrh	r3, [r4, #12]
   8481c:	4318      	orrs	r0, r3
   8481e:	81a0      	strh	r0, [r4, #12]
   84820:	b326      	cbz	r6, 8486c <setvbuf+0xc4>
   84822:	b327      	cbz	r7, 8486e <setvbuf+0xc6>
   84824:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84826:	2b00      	cmp	r3, #0
   84828:	d04d      	beq.n	848c6 <setvbuf+0x11e>
   8482a:	9b00      	ldr	r3, [sp, #0]
   8482c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   84830:	429e      	cmp	r6, r3
   84832:	bf1c      	itt	ne
   84834:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   84838:	81a0      	strhne	r0, [r4, #12]
   8483a:	f1b8 0f01 	cmp.w	r8, #1
   8483e:	bf08      	it	eq
   84840:	f040 0001 	orreq.w	r0, r0, #1
   84844:	b283      	uxth	r3, r0
   84846:	bf08      	it	eq
   84848:	81a0      	strheq	r0, [r4, #12]
   8484a:	f003 0008 	and.w	r0, r3, #8
   8484e:	b280      	uxth	r0, r0
   84850:	6027      	str	r7, [r4, #0]
   84852:	6127      	str	r7, [r4, #16]
   84854:	6166      	str	r6, [r4, #20]
   84856:	b318      	cbz	r0, 848a0 <setvbuf+0xf8>
   84858:	f013 0001 	ands.w	r0, r3, #1
   8485c:	d02f      	beq.n	848be <setvbuf+0x116>
   8485e:	2000      	movs	r0, #0
   84860:	4276      	negs	r6, r6
   84862:	61a6      	str	r6, [r4, #24]
   84864:	60a0      	str	r0, [r4, #8]
   84866:	b003      	add	sp, #12
   84868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8486c:	9e00      	ldr	r6, [sp, #0]
   8486e:	4630      	mov	r0, r6
   84870:	f001 fd5c 	bl	8632c <malloc>
   84874:	4607      	mov	r7, r0
   84876:	b368      	cbz	r0, 848d4 <setvbuf+0x12c>
   84878:	89a3      	ldrh	r3, [r4, #12]
   8487a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8487e:	81a3      	strh	r3, [r4, #12]
   84880:	e7d0      	b.n	84824 <setvbuf+0x7c>
   84882:	2000      	movs	r0, #0
   84884:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84888:	f043 0302 	orr.w	r3, r3, #2
   8488c:	2500      	movs	r5, #0
   8488e:	2101      	movs	r1, #1
   84890:	81a3      	strh	r3, [r4, #12]
   84892:	60a5      	str	r5, [r4, #8]
   84894:	6022      	str	r2, [r4, #0]
   84896:	6122      	str	r2, [r4, #16]
   84898:	6161      	str	r1, [r4, #20]
   8489a:	b003      	add	sp, #12
   8489c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   848a0:	60a0      	str	r0, [r4, #8]
   848a2:	b003      	add	sp, #12
   848a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   848a8:	6921      	ldr	r1, [r4, #16]
   848aa:	4628      	mov	r0, r5
   848ac:	f001 fa2c 	bl	85d08 <_free_r>
   848b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   848b4:	e7a3      	b.n	847fe <setvbuf+0x56>
   848b6:	4628      	mov	r0, r5
   848b8:	f001 f95e 	bl	85b78 <__sinit>
   848bc:	e781      	b.n	847c2 <setvbuf+0x1a>
   848be:	60a6      	str	r6, [r4, #8]
   848c0:	b003      	add	sp, #12
   848c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   848c6:	4628      	mov	r0, r5
   848c8:	f001 f956 	bl	85b78 <__sinit>
   848cc:	e7ad      	b.n	8482a <setvbuf+0x82>
   848ce:	f04f 30ff 	mov.w	r0, #4294967295
   848d2:	e7e2      	b.n	8489a <setvbuf+0xf2>
   848d4:	f8dd 9000 	ldr.w	r9, [sp]
   848d8:	45b1      	cmp	r9, r6
   848da:	d006      	beq.n	848ea <setvbuf+0x142>
   848dc:	4648      	mov	r0, r9
   848de:	f001 fd25 	bl	8632c <malloc>
   848e2:	4607      	mov	r7, r0
   848e4:	b108      	cbz	r0, 848ea <setvbuf+0x142>
   848e6:	464e      	mov	r6, r9
   848e8:	e7c6      	b.n	84878 <setvbuf+0xd0>
   848ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   848ee:	f04f 30ff 	mov.w	r0, #4294967295
   848f2:	e7c7      	b.n	84884 <setvbuf+0xdc>
   848f4:	200704d8 	.word	0x200704d8

000848f8 <strlen>:
   848f8:	f020 0103 	bic.w	r1, r0, #3
   848fc:	f010 0003 	ands.w	r0, r0, #3
   84900:	f1c0 0000 	rsb	r0, r0, #0
   84904:	f851 3b04 	ldr.w	r3, [r1], #4
   84908:	f100 0c04 	add.w	ip, r0, #4
   8490c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84910:	f06f 0200 	mvn.w	r2, #0
   84914:	bf1c      	itt	ne
   84916:	fa22 f20c 	lsrne.w	r2, r2, ip
   8491a:	4313      	orrne	r3, r2
   8491c:	f04f 0c01 	mov.w	ip, #1
   84920:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84924:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84928:	eba3 020c 	sub.w	r2, r3, ip
   8492c:	ea22 0203 	bic.w	r2, r2, r3
   84930:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84934:	bf04      	itt	eq
   84936:	f851 3b04 	ldreq.w	r3, [r1], #4
   8493a:	3004      	addeq	r0, #4
   8493c:	d0f4      	beq.n	84928 <strlen+0x30>
   8493e:	f1c2 0100 	rsb	r1, r2, #0
   84942:	ea02 0201 	and.w	r2, r2, r1
   84946:	fab2 f282 	clz	r2, r2
   8494a:	f1c2 021f 	rsb	r2, r2, #31
   8494e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84952:	4770      	bx	lr

00084954 <__sprint_r.part.0>:
   84954:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8495a:	049c      	lsls	r4, r3, #18
   8495c:	4692      	mov	sl, r2
   8495e:	d52c      	bpl.n	849ba <__sprint_r.part.0+0x66>
   84960:	6893      	ldr	r3, [r2, #8]
   84962:	6812      	ldr	r2, [r2, #0]
   84964:	b33b      	cbz	r3, 849b6 <__sprint_r.part.0+0x62>
   84966:	460f      	mov	r7, r1
   84968:	4680      	mov	r8, r0
   8496a:	f102 0908 	add.w	r9, r2, #8
   8496e:	e919 0060 	ldmdb	r9, {r5, r6}
   84972:	08b6      	lsrs	r6, r6, #2
   84974:	d017      	beq.n	849a6 <__sprint_r.part.0+0x52>
   84976:	3d04      	subs	r5, #4
   84978:	2400      	movs	r4, #0
   8497a:	e001      	b.n	84980 <__sprint_r.part.0+0x2c>
   8497c:	42a6      	cmp	r6, r4
   8497e:	d010      	beq.n	849a2 <__sprint_r.part.0+0x4e>
   84980:	463a      	mov	r2, r7
   84982:	f855 1f04 	ldr.w	r1, [r5, #4]!
   84986:	4640      	mov	r0, r8
   84988:	f001 f95e 	bl	85c48 <_fputwc_r>
   8498c:	1c43      	adds	r3, r0, #1
   8498e:	f104 0401 	add.w	r4, r4, #1
   84992:	d1f3      	bne.n	8497c <__sprint_r.part.0+0x28>
   84994:	2300      	movs	r3, #0
   84996:	f8ca 3008 	str.w	r3, [sl, #8]
   8499a:	f8ca 3004 	str.w	r3, [sl, #4]
   8499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   849a2:	f8da 3008 	ldr.w	r3, [sl, #8]
   849a6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   849aa:	f8ca 3008 	str.w	r3, [sl, #8]
   849ae:	f109 0908 	add.w	r9, r9, #8
   849b2:	2b00      	cmp	r3, #0
   849b4:	d1db      	bne.n	8496e <__sprint_r.part.0+0x1a>
   849b6:	2000      	movs	r0, #0
   849b8:	e7ec      	b.n	84994 <__sprint_r.part.0+0x40>
   849ba:	f001 fa8d 	bl	85ed8 <__sfvwrite_r>
   849be:	2300      	movs	r3, #0
   849c0:	f8ca 3008 	str.w	r3, [sl, #8]
   849c4:	f8ca 3004 	str.w	r3, [sl, #4]
   849c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000849cc <_vfiprintf_r>:
   849cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   849d0:	b0ab      	sub	sp, #172	; 0xac
   849d2:	461c      	mov	r4, r3
   849d4:	9100      	str	r1, [sp, #0]
   849d6:	4690      	mov	r8, r2
   849d8:	9304      	str	r3, [sp, #16]
   849da:	9005      	str	r0, [sp, #20]
   849dc:	b118      	cbz	r0, 849e6 <_vfiprintf_r+0x1a>
   849de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   849e0:	2b00      	cmp	r3, #0
   849e2:	f000 80de 	beq.w	84ba2 <_vfiprintf_r+0x1d6>
   849e6:	9800      	ldr	r0, [sp, #0]
   849e8:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   849ec:	b28a      	uxth	r2, r1
   849ee:	0495      	lsls	r5, r2, #18
   849f0:	d407      	bmi.n	84a02 <_vfiprintf_r+0x36>
   849f2:	6e43      	ldr	r3, [r0, #100]	; 0x64
   849f4:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   849f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   849fc:	8182      	strh	r2, [r0, #12]
   849fe:	6643      	str	r3, [r0, #100]	; 0x64
   84a00:	b292      	uxth	r2, r2
   84a02:	0711      	lsls	r1, r2, #28
   84a04:	f140 80b1 	bpl.w	84b6a <_vfiprintf_r+0x19e>
   84a08:	9b00      	ldr	r3, [sp, #0]
   84a0a:	691b      	ldr	r3, [r3, #16]
   84a0c:	2b00      	cmp	r3, #0
   84a0e:	f000 80ac 	beq.w	84b6a <_vfiprintf_r+0x19e>
   84a12:	f002 021a 	and.w	r2, r2, #26
   84a16:	2a0a      	cmp	r2, #10
   84a18:	f000 80b5 	beq.w	84b86 <_vfiprintf_r+0x1ba>
   84a1c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   84a20:	46d3      	mov	fp, sl
   84a22:	2300      	movs	r3, #0
   84a24:	9302      	str	r3, [sp, #8]
   84a26:	930f      	str	r3, [sp, #60]	; 0x3c
   84a28:	930e      	str	r3, [sp, #56]	; 0x38
   84a2a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   84a2e:	f898 3000 	ldrb.w	r3, [r8]
   84a32:	4644      	mov	r4, r8
   84a34:	b1fb      	cbz	r3, 84a76 <_vfiprintf_r+0xaa>
   84a36:	2b25      	cmp	r3, #37	; 0x25
   84a38:	d102      	bne.n	84a40 <_vfiprintf_r+0x74>
   84a3a:	e01c      	b.n	84a76 <_vfiprintf_r+0xaa>
   84a3c:	2b25      	cmp	r3, #37	; 0x25
   84a3e:	d003      	beq.n	84a48 <_vfiprintf_r+0x7c>
   84a40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84a44:	2b00      	cmp	r3, #0
   84a46:	d1f9      	bne.n	84a3c <_vfiprintf_r+0x70>
   84a48:	ebc8 0504 	rsb	r5, r8, r4
   84a4c:	b19d      	cbz	r5, 84a76 <_vfiprintf_r+0xaa>
   84a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a52:	3301      	adds	r3, #1
   84a54:	442a      	add	r2, r5
   84a56:	2b07      	cmp	r3, #7
   84a58:	f8cb 8000 	str.w	r8, [fp]
   84a5c:	f8cb 5004 	str.w	r5, [fp, #4]
   84a60:	920f      	str	r2, [sp, #60]	; 0x3c
   84a62:	930e      	str	r3, [sp, #56]	; 0x38
   84a64:	dd7b      	ble.n	84b5e <_vfiprintf_r+0x192>
   84a66:	2a00      	cmp	r2, #0
   84a68:	f040 851f 	bne.w	854aa <_vfiprintf_r+0xade>
   84a6c:	46d3      	mov	fp, sl
   84a6e:	9b02      	ldr	r3, [sp, #8]
   84a70:	920e      	str	r2, [sp, #56]	; 0x38
   84a72:	442b      	add	r3, r5
   84a74:	9302      	str	r3, [sp, #8]
   84a76:	7823      	ldrb	r3, [r4, #0]
   84a78:	2b00      	cmp	r3, #0
   84a7a:	f000 843b 	beq.w	852f4 <_vfiprintf_r+0x928>
   84a7e:	f04f 0300 	mov.w	r3, #0
   84a82:	2100      	movs	r1, #0
   84a84:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84a88:	f104 0801 	add.w	r8, r4, #1
   84a8c:	7863      	ldrb	r3, [r4, #1]
   84a8e:	4608      	mov	r0, r1
   84a90:	460e      	mov	r6, r1
   84a92:	460c      	mov	r4, r1
   84a94:	f04f 32ff 	mov.w	r2, #4294967295
   84a98:	9201      	str	r2, [sp, #4]
   84a9a:	f108 0801 	add.w	r8, r8, #1
   84a9e:	f1a3 0220 	sub.w	r2, r3, #32
   84aa2:	2a58      	cmp	r2, #88	; 0x58
   84aa4:	f200 838b 	bhi.w	851be <_vfiprintf_r+0x7f2>
   84aa8:	e8df f012 	tbh	[pc, r2, lsl #1]
   84aac:	0389033d 	.word	0x0389033d
   84ab0:	03450389 	.word	0x03450389
   84ab4:	03890389 	.word	0x03890389
   84ab8:	03890389 	.word	0x03890389
   84abc:	03890389 	.word	0x03890389
   84ac0:	026b007e 	.word	0x026b007e
   84ac4:	00860389 	.word	0x00860389
   84ac8:	03890270 	.word	0x03890270
   84acc:	025d01cc 	.word	0x025d01cc
   84ad0:	025d025d 	.word	0x025d025d
   84ad4:	025d025d 	.word	0x025d025d
   84ad8:	025d025d 	.word	0x025d025d
   84adc:	025d025d 	.word	0x025d025d
   84ae0:	03890389 	.word	0x03890389
   84ae4:	03890389 	.word	0x03890389
   84ae8:	03890389 	.word	0x03890389
   84aec:	03890389 	.word	0x03890389
   84af0:	03890389 	.word	0x03890389
   84af4:	038901d1 	.word	0x038901d1
   84af8:	03890389 	.word	0x03890389
   84afc:	03890389 	.word	0x03890389
   84b00:	03890389 	.word	0x03890389
   84b04:	03890389 	.word	0x03890389
   84b08:	021a0389 	.word	0x021a0389
   84b0c:	03890389 	.word	0x03890389
   84b10:	03890389 	.word	0x03890389
   84b14:	02e50389 	.word	0x02e50389
   84b18:	03890389 	.word	0x03890389
   84b1c:	03890308 	.word	0x03890308
   84b20:	03890389 	.word	0x03890389
   84b24:	03890389 	.word	0x03890389
   84b28:	03890389 	.word	0x03890389
   84b2c:	03890389 	.word	0x03890389
   84b30:	032b0389 	.word	0x032b0389
   84b34:	03890382 	.word	0x03890382
   84b38:	03890389 	.word	0x03890389
   84b3c:	0382035e 	.word	0x0382035e
   84b40:	03890389 	.word	0x03890389
   84b44:	03890363 	.word	0x03890363
   84b48:	028d0370 	.word	0x028d0370
   84b4c:	02e0008b 	.word	0x02e0008b
   84b50:	02930389 	.word	0x02930389
   84b54:	02b20389 	.word	0x02b20389
   84b58:	03890389 	.word	0x03890389
   84b5c:	034a      	.short	0x034a
   84b5e:	f10b 0b08 	add.w	fp, fp, #8
   84b62:	9b02      	ldr	r3, [sp, #8]
   84b64:	442b      	add	r3, r5
   84b66:	9302      	str	r3, [sp, #8]
   84b68:	e785      	b.n	84a76 <_vfiprintf_r+0xaa>
   84b6a:	9900      	ldr	r1, [sp, #0]
   84b6c:	9805      	ldr	r0, [sp, #20]
   84b6e:	f000 fe57 	bl	85820 <__swsetup_r>
   84b72:	2800      	cmp	r0, #0
   84b74:	f040 8545 	bne.w	85602 <_vfiprintf_r+0xc36>
   84b78:	9b00      	ldr	r3, [sp, #0]
   84b7a:	899a      	ldrh	r2, [r3, #12]
   84b7c:	f002 021a 	and.w	r2, r2, #26
   84b80:	2a0a      	cmp	r2, #10
   84b82:	f47f af4b 	bne.w	84a1c <_vfiprintf_r+0x50>
   84b86:	9900      	ldr	r1, [sp, #0]
   84b88:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   84b8c:	2b00      	cmp	r3, #0
   84b8e:	f6ff af45 	blt.w	84a1c <_vfiprintf_r+0x50>
   84b92:	4623      	mov	r3, r4
   84b94:	4642      	mov	r2, r8
   84b96:	9805      	ldr	r0, [sp, #20]
   84b98:	f000 fe0c 	bl	857b4 <__sbprintf>
   84b9c:	b02b      	add	sp, #172	; 0xac
   84b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ba2:	f000 ffe9 	bl	85b78 <__sinit>
   84ba6:	e71e      	b.n	849e6 <_vfiprintf_r+0x1a>
   84ba8:	9a04      	ldr	r2, [sp, #16]
   84baa:	4613      	mov	r3, r2
   84bac:	6814      	ldr	r4, [r2, #0]
   84bae:	3304      	adds	r3, #4
   84bb0:	2c00      	cmp	r4, #0
   84bb2:	9304      	str	r3, [sp, #16]
   84bb4:	da02      	bge.n	84bbc <_vfiprintf_r+0x1f0>
   84bb6:	4264      	negs	r4, r4
   84bb8:	f046 0604 	orr.w	r6, r6, #4
   84bbc:	f898 3000 	ldrb.w	r3, [r8]
   84bc0:	e76b      	b.n	84a9a <_vfiprintf_r+0xce>
   84bc2:	f04f 0300 	mov.w	r3, #0
   84bc6:	9804      	ldr	r0, [sp, #16]
   84bc8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84bcc:	4603      	mov	r3, r0
   84bce:	2130      	movs	r1, #48	; 0x30
   84bd0:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   84bd4:	9901      	ldr	r1, [sp, #4]
   84bd6:	2278      	movs	r2, #120	; 0x78
   84bd8:	2900      	cmp	r1, #0
   84bda:	9406      	str	r4, [sp, #24]
   84bdc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   84be0:	6804      	ldr	r4, [r0, #0]
   84be2:	f103 0304 	add.w	r3, r3, #4
   84be6:	f04f 0500 	mov.w	r5, #0
   84bea:	f046 0202 	orr.w	r2, r6, #2
   84bee:	f2c0 850c 	blt.w	8560a <_vfiprintf_r+0xc3e>
   84bf2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84bf6:	ea54 0205 	orrs.w	r2, r4, r5
   84bfa:	f046 0602 	orr.w	r6, r6, #2
   84bfe:	9304      	str	r3, [sp, #16]
   84c00:	f040 84b5 	bne.w	8556e <_vfiprintf_r+0xba2>
   84c04:	48b3      	ldr	r0, [pc, #716]	; (84ed4 <_vfiprintf_r+0x508>)
   84c06:	9b01      	ldr	r3, [sp, #4]
   84c08:	2b00      	cmp	r3, #0
   84c0a:	f040 8462 	bne.w	854d2 <_vfiprintf_r+0xb06>
   84c0e:	4699      	mov	r9, r3
   84c10:	4657      	mov	r7, sl
   84c12:	2300      	movs	r3, #0
   84c14:	9301      	str	r3, [sp, #4]
   84c16:	9303      	str	r3, [sp, #12]
   84c18:	9b01      	ldr	r3, [sp, #4]
   84c1a:	9a03      	ldr	r2, [sp, #12]
   84c1c:	4293      	cmp	r3, r2
   84c1e:	bfb8      	it	lt
   84c20:	4613      	movlt	r3, r2
   84c22:	461d      	mov	r5, r3
   84c24:	f1b9 0f00 	cmp.w	r9, #0
   84c28:	d000      	beq.n	84c2c <_vfiprintf_r+0x260>
   84c2a:	3501      	adds	r5, #1
   84c2c:	f016 0302 	ands.w	r3, r6, #2
   84c30:	9307      	str	r3, [sp, #28]
   84c32:	bf18      	it	ne
   84c34:	3502      	addne	r5, #2
   84c36:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   84c3a:	9308      	str	r3, [sp, #32]
   84c3c:	f040 82e8 	bne.w	85210 <_vfiprintf_r+0x844>
   84c40:	9b06      	ldr	r3, [sp, #24]
   84c42:	1b5c      	subs	r4, r3, r5
   84c44:	2c00      	cmp	r4, #0
   84c46:	f340 82e3 	ble.w	85210 <_vfiprintf_r+0x844>
   84c4a:	2c10      	cmp	r4, #16
   84c4c:	f340 853c 	ble.w	856c8 <_vfiprintf_r+0xcfc>
   84c50:	f8df 9284 	ldr.w	r9, [pc, #644]	; 84ed8 <_vfiprintf_r+0x50c>
   84c54:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   84c58:	46dc      	mov	ip, fp
   84c5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c5c:	46c3      	mov	fp, r8
   84c5e:	2310      	movs	r3, #16
   84c60:	46a8      	mov	r8, r5
   84c62:	4670      	mov	r0, lr
   84c64:	464d      	mov	r5, r9
   84c66:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84c6a:	e007      	b.n	84c7c <_vfiprintf_r+0x2b0>
   84c6c:	f100 0e02 	add.w	lr, r0, #2
   84c70:	4608      	mov	r0, r1
   84c72:	f10c 0c08 	add.w	ip, ip, #8
   84c76:	3c10      	subs	r4, #16
   84c78:	2c10      	cmp	r4, #16
   84c7a:	dd13      	ble.n	84ca4 <_vfiprintf_r+0x2d8>
   84c7c:	1c41      	adds	r1, r0, #1
   84c7e:	3210      	adds	r2, #16
   84c80:	2907      	cmp	r1, #7
   84c82:	920f      	str	r2, [sp, #60]	; 0x3c
   84c84:	f8cc 5000 	str.w	r5, [ip]
   84c88:	f8cc 3004 	str.w	r3, [ip, #4]
   84c8c:	910e      	str	r1, [sp, #56]	; 0x38
   84c8e:	dded      	ble.n	84c6c <_vfiprintf_r+0x2a0>
   84c90:	2a00      	cmp	r2, #0
   84c92:	f040 82a5 	bne.w	851e0 <_vfiprintf_r+0x814>
   84c96:	3c10      	subs	r4, #16
   84c98:	2c10      	cmp	r4, #16
   84c9a:	4610      	mov	r0, r2
   84c9c:	f04f 0e01 	mov.w	lr, #1
   84ca0:	46d4      	mov	ip, sl
   84ca2:	dceb      	bgt.n	84c7c <_vfiprintf_r+0x2b0>
   84ca4:	46a9      	mov	r9, r5
   84ca6:	4670      	mov	r0, lr
   84ca8:	4645      	mov	r5, r8
   84caa:	46d8      	mov	r8, fp
   84cac:	46e3      	mov	fp, ip
   84cae:	4422      	add	r2, r4
   84cb0:	2807      	cmp	r0, #7
   84cb2:	920f      	str	r2, [sp, #60]	; 0x3c
   84cb4:	f8cb 9000 	str.w	r9, [fp]
   84cb8:	f8cb 4004 	str.w	r4, [fp, #4]
   84cbc:	900e      	str	r0, [sp, #56]	; 0x38
   84cbe:	f300 836d 	bgt.w	8539c <_vfiprintf_r+0x9d0>
   84cc2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84cc6:	f10b 0b08 	add.w	fp, fp, #8
   84cca:	f100 0e01 	add.w	lr, r0, #1
   84cce:	2b00      	cmp	r3, #0
   84cd0:	f040 82a7 	bne.w	85222 <_vfiprintf_r+0x856>
   84cd4:	9b07      	ldr	r3, [sp, #28]
   84cd6:	2b00      	cmp	r3, #0
   84cd8:	f000 82ba 	beq.w	85250 <_vfiprintf_r+0x884>
   84cdc:	3202      	adds	r2, #2
   84cde:	a90c      	add	r1, sp, #48	; 0x30
   84ce0:	2302      	movs	r3, #2
   84ce2:	f1be 0f07 	cmp.w	lr, #7
   84ce6:	920f      	str	r2, [sp, #60]	; 0x3c
   84ce8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84cec:	e88b 000a 	stmia.w	fp, {r1, r3}
   84cf0:	f340 8370 	ble.w	853d4 <_vfiprintf_r+0xa08>
   84cf4:	2a00      	cmp	r2, #0
   84cf6:	f040 8400 	bne.w	854fa <_vfiprintf_r+0xb2e>
   84cfa:	9b08      	ldr	r3, [sp, #32]
   84cfc:	f04f 0e01 	mov.w	lr, #1
   84d00:	2b80      	cmp	r3, #128	; 0x80
   84d02:	4610      	mov	r0, r2
   84d04:	46d3      	mov	fp, sl
   84d06:	f040 82a7 	bne.w	85258 <_vfiprintf_r+0x88c>
   84d0a:	9b06      	ldr	r3, [sp, #24]
   84d0c:	1b5c      	subs	r4, r3, r5
   84d0e:	2c00      	cmp	r4, #0
   84d10:	f340 82a2 	ble.w	85258 <_vfiprintf_r+0x88c>
   84d14:	2c10      	cmp	r4, #16
   84d16:	f340 84f8 	ble.w	8570a <_vfiprintf_r+0xd3e>
   84d1a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 84edc <_vfiprintf_r+0x510>
   84d1e:	46de      	mov	lr, fp
   84d20:	2310      	movs	r3, #16
   84d22:	46c3      	mov	fp, r8
   84d24:	46a8      	mov	r8, r5
   84d26:	464d      	mov	r5, r9
   84d28:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84d2c:	e007      	b.n	84d3e <_vfiprintf_r+0x372>
   84d2e:	f100 0c02 	add.w	ip, r0, #2
   84d32:	4608      	mov	r0, r1
   84d34:	f10e 0e08 	add.w	lr, lr, #8
   84d38:	3c10      	subs	r4, #16
   84d3a:	2c10      	cmp	r4, #16
   84d3c:	dd13      	ble.n	84d66 <_vfiprintf_r+0x39a>
   84d3e:	1c41      	adds	r1, r0, #1
   84d40:	3210      	adds	r2, #16
   84d42:	2907      	cmp	r1, #7
   84d44:	920f      	str	r2, [sp, #60]	; 0x3c
   84d46:	f8ce 5000 	str.w	r5, [lr]
   84d4a:	f8ce 3004 	str.w	r3, [lr, #4]
   84d4e:	910e      	str	r1, [sp, #56]	; 0x38
   84d50:	dded      	ble.n	84d2e <_vfiprintf_r+0x362>
   84d52:	2a00      	cmp	r2, #0
   84d54:	f040 830c 	bne.w	85370 <_vfiprintf_r+0x9a4>
   84d58:	3c10      	subs	r4, #16
   84d5a:	2c10      	cmp	r4, #16
   84d5c:	f04f 0c01 	mov.w	ip, #1
   84d60:	4610      	mov	r0, r2
   84d62:	46d6      	mov	lr, sl
   84d64:	dceb      	bgt.n	84d3e <_vfiprintf_r+0x372>
   84d66:	46a9      	mov	r9, r5
   84d68:	4645      	mov	r5, r8
   84d6a:	46d8      	mov	r8, fp
   84d6c:	46f3      	mov	fp, lr
   84d6e:	4422      	add	r2, r4
   84d70:	f1bc 0f07 	cmp.w	ip, #7
   84d74:	920f      	str	r2, [sp, #60]	; 0x3c
   84d76:	f8cb 9000 	str.w	r9, [fp]
   84d7a:	f8cb 4004 	str.w	r4, [fp, #4]
   84d7e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   84d82:	f300 83c8 	bgt.w	85516 <_vfiprintf_r+0xb4a>
   84d86:	9b01      	ldr	r3, [sp, #4]
   84d88:	9903      	ldr	r1, [sp, #12]
   84d8a:	f10b 0b08 	add.w	fp, fp, #8
   84d8e:	1a5c      	subs	r4, r3, r1
   84d90:	2c00      	cmp	r4, #0
   84d92:	f10c 0e01 	add.w	lr, ip, #1
   84d96:	4660      	mov	r0, ip
   84d98:	f300 8264 	bgt.w	85264 <_vfiprintf_r+0x898>
   84d9c:	9903      	ldr	r1, [sp, #12]
   84d9e:	f1be 0f07 	cmp.w	lr, #7
   84da2:	440a      	add	r2, r1
   84da4:	920f      	str	r2, [sp, #60]	; 0x3c
   84da6:	f8cb 7000 	str.w	r7, [fp]
   84daa:	f8cb 1004 	str.w	r1, [fp, #4]
   84dae:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84db2:	f340 82c5 	ble.w	85340 <_vfiprintf_r+0x974>
   84db6:	2a00      	cmp	r2, #0
   84db8:	f040 8332 	bne.w	85420 <_vfiprintf_r+0xa54>
   84dbc:	0770      	lsls	r0, r6, #29
   84dbe:	920e      	str	r2, [sp, #56]	; 0x38
   84dc0:	d538      	bpl.n	84e34 <_vfiprintf_r+0x468>
   84dc2:	9b06      	ldr	r3, [sp, #24]
   84dc4:	1b5c      	subs	r4, r3, r5
   84dc6:	2c00      	cmp	r4, #0
   84dc8:	dd34      	ble.n	84e34 <_vfiprintf_r+0x468>
   84dca:	46d3      	mov	fp, sl
   84dcc:	2c10      	cmp	r4, #16
   84dce:	f340 8496 	ble.w	856fe <_vfiprintf_r+0xd32>
   84dd2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84ed8 <_vfiprintf_r+0x50c>
   84dd6:	990e      	ldr	r1, [sp, #56]	; 0x38
   84dd8:	464f      	mov	r7, r9
   84dda:	2610      	movs	r6, #16
   84ddc:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84de0:	e006      	b.n	84df0 <_vfiprintf_r+0x424>
   84de2:	1c88      	adds	r0, r1, #2
   84de4:	4619      	mov	r1, r3
   84de6:	f10b 0b08 	add.w	fp, fp, #8
   84dea:	3c10      	subs	r4, #16
   84dec:	2c10      	cmp	r4, #16
   84dee:	dd13      	ble.n	84e18 <_vfiprintf_r+0x44c>
   84df0:	1c4b      	adds	r3, r1, #1
   84df2:	3210      	adds	r2, #16
   84df4:	2b07      	cmp	r3, #7
   84df6:	920f      	str	r2, [sp, #60]	; 0x3c
   84df8:	f8cb 7000 	str.w	r7, [fp]
   84dfc:	f8cb 6004 	str.w	r6, [fp, #4]
   84e00:	930e      	str	r3, [sp, #56]	; 0x38
   84e02:	ddee      	ble.n	84de2 <_vfiprintf_r+0x416>
   84e04:	2a00      	cmp	r2, #0
   84e06:	f040 8285 	bne.w	85314 <_vfiprintf_r+0x948>
   84e0a:	3c10      	subs	r4, #16
   84e0c:	2c10      	cmp	r4, #16
   84e0e:	f04f 0001 	mov.w	r0, #1
   84e12:	4611      	mov	r1, r2
   84e14:	46d3      	mov	fp, sl
   84e16:	dceb      	bgt.n	84df0 <_vfiprintf_r+0x424>
   84e18:	46b9      	mov	r9, r7
   84e1a:	4422      	add	r2, r4
   84e1c:	2807      	cmp	r0, #7
   84e1e:	920f      	str	r2, [sp, #60]	; 0x3c
   84e20:	f8cb 9000 	str.w	r9, [fp]
   84e24:	f8cb 4004 	str.w	r4, [fp, #4]
   84e28:	900e      	str	r0, [sp, #56]	; 0x38
   84e2a:	f340 8292 	ble.w	85352 <_vfiprintf_r+0x986>
   84e2e:	2a00      	cmp	r2, #0
   84e30:	f040 840c 	bne.w	8564c <_vfiprintf_r+0xc80>
   84e34:	9b02      	ldr	r3, [sp, #8]
   84e36:	9a06      	ldr	r2, [sp, #24]
   84e38:	42aa      	cmp	r2, r5
   84e3a:	bfac      	ite	ge
   84e3c:	189b      	addge	r3, r3, r2
   84e3e:	195b      	addlt	r3, r3, r5
   84e40:	9302      	str	r3, [sp, #8]
   84e42:	e290      	b.n	85366 <_vfiprintf_r+0x99a>
   84e44:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   84e48:	f898 3000 	ldrb.w	r3, [r8]
   84e4c:	e625      	b.n	84a9a <_vfiprintf_r+0xce>
   84e4e:	9406      	str	r4, [sp, #24]
   84e50:	2900      	cmp	r1, #0
   84e52:	f040 8485 	bne.w	85760 <_vfiprintf_r+0xd94>
   84e56:	f046 0610 	orr.w	r6, r6, #16
   84e5a:	06b3      	lsls	r3, r6, #26
   84e5c:	f140 8304 	bpl.w	85468 <_vfiprintf_r+0xa9c>
   84e60:	9904      	ldr	r1, [sp, #16]
   84e62:	3107      	adds	r1, #7
   84e64:	f021 0107 	bic.w	r1, r1, #7
   84e68:	e9d1 2300 	ldrd	r2, r3, [r1]
   84e6c:	4614      	mov	r4, r2
   84e6e:	461d      	mov	r5, r3
   84e70:	3108      	adds	r1, #8
   84e72:	9104      	str	r1, [sp, #16]
   84e74:	2a00      	cmp	r2, #0
   84e76:	f173 0300 	sbcs.w	r3, r3, #0
   84e7a:	f2c0 837c 	blt.w	85576 <_vfiprintf_r+0xbaa>
   84e7e:	9b01      	ldr	r3, [sp, #4]
   84e80:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84e84:	2b00      	cmp	r3, #0
   84e86:	f2c0 830b 	blt.w	854a0 <_vfiprintf_r+0xad4>
   84e8a:	ea54 0305 	orrs.w	r3, r4, r5
   84e8e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84e92:	f000 80de 	beq.w	85052 <_vfiprintf_r+0x686>
   84e96:	2d00      	cmp	r5, #0
   84e98:	bf08      	it	eq
   84e9a:	2c0a      	cmpeq	r4, #10
   84e9c:	f0c0 80de 	bcc.w	8505c <_vfiprintf_r+0x690>
   84ea0:	4657      	mov	r7, sl
   84ea2:	4620      	mov	r0, r4
   84ea4:	4629      	mov	r1, r5
   84ea6:	220a      	movs	r2, #10
   84ea8:	2300      	movs	r3, #0
   84eaa:	f002 f9f3 	bl	87294 <__aeabi_uldivmod>
   84eae:	3230      	adds	r2, #48	; 0x30
   84eb0:	f807 2d01 	strb.w	r2, [r7, #-1]!
   84eb4:	4620      	mov	r0, r4
   84eb6:	4629      	mov	r1, r5
   84eb8:	2300      	movs	r3, #0
   84eba:	220a      	movs	r2, #10
   84ebc:	f002 f9ea 	bl	87294 <__aeabi_uldivmod>
   84ec0:	4604      	mov	r4, r0
   84ec2:	460d      	mov	r5, r1
   84ec4:	ea54 0305 	orrs.w	r3, r4, r5
   84ec8:	d1eb      	bne.n	84ea2 <_vfiprintf_r+0x4d6>
   84eca:	ebc7 030a 	rsb	r3, r7, sl
   84ece:	9303      	str	r3, [sp, #12]
   84ed0:	e6a2      	b.n	84c18 <_vfiprintf_r+0x24c>
   84ed2:	bf00      	nop
   84ed4:	0008769c 	.word	0x0008769c
   84ed8:	000876b8 	.word	0x000876b8
   84edc:	00087678 	.word	0x00087678
   84ee0:	9406      	str	r4, [sp, #24]
   84ee2:	2900      	cmp	r1, #0
   84ee4:	f040 8438 	bne.w	85758 <_vfiprintf_r+0xd8c>
   84ee8:	f046 0610 	orr.w	r6, r6, #16
   84eec:	f016 0320 	ands.w	r3, r6, #32
   84ef0:	f000 82a1 	beq.w	85436 <_vfiprintf_r+0xa6a>
   84ef4:	f04f 0200 	mov.w	r2, #0
   84ef8:	9b04      	ldr	r3, [sp, #16]
   84efa:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84efe:	3307      	adds	r3, #7
   84f00:	f023 0307 	bic.w	r3, r3, #7
   84f04:	f103 0208 	add.w	r2, r3, #8
   84f08:	e9d3 4500 	ldrd	r4, r5, [r3]
   84f0c:	9b01      	ldr	r3, [sp, #4]
   84f0e:	9204      	str	r2, [sp, #16]
   84f10:	2b00      	cmp	r3, #0
   84f12:	db0a      	blt.n	84f2a <_vfiprintf_r+0x55e>
   84f14:	ea54 0305 	orrs.w	r3, r4, r5
   84f18:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84f1c:	d105      	bne.n	84f2a <_vfiprintf_r+0x55e>
   84f1e:	9b01      	ldr	r3, [sp, #4]
   84f20:	2b00      	cmp	r3, #0
   84f22:	f000 8427 	beq.w	85774 <_vfiprintf_r+0xda8>
   84f26:	2400      	movs	r4, #0
   84f28:	2500      	movs	r5, #0
   84f2a:	f04f 0900 	mov.w	r9, #0
   84f2e:	4657      	mov	r7, sl
   84f30:	08e2      	lsrs	r2, r4, #3
   84f32:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84f36:	08e9      	lsrs	r1, r5, #3
   84f38:	f004 0307 	and.w	r3, r4, #7
   84f3c:	460d      	mov	r5, r1
   84f3e:	4614      	mov	r4, r2
   84f40:	3330      	adds	r3, #48	; 0x30
   84f42:	ea54 0205 	orrs.w	r2, r4, r5
   84f46:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84f4a:	d1f1      	bne.n	84f30 <_vfiprintf_r+0x564>
   84f4c:	07f4      	lsls	r4, r6, #31
   84f4e:	d5bc      	bpl.n	84eca <_vfiprintf_r+0x4fe>
   84f50:	2b30      	cmp	r3, #48	; 0x30
   84f52:	d0ba      	beq.n	84eca <_vfiprintf_r+0x4fe>
   84f54:	2230      	movs	r2, #48	; 0x30
   84f56:	1e7b      	subs	r3, r7, #1
   84f58:	f807 2c01 	strb.w	r2, [r7, #-1]
   84f5c:	ebc3 020a 	rsb	r2, r3, sl
   84f60:	9203      	str	r2, [sp, #12]
   84f62:	461f      	mov	r7, r3
   84f64:	e658      	b.n	84c18 <_vfiprintf_r+0x24c>
   84f66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84f6a:	2400      	movs	r4, #0
   84f6c:	f818 3b01 	ldrb.w	r3, [r8], #1
   84f70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84f74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   84f78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84f7c:	2a09      	cmp	r2, #9
   84f7e:	d9f5      	bls.n	84f6c <_vfiprintf_r+0x5a0>
   84f80:	e58d      	b.n	84a9e <_vfiprintf_r+0xd2>
   84f82:	f898 3000 	ldrb.w	r3, [r8]
   84f86:	2101      	movs	r1, #1
   84f88:	202b      	movs	r0, #43	; 0x2b
   84f8a:	e586      	b.n	84a9a <_vfiprintf_r+0xce>
   84f8c:	f898 3000 	ldrb.w	r3, [r8]
   84f90:	f108 0501 	add.w	r5, r8, #1
   84f94:	2b2a      	cmp	r3, #42	; 0x2a
   84f96:	f000 83cc 	beq.w	85732 <_vfiprintf_r+0xd66>
   84f9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84f9e:	2a09      	cmp	r2, #9
   84fa0:	46a8      	mov	r8, r5
   84fa2:	bf98      	it	ls
   84fa4:	2500      	movls	r5, #0
   84fa6:	f200 83b5 	bhi.w	85714 <_vfiprintf_r+0xd48>
   84faa:	f818 3b01 	ldrb.w	r3, [r8], #1
   84fae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84fb2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84fb6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84fba:	2a09      	cmp	r2, #9
   84fbc:	d9f5      	bls.n	84faa <_vfiprintf_r+0x5de>
   84fbe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   84fc2:	9201      	str	r2, [sp, #4]
   84fc4:	e56b      	b.n	84a9e <_vfiprintf_r+0xd2>
   84fc6:	9406      	str	r4, [sp, #24]
   84fc8:	2900      	cmp	r1, #0
   84fca:	d08f      	beq.n	84eec <_vfiprintf_r+0x520>
   84fcc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84fd0:	e78c      	b.n	84eec <_vfiprintf_r+0x520>
   84fd2:	f04f 0300 	mov.w	r3, #0
   84fd6:	9a04      	ldr	r2, [sp, #16]
   84fd8:	9406      	str	r4, [sp, #24]
   84fda:	6817      	ldr	r7, [r2, #0]
   84fdc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84fe0:	1d14      	adds	r4, r2, #4
   84fe2:	9b01      	ldr	r3, [sp, #4]
   84fe4:	2f00      	cmp	r7, #0
   84fe6:	f000 837f 	beq.w	856e8 <_vfiprintf_r+0xd1c>
   84fea:	2b00      	cmp	r3, #0
   84fec:	f2c0 8353 	blt.w	85696 <_vfiprintf_r+0xcca>
   84ff0:	461a      	mov	r2, r3
   84ff2:	2100      	movs	r1, #0
   84ff4:	4638      	mov	r0, r7
   84ff6:	f001 fc4d 	bl	86894 <memchr>
   84ffa:	2800      	cmp	r0, #0
   84ffc:	f000 838e 	beq.w	8571c <_vfiprintf_r+0xd50>
   85000:	1bc3      	subs	r3, r0, r7
   85002:	9303      	str	r3, [sp, #12]
   85004:	2300      	movs	r3, #0
   85006:	9404      	str	r4, [sp, #16]
   85008:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8500c:	9301      	str	r3, [sp, #4]
   8500e:	e603      	b.n	84c18 <_vfiprintf_r+0x24c>
   85010:	9406      	str	r4, [sp, #24]
   85012:	2900      	cmp	r1, #0
   85014:	f040 839d 	bne.w	85752 <_vfiprintf_r+0xd86>
   85018:	f016 0920 	ands.w	r9, r6, #32
   8501c:	d134      	bne.n	85088 <_vfiprintf_r+0x6bc>
   8501e:	f016 0310 	ands.w	r3, r6, #16
   85022:	d103      	bne.n	8502c <_vfiprintf_r+0x660>
   85024:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   85028:	f040 831f 	bne.w	8566a <_vfiprintf_r+0xc9e>
   8502c:	9a04      	ldr	r2, [sp, #16]
   8502e:	2500      	movs	r5, #0
   85030:	4613      	mov	r3, r2
   85032:	6814      	ldr	r4, [r2, #0]
   85034:	9a01      	ldr	r2, [sp, #4]
   85036:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8503a:	2a00      	cmp	r2, #0
   8503c:	f103 0304 	add.w	r3, r3, #4
   85040:	f2c0 8327 	blt.w	85692 <_vfiprintf_r+0xcc6>
   85044:	ea54 0205 	orrs.w	r2, r4, r5
   85048:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8504c:	9304      	str	r3, [sp, #16]
   8504e:	f47f af22 	bne.w	84e96 <_vfiprintf_r+0x4ca>
   85052:	9b01      	ldr	r3, [sp, #4]
   85054:	2b00      	cmp	r3, #0
   85056:	f43f addb 	beq.w	84c10 <_vfiprintf_r+0x244>
   8505a:	2400      	movs	r4, #0
   8505c:	af2a      	add	r7, sp, #168	; 0xa8
   8505e:	3430      	adds	r4, #48	; 0x30
   85060:	f807 4d41 	strb.w	r4, [r7, #-65]!
   85064:	ebc7 030a 	rsb	r3, r7, sl
   85068:	9303      	str	r3, [sp, #12]
   8506a:	e5d5      	b.n	84c18 <_vfiprintf_r+0x24c>
   8506c:	f046 0620 	orr.w	r6, r6, #32
   85070:	f898 3000 	ldrb.w	r3, [r8]
   85074:	e511      	b.n	84a9a <_vfiprintf_r+0xce>
   85076:	9406      	str	r4, [sp, #24]
   85078:	2900      	cmp	r1, #0
   8507a:	f040 8375 	bne.w	85768 <_vfiprintf_r+0xd9c>
   8507e:	f046 0610 	orr.w	r6, r6, #16
   85082:	f016 0920 	ands.w	r9, r6, #32
   85086:	d0ca      	beq.n	8501e <_vfiprintf_r+0x652>
   85088:	f04f 0200 	mov.w	r2, #0
   8508c:	9b04      	ldr	r3, [sp, #16]
   8508e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   85092:	3307      	adds	r3, #7
   85094:	f023 0307 	bic.w	r3, r3, #7
   85098:	f103 0208 	add.w	r2, r3, #8
   8509c:	e9d3 4500 	ldrd	r4, r5, [r3]
   850a0:	9b01      	ldr	r3, [sp, #4]
   850a2:	9204      	str	r2, [sp, #16]
   850a4:	2b00      	cmp	r3, #0
   850a6:	f2c0 81f9 	blt.w	8549c <_vfiprintf_r+0xad0>
   850aa:	ea54 0305 	orrs.w	r3, r4, r5
   850ae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   850b2:	f04f 0900 	mov.w	r9, #0
   850b6:	f47f aeee 	bne.w	84e96 <_vfiprintf_r+0x4ca>
   850ba:	e7ca      	b.n	85052 <_vfiprintf_r+0x686>
   850bc:	9406      	str	r4, [sp, #24]
   850be:	2900      	cmp	r1, #0
   850c0:	f040 8355 	bne.w	8576e <_vfiprintf_r+0xda2>
   850c4:	06b2      	lsls	r2, r6, #26
   850c6:	48b2      	ldr	r0, [pc, #712]	; (85390 <_vfiprintf_r+0x9c4>)
   850c8:	d541      	bpl.n	8514e <_vfiprintf_r+0x782>
   850ca:	9a04      	ldr	r2, [sp, #16]
   850cc:	3207      	adds	r2, #7
   850ce:	f022 0207 	bic.w	r2, r2, #7
   850d2:	f102 0108 	add.w	r1, r2, #8
   850d6:	9104      	str	r1, [sp, #16]
   850d8:	e9d2 4500 	ldrd	r4, r5, [r2]
   850dc:	f016 0901 	ands.w	r9, r6, #1
   850e0:	f000 817e 	beq.w	853e0 <_vfiprintf_r+0xa14>
   850e4:	ea54 0205 	orrs.w	r2, r4, r5
   850e8:	f040 822b 	bne.w	85542 <_vfiprintf_r+0xb76>
   850ec:	f04f 0300 	mov.w	r3, #0
   850f0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   850f4:	9b01      	ldr	r3, [sp, #4]
   850f6:	2b00      	cmp	r3, #0
   850f8:	f2c0 82f3 	blt.w	856e2 <_vfiprintf_r+0xd16>
   850fc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85100:	e581      	b.n	84c06 <_vfiprintf_r+0x23a>
   85102:	9a04      	ldr	r2, [sp, #16]
   85104:	f04f 0100 	mov.w	r1, #0
   85108:	6813      	ldr	r3, [r2, #0]
   8510a:	2501      	movs	r5, #1
   8510c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   85110:	4613      	mov	r3, r2
   85112:	3304      	adds	r3, #4
   85114:	9406      	str	r4, [sp, #24]
   85116:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8511a:	9304      	str	r3, [sp, #16]
   8511c:	9503      	str	r5, [sp, #12]
   8511e:	af10      	add	r7, sp, #64	; 0x40
   85120:	2300      	movs	r3, #0
   85122:	9301      	str	r3, [sp, #4]
   85124:	e582      	b.n	84c2c <_vfiprintf_r+0x260>
   85126:	f898 3000 	ldrb.w	r3, [r8]
   8512a:	2800      	cmp	r0, #0
   8512c:	f47f acb5 	bne.w	84a9a <_vfiprintf_r+0xce>
   85130:	2101      	movs	r1, #1
   85132:	2020      	movs	r0, #32
   85134:	e4b1      	b.n	84a9a <_vfiprintf_r+0xce>
   85136:	f046 0601 	orr.w	r6, r6, #1
   8513a:	f898 3000 	ldrb.w	r3, [r8]
   8513e:	e4ac      	b.n	84a9a <_vfiprintf_r+0xce>
   85140:	9406      	str	r4, [sp, #24]
   85142:	2900      	cmp	r1, #0
   85144:	f040 832a 	bne.w	8579c <_vfiprintf_r+0xdd0>
   85148:	06b2      	lsls	r2, r6, #26
   8514a:	4892      	ldr	r0, [pc, #584]	; (85394 <_vfiprintf_r+0x9c8>)
   8514c:	d4bd      	bmi.n	850ca <_vfiprintf_r+0x6fe>
   8514e:	9904      	ldr	r1, [sp, #16]
   85150:	06f7      	lsls	r7, r6, #27
   85152:	460a      	mov	r2, r1
   85154:	f100 819d 	bmi.w	85492 <_vfiprintf_r+0xac6>
   85158:	0675      	lsls	r5, r6, #25
   8515a:	f140 819a 	bpl.w	85492 <_vfiprintf_r+0xac6>
   8515e:	3204      	adds	r2, #4
   85160:	880c      	ldrh	r4, [r1, #0]
   85162:	9204      	str	r2, [sp, #16]
   85164:	2500      	movs	r5, #0
   85166:	e7b9      	b.n	850dc <_vfiprintf_r+0x710>
   85168:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   8516c:	f898 3000 	ldrb.w	r3, [r8]
   85170:	e493      	b.n	84a9a <_vfiprintf_r+0xce>
   85172:	f898 3000 	ldrb.w	r3, [r8]
   85176:	2b6c      	cmp	r3, #108	; 0x6c
   85178:	bf03      	ittte	eq
   8517a:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   8517e:	f046 0620 	orreq.w	r6, r6, #32
   85182:	f108 0801 	addeq.w	r8, r8, #1
   85186:	f046 0610 	orrne.w	r6, r6, #16
   8518a:	e486      	b.n	84a9a <_vfiprintf_r+0xce>
   8518c:	2900      	cmp	r1, #0
   8518e:	f040 8302 	bne.w	85796 <_vfiprintf_r+0xdca>
   85192:	06b4      	lsls	r4, r6, #26
   85194:	f140 8220 	bpl.w	855d8 <_vfiprintf_r+0xc0c>
   85198:	9a04      	ldr	r2, [sp, #16]
   8519a:	4613      	mov	r3, r2
   8519c:	3304      	adds	r3, #4
   8519e:	9304      	str	r3, [sp, #16]
   851a0:	9b02      	ldr	r3, [sp, #8]
   851a2:	6811      	ldr	r1, [r2, #0]
   851a4:	17dd      	asrs	r5, r3, #31
   851a6:	461a      	mov	r2, r3
   851a8:	462b      	mov	r3, r5
   851aa:	e9c1 2300 	strd	r2, r3, [r1]
   851ae:	e43e      	b.n	84a2e <_vfiprintf_r+0x62>
   851b0:	9406      	str	r4, [sp, #24]
   851b2:	2900      	cmp	r1, #0
   851b4:	f43f ae51 	beq.w	84e5a <_vfiprintf_r+0x48e>
   851b8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   851bc:	e64d      	b.n	84e5a <_vfiprintf_r+0x48e>
   851be:	9406      	str	r4, [sp, #24]
   851c0:	2900      	cmp	r1, #0
   851c2:	f040 82e5 	bne.w	85790 <_vfiprintf_r+0xdc4>
   851c6:	2b00      	cmp	r3, #0
   851c8:	f000 8094 	beq.w	852f4 <_vfiprintf_r+0x928>
   851cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   851d0:	f04f 0300 	mov.w	r3, #0
   851d4:	2501      	movs	r5, #1
   851d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   851da:	9503      	str	r5, [sp, #12]
   851dc:	af10      	add	r7, sp, #64	; 0x40
   851de:	e79f      	b.n	85120 <_vfiprintf_r+0x754>
   851e0:	aa0d      	add	r2, sp, #52	; 0x34
   851e2:	9900      	ldr	r1, [sp, #0]
   851e4:	4648      	mov	r0, r9
   851e6:	9309      	str	r3, [sp, #36]	; 0x24
   851e8:	f7ff fbb4 	bl	84954 <__sprint_r.part.0>
   851ec:	2800      	cmp	r0, #0
   851ee:	f040 8088 	bne.w	85302 <_vfiprintf_r+0x936>
   851f2:	980e      	ldr	r0, [sp, #56]	; 0x38
   851f4:	46d4      	mov	ip, sl
   851f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   851f8:	f100 0e01 	add.w	lr, r0, #1
   851fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   851fe:	e53a      	b.n	84c76 <_vfiprintf_r+0x2aa>
   85200:	aa0d      	add	r2, sp, #52	; 0x34
   85202:	9900      	ldr	r1, [sp, #0]
   85204:	9805      	ldr	r0, [sp, #20]
   85206:	f7ff fba5 	bl	84954 <__sprint_r.part.0>
   8520a:	2800      	cmp	r0, #0
   8520c:	d179      	bne.n	85302 <_vfiprintf_r+0x936>
   8520e:	46d3      	mov	fp, sl
   85210:	980e      	ldr	r0, [sp, #56]	; 0x38
   85212:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   85216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85218:	f100 0e01 	add.w	lr, r0, #1
   8521c:	2b00      	cmp	r3, #0
   8521e:	f43f ad59 	beq.w	84cd4 <_vfiprintf_r+0x308>
   85222:	3201      	adds	r2, #1
   85224:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   85228:	2301      	movs	r3, #1
   8522a:	f1be 0f07 	cmp.w	lr, #7
   8522e:	920f      	str	r2, [sp, #60]	; 0x3c
   85230:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   85234:	e88b 000a 	stmia.w	fp, {r1, r3}
   85238:	f340 80c0 	ble.w	853bc <_vfiprintf_r+0x9f0>
   8523c:	2a00      	cmp	r2, #0
   8523e:	f040 814d 	bne.w	854dc <_vfiprintf_r+0xb10>
   85242:	9907      	ldr	r1, [sp, #28]
   85244:	2900      	cmp	r1, #0
   85246:	f040 80bf 	bne.w	853c8 <_vfiprintf_r+0x9fc>
   8524a:	469e      	mov	lr, r3
   8524c:	4610      	mov	r0, r2
   8524e:	46d3      	mov	fp, sl
   85250:	9b08      	ldr	r3, [sp, #32]
   85252:	2b80      	cmp	r3, #128	; 0x80
   85254:	f43f ad59 	beq.w	84d0a <_vfiprintf_r+0x33e>
   85258:	9b01      	ldr	r3, [sp, #4]
   8525a:	9903      	ldr	r1, [sp, #12]
   8525c:	1a5c      	subs	r4, r3, r1
   8525e:	2c00      	cmp	r4, #0
   85260:	f77f ad9c 	ble.w	84d9c <_vfiprintf_r+0x3d0>
   85264:	2c10      	cmp	r4, #16
   85266:	f8df 9130 	ldr.w	r9, [pc, #304]	; 85398 <_vfiprintf_r+0x9cc>
   8526a:	dd25      	ble.n	852b8 <_vfiprintf_r+0x8ec>
   8526c:	46dc      	mov	ip, fp
   8526e:	2310      	movs	r3, #16
   85270:	46c3      	mov	fp, r8
   85272:	46a8      	mov	r8, r5
   85274:	464d      	mov	r5, r9
   85276:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8527a:	e007      	b.n	8528c <_vfiprintf_r+0x8c0>
   8527c:	f100 0e02 	add.w	lr, r0, #2
   85280:	4608      	mov	r0, r1
   85282:	f10c 0c08 	add.w	ip, ip, #8
   85286:	3c10      	subs	r4, #16
   85288:	2c10      	cmp	r4, #16
   8528a:	dd11      	ble.n	852b0 <_vfiprintf_r+0x8e4>
   8528c:	1c41      	adds	r1, r0, #1
   8528e:	3210      	adds	r2, #16
   85290:	2907      	cmp	r1, #7
   85292:	920f      	str	r2, [sp, #60]	; 0x3c
   85294:	f8cc 5000 	str.w	r5, [ip]
   85298:	f8cc 3004 	str.w	r3, [ip, #4]
   8529c:	910e      	str	r1, [sp, #56]	; 0x38
   8529e:	dded      	ble.n	8527c <_vfiprintf_r+0x8b0>
   852a0:	b9d2      	cbnz	r2, 852d8 <_vfiprintf_r+0x90c>
   852a2:	3c10      	subs	r4, #16
   852a4:	2c10      	cmp	r4, #16
   852a6:	f04f 0e01 	mov.w	lr, #1
   852aa:	4610      	mov	r0, r2
   852ac:	46d4      	mov	ip, sl
   852ae:	dced      	bgt.n	8528c <_vfiprintf_r+0x8c0>
   852b0:	46a9      	mov	r9, r5
   852b2:	4645      	mov	r5, r8
   852b4:	46d8      	mov	r8, fp
   852b6:	46e3      	mov	fp, ip
   852b8:	4422      	add	r2, r4
   852ba:	f1be 0f07 	cmp.w	lr, #7
   852be:	920f      	str	r2, [sp, #60]	; 0x3c
   852c0:	f8cb 9000 	str.w	r9, [fp]
   852c4:	f8cb 4004 	str.w	r4, [fp, #4]
   852c8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   852cc:	dc2e      	bgt.n	8532c <_vfiprintf_r+0x960>
   852ce:	f10b 0b08 	add.w	fp, fp, #8
   852d2:	f10e 0e01 	add.w	lr, lr, #1
   852d6:	e561      	b.n	84d9c <_vfiprintf_r+0x3d0>
   852d8:	aa0d      	add	r2, sp, #52	; 0x34
   852da:	9900      	ldr	r1, [sp, #0]
   852dc:	4648      	mov	r0, r9
   852de:	9301      	str	r3, [sp, #4]
   852e0:	f7ff fb38 	bl	84954 <__sprint_r.part.0>
   852e4:	b968      	cbnz	r0, 85302 <_vfiprintf_r+0x936>
   852e6:	980e      	ldr	r0, [sp, #56]	; 0x38
   852e8:	46d4      	mov	ip, sl
   852ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   852ec:	f100 0e01 	add.w	lr, r0, #1
   852f0:	9b01      	ldr	r3, [sp, #4]
   852f2:	e7c8      	b.n	85286 <_vfiprintf_r+0x8ba>
   852f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   852f6:	b123      	cbz	r3, 85302 <_vfiprintf_r+0x936>
   852f8:	9805      	ldr	r0, [sp, #20]
   852fa:	aa0d      	add	r2, sp, #52	; 0x34
   852fc:	9900      	ldr	r1, [sp, #0]
   852fe:	f7ff fb29 	bl	84954 <__sprint_r.part.0>
   85302:	9b00      	ldr	r3, [sp, #0]
   85304:	899b      	ldrh	r3, [r3, #12]
   85306:	065a      	lsls	r2, r3, #25
   85308:	f100 817b 	bmi.w	85602 <_vfiprintf_r+0xc36>
   8530c:	9802      	ldr	r0, [sp, #8]
   8530e:	b02b      	add	sp, #172	; 0xac
   85310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85314:	aa0d      	add	r2, sp, #52	; 0x34
   85316:	9900      	ldr	r1, [sp, #0]
   85318:	4648      	mov	r0, r9
   8531a:	f7ff fb1b 	bl	84954 <__sprint_r.part.0>
   8531e:	2800      	cmp	r0, #0
   85320:	d1ef      	bne.n	85302 <_vfiprintf_r+0x936>
   85322:	990e      	ldr	r1, [sp, #56]	; 0x38
   85324:	46d3      	mov	fp, sl
   85326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85328:	1c48      	adds	r0, r1, #1
   8532a:	e55e      	b.n	84dea <_vfiprintf_r+0x41e>
   8532c:	2a00      	cmp	r2, #0
   8532e:	f040 80fa 	bne.w	85526 <_vfiprintf_r+0xb5a>
   85332:	46d3      	mov	fp, sl
   85334:	9a03      	ldr	r2, [sp, #12]
   85336:	2301      	movs	r3, #1
   85338:	921b      	str	r2, [sp, #108]	; 0x6c
   8533a:	920f      	str	r2, [sp, #60]	; 0x3c
   8533c:	971a      	str	r7, [sp, #104]	; 0x68
   8533e:	930e      	str	r3, [sp, #56]	; 0x38
   85340:	f10b 0b08 	add.w	fp, fp, #8
   85344:	0771      	lsls	r1, r6, #29
   85346:	d504      	bpl.n	85352 <_vfiprintf_r+0x986>
   85348:	9b06      	ldr	r3, [sp, #24]
   8534a:	1b5c      	subs	r4, r3, r5
   8534c:	2c00      	cmp	r4, #0
   8534e:	f73f ad3d 	bgt.w	84dcc <_vfiprintf_r+0x400>
   85352:	9b02      	ldr	r3, [sp, #8]
   85354:	9906      	ldr	r1, [sp, #24]
   85356:	42a9      	cmp	r1, r5
   85358:	bfac      	ite	ge
   8535a:	185b      	addge	r3, r3, r1
   8535c:	195b      	addlt	r3, r3, r5
   8535e:	9302      	str	r3, [sp, #8]
   85360:	2a00      	cmp	r2, #0
   85362:	f040 80ad 	bne.w	854c0 <_vfiprintf_r+0xaf4>
   85366:	2300      	movs	r3, #0
   85368:	930e      	str	r3, [sp, #56]	; 0x38
   8536a:	46d3      	mov	fp, sl
   8536c:	f7ff bb5f 	b.w	84a2e <_vfiprintf_r+0x62>
   85370:	aa0d      	add	r2, sp, #52	; 0x34
   85372:	9900      	ldr	r1, [sp, #0]
   85374:	4648      	mov	r0, r9
   85376:	9307      	str	r3, [sp, #28]
   85378:	f7ff faec 	bl	84954 <__sprint_r.part.0>
   8537c:	2800      	cmp	r0, #0
   8537e:	d1c0      	bne.n	85302 <_vfiprintf_r+0x936>
   85380:	980e      	ldr	r0, [sp, #56]	; 0x38
   85382:	46d6      	mov	lr, sl
   85384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85386:	f100 0c01 	add.w	ip, r0, #1
   8538a:	9b07      	ldr	r3, [sp, #28]
   8538c:	e4d4      	b.n	84d38 <_vfiprintf_r+0x36c>
   8538e:	bf00      	nop
   85390:	00087688 	.word	0x00087688
   85394:	0008769c 	.word	0x0008769c
   85398:	00087678 	.word	0x00087678
   8539c:	2a00      	cmp	r2, #0
   8539e:	f47f af2f 	bne.w	85200 <_vfiprintf_r+0x834>
   853a2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   853a6:	2b00      	cmp	r3, #0
   853a8:	f000 80f3 	beq.w	85592 <_vfiprintf_r+0xbc6>
   853ac:	2301      	movs	r3, #1
   853ae:	461a      	mov	r2, r3
   853b0:	469e      	mov	lr, r3
   853b2:	46d3      	mov	fp, sl
   853b4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   853b8:	931b      	str	r3, [sp, #108]	; 0x6c
   853ba:	911a      	str	r1, [sp, #104]	; 0x68
   853bc:	4670      	mov	r0, lr
   853be:	f10b 0b08 	add.w	fp, fp, #8
   853c2:	f10e 0e01 	add.w	lr, lr, #1
   853c6:	e485      	b.n	84cd4 <_vfiprintf_r+0x308>
   853c8:	469e      	mov	lr, r3
   853ca:	46d3      	mov	fp, sl
   853cc:	a90c      	add	r1, sp, #48	; 0x30
   853ce:	2202      	movs	r2, #2
   853d0:	911a      	str	r1, [sp, #104]	; 0x68
   853d2:	921b      	str	r2, [sp, #108]	; 0x6c
   853d4:	4670      	mov	r0, lr
   853d6:	f10b 0b08 	add.w	fp, fp, #8
   853da:	f10e 0e01 	add.w	lr, lr, #1
   853de:	e737      	b.n	85250 <_vfiprintf_r+0x884>
   853e0:	9b01      	ldr	r3, [sp, #4]
   853e2:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   853e6:	2b00      	cmp	r3, #0
   853e8:	f2c0 811b 	blt.w	85622 <_vfiprintf_r+0xc56>
   853ec:	ea54 0305 	orrs.w	r3, r4, r5
   853f0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   853f4:	f43f ac07 	beq.w	84c06 <_vfiprintf_r+0x23a>
   853f8:	4657      	mov	r7, sl
   853fa:	0923      	lsrs	r3, r4, #4
   853fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85400:	0929      	lsrs	r1, r5, #4
   85402:	f004 020f 	and.w	r2, r4, #15
   85406:	460d      	mov	r5, r1
   85408:	461c      	mov	r4, r3
   8540a:	5c83      	ldrb	r3, [r0, r2]
   8540c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   85410:	ea54 0305 	orrs.w	r3, r4, r5
   85414:	d1f1      	bne.n	853fa <_vfiprintf_r+0xa2e>
   85416:	ebc7 030a 	rsb	r3, r7, sl
   8541a:	9303      	str	r3, [sp, #12]
   8541c:	f7ff bbfc 	b.w	84c18 <_vfiprintf_r+0x24c>
   85420:	aa0d      	add	r2, sp, #52	; 0x34
   85422:	9900      	ldr	r1, [sp, #0]
   85424:	9805      	ldr	r0, [sp, #20]
   85426:	f7ff fa95 	bl	84954 <__sprint_r.part.0>
   8542a:	2800      	cmp	r0, #0
   8542c:	f47f af69 	bne.w	85302 <_vfiprintf_r+0x936>
   85430:	46d3      	mov	fp, sl
   85432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85434:	e786      	b.n	85344 <_vfiprintf_r+0x978>
   85436:	f016 0210 	ands.w	r2, r6, #16
   8543a:	f000 80b5 	beq.w	855a8 <_vfiprintf_r+0xbdc>
   8543e:	9904      	ldr	r1, [sp, #16]
   85440:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85444:	460a      	mov	r2, r1
   85446:	680c      	ldr	r4, [r1, #0]
   85448:	9901      	ldr	r1, [sp, #4]
   8544a:	3204      	adds	r2, #4
   8544c:	2900      	cmp	r1, #0
   8544e:	f04f 0500 	mov.w	r5, #0
   85452:	f2c0 8152 	blt.w	856fa <_vfiprintf_r+0xd2e>
   85456:	ea54 0105 	orrs.w	r1, r4, r5
   8545a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8545e:	9204      	str	r2, [sp, #16]
   85460:	f43f ad5d 	beq.w	84f1e <_vfiprintf_r+0x552>
   85464:	4699      	mov	r9, r3
   85466:	e562      	b.n	84f2e <_vfiprintf_r+0x562>
   85468:	9a04      	ldr	r2, [sp, #16]
   8546a:	06f7      	lsls	r7, r6, #27
   8546c:	4613      	mov	r3, r2
   8546e:	d409      	bmi.n	85484 <_vfiprintf_r+0xab8>
   85470:	0675      	lsls	r5, r6, #25
   85472:	d507      	bpl.n	85484 <_vfiprintf_r+0xab8>
   85474:	f9b2 4000 	ldrsh.w	r4, [r2]
   85478:	3304      	adds	r3, #4
   8547a:	17e5      	asrs	r5, r4, #31
   8547c:	9304      	str	r3, [sp, #16]
   8547e:	4622      	mov	r2, r4
   85480:	462b      	mov	r3, r5
   85482:	e4f7      	b.n	84e74 <_vfiprintf_r+0x4a8>
   85484:	681c      	ldr	r4, [r3, #0]
   85486:	3304      	adds	r3, #4
   85488:	17e5      	asrs	r5, r4, #31
   8548a:	9304      	str	r3, [sp, #16]
   8548c:	4622      	mov	r2, r4
   8548e:	462b      	mov	r3, r5
   85490:	e4f0      	b.n	84e74 <_vfiprintf_r+0x4a8>
   85492:	6814      	ldr	r4, [r2, #0]
   85494:	3204      	adds	r2, #4
   85496:	9204      	str	r2, [sp, #16]
   85498:	2500      	movs	r5, #0
   8549a:	e61f      	b.n	850dc <_vfiprintf_r+0x710>
   8549c:	f04f 0900 	mov.w	r9, #0
   854a0:	ea54 0305 	orrs.w	r3, r4, r5
   854a4:	f47f acf7 	bne.w	84e96 <_vfiprintf_r+0x4ca>
   854a8:	e5d8      	b.n	8505c <_vfiprintf_r+0x690>
   854aa:	aa0d      	add	r2, sp, #52	; 0x34
   854ac:	9900      	ldr	r1, [sp, #0]
   854ae:	9805      	ldr	r0, [sp, #20]
   854b0:	f7ff fa50 	bl	84954 <__sprint_r.part.0>
   854b4:	2800      	cmp	r0, #0
   854b6:	f47f af24 	bne.w	85302 <_vfiprintf_r+0x936>
   854ba:	46d3      	mov	fp, sl
   854bc:	f7ff bb51 	b.w	84b62 <_vfiprintf_r+0x196>
   854c0:	aa0d      	add	r2, sp, #52	; 0x34
   854c2:	9900      	ldr	r1, [sp, #0]
   854c4:	9805      	ldr	r0, [sp, #20]
   854c6:	f7ff fa45 	bl	84954 <__sprint_r.part.0>
   854ca:	2800      	cmp	r0, #0
   854cc:	f43f af4b 	beq.w	85366 <_vfiprintf_r+0x99a>
   854d0:	e717      	b.n	85302 <_vfiprintf_r+0x936>
   854d2:	2400      	movs	r4, #0
   854d4:	2500      	movs	r5, #0
   854d6:	f04f 0900 	mov.w	r9, #0
   854da:	e78d      	b.n	853f8 <_vfiprintf_r+0xa2c>
   854dc:	aa0d      	add	r2, sp, #52	; 0x34
   854de:	9900      	ldr	r1, [sp, #0]
   854e0:	9805      	ldr	r0, [sp, #20]
   854e2:	f7ff fa37 	bl	84954 <__sprint_r.part.0>
   854e6:	2800      	cmp	r0, #0
   854e8:	f47f af0b 	bne.w	85302 <_vfiprintf_r+0x936>
   854ec:	980e      	ldr	r0, [sp, #56]	; 0x38
   854ee:	46d3      	mov	fp, sl
   854f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   854f2:	f100 0e01 	add.w	lr, r0, #1
   854f6:	f7ff bbed 	b.w	84cd4 <_vfiprintf_r+0x308>
   854fa:	aa0d      	add	r2, sp, #52	; 0x34
   854fc:	9900      	ldr	r1, [sp, #0]
   854fe:	9805      	ldr	r0, [sp, #20]
   85500:	f7ff fa28 	bl	84954 <__sprint_r.part.0>
   85504:	2800      	cmp	r0, #0
   85506:	f47f aefc 	bne.w	85302 <_vfiprintf_r+0x936>
   8550a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8550c:	46d3      	mov	fp, sl
   8550e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85510:	f100 0e01 	add.w	lr, r0, #1
   85514:	e69c      	b.n	85250 <_vfiprintf_r+0x884>
   85516:	2a00      	cmp	r2, #0
   85518:	f040 80c8 	bne.w	856ac <_vfiprintf_r+0xce0>
   8551c:	f04f 0e01 	mov.w	lr, #1
   85520:	4610      	mov	r0, r2
   85522:	46d3      	mov	fp, sl
   85524:	e698      	b.n	85258 <_vfiprintf_r+0x88c>
   85526:	aa0d      	add	r2, sp, #52	; 0x34
   85528:	9900      	ldr	r1, [sp, #0]
   8552a:	9805      	ldr	r0, [sp, #20]
   8552c:	f7ff fa12 	bl	84954 <__sprint_r.part.0>
   85530:	2800      	cmp	r0, #0
   85532:	f47f aee6 	bne.w	85302 <_vfiprintf_r+0x936>
   85536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85538:	46d3      	mov	fp, sl
   8553a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8553c:	f103 0e01 	add.w	lr, r3, #1
   85540:	e42c      	b.n	84d9c <_vfiprintf_r+0x3d0>
   85542:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   85546:	f04f 0300 	mov.w	r3, #0
   8554a:	2230      	movs	r2, #48	; 0x30
   8554c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   85550:	9a01      	ldr	r2, [sp, #4]
   85552:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85556:	2a00      	cmp	r2, #0
   85558:	f046 0302 	orr.w	r3, r6, #2
   8555c:	f2c0 80bb 	blt.w	856d6 <_vfiprintf_r+0xd0a>
   85560:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85564:	f046 0602 	orr.w	r6, r6, #2
   85568:	f04f 0900 	mov.w	r9, #0
   8556c:	e744      	b.n	853f8 <_vfiprintf_r+0xa2c>
   8556e:	f04f 0900 	mov.w	r9, #0
   85572:	488c      	ldr	r0, [pc, #560]	; (857a4 <_vfiprintf_r+0xdd8>)
   85574:	e740      	b.n	853f8 <_vfiprintf_r+0xa2c>
   85576:	9b01      	ldr	r3, [sp, #4]
   85578:	4264      	negs	r4, r4
   8557a:	f04f 092d 	mov.w	r9, #45	; 0x2d
   8557e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   85582:	2b00      	cmp	r3, #0
   85584:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   85588:	f6ff ac85 	blt.w	84e96 <_vfiprintf_r+0x4ca>
   8558c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85590:	e481      	b.n	84e96 <_vfiprintf_r+0x4ca>
   85592:	9b07      	ldr	r3, [sp, #28]
   85594:	2b00      	cmp	r3, #0
   85596:	d063      	beq.n	85660 <_vfiprintf_r+0xc94>
   85598:	ab0c      	add	r3, sp, #48	; 0x30
   8559a:	2202      	movs	r2, #2
   8559c:	931a      	str	r3, [sp, #104]	; 0x68
   8559e:	921b      	str	r2, [sp, #108]	; 0x6c
   855a0:	f04f 0e01 	mov.w	lr, #1
   855a4:	46d3      	mov	fp, sl
   855a6:	e715      	b.n	853d4 <_vfiprintf_r+0xa08>
   855a8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   855ac:	d03b      	beq.n	85626 <_vfiprintf_r+0xc5a>
   855ae:	9904      	ldr	r1, [sp, #16]
   855b0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   855b4:	460b      	mov	r3, r1
   855b6:	880c      	ldrh	r4, [r1, #0]
   855b8:	9901      	ldr	r1, [sp, #4]
   855ba:	3304      	adds	r3, #4
   855bc:	2900      	cmp	r1, #0
   855be:	f04f 0500 	mov.w	r5, #0
   855c2:	f2c0 808c 	blt.w	856de <_vfiprintf_r+0xd12>
   855c6:	ea54 0105 	orrs.w	r1, r4, r5
   855ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   855ce:	9304      	str	r3, [sp, #16]
   855d0:	f43f aca5 	beq.w	84f1e <_vfiprintf_r+0x552>
   855d4:	4691      	mov	r9, r2
   855d6:	e4aa      	b.n	84f2e <_vfiprintf_r+0x562>
   855d8:	06f0      	lsls	r0, r6, #27
   855da:	d40a      	bmi.n	855f2 <_vfiprintf_r+0xc26>
   855dc:	0671      	lsls	r1, r6, #25
   855de:	d508      	bpl.n	855f2 <_vfiprintf_r+0xc26>
   855e0:	9a04      	ldr	r2, [sp, #16]
   855e2:	6813      	ldr	r3, [r2, #0]
   855e4:	3204      	adds	r2, #4
   855e6:	9204      	str	r2, [sp, #16]
   855e8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   855ec:	801a      	strh	r2, [r3, #0]
   855ee:	f7ff ba1e 	b.w	84a2e <_vfiprintf_r+0x62>
   855f2:	9a04      	ldr	r2, [sp, #16]
   855f4:	6813      	ldr	r3, [r2, #0]
   855f6:	3204      	adds	r2, #4
   855f8:	9204      	str	r2, [sp, #16]
   855fa:	9a02      	ldr	r2, [sp, #8]
   855fc:	601a      	str	r2, [r3, #0]
   855fe:	f7ff ba16 	b.w	84a2e <_vfiprintf_r+0x62>
   85602:	f04f 30ff 	mov.w	r0, #4294967295
   85606:	f7ff bac9 	b.w	84b9c <_vfiprintf_r+0x1d0>
   8560a:	4616      	mov	r6, r2
   8560c:	4865      	ldr	r0, [pc, #404]	; (857a4 <_vfiprintf_r+0xdd8>)
   8560e:	ea54 0205 	orrs.w	r2, r4, r5
   85612:	9304      	str	r3, [sp, #16]
   85614:	f04f 0900 	mov.w	r9, #0
   85618:	f47f aeee 	bne.w	853f8 <_vfiprintf_r+0xa2c>
   8561c:	2400      	movs	r4, #0
   8561e:	2500      	movs	r5, #0
   85620:	e6ea      	b.n	853f8 <_vfiprintf_r+0xa2c>
   85622:	9b04      	ldr	r3, [sp, #16]
   85624:	e7f3      	b.n	8560e <_vfiprintf_r+0xc42>
   85626:	9a04      	ldr	r2, [sp, #16]
   85628:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8562c:	4613      	mov	r3, r2
   8562e:	6814      	ldr	r4, [r2, #0]
   85630:	9a01      	ldr	r2, [sp, #4]
   85632:	3304      	adds	r3, #4
   85634:	2a00      	cmp	r2, #0
   85636:	f04f 0500 	mov.w	r5, #0
   8563a:	db50      	blt.n	856de <_vfiprintf_r+0xd12>
   8563c:	ea54 0205 	orrs.w	r2, r4, r5
   85640:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85644:	9304      	str	r3, [sp, #16]
   85646:	f47f ac72 	bne.w	84f2e <_vfiprintf_r+0x562>
   8564a:	e468      	b.n	84f1e <_vfiprintf_r+0x552>
   8564c:	aa0d      	add	r2, sp, #52	; 0x34
   8564e:	9900      	ldr	r1, [sp, #0]
   85650:	9805      	ldr	r0, [sp, #20]
   85652:	f7ff f97f 	bl	84954 <__sprint_r.part.0>
   85656:	2800      	cmp	r0, #0
   85658:	f47f ae53 	bne.w	85302 <_vfiprintf_r+0x936>
   8565c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8565e:	e678      	b.n	85352 <_vfiprintf_r+0x986>
   85660:	4610      	mov	r0, r2
   85662:	f04f 0e01 	mov.w	lr, #1
   85666:	46d3      	mov	fp, sl
   85668:	e5f6      	b.n	85258 <_vfiprintf_r+0x88c>
   8566a:	9904      	ldr	r1, [sp, #16]
   8566c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85670:	460a      	mov	r2, r1
   85672:	880c      	ldrh	r4, [r1, #0]
   85674:	9901      	ldr	r1, [sp, #4]
   85676:	3204      	adds	r2, #4
   85678:	2900      	cmp	r1, #0
   8567a:	f04f 0500 	mov.w	r5, #0
   8567e:	db55      	blt.n	8572c <_vfiprintf_r+0xd60>
   85680:	ea54 0105 	orrs.w	r1, r4, r5
   85684:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85688:	9204      	str	r2, [sp, #16]
   8568a:	4699      	mov	r9, r3
   8568c:	f47f ac03 	bne.w	84e96 <_vfiprintf_r+0x4ca>
   85690:	e4df      	b.n	85052 <_vfiprintf_r+0x686>
   85692:	9304      	str	r3, [sp, #16]
   85694:	e704      	b.n	854a0 <_vfiprintf_r+0xad4>
   85696:	4638      	mov	r0, r7
   85698:	9404      	str	r4, [sp, #16]
   8569a:	f7ff f92d 	bl	848f8 <strlen>
   8569e:	2300      	movs	r3, #0
   856a0:	9003      	str	r0, [sp, #12]
   856a2:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   856a6:	9301      	str	r3, [sp, #4]
   856a8:	f7ff bab6 	b.w	84c18 <_vfiprintf_r+0x24c>
   856ac:	aa0d      	add	r2, sp, #52	; 0x34
   856ae:	9900      	ldr	r1, [sp, #0]
   856b0:	9805      	ldr	r0, [sp, #20]
   856b2:	f7ff f94f 	bl	84954 <__sprint_r.part.0>
   856b6:	2800      	cmp	r0, #0
   856b8:	f47f ae23 	bne.w	85302 <_vfiprintf_r+0x936>
   856bc:	980e      	ldr	r0, [sp, #56]	; 0x38
   856be:	46d3      	mov	fp, sl
   856c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   856c2:	f100 0e01 	add.w	lr, r0, #1
   856c6:	e5c7      	b.n	85258 <_vfiprintf_r+0x88c>
   856c8:	980e      	ldr	r0, [sp, #56]	; 0x38
   856ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   856cc:	3001      	adds	r0, #1
   856ce:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 857ac <_vfiprintf_r+0xde0>
   856d2:	f7ff baec 	b.w	84cae <_vfiprintf_r+0x2e2>
   856d6:	461e      	mov	r6, r3
   856d8:	f04f 0900 	mov.w	r9, #0
   856dc:	e68c      	b.n	853f8 <_vfiprintf_r+0xa2c>
   856de:	9304      	str	r3, [sp, #16]
   856e0:	e423      	b.n	84f2a <_vfiprintf_r+0x55e>
   856e2:	f04f 0900 	mov.w	r9, #0
   856e6:	e799      	b.n	8561c <_vfiprintf_r+0xc50>
   856e8:	2b06      	cmp	r3, #6
   856ea:	bf28      	it	cs
   856ec:	2306      	movcs	r3, #6
   856ee:	9303      	str	r3, [sp, #12]
   856f0:	9404      	str	r4, [sp, #16]
   856f2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   856f6:	4f2c      	ldr	r7, [pc, #176]	; (857a8 <_vfiprintf_r+0xddc>)
   856f8:	e512      	b.n	85120 <_vfiprintf_r+0x754>
   856fa:	9204      	str	r2, [sp, #16]
   856fc:	e415      	b.n	84f2a <_vfiprintf_r+0x55e>
   856fe:	980e      	ldr	r0, [sp, #56]	; 0x38
   85700:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 857ac <_vfiprintf_r+0xde0>
   85704:	3001      	adds	r0, #1
   85706:	f7ff bb88 	b.w	84e1a <_vfiprintf_r+0x44e>
   8570a:	46f4      	mov	ip, lr
   8570c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 857b0 <_vfiprintf_r+0xde4>
   85710:	f7ff bb2d 	b.w	84d6e <_vfiprintf_r+0x3a2>
   85714:	2200      	movs	r2, #0
   85716:	9201      	str	r2, [sp, #4]
   85718:	f7ff b9c1 	b.w	84a9e <_vfiprintf_r+0xd2>
   8571c:	9b01      	ldr	r3, [sp, #4]
   8571e:	9404      	str	r4, [sp, #16]
   85720:	9303      	str	r3, [sp, #12]
   85722:	9001      	str	r0, [sp, #4]
   85724:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   85728:	f7ff ba76 	b.w	84c18 <_vfiprintf_r+0x24c>
   8572c:	9204      	str	r2, [sp, #16]
   8572e:	4699      	mov	r9, r3
   85730:	e6b6      	b.n	854a0 <_vfiprintf_r+0xad4>
   85732:	9a04      	ldr	r2, [sp, #16]
   85734:	6813      	ldr	r3, [r2, #0]
   85736:	3204      	adds	r2, #4
   85738:	2b00      	cmp	r3, #0
   8573a:	9301      	str	r3, [sp, #4]
   8573c:	9204      	str	r2, [sp, #16]
   8573e:	f898 3001 	ldrb.w	r3, [r8, #1]
   85742:	46a8      	mov	r8, r5
   85744:	f6bf a9a9 	bge.w	84a9a <_vfiprintf_r+0xce>
   85748:	f04f 32ff 	mov.w	r2, #4294967295
   8574c:	9201      	str	r2, [sp, #4]
   8574e:	f7ff b9a4 	b.w	84a9a <_vfiprintf_r+0xce>
   85752:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85756:	e45f      	b.n	85018 <_vfiprintf_r+0x64c>
   85758:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8575c:	f7ff bbc4 	b.w	84ee8 <_vfiprintf_r+0x51c>
   85760:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85764:	f7ff bb77 	b.w	84e56 <_vfiprintf_r+0x48a>
   85768:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8576c:	e487      	b.n	8507e <_vfiprintf_r+0x6b2>
   8576e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85772:	e4a7      	b.n	850c4 <_vfiprintf_r+0x6f8>
   85774:	4699      	mov	r9, r3
   85776:	07f3      	lsls	r3, r6, #31
   85778:	d505      	bpl.n	85786 <_vfiprintf_r+0xdba>
   8577a:	af2a      	add	r7, sp, #168	; 0xa8
   8577c:	2330      	movs	r3, #48	; 0x30
   8577e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   85782:	f7ff bba2 	b.w	84eca <_vfiprintf_r+0x4fe>
   85786:	9b01      	ldr	r3, [sp, #4]
   85788:	4657      	mov	r7, sl
   8578a:	9303      	str	r3, [sp, #12]
   8578c:	f7ff ba44 	b.w	84c18 <_vfiprintf_r+0x24c>
   85790:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85794:	e517      	b.n	851c6 <_vfiprintf_r+0x7fa>
   85796:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8579a:	e4fa      	b.n	85192 <_vfiprintf_r+0x7c6>
   8579c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   857a0:	e4d2      	b.n	85148 <_vfiprintf_r+0x77c>
   857a2:	bf00      	nop
   857a4:	0008769c 	.word	0x0008769c
   857a8:	000876b0 	.word	0x000876b0
   857ac:	000876b8 	.word	0x000876b8
   857b0:	00087678 	.word	0x00087678

000857b4 <__sbprintf>:
   857b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   857b6:	460c      	mov	r4, r1
   857b8:	8989      	ldrh	r1, [r1, #12]
   857ba:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   857be:	6e65      	ldr	r5, [r4, #100]	; 0x64
   857c0:	f021 0102 	bic.w	r1, r1, #2
   857c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   857c6:	f8ad 100c 	strh.w	r1, [sp, #12]
   857ca:	69e1      	ldr	r1, [r4, #28]
   857cc:	89e7      	ldrh	r7, [r4, #14]
   857ce:	9519      	str	r5, [sp, #100]	; 0x64
   857d0:	2500      	movs	r5, #0
   857d2:	9107      	str	r1, [sp, #28]
   857d4:	9609      	str	r6, [sp, #36]	; 0x24
   857d6:	9506      	str	r5, [sp, #24]
   857d8:	ae1a      	add	r6, sp, #104	; 0x68
   857da:	f44f 6580 	mov.w	r5, #1024	; 0x400
   857de:	4669      	mov	r1, sp
   857e0:	9600      	str	r6, [sp, #0]
   857e2:	9604      	str	r6, [sp, #16]
   857e4:	9502      	str	r5, [sp, #8]
   857e6:	9505      	str	r5, [sp, #20]
   857e8:	f8ad 700e 	strh.w	r7, [sp, #14]
   857ec:	4606      	mov	r6, r0
   857ee:	f7ff f8ed 	bl	849cc <_vfiprintf_r>
   857f2:	1e05      	subs	r5, r0, #0
   857f4:	db07      	blt.n	85806 <__sbprintf+0x52>
   857f6:	4630      	mov	r0, r6
   857f8:	4669      	mov	r1, sp
   857fa:	f000 f929 	bl	85a50 <_fflush_r>
   857fe:	2800      	cmp	r0, #0
   85800:	bf18      	it	ne
   85802:	f04f 35ff 	movne.w	r5, #4294967295
   85806:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8580a:	065b      	lsls	r3, r3, #25
   8580c:	d503      	bpl.n	85816 <__sbprintf+0x62>
   8580e:	89a3      	ldrh	r3, [r4, #12]
   85810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85814:	81a3      	strh	r3, [r4, #12]
   85816:	4628      	mov	r0, r5
   85818:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8581c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8581e:	bf00      	nop

00085820 <__swsetup_r>:
   85820:	b538      	push	{r3, r4, r5, lr}
   85822:	4b30      	ldr	r3, [pc, #192]	; (858e4 <__swsetup_r+0xc4>)
   85824:	4605      	mov	r5, r0
   85826:	6818      	ldr	r0, [r3, #0]
   85828:	460c      	mov	r4, r1
   8582a:	b110      	cbz	r0, 85832 <__swsetup_r+0x12>
   8582c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8582e:	2b00      	cmp	r3, #0
   85830:	d038      	beq.n	858a4 <__swsetup_r+0x84>
   85832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85836:	b293      	uxth	r3, r2
   85838:	0718      	lsls	r0, r3, #28
   8583a:	d50c      	bpl.n	85856 <__swsetup_r+0x36>
   8583c:	6920      	ldr	r0, [r4, #16]
   8583e:	b1a8      	cbz	r0, 8586c <__swsetup_r+0x4c>
   85840:	f013 0201 	ands.w	r2, r3, #1
   85844:	d01e      	beq.n	85884 <__swsetup_r+0x64>
   85846:	6963      	ldr	r3, [r4, #20]
   85848:	2200      	movs	r2, #0
   8584a:	425b      	negs	r3, r3
   8584c:	61a3      	str	r3, [r4, #24]
   8584e:	60a2      	str	r2, [r4, #8]
   85850:	b1f0      	cbz	r0, 85890 <__swsetup_r+0x70>
   85852:	2000      	movs	r0, #0
   85854:	bd38      	pop	{r3, r4, r5, pc}
   85856:	06d9      	lsls	r1, r3, #27
   85858:	d53b      	bpl.n	858d2 <__swsetup_r+0xb2>
   8585a:	0758      	lsls	r0, r3, #29
   8585c:	d425      	bmi.n	858aa <__swsetup_r+0x8a>
   8585e:	6920      	ldr	r0, [r4, #16]
   85860:	f042 0308 	orr.w	r3, r2, #8
   85864:	81a3      	strh	r3, [r4, #12]
   85866:	b29b      	uxth	r3, r3
   85868:	2800      	cmp	r0, #0
   8586a:	d1e9      	bne.n	85840 <__swsetup_r+0x20>
   8586c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   85870:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85874:	d0e4      	beq.n	85840 <__swsetup_r+0x20>
   85876:	4628      	mov	r0, r5
   85878:	4621      	mov	r1, r4
   8587a:	f000 fd13 	bl	862a4 <__smakebuf_r>
   8587e:	89a3      	ldrh	r3, [r4, #12]
   85880:	6920      	ldr	r0, [r4, #16]
   85882:	e7dd      	b.n	85840 <__swsetup_r+0x20>
   85884:	0799      	lsls	r1, r3, #30
   85886:	bf58      	it	pl
   85888:	6962      	ldrpl	r2, [r4, #20]
   8588a:	60a2      	str	r2, [r4, #8]
   8588c:	2800      	cmp	r0, #0
   8588e:	d1e0      	bne.n	85852 <__swsetup_r+0x32>
   85890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85894:	061a      	lsls	r2, r3, #24
   85896:	d5dd      	bpl.n	85854 <__swsetup_r+0x34>
   85898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8589c:	81a3      	strh	r3, [r4, #12]
   8589e:	f04f 30ff 	mov.w	r0, #4294967295
   858a2:	bd38      	pop	{r3, r4, r5, pc}
   858a4:	f000 f968 	bl	85b78 <__sinit>
   858a8:	e7c3      	b.n	85832 <__swsetup_r+0x12>
   858aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   858ac:	b151      	cbz	r1, 858c4 <__swsetup_r+0xa4>
   858ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
   858b2:	4299      	cmp	r1, r3
   858b4:	d004      	beq.n	858c0 <__swsetup_r+0xa0>
   858b6:	4628      	mov	r0, r5
   858b8:	f000 fa26 	bl	85d08 <_free_r>
   858bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   858c0:	2300      	movs	r3, #0
   858c2:	6323      	str	r3, [r4, #48]	; 0x30
   858c4:	6920      	ldr	r0, [r4, #16]
   858c6:	2300      	movs	r3, #0
   858c8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   858cc:	e884 0009 	stmia.w	r4, {r0, r3}
   858d0:	e7c6      	b.n	85860 <__swsetup_r+0x40>
   858d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   858d6:	2309      	movs	r3, #9
   858d8:	602b      	str	r3, [r5, #0]
   858da:	f04f 30ff 	mov.w	r0, #4294967295
   858de:	81a2      	strh	r2, [r4, #12]
   858e0:	bd38      	pop	{r3, r4, r5, pc}
   858e2:	bf00      	nop
   858e4:	200704d8 	.word	0x200704d8

000858e8 <register_fini>:
   858e8:	4b02      	ldr	r3, [pc, #8]	; (858f4 <register_fini+0xc>)
   858ea:	b113      	cbz	r3, 858f2 <register_fini+0xa>
   858ec:	4802      	ldr	r0, [pc, #8]	; (858f8 <register_fini+0x10>)
   858ee:	f000 b805 	b.w	858fc <atexit>
   858f2:	4770      	bx	lr
   858f4:	00000000 	.word	0x00000000
   858f8:	00085b8d 	.word	0x00085b8d

000858fc <atexit>:
   858fc:	2300      	movs	r3, #0
   858fe:	4601      	mov	r1, r0
   85900:	461a      	mov	r2, r3
   85902:	4618      	mov	r0, r3
   85904:	f001 bbce 	b.w	870a4 <__register_exitproc>

00085908 <__sflush_r>:
   85908:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8590c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85910:	b29a      	uxth	r2, r3
   85912:	460d      	mov	r5, r1
   85914:	0711      	lsls	r1, r2, #28
   85916:	4680      	mov	r8, r0
   85918:	d43c      	bmi.n	85994 <__sflush_r+0x8c>
   8591a:	686a      	ldr	r2, [r5, #4]
   8591c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85920:	2a00      	cmp	r2, #0
   85922:	81ab      	strh	r3, [r5, #12]
   85924:	dd73      	ble.n	85a0e <__sflush_r+0x106>
   85926:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85928:	2c00      	cmp	r4, #0
   8592a:	d04b      	beq.n	859c4 <__sflush_r+0xbc>
   8592c:	b29b      	uxth	r3, r3
   8592e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   85932:	2100      	movs	r1, #0
   85934:	b292      	uxth	r2, r2
   85936:	f8d8 6000 	ldr.w	r6, [r8]
   8593a:	f8c8 1000 	str.w	r1, [r8]
   8593e:	2a00      	cmp	r2, #0
   85940:	d069      	beq.n	85a16 <__sflush_r+0x10e>
   85942:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   85944:	075f      	lsls	r7, r3, #29
   85946:	d505      	bpl.n	85954 <__sflush_r+0x4c>
   85948:	6869      	ldr	r1, [r5, #4]
   8594a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8594c:	1a52      	subs	r2, r2, r1
   8594e:	b10b      	cbz	r3, 85954 <__sflush_r+0x4c>
   85950:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   85952:	1ad2      	subs	r2, r2, r3
   85954:	2300      	movs	r3, #0
   85956:	69e9      	ldr	r1, [r5, #28]
   85958:	4640      	mov	r0, r8
   8595a:	47a0      	blx	r4
   8595c:	1c44      	adds	r4, r0, #1
   8595e:	d03c      	beq.n	859da <__sflush_r+0xd2>
   85960:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85964:	6929      	ldr	r1, [r5, #16]
   85966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8596a:	2200      	movs	r2, #0
   8596c:	81ab      	strh	r3, [r5, #12]
   8596e:	04db      	lsls	r3, r3, #19
   85970:	e885 0006 	stmia.w	r5, {r1, r2}
   85974:	d449      	bmi.n	85a0a <__sflush_r+0x102>
   85976:	6b29      	ldr	r1, [r5, #48]	; 0x30
   85978:	f8c8 6000 	str.w	r6, [r8]
   8597c:	b311      	cbz	r1, 859c4 <__sflush_r+0xbc>
   8597e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85982:	4299      	cmp	r1, r3
   85984:	d002      	beq.n	8598c <__sflush_r+0x84>
   85986:	4640      	mov	r0, r8
   85988:	f000 f9be 	bl	85d08 <_free_r>
   8598c:	2000      	movs	r0, #0
   8598e:	6328      	str	r0, [r5, #48]	; 0x30
   85990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85994:	692e      	ldr	r6, [r5, #16]
   85996:	b1ae      	cbz	r6, 859c4 <__sflush_r+0xbc>
   85998:	0790      	lsls	r0, r2, #30
   8599a:	682c      	ldr	r4, [r5, #0]
   8599c:	bf0c      	ite	eq
   8599e:	696b      	ldreq	r3, [r5, #20]
   859a0:	2300      	movne	r3, #0
   859a2:	602e      	str	r6, [r5, #0]
   859a4:	1ba4      	subs	r4, r4, r6
   859a6:	60ab      	str	r3, [r5, #8]
   859a8:	e00a      	b.n	859c0 <__sflush_r+0xb8>
   859aa:	4623      	mov	r3, r4
   859ac:	4632      	mov	r2, r6
   859ae:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   859b0:	69e9      	ldr	r1, [r5, #28]
   859b2:	4640      	mov	r0, r8
   859b4:	47b8      	blx	r7
   859b6:	2800      	cmp	r0, #0
   859b8:	eba4 0400 	sub.w	r4, r4, r0
   859bc:	4406      	add	r6, r0
   859be:	dd04      	ble.n	859ca <__sflush_r+0xc2>
   859c0:	2c00      	cmp	r4, #0
   859c2:	dcf2      	bgt.n	859aa <__sflush_r+0xa2>
   859c4:	2000      	movs	r0, #0
   859c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   859ca:	89ab      	ldrh	r3, [r5, #12]
   859cc:	f04f 30ff 	mov.w	r0, #4294967295
   859d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   859d4:	81ab      	strh	r3, [r5, #12]
   859d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   859da:	f8d8 2000 	ldr.w	r2, [r8]
   859de:	2a1d      	cmp	r2, #29
   859e0:	d8f3      	bhi.n	859ca <__sflush_r+0xc2>
   859e2:	4b1a      	ldr	r3, [pc, #104]	; (85a4c <__sflush_r+0x144>)
   859e4:	40d3      	lsrs	r3, r2
   859e6:	f003 0301 	and.w	r3, r3, #1
   859ea:	f083 0401 	eor.w	r4, r3, #1
   859ee:	2b00      	cmp	r3, #0
   859f0:	d0eb      	beq.n	859ca <__sflush_r+0xc2>
   859f2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   859f6:	6929      	ldr	r1, [r5, #16]
   859f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   859fc:	6029      	str	r1, [r5, #0]
   859fe:	04d9      	lsls	r1, r3, #19
   85a00:	606c      	str	r4, [r5, #4]
   85a02:	81ab      	strh	r3, [r5, #12]
   85a04:	d5b7      	bpl.n	85976 <__sflush_r+0x6e>
   85a06:	2a00      	cmp	r2, #0
   85a08:	d1b5      	bne.n	85976 <__sflush_r+0x6e>
   85a0a:	6528      	str	r0, [r5, #80]	; 0x50
   85a0c:	e7b3      	b.n	85976 <__sflush_r+0x6e>
   85a0e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85a10:	2a00      	cmp	r2, #0
   85a12:	dc88      	bgt.n	85926 <__sflush_r+0x1e>
   85a14:	e7d6      	b.n	859c4 <__sflush_r+0xbc>
   85a16:	2301      	movs	r3, #1
   85a18:	69e9      	ldr	r1, [r5, #28]
   85a1a:	4640      	mov	r0, r8
   85a1c:	47a0      	blx	r4
   85a1e:	1c43      	adds	r3, r0, #1
   85a20:	4602      	mov	r2, r0
   85a22:	d002      	beq.n	85a2a <__sflush_r+0x122>
   85a24:	89ab      	ldrh	r3, [r5, #12]
   85a26:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85a28:	e78c      	b.n	85944 <__sflush_r+0x3c>
   85a2a:	f8d8 3000 	ldr.w	r3, [r8]
   85a2e:	2b00      	cmp	r3, #0
   85a30:	d0f8      	beq.n	85a24 <__sflush_r+0x11c>
   85a32:	2b1d      	cmp	r3, #29
   85a34:	d001      	beq.n	85a3a <__sflush_r+0x132>
   85a36:	2b16      	cmp	r3, #22
   85a38:	d102      	bne.n	85a40 <__sflush_r+0x138>
   85a3a:	f8c8 6000 	str.w	r6, [r8]
   85a3e:	e7c1      	b.n	859c4 <__sflush_r+0xbc>
   85a40:	89ab      	ldrh	r3, [r5, #12]
   85a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85a46:	81ab      	strh	r3, [r5, #12]
   85a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85a4c:	20400001 	.word	0x20400001

00085a50 <_fflush_r>:
   85a50:	b510      	push	{r4, lr}
   85a52:	4604      	mov	r4, r0
   85a54:	b082      	sub	sp, #8
   85a56:	b108      	cbz	r0, 85a5c <_fflush_r+0xc>
   85a58:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85a5a:	b153      	cbz	r3, 85a72 <_fflush_r+0x22>
   85a5c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   85a60:	b908      	cbnz	r0, 85a66 <_fflush_r+0x16>
   85a62:	b002      	add	sp, #8
   85a64:	bd10      	pop	{r4, pc}
   85a66:	4620      	mov	r0, r4
   85a68:	b002      	add	sp, #8
   85a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85a6e:	f7ff bf4b 	b.w	85908 <__sflush_r>
   85a72:	9101      	str	r1, [sp, #4]
   85a74:	f000 f880 	bl	85b78 <__sinit>
   85a78:	9901      	ldr	r1, [sp, #4]
   85a7a:	e7ef      	b.n	85a5c <_fflush_r+0xc>

00085a7c <_cleanup_r>:
   85a7c:	4901      	ldr	r1, [pc, #4]	; (85a84 <_cleanup_r+0x8>)
   85a7e:	f000 bbaf 	b.w	861e0 <_fwalk_reent>
   85a82:	bf00      	nop
   85a84:	0008716d 	.word	0x0008716d

00085a88 <__sinit.part.1>:
   85a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a8c:	4607      	mov	r7, r0
   85a8e:	4835      	ldr	r0, [pc, #212]	; (85b64 <__sinit.part.1+0xdc>)
   85a90:	687d      	ldr	r5, [r7, #4]
   85a92:	2400      	movs	r4, #0
   85a94:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85a98:	2304      	movs	r3, #4
   85a9a:	2103      	movs	r1, #3
   85a9c:	63f8      	str	r0, [r7, #60]	; 0x3c
   85a9e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85aa2:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85aa6:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85aaa:	b083      	sub	sp, #12
   85aac:	602c      	str	r4, [r5, #0]
   85aae:	606c      	str	r4, [r5, #4]
   85ab0:	60ac      	str	r4, [r5, #8]
   85ab2:	666c      	str	r4, [r5, #100]	; 0x64
   85ab4:	81ec      	strh	r4, [r5, #14]
   85ab6:	612c      	str	r4, [r5, #16]
   85ab8:	616c      	str	r4, [r5, #20]
   85aba:	61ac      	str	r4, [r5, #24]
   85abc:	81ab      	strh	r3, [r5, #12]
   85abe:	4621      	mov	r1, r4
   85ac0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85ac4:	2208      	movs	r2, #8
   85ac6:	f7fe fe19 	bl	846fc <memset>
   85aca:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85b68 <__sinit.part.1+0xe0>
   85ace:	68be      	ldr	r6, [r7, #8]
   85ad0:	f8df a098 	ldr.w	sl, [pc, #152]	; 85b6c <__sinit.part.1+0xe4>
   85ad4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85b70 <__sinit.part.1+0xe8>
   85ad8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85b74 <__sinit.part.1+0xec>
   85adc:	2301      	movs	r3, #1
   85ade:	2209      	movs	r2, #9
   85ae0:	f8c5 b020 	str.w	fp, [r5, #32]
   85ae4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85ae8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85aec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85af0:	61ed      	str	r5, [r5, #28]
   85af2:	4621      	mov	r1, r4
   85af4:	81f3      	strh	r3, [r6, #14]
   85af6:	81b2      	strh	r2, [r6, #12]
   85af8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85afc:	6034      	str	r4, [r6, #0]
   85afe:	6074      	str	r4, [r6, #4]
   85b00:	60b4      	str	r4, [r6, #8]
   85b02:	6674      	str	r4, [r6, #100]	; 0x64
   85b04:	6134      	str	r4, [r6, #16]
   85b06:	6174      	str	r4, [r6, #20]
   85b08:	61b4      	str	r4, [r6, #24]
   85b0a:	2208      	movs	r2, #8
   85b0c:	9301      	str	r3, [sp, #4]
   85b0e:	f7fe fdf5 	bl	846fc <memset>
   85b12:	68fd      	ldr	r5, [r7, #12]
   85b14:	2012      	movs	r0, #18
   85b16:	2202      	movs	r2, #2
   85b18:	61f6      	str	r6, [r6, #28]
   85b1a:	f8c6 b020 	str.w	fp, [r6, #32]
   85b1e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85b22:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85b26:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85b2a:	4621      	mov	r1, r4
   85b2c:	81a8      	strh	r0, [r5, #12]
   85b2e:	81ea      	strh	r2, [r5, #14]
   85b30:	602c      	str	r4, [r5, #0]
   85b32:	606c      	str	r4, [r5, #4]
   85b34:	60ac      	str	r4, [r5, #8]
   85b36:	666c      	str	r4, [r5, #100]	; 0x64
   85b38:	612c      	str	r4, [r5, #16]
   85b3a:	616c      	str	r4, [r5, #20]
   85b3c:	61ac      	str	r4, [r5, #24]
   85b3e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85b42:	2208      	movs	r2, #8
   85b44:	f7fe fdda 	bl	846fc <memset>
   85b48:	9b01      	ldr	r3, [sp, #4]
   85b4a:	61ed      	str	r5, [r5, #28]
   85b4c:	f8c5 b020 	str.w	fp, [r5, #32]
   85b50:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85b54:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85b58:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   85b5e:	b003      	add	sp, #12
   85b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85b64:	00085a7d 	.word	0x00085a7d
   85b68:	00086ed5 	.word	0x00086ed5
   85b6c:	00086ef9 	.word	0x00086ef9
   85b70:	00086f35 	.word	0x00086f35
   85b74:	00086f55 	.word	0x00086f55

00085b78 <__sinit>:
   85b78:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85b7a:	b103      	cbz	r3, 85b7e <__sinit+0x6>
   85b7c:	4770      	bx	lr
   85b7e:	f7ff bf83 	b.w	85a88 <__sinit.part.1>
   85b82:	bf00      	nop

00085b84 <__sfp_lock_acquire>:
   85b84:	4770      	bx	lr
   85b86:	bf00      	nop

00085b88 <__sfp_lock_release>:
   85b88:	4770      	bx	lr
   85b8a:	bf00      	nop

00085b8c <__libc_fini_array>:
   85b8c:	b538      	push	{r3, r4, r5, lr}
   85b8e:	4d07      	ldr	r5, [pc, #28]	; (85bac <__libc_fini_array+0x20>)
   85b90:	4c07      	ldr	r4, [pc, #28]	; (85bb0 <__libc_fini_array+0x24>)
   85b92:	1b2c      	subs	r4, r5, r4
   85b94:	10a4      	asrs	r4, r4, #2
   85b96:	d005      	beq.n	85ba4 <__libc_fini_array+0x18>
   85b98:	3c01      	subs	r4, #1
   85b9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85b9e:	4798      	blx	r3
   85ba0:	2c00      	cmp	r4, #0
   85ba2:	d1f9      	bne.n	85b98 <__libc_fini_array+0xc>
   85ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85ba8:	f001 bd98 	b.w	876dc <_fini>
   85bac:	000876ec 	.word	0x000876ec
   85bb0:	000876e8 	.word	0x000876e8

00085bb4 <__fputwc>:
   85bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85bb8:	b082      	sub	sp, #8
   85bba:	4606      	mov	r6, r0
   85bbc:	460f      	mov	r7, r1
   85bbe:	4614      	mov	r4, r2
   85bc0:	f000 fb3a 	bl	86238 <__locale_mb_cur_max>
   85bc4:	2801      	cmp	r0, #1
   85bc6:	d032      	beq.n	85c2e <__fputwc+0x7a>
   85bc8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85bcc:	463a      	mov	r2, r7
   85bce:	a901      	add	r1, sp, #4
   85bd0:	4630      	mov	r0, r6
   85bd2:	f001 fa19 	bl	87008 <_wcrtomb_r>
   85bd6:	f1b0 3fff 	cmp.w	r0, #4294967295
   85bda:	4680      	mov	r8, r0
   85bdc:	d020      	beq.n	85c20 <__fputwc+0x6c>
   85bde:	b370      	cbz	r0, 85c3e <__fputwc+0x8a>
   85be0:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85be4:	2500      	movs	r5, #0
   85be6:	e008      	b.n	85bfa <__fputwc+0x46>
   85be8:	6823      	ldr	r3, [r4, #0]
   85bea:	1c5a      	adds	r2, r3, #1
   85bec:	6022      	str	r2, [r4, #0]
   85bee:	7019      	strb	r1, [r3, #0]
   85bf0:	3501      	adds	r5, #1
   85bf2:	4545      	cmp	r5, r8
   85bf4:	d223      	bcs.n	85c3e <__fputwc+0x8a>
   85bf6:	ab01      	add	r3, sp, #4
   85bf8:	5d59      	ldrb	r1, [r3, r5]
   85bfa:	68a3      	ldr	r3, [r4, #8]
   85bfc:	3b01      	subs	r3, #1
   85bfe:	2b00      	cmp	r3, #0
   85c00:	60a3      	str	r3, [r4, #8]
   85c02:	daf1      	bge.n	85be8 <__fputwc+0x34>
   85c04:	69a2      	ldr	r2, [r4, #24]
   85c06:	4293      	cmp	r3, r2
   85c08:	db01      	blt.n	85c0e <__fputwc+0x5a>
   85c0a:	290a      	cmp	r1, #10
   85c0c:	d1ec      	bne.n	85be8 <__fputwc+0x34>
   85c0e:	4622      	mov	r2, r4
   85c10:	4630      	mov	r0, r6
   85c12:	f001 f9a3 	bl	86f5c <__swbuf_r>
   85c16:	1c43      	adds	r3, r0, #1
   85c18:	d1ea      	bne.n	85bf0 <__fputwc+0x3c>
   85c1a:	b002      	add	sp, #8
   85c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c20:	89a3      	ldrh	r3, [r4, #12]
   85c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85c26:	81a3      	strh	r3, [r4, #12]
   85c28:	b002      	add	sp, #8
   85c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c2e:	1e7b      	subs	r3, r7, #1
   85c30:	2bfe      	cmp	r3, #254	; 0xfe
   85c32:	d8c9      	bhi.n	85bc8 <__fputwc+0x14>
   85c34:	b2f9      	uxtb	r1, r7
   85c36:	4680      	mov	r8, r0
   85c38:	f88d 1004 	strb.w	r1, [sp, #4]
   85c3c:	e7d2      	b.n	85be4 <__fputwc+0x30>
   85c3e:	4638      	mov	r0, r7
   85c40:	b002      	add	sp, #8
   85c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c46:	bf00      	nop

00085c48 <_fputwc_r>:
   85c48:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   85c4c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85c50:	d10a      	bne.n	85c68 <_fputwc_r+0x20>
   85c52:	b410      	push	{r4}
   85c54:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85c56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85c5a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   85c5e:	6654      	str	r4, [r2, #100]	; 0x64
   85c60:	8193      	strh	r3, [r2, #12]
   85c62:	bc10      	pop	{r4}
   85c64:	f7ff bfa6 	b.w	85bb4 <__fputwc>
   85c68:	f7ff bfa4 	b.w	85bb4 <__fputwc>

00085c6c <_malloc_trim_r>:
   85c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c6e:	460c      	mov	r4, r1
   85c70:	4f22      	ldr	r7, [pc, #136]	; (85cfc <_malloc_trim_r+0x90>)
   85c72:	4606      	mov	r6, r0
   85c74:	f000 ff2e 	bl	86ad4 <__malloc_lock>
   85c78:	68bb      	ldr	r3, [r7, #8]
   85c7a:	685d      	ldr	r5, [r3, #4]
   85c7c:	f025 0503 	bic.w	r5, r5, #3
   85c80:	1b29      	subs	r1, r5, r4
   85c82:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85c86:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85c8a:	f021 010f 	bic.w	r1, r1, #15
   85c8e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85c92:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85c96:	db07      	blt.n	85ca8 <_malloc_trim_r+0x3c>
   85c98:	2100      	movs	r1, #0
   85c9a:	4630      	mov	r0, r6
   85c9c:	f001 f908 	bl	86eb0 <_sbrk_r>
   85ca0:	68bb      	ldr	r3, [r7, #8]
   85ca2:	442b      	add	r3, r5
   85ca4:	4298      	cmp	r0, r3
   85ca6:	d004      	beq.n	85cb2 <_malloc_trim_r+0x46>
   85ca8:	4630      	mov	r0, r6
   85caa:	f000 ff15 	bl	86ad8 <__malloc_unlock>
   85cae:	2000      	movs	r0, #0
   85cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85cb2:	4261      	negs	r1, r4
   85cb4:	4630      	mov	r0, r6
   85cb6:	f001 f8fb 	bl	86eb0 <_sbrk_r>
   85cba:	3001      	adds	r0, #1
   85cbc:	d00d      	beq.n	85cda <_malloc_trim_r+0x6e>
   85cbe:	4b10      	ldr	r3, [pc, #64]	; (85d00 <_malloc_trim_r+0x94>)
   85cc0:	68ba      	ldr	r2, [r7, #8]
   85cc2:	6819      	ldr	r1, [r3, #0]
   85cc4:	1b2d      	subs	r5, r5, r4
   85cc6:	f045 0501 	orr.w	r5, r5, #1
   85cca:	4630      	mov	r0, r6
   85ccc:	1b09      	subs	r1, r1, r4
   85cce:	6055      	str	r5, [r2, #4]
   85cd0:	6019      	str	r1, [r3, #0]
   85cd2:	f000 ff01 	bl	86ad8 <__malloc_unlock>
   85cd6:	2001      	movs	r0, #1
   85cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85cda:	2100      	movs	r1, #0
   85cdc:	4630      	mov	r0, r6
   85cde:	f001 f8e7 	bl	86eb0 <_sbrk_r>
   85ce2:	68ba      	ldr	r2, [r7, #8]
   85ce4:	1a83      	subs	r3, r0, r2
   85ce6:	2b0f      	cmp	r3, #15
   85ce8:	ddde      	ble.n	85ca8 <_malloc_trim_r+0x3c>
   85cea:	4c06      	ldr	r4, [pc, #24]	; (85d04 <_malloc_trim_r+0x98>)
   85cec:	4904      	ldr	r1, [pc, #16]	; (85d00 <_malloc_trim_r+0x94>)
   85cee:	6824      	ldr	r4, [r4, #0]
   85cf0:	f043 0301 	orr.w	r3, r3, #1
   85cf4:	1b00      	subs	r0, r0, r4
   85cf6:	6053      	str	r3, [r2, #4]
   85cf8:	6008      	str	r0, [r1, #0]
   85cfa:	e7d5      	b.n	85ca8 <_malloc_trim_r+0x3c>
   85cfc:	20070500 	.word	0x20070500
   85d00:	20070a08 	.word	0x20070a08
   85d04:	2007090c 	.word	0x2007090c

00085d08 <_free_r>:
   85d08:	2900      	cmp	r1, #0
   85d0a:	d045      	beq.n	85d98 <_free_r+0x90>
   85d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85d10:	460d      	mov	r5, r1
   85d12:	4680      	mov	r8, r0
   85d14:	f000 fede 	bl	86ad4 <__malloc_lock>
   85d18:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85d1c:	496a      	ldr	r1, [pc, #424]	; (85ec8 <_free_r+0x1c0>)
   85d1e:	f1a5 0408 	sub.w	r4, r5, #8
   85d22:	f027 0301 	bic.w	r3, r7, #1
   85d26:	18e2      	adds	r2, r4, r3
   85d28:	688e      	ldr	r6, [r1, #8]
   85d2a:	6850      	ldr	r0, [r2, #4]
   85d2c:	42b2      	cmp	r2, r6
   85d2e:	f020 0003 	bic.w	r0, r0, #3
   85d32:	d062      	beq.n	85dfa <_free_r+0xf2>
   85d34:	07fe      	lsls	r6, r7, #31
   85d36:	6050      	str	r0, [r2, #4]
   85d38:	d40b      	bmi.n	85d52 <_free_r+0x4a>
   85d3a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   85d3e:	f101 0e08 	add.w	lr, r1, #8
   85d42:	1be4      	subs	r4, r4, r7
   85d44:	68a5      	ldr	r5, [r4, #8]
   85d46:	443b      	add	r3, r7
   85d48:	4575      	cmp	r5, lr
   85d4a:	d06f      	beq.n	85e2c <_free_r+0x124>
   85d4c:	68e7      	ldr	r7, [r4, #12]
   85d4e:	60ef      	str	r7, [r5, #12]
   85d50:	60bd      	str	r5, [r7, #8]
   85d52:	1815      	adds	r5, r2, r0
   85d54:	686d      	ldr	r5, [r5, #4]
   85d56:	07ed      	lsls	r5, r5, #31
   85d58:	d542      	bpl.n	85de0 <_free_r+0xd8>
   85d5a:	f043 0201 	orr.w	r2, r3, #1
   85d5e:	6062      	str	r2, [r4, #4]
   85d60:	50e3      	str	r3, [r4, r3]
   85d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85d66:	d218      	bcs.n	85d9a <_free_r+0x92>
   85d68:	08db      	lsrs	r3, r3, #3
   85d6a:	6848      	ldr	r0, [r1, #4]
   85d6c:	109d      	asrs	r5, r3, #2
   85d6e:	2201      	movs	r2, #1
   85d70:	3301      	adds	r3, #1
   85d72:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85d76:	fa02 f505 	lsl.w	r5, r2, r5
   85d7a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   85d7e:	4328      	orrs	r0, r5
   85d80:	3a08      	subs	r2, #8
   85d82:	60e2      	str	r2, [r4, #12]
   85d84:	60a7      	str	r7, [r4, #8]
   85d86:	6048      	str	r0, [r1, #4]
   85d88:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85d8c:	60fc      	str	r4, [r7, #12]
   85d8e:	4640      	mov	r0, r8
   85d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85d94:	f000 bea0 	b.w	86ad8 <__malloc_unlock>
   85d98:	4770      	bx	lr
   85d9a:	0a5a      	lsrs	r2, r3, #9
   85d9c:	2a04      	cmp	r2, #4
   85d9e:	d853      	bhi.n	85e48 <_free_r+0x140>
   85da0:	099a      	lsrs	r2, r3, #6
   85da2:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85da6:	007f      	lsls	r7, r7, #1
   85da8:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85dac:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   85db0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   85db4:	3808      	subs	r0, #8
   85db6:	4290      	cmp	r0, r2
   85db8:	4943      	ldr	r1, [pc, #268]	; (85ec8 <_free_r+0x1c0>)
   85dba:	d04d      	beq.n	85e58 <_free_r+0x150>
   85dbc:	6851      	ldr	r1, [r2, #4]
   85dbe:	f021 0103 	bic.w	r1, r1, #3
   85dc2:	428b      	cmp	r3, r1
   85dc4:	d202      	bcs.n	85dcc <_free_r+0xc4>
   85dc6:	6892      	ldr	r2, [r2, #8]
   85dc8:	4290      	cmp	r0, r2
   85dca:	d1f7      	bne.n	85dbc <_free_r+0xb4>
   85dcc:	68d0      	ldr	r0, [r2, #12]
   85dce:	60e0      	str	r0, [r4, #12]
   85dd0:	60a2      	str	r2, [r4, #8]
   85dd2:	6084      	str	r4, [r0, #8]
   85dd4:	60d4      	str	r4, [r2, #12]
   85dd6:	4640      	mov	r0, r8
   85dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85ddc:	f000 be7c 	b.w	86ad8 <__malloc_unlock>
   85de0:	6895      	ldr	r5, [r2, #8]
   85de2:	4f3a      	ldr	r7, [pc, #232]	; (85ecc <_free_r+0x1c4>)
   85de4:	4403      	add	r3, r0
   85de6:	42bd      	cmp	r5, r7
   85de8:	d03f      	beq.n	85e6a <_free_r+0x162>
   85dea:	68d0      	ldr	r0, [r2, #12]
   85dec:	f043 0201 	orr.w	r2, r3, #1
   85df0:	60e8      	str	r0, [r5, #12]
   85df2:	6085      	str	r5, [r0, #8]
   85df4:	6062      	str	r2, [r4, #4]
   85df6:	50e3      	str	r3, [r4, r3]
   85df8:	e7b3      	b.n	85d62 <_free_r+0x5a>
   85dfa:	07ff      	lsls	r7, r7, #31
   85dfc:	4403      	add	r3, r0
   85dfe:	d407      	bmi.n	85e10 <_free_r+0x108>
   85e00:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85e04:	1b64      	subs	r4, r4, r5
   85e06:	68e2      	ldr	r2, [r4, #12]
   85e08:	68a0      	ldr	r0, [r4, #8]
   85e0a:	442b      	add	r3, r5
   85e0c:	60c2      	str	r2, [r0, #12]
   85e0e:	6090      	str	r0, [r2, #8]
   85e10:	4a2f      	ldr	r2, [pc, #188]	; (85ed0 <_free_r+0x1c8>)
   85e12:	f043 0001 	orr.w	r0, r3, #1
   85e16:	6812      	ldr	r2, [r2, #0]
   85e18:	6060      	str	r0, [r4, #4]
   85e1a:	4293      	cmp	r3, r2
   85e1c:	608c      	str	r4, [r1, #8]
   85e1e:	d3b6      	bcc.n	85d8e <_free_r+0x86>
   85e20:	4b2c      	ldr	r3, [pc, #176]	; (85ed4 <_free_r+0x1cc>)
   85e22:	4640      	mov	r0, r8
   85e24:	6819      	ldr	r1, [r3, #0]
   85e26:	f7ff ff21 	bl	85c6c <_malloc_trim_r>
   85e2a:	e7b0      	b.n	85d8e <_free_r+0x86>
   85e2c:	1811      	adds	r1, r2, r0
   85e2e:	6849      	ldr	r1, [r1, #4]
   85e30:	07c9      	lsls	r1, r1, #31
   85e32:	d444      	bmi.n	85ebe <_free_r+0x1b6>
   85e34:	6891      	ldr	r1, [r2, #8]
   85e36:	4403      	add	r3, r0
   85e38:	68d2      	ldr	r2, [r2, #12]
   85e3a:	f043 0001 	orr.w	r0, r3, #1
   85e3e:	60ca      	str	r2, [r1, #12]
   85e40:	6091      	str	r1, [r2, #8]
   85e42:	6060      	str	r0, [r4, #4]
   85e44:	50e3      	str	r3, [r4, r3]
   85e46:	e7a2      	b.n	85d8e <_free_r+0x86>
   85e48:	2a14      	cmp	r2, #20
   85e4a:	d817      	bhi.n	85e7c <_free_r+0x174>
   85e4c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85e50:	007f      	lsls	r7, r7, #1
   85e52:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   85e56:	e7a9      	b.n	85dac <_free_r+0xa4>
   85e58:	10aa      	asrs	r2, r5, #2
   85e5a:	684b      	ldr	r3, [r1, #4]
   85e5c:	2501      	movs	r5, #1
   85e5e:	fa05 f202 	lsl.w	r2, r5, r2
   85e62:	4313      	orrs	r3, r2
   85e64:	604b      	str	r3, [r1, #4]
   85e66:	4602      	mov	r2, r0
   85e68:	e7b1      	b.n	85dce <_free_r+0xc6>
   85e6a:	f043 0201 	orr.w	r2, r3, #1
   85e6e:	614c      	str	r4, [r1, #20]
   85e70:	610c      	str	r4, [r1, #16]
   85e72:	60e5      	str	r5, [r4, #12]
   85e74:	60a5      	str	r5, [r4, #8]
   85e76:	6062      	str	r2, [r4, #4]
   85e78:	50e3      	str	r3, [r4, r3]
   85e7a:	e788      	b.n	85d8e <_free_r+0x86>
   85e7c:	2a54      	cmp	r2, #84	; 0x54
   85e7e:	d806      	bhi.n	85e8e <_free_r+0x186>
   85e80:	0b1a      	lsrs	r2, r3, #12
   85e82:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85e86:	007f      	lsls	r7, r7, #1
   85e88:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85e8c:	e78e      	b.n	85dac <_free_r+0xa4>
   85e8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85e92:	d806      	bhi.n	85ea2 <_free_r+0x19a>
   85e94:	0bda      	lsrs	r2, r3, #15
   85e96:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85e9a:	007f      	lsls	r7, r7, #1
   85e9c:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85ea0:	e784      	b.n	85dac <_free_r+0xa4>
   85ea2:	f240 5054 	movw	r0, #1364	; 0x554
   85ea6:	4282      	cmp	r2, r0
   85ea8:	d806      	bhi.n	85eb8 <_free_r+0x1b0>
   85eaa:	0c9a      	lsrs	r2, r3, #18
   85eac:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85eb0:	007f      	lsls	r7, r7, #1
   85eb2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85eb6:	e779      	b.n	85dac <_free_r+0xa4>
   85eb8:	27fe      	movs	r7, #254	; 0xfe
   85eba:	257e      	movs	r5, #126	; 0x7e
   85ebc:	e776      	b.n	85dac <_free_r+0xa4>
   85ebe:	f043 0201 	orr.w	r2, r3, #1
   85ec2:	6062      	str	r2, [r4, #4]
   85ec4:	50e3      	str	r3, [r4, r3]
   85ec6:	e762      	b.n	85d8e <_free_r+0x86>
   85ec8:	20070500 	.word	0x20070500
   85ecc:	20070508 	.word	0x20070508
   85ed0:	20070908 	.word	0x20070908
   85ed4:	20070a04 	.word	0x20070a04

00085ed8 <__sfvwrite_r>:
   85ed8:	6893      	ldr	r3, [r2, #8]
   85eda:	2b00      	cmp	r3, #0
   85edc:	f000 80ab 	beq.w	86036 <__sfvwrite_r+0x15e>
   85ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ee4:	898b      	ldrh	r3, [r1, #12]
   85ee6:	b085      	sub	sp, #20
   85ee8:	460c      	mov	r4, r1
   85eea:	0719      	lsls	r1, r3, #28
   85eec:	9002      	str	r0, [sp, #8]
   85eee:	4616      	mov	r6, r2
   85ef0:	d528      	bpl.n	85f44 <__sfvwrite_r+0x6c>
   85ef2:	6922      	ldr	r2, [r4, #16]
   85ef4:	b332      	cbz	r2, 85f44 <__sfvwrite_r+0x6c>
   85ef6:	f003 0802 	and.w	r8, r3, #2
   85efa:	fa1f f088 	uxth.w	r0, r8
   85efe:	6835      	ldr	r5, [r6, #0]
   85f00:	b378      	cbz	r0, 85f62 <__sfvwrite_r+0x8a>
   85f02:	f04f 0900 	mov.w	r9, #0
   85f06:	46c8      	mov	r8, r9
   85f08:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 861dc <__sfvwrite_r+0x304>
   85f0c:	f1b8 0f00 	cmp.w	r8, #0
   85f10:	f000 808b 	beq.w	8602a <__sfvwrite_r+0x152>
   85f14:	45d0      	cmp	r8, sl
   85f16:	4643      	mov	r3, r8
   85f18:	464a      	mov	r2, r9
   85f1a:	bf28      	it	cs
   85f1c:	4653      	movcs	r3, sl
   85f1e:	69e1      	ldr	r1, [r4, #28]
   85f20:	9802      	ldr	r0, [sp, #8]
   85f22:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85f24:	47b8      	blx	r7
   85f26:	2800      	cmp	r0, #0
   85f28:	f340 80a5 	ble.w	86076 <__sfvwrite_r+0x19e>
   85f2c:	68b3      	ldr	r3, [r6, #8]
   85f2e:	4481      	add	r9, r0
   85f30:	1a1b      	subs	r3, r3, r0
   85f32:	ebc0 0808 	rsb	r8, r0, r8
   85f36:	60b3      	str	r3, [r6, #8]
   85f38:	2b00      	cmp	r3, #0
   85f3a:	d1e7      	bne.n	85f0c <__sfvwrite_r+0x34>
   85f3c:	2000      	movs	r0, #0
   85f3e:	b005      	add	sp, #20
   85f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85f44:	4621      	mov	r1, r4
   85f46:	9802      	ldr	r0, [sp, #8]
   85f48:	f7ff fc6a 	bl	85820 <__swsetup_r>
   85f4c:	2800      	cmp	r0, #0
   85f4e:	f040 813c 	bne.w	861ca <__sfvwrite_r+0x2f2>
   85f52:	89a3      	ldrh	r3, [r4, #12]
   85f54:	6835      	ldr	r5, [r6, #0]
   85f56:	f003 0802 	and.w	r8, r3, #2
   85f5a:	fa1f f088 	uxth.w	r0, r8
   85f5e:	2800      	cmp	r0, #0
   85f60:	d1cf      	bne.n	85f02 <__sfvwrite_r+0x2a>
   85f62:	f013 0901 	ands.w	r9, r3, #1
   85f66:	f040 8090 	bne.w	8608a <__sfvwrite_r+0x1b2>
   85f6a:	464f      	mov	r7, r9
   85f6c:	9601      	str	r6, [sp, #4]
   85f6e:	2f00      	cmp	r7, #0
   85f70:	d056      	beq.n	86020 <__sfvwrite_r+0x148>
   85f72:	059a      	lsls	r2, r3, #22
   85f74:	f8d4 8008 	ldr.w	r8, [r4, #8]
   85f78:	d55f      	bpl.n	8603a <__sfvwrite_r+0x162>
   85f7a:	4547      	cmp	r7, r8
   85f7c:	46c2      	mov	sl, r8
   85f7e:	f0c0 80bf 	bcc.w	86100 <__sfvwrite_r+0x228>
   85f82:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85f86:	f000 80bd 	beq.w	86104 <__sfvwrite_r+0x22c>
   85f8a:	6962      	ldr	r2, [r4, #20]
   85f8c:	6820      	ldr	r0, [r4, #0]
   85f8e:	6921      	ldr	r1, [r4, #16]
   85f90:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85f94:	ebc1 0a00 	rsb	sl, r1, r0
   85f98:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85f9c:	f10a 0001 	add.w	r0, sl, #1
   85fa0:	ea4f 0868 	mov.w	r8, r8, asr #1
   85fa4:	4438      	add	r0, r7
   85fa6:	4540      	cmp	r0, r8
   85fa8:	4642      	mov	r2, r8
   85faa:	bf84      	itt	hi
   85fac:	4680      	movhi	r8, r0
   85fae:	4642      	movhi	r2, r8
   85fb0:	055b      	lsls	r3, r3, #21
   85fb2:	f140 80f2 	bpl.w	8619a <__sfvwrite_r+0x2c2>
   85fb6:	4611      	mov	r1, r2
   85fb8:	9802      	ldr	r0, [sp, #8]
   85fba:	f000 f9bf 	bl	8633c <_malloc_r>
   85fbe:	4683      	mov	fp, r0
   85fc0:	2800      	cmp	r0, #0
   85fc2:	f000 8105 	beq.w	861d0 <__sfvwrite_r+0x2f8>
   85fc6:	4652      	mov	r2, sl
   85fc8:	6921      	ldr	r1, [r4, #16]
   85fca:	f000 fca9 	bl	86920 <memcpy>
   85fce:	89a3      	ldrh	r3, [r4, #12]
   85fd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85fd8:	81a3      	strh	r3, [r4, #12]
   85fda:	ebca 0308 	rsb	r3, sl, r8
   85fde:	eb0b 000a 	add.w	r0, fp, sl
   85fe2:	f8c4 8014 	str.w	r8, [r4, #20]
   85fe6:	46ba      	mov	sl, r7
   85fe8:	46b8      	mov	r8, r7
   85fea:	f8c4 b010 	str.w	fp, [r4, #16]
   85fee:	6020      	str	r0, [r4, #0]
   85ff0:	60a3      	str	r3, [r4, #8]
   85ff2:	4652      	mov	r2, sl
   85ff4:	4649      	mov	r1, r9
   85ff6:	f000 fd09 	bl	86a0c <memmove>
   85ffa:	68a0      	ldr	r0, [r4, #8]
   85ffc:	6823      	ldr	r3, [r4, #0]
   85ffe:	ebc8 0000 	rsb	r0, r8, r0
   86002:	60a0      	str	r0, [r4, #8]
   86004:	4638      	mov	r0, r7
   86006:	4453      	add	r3, sl
   86008:	6023      	str	r3, [r4, #0]
   8600a:	9a01      	ldr	r2, [sp, #4]
   8600c:	4481      	add	r9, r0
   8600e:	6893      	ldr	r3, [r2, #8]
   86010:	1a3f      	subs	r7, r7, r0
   86012:	1a1b      	subs	r3, r3, r0
   86014:	6093      	str	r3, [r2, #8]
   86016:	2b00      	cmp	r3, #0
   86018:	d090      	beq.n	85f3c <__sfvwrite_r+0x64>
   8601a:	89a3      	ldrh	r3, [r4, #12]
   8601c:	2f00      	cmp	r7, #0
   8601e:	d1a8      	bne.n	85f72 <__sfvwrite_r+0x9a>
   86020:	f8d5 9000 	ldr.w	r9, [r5]
   86024:	686f      	ldr	r7, [r5, #4]
   86026:	3508      	adds	r5, #8
   86028:	e7a1      	b.n	85f6e <__sfvwrite_r+0x96>
   8602a:	f8d5 9000 	ldr.w	r9, [r5]
   8602e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   86032:	3508      	adds	r5, #8
   86034:	e76a      	b.n	85f0c <__sfvwrite_r+0x34>
   86036:	2000      	movs	r0, #0
   86038:	4770      	bx	lr
   8603a:	6820      	ldr	r0, [r4, #0]
   8603c:	6923      	ldr	r3, [r4, #16]
   8603e:	4298      	cmp	r0, r3
   86040:	d803      	bhi.n	8604a <__sfvwrite_r+0x172>
   86042:	6962      	ldr	r2, [r4, #20]
   86044:	4297      	cmp	r7, r2
   86046:	f080 8083 	bcs.w	86150 <__sfvwrite_r+0x278>
   8604a:	45b8      	cmp	r8, r7
   8604c:	bf28      	it	cs
   8604e:	46b8      	movcs	r8, r7
   86050:	4649      	mov	r1, r9
   86052:	4642      	mov	r2, r8
   86054:	f000 fcda 	bl	86a0c <memmove>
   86058:	68a3      	ldr	r3, [r4, #8]
   8605a:	6822      	ldr	r2, [r4, #0]
   8605c:	ebc8 0303 	rsb	r3, r8, r3
   86060:	4442      	add	r2, r8
   86062:	60a3      	str	r3, [r4, #8]
   86064:	6022      	str	r2, [r4, #0]
   86066:	2b00      	cmp	r3, #0
   86068:	d148      	bne.n	860fc <__sfvwrite_r+0x224>
   8606a:	4621      	mov	r1, r4
   8606c:	9802      	ldr	r0, [sp, #8]
   8606e:	f7ff fcef 	bl	85a50 <_fflush_r>
   86072:	2800      	cmp	r0, #0
   86074:	d042      	beq.n	860fc <__sfvwrite_r+0x224>
   86076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8607a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8607e:	f04f 30ff 	mov.w	r0, #4294967295
   86082:	81a3      	strh	r3, [r4, #12]
   86084:	b005      	add	sp, #20
   86086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8608a:	4680      	mov	r8, r0
   8608c:	4682      	mov	sl, r0
   8608e:	4681      	mov	r9, r0
   86090:	9001      	str	r0, [sp, #4]
   86092:	f1b9 0f00 	cmp.w	r9, #0
   86096:	d029      	beq.n	860ec <__sfvwrite_r+0x214>
   86098:	9b01      	ldr	r3, [sp, #4]
   8609a:	2b00      	cmp	r3, #0
   8609c:	d04b      	beq.n	86136 <__sfvwrite_r+0x25e>
   8609e:	45c8      	cmp	r8, r9
   860a0:	46c3      	mov	fp, r8
   860a2:	bf28      	it	cs
   860a4:	46cb      	movcs	fp, r9
   860a6:	6820      	ldr	r0, [r4, #0]
   860a8:	6923      	ldr	r3, [r4, #16]
   860aa:	465f      	mov	r7, fp
   860ac:	4298      	cmp	r0, r3
   860ae:	6962      	ldr	r2, [r4, #20]
   860b0:	d903      	bls.n	860ba <__sfvwrite_r+0x1e2>
   860b2:	68a3      	ldr	r3, [r4, #8]
   860b4:	4413      	add	r3, r2
   860b6:	459b      	cmp	fp, r3
   860b8:	dc5c      	bgt.n	86174 <__sfvwrite_r+0x29c>
   860ba:	4593      	cmp	fp, r2
   860bc:	db24      	blt.n	86108 <__sfvwrite_r+0x230>
   860be:	4613      	mov	r3, r2
   860c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   860c2:	4652      	mov	r2, sl
   860c4:	69e1      	ldr	r1, [r4, #28]
   860c6:	9802      	ldr	r0, [sp, #8]
   860c8:	47b8      	blx	r7
   860ca:	1e07      	subs	r7, r0, #0
   860cc:	ddd3      	ble.n	86076 <__sfvwrite_r+0x19e>
   860ce:	ebb8 0807 	subs.w	r8, r8, r7
   860d2:	d027      	beq.n	86124 <__sfvwrite_r+0x24c>
   860d4:	68b3      	ldr	r3, [r6, #8]
   860d6:	44ba      	add	sl, r7
   860d8:	1bdb      	subs	r3, r3, r7
   860da:	ebc7 0909 	rsb	r9, r7, r9
   860de:	60b3      	str	r3, [r6, #8]
   860e0:	2b00      	cmp	r3, #0
   860e2:	f43f af2b 	beq.w	85f3c <__sfvwrite_r+0x64>
   860e6:	f1b9 0f00 	cmp.w	r9, #0
   860ea:	d1d5      	bne.n	86098 <__sfvwrite_r+0x1c0>
   860ec:	2300      	movs	r3, #0
   860ee:	f8d5 a000 	ldr.w	sl, [r5]
   860f2:	f8d5 9004 	ldr.w	r9, [r5, #4]
   860f6:	9301      	str	r3, [sp, #4]
   860f8:	3508      	adds	r5, #8
   860fa:	e7ca      	b.n	86092 <__sfvwrite_r+0x1ba>
   860fc:	4640      	mov	r0, r8
   860fe:	e784      	b.n	8600a <__sfvwrite_r+0x132>
   86100:	46b8      	mov	r8, r7
   86102:	46ba      	mov	sl, r7
   86104:	6820      	ldr	r0, [r4, #0]
   86106:	e774      	b.n	85ff2 <__sfvwrite_r+0x11a>
   86108:	465a      	mov	r2, fp
   8610a:	4651      	mov	r1, sl
   8610c:	f000 fc7e 	bl	86a0c <memmove>
   86110:	68a2      	ldr	r2, [r4, #8]
   86112:	6823      	ldr	r3, [r4, #0]
   86114:	ebcb 0202 	rsb	r2, fp, r2
   86118:	445b      	add	r3, fp
   8611a:	ebb8 0807 	subs.w	r8, r8, r7
   8611e:	60a2      	str	r2, [r4, #8]
   86120:	6023      	str	r3, [r4, #0]
   86122:	d1d7      	bne.n	860d4 <__sfvwrite_r+0x1fc>
   86124:	4621      	mov	r1, r4
   86126:	9802      	ldr	r0, [sp, #8]
   86128:	f7ff fc92 	bl	85a50 <_fflush_r>
   8612c:	2800      	cmp	r0, #0
   8612e:	d1a2      	bne.n	86076 <__sfvwrite_r+0x19e>
   86130:	f8cd 8004 	str.w	r8, [sp, #4]
   86134:	e7ce      	b.n	860d4 <__sfvwrite_r+0x1fc>
   86136:	464a      	mov	r2, r9
   86138:	210a      	movs	r1, #10
   8613a:	4650      	mov	r0, sl
   8613c:	f000 fbaa 	bl	86894 <memchr>
   86140:	2800      	cmp	r0, #0
   86142:	d03d      	beq.n	861c0 <__sfvwrite_r+0x2e8>
   86144:	3001      	adds	r0, #1
   86146:	2301      	movs	r3, #1
   86148:	ebca 0800 	rsb	r8, sl, r0
   8614c:	9301      	str	r3, [sp, #4]
   8614e:	e7a6      	b.n	8609e <__sfvwrite_r+0x1c6>
   86150:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   86154:	42bb      	cmp	r3, r7
   86156:	bf28      	it	cs
   86158:	463b      	movcs	r3, r7
   8615a:	fb93 f3f2 	sdiv	r3, r3, r2
   8615e:	69e1      	ldr	r1, [r4, #28]
   86160:	fb02 f303 	mul.w	r3, r2, r3
   86164:	9802      	ldr	r0, [sp, #8]
   86166:	464a      	mov	r2, r9
   86168:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8616a:	47b0      	blx	r6
   8616c:	2800      	cmp	r0, #0
   8616e:	f73f af4c 	bgt.w	8600a <__sfvwrite_r+0x132>
   86172:	e780      	b.n	86076 <__sfvwrite_r+0x19e>
   86174:	461a      	mov	r2, r3
   86176:	4651      	mov	r1, sl
   86178:	9303      	str	r3, [sp, #12]
   8617a:	f000 fc47 	bl	86a0c <memmove>
   8617e:	6822      	ldr	r2, [r4, #0]
   86180:	9b03      	ldr	r3, [sp, #12]
   86182:	4621      	mov	r1, r4
   86184:	441a      	add	r2, r3
   86186:	6022      	str	r2, [r4, #0]
   86188:	9802      	ldr	r0, [sp, #8]
   8618a:	f7ff fc61 	bl	85a50 <_fflush_r>
   8618e:	9b03      	ldr	r3, [sp, #12]
   86190:	2800      	cmp	r0, #0
   86192:	f47f af70 	bne.w	86076 <__sfvwrite_r+0x19e>
   86196:	461f      	mov	r7, r3
   86198:	e799      	b.n	860ce <__sfvwrite_r+0x1f6>
   8619a:	9802      	ldr	r0, [sp, #8]
   8619c:	f000 fc9e 	bl	86adc <_realloc_r>
   861a0:	4683      	mov	fp, r0
   861a2:	2800      	cmp	r0, #0
   861a4:	f47f af19 	bne.w	85fda <__sfvwrite_r+0x102>
   861a8:	9d02      	ldr	r5, [sp, #8]
   861aa:	6921      	ldr	r1, [r4, #16]
   861ac:	4628      	mov	r0, r5
   861ae:	f7ff fdab 	bl	85d08 <_free_r>
   861b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   861b6:	220c      	movs	r2, #12
   861b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   861bc:	602a      	str	r2, [r5, #0]
   861be:	e75c      	b.n	8607a <__sfvwrite_r+0x1a2>
   861c0:	2301      	movs	r3, #1
   861c2:	f109 0801 	add.w	r8, r9, #1
   861c6:	9301      	str	r3, [sp, #4]
   861c8:	e769      	b.n	8609e <__sfvwrite_r+0x1c6>
   861ca:	f04f 30ff 	mov.w	r0, #4294967295
   861ce:	e6b6      	b.n	85f3e <__sfvwrite_r+0x66>
   861d0:	9a02      	ldr	r2, [sp, #8]
   861d2:	230c      	movs	r3, #12
   861d4:	6013      	str	r3, [r2, #0]
   861d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   861da:	e74e      	b.n	8607a <__sfvwrite_r+0x1a2>
   861dc:	7ffffc00 	.word	0x7ffffc00

000861e0 <_fwalk_reent>:
   861e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   861e4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   861e8:	d01e      	beq.n	86228 <_fwalk_reent+0x48>
   861ea:	4688      	mov	r8, r1
   861ec:	4607      	mov	r7, r0
   861ee:	f04f 0900 	mov.w	r9, #0
   861f2:	6875      	ldr	r5, [r6, #4]
   861f4:	68b4      	ldr	r4, [r6, #8]
   861f6:	3d01      	subs	r5, #1
   861f8:	d410      	bmi.n	8621c <_fwalk_reent+0x3c>
   861fa:	89a3      	ldrh	r3, [r4, #12]
   861fc:	3d01      	subs	r5, #1
   861fe:	2b01      	cmp	r3, #1
   86200:	d908      	bls.n	86214 <_fwalk_reent+0x34>
   86202:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   86206:	3301      	adds	r3, #1
   86208:	d004      	beq.n	86214 <_fwalk_reent+0x34>
   8620a:	4621      	mov	r1, r4
   8620c:	4638      	mov	r0, r7
   8620e:	47c0      	blx	r8
   86210:	ea49 0900 	orr.w	r9, r9, r0
   86214:	1c6b      	adds	r3, r5, #1
   86216:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8621a:	d1ee      	bne.n	861fa <_fwalk_reent+0x1a>
   8621c:	6836      	ldr	r6, [r6, #0]
   8621e:	2e00      	cmp	r6, #0
   86220:	d1e7      	bne.n	861f2 <_fwalk_reent+0x12>
   86222:	4648      	mov	r0, r9
   86224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86228:	46b1      	mov	r9, r6
   8622a:	4648      	mov	r0, r9
   8622c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00086230 <__locale_charset>:
   86230:	4800      	ldr	r0, [pc, #0]	; (86234 <__locale_charset+0x4>)
   86232:	4770      	bx	lr
   86234:	200704dc 	.word	0x200704dc

00086238 <__locale_mb_cur_max>:
   86238:	4b01      	ldr	r3, [pc, #4]	; (86240 <__locale_mb_cur_max+0x8>)
   8623a:	6818      	ldr	r0, [r3, #0]
   8623c:	4770      	bx	lr
   8623e:	bf00      	nop
   86240:	200704fc 	.word	0x200704fc

00086244 <__swhatbuf_r>:
   86244:	b570      	push	{r4, r5, r6, lr}
   86246:	460e      	mov	r6, r1
   86248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8624c:	b090      	sub	sp, #64	; 0x40
   8624e:	2900      	cmp	r1, #0
   86250:	4614      	mov	r4, r2
   86252:	461d      	mov	r5, r3
   86254:	db14      	blt.n	86280 <__swhatbuf_r+0x3c>
   86256:	aa01      	add	r2, sp, #4
   86258:	f000 ffca 	bl	871f0 <_fstat_r>
   8625c:	2800      	cmp	r0, #0
   8625e:	db0f      	blt.n	86280 <__swhatbuf_r+0x3c>
   86260:	9a02      	ldr	r2, [sp, #8]
   86262:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86266:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8626a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8626e:	fab2 f282 	clz	r2, r2
   86272:	f44f 6000 	mov.w	r0, #2048	; 0x800
   86276:	0952      	lsrs	r2, r2, #5
   86278:	602a      	str	r2, [r5, #0]
   8627a:	6023      	str	r3, [r4, #0]
   8627c:	b010      	add	sp, #64	; 0x40
   8627e:	bd70      	pop	{r4, r5, r6, pc}
   86280:	89b2      	ldrh	r2, [r6, #12]
   86282:	2000      	movs	r0, #0
   86284:	f002 0280 	and.w	r2, r2, #128	; 0x80
   86288:	b292      	uxth	r2, r2
   8628a:	6028      	str	r0, [r5, #0]
   8628c:	b11a      	cbz	r2, 86296 <__swhatbuf_r+0x52>
   8628e:	2340      	movs	r3, #64	; 0x40
   86290:	6023      	str	r3, [r4, #0]
   86292:	b010      	add	sp, #64	; 0x40
   86294:	bd70      	pop	{r4, r5, r6, pc}
   86296:	4610      	mov	r0, r2
   86298:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8629c:	6023      	str	r3, [r4, #0]
   8629e:	b010      	add	sp, #64	; 0x40
   862a0:	bd70      	pop	{r4, r5, r6, pc}
   862a2:	bf00      	nop

000862a4 <__smakebuf_r>:
   862a4:	898a      	ldrh	r2, [r1, #12]
   862a6:	460b      	mov	r3, r1
   862a8:	0792      	lsls	r2, r2, #30
   862aa:	d506      	bpl.n	862ba <__smakebuf_r+0x16>
   862ac:	f101 0243 	add.w	r2, r1, #67	; 0x43
   862b0:	2101      	movs	r1, #1
   862b2:	601a      	str	r2, [r3, #0]
   862b4:	611a      	str	r2, [r3, #16]
   862b6:	6159      	str	r1, [r3, #20]
   862b8:	4770      	bx	lr
   862ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   862bc:	b083      	sub	sp, #12
   862be:	ab01      	add	r3, sp, #4
   862c0:	466a      	mov	r2, sp
   862c2:	460c      	mov	r4, r1
   862c4:	4605      	mov	r5, r0
   862c6:	f7ff ffbd 	bl	86244 <__swhatbuf_r>
   862ca:	9900      	ldr	r1, [sp, #0]
   862cc:	4606      	mov	r6, r0
   862ce:	4628      	mov	r0, r5
   862d0:	f000 f834 	bl	8633c <_malloc_r>
   862d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   862d8:	b1d0      	cbz	r0, 86310 <__smakebuf_r+0x6c>
   862da:	e89d 0006 	ldmia.w	sp, {r1, r2}
   862de:	4f12      	ldr	r7, [pc, #72]	; (86328 <__smakebuf_r+0x84>)
   862e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   862e4:	63ef      	str	r7, [r5, #60]	; 0x3c
   862e6:	81a3      	strh	r3, [r4, #12]
   862e8:	6020      	str	r0, [r4, #0]
   862ea:	6120      	str	r0, [r4, #16]
   862ec:	6161      	str	r1, [r4, #20]
   862ee:	b91a      	cbnz	r2, 862f8 <__smakebuf_r+0x54>
   862f0:	4333      	orrs	r3, r6
   862f2:	81a3      	strh	r3, [r4, #12]
   862f4:	b003      	add	sp, #12
   862f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   862f8:	4628      	mov	r0, r5
   862fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   862fe:	f000 ff8b 	bl	87218 <_isatty_r>
   86302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86306:	2800      	cmp	r0, #0
   86308:	d0f2      	beq.n	862f0 <__smakebuf_r+0x4c>
   8630a:	f043 0301 	orr.w	r3, r3, #1
   8630e:	e7ef      	b.n	862f0 <__smakebuf_r+0x4c>
   86310:	059a      	lsls	r2, r3, #22
   86312:	d4ef      	bmi.n	862f4 <__smakebuf_r+0x50>
   86314:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86318:	f043 0302 	orr.w	r3, r3, #2
   8631c:	2101      	movs	r1, #1
   8631e:	81a3      	strh	r3, [r4, #12]
   86320:	6022      	str	r2, [r4, #0]
   86322:	6122      	str	r2, [r4, #16]
   86324:	6161      	str	r1, [r4, #20]
   86326:	e7e5      	b.n	862f4 <__smakebuf_r+0x50>
   86328:	00085a7d 	.word	0x00085a7d

0008632c <malloc>:
   8632c:	4b02      	ldr	r3, [pc, #8]	; (86338 <malloc+0xc>)
   8632e:	4601      	mov	r1, r0
   86330:	6818      	ldr	r0, [r3, #0]
   86332:	f000 b803 	b.w	8633c <_malloc_r>
   86336:	bf00      	nop
   86338:	200704d8 	.word	0x200704d8

0008633c <_malloc_r>:
   8633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86340:	f101 050b 	add.w	r5, r1, #11
   86344:	2d16      	cmp	r5, #22
   86346:	b083      	sub	sp, #12
   86348:	4606      	mov	r6, r0
   8634a:	f240 80a0 	bls.w	8648e <_malloc_r+0x152>
   8634e:	f035 0507 	bics.w	r5, r5, #7
   86352:	f100 80c0 	bmi.w	864d6 <_malloc_r+0x19a>
   86356:	42a9      	cmp	r1, r5
   86358:	f200 80bd 	bhi.w	864d6 <_malloc_r+0x19a>
   8635c:	f000 fbba 	bl	86ad4 <__malloc_lock>
   86360:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   86364:	f0c0 8290 	bcc.w	86888 <_malloc_r+0x54c>
   86368:	0a6b      	lsrs	r3, r5, #9
   8636a:	f000 80bb 	beq.w	864e4 <_malloc_r+0x1a8>
   8636e:	2b04      	cmp	r3, #4
   86370:	f200 8177 	bhi.w	86662 <_malloc_r+0x326>
   86374:	09a8      	lsrs	r0, r5, #6
   86376:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   8637a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8637e:	3038      	adds	r0, #56	; 0x38
   86380:	4fbe      	ldr	r7, [pc, #760]	; (8667c <_malloc_r+0x340>)
   86382:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   86386:	684c      	ldr	r4, [r1, #4]
   86388:	3908      	subs	r1, #8
   8638a:	42a1      	cmp	r1, r4
   8638c:	d107      	bne.n	8639e <_malloc_r+0x62>
   8638e:	e0ae      	b.n	864ee <_malloc_r+0x1b2>
   86390:	2a00      	cmp	r2, #0
   86392:	f280 80ae 	bge.w	864f2 <_malloc_r+0x1b6>
   86396:	68e4      	ldr	r4, [r4, #12]
   86398:	42a1      	cmp	r1, r4
   8639a:	f000 80a8 	beq.w	864ee <_malloc_r+0x1b2>
   8639e:	6863      	ldr	r3, [r4, #4]
   863a0:	f023 0303 	bic.w	r3, r3, #3
   863a4:	1b5a      	subs	r2, r3, r5
   863a6:	2a0f      	cmp	r2, #15
   863a8:	ddf2      	ble.n	86390 <_malloc_r+0x54>
   863aa:	49b4      	ldr	r1, [pc, #720]	; (8667c <_malloc_r+0x340>)
   863ac:	693c      	ldr	r4, [r7, #16]
   863ae:	f101 0e08 	add.w	lr, r1, #8
   863b2:	4574      	cmp	r4, lr
   863b4:	f000 81a8 	beq.w	86708 <_malloc_r+0x3cc>
   863b8:	6863      	ldr	r3, [r4, #4]
   863ba:	f023 0303 	bic.w	r3, r3, #3
   863be:	1b5a      	subs	r2, r3, r5
   863c0:	2a0f      	cmp	r2, #15
   863c2:	f300 818e 	bgt.w	866e2 <_malloc_r+0x3a6>
   863c6:	2a00      	cmp	r2, #0
   863c8:	f8c1 e014 	str.w	lr, [r1, #20]
   863cc:	f8c1 e010 	str.w	lr, [r1, #16]
   863d0:	f280 8093 	bge.w	864fa <_malloc_r+0x1be>
   863d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   863d8:	f080 815c 	bcs.w	86694 <_malloc_r+0x358>
   863dc:	08db      	lsrs	r3, r3, #3
   863de:	684a      	ldr	r2, [r1, #4]
   863e0:	ea4f 09a3 	mov.w	r9, r3, asr #2
   863e4:	f04f 0c01 	mov.w	ip, #1
   863e8:	3301      	adds	r3, #1
   863ea:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   863ee:	fa0c f909 	lsl.w	r9, ip, r9
   863f2:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   863f6:	ea49 0202 	orr.w	r2, r9, r2
   863fa:	f1ac 0c08 	sub.w	ip, ip, #8
   863fe:	f8c4 c00c 	str.w	ip, [r4, #12]
   86402:	f8c4 8008 	str.w	r8, [r4, #8]
   86406:	604a      	str	r2, [r1, #4]
   86408:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8640c:	f8c8 400c 	str.w	r4, [r8, #12]
   86410:	1083      	asrs	r3, r0, #2
   86412:	2401      	movs	r4, #1
   86414:	409c      	lsls	r4, r3
   86416:	4294      	cmp	r4, r2
   86418:	d87c      	bhi.n	86514 <_malloc_r+0x1d8>
   8641a:	4214      	tst	r4, r2
   8641c:	d106      	bne.n	8642c <_malloc_r+0xf0>
   8641e:	f020 0003 	bic.w	r0, r0, #3
   86422:	0064      	lsls	r4, r4, #1
   86424:	4214      	tst	r4, r2
   86426:	f100 0004 	add.w	r0, r0, #4
   8642a:	d0fa      	beq.n	86422 <_malloc_r+0xe6>
   8642c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   86430:	46cc      	mov	ip, r9
   86432:	4680      	mov	r8, r0
   86434:	f8dc 100c 	ldr.w	r1, [ip, #12]
   86438:	458c      	cmp	ip, r1
   8643a:	d107      	bne.n	8644c <_malloc_r+0x110>
   8643c:	e166      	b.n	8670c <_malloc_r+0x3d0>
   8643e:	2a00      	cmp	r2, #0
   86440:	f280 8174 	bge.w	8672c <_malloc_r+0x3f0>
   86444:	68c9      	ldr	r1, [r1, #12]
   86446:	458c      	cmp	ip, r1
   86448:	f000 8160 	beq.w	8670c <_malloc_r+0x3d0>
   8644c:	684b      	ldr	r3, [r1, #4]
   8644e:	f023 0303 	bic.w	r3, r3, #3
   86452:	1b5a      	subs	r2, r3, r5
   86454:	2a0f      	cmp	r2, #15
   86456:	ddf2      	ble.n	8643e <_malloc_r+0x102>
   86458:	460c      	mov	r4, r1
   8645a:	68cb      	ldr	r3, [r1, #12]
   8645c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   86460:	f045 0801 	orr.w	r8, r5, #1
   86464:	f8c1 8004 	str.w	r8, [r1, #4]
   86468:	440d      	add	r5, r1
   8646a:	f042 0101 	orr.w	r1, r2, #1
   8646e:	f8cc 300c 	str.w	r3, [ip, #12]
   86472:	4630      	mov	r0, r6
   86474:	f8c3 c008 	str.w	ip, [r3, #8]
   86478:	617d      	str	r5, [r7, #20]
   8647a:	613d      	str	r5, [r7, #16]
   8647c:	f8c5 e00c 	str.w	lr, [r5, #12]
   86480:	f8c5 e008 	str.w	lr, [r5, #8]
   86484:	6069      	str	r1, [r5, #4]
   86486:	50aa      	str	r2, [r5, r2]
   86488:	f000 fb26 	bl	86ad8 <__malloc_unlock>
   8648c:	e01f      	b.n	864ce <_malloc_r+0x192>
   8648e:	2910      	cmp	r1, #16
   86490:	d821      	bhi.n	864d6 <_malloc_r+0x19a>
   86492:	f000 fb1f 	bl	86ad4 <__malloc_lock>
   86496:	2510      	movs	r5, #16
   86498:	2306      	movs	r3, #6
   8649a:	2002      	movs	r0, #2
   8649c:	4f77      	ldr	r7, [pc, #476]	; (8667c <_malloc_r+0x340>)
   8649e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   864a2:	685c      	ldr	r4, [r3, #4]
   864a4:	f1a3 0208 	sub.w	r2, r3, #8
   864a8:	4294      	cmp	r4, r2
   864aa:	f000 8138 	beq.w	8671e <_malloc_r+0x3e2>
   864ae:	6863      	ldr	r3, [r4, #4]
   864b0:	68e1      	ldr	r1, [r4, #12]
   864b2:	f023 0303 	bic.w	r3, r3, #3
   864b6:	4423      	add	r3, r4
   864b8:	685a      	ldr	r2, [r3, #4]
   864ba:	68a5      	ldr	r5, [r4, #8]
   864bc:	f042 0201 	orr.w	r2, r2, #1
   864c0:	60e9      	str	r1, [r5, #12]
   864c2:	4630      	mov	r0, r6
   864c4:	608d      	str	r5, [r1, #8]
   864c6:	605a      	str	r2, [r3, #4]
   864c8:	f000 fb06 	bl	86ad8 <__malloc_unlock>
   864cc:	3408      	adds	r4, #8
   864ce:	4620      	mov	r0, r4
   864d0:	b003      	add	sp, #12
   864d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864d6:	2400      	movs	r4, #0
   864d8:	4620      	mov	r0, r4
   864da:	230c      	movs	r3, #12
   864dc:	6033      	str	r3, [r6, #0]
   864de:	b003      	add	sp, #12
   864e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864e4:	2180      	movs	r1, #128	; 0x80
   864e6:	f04f 0e40 	mov.w	lr, #64	; 0x40
   864ea:	203f      	movs	r0, #63	; 0x3f
   864ec:	e748      	b.n	86380 <_malloc_r+0x44>
   864ee:	4670      	mov	r0, lr
   864f0:	e75b      	b.n	863aa <_malloc_r+0x6e>
   864f2:	4423      	add	r3, r4
   864f4:	685a      	ldr	r2, [r3, #4]
   864f6:	68e1      	ldr	r1, [r4, #12]
   864f8:	e7df      	b.n	864ba <_malloc_r+0x17e>
   864fa:	4423      	add	r3, r4
   864fc:	685a      	ldr	r2, [r3, #4]
   864fe:	4630      	mov	r0, r6
   86500:	f042 0201 	orr.w	r2, r2, #1
   86504:	605a      	str	r2, [r3, #4]
   86506:	3408      	adds	r4, #8
   86508:	f000 fae6 	bl	86ad8 <__malloc_unlock>
   8650c:	4620      	mov	r0, r4
   8650e:	b003      	add	sp, #12
   86510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86514:	68bc      	ldr	r4, [r7, #8]
   86516:	6863      	ldr	r3, [r4, #4]
   86518:	f023 0803 	bic.w	r8, r3, #3
   8651c:	45a8      	cmp	r8, r5
   8651e:	d304      	bcc.n	8652a <_malloc_r+0x1ee>
   86520:	ebc5 0308 	rsb	r3, r5, r8
   86524:	2b0f      	cmp	r3, #15
   86526:	f300 808c 	bgt.w	86642 <_malloc_r+0x306>
   8652a:	4b55      	ldr	r3, [pc, #340]	; (86680 <_malloc_r+0x344>)
   8652c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 86690 <_malloc_r+0x354>
   86530:	681a      	ldr	r2, [r3, #0]
   86532:	f8d9 3000 	ldr.w	r3, [r9]
   86536:	442a      	add	r2, r5
   86538:	3301      	adds	r3, #1
   8653a:	eb04 0a08 	add.w	sl, r4, r8
   8653e:	f000 8160 	beq.w	86802 <_malloc_r+0x4c6>
   86542:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   86546:	320f      	adds	r2, #15
   86548:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8654c:	f022 020f 	bic.w	r2, r2, #15
   86550:	4611      	mov	r1, r2
   86552:	4630      	mov	r0, r6
   86554:	9201      	str	r2, [sp, #4]
   86556:	f000 fcab 	bl	86eb0 <_sbrk_r>
   8655a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8655e:	4683      	mov	fp, r0
   86560:	9a01      	ldr	r2, [sp, #4]
   86562:	f000 8158 	beq.w	86816 <_malloc_r+0x4da>
   86566:	4582      	cmp	sl, r0
   86568:	f200 80fc 	bhi.w	86764 <_malloc_r+0x428>
   8656c:	4b45      	ldr	r3, [pc, #276]	; (86684 <_malloc_r+0x348>)
   8656e:	45da      	cmp	sl, fp
   86570:	6819      	ldr	r1, [r3, #0]
   86572:	4411      	add	r1, r2
   86574:	6019      	str	r1, [r3, #0]
   86576:	f000 8153 	beq.w	86820 <_malloc_r+0x4e4>
   8657a:	f8d9 0000 	ldr.w	r0, [r9]
   8657e:	f8df e110 	ldr.w	lr, [pc, #272]	; 86690 <_malloc_r+0x354>
   86582:	3001      	adds	r0, #1
   86584:	bf1b      	ittet	ne
   86586:	ebca 0a0b 	rsbne	sl, sl, fp
   8658a:	4451      	addne	r1, sl
   8658c:	f8ce b000 	streq.w	fp, [lr]
   86590:	6019      	strne	r1, [r3, #0]
   86592:	f01b 0107 	ands.w	r1, fp, #7
   86596:	f000 8117 	beq.w	867c8 <_malloc_r+0x48c>
   8659a:	f1c1 0008 	rsb	r0, r1, #8
   8659e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   865a2:	4483      	add	fp, r0
   865a4:	3108      	adds	r1, #8
   865a6:	445a      	add	r2, fp
   865a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
   865ac:	ebc2 0901 	rsb	r9, r2, r1
   865b0:	4649      	mov	r1, r9
   865b2:	4630      	mov	r0, r6
   865b4:	9301      	str	r3, [sp, #4]
   865b6:	f000 fc7b 	bl	86eb0 <_sbrk_r>
   865ba:	1c43      	adds	r3, r0, #1
   865bc:	9b01      	ldr	r3, [sp, #4]
   865be:	f000 813f 	beq.w	86840 <_malloc_r+0x504>
   865c2:	ebcb 0200 	rsb	r2, fp, r0
   865c6:	444a      	add	r2, r9
   865c8:	f042 0201 	orr.w	r2, r2, #1
   865cc:	6819      	ldr	r1, [r3, #0]
   865ce:	42bc      	cmp	r4, r7
   865d0:	4449      	add	r1, r9
   865d2:	f8c7 b008 	str.w	fp, [r7, #8]
   865d6:	6019      	str	r1, [r3, #0]
   865d8:	f8cb 2004 	str.w	r2, [fp, #4]
   865dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 86684 <_malloc_r+0x348>
   865e0:	d016      	beq.n	86610 <_malloc_r+0x2d4>
   865e2:	f1b8 0f0f 	cmp.w	r8, #15
   865e6:	f240 80fd 	bls.w	867e4 <_malloc_r+0x4a8>
   865ea:	6862      	ldr	r2, [r4, #4]
   865ec:	f1a8 030c 	sub.w	r3, r8, #12
   865f0:	f023 0307 	bic.w	r3, r3, #7
   865f4:	f002 0201 	and.w	r2, r2, #1
   865f8:	18e0      	adds	r0, r4, r3
   865fa:	f04f 0e05 	mov.w	lr, #5
   865fe:	431a      	orrs	r2, r3
   86600:	2b0f      	cmp	r3, #15
   86602:	6062      	str	r2, [r4, #4]
   86604:	f8c0 e004 	str.w	lr, [r0, #4]
   86608:	f8c0 e008 	str.w	lr, [r0, #8]
   8660c:	f200 811c 	bhi.w	86848 <_malloc_r+0x50c>
   86610:	4b1d      	ldr	r3, [pc, #116]	; (86688 <_malloc_r+0x34c>)
   86612:	68bc      	ldr	r4, [r7, #8]
   86614:	681a      	ldr	r2, [r3, #0]
   86616:	4291      	cmp	r1, r2
   86618:	bf88      	it	hi
   8661a:	6019      	strhi	r1, [r3, #0]
   8661c:	4b1b      	ldr	r3, [pc, #108]	; (8668c <_malloc_r+0x350>)
   8661e:	681a      	ldr	r2, [r3, #0]
   86620:	4291      	cmp	r1, r2
   86622:	6862      	ldr	r2, [r4, #4]
   86624:	bf88      	it	hi
   86626:	6019      	strhi	r1, [r3, #0]
   86628:	f022 0203 	bic.w	r2, r2, #3
   8662c:	4295      	cmp	r5, r2
   8662e:	eba2 0305 	sub.w	r3, r2, r5
   86632:	d801      	bhi.n	86638 <_malloc_r+0x2fc>
   86634:	2b0f      	cmp	r3, #15
   86636:	dc04      	bgt.n	86642 <_malloc_r+0x306>
   86638:	4630      	mov	r0, r6
   8663a:	f000 fa4d 	bl	86ad8 <__malloc_unlock>
   8663e:	2400      	movs	r4, #0
   86640:	e745      	b.n	864ce <_malloc_r+0x192>
   86642:	f045 0201 	orr.w	r2, r5, #1
   86646:	f043 0301 	orr.w	r3, r3, #1
   8664a:	4425      	add	r5, r4
   8664c:	6062      	str	r2, [r4, #4]
   8664e:	4630      	mov	r0, r6
   86650:	60bd      	str	r5, [r7, #8]
   86652:	3408      	adds	r4, #8
   86654:	606b      	str	r3, [r5, #4]
   86656:	f000 fa3f 	bl	86ad8 <__malloc_unlock>
   8665a:	4620      	mov	r0, r4
   8665c:	b003      	add	sp, #12
   8665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86662:	2b14      	cmp	r3, #20
   86664:	d971      	bls.n	8674a <_malloc_r+0x40e>
   86666:	2b54      	cmp	r3, #84	; 0x54
   86668:	f200 80a4 	bhi.w	867b4 <_malloc_r+0x478>
   8666c:	0b28      	lsrs	r0, r5, #12
   8666e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   86672:	ea4f 014e 	mov.w	r1, lr, lsl #1
   86676:	306e      	adds	r0, #110	; 0x6e
   86678:	e682      	b.n	86380 <_malloc_r+0x44>
   8667a:	bf00      	nop
   8667c:	20070500 	.word	0x20070500
   86680:	20070a04 	.word	0x20070a04
   86684:	20070a08 	.word	0x20070a08
   86688:	20070a00 	.word	0x20070a00
   8668c:	200709fc 	.word	0x200709fc
   86690:	2007090c 	.word	0x2007090c
   86694:	0a5a      	lsrs	r2, r3, #9
   86696:	2a04      	cmp	r2, #4
   86698:	d95e      	bls.n	86758 <_malloc_r+0x41c>
   8669a:	2a14      	cmp	r2, #20
   8669c:	f200 80b3 	bhi.w	86806 <_malloc_r+0x4ca>
   866a0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   866a4:	0049      	lsls	r1, r1, #1
   866a6:	325b      	adds	r2, #91	; 0x5b
   866a8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   866ac:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   866b0:	f1ac 0c08 	sub.w	ip, ip, #8
   866b4:	458c      	cmp	ip, r1
   866b6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 86890 <_malloc_r+0x554>
   866ba:	f000 8088 	beq.w	867ce <_malloc_r+0x492>
   866be:	684a      	ldr	r2, [r1, #4]
   866c0:	f022 0203 	bic.w	r2, r2, #3
   866c4:	4293      	cmp	r3, r2
   866c6:	d202      	bcs.n	866ce <_malloc_r+0x392>
   866c8:	6889      	ldr	r1, [r1, #8]
   866ca:	458c      	cmp	ip, r1
   866cc:	d1f7      	bne.n	866be <_malloc_r+0x382>
   866ce:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   866d2:	687a      	ldr	r2, [r7, #4]
   866d4:	f8c4 c00c 	str.w	ip, [r4, #12]
   866d8:	60a1      	str	r1, [r4, #8]
   866da:	f8cc 4008 	str.w	r4, [ip, #8]
   866de:	60cc      	str	r4, [r1, #12]
   866e0:	e696      	b.n	86410 <_malloc_r+0xd4>
   866e2:	f045 0701 	orr.w	r7, r5, #1
   866e6:	f042 0301 	orr.w	r3, r2, #1
   866ea:	4425      	add	r5, r4
   866ec:	6067      	str	r7, [r4, #4]
   866ee:	4630      	mov	r0, r6
   866f0:	614d      	str	r5, [r1, #20]
   866f2:	610d      	str	r5, [r1, #16]
   866f4:	f8c5 e00c 	str.w	lr, [r5, #12]
   866f8:	f8c5 e008 	str.w	lr, [r5, #8]
   866fc:	606b      	str	r3, [r5, #4]
   866fe:	50aa      	str	r2, [r5, r2]
   86700:	3408      	adds	r4, #8
   86702:	f000 f9e9 	bl	86ad8 <__malloc_unlock>
   86706:	e6e2      	b.n	864ce <_malloc_r+0x192>
   86708:	684a      	ldr	r2, [r1, #4]
   8670a:	e681      	b.n	86410 <_malloc_r+0xd4>
   8670c:	f108 0801 	add.w	r8, r8, #1
   86710:	f018 0f03 	tst.w	r8, #3
   86714:	f10c 0c08 	add.w	ip, ip, #8
   86718:	f47f ae8c 	bne.w	86434 <_malloc_r+0xf8>
   8671c:	e030      	b.n	86780 <_malloc_r+0x444>
   8671e:	68dc      	ldr	r4, [r3, #12]
   86720:	42a3      	cmp	r3, r4
   86722:	bf08      	it	eq
   86724:	3002      	addeq	r0, #2
   86726:	f43f ae40 	beq.w	863aa <_malloc_r+0x6e>
   8672a:	e6c0      	b.n	864ae <_malloc_r+0x172>
   8672c:	460c      	mov	r4, r1
   8672e:	440b      	add	r3, r1
   86730:	685a      	ldr	r2, [r3, #4]
   86732:	68c9      	ldr	r1, [r1, #12]
   86734:	f854 5f08 	ldr.w	r5, [r4, #8]!
   86738:	f042 0201 	orr.w	r2, r2, #1
   8673c:	605a      	str	r2, [r3, #4]
   8673e:	4630      	mov	r0, r6
   86740:	60e9      	str	r1, [r5, #12]
   86742:	608d      	str	r5, [r1, #8]
   86744:	f000 f9c8 	bl	86ad8 <__malloc_unlock>
   86748:	e6c1      	b.n	864ce <_malloc_r+0x192>
   8674a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   8674e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   86752:	ea4f 014e 	mov.w	r1, lr, lsl #1
   86756:	e613      	b.n	86380 <_malloc_r+0x44>
   86758:	099a      	lsrs	r2, r3, #6
   8675a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8675e:	0049      	lsls	r1, r1, #1
   86760:	3238      	adds	r2, #56	; 0x38
   86762:	e7a1      	b.n	866a8 <_malloc_r+0x36c>
   86764:	42bc      	cmp	r4, r7
   86766:	4b4a      	ldr	r3, [pc, #296]	; (86890 <_malloc_r+0x554>)
   86768:	f43f af00 	beq.w	8656c <_malloc_r+0x230>
   8676c:	689c      	ldr	r4, [r3, #8]
   8676e:	6862      	ldr	r2, [r4, #4]
   86770:	f022 0203 	bic.w	r2, r2, #3
   86774:	e75a      	b.n	8662c <_malloc_r+0x2f0>
   86776:	f859 3908 	ldr.w	r3, [r9], #-8
   8677a:	4599      	cmp	r9, r3
   8677c:	f040 8082 	bne.w	86884 <_malloc_r+0x548>
   86780:	f010 0f03 	tst.w	r0, #3
   86784:	f100 30ff 	add.w	r0, r0, #4294967295
   86788:	d1f5      	bne.n	86776 <_malloc_r+0x43a>
   8678a:	687b      	ldr	r3, [r7, #4]
   8678c:	ea23 0304 	bic.w	r3, r3, r4
   86790:	607b      	str	r3, [r7, #4]
   86792:	0064      	lsls	r4, r4, #1
   86794:	429c      	cmp	r4, r3
   86796:	f63f aebd 	bhi.w	86514 <_malloc_r+0x1d8>
   8679a:	2c00      	cmp	r4, #0
   8679c:	f43f aeba 	beq.w	86514 <_malloc_r+0x1d8>
   867a0:	421c      	tst	r4, r3
   867a2:	4640      	mov	r0, r8
   867a4:	f47f ae42 	bne.w	8642c <_malloc_r+0xf0>
   867a8:	0064      	lsls	r4, r4, #1
   867aa:	421c      	tst	r4, r3
   867ac:	f100 0004 	add.w	r0, r0, #4
   867b0:	d0fa      	beq.n	867a8 <_malloc_r+0x46c>
   867b2:	e63b      	b.n	8642c <_malloc_r+0xf0>
   867b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   867b8:	d818      	bhi.n	867ec <_malloc_r+0x4b0>
   867ba:	0be8      	lsrs	r0, r5, #15
   867bc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   867c0:	ea4f 014e 	mov.w	r1, lr, lsl #1
   867c4:	3077      	adds	r0, #119	; 0x77
   867c6:	e5db      	b.n	86380 <_malloc_r+0x44>
   867c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   867cc:	e6eb      	b.n	865a6 <_malloc_r+0x26a>
   867ce:	2101      	movs	r1, #1
   867d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   867d4:	1092      	asrs	r2, r2, #2
   867d6:	fa01 f202 	lsl.w	r2, r1, r2
   867da:	431a      	orrs	r2, r3
   867dc:	f8c8 2004 	str.w	r2, [r8, #4]
   867e0:	4661      	mov	r1, ip
   867e2:	e777      	b.n	866d4 <_malloc_r+0x398>
   867e4:	2301      	movs	r3, #1
   867e6:	f8cb 3004 	str.w	r3, [fp, #4]
   867ea:	e725      	b.n	86638 <_malloc_r+0x2fc>
   867ec:	f240 5254 	movw	r2, #1364	; 0x554
   867f0:	4293      	cmp	r3, r2
   867f2:	d820      	bhi.n	86836 <_malloc_r+0x4fa>
   867f4:	0ca8      	lsrs	r0, r5, #18
   867f6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   867fa:	ea4f 014e 	mov.w	r1, lr, lsl #1
   867fe:	307c      	adds	r0, #124	; 0x7c
   86800:	e5be      	b.n	86380 <_malloc_r+0x44>
   86802:	3210      	adds	r2, #16
   86804:	e6a4      	b.n	86550 <_malloc_r+0x214>
   86806:	2a54      	cmp	r2, #84	; 0x54
   86808:	d826      	bhi.n	86858 <_malloc_r+0x51c>
   8680a:	0b1a      	lsrs	r2, r3, #12
   8680c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86810:	0049      	lsls	r1, r1, #1
   86812:	326e      	adds	r2, #110	; 0x6e
   86814:	e748      	b.n	866a8 <_malloc_r+0x36c>
   86816:	68bc      	ldr	r4, [r7, #8]
   86818:	6862      	ldr	r2, [r4, #4]
   8681a:	f022 0203 	bic.w	r2, r2, #3
   8681e:	e705      	b.n	8662c <_malloc_r+0x2f0>
   86820:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86824:	2800      	cmp	r0, #0
   86826:	f47f aea8 	bne.w	8657a <_malloc_r+0x23e>
   8682a:	4442      	add	r2, r8
   8682c:	68bb      	ldr	r3, [r7, #8]
   8682e:	f042 0201 	orr.w	r2, r2, #1
   86832:	605a      	str	r2, [r3, #4]
   86834:	e6ec      	b.n	86610 <_malloc_r+0x2d4>
   86836:	21fe      	movs	r1, #254	; 0xfe
   86838:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   8683c:	207e      	movs	r0, #126	; 0x7e
   8683e:	e59f      	b.n	86380 <_malloc_r+0x44>
   86840:	2201      	movs	r2, #1
   86842:	f04f 0900 	mov.w	r9, #0
   86846:	e6c1      	b.n	865cc <_malloc_r+0x290>
   86848:	f104 0108 	add.w	r1, r4, #8
   8684c:	4630      	mov	r0, r6
   8684e:	f7ff fa5b 	bl	85d08 <_free_r>
   86852:	f8d9 1000 	ldr.w	r1, [r9]
   86856:	e6db      	b.n	86610 <_malloc_r+0x2d4>
   86858:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8685c:	d805      	bhi.n	8686a <_malloc_r+0x52e>
   8685e:	0bda      	lsrs	r2, r3, #15
   86860:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86864:	0049      	lsls	r1, r1, #1
   86866:	3277      	adds	r2, #119	; 0x77
   86868:	e71e      	b.n	866a8 <_malloc_r+0x36c>
   8686a:	f240 5154 	movw	r1, #1364	; 0x554
   8686e:	428a      	cmp	r2, r1
   86870:	d805      	bhi.n	8687e <_malloc_r+0x542>
   86872:	0c9a      	lsrs	r2, r3, #18
   86874:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86878:	0049      	lsls	r1, r1, #1
   8687a:	327c      	adds	r2, #124	; 0x7c
   8687c:	e714      	b.n	866a8 <_malloc_r+0x36c>
   8687e:	21fe      	movs	r1, #254	; 0xfe
   86880:	227e      	movs	r2, #126	; 0x7e
   86882:	e711      	b.n	866a8 <_malloc_r+0x36c>
   86884:	687b      	ldr	r3, [r7, #4]
   86886:	e784      	b.n	86792 <_malloc_r+0x456>
   86888:	08e8      	lsrs	r0, r5, #3
   8688a:	1c43      	adds	r3, r0, #1
   8688c:	005b      	lsls	r3, r3, #1
   8688e:	e605      	b.n	8649c <_malloc_r+0x160>
   86890:	20070500 	.word	0x20070500

00086894 <memchr>:
   86894:	0783      	lsls	r3, r0, #30
   86896:	b470      	push	{r4, r5, r6}
   86898:	b2cd      	uxtb	r5, r1
   8689a:	d03d      	beq.n	86918 <memchr+0x84>
   8689c:	1e53      	subs	r3, r2, #1
   8689e:	b302      	cbz	r2, 868e2 <memchr+0x4e>
   868a0:	7802      	ldrb	r2, [r0, #0]
   868a2:	42aa      	cmp	r2, r5
   868a4:	d01e      	beq.n	868e4 <memchr+0x50>
   868a6:	1c42      	adds	r2, r0, #1
   868a8:	e004      	b.n	868b4 <memchr+0x20>
   868aa:	b1d3      	cbz	r3, 868e2 <memchr+0x4e>
   868ac:	7804      	ldrb	r4, [r0, #0]
   868ae:	3b01      	subs	r3, #1
   868b0:	42ac      	cmp	r4, r5
   868b2:	d017      	beq.n	868e4 <memchr+0x50>
   868b4:	f012 0f03 	tst.w	r2, #3
   868b8:	4610      	mov	r0, r2
   868ba:	f102 0201 	add.w	r2, r2, #1
   868be:	d1f4      	bne.n	868aa <memchr+0x16>
   868c0:	2b03      	cmp	r3, #3
   868c2:	d811      	bhi.n	868e8 <memchr+0x54>
   868c4:	b353      	cbz	r3, 8691c <memchr+0x88>
   868c6:	7802      	ldrb	r2, [r0, #0]
   868c8:	42aa      	cmp	r2, r5
   868ca:	d00b      	beq.n	868e4 <memchr+0x50>
   868cc:	4403      	add	r3, r0
   868ce:	1c42      	adds	r2, r0, #1
   868d0:	e002      	b.n	868d8 <memchr+0x44>
   868d2:	7801      	ldrb	r1, [r0, #0]
   868d4:	42a9      	cmp	r1, r5
   868d6:	d005      	beq.n	868e4 <memchr+0x50>
   868d8:	4293      	cmp	r3, r2
   868da:	4610      	mov	r0, r2
   868dc:	f102 0201 	add.w	r2, r2, #1
   868e0:	d1f7      	bne.n	868d2 <memchr+0x3e>
   868e2:	2000      	movs	r0, #0
   868e4:	bc70      	pop	{r4, r5, r6}
   868e6:	4770      	bx	lr
   868e8:	4604      	mov	r4, r0
   868ea:	020e      	lsls	r6, r1, #8
   868ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   868f0:	432e      	orrs	r6, r5
   868f2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   868f6:	6822      	ldr	r2, [r4, #0]
   868f8:	4620      	mov	r0, r4
   868fa:	4072      	eors	r2, r6
   868fc:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   86900:	ea21 0202 	bic.w	r2, r1, r2
   86904:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   86908:	f104 0404 	add.w	r4, r4, #4
   8690c:	d1db      	bne.n	868c6 <memchr+0x32>
   8690e:	3b04      	subs	r3, #4
   86910:	2b03      	cmp	r3, #3
   86912:	4620      	mov	r0, r4
   86914:	d8ef      	bhi.n	868f6 <memchr+0x62>
   86916:	e7d5      	b.n	868c4 <memchr+0x30>
   86918:	4613      	mov	r3, r2
   8691a:	e7d1      	b.n	868c0 <memchr+0x2c>
   8691c:	4618      	mov	r0, r3
   8691e:	e7e1      	b.n	868e4 <memchr+0x50>

00086920 <memcpy>:
   86920:	4684      	mov	ip, r0
   86922:	ea41 0300 	orr.w	r3, r1, r0
   86926:	f013 0303 	ands.w	r3, r3, #3
   8692a:	d149      	bne.n	869c0 <memcpy+0xa0>
   8692c:	3a40      	subs	r2, #64	; 0x40
   8692e:	d323      	bcc.n	86978 <memcpy+0x58>
   86930:	680b      	ldr	r3, [r1, #0]
   86932:	6003      	str	r3, [r0, #0]
   86934:	684b      	ldr	r3, [r1, #4]
   86936:	6043      	str	r3, [r0, #4]
   86938:	688b      	ldr	r3, [r1, #8]
   8693a:	6083      	str	r3, [r0, #8]
   8693c:	68cb      	ldr	r3, [r1, #12]
   8693e:	60c3      	str	r3, [r0, #12]
   86940:	690b      	ldr	r3, [r1, #16]
   86942:	6103      	str	r3, [r0, #16]
   86944:	694b      	ldr	r3, [r1, #20]
   86946:	6143      	str	r3, [r0, #20]
   86948:	698b      	ldr	r3, [r1, #24]
   8694a:	6183      	str	r3, [r0, #24]
   8694c:	69cb      	ldr	r3, [r1, #28]
   8694e:	61c3      	str	r3, [r0, #28]
   86950:	6a0b      	ldr	r3, [r1, #32]
   86952:	6203      	str	r3, [r0, #32]
   86954:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86956:	6243      	str	r3, [r0, #36]	; 0x24
   86958:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8695a:	6283      	str	r3, [r0, #40]	; 0x28
   8695c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8695e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86960:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86962:	6303      	str	r3, [r0, #48]	; 0x30
   86964:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86966:	6343      	str	r3, [r0, #52]	; 0x34
   86968:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8696a:	6383      	str	r3, [r0, #56]	; 0x38
   8696c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8696e:	63c3      	str	r3, [r0, #60]	; 0x3c
   86970:	3040      	adds	r0, #64	; 0x40
   86972:	3140      	adds	r1, #64	; 0x40
   86974:	3a40      	subs	r2, #64	; 0x40
   86976:	d2db      	bcs.n	86930 <memcpy+0x10>
   86978:	3230      	adds	r2, #48	; 0x30
   8697a:	d30b      	bcc.n	86994 <memcpy+0x74>
   8697c:	680b      	ldr	r3, [r1, #0]
   8697e:	6003      	str	r3, [r0, #0]
   86980:	684b      	ldr	r3, [r1, #4]
   86982:	6043      	str	r3, [r0, #4]
   86984:	688b      	ldr	r3, [r1, #8]
   86986:	6083      	str	r3, [r0, #8]
   86988:	68cb      	ldr	r3, [r1, #12]
   8698a:	60c3      	str	r3, [r0, #12]
   8698c:	3010      	adds	r0, #16
   8698e:	3110      	adds	r1, #16
   86990:	3a10      	subs	r2, #16
   86992:	d2f3      	bcs.n	8697c <memcpy+0x5c>
   86994:	320c      	adds	r2, #12
   86996:	d305      	bcc.n	869a4 <memcpy+0x84>
   86998:	f851 3b04 	ldr.w	r3, [r1], #4
   8699c:	f840 3b04 	str.w	r3, [r0], #4
   869a0:	3a04      	subs	r2, #4
   869a2:	d2f9      	bcs.n	86998 <memcpy+0x78>
   869a4:	3204      	adds	r2, #4
   869a6:	d008      	beq.n	869ba <memcpy+0x9a>
   869a8:	07d2      	lsls	r2, r2, #31
   869aa:	bf1c      	itt	ne
   869ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   869b0:	f800 3b01 	strbne.w	r3, [r0], #1
   869b4:	d301      	bcc.n	869ba <memcpy+0x9a>
   869b6:	880b      	ldrh	r3, [r1, #0]
   869b8:	8003      	strh	r3, [r0, #0]
   869ba:	4660      	mov	r0, ip
   869bc:	4770      	bx	lr
   869be:	bf00      	nop
   869c0:	2a08      	cmp	r2, #8
   869c2:	d313      	bcc.n	869ec <memcpy+0xcc>
   869c4:	078b      	lsls	r3, r1, #30
   869c6:	d0b1      	beq.n	8692c <memcpy+0xc>
   869c8:	f010 0303 	ands.w	r3, r0, #3
   869cc:	d0ae      	beq.n	8692c <memcpy+0xc>
   869ce:	f1c3 0304 	rsb	r3, r3, #4
   869d2:	1ad2      	subs	r2, r2, r3
   869d4:	07db      	lsls	r3, r3, #31
   869d6:	bf1c      	itt	ne
   869d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   869dc:	f800 3b01 	strbne.w	r3, [r0], #1
   869e0:	d3a4      	bcc.n	8692c <memcpy+0xc>
   869e2:	f831 3b02 	ldrh.w	r3, [r1], #2
   869e6:	f820 3b02 	strh.w	r3, [r0], #2
   869ea:	e79f      	b.n	8692c <memcpy+0xc>
   869ec:	3a04      	subs	r2, #4
   869ee:	d3d9      	bcc.n	869a4 <memcpy+0x84>
   869f0:	3a01      	subs	r2, #1
   869f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   869f6:	f800 3b01 	strb.w	r3, [r0], #1
   869fa:	d2f9      	bcs.n	869f0 <memcpy+0xd0>
   869fc:	780b      	ldrb	r3, [r1, #0]
   869fe:	7003      	strb	r3, [r0, #0]
   86a00:	784b      	ldrb	r3, [r1, #1]
   86a02:	7043      	strb	r3, [r0, #1]
   86a04:	788b      	ldrb	r3, [r1, #2]
   86a06:	7083      	strb	r3, [r0, #2]
   86a08:	4660      	mov	r0, ip
   86a0a:	4770      	bx	lr

00086a0c <memmove>:
   86a0c:	4288      	cmp	r0, r1
   86a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   86a10:	d90d      	bls.n	86a2e <memmove+0x22>
   86a12:	188b      	adds	r3, r1, r2
   86a14:	4298      	cmp	r0, r3
   86a16:	d20a      	bcs.n	86a2e <memmove+0x22>
   86a18:	1881      	adds	r1, r0, r2
   86a1a:	2a00      	cmp	r2, #0
   86a1c:	d051      	beq.n	86ac2 <memmove+0xb6>
   86a1e:	1a9a      	subs	r2, r3, r2
   86a20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86a24:	4293      	cmp	r3, r2
   86a26:	f801 4d01 	strb.w	r4, [r1, #-1]!
   86a2a:	d1f9      	bne.n	86a20 <memmove+0x14>
   86a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a2e:	2a0f      	cmp	r2, #15
   86a30:	d948      	bls.n	86ac4 <memmove+0xb8>
   86a32:	ea41 0300 	orr.w	r3, r1, r0
   86a36:	079b      	lsls	r3, r3, #30
   86a38:	d146      	bne.n	86ac8 <memmove+0xbc>
   86a3a:	4615      	mov	r5, r2
   86a3c:	f100 0410 	add.w	r4, r0, #16
   86a40:	f101 0310 	add.w	r3, r1, #16
   86a44:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86a48:	3d10      	subs	r5, #16
   86a4a:	f844 6c10 	str.w	r6, [r4, #-16]
   86a4e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86a52:	2d0f      	cmp	r5, #15
   86a54:	f844 6c0c 	str.w	r6, [r4, #-12]
   86a58:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86a5c:	f104 0410 	add.w	r4, r4, #16
   86a60:	f844 6c18 	str.w	r6, [r4, #-24]
   86a64:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86a68:	f103 0310 	add.w	r3, r3, #16
   86a6c:	f844 6c14 	str.w	r6, [r4, #-20]
   86a70:	d8e8      	bhi.n	86a44 <memmove+0x38>
   86a72:	f1a2 0310 	sub.w	r3, r2, #16
   86a76:	f023 030f 	bic.w	r3, r3, #15
   86a7a:	f002 0e0f 	and.w	lr, r2, #15
   86a7e:	3310      	adds	r3, #16
   86a80:	f1be 0f03 	cmp.w	lr, #3
   86a84:	4419      	add	r1, r3
   86a86:	4403      	add	r3, r0
   86a88:	d921      	bls.n	86ace <memmove+0xc2>
   86a8a:	460e      	mov	r6, r1
   86a8c:	4674      	mov	r4, lr
   86a8e:	1f1d      	subs	r5, r3, #4
   86a90:	f856 7b04 	ldr.w	r7, [r6], #4
   86a94:	3c04      	subs	r4, #4
   86a96:	2c03      	cmp	r4, #3
   86a98:	f845 7f04 	str.w	r7, [r5, #4]!
   86a9c:	d8f8      	bhi.n	86a90 <memmove+0x84>
   86a9e:	f1ae 0404 	sub.w	r4, lr, #4
   86aa2:	f024 0403 	bic.w	r4, r4, #3
   86aa6:	3404      	adds	r4, #4
   86aa8:	4423      	add	r3, r4
   86aaa:	4421      	add	r1, r4
   86aac:	f002 0203 	and.w	r2, r2, #3
   86ab0:	b162      	cbz	r2, 86acc <memmove+0xc0>
   86ab2:	3b01      	subs	r3, #1
   86ab4:	440a      	add	r2, r1
   86ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
   86aba:	428a      	cmp	r2, r1
   86abc:	f803 4f01 	strb.w	r4, [r3, #1]!
   86ac0:	d1f9      	bne.n	86ab6 <memmove+0xaa>
   86ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86ac4:	4603      	mov	r3, r0
   86ac6:	e7f3      	b.n	86ab0 <memmove+0xa4>
   86ac8:	4603      	mov	r3, r0
   86aca:	e7f2      	b.n	86ab2 <memmove+0xa6>
   86acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86ace:	4672      	mov	r2, lr
   86ad0:	e7ee      	b.n	86ab0 <memmove+0xa4>
   86ad2:	bf00      	nop

00086ad4 <__malloc_lock>:
   86ad4:	4770      	bx	lr
   86ad6:	bf00      	nop

00086ad8 <__malloc_unlock>:
   86ad8:	4770      	bx	lr
   86ada:	bf00      	nop

00086adc <_realloc_r>:
   86adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ae0:	4617      	mov	r7, r2
   86ae2:	b083      	sub	sp, #12
   86ae4:	2900      	cmp	r1, #0
   86ae6:	f000 808f 	beq.w	86c08 <_realloc_r+0x12c>
   86aea:	460d      	mov	r5, r1
   86aec:	4681      	mov	r9, r0
   86aee:	f107 040b 	add.w	r4, r7, #11
   86af2:	f7ff ffef 	bl	86ad4 <__malloc_lock>
   86af6:	f855 ec04 	ldr.w	lr, [r5, #-4]
   86afa:	2c16      	cmp	r4, #22
   86afc:	f02e 0603 	bic.w	r6, lr, #3
   86b00:	f1a5 0808 	sub.w	r8, r5, #8
   86b04:	d83c      	bhi.n	86b80 <_realloc_r+0xa4>
   86b06:	2210      	movs	r2, #16
   86b08:	4614      	mov	r4, r2
   86b0a:	42a7      	cmp	r7, r4
   86b0c:	d83d      	bhi.n	86b8a <_realloc_r+0xae>
   86b0e:	4296      	cmp	r6, r2
   86b10:	da42      	bge.n	86b98 <_realloc_r+0xbc>
   86b12:	4bc6      	ldr	r3, [pc, #792]	; (86e2c <_realloc_r+0x350>)
   86b14:	eb08 0006 	add.w	r0, r8, r6
   86b18:	6899      	ldr	r1, [r3, #8]
   86b1a:	4288      	cmp	r0, r1
   86b1c:	6841      	ldr	r1, [r0, #4]
   86b1e:	f000 80d7 	beq.w	86cd0 <_realloc_r+0x1f4>
   86b22:	f021 0301 	bic.w	r3, r1, #1
   86b26:	4403      	add	r3, r0
   86b28:	685b      	ldr	r3, [r3, #4]
   86b2a:	07db      	lsls	r3, r3, #31
   86b2c:	d54c      	bpl.n	86bc8 <_realloc_r+0xec>
   86b2e:	f01e 0f01 	tst.w	lr, #1
   86b32:	f000 809d 	beq.w	86c70 <_realloc_r+0x194>
   86b36:	4639      	mov	r1, r7
   86b38:	4648      	mov	r0, r9
   86b3a:	f7ff fbff 	bl	8633c <_malloc_r>
   86b3e:	4607      	mov	r7, r0
   86b40:	2800      	cmp	r0, #0
   86b42:	d03a      	beq.n	86bba <_realloc_r+0xde>
   86b44:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86b48:	f1a0 0208 	sub.w	r2, r0, #8
   86b4c:	f023 0301 	bic.w	r3, r3, #1
   86b50:	4443      	add	r3, r8
   86b52:	429a      	cmp	r2, r3
   86b54:	f000 813e 	beq.w	86dd4 <_realloc_r+0x2f8>
   86b58:	1f32      	subs	r2, r6, #4
   86b5a:	2a24      	cmp	r2, #36	; 0x24
   86b5c:	f200 812b 	bhi.w	86db6 <_realloc_r+0x2da>
   86b60:	2a13      	cmp	r2, #19
   86b62:	f200 80ff 	bhi.w	86d64 <_realloc_r+0x288>
   86b66:	4603      	mov	r3, r0
   86b68:	462a      	mov	r2, r5
   86b6a:	6811      	ldr	r1, [r2, #0]
   86b6c:	6019      	str	r1, [r3, #0]
   86b6e:	6851      	ldr	r1, [r2, #4]
   86b70:	6059      	str	r1, [r3, #4]
   86b72:	6892      	ldr	r2, [r2, #8]
   86b74:	609a      	str	r2, [r3, #8]
   86b76:	4629      	mov	r1, r5
   86b78:	4648      	mov	r0, r9
   86b7a:	f7ff f8c5 	bl	85d08 <_free_r>
   86b7e:	e01c      	b.n	86bba <_realloc_r+0xde>
   86b80:	f024 0407 	bic.w	r4, r4, #7
   86b84:	2c00      	cmp	r4, #0
   86b86:	4622      	mov	r2, r4
   86b88:	dabf      	bge.n	86b0a <_realloc_r+0x2e>
   86b8a:	230c      	movs	r3, #12
   86b8c:	2000      	movs	r0, #0
   86b8e:	f8c9 3000 	str.w	r3, [r9]
   86b92:	b003      	add	sp, #12
   86b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b98:	462f      	mov	r7, r5
   86b9a:	1b33      	subs	r3, r6, r4
   86b9c:	2b0f      	cmp	r3, #15
   86b9e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86ba2:	d81d      	bhi.n	86be0 <_realloc_r+0x104>
   86ba4:	f002 0201 	and.w	r2, r2, #1
   86ba8:	4332      	orrs	r2, r6
   86baa:	eb08 0106 	add.w	r1, r8, r6
   86bae:	f8c8 2004 	str.w	r2, [r8, #4]
   86bb2:	684b      	ldr	r3, [r1, #4]
   86bb4:	f043 0301 	orr.w	r3, r3, #1
   86bb8:	604b      	str	r3, [r1, #4]
   86bba:	4648      	mov	r0, r9
   86bbc:	f7ff ff8c 	bl	86ad8 <__malloc_unlock>
   86bc0:	4638      	mov	r0, r7
   86bc2:	b003      	add	sp, #12
   86bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bc8:	f021 0103 	bic.w	r1, r1, #3
   86bcc:	4431      	add	r1, r6
   86bce:	4291      	cmp	r1, r2
   86bd0:	db20      	blt.n	86c14 <_realloc_r+0x138>
   86bd2:	68c3      	ldr	r3, [r0, #12]
   86bd4:	6882      	ldr	r2, [r0, #8]
   86bd6:	462f      	mov	r7, r5
   86bd8:	60d3      	str	r3, [r2, #12]
   86bda:	460e      	mov	r6, r1
   86bdc:	609a      	str	r2, [r3, #8]
   86bde:	e7dc      	b.n	86b9a <_realloc_r+0xbe>
   86be0:	f002 0201 	and.w	r2, r2, #1
   86be4:	eb08 0104 	add.w	r1, r8, r4
   86be8:	4314      	orrs	r4, r2
   86bea:	f043 0201 	orr.w	r2, r3, #1
   86bee:	f8c8 4004 	str.w	r4, [r8, #4]
   86bf2:	440b      	add	r3, r1
   86bf4:	604a      	str	r2, [r1, #4]
   86bf6:	685a      	ldr	r2, [r3, #4]
   86bf8:	3108      	adds	r1, #8
   86bfa:	f042 0201 	orr.w	r2, r2, #1
   86bfe:	605a      	str	r2, [r3, #4]
   86c00:	4648      	mov	r0, r9
   86c02:	f7ff f881 	bl	85d08 <_free_r>
   86c06:	e7d8      	b.n	86bba <_realloc_r+0xde>
   86c08:	4611      	mov	r1, r2
   86c0a:	b003      	add	sp, #12
   86c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86c10:	f7ff bb94 	b.w	8633c <_malloc_r>
   86c14:	f01e 0f01 	tst.w	lr, #1
   86c18:	d18d      	bne.n	86b36 <_realloc_r+0x5a>
   86c1a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86c1e:	ebc3 0a08 	rsb	sl, r3, r8
   86c22:	f8da 3004 	ldr.w	r3, [sl, #4]
   86c26:	f023 0c03 	bic.w	ip, r3, #3
   86c2a:	eb01 0e0c 	add.w	lr, r1, ip
   86c2e:	4596      	cmp	lr, r2
   86c30:	db26      	blt.n	86c80 <_realloc_r+0x1a4>
   86c32:	4657      	mov	r7, sl
   86c34:	68c3      	ldr	r3, [r0, #12]
   86c36:	6881      	ldr	r1, [r0, #8]
   86c38:	1f32      	subs	r2, r6, #4
   86c3a:	60cb      	str	r3, [r1, #12]
   86c3c:	6099      	str	r1, [r3, #8]
   86c3e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86c42:	f8da 300c 	ldr.w	r3, [sl, #12]
   86c46:	2a24      	cmp	r2, #36	; 0x24
   86c48:	60cb      	str	r3, [r1, #12]
   86c4a:	6099      	str	r1, [r3, #8]
   86c4c:	f200 80c9 	bhi.w	86de2 <_realloc_r+0x306>
   86c50:	2a13      	cmp	r2, #19
   86c52:	f240 8092 	bls.w	86d7a <_realloc_r+0x29e>
   86c56:	682b      	ldr	r3, [r5, #0]
   86c58:	2a1b      	cmp	r2, #27
   86c5a:	f8ca 3008 	str.w	r3, [sl, #8]
   86c5e:	686b      	ldr	r3, [r5, #4]
   86c60:	f8ca 300c 	str.w	r3, [sl, #12]
   86c64:	f200 80cd 	bhi.w	86e02 <_realloc_r+0x326>
   86c68:	3508      	adds	r5, #8
   86c6a:	f10a 0310 	add.w	r3, sl, #16
   86c6e:	e085      	b.n	86d7c <_realloc_r+0x2a0>
   86c70:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86c74:	ebc3 0a08 	rsb	sl, r3, r8
   86c78:	f8da 3004 	ldr.w	r3, [sl, #4]
   86c7c:	f023 0c03 	bic.w	ip, r3, #3
   86c80:	eb06 030c 	add.w	r3, r6, ip
   86c84:	4293      	cmp	r3, r2
   86c86:	f6ff af56 	blt.w	86b36 <_realloc_r+0x5a>
   86c8a:	4657      	mov	r7, sl
   86c8c:	f8da 100c 	ldr.w	r1, [sl, #12]
   86c90:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86c94:	1f32      	subs	r2, r6, #4
   86c96:	2a24      	cmp	r2, #36	; 0x24
   86c98:	60c1      	str	r1, [r0, #12]
   86c9a:	6088      	str	r0, [r1, #8]
   86c9c:	f200 80aa 	bhi.w	86df4 <_realloc_r+0x318>
   86ca0:	2a13      	cmp	r2, #19
   86ca2:	f240 80a5 	bls.w	86df0 <_realloc_r+0x314>
   86ca6:	6829      	ldr	r1, [r5, #0]
   86ca8:	2a1b      	cmp	r2, #27
   86caa:	f8ca 1008 	str.w	r1, [sl, #8]
   86cae:	6869      	ldr	r1, [r5, #4]
   86cb0:	f8ca 100c 	str.w	r1, [sl, #12]
   86cb4:	f200 80bc 	bhi.w	86e30 <_realloc_r+0x354>
   86cb8:	3508      	adds	r5, #8
   86cba:	f10a 0210 	add.w	r2, sl, #16
   86cbe:	6829      	ldr	r1, [r5, #0]
   86cc0:	461e      	mov	r6, r3
   86cc2:	6011      	str	r1, [r2, #0]
   86cc4:	6869      	ldr	r1, [r5, #4]
   86cc6:	46d0      	mov	r8, sl
   86cc8:	6051      	str	r1, [r2, #4]
   86cca:	68ab      	ldr	r3, [r5, #8]
   86ccc:	6093      	str	r3, [r2, #8]
   86cce:	e764      	b.n	86b9a <_realloc_r+0xbe>
   86cd0:	f021 0b03 	bic.w	fp, r1, #3
   86cd4:	f104 0010 	add.w	r0, r4, #16
   86cd8:	44b3      	add	fp, r6
   86cda:	4583      	cmp	fp, r0
   86cdc:	da57      	bge.n	86d8e <_realloc_r+0x2b2>
   86cde:	f01e 0f01 	tst.w	lr, #1
   86ce2:	f47f af28 	bne.w	86b36 <_realloc_r+0x5a>
   86ce6:	f855 1c08 	ldr.w	r1, [r5, #-8]
   86cea:	ebc1 0a08 	rsb	sl, r1, r8
   86cee:	f8da 1004 	ldr.w	r1, [sl, #4]
   86cf2:	f021 0c03 	bic.w	ip, r1, #3
   86cf6:	44e3      	add	fp, ip
   86cf8:	4558      	cmp	r0, fp
   86cfa:	dcc1      	bgt.n	86c80 <_realloc_r+0x1a4>
   86cfc:	4657      	mov	r7, sl
   86cfe:	f8da 100c 	ldr.w	r1, [sl, #12]
   86d02:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86d06:	1f32      	subs	r2, r6, #4
   86d08:	2a24      	cmp	r2, #36	; 0x24
   86d0a:	60c1      	str	r1, [r0, #12]
   86d0c:	6088      	str	r0, [r1, #8]
   86d0e:	f200 80b1 	bhi.w	86e74 <_realloc_r+0x398>
   86d12:	2a13      	cmp	r2, #19
   86d14:	f240 80a2 	bls.w	86e5c <_realloc_r+0x380>
   86d18:	6829      	ldr	r1, [r5, #0]
   86d1a:	2a1b      	cmp	r2, #27
   86d1c:	f8ca 1008 	str.w	r1, [sl, #8]
   86d20:	6869      	ldr	r1, [r5, #4]
   86d22:	f8ca 100c 	str.w	r1, [sl, #12]
   86d26:	f200 80ac 	bhi.w	86e82 <_realloc_r+0x3a6>
   86d2a:	3508      	adds	r5, #8
   86d2c:	f10a 0210 	add.w	r2, sl, #16
   86d30:	6829      	ldr	r1, [r5, #0]
   86d32:	6011      	str	r1, [r2, #0]
   86d34:	6869      	ldr	r1, [r5, #4]
   86d36:	6051      	str	r1, [r2, #4]
   86d38:	68a9      	ldr	r1, [r5, #8]
   86d3a:	6091      	str	r1, [r2, #8]
   86d3c:	ebc4 020b 	rsb	r2, r4, fp
   86d40:	eb0a 0104 	add.w	r1, sl, r4
   86d44:	f042 0201 	orr.w	r2, r2, #1
   86d48:	6099      	str	r1, [r3, #8]
   86d4a:	604a      	str	r2, [r1, #4]
   86d4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86d50:	4648      	mov	r0, r9
   86d52:	f003 0301 	and.w	r3, r3, #1
   86d56:	431c      	orrs	r4, r3
   86d58:	f8ca 4004 	str.w	r4, [sl, #4]
   86d5c:	f7ff febc 	bl	86ad8 <__malloc_unlock>
   86d60:	4638      	mov	r0, r7
   86d62:	e72e      	b.n	86bc2 <_realloc_r+0xe6>
   86d64:	682b      	ldr	r3, [r5, #0]
   86d66:	2a1b      	cmp	r2, #27
   86d68:	6003      	str	r3, [r0, #0]
   86d6a:	686b      	ldr	r3, [r5, #4]
   86d6c:	6043      	str	r3, [r0, #4]
   86d6e:	d826      	bhi.n	86dbe <_realloc_r+0x2e2>
   86d70:	f100 0308 	add.w	r3, r0, #8
   86d74:	f105 0208 	add.w	r2, r5, #8
   86d78:	e6f7      	b.n	86b6a <_realloc_r+0x8e>
   86d7a:	463b      	mov	r3, r7
   86d7c:	682a      	ldr	r2, [r5, #0]
   86d7e:	4676      	mov	r6, lr
   86d80:	601a      	str	r2, [r3, #0]
   86d82:	686a      	ldr	r2, [r5, #4]
   86d84:	46d0      	mov	r8, sl
   86d86:	605a      	str	r2, [r3, #4]
   86d88:	68aa      	ldr	r2, [r5, #8]
   86d8a:	609a      	str	r2, [r3, #8]
   86d8c:	e705      	b.n	86b9a <_realloc_r+0xbe>
   86d8e:	ebc4 0b0b 	rsb	fp, r4, fp
   86d92:	eb08 0104 	add.w	r1, r8, r4
   86d96:	f04b 0201 	orr.w	r2, fp, #1
   86d9a:	6099      	str	r1, [r3, #8]
   86d9c:	604a      	str	r2, [r1, #4]
   86d9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86da2:	4648      	mov	r0, r9
   86da4:	f003 0301 	and.w	r3, r3, #1
   86da8:	431c      	orrs	r4, r3
   86daa:	f845 4c04 	str.w	r4, [r5, #-4]
   86dae:	f7ff fe93 	bl	86ad8 <__malloc_unlock>
   86db2:	4628      	mov	r0, r5
   86db4:	e705      	b.n	86bc2 <_realloc_r+0xe6>
   86db6:	4629      	mov	r1, r5
   86db8:	f7ff fe28 	bl	86a0c <memmove>
   86dbc:	e6db      	b.n	86b76 <_realloc_r+0x9a>
   86dbe:	68ab      	ldr	r3, [r5, #8]
   86dc0:	2a24      	cmp	r2, #36	; 0x24
   86dc2:	6083      	str	r3, [r0, #8]
   86dc4:	68eb      	ldr	r3, [r5, #12]
   86dc6:	60c3      	str	r3, [r0, #12]
   86dc8:	d027      	beq.n	86e1a <_realloc_r+0x33e>
   86dca:	f100 0310 	add.w	r3, r0, #16
   86dce:	f105 0210 	add.w	r2, r5, #16
   86dd2:	e6ca      	b.n	86b6a <_realloc_r+0x8e>
   86dd4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86dd8:	462f      	mov	r7, r5
   86dda:	f023 0303 	bic.w	r3, r3, #3
   86dde:	441e      	add	r6, r3
   86de0:	e6db      	b.n	86b9a <_realloc_r+0xbe>
   86de2:	4629      	mov	r1, r5
   86de4:	4638      	mov	r0, r7
   86de6:	4676      	mov	r6, lr
   86de8:	46d0      	mov	r8, sl
   86dea:	f7ff fe0f 	bl	86a0c <memmove>
   86dee:	e6d4      	b.n	86b9a <_realloc_r+0xbe>
   86df0:	463a      	mov	r2, r7
   86df2:	e764      	b.n	86cbe <_realloc_r+0x1e2>
   86df4:	4629      	mov	r1, r5
   86df6:	4638      	mov	r0, r7
   86df8:	461e      	mov	r6, r3
   86dfa:	46d0      	mov	r8, sl
   86dfc:	f7ff fe06 	bl	86a0c <memmove>
   86e00:	e6cb      	b.n	86b9a <_realloc_r+0xbe>
   86e02:	68ab      	ldr	r3, [r5, #8]
   86e04:	2a24      	cmp	r2, #36	; 0x24
   86e06:	f8ca 3010 	str.w	r3, [sl, #16]
   86e0a:	68eb      	ldr	r3, [r5, #12]
   86e0c:	f8ca 3014 	str.w	r3, [sl, #20]
   86e10:	d01a      	beq.n	86e48 <_realloc_r+0x36c>
   86e12:	3510      	adds	r5, #16
   86e14:	f10a 0318 	add.w	r3, sl, #24
   86e18:	e7b0      	b.n	86d7c <_realloc_r+0x2a0>
   86e1a:	692a      	ldr	r2, [r5, #16]
   86e1c:	f100 0318 	add.w	r3, r0, #24
   86e20:	6102      	str	r2, [r0, #16]
   86e22:	6969      	ldr	r1, [r5, #20]
   86e24:	f105 0218 	add.w	r2, r5, #24
   86e28:	6141      	str	r1, [r0, #20]
   86e2a:	e69e      	b.n	86b6a <_realloc_r+0x8e>
   86e2c:	20070500 	.word	0x20070500
   86e30:	68a9      	ldr	r1, [r5, #8]
   86e32:	2a24      	cmp	r2, #36	; 0x24
   86e34:	f8ca 1010 	str.w	r1, [sl, #16]
   86e38:	68e9      	ldr	r1, [r5, #12]
   86e3a:	f8ca 1014 	str.w	r1, [sl, #20]
   86e3e:	d00f      	beq.n	86e60 <_realloc_r+0x384>
   86e40:	3510      	adds	r5, #16
   86e42:	f10a 0218 	add.w	r2, sl, #24
   86e46:	e73a      	b.n	86cbe <_realloc_r+0x1e2>
   86e48:	692a      	ldr	r2, [r5, #16]
   86e4a:	f10a 0320 	add.w	r3, sl, #32
   86e4e:	f8ca 2018 	str.w	r2, [sl, #24]
   86e52:	696a      	ldr	r2, [r5, #20]
   86e54:	3518      	adds	r5, #24
   86e56:	f8ca 201c 	str.w	r2, [sl, #28]
   86e5a:	e78f      	b.n	86d7c <_realloc_r+0x2a0>
   86e5c:	463a      	mov	r2, r7
   86e5e:	e767      	b.n	86d30 <_realloc_r+0x254>
   86e60:	6929      	ldr	r1, [r5, #16]
   86e62:	f10a 0220 	add.w	r2, sl, #32
   86e66:	f8ca 1018 	str.w	r1, [sl, #24]
   86e6a:	6969      	ldr	r1, [r5, #20]
   86e6c:	3518      	adds	r5, #24
   86e6e:	f8ca 101c 	str.w	r1, [sl, #28]
   86e72:	e724      	b.n	86cbe <_realloc_r+0x1e2>
   86e74:	4629      	mov	r1, r5
   86e76:	4638      	mov	r0, r7
   86e78:	9301      	str	r3, [sp, #4]
   86e7a:	f7ff fdc7 	bl	86a0c <memmove>
   86e7e:	9b01      	ldr	r3, [sp, #4]
   86e80:	e75c      	b.n	86d3c <_realloc_r+0x260>
   86e82:	68a9      	ldr	r1, [r5, #8]
   86e84:	2a24      	cmp	r2, #36	; 0x24
   86e86:	f8ca 1010 	str.w	r1, [sl, #16]
   86e8a:	68e9      	ldr	r1, [r5, #12]
   86e8c:	f8ca 1014 	str.w	r1, [sl, #20]
   86e90:	d003      	beq.n	86e9a <_realloc_r+0x3be>
   86e92:	3510      	adds	r5, #16
   86e94:	f10a 0218 	add.w	r2, sl, #24
   86e98:	e74a      	b.n	86d30 <_realloc_r+0x254>
   86e9a:	6929      	ldr	r1, [r5, #16]
   86e9c:	f10a 0220 	add.w	r2, sl, #32
   86ea0:	f8ca 1018 	str.w	r1, [sl, #24]
   86ea4:	6969      	ldr	r1, [r5, #20]
   86ea6:	3518      	adds	r5, #24
   86ea8:	f8ca 101c 	str.w	r1, [sl, #28]
   86eac:	e740      	b.n	86d30 <_realloc_r+0x254>
   86eae:	bf00      	nop

00086eb0 <_sbrk_r>:
   86eb0:	b538      	push	{r3, r4, r5, lr}
   86eb2:	4c07      	ldr	r4, [pc, #28]	; (86ed0 <_sbrk_r+0x20>)
   86eb4:	2300      	movs	r3, #0
   86eb6:	4605      	mov	r5, r0
   86eb8:	4608      	mov	r0, r1
   86eba:	6023      	str	r3, [r4, #0]
   86ebc:	f7fd f9ba 	bl	84234 <_sbrk>
   86ec0:	1c43      	adds	r3, r0, #1
   86ec2:	d000      	beq.n	86ec6 <_sbrk_r+0x16>
   86ec4:	bd38      	pop	{r3, r4, r5, pc}
   86ec6:	6823      	ldr	r3, [r4, #0]
   86ec8:	2b00      	cmp	r3, #0
   86eca:	d0fb      	beq.n	86ec4 <_sbrk_r+0x14>
   86ecc:	602b      	str	r3, [r5, #0]
   86ece:	bd38      	pop	{r3, r4, r5, pc}
   86ed0:	20070ee0 	.word	0x20070ee0

00086ed4 <__sread>:
   86ed4:	b510      	push	{r4, lr}
   86ed6:	460c      	mov	r4, r1
   86ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86edc:	f000 f9c4 	bl	87268 <_read_r>
   86ee0:	2800      	cmp	r0, #0
   86ee2:	db03      	blt.n	86eec <__sread+0x18>
   86ee4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86ee6:	4403      	add	r3, r0
   86ee8:	6523      	str	r3, [r4, #80]	; 0x50
   86eea:	bd10      	pop	{r4, pc}
   86eec:	89a3      	ldrh	r3, [r4, #12]
   86eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86ef2:	81a3      	strh	r3, [r4, #12]
   86ef4:	bd10      	pop	{r4, pc}
   86ef6:	bf00      	nop

00086ef8 <__swrite>:
   86ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86efc:	460c      	mov	r4, r1
   86efe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86f02:	461f      	mov	r7, r3
   86f04:	05cb      	lsls	r3, r1, #23
   86f06:	4616      	mov	r6, r2
   86f08:	4605      	mov	r5, r0
   86f0a:	d507      	bpl.n	86f1c <__swrite+0x24>
   86f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86f10:	2302      	movs	r3, #2
   86f12:	2200      	movs	r2, #0
   86f14:	f000 f992 	bl	8723c <_lseek_r>
   86f18:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86f1c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86f20:	81a1      	strh	r1, [r4, #12]
   86f22:	463b      	mov	r3, r7
   86f24:	4632      	mov	r2, r6
   86f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86f2a:	4628      	mov	r0, r5
   86f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86f30:	f000 b8a2 	b.w	87078 <_write_r>

00086f34 <__sseek>:
   86f34:	b510      	push	{r4, lr}
   86f36:	460c      	mov	r4, r1
   86f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86f3c:	f000 f97e 	bl	8723c <_lseek_r>
   86f40:	89a3      	ldrh	r3, [r4, #12]
   86f42:	1c42      	adds	r2, r0, #1
   86f44:	bf0e      	itee	eq
   86f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86f4e:	6520      	strne	r0, [r4, #80]	; 0x50
   86f50:	81a3      	strh	r3, [r4, #12]
   86f52:	bd10      	pop	{r4, pc}

00086f54 <__sclose>:
   86f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86f58:	f000 b8f6 	b.w	87148 <_close_r>

00086f5c <__swbuf_r>:
   86f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86f5e:	460e      	mov	r6, r1
   86f60:	4614      	mov	r4, r2
   86f62:	4607      	mov	r7, r0
   86f64:	b110      	cbz	r0, 86f6c <__swbuf_r+0x10>
   86f66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86f68:	2b00      	cmp	r3, #0
   86f6a:	d04a      	beq.n	87002 <__swbuf_r+0xa6>
   86f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86f70:	69a3      	ldr	r3, [r4, #24]
   86f72:	b291      	uxth	r1, r2
   86f74:	0708      	lsls	r0, r1, #28
   86f76:	60a3      	str	r3, [r4, #8]
   86f78:	d538      	bpl.n	86fec <__swbuf_r+0x90>
   86f7a:	6923      	ldr	r3, [r4, #16]
   86f7c:	2b00      	cmp	r3, #0
   86f7e:	d035      	beq.n	86fec <__swbuf_r+0x90>
   86f80:	0489      	lsls	r1, r1, #18
   86f82:	b2f5      	uxtb	r5, r6
   86f84:	d515      	bpl.n	86fb2 <__swbuf_r+0x56>
   86f86:	6822      	ldr	r2, [r4, #0]
   86f88:	6961      	ldr	r1, [r4, #20]
   86f8a:	1ad3      	subs	r3, r2, r3
   86f8c:	428b      	cmp	r3, r1
   86f8e:	da1c      	bge.n	86fca <__swbuf_r+0x6e>
   86f90:	3301      	adds	r3, #1
   86f92:	68a1      	ldr	r1, [r4, #8]
   86f94:	1c50      	adds	r0, r2, #1
   86f96:	3901      	subs	r1, #1
   86f98:	60a1      	str	r1, [r4, #8]
   86f9a:	6020      	str	r0, [r4, #0]
   86f9c:	7016      	strb	r6, [r2, #0]
   86f9e:	6962      	ldr	r2, [r4, #20]
   86fa0:	429a      	cmp	r2, r3
   86fa2:	d01a      	beq.n	86fda <__swbuf_r+0x7e>
   86fa4:	89a3      	ldrh	r3, [r4, #12]
   86fa6:	07db      	lsls	r3, r3, #31
   86fa8:	d501      	bpl.n	86fae <__swbuf_r+0x52>
   86faa:	2d0a      	cmp	r5, #10
   86fac:	d015      	beq.n	86fda <__swbuf_r+0x7e>
   86fae:	4628      	mov	r0, r5
   86fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86fb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86fb8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86fbc:	81a2      	strh	r2, [r4, #12]
   86fbe:	6822      	ldr	r2, [r4, #0]
   86fc0:	6661      	str	r1, [r4, #100]	; 0x64
   86fc2:	6961      	ldr	r1, [r4, #20]
   86fc4:	1ad3      	subs	r3, r2, r3
   86fc6:	428b      	cmp	r3, r1
   86fc8:	dbe2      	blt.n	86f90 <__swbuf_r+0x34>
   86fca:	4621      	mov	r1, r4
   86fcc:	4638      	mov	r0, r7
   86fce:	f7fe fd3f 	bl	85a50 <_fflush_r>
   86fd2:	b940      	cbnz	r0, 86fe6 <__swbuf_r+0x8a>
   86fd4:	6822      	ldr	r2, [r4, #0]
   86fd6:	2301      	movs	r3, #1
   86fd8:	e7db      	b.n	86f92 <__swbuf_r+0x36>
   86fda:	4621      	mov	r1, r4
   86fdc:	4638      	mov	r0, r7
   86fde:	f7fe fd37 	bl	85a50 <_fflush_r>
   86fe2:	2800      	cmp	r0, #0
   86fe4:	d0e3      	beq.n	86fae <__swbuf_r+0x52>
   86fe6:	f04f 30ff 	mov.w	r0, #4294967295
   86fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86fec:	4621      	mov	r1, r4
   86fee:	4638      	mov	r0, r7
   86ff0:	f7fe fc16 	bl	85820 <__swsetup_r>
   86ff4:	2800      	cmp	r0, #0
   86ff6:	d1f6      	bne.n	86fe6 <__swbuf_r+0x8a>
   86ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86ffc:	6923      	ldr	r3, [r4, #16]
   86ffe:	b291      	uxth	r1, r2
   87000:	e7be      	b.n	86f80 <__swbuf_r+0x24>
   87002:	f7fe fdb9 	bl	85b78 <__sinit>
   87006:	e7b1      	b.n	86f6c <__swbuf_r+0x10>

00087008 <_wcrtomb_r>:
   87008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8700c:	4605      	mov	r5, r0
   8700e:	b086      	sub	sp, #24
   87010:	461e      	mov	r6, r3
   87012:	460c      	mov	r4, r1
   87014:	b1a1      	cbz	r1, 87040 <_wcrtomb_r+0x38>
   87016:	4b10      	ldr	r3, [pc, #64]	; (87058 <_wcrtomb_r+0x50>)
   87018:	4617      	mov	r7, r2
   8701a:	f8d3 8000 	ldr.w	r8, [r3]
   8701e:	f7ff f907 	bl	86230 <__locale_charset>
   87022:	9600      	str	r6, [sp, #0]
   87024:	4603      	mov	r3, r0
   87026:	463a      	mov	r2, r7
   87028:	4621      	mov	r1, r4
   8702a:	4628      	mov	r0, r5
   8702c:	47c0      	blx	r8
   8702e:	1c43      	adds	r3, r0, #1
   87030:	d103      	bne.n	8703a <_wcrtomb_r+0x32>
   87032:	2200      	movs	r2, #0
   87034:	238a      	movs	r3, #138	; 0x8a
   87036:	6032      	str	r2, [r6, #0]
   87038:	602b      	str	r3, [r5, #0]
   8703a:	b006      	add	sp, #24
   8703c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   87040:	4b05      	ldr	r3, [pc, #20]	; (87058 <_wcrtomb_r+0x50>)
   87042:	681f      	ldr	r7, [r3, #0]
   87044:	f7ff f8f4 	bl	86230 <__locale_charset>
   87048:	9600      	str	r6, [sp, #0]
   8704a:	4603      	mov	r3, r0
   8704c:	4622      	mov	r2, r4
   8704e:	a903      	add	r1, sp, #12
   87050:	4628      	mov	r0, r5
   87052:	47b8      	blx	r7
   87054:	e7eb      	b.n	8702e <_wcrtomb_r+0x26>
   87056:	bf00      	nop
   87058:	20070910 	.word	0x20070910

0008705c <__ascii_wctomb>:
   8705c:	b121      	cbz	r1, 87068 <__ascii_wctomb+0xc>
   8705e:	2aff      	cmp	r2, #255	; 0xff
   87060:	d804      	bhi.n	8706c <__ascii_wctomb+0x10>
   87062:	700a      	strb	r2, [r1, #0]
   87064:	2001      	movs	r0, #1
   87066:	4770      	bx	lr
   87068:	4608      	mov	r0, r1
   8706a:	4770      	bx	lr
   8706c:	238a      	movs	r3, #138	; 0x8a
   8706e:	6003      	str	r3, [r0, #0]
   87070:	f04f 30ff 	mov.w	r0, #4294967295
   87074:	4770      	bx	lr
   87076:	bf00      	nop

00087078 <_write_r>:
   87078:	b570      	push	{r4, r5, r6, lr}
   8707a:	460d      	mov	r5, r1
   8707c:	4c08      	ldr	r4, [pc, #32]	; (870a0 <_write_r+0x28>)
   8707e:	4611      	mov	r1, r2
   87080:	4606      	mov	r6, r0
   87082:	461a      	mov	r2, r3
   87084:	4628      	mov	r0, r5
   87086:	2300      	movs	r3, #0
   87088:	6023      	str	r3, [r4, #0]
   8708a:	f7fa ff7b 	bl	81f84 <_write>
   8708e:	1c43      	adds	r3, r0, #1
   87090:	d000      	beq.n	87094 <_write_r+0x1c>
   87092:	bd70      	pop	{r4, r5, r6, pc}
   87094:	6823      	ldr	r3, [r4, #0]
   87096:	2b00      	cmp	r3, #0
   87098:	d0fb      	beq.n	87092 <_write_r+0x1a>
   8709a:	6033      	str	r3, [r6, #0]
   8709c:	bd70      	pop	{r4, r5, r6, pc}
   8709e:	bf00      	nop
   870a0:	20070ee0 	.word	0x20070ee0

000870a4 <__register_exitproc>:
   870a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   870a8:	4c25      	ldr	r4, [pc, #148]	; (87140 <__register_exitproc+0x9c>)
   870aa:	4606      	mov	r6, r0
   870ac:	6825      	ldr	r5, [r4, #0]
   870ae:	4688      	mov	r8, r1
   870b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   870b4:	4692      	mov	sl, r2
   870b6:	4699      	mov	r9, r3
   870b8:	b3c4      	cbz	r4, 8712c <__register_exitproc+0x88>
   870ba:	6860      	ldr	r0, [r4, #4]
   870bc:	281f      	cmp	r0, #31
   870be:	dc17      	bgt.n	870f0 <__register_exitproc+0x4c>
   870c0:	1c41      	adds	r1, r0, #1
   870c2:	b176      	cbz	r6, 870e2 <__register_exitproc+0x3e>
   870c4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   870c8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   870cc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   870d0:	2201      	movs	r2, #1
   870d2:	4082      	lsls	r2, r0
   870d4:	4315      	orrs	r5, r2
   870d6:	2e02      	cmp	r6, #2
   870d8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   870dc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   870e0:	d01e      	beq.n	87120 <__register_exitproc+0x7c>
   870e2:	1c83      	adds	r3, r0, #2
   870e4:	6061      	str	r1, [r4, #4]
   870e6:	2000      	movs	r0, #0
   870e8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   870ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   870f0:	4b14      	ldr	r3, [pc, #80]	; (87144 <__register_exitproc+0xa0>)
   870f2:	b303      	cbz	r3, 87136 <__register_exitproc+0x92>
   870f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   870f8:	f7ff f918 	bl	8632c <malloc>
   870fc:	4604      	mov	r4, r0
   870fe:	b1d0      	cbz	r0, 87136 <__register_exitproc+0x92>
   87100:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   87104:	2700      	movs	r7, #0
   87106:	e884 0088 	stmia.w	r4, {r3, r7}
   8710a:	4638      	mov	r0, r7
   8710c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   87110:	2101      	movs	r1, #1
   87112:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   87116:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8711a:	2e00      	cmp	r6, #0
   8711c:	d0e1      	beq.n	870e2 <__register_exitproc+0x3e>
   8711e:	e7d1      	b.n	870c4 <__register_exitproc+0x20>
   87120:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   87124:	431a      	orrs	r2, r3
   87126:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8712a:	e7da      	b.n	870e2 <__register_exitproc+0x3e>
   8712c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   87130:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   87134:	e7c1      	b.n	870ba <__register_exitproc+0x16>
   87136:	f04f 30ff 	mov.w	r0, #4294967295
   8713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8713e:	bf00      	nop
   87140:	00087674 	.word	0x00087674
   87144:	0008632d 	.word	0x0008632d

00087148 <_close_r>:
   87148:	b538      	push	{r3, r4, r5, lr}
   8714a:	4c07      	ldr	r4, [pc, #28]	; (87168 <_close_r+0x20>)
   8714c:	2300      	movs	r3, #0
   8714e:	4605      	mov	r5, r0
   87150:	4608      	mov	r0, r1
   87152:	6023      	str	r3, [r4, #0]
   87154:	f7fd f88c 	bl	84270 <_close>
   87158:	1c43      	adds	r3, r0, #1
   8715a:	d000      	beq.n	8715e <_close_r+0x16>
   8715c:	bd38      	pop	{r3, r4, r5, pc}
   8715e:	6823      	ldr	r3, [r4, #0]
   87160:	2b00      	cmp	r3, #0
   87162:	d0fb      	beq.n	8715c <_close_r+0x14>
   87164:	602b      	str	r3, [r5, #0]
   87166:	bd38      	pop	{r3, r4, r5, pc}
   87168:	20070ee0 	.word	0x20070ee0

0008716c <_fclose_r>:
   8716c:	2900      	cmp	r1, #0
   8716e:	d03d      	beq.n	871ec <_fclose_r+0x80>
   87170:	b570      	push	{r4, r5, r6, lr}
   87172:	4605      	mov	r5, r0
   87174:	460c      	mov	r4, r1
   87176:	b108      	cbz	r0, 8717c <_fclose_r+0x10>
   87178:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8717a:	b37b      	cbz	r3, 871dc <_fclose_r+0x70>
   8717c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87180:	b90b      	cbnz	r3, 87186 <_fclose_r+0x1a>
   87182:	2000      	movs	r0, #0
   87184:	bd70      	pop	{r4, r5, r6, pc}
   87186:	4621      	mov	r1, r4
   87188:	4628      	mov	r0, r5
   8718a:	f7fe fbbd 	bl	85908 <__sflush_r>
   8718e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   87190:	4606      	mov	r6, r0
   87192:	b133      	cbz	r3, 871a2 <_fclose_r+0x36>
   87194:	69e1      	ldr	r1, [r4, #28]
   87196:	4628      	mov	r0, r5
   87198:	4798      	blx	r3
   8719a:	2800      	cmp	r0, #0
   8719c:	bfb8      	it	lt
   8719e:	f04f 36ff 	movlt.w	r6, #4294967295
   871a2:	89a3      	ldrh	r3, [r4, #12]
   871a4:	061b      	lsls	r3, r3, #24
   871a6:	d41c      	bmi.n	871e2 <_fclose_r+0x76>
   871a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   871aa:	b141      	cbz	r1, 871be <_fclose_r+0x52>
   871ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
   871b0:	4299      	cmp	r1, r3
   871b2:	d002      	beq.n	871ba <_fclose_r+0x4e>
   871b4:	4628      	mov	r0, r5
   871b6:	f7fe fda7 	bl	85d08 <_free_r>
   871ba:	2300      	movs	r3, #0
   871bc:	6323      	str	r3, [r4, #48]	; 0x30
   871be:	6c61      	ldr	r1, [r4, #68]	; 0x44
   871c0:	b121      	cbz	r1, 871cc <_fclose_r+0x60>
   871c2:	4628      	mov	r0, r5
   871c4:	f7fe fda0 	bl	85d08 <_free_r>
   871c8:	2300      	movs	r3, #0
   871ca:	6463      	str	r3, [r4, #68]	; 0x44
   871cc:	f7fe fcda 	bl	85b84 <__sfp_lock_acquire>
   871d0:	2300      	movs	r3, #0
   871d2:	81a3      	strh	r3, [r4, #12]
   871d4:	f7fe fcd8 	bl	85b88 <__sfp_lock_release>
   871d8:	4630      	mov	r0, r6
   871da:	bd70      	pop	{r4, r5, r6, pc}
   871dc:	f7fe fccc 	bl	85b78 <__sinit>
   871e0:	e7cc      	b.n	8717c <_fclose_r+0x10>
   871e2:	6921      	ldr	r1, [r4, #16]
   871e4:	4628      	mov	r0, r5
   871e6:	f7fe fd8f 	bl	85d08 <_free_r>
   871ea:	e7dd      	b.n	871a8 <_fclose_r+0x3c>
   871ec:	2000      	movs	r0, #0
   871ee:	4770      	bx	lr

000871f0 <_fstat_r>:
   871f0:	b538      	push	{r3, r4, r5, lr}
   871f2:	460b      	mov	r3, r1
   871f4:	4c07      	ldr	r4, [pc, #28]	; (87214 <_fstat_r+0x24>)
   871f6:	4605      	mov	r5, r0
   871f8:	4611      	mov	r1, r2
   871fa:	4618      	mov	r0, r3
   871fc:	2300      	movs	r3, #0
   871fe:	6023      	str	r3, [r4, #0]
   87200:	f7fd f842 	bl	84288 <_fstat>
   87204:	1c43      	adds	r3, r0, #1
   87206:	d000      	beq.n	8720a <_fstat_r+0x1a>
   87208:	bd38      	pop	{r3, r4, r5, pc}
   8720a:	6823      	ldr	r3, [r4, #0]
   8720c:	2b00      	cmp	r3, #0
   8720e:	d0fb      	beq.n	87208 <_fstat_r+0x18>
   87210:	602b      	str	r3, [r5, #0]
   87212:	bd38      	pop	{r3, r4, r5, pc}
   87214:	20070ee0 	.word	0x20070ee0

00087218 <_isatty_r>:
   87218:	b538      	push	{r3, r4, r5, lr}
   8721a:	4c07      	ldr	r4, [pc, #28]	; (87238 <_isatty_r+0x20>)
   8721c:	2300      	movs	r3, #0
   8721e:	4605      	mov	r5, r0
   87220:	4608      	mov	r0, r1
   87222:	6023      	str	r3, [r4, #0]
   87224:	f7fd f840 	bl	842a8 <_isatty>
   87228:	1c43      	adds	r3, r0, #1
   8722a:	d000      	beq.n	8722e <_isatty_r+0x16>
   8722c:	bd38      	pop	{r3, r4, r5, pc}
   8722e:	6823      	ldr	r3, [r4, #0]
   87230:	2b00      	cmp	r3, #0
   87232:	d0fb      	beq.n	8722c <_isatty_r+0x14>
   87234:	602b      	str	r3, [r5, #0]
   87236:	bd38      	pop	{r3, r4, r5, pc}
   87238:	20070ee0 	.word	0x20070ee0

0008723c <_lseek_r>:
   8723c:	b570      	push	{r4, r5, r6, lr}
   8723e:	460d      	mov	r5, r1
   87240:	4c08      	ldr	r4, [pc, #32]	; (87264 <_lseek_r+0x28>)
   87242:	4611      	mov	r1, r2
   87244:	4606      	mov	r6, r0
   87246:	461a      	mov	r2, r3
   87248:	4628      	mov	r0, r5
   8724a:	2300      	movs	r3, #0
   8724c:	6023      	str	r3, [r4, #0]
   8724e:	f7fd f835 	bl	842bc <_lseek>
   87252:	1c43      	adds	r3, r0, #1
   87254:	d000      	beq.n	87258 <_lseek_r+0x1c>
   87256:	bd70      	pop	{r4, r5, r6, pc}
   87258:	6823      	ldr	r3, [r4, #0]
   8725a:	2b00      	cmp	r3, #0
   8725c:	d0fb      	beq.n	87256 <_lseek_r+0x1a>
   8725e:	6033      	str	r3, [r6, #0]
   87260:	bd70      	pop	{r4, r5, r6, pc}
   87262:	bf00      	nop
   87264:	20070ee0 	.word	0x20070ee0

00087268 <_read_r>:
   87268:	b570      	push	{r4, r5, r6, lr}
   8726a:	460d      	mov	r5, r1
   8726c:	4c08      	ldr	r4, [pc, #32]	; (87290 <_read_r+0x28>)
   8726e:	4611      	mov	r1, r2
   87270:	4606      	mov	r6, r0
   87272:	461a      	mov	r2, r3
   87274:	4628      	mov	r0, r5
   87276:	2300      	movs	r3, #0
   87278:	6023      	str	r3, [r4, #0]
   8727a:	f7fa fe59 	bl	81f30 <_read>
   8727e:	1c43      	adds	r3, r0, #1
   87280:	d000      	beq.n	87284 <_read_r+0x1c>
   87282:	bd70      	pop	{r4, r5, r6, pc}
   87284:	6823      	ldr	r3, [r4, #0]
   87286:	2b00      	cmp	r3, #0
   87288:	d0fb      	beq.n	87282 <_read_r+0x1a>
   8728a:	6033      	str	r3, [r6, #0]
   8728c:	bd70      	pop	{r4, r5, r6, pc}
   8728e:	bf00      	nop
   87290:	20070ee0 	.word	0x20070ee0

00087294 <__aeabi_uldivmod>:
   87294:	b953      	cbnz	r3, 872ac <__aeabi_uldivmod+0x18>
   87296:	b94a      	cbnz	r2, 872ac <__aeabi_uldivmod+0x18>
   87298:	2900      	cmp	r1, #0
   8729a:	bf08      	it	eq
   8729c:	2800      	cmpeq	r0, #0
   8729e:	bf1c      	itt	ne
   872a0:	f04f 31ff 	movne.w	r1, #4294967295
   872a4:	f04f 30ff 	movne.w	r0, #4294967295
   872a8:	f000 b982 	b.w	875b0 <__aeabi_idiv0>
   872ac:	f1ad 0c08 	sub.w	ip, sp, #8
   872b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   872b4:	f000 f806 	bl	872c4 <__udivmoddi4>
   872b8:	f8dd e004 	ldr.w	lr, [sp, #4]
   872bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   872c0:	b004      	add	sp, #16
   872c2:	4770      	bx	lr

000872c4 <__udivmoddi4>:
   872c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   872c8:	468c      	mov	ip, r1
   872ca:	460c      	mov	r4, r1
   872cc:	4605      	mov	r5, r0
   872ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
   872d0:	2b00      	cmp	r3, #0
   872d2:	d14f      	bne.n	87374 <__udivmoddi4+0xb0>
   872d4:	428a      	cmp	r2, r1
   872d6:	4617      	mov	r7, r2
   872d8:	d96b      	bls.n	873b2 <__udivmoddi4+0xee>
   872da:	fab2 fe82 	clz	lr, r2
   872de:	f1be 0f00 	cmp.w	lr, #0
   872e2:	d00b      	beq.n	872fc <__udivmoddi4+0x38>
   872e4:	f1ce 0520 	rsb	r5, lr, #32
   872e8:	fa20 f505 	lsr.w	r5, r0, r5
   872ec:	fa01 f30e 	lsl.w	r3, r1, lr
   872f0:	ea45 0c03 	orr.w	ip, r5, r3
   872f4:	fa02 f70e 	lsl.w	r7, r2, lr
   872f8:	fa00 f50e 	lsl.w	r5, r0, lr
   872fc:	0c39      	lsrs	r1, r7, #16
   872fe:	fbbc f0f1 	udiv	r0, ip, r1
   87302:	b2ba      	uxth	r2, r7
   87304:	fb01 c310 	mls	r3, r1, r0, ip
   87308:	fb00 f802 	mul.w	r8, r0, r2
   8730c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   87310:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   87314:	45a0      	cmp	r8, r4
   87316:	d909      	bls.n	8732c <__udivmoddi4+0x68>
   87318:	19e4      	adds	r4, r4, r7
   8731a:	f100 33ff 	add.w	r3, r0, #4294967295
   8731e:	f080 8128 	bcs.w	87572 <__udivmoddi4+0x2ae>
   87322:	45a0      	cmp	r8, r4
   87324:	f240 8125 	bls.w	87572 <__udivmoddi4+0x2ae>
   87328:	3802      	subs	r0, #2
   8732a:	443c      	add	r4, r7
   8732c:	ebc8 0404 	rsb	r4, r8, r4
   87330:	fbb4 f3f1 	udiv	r3, r4, r1
   87334:	fb01 4c13 	mls	ip, r1, r3, r4
   87338:	fb03 f202 	mul.w	r2, r3, r2
   8733c:	b2ac      	uxth	r4, r5
   8733e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   87342:	428a      	cmp	r2, r1
   87344:	d909      	bls.n	8735a <__udivmoddi4+0x96>
   87346:	19c9      	adds	r1, r1, r7
   87348:	f103 34ff 	add.w	r4, r3, #4294967295
   8734c:	f080 810f 	bcs.w	8756e <__udivmoddi4+0x2aa>
   87350:	428a      	cmp	r2, r1
   87352:	f240 810c 	bls.w	8756e <__udivmoddi4+0x2aa>
   87356:	3b02      	subs	r3, #2
   87358:	4439      	add	r1, r7
   8735a:	1a8a      	subs	r2, r1, r2
   8735c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   87360:	2100      	movs	r1, #0
   87362:	2e00      	cmp	r6, #0
   87364:	d063      	beq.n	8742e <__udivmoddi4+0x16a>
   87366:	fa22 f20e 	lsr.w	r2, r2, lr
   8736a:	2300      	movs	r3, #0
   8736c:	e886 000c 	stmia.w	r6, {r2, r3}
   87370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87374:	428b      	cmp	r3, r1
   87376:	d907      	bls.n	87388 <__udivmoddi4+0xc4>
   87378:	2e00      	cmp	r6, #0
   8737a:	d056      	beq.n	8742a <__udivmoddi4+0x166>
   8737c:	2100      	movs	r1, #0
   8737e:	e886 0011 	stmia.w	r6, {r0, r4}
   87382:	4608      	mov	r0, r1
   87384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87388:	fab3 f183 	clz	r1, r3
   8738c:	2900      	cmp	r1, #0
   8738e:	f040 8093 	bne.w	874b8 <__udivmoddi4+0x1f4>
   87392:	42a3      	cmp	r3, r4
   87394:	d302      	bcc.n	8739c <__udivmoddi4+0xd8>
   87396:	4282      	cmp	r2, r0
   87398:	f200 80fe 	bhi.w	87598 <__udivmoddi4+0x2d4>
   8739c:	1a85      	subs	r5, r0, r2
   8739e:	eb64 0303 	sbc.w	r3, r4, r3
   873a2:	469c      	mov	ip, r3
   873a4:	2001      	movs	r0, #1
   873a6:	2e00      	cmp	r6, #0
   873a8:	d041      	beq.n	8742e <__udivmoddi4+0x16a>
   873aa:	e886 1020 	stmia.w	r6, {r5, ip}
   873ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873b2:	b912      	cbnz	r2, 873ba <__udivmoddi4+0xf6>
   873b4:	2701      	movs	r7, #1
   873b6:	fbb7 f7f2 	udiv	r7, r7, r2
   873ba:	fab7 fe87 	clz	lr, r7
   873be:	f1be 0f00 	cmp.w	lr, #0
   873c2:	d136      	bne.n	87432 <__udivmoddi4+0x16e>
   873c4:	1be4      	subs	r4, r4, r7
   873c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   873ca:	fa1f f987 	uxth.w	r9, r7
   873ce:	2101      	movs	r1, #1
   873d0:	fbb4 f3f8 	udiv	r3, r4, r8
   873d4:	fb08 4413 	mls	r4, r8, r3, r4
   873d8:	fb09 f203 	mul.w	r2, r9, r3
   873dc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   873e0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   873e4:	42a2      	cmp	r2, r4
   873e6:	d907      	bls.n	873f8 <__udivmoddi4+0x134>
   873e8:	19e4      	adds	r4, r4, r7
   873ea:	f103 30ff 	add.w	r0, r3, #4294967295
   873ee:	d202      	bcs.n	873f6 <__udivmoddi4+0x132>
   873f0:	42a2      	cmp	r2, r4
   873f2:	f200 80d3 	bhi.w	8759c <__udivmoddi4+0x2d8>
   873f6:	4603      	mov	r3, r0
   873f8:	1aa4      	subs	r4, r4, r2
   873fa:	fbb4 f0f8 	udiv	r0, r4, r8
   873fe:	fb08 4810 	mls	r8, r8, r0, r4
   87402:	fb09 f900 	mul.w	r9, r9, r0
   87406:	b2ac      	uxth	r4, r5
   87408:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   8740c:	4591      	cmp	r9, r2
   8740e:	d907      	bls.n	87420 <__udivmoddi4+0x15c>
   87410:	19d2      	adds	r2, r2, r7
   87412:	f100 34ff 	add.w	r4, r0, #4294967295
   87416:	d202      	bcs.n	8741e <__udivmoddi4+0x15a>
   87418:	4591      	cmp	r9, r2
   8741a:	f200 80ba 	bhi.w	87592 <__udivmoddi4+0x2ce>
   8741e:	4620      	mov	r0, r4
   87420:	ebc9 0202 	rsb	r2, r9, r2
   87424:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   87428:	e79b      	b.n	87362 <__udivmoddi4+0x9e>
   8742a:	4631      	mov	r1, r6
   8742c:	4630      	mov	r0, r6
   8742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87432:	fa07 f70e 	lsl.w	r7, r7, lr
   87436:	f1ce 0c20 	rsb	ip, lr, #32
   8743a:	fa24 f30c 	lsr.w	r3, r4, ip
   8743e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   87442:	fbb3 faf8 	udiv	sl, r3, r8
   87446:	fa1f f987 	uxth.w	r9, r7
   8744a:	fb08 351a 	mls	r5, r8, sl, r3
   8744e:	fa20 fc0c 	lsr.w	ip, r0, ip
   87452:	fa04 f40e 	lsl.w	r4, r4, lr
   87456:	fb0a fb09 	mul.w	fp, sl, r9
   8745a:	ea4c 0c04 	orr.w	ip, ip, r4
   8745e:	ea4f 421c 	mov.w	r2, ip, lsr #16
   87462:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   87466:	459b      	cmp	fp, r3
   87468:	fa00 f50e 	lsl.w	r5, r0, lr
   8746c:	d90a      	bls.n	87484 <__udivmoddi4+0x1c0>
   8746e:	19db      	adds	r3, r3, r7
   87470:	f10a 32ff 	add.w	r2, sl, #4294967295
   87474:	f080 808b 	bcs.w	8758e <__udivmoddi4+0x2ca>
   87478:	459b      	cmp	fp, r3
   8747a:	f240 8088 	bls.w	8758e <__udivmoddi4+0x2ca>
   8747e:	f1aa 0a02 	sub.w	sl, sl, #2
   87482:	443b      	add	r3, r7
   87484:	ebcb 0303 	rsb	r3, fp, r3
   87488:	fbb3 f0f8 	udiv	r0, r3, r8
   8748c:	fb08 3310 	mls	r3, r8, r0, r3
   87490:	fb00 f409 	mul.w	r4, r0, r9
   87494:	fa1f fc8c 	uxth.w	ip, ip
   87498:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   8749c:	429c      	cmp	r4, r3
   8749e:	d907      	bls.n	874b0 <__udivmoddi4+0x1ec>
   874a0:	19db      	adds	r3, r3, r7
   874a2:	f100 32ff 	add.w	r2, r0, #4294967295
   874a6:	d26e      	bcs.n	87586 <__udivmoddi4+0x2c2>
   874a8:	429c      	cmp	r4, r3
   874aa:	d96c      	bls.n	87586 <__udivmoddi4+0x2c2>
   874ac:	3802      	subs	r0, #2
   874ae:	443b      	add	r3, r7
   874b0:	1b1c      	subs	r4, r3, r4
   874b2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   874b6:	e78b      	b.n	873d0 <__udivmoddi4+0x10c>
   874b8:	f1c1 0e20 	rsb	lr, r1, #32
   874bc:	408b      	lsls	r3, r1
   874be:	fa22 fc0e 	lsr.w	ip, r2, lr
   874c2:	ea4c 0c03 	orr.w	ip, ip, r3
   874c6:	fa24 f70e 	lsr.w	r7, r4, lr
   874ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
   874ce:	fbb7 faf9 	udiv	sl, r7, r9
   874d2:	fa1f f38c 	uxth.w	r3, ip
   874d6:	fb09 771a 	mls	r7, r9, sl, r7
   874da:	fa20 f80e 	lsr.w	r8, r0, lr
   874de:	408c      	lsls	r4, r1
   874e0:	fb0a f503 	mul.w	r5, sl, r3
   874e4:	ea48 0404 	orr.w	r4, r8, r4
   874e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   874ec:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   874f0:	42bd      	cmp	r5, r7
   874f2:	fa02 f201 	lsl.w	r2, r2, r1
   874f6:	fa00 fb01 	lsl.w	fp, r0, r1
   874fa:	d909      	bls.n	87510 <__udivmoddi4+0x24c>
   874fc:	eb17 070c 	adds.w	r7, r7, ip
   87500:	f10a 30ff 	add.w	r0, sl, #4294967295
   87504:	d241      	bcs.n	8758a <__udivmoddi4+0x2c6>
   87506:	42bd      	cmp	r5, r7
   87508:	d93f      	bls.n	8758a <__udivmoddi4+0x2c6>
   8750a:	f1aa 0a02 	sub.w	sl, sl, #2
   8750e:	4467      	add	r7, ip
   87510:	1b7f      	subs	r7, r7, r5
   87512:	fbb7 f5f9 	udiv	r5, r7, r9
   87516:	fb09 7715 	mls	r7, r9, r5, r7
   8751a:	fb05 f303 	mul.w	r3, r5, r3
   8751e:	b2a4      	uxth	r4, r4
   87520:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   87524:	42bb      	cmp	r3, r7
   87526:	d908      	bls.n	8753a <__udivmoddi4+0x276>
   87528:	eb17 070c 	adds.w	r7, r7, ip
   8752c:	f105 30ff 	add.w	r0, r5, #4294967295
   87530:	d227      	bcs.n	87582 <__udivmoddi4+0x2be>
   87532:	42bb      	cmp	r3, r7
   87534:	d925      	bls.n	87582 <__udivmoddi4+0x2be>
   87536:	3d02      	subs	r5, #2
   87538:	4467      	add	r7, ip
   8753a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8753e:	fba0 8902 	umull	r8, r9, r0, r2
   87542:	1aff      	subs	r7, r7, r3
   87544:	454f      	cmp	r7, r9
   87546:	4645      	mov	r5, r8
   87548:	464c      	mov	r4, r9
   8754a:	d314      	bcc.n	87576 <__udivmoddi4+0x2b2>
   8754c:	d029      	beq.n	875a2 <__udivmoddi4+0x2de>
   8754e:	b366      	cbz	r6, 875aa <__udivmoddi4+0x2e6>
   87550:	ebbb 0305 	subs.w	r3, fp, r5
   87554:	eb67 0704 	sbc.w	r7, r7, r4
   87558:	fa07 fe0e 	lsl.w	lr, r7, lr
   8755c:	40cb      	lsrs	r3, r1
   8755e:	40cf      	lsrs	r7, r1
   87560:	ea4e 0303 	orr.w	r3, lr, r3
   87564:	e886 0088 	stmia.w	r6, {r3, r7}
   87568:	2100      	movs	r1, #0
   8756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8756e:	4623      	mov	r3, r4
   87570:	e6f3      	b.n	8735a <__udivmoddi4+0x96>
   87572:	4618      	mov	r0, r3
   87574:	e6da      	b.n	8732c <__udivmoddi4+0x68>
   87576:	ebb8 0502 	subs.w	r5, r8, r2
   8757a:	eb69 040c 	sbc.w	r4, r9, ip
   8757e:	3801      	subs	r0, #1
   87580:	e7e5      	b.n	8754e <__udivmoddi4+0x28a>
   87582:	4605      	mov	r5, r0
   87584:	e7d9      	b.n	8753a <__udivmoddi4+0x276>
   87586:	4610      	mov	r0, r2
   87588:	e792      	b.n	874b0 <__udivmoddi4+0x1ec>
   8758a:	4682      	mov	sl, r0
   8758c:	e7c0      	b.n	87510 <__udivmoddi4+0x24c>
   8758e:	4692      	mov	sl, r2
   87590:	e778      	b.n	87484 <__udivmoddi4+0x1c0>
   87592:	3802      	subs	r0, #2
   87594:	443a      	add	r2, r7
   87596:	e743      	b.n	87420 <__udivmoddi4+0x15c>
   87598:	4608      	mov	r0, r1
   8759a:	e704      	b.n	873a6 <__udivmoddi4+0xe2>
   8759c:	3b02      	subs	r3, #2
   8759e:	443c      	add	r4, r7
   875a0:	e72a      	b.n	873f8 <__udivmoddi4+0x134>
   875a2:	45c3      	cmp	fp, r8
   875a4:	d3e7      	bcc.n	87576 <__udivmoddi4+0x2b2>
   875a6:	463c      	mov	r4, r7
   875a8:	e7d1      	b.n	8754e <__udivmoddi4+0x28a>
   875aa:	4631      	mov	r1, r6
   875ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000875b0 <__aeabi_idiv0>:
   875b0:	4770      	bx	lr
   875b2:	bf00      	nop

000875b4 <can_bit_time>:
   875b4:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   875c4:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   875d4:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   875e4:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   875f4:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   87604:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   87614:	0718 0808 4304 0819 0808 4404 6f63 6e75     .....C.....Dcoun
   87624:	2074 203d 6425 000a 6577 636c 6d6f 0a65     t = %d..welcome.
   87634:	0000 0000 6556 7372 6f69 316e 312e 000a     ....Version1.1..
   87644:	6176 756c 2065 616d 6374 6568 0a64 0000     value matched...
   87654:	616d 696e 7570 616c 6974 6e6f 000a 0000     manipulation....
   87664:	6641 6574 2072 6425 000a 0000 0043 0000     After %d....C...

00087674 <_global_impure_ptr>:
   87674:	00b0 2007                                   ... 

00087678 <zeroes.6993>:
   87678:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   87688:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   87698:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   876a8:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

000876b8 <blanks.6992>:
   876b8:	2020 2020 2020 2020 2020 2020 2020 2020                     

000876c8 <_init>:
   876c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876ca:	bf00      	nop
   876cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   876ce:	bc08      	pop	{r3}
   876d0:	469e      	mov	lr, r3
   876d2:	4770      	bx	lr

000876d4 <__init_array_start>:
   876d4:	000858e9 	.word	0x000858e9

000876d8 <__frame_dummy_init_array_entry>:
   876d8:	00080119                                ....

000876dc <_fini>:
   876dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   876de:	bf00      	nop
   876e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   876e2:	bc08      	pop	{r3}
   876e4:	469e      	mov	lr, r3
   876e6:	4770      	bx	lr

000876e8 <__fini_array_start>:
   876e8:	000800f5 	.word	0x000800f5
